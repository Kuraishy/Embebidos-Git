

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Apr 11 20:26:23 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    44                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    45  0000                     
    46                           ; Version 1.45
    47                           ; Generated 16/11/2017 GMT
    48                           ; 
    49                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    50                           ; All rights reserved.
    51                           ; 
    52                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    53                           ; 
    54                           ; Redistribution and use in source and binary forms, with or without modification, are
    55                           ; permitted provided that the following conditions are met:
    56                           ; 
    57                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    58                           ;        conditions and the following disclaimer.
    59                           ; 
    60                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    61                           ;        of conditions and the following disclaimer in the documentation and/or other
    62                           ;        materials provided with the distribution.
    63                           ; 
    64                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    65                           ;        software without specific prior written permission.
    66                           ; 
    67                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    68                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    69                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    70                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    71                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    72                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    73                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    74                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    75                           ; 
    76                           ; 
    77                           ; Code-generator required, PIC18F4550 Definitions
    78                           ; 
    79                           ; SFR Addresses
    80  0000                     
    81                           	psect	idataCOMRAM
    82  0026C4                     __pidataCOMRAM:
    83                           	opt stack 0
    84                           
    85                           ;initializer for _down
    86  0026C4  0001               	dw	1
    87                           
    88                           	psect	smallconst
    89  000800                     __psmallconst:
    90                           	opt stack 0
    91  000800  00                 	db	0
    92  000801                     _dpowers:
    93                           	opt stack 0
    94  000801  0001               	dw	1
    95  000803  0000               	dw	0
    96  000805  000A               	dw	10
    97  000807  0000               	dw	0
    98  000809  0064               	dw	100
    99  00080B  0000               	dw	0
   100  00080D  03E8               	dw	1000
   101  00080F  0000               	dw	0
   102  000811  2710               	dw	10000
   103  000813  0000               	dw	0
   104  000815  86A0               	dw	34464
   105  000817  0001               	dw	1
   106  000819  4240               	dw	16960
   107  00081B  000F               	dw	15
   108  00081D  9680               	dw	38528
   109  00081F  0098               	dw	152
   110  000821  E100               	dw	57600
   111  000823  05F5               	dw	1525
   112  000825  CA00               	dw	51712
   113  000827  3B9A               	dw	15258
   114  000829                     __end_of_dpowers:
   115                           	opt stack 0
   116  000829                     __powers_:
   117                           	opt stack 0
   118  000829  00                 	db	0
   119  00082A  80                 	db	128
   120  00082B  3F                 	db	63
   121  00082C  00                 	db	0
   122  00082D  20                 	db	32
   123  00082E  41                 	db	65
   124  00082F  00                 	db	0
   125  000830  C8                 	db	200
   126  000831  42                 	db	66
   127  000832  00                 	db	0
   128  000833  7A                 	db	122
   129  000834  44                 	db	68
   130  000835  40                 	db	64
   131  000836  1C                 	db	28
   132  000837  46                 	db	70
   133  000838  50                 	db	80
   134  000839  C3                 	db	195
   135  00083A  47                 	db	71
   136  00083B  24                 	db	36
   137  00083C  74                 	db	116
   138  00083D  49                 	db	73
   139  00083E  97                 	db	151
   140  00083F  18                 	db	24
   141  000840  4B                 	db	75
   142  000841  BC                 	db	188
   143  000842  BE                 	db	190
   144  000843  4C                 	db	76
   145  000844  6B                 	db	107
   146  000845  6E                 	db	110
   147  000846  4E                 	db	78
   148  000847  03                 	db	3
   149  000848  15                 	db	21
   150  000849  50                 	db	80
   151  00084A  79                 	db	121
   152  00084B  AD                 	db	173
   153  00084C  60                 	db	96
   154  00084D  F3                 	db	243
   155  00084E  49                 	db	73
   156  00084F  71                 	db	113
   157  000850                     __end_of__powers_:
   158                           	opt stack 0
   159  000850                     __npowers_:
   160                           	opt stack 0
   161  000850  00                 	db	0
   162  000851  80                 	db	128
   163  000852  3F                 	db	63
   164  000853  CD                 	db	205
   165  000854  CC                 	db	204
   166  000855  3D                 	db	61
   167  000856  D7                 	db	215
   168  000857  23                 	db	35
   169  000858  3C                 	db	60
   170  000859  12                 	db	18
   171  00085A  83                 	db	131
   172  00085B  3A                 	db	58
   173  00085C  B7                 	db	183
   174  00085D  D1                 	db	209
   175  00085E  38                 	db	56
   176  00085F  C6                 	db	198
   177  000860  27                 	db	39
   178  000861  37                 	db	55
   179  000862  38                 	db	56
   180  000863  86                 	db	134
   181  000864  35                 	db	53
   182  000865  C0                 	db	192
   183  000866  D6                 	db	214
   184  000867  33                 	db	51
   185  000868  CC                 	db	204
   186  000869  2B                 	db	43
   187  00086A  32                 	db	50
   188  00086B  70                 	db	112
   189  00086C  89                 	db	137
   190  00086D  30                 	db	48
   191  00086E  E7                 	db	231
   192  00086F  DB                 	db	219
   193  000870  2E                 	db	46
   194  000871  E5                 	db	229
   195  000872  3C                 	db	60
   196  000873  1E                 	db	30
   197  000874  42                 	db	66
   198  000875  A2                 	db	162
   199  000876  0D                 	db	13
   200  000877                     __end_of__npowers_:
   201                           	opt stack 0
   202  0000                     _CCPR2	set	4027
   203  0000                     _PORTD	set	3971
   204  0000                     _PORTDbits	set	3971
   205  0000                     _TRISDbits	set	3989
   206  0000                     _PORTA	set	3968
   207  0000                     _TRISD	set	3989
   208  0000                     _PIR1bits	set	3998
   209  0000                     _PIE1bits	set	3997
   210  0000                     _ADCON2bits	set	4032
   211  0000                     _ADCON0	set	4034
   212  0000                     _TRISB	set	3987
   213  0000                     _TRISA	set	3986
   214  0000                     _ADCON1bits	set	4033
   215  0000                     _T0CONbits	set	4053
   216  0000                     _INTCONbits	set	4082
   217  0000                     _TMR1L	set	4046
   218  0000                     _TMR1H	set	4047
   219  0000                     _T1CONbits	set	4045
   220  0000                     _TRISAbits	set	3986
   221  0000                     _PIR2bits	set	4001
   222  0000                     _PIE2bits	set	4000
   223  0000                     _T3CONbits	set	4017
   224  0000                     _CCP2CONbits	set	4026
   225  0000                     _OSCCON	set	4051
   226  0000                     _TRISCbits	set	3988
   227  0000                     _ADRESL	set	4035
   228  0000                     _ADRESH	set	4036
   229  0000                     _ADCON0bits	set	4034
   230  0000                     _TMR0L	set	4054
   231  0000                     _TMR0IF	set	32658
   232  0000                     _TMR0ON	set	32431
   233  0000                     _RCIF	set	31989
   234  0000                     _T08BIT	set	32430
   235  0000                     _CCP2IF	set	32008
   236  0000                     _TMR1IF	set	31984
   237  000877                     STR_1:
   238  000877  25                 	db	37
   239  000878  32                 	db	50	;'2'
   240  000879  2E                 	db	46
   241  00087A  32                 	db	50	;'2'
   242  00087B  66                 	db	102	;'f'
   243  00087C  56                 	db	86	;'V'
   244  00087D  20                 	db	32
   245  00087E  00                 	db	0
   246                           
   247                           ; #config settings
   248  00087F  00                 	db	0	; dummy byte at the end
   249  0000                     
   250                           	psect	cinit
   251  002586                     __pcinit:
   252                           	opt stack 0
   253  002586                     start_initialization:
   254                           	opt stack 0
   255  002586                     __initialization:
   256                           	opt stack 0
   257                           
   258                           ; Initialize objects allocated to COMRAM (2 bytes)
   259                           ; load TBLPTR registers with __pidataCOMRAM
   260  002586  0EC4               	movlw	low __pidataCOMRAM
   261  002588  6EF6               	movwf	tblptrl,c
   262  00258A  0E26               	movlw	high __pidataCOMRAM
   263  00258C  6EF7               	movwf	tblptrh,c
   264  00258E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   265  002590  6EF8               	movwf	tblptru,c
   266  002592  0009               	tblrd		*+	;fetch initializer
   267  002594  CFF5 F05C          	movff	tablat,__pdataCOMRAM
   268  002598  0009               	tblrd		*+	;fetch initializer
   269  00259A  CFF5 F05D          	movff	tablat,__pdataCOMRAM+1
   270                           
   271                           ; Clear objects allocated to BANK0 (24 bytes)
   272  00259E  EE00  F079         	lfsr	0,__pbssBANK0
   273  0025A2  0E18               	movlw	24
   274  0025A4                     clear_0:
   275  0025A4  6AEE               	clrf	postinc0,c
   276  0025A6  06E8               	decf	wreg,f,c
   277  0025A8  E1FD               	bnz	clear_0
   278                           
   279                           ; Clear objects allocated to COMRAM (14 bytes)
   280  0025AA  EE00  F04E         	lfsr	0,__pbssCOMRAM
   281  0025AE  0E0E               	movlw	14
   282  0025B0                     clear_1:
   283  0025B0  6AEE               	clrf	postinc0,c
   284  0025B2  06E8               	decf	wreg,f,c
   285  0025B4  E1FD               	bnz	clear_1
   286  0025B6                     end_of_initialization:
   287                           	opt stack 0
   288  0025B6                     __end_of__initialization:
   289                           	opt stack 0
   290  0025B6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   291  0025B8  6EF8               	movwf	tblptru,c
   292  0025BA  0100               	movlb	0
   293  0025BC  EF49  F010         	goto	_main	;jump to C main() function
   294                           tblptru	equ	0xFF8
   295                           tblptrh	equ	0xFF7
   296                           tblptrl	equ	0xFF6
   297                           tablat	equ	0xFF5
   298                           postinc0	equ	0xFEE
   299                           wreg	equ	0xFE8
   300                           
   301                           	psect	bssCOMRAM
   302  00004E                     __pbssCOMRAM:
   303                           	opt stack 0
   304  00004E                     _Voltage:
   305                           	opt stack 0
   306  00004E                     	ds	3
   307  000051                     _ADCDecimal:
   308                           	opt stack 0
   309  000051                     	ds	3
   310  000054                     _ADCval:
   311                           	opt stack 0
   312  000054                     	ds	2
   313  000056                     _up:
   314                           	opt stack 0
   315  000056                     	ds	2
   316  000058                     _valor:
   317                           	opt stack 0
   318  000058                     	ds	2
   319  00005A                     _print:
   320                           	opt stack 0
   321  00005A                     	ds	2
   322                           tblptru	equ	0xFF8
   323                           tblptrh	equ	0xFF7
   324                           tblptrl	equ	0xFF6
   325                           tablat	equ	0xFF5
   326                           postinc0	equ	0xFEE
   327                           wreg	equ	0xFE8
   328                           
   329                           	psect	dataCOMRAM
   330  00005C                     __pdataCOMRAM:
   331                           	opt stack 0
   332  00005C                     _down:
   333                           	opt stack 0
   334  00005C                     	ds	2
   335                           tblptru	equ	0xFF8
   336                           tblptrh	equ	0xFF7
   337                           tblptrl	equ	0xFF6
   338                           tablat	equ	0xFF5
   339                           postinc0	equ	0xFEE
   340                           wreg	equ	0xFE8
   341                           
   342                           	psect	bssBANK0
   343  000079                     __pbssBANK0:
   344                           	opt stack 0
   345  000079                     _str:
   346                           	opt stack 0
   347  000079                     	ds	24
   348                           tblptru	equ	0xFF8
   349                           tblptrh	equ	0xFF7
   350                           tblptrl	equ	0xFF6
   351                           tablat	equ	0xFF5
   352                           postinc0	equ	0xFEE
   353                           wreg	equ	0xFE8
   354                           
   355                           	psect	cstackBANK0
   356  000060                     __pcstackBANK0:
   357                           	opt stack 0
   358  000060                     _sprintf$1570:
   359                           	opt stack 0
   360                           
   361                           ; 3 bytes @ 0x0
   362  000060                     	ds	3
   363  000063                     sprintf@ap:
   364                           	opt stack 0
   365                           
   366                           ; 2 bytes @ 0x3
   367  000063                     	ds	2
   368  000065                     sprintf@val:
   369                           	opt stack 0
   370                           
   371                           ; 4 bytes @ 0x5
   372  000065                     	ds	4
   373  000069                     sprintf@flag:
   374                           	opt stack 0
   375                           
   376                           ; 2 bytes @ 0x9
   377  000069                     	ds	2
   378  00006B                     sprintf@width:
   379                           	opt stack 0
   380                           
   381                           ; 2 bytes @ 0xB
   382  00006B                     	ds	2
   383  00006D                     sprintf@tmpval:
   384                           	opt stack 0
   385                           
   386                           ; 4 bytes @ 0xD
   387  00006D                     	ds	4
   388  000071                     sprintf@exp:
   389                           	opt stack 0
   390                           
   391                           ; 2 bytes @ 0x11
   392  000071                     	ds	2
   393  000073                     sprintf@fval:
   394                           	opt stack 0
   395                           
   396                           ; 3 bytes @ 0x13
   397  000073                     	ds	3
   398  000076                     sprintf@prec:
   399                           	opt stack 0
   400                           
   401                           ; 2 bytes @ 0x16
   402  000076                     	ds	2
   403  000078                     sprintf@c:
   404                           	opt stack 0
   405                           
   406                           ; 1 bytes @ 0x18
   407  000078                     	ds	1
   408                           tblptru	equ	0xFF8
   409                           tblptrh	equ	0xFF7
   410                           tblptrl	equ	0xFF6
   411                           tablat	equ	0xFF5
   412                           postinc0	equ	0xFEE
   413                           wreg	equ	0xFE8
   414                           
   415                           	psect	cstackCOMRAM
   416  000001                     __pcstackCOMRAM:
   417                           	opt stack 0
   418  000001                     ??_isdigit:
   419  000001                     ?___awmod:
   420                           	opt stack 0
   421  000001                     ?___ftpack:
   422                           	opt stack 0
   423  000001                     ?___ftneg:
   424                           	opt stack 0
   425  000001                     ?__tdiv_to_l_:
   426                           	opt stack 0
   427  000001                     ?__div_to_l_:
   428                           	opt stack 0
   429  000001                     ?___lldiv:
   430                           	opt stack 0
   431  000001                     ?___llmod:
   432                           	opt stack 0
   433  000001                     ___awmod@dividend:
   434                           	opt stack 0
   435  000001                     __div_to_l_@f1:
   436                           	opt stack 0
   437  000001                     ___ftpack@arg:
   438                           	opt stack 0
   439  000001                     __tdiv_to_l_@f1:
   440                           	opt stack 0
   441  000001                     ___ftge@ff1:
   442                           	opt stack 0
   443  000001                     ___ftneg@f1:
   444                           	opt stack 0
   445  000001                     ___lldiv@dividend:
   446                           	opt stack 0
   447  000001                     ___llmod@dividend:
   448                           	opt stack 0
   449                           
   450                           ; 4 bytes @ 0x0
   451  000001                     	ds	1
   452  000002                     _isdigit$1216:
   453                           	opt stack 0
   454                           
   455                           ; 1 bytes @ 0x1
   456  000002                     	ds	1
   457  000003                     isdigit@c:
   458                           	opt stack 0
   459  000003                     ___awmod@divisor:
   460                           	opt stack 0
   461                           
   462                           ; 2 bytes @ 0x2
   463  000003                     	ds	1
   464  000004                     ___ftpack@exp:
   465                           	opt stack 0
   466  000004                     __div_to_l_@f2:
   467                           	opt stack 0
   468  000004                     __tdiv_to_l_@f2:
   469                           	opt stack 0
   470  000004                     ___ftge@ff2:
   471                           	opt stack 0
   472                           
   473                           ; 3 bytes @ 0x3
   474  000004                     	ds	1
   475  000005                     ___awmod@counter:
   476                           	opt stack 0
   477  000005                     ___ftpack@sign:
   478                           	opt stack 0
   479  000005                     ___lldiv@divisor:
   480                           	opt stack 0
   481  000005                     ___llmod@divisor:
   482                           	opt stack 0
   483                           
   484                           ; 4 bytes @ 0x4
   485  000005                     	ds	1
   486  000006                     ??___ftpack:
   487  000006                     ___awmod@sign:
   488                           	opt stack 0
   489                           
   490                           ; 1 bytes @ 0x5
   491  000006                     	ds	1
   492  000007                     ??__tdiv_to_l_:
   493  000007                     ??___ftge:
   494  000007                     ?___awdiv:
   495                           	opt stack 0
   496  000007                     ___awdiv@dividend:
   497                           	opt stack 0
   498  000007                     __div_to_l_@quot:
   499                           	opt stack 0
   500                           
   501                           ; 4 bytes @ 0x6
   502  000007                     	ds	2
   503  000009                     ?___awtoft:
   504                           	opt stack 0
   505  000009                     ?___lltoft:
   506                           	opt stack 0
   507  000009                     ___llmod@counter:
   508                           	opt stack 0
   509  000009                     ___awdiv@divisor:
   510                           	opt stack 0
   511  000009                     ___awtoft@c:
   512                           	opt stack 0
   513  000009                     ___lldiv@quotient:
   514                           	opt stack 0
   515  000009                     ___lltoft@c:
   516                           	opt stack 0
   517                           
   518                           ; 4 bytes @ 0x8
   519  000009                     	ds	1
   520  00000A                     __tdiv_to_l_@quot:
   521                           	opt stack 0
   522                           
   523                           ; 4 bytes @ 0x9
   524  00000A                     	ds	1
   525  00000B                     ___awdiv@counter:
   526                           	opt stack 0
   527  00000B                     __div_to_l_@cntr:
   528                           	opt stack 0
   529                           
   530                           ; 1 bytes @ 0xA
   531  00000B                     	ds	1
   532  00000C                     ___awdiv@sign:
   533                           	opt stack 0
   534  00000C                     ___awtoft@sign:
   535                           	opt stack 0
   536  00000C                     __div_to_l_@exp1:
   537                           	opt stack 0
   538                           
   539                           ; 1 bytes @ 0xB
   540  00000C                     	ds	1
   541  00000D                     ??___lltoft:
   542  00000D                     ?___ftdiv:
   543                           	opt stack 0
   544  00000D                     ___lldiv@counter:
   545                           	opt stack 0
   546  00000D                     ___awdiv@quotient:
   547                           	opt stack 0
   548  00000D                     ___ftdiv@f1:
   549                           	opt stack 0
   550                           
   551                           ; 3 bytes @ 0xC
   552  00000D                     	ds	1
   553  00000E                     __tdiv_to_l_@cntr:
   554                           	opt stack 0
   555                           
   556                           ; 1 bytes @ 0xD
   557  00000E                     	ds	1
   558  00000F                     ?___wmul:
   559                           	opt stack 0
   560  00000F                     __tdiv_to_l_@exp1:
   561                           	opt stack 0
   562  00000F                     ___wmul@multiplier:
   563                           	opt stack 0
   564                           
   565                           ; 2 bytes @ 0xE
   566  00000F                     	ds	1
   567  000010                     ___ftdiv@f2:
   568                           	opt stack 0
   569                           
   570                           ; 3 bytes @ 0xF
   571  000010                     	ds	1
   572  000011                     ___lltoft@exp:
   573                           	opt stack 0
   574  000011                     ___wmul@multiplicand:
   575                           	opt stack 0
   576                           
   577                           ; 2 bytes @ 0x10
   578  000011                     	ds	2
   579  000013                     ??___ftdiv:
   580  000013                     ___wmul@product:
   581                           	opt stack 0
   582                           
   583                           ; 2 bytes @ 0x12
   584  000013                     	ds	2
   585  000015                     ?___ftmul:
   586                           	opt stack 0
   587  000015                     ___ftmul@f1:
   588                           	opt stack 0
   589                           
   590                           ; 3 bytes @ 0x14
   591  000015                     	ds	1
   592  000016                     ___ftdiv@cntr:
   593                           	opt stack 0
   594                           
   595                           ; 1 bytes @ 0x15
   596  000016                     	ds	1
   597  000017                     ___ftdiv@f3:
   598                           	opt stack 0
   599                           
   600                           ; 3 bytes @ 0x16
   601  000017                     	ds	1
   602  000018                     ___ftmul@f2:
   603                           	opt stack 0
   604                           
   605                           ; 3 bytes @ 0x17
   606  000018                     	ds	2
   607  00001A                     ___ftdiv@exp:
   608                           	opt stack 0
   609                           
   610                           ; 1 bytes @ 0x19
   611  00001A                     	ds	1
   612  00001B                     ??___ftmul:
   613  00001B                     ___ftdiv@sign:
   614                           	opt stack 0
   615                           
   616                           ; 1 bytes @ 0x1A
   617  00001B                     	ds	3
   618  00001E                     ___ftmul@exp:
   619                           	opt stack 0
   620                           
   621                           ; 1 bytes @ 0x1D
   622  00001E                     	ds	1
   623  00001F                     ___ftmul@f3_as_product:
   624                           	opt stack 0
   625                           
   626                           ; 3 bytes @ 0x1E
   627  00001F                     	ds	3
   628  000022                     ___ftmul@cntr:
   629                           	opt stack 0
   630                           
   631                           ; 1 bytes @ 0x21
   632  000022                     	ds	1
   633  000023                     ___ftmul@sign:
   634                           	opt stack 0
   635                           
   636                           ; 1 bytes @ 0x22
   637  000023                     	ds	1
   638  000024                     ?_fround:
   639                           	opt stack 0
   640  000024                     ?_scale:
   641                           	opt stack 0
   642                           
   643                           ; 3 bytes @ 0x23
   644  000024                     	ds	3
   645  000027                     _fround$1568:
   646                           	opt stack 0
   647  000027                     _scale$1569:
   648                           	opt stack 0
   649                           
   650                           ; 3 bytes @ 0x26
   651  000027                     	ds	3
   652  00002A                     scale@scl:
   653                           	opt stack 0
   654  00002A                     _fround$1567:
   655                           	opt stack 0
   656                           
   657                           ; 3 bytes @ 0x29
   658  00002A                     	ds	1
   659  00002B                     ?___fttol:
   660                           	opt stack 0
   661  00002B                     ___fttol@f1:
   662                           	opt stack 0
   663                           
   664                           ; 3 bytes @ 0x2A
   665  00002B                     	ds	2
   666  00002D                     fround@prec:
   667                           	opt stack 0
   668                           
   669                           ; 1 bytes @ 0x2C
   670  00002D                     	ds	1
   671  00002E                     ?___ftadd:
   672                           	opt stack 0
   673  00002E                     ___ftadd@f1:
   674                           	opt stack 0
   675                           
   676                           ; 3 bytes @ 0x2D
   677  00002E                     	ds	1
   678  00002F                     ??___fttol:
   679                           
   680                           ; 1 bytes @ 0x2E
   681  00002F                     	ds	2
   682  000031                     ___ftadd@f2:
   683                           	opt stack 0
   684                           
   685                           ; 3 bytes @ 0x30
   686  000031                     	ds	3
   687  000034                     ??___ftadd:
   688  000034                     ___fttol@sign1:
   689                           	opt stack 0
   690                           
   691                           ; 1 bytes @ 0x33
   692  000034                     	ds	1
   693  000035                     ___fttol@lval:
   694                           	opt stack 0
   695                           
   696                           ; 4 bytes @ 0x34
   697  000035                     	ds	2
   698  000037                     ___ftadd@sign:
   699                           	opt stack 0
   700                           
   701                           ; 1 bytes @ 0x36
   702  000037                     	ds	1
   703  000038                     ___ftadd@exp2:
   704                           	opt stack 0
   705                           
   706                           ; 1 bytes @ 0x37
   707  000038                     	ds	1
   708  000039                     ___ftadd@exp1:
   709                           	opt stack 0
   710  000039                     ___fttol@exp1:
   711                           	opt stack 0
   712                           
   713                           ; 1 bytes @ 0x38
   714  000039                     	ds	1
   715  00003A                     ?___ftsub:
   716                           	opt stack 0
   717  00003A                     wait_in_ms@time_in_ms:
   718                           	opt stack 0
   719  00003A                     ___ftsub@f1:
   720                           	opt stack 0
   721                           
   722                           ; 3 bytes @ 0x39
   723  00003A                     	ds	2
   724  00003C                     ??_wait_in_ms:
   725                           
   726                           ; 1 bytes @ 0x3B
   727  00003C                     	ds	1
   728  00003D                     ___ftsub@f2:
   729                           	opt stack 0
   730                           
   731                           ; 3 bytes @ 0x3C
   732  00003D                     	ds	1
   733  00003E                     wait_in_ms@flag:
   734                           	opt stack 0
   735                           
   736                           ; 2 bytes @ 0x3D
   737  00003E                     	ds	2
   738  000040                     ?_sprintf:
   739                           	opt stack 0
   740  000040                     wait_in_ms@count:
   741                           	opt stack 0
   742  000040                     sprintf@sp:
   743                           	opt stack 0
   744                           
   745                           ; 2 bytes @ 0x3F
   746  000040                     	ds	2
   747  000042                     wait_in_ms@count_ms:
   748                           	opt stack 0
   749  000042                     sprintf@f:
   750                           	opt stack 0
   751                           
   752                           ; 2 bytes @ 0x41
   753  000042                     	ds	2
   754  000044                     lcd_orden@orden:
   755                           	opt stack 0
   756  000044                     lcd_caracter@caracter:
   757                           	opt stack 0
   758                           
   759                           ; 2 bytes @ 0x43
   760  000044                     	ds	2
   761  000046                     ??_lcd_orden:
   762  000046                     ??_lcd_caracter:
   763                           
   764                           ; 1 bytes @ 0x45
   765  000046                     	ds	1
   766  000047                     ??_sprintf:
   767                           
   768                           ; 1 bytes @ 0x46
   769  000047                     	ds	4
   770  00004B                     lcd_texto@cadena:
   771                           	opt stack 0
   772                           
   773                           ; 2 bytes @ 0x4A
   774  00004B                     	ds	2
   775  00004D                     ??_lcd_texto:
   776                           
   777                           ; 1 bytes @ 0x4C
   778  00004D                     	ds	1
   779  00004E                     tblptru	equ	0xFF8
   780                           tblptrh	equ	0xFF7
   781                           tblptrl	equ	0xFF6
   782                           tablat	equ	0xFF5
   783                           postinc0	equ	0xFEE
   784                           wreg	equ	0xFE8
   785                           
   786                           ; 1 bytes @ 0x4D
   787 ;;
   788 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   789 ;;
   790 ;; *************** function _main *****************
   791 ;; Defined at:
   792 ;;		line 91 in file "comuni.c"
   793 ;; Parameters:    Size  Location     Type
   794 ;;		None
   795 ;; Auto vars:     Size  Location     Type
   796 ;;  dc              1    0        unsigned char 
   797 ;; Return value:  Size  Location     Type
   798 ;;                  1    wreg      void 
   799 ;; Registers used:
   800 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   801 ;; Tracked objects:
   802 ;;		On entry : 0/0
   803 ;;		On exit  : 0/0
   804 ;;		Unchanged: 0/0
   805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   806 ;;      Params:         0       0       0       0       0       0       0       0       0
   807 ;;      Locals:         0       0       0       0       0       0       0       0       0
   808 ;;      Temps:          0       0       0       0       0       0       0       0       0
   809 ;;      Totals:         0       0       0       0       0       0       0       0       0
   810 ;;Total ram usage:        0 bytes
   811 ;; Hardware stack levels required when called:    6
   812 ;; This function calls:
   813 ;;		_configBoard
   814 ;;		_lcd_iniciar
   815 ;;		_lcd_origen
   816 ;;		_lcd_texto
   817 ;;		_sprintf
   818 ;;		_wait_in_ms
   819 ;; This function is called by:
   820 ;;		Startup code after reset
   821 ;; This function uses a non-reentrant model
   822 ;;
   823                           
   824                           	psect	text0
   825  002092                     __ptext0:
   826                           	opt stack 0
   827  002092                     _main:
   828                           	opt stack 25
   829                           
   830                           ;comuni.c: 93: TRISCbits.RC1=1;
   831                           
   832                           ;incstack = 0
   833  002092  8294               	bsf	3988,1,c	;volatile
   834                           
   835                           ;comuni.c: 94: TRISCbits.RC2=1;
   836  002094  8494               	bsf	3988,2,c	;volatile
   837                           
   838                           ;comuni.c: 96: unsigned char dc ;
   839                           ;comuni.c: 97: OSCCON=0x72;
   840  002096  0E72               	movlw	114
   841  002098  6ED3               	movwf	4051,c	;volatile
   842                           
   843                           ;comuni.c: 99: configBoard();
   844  00209A  EC62  F011         	call	_configBoard	;wreg free
   845                           
   846                           ;comuni.c: 100: lcd_iniciar();
   847  00209E  EC25  F00F         	call	_lcd_iniciar	;wreg free
   848                           
   849                           ;comuni.c: 102: CCP2CONbits.CCP2M0 = 1;
   850  0020A2  80BA               	bsf	4026,0,c	;volatile
   851                           
   852                           ;comuni.c: 103: CCP2CONbits.CCP2M1 = 1;
   853  0020A4  82BA               	bsf	4026,1,c	;volatile
   854                           
   855                           ;comuni.c: 104: CCP2CONbits.CCP2M2 = 0;
   856  0020A6  94BA               	bcf	4026,2,c	;volatile
   857                           
   858                           ;comuni.c: 105: CCP2CONbits.CCP2M3 = 1;
   859  0020A8  86BA               	bsf	4026,3,c	;volatile
   860                           
   861                           ;comuni.c: 107: T3CONbits.T3CCP1 = 0;
   862  0020AA  96B1               	bcf	4017,3,c	;volatile
   863                           
   864                           ;comuni.c: 108: T3CONbits.T3CCP2 = 0;
   865  0020AC  9CB1               	bcf	4017,6,c	;volatile
   866                           
   867                           ;comuni.c: 110: PIE2bits.CCP2IE = 0;
   868  0020AE  90A0               	bcf	4000,0,c	;volatile
   869                           
   870                           ;comuni.c: 111: PIR2bits.CCP2IF = 0;
   871  0020B0  90A1               	bcf	4001,0,c	;volatile
   872                           
   873                           ;comuni.c: 112: TRISAbits.RA0=1;
   874  0020B2  8092               	bsf	3986,0,c	;volatile
   875                           
   876                           ;comuni.c: 114: ADCON0bits.ADON = 1;
   877  0020B4  80C2               	bsf	4034,0,c	;volatile
   878                           
   879                           ;comuni.c: 115: T1CONbits.TMR1ON = 1;
   880  0020B6  80CD               	bsf	4045,0,c	;volatile
   881  0020B8                     
   882                           ;comuni.c: 125: CCPR2 = 3000;
   883  0020B8  0E0B               	movlw	11
   884  0020BA  6EBC               	movwf	4028,c	;volatile
   885  0020BC  0EB8               	movlw	184
   886  0020BE  6EBB               	movwf	4027,c	;volatile
   887                           
   888                           ;comuni.c: 127: if (TMR1IF == 1) {
   889  0020C0  A09E               	btfss	3998,0,c	;volatile
   890  0020C2  D005               	goto	l85
   891                           
   892                           ;comuni.c: 128: TMR1IF = 0;
   893  0020C4  909E               	bcf	3998,0,c	;volatile
   894                           
   895                           ;comuni.c: 129: TMR1H = valor >> 8;
   896  0020C6  5059               	movf	_valor+1,w,c
   897  0020C8  6ECF               	movwf	4047,c	;volatile
   898                           
   899                           ;comuni.c: 130: TMR1L = valor;
   900  0020CA  C058  FFCE         	movff	_valor,4046	;volatile
   901  0020CE                     l85:
   902                           
   903                           ;comuni.c: 131: }
   904                           ;comuni.c: 135: if(CCP2IF == 1) {
   905  0020CE  A0A1               	btfss	4001,0,c	;volatile
   906  0020D0  D005               	goto	l86
   907                           
   908                           ;comuni.c: 136: CCP2IF = 0;
   909  0020D2  90A1               	bcf	4001,0,c	;volatile
   910                           
   911                           ;comuni.c: 137: print = 1;
   912  0020D4  0E00               	movlw	0
   913  0020D6  6E5B               	movwf	_print+1,c
   914  0020D8  0E01               	movlw	1
   915  0020DA  6E5A               	movwf	_print,c
   916  0020DC                     l86:
   917                           
   918                           ;comuni.c: 138: }
   919                           ;comuni.c: 140: lcd_origen();
   920  0020DC  EC55  F013         	call	_lcd_origen	;wreg free
   921                           
   922                           ;comuni.c: 141: wait_in_ms(10);
   923  0020E0  0E00               	movlw	0
   924  0020E2  6E3B               	movwf	wait_in_ms@time_in_ms+1,c
   925  0020E4  0E0A               	movlw	10
   926  0020E6  6E3A               	movwf	wait_in_ms@time_in_ms,c
   927  0020E8  EC8C  F00F         	call	_wait_in_ms	;wreg free
   928                           
   929                           ;comuni.c: 147: sprintf(str, "%2.2fV ", Voltage);
   930  0020EC  0E79               	movlw	low _str
   931  0020EE  6E40               	movwf	sprintf@sp,c
   932  0020F0  0E00               	movlw	high _str
   933  0020F2  6E41               	movwf	sprintf@sp+1,c
   934  0020F4  0E77               	movlw	low STR_1
   935  0020F6  6E42               	movwf	sprintf@f,c
   936  0020F8  0E08               	movlw	high STR_1
   937  0020FA  6E43               	movwf	sprintf@f+1,c
   938  0020FC  C04E  F044         	movff	_Voltage,?_sprintf+4
   939  002100  C04F  F045         	movff	_Voltage+1,?_sprintf+5
   940  002104  C050  F046         	movff	_Voltage+2,?_sprintf+6
   941  002108  EC40  F004         	call	_sprintf	;wreg free
   942                           
   943                           ;comuni.c: 148: lcd_texto(str);
   944  00210C  0E79               	movlw	low _str
   945  00210E  6E4B               	movwf	lcd_texto@cadena,c
   946  002110  0E00               	movlw	high _str
   947  002112  6E4C               	movwf	lcd_texto@cadena+1,c
   948  002114  ECFC  F012         	call	_lcd_texto	;wreg free
   949                           
   950                           ;comuni.c: 149: print = 0;
   951  002118  0E00               	movlw	0
   952  00211A  6E5B               	movwf	_print+1,c
   953  00211C  0E00               	movlw	0
   954  00211E  6E5A               	movwf	_print,c
   955                           
   956                           ;comuni.c: 150: wait_in_ms(500);
   957  002120  0E01               	movlw	1
   958  002122  6E3B               	movwf	wait_in_ms@time_in_ms+1,c
   959  002124  0EF4               	movlw	244
   960  002126  6E3A               	movwf	wait_in_ms@time_in_ms,c
   961  002128  EC8C  F00F         	call	_wait_in_ms	;wreg free
   962  00212C  D7C5               	goto	l84
   963  00212E                     __end_of_main:
   964                           	opt stack 0
   965                           tblptru	equ	0xFF8
   966                           tblptrh	equ	0xFF7
   967                           tblptrl	equ	0xFF6
   968                           tablat	equ	0xFF5
   969                           postinc0	equ	0xFEE
   970                           wreg	equ	0xFE8
   971                           
   972 ;; *************** function _sprintf *****************
   973 ;; Defined at:
   974 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
   975 ;; Parameters:    Size  Location     Type
   976 ;;  sp              2   63[COMRAM] PTR unsigned char 
   977 ;;		 -> str(24), 
   978 ;;  f               2   65[COMRAM] PTR const unsigned char 
   979 ;;		 -> STR_1(8), 
   980 ;; Auto vars:     Size  Location     Type
   981 ;;  tmpval          4   13[BANK0 ] struct .
   982 ;;  val             4    5[BANK0 ] unsigned long 
   983 ;;  fval            3   19[BANK0 ] unsigned long 
   984 ;;  cp              3    0        PTR const unsigned char 
   985 ;;  prec            2   22[BANK0 ] int 
   986 ;;  exp             2   17[BANK0 ] int 
   987 ;;  width           2   11[BANK0 ] int 
   988 ;;  flag            2    9[BANK0 ] unsigned short 
   989 ;;  ap              2    3[BANK0 ] PTR void [1]
   990 ;;		 -> ?_sprintf(2), 
   991 ;;  len             2    0        unsigned int 
   992 ;;  c               1   24[BANK0 ] char 
   993 ;;  d               1    0        unsigned char 
   994 ;; Return value:  Size  Location     Type
   995 ;;                  2   63[COMRAM] int 
   996 ;; Registers used:
   997 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   998 ;; Tracked objects:
   999 ;;		On entry : 0/0
  1000 ;;		On exit  : 0/0
  1001 ;;		Unchanged: 0/0
  1002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1003 ;;      Params:         7       0       0       0       0       0       0       0       0
  1004 ;;      Locals:         0      25       0       0       0       0       0       0       0
  1005 ;;      Temps:          6       0       0       0       0       0       0       0       0
  1006 ;;      Totals:        13      25       0       0       0       0       0       0       0
  1007 ;;Total ram usage:       38 bytes
  1008 ;; Hardware stack levels used:    1
  1009 ;; Hardware stack levels required when called:    3
  1010 ;; This function calls:
  1011 ;;		___awdiv
  1012 ;;		___ftadd
  1013 ;;		___ftge
  1014 ;;		___ftmul
  1015 ;;		___ftneg
  1016 ;;		___ftsub
  1017 ;;		___fttol
  1018 ;;		___lldiv
  1019 ;;		___llmod
  1020 ;;		___lltoft
  1021 ;;		___wmul
  1022 ;;		__div_to_l_
  1023 ;;		__tdiv_to_l_
  1024 ;;		_fround
  1025 ;;		_isdigit
  1026 ;;		_scale
  1027 ;; This function is called by:
  1028 ;;		_main
  1029 ;; This function uses a non-reentrant model
  1030 ;;
  1031                           
  1032                           	psect	text1
  1033  000880                     __ptext1:
  1034                           	opt stack 0
  1035  000880                     _sprintf:
  1036                           	opt stack 27
  1037                           
  1038                           ;doprnt.c: 494: va_list ap;
  1039                           ;doprnt.c: 499: signed char c;
  1040                           ;doprnt.c: 501: int width;
  1041                           ;doprnt.c: 504: int prec;
  1042                           ;doprnt.c: 508: unsigned short flag;
  1043                           ;doprnt.c: 515: char d;
  1044                           ;doprnt.c: 516: double fval;
  1045                           ;doprnt.c: 517: int exp;
  1046                           ;doprnt.c: 523: union {
  1047                           ;doprnt.c: 524: unsigned long vd;
  1048                           ;doprnt.c: 525: double integ;
  1049                           ;doprnt.c: 526: } tmpval;
  1050                           ;doprnt.c: 528: unsigned long val;
  1051                           ;doprnt.c: 529: unsigned len;
  1052                           ;doprnt.c: 530: const char * cp;
  1053                           ;doprnt.c: 533: *ap = __va_start();
  1054                           
  1055                           ;incstack = 0
  1056  000880  0E44               	movlw	low (?_sprintf+4)
  1057  000882  0100               	movlb	0	; () banked
  1058  000884  6F63               	movwf	sprintf@ap& (0+255),b
  1059  000886  0E00               	movlw	high (?_sprintf+4)
  1060  000888  6F64               	movwf	(sprintf@ap+1)& (0+255),b
  1061                           
  1062                           ;doprnt.c: 536: while(c = *f++) {
  1063  00088A  EF7A  F008         	goto	l321
  1064  00088E                     
  1065                           ; BSR set to: 0
  1066                           ;doprnt.c: 538: if(c != '%')
  1067                           
  1068                           ; BSR set to: 0
  1069  00088E  0E25               	movlw	37
  1070  000890  1978               	xorwf	sprintf@c& (0+255),w,b
  1071  000892  B4D8               	btfsc	status,2,c
  1072  000894  D008               	goto	l250
  1073                           
  1074                           ; BSR set to: 0
  1075                           ;doprnt.c: 540: {
  1076                           ;doprnt.c: 541: ((*sp++ = (c)));
  1077  000896  C040  FFD9         	movff	sprintf@sp,fsr2l
  1078  00089A  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1079  00089E  C078  FFDF         	movff	sprintf@c,indf2
  1080  0008A2  EF78  F008         	goto	l3134
  1081  0008A6                     l250:
  1082                           
  1083                           ; BSR set to: 0
  1084                           ;doprnt.c: 543: }
  1085                           ;doprnt.c: 546: width = 0;
  1086                           
  1087                           ; BSR set to: 0
  1088  0008A6  0E00               	movlw	0
  1089  0008A8  6F6C               	movwf	(sprintf@width+1)& (0+255),b
  1090  0008AA  0E00               	movlw	0
  1091  0008AC  6F6B               	movwf	sprintf@width& (0+255),b
  1092                           
  1093                           ;doprnt.c: 548: flag = 0;
  1094  0008AE  0E00               	movlw	0
  1095  0008B0  6F6A               	movwf	(sprintf@flag+1)& (0+255),b
  1096  0008B2  0E00               	movlw	0
  1097  0008B4  6F69               	movwf	sprintf@flag& (0+255),b
  1098                           
  1099                           ; BSR set to: 0
  1100                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1101  0008B6  C042  FFF6         	movff	sprintf@f,tblptrl
  1102  0008BA  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1103  0008BE                     	if	0	;tblptru may be non-zero
  1104  0008BE                     	endif
  1105  0008BE                     	if	0	;tblptru may be non-zero
  1106  0008BE                     	endif
  1107  0008BE  0008               	tblrd		*
  1108  0008C0  50F5               	movf	tablat,w,c
  1109  0008C2  EC37  F013         	call	_isdigit
  1110  0008C6  A0D8               	btfss	status,0,c
  1111  0008C8  D034               	goto	u2840
  1112                           
  1113                           ;doprnt.c: 598: width = 0;
  1114  0008CA  0E00               	movlw	0
  1115  0008CC  0100               	movlb	0	; () banked
  1116  0008CE  6F6C               	movwf	(sprintf@width+1)& (0+255),b
  1117  0008D0  0E00               	movlw	0
  1118  0008D2  6F6B               	movwf	sprintf@width& (0+255),b
  1119  0008D4                     
  1120                           ;doprnt.c: 600: width *= 10;
  1121                           
  1122                           ; BSR set to: 0
  1123  0008D4  C06B  F00F         	movff	sprintf@width,___wmul@multiplier
  1124  0008D8  C06C  F010         	movff	sprintf@width+1,___wmul@multiplier+1
  1125  0008DC  0E00               	movlw	0
  1126  0008DE  6E12               	movwf	___wmul@multiplicand+1,c
  1127  0008E0  0E0A               	movlw	10
  1128  0008E2  6E11               	movwf	___wmul@multiplicand,c
  1129  0008E4  EC12  F013         	call	___wmul	;wreg free
  1130  0008E8  C00F  F06B         	movff	?___wmul,sprintf@width
  1131  0008EC  C010  F06C         	movff	?___wmul+1,sprintf@width+1
  1132                           
  1133                           ;doprnt.c: 601: width += *f++ - '0';
  1134  0008F0  0ED0               	movlw	208
  1135  0008F2  6E47               	movwf	??_sprintf& (0+255),c
  1136  0008F4  0EFF               	movlw	255
  1137  0008F6  6E48               	movwf	(??_sprintf+1)& (0+255),c
  1138  0008F8  C042  FFF6         	movff	sprintf@f,tblptrl
  1139  0008FC  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1140  000900                     	if	0	;tblptru may be non-zero
  1141  000900                     	endif
  1142  000900                     	if	0	;tblptru may be non-zero
  1143  000900                     	endif
  1144  000900  0008               	tblrd		*
  1145  000902  50F5               	movf	tablat,w,c
  1146  000904  6E49               	movwf	(??_sprintf+2)& (0+255),c
  1147  000906  6A4A               	clrf	(??_sprintf+3)& (0+255),c
  1148  000908  5047               	movf	??_sprintf,w,c
  1149  00090A  2649               	addwf	??_sprintf+2,f,c
  1150  00090C  5048               	movf	??_sprintf+1,w,c
  1151  00090E  224A               	addwfc	??_sprintf+3,f,c
  1152  000910  5049               	movf	??_sprintf+2,w,c
  1153  000912  0100               	movlb	0	; () banked
  1154  000914  276B               	addwf	sprintf@width& (0+255),f,b
  1155  000916  504A               	movf	??_sprintf+3,w,c
  1156  000918  236C               	addwfc	(sprintf@width+1)& (0+255),f,b
  1157                           
  1158                           ; BSR set to: 0
  1159  00091A  4A42               	infsnz	sprintf@f,f,c
  1160  00091C  2A43               	incf	sprintf@f+1,f,c
  1161                           
  1162                           ; BSR set to: 0
  1163                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1164  00091E  C042  FFF6         	movff	sprintf@f,tblptrl
  1165  000922  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1166  000926                     	if	0	;tblptru may be non-zero
  1167  000926                     	endif
  1168  000926                     	if	0	;tblptru may be non-zero
  1169  000926                     	endif
  1170  000926  0008               	tblrd		*
  1171  000928  50F5               	movf	tablat,w,c
  1172  00092A  EC37  F013         	call	_isdigit
  1173  00092E  B0D8               	btfsc	status,0,c
  1174  000930  D7D1               	goto	l252
  1175  000932                     u2840:
  1176                           
  1177                           ;doprnt.c: 608: }
  1178                           ;doprnt.c: 611: if(*f == '.') {
  1179  000932  C042  FFF6         	movff	sprintf@f,tblptrl
  1180  000936  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1181  00093A                     	if	0	;tblptru may be non-zero
  1182  00093A                     	endif
  1183  00093A                     	if	0	;tblptru may be non-zero
  1184  00093A                     	endif
  1185  00093A  0008               	tblrd		*
  1186  00093C  50F5               	movf	tablat,w,c
  1187  00093E  0A2E               	xorlw	46
  1188  000940  A4D8               	btfss	status,2,c
  1189  000942  D030               	goto	l254
  1190                           
  1191                           ;doprnt.c: 612: flag |= 0x4000;
  1192  000944  0100               	movlb	0	; () banked
  1193  000946  8D6A               	bsf	(sprintf@flag+1)& (0+255),6,b
  1194                           
  1195                           ;doprnt.c: 613: f++;
  1196  000948  4A42               	infsnz	sprintf@f,f,c
  1197  00094A  2A43               	incf	sprintf@f+1,f,c
  1198                           
  1199                           ; BSR set to: 0
  1200                           ;doprnt.c: 620: {
  1201                           ;doprnt.c: 621: prec = 0;
  1202  00094C  0E00               	movlw	0
  1203  00094E  6F77               	movwf	(sprintf@prec+1)& (0+255),b
  1204  000950  0E00               	movlw	0
  1205  000952  6F76               	movwf	sprintf@prec& (0+255),b
  1206                           
  1207                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1208  000954  D01C               	goto	l255
  1209  000956                     
  1210                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1211                           
  1212                           ; BSR set to: 0
  1213  000956  C076  F00F         	movff	sprintf@prec,___wmul@multiplier
  1214  00095A  C077  F010         	movff	sprintf@prec+1,___wmul@multiplier+1
  1215  00095E  0E00               	movlw	0
  1216  000960  6E12               	movwf	___wmul@multiplicand+1,c
  1217  000962  0E0A               	movlw	10
  1218  000964  6E11               	movwf	___wmul@multiplicand,c
  1219  000966  EC12  F013         	call	___wmul	;wreg free
  1220  00096A  C042  FFF6         	movff	sprintf@f,tblptrl
  1221  00096E  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1222  000972                     	if	0	;tblptru may be non-zero
  1223  000972                     	endif
  1224  000972                     	if	0	;tblptru may be non-zero
  1225  000972                     	endif
  1226  000972  0008               	tblrd		*
  1227  000974  50F5               	movf	tablat,w,c
  1228  000976  260F               	addwf	?___wmul,f,c
  1229  000978  0E00               	movlw	0
  1230  00097A  2210               	addwfc	?___wmul+1,f,c
  1231  00097C  0ED0               	movlw	208
  1232  00097E  240F               	addwf	?___wmul,w,c
  1233  000980  0100               	movlb	0	; () banked
  1234  000982  6F76               	movwf	sprintf@prec& (0+255),b
  1235  000984  0EFF               	movlw	255
  1236  000986  2010               	addwfc	?___wmul+1,w,c
  1237  000988  6F77               	movwf	(sprintf@prec+1)& (0+255),b
  1238                           
  1239                           ; BSR set to: 0
  1240  00098A  4A42               	infsnz	sprintf@f,f,c
  1241  00098C  2A43               	incf	sprintf@f+1,f,c
  1242  00098E                     l255:
  1243                           
  1244                           ; BSR set to: 0
  1245                           
  1246                           ; BSR set to: 0
  1247  00098E  C042  FFF6         	movff	sprintf@f,tblptrl
  1248  000992  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1249  000996                     	if	0	;tblptru may be non-zero
  1250  000996                     	endif
  1251  000996                     	if	0	;tblptru may be non-zero
  1252  000996                     	endif
  1253  000996  0008               	tblrd		*
  1254  000998  50F5               	movf	tablat,w,c
  1255  00099A  EC37  F013         	call	_isdigit
  1256  00099E  A0D8               	btfss	status,0,c
  1257  0009A0  D00A               	goto	l259
  1258  0009A2  D7D9               	goto	l256
  1259  0009A4                     l254:
  1260                           
  1261                           ;doprnt.c: 626: prec = 0;
  1262  0009A4  0E00               	movlw	0
  1263  0009A6  0100               	movlb	0	; () banked
  1264  0009A8  6F77               	movwf	(sprintf@prec+1)& (0+255),b
  1265  0009AA  0E00               	movlw	0
  1266  0009AC  6F76               	movwf	sprintf@prec& (0+255),b
  1267                           
  1268                           ; BSR set to: 0
  1269                           ;doprnt.c: 628: flag |= 0x1000;
  1270  0009AE  896A               	bsf	(sprintf@flag+1)& (0+255),4,b
  1271                           
  1272                           ; BSR set to: 0
  1273                           ;doprnt.c: 630: }
  1274                           ;doprnt.c: 635: switch(c = *f++) {
  1275  0009B0  D002               	goto	l259
  1276  0009B2                     
  1277                           ; BSR set to: 0
  1278                           ;doprnt.c: 663: flag |= 0x400;
  1279                           
  1280                           ; BSR set to: 0
  1281  0009B2  856A               	bsf	(sprintf@flag+1)& (0+255),2,b
  1282                           
  1283                           ;doprnt.c: 664: break;
  1284  0009B4  D012               	goto	l263
  1285  0009B6                     l259:
  1286                           
  1287                           ; BSR set to: 0
  1288  0009B6  C042  FFF6         	movff	sprintf@f,tblptrl
  1289  0009BA  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1290  0009BE  4A42               	infsnz	sprintf@f,f,c
  1291  0009C0  2A43               	incf	sprintf@f+1,f,c
  1292  0009C2                     	if	0	;tblptru may be non-zero
  1293  0009C2                     	endif
  1294  0009C2                     	if	0	;tblptru may be non-zero
  1295  0009C2                     	endif
  1296  0009C2  0008               	tblrd		*
  1297  0009C4  CFF5 F078          	movff	tablat,sprintf@c
  1298  0009C8  0100               	movlb	0	; () banked
  1299  0009CA  5178               	movf	sprintf@c& (0+255),w,b
  1300                           
  1301                           ; Switch size 1, requested type "space"
  1302                           ; Number of cases is 2, Range of values is 0 to 102
  1303                           ; switch strategies available:
  1304                           ; Name         Instructions Cycles
  1305                           ; simple_byte            7     4 (average)
  1306                           ;	Chosen strategy is simple_byte
  1307  0009CC  0A00               	xorlw	0	; case 0
  1308  0009CE  B4D8               	btfsc	status,2,c
  1309  0009D0  D39E               	goto	u3260
  1310  0009D2  0A66               	xorlw	102	; case 102
  1311  0009D4  B4D8               	btfsc	status,2,c
  1312  0009D6  D7ED               	goto	l262
  1313  0009D8  D38D               	goto	l321
  1314  0009DA                     l263:
  1315                           
  1316                           ; BSR set to: 0
  1317                           ;doprnt.c: 825: if(flag & (0x700)) {
  1318                           
  1319                           ; BSR set to: 0
  1320  0009DA  0E07               	movlw	7
  1321  0009DC  156A               	andwf	(sprintf@flag+1)& (0+255),w,b
  1322  0009DE  B4D8               	btfsc	status,2,c
  1323  0009E0  D2FE               	goto	l265
  1324                           
  1325                           ; BSR set to: 0
  1326                           ;doprnt.c: 827: if(flag & 0x1000)
  1327  0009E2  A96A               	btfss	(sprintf@flag+1)& (0+255),4,b
  1328  0009E4  D004               	goto	l266
  1329                           
  1330                           ; BSR set to: 0
  1331                           ;doprnt.c: 829: prec = 6;
  1332  0009E6  0E00               	movlw	0
  1333  0009E8  6F77               	movwf	(sprintf@prec+1)& (0+255),b
  1334  0009EA  0E06               	movlw	6
  1335  0009EC  6F76               	movwf	sprintf@prec& (0+255),b
  1336  0009EE                     l266:
  1337                           
  1338                           ; BSR set to: 0
  1339                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1340                           
  1341                           ; BSR set to: 0
  1342  0009EE  C063  FFD9         	movff	sprintf@ap,fsr2l
  1343  0009F2  C064  FFDA         	movff	sprintf@ap+1,fsr2h
  1344  0009F6  CFDE F073          	movff	postinc2,sprintf@fval
  1345  0009FA  CFDE F074          	movff	postinc2,sprintf@fval+1
  1346  0009FE  CFDD F075          	movff	postdec2,sprintf@fval+2
  1347                           
  1348                           ; BSR set to: 0
  1349  000A02  0E03               	movlw	3
  1350  000A04  2763               	addwf	sprintf@ap& (0+255),f,b
  1351  000A06  0E00               	movlw	0
  1352  000A08  2364               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1353                           
  1354                           ; BSR set to: 0
  1355                           ;doprnt.c: 831: if(fval < 0.0) {
  1356  000A0A  AF75               	btfss	(sprintf@fval+2)& (0+255),7,b
  1357  000A0C  D011               	goto	l267
  1358                           
  1359                           ; BSR set to: 0
  1360                           ;doprnt.c: 832: fval = -fval;
  1361  000A0E  C073  F001         	movff	sprintf@fval,___ftneg@f1
  1362  000A12  C074  F002         	movff	sprintf@fval+1,___ftneg@f1+1
  1363  000A16  C075  F003         	movff	sprintf@fval+2,___ftneg@f1+2
  1364  000A1A  EC25  F013         	call	___ftneg	;wreg free
  1365  000A1E  C001  F073         	movff	?___ftneg,sprintf@fval
  1366  000A22  C002  F074         	movff	?___ftneg+1,sprintf@fval+1
  1367  000A26  C003  F075         	movff	?___ftneg+2,sprintf@fval+2
  1368                           
  1369                           ;doprnt.c: 833: flag |= 0x03;
  1370  000A2A  0E03               	movlw	3
  1371  000A2C  0100               	movlb	0	; () banked
  1372  000A2E  1369               	iorwf	sprintf@flag& (0+255),f,b
  1373  000A30                     l267:
  1374                           
  1375                           ; BSR set to: 0
  1376                           ;doprnt.c: 834: }
  1377                           ;doprnt.c: 835: exp = 0;
  1378                           
  1379                           ; BSR set to: 0
  1380  000A30  0E00               	movlw	0
  1381  000A32  6F72               	movwf	(sprintf@exp+1)& (0+255),b
  1382  000A34  0E00               	movlw	0
  1383  000A36  6F71               	movwf	sprintf@exp& (0+255),b
  1384                           
  1385                           ; BSR set to: 0
  1386                           ;doprnt.c: 836: if( fval!=0) {
  1387  000A38  5173               	movf	sprintf@fval& (0+255),w,b
  1388  000A3A  1174               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1389  000A3C  1175               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1390  000A3E  B4D8               	btfsc	status,2,c
  1391  000A40  D086               	goto	l272
  1392                           
  1393                           ; BSR set to: 0
  1394                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1395  000A42  0E82               	movlw	130
  1396  000A44  6E47               	movwf	??_sprintf& (0+255),c
  1397  000A46  0EFF               	movlw	255
  1398  000A48  6E48               	movwf	(??_sprintf+1)& (0+255),c
  1399  000A4A  C073  F049         	movff	sprintf@fval,??_sprintf+2
  1400  000A4E  C074  F04A         	movff	sprintf@fval+1,??_sprintf+3
  1401  000A52  C075  F04B         	movff	sprintf@fval+2,??_sprintf+4
  1402  000A56  C076  F04C         	movff	sprintf@fval+3,??_sprintf+5
  1403  000A5A  0E10               	movlw	16
  1404  000A5C  D005               	goto	u2910
  1405  000A5E                     u2915:
  1406  000A5E  90D8               	bcf	status,0,c
  1407  000A60  324C               	rrcf	??_sprintf+5,f,c
  1408  000A62  324B               	rrcf	??_sprintf+4,f,c
  1409  000A64  324A               	rrcf	??_sprintf+3,f,c
  1410  000A66  3249               	rrcf	??_sprintf+2,f,c
  1411  000A68                     u2910:
  1412  000A68  2EE8               	decfsz	wreg,f,c
  1413  000A6A  D7F9               	goto	u2915
  1414  000A6C  5049               	movf	??_sprintf+2,w,c
  1415  000A6E  2447               	addwf	??_sprintf,w,c
  1416  000A70  6F71               	movwf	sprintf@exp& (0+255),b
  1417  000A72  0E00               	movlw	0
  1418  000A74  2048               	addwfc	??_sprintf+1,w,c
  1419  000A76  6F72               	movwf	(sprintf@exp+1)& (0+255),b
  1420                           
  1421                           ; BSR set to: 0
  1422                           ;doprnt.c: 838: exp--;
  1423  000A78  0771               	decf	sprintf@exp& (0+255),f,b
  1424  000A7A  A0D8               	btfss	status,0,c
  1425  000A7C  0772               	decf	(sprintf@exp+1)& (0+255),f,b
  1426                           
  1427                           ; BSR set to: 0
  1428                           ;doprnt.c: 839: exp *= 3;
  1429  000A7E  C071  F00F         	movff	sprintf@exp,___wmul@multiplier
  1430  000A82  C072  F010         	movff	sprintf@exp+1,___wmul@multiplier+1
  1431  000A86  0E00               	movlw	0
  1432  000A88  6E12               	movwf	___wmul@multiplicand+1,c
  1433  000A8A  0E03               	movlw	3
  1434  000A8C  6E11               	movwf	___wmul@multiplicand,c
  1435  000A8E  EC12  F013         	call	___wmul	;wreg free
  1436  000A92  C00F  F071         	movff	?___wmul,sprintf@exp
  1437  000A96  C010  F072         	movff	?___wmul+1,sprintf@exp+1
  1438                           
  1439                           ;doprnt.c: 840: exp /= 10;
  1440  000A9A  C071  F007         	movff	sprintf@exp,___awdiv@dividend
  1441  000A9E  C072  F008         	movff	sprintf@exp+1,___awdiv@dividend+1
  1442  000AA2  0E00               	movlw	0
  1443  000AA4  6E0A               	movwf	___awdiv@divisor+1,c
  1444  000AA6  0E0A               	movlw	10
  1445  000AA8  6E09               	movwf	___awdiv@divisor,c
  1446  000AAA  ECDF  F010         	call	___awdiv	;wreg free
  1447  000AAE  C007  F071         	movff	?___awdiv,sprintf@exp
  1448  000AB2  C008  F072         	movff	?___awdiv+1,sprintf@exp+1
  1449                           
  1450                           ;doprnt.c: 841: if(exp < 0)
  1451  000AB6  0100               	movlb	0	; () banked
  1452  000AB8  AF72               	btfss	(sprintf@exp+1)& (0+255),7,b
  1453  000ABA  D003               	goto	l269
  1454                           
  1455                           ; BSR set to: 0
  1456                           ;doprnt.c: 842: exp--;
  1457  000ABC  0771               	decf	sprintf@exp& (0+255),f,b
  1458  000ABE  A0D8               	btfss	status,0,c
  1459  000AC0  0772               	decf	(sprintf@exp+1)& (0+255),f,b
  1460  000AC2                     l269:
  1461                           
  1462                           ; BSR set to: 0
  1463                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1464                           
  1465                           ; BSR set to: 0
  1466  000AC2  5171               	movf	sprintf@exp& (0+255),w,b
  1467  000AC4  0800               	sublw	0
  1468  000AC6  EC8E  F008         	call	_scale
  1469  000ACA  C024  F06D         	movff	?_scale,sprintf@tmpval
  1470  000ACE  C025  F06E         	movff	?_scale+1,sprintf@tmpval+1
  1471  000AD2  C026  F06F         	movff	?_scale+2,sprintf@tmpval+2
  1472                           
  1473                           ;doprnt.c: 847: tmpval.integ *= fval;
  1474  000AD6  C06D  F015         	movff	sprintf@tmpval,___ftmul@f1
  1475  000ADA  C06E  F016         	movff	sprintf@tmpval+1,___ftmul@f1+1
  1476  000ADE  C06F  F017         	movff	sprintf@tmpval+2,___ftmul@f1+2
  1477  000AE2  C073  F018         	movff	sprintf@fval,___ftmul@f2
  1478  000AE6  C074  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  1479  000AEA  C075  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  1480  000AEE  ECBE  F00D         	call	___ftmul	;wreg free
  1481  000AF2  C015  F06D         	movff	?___ftmul,sprintf@tmpval
  1482  000AF6  C016  F06E         	movff	?___ftmul+1,sprintf@tmpval+1
  1483  000AFA  C017  F06F         	movff	?___ftmul+2,sprintf@tmpval+2
  1484                           
  1485                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1486  000AFE  C06D  F001         	movff	sprintf@tmpval,___ftge@ff1
  1487  000B02  C06E  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1488  000B06  C06F  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1489  000B0A  0E00               	movlw	0
  1490  000B0C  6E04               	movwf	___ftge@ff2,c
  1491  000B0E  0E80               	movlw	128
  1492  000B10  6E05               	movwf	___ftge@ff2+1,c
  1493  000B12  0E3F               	movlw	63
  1494  000B14  6E06               	movwf	___ftge@ff2+2,c
  1495  000B16  EC97  F010         	call	___ftge	;wreg free
  1496  000B1A  B0D8               	btfsc	status,0,c
  1497  000B1C  D005               	goto	l270
  1498                           
  1499                           ;doprnt.c: 849: exp--;
  1500  000B1E  0100               	movlb	0	; () banked
  1501  000B20  0771               	decf	sprintf@exp& (0+255),f,b
  1502  000B22  A0D8               	btfss	status,0,c
  1503  000B24  0772               	decf	(sprintf@exp+1)& (0+255),f,b
  1504  000B26  D013               	goto	l272
  1505  000B28                     l270:
  1506                           
  1507                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1508                           
  1509                           ; BSR set to: 0
  1510  000B28  C06D  F001         	movff	sprintf@tmpval,___ftge@ff1
  1511  000B2C  C06E  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1512  000B30  C06F  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1513  000B34  0E00               	movlw	0
  1514  000B36  6E04               	movwf	___ftge@ff2,c
  1515  000B38  0E20               	movlw	32
  1516  000B3A  6E05               	movwf	___ftge@ff2+1,c
  1517  000B3C  0E41               	movlw	65
  1518  000B3E  6E06               	movwf	___ftge@ff2+2,c
  1519  000B40  EC97  F010         	call	___ftge	;wreg free
  1520  000B44  A0D8               	btfss	status,0,c
  1521  000B46  D003               	goto	l272
  1522                           
  1523                           ;doprnt.c: 851: exp++;
  1524  000B48  0100               	movlb	0	; () banked
  1525  000B4A  4B71               	infsnz	sprintf@exp& (0+255),f,b
  1526  000B4C  2B72               	incf	(sprintf@exp+1)& (0+255),f,b
  1527  000B4E                     l272:
  1528                           
  1529                           ;doprnt.c: 852: }
  1530                           ;doprnt.c: 1112: if(prec <= 12)
  1531                           
  1532                           ; BSR set to: 0
  1533                           
  1534                           ; BSR set to: 0
  1535                           
  1536                           ; BSR set to: 0
  1537  000B4E  0100               	movlb	0	; () banked
  1538  000B50  BF77               	btfsc	(sprintf@prec+1)& (0+255),7,b
  1539  000B52  D006               	goto	u2950
  1540  000B54  5177               	movf	(sprintf@prec+1)& (0+255),w,b
  1541  000B56  E11B               	bnz	l2972
  1542  000B58  0E0D               	movlw	13
  1543  000B5A  5D76               	subwf	sprintf@prec& (0+255),w,b
  1544  000B5C  B0D8               	btfsc	status,0,c
  1545  000B5E  D017               	goto	l273
  1546  000B60                     u2950:
  1547                           
  1548                           ; BSR set to: 0
  1549                           ;doprnt.c: 1113: fval += fround(prec);
  1550  000B60  C073  F02E         	movff	sprintf@fval,___ftadd@f1
  1551  000B64  C074  F02F         	movff	sprintf@fval+1,___ftadd@f1+1
  1552  000B68  C075  F030         	movff	sprintf@fval+2,___ftadd@f1+2
  1553  000B6C  5176               	movf	sprintf@prec& (0+255),w,b
  1554  000B6E  EC92  F00A         	call	_fround
  1555  000B72  C024  F031         	movff	?_fround,___ftadd@f2
  1556  000B76  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  1557  000B7A  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  1558  000B7E  ECBB  F00B         	call	___ftadd	;wreg free
  1559  000B82  C02E  F073         	movff	?___ftadd,sprintf@fval
  1560  000B86  C02F  F074         	movff	?___ftadd+1,sprintf@fval+1
  1561  000B8A  C030  F075         	movff	?___ftadd+2,sprintf@fval+2
  1562  000B8E                     l273:
  1563  000B8E                     l2972:
  1564                           
  1565                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1566  000B8E  0100               	movlb	0	; () banked
  1567  000B90  BF72               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1568  000B92  D006               	goto	u2960
  1569  000B94  5172               	movf	(sprintf@exp+1)& (0+255),w,b
  1570  000B96  E120               	bnz	l2980
  1571  000B98  0E0A               	movlw	10
  1572  000B9A  5D71               	subwf	sprintf@exp& (0+255),w,b
  1573  000B9C  B0D8               	btfsc	status,0,c
  1574  000B9E  D01C               	goto	u2990
  1575  000BA0                     u2960:
  1576                           
  1577                           ; BSR set to: 0
  1578  000BA0  5173               	movf	sprintf@fval& (0+255),w,b
  1579  000BA2  1174               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1580  000BA4  1175               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1581  000BA6  B4D8               	btfsc	status,2,c
  1582  000BA8  D056               	goto	l274
  1583                           
  1584                           ; BSR set to: 0
  1585  000BAA  C073  F02B         	movff	sprintf@fval,___fttol@f1
  1586  000BAE  C074  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  1587  000BB2  C075  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  1588  000BB6  EC38  F00E         	call	___fttol	;wreg free
  1589  000BBA  502B               	movf	?___fttol,w,c
  1590  000BBC  102C               	iorwf	?___fttol+1,w,c
  1591  000BBE  102D               	iorwf	?___fttol+2,w,c
  1592  000BC0  102E               	iorwf	?___fttol+3,w,c
  1593  000BC2  A4D8               	btfss	status,2,c
  1594  000BC4  D048               	goto	l274
  1595  000BC6  0100               	movlb	0	; () banked
  1596  000BC8  BF72               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1597  000BCA  D045               	goto	l274
  1598  000BCC  5172               	movf	(sprintf@exp+1)& (0+255),w,b
  1599  000BCE  E104               	bnz	l2980
  1600  000BD0  0E02               	movlw	2
  1601  000BD2  5D71               	subwf	sprintf@exp& (0+255),w,b
  1602  000BD4  A0D8               	btfss	status,0,c
  1603  000BD6  D03F               	goto	l274
  1604  000BD8                     u2990:
  1605  000BD8                     l2980:
  1606                           
  1607                           ; BSR set to: 0
  1608                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  1609  000BD8  C06D  F001         	movff	sprintf@tmpval,___ftge@ff1
  1610  000BDC  C06E  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1611  000BE0  C06F  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1612  000BE4  0E70               	movlw	112
  1613  000BE6  6E04               	movwf	___ftge@ff2,c
  1614  000BE8  0E89               	movlw	137
  1615  000BEA  6E05               	movwf	___ftge@ff2+1,c
  1616  000BEC  0E40               	movlw	64
  1617  000BEE  6E06               	movwf	___ftge@ff2+2,c
  1618  000BF0  EC97  F010         	call	___ftge	;wreg free
  1619  000BF4  B0D8               	btfsc	status,0,c
  1620  000BF6  D003               	goto	l277
  1621                           
  1622                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1623  000BF8  0100               	movlb	0	; () banked
  1624  000BFA  0EF7               	movlw	247
  1625  000BFC  D002               	goto	L1
  1626  000BFE                     l277:
  1627                           
  1628                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1629                           
  1630                           ; BSR set to: 0
  1631  000BFE  0100               	movlb	0	; () banked
  1632  000C00  0EF8               	movlw	248
  1633  000C02                     L1:
  1634  000C02  2771               	addwf	sprintf@exp& (0+255),f,b
  1635  000C04  0EFF               	movlw	255
  1636  000C06  2372               	addwfc	(sprintf@exp+1)& (0+255),f,b
  1637                           
  1638                           ; BSR set to: 0
  1639                           ;doprnt.c: 1124: }
  1640                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  1641                           
  1642                           ; BSR set to: 0
  1643  000C08  5171               	movf	sprintf@exp& (0+255),w,b
  1644  000C0A  EC8E  F008         	call	_scale
  1645  000C0E  C024  F06D         	movff	?_scale,sprintf@tmpval
  1646  000C12  C025  F06E         	movff	?_scale+1,sprintf@tmpval+1
  1647  000C16  C026  F06F         	movff	?_scale+2,sprintf@tmpval+2
  1648                           
  1649                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  1650  000C1A  C073  F001         	movff	sprintf@fval,__tdiv_to_l_@f1
  1651  000C1E  C074  F002         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  1652  000C22  C075  F003         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  1653  000C26  C06D  F004         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  1654  000C2A  C06E  F005         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  1655  000C2E  C06F  F006         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  1656  000C32  EC91  F00C         	call	__tdiv_to_l_	;wreg free
  1657  000C36  C001  F065         	movff	?__tdiv_to_l_,sprintf@val
  1658  000C3A  C002  F066         	movff	?__tdiv_to_l_+1,sprintf@val+1
  1659  000C3E  C003  F067         	movff	?__tdiv_to_l_+2,sprintf@val+2
  1660  000C42  C004  F068         	movff	?__tdiv_to_l_+3,sprintf@val+3
  1661                           
  1662                           ;doprnt.c: 1129: fval = 0.0;
  1663  000C46  0E00               	movlw	0
  1664  000C48  0100               	movlb	0	; () banked
  1665  000C4A  6F73               	movwf	sprintf@fval& (0+255),b
  1666  000C4C  0E00               	movlw	0
  1667  000C4E  6F74               	movwf	(sprintf@fval+1)& (0+255),b
  1668  000C50  0E00               	movlw	0
  1669  000C52  6F75               	movwf	(sprintf@fval+2)& (0+255),b
  1670                           
  1671                           ;doprnt.c: 1130: } else {
  1672  000C54  D033               	goto	l283
  1673  000C56                     l274:
  1674                           
  1675                           ;doprnt.c: 1131: val = (unsigned long)fval;
  1676                           
  1677                           ; BSR set to: 0
  1678  000C56  C073  F02B         	movff	sprintf@fval,___fttol@f1
  1679  000C5A  C074  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  1680  000C5E  C075  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  1681  000C62  EC38  F00E         	call	___fttol	;wreg free
  1682  000C66  C02B  F065         	movff	?___fttol,sprintf@val
  1683  000C6A  C02C  F066         	movff	?___fttol+1,sprintf@val+1
  1684  000C6E  C02D  F067         	movff	?___fttol+2,sprintf@val+2
  1685  000C72  C02E  F068         	movff	?___fttol+3,sprintf@val+3
  1686                           
  1687                           ;doprnt.c: 1132: fval -= (double)val;
  1688  000C76  C073  F03A         	movff	sprintf@fval,___ftsub@f1
  1689  000C7A  C074  F03B         	movff	sprintf@fval+1,___ftsub@f1+1
  1690  000C7E  C075  F03C         	movff	sprintf@fval+2,___ftsub@f1+2
  1691  000C82  C065  F009         	movff	sprintf@val,___lltoft@c
  1692  000C86  C066  F00A         	movff	sprintf@val+1,___lltoft@c+1
  1693  000C8A  C067  F00B         	movff	sprintf@val+2,___lltoft@c+2
  1694  000C8E  C068  F00C         	movff	sprintf@val+3,___lltoft@c+3
  1695  000C92  EC75  F012         	call	___lltoft	;wreg free
  1696  000C96  C009  F03D         	movff	?___lltoft,___ftsub@f2
  1697  000C9A  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  1698  000C9E  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  1699  000CA2  ECA3  F012         	call	___ftsub	;wreg free
  1700  000CA6  C03A  F073         	movff	?___ftsub,sprintf@fval
  1701  000CAA  C03B  F074         	movff	?___ftsub+1,sprintf@fval+1
  1702  000CAE  C03C  F075         	movff	?___ftsub+2,sprintf@fval+2
  1703                           
  1704                           ;doprnt.c: 1133: exp = 0;
  1705  000CB2  0E00               	movlw	0
  1706  000CB4  0100               	movlb	0	; () banked
  1707  000CB6  6F72               	movwf	(sprintf@exp+1)& (0+255),b
  1708  000CB8  0E00               	movlw	0
  1709  000CBA  6F71               	movwf	sprintf@exp& (0+255),b
  1710  000CBC                     l283:
  1711                           
  1712                           ; BSR set to: 0
  1713                           ;doprnt.c: 1134: }
  1714                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  1715                           
  1716                           ; BSR set to: 0
  1717  000CBC  0E01               	movlw	1
  1718  000CBE  6F78               	movwf	sprintf@c& (0+255),b
  1719  000CC0                     l3000:
  1720                           
  1721                           ; BSR set to: 0
  1722  000CC0  0E0A               	movlw	10
  1723  000CC2  1978               	xorwf	sprintf@c& (0+255),w,b
  1724  000CC4  B4D8               	btfsc	status,2,c
  1725  000CC6  D018               	goto	u3030
  1726                           
  1727                           ; BSR set to: 0
  1728                           ;doprnt.c: 1137: if(val < dpowers[c])
  1729                           
  1730                           ; BSR set to: 0
  1731                           
  1732                           ; BSR set to: 0
  1733  000CC8  5178               	movf	sprintf@c& (0+255),w,b
  1734  000CCA  0D04               	mullw	4
  1735  000CCC  0E01               	movlw	low _dpowers
  1736  000CCE  24F3               	addwf	prodl,w,c
  1737  000CD0  6EF6               	movwf	tblptrl,c
  1738  000CD2  0E08               	movlw	high _dpowers
  1739  000CD4  20F4               	addwfc	prodh,w,c
  1740  000CD6  6EF7               	movwf	tblptrh,c
  1741  000CD8                     	if	0	;There are less than 3 active tblptr bytes
  1742  000CD8                     	endif
  1743  000CD8  0009               	tblrd		*+
  1744  000CDA  50F5               	movf	tablat,w,c
  1745  000CDC  5D65               	subwf	sprintf@val& (0+255),w,b
  1746  000CDE  0009               	tblrd		*+
  1747  000CE0  50F5               	movf	tablat,w,c
  1748  000CE2  5966               	subwfb	(sprintf@val+1)& (0+255),w,b
  1749  000CE4  0009               	tblrd		*+
  1750  000CE6  50F5               	movf	tablat,w,c
  1751  000CE8  5967               	subwfb	(sprintf@val+2)& (0+255),w,b
  1752  000CEA  0009               	tblrd		*+
  1753  000CEC  50F5               	movf	tablat,w,c
  1754  000CEE  5968               	subwfb	(sprintf@val+3)& (0+255),w,b
  1755  000CF0  A0D8               	btfss	status,0,c
  1756  000CF2  D002               	goto	u3030
  1757                           
  1758                           ; BSR set to: 0
  1759                           
  1760                           ; BSR set to: 0
  1761                           
  1762                           ; BSR set to: 0
  1763                           ;doprnt.c: 1138: break;
  1764  000CF4  2B78               	incf	sprintf@c& (0+255),f,b
  1765  000CF6  D7E4               	goto	l3000
  1766  000CF8                     u3030:
  1767                           
  1768                           ; BSR set to: 0
  1769                           ;doprnt.c: 1142: width -= prec + c + exp;
  1770                           
  1771                           ; BSR set to: 0
  1772  000CF8  C078  F047         	movff	sprintf@c,??_sprintf
  1773  000CFC  6A48               	clrf	(??_sprintf+1)& (0+255),c
  1774  000CFE  BE47               	btfsc	??_sprintf& (0+255),7,c
  1775  000D00  0648               	decf	(??_sprintf+1)& (0+255),f,c
  1776  000D02  5176               	movf	sprintf@prec& (0+255),w,b
  1777  000D04  2647               	addwf	??_sprintf,f,c
  1778  000D06  5177               	movf	(sprintf@prec+1)& (0+255),w,b
  1779  000D08  2248               	addwfc	??_sprintf+1,f,c
  1780  000D0A  5171               	movf	sprintf@exp& (0+255),w,b
  1781  000D0C  2647               	addwf	??_sprintf,f,c
  1782  000D0E  5172               	movf	(sprintf@exp+1)& (0+255),w,b
  1783  000D10  2248               	addwfc	??_sprintf+1,f,c
  1784  000D12  5047               	movf	??_sprintf,w,c
  1785  000D14  5F6B               	subwf	sprintf@width& (0+255),f,b
  1786  000D16  5048               	movf	??_sprintf+1,w,c
  1787  000D18  5B6C               	subwfb	(sprintf@width+1)& (0+255),f,b
  1788                           
  1789                           ;doprnt.c: 1143: if(
  1790                           ;doprnt.c: 1147: prec)
  1791  000D1A  5176               	movf	sprintf@prec& (0+255),w,b
  1792  000D1C  1177               	iorwf	(sprintf@prec+1)& (0+255),w,b
  1793  000D1E  B4D8               	btfsc	status,2,c
  1794  000D20  D003               	goto	l287
  1795                           
  1796                           ; BSR set to: 0
  1797                           ;doprnt.c: 1148: width--;
  1798  000D22  076B               	decf	sprintf@width& (0+255),f,b
  1799  000D24  A0D8               	btfss	status,0,c
  1800  000D26  076C               	decf	(sprintf@width+1)& (0+255),f,b
  1801  000D28                     l287:
  1802                           
  1803                           ; BSR set to: 0
  1804                           ;doprnt.c: 1149: if(flag & 0x03)
  1805                           
  1806                           ; BSR set to: 0
  1807  000D28  0E03               	movlw	3
  1808  000D2A  1569               	andwf	sprintf@flag& (0+255),w,b
  1809  000D2C  6E47               	movwf	??_sprintf& (0+255),c
  1810  000D2E  0E00               	movlw	0
  1811  000D30  156A               	andwf	(sprintf@flag+1)& (0+255),w,b
  1812  000D32  6E48               	movwf	(??_sprintf+1)& (0+255),c
  1813  000D34  5047               	movf	??_sprintf,w,c
  1814  000D36  1048               	iorwf	??_sprintf+1,w,c
  1815  000D38  B4D8               	btfsc	status,2,c
  1816  000D3A  D00C               	goto	l289
  1817  000D3C  D008               	goto	l3024
  1818  000D3E                     l3020:
  1819                           
  1820                           ; BSR set to: 0
  1821                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  1822  000D3E  C040  FFD9         	movff	sprintf@sp,fsr2l
  1823  000D42  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1824  000D46  0E20               	movlw	32
  1825  000D48  6EDF               	movwf	indf2,c
  1826                           
  1827                           ; BSR set to: 0
  1828  000D4A  4A40               	infsnz	sprintf@sp,f,c
  1829  000D4C  2A41               	incf	sprintf@sp+1,f,c
  1830  000D4E                     l3024:
  1831                           
  1832                           ; BSR set to: 0
  1833                           ;doprnt.c: 1182: width--;
  1834  000D4E  076B               	decf	sprintf@width& (0+255),f,b
  1835  000D50  A0D8               	btfss	status,0,c
  1836  000D52  076C               	decf	(sprintf@width+1)& (0+255),f,b
  1837  000D54                     l289:
  1838                           
  1839                           ; BSR set to: 0
  1840                           
  1841                           ; BSR set to: 0
  1842  000D54  BF6C               	btfsc	(sprintf@width+1)& (0+255),7,b
  1843  000D56  D005               	goto	u3060
  1844  000D58  516C               	movf	(sprintf@width+1)& (0+255),w,b
  1845  000D5A  E1F1               	bnz	l3020
  1846  000D5C  056B               	decf	sprintf@width& (0+255),w,b
  1847  000D5E  B0D8               	btfsc	status,0,c
  1848  000D60  D7EE               	goto	l290
  1849  000D62                     u3060:
  1850                           
  1851                           ; BSR set to: 0
  1852                           ;doprnt.c: 1183: }
  1853                           ;doprnt.c: 1188: if(flag & 0x03)
  1854                           
  1855                           ; BSR set to: 0
  1856  000D62  0E03               	movlw	3
  1857  000D64  1569               	andwf	sprintf@flag& (0+255),w,b
  1858  000D66  6E47               	movwf	??_sprintf& (0+255),c
  1859  000D68  0E00               	movlw	0
  1860  000D6A  156A               	andwf	(sprintf@flag+1)& (0+255),w,b
  1861  000D6C  6E48               	movwf	(??_sprintf+1)& (0+255),c
  1862  000D6E  5047               	movf	??_sprintf,w,c
  1863  000D70  1048               	iorwf	??_sprintf+1,w,c
  1864  000D72  B4D8               	btfsc	status,2,c
  1865  000D74  D050               	goto	l293
  1866                           
  1867                           ; BSR set to: 0
  1868                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  1869  000D76  C040  FFD9         	movff	sprintf@sp,fsr2l
  1870  000D7A  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1871  000D7E  0E2D               	movlw	45
  1872  000D80  D047               	goto	L2
  1873  000D82                     
  1874                           ; BSR set to: 0
  1875                           ;doprnt.c: 1200: {
  1876                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  1877                           
  1878                           ; BSR set to: 0
  1879  000D82  C065  F001         	movff	sprintf@val,___lldiv@dividend
  1880  000D86  C066  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  1881  000D8A  C067  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  1882  000D8E  C068  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  1883  000D92  5178               	movf	sprintf@c& (0+255),w,b
  1884  000D94  0D04               	mullw	4
  1885  000D96  0E01               	movlw	low _dpowers
  1886  000D98  24F3               	addwf	prodl,w,c
  1887  000D9A  6EF6               	movwf	tblptrl,c
  1888  000D9C  0E08               	movlw	high _dpowers
  1889  000D9E  20F4               	addwfc	prodh,w,c
  1890  000DA0  6EF7               	movwf	tblptrh,c
  1891  000DA2                     	if	0	;There are less than 3 active tblptr bytes
  1892  000DA2                     	endif
  1893  000DA2  0009               	tblrd		*+
  1894  000DA4  CFF5 F005          	movff	tablat,___lldiv@divisor
  1895  000DA8  0009               	tblrd		*+
  1896  000DAA  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1897  000DAE  0009               	tblrd		*+
  1898  000DB0  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1899  000DB4  000A               	tblrd		*-
  1900  000DB6  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1901  000DBA  EC21  F011         	call	___lldiv	;wreg free
  1902  000DBE  C001  F06D         	movff	?___lldiv,sprintf@tmpval
  1903  000DC2  C002  F06E         	movff	?___lldiv+1,sprintf@tmpval+1
  1904  000DC6  C003  F06F         	movff	?___lldiv+2,sprintf@tmpval+2
  1905  000DCA  C004  F070         	movff	?___lldiv+3,sprintf@tmpval+3
  1906                           
  1907                           ;doprnt.c: 1202: tmpval.vd %= 10;
  1908  000DCE  C06D  F001         	movff	sprintf@tmpval,___llmod@dividend
  1909  000DD2  C06E  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  1910  000DD6  C06F  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  1911  000DDA  C070  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  1912  000DDE  0E0A               	movlw	10
  1913  000DE0  6E05               	movwf	___llmod@divisor,c
  1914  000DE2  0E00               	movlw	0
  1915  000DE4  6E06               	movwf	___llmod@divisor+1,c
  1916  000DE6  0E00               	movlw	0
  1917  000DE8  6E07               	movwf	___llmod@divisor+2,c
  1918  000DEA  0E00               	movlw	0
  1919  000DEC  6E08               	movwf	___llmod@divisor+3,c
  1920  000DEE  EC0F  F012         	call	___llmod	;wreg free
  1921  000DF2  C001  F06D         	movff	?___llmod,sprintf@tmpval
  1922  000DF6  C002  F06E         	movff	?___llmod+1,sprintf@tmpval+1
  1923  000DFA  C003  F06F         	movff	?___llmod+2,sprintf@tmpval+2
  1924  000DFE  C004  F070         	movff	?___llmod+3,sprintf@tmpval+3
  1925                           
  1926                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  1927  000E02  0100               	movlb	0	; () banked
  1928  000E04  516D               	movf	sprintf@tmpval& (0+255),w,b
  1929  000E06  0F30               	addlw	48
  1930  000E08  C040  FFD9         	movff	sprintf@sp,fsr2l
  1931  000E0C  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1932  000E10                     L2:
  1933  000E10  6EDF               	movwf	indf2,c
  1934                           
  1935                           ; BSR set to: 0
  1936  000E12  4A40               	infsnz	sprintf@sp,f,c
  1937  000E14  2A41               	incf	sprintf@sp+1,f,c
  1938  000E16                     l293:
  1939                           
  1940                           ; BSR set to: 0
  1941                           
  1942                           ; BSR set to: 0
  1943  000E16  0778               	decf	sprintf@c& (0+255),f,b
  1944  000E18  2978               	incf	sprintf@c& (0+255),w,b
  1945  000E1A  B4D8               	btfsc	status,2,c
  1946  000E1C  D00C               	goto	l296
  1947  000E1E  D7B1               	goto	l294
  1948  000E20                     l3044:
  1949                           
  1950                           ; BSR set to: 0
  1951                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  1952  000E20  C040  FFD9         	movff	sprintf@sp,fsr2l
  1953  000E24  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1954  000E28  0E30               	movlw	48
  1955  000E2A  6EDF               	movwf	indf2,c
  1956                           
  1957                           ; BSR set to: 0
  1958  000E2C  4A40               	infsnz	sprintf@sp,f,c
  1959  000E2E  2A41               	incf	sprintf@sp+1,f,c
  1960                           
  1961                           ; BSR set to: 0
  1962                           ;doprnt.c: 1209: exp--;
  1963  000E30  0771               	decf	sprintf@exp& (0+255),f,b
  1964  000E32  A0D8               	btfss	status,0,c
  1965  000E34  0772               	decf	(sprintf@exp+1)& (0+255),f,b
  1966  000E36                     l296:
  1967                           
  1968                           ; BSR set to: 0
  1969                           
  1970                           ; BSR set to: 0
  1971  000E36  BF72               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1972  000E38  D005               	goto	u3090
  1973  000E3A  5172               	movf	(sprintf@exp+1)& (0+255),w,b
  1974  000E3C  E1F1               	bnz	l3044
  1975  000E3E  0571               	decf	sprintf@exp& (0+255),w,b
  1976  000E40  B0D8               	btfsc	status,0,c
  1977  000E42  D7EE               	goto	l297
  1978  000E44                     u3090:
  1979                           
  1980                           ; BSR set to: 0
  1981                           ;doprnt.c: 1210: }
  1982                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  1983                           
  1984                           ; BSR set to: 0
  1985  000E44  BF77               	btfsc	(sprintf@prec+1)& (0+255),7,b
  1986  000E46  D009               	goto	l299
  1987  000E48  5177               	movf	(sprintf@prec+1)& (0+255),w,b
  1988  000E4A  E104               	bnz	u3100
  1989  000E4C  0E09               	movlw	9
  1990  000E4E  5D76               	subwf	sprintf@prec& (0+255),w,b
  1991  000E50  A0D8               	btfss	status,0,c
  1992  000E52  D003               	goto	l299
  1993  000E54                     u3100:
  1994                           
  1995                           ; BSR set to: 0
  1996                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  1997  000E54  0E08               	movlw	8
  1998  000E56  6F78               	movwf	sprintf@c& (0+255),b
  1999  000E58  D002               	goto	l300
  2000  000E5A                     l299:
  2001                           
  2002                           ; BSR set to: 0
  2003                           ;doprnt.c: 1213: else
  2004                           ;doprnt.c: 1214: c = prec;
  2005  000E5A  C076  F078         	movff	sprintf@prec,sprintf@c
  2006  000E5E                     l300:
  2007                           
  2008                           ; BSR set to: 0
  2009                           ;doprnt.c: 1215: prec -= c;
  2010                           
  2011                           ; BSR set to: 0
  2012  000E5E  5178               	movf	sprintf@c& (0+255),w,b
  2013  000E60  5F76               	subwf	sprintf@prec& (0+255),f,b
  2014  000E62  0E00               	movlw	0
  2015  000E64  BF78               	btfsc	sprintf@c& (0+255),7,b
  2016  000E66  0EFF               	movlw	255
  2017  000E68  5B77               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2018                           
  2019                           ; BSR set to: 0
  2020                           ;doprnt.c: 1219: if(c)
  2021  000E6A  5178               	movf	sprintf@c& (0+255),w,b
  2022  000E6C  B4D8               	btfsc	status,2,c
  2023  000E6E  D008               	goto	l301
  2024                           
  2025                           ; BSR set to: 0
  2026                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  2027  000E70  C040  FFD9         	movff	sprintf@sp,fsr2l
  2028  000E74  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2029  000E78  0E2E               	movlw	46
  2030  000E7A  6EDF               	movwf	indf2,c
  2031                           
  2032                           ; BSR set to: 0
  2033  000E7C  4A40               	infsnz	sprintf@sp,f,c
  2034  000E7E  2A41               	incf	sprintf@sp+1,f,c
  2035  000E80                     l301:
  2036                           
  2037                           ; BSR set to: 0
  2038                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2039                           
  2040                           ; BSR set to: 0
  2041  000E80  5178               	movf	sprintf@c& (0+255),w,b
  2042  000E82  EC8E  F008         	call	_scale
  2043  000E86  C024  F060         	movff	?_scale,_sprintf$1570
  2044  000E8A  C025  F061         	movff	?_scale+1,_sprintf$1570+1
  2045  000E8E  C026  F062         	movff	?_scale+2,_sprintf$1570+2
  2046                           
  2047                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2048  000E92  C073  F018         	movff	sprintf@fval,___ftmul@f2
  2049  000E96  C074  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  2050  000E9A  C075  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  2051  000E9E  C060  F015         	movff	_sprintf$1570,___ftmul@f1
  2052  000EA2  C061  F016         	movff	_sprintf$1570+1,___ftmul@f1+1
  2053  000EA6  C062  F017         	movff	_sprintf$1570+2,___ftmul@f1+2
  2054  000EAA  ECBE  F00D         	call	___ftmul	;wreg free
  2055  000EAE  C015  F02B         	movff	?___ftmul,___fttol@f1
  2056  000EB2  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  2057  000EB6  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  2058  000EBA  EC38  F00E         	call	___fttol	;wreg free
  2059  000EBE  C02B  F065         	movff	?___fttol,sprintf@val
  2060  000EC2  C02C  F066         	movff	?___fttol+1,sprintf@val+1
  2061  000EC6  C02D  F067         	movff	?___fttol+2,sprintf@val+2
  2062  000ECA  C02E  F068         	movff	?___fttol+3,sprintf@val+3
  2063                           
  2064                           ;doprnt.c: 1228: while(c--) {
  2065  000ECE  D071               	goto	l302
  2066  000ED0                     
  2067                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2068  000ED0  C065  F001         	movff	sprintf@val,___lldiv@dividend
  2069  000ED4  C066  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2070  000ED8  C067  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2071  000EDC  C068  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2072  000EE0  0100               	movlb	0	; () banked
  2073  000EE2  5178               	movf	sprintf@c& (0+255),w,b
  2074  000EE4  0D04               	mullw	4
  2075  000EE6  0E01               	movlw	low _dpowers
  2076  000EE8  24F3               	addwf	prodl,w,c
  2077  000EEA  6EF6               	movwf	tblptrl,c
  2078  000EEC  0E08               	movlw	high _dpowers
  2079  000EEE  20F4               	addwfc	prodh,w,c
  2080  000EF0  6EF7               	movwf	tblptrh,c
  2081  000EF2                     	if	0	;There are less than 3 active tblptr bytes
  2082  000EF2                     	endif
  2083  000EF2  0009               	tblrd		*+
  2084  000EF4  CFF5 F005          	movff	tablat,___lldiv@divisor
  2085  000EF8  0009               	tblrd		*+
  2086  000EFA  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2087  000EFE  0009               	tblrd		*+
  2088  000F00  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2089  000F04  000A               	tblrd		*-
  2090  000F06  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2091  000F0A  EC21  F011         	call	___lldiv	;wreg free
  2092  000F0E  C001  F06D         	movff	?___lldiv,sprintf@tmpval
  2093  000F12  C002  F06E         	movff	?___lldiv+1,sprintf@tmpval+1
  2094  000F16  C003  F06F         	movff	?___lldiv+2,sprintf@tmpval+2
  2095  000F1A  C004  F070         	movff	?___lldiv+3,sprintf@tmpval+3
  2096                           
  2097                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2098  000F1E  C06D  F001         	movff	sprintf@tmpval,___llmod@dividend
  2099  000F22  C06E  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2100  000F26  C06F  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2101  000F2A  C070  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2102  000F2E  0E0A               	movlw	10
  2103  000F30  6E05               	movwf	___llmod@divisor,c
  2104  000F32  0E00               	movlw	0
  2105  000F34  6E06               	movwf	___llmod@divisor+1,c
  2106  000F36  0E00               	movlw	0
  2107  000F38  6E07               	movwf	___llmod@divisor+2,c
  2108  000F3A  0E00               	movlw	0
  2109  000F3C  6E08               	movwf	___llmod@divisor+3,c
  2110  000F3E  EC0F  F012         	call	___llmod	;wreg free
  2111  000F42  C001  F06D         	movff	?___llmod,sprintf@tmpval
  2112  000F46  C002  F06E         	movff	?___llmod+1,sprintf@tmpval+1
  2113  000F4A  C003  F06F         	movff	?___llmod+2,sprintf@tmpval+2
  2114  000F4E  C004  F070         	movff	?___llmod+3,sprintf@tmpval+3
  2115                           
  2116                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  2117  000F52  0100               	movlb	0	; () banked
  2118  000F54  516D               	movf	sprintf@tmpval& (0+255),w,b
  2119  000F56  0F30               	addlw	48
  2120  000F58  C040  FFD9         	movff	sprintf@sp,fsr2l
  2121  000F5C  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2122  000F60  6EDF               	movwf	indf2,c
  2123                           
  2124                           ; BSR set to: 0
  2125  000F62  4A40               	infsnz	sprintf@sp,f,c
  2126  000F64  2A41               	incf	sprintf@sp+1,f,c
  2127                           
  2128                           ; BSR set to: 0
  2129                           ;doprnt.c: 1232: val %= dpowers[c];
  2130  000F66  C065  F001         	movff	sprintf@val,___llmod@dividend
  2131  000F6A  C066  F002         	movff	sprintf@val+1,___llmod@dividend+1
  2132  000F6E  C067  F003         	movff	sprintf@val+2,___llmod@dividend+2
  2133  000F72  C068  F004         	movff	sprintf@val+3,___llmod@dividend+3
  2134  000F76  5178               	movf	sprintf@c& (0+255),w,b
  2135  000F78  0D04               	mullw	4
  2136  000F7A  0E01               	movlw	low _dpowers
  2137  000F7C  24F3               	addwf	prodl,w,c
  2138  000F7E  6EF6               	movwf	tblptrl,c
  2139  000F80  0E08               	movlw	high _dpowers
  2140  000F82  20F4               	addwfc	prodh,w,c
  2141  000F84  6EF7               	movwf	tblptrh,c
  2142  000F86                     	if	0	;There are less than 3 active tblptr bytes
  2143  000F86                     	endif
  2144  000F86  0009               	tblrd		*+
  2145  000F88  CFF5 F005          	movff	tablat,___llmod@divisor
  2146  000F8C  0009               	tblrd		*+
  2147  000F8E  CFF5 F006          	movff	tablat,___llmod@divisor+1
  2148  000F92  0009               	tblrd		*+
  2149  000F94  CFF5 F007          	movff	tablat,___llmod@divisor+2
  2150  000F98  000A               	tblrd		*-
  2151  000F9A  CFF5 F008          	movff	tablat,___llmod@divisor+3
  2152  000F9E  EC0F  F012         	call	___llmod	;wreg free
  2153  000FA2  C001  F065         	movff	?___llmod,sprintf@val
  2154  000FA6  C002  F066         	movff	?___llmod+1,sprintf@val+1
  2155  000FAA  C003  F067         	movff	?___llmod+2,sprintf@val+2
  2156  000FAE  C004  F068         	movff	?___llmod+3,sprintf@val+3
  2157  000FB2                     l302:
  2158  000FB2  0100               	movlb	0	; () banked
  2159  000FB4  0778               	decf	sprintf@c& (0+255),f,b
  2160  000FB6  2978               	incf	sprintf@c& (0+255),w,b
  2161  000FB8  B4D8               	btfsc	status,2,c
  2162  000FBA  D00C               	goto	l305
  2163  000FBC  D789               	goto	l303
  2164  000FBE                     
  2165                           ; BSR set to: 0
  2166                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  2167                           
  2168                           ; BSR set to: 0
  2169  000FBE  C040  FFD9         	movff	sprintf@sp,fsr2l
  2170  000FC2  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2171  000FC6  0E30               	movlw	48
  2172  000FC8  6EDF               	movwf	indf2,c
  2173                           
  2174                           ; BSR set to: 0
  2175  000FCA  4A40               	infsnz	sprintf@sp,f,c
  2176  000FCC  2A41               	incf	sprintf@sp+1,f,c
  2177                           
  2178                           ; BSR set to: 0
  2179                           ;doprnt.c: 1237: prec--;
  2180  000FCE  0776               	decf	sprintf@prec& (0+255),f,b
  2181  000FD0  A0D8               	btfss	status,0,c
  2182  000FD2  0777               	decf	(sprintf@prec+1)& (0+255),f,b
  2183  000FD4                     l305:
  2184                           
  2185                           ; BSR set to: 0
  2186                           
  2187                           ; BSR set to: 0
  2188  000FD4  5176               	movf	sprintf@prec& (0+255),w,b
  2189  000FD6  1177               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2190  000FD8  B4D8               	btfsc	status,2,c
  2191  000FDA  D08C               	goto	l321
  2192  000FDC  D7F0               	goto	l306
  2193  000FDE                     l265:
  2194                           
  2195                           ; BSR set to: 0
  2196                           ;doprnt.c: 1246: }
  2197                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2198                           
  2199                           ; BSR set to: 0
  2200  000FDE  5176               	movf	sprintf@prec& (0+255),w,b
  2201  000FE0  1177               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2202  000FE2  A4D8               	btfss	status,2,c
  2203  000FE4  D008               	goto	l308
  2204                           
  2205                           ; BSR set to: 0
  2206  000FE6  5165               	movf	sprintf@val& (0+255),w,b
  2207  000FE8  1166               	iorwf	(sprintf@val+1)& (0+255),w,b
  2208  000FEA  1167               	iorwf	(sprintf@val+2)& (0+255),w,b
  2209  000FEC  1168               	iorwf	(sprintf@val+3)& (0+255),w,b
  2210  000FEE  A4D8               	btfss	status,2,c
  2211  000FF0  D002               	goto	l308
  2212                           
  2213                           ; BSR set to: 0
  2214                           ;doprnt.c: 1291: prec++;
  2215  000FF2  4B76               	infsnz	sprintf@prec& (0+255),f,b
  2216  000FF4  2B77               	incf	(sprintf@prec+1)& (0+255),f,b
  2217  000FF6                     l308:
  2218                           
  2219                           ; BSR set to: 0
  2220                           ;doprnt.c: 1339: if(c < prec)
  2221                           
  2222                           ; BSR set to: 0
  2223  000FF6  0E80               	movlw	128
  2224  000FF8  BF78               	btfsc	sprintf@c& (0+255),7,b
  2225  000FFA  0E7F               	movlw	127
  2226  000FFC  6E47               	movwf	??_sprintf& (0+255),c
  2227  000FFE  5176               	movf	sprintf@prec& (0+255),w,b
  2228  001000  5D78               	subwf	sprintf@c& (0+255),w,b
  2229  001002  5177               	movf	(sprintf@prec+1)& (0+255),w,b
  2230  001004  0A80               	xorlw	128
  2231  001006  5847               	subwfb	??_sprintf& (0+255),w,c
  2232  001008  B0D8               	btfsc	status,0,c
  2233  00100A  D003               	goto	l309
  2234                           
  2235                           ; BSR set to: 0
  2236                           ;doprnt.c: 1340: c = prec;
  2237  00100C  C076  F078         	movff	sprintf@prec,sprintf@c
  2238  001010  D010               	goto	l311
  2239  001012                     l309:
  2240                           
  2241                           ; BSR set to: 0
  2242                           ;doprnt.c: 1341: else if(prec < c)
  2243                           
  2244                           ; BSR set to: 0
  2245  001012  5177               	movf	(sprintf@prec+1)& (0+255),w,b
  2246  001014  0A80               	xorlw	128
  2247  001016  6E47               	movwf	??_sprintf& (0+255),c
  2248  001018  5178               	movf	sprintf@c& (0+255),w,b
  2249  00101A  5D76               	subwf	sprintf@prec& (0+255),w,b
  2250  00101C  0E80               	movlw	128
  2251  00101E  BF78               	btfsc	sprintf@c& (0+255),7,b
  2252  001020  0E7F               	movlw	127
  2253  001022  5847               	subwfb	??_sprintf& (0+255),w,c
  2254  001024  B0D8               	btfsc	status,0,c
  2255  001026  D005               	goto	l311
  2256                           
  2257                           ; BSR set to: 0
  2258                           ;doprnt.c: 1342: prec = c;
  2259  001028  5178               	movf	sprintf@c& (0+255),w,b
  2260  00102A  6F76               	movwf	sprintf@prec& (0+255),b
  2261  00102C  6B77               	clrf	(sprintf@prec+1)& (0+255),b
  2262  00102E  BF76               	btfsc	sprintf@prec& (0+255),7,b
  2263  001030  0777               	decf	(sprintf@prec+1)& (0+255),f,b
  2264  001032                     l311:
  2265                           
  2266                           ; BSR set to: 0
  2267                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2268                           
  2269                           ; BSR set to: 0
  2270                           
  2271                           ; BSR set to: 0
  2272  001032  516B               	movf	sprintf@width& (0+255),w,b
  2273  001034  116C               	iorwf	(sprintf@width+1)& (0+255),w,b
  2274  001036  B4D8               	btfsc	status,2,c
  2275  001038  D00D               	goto	l312
  2276                           
  2277                           ; BSR set to: 0
  2278  00103A  0E03               	movlw	3
  2279  00103C  1569               	andwf	sprintf@flag& (0+255),w,b
  2280  00103E  6E47               	movwf	??_sprintf& (0+255),c
  2281  001040  0E00               	movlw	0
  2282  001042  156A               	andwf	(sprintf@flag+1)& (0+255),w,b
  2283  001044  6E48               	movwf	(??_sprintf+1)& (0+255),c
  2284  001046  5047               	movf	??_sprintf,w,c
  2285  001048  1048               	iorwf	??_sprintf+1,w,c
  2286  00104A  B4D8               	btfsc	status,2,c
  2287  00104C  D003               	goto	l312
  2288                           
  2289                           ; BSR set to: 0
  2290                           ;doprnt.c: 1346: width--;
  2291  00104E  076B               	decf	sprintf@width& (0+255),f,b
  2292  001050  A0D8               	btfss	status,0,c
  2293  001052  076C               	decf	(sprintf@width+1)& (0+255),f,b
  2294  001054                     l312:
  2295                           
  2296                           ; BSR set to: 0
  2297                           ;doprnt.c: 1348: if(flag & 0x4000) {
  2298                           
  2299                           ; BSR set to: 0
  2300  001054  AD6A               	btfss	(sprintf@flag+1)& (0+255),6,b
  2301  001056  D013               	goto	l315
  2302                           
  2303                           ; BSR set to: 0
  2304                           ;doprnt.c: 1349: if(width > prec)
  2305  001058  516B               	movf	sprintf@width& (0+255),w,b
  2306  00105A  5D76               	subwf	sprintf@prec& (0+255),w,b
  2307  00105C  5177               	movf	(sprintf@prec+1)& (0+255),w,b
  2308  00105E  0A80               	xorlw	128
  2309  001060  6E47               	movwf	??_sprintf& (0+255),c
  2310  001062  516C               	movf	(sprintf@width+1)& (0+255),w,b
  2311  001064  0A80               	xorlw	128
  2312  001066  5847               	subwfb	??_sprintf& (0+255),w,c
  2313  001068  B0D8               	btfsc	status,0,c
  2314  00106A  D005               	goto	l314
  2315                           
  2316                           ; BSR set to: 0
  2317                           ;doprnt.c: 1350: width -= prec;
  2318  00106C  5176               	movf	sprintf@prec& (0+255),w,b
  2319  00106E  5F6B               	subwf	sprintf@width& (0+255),f,b
  2320  001070  5177               	movf	(sprintf@prec+1)& (0+255),w,b
  2321  001072  5B6C               	subwfb	(sprintf@width+1)& (0+255),f,b
  2322  001074  D004               	goto	l315
  2323  001076                     l314:
  2324                           
  2325                           ; BSR set to: 0
  2326                           ;doprnt.c: 1351: else
  2327                           ;doprnt.c: 1352: width = 0;
  2328                           
  2329                           ; BSR set to: 0
  2330  001076  0E00               	movlw	0
  2331  001078  6F6C               	movwf	(sprintf@width+1)& (0+255),b
  2332  00107A  0E00               	movlw	0
  2333  00107C  6F6B               	movwf	sprintf@width& (0+255),b
  2334  00107E                     l315:
  2335                           
  2336                           ; BSR set to: 0
  2337                           ;doprnt.c: 1353: }
  2338                           ;doprnt.c: 1381: if(width > c)
  2339                           
  2340                           ; BSR set to: 0
  2341                           
  2342                           ; BSR set to: 0
  2343  00107E  0E80               	movlw	128
  2344  001080  BF78               	btfsc	sprintf@c& (0+255),7,b
  2345  001082  0E7F               	movlw	127
  2346  001084  6E47               	movwf	??_sprintf& (0+255),c
  2347  001086  516B               	movf	sprintf@width& (0+255),w,b
  2348  001088  5D78               	subwf	sprintf@c& (0+255),w,b
  2349  00108A  516C               	movf	(sprintf@width+1)& (0+255),w,b
  2350  00108C  0A80               	xorlw	128
  2351  00108E  5847               	subwfb	??_sprintf& (0+255),w,c
  2352  001090  B0D8               	btfsc	status,0,c
  2353  001092  D007               	goto	l316
  2354                           
  2355                           ; BSR set to: 0
  2356                           ;doprnt.c: 1382: width -= c;
  2357  001094  5178               	movf	sprintf@c& (0+255),w,b
  2358  001096  5F6B               	subwf	sprintf@width& (0+255),f,b
  2359  001098  0E00               	movlw	0
  2360  00109A  BF78               	btfsc	sprintf@c& (0+255),7,b
  2361  00109C  0EFF               	movlw	255
  2362  00109E  5B6C               	subwfb	(sprintf@width+1)& (0+255),f,b
  2363  0010A0  D004               	goto	l317
  2364  0010A2                     l316:
  2365                           
  2366                           ; BSR set to: 0
  2367                           ;doprnt.c: 1383: else
  2368                           ;doprnt.c: 1384: width = 0;
  2369                           
  2370                           ; BSR set to: 0
  2371  0010A2  0E00               	movlw	0
  2372  0010A4  6F6C               	movwf	(sprintf@width+1)& (0+255),b
  2373  0010A6  0E00               	movlw	0
  2374  0010A8  6F6B               	movwf	sprintf@width& (0+255),b
  2375  0010AA                     l317:
  2376                           
  2377                           ; BSR set to: 0
  2378                           ;doprnt.c: 1422: {
  2379                           ;doprnt.c: 1424: if(width
  2380                           ;doprnt.c: 1428: )
  2381                           
  2382                           ; BSR set to: 0
  2383  0010AA  516B               	movf	sprintf@width& (0+255),w,b
  2384  0010AC  116C               	iorwf	(sprintf@width+1)& (0+255),w,b
  2385  0010AE  B4D8               	btfsc	status,2,c
  2386  0010B0  D00F               	goto	u3240
  2387  0010B2                     u3230:
  2388                           
  2389                           ; BSR set to: 0
  2390                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  2391                           
  2392                           ; BSR set to: 0
  2393                           
  2394                           ;doprnt.c: 1429: do
  2395  0010B2  C040  FFD9         	movff	sprintf@sp,fsr2l
  2396  0010B6  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2397  0010BA  0E20               	movlw	32
  2398  0010BC  6EDF               	movwf	indf2,c
  2399                           
  2400                           ; BSR set to: 0
  2401  0010BE  4A40               	infsnz	sprintf@sp,f,c
  2402  0010C0  2A41               	incf	sprintf@sp+1,f,c
  2403                           
  2404                           ; BSR set to: 0
  2405                           ;doprnt.c: 1431: while(--width);
  2406  0010C2  076B               	decf	sprintf@width& (0+255),f,b
  2407  0010C4  A0D8               	btfss	status,0,c
  2408  0010C6  076C               	decf	(sprintf@width+1)& (0+255),f,b
  2409  0010C8  516B               	movf	sprintf@width& (0+255),w,b
  2410  0010CA  116C               	iorwf	(sprintf@width+1)& (0+255),w,b
  2411  0010CC  A4D8               	btfss	status,2,c
  2412  0010CE  D7F1               	goto	u3230
  2413  0010D0                     u3240:
  2414                           
  2415                           ; BSR set to: 0
  2416                           ;doprnt.c: 1438: if(flag & 0x03)
  2417                           
  2418                           ; BSR set to: 0
  2419                           
  2420                           ; BSR set to: 0
  2421  0010D0  0E03               	movlw	3
  2422  0010D2  1569               	andwf	sprintf@flag& (0+255),w,b
  2423  0010D4  6E47               	movwf	??_sprintf& (0+255),c
  2424  0010D6  0E00               	movlw	0
  2425  0010D8  156A               	andwf	(sprintf@flag+1)& (0+255),w,b
  2426  0010DA  6E48               	movwf	(??_sprintf+1)& (0+255),c
  2427  0010DC  5047               	movf	??_sprintf,w,c
  2428  0010DE  1048               	iorwf	??_sprintf+1,w,c
  2429  0010E0  B4D8               	btfsc	status,2,c
  2430  0010E2  D008               	goto	l321
  2431                           
  2432                           ; BSR set to: 0
  2433                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2434  0010E4  C040  FFD9         	movff	sprintf@sp,fsr2l
  2435  0010E8  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2436  0010EC  0E2D               	movlw	45
  2437  0010EE  6EDF               	movwf	indf2,c
  2438  0010F0                     l3134:
  2439                           
  2440                           ; BSR set to: 0
  2441  0010F0  4A40               	infsnz	sprintf@sp,f,c
  2442  0010F2  2A41               	incf	sprintf@sp+1,f,c
  2443  0010F4                     l321:
  2444                           
  2445                           ; BSR set to: 0
  2446                           
  2447                           ; BSR set to: 0
  2448                           
  2449                           ; BSR set to: 0
  2450  0010F4  C042  FFF6         	movff	sprintf@f,tblptrl
  2451  0010F8  C043  FFF7         	movff	sprintf@f+1,tblptrh
  2452  0010FC  4A42               	infsnz	sprintf@f,f,c
  2453  0010FE  2A43               	incf	sprintf@f+1,f,c
  2454  001100                     	if	0	;tblptru may be non-zero
  2455  001100                     	endif
  2456  001100                     	if	0	;tblptru may be non-zero
  2457  001100                     	endif
  2458  001100  0008               	tblrd		*
  2459  001102  CFF5 F078          	movff	tablat,sprintf@c
  2460  001106  5178               	movf	sprintf@c& (0+255),w,b
  2461  001108  A4D8               	btfss	status,2,c
  2462  00110A  EF47  F004         	goto	l249
  2463  00110E                     u3260:
  2464                           
  2465                           ; BSR set to: 0
  2466                           ;doprnt.c: 1538: *sp = 0;
  2467                           
  2468                           ; BSR set to: 0
  2469                           
  2470                           ;doprnt.c: 1469: }
  2471                           ;doprnt.c: 1533: }
  2472                           ;doprnt.c: 1535: alldone:
  2473                           
  2474                           ; BSR set to: 0
  2475  00110E  C040  FFD9         	movff	sprintf@sp,fsr2l
  2476  001112  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2477  001116  0E00               	movlw	0
  2478  001118  6EDF               	movwf	indf2,c
  2479  00111A  0012               	return	
  2480  00111C                     __end_of_sprintf:
  2481                           	opt stack 0
  2482                           tblptru	equ	0xFF8
  2483                           tblptrh	equ	0xFF7
  2484                           tblptrl	equ	0xFF6
  2485                           tablat	equ	0xFF5
  2486                           prodh	equ	0xFF4
  2487                           prodl	equ	0xFF3
  2488                           postinc0	equ	0xFEE
  2489                           wreg	equ	0xFE8
  2490                           indf2	equ	0xFDF
  2491                           postinc2	equ	0xFDE
  2492                           postdec2	equ	0xFDD
  2493                           fsr2h	equ	0xFDA
  2494                           fsr2l	equ	0xFD9
  2495                           status	equ	0xFD8
  2496                           
  2497 ;; *************** function _scale *****************
  2498 ;; Defined at:
  2499 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  2500 ;; Parameters:    Size  Location     Type
  2501 ;;  scl             1    wreg     char 
  2502 ;; Auto vars:     Size  Location     Type
  2503 ;;  scl             1   41[COMRAM] char 
  2504 ;; Return value:  Size  Location     Type
  2505 ;;                  3   35[COMRAM] char 
  2506 ;; Registers used:
  2507 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2508 ;; Tracked objects:
  2509 ;;		On entry : 0/0
  2510 ;;		On exit  : 0/0
  2511 ;;		Unchanged: 0/0
  2512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2513 ;;      Params:         3       0       0       0       0       0       0       0       0
  2514 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2515 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2516 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2517 ;;Total ram usage:        7 bytes
  2518 ;; Hardware stack levels used:    1
  2519 ;; Hardware stack levels required when called:    2
  2520 ;; This function calls:
  2521 ;;		___awdiv
  2522 ;;		___awmod
  2523 ;;		___ftmul
  2524 ;;		___wmul
  2525 ;; This function is called by:
  2526 ;;		_sprintf
  2527 ;; This function uses a non-reentrant model
  2528 ;;
  2529                           
  2530                           	psect	text2
  2531  00111C                     __ptext2:
  2532                           	opt stack 0
  2533  00111C                     _scale:
  2534                           	opt stack 27
  2535                           
  2536                           ; BSR set to: 0
  2537                           ;incstack = 0
  2538                           ;scale@scl stored from wreg
  2539  00111C  6E2A               	movwf	scale@scl,c
  2540                           
  2541                           ;doprnt.c: 428: if(scl < 0) {
  2542  00111E  AE2A               	btfss	scale@scl,7,c
  2543  001120  D101               	goto	l238
  2544                           
  2545                           ;doprnt.c: 429: scl = -scl;
  2546  001122  6C2A               	negf	scale@scl,c
  2547                           
  2548                           ;doprnt.c: 430: if(scl>=110)
  2549  001124  502A               	movf	scale@scl,w,c
  2550  001126  0A80               	xorlw	128
  2551  001128  0F12               	addlw	-238
  2552  00112A  A0D8               	btfss	status,0,c
  2553  00112C  D091               	goto	l239
  2554                           
  2555                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2556  00112E  0E00               	movlw	0
  2557  001130  6E12               	movwf	___wmul@multiplicand+1,c
  2558  001132  0E03               	movlw	3
  2559  001134  6E11               	movwf	___wmul@multiplicand,c
  2560  001136  0E00               	movlw	0
  2561  001138  6E0A               	movwf	___awdiv@divisor+1,c
  2562  00113A  0E0A               	movlw	10
  2563  00113C  6E09               	movwf	___awdiv@divisor,c
  2564  00113E  0E00               	movlw	0
  2565  001140  6E04               	movwf	___awmod@divisor+1,c
  2566  001142  0E64               	movlw	100
  2567  001144  6E03               	movwf	___awmod@divisor,c
  2568  001146  502A               	movf	scale@scl,w,c
  2569  001148  6E01               	movwf	___awmod@dividend,c
  2570  00114A  6A02               	clrf	___awmod@dividend+1,c
  2571  00114C  BE01               	btfsc	___awmod@dividend,7,c
  2572  00114E  0602               	decf	___awmod@dividend+1,f,c
  2573  001150  ECA3  F011         	call	___awmod	;wreg free
  2574  001154  C001  F007         	movff	?___awmod,___awdiv@dividend
  2575  001158  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2576  00115C  ECDF  F010         	call	___awdiv	;wreg free
  2577  001160  0E09               	movlw	9
  2578  001162  2407               	addwf	?___awdiv,w,c
  2579  001164  6E0F               	movwf	___wmul@multiplier,c
  2580  001166  0E00               	movlw	0
  2581  001168  2008               	addwfc	?___awdiv+1,w,c
  2582  00116A  6E10               	movwf	___wmul@multiplier+1,c
  2583  00116C  EC12  F013         	call	___wmul	;wreg free
  2584  001170  0E50               	movlw	low __npowers_
  2585  001172  240F               	addwf	?___wmul,w,c
  2586  001174  6EF6               	movwf	tblptrl,c
  2587  001176  0E08               	movlw	high __npowers_
  2588  001178  2010               	addwfc	?___wmul+1,w,c
  2589  00117A  6EF7               	movwf	tblptrh,c
  2590  00117C                     	if	0	;There are less than 3 active tblptr bytes
  2591  00117C                     	endif
  2592  00117C  0009               	tblrd		*+
  2593  00117E  CFF5 F018          	movff	tablat,___ftmul@f2
  2594  001182  0009               	tblrd		*+
  2595  001184  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2596  001188  000A               	tblrd		*-
  2597  00118A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2598  00118E  0E00               	movlw	0
  2599  001190  6E0A               	movwf	___awdiv@divisor+1,c
  2600  001192  0E64               	movlw	100
  2601  001194  6E09               	movwf	___awdiv@divisor,c
  2602  001196  502A               	movf	scale@scl,w,c
  2603  001198  6E07               	movwf	___awdiv@dividend,c
  2604  00119A  6A08               	clrf	___awdiv@dividend+1,c
  2605  00119C  BE07               	btfsc	___awdiv@dividend,7,c
  2606  00119E  0608               	decf	___awdiv@dividend+1,f,c
  2607  0011A0  ECDF  F010         	call	___awdiv	;wreg free
  2608  0011A4  0E12               	movlw	18
  2609  0011A6  2407               	addwf	?___awdiv,w,c
  2610  0011A8  6E0F               	movwf	___wmul@multiplier,c
  2611  0011AA  0E00               	movlw	0
  2612  0011AC  2008               	addwfc	?___awdiv+1,w,c
  2613  0011AE  6E10               	movwf	___wmul@multiplier+1,c
  2614  0011B0  0E00               	movlw	0
  2615  0011B2  6E12               	movwf	___wmul@multiplicand+1,c
  2616  0011B4  0E03               	movlw	3
  2617  0011B6  6E11               	movwf	___wmul@multiplicand,c
  2618  0011B8  EC12  F013         	call	___wmul	;wreg free
  2619  0011BC  0E50               	movlw	low __npowers_
  2620  0011BE  240F               	addwf	?___wmul,w,c
  2621  0011C0  6EF6               	movwf	tblptrl,c
  2622  0011C2  0E08               	movlw	high __npowers_
  2623  0011C4  2010               	addwfc	?___wmul+1,w,c
  2624  0011C6  6EF7               	movwf	tblptrh,c
  2625  0011C8                     	if	0	;There are less than 3 active tblptr bytes
  2626  0011C8                     	endif
  2627  0011C8  0009               	tblrd		*+
  2628  0011CA  CFF5 F015          	movff	tablat,___ftmul@f1
  2629  0011CE  0009               	tblrd		*+
  2630  0011D0  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2631  0011D4  000A               	tblrd		*-
  2632  0011D6  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2633  0011DA  ECBE  F00D         	call	___ftmul	;wreg free
  2634  0011DE  C015  F027         	movff	?___ftmul,_scale$1569
  2635  0011E2  C016  F028         	movff	?___ftmul+1,_scale$1569+1
  2636  0011E6  C017  F029         	movff	?___ftmul+2,_scale$1569+2
  2637                           
  2638                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2639  0011EA  C027  F015         	movff	_scale$1569,___ftmul@f1
  2640  0011EE  C028  F016         	movff	_scale$1569+1,___ftmul@f1+1
  2641  0011F2  C029  F017         	movff	_scale$1569+2,___ftmul@f1+2
  2642  0011F6  0E00               	movlw	0
  2643  0011F8  6E12               	movwf	___wmul@multiplicand+1,c
  2644  0011FA  0E03               	movlw	3
  2645  0011FC  6E11               	movwf	___wmul@multiplicand,c
  2646  0011FE  0E00               	movlw	0
  2647  001200  6E04               	movwf	___awmod@divisor+1,c
  2648  001202  0E0A               	movlw	10
  2649  001204  6E03               	movwf	___awmod@divisor,c
  2650  001206  502A               	movf	scale@scl,w,c
  2651  001208  6E01               	movwf	___awmod@dividend,c
  2652  00120A  6A02               	clrf	___awmod@dividend+1,c
  2653  00120C  BE01               	btfsc	___awmod@dividend,7,c
  2654  00120E  0602               	decf	___awmod@dividend+1,f,c
  2655  001210  ECA3  F011         	call	___awmod	;wreg free
  2656  001214  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2657  001218  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2658  00121C  EC12  F013         	call	___wmul	;wreg free
  2659  001220  0E50               	movlw	low __npowers_
  2660  001222  240F               	addwf	?___wmul,w,c
  2661  001224  6EF6               	movwf	tblptrl,c
  2662  001226  0E08               	movlw	high __npowers_
  2663  001228  2010               	addwfc	?___wmul+1,w,c
  2664  00122A  6EF7               	movwf	tblptrh,c
  2665  00122C                     	if	0	;There are less than 3 active tblptr bytes
  2666  00122C                     	endif
  2667  00122C  0009               	tblrd		*+
  2668  00122E  CFF5 F018          	movff	tablat,___ftmul@f2
  2669  001232  0009               	tblrd		*+
  2670  001234  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2671  001238  000A               	tblrd		*-
  2672  00123A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2673  00123E  ECBE  F00D         	call	___ftmul	;wreg free
  2674  001242  C015  F024         	movff	?___ftmul,?_scale
  2675  001246  C016  F025         	movff	?___ftmul+1,?_scale+1
  2676  00124A  C017  F026         	movff	?___ftmul+2,?_scale+2
  2677  00124E  0012               	return	
  2678  001250                     l239:
  2679                           
  2680                           ;doprnt.c: 432: else if(scl > 10)
  2681  001250  502A               	movf	scale@scl,w,c
  2682  001252  0A80               	xorlw	128
  2683  001254  0F75               	addlw	-139
  2684  001256  A0D8               	btfss	status,0,c
  2685  001258  D053               	goto	l242
  2686                           
  2687                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  2688  00125A  0E00               	movlw	0
  2689  00125C  6E0A               	movwf	___awdiv@divisor+1,c
  2690  00125E  0E0A               	movlw	10
  2691  001260  6E09               	movwf	___awdiv@divisor,c
  2692  001262  502A               	movf	scale@scl,w,c
  2693  001264  6E07               	movwf	___awdiv@dividend,c
  2694  001266  6A08               	clrf	___awdiv@dividend+1,c
  2695  001268  BE07               	btfsc	___awdiv@dividend,7,c
  2696  00126A  0608               	decf	___awdiv@dividend+1,f,c
  2697  00126C  ECDF  F010         	call	___awdiv	;wreg free
  2698  001270  0E09               	movlw	9
  2699  001272  2407               	addwf	?___awdiv,w,c
  2700  001274  6E0F               	movwf	___wmul@multiplier,c
  2701  001276  0E00               	movlw	0
  2702  001278  2008               	addwfc	?___awdiv+1,w,c
  2703  00127A  6E10               	movwf	___wmul@multiplier+1,c
  2704  00127C  0E00               	movlw	0
  2705  00127E  6E12               	movwf	___wmul@multiplicand+1,c
  2706  001280  0E03               	movlw	3
  2707  001282  6E11               	movwf	___wmul@multiplicand,c
  2708  001284  EC12  F013         	call	___wmul	;wreg free
  2709  001288  0E50               	movlw	low __npowers_
  2710  00128A  240F               	addwf	?___wmul,w,c
  2711  00128C  6EF6               	movwf	tblptrl,c
  2712  00128E  0E08               	movlw	high __npowers_
  2713  001290  2010               	addwfc	?___wmul+1,w,c
  2714  001292  6EF7               	movwf	tblptrh,c
  2715  001294                     	if	0	;There are less than 3 active tblptr bytes
  2716  001294                     	endif
  2717  001294  0009               	tblrd		*+
  2718  001296  CFF5 F015          	movff	tablat,___ftmul@f1
  2719  00129A  0009               	tblrd		*+
  2720  00129C  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2721  0012A0  000A               	tblrd		*-
  2722  0012A2  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2723  0012A6  0E00               	movlw	0
  2724  0012A8  6E12               	movwf	___wmul@multiplicand+1,c
  2725  0012AA  0E03               	movlw	3
  2726  0012AC  6E11               	movwf	___wmul@multiplicand,c
  2727  0012AE  0E00               	movlw	0
  2728  0012B0  6E04               	movwf	___awmod@divisor+1,c
  2729  0012B2  0E0A               	movlw	10
  2730  0012B4  6E03               	movwf	___awmod@divisor,c
  2731  0012B6  502A               	movf	scale@scl,w,c
  2732  0012B8  6E01               	movwf	___awmod@dividend,c
  2733  0012BA  6A02               	clrf	___awmod@dividend+1,c
  2734  0012BC  BE01               	btfsc	___awmod@dividend,7,c
  2735  0012BE  0602               	decf	___awmod@dividend+1,f,c
  2736  0012C0  ECA3  F011         	call	___awmod	;wreg free
  2737  0012C4  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2738  0012C8  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2739  0012CC  EC12  F013         	call	___wmul	;wreg free
  2740  0012D0  0E50               	movlw	low __npowers_
  2741  0012D2  240F               	addwf	?___wmul,w,c
  2742  0012D4  6EF6               	movwf	tblptrl,c
  2743  0012D6  0E08               	movlw	high __npowers_
  2744  0012D8  2010               	addwfc	?___wmul+1,w,c
  2745  0012DA  6EF7               	movwf	tblptrh,c
  2746  0012DC                     	if	0	;There are less than 3 active tblptr bytes
  2747  0012DC                     	endif
  2748  0012DC  0009               	tblrd		*+
  2749  0012DE  CFF5 F018          	movff	tablat,___ftmul@f2
  2750  0012E2  0009               	tblrd		*+
  2751  0012E4  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2752  0012E8  000A               	tblrd		*-
  2753  0012EA  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2754  0012EE  ECBE  F00D         	call	___ftmul	;wreg free
  2755  0012F2  C015  F024         	movff	?___ftmul,?_scale
  2756  0012F6  C016  F025         	movff	?___ftmul+1,?_scale+1
  2757  0012FA  C017  F026         	movff	?___ftmul+2,?_scale+2
  2758  0012FE  0012               	return	
  2759  001300                     l242:
  2760                           
  2761                           ;doprnt.c: 434: return _npowers_[scl];
  2762  001300  502A               	movf	scale@scl,w,c
  2763  001302  0D03               	mullw	3
  2764  001304  0E50               	movlw	low __npowers_
  2765  001306  24F3               	addwf	prodl,w,c
  2766  001308  6EF6               	movwf	tblptrl,c
  2767  00130A  0E08               	movlw	high __npowers_
  2768  00130C  20F4               	addwfc	prodh,w,c
  2769  00130E  6EF7               	movwf	tblptrh,c
  2770  001310                     	if	0	;There are less than 3 active tblptr bytes
  2771  001310                     	endif
  2772  001310  0009               	tblrd		*+
  2773  001312  CFF5 F024          	movff	tablat,?_scale
  2774  001316  0009               	tblrd		*+
  2775  001318  CFF5 F025          	movff	tablat,?_scale+1
  2776  00131C  000A               	tblrd		*-
  2777  00131E  CFF5 F026          	movff	tablat,?_scale+2
  2778  001322  0012               	return	
  2779  001324                     l238:
  2780                           
  2781                           ;doprnt.c: 435: }
  2782                           ;doprnt.c: 436: if(scl>=110)
  2783  001324  502A               	movf	scale@scl,w,c
  2784  001326  0A80               	xorlw	128
  2785  001328  0F12               	addlw	-238
  2786  00132A  A0D8               	btfss	status,0,c
  2787  00132C  D091               	goto	l243
  2788                           
  2789                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2790  00132E  0E00               	movlw	0
  2791  001330  6E12               	movwf	___wmul@multiplicand+1,c
  2792  001332  0E03               	movlw	3
  2793  001334  6E11               	movwf	___wmul@multiplicand,c
  2794  001336  0E00               	movlw	0
  2795  001338  6E0A               	movwf	___awdiv@divisor+1,c
  2796  00133A  0E0A               	movlw	10
  2797  00133C  6E09               	movwf	___awdiv@divisor,c
  2798  00133E  0E00               	movlw	0
  2799  001340  6E04               	movwf	___awmod@divisor+1,c
  2800  001342  0E64               	movlw	100
  2801  001344  6E03               	movwf	___awmod@divisor,c
  2802  001346  502A               	movf	scale@scl,w,c
  2803  001348  6E01               	movwf	___awmod@dividend,c
  2804  00134A  6A02               	clrf	___awmod@dividend+1,c
  2805  00134C  BE01               	btfsc	___awmod@dividend,7,c
  2806  00134E  0602               	decf	___awmod@dividend+1,f,c
  2807  001350  ECA3  F011         	call	___awmod	;wreg free
  2808  001354  C001  F007         	movff	?___awmod,___awdiv@dividend
  2809  001358  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2810  00135C  ECDF  F010         	call	___awdiv	;wreg free
  2811  001360  0E09               	movlw	9
  2812  001362  2407               	addwf	?___awdiv,w,c
  2813  001364  6E0F               	movwf	___wmul@multiplier,c
  2814  001366  0E00               	movlw	0
  2815  001368  2008               	addwfc	?___awdiv+1,w,c
  2816  00136A  6E10               	movwf	___wmul@multiplier+1,c
  2817  00136C  EC12  F013         	call	___wmul	;wreg free
  2818  001370  0E29               	movlw	low __powers_
  2819  001372  240F               	addwf	?___wmul,w,c
  2820  001374  6EF6               	movwf	tblptrl,c
  2821  001376  0E08               	movlw	high __powers_
  2822  001378  2010               	addwfc	?___wmul+1,w,c
  2823  00137A  6EF7               	movwf	tblptrh,c
  2824  00137C                     	if	0	;There are less than 3 active tblptr bytes
  2825  00137C                     	endif
  2826  00137C  0009               	tblrd		*+
  2827  00137E  CFF5 F018          	movff	tablat,___ftmul@f2
  2828  001382  0009               	tblrd		*+
  2829  001384  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2830  001388  000A               	tblrd		*-
  2831  00138A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2832  00138E  0E00               	movlw	0
  2833  001390  6E0A               	movwf	___awdiv@divisor+1,c
  2834  001392  0E64               	movlw	100
  2835  001394  6E09               	movwf	___awdiv@divisor,c
  2836  001396  502A               	movf	scale@scl,w,c
  2837  001398  6E07               	movwf	___awdiv@dividend,c
  2838  00139A  6A08               	clrf	___awdiv@dividend+1,c
  2839  00139C  BE07               	btfsc	___awdiv@dividend,7,c
  2840  00139E  0608               	decf	___awdiv@dividend+1,f,c
  2841  0013A0  ECDF  F010         	call	___awdiv	;wreg free
  2842  0013A4  0E12               	movlw	18
  2843  0013A6  2407               	addwf	?___awdiv,w,c
  2844  0013A8  6E0F               	movwf	___wmul@multiplier,c
  2845  0013AA  0E00               	movlw	0
  2846  0013AC  2008               	addwfc	?___awdiv+1,w,c
  2847  0013AE  6E10               	movwf	___wmul@multiplier+1,c
  2848  0013B0  0E00               	movlw	0
  2849  0013B2  6E12               	movwf	___wmul@multiplicand+1,c
  2850  0013B4  0E03               	movlw	3
  2851  0013B6  6E11               	movwf	___wmul@multiplicand,c
  2852  0013B8  EC12  F013         	call	___wmul	;wreg free
  2853  0013BC  0E29               	movlw	low __powers_
  2854  0013BE  240F               	addwf	?___wmul,w,c
  2855  0013C0  6EF6               	movwf	tblptrl,c
  2856  0013C2  0E08               	movlw	high __powers_
  2857  0013C4  2010               	addwfc	?___wmul+1,w,c
  2858  0013C6  6EF7               	movwf	tblptrh,c
  2859  0013C8                     	if	0	;There are less than 3 active tblptr bytes
  2860  0013C8                     	endif
  2861  0013C8  0009               	tblrd		*+
  2862  0013CA  CFF5 F015          	movff	tablat,___ftmul@f1
  2863  0013CE  0009               	tblrd		*+
  2864  0013D0  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2865  0013D4  000A               	tblrd		*-
  2866  0013D6  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2867  0013DA  ECBE  F00D         	call	___ftmul	;wreg free
  2868  0013DE  C015  F027         	movff	?___ftmul,_scale$1569
  2869  0013E2  C016  F028         	movff	?___ftmul+1,_scale$1569+1
  2870  0013E6  C017  F029         	movff	?___ftmul+2,_scale$1569+2
  2871                           
  2872                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2873  0013EA  C027  F015         	movff	_scale$1569,___ftmul@f1
  2874  0013EE  C028  F016         	movff	_scale$1569+1,___ftmul@f1+1
  2875  0013F2  C029  F017         	movff	_scale$1569+2,___ftmul@f1+2
  2876  0013F6  0E00               	movlw	0
  2877  0013F8  6E12               	movwf	___wmul@multiplicand+1,c
  2878  0013FA  0E03               	movlw	3
  2879  0013FC  6E11               	movwf	___wmul@multiplicand,c
  2880  0013FE  0E00               	movlw	0
  2881  001400  6E04               	movwf	___awmod@divisor+1,c
  2882  001402  0E0A               	movlw	10
  2883  001404  6E03               	movwf	___awmod@divisor,c
  2884  001406  502A               	movf	scale@scl,w,c
  2885  001408  6E01               	movwf	___awmod@dividend,c
  2886  00140A  6A02               	clrf	___awmod@dividend+1,c
  2887  00140C  BE01               	btfsc	___awmod@dividend,7,c
  2888  00140E  0602               	decf	___awmod@dividend+1,f,c
  2889  001410  ECA3  F011         	call	___awmod	;wreg free
  2890  001414  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2891  001418  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2892  00141C  EC12  F013         	call	___wmul	;wreg free
  2893  001420  0E29               	movlw	low __powers_
  2894  001422  240F               	addwf	?___wmul,w,c
  2895  001424  6EF6               	movwf	tblptrl,c
  2896  001426  0E08               	movlw	high __powers_
  2897  001428  2010               	addwfc	?___wmul+1,w,c
  2898  00142A  6EF7               	movwf	tblptrh,c
  2899  00142C                     	if	0	;There are less than 3 active tblptr bytes
  2900  00142C                     	endif
  2901  00142C  0009               	tblrd		*+
  2902  00142E  CFF5 F018          	movff	tablat,___ftmul@f2
  2903  001432  0009               	tblrd		*+
  2904  001434  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2905  001438  000A               	tblrd		*-
  2906  00143A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2907  00143E  ECBE  F00D         	call	___ftmul	;wreg free
  2908  001442  C015  F024         	movff	?___ftmul,?_scale
  2909  001446  C016  F025         	movff	?___ftmul+1,?_scale+1
  2910  00144A  C017  F026         	movff	?___ftmul+2,?_scale+2
  2911  00144E  0012               	return	
  2912  001450                     l243:
  2913                           
  2914                           ;doprnt.c: 438: else if(scl > 10)
  2915  001450  502A               	movf	scale@scl,w,c
  2916  001452  0A80               	xorlw	128
  2917  001454  0F75               	addlw	-139
  2918  001456  A0D8               	btfss	status,0,c
  2919  001458  D053               	goto	l245
  2920                           
  2921                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  2922  00145A  0E00               	movlw	0
  2923  00145C  6E0A               	movwf	___awdiv@divisor+1,c
  2924  00145E  0E0A               	movlw	10
  2925  001460  6E09               	movwf	___awdiv@divisor,c
  2926  001462  502A               	movf	scale@scl,w,c
  2927  001464  6E07               	movwf	___awdiv@dividend,c
  2928  001466  6A08               	clrf	___awdiv@dividend+1,c
  2929  001468  BE07               	btfsc	___awdiv@dividend,7,c
  2930  00146A  0608               	decf	___awdiv@dividend+1,f,c
  2931  00146C  ECDF  F010         	call	___awdiv	;wreg free
  2932  001470  0E09               	movlw	9
  2933  001472  2407               	addwf	?___awdiv,w,c
  2934  001474  6E0F               	movwf	___wmul@multiplier,c
  2935  001476  0E00               	movlw	0
  2936  001478  2008               	addwfc	?___awdiv+1,w,c
  2937  00147A  6E10               	movwf	___wmul@multiplier+1,c
  2938  00147C  0E00               	movlw	0
  2939  00147E  6E12               	movwf	___wmul@multiplicand+1,c
  2940  001480  0E03               	movlw	3
  2941  001482  6E11               	movwf	___wmul@multiplicand,c
  2942  001484  EC12  F013         	call	___wmul	;wreg free
  2943  001488  0E29               	movlw	low __powers_
  2944  00148A  240F               	addwf	?___wmul,w,c
  2945  00148C  6EF6               	movwf	tblptrl,c
  2946  00148E  0E08               	movlw	high __powers_
  2947  001490  2010               	addwfc	?___wmul+1,w,c
  2948  001492  6EF7               	movwf	tblptrh,c
  2949  001494                     	if	0	;There are less than 3 active tblptr bytes
  2950  001494                     	endif
  2951  001494  0009               	tblrd		*+
  2952  001496  CFF5 F015          	movff	tablat,___ftmul@f1
  2953  00149A  0009               	tblrd		*+
  2954  00149C  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2955  0014A0  000A               	tblrd		*-
  2956  0014A2  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2957  0014A6  0E00               	movlw	0
  2958  0014A8  6E12               	movwf	___wmul@multiplicand+1,c
  2959  0014AA  0E03               	movlw	3
  2960  0014AC  6E11               	movwf	___wmul@multiplicand,c
  2961  0014AE  0E00               	movlw	0
  2962  0014B0  6E04               	movwf	___awmod@divisor+1,c
  2963  0014B2  0E0A               	movlw	10
  2964  0014B4  6E03               	movwf	___awmod@divisor,c
  2965  0014B6  502A               	movf	scale@scl,w,c
  2966  0014B8  6E01               	movwf	___awmod@dividend,c
  2967  0014BA  6A02               	clrf	___awmod@dividend+1,c
  2968  0014BC  BE01               	btfsc	___awmod@dividend,7,c
  2969  0014BE  0602               	decf	___awmod@dividend+1,f,c
  2970  0014C0  ECA3  F011         	call	___awmod	;wreg free
  2971  0014C4  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2972  0014C8  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2973  0014CC  EC12  F013         	call	___wmul	;wreg free
  2974  0014D0  0E29               	movlw	low __powers_
  2975  0014D2  240F               	addwf	?___wmul,w,c
  2976  0014D4  6EF6               	movwf	tblptrl,c
  2977  0014D6  0E08               	movlw	high __powers_
  2978  0014D8  2010               	addwfc	?___wmul+1,w,c
  2979  0014DA  6EF7               	movwf	tblptrh,c
  2980  0014DC                     	if	0	;There are less than 3 active tblptr bytes
  2981  0014DC                     	endif
  2982  0014DC  0009               	tblrd		*+
  2983  0014DE  CFF5 F018          	movff	tablat,___ftmul@f2
  2984  0014E2  0009               	tblrd		*+
  2985  0014E4  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2986  0014E8  000A               	tblrd		*-
  2987  0014EA  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2988  0014EE  ECBE  F00D         	call	___ftmul	;wreg free
  2989  0014F2  C015  F024         	movff	?___ftmul,?_scale
  2990  0014F6  C016  F025         	movff	?___ftmul+1,?_scale+1
  2991  0014FA  C017  F026         	movff	?___ftmul+2,?_scale+2
  2992  0014FE  0012               	return	
  2993  001500                     l245:
  2994                           
  2995                           ;doprnt.c: 440: return _powers_[scl];
  2996  001500  502A               	movf	scale@scl,w,c
  2997  001502  0D03               	mullw	3
  2998  001504  0E29               	movlw	low __powers_
  2999  001506  24F3               	addwf	prodl,w,c
  3000  001508  6EF6               	movwf	tblptrl,c
  3001  00150A  0E08               	movlw	high __powers_
  3002  00150C  20F4               	addwfc	prodh,w,c
  3003  00150E  6EF7               	movwf	tblptrh,c
  3004  001510                     	if	0	;There are less than 3 active tblptr bytes
  3005  001510                     	endif
  3006  001510  0009               	tblrd		*+
  3007  001512  CFF5 F024          	movff	tablat,?_scale
  3008  001516  0009               	tblrd		*+
  3009  001518  CFF5 F025          	movff	tablat,?_scale+1
  3010  00151C  000A               	tblrd		*-
  3011  00151E  CFF5 F026          	movff	tablat,?_scale+2
  3012  001522  0012               	return	
  3013  001524                     __end_of_scale:
  3014                           	opt stack 0
  3015                           tblptru	equ	0xFF8
  3016                           tblptrh	equ	0xFF7
  3017                           tblptrl	equ	0xFF6
  3018                           tablat	equ	0xFF5
  3019                           prodh	equ	0xFF4
  3020                           prodl	equ	0xFF3
  3021                           postinc0	equ	0xFEE
  3022                           wreg	equ	0xFE8
  3023                           indf2	equ	0xFDF
  3024                           postinc2	equ	0xFDE
  3025                           postdec2	equ	0xFDD
  3026                           fsr2h	equ	0xFDA
  3027                           fsr2l	equ	0xFD9
  3028                           status	equ	0xFD8
  3029                           
  3030 ;; *************** function _isdigit *****************
  3031 ;; Defined at:
  3032 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  3033 ;; Parameters:    Size  Location     Type
  3034 ;;  c               1    wreg     unsigned char 
  3035 ;; Auto vars:     Size  Location     Type
  3036 ;;  c               1    2[COMRAM] unsigned char 
  3037 ;; Return value:  Size  Location     Type
  3038 ;;		None               void
  3039 ;; Registers used:
  3040 ;;		wreg, status,2, status,0
  3041 ;; Tracked objects:
  3042 ;;		On entry : 0/0
  3043 ;;		On exit  : 0/0
  3044 ;;		Unchanged: 0/0
  3045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3046 ;;      Params:         0       0       0       0       0       0       0       0       0
  3047 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3048 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3049 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3050 ;;Total ram usage:        3 bytes
  3051 ;; Hardware stack levels used:    1
  3052 ;; This function calls:
  3053 ;;		Nothing
  3054 ;; This function is called by:
  3055 ;;		_sprintf
  3056 ;; This function uses a non-reentrant model
  3057 ;;
  3058                           
  3059                           	psect	text3
  3060  00266E                     __ptext3:
  3061                           	opt stack 0
  3062  00266E                     _isdigit:
  3063                           	opt stack 29
  3064                           
  3065                           ;incstack = 0
  3066                           ;isdigit@c stored from wreg
  3067  00266E  6E03               	movwf	isdigit@c,c
  3068  002670  0E00               	movlw	0
  3069  002672  6E02               	movwf	_isdigit$1216,c
  3070  002674  0E3A               	movlw	58
  3071  002676  6003               	cpfslt	isdigit@c,c
  3072  002678  D005               	goto	l687
  3073  00267A  0E2F               	movlw	47
  3074  00267C  6403               	cpfsgt	isdigit@c,c
  3075  00267E  D002               	goto	l687
  3076  002680  0E01               	movlw	1
  3077  002682  6E02               	movwf	_isdigit$1216,c
  3078  002684                     l687:
  3079  002684  C002  F001         	movff	_isdigit$1216,??_isdigit
  3080  002688  3001               	rrcf	??_isdigit,w,c
  3081  00268A  0012               	return	
  3082  00268C                     __end_of_isdigit:
  3083                           	opt stack 0
  3084                           tblptru	equ	0xFF8
  3085                           tblptrh	equ	0xFF7
  3086                           tblptrl	equ	0xFF6
  3087                           tablat	equ	0xFF5
  3088                           prodh	equ	0xFF4
  3089                           prodl	equ	0xFF3
  3090                           postinc0	equ	0xFEE
  3091                           wreg	equ	0xFE8
  3092                           indf2	equ	0xFDF
  3093                           postinc2	equ	0xFDE
  3094                           postdec2	equ	0xFDD
  3095                           fsr2h	equ	0xFDA
  3096                           fsr2l	equ	0xFD9
  3097                           status	equ	0xFD8
  3098                           
  3099 ;; *************** function _fround *****************
  3100 ;; Defined at:
  3101 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  3102 ;; Parameters:    Size  Location     Type
  3103 ;;  prec            1    wreg     unsigned char 
  3104 ;; Auto vars:     Size  Location     Type
  3105 ;;  prec            1   44[COMRAM] unsigned char 
  3106 ;; Return value:  Size  Location     Type
  3107 ;;                  3   35[COMRAM] unsigned char 
  3108 ;; Registers used:
  3109 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3110 ;; Tracked objects:
  3111 ;;		On entry : 0/0
  3112 ;;		On exit  : 0/0
  3113 ;;		Unchanged: 0/0
  3114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3115 ;;      Params:         3       0       0       0       0       0       0       0       0
  3116 ;;      Locals:         7       0       0       0       0       0       0       0       0
  3117 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3118 ;;      Totals:        10       0       0       0       0       0       0       0       0
  3119 ;;Total ram usage:       10 bytes
  3120 ;; Hardware stack levels used:    1
  3121 ;; Hardware stack levels required when called:    2
  3122 ;; This function calls:
  3123 ;;		___awdiv
  3124 ;;		___awmod
  3125 ;;		___ftmul
  3126 ;;		___wmul
  3127 ;; This function is called by:
  3128 ;;		_sprintf
  3129 ;; This function uses a non-reentrant model
  3130 ;;
  3131                           
  3132                           	psect	text4
  3133  001524                     __ptext4:
  3134                           	opt stack 0
  3135  001524                     _fround:
  3136                           	opt stack 27
  3137                           
  3138                           ;incstack = 0
  3139                           ;fround@prec stored from wreg
  3140  001524  6E2D               	movwf	fround@prec,c
  3141                           
  3142                           ;doprnt.c: 413: if(prec>=110)
  3143  001526  0E6D               	movlw	109
  3144  001528  642D               	cpfsgt	fround@prec,c
  3145  00152A  D09F               	goto	l232
  3146                           
  3147                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3148  00152C  0E00               	movlw	0
  3149  00152E  6E12               	movwf	___wmul@multiplicand+1,c
  3150  001530  0E03               	movlw	3
  3151  001532  6E11               	movwf	___wmul@multiplicand,c
  3152  001534  0E00               	movlw	0
  3153  001536  6E0A               	movwf	___awdiv@divisor+1,c
  3154  001538  0E0A               	movlw	10
  3155  00153A  6E09               	movwf	___awdiv@divisor,c
  3156  00153C  0E00               	movlw	0
  3157  00153E  6E04               	movwf	___awmod@divisor+1,c
  3158  001540  0E64               	movlw	100
  3159  001542  6E03               	movwf	___awmod@divisor,c
  3160  001544  C02D  F001         	movff	fround@prec,___awmod@dividend
  3161  001548  6A02               	clrf	___awmod@dividend+1,c
  3162  00154A  ECA3  F011         	call	___awmod	;wreg free
  3163  00154E  C001  F007         	movff	?___awmod,___awdiv@dividend
  3164  001552  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3165  001556  ECDF  F010         	call	___awdiv	;wreg free
  3166  00155A  0E09               	movlw	9
  3167  00155C  2407               	addwf	?___awdiv,w,c
  3168  00155E  6E0F               	movwf	___wmul@multiplier,c
  3169  001560  0E00               	movlw	0
  3170  001562  2008               	addwfc	?___awdiv+1,w,c
  3171  001564  6E10               	movwf	___wmul@multiplier+1,c
  3172  001566  EC12  F013         	call	___wmul	;wreg free
  3173  00156A  0E50               	movlw	low __npowers_
  3174  00156C  240F               	addwf	?___wmul,w,c
  3175  00156E  6EF6               	movwf	tblptrl,c
  3176  001570  0E08               	movlw	high __npowers_
  3177  001572  2010               	addwfc	?___wmul+1,w,c
  3178  001574  6EF7               	movwf	tblptrh,c
  3179  001576                     	if	0	;There are less than 3 active tblptr bytes
  3180  001576                     	endif
  3181  001576  0009               	tblrd		*+
  3182  001578  CFF5 F018          	movff	tablat,___ftmul@f2
  3183  00157C  0009               	tblrd		*+
  3184  00157E  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3185  001582  000A               	tblrd		*-
  3186  001584  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3187  001588  0E00               	movlw	0
  3188  00158A  6E0A               	movwf	___awdiv@divisor+1,c
  3189  00158C  0E64               	movlw	100
  3190  00158E  6E09               	movwf	___awdiv@divisor,c
  3191  001590  C02D  F007         	movff	fround@prec,___awdiv@dividend
  3192  001594  6A08               	clrf	___awdiv@dividend+1,c
  3193  001596  ECDF  F010         	call	___awdiv	;wreg free
  3194  00159A  0E12               	movlw	18
  3195  00159C  2407               	addwf	?___awdiv,w,c
  3196  00159E  6E0F               	movwf	___wmul@multiplier,c
  3197  0015A0  0E00               	movlw	0
  3198  0015A2  2008               	addwfc	?___awdiv+1,w,c
  3199  0015A4  6E10               	movwf	___wmul@multiplier+1,c
  3200  0015A6  0E00               	movlw	0
  3201  0015A8  6E12               	movwf	___wmul@multiplicand+1,c
  3202  0015AA  0E03               	movlw	3
  3203  0015AC  6E11               	movwf	___wmul@multiplicand,c
  3204  0015AE  EC12  F013         	call	___wmul	;wreg free
  3205  0015B2  0E50               	movlw	low __npowers_
  3206  0015B4  240F               	addwf	?___wmul,w,c
  3207  0015B6  6EF6               	movwf	tblptrl,c
  3208  0015B8  0E08               	movlw	high __npowers_
  3209  0015BA  2010               	addwfc	?___wmul+1,w,c
  3210  0015BC  6EF7               	movwf	tblptrh,c
  3211  0015BE                     	if	0	;There are less than 3 active tblptr bytes
  3212  0015BE                     	endif
  3213  0015BE  0009               	tblrd		*+
  3214  0015C0  CFF5 F015          	movff	tablat,___ftmul@f1
  3215  0015C4  0009               	tblrd		*+
  3216  0015C6  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3217  0015CA  000A               	tblrd		*-
  3218  0015CC  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3219  0015D0  ECBE  F00D         	call	___ftmul	;wreg free
  3220  0015D4  C015  F02A         	movff	?___ftmul,_fround$1567
  3221  0015D8  C016  F02B         	movff	?___ftmul+1,_fround$1567+1
  3222  0015DC  C017  F02C         	movff	?___ftmul+2,_fround$1567+2
  3223                           
  3224                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3225  0015E0  0E00               	movlw	0
  3226  0015E2  6E12               	movwf	___wmul@multiplicand+1,c
  3227  0015E4  0E03               	movlw	3
  3228  0015E6  6E11               	movwf	___wmul@multiplicand,c
  3229  0015E8  0E00               	movlw	0
  3230  0015EA  6E04               	movwf	___awmod@divisor+1,c
  3231  0015EC  0E0A               	movlw	10
  3232  0015EE  6E03               	movwf	___awmod@divisor,c
  3233  0015F0  C02D  F001         	movff	fround@prec,___awmod@dividend
  3234  0015F4  6A02               	clrf	___awmod@dividend+1,c
  3235  0015F6  ECA3  F011         	call	___awmod	;wreg free
  3236  0015FA  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3237  0015FE  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3238  001602  EC12  F013         	call	___wmul	;wreg free
  3239  001606  0E50               	movlw	low __npowers_
  3240  001608  240F               	addwf	?___wmul,w,c
  3241  00160A  6EF6               	movwf	tblptrl,c
  3242  00160C  0E08               	movlw	high __npowers_
  3243  00160E  2010               	addwfc	?___wmul+1,w,c
  3244  001610  6EF7               	movwf	tblptrh,c
  3245  001612                     	if	0	;There are less than 3 active tblptr bytes
  3246  001612                     	endif
  3247  001612  0009               	tblrd		*+
  3248  001614  CFF5 F018          	movff	tablat,___ftmul@f2
  3249  001618  0009               	tblrd		*+
  3250  00161A  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3251  00161E  000A               	tblrd		*-
  3252  001620  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3253  001624  C02A  F015         	movff	_fround$1567,___ftmul@f1
  3254  001628  C02B  F016         	movff	_fround$1567+1,___ftmul@f1+1
  3255  00162C  C02C  F017         	movff	_fround$1567+2,___ftmul@f1+2
  3256  001630  ECBE  F00D         	call	___ftmul	;wreg free
  3257  001634  C015  F027         	movff	?___ftmul,_fround$1568
  3258  001638  C016  F028         	movff	?___ftmul+1,_fround$1568+1
  3259  00163C  C017  F029         	movff	?___ftmul+2,_fround$1568+2
  3260                           
  3261                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3262  001640  C027  F015         	movff	_fround$1568,___ftmul@f1
  3263  001644  C028  F016         	movff	_fround$1568+1,___ftmul@f1+1
  3264  001648  C029  F017         	movff	_fround$1568+2,___ftmul@f1+2
  3265  00164C  0E00               	movlw	0
  3266  00164E  6E18               	movwf	___ftmul@f2,c
  3267  001650  0E00               	movlw	0
  3268  001652  6E19               	movwf	___ftmul@f2+1,c
  3269  001654  0E3F               	movlw	63
  3270  001656  6E1A               	movwf	___ftmul@f2+2,c
  3271  001658  ECBE  F00D         	call	___ftmul	;wreg free
  3272  00165C  C015  F024         	movff	?___ftmul,?_fround
  3273  001660  C016  F025         	movff	?___ftmul+1,?_fround+1
  3274  001664  C017  F026         	movff	?___ftmul+2,?_fround+2
  3275  001668  0012               	return	
  3276  00166A                     l232:
  3277                           
  3278                           ;doprnt.c: 415: else if(prec > 10)
  3279  00166A  0E0A               	movlw	10
  3280  00166C  642D               	cpfsgt	fround@prec,c
  3281  00166E  D063               	goto	l235
  3282                           
  3283                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3284  001670  0E00               	movlw	0
  3285  001672  6E12               	movwf	___wmul@multiplicand+1,c
  3286  001674  0E03               	movlw	3
  3287  001676  6E11               	movwf	___wmul@multiplicand,c
  3288  001678  0E00               	movlw	0
  3289  00167A  6E04               	movwf	___awmod@divisor+1,c
  3290  00167C  0E0A               	movlw	10
  3291  00167E  6E03               	movwf	___awmod@divisor,c
  3292  001680  C02D  F001         	movff	fround@prec,___awmod@dividend
  3293  001684  6A02               	clrf	___awmod@dividend+1,c
  3294  001686  ECA3  F011         	call	___awmod	;wreg free
  3295  00168A  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3296  00168E  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3297  001692  EC12  F013         	call	___wmul	;wreg free
  3298  001696  0E50               	movlw	low __npowers_
  3299  001698  240F               	addwf	?___wmul,w,c
  3300  00169A  6EF6               	movwf	tblptrl,c
  3301  00169C  0E08               	movlw	high __npowers_
  3302  00169E  2010               	addwfc	?___wmul+1,w,c
  3303  0016A0  6EF7               	movwf	tblptrh,c
  3304  0016A2                     	if	0	;There are less than 3 active tblptr bytes
  3305  0016A2                     	endif
  3306  0016A2  0009               	tblrd		*+
  3307  0016A4  CFF5 F018          	movff	tablat,___ftmul@f2
  3308  0016A8  0009               	tblrd		*+
  3309  0016AA  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3310  0016AE  000A               	tblrd		*-
  3311  0016B0  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3312  0016B4  0E00               	movlw	0
  3313  0016B6  6E0A               	movwf	___awdiv@divisor+1,c
  3314  0016B8  0E0A               	movlw	10
  3315  0016BA  6E09               	movwf	___awdiv@divisor,c
  3316  0016BC  C02D  F007         	movff	fround@prec,___awdiv@dividend
  3317  0016C0  6A08               	clrf	___awdiv@dividend+1,c
  3318  0016C2  ECDF  F010         	call	___awdiv	;wreg free
  3319  0016C6  0E09               	movlw	9
  3320  0016C8  2407               	addwf	?___awdiv,w,c
  3321  0016CA  6E0F               	movwf	___wmul@multiplier,c
  3322  0016CC  0E00               	movlw	0
  3323  0016CE  2008               	addwfc	?___awdiv+1,w,c
  3324  0016D0  6E10               	movwf	___wmul@multiplier+1,c
  3325  0016D2  0E00               	movlw	0
  3326  0016D4  6E12               	movwf	___wmul@multiplicand+1,c
  3327  0016D6  0E03               	movlw	3
  3328  0016D8  6E11               	movwf	___wmul@multiplicand,c
  3329  0016DA  EC12  F013         	call	___wmul	;wreg free
  3330  0016DE  0E50               	movlw	low __npowers_
  3331  0016E0  240F               	addwf	?___wmul,w,c
  3332  0016E2  6EF6               	movwf	tblptrl,c
  3333  0016E4  0E08               	movlw	high __npowers_
  3334  0016E6  2010               	addwfc	?___wmul+1,w,c
  3335  0016E8  6EF7               	movwf	tblptrh,c
  3336  0016EA                     	if	0	;There are less than 3 active tblptr bytes
  3337  0016EA                     	endif
  3338  0016EA  0009               	tblrd		*+
  3339  0016EC  CFF5 F015          	movff	tablat,___ftmul@f1
  3340  0016F0  0009               	tblrd		*+
  3341  0016F2  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3342  0016F6  000A               	tblrd		*-
  3343  0016F8  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3344  0016FC  ECBE  F00D         	call	___ftmul	;wreg free
  3345  001700  C015  F02A         	movff	?___ftmul,_fround$1567
  3346  001704  C016  F02B         	movff	?___ftmul+1,_fround$1567+1
  3347  001708  C017  F02C         	movff	?___ftmul+2,_fround$1567+2
  3348                           
  3349                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3350  00170C  C02A  F015         	movff	_fround$1567,___ftmul@f1
  3351  001710  C02B  F016         	movff	_fround$1567+1,___ftmul@f1+1
  3352  001714  C02C  F017         	movff	_fround$1567+2,___ftmul@f1+2
  3353  001718  0E00               	movlw	0
  3354  00171A  6E18               	movwf	___ftmul@f2,c
  3355  00171C  0E00               	movlw	0
  3356  00171E  6E19               	movwf	___ftmul@f2+1,c
  3357  001720  0E3F               	movlw	63
  3358  001722  6E1A               	movwf	___ftmul@f2+2,c
  3359  001724  ECBE  F00D         	call	___ftmul	;wreg free
  3360  001728  C015  F024         	movff	?___ftmul,?_fround
  3361  00172C  C016  F025         	movff	?___ftmul+1,?_fround+1
  3362  001730  C017  F026         	movff	?___ftmul+2,?_fround+2
  3363  001734  0012               	return	
  3364  001736                     l235:
  3365                           
  3366                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3367  001736  502D               	movf	fround@prec,w,c
  3368  001738  0D03               	mullw	3
  3369  00173A  0E50               	movlw	low __npowers_
  3370  00173C  24F3               	addwf	prodl,w,c
  3371  00173E  6EF6               	movwf	tblptrl,c
  3372  001740  0E08               	movlw	high __npowers_
  3373  001742  20F4               	addwfc	prodh,w,c
  3374  001744  6EF7               	movwf	tblptrh,c
  3375  001746                     	if	0	;There are less than 3 active tblptr bytes
  3376  001746                     	endif
  3377  001746  0009               	tblrd		*+
  3378  001748  CFF5 F015          	movff	tablat,___ftmul@f1
  3379  00174C  0009               	tblrd		*+
  3380  00174E  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3381  001752  000A               	tblrd		*-
  3382  001754  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3383  001758  0E00               	movlw	0
  3384  00175A  6E18               	movwf	___ftmul@f2,c
  3385  00175C  0E00               	movlw	0
  3386  00175E  6E19               	movwf	___ftmul@f2+1,c
  3387  001760  0E3F               	movlw	63
  3388  001762  6E1A               	movwf	___ftmul@f2+2,c
  3389  001764  ECBE  F00D         	call	___ftmul	;wreg free
  3390  001768  C015  F024         	movff	?___ftmul,?_fround
  3391  00176C  C016  F025         	movff	?___ftmul+1,?_fround+1
  3392  001770  C017  F026         	movff	?___ftmul+2,?_fround+2
  3393  001774  0012               	return	
  3394  001776                     __end_of_fround:
  3395                           	opt stack 0
  3396                           tblptru	equ	0xFF8
  3397                           tblptrh	equ	0xFF7
  3398                           tblptrl	equ	0xFF6
  3399                           tablat	equ	0xFF5
  3400                           prodh	equ	0xFF4
  3401                           prodl	equ	0xFF3
  3402                           postinc0	equ	0xFEE
  3403                           wreg	equ	0xFE8
  3404                           indf2	equ	0xFDF
  3405                           postinc2	equ	0xFDE
  3406                           postdec2	equ	0xFDD
  3407                           fsr2h	equ	0xFDA
  3408                           fsr2l	equ	0xFD9
  3409                           status	equ	0xFD8
  3410                           
  3411 ;; *************** function ___wmul *****************
  3412 ;; Defined at:
  3413 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  3414 ;; Parameters:    Size  Location     Type
  3415 ;;  multiplier      2   14[COMRAM] unsigned int 
  3416 ;;  multiplicand    2   16[COMRAM] unsigned int 
  3417 ;; Auto vars:     Size  Location     Type
  3418 ;;  product         2   18[COMRAM] unsigned int 
  3419 ;; Return value:  Size  Location     Type
  3420 ;;                  2   14[COMRAM] unsigned int 
  3421 ;; Registers used:
  3422 ;;		wreg, status,2, status,0, prodl, prodh
  3423 ;; Tracked objects:
  3424 ;;		On entry : 0/0
  3425 ;;		On exit  : 0/0
  3426 ;;		Unchanged: 0/0
  3427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3428 ;;      Params:         4       0       0       0       0       0       0       0       0
  3429 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3430 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3431 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3432 ;;Total ram usage:        6 bytes
  3433 ;; Hardware stack levels used:    1
  3434 ;; This function calls:
  3435 ;;		Nothing
  3436 ;; This function is called by:
  3437 ;;		_fround
  3438 ;;		_scale
  3439 ;;		_sprintf
  3440 ;; This function uses a non-reentrant model
  3441 ;;
  3442                           
  3443                           	psect	text5
  3444  002624                     __ptext5:
  3445                           	opt stack 0
  3446  002624                     ___wmul:
  3447                           	opt stack 28
  3448                           
  3449                           ;incstack = 0
  3450  002624  500F               	movf	___wmul@multiplier,w,c
  3451  002626  0211               	mulwf	___wmul@multiplicand,c
  3452  002628  CFF3 F013          	movff	prodl,___wmul@product
  3453  00262C  CFF4 F014          	movff	prodh,___wmul@product+1
  3454  002630  500F               	movf	___wmul@multiplier,w,c
  3455  002632  0212               	mulwf	___wmul@multiplicand+1,c
  3456  002634  50F3               	movf	prodl,w,c
  3457  002636  2614               	addwf	___wmul@product+1,f,c
  3458  002638  5010               	movf	___wmul@multiplier+1,w,c
  3459  00263A  0211               	mulwf	___wmul@multiplicand,c
  3460  00263C  50F3               	movf	prodl,w,c
  3461  00263E  2614               	addwf	___wmul@product+1,f,c
  3462  002640  C013  F00F         	movff	___wmul@product,?___wmul
  3463  002644  C014  F010         	movff	___wmul@product+1,?___wmul+1
  3464  002648  0012               	return	
  3465  00264A                     __end_of___wmul:
  3466                           	opt stack 0
  3467                           tblptru	equ	0xFF8
  3468                           tblptrh	equ	0xFF7
  3469                           tblptrl	equ	0xFF6
  3470                           tablat	equ	0xFF5
  3471                           prodh	equ	0xFF4
  3472                           prodl	equ	0xFF3
  3473                           postinc0	equ	0xFEE
  3474                           wreg	equ	0xFE8
  3475                           indf2	equ	0xFDF
  3476                           postinc2	equ	0xFDE
  3477                           postdec2	equ	0xFDD
  3478                           fsr2h	equ	0xFDA
  3479                           fsr2l	equ	0xFD9
  3480                           status	equ	0xFD8
  3481                           
  3482 ;; *************** function ___ftmul *****************
  3483 ;; Defined at:
  3484 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  3485 ;; Parameters:    Size  Location     Type
  3486 ;;  f1              3   20[COMRAM] float 
  3487 ;;  f2              3   23[COMRAM] float 
  3488 ;; Auto vars:     Size  Location     Type
  3489 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  3490 ;;  sign            1   34[COMRAM] unsigned char 
  3491 ;;  cntr            1   33[COMRAM] unsigned char 
  3492 ;;  exp             1   29[COMRAM] unsigned char 
  3493 ;; Return value:  Size  Location     Type
  3494 ;;                  3   20[COMRAM] float 
  3495 ;; Registers used:
  3496 ;;		wreg, status,2, status,0, cstack
  3497 ;; Tracked objects:
  3498 ;;		On entry : 0/0
  3499 ;;		On exit  : 0/0
  3500 ;;		Unchanged: 0/0
  3501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3502 ;;      Params:         6       0       0       0       0       0       0       0       0
  3503 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3504 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3505 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3506 ;;Total ram usage:       15 bytes
  3507 ;; Hardware stack levels used:    1
  3508 ;; Hardware stack levels required when called:    1
  3509 ;; This function calls:
  3510 ;;		___ftpack
  3511 ;; This function is called by:
  3512 ;;		_fround
  3513 ;;		_scale
  3514 ;;		_sprintf
  3515 ;; This function uses a non-reentrant model
  3516 ;;
  3517                           
  3518                           	psect	text6
  3519  001B7C                     __ptext6:
  3520                           	opt stack 0
  3521  001B7C                     ___ftmul:
  3522                           	opt stack 27
  3523                           
  3524                           ;incstack = 0
  3525  001B7C  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  3526  001B80  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  3527  001B82  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  3528  001B84  3416               	rlcf	___ftmul@f1+1,w,c
  3529  001B86  361B               	rlcf	??___ftmul& (0+255),f,c
  3530  001B88  E301               	bnc	u2251
  3531  001B8A  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  3532  001B8C                     u2251:
  3533  001B8C  501B               	movf	??___ftmul,w,c
  3534  001B8E  6E1E               	movwf	___ftmul@exp,c
  3535  001B90  501E               	movf	___ftmul@exp,w,c
  3536  001B92  A4D8               	btfss	status,2,c
  3537  001B94  D007               	goto	l651
  3538  001B96  0E00               	movlw	0
  3539  001B98  6E15               	movwf	?___ftmul,c
  3540  001B9A  0E00               	movlw	0
  3541  001B9C  6E16               	movwf	?___ftmul+1,c
  3542  001B9E  0E00               	movlw	0
  3543  001BA0  6E17               	movwf	?___ftmul+2,c
  3544  001BA2  0012               	return	
  3545  001BA4                     l651:
  3546  001BA4  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  3547  001BA8  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  3548  001BAA  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  3549  001BAC  3419               	rlcf	___ftmul@f2+1,w,c
  3550  001BAE  361B               	rlcf	??___ftmul& (0+255),f,c
  3551  001BB0  E301               	bnc	u2271
  3552  001BB2  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  3553  001BB4                     u2271:
  3554  001BB4  501B               	movf	??___ftmul,w,c
  3555  001BB6  6E23               	movwf	___ftmul@sign,c
  3556  001BB8  5023               	movf	___ftmul@sign,w,c
  3557  001BBA  A4D8               	btfss	status,2,c
  3558  001BBC  D007               	goto	l653
  3559  001BBE  0E00               	movlw	0
  3560  001BC0  6E15               	movwf	?___ftmul,c
  3561  001BC2  0E00               	movlw	0
  3562  001BC4  6E16               	movwf	?___ftmul+1,c
  3563  001BC6  0E00               	movlw	0
  3564  001BC8  6E17               	movwf	?___ftmul+2,c
  3565  001BCA  0012               	return	
  3566  001BCC                     l653:
  3567  001BCC  5023               	movf	___ftmul@sign,w,c
  3568  001BCE  0F7B               	addlw	123
  3569  001BD0  261E               	addwf	___ftmul@exp,f,c
  3570  001BD2  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  3571  001BD6  501A               	movf	___ftmul@f2+2,w,c
  3572  001BD8  1A23               	xorwf	___ftmul@sign,f,c
  3573  001BDA  0E80               	movlw	128
  3574  001BDC  1623               	andwf	___ftmul@sign,f,c
  3575  001BDE  8E16               	bsf	___ftmul@f1+1,7,c
  3576  001BE0  8E19               	bsf	___ftmul@f2+1,7,c
  3577  001BE2  0EFF               	movlw	255
  3578  001BE4  1618               	andwf	___ftmul@f2,f,c
  3579  001BE6  0EFF               	movlw	255
  3580  001BE8  1619               	andwf	___ftmul@f2+1,f,c
  3581  001BEA  0E00               	movlw	0
  3582  001BEC  161A               	andwf	___ftmul@f2+2,f,c
  3583  001BEE  0E00               	movlw	0
  3584  001BF0  6E1F               	movwf	___ftmul@f3_as_product,c
  3585  001BF2  0E00               	movlw	0
  3586  001BF4  6E20               	movwf	___ftmul@f3_as_product+1,c
  3587  001BF6  0E00               	movlw	0
  3588  001BF8  6E21               	movwf	___ftmul@f3_as_product+2,c
  3589  001BFA  0E07               	movlw	7
  3590  001BFC  6E22               	movwf	___ftmul@cntr,c
  3591  001BFE  A015               	btfss	___ftmul@f1,0,c
  3592  001C00  D006               	goto	l655
  3593  001C02  5018               	movf	___ftmul@f2,w,c
  3594  001C04  261F               	addwf	___ftmul@f3_as_product,f,c
  3595  001C06  5019               	movf	___ftmul@f2+1,w,c
  3596  001C08  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  3597  001C0A  501A               	movf	___ftmul@f2+2,w,c
  3598  001C0C  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  3599  001C0E                     l655:
  3600  001C0E  90D8               	bcf	status,0,c
  3601  001C10  3217               	rrcf	___ftmul@f1+2,f,c
  3602  001C12  3216               	rrcf	___ftmul@f1+1,f,c
  3603  001C14  3215               	rrcf	___ftmul@f1,f,c
  3604  001C16  90D8               	bcf	status,0,c
  3605  001C18  3618               	rlcf	___ftmul@f2,f,c
  3606  001C1A  3619               	rlcf	___ftmul@f2+1,f,c
  3607  001C1C  361A               	rlcf	___ftmul@f2+2,f,c
  3608  001C1E  2E22               	decfsz	___ftmul@cntr,f,c
  3609  001C20  D7EE               	goto	l654
  3610  001C22  0E09               	movlw	9
  3611  001C24  6E22               	movwf	___ftmul@cntr,c
  3612  001C26  A015               	btfss	___ftmul@f1,0,c
  3613  001C28  D006               	goto	l658
  3614  001C2A  5018               	movf	___ftmul@f2,w,c
  3615  001C2C  261F               	addwf	___ftmul@f3_as_product,f,c
  3616  001C2E  5019               	movf	___ftmul@f2+1,w,c
  3617  001C30  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  3618  001C32  501A               	movf	___ftmul@f2+2,w,c
  3619  001C34  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  3620  001C36                     l658:
  3621  001C36  90D8               	bcf	status,0,c
  3622  001C38  3217               	rrcf	___ftmul@f1+2,f,c
  3623  001C3A  3216               	rrcf	___ftmul@f1+1,f,c
  3624  001C3C  3215               	rrcf	___ftmul@f1,f,c
  3625  001C3E  90D8               	bcf	status,0,c
  3626  001C40  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  3627  001C42  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  3628  001C44  321F               	rrcf	___ftmul@f3_as_product,f,c
  3629  001C46  2E22               	decfsz	___ftmul@cntr,f,c
  3630  001C48  D7EE               	goto	l657
  3631  001C4A  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  3632  001C4E  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3633  001C52  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3634  001C56  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  3635  001C5A  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  3636  001C5E  ECF2  F00F         	call	___ftpack	;wreg free
  3637  001C62  C001  F015         	movff	?___ftpack,?___ftmul
  3638  001C66  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  3639  001C6A  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  3640  001C6E  0012               	return	
  3641  001C70                     __end_of___ftmul:
  3642                           	opt stack 0
  3643                           tblptru	equ	0xFF8
  3644                           tblptrh	equ	0xFF7
  3645                           tblptrl	equ	0xFF6
  3646                           tablat	equ	0xFF5
  3647                           prodh	equ	0xFF4
  3648                           prodl	equ	0xFF3
  3649                           postinc0	equ	0xFEE
  3650                           wreg	equ	0xFE8
  3651                           indf2	equ	0xFDF
  3652                           postinc2	equ	0xFDE
  3653                           postdec2	equ	0xFDD
  3654                           fsr2h	equ	0xFDA
  3655                           fsr2l	equ	0xFD9
  3656                           status	equ	0xFD8
  3657                           
  3658 ;; *************** function ___awmod *****************
  3659 ;; Defined at:
  3660 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  3661 ;; Parameters:    Size  Location     Type
  3662 ;;  dividend        2    0[COMRAM] int 
  3663 ;;  divisor         2    2[COMRAM] int 
  3664 ;; Auto vars:     Size  Location     Type
  3665 ;;  sign            1    5[COMRAM] unsigned char 
  3666 ;;  counter         1    4[COMRAM] unsigned char 
  3667 ;; Return value:  Size  Location     Type
  3668 ;;                  2    0[COMRAM] int 
  3669 ;; Registers used:
  3670 ;;		wreg, status,2, status,0
  3671 ;; Tracked objects:
  3672 ;;		On entry : 0/0
  3673 ;;		On exit  : 0/0
  3674 ;;		Unchanged: 0/0
  3675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3676 ;;      Params:         4       0       0       0       0       0       0       0       0
  3677 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3678 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3679 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3680 ;;Total ram usage:        6 bytes
  3681 ;; Hardware stack levels used:    1
  3682 ;; This function calls:
  3683 ;;		Nothing
  3684 ;; This function is called by:
  3685 ;;		_fround
  3686 ;;		_scale
  3687 ;; This function uses a non-reentrant model
  3688 ;;
  3689                           
  3690                           	psect	text7
  3691  002346                     __ptext7:
  3692                           	opt stack 0
  3693  002346                     ___awmod:
  3694                           	opt stack 28
  3695                           
  3696                           ;incstack = 0
  3697  002346  0E00               	movlw	0
  3698  002348  6E06               	movwf	___awmod@sign,c
  3699  00234A  AE02               	btfss	___awmod@dividend+1,7,c
  3700  00234C  D006               	goto	l504
  3701  00234E  6C01               	negf	___awmod@dividend,c
  3702  002350  1E02               	comf	___awmod@dividend+1,f,c
  3703  002352  B0D8               	btfsc	status,0,c
  3704  002354  2A02               	incf	___awmod@dividend+1,f,c
  3705  002356  0E01               	movlw	1
  3706  002358  6E06               	movwf	___awmod@sign,c
  3707  00235A                     l504:
  3708  00235A  AE04               	btfss	___awmod@divisor+1,7,c
  3709  00235C  D004               	goto	l505
  3710  00235E  6C03               	negf	___awmod@divisor,c
  3711  002360  1E04               	comf	___awmod@divisor+1,f,c
  3712  002362  B0D8               	btfsc	status,0,c
  3713  002364  2A04               	incf	___awmod@divisor+1,f,c
  3714  002366                     l505:
  3715  002366  5003               	movf	___awmod@divisor,w,c
  3716  002368  1004               	iorwf	___awmod@divisor+1,w,c
  3717  00236A  B4D8               	btfsc	status,2,c
  3718  00236C  D018               	goto	l512
  3719  00236E  0E01               	movlw	1
  3720  002370  6E05               	movwf	___awmod@counter,c
  3721  002372  D004               	goto	l507
  3722  002374  90D8               	bcf	status,0,c
  3723  002376  3603               	rlcf	___awmod@divisor,f,c
  3724  002378  3604               	rlcf	___awmod@divisor+1,f,c
  3725  00237A  2A05               	incf	___awmod@counter,f,c
  3726  00237C                     l507:
  3727  00237C  AE04               	btfss	___awmod@divisor+1,7,c
  3728  00237E  D7FA               	goto	l508
  3729  002380                     u2400:
  3730  002380  5003               	movf	___awmod@divisor,w,c
  3731  002382  5C01               	subwf	___awmod@dividend,w,c
  3732  002384  5004               	movf	___awmod@divisor+1,w,c
  3733  002386  5802               	subwfb	___awmod@dividend+1,w,c
  3734  002388  A0D8               	btfss	status,0,c
  3735  00238A  D004               	goto	l511
  3736  00238C  5003               	movf	___awmod@divisor,w,c
  3737  00238E  5E01               	subwf	___awmod@dividend,f,c
  3738  002390  5004               	movf	___awmod@divisor+1,w,c
  3739  002392  5A02               	subwfb	___awmod@dividend+1,f,c
  3740  002394                     l511:
  3741  002394  90D8               	bcf	status,0,c
  3742  002396  3204               	rrcf	___awmod@divisor+1,f,c
  3743  002398  3203               	rrcf	___awmod@divisor,f,c
  3744  00239A  2E05               	decfsz	___awmod@counter,f,c
  3745  00239C  D7F1               	goto	u2400
  3746  00239E                     l512:
  3747  00239E  5006               	movf	___awmod@sign,w,c
  3748  0023A0  B4D8               	btfsc	status,2,c
  3749  0023A2  D004               	goto	l513
  3750  0023A4  6C01               	negf	___awmod@dividend,c
  3751  0023A6  1E02               	comf	___awmod@dividend+1,f,c
  3752  0023A8  B0D8               	btfsc	status,0,c
  3753  0023AA  2A02               	incf	___awmod@dividend+1,f,c
  3754  0023AC                     l513:
  3755  0023AC  C001  F001         	movff	___awmod@dividend,?___awmod
  3756  0023B0  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  3757  0023B4  0012               	return	
  3758  0023B6                     __end_of___awmod:
  3759                           	opt stack 0
  3760                           tblptru	equ	0xFF8
  3761                           tblptrh	equ	0xFF7
  3762                           tblptrl	equ	0xFF6
  3763                           tablat	equ	0xFF5
  3764                           prodh	equ	0xFF4
  3765                           prodl	equ	0xFF3
  3766                           postinc0	equ	0xFEE
  3767                           wreg	equ	0xFE8
  3768                           indf2	equ	0xFDF
  3769                           postinc2	equ	0xFDE
  3770                           postdec2	equ	0xFDD
  3771                           fsr2h	equ	0xFDA
  3772                           fsr2l	equ	0xFD9
  3773                           status	equ	0xFD8
  3774                           
  3775 ;; *************** function ___awdiv *****************
  3776 ;; Defined at:
  3777 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  3778 ;; Parameters:    Size  Location     Type
  3779 ;;  dividend        2    6[COMRAM] int 
  3780 ;;  divisor         2    8[COMRAM] int 
  3781 ;; Auto vars:     Size  Location     Type
  3782 ;;  quotient        2   12[COMRAM] int 
  3783 ;;  sign            1   11[COMRAM] unsigned char 
  3784 ;;  counter         1   10[COMRAM] unsigned char 
  3785 ;; Return value:  Size  Location     Type
  3786 ;;                  2    6[COMRAM] int 
  3787 ;; Registers used:
  3788 ;;		wreg, status,2, status,0
  3789 ;; Tracked objects:
  3790 ;;		On entry : 0/0
  3791 ;;		On exit  : 0/0
  3792 ;;		Unchanged: 0/0
  3793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3794 ;;      Params:         4       0       0       0       0       0       0       0       0
  3795 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3796 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3797 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3798 ;;Total ram usage:        8 bytes
  3799 ;; Hardware stack levels used:    1
  3800 ;; This function calls:
  3801 ;;		Nothing
  3802 ;; This function is called by:
  3803 ;;		_fround
  3804 ;;		_scale
  3805 ;;		_sprintf
  3806 ;; This function uses a non-reentrant model
  3807 ;;
  3808                           
  3809                           	psect	text8
  3810  0021BE                     __ptext8:
  3811                           	opt stack 0
  3812  0021BE                     ___awdiv:
  3813                           	opt stack 28
  3814                           
  3815                           ;incstack = 0
  3816  0021BE  0E00               	movlw	0
  3817  0021C0  6E0C               	movwf	___awdiv@sign,c
  3818  0021C2  AE0A               	btfss	___awdiv@divisor+1,7,c
  3819  0021C4  D006               	goto	l491
  3820  0021C6  6C09               	negf	___awdiv@divisor,c
  3821  0021C8  1E0A               	comf	___awdiv@divisor+1,f,c
  3822  0021CA  B0D8               	btfsc	status,0,c
  3823  0021CC  2A0A               	incf	___awdiv@divisor+1,f,c
  3824  0021CE  0E01               	movlw	1
  3825  0021D0  6E0C               	movwf	___awdiv@sign,c
  3826  0021D2                     l491:
  3827  0021D2  AE08               	btfss	___awdiv@dividend+1,7,c
  3828  0021D4  D006               	goto	l492
  3829  0021D6  6C07               	negf	___awdiv@dividend,c
  3830  0021D8  1E08               	comf	___awdiv@dividend+1,f,c
  3831  0021DA  B0D8               	btfsc	status,0,c
  3832  0021DC  2A08               	incf	___awdiv@dividend+1,f,c
  3833  0021DE  0E01               	movlw	1
  3834  0021E0  1A0C               	xorwf	___awdiv@sign,f,c
  3835  0021E2                     l492:
  3836  0021E2  0E00               	movlw	0
  3837  0021E4  6E0E               	movwf	___awdiv@quotient+1,c
  3838  0021E6  0E00               	movlw	0
  3839  0021E8  6E0D               	movwf	___awdiv@quotient,c
  3840  0021EA  5009               	movf	___awdiv@divisor,w,c
  3841  0021EC  100A               	iorwf	___awdiv@divisor+1,w,c
  3842  0021EE  B4D8               	btfsc	status,2,c
  3843  0021F0  D01C               	goto	l499
  3844  0021F2  0E01               	movlw	1
  3845  0021F4  6E0B               	movwf	___awdiv@counter,c
  3846  0021F6  D004               	goto	l494
  3847  0021F8  90D8               	bcf	status,0,c
  3848  0021FA  3609               	rlcf	___awdiv@divisor,f,c
  3849  0021FC  360A               	rlcf	___awdiv@divisor+1,f,c
  3850  0021FE  2A0B               	incf	___awdiv@counter,f,c
  3851  002200                     l494:
  3852  002200  AE0A               	btfss	___awdiv@divisor+1,7,c
  3853  002202  D7FA               	goto	l495
  3854  002204                     u2340:
  3855  002204  90D8               	bcf	status,0,c
  3856  002206  360D               	rlcf	___awdiv@quotient,f,c
  3857  002208  360E               	rlcf	___awdiv@quotient+1,f,c
  3858  00220A  5009               	movf	___awdiv@divisor,w,c
  3859  00220C  5C07               	subwf	___awdiv@dividend,w,c
  3860  00220E  500A               	movf	___awdiv@divisor+1,w,c
  3861  002210  5808               	subwfb	___awdiv@dividend+1,w,c
  3862  002212  A0D8               	btfss	status,0,c
  3863  002214  D005               	goto	l498
  3864  002216  5009               	movf	___awdiv@divisor,w,c
  3865  002218  5E07               	subwf	___awdiv@dividend,f,c
  3866  00221A  500A               	movf	___awdiv@divisor+1,w,c
  3867  00221C  5A08               	subwfb	___awdiv@dividend+1,f,c
  3868  00221E  800D               	bsf	___awdiv@quotient,0,c
  3869  002220                     l498:
  3870  002220  90D8               	bcf	status,0,c
  3871  002222  320A               	rrcf	___awdiv@divisor+1,f,c
  3872  002224  3209               	rrcf	___awdiv@divisor,f,c
  3873  002226  2E0B               	decfsz	___awdiv@counter,f,c
  3874  002228  D7ED               	goto	u2340
  3875  00222A                     l499:
  3876  00222A  500C               	movf	___awdiv@sign,w,c
  3877  00222C  B4D8               	btfsc	status,2,c
  3878  00222E  D004               	goto	l500
  3879  002230  6C0D               	negf	___awdiv@quotient,c
  3880  002232  1E0E               	comf	___awdiv@quotient+1,f,c
  3881  002234  B0D8               	btfsc	status,0,c
  3882  002236  2A0E               	incf	___awdiv@quotient+1,f,c
  3883  002238                     l500:
  3884  002238  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  3885  00223C  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  3886  002240  0012               	return	
  3887  002242                     __end_of___awdiv:
  3888                           	opt stack 0
  3889                           tblptru	equ	0xFF8
  3890                           tblptrh	equ	0xFF7
  3891                           tblptrl	equ	0xFF6
  3892                           tablat	equ	0xFF5
  3893                           prodh	equ	0xFF4
  3894                           prodl	equ	0xFF3
  3895                           postinc0	equ	0xFEE
  3896                           wreg	equ	0xFE8
  3897                           indf2	equ	0xFDF
  3898                           postinc2	equ	0xFDE
  3899                           postdec2	equ	0xFDD
  3900                           fsr2h	equ	0xFDA
  3901                           fsr2l	equ	0xFD9
  3902                           status	equ	0xFD8
  3903                           
  3904 ;; *************** function __tdiv_to_l_ *****************
  3905 ;; Defined at:
  3906 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdivl.c"
  3907 ;; Parameters:    Size  Location     Type
  3908 ;;  f1              3    0[COMRAM] float 
  3909 ;;  f2              3    3[COMRAM] float 
  3910 ;; Auto vars:     Size  Location     Type
  3911 ;;  quot            4    9[COMRAM] unsigned long 
  3912 ;;  exp1            1   14[COMRAM] unsigned char 
  3913 ;;  cntr            1   13[COMRAM] unsigned char 
  3914 ;; Return value:  Size  Location     Type
  3915 ;;                  4    0[COMRAM] unsigned long 
  3916 ;; Registers used:
  3917 ;;		wreg, status,2, status,0
  3918 ;; Tracked objects:
  3919 ;;		On entry : 0/0
  3920 ;;		On exit  : 0/0
  3921 ;;		Unchanged: 0/0
  3922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3923 ;;      Params:         6       0       0       0       0       0       0       0       0
  3924 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3925 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3926 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3927 ;;Total ram usage:       15 bytes
  3928 ;; Hardware stack levels used:    1
  3929 ;; This function calls:
  3930 ;;		Nothing
  3931 ;; This function is called by:
  3932 ;;		_sprintf
  3933 ;; This function uses a non-reentrant model
  3934 ;;
  3935                           
  3936                           	psect	text9
  3937  001922                     __ptext9:
  3938                           	opt stack 0
  3939  001922                     __tdiv_to_l_:
  3940                           	opt stack 29
  3941                           
  3942                           ;incstack = 0
  3943  001922  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  3944  001926  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3945  001928  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3946  00192A  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  3947  00192C  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3948  00192E  E301               	bnc	u2541
  3949  001930  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3950  001932                     u2541:
  3951  001932  5007               	movf	??__tdiv_to_l_,w,c
  3952  001934  6E0F               	movwf	__tdiv_to_l_@exp1,c
  3953  001936  500F               	movf	__tdiv_to_l_@exp1,w,c
  3954  001938  A4D8               	btfss	status,2,c
  3955  00193A  D009               	goto	l627
  3956  00193C  0E00               	movlw	0
  3957  00193E  6E01               	movwf	?__tdiv_to_l_,c
  3958  001940  0E00               	movlw	0
  3959  001942  6E02               	movwf	?__tdiv_to_l_+1,c
  3960  001944  0E00               	movlw	0
  3961  001946  6E03               	movwf	?__tdiv_to_l_+2,c
  3962  001948  0E00               	movlw	0
  3963  00194A  6E04               	movwf	?__tdiv_to_l_+3,c
  3964  00194C  0012               	return	
  3965  00194E                     l627:
  3966  00194E  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  3967  001952  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3968  001954  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3969  001956  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  3970  001958  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3971  00195A  E301               	bnc	u2561
  3972  00195C  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3973  00195E                     u2561:
  3974  00195E  5007               	movf	??__tdiv_to_l_,w,c
  3975  001960  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3976  001962  500E               	movf	__tdiv_to_l_@cntr,w,c
  3977  001964  A4D8               	btfss	status,2,c
  3978  001966  D009               	goto	l629
  3979  001968  0E00               	movlw	0
  3980  00196A  6E01               	movwf	?__tdiv_to_l_,c
  3981  00196C  0E00               	movlw	0
  3982  00196E  6E02               	movwf	?__tdiv_to_l_+1,c
  3983  001970  0E00               	movlw	0
  3984  001972  6E03               	movwf	?__tdiv_to_l_+2,c
  3985  001974  0E00               	movlw	0
  3986  001976  6E04               	movwf	?__tdiv_to_l_+3,c
  3987  001978  0012               	return	
  3988  00197A                     l629:
  3989  00197A  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  3990  00197C  0EFF               	movlw	255
  3991  00197E  1601               	andwf	__tdiv_to_l_@f1,f,c
  3992  001980  0EFF               	movlw	255
  3993  001982  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  3994  001984  0E00               	movlw	0
  3995  001986  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  3996  001988  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  3997  00198A  0EFF               	movlw	255
  3998  00198C  1604               	andwf	__tdiv_to_l_@f2,f,c
  3999  00198E  0EFF               	movlw	255
  4000  001990  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  4001  001992  0E00               	movlw	0
  4002  001994  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  4003  001996  0E00               	movlw	0
  4004  001998  6E0A               	movwf	__tdiv_to_l_@quot,c
  4005  00199A  0E00               	movlw	0
  4006  00199C  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  4007  00199E  0E00               	movlw	0
  4008  0019A0  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  4009  0019A2  0E00               	movlw	0
  4010  0019A4  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  4011  0019A6  0E7F               	movlw	127
  4012  0019A8  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4013  0019AA  500E               	movf	__tdiv_to_l_@cntr,w,c
  4014  0019AC  0F98               	addlw	152
  4015  0019AE  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4016  0019B0  0E18               	movlw	24
  4017  0019B2  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4018  0019B4                     l630:
  4019  0019B4  90D8               	bcf	status,0,c
  4020  0019B6  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4021  0019B8  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4022  0019BA  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4023  0019BC  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4024  0019BE  5004               	movf	__tdiv_to_l_@f2,w,c
  4025  0019C0  5C01               	subwf	__tdiv_to_l_@f1,w,c
  4026  0019C2  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4027  0019C4  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  4028  0019C6  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4029  0019C8  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  4030  0019CA  A0D8               	btfss	status,0,c
  4031  0019CC  D007               	goto	l631
  4032  0019CE  5004               	movf	__tdiv_to_l_@f2,w,c
  4033  0019D0  5E01               	subwf	__tdiv_to_l_@f1,f,c
  4034  0019D2  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4035  0019D4  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  4036  0019D6  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4037  0019D8  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  4038  0019DA  800A               	bsf	__tdiv_to_l_@quot,0,c
  4039  0019DC                     l631:
  4040  0019DC  90D8               	bcf	status,0,c
  4041  0019DE  3601               	rlcf	__tdiv_to_l_@f1,f,c
  4042  0019E0  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  4043  0019E2  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  4044  0019E4  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  4045  0019E6  D7E6               	goto	l630
  4046  0019E8  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  4047  0019EA  D016               	goto	l633
  4048  0019EC  500F               	movf	__tdiv_to_l_@exp1,w,c
  4049  0019EE  0A80               	xorlw	128
  4050  0019F0  0F97               	addlw	151
  4051  0019F2  B0D8               	btfsc	status,0,c
  4052  0019F4  D009               	goto	l634
  4053  0019F6  0E00               	movlw	0
  4054  0019F8  6E01               	movwf	?__tdiv_to_l_,c
  4055  0019FA  0E00               	movlw	0
  4056  0019FC  6E02               	movwf	?__tdiv_to_l_+1,c
  4057  0019FE  0E00               	movlw	0
  4058  001A00  6E03               	movwf	?__tdiv_to_l_+2,c
  4059  001A02  0E00               	movlw	0
  4060  001A04  6E04               	movwf	?__tdiv_to_l_+3,c
  4061  001A06  0012               	return	
  4062  001A08                     l634:
  4063  001A08  90D8               	bcf	status,0,c
  4064  001A0A  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  4065  001A0C  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  4066  001A0E  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  4067  001A10  320A               	rrcf	__tdiv_to_l_@quot,f,c
  4068  001A12  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  4069  001A14  D7F9               	goto	l634
  4070  001A16  D015               	goto	u2620
  4071  001A18                     l633:
  4072  001A18  0E17               	movlw	23
  4073  001A1A  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  4074  001A1C  D00F               	goto	l639
  4075  001A1E  0E00               	movlw	0
  4076  001A20  6E01               	movwf	?__tdiv_to_l_,c
  4077  001A22  0E00               	movlw	0
  4078  001A24  6E02               	movwf	?__tdiv_to_l_+1,c
  4079  001A26  0E00               	movlw	0
  4080  001A28  6E03               	movwf	?__tdiv_to_l_+2,c
  4081  001A2A  0E00               	movlw	0
  4082  001A2C  6E04               	movwf	?__tdiv_to_l_+3,c
  4083  001A2E  0012               	return	
  4084  001A30  90D8               	bcf	status,0,c
  4085  001A32  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4086  001A34  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4087  001A36  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4088  001A38  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4089  001A3A  060F               	decf	__tdiv_to_l_@exp1,f,c
  4090  001A3C                     l639:
  4091  001A3C  500F               	movf	__tdiv_to_l_@exp1,w,c
  4092  001A3E  A4D8               	btfss	status,2,c
  4093  001A40  D7F7               	goto	l640
  4094  001A42                     u2620:
  4095  001A42  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4096  001A46  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4097  001A4A  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4098  001A4E  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4099  001A52  0012               	return		;funcret
  4100  001A54                     __end_of__tdiv_to_l_:
  4101                           	opt stack 0
  4102                           tblptru	equ	0xFF8
  4103                           tblptrh	equ	0xFF7
  4104                           tblptrl	equ	0xFF6
  4105                           tablat	equ	0xFF5
  4106                           prodh	equ	0xFF4
  4107                           prodl	equ	0xFF3
  4108                           postinc0	equ	0xFEE
  4109                           wreg	equ	0xFE8
  4110                           indf2	equ	0xFDF
  4111                           postinc2	equ	0xFDE
  4112                           postdec2	equ	0xFDD
  4113                           fsr2h	equ	0xFDA
  4114                           fsr2l	equ	0xFD9
  4115                           status	equ	0xFD8
  4116                           
  4117 ;; *************** function __div_to_l_ *****************
  4118 ;; Defined at:
  4119 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fldivl.c"
  4120 ;; Parameters:    Size  Location     Type
  4121 ;;  f1              3    0[COMRAM] unsigned long 
  4122 ;;  f2              3    3[COMRAM] unsigned long 
  4123 ;; Auto vars:     Size  Location     Type
  4124 ;;  quot            4    6[COMRAM] unsigned long 
  4125 ;;  exp1            1   11[COMRAM] unsigned char 
  4126 ;;  cntr            1   10[COMRAM] unsigned char 
  4127 ;; Return value:  Size  Location     Type
  4128 ;;                  4    0[COMRAM] unsigned long 
  4129 ;; Registers used:
  4130 ;;		wreg, status,2, status,0
  4131 ;; Tracked objects:
  4132 ;;		On entry : 0/0
  4133 ;;		On exit  : 0/0
  4134 ;;		Unchanged: 0/0
  4135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4136 ;;      Params:         6       0       0       0       0       0       0       0       0
  4137 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4138 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4139 ;;      Totals:        12       0       0       0       0       0       0       0       0
  4140 ;;Total ram usage:       12 bytes
  4141 ;; Hardware stack levels used:    1
  4142 ;; This function calls:
  4143 ;;		Nothing
  4144 ;; This function is called by:
  4145 ;;		_sprintf
  4146 ;; This function uses a non-reentrant model
  4147 ;;
  4148                           
  4149                           	psect	text10
  4150  001A54                     __ptext10:
  4151                           	opt stack 0
  4152  001A54                     __div_to_l_:
  4153                           	opt stack 29
  4154                           
  4155                           ;incstack = 0
  4156  001A54  3403               	rlcf	__div_to_l_@f1+2,w,c
  4157  001A56  3404               	rlcf	__div_to_l_@f1+3,w,c
  4158  001A58  6E0C               	movwf	__div_to_l_@exp1,c
  4159  001A5A  500C               	movf	__div_to_l_@exp1,w,c
  4160  001A5C  A4D8               	btfss	status,2,c
  4161  001A5E  D009               	goto	l523
  4162  001A60  0E00               	movlw	0
  4163  001A62  6E01               	movwf	?__div_to_l_,c
  4164  001A64  0E00               	movlw	0
  4165  001A66  6E02               	movwf	?__div_to_l_+1,c
  4166  001A68  0E00               	movlw	0
  4167  001A6A  6E03               	movwf	?__div_to_l_+2,c
  4168  001A6C  0E00               	movlw	0
  4169  001A6E  6E04               	movwf	?__div_to_l_+3,c
  4170  001A70  0012               	return	
  4171  001A72                     l523:
  4172  001A72  3406               	rlcf	__div_to_l_@f2+2,w,c
  4173  001A74  3407               	rlcf	__div_to_l_@f2+3,w,c
  4174  001A76  6E0B               	movwf	__div_to_l_@cntr,c
  4175  001A78  500B               	movf	__div_to_l_@cntr,w,c
  4176  001A7A  A4D8               	btfss	status,2,c
  4177  001A7C  D009               	goto	l525
  4178  001A7E  0E00               	movlw	0
  4179  001A80  6E01               	movwf	?__div_to_l_,c
  4180  001A82  0E00               	movlw	0
  4181  001A84  6E02               	movwf	?__div_to_l_+1,c
  4182  001A86  0E00               	movlw	0
  4183  001A88  6E03               	movwf	?__div_to_l_+2,c
  4184  001A8A  0E00               	movlw	0
  4185  001A8C  6E04               	movwf	?__div_to_l_+3,c
  4186  001A8E  0012               	return	
  4187  001A90                     l525:
  4188  001A90  8E03               	bsf	__div_to_l_@f1+2,7,c
  4189  001A92  0EFF               	movlw	255
  4190  001A94  1601               	andwf	__div_to_l_@f1,f,c
  4191  001A96  0EFF               	movlw	255
  4192  001A98  1602               	andwf	__div_to_l_@f1+1,f,c
  4193  001A9A  0EFF               	movlw	255
  4194  001A9C  1603               	andwf	__div_to_l_@f1+2,f,c
  4195  001A9E  0E00               	movlw	0
  4196  001AA0  1604               	andwf	__div_to_l_@f1+3,f,c
  4197  001AA2  8E06               	bsf	__div_to_l_@f2+2,7,c
  4198  001AA4  0EFF               	movlw	255
  4199  001AA6  1604               	andwf	__div_to_l_@f2,f,c
  4200  001AA8  0EFF               	movlw	255
  4201  001AAA  1605               	andwf	__div_to_l_@f2+1,f,c
  4202  001AAC  0EFF               	movlw	255
  4203  001AAE  1606               	andwf	__div_to_l_@f2+2,f,c
  4204  001AB0  0E00               	movlw	0
  4205  001AB2  1607               	andwf	__div_to_l_@f2+3,f,c
  4206  001AB4  0E00               	movlw	0
  4207  001AB6  6E07               	movwf	__div_to_l_@quot,c
  4208  001AB8  0E00               	movlw	0
  4209  001ABA  6E08               	movwf	__div_to_l_@quot+1,c
  4210  001ABC  0E00               	movlw	0
  4211  001ABE  6E09               	movwf	__div_to_l_@quot+2,c
  4212  001AC0  0E00               	movlw	0
  4213  001AC2  6E0A               	movwf	__div_to_l_@quot+3,c
  4214  001AC4  0E7F               	movlw	127
  4215  001AC6  5E0C               	subwf	__div_to_l_@exp1,f,c
  4216  001AC8  500B               	movf	__div_to_l_@cntr,w,c
  4217  001ACA  0FA0               	addlw	160
  4218  001ACC  5E0C               	subwf	__div_to_l_@exp1,f,c
  4219  001ACE  0E20               	movlw	32
  4220  001AD0  6E0B               	movwf	__div_to_l_@cntr,c
  4221  001AD2  90D8               	bcf	status,0,c
  4222  001AD4  3607               	rlcf	__div_to_l_@quot,f,c
  4223  001AD6  3608               	rlcf	__div_to_l_@quot+1,f,c
  4224  001AD8  3609               	rlcf	__div_to_l_@quot+2,f,c
  4225  001ADA  360A               	rlcf	__div_to_l_@quot+3,f,c
  4226  001ADC  5004               	movf	__div_to_l_@f2,w,c
  4227  001ADE  5C01               	subwf	__div_to_l_@f1,w,c
  4228  001AE0  5005               	movf	__div_to_l_@f2+1,w,c
  4229  001AE2  5802               	subwfb	__div_to_l_@f1+1,w,c
  4230  001AE4  5006               	movf	__div_to_l_@f2+2,w,c
  4231  001AE6  5803               	subwfb	__div_to_l_@f1+2,w,c
  4232  001AE8  5007               	movf	__div_to_l_@f2+3,w,c
  4233  001AEA  5804               	subwfb	__div_to_l_@f1+3,w,c
  4234  001AEC  A0D8               	btfss	status,0,c
  4235  001AEE  D009               	goto	l527
  4236  001AF0  5004               	movf	__div_to_l_@f2,w,c
  4237  001AF2  5E01               	subwf	__div_to_l_@f1,f,c
  4238  001AF4  5005               	movf	__div_to_l_@f2+1,w,c
  4239  001AF6  5A02               	subwfb	__div_to_l_@f1+1,f,c
  4240  001AF8  5006               	movf	__div_to_l_@f2+2,w,c
  4241  001AFA  5A03               	subwfb	__div_to_l_@f1+2,f,c
  4242  001AFC  5007               	movf	__div_to_l_@f2+3,w,c
  4243  001AFE  5A04               	subwfb	__div_to_l_@f1+3,f,c
  4244  001B00  8007               	bsf	__div_to_l_@quot,0,c
  4245  001B02                     l527:
  4246  001B02  90D8               	bcf	status,0,c
  4247  001B04  3601               	rlcf	__div_to_l_@f1,f,c
  4248  001B06  3602               	rlcf	__div_to_l_@f1+1,f,c
  4249  001B08  3603               	rlcf	__div_to_l_@f1+2,f,c
  4250  001B0A  3604               	rlcf	__div_to_l_@f1+3,f,c
  4251  001B0C  2E0B               	decfsz	__div_to_l_@cntr,f,c
  4252  001B0E  D7E1               	goto	l526
  4253  001B10  AE0C               	btfss	__div_to_l_@exp1,7,c
  4254  001B12  D016               	goto	l529
  4255  001B14  500C               	movf	__div_to_l_@exp1,w,c
  4256  001B16  0A80               	xorlw	128
  4257  001B18  0F9F               	addlw	159
  4258  001B1A  B0D8               	btfsc	status,0,c
  4259  001B1C  D009               	goto	l530
  4260  001B1E  0E00               	movlw	0
  4261  001B20  6E01               	movwf	?__div_to_l_,c
  4262  001B22  0E00               	movlw	0
  4263  001B24  6E02               	movwf	?__div_to_l_+1,c
  4264  001B26  0E00               	movlw	0
  4265  001B28  6E03               	movwf	?__div_to_l_+2,c
  4266  001B2A  0E00               	movlw	0
  4267  001B2C  6E04               	movwf	?__div_to_l_+3,c
  4268  001B2E  0012               	return	
  4269  001B30                     l530:
  4270  001B30  90D8               	bcf	status,0,c
  4271  001B32  320A               	rrcf	__div_to_l_@quot+3,f,c
  4272  001B34  3209               	rrcf	__div_to_l_@quot+2,f,c
  4273  001B36  3208               	rrcf	__div_to_l_@quot+1,f,c
  4274  001B38  3207               	rrcf	__div_to_l_@quot,f,c
  4275  001B3A  3E0C               	incfsz	__div_to_l_@exp1,f,c
  4276  001B3C  D7F9               	goto	l530
  4277  001B3E  D015               	goto	u2690
  4278  001B40                     l529:
  4279  001B40  0E1F               	movlw	31
  4280  001B42  640C               	cpfsgt	__div_to_l_@exp1,c
  4281  001B44  D00F               	goto	l535
  4282  001B46  0E00               	movlw	0
  4283  001B48  6E01               	movwf	?__div_to_l_,c
  4284  001B4A  0E00               	movlw	0
  4285  001B4C  6E02               	movwf	?__div_to_l_+1,c
  4286  001B4E  0E00               	movlw	0
  4287  001B50  6E03               	movwf	?__div_to_l_+2,c
  4288  001B52  0E00               	movlw	0
  4289  001B54  6E04               	movwf	?__div_to_l_+3,c
  4290  001B56  0012               	return	
  4291  001B58  90D8               	bcf	status,0,c
  4292  001B5A  3607               	rlcf	__div_to_l_@quot,f,c
  4293  001B5C  3608               	rlcf	__div_to_l_@quot+1,f,c
  4294  001B5E  3609               	rlcf	__div_to_l_@quot+2,f,c
  4295  001B60  360A               	rlcf	__div_to_l_@quot+3,f,c
  4296  001B62  060C               	decf	__div_to_l_@exp1,f,c
  4297  001B64                     l535:
  4298  001B64  500C               	movf	__div_to_l_@exp1,w,c
  4299  001B66  A4D8               	btfss	status,2,c
  4300  001B68  D7F7               	goto	l536
  4301  001B6A                     u2690:
  4302  001B6A  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  4303  001B6E  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4304  001B72  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4305  001B76  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4306  001B7A  0012               	return		;funcret
  4307  001B7C                     __end_of__div_to_l_:
  4308                           	opt stack 0
  4309                           tblptru	equ	0xFF8
  4310                           tblptrh	equ	0xFF7
  4311                           tblptrl	equ	0xFF6
  4312                           tablat	equ	0xFF5
  4313                           prodh	equ	0xFF4
  4314                           prodl	equ	0xFF3
  4315                           postinc0	equ	0xFEE
  4316                           wreg	equ	0xFE8
  4317                           indf2	equ	0xFDF
  4318                           postinc2	equ	0xFDE
  4319                           postdec2	equ	0xFDD
  4320                           fsr2h	equ	0xFDA
  4321                           fsr2l	equ	0xFD9
  4322                           status	equ	0xFD8
  4323                           
  4324 ;; *************** function ___lltoft *****************
  4325 ;; Defined at:
  4326 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
  4327 ;; Parameters:    Size  Location     Type
  4328 ;;  c               4    8[COMRAM] unsigned long 
  4329 ;; Auto vars:     Size  Location     Type
  4330 ;;  exp             1   16[COMRAM] unsigned char 
  4331 ;; Return value:  Size  Location     Type
  4332 ;;                  3    8[COMRAM] float 
  4333 ;; Registers used:
  4334 ;;		wreg, status,2, status,0, cstack
  4335 ;; Tracked objects:
  4336 ;;		On entry : 0/0
  4337 ;;		On exit  : 0/0
  4338 ;;		Unchanged: 0/0
  4339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4340 ;;      Params:         4       0       0       0       0       0       0       0       0
  4341 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4342 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4343 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4344 ;;Total ram usage:        9 bytes
  4345 ;; Hardware stack levels used:    1
  4346 ;; Hardware stack levels required when called:    1
  4347 ;; This function calls:
  4348 ;;		___ftpack
  4349 ;; This function is called by:
  4350 ;;		_sprintf
  4351 ;; This function uses a non-reentrant model
  4352 ;;
  4353                           
  4354                           	psect	text11
  4355  0024EA                     __ptext11:
  4356                           	opt stack 0
  4357  0024EA                     ___lltoft:
  4358                           	opt stack 28
  4359                           
  4360                           ;incstack = 0
  4361  0024EA  0E8E               	movlw	142
  4362  0024EC  6E11               	movwf	___lltoft@exp,c
  4363  0024EE  D006               	goto	l734
  4364  0024F0  90D8               	bcf	status,0,c
  4365  0024F2  320C               	rrcf	___lltoft@c+3,f,c
  4366  0024F4  320B               	rrcf	___lltoft@c+2,f,c
  4367  0024F6  320A               	rrcf	___lltoft@c+1,f,c
  4368  0024F8  3209               	rrcf	___lltoft@c,f,c
  4369  0024FA  2A11               	incf	___lltoft@exp,f,c
  4370  0024FC                     l734:
  4371  0024FC  0E00               	movlw	0
  4372  0024FE  1409               	andwf	___lltoft@c,w,c
  4373  002500  6E0D               	movwf	??___lltoft& (0+255),c
  4374  002502  0E00               	movlw	0
  4375  002504  140A               	andwf	___lltoft@c+1,w,c
  4376  002506  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  4377  002508  0E00               	movlw	0
  4378  00250A  140B               	andwf	___lltoft@c+2,w,c
  4379  00250C  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  4380  00250E  0EFF               	movlw	255
  4381  002510  140C               	andwf	___lltoft@c+3,w,c
  4382  002512  6E10               	movwf	(??___lltoft+3)& (0+255),c
  4383  002514  500D               	movf	??___lltoft,w,c
  4384  002516  100E               	iorwf	??___lltoft+1,w,c
  4385  002518  100F               	iorwf	??___lltoft+2,w,c
  4386  00251A  1010               	iorwf	??___lltoft+3,w,c
  4387  00251C  A4D8               	btfss	status,2,c
  4388  00251E  D7E8               	goto	l735
  4389  002520  C009  F001         	movff	___lltoft@c,___ftpack@arg
  4390  002524  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  4391  002528  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  4392  00252C  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  4393  002530  0E00               	movlw	0
  4394  002532  6E05               	movwf	___ftpack@sign,c
  4395  002534  ECF2  F00F         	call	___ftpack	;wreg free
  4396  002538  C001  F009         	movff	?___ftpack,?___lltoft
  4397  00253C  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  4398  002540  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  4399  002544  0012               	return	
  4400  002546                     __end_of___lltoft:
  4401                           	opt stack 0
  4402                           tblptru	equ	0xFF8
  4403                           tblptrh	equ	0xFF7
  4404                           tblptrl	equ	0xFF6
  4405                           tablat	equ	0xFF5
  4406                           prodh	equ	0xFF4
  4407                           prodl	equ	0xFF3
  4408                           postinc0	equ	0xFEE
  4409                           wreg	equ	0xFE8
  4410                           indf2	equ	0xFDF
  4411                           postinc2	equ	0xFDE
  4412                           postdec2	equ	0xFDD
  4413                           fsr2h	equ	0xFDA
  4414                           fsr2l	equ	0xFD9
  4415                           status	equ	0xFD8
  4416                           
  4417 ;; *************** function ___llmod *****************
  4418 ;; Defined at:
  4419 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  4420 ;; Parameters:    Size  Location     Type
  4421 ;;  dividend        4    0[COMRAM] unsigned long 
  4422 ;;  divisor         4    4[COMRAM] unsigned long 
  4423 ;; Auto vars:     Size  Location     Type
  4424 ;;  counter         1    8[COMRAM] unsigned char 
  4425 ;; Return value:  Size  Location     Type
  4426 ;;                  4    0[COMRAM] unsigned long 
  4427 ;; Registers used:
  4428 ;;		wreg, status,2, status,0
  4429 ;; Tracked objects:
  4430 ;;		On entry : 0/0
  4431 ;;		On exit  : 0/0
  4432 ;;		Unchanged: 0/0
  4433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4434 ;;      Params:         8       0       0       0       0       0       0       0       0
  4435 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4436 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4437 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4438 ;;Total ram usage:        9 bytes
  4439 ;; Hardware stack levels used:    1
  4440 ;; This function calls:
  4441 ;;		Nothing
  4442 ;; This function is called by:
  4443 ;;		_sprintf
  4444 ;; This function uses a non-reentrant model
  4445 ;;
  4446                           
  4447                           	psect	text12
  4448  00241E                     __ptext12:
  4449                           	opt stack 0
  4450  00241E                     ___llmod:
  4451                           	opt stack 29
  4452                           
  4453                           ;incstack = 0
  4454  00241E  5005               	movf	___llmod@divisor,w,c
  4455  002420  1006               	iorwf	___llmod@divisor+1,w,c
  4456  002422  1007               	iorwf	___llmod@divisor+2,w,c
  4457  002424  1008               	iorwf	___llmod@divisor+3,w,c
  4458  002426  B4D8               	btfsc	status,2,c
  4459  002428  D024               	goto	l728
  4460  00242A  0E01               	movlw	1
  4461  00242C  6E09               	movwf	___llmod@counter,c
  4462  00242E  D006               	goto	l723
  4463  002430  90D8               	bcf	status,0,c
  4464  002432  3605               	rlcf	___llmod@divisor,f,c
  4465  002434  3606               	rlcf	___llmod@divisor+1,f,c
  4466  002436  3607               	rlcf	___llmod@divisor+2,f,c
  4467  002438  3608               	rlcf	___llmod@divisor+3,f,c
  4468  00243A  2A09               	incf	___llmod@counter,f,c
  4469  00243C                     l723:
  4470  00243C  AE08               	btfss	___llmod@divisor+3,7,c
  4471  00243E  D7F8               	goto	l724
  4472  002440                     u2790:
  4473  002440  5005               	movf	___llmod@divisor,w,c
  4474  002442  5C01               	subwf	___llmod@dividend,w,c
  4475  002444  5006               	movf	___llmod@divisor+1,w,c
  4476  002446  5802               	subwfb	___llmod@dividend+1,w,c
  4477  002448  5007               	movf	___llmod@divisor+2,w,c
  4478  00244A  5803               	subwfb	___llmod@dividend+2,w,c
  4479  00244C  5008               	movf	___llmod@divisor+3,w,c
  4480  00244E  5804               	subwfb	___llmod@dividend+3,w,c
  4481  002450  A0D8               	btfss	status,0,c
  4482  002452  D008               	goto	l727
  4483  002454  5005               	movf	___llmod@divisor,w,c
  4484  002456  5E01               	subwf	___llmod@dividend,f,c
  4485  002458  5006               	movf	___llmod@divisor+1,w,c
  4486  00245A  5A02               	subwfb	___llmod@dividend+1,f,c
  4487  00245C  5007               	movf	___llmod@divisor+2,w,c
  4488  00245E  5A03               	subwfb	___llmod@dividend+2,f,c
  4489  002460  5008               	movf	___llmod@divisor+3,w,c
  4490  002462  5A04               	subwfb	___llmod@dividend+3,f,c
  4491  002464                     l727:
  4492  002464  90D8               	bcf	status,0,c
  4493  002466  3208               	rrcf	___llmod@divisor+3,f,c
  4494  002468  3207               	rrcf	___llmod@divisor+2,f,c
  4495  00246A  3206               	rrcf	___llmod@divisor+1,f,c
  4496  00246C  3205               	rrcf	___llmod@divisor,f,c
  4497  00246E  2E09               	decfsz	___llmod@counter,f,c
  4498  002470  D7E7               	goto	u2790
  4499  002472                     l728:
  4500  002472  C001  F001         	movff	___llmod@dividend,?___llmod
  4501  002476  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  4502  00247A  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  4503  00247E  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  4504  002482  0012               	return		;funcret
  4505  002484                     __end_of___llmod:
  4506                           	opt stack 0
  4507                           tblptru	equ	0xFF8
  4508                           tblptrh	equ	0xFF7
  4509                           tblptrl	equ	0xFF6
  4510                           tablat	equ	0xFF5
  4511                           prodh	equ	0xFF4
  4512                           prodl	equ	0xFF3
  4513                           postinc0	equ	0xFEE
  4514                           wreg	equ	0xFE8
  4515                           indf2	equ	0xFDF
  4516                           postinc2	equ	0xFDE
  4517                           postdec2	equ	0xFDD
  4518                           fsr2h	equ	0xFDA
  4519                           fsr2l	equ	0xFD9
  4520                           status	equ	0xFD8
  4521                           
  4522 ;; *************** function ___lldiv *****************
  4523 ;; Defined at:
  4524 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  4525 ;; Parameters:    Size  Location     Type
  4526 ;;  dividend        4    0[COMRAM] unsigned long 
  4527 ;;  divisor         4    4[COMRAM] unsigned long 
  4528 ;; Auto vars:     Size  Location     Type
  4529 ;;  quotient        4    8[COMRAM] unsigned long 
  4530 ;;  counter         1   12[COMRAM] unsigned char 
  4531 ;; Return value:  Size  Location     Type
  4532 ;;                  4    0[COMRAM] unsigned long 
  4533 ;; Registers used:
  4534 ;;		wreg, status,2, status,0
  4535 ;; Tracked objects:
  4536 ;;		On entry : 0/0
  4537 ;;		On exit  : 0/0
  4538 ;;		Unchanged: 0/0
  4539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4540 ;;      Params:         8       0       0       0       0       0       0       0       0
  4541 ;;      Locals:         5       0       0       0       0       0       0       0       0
  4542 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4543 ;;      Totals:        13       0       0       0       0       0       0       0       0
  4544 ;;Total ram usage:       13 bytes
  4545 ;; Hardware stack levels used:    1
  4546 ;; This function calls:
  4547 ;;		Nothing
  4548 ;; This function is called by:
  4549 ;;		_sprintf
  4550 ;; This function uses a non-reentrant model
  4551 ;;
  4552                           
  4553                           	psect	text13
  4554  002242                     __ptext13:
  4555                           	opt stack 0
  4556  002242                     ___lldiv:
  4557                           	opt stack 29
  4558                           
  4559                           ;incstack = 0
  4560  002242  0E00               	movlw	0
  4561  002244  6E09               	movwf	___lldiv@quotient,c
  4562  002246  0E00               	movlw	0
  4563  002248  6E0A               	movwf	___lldiv@quotient+1,c
  4564  00224A  0E00               	movlw	0
  4565  00224C  6E0B               	movwf	___lldiv@quotient+2,c
  4566  00224E  0E00               	movlw	0
  4567  002250  6E0C               	movwf	___lldiv@quotient+3,c
  4568  002252  5005               	movf	___lldiv@divisor,w,c
  4569  002254  1006               	iorwf	___lldiv@divisor+1,w,c
  4570  002256  1007               	iorwf	___lldiv@divisor+2,w,c
  4571  002258  1008               	iorwf	___lldiv@divisor+3,w,c
  4572  00225A  B4D8               	btfsc	status,2,c
  4573  00225C  D02A               	goto	l718
  4574  00225E  0E01               	movlw	1
  4575  002260  6E0D               	movwf	___lldiv@counter,c
  4576  002262  D006               	goto	l713
  4577  002264  90D8               	bcf	status,0,c
  4578  002266  3605               	rlcf	___lldiv@divisor,f,c
  4579  002268  3606               	rlcf	___lldiv@divisor+1,f,c
  4580  00226A  3607               	rlcf	___lldiv@divisor+2,f,c
  4581  00226C  3608               	rlcf	___lldiv@divisor+3,f,c
  4582  00226E  2A0D               	incf	___lldiv@counter,f,c
  4583  002270                     l713:
  4584  002270  AE08               	btfss	___lldiv@divisor+3,7,c
  4585  002272  D7F8               	goto	l714
  4586  002274                     u2760:
  4587  002274  90D8               	bcf	status,0,c
  4588  002276  3609               	rlcf	___lldiv@quotient,f,c
  4589  002278  360A               	rlcf	___lldiv@quotient+1,f,c
  4590  00227A  360B               	rlcf	___lldiv@quotient+2,f,c
  4591  00227C  360C               	rlcf	___lldiv@quotient+3,f,c
  4592  00227E  5005               	movf	___lldiv@divisor,w,c
  4593  002280  5C01               	subwf	___lldiv@dividend,w,c
  4594  002282  5006               	movf	___lldiv@divisor+1,w,c
  4595  002284  5802               	subwfb	___lldiv@dividend+1,w,c
  4596  002286  5007               	movf	___lldiv@divisor+2,w,c
  4597  002288  5803               	subwfb	___lldiv@dividend+2,w,c
  4598  00228A  5008               	movf	___lldiv@divisor+3,w,c
  4599  00228C  5804               	subwfb	___lldiv@dividend+3,w,c
  4600  00228E  A0D8               	btfss	status,0,c
  4601  002290  D009               	goto	l717
  4602  002292  5005               	movf	___lldiv@divisor,w,c
  4603  002294  5E01               	subwf	___lldiv@dividend,f,c
  4604  002296  5006               	movf	___lldiv@divisor+1,w,c
  4605  002298  5A02               	subwfb	___lldiv@dividend+1,f,c
  4606  00229A  5007               	movf	___lldiv@divisor+2,w,c
  4607  00229C  5A03               	subwfb	___lldiv@dividend+2,f,c
  4608  00229E  5008               	movf	___lldiv@divisor+3,w,c
  4609  0022A0  5A04               	subwfb	___lldiv@dividend+3,f,c
  4610  0022A2  8009               	bsf	___lldiv@quotient,0,c
  4611  0022A4                     l717:
  4612  0022A4  90D8               	bcf	status,0,c
  4613  0022A6  3208               	rrcf	___lldiv@divisor+3,f,c
  4614  0022A8  3207               	rrcf	___lldiv@divisor+2,f,c
  4615  0022AA  3206               	rrcf	___lldiv@divisor+1,f,c
  4616  0022AC  3205               	rrcf	___lldiv@divisor,f,c
  4617  0022AE  2E0D               	decfsz	___lldiv@counter,f,c
  4618  0022B0  D7E1               	goto	u2760
  4619  0022B2                     l718:
  4620  0022B2  C009  F001         	movff	___lldiv@quotient,?___lldiv
  4621  0022B6  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  4622  0022BA  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  4623  0022BE  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  4624  0022C2  0012               	return		;funcret
  4625  0022C4                     __end_of___lldiv:
  4626                           	opt stack 0
  4627                           tblptru	equ	0xFF8
  4628                           tblptrh	equ	0xFF7
  4629                           tblptrl	equ	0xFF6
  4630                           tablat	equ	0xFF5
  4631                           prodh	equ	0xFF4
  4632                           prodl	equ	0xFF3
  4633                           postinc0	equ	0xFEE
  4634                           wreg	equ	0xFE8
  4635                           indf2	equ	0xFDF
  4636                           postinc2	equ	0xFDE
  4637                           postdec2	equ	0xFDD
  4638                           fsr2h	equ	0xFDA
  4639                           fsr2l	equ	0xFD9
  4640                           status	equ	0xFD8
  4641                           
  4642 ;; *************** function ___ftsub *****************
  4643 ;; Defined at:
  4644 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  4645 ;; Parameters:    Size  Location     Type
  4646 ;;  f1              3   57[COMRAM] float 
  4647 ;;  f2              3   60[COMRAM] float 
  4648 ;; Auto vars:     Size  Location     Type
  4649 ;;		None
  4650 ;; Return value:  Size  Location     Type
  4651 ;;                  3   57[COMRAM] float 
  4652 ;; Registers used:
  4653 ;;		wreg, status,2, status,0, cstack
  4654 ;; Tracked objects:
  4655 ;;		On entry : 0/0
  4656 ;;		On exit  : 0/0
  4657 ;;		Unchanged: 0/0
  4658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4659 ;;      Params:         6       0       0       0       0       0       0       0       0
  4660 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4661 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4662 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4663 ;;Total ram usage:        6 bytes
  4664 ;; Hardware stack levels used:    1
  4665 ;; Hardware stack levels required when called:    2
  4666 ;; This function calls:
  4667 ;;		___ftadd
  4668 ;; This function is called by:
  4669 ;;		_sprintf
  4670 ;; This function uses a non-reentrant model
  4671 ;;
  4672                           
  4673                           	psect	text14
  4674  002546                     __ptext14:
  4675                           	opt stack 0
  4676  002546                     ___ftsub:
  4677                           	opt stack 27
  4678                           
  4679                           ;incstack = 0
  4680  002546  503D               	movf	___ftsub@f2,w,c
  4681  002548  103E               	iorwf	___ftsub@f2+1,w,c
  4682  00254A  103F               	iorwf	___ftsub@f2+2,w,c
  4683  00254C  B4D8               	btfsc	status,2,c
  4684  00254E  D006               	goto	l668
  4685  002550  0E00               	movlw	0
  4686  002552  1A3D               	xorwf	___ftsub@f2,f,c
  4687  002554  0E00               	movlw	0
  4688  002556  1A3E               	xorwf	___ftsub@f2+1,f,c
  4689  002558  0E80               	movlw	128
  4690  00255A  1A3F               	xorwf	___ftsub@f2+2,f,c
  4691  00255C                     l668:
  4692  00255C  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  4693  002560  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  4694  002564  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  4695  002568  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  4696  00256C  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  4697  002570  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  4698  002574  ECBB  F00B         	call	___ftadd	;wreg free
  4699  002578  C02E  F03A         	movff	?___ftadd,?___ftsub
  4700  00257C  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  4701  002580  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  4702  002584  0012               	return	
  4703  002586                     __end_of___ftsub:
  4704                           	opt stack 0
  4705                           tblptru	equ	0xFF8
  4706                           tblptrh	equ	0xFF7
  4707                           tblptrl	equ	0xFF6
  4708                           tablat	equ	0xFF5
  4709                           prodh	equ	0xFF4
  4710                           prodl	equ	0xFF3
  4711                           postinc0	equ	0xFEE
  4712                           wreg	equ	0xFE8
  4713                           indf2	equ	0xFDF
  4714                           postinc2	equ	0xFDE
  4715                           postdec2	equ	0xFDD
  4716                           fsr2h	equ	0xFDA
  4717                           fsr2l	equ	0xFD9
  4718                           status	equ	0xFD8
  4719                           
  4720 ;; *************** function ___ftadd *****************
  4721 ;; Defined at:
  4722 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  4723 ;; Parameters:    Size  Location     Type
  4724 ;;  f1              3   45[COMRAM] float 
  4725 ;;  f2              3   48[COMRAM] float 
  4726 ;; Auto vars:     Size  Location     Type
  4727 ;;  exp1            1   56[COMRAM] unsigned char 
  4728 ;;  exp2            1   55[COMRAM] unsigned char 
  4729 ;;  sign            1   54[COMRAM] unsigned char 
  4730 ;; Return value:  Size  Location     Type
  4731 ;;                  3   45[COMRAM] float 
  4732 ;; Registers used:
  4733 ;;		wreg, status,2, status,0, cstack
  4734 ;; Tracked objects:
  4735 ;;		On entry : 0/0
  4736 ;;		On exit  : 0/0
  4737 ;;		Unchanged: 0/0
  4738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4739 ;;      Params:         6       0       0       0       0       0       0       0       0
  4740 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4741 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4742 ;;      Totals:        12       0       0       0       0       0       0       0       0
  4743 ;;Total ram usage:       12 bytes
  4744 ;; Hardware stack levels used:    1
  4745 ;; Hardware stack levels required when called:    1
  4746 ;; This function calls:
  4747 ;;		___ftpack
  4748 ;; This function is called by:
  4749 ;;		_sprintf
  4750 ;;		___ftsub
  4751 ;; This function uses a non-reentrant model
  4752 ;;
  4753                           
  4754                           	psect	text15
  4755  001776                     __ptext15:
  4756                           	opt stack 0
  4757  001776                     ___ftadd:
  4758                           	opt stack 27
  4759                           
  4760                           ;incstack = 0
  4761  001776  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  4762  00177A  6A35               	clrf	(??___ftadd+1)& (0+255),c
  4763  00177C  6A36               	clrf	(??___ftadd+2)& (0+255),c
  4764  00177E  342F               	rlcf	___ftadd@f1+1,w,c
  4765  001780  3634               	rlcf	??___ftadd& (0+255),f,c
  4766  001782  E301               	bnc	u2041
  4767  001784  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  4768  001786                     u2041:
  4769  001786  5034               	movf	??___ftadd,w,c
  4770  001788  6E39               	movwf	___ftadd@exp1,c
  4771  00178A  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  4772  00178E  6A35               	clrf	(??___ftadd+1)& (0+255),c
  4773  001790  6A36               	clrf	(??___ftadd+2)& (0+255),c
  4774  001792  3432               	rlcf	___ftadd@f2+1,w,c
  4775  001794  3634               	rlcf	??___ftadd& (0+255),f,c
  4776  001796  E301               	bnc	u2051
  4777  001798  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  4778  00179A                     u2051:
  4779  00179A  5034               	movf	??___ftadd,w,c
  4780  00179C  6E38               	movwf	___ftadd@exp2,c
  4781  00179E  5039               	movf	___ftadd@exp1,w,c
  4782  0017A0  B4D8               	btfsc	status,2,c
  4783  0017A2  D00B               	goto	u2080
  4784  0017A4  5038               	movf	___ftadd@exp2,w,c
  4785  0017A6  5C39               	subwf	___ftadd@exp1,w,c
  4786  0017A8  B0D8               	btfsc	status,0,c
  4787  0017AA  D00E               	goto	l586
  4788  0017AC  5039               	movf	___ftadd@exp1,w,c
  4789  0017AE  0800               	sublw	0
  4790  0017B0  2438               	addwf	___ftadd@exp2,w,c
  4791  0017B2  6E34               	movwf	??___ftadd& (0+255),c
  4792  0017B4  0E18               	movlw	24
  4793  0017B6  6434               	cpfsgt	??___ftadd,c
  4794  0017B8  D007               	goto	l586
  4795  0017BA                     u2080:
  4796  0017BA  C031  F02E         	movff	___ftadd@f2,?___ftadd
  4797  0017BE  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  4798  0017C2  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  4799  0017C6  0012               	return	
  4800  0017C8                     l586:
  4801  0017C8  5038               	movf	___ftadd@exp2,w,c
  4802  0017CA  B4D8               	btfsc	status,2,c
  4803  0017CC  D00B               	goto	u2110
  4804  0017CE  5039               	movf	___ftadd@exp1,w,c
  4805  0017D0  5C38               	subwf	___ftadd@exp2,w,c
  4806  0017D2  B0D8               	btfsc	status,0,c
  4807  0017D4  D00E               	goto	l590
  4808  0017D6  5038               	movf	___ftadd@exp2,w,c
  4809  0017D8  0800               	sublw	0
  4810  0017DA  2439               	addwf	___ftadd@exp1,w,c
  4811  0017DC  6E34               	movwf	??___ftadd& (0+255),c
  4812  0017DE  0E18               	movlw	24
  4813  0017E0  6434               	cpfsgt	??___ftadd,c
  4814  0017E2  D007               	goto	l590
  4815  0017E4                     u2110:
  4816  0017E4  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  4817  0017E8  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  4818  0017EC  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  4819  0017F0  0012               	return	
  4820  0017F2                     l590:
  4821  0017F2  0E06               	movlw	6
  4822  0017F4  6E37               	movwf	___ftadd@sign,c
  4823  0017F6  BE30               	btfsc	___ftadd@f1+2,7,c
  4824  0017F8  8E37               	bsf	___ftadd@sign,7,c
  4825  0017FA  BE33               	btfsc	___ftadd@f2+2,7,c
  4826  0017FC  8C37               	bsf	___ftadd@sign,6,c
  4827  0017FE  8E2F               	bsf	___ftadd@f1+1,7,c
  4828  001800  0EFF               	movlw	255
  4829  001802  162E               	andwf	___ftadd@f1,f,c
  4830  001804  0EFF               	movlw	255
  4831  001806  162F               	andwf	___ftadd@f1+1,f,c
  4832  001808  0E00               	movlw	0
  4833  00180A  1630               	andwf	___ftadd@f1+2,f,c
  4834  00180C  8E32               	bsf	___ftadd@f2+1,7,c
  4835  00180E  0EFF               	movlw	255
  4836  001810  1631               	andwf	___ftadd@f2,f,c
  4837  001812  0EFF               	movlw	255
  4838  001814  1632               	andwf	___ftadd@f2+1,f,c
  4839  001816  0E00               	movlw	0
  4840  001818  1633               	andwf	___ftadd@f2+2,f,c
  4841  00181A  5038               	movf	___ftadd@exp2,w,c
  4842  00181C  5C39               	subwf	___ftadd@exp1,w,c
  4843  00181E  B0D8               	btfsc	status,0,c
  4844  001820  D01B               	goto	l595
  4845  001822                     u2140:
  4846  001822  90D8               	bcf	status,0,c
  4847  001824  3631               	rlcf	___ftadd@f2,f,c
  4848  001826  3632               	rlcf	___ftadd@f2+1,f,c
  4849  001828  3633               	rlcf	___ftadd@f2+2,f,c
  4850  00182A  0638               	decf	___ftadd@exp2,f,c
  4851  00182C  5039               	movf	___ftadd@exp1,w,c
  4852  00182E  1838               	xorwf	___ftadd@exp2,w,c
  4853  001830  B4D8               	btfsc	status,2,c
  4854  001832  D00D               	goto	l600
  4855  001834  0637               	decf	___ftadd@sign,f,c
  4856  001836  C037  F034         	movff	___ftadd@sign,??___ftadd
  4857  00183A  0E07               	movlw	7
  4858  00183C  1634               	andwf	??___ftadd,f,c
  4859  00183E  B4D8               	btfsc	status,2,c
  4860  001840  D006               	goto	l600
  4861  001842  D7EF               	goto	u2140
  4862  001844  90D8               	bcf	status,0,c
  4863  001846  3230               	rrcf	___ftadd@f1+2,f,c
  4864  001848  322F               	rrcf	___ftadd@f1+1,f,c
  4865  00184A  322E               	rrcf	___ftadd@f1,f,c
  4866  00184C  2A39               	incf	___ftadd@exp1,f,c
  4867  00184E                     l600:
  4868  00184E  5038               	movf	___ftadd@exp2,w,c
  4869  001850  1839               	xorwf	___ftadd@exp1,w,c
  4870  001852  B4D8               	btfsc	status,2,c
  4871  001854  D01F               	goto	u2210
  4872  001856  D7F6               	goto	l601
  4873  001858                     l595:
  4874  001858  5039               	movf	___ftadd@exp1,w,c
  4875  00185A  5C38               	subwf	___ftadd@exp2,w,c
  4876  00185C  B0D8               	btfsc	status,0,c
  4877  00185E  D01A               	goto	u2210
  4878  001860                     u2180:
  4879  001860  90D8               	bcf	status,0,c
  4880  001862  362E               	rlcf	___ftadd@f1,f,c
  4881  001864  362F               	rlcf	___ftadd@f1+1,f,c
  4882  001866  3630               	rlcf	___ftadd@f1+2,f,c
  4883  001868  0639               	decf	___ftadd@exp1,f,c
  4884  00186A  5039               	movf	___ftadd@exp1,w,c
  4885  00186C  1838               	xorwf	___ftadd@exp2,w,c
  4886  00186E  B4D8               	btfsc	status,2,c
  4887  001870  D00D               	goto	l609
  4888  001872  0637               	decf	___ftadd@sign,f,c
  4889  001874  C037  F034         	movff	___ftadd@sign,??___ftadd
  4890  001878  0E07               	movlw	7
  4891  00187A  1634               	andwf	??___ftadd,f,c
  4892  00187C  B4D8               	btfsc	status,2,c
  4893  00187E  D006               	goto	l609
  4894  001880  D7EF               	goto	u2180
  4895  001882  90D8               	bcf	status,0,c
  4896  001884  3233               	rrcf	___ftadd@f2+2,f,c
  4897  001886  3232               	rrcf	___ftadd@f2+1,f,c
  4898  001888  3231               	rrcf	___ftadd@f2,f,c
  4899  00188A  2A38               	incf	___ftadd@exp2,f,c
  4900  00188C                     l609:
  4901  00188C  5038               	movf	___ftadd@exp2,w,c
  4902  00188E  1839               	xorwf	___ftadd@exp1,w,c
  4903  001890  A4D8               	btfss	status,2,c
  4904  001892  D7F7               	goto	l610
  4905  001894                     u2210:
  4906  001894  AE37               	btfss	___ftadd@sign,7,c
  4907  001896  D00C               	goto	l612
  4908  001898  0EFF               	movlw	255
  4909  00189A  1A2E               	xorwf	___ftadd@f1,f,c
  4910  00189C  0EFF               	movlw	255
  4911  00189E  1A2F               	xorwf	___ftadd@f1+1,f,c
  4912  0018A0  0EFF               	movlw	255
  4913  0018A2  1A30               	xorwf	___ftadd@f1+2,f,c
  4914  0018A4  0E01               	movlw	1
  4915  0018A6  262E               	addwf	___ftadd@f1,f,c
  4916  0018A8  0E00               	movlw	0
  4917  0018AA  222F               	addwfc	___ftadd@f1+1,f,c
  4918  0018AC  0E00               	movlw	0
  4919  0018AE  2230               	addwfc	___ftadd@f1+2,f,c
  4920  0018B0                     l612:
  4921  0018B0  AC37               	btfss	___ftadd@sign,6,c
  4922  0018B2  D00C               	goto	l613
  4923  0018B4  0EFF               	movlw	255
  4924  0018B6  1A31               	xorwf	___ftadd@f2,f,c
  4925  0018B8  0EFF               	movlw	255
  4926  0018BA  1A32               	xorwf	___ftadd@f2+1,f,c
  4927  0018BC  0EFF               	movlw	255
  4928  0018BE  1A33               	xorwf	___ftadd@f2+2,f,c
  4929  0018C0  0E01               	movlw	1
  4930  0018C2  2631               	addwf	___ftadd@f2,f,c
  4931  0018C4  0E00               	movlw	0
  4932  0018C6  2232               	addwfc	___ftadd@f2+1,f,c
  4933  0018C8  0E00               	movlw	0
  4934  0018CA  2233               	addwfc	___ftadd@f2+2,f,c
  4935  0018CC                     l613:
  4936  0018CC  0E00               	movlw	0
  4937  0018CE  6E37               	movwf	___ftadd@sign,c
  4938  0018D0  502E               	movf	___ftadd@f1,w,c
  4939  0018D2  2631               	addwf	___ftadd@f2,f,c
  4940  0018D4  502F               	movf	___ftadd@f1+1,w,c
  4941  0018D6  2232               	addwfc	___ftadd@f2+1,f,c
  4942  0018D8  5030               	movf	___ftadd@f1+2,w,c
  4943  0018DA  2233               	addwfc	___ftadd@f2+2,f,c
  4944  0018DC  AE33               	btfss	___ftadd@f2+2,7,c
  4945  0018DE  D00E               	goto	l614
  4946  0018E0  0EFF               	movlw	255
  4947  0018E2  1A31               	xorwf	___ftadd@f2,f,c
  4948  0018E4  0EFF               	movlw	255
  4949  0018E6  1A32               	xorwf	___ftadd@f2+1,f,c
  4950  0018E8  0EFF               	movlw	255
  4951  0018EA  1A33               	xorwf	___ftadd@f2+2,f,c
  4952  0018EC  0E01               	movlw	1
  4953  0018EE  2631               	addwf	___ftadd@f2,f,c
  4954  0018F0  0E00               	movlw	0
  4955  0018F2  2232               	addwfc	___ftadd@f2+1,f,c
  4956  0018F4  0E00               	movlw	0
  4957  0018F6  2233               	addwfc	___ftadd@f2+2,f,c
  4958  0018F8  0E01               	movlw	1
  4959  0018FA  6E37               	movwf	___ftadd@sign,c
  4960  0018FC                     l614:
  4961  0018FC  C031  F001         	movff	___ftadd@f2,___ftpack@arg
  4962  001900  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  4963  001904  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  4964  001908  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
  4965  00190C  C037  F005         	movff	___ftadd@sign,___ftpack@sign
  4966  001910  ECF2  F00F         	call	___ftpack	;wreg free
  4967  001914  C001  F02E         	movff	?___ftpack,?___ftadd
  4968  001918  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  4969  00191C  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  4970  001920  0012               	return	
  4971  001922                     __end_of___ftadd:
  4972                           	opt stack 0
  4973                           tblptru	equ	0xFF8
  4974                           tblptrh	equ	0xFF7
  4975                           tblptrl	equ	0xFF6
  4976                           tablat	equ	0xFF5
  4977                           prodh	equ	0xFF4
  4978                           prodl	equ	0xFF3
  4979                           postinc0	equ	0xFEE
  4980                           wreg	equ	0xFE8
  4981                           indf2	equ	0xFDF
  4982                           postinc2	equ	0xFDE
  4983                           postdec2	equ	0xFDD
  4984                           fsr2h	equ	0xFDA
  4985                           fsr2l	equ	0xFD9
  4986                           status	equ	0xFD8
  4987                           
  4988 ;; *************** function ___ftneg *****************
  4989 ;; Defined at:
  4990 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
  4991 ;; Parameters:    Size  Location     Type
  4992 ;;  f1              3    0[COMRAM] float 
  4993 ;; Auto vars:     Size  Location     Type
  4994 ;;		None
  4995 ;; Return value:  Size  Location     Type
  4996 ;;                  3    0[COMRAM] float 
  4997 ;; Registers used:
  4998 ;;		wreg, status,2, status,0
  4999 ;; Tracked objects:
  5000 ;;		On entry : 0/0
  5001 ;;		On exit  : 0/0
  5002 ;;		Unchanged: 0/0
  5003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5004 ;;      Params:         3       0       0       0       0       0       0       0       0
  5005 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5006 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5007 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5008 ;;Total ram usage:        3 bytes
  5009 ;; Hardware stack levels used:    1
  5010 ;; This function calls:
  5011 ;;		Nothing
  5012 ;; This function is called by:
  5013 ;;		_sprintf
  5014 ;; This function uses a non-reentrant model
  5015 ;;
  5016                           
  5017                           	psect	text16
  5018  00264A                     __ptext16:
  5019                           	opt stack 0
  5020  00264A                     ___ftneg:
  5021                           	opt stack 29
  5022                           
  5023                           ;incstack = 0
  5024  00264A  5001               	movf	___ftneg@f1,w,c
  5025  00264C  1002               	iorwf	___ftneg@f1+1,w,c
  5026  00264E  1003               	iorwf	___ftneg@f1+2,w,c
  5027  002650  B4D8               	btfsc	status,2,c
  5028  002652  D006               	goto	l662
  5029  002654  0E00               	movlw	0
  5030  002656  1A01               	xorwf	___ftneg@f1,f,c
  5031  002658  0E00               	movlw	0
  5032  00265A  1A02               	xorwf	___ftneg@f1+1,f,c
  5033  00265C  0E80               	movlw	128
  5034  00265E  1A03               	xorwf	___ftneg@f1+2,f,c
  5035  002660                     l662:
  5036  002660  C001  F001         	movff	___ftneg@f1,?___ftneg
  5037  002664  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  5038  002668  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  5039  00266C  0012               	return		;funcret
  5040  00266E                     __end_of___ftneg:
  5041                           	opt stack 0
  5042                           tblptru	equ	0xFF8
  5043                           tblptrh	equ	0xFF7
  5044                           tblptrl	equ	0xFF6
  5045                           tablat	equ	0xFF5
  5046                           prodh	equ	0xFF4
  5047                           prodl	equ	0xFF3
  5048                           postinc0	equ	0xFEE
  5049                           wreg	equ	0xFE8
  5050                           indf2	equ	0xFDF
  5051                           postinc2	equ	0xFDE
  5052                           postdec2	equ	0xFDD
  5053                           fsr2h	equ	0xFDA
  5054                           fsr2l	equ	0xFD9
  5055                           status	equ	0xFD8
  5056                           
  5057 ;; *************** function ___ftge *****************
  5058 ;; Defined at:
  5059 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  5060 ;; Parameters:    Size  Location     Type
  5061 ;;  ff1             3    0[COMRAM] float 
  5062 ;;  ff2             3    3[COMRAM] float 
  5063 ;; Auto vars:     Size  Location     Type
  5064 ;;		None
  5065 ;; Return value:  Size  Location     Type
  5066 ;;		None               void
  5067 ;; Registers used:
  5068 ;;		wreg, status,2, status,0
  5069 ;; Tracked objects:
  5070 ;;		On entry : 0/0
  5071 ;;		On exit  : 0/0
  5072 ;;		Unchanged: 0/0
  5073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5074 ;;      Params:         6       0       0       0       0       0       0       0       0
  5075 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5076 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5077 ;;      Totals:         9       0       0       0       0       0       0       0       0
  5078 ;;Total ram usage:        9 bytes
  5079 ;; Hardware stack levels used:    1
  5080 ;; This function calls:
  5081 ;;		Nothing
  5082 ;; This function is called by:
  5083 ;;		_sprintf
  5084 ;; This function uses a non-reentrant model
  5085 ;;
  5086                           
  5087                           	psect	text17
  5088  00212E                     __ptext17:
  5089                           	opt stack 0
  5090  00212E                     ___ftge:
  5091                           	opt stack 29
  5092                           
  5093                           ;incstack = 0
  5094  00212E  AE03               	btfss	___ftge@ff1+2,7,c
  5095  002130  D016               	goto	l644
  5096  002132  C001  F007         	movff	___ftge@ff1,??___ftge
  5097  002136  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  5098  00213A  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  5099  00213E  1E07               	comf	??___ftge,f,c
  5100  002140  1E08               	comf	??___ftge+1,f,c
  5101  002142  1E09               	comf	??___ftge+2,f,c
  5102  002144  2A07               	incf	??___ftge,f,c
  5103  002146  0E00               	movlw	0
  5104  002148  2208               	addwfc	??___ftge+1,f,c
  5105  00214A  2209               	addwfc	??___ftge+2,f,c
  5106  00214C  0E00               	movlw	0
  5107  00214E  2407               	addwf	??___ftge,w,c
  5108  002150  6E01               	movwf	___ftge@ff1,c
  5109  002152  0E00               	movlw	0
  5110  002154  2008               	addwfc	??___ftge+1,w,c
  5111  002156  6E02               	movwf	___ftge@ff1+1,c
  5112  002158  0E80               	movlw	128
  5113  00215A  2009               	addwfc	??___ftge+2,w,c
  5114  00215C  6E03               	movwf	___ftge@ff1+2,c
  5115  00215E                     l644:
  5116  00215E  AE06               	btfss	___ftge@ff2+2,7,c
  5117  002160  D016               	goto	l645
  5118  002162  C004  F007         	movff	___ftge@ff2,??___ftge
  5119  002166  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  5120  00216A  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  5121  00216E  1E07               	comf	??___ftge,f,c
  5122  002170  1E08               	comf	??___ftge+1,f,c
  5123  002172  1E09               	comf	??___ftge+2,f,c
  5124  002174  2A07               	incf	??___ftge,f,c
  5125  002176  0E00               	movlw	0
  5126  002178  2208               	addwfc	??___ftge+1,f,c
  5127  00217A  2209               	addwfc	??___ftge+2,f,c
  5128  00217C  0E00               	movlw	0
  5129  00217E  2407               	addwf	??___ftge,w,c
  5130  002180  6E04               	movwf	___ftge@ff2,c
  5131  002182  0E00               	movlw	0
  5132  002184  2008               	addwfc	??___ftge+1,w,c
  5133  002186  6E05               	movwf	___ftge@ff2+1,c
  5134  002188  0E80               	movlw	128
  5135  00218A  2009               	addwfc	??___ftge+2,w,c
  5136  00218C  6E06               	movwf	___ftge@ff2+2,c
  5137  00218E                     l645:
  5138  00218E  0E00               	movlw	0
  5139  002190  1A01               	xorwf	___ftge@ff1,f,c
  5140  002192  0E00               	movlw	0
  5141  002194  1A02               	xorwf	___ftge@ff1+1,f,c
  5142  002196  0E80               	movlw	128
  5143  002198  1A03               	xorwf	___ftge@ff1+2,f,c
  5144  00219A  0E00               	movlw	0
  5145  00219C  1A04               	xorwf	___ftge@ff2,f,c
  5146  00219E  0E00               	movlw	0
  5147  0021A0  1A05               	xorwf	___ftge@ff2+1,f,c
  5148  0021A2  0E80               	movlw	128
  5149  0021A4  1A06               	xorwf	___ftge@ff2+2,f,c
  5150  0021A6  5004               	movf	___ftge@ff2,w,c
  5151  0021A8  5C01               	subwf	___ftge@ff1,w,c
  5152  0021AA  5005               	movf	___ftge@ff2+1,w,c
  5153  0021AC  5802               	subwfb	___ftge@ff1+1,w,c
  5154  0021AE  5006               	movf	___ftge@ff2+2,w,c
  5155  0021B0  5803               	subwfb	___ftge@ff1+2,w,c
  5156  0021B2  B0D8               	btfsc	status,0,c
  5157  0021B4  D002               	goto	l2162
  5158  0021B6  90D8               	bcf	status,0,c
  5159  0021B8  0012               	return	
  5160  0021BA                     l2162:
  5161  0021BA  80D8               	bsf	status,0,c
  5162  0021BC  0012               	return	
  5163  0021BE                     __end_of___ftge:
  5164                           	opt stack 0
  5165                           tblptru	equ	0xFF8
  5166                           tblptrh	equ	0xFF7
  5167                           tblptrl	equ	0xFF6
  5168                           tablat	equ	0xFF5
  5169                           prodh	equ	0xFF4
  5170                           prodl	equ	0xFF3
  5171                           postinc0	equ	0xFEE
  5172                           wreg	equ	0xFE8
  5173                           indf2	equ	0xFDF
  5174                           postinc2	equ	0xFDE
  5175                           postdec2	equ	0xFDD
  5176                           fsr2h	equ	0xFDA
  5177                           fsr2l	equ	0xFD9
  5178                           status	equ	0xFD8
  5179                           
  5180 ;; *************** function _lcd_texto *****************
  5181 ;; Defined at:
  5182 ;;		line 296 in file "lcd.c"
  5183 ;; Parameters:    Size  Location     Type
  5184 ;;  cadena          2   74[COMRAM] PTR unsigned char 
  5185 ;;		 -> str(24), 
  5186 ;; Auto vars:     Size  Location     Type
  5187 ;;		None
  5188 ;; Return value:  Size  Location     Type
  5189 ;;                  1    wreg      void 
  5190 ;; Registers used:
  5191 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5192 ;; Tracked objects:
  5193 ;;		On entry : 0/0
  5194 ;;		On exit  : 0/0
  5195 ;;		Unchanged: 0/0
  5196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5197 ;;      Params:         2       0       0       0       0       0       0       0       0
  5198 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5199 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5200 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5201 ;;Total ram usage:        3 bytes
  5202 ;; Hardware stack levels used:    1
  5203 ;; Hardware stack levels required when called:    5
  5204 ;; This function calls:
  5205 ;;		_lcd_caracter
  5206 ;; This function is called by:
  5207 ;;		_main
  5208 ;; This function uses a non-reentrant model
  5209 ;;
  5210                           
  5211                           	psect	text18
  5212  0025F8                     __ptext18:
  5213                           	opt stack 0
  5214  0025F8                     _lcd_texto:
  5215                           	opt stack 25
  5216                           
  5217                           ;lcd.c: 297: while(*cadena != 0x00){
  5218                           
  5219                           ;incstack = 0
  5220  0025F8  D00D               	goto	l173
  5221  0025FA                     
  5222                           ;lcd.c: 298: lcd_caracter(*cadena);
  5223  0025FA  C04B  FFD9         	movff	lcd_texto@cadena,fsr2l
  5224  0025FE  C04C  FFDA         	movff	lcd_texto@cadena+1,fsr2h
  5225  002602  50DF               	movf	indf2,w,c
  5226  002604  6E4D               	movwf	??_lcd_texto& (0+255),c
  5227  002606  504D               	movf	??_lcd_texto,w,c
  5228  002608  6E44               	movwf	lcd_caracter@caracter,c
  5229  00260A  6A45               	clrf	lcd_caracter@caracter+1,c
  5230  00260C  ECDB  F011         	call	_lcd_caracter	;wreg free
  5231                           
  5232                           ;lcd.c: 299: cadena++;
  5233  002610  4A4B               	infsnz	lcd_texto@cadena,f,c
  5234  002612  2A4C               	incf	lcd_texto@cadena+1,f,c
  5235  002614                     l173:
  5236  002614  C04B  FFD9         	movff	lcd_texto@cadena,fsr2l
  5237  002618  C04C  FFDA         	movff	lcd_texto@cadena+1,fsr2h
  5238  00261C  50DF               	movf	indf2,w,c
  5239  00261E  B4D8               	btfsc	status,2,c
  5240  002620  0012               	return	
  5241  002622  D7EB               	goto	l174
  5242  002624                     __end_of_lcd_texto:
  5243                           	opt stack 0
  5244                           tblptru	equ	0xFF8
  5245                           tblptrh	equ	0xFF7
  5246                           tblptrl	equ	0xFF6
  5247                           tablat	equ	0xFF5
  5248                           prodh	equ	0xFF4
  5249                           prodl	equ	0xFF3
  5250                           postinc0	equ	0xFEE
  5251                           wreg	equ	0xFE8
  5252                           indf2	equ	0xFDF
  5253                           postinc2	equ	0xFDE
  5254                           postdec2	equ	0xFDD
  5255                           fsr2h	equ	0xFDA
  5256                           fsr2l	equ	0xFD9
  5257                           status	equ	0xFD8
  5258                           
  5259 ;; *************** function _lcd_caracter *****************
  5260 ;; Defined at:
  5261 ;;		line 286 in file "lcd.c"
  5262 ;; Parameters:    Size  Location     Type
  5263 ;;  caracter        2   67[COMRAM] unsigned int 
  5264 ;; Auto vars:     Size  Location     Type
  5265 ;;		None
  5266 ;; Return value:  Size  Location     Type
  5267 ;;                  1    wreg      void 
  5268 ;; Registers used:
  5269 ;;		wreg, status,2, status,0, cstack
  5270 ;; Tracked objects:
  5271 ;;		On entry : 0/0
  5272 ;;		On exit  : 0/0
  5273 ;;		Unchanged: 0/0
  5274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5275 ;;      Params:         2       0       0       0       0       0       0       0       0
  5276 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5277 ;;      Temps:          5       0       0       0       0       0       0       0       0
  5278 ;;      Totals:         7       0       0       0       0       0       0       0       0
  5279 ;;Total ram usage:        7 bytes
  5280 ;; Hardware stack levels used:    1
  5281 ;; Hardware stack levels required when called:    4
  5282 ;; This function calls:
  5283 ;;		_lcd_pulso
  5284 ;; This function is called by:
  5285 ;;		_lcd_texto
  5286 ;; This function uses a non-reentrant model
  5287 ;;
  5288                           
  5289                           	psect	text19
  5290  0023B6                     __ptext19:
  5291                           	opt stack 0
  5292  0023B6                     _lcd_caracter:
  5293                           	opt stack 25
  5294                           
  5295                           ;lcd.c: 287: PORTDbits.RD1=1;
  5296                           
  5297                           ;incstack = 0
  5298  0023B6  8283               	bsf	3971,1,c	;volatile
  5299                           
  5300                           ;lcd.c: 289: PORTD=(((((PORTD>>4&0x0f)|0x0f)&(caracter>>4&0x0f))<<4)|(PORTD&0x0f));
  5301  0023B8  CF83 F046          	movff	3971,??_lcd_caracter	;volatile
  5302  0023BC  0E0F               	movlw	15
  5303  0023BE  1646               	andwf	??_lcd_caracter,f,c
  5304  0023C0  C044  F047         	movff	lcd_caracter@caracter,??_lcd_caracter+1
  5305  0023C4  C045  F048         	movff	lcd_caracter@caracter+1,??_lcd_caracter+2
  5306  0023C8  0E04               	movlw	4
  5307  0023CA  6E49               	movwf	(??_lcd_caracter+3)& (0+255),c
  5308  0023CC                     u2445:
  5309  0023CC  90D8               	bcf	status,0,c
  5310  0023CE  3248               	rrcf	??_lcd_caracter+2,f,c
  5311  0023D0  3247               	rrcf	??_lcd_caracter+1,f,c
  5312  0023D2  2E49               	decfsz	(??_lcd_caracter+3)& (0+255),f,c
  5313  0023D4  D7FB               	goto	u2445
  5314  0023D6  0E0F               	movlw	15
  5315  0023D8  1647               	andwf	??_lcd_caracter+1,f,c
  5316  0023DA  3883               	swapf	3971,w,c	;volatile
  5317  0023DC  0B0F               	andlw	15
  5318  0023DE  0B0F               	andlw	15
  5319  0023E0  090F               	iorlw	15
  5320  0023E2  1447               	andwf	??_lcd_caracter+1,w,c
  5321  0023E4  6E4A               	movwf	(??_lcd_caracter+4)& (0+255),c
  5322  0023E6  384A               	swapf	??_lcd_caracter+4,w,c
  5323  0023E8  0BF0               	andlw	240
  5324  0023EA  1046               	iorwf	??_lcd_caracter,w,c
  5325  0023EC  6E83               	movwf	3971,c	;volatile
  5326                           
  5327                           ;lcd.c: 290: lcd_pulso();
  5328  0023EE  EC46  F013         	call	_lcd_pulso	;wreg free
  5329                           
  5330                           ;lcd.c: 291: PORTD=(((((PORTD>>4&0x0f)|0x0f)&(caracter&0x0f))<<4)|(PORTD&0x0f));
  5331  0023F2  CF83 F046          	movff	3971,??_lcd_caracter	;volatile
  5332  0023F6  0E0F               	movlw	15
  5333  0023F8  1646               	andwf	??_lcd_caracter,f,c
  5334  0023FA  C044  F047         	movff	lcd_caracter@caracter,??_lcd_caracter+1
  5335  0023FE  0E0F               	movlw	15
  5336  002400  1647               	andwf	??_lcd_caracter+1,f,c
  5337  002402  3883               	swapf	3971,w,c	;volatile
  5338  002404  0B0F               	andlw	15
  5339  002406  0B0F               	andlw	15
  5340  002408  090F               	iorlw	15
  5341  00240A  1447               	andwf	??_lcd_caracter+1,w,c
  5342  00240C  6E48               	movwf	(??_lcd_caracter+2)& (0+255),c
  5343  00240E  3848               	swapf	??_lcd_caracter+2,w,c
  5344  002410  0BF0               	andlw	240
  5345  002412  1046               	iorwf	??_lcd_caracter,w,c
  5346  002414  6E83               	movwf	3971,c	;volatile
  5347                           
  5348                           ;lcd.c: 292: lcd_pulso();
  5349  002416  EC46  F013         	call	_lcd_pulso	;wreg free
  5350                           
  5351                           ;lcd.c: 293: PORTDbits.RD1=0;
  5352  00241A  9283               	bcf	3971,1,c	;volatile
  5353  00241C  0012               	return		;funcret
  5354  00241E                     __end_of_lcd_caracter:
  5355                           	opt stack 0
  5356                           tblptru	equ	0xFF8
  5357                           tblptrh	equ	0xFF7
  5358                           tblptrl	equ	0xFF6
  5359                           tablat	equ	0xFF5
  5360                           prodh	equ	0xFF4
  5361                           prodl	equ	0xFF3
  5362                           postinc0	equ	0xFEE
  5363                           wreg	equ	0xFE8
  5364                           indf2	equ	0xFDF
  5365                           postinc2	equ	0xFDE
  5366                           postdec2	equ	0xFDD
  5367                           fsr2h	equ	0xFDA
  5368                           fsr2l	equ	0xFD9
  5369                           status	equ	0xFD8
  5370                           
  5371 ;; *************** function _lcd_origen *****************
  5372 ;; Defined at:
  5373 ;;		line 308 in file "lcd.c"
  5374 ;; Parameters:    Size  Location     Type
  5375 ;;		None
  5376 ;; Auto vars:     Size  Location     Type
  5377 ;;		None
  5378 ;; Return value:  Size  Location     Type
  5379 ;;                  1    wreg      void 
  5380 ;; Registers used:
  5381 ;;		wreg, status,2, status,0, cstack
  5382 ;; Tracked objects:
  5383 ;;		On entry : 0/0
  5384 ;;		On exit  : 0/0
  5385 ;;		Unchanged: 0/0
  5386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5387 ;;      Params:         0       0       0       0       0       0       0       0       0
  5388 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5389 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5390 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5391 ;;Total ram usage:        0 bytes
  5392 ;; Hardware stack levels used:    1
  5393 ;; Hardware stack levels required when called:    5
  5394 ;; This function calls:
  5395 ;;		_lcd_orden
  5396 ;;		_wait_in_ms
  5397 ;; This function is called by:
  5398 ;;		_main
  5399 ;;		_lcd_ubicarXY
  5400 ;; This function uses a non-reentrant model
  5401 ;;
  5402                           
  5403                           	psect	text20
  5404  0026AA                     __ptext20:
  5405                           	opt stack 0
  5406  0026AA                     _lcd_origen:
  5407                           	opt stack 25
  5408                           
  5409                           ;lcd.c: 309: lcd_orden(0x02);
  5410                           
  5411                           ;incstack = 0
  5412  0026AA  0E00               	movlw	0
  5413  0026AC  6E45               	movwf	lcd_orden@orden+1,c
  5414  0026AE  0E02               	movlw	2
  5415  0026B0  6E44               	movwf	lcd_orden@orden,c
  5416  0026B2  EC42  F012         	call	_lcd_orden	;wreg free
  5417                           
  5418                           ;lcd.c: 310: wait_in_ms(4);
  5419  0026B6  0E00               	movlw	0
  5420  0026B8  6E3B               	movwf	wait_in_ms@time_in_ms+1,c
  5421  0026BA  0E04               	movlw	4
  5422  0026BC  6E3A               	movwf	wait_in_ms@time_in_ms,c
  5423  0026BE  EC8C  F00F         	call	_wait_in_ms	;wreg free
  5424  0026C2  0012               	return		;funcret
  5425  0026C4                     __end_of_lcd_origen:
  5426                           	opt stack 0
  5427                           tblptru	equ	0xFF8
  5428                           tblptrh	equ	0xFF7
  5429                           tblptrl	equ	0xFF6
  5430                           tablat	equ	0xFF5
  5431                           prodh	equ	0xFF4
  5432                           prodl	equ	0xFF3
  5433                           postinc0	equ	0xFEE
  5434                           wreg	equ	0xFE8
  5435                           indf2	equ	0xFDF
  5436                           postinc2	equ	0xFDE
  5437                           postdec2	equ	0xFDD
  5438                           fsr2h	equ	0xFDA
  5439                           fsr2l	equ	0xFD9
  5440                           status	equ	0xFD8
  5441                           
  5442 ;; *************** function _lcd_iniciar *****************
  5443 ;; Defined at:
  5444 ;;		line 224 in file "lcd.c"
  5445 ;; Parameters:    Size  Location     Type
  5446 ;;		None
  5447 ;; Auto vars:     Size  Location     Type
  5448 ;;		None
  5449 ;; Return value:  Size  Location     Type
  5450 ;;                  1    wreg      void 
  5451 ;; Registers used:
  5452 ;;		wreg, status,2, status,0, cstack
  5453 ;; Tracked objects:
  5454 ;;		On entry : 0/0
  5455 ;;		On exit  : 0/0
  5456 ;;		Unchanged: 0/0
  5457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5458 ;;      Params:         0       0       0       0       0       0       0       0       0
  5459 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5460 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5461 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5462 ;;Total ram usage:        0 bytes
  5463 ;; Hardware stack levels used:    1
  5464 ;; Hardware stack levels required when called:    5
  5465 ;; This function calls:
  5466 ;;		_lcd_orden
  5467 ;;		_lcd_pulso
  5468 ;;		_wait_in_ms
  5469 ;; This function is called by:
  5470 ;;		_main
  5471 ;; This function uses a non-reentrant model
  5472 ;;
  5473                           
  5474                           	psect	text21
  5475  001E4A                     __ptext21:
  5476                           	opt stack 0
  5477  001E4A                     _lcd_iniciar:
  5478                           	opt stack 25
  5479                           
  5480                           ;lcd.c: 225: TRISDbits.TRISD1=0;
  5481                           
  5482                           ;incstack = 0
  5483  001E4A  9295               	bcf	3989,1,c	;volatile
  5484                           
  5485                           ;lcd.c: 226: TRISDbits.TRISD2=0;
  5486  001E4C  9495               	bcf	3989,2,c	;volatile
  5487                           
  5488                           ;lcd.c: 227: TRISDbits.TRISD3=0;
  5489  001E4E  9695               	bcf	3989,3,c	;volatile
  5490                           
  5491                           ;lcd.c: 228: TRISDbits.TRISD4=0;
  5492  001E50  9895               	bcf	3989,4,c	;volatile
  5493                           
  5494                           ;lcd.c: 229: TRISDbits.TRISD5=0;
  5495  001E52  9A95               	bcf	3989,5,c	;volatile
  5496                           
  5497                           ;lcd.c: 230: TRISDbits.TRISD6=0;
  5498  001E54  9C95               	bcf	3989,6,c	;volatile
  5499                           
  5500                           ;lcd.c: 231: TRISDbits.TRISD7=0;
  5501  001E56  9E95               	bcf	3989,7,c	;volatile
  5502                           
  5503                           ;lcd.c: 233: PORTDbits.RD1=0;
  5504  001E58  9283               	bcf	3971,1,c	;volatile
  5505                           
  5506                           ;lcd.c: 234: PORTDbits.RD2=0;
  5507  001E5A  9483               	bcf	3971,2,c	;volatile
  5508                           
  5509                           ;lcd.c: 235: PORTDbits.RD3=0;
  5510  001E5C  9683               	bcf	3971,3,c	;volatile
  5511                           
  5512                           ;lcd.c: 236: PORTDbits.RD4=0;
  5513  001E5E  9883               	bcf	3971,4,c	;volatile
  5514                           
  5515                           ;lcd.c: 237: PORTDbits.RD5=0;
  5516  001E60  9A83               	bcf	3971,5,c	;volatile
  5517                           
  5518                           ;lcd.c: 238: PORTDbits.RD6=0;
  5519  001E62  9C83               	bcf	3971,6,c	;volatile
  5520                           
  5521                           ;lcd.c: 239: PORTDbits.RD7=0;
  5522  001E64  9E83               	bcf	3971,7,c	;volatile
  5523                           
  5524                           ;lcd.c: 241: wait_in_ms(20);
  5525  001E66  0E00               	movlw	0
  5526  001E68  6E3B               	movwf	wait_in_ms@time_in_ms+1,c
  5527  001E6A  0E14               	movlw	20
  5528  001E6C  6E3A               	movwf	wait_in_ms@time_in_ms,c
  5529  001E6E  EC8C  F00F         	call	_wait_in_ms	;wreg free
  5530                           
  5531                           ;lcd.c: 242: PORTD=0X03<<4;
  5532  001E72  0E30               	movlw	48
  5533  001E74  6E83               	movwf	3971,c	;volatile
  5534                           
  5535                           ;lcd.c: 243: lcd_pulso();
  5536  001E76  EC46  F013         	call	_lcd_pulso	;wreg free
  5537                           
  5538                           ;lcd.c: 244: wait_in_ms(4);
  5539  001E7A  0E00               	movlw	0
  5540  001E7C  6E3B               	movwf	wait_in_ms@time_in_ms+1,c
  5541  001E7E  0E04               	movlw	4
  5542  001E80  6E3A               	movwf	wait_in_ms@time_in_ms,c
  5543  001E82  EC8C  F00F         	call	_wait_in_ms	;wreg free
  5544                           
  5545                           ;lcd.c: 246: PORTD=0X03<<4;
  5546  001E86  0E30               	movlw	48
  5547  001E88  6E83               	movwf	3971,c	;volatile
  5548                           
  5549                           ;lcd.c: 247: lcd_pulso();
  5550  001E8A  EC46  F013         	call	_lcd_pulso	;wreg free
  5551                           
  5552                           ;lcd.c: 248: wait_in_ms(4);
  5553  001E8E  0E00               	movlw	0
  5554  001E90  6E3B               	movwf	wait_in_ms@time_in_ms+1,c
  5555  001E92  0E04               	movlw	4
  5556  001E94  6E3A               	movwf	wait_in_ms@time_in_ms,c
  5557  001E96  EC8C  F00F         	call	_wait_in_ms	;wreg free
  5558                           
  5559                           ;lcd.c: 250: PORTD=0X03<<4;
  5560  001E9A  0E30               	movlw	48
  5561  001E9C  6E83               	movwf	3971,c	;volatile
  5562                           
  5563                           ;lcd.c: 251: lcd_pulso();
  5564  001E9E  EC46  F013         	call	_lcd_pulso	;wreg free
  5565                           
  5566                           ;lcd.c: 252: wait_in_ms(1);
  5567  001EA2  0E00               	movlw	0
  5568  001EA4  6E3B               	movwf	wait_in_ms@time_in_ms+1,c
  5569  001EA6  0E01               	movlw	1
  5570  001EA8  6E3A               	movwf	wait_in_ms@time_in_ms,c
  5571  001EAA  EC8C  F00F         	call	_wait_in_ms	;wreg free
  5572                           
  5573                           ;lcd.c: 254: PORTD=0X02<<4;
  5574  001EAE  0E20               	movlw	32
  5575  001EB0  6E83               	movwf	3971,c	;volatile
  5576                           
  5577                           ;lcd.c: 255: lcd_pulso();
  5578  001EB2  EC46  F013         	call	_lcd_pulso	;wreg free
  5579                           
  5580                           ;lcd.c: 257: lcd_orden(0x28);
  5581  001EB6  0E00               	movlw	0
  5582  001EB8  6E45               	movwf	lcd_orden@orden+1,c
  5583  001EBA  0E28               	movlw	40
  5584  001EBC  6E44               	movwf	lcd_orden@orden,c
  5585  001EBE  EC42  F012         	call	_lcd_orden	;wreg free
  5586                           
  5587                           ;lcd.c: 258: wait_in_ms(8);
  5588  001EC2  0E00               	movlw	0
  5589  001EC4  6E3B               	movwf	wait_in_ms@time_in_ms+1,c
  5590  001EC6  0E08               	movlw	8
  5591  001EC8  6E3A               	movwf	wait_in_ms@time_in_ms,c
  5592  001ECA  EC8C  F00F         	call	_wait_in_ms	;wreg free
  5593                           
  5594                           ;lcd.c: 260: lcd_orden(0x0c);
  5595  001ECE  0E00               	movlw	0
  5596  001ED0  6E45               	movwf	lcd_orden@orden+1,c
  5597  001ED2  0E0C               	movlw	12
  5598  001ED4  6E44               	movwf	lcd_orden@orden,c
  5599  001ED6  EC42  F012         	call	_lcd_orden	;wreg free
  5600                           
  5601                           ;lcd.c: 261: wait_in_ms(8);
  5602  001EDA  0E00               	movlw	0
  5603  001EDC  6E3B               	movwf	wait_in_ms@time_in_ms+1,c
  5604  001EDE  0E08               	movlw	8
  5605  001EE0  6E3A               	movwf	wait_in_ms@time_in_ms,c
  5606  001EE2  EC8C  F00F         	call	_wait_in_ms	;wreg free
  5607                           
  5608                           ;lcd.c: 263: lcd_orden(0x01);
  5609  001EE6  0E00               	movlw	0
  5610  001EE8  6E45               	movwf	lcd_orden@orden+1,c
  5611  001EEA  0E01               	movlw	1
  5612  001EEC  6E44               	movwf	lcd_orden@orden,c
  5613  001EEE  EC42  F012         	call	_lcd_orden	;wreg free
  5614                           
  5615                           ;lcd.c: 264: wait_in_ms(2);
  5616  001EF2  0E00               	movlw	0
  5617  001EF4  6E3B               	movwf	wait_in_ms@time_in_ms+1,c
  5618  001EF6  0E02               	movlw	2
  5619  001EF8  6E3A               	movwf	wait_in_ms@time_in_ms,c
  5620  001EFA  EC8C  F00F         	call	_wait_in_ms	;wreg free
  5621                           
  5622                           ;lcd.c: 266: lcd_orden(0x06);
  5623  001EFE  0E00               	movlw	0
  5624  001F00  6E45               	movwf	lcd_orden@orden+1,c
  5625  001F02  0E06               	movlw	6
  5626  001F04  6E44               	movwf	lcd_orden@orden,c
  5627  001F06  EC42  F012         	call	_lcd_orden	;wreg free
  5628                           
  5629                           ;lcd.c: 267: wait_in_ms(8);
  5630  001F0A  0E00               	movlw	0
  5631  001F0C  6E3B               	movwf	wait_in_ms@time_in_ms+1,c
  5632  001F0E  0E08               	movlw	8
  5633  001F10  6E3A               	movwf	wait_in_ms@time_in_ms,c
  5634  001F12  EC8C  F00F         	call	_wait_in_ms	;wreg free
  5635  001F16  0012               	return		;funcret
  5636  001F18                     __end_of_lcd_iniciar:
  5637                           	opt stack 0
  5638                           tblptru	equ	0xFF8
  5639                           tblptrh	equ	0xFF7
  5640                           tblptrl	equ	0xFF6
  5641                           tablat	equ	0xFF5
  5642                           prodh	equ	0xFF4
  5643                           prodl	equ	0xFF3
  5644                           postinc0	equ	0xFEE
  5645                           wreg	equ	0xFE8
  5646                           indf2	equ	0xFDF
  5647                           postinc2	equ	0xFDE
  5648                           postdec2	equ	0xFDD
  5649                           fsr2h	equ	0xFDA
  5650                           fsr2l	equ	0xFD9
  5651                           status	equ	0xFD8
  5652                           
  5653 ;; *************** function _lcd_orden *****************
  5654 ;; Defined at:
  5655 ;;		line 277 in file "lcd.c"
  5656 ;; Parameters:    Size  Location     Type
  5657 ;;  orden           2   67[COMRAM] unsigned int 
  5658 ;; Auto vars:     Size  Location     Type
  5659 ;;		None
  5660 ;; Return value:  Size  Location     Type
  5661 ;;                  1    wreg      void 
  5662 ;; Registers used:
  5663 ;;		wreg, status,2, status,0, cstack
  5664 ;; Tracked objects:
  5665 ;;		On entry : 0/0
  5666 ;;		On exit  : 0/0
  5667 ;;		Unchanged: 0/0
  5668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5669 ;;      Params:         2       0       0       0       0       0       0       0       0
  5670 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5671 ;;      Temps:          5       0       0       0       0       0       0       0       0
  5672 ;;      Totals:         7       0       0       0       0       0       0       0       0
  5673 ;;Total ram usage:        7 bytes
  5674 ;; Hardware stack levels used:    1
  5675 ;; Hardware stack levels required when called:    4
  5676 ;; This function calls:
  5677 ;;		_lcd_pulso
  5678 ;; This function is called by:
  5679 ;;		_lcd_iniciar
  5680 ;;		_lcd_origen
  5681 ;;		_lcd_limpiar
  5682 ;;		_lcd_ubicarXY
  5683 ;; This function uses a non-reentrant model
  5684 ;;
  5685                           
  5686                           	psect	text22
  5687  002484                     __ptext22:
  5688                           	opt stack 0
  5689  002484                     _lcd_orden:
  5690                           	opt stack 25
  5691                           
  5692                           ;lcd.c: 278: PORTDbits.RD1=0;
  5693                           
  5694                           ;incstack = 0
  5695  002484  9283               	bcf	3971,1,c	;volatile
  5696                           
  5697                           ;lcd.c: 280: PORTD=(((((PORTD>>4&0x0f)|0x0f)&(orden>>4&0x0f))<<4)|(PORTD&0x0f));
  5698  002486  CF83 F046          	movff	3971,??_lcd_orden	;volatile
  5699  00248A  0E0F               	movlw	15
  5700  00248C  1646               	andwf	??_lcd_orden,f,c
  5701  00248E  C044  F047         	movff	lcd_orden@orden,??_lcd_orden+1
  5702  002492  C045  F048         	movff	lcd_orden@orden+1,??_lcd_orden+2
  5703  002496  0E04               	movlw	4
  5704  002498  6E49               	movwf	(??_lcd_orden+3)& (0+255),c
  5705  00249A                     u2435:
  5706  00249A  90D8               	bcf	status,0,c
  5707  00249C  3248               	rrcf	??_lcd_orden+2,f,c
  5708  00249E  3247               	rrcf	??_lcd_orden+1,f,c
  5709  0024A0  2E49               	decfsz	(??_lcd_orden+3)& (0+255),f,c
  5710  0024A2  D7FB               	goto	u2435
  5711  0024A4  0E0F               	movlw	15
  5712  0024A6  1647               	andwf	??_lcd_orden+1,f,c
  5713  0024A8  3883               	swapf	3971,w,c	;volatile
  5714  0024AA  0B0F               	andlw	15
  5715  0024AC  0B0F               	andlw	15
  5716  0024AE  090F               	iorlw	15
  5717  0024B0  1447               	andwf	??_lcd_orden+1,w,c
  5718  0024B2  6E4A               	movwf	(??_lcd_orden+4)& (0+255),c
  5719  0024B4  384A               	swapf	??_lcd_orden+4,w,c
  5720  0024B6  0BF0               	andlw	240
  5721  0024B8  1046               	iorwf	??_lcd_orden,w,c
  5722  0024BA  6E83               	movwf	3971,c	;volatile
  5723                           
  5724                           ;lcd.c: 281: lcd_pulso();
  5725  0024BC  EC46  F013         	call	_lcd_pulso	;wreg free
  5726                           
  5727                           ;lcd.c: 282: PORTD=(((((PORTD>>4&0x0f)|0x0f)&(orden&0x0f))<<4)|(PORTD&0x0f));
  5728  0024C0  CF83 F046          	movff	3971,??_lcd_orden	;volatile
  5729  0024C4  0E0F               	movlw	15
  5730  0024C6  1646               	andwf	??_lcd_orden,f,c
  5731  0024C8  C044  F047         	movff	lcd_orden@orden,??_lcd_orden+1
  5732  0024CC  0E0F               	movlw	15
  5733  0024CE  1647               	andwf	??_lcd_orden+1,f,c
  5734  0024D0  3883               	swapf	3971,w,c	;volatile
  5735  0024D2  0B0F               	andlw	15
  5736  0024D4  0B0F               	andlw	15
  5737  0024D6  090F               	iorlw	15
  5738  0024D8  1447               	andwf	??_lcd_orden+1,w,c
  5739  0024DA  6E48               	movwf	(??_lcd_orden+2)& (0+255),c
  5740  0024DC  3848               	swapf	??_lcd_orden+2,w,c
  5741  0024DE  0BF0               	andlw	240
  5742  0024E0  1046               	iorwf	??_lcd_orden,w,c
  5743  0024E2  6E83               	movwf	3971,c	;volatile
  5744                           
  5745                           ;lcd.c: 283: lcd_pulso();
  5746  0024E4  EC46  F013         	call	_lcd_pulso	;wreg free
  5747  0024E8  0012               	return		;funcret
  5748  0024EA                     __end_of_lcd_orden:
  5749                           	opt stack 0
  5750                           tblptru	equ	0xFF8
  5751                           tblptrh	equ	0xFF7
  5752                           tblptrl	equ	0xFF6
  5753                           tablat	equ	0xFF5
  5754                           prodh	equ	0xFF4
  5755                           prodl	equ	0xFF3
  5756                           postinc0	equ	0xFEE
  5757                           wreg	equ	0xFE8
  5758                           indf2	equ	0xFDF
  5759                           postinc2	equ	0xFDE
  5760                           postdec2	equ	0xFDD
  5761                           fsr2h	equ	0xFDA
  5762                           fsr2l	equ	0xFD9
  5763                           status	equ	0xFD8
  5764                           
  5765 ;; *************** function _lcd_pulso *****************
  5766 ;; Defined at:
  5767 ;;		line 270 in file "lcd.c"
  5768 ;; Parameters:    Size  Location     Type
  5769 ;;		None
  5770 ;; Auto vars:     Size  Location     Type
  5771 ;;		None
  5772 ;; Return value:  Size  Location     Type
  5773 ;;                  1    wreg      void 
  5774 ;; Registers used:
  5775 ;;		wreg, status,2, status,0, cstack
  5776 ;; Tracked objects:
  5777 ;;		On entry : 0/0
  5778 ;;		On exit  : 0/0
  5779 ;;		Unchanged: 0/0
  5780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5781 ;;      Params:         0       0       0       0       0       0       0       0       0
  5782 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5783 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5784 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5785 ;;Total ram usage:        0 bytes
  5786 ;; Hardware stack levels used:    1
  5787 ;; Hardware stack levels required when called:    3
  5788 ;; This function calls:
  5789 ;;		_wait_in_ms
  5790 ;; This function is called by:
  5791 ;;		_lcd_iniciar
  5792 ;;		_lcd_orden
  5793 ;;		_lcd_caracter
  5794 ;; This function uses a non-reentrant model
  5795 ;;
  5796                           
  5797                           	psect	text23
  5798  00268C                     __ptext23:
  5799                           	opt stack 0
  5800  00268C                     _lcd_pulso:
  5801                           	opt stack 25
  5802                           
  5803                           ;lcd.c: 271: PORTDbits.RD3=1;
  5804                           
  5805                           ;incstack = 0
  5806  00268C  8683               	bsf	3971,3,c	;volatile
  5807                           
  5808                           ;lcd.c: 272: wait_in_ms(2);
  5809  00268E  0E00               	movlw	0
  5810  002690  6E3B               	movwf	wait_in_ms@time_in_ms+1,c
  5811  002692  0E02               	movlw	2
  5812  002694  6E3A               	movwf	wait_in_ms@time_in_ms,c
  5813  002696  EC8C  F00F         	call	_wait_in_ms	;wreg free
  5814                           
  5815                           ;lcd.c: 273: PORTDbits.RD3=0;
  5816  00269A  9683               	bcf	3971,3,c	;volatile
  5817                           
  5818                           ;lcd.c: 274: wait_in_ms(2);
  5819  00269C  0E00               	movlw	0
  5820  00269E  6E3B               	movwf	wait_in_ms@time_in_ms+1,c
  5821  0026A0  0E02               	movlw	2
  5822  0026A2  6E3A               	movwf	wait_in_ms@time_in_ms,c
  5823  0026A4  EC8C  F00F         	call	_wait_in_ms	;wreg free
  5824  0026A8  0012               	return		;funcret
  5825  0026AA                     __end_of_lcd_pulso:
  5826                           	opt stack 0
  5827                           tblptru	equ	0xFF8
  5828                           tblptrh	equ	0xFF7
  5829                           tblptrl	equ	0xFF6
  5830                           tablat	equ	0xFF5
  5831                           prodh	equ	0xFF4
  5832                           prodl	equ	0xFF3
  5833                           postinc0	equ	0xFEE
  5834                           wreg	equ	0xFE8
  5835                           indf2	equ	0xFDF
  5836                           postinc2	equ	0xFDE
  5837                           postdec2	equ	0xFDD
  5838                           fsr2h	equ	0xFDA
  5839                           fsr2l	equ	0xFD9
  5840                           status	equ	0xFD8
  5841                           
  5842 ;; *************** function _wait_in_ms *****************
  5843 ;; Defined at:
  5844 ;;		line 80 in file "config.c"
  5845 ;; Parameters:    Size  Location     Type
  5846 ;;  time_in_ms      2   57[COMRAM] int 
  5847 ;; Auto vars:     Size  Location     Type
  5848 ;;  count_ms        2   65[COMRAM] unsigned int 
  5849 ;;  count           2   63[COMRAM] unsigned int 
  5850 ;;  flag            2   61[COMRAM] unsigned int 
  5851 ;; Return value:  Size  Location     Type
  5852 ;;                  1    wreg      void 
  5853 ;; Registers used:
  5854 ;;		wreg, status,2, status,0, cstack
  5855 ;; Tracked objects:
  5856 ;;		On entry : 0/0
  5857 ;;		On exit  : 0/0
  5858 ;;		Unchanged: 0/0
  5859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5860 ;;      Params:         2       0       0       0       0       0       0       0       0
  5861 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5862 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5863 ;;      Totals:        10       0       0       0       0       0       0       0       0
  5864 ;;Total ram usage:       10 bytes
  5865 ;; Hardware stack levels used:    1
  5866 ;; Hardware stack levels required when called:    2
  5867 ;; This function calls:
  5868 ;;		___awtoft
  5869 ;;		___ftdiv
  5870 ;;		___fttol
  5871 ;; This function is called by:
  5872 ;;		_main
  5873 ;;		_lcd_iniciar
  5874 ;;		_lcd_pulso
  5875 ;;		_lcd_origen
  5876 ;;		_ADC_Read
  5877 ;;		_lcd_limpiar
  5878 ;;		_Lcd_Cmd
  5879 ;; This function uses a non-reentrant model
  5880 ;;
  5881                           
  5882                           	psect	text24
  5883  001F18                     __ptext24:
  5884                           	opt stack 0
  5885  001F18                     _wait_in_ms:
  5886                           	opt stack 28
  5887                           
  5888                           ;config.c: 81: unsigned int count = 0;
  5889                           
  5890                           ;incstack = 0
  5891  001F18  0E00               	movlw	0
  5892  001F1A  6E41               	movwf	wait_in_ms@count+1,c
  5893  001F1C  0E00               	movlw	0
  5894  001F1E  6E40               	movwf	wait_in_ms@count,c
  5895                           
  5896                           ;config.c: 82: unsigned int count_ms = 0;
  5897  001F20  0E00               	movlw	0
  5898  001F22  6E43               	movwf	wait_in_ms@count_ms+1,c
  5899  001F24  0E00               	movlw	0
  5900  001F26  6E42               	movwf	wait_in_ms@count_ms,c
  5901                           
  5902                           ;config.c: 83: unsigned int flag = 0;
  5903  001F28  0E00               	movlw	0
  5904  001F2A  6E3F               	movwf	wait_in_ms@flag+1,c
  5905  001F2C  0E00               	movlw	0
  5906  001F2E  6E3E               	movwf	wait_in_ms@flag,c
  5907                           
  5908                           ;config.c: 85: TMR0L = 131;
  5909  001F30  0E83               	movlw	131
  5910  001F32  6ED6               	movwf	4054,c	;volatile
  5911                           
  5912                           ;config.c: 88: count_ms = ((8000000)*0.001)/((256-TMR0L)*32);
  5913  001F34  50D6               	movf	4054,w,c	;volatile
  5914  001F36  6E3C               	movwf	??_wait_in_ms& (0+255),c
  5915  001F38  6A3D               	clrf	(??_wait_in_ms+1)& (0+255),c
  5916  001F3A  1E3C               	comf	??_wait_in_ms,f,c
  5917  001F3C  1E3D               	comf	??_wait_in_ms+1,f,c
  5918  001F3E  4A3C               	infsnz	??_wait_in_ms,f,c
  5919  001F40  2A3D               	incf	??_wait_in_ms+1,f,c
  5920  001F42  0E05               	movlw	5
  5921  001F44                     u1995:
  5922  001F44  90D8               	bcf	status,0,c
  5923  001F46  363C               	rlcf	??_wait_in_ms,f,c
  5924  001F48  363D               	rlcf	??_wait_in_ms+1,f,c
  5925  001F4A  2EE8               	decfsz	wreg,f,c
  5926  001F4C  D7FB               	goto	u1995
  5927  001F4E  0E00               	movlw	0
  5928  001F50  243C               	addwf	??_wait_in_ms,w,c
  5929  001F52  6E09               	movwf	___awtoft@c,c
  5930  001F54  0E20               	movlw	32
  5931  001F56  203D               	addwfc	??_wait_in_ms+1,w,c
  5932  001F58  6E0A               	movwf	___awtoft@c+1,c
  5933  001F5A  ECE0  F012         	call	___awtoft	;wreg free
  5934  001F5E  C009  F010         	movff	?___awtoft,___ftdiv@f2
  5935  001F62  C00A  F011         	movff	?___awtoft+1,___ftdiv@f2+1
  5936  001F66  C00B  F012         	movff	?___awtoft+2,___ftdiv@f2+2
  5937  001F6A  0E00               	movlw	0
  5938  001F6C  6E0D               	movwf	___ftdiv@f1,c
  5939  001F6E  0EFA               	movlw	250
  5940  001F70  6E0E               	movwf	___ftdiv@f1+1,c
  5941  001F72  0E45               	movlw	69
  5942  001F74  6E0F               	movwf	___ftdiv@f1+2,c
  5943  001F76  ECB2  F00E         	call	___ftdiv	;wreg free
  5944  001F7A  C00D  F02B         	movff	?___ftdiv,___fttol@f1
  5945  001F7E  C00E  F02C         	movff	?___ftdiv+1,___fttol@f1+1
  5946  001F82  C00F  F02D         	movff	?___ftdiv+2,___fttol@f1+2
  5947  001F86  EC38  F00E         	call	___fttol	;wreg free
  5948  001F8A  C02B  F042         	movff	?___fttol,wait_in_ms@count_ms
  5949  001F8E  C02C  F043         	movff	?___fttol+1,wait_in_ms@count_ms+1
  5950                           
  5951                           ;config.c: 90: TMR0ON = 1;
  5952  001F92  8ED5               	bsf	4053,7,c	;volatile
  5953                           
  5954                           ;config.c: 92: while (count < count_ms){
  5955  001F94  D020               	goto	l138
  5956  001F96                     l134:
  5957                           
  5958                           ;config.c: 93: if(TMR0IF == 1){
  5959  001F96  A4F2               	btfss	intcon,2,c	;volatile
  5960  001F98  D01E               	goto	l138
  5961                           
  5962                           ;config.c: 94: TMR0IF = 0;
  5963  001F9A  94F2               	bcf	intcon,2,c	;volatile
  5964                           
  5965                           ;config.c: 95: TMR0L = 131;
  5966  001F9C  0E83               	movlw	131
  5967  001F9E  6ED6               	movwf	4054,c	;volatile
  5968                           
  5969                           ;config.c: 96: count ++;
  5970  001FA0  4A40               	infsnz	wait_in_ms@count,f,c
  5971  001FA2  2A41               	incf	wait_in_ms@count+1,f,c
  5972                           
  5973                           ;config.c: 97: if (count == count_ms){
  5974  001FA4  5042               	movf	wait_in_ms@count_ms,w,c
  5975  001FA6  1840               	xorwf	wait_in_ms@count,w,c
  5976  001FA8  E116               	bnz	l2326
  5977  001FAA  5043               	movf	wait_in_ms@count_ms+1,w,c
  5978  001FAC  1841               	xorwf	wait_in_ms@count+1,w,c
  5979  001FAE  A4D8               	btfss	status,2,c
  5980  001FB0  D012               	goto	l138
  5981                           
  5982                           ;config.c: 98: flag++;
  5983  001FB2  4A3E               	infsnz	wait_in_ms@flag,f,c
  5984  001FB4  2A3F               	incf	wait_in_ms@flag+1,f,c
  5985                           
  5986                           ;config.c: 99: if (flag != time_in_ms){
  5987  001FB6  503E               	movf	wait_in_ms@flag,w,c
  5988  001FB8  183A               	xorwf	wait_in_ms@time_in_ms,w,c
  5989  001FBA  E104               	bnz	u2020
  5990  001FBC  503F               	movf	wait_in_ms@flag+1,w,c
  5991  001FBE  183B               	xorwf	wait_in_ms@time_in_ms+1,w,c
  5992  001FC0  B4D8               	btfsc	status,2,c
  5993  001FC2  D005               	goto	l137
  5994  001FC4                     u2020:
  5995                           
  5996                           ;config.c: 100: count = 0;
  5997  001FC4  0E00               	movlw	0
  5998  001FC6  6E41               	movwf	wait_in_ms@count+1,c
  5999  001FC8  0E00               	movlw	0
  6000  001FCA  6E40               	movwf	wait_in_ms@count,c
  6001                           
  6002                           ;config.c: 101: }
  6003  001FCC  D004               	goto	l138
  6004  001FCE                     l137:
  6005                           
  6006                           ;config.c: 102: else{
  6007                           ;config.c: 103: count = count_ms;
  6008  001FCE  C042  F040         	movff	wait_in_ms@count_ms,wait_in_ms@count
  6009  001FD2  C043  F041         	movff	wait_in_ms@count_ms+1,wait_in_ms@count+1
  6010  001FD6                     l138:
  6011  001FD6                     l2326:
  6012  001FD6  5042               	movf	wait_in_ms@count_ms,w,c
  6013  001FD8  5C40               	subwf	wait_in_ms@count,w,c
  6014  001FDA  5043               	movf	wait_in_ms@count_ms+1,w,c
  6015  001FDC  5841               	subwfb	wait_in_ms@count+1,w,c
  6016  001FDE  B0D8               	btfsc	status,0,c
  6017  001FE0  0012               	return	
  6018  001FE2  D7D9               	goto	l134
  6019  001FE4                     __end_of_wait_in_ms:
  6020                           	opt stack 0
  6021                           tblptru	equ	0xFF8
  6022                           tblptrh	equ	0xFF7
  6023                           tblptrl	equ	0xFF6
  6024                           tablat	equ	0xFF5
  6025                           prodh	equ	0xFF4
  6026                           prodl	equ	0xFF3
  6027                           intcon	equ	0xFF2
  6028                           postinc0	equ	0xFEE
  6029                           wreg	equ	0xFE8
  6030                           indf2	equ	0xFDF
  6031                           postinc2	equ	0xFDE
  6032                           postdec2	equ	0xFDD
  6033                           fsr2h	equ	0xFDA
  6034                           fsr2l	equ	0xFD9
  6035                           status	equ	0xFD8
  6036                           
  6037 ;; *************** function ___fttol *****************
  6038 ;; Defined at:
  6039 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  6040 ;; Parameters:    Size  Location     Type
  6041 ;;  f1              3   42[COMRAM] float 
  6042 ;; Auto vars:     Size  Location     Type
  6043 ;;  lval            4   52[COMRAM] unsigned long 
  6044 ;;  exp1            1   56[COMRAM] unsigned char 
  6045 ;;  sign1           1   51[COMRAM] unsigned char 
  6046 ;; Return value:  Size  Location     Type
  6047 ;;                  4   42[COMRAM] long 
  6048 ;; Registers used:
  6049 ;;		wreg, status,2, status,0
  6050 ;; Tracked objects:
  6051 ;;		On entry : 0/0
  6052 ;;		On exit  : 0/0
  6053 ;;		Unchanged: 0/0
  6054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6055 ;;      Params:         4       0       0       0       0       0       0       0       0
  6056 ;;      Locals:         6       0       0       0       0       0       0       0       0
  6057 ;;      Temps:          5       0       0       0       0       0       0       0       0
  6058 ;;      Totals:        15       0       0       0       0       0       0       0       0
  6059 ;;Total ram usage:       15 bytes
  6060 ;; Hardware stack levels used:    1
  6061 ;; This function calls:
  6062 ;;		Nothing
  6063 ;; This function is called by:
  6064 ;;		_wait_in_ms
  6065 ;;		_sprintf
  6066 ;; This function uses a non-reentrant model
  6067 ;;
  6068                           
  6069                           	psect	text25
  6070  001C70                     __ptext25:
  6071                           	opt stack 0
  6072  001C70                     ___fttol:
  6073                           	opt stack 29
  6074                           
  6075                           ;incstack = 0
  6076  001C70  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  6077  001C74  6A30               	clrf	(??___fttol+1)& (0+255),c
  6078  001C76  6A31               	clrf	(??___fttol+2)& (0+255),c
  6079  001C78  342C               	rlcf	___fttol@f1+1,w,c
  6080  001C7A  362F               	rlcf	??___fttol& (0+255),f,c
  6081  001C7C  E301               	bnc	u1911
  6082  001C7E  8030               	bsf	(??___fttol+1)& (0+255),0,c
  6083  001C80                     u1911:
  6084  001C80  502F               	movf	??___fttol,w,c
  6085  001C82  6E39               	movwf	___fttol@exp1,c
  6086  001C84  5039               	movf	___fttol@exp1,w,c
  6087  001C86  A4D8               	btfss	status,2,c
  6088  001C88  D009               	goto	l672
  6089  001C8A  0E00               	movlw	0
  6090  001C8C  6E2B               	movwf	?___fttol,c
  6091  001C8E  0E00               	movlw	0
  6092  001C90  6E2C               	movwf	?___fttol+1,c
  6093  001C92  0E00               	movlw	0
  6094  001C94  6E2D               	movwf	?___fttol+2,c
  6095  001C96  0E00               	movlw	0
  6096  001C98  6E2E               	movwf	?___fttol+3,c
  6097  001C9A  0012               	return	
  6098  001C9C                     l672:
  6099  001C9C  0E17               	movlw	23
  6100  001C9E  6E2F               	movwf	??___fttol& (0+255),c
  6101  001CA0  C02B  F030         	movff	___fttol@f1,??___fttol+1
  6102  001CA4  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  6103  001CA8  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  6104  001CAC  282F               	incf	??___fttol,w,c
  6105  001CAE  6E33               	movwf	(??___fttol+4)& (0+255),c
  6106  001CB0  D004               	goto	u1930
  6107  001CB2                     u1935:
  6108  001CB2  90D8               	bcf	status,0,c
  6109  001CB4  3232               	rrcf	??___fttol+3,f,c
  6110  001CB6  3231               	rrcf	??___fttol+2,f,c
  6111  001CB8  3230               	rrcf	??___fttol+1,f,c
  6112  001CBA                     u1930:
  6113  001CBA  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
  6114  001CBC  D7FA               	goto	u1935
  6115  001CBE  5030               	movf	??___fttol+1,w,c
  6116  001CC0  6E34               	movwf	___fttol@sign1,c
  6117  001CC2  8E2C               	bsf	___fttol@f1+1,7,c
  6118  001CC4  0EFF               	movlw	255
  6119  001CC6  162B               	andwf	___fttol@f1,f,c
  6120  001CC8  0EFF               	movlw	255
  6121  001CCA  162C               	andwf	___fttol@f1+1,f,c
  6122  001CCC  0E00               	movlw	0
  6123  001CCE  162D               	andwf	___fttol@f1+2,f,c
  6124  001CD0  502B               	movf	___fttol@f1,w,c
  6125  001CD2  6E35               	movwf	___fttol@lval,c
  6126  001CD4  502C               	movf	___fttol@f1+1,w,c
  6127  001CD6  6E36               	movwf	___fttol@lval+1,c
  6128  001CD8  502D               	movf	___fttol@f1+2,w,c
  6129  001CDA  6E37               	movwf	___fttol@lval+2,c
  6130  001CDC  6A38               	clrf	___fttol@lval+3,c
  6131  001CDE  0E8E               	movlw	142
  6132  001CE0  5E39               	subwf	___fttol@exp1,f,c
  6133  001CE2  AE39               	btfss	___fttol@exp1,7,c
  6134  001CE4  D016               	goto	l674
  6135  001CE6  5039               	movf	___fttol@exp1,w,c
  6136  001CE8  0A80               	xorlw	128
  6137  001CEA  0F8F               	addlw	143
  6138  001CEC  B0D8               	btfsc	status,0,c
  6139  001CEE  D009               	goto	l675
  6140  001CF0  0E00               	movlw	0
  6141  001CF2  6E2B               	movwf	?___fttol,c
  6142  001CF4  0E00               	movlw	0
  6143  001CF6  6E2C               	movwf	?___fttol+1,c
  6144  001CF8  0E00               	movlw	0
  6145  001CFA  6E2D               	movwf	?___fttol+2,c
  6146  001CFC  0E00               	movlw	0
  6147  001CFE  6E2E               	movwf	?___fttol+3,c
  6148  001D00  0012               	return	
  6149  001D02                     l675:
  6150  001D02  90D8               	bcf	status,0,c
  6151  001D04  3238               	rrcf	___fttol@lval+3,f,c
  6152  001D06  3237               	rrcf	___fttol@lval+2,f,c
  6153  001D08  3236               	rrcf	___fttol@lval+1,f,c
  6154  001D0A  3235               	rrcf	___fttol@lval,f,c
  6155  001D0C  3E39               	incfsz	___fttol@exp1,f,c
  6156  001D0E  D7F9               	goto	l675
  6157  001D10  D015               	goto	u1970
  6158  001D12                     l674:
  6159  001D12  0E17               	movlw	23
  6160  001D14  6439               	cpfsgt	___fttol@exp1,c
  6161  001D16  D00F               	goto	l680
  6162  001D18  0E00               	movlw	0
  6163  001D1A  6E2B               	movwf	?___fttol,c
  6164  001D1C  0E00               	movlw	0
  6165  001D1E  6E2C               	movwf	?___fttol+1,c
  6166  001D20  0E00               	movlw	0
  6167  001D22  6E2D               	movwf	?___fttol+2,c
  6168  001D24  0E00               	movlw	0
  6169  001D26  6E2E               	movwf	?___fttol+3,c
  6170  001D28  0012               	return	
  6171  001D2A  90D8               	bcf	status,0,c
  6172  001D2C  3635               	rlcf	___fttol@lval,f,c
  6173  001D2E  3636               	rlcf	___fttol@lval+1,f,c
  6174  001D30  3637               	rlcf	___fttol@lval+2,f,c
  6175  001D32  3638               	rlcf	___fttol@lval+3,f,c
  6176  001D34  0639               	decf	___fttol@exp1,f,c
  6177  001D36                     l680:
  6178  001D36  5039               	movf	___fttol@exp1,w,c
  6179  001D38  A4D8               	btfss	status,2,c
  6180  001D3A  D7F7               	goto	l681
  6181  001D3C                     u1970:
  6182  001D3C  5034               	movf	___fttol@sign1,w,c
  6183  001D3E  B4D8               	btfsc	status,2,c
  6184  001D40  D008               	goto	l683
  6185  001D42  1E38               	comf	___fttol@lval+3,f,c
  6186  001D44  1E37               	comf	___fttol@lval+2,f,c
  6187  001D46  1E36               	comf	___fttol@lval+1,f,c
  6188  001D48  6C35               	negf	___fttol@lval,c
  6189  001D4A  0E00               	movlw	0
  6190  001D4C  2236               	addwfc	___fttol@lval+1,f,c
  6191  001D4E  2237               	addwfc	___fttol@lval+2,f,c
  6192  001D50  2238               	addwfc	___fttol@lval+3,f,c
  6193  001D52                     l683:
  6194  001D52  C035  F02B         	movff	___fttol@lval,?___fttol
  6195  001D56  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  6196  001D5A  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  6197  001D5E  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  6198  001D62  0012               	return	
  6199  001D64                     __end_of___fttol:
  6200                           	opt stack 0
  6201                           tblptru	equ	0xFF8
  6202                           tblptrh	equ	0xFF7
  6203                           tblptrl	equ	0xFF6
  6204                           tablat	equ	0xFF5
  6205                           prodh	equ	0xFF4
  6206                           prodl	equ	0xFF3
  6207                           intcon	equ	0xFF2
  6208                           postinc0	equ	0xFEE
  6209                           wreg	equ	0xFE8
  6210                           indf2	equ	0xFDF
  6211                           postinc2	equ	0xFDE
  6212                           postdec2	equ	0xFDD
  6213                           fsr2h	equ	0xFDA
  6214                           fsr2l	equ	0xFD9
  6215                           status	equ	0xFD8
  6216                           
  6217 ;; *************** function ___ftdiv *****************
  6218 ;; Defined at:
  6219 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  6220 ;; Parameters:    Size  Location     Type
  6221 ;;  f1              3   12[COMRAM] float 
  6222 ;;  f2              3   15[COMRAM] float 
  6223 ;; Auto vars:     Size  Location     Type
  6224 ;;  f3              3   22[COMRAM] float 
  6225 ;;  sign            1   26[COMRAM] unsigned char 
  6226 ;;  exp             1   25[COMRAM] unsigned char 
  6227 ;;  cntr            1   21[COMRAM] unsigned char 
  6228 ;; Return value:  Size  Location     Type
  6229 ;;                  3   12[COMRAM] float 
  6230 ;; Registers used:
  6231 ;;		wreg, status,2, status,0, cstack
  6232 ;; Tracked objects:
  6233 ;;		On entry : 0/0
  6234 ;;		On exit  : 0/0
  6235 ;;		Unchanged: 0/0
  6236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6237 ;;      Params:         6       0       0       0       0       0       0       0       0
  6238 ;;      Locals:         6       0       0       0       0       0       0       0       0
  6239 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6240 ;;      Totals:        15       0       0       0       0       0       0       0       0
  6241 ;;Total ram usage:       15 bytes
  6242 ;; Hardware stack levels used:    1
  6243 ;; Hardware stack levels required when called:    1
  6244 ;; This function calls:
  6245 ;;		___ftpack
  6246 ;; This function is called by:
  6247 ;;		_wait_in_ms
  6248 ;; This function uses a non-reentrant model
  6249 ;;
  6250                           
  6251                           	psect	text26
  6252  001D64                     __ptext26:
  6253                           	opt stack 0
  6254  001D64                     ___ftdiv:
  6255                           	opt stack 28
  6256                           
  6257                           ;incstack = 0
  6258  001D64  C00F  F013         	movff	___ftdiv@f1+2,??___ftdiv
  6259  001D68  6A14               	clrf	(??___ftdiv+1)& (0+255),c
  6260  001D6A  6A15               	clrf	(??___ftdiv+2)& (0+255),c
  6261  001D6C  340E               	rlcf	___ftdiv@f1+1,w,c
  6262  001D6E  3613               	rlcf	??___ftdiv& (0+255),f,c
  6263  001D70  E301               	bnc	u1851
  6264  001D72  8014               	bsf	(??___ftdiv+1)& (0+255),0,c
  6265  001D74                     u1851:
  6266  001D74  5013               	movf	??___ftdiv,w,c
  6267  001D76  6E1A               	movwf	___ftdiv@exp,c
  6268  001D78  501A               	movf	___ftdiv@exp,w,c
  6269  001D7A  A4D8               	btfss	status,2,c
  6270  001D7C  D007               	goto	l619
  6271  001D7E  0E00               	movlw	0
  6272  001D80  6E0D               	movwf	?___ftdiv,c
  6273  001D82  0E00               	movlw	0
  6274  001D84  6E0E               	movwf	?___ftdiv+1,c
  6275  001D86  0E00               	movlw	0
  6276  001D88  6E0F               	movwf	?___ftdiv+2,c
  6277  001D8A  0012               	return	
  6278  001D8C                     l619:
  6279  001D8C  C012  F013         	movff	___ftdiv@f2+2,??___ftdiv
  6280  001D90  6A14               	clrf	(??___ftdiv+1)& (0+255),c
  6281  001D92  6A15               	clrf	(??___ftdiv+2)& (0+255),c
  6282  001D94  3411               	rlcf	___ftdiv@f2+1,w,c
  6283  001D96  3613               	rlcf	??___ftdiv& (0+255),f,c
  6284  001D98  E301               	bnc	u1871
  6285  001D9A  8014               	bsf	(??___ftdiv+1)& (0+255),0,c
  6286  001D9C                     u1871:
  6287  001D9C  5013               	movf	??___ftdiv,w,c
  6288  001D9E  6E1B               	movwf	___ftdiv@sign,c
  6289  001DA0  501B               	movf	___ftdiv@sign,w,c
  6290  001DA2  A4D8               	btfss	status,2,c
  6291  001DA4  D007               	goto	l621
  6292  001DA6  0E00               	movlw	0
  6293  001DA8  6E0D               	movwf	?___ftdiv,c
  6294  001DAA  0E00               	movlw	0
  6295  001DAC  6E0E               	movwf	?___ftdiv+1,c
  6296  001DAE  0E00               	movlw	0
  6297  001DB0  6E0F               	movwf	?___ftdiv+2,c
  6298  001DB2  0012               	return	
  6299  001DB4                     l621:
  6300  001DB4  0E00               	movlw	0
  6301  001DB6  6E17               	movwf	___ftdiv@f3,c
  6302  001DB8  0E00               	movlw	0
  6303  001DBA  6E18               	movwf	___ftdiv@f3+1,c
  6304  001DBC  0E00               	movlw	0
  6305  001DBE  6E19               	movwf	___ftdiv@f3+2,c
  6306  001DC0  501B               	movf	___ftdiv@sign,w,c
  6307  001DC2  0F89               	addlw	137
  6308  001DC4  5E1A               	subwf	___ftdiv@exp,f,c
  6309  001DC6  C00F  F01B         	movff	___ftdiv@f1+2,___ftdiv@sign
  6310  001DCA  5012               	movf	___ftdiv@f2+2,w,c
  6311  001DCC  1A1B               	xorwf	___ftdiv@sign,f,c
  6312  001DCE  0E80               	movlw	128
  6313  001DD0  161B               	andwf	___ftdiv@sign,f,c
  6314  001DD2  8E0E               	bsf	___ftdiv@f1+1,7,c
  6315  001DD4  0EFF               	movlw	255
  6316  001DD6  160D               	andwf	___ftdiv@f1,f,c
  6317  001DD8  0EFF               	movlw	255
  6318  001DDA  160E               	andwf	___ftdiv@f1+1,f,c
  6319  001DDC  0E00               	movlw	0
  6320  001DDE  160F               	andwf	___ftdiv@f1+2,f,c
  6321  001DE0  8E11               	bsf	___ftdiv@f2+1,7,c
  6322  001DE2  0EFF               	movlw	255
  6323  001DE4  1610               	andwf	___ftdiv@f2,f,c
  6324  001DE6  0EFF               	movlw	255
  6325  001DE8  1611               	andwf	___ftdiv@f2+1,f,c
  6326  001DEA  0E00               	movlw	0
  6327  001DEC  1612               	andwf	___ftdiv@f2+2,f,c
  6328  001DEE  0E18               	movlw	24
  6329  001DF0  6E16               	movwf	___ftdiv@cntr,c
  6330  001DF2  90D8               	bcf	status,0,c
  6331  001DF4  3617               	rlcf	___ftdiv@f3,f,c
  6332  001DF6  3618               	rlcf	___ftdiv@f3+1,f,c
  6333  001DF8  3619               	rlcf	___ftdiv@f3+2,f,c
  6334  001DFA  5010               	movf	___ftdiv@f2,w,c
  6335  001DFC  5C0D               	subwf	___ftdiv@f1,w,c
  6336  001DFE  5011               	movf	___ftdiv@f2+1,w,c
  6337  001E00  580E               	subwfb	___ftdiv@f1+1,w,c
  6338  001E02  5012               	movf	___ftdiv@f2+2,w,c
  6339  001E04  580F               	subwfb	___ftdiv@f1+2,w,c
  6340  001E06  A0D8               	btfss	status,0,c
  6341  001E08  D007               	goto	l623
  6342  001E0A  5010               	movf	___ftdiv@f2,w,c
  6343  001E0C  5E0D               	subwf	___ftdiv@f1,f,c
  6344  001E0E  5011               	movf	___ftdiv@f2+1,w,c
  6345  001E10  5A0E               	subwfb	___ftdiv@f1+1,f,c
  6346  001E12  5012               	movf	___ftdiv@f2+2,w,c
  6347  001E14  5A0F               	subwfb	___ftdiv@f1+2,f,c
  6348  001E16  8017               	bsf	___ftdiv@f3,0,c
  6349  001E18                     l623:
  6350  001E18  90D8               	bcf	status,0,c
  6351  001E1A  360D               	rlcf	___ftdiv@f1,f,c
  6352  001E1C  360E               	rlcf	___ftdiv@f1+1,f,c
  6353  001E1E  360F               	rlcf	___ftdiv@f1+2,f,c
  6354  001E20  2E16               	decfsz	___ftdiv@cntr,f,c
  6355  001E22  D7E7               	goto	l622
  6356  001E24  C017  F001         	movff	___ftdiv@f3,___ftpack@arg
  6357  001E28  C018  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  6358  001E2C  C019  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  6359  001E30  C01A  F004         	movff	___ftdiv@exp,___ftpack@exp
  6360  001E34  C01B  F005         	movff	___ftdiv@sign,___ftpack@sign
  6361  001E38  ECF2  F00F         	call	___ftpack	;wreg free
  6362  001E3C  C001  F00D         	movff	?___ftpack,?___ftdiv
  6363  001E40  C002  F00E         	movff	?___ftpack+1,?___ftdiv+1
  6364  001E44  C003  F00F         	movff	?___ftpack+2,?___ftdiv+2
  6365  001E48  0012               	return	
  6366  001E4A                     __end_of___ftdiv:
  6367                           	opt stack 0
  6368                           tblptru	equ	0xFF8
  6369                           tblptrh	equ	0xFF7
  6370                           tblptrl	equ	0xFF6
  6371                           tablat	equ	0xFF5
  6372                           prodh	equ	0xFF4
  6373                           prodl	equ	0xFF3
  6374                           intcon	equ	0xFF2
  6375                           postinc0	equ	0xFEE
  6376                           wreg	equ	0xFE8
  6377                           indf2	equ	0xFDF
  6378                           postinc2	equ	0xFDE
  6379                           postdec2	equ	0xFDD
  6380                           fsr2h	equ	0xFDA
  6381                           fsr2l	equ	0xFD9
  6382                           status	equ	0xFD8
  6383                           
  6384 ;; *************** function ___awtoft *****************
  6385 ;; Defined at:
  6386 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
  6387 ;; Parameters:    Size  Location     Type
  6388 ;;  c               2    8[COMRAM] int 
  6389 ;; Auto vars:     Size  Location     Type
  6390 ;;  sign            1   11[COMRAM] unsigned char 
  6391 ;; Return value:  Size  Location     Type
  6392 ;;                  3    8[COMRAM] float 
  6393 ;; Registers used:
  6394 ;;		wreg, status,2, status,0, cstack
  6395 ;; Tracked objects:
  6396 ;;		On entry : 0/0
  6397 ;;		On exit  : 0/0
  6398 ;;		Unchanged: 0/0
  6399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6400 ;;      Params:         3       0       0       0       0       0       0       0       0
  6401 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6402 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6403 ;;      Totals:         4       0       0       0       0       0       0       0       0
  6404 ;;Total ram usage:        4 bytes
  6405 ;; Hardware stack levels used:    1
  6406 ;; Hardware stack levels required when called:    1
  6407 ;; This function calls:
  6408 ;;		___ftpack
  6409 ;; This function is called by:
  6410 ;;		_wait_in_ms
  6411 ;; This function uses a non-reentrant model
  6412 ;;
  6413                           
  6414                           	psect	text27
  6415  0025C0                     __ptext27:
  6416                           	opt stack 0
  6417  0025C0                     ___awtoft:
  6418                           	opt stack 28
  6419                           
  6420                           ;incstack = 0
  6421  0025C0  0E00               	movlw	0
  6422  0025C2  6E0C               	movwf	___awtoft@sign,c
  6423  0025C4  AE0A               	btfss	___awtoft@c+1,7,c
  6424  0025C6  D006               	goto	l519
  6425  0025C8  6C09               	negf	___awtoft@c,c
  6426  0025CA  1E0A               	comf	___awtoft@c+1,f,c
  6427  0025CC  B0D8               	btfsc	status,0,c
  6428  0025CE  2A0A               	incf	___awtoft@c+1,f,c
  6429  0025D0  0E01               	movlw	1
  6430  0025D2  6E0C               	movwf	___awtoft@sign,c
  6431  0025D4                     l519:
  6432  0025D4  C009  F001         	movff	___awtoft@c,___ftpack@arg
  6433  0025D8  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  6434  0025DC  6A03               	clrf	___ftpack@arg+2,c
  6435  0025DE  0E8E               	movlw	142
  6436  0025E0  6E04               	movwf	___ftpack@exp,c
  6437  0025E2  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  6438  0025E6  ECF2  F00F         	call	___ftpack	;wreg free
  6439  0025EA  C001  F009         	movff	?___ftpack,?___awtoft
  6440  0025EE  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  6441  0025F2  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  6442  0025F6  0012               	return	
  6443  0025F8                     __end_of___awtoft:
  6444                           	opt stack 0
  6445                           tblptru	equ	0xFF8
  6446                           tblptrh	equ	0xFF7
  6447                           tblptrl	equ	0xFF6
  6448                           tablat	equ	0xFF5
  6449                           prodh	equ	0xFF4
  6450                           prodl	equ	0xFF3
  6451                           intcon	equ	0xFF2
  6452                           postinc0	equ	0xFEE
  6453                           wreg	equ	0xFE8
  6454                           indf2	equ	0xFDF
  6455                           postinc2	equ	0xFDE
  6456                           postdec2	equ	0xFDD
  6457                           fsr2h	equ	0xFDA
  6458                           fsr2l	equ	0xFD9
  6459                           status	equ	0xFD8
  6460                           
  6461 ;; *************** function ___ftpack *****************
  6462 ;; Defined at:
  6463 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  6464 ;; Parameters:    Size  Location     Type
  6465 ;;  arg             3    0[COMRAM] unsigned um
  6466 ;;  exp             1    3[COMRAM] unsigned char 
  6467 ;;  sign            1    4[COMRAM] unsigned char 
  6468 ;; Auto vars:     Size  Location     Type
  6469 ;;		None
  6470 ;; Return value:  Size  Location     Type
  6471 ;;                  3    0[COMRAM] float 
  6472 ;; Registers used:
  6473 ;;		wreg, status,2, status,0
  6474 ;; Tracked objects:
  6475 ;;		On entry : 0/0
  6476 ;;		On exit  : 0/0
  6477 ;;		Unchanged: 0/0
  6478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6479 ;;      Params:         5       0       0       0       0       0       0       0       0
  6480 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6481 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6482 ;;      Totals:         8       0       0       0       0       0       0       0       0
  6483 ;;Total ram usage:        8 bytes
  6484 ;; Hardware stack levels used:    1
  6485 ;; This function calls:
  6486 ;;		Nothing
  6487 ;; This function is called by:
  6488 ;;		___awtoft
  6489 ;;		___ftadd
  6490 ;;		___ftdiv
  6491 ;;		___ftmul
  6492 ;;		___lltoft
  6493 ;; This function uses a non-reentrant model
  6494 ;;
  6495                           
  6496                           	psect	text28
  6497  001FE4                     __ptext28:
  6498                           	opt stack 0
  6499  001FE4                     ___ftpack:
  6500                           	opt stack 28
  6501                           
  6502                           ;incstack = 0
  6503  001FE4  5004               	movf	___ftpack@exp,w,c
  6504  001FE6  B4D8               	btfsc	status,2,c
  6505  001FE8  D005               	goto	u1780
  6506  001FEA  5001               	movf	___ftpack@arg,w,c
  6507  001FEC  1002               	iorwf	___ftpack@arg+1,w,c
  6508  001FEE  1003               	iorwf	___ftpack@arg+2,w,c
  6509  001FF0  A4D8               	btfss	status,2,c
  6510  001FF2  D00C               	goto	l555
  6511  001FF4                     u1780:
  6512  001FF4  0E00               	movlw	0
  6513  001FF6  6E01               	movwf	?___ftpack,c
  6514  001FF8  0E00               	movlw	0
  6515  001FFA  6E02               	movwf	?___ftpack+1,c
  6516  001FFC  0E00               	movlw	0
  6517  001FFE  6E03               	movwf	?___ftpack+2,c
  6518  002000  0012               	return	
  6519  002002  2A04               	incf	___ftpack@exp,f,c
  6520  002004  90D8               	bcf	status,0,c
  6521  002006  3203               	rrcf	___ftpack@arg+2,f,c
  6522  002008  3202               	rrcf	___ftpack@arg+1,f,c
  6523  00200A  3201               	rrcf	___ftpack@arg,f,c
  6524  00200C                     l555:
  6525  00200C  0E00               	movlw	0
  6526  00200E  1401               	andwf	___ftpack@arg,w,c
  6527  002010  6E06               	movwf	??___ftpack& (0+255),c
  6528  002012  0E00               	movlw	0
  6529  002014  1402               	andwf	___ftpack@arg+1,w,c
  6530  002016  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6531  002018  0EFE               	movlw	254
  6532  00201A  1403               	andwf	___ftpack@arg+2,w,c
  6533  00201C  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6534  00201E  5006               	movf	??___ftpack,w,c
  6535  002020  1007               	iorwf	??___ftpack+1,w,c
  6536  002022  1008               	iorwf	??___ftpack+2,w,c
  6537  002024  B4D8               	btfsc	status,2,c
  6538  002026  D00C               	goto	l558
  6539  002028  D7EC               	goto	l556
  6540  00202A  2A04               	incf	___ftpack@exp,f,c
  6541  00202C  0E01               	movlw	1
  6542  00202E  2601               	addwf	___ftpack@arg,f,c
  6543  002030  0E00               	movlw	0
  6544  002032  2202               	addwfc	___ftpack@arg+1,f,c
  6545  002034  0E00               	movlw	0
  6546  002036  2203               	addwfc	___ftpack@arg+2,f,c
  6547  002038  90D8               	bcf	status,0,c
  6548  00203A  3203               	rrcf	___ftpack@arg+2,f,c
  6549  00203C  3202               	rrcf	___ftpack@arg+1,f,c
  6550  00203E  3201               	rrcf	___ftpack@arg,f,c
  6551  002040                     l558:
  6552  002040  0E00               	movlw	0
  6553  002042  1401               	andwf	___ftpack@arg,w,c
  6554  002044  6E06               	movwf	??___ftpack& (0+255),c
  6555  002046  0E00               	movlw	0
  6556  002048  1402               	andwf	___ftpack@arg+1,w,c
  6557  00204A  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6558  00204C  0EFF               	movlw	255
  6559  00204E  1403               	andwf	___ftpack@arg+2,w,c
  6560  002050  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6561  002052  5006               	movf	??___ftpack,w,c
  6562  002054  1007               	iorwf	??___ftpack+1,w,c
  6563  002056  1008               	iorwf	??___ftpack+2,w,c
  6564  002058  B4D8               	btfsc	status,2,c
  6565  00205A  D006               	goto	l561
  6566  00205C  D7E6               	goto	l559
  6567  00205E  0604               	decf	___ftpack@exp,f,c
  6568  002060  90D8               	bcf	status,0,c
  6569  002062  3601               	rlcf	___ftpack@arg,f,c
  6570  002064  3602               	rlcf	___ftpack@arg+1,f,c
  6571  002066  3603               	rlcf	___ftpack@arg+2,f,c
  6572  002068                     l561:
  6573  002068  BE02               	btfsc	___ftpack@arg+1,7,c
  6574  00206A  D003               	goto	u1820
  6575  00206C  0E02               	movlw	2
  6576  00206E  6004               	cpfslt	___ftpack@exp,c
  6577  002070  D7F6               	goto	l562
  6578  002072                     u1820:
  6579  002072  A004               	btfss	___ftpack@exp,0,c
  6580  002074  9E02               	bcf	___ftpack@arg+1,7,c
  6581  002076  90D8               	bcf	status,0,c
  6582  002078  3204               	rrcf	___ftpack@exp,f,c
  6583  00207A  5004               	movf	___ftpack@exp,w,c
  6584  00207C  1203               	iorwf	___ftpack@arg+2,f,c
  6585  00207E  5005               	movf	___ftpack@sign,w,c
  6586  002080  A4D8               	btfss	status,2,c
  6587  002082  8E03               	bsf	___ftpack@arg+2,7,c
  6588  002084  C001  F001         	movff	___ftpack@arg,?___ftpack
  6589  002088  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  6590  00208C  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  6591  002090  0012               	return	
  6592  002092                     __end_of___ftpack:
  6593                           	opt stack 0
  6594                           tblptru	equ	0xFF8
  6595                           tblptrh	equ	0xFF7
  6596                           tblptrl	equ	0xFF6
  6597                           tablat	equ	0xFF5
  6598                           prodh	equ	0xFF4
  6599                           prodl	equ	0xFF3
  6600                           intcon	equ	0xFF2
  6601                           postinc0	equ	0xFEE
  6602                           wreg	equ	0xFE8
  6603                           indf2	equ	0xFDF
  6604                           postinc2	equ	0xFDE
  6605                           postdec2	equ	0xFDD
  6606                           fsr2h	equ	0xFDA
  6607                           fsr2l	equ	0xFD9
  6608                           status	equ	0xFD8
  6609                           
  6610 ;; *************** function _configBoard *****************
  6611 ;; Defined at:
  6612 ;;		line 11 in file "config.c"
  6613 ;; Parameters:    Size  Location     Type
  6614 ;;		None
  6615 ;; Auto vars:     Size  Location     Type
  6616 ;;		None
  6617 ;; Return value:  Size  Location     Type
  6618 ;;                  1    wreg      void 
  6619 ;; Registers used:
  6620 ;;		wreg, status,2
  6621 ;; Tracked objects:
  6622 ;;		On entry : 0/0
  6623 ;;		On exit  : 0/0
  6624 ;;		Unchanged: 0/0
  6625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6626 ;;      Params:         0       0       0       0       0       0       0       0       0
  6627 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6628 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6629 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6630 ;;Total ram usage:        0 bytes
  6631 ;; Hardware stack levels used:    1
  6632 ;; This function calls:
  6633 ;;		Nothing
  6634 ;; This function is called by:
  6635 ;;		_main
  6636 ;; This function uses a non-reentrant model
  6637 ;;
  6638                           
  6639                           	psect	text29
  6640  0022C4                     __ptext29:
  6641                           	opt stack 0
  6642  0022C4                     _configBoard:
  6643                           	opt stack 30
  6644                           
  6645                           ;config.c: 15: INTCONbits.GIE = 1;
  6646                           
  6647                           ;incstack = 0
  6648  0022C4  8EF2               	bsf	intcon,7,c	;volatile
  6649                           
  6650                           ;config.c: 16: INTCONbits.PEIE = 1;
  6651  0022C6  8CF2               	bsf	intcon,6,c	;volatile
  6652                           
  6653                           ;config.c: 25: T0CONbits.TMR0ON = 1;
  6654  0022C8  8ED5               	bsf	4053,7,c	;volatile
  6655                           
  6656                           ;config.c: 26: T08BIT = 1;
  6657  0022CA  8CD5               	bsf	4053,6,c	;volatile
  6658                           
  6659                           ;config.c: 27: T0CONbits.T0CS = 0;
  6660  0022CC  9AD5               	bcf	4053,5,c	;volatile
  6661                           
  6662                           ;config.c: 29: T0CONbits.PSA = 0;
  6663  0022CE  96D5               	bcf	4053,3,c	;volatile
  6664                           
  6665                           ;config.c: 30: T0CONbits.T0PS = 100;
  6666  0022D0  50D5               	movf	4053,w,c	;volatile
  6667  0022D2  0BF8               	andlw	-8
  6668  0022D4  0904               	iorlw	4
  6669  0022D6  6ED5               	movwf	4053,c	;volatile
  6670                           
  6671                           ;config.c: 31: INTCONbits.TMR0IF = 0;
  6672  0022D8  94F2               	bcf	intcon,2,c	;volatile
  6673                           
  6674                           ;config.c: 33: ADCON1bits.PCFG = 0b1111;
  6675  0022DA  80C1               	bsf	4033,0,c	;volatile
  6676  0022DC  82C1               	bsf	4033,1,c	;volatile
  6677  0022DE  84C1               	bsf	4033,2,c	;volatile
  6678  0022E0  86C1               	bsf	4033,3,c	;volatile
  6679                           
  6680                           ;config.c: 36: TRISA=0b00000000;
  6681  0022E2  0E00               	movlw	0
  6682  0022E4  6E92               	movwf	3986,c	;volatile
  6683                           
  6684                           ;config.c: 37: TRISB=0b00000000;
  6685  0022E6  0E00               	movlw	0
  6686  0022E8  6E93               	movwf	3987,c	;volatile
  6687                           
  6688                           ;config.c: 44: ADCON0 = 0b00000111;
  6689  0022EA  0E07               	movlw	7
  6690  0022EC  6EC2               	movwf	4034,c	;volatile
  6691                           
  6692                           ;config.c: 47: ADCON0bits.ADON = 0;
  6693  0022EE  90C2               	bcf	4034,0,c	;volatile
  6694                           
  6695                           ;config.c: 51: ADCON2bits.ADFM = 1;
  6696  0022F0  8EC0               	bsf	4032,7,c	;volatile
  6697                           
  6698                           ;config.c: 52: ADCON2bits.ADCS = 0b110;
  6699  0022F2  50C0               	movf	4032,w,c	;volatile
  6700  0022F4  0BF8               	andlw	-8
  6701  0022F6  0906               	iorlw	6
  6702  0022F8  6EC0               	movwf	4032,c	;volatile
  6703                           
  6704                           ;config.c: 53: ADCON2bits.ACQT = 0b101;
  6705  0022FA  50C0               	movf	4032,w,c	;volatile
  6706  0022FC  0BC7               	andlw	-57
  6707  0022FE  0928               	iorlw	40
  6708  002300  6EC0               	movwf	4032,c	;volatile
  6709                           
  6710                           ;config.c: 54: ADCON1bits.PCFG=0b1101;
  6711  002302  50C1               	movf	4033,w,c	;volatile
  6712  002304  0BF0               	andlw	-16
  6713  002306  090D               	iorlw	13
  6714  002308  6EC1               	movwf	4033,c	;volatile
  6715                           
  6716                           ;config.c: 55: TRISAbits.RA1=1;
  6717  00230A  8292               	bsf	3986,1,c	;volatile
  6718                           
  6719                           ;config.c: 56: ADCON2bits.ADCS=0b110;
  6720  00230C  50C0               	movf	4032,w,c	;volatile
  6721  00230E  0BF8               	andlw	-8
  6722  002310  0906               	iorlw	6
  6723  002312  6EC0               	movwf	4032,c	;volatile
  6724                           
  6725                           ;config.c: 57: ADCON1bits.VCFG1=0;
  6726  002314  9AC1               	bcf	4033,5,c	;volatile
  6727                           
  6728                           ;config.c: 58: ADCON1bits.VCFG0=0;
  6729  002316  98C1               	bcf	4033,4,c	;volatile
  6730                           
  6731                           ;config.c: 59: ADCON0bits.CHS=0b000;
  6732  002318  94C2               	bcf	4034,2,c	;volatile
  6733  00231A  96C2               	bcf	4034,3,c	;volatile
  6734  00231C  98C2               	bcf	4034,4,c	;volatile
  6735  00231E  9AC2               	bcf	4034,5,c	;volatile
  6736                           
  6737                           ;config.c: 60: ADCON2bits.ADFM=1;
  6738  002320  8EC0               	bsf	4032,7,c	;volatile
  6739                           
  6740                           ;config.c: 61: ADCON1bits.PCFG=0b1011;
  6741  002322  50C1               	movf	4033,w,c	;volatile
  6742  002324  0BF0               	andlw	-16
  6743  002326  090B               	iorlw	11
  6744  002328  6EC1               	movwf	4033,c	;volatile
  6745                           
  6746                           ;config.c: 62: TRISAbits.RA0=1;
  6747  00232A  8092               	bsf	3986,0,c	;volatile
  6748                           
  6749                           ;config.c: 64: ADCON0bits.ADON=1;
  6750  00232C  80C2               	bsf	4034,0,c	;volatile
  6751                           
  6752                           ;config.c: 66: PIE1bits.ADIE=1;
  6753  00232E  8C9D               	bsf	3997,6,c	;volatile
  6754                           
  6755                           ;config.c: 67: PIR1bits.ADIF=0;
  6756  002330  9C9E               	bcf	3998,6,c	;volatile
  6757                           
  6758                           ;config.c: 69: ADCON2bits.ACQT=0b111;
  6759  002332  86C0               	bsf	4032,3,c	;volatile
  6760  002334  88C0               	bsf	4032,4,c	;volatile
  6761  002336  8AC0               	bsf	4032,5,c	;volatile
  6762                           
  6763                           ;config.c: 70: ADCON0bits.GO=1;
  6764  002338  82C2               	bsf	4034,1,c	;volatile
  6765                           
  6766                           ;config.c: 72: RCIF=0;
  6767  00233A  9A9E               	bcf	3998,5,c	;volatile
  6768                           
  6769                           ;config.c: 75: TRISD=0;
  6770  00233C  0E00               	movlw	0
  6771  00233E  6E95               	movwf	3989,c	;volatile
  6772                           
  6773                           ;config.c: 76: PORTA=0;
  6774  002340  0E00               	movlw	0
  6775  002342  6E80               	movwf	3968,c	;volatile
  6776  002344  0012               	return		;funcret
  6777  002346                     __end_of_configBoard:
  6778                           	opt stack 0
  6779                           tblptru	equ	0xFF8
  6780                           tblptrh	equ	0xFF7
  6781                           tblptrl	equ	0xFF6
  6782                           tablat	equ	0xFF5
  6783                           prodh	equ	0xFF4
  6784                           prodl	equ	0xFF3
  6785                           intcon	equ	0xFF2
  6786                           postinc0	equ	0xFEE
  6787                           wreg	equ	0xFE8
  6788                           indf2	equ	0xFDF
  6789                           postinc2	equ	0xFDE
  6790                           postdec2	equ	0xFDD
  6791                           fsr2h	equ	0xFDA
  6792                           fsr2l	equ	0xFD9
  6793                           status	equ	0xFD8
  6794                           tblptru	equ	0xFF8
  6795                           tblptrh	equ	0xFF7
  6796                           tblptrl	equ	0xFF6
  6797                           tablat	equ	0xFF5
  6798                           prodh	equ	0xFF4
  6799                           prodl	equ	0xFF3
  6800                           intcon	equ	0xFF2
  6801                           postinc0	equ	0xFEE
  6802                           wreg	equ	0xFE8
  6803                           indf2	equ	0xFDF
  6804                           postinc2	equ	0xFDE
  6805                           postdec2	equ	0xFDD
  6806                           fsr2h	equ	0xFDA
  6807                           fsr2l	equ	0xFD9
  6808                           status	equ	0xFD8
  6809                           
  6810                           	psect	rparam
  6811  0000                     tblptru	equ	0xFF8
  6812                           tblptrh	equ	0xFF7
  6813                           tblptrl	equ	0xFF6
  6814                           tablat	equ	0xFF5
  6815                           prodh	equ	0xFF4
  6816                           prodl	equ	0xFF3
  6817                           intcon	equ	0xFF2
  6818                           postinc0	equ	0xFEE
  6819                           wreg	equ	0xFE8
  6820                           indf2	equ	0xFDF
  6821                           postinc2	equ	0xFDE
  6822                           postdec2	equ	0xFDD
  6823                           fsr2h	equ	0xFDA
  6824                           fsr2l	equ	0xFD9
  6825                           status	equ	0xFD8


Data Sizes:
    Strings     8
    Constant    118
    Data        2
    BSS         38
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     77      93
    BANK0           160     25      49
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_1(CODE[8]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 24
		 -> str(BANK0[24]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    lcd_texto@cadena	PTR unsigned char  size(2) Largest target is 24
		 -> str(BANK0[24]), 


Critical Paths under _main in COMRAM

    _main->_lcd_texto
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___ftsub->___ftadd
    ___ftadd->_fround
    _lcd_texto->_lcd_caracter
    _lcd_origen->_lcd_orden
    _lcd_iniciar->_lcd_orden
    _lcd_pulso->_wait_in_ms
    _wait_in_ms->___fttol
    ___fttol->_scale
    ___ftdiv->___awtoft
    ___awtoft->___ftpack

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  105223
                        _configBoard
                        _lcd_iniciar
                         _lcd_origen
                          _lcd_texto
                            _sprintf
                         _wait_in_ms
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             44    37      7   49995
                                             63 COMRAM    13     6      7
                                              0 BANK0     25    25      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                7     4      3   11907
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              10     7      3   11709
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2895
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    5085
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1664
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1820
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     455
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     598
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2650
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     615
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     466
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4120
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3775
                                             45 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     121
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     592
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _lcd_texto                                            3     1      2    7910
                                             74 COMRAM     3     1      2
                       _lcd_caracter
 ---------------------------------------------------------------------------------
 (2) _lcd_caracter                                         7     5      2    7789
                                             67 COMRAM     7     5      2
                          _lcd_pulso
 ---------------------------------------------------------------------------------
 (1) _lcd_origen                                           0     0      0   15990
                          _lcd_orden
                         _wait_in_ms
 ---------------------------------------------------------------------------------
 (1) _lcd_iniciar                                          0     0      0   23659
                          _lcd_orden
                          _lcd_pulso
                         _wait_in_ms
 ---------------------------------------------------------------------------------
 (2) _lcd_orden                                            7     5      2    8321
                                             67 COMRAM     7     5      2
                          _lcd_pulso
 ---------------------------------------------------------------------------------
 (3) _lcd_pulso                                            0     0      0    7669
                         _wait_in_ms
 ---------------------------------------------------------------------------------
 (1) _wait_in_ms                                          10     8      2    7669
                                             57 COMRAM    10     8      2
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     556
                                             42 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3063
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    2672
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2505
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _configBoard                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _configBoard
   _lcd_iniciar
     _lcd_orden
       _lcd_pulso
         _wait_in_ms
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
     _lcd_pulso
       _wait_in_ms
         ___awtoft
           ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
     _wait_in_ms
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _lcd_origen
     _lcd_orden
       _lcd_pulso
         _wait_in_ms
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
     _wait_in_ms
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _lcd_texto
     _lcd_caracter
       _lcd_pulso
         _wait_in_ms
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _wait_in_ms
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     19      31       5       30.6%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     4D      5D       1       97.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      8E      20        0.0%
DATA                 0      0      8E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Apr 11 20:26:23 2018

                     l84 20B8                       l85 20CE                       l86 20DC  
           ___awdiv@sign 000C                       _up 0056      ___wmul@multiplicand 0011  
            __CFG_BORV$3 000000             ___ftadd@exp1 0039             ___ftadd@exp2 0038  
           ___ftadd@sign 0037                      l300 0E5E                      l301 0E80  
                    l134 1F96                      l302 0FB2                      l311 1032  
                    l303 0ED0                      l232 166A                      l312 1054  
                    l137 1FCE                      l321 10F4                      l305 0FD4  
                    l138 1FD6                      l242 1300                      l314 1076  
                    l306 0FBE                      l250 08A6                      l235 1736  
                    l243 1450                      l315 107E                      l500 2238  
                    l316 10A2                      l308 0FF6                      l252 08D4  
                    l173 2614                      l245 1500                      l317 10AA  
                    l309 1012                      l174 25FA                      l238 1324  
                    l270 0B28                      l262 09B2                      l254 09A4  
                    l511 2394                      l239 1250                      l263 09DA  
                    l255 098E                      l600 184E                      l512 239E  
                    l504 235A                      l272 0B4E                      l256 0956  
                    l601 1844                      l513 23AC                      l505 2366  
                    l265 0FDE                      l273 0B8E                      l249 088E  
                    l610 1882                      l530 1B30                      l290 0D3E  
                    l274 0C56                      l266 09EE                      l523 1A72  
                    l507 237C                      l283 0CBC                      l267 0A30  
                    l259 09B6                      l612 18B0                      l508 2374  
                    l621 1DB4                      l613 18CC                      l525 1A90  
                    l293 0E16                      l277 0BFE                      l269 0AC2  
                    l622 1DF2                      l614 18FC                      l526 1AD2  
                    l630 19B4                      l294 0D82                      l519 25D4  
                    l623 1E18                      l535 1B64                      l527 1B02  
                    l631 19DC                      l287 0D28                      l536 1B58  
                    l640 1A30                      l296 0E36                      l561 2068  
                    l609 188C                      l713 2270                      l529 1B40  
                    l633 1A18                      l297 0E20                      l289 0D54  
                    l562 205E                      l714 2264                      l634 1A08  
                    l555 200C                      l619 1D8C                      l723 243C  
                    l627 194E                      l491 21D2                      l651 1BA4  
                    l299 0E5A                      l556 2002                      l644 215E  
                    l724 2430                      l492 21E2                      l645 218E  
                    l717 22A4                      l629 197A                      l653 1BCC  
                    l558 2040                      l662 2660                      l590 17F2  
                    l718 22B2                      l734 24FC                      l494 2200  
                    l654 1BFE                      l559 202A                      l727 2464  
                    l735 24F0                      l639 1A3C                      l495 21F8  
                    l655 1C0E                      l680 1D36                      l672 1C9C  
                    l728 2472                      l681 1D2A                      l657 1C26  
                    l674 1D12                      l586 17C8                      l498 2220  
                    l658 1C36                      l683 1D52                      l675 1D02  
                    l595 1858                      l499 222A                      l668 255C  
                    l687 2684                      _str 0079             ___awmod@sign 0006  
                    wreg 000FE8           ??_lcd_caracter 0046             __CFG_LVP$OFF 000000  
           ___ftdiv@cntr 0016             ___ftdiv@sign 001B             __CFG_WDT$OFF 000000  
                   l3000 0CC0                     l3020 0D3E                     l3024 0D4E  
                   l2162 21BA                     l3044 0E20                     l2326 1FD6  
                   l3134 10F0                     l2980 0BD8                     l2972 0B8E  
                   STR_1 0877                     u2020 1FC4                     u2110 17E4  
                   u2041 1786                     u2210 1894                     u2051 179A  
                   u2140 1822                     u3100 0E54                     u3030 0CF8  
                   u2080 17BA                     u2400 2380                     u2251 1B8C  
                   u2180 1860                     u2340 2204                     u3060 0D62  
                   u3230 10B2                     u2271 1BB4                     u3240 10D0  
                   u3090 0E44                     u2435 249A                     u1820 2072  
                   u2620 1A42                     u3260 110E                     u2445 23CC  
                   u2541 1932                     u1911 1C80                     u2561 195E  
                   u1930 1CBA                     u1851 1D74                     u1780 1FF4  
                   u2910 0A68                     u1871 1D9C                     u1935 1CB2  
                   u2760 2274                     u2840 0932                     u1970 1D3C  
                   u2690 1B6A                     u2915 0A5E                     u2790 2440  
                   u2950 0B60                     u2960 0BA0                     u1995 1F44  
                   _RCIF 007CF5                     u2990 0BD8                     _main 2092  
                   _down 005C             ___ftpack@arg 0001             ___ftpack@exp 0004  
                   fsr2h 000FDA                     indf2 000FDF                     fsr2l 000FD9  
                   prodh 000FF4                     prodl 000FF3                     start 0000  
           _sprintf$1570 0060            __CFG_MCLRE$ON 000000             ___ftmul@cntr 0022  
           ___param_bank 000000             ___ftmul@sign 0023     lcd_caracter@caracter 0044  
           ___fttol@exp1 0039             ___fttol@lval 0035            __CFG_PLLDIV$2 000000  
                  ?_main 0001          __end_of___awdiv 2242          __end_of___ftadd 1922  
                  _CCPR2 000FBB          __end_of___awmod 23B6          __end_of___ftdiv 1E4A  
        __end_of___ftneg 266E          __end_of___lldiv 22C4          __end_of___ftmul 1C70  
        ___awdiv@divisor 0009          __end_of___llmod 2484          __end_of___ftsub 2586  
        __end_of___fttol 1D64          ___awdiv@counter 000B                    _TMR1H 000FCF  
                  _TMR0L 000FD6                    _TMR1L 000FCE                    _PORTA 000F80  
                  _PORTD 000F83                    _TRISA 000F92                    _TRISB 000F93  
                  _TRISD 000F95             ___lltoft@exp 0011           __CFG_FCMEN$OFF 000000  
          ___awtoft@sign 000C          __end_of_dpowers 0829                    _scale 111C  
        __end_of_isdigit 268C            ___ftpack@sign 0005                    _valor 0058  
                  _print 005A                    tablat 000FF5                    status 000FD8  
        __end_of_sprintf 111C          __initialization 2586             __end_of_main 212E  
                 ??_main 004E            ___fttol@sign1 0034            __activetblptr 000002  
   __size_of__tdiv_to_l_ 0132                   _ADCON0 000FC2                   _CCP2IF 007D08  
       ___llmod@dividend 0001                   ?_scale 0024                   _ADRESH 000FC4  
                 _ADRESL 000FC3                   _T08BIT 007EAE         ___awdiv@dividend 0007  
                 _ADCval 0054         __end_of___awtoft 25F8         __end_of___ftpack 2092  
       __end_of___lltoft 2546                   _OSCCON 000FD3                   _TMR0IF 007F92  
                 _TMR1IF 007CF0                   _TMR0ON 007EAF     __size_of_configBoard 0082  
       __end_of__powers_ 0850     __end_of_lcd_caracter 241E                   ___ftge 212E  
   __size_of_lcd_iniciar 00CE                   ___wmul 2624                ??___awdiv 000B  
              ??___ftadd 0034                ??___awmod 0005                ??___ftdiv 0013  
              ??___ftneg 0004                ??___lldiv 0009                ??___ftmul 001B  
              ??___llmod 0009                ??___ftsub 0040                ??___fttol 002F  
                 _fround 1524                   clear_0 25A4                   clear_1 25B0  
       ___awdiv@quotient 000D          ___awmod@divisor 0003          ___awmod@counter 0005  
  ___ftmul@f3_as_product 001F             __pdataCOMRAM 005C                ??_isdigit 0001  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8                ??_sprintf 0047               __accesstop 0060  
__end_of__initialization 25B6               ___ftadd@f1 002E               ___ftadd@f2 0031  
             ___ftge@ff1 0001               ___ftge@ff2 0004            ___rparam_used 000001  
             ___ftdiv@f1 000D               ___ftdiv@f2 0010               ___ftdiv@f3 0017  
             ___ftneg@f1 0001               ___awtoft@c 0009               ___ftmul@f1 0015  
             ___ftmul@f2 0018               ___ftsub@f1 003A               ___ftsub@f2 003D  
             ___fttol@f1 002B           __pcstackCOMRAM 0001               ___lltoft@c 0009  
          __end_of_scale 1524               __div_to_l_ 1A54       __size_of_lcd_orden 0066  
     __size_of_lcd_texto 002C       __size_of_lcd_pulso 001E          __div_to_l_@exp1 000C  
        __div_to_l_@cntr 000B                  ??_scale 0027          __div_to_l_@quot 0007  
           sprintf@width 006B               __pbssBANK0 0079            __div_to_l_@f1 0001  
          __div_to_l_@f2 0004           lcd_orden@orden 0044                  ?___ftge 0001  
                ?___wmul 000F                  ?_fround 0024                ?___awtoft 0009  
              ?___ftpack 0001                ?___lltoft 0009               _lcd_origen 26AA  
  __size_of_lcd_caracter 0068        __end_of__npowers_ 0877                  __Hparam 0000  
             _scale$1569 0027                  __Lparam 0000        __end_of_lcd_orden 24EA  
        __size_of___ftge 0090        __end_of_lcd_texto 2624        __end_of_lcd_pulso 26AA  
                ___awdiv 21BE                  ___ftadd 1776                  ___awmod 2346  
                _Voltage 004E                  ___ftdiv 1D64                  ___ftneg 264A  
                ___lldiv 2242          __size_of___wmul 0026                  ___ftmul 1B7C  
                ___llmod 241E                  ___ftsub 2546                  ___fttol 1C70  
           __psmallconst 0800                  __pcinit 2586               ??___awtoft 000C  
             ??___ftpack 0006          __size_of_fround 0252                  __ramtop 0800  
             ??___lltoft 000D                  __ptext0 2092                  __ptext1 0880  
                __ptext2 111C                  __ptext3 266E                  __ptext4 1524  
                __ptext5 2624                  __ptext6 1B7C                  __ptext7 2346  
                __ptext8 21BE                  __ptext9 1922                _T0CONbits 000FD5  
              _T1CONbits 000FCD              ?__div_to_l_ 0001                  _dpowers 0801  
                _isdigit 266E                _T3CONbits 000FB1         ___awmod@dividend 0001  
           _lcd_caracter 23B6                  _sprintf 0880     end_of_initialization 25B6  
          __Lmediumconst 0000     wait_in_ms@time_in_ms 003A          ___lldiv@divisor 0005  
        ___lldiv@counter 000D                  postdec2 000FDD                  postinc0 000FEE  
                postinc2 000FDE               _wait_in_ms 1F18           __tdiv_to_l_@f1 0001  
         __tdiv_to_l_@f2 0004            ??__tdiv_to_l_ 0007                _PORTDbits 000F83  
              _TRISAbits 000F92                _TRISCbits 000F94                _TRISDbits 000F95  
            ?_lcd_origen 0001              ___ftdiv@exp 001A            ??_configBoard 0001  
            _CCP2CONbits 000FBA            ??_lcd_iniciar 004B      __size_of__div_to_l_ 0128  
            ___ftmul@exp 001E           __end_of___ftge 21BE           __end_of___wmul 264A  
          __pidataCOMRAM 26C4           __end_of_fround 1776      start_initialization 2586  
    __end_of__tdiv_to_l_ 1A54          wait_in_ms@count 0040          ___llmod@divisor 0005  
        ___llmod@counter 0009       wait_in_ms@count_ms 0042                 ??___ftge 0007  
               ??___wmul 0013      __end_of_configBoard 2346      __size_of_lcd_origen 001A  
            ?_wait_in_ms 003A      __end_of_lcd_iniciar 1F18                 ??_fround 0027  
          sprintf@tmpval 006D               fround@prec 002D        __size_of___awtoft 0038  
      __size_of___ftpack 00AE        __size_of___lltoft 005C              __pbssCOMRAM 004E  
          __pcstackBANK0 0060             _isdigit$1216 0002              sprintf@flag 0069  
            sprintf@fval 0073              sprintf@prec 0076                 ?___awdiv 0007  
               ?___ftadd 002E                 ?___awmod 0001                 ?___ftdiv 000D  
               ?___ftneg 0001                 ?___lldiv 0001                 ?___ftmul 0015  
               ?___llmod 0001                 ?___ftsub 003A                __npowers_ 0850  
               ?___fttol 002B                _lcd_orden 2484              __tdiv_to_l_ 1922  
              _lcd_texto 25F8                _lcd_pulso 268C             ??__div_to_l_ 0007  
            __smallconst 0800                 ?_isdigit 0001                 ?_sprintf 0040  
         __size_of_scale 0408      __size_of_wait_in_ms 00CC           ___wmul@product 0013  
            _configBoard 22C4                 _PIE1bits 000F9D                 _PIE2bits 000FA0  
            _lcd_iniciar 1E4A                 _PIR1bits 000F9E       __end_of__div_to_l_ 1B7C  
               _PIR2bits 000FA1               ?_lcd_orden 0044               ?_lcd_texto 004B  
             ?_lcd_pulso 0001               _ADCON0bits 000FC2               _ADCON1bits 000FC1  
             _ADCON2bits 000FC0        ___wmul@multiplier 000F               _ADCDecimal 0051  
           ??_lcd_origen 004B           wait_in_ms@flag 003E                 __Hrparam 0000  
               __Lrparam 0000       __end_of_lcd_origen 26C4         __size_of___awdiv 0084  
       __size_of___ftadd 01AC         __size_of___awmod 0070         __size_of___ftdiv 00E6  
       __size_of___ftneg 0024         __size_of___lldiv 0082         __size_of___ftmul 00F4  
       __size_of___llmod 0066         __size_of___ftsub 0040         __size_of___fttol 00F4  
               ___awtoft 25C0                 ___ftpack 1FE4              _fround$1567 002A  
            _fround$1568 0027                 ___lltoft 24EA               sprintf@exp 0071  
             sprintf@val 0065         __size_of_isdigit 001E                 __ptext10 1A54  
               __ptext11 24EA                 __ptext20 26AA                 __ptext12 241E  
               __ptext21 1E4A                 __ptext13 2242                 __ptext22 2484  
               __ptext14 2546                 __ptext23 268C                 __ptext15 1776  
               __ptext24 1F18                 __ptext16 264A                 __ptext25 1C70  
               __ptext17 212E                 __ptext26 1D64                 __ptext18 25F8  
               __ptext27 25C0                 __ptext19 23B6                 __ptext28 1FE4  
               __ptext29 22C4                 __powers_ 0829          lcd_texto@cadena 004B  
       __size_of_sprintf 089C            __size_of_main 009C             ??_wait_in_ms 003C  
            ??_lcd_orden 0046              ??_lcd_texto 004D              ??_lcd_pulso 0044  
  __CFG_CPUDIV$OSC1_PLL2 000000               _INTCONbits 000FF2                 isdigit@c 0003  
               scale@scl 002A                sprintf@ap 0063         __tdiv_to_l_@exp1 000F  
              sprintf@sp 0040         __tdiv_to_l_@cntr 000E         __tdiv_to_l_@quot 000A  
     __end_of_wait_in_ms 1FE4         ___lldiv@dividend 0001             ?__tdiv_to_l_ 0001  
               sprintf@c 0078                 sprintf@f 0042         ___lldiv@quotient 0009  
          ?_lcd_caracter 0044       __CFG_FOSC$HSPLL_HS 000000             ?_configBoard 0001  
           ?_lcd_iniciar 0001  
