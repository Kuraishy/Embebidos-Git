

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Feb 21 00:40:28 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1
    37                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text28,global,reloc=2,class=CODE,delta=1
    39                           	psect	text29,global,reloc=2,class=CODE,delta=1
    40                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    46                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    47                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    48                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    49  0000                     
    50                           ; Version 1.45
    51                           ; Generated 16/11/2017 GMT
    52                           ; 
    53                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    54                           ; All rights reserved.
    55                           ; 
    56                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    57                           ; 
    58                           ; Redistribution and use in source and binary forms, with or without modification, are
    59                           ; permitted provided that the following conditions are met:
    60                           ; 
    61                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    62                           ;        conditions and the following disclaimer.
    63                           ; 
    64                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    65                           ;        of conditions and the following disclaimer in the documentation and/or other
    66                           ;        materials provided with the distribution.
    67                           ; 
    68                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    69                           ;        software without specific prior written permission.
    70                           ; 
    71                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    72                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    73                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    74                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    75                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    76                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    77                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    78                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    79                           ; 
    80                           ; 
    81                           ; Code-generator required, PIC18F4550 Definitions
    82                           ; 
    83                           ; SFR Addresses
    84  0000                     
    85                           	psect	smallconst
    86  000800                     __psmallconst:
    87                           	opt stack 0
    88  000800  00                 	db	0
    89  000801                     _dpowers:
    90                           	opt stack 0
    91  000801  0001               	dw	1
    92  000803  0000               	dw	0
    93  000805  000A               	dw	10
    94  000807  0000               	dw	0
    95  000809  0064               	dw	100
    96  00080B  0000               	dw	0
    97  00080D  03E8               	dw	1000
    98  00080F  0000               	dw	0
    99  000811  2710               	dw	10000
   100  000813  0000               	dw	0
   101  000815  86A0               	dw	34464
   102  000817  0001               	dw	1
   103  000819  4240               	dw	16960
   104  00081B  000F               	dw	15
   105  00081D  9680               	dw	38528
   106  00081F  0098               	dw	152
   107  000821  E100               	dw	57600
   108  000823  05F5               	dw	1525
   109  000825  CA00               	dw	51712
   110  000827  3B9A               	dw	15258
   111  000829                     __end_of_dpowers:
   112                           	opt stack 0
   113  000829                     __powers_:
   114                           	opt stack 0
   115  000829  00                 	db	0
   116  00082A  80                 	db	128
   117  00082B  3F                 	db	63
   118  00082C  00                 	db	0
   119  00082D  20                 	db	32
   120  00082E  41                 	db	65
   121  00082F  00                 	db	0
   122  000830  C8                 	db	200
   123  000831  42                 	db	66
   124  000832  00                 	db	0
   125  000833  7A                 	db	122
   126  000834  44                 	db	68
   127  000835  40                 	db	64
   128  000836  1C                 	db	28
   129  000837  46                 	db	70
   130  000838  50                 	db	80
   131  000839  C3                 	db	195
   132  00083A  47                 	db	71
   133  00083B  24                 	db	36
   134  00083C  74                 	db	116
   135  00083D  49                 	db	73
   136  00083E  97                 	db	151
   137  00083F  18                 	db	24
   138  000840  4B                 	db	75
   139  000841  BC                 	db	188
   140  000842  BE                 	db	190
   141  000843  4C                 	db	76
   142  000844  6B                 	db	107
   143  000845  6E                 	db	110
   144  000846  4E                 	db	78
   145  000847  03                 	db	3
   146  000848  15                 	db	21
   147  000849  50                 	db	80
   148  00084A  79                 	db	121
   149  00084B  AD                 	db	173
   150  00084C  60                 	db	96
   151  00084D  F3                 	db	243
   152  00084E  49                 	db	73
   153  00084F  71                 	db	113
   154  000850                     __end_of__powers_:
   155                           	opt stack 0
   156  000850                     __npowers_:
   157                           	opt stack 0
   158  000850  00                 	db	0
   159  000851  80                 	db	128
   160  000852  3F                 	db	63
   161  000853  CD                 	db	205
   162  000854  CC                 	db	204
   163  000855  3D                 	db	61
   164  000856  D7                 	db	215
   165  000857  23                 	db	35
   166  000858  3C                 	db	60
   167  000859  12                 	db	18
   168  00085A  83                 	db	131
   169  00085B  3A                 	db	58
   170  00085C  B7                 	db	183
   171  00085D  D1                 	db	209
   172  00085E  38                 	db	56
   173  00085F  C6                 	db	198
   174  000860  27                 	db	39
   175  000861  37                 	db	55
   176  000862  38                 	db	56
   177  000863  86                 	db	134
   178  000864  35                 	db	53
   179  000865  C0                 	db	192
   180  000866  D6                 	db	214
   181  000867  33                 	db	51
   182  000868  CC                 	db	204
   183  000869  2B                 	db	43
   184  00086A  32                 	db	50
   185  00086B  70                 	db	112
   186  00086C  89                 	db	137
   187  00086D  30                 	db	48
   188  00086E  E7                 	db	231
   189  00086F  DB                 	db	219
   190  000870  2E                 	db	46
   191  000871  E5                 	db	229
   192  000872  3C                 	db	60
   193  000873  1E                 	db	30
   194  000874  42                 	db	66
   195  000875  A2                 	db	162
   196  000876  0D                 	db	13
   197  000877                     __end_of__npowers_:
   198                           	opt stack 0
   199  0000                     _PORTAbits	set	3968
   200  0000                     _ADRESL	set	4035
   201  0000                     _ADRESH	set	4036
   202  0000                     _PORTDbits	set	3971
   203  0000                     _TRISDbits	set	3989
   204  0000                     _T0CONbits	set	4053
   205  0000                     _PIR1bits	set	3998
   206  0000                     _PIE1bits	set	3997
   207  0000                     _INTCON3bits	set	4080
   208  0000                     _INTCON2bits	set	4081
   209  0000                     _INTCONbits	set	4082
   210  0000                     _TRISAbits	set	3986
   211  0000                     _TRISBbits	set	3987
   212  0000                     _PORTE	set	3972
   213  0000                     _PORTD	set	3971
   214  0000                     _PORTC	set	3970
   215  0000                     _PORTB	set	3969
   216  0000                     _PORTA	set	3968
   217  0000                     _TRISE	set	3990
   218  0000                     _TRISD	set	3989
   219  0000                     _TRISC	set	3988
   220  0000                     _TRISB	set	3987
   221  0000                     _TRISA	set	3986
   222  0000                     _ADCON2bits	set	4032
   223  0000                     _ADCON1bits	set	4033
   224  0000                     _ADCON0bits	set	4034
   225  0000                     _TMR0L	set	4054
   226  0000                     _TMR0IF	set	32658
   227  0000                     _TMR0ON	set	32431
   228  0000                     _T08BIT	set	32430
   229  0000                     _IPEN	set	32391
   230  000877                     STR_1:
   231  000877  76                 	db	118	;'v'
   232  000878  31                 	db	49	;'1'
   233  000879  3D                 	db	61	;'='
   234  00087A  20                 	db	32
   235  00087B  25                 	db	37
   236  00087C  30                 	db	48	;'0'
   237  00087D  2E                 	db	46
   238  00087E  32                 	db	50	;'2'
   239  00087F  66                 	db	102	;'f'
   240  000880  20                 	db	32
   241  000881  00                 	db	0
   242                           
   243                           ; #config settings
   244  000882  00                 	db	0	; dummy byte at the end
   245  0000                     
   246                           	psect	cinit
   247  002B1A                     __pcinit:
   248                           	opt stack 0
   249  002B1A                     start_initialization:
   250                           	opt stack 0
   251  002B1A                     __initialization:
   252                           	opt stack 0
   253                           
   254                           ; Clear objects allocated to COMRAM (10 bytes)
   255  002B1A  EE00  F043         	lfsr	0,__pbssCOMRAM
   256  002B1E  0E0A               	movlw	10
   257  002B20                     clear_0:
   258  002B20  6AEE               	clrf	postinc0,c
   259  002B22  06E8               	decf	wreg,f,c
   260  002B24  E1FD               	bnz	clear_0
   261  002B26                     end_of_initialization:
   262                           	opt stack 0
   263  002B26                     __end_of__initialization:
   264                           	opt stack 0
   265  002B26  904D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   266  002B28  924D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   267  002B2A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   268  002B2C  6EF8               	movwf	tblptru,c
   269  002B2E  0100               	movlb	0
   270  002B30  EFF0  F00C         	goto	_main	;jump to C main() function
   271                           tblptru	equ	0xFF8
   272                           postinc0	equ	0xFEE
   273                           wreg	equ	0xFE8
   274                           
   275                           	psect	bssCOMRAM
   276  000043                     __pbssCOMRAM:
   277                           	opt stack 0
   278  000043                     _count:
   279                           	opt stack 0
   280  000043                     	ds	2
   281  000045                     _pir1flag:
   282                           	opt stack 0
   283  000045                     	ds	2
   284  000047                     _int2flag:
   285                           	opt stack 0
   286  000047                     	ds	2
   287  000049                     _int1flag:
   288                           	opt stack 0
   289  000049                     	ds	2
   290  00004B                     _int0flag:
   291                           	opt stack 0
   292  00004B                     	ds	2
   293                           tblptru	equ	0xFF8
   294                           postinc0	equ	0xFEE
   295                           wreg	equ	0xFE8
   296                           
   297                           	psect	cstackBANK0
   298  000060                     __pcstackBANK0:
   299                           	opt stack 0
   300  000060                     ?___ftadd:
   301                           	opt stack 0
   302  000060                     ___ftdiv@cntr:
   303                           	opt stack 0
   304  000060                     ___ftadd@f1:
   305                           	opt stack 0
   306                           
   307                           ; 3 bytes @ 0x0
   308  000060                     	ds	1
   309  000061                     ___ftdiv@f3:
   310                           	opt stack 0
   311                           
   312                           ; 3 bytes @ 0x1
   313  000061                     	ds	2
   314  000063                     ___ftadd@f2:
   315                           	opt stack 0
   316                           
   317                           ; 3 bytes @ 0x3
   318  000063                     	ds	1
   319  000064                     ___ftdiv@exp:
   320                           	opt stack 0
   321                           
   322                           ; 1 bytes @ 0x4
   323  000064                     	ds	1
   324  000065                     ___ftdiv@sign:
   325                           	opt stack 0
   326                           
   327                           ; 1 bytes @ 0x5
   328  000065                     	ds	1
   329  000066                     ??___fttol:
   330  000066                     ___ftadd@sign:
   331                           	opt stack 0
   332                           
   333                           ; 1 bytes @ 0x6
   334  000066                     	ds	1
   335  000067                     ___ftadd@exp2:
   336                           	opt stack 0
   337                           
   338                           ; 1 bytes @ 0x7
   339  000067                     	ds	1
   340  000068                     ___ftadd@exp1:
   341                           	opt stack 0
   342                           
   343                           ; 1 bytes @ 0x8
   344  000068                     	ds	1
   345  000069                     ?___ftsub:
   346                           	opt stack 0
   347  000069                     ___ftsub@f1:
   348                           	opt stack 0
   349                           
   350                           ; 3 bytes @ 0x9
   351  000069                     	ds	2
   352  00006B                     ___fttol@sign1:
   353                           	opt stack 0
   354                           
   355                           ; 1 bytes @ 0xB
   356  00006B                     	ds	1
   357  00006C                     ___ftsub@f2:
   358                           	opt stack 0
   359  00006C                     ___fttol@lval:
   360                           	opt stack 0
   361                           
   362                           ; 4 bytes @ 0xC
   363  00006C                     	ds	4
   364  000070                     ___fttol@exp1:
   365                           	opt stack 0
   366                           
   367                           ; 1 bytes @ 0x10
   368  000070                     	ds	1
   369  000071                     ?_sprintf:
   370                           	opt stack 0
   371  000071                     wait_in_ms@time_in_ms:
   372                           	opt stack 0
   373  000071                     sprintf@sp:
   374                           	opt stack 0
   375                           
   376                           ; 2 bytes @ 0x11
   377  000071                     	ds	2
   378  000073                     ??_wait_in_ms:
   379  000073                     sprintf@f:
   380                           	opt stack 0
   381                           
   382                           ; 2 bytes @ 0x13
   383  000073                     	ds	2
   384  000075                     wait_in_ms@flag:
   385                           	opt stack 0
   386                           
   387                           ; 2 bytes @ 0x15
   388  000075                     	ds	2
   389  000077                     wait_in_ms@count:
   390                           	opt stack 0
   391                           
   392                           ; 2 bytes @ 0x17
   393  000077                     	ds	1
   394  000078                     ??_sprintf:
   395                           
   396                           ; 1 bytes @ 0x18
   397  000078                     	ds	1
   398  000079                     wait_in_ms@count_ms:
   399                           	opt stack 0
   400                           
   401                           ; 2 bytes @ 0x19
   402  000079                     	ds	2
   403  00007B                     ?_ADC_Read:
   404                           	opt stack 0
   405  00007B                     lcd_orden@orden:
   406                           	opt stack 0
   407  00007B                     lcd_caracter@caracter:
   408                           	opt stack 0
   409  00007B                     ADC_Read@channel:
   410                           	opt stack 0
   411                           
   412                           ; 2 bytes @ 0x1B
   413  00007B                     	ds	2
   414  00007D                     ??_lcd_orden:
   415  00007D                     ??_lcd_caracter:
   416  00007D                     ??_ADC_Read:
   417                           
   418                           ; 1 bytes @ 0x1D
   419  00007D                     	ds	1
   420  00007E                     _sprintf$1584:
   421                           	opt stack 0
   422                           
   423                           ; 3 bytes @ 0x1E
   424  00007E                     	ds	3
   425  000081                     sprintf@ap:
   426                           	opt stack 0
   427                           
   428                           ; 2 bytes @ 0x21
   429  000081                     	ds	1
   430  000082                     lcd_ubicarXY@columna:
   431                           	opt stack 0
   432  000082                     lcd_texto@cadena:
   433                           	opt stack 0
   434                           
   435                           ; 2 bytes @ 0x22
   436  000082                     	ds	1
   437  000083                     ??_lcd_ubicarXY:
   438  000083                     sprintf@val:
   439                           	opt stack 0
   440                           
   441                           ; 4 bytes @ 0x23
   442  000083                     	ds	1
   443  000084                     ??_lcd_texto:
   444                           
   445                           ; 1 bytes @ 0x24
   446  000084                     	ds	3
   447  000087                     sprintf@tmpval:
   448                           	opt stack 0
   449                           
   450                           ; 4 bytes @ 0x27
   451  000087                     	ds	1
   452  000088                     lcd_ubicarXY@i:
   453                           	opt stack 0
   454                           
   455                           ; 1 bytes @ 0x28
   456  000088                     	ds	1
   457  000089                     lcd_ubicarXY@i_695:
   458                           	opt stack 0
   459                           
   460                           ; 1 bytes @ 0x29
   461  000089                     	ds	1
   462  00008A                     lcd_ubicarXY@linea:
   463                           	opt stack 0
   464                           
   465                           ; 1 bytes @ 0x2A
   466  00008A                     	ds	1
   467  00008B                     sprintf@exp:
   468                           	opt stack 0
   469                           
   470                           ; 2 bytes @ 0x2B
   471  00008B                     	ds	2
   472  00008D                     sprintf@flag:
   473                           	opt stack 0
   474                           
   475                           ; 2 bytes @ 0x2D
   476  00008D                     	ds	2
   477  00008F                     sprintf@width:
   478                           	opt stack 0
   479                           
   480                           ; 2 bytes @ 0x2F
   481  00008F                     	ds	2
   482  000091                     sprintf@fval:
   483                           	opt stack 0
   484                           
   485                           ; 3 bytes @ 0x31
   486  000091                     	ds	3
   487  000094                     sprintf@prec:
   488                           	opt stack 0
   489                           
   490                           ; 2 bytes @ 0x34
   491  000094                     	ds	2
   492  000096                     sprintf@c:
   493                           	opt stack 0
   494                           
   495                           ; 1 bytes @ 0x36
   496  000096                     	ds	1
   497  000097                     main@voltaje_an1:
   498                           	opt stack 0
   499                           
   500                           ; 3 bytes @ 0x37
   501  000097                     	ds	3
   502  00009A                     main@an0:
   503                           	opt stack 0
   504                           
   505                           ; 2 bytes @ 0x3A
   506  00009A                     	ds	2
   507  00009C                     main@an1:
   508                           	opt stack 0
   509                           
   510                           ; 2 bytes @ 0x3C
   511  00009C                     	ds	2
   512  00009E                     main@voltaje_an0:
   513                           	opt stack 0
   514                           
   515                           ; 3 bytes @ 0x3E
   516  00009E                     	ds	3
   517  0000A1                     main@str:
   518                           	opt stack 0
   519                           
   520                           ; 2 bytes @ 0x41
   521  0000A1                     	ds	2
   522                           tblptru	equ	0xFF8
   523                           postinc0	equ	0xFEE
   524                           wreg	equ	0xFE8
   525                           
   526                           	psect	cstackCOMRAM
   527  000001                     __pcstackCOMRAM:
   528                           	opt stack 0
   529  000001                     ??_ADCint:
   530  000001                     
   531                           ; 1 bytes @ 0x0
   532  000001                     	ds	18
   533  000013                     ??_isdigit:
   534  000013                     ?___awmod:
   535                           	opt stack 0
   536  000013                     ?___ftpack:
   537                           	opt stack 0
   538  000013                     ?___ftneg:
   539                           	opt stack 0
   540  000013                     ?__tdiv_to_l_:
   541                           	opt stack 0
   542  000013                     ?__div_to_l_:
   543                           	opt stack 0
   544  000013                     ?___lldiv:
   545                           	opt stack 0
   546  000013                     ?___llmod:
   547                           	opt stack 0
   548  000013                     ___awmod@dividend:
   549                           	opt stack 0
   550  000013                     __div_to_l_@f1:
   551                           	opt stack 0
   552  000013                     ___ftpack@arg:
   553                           	opt stack 0
   554  000013                     __tdiv_to_l_@f1:
   555                           	opt stack 0
   556  000013                     ___ftge@ff1:
   557                           	opt stack 0
   558  000013                     ___ftneg@f1:
   559                           	opt stack 0
   560  000013                     ___lldiv@dividend:
   561                           	opt stack 0
   562  000013                     ___llmod@dividend:
   563                           	opt stack 0
   564                           
   565                           ; 4 bytes @ 0x12
   566  000013                     	ds	1
   567  000014                     _isdigit$1223:
   568                           	opt stack 0
   569                           
   570                           ; 1 bytes @ 0x13
   571  000014                     	ds	1
   572  000015                     isdigit@c:
   573                           	opt stack 0
   574  000015                     ___awmod@divisor:
   575                           	opt stack 0
   576                           
   577                           ; 2 bytes @ 0x14
   578  000015                     	ds	1
   579  000016                     ___ftpack@exp:
   580                           	opt stack 0
   581  000016                     __div_to_l_@f2:
   582                           	opt stack 0
   583  000016                     __tdiv_to_l_@f2:
   584                           	opt stack 0
   585  000016                     ___ftge@ff2:
   586                           	opt stack 0
   587                           
   588                           ; 3 bytes @ 0x15
   589  000016                     	ds	1
   590  000017                     ___awmod@counter:
   591                           	opt stack 0
   592  000017                     ___ftpack@sign:
   593                           	opt stack 0
   594  000017                     ___lldiv@divisor:
   595                           	opt stack 0
   596  000017                     ___llmod@divisor:
   597                           	opt stack 0
   598                           
   599                           ; 4 bytes @ 0x16
   600  000017                     	ds	1
   601  000018                     ??___ftpack:
   602  000018                     ___awmod@sign:
   603                           	opt stack 0
   604                           
   605                           ; 1 bytes @ 0x17
   606  000018                     	ds	1
   607  000019                     ??__tdiv_to_l_:
   608  000019                     ??___ftge:
   609  000019                     ?___awdiv:
   610                           	opt stack 0
   611  000019                     ___awdiv@dividend:
   612                           	opt stack 0
   613  000019                     __div_to_l_@quot:
   614                           	opt stack 0
   615                           
   616                           ; 4 bytes @ 0x18
   617  000019                     	ds	2
   618  00001B                     ?___awtoft:
   619                           	opt stack 0
   620  00001B                     ?___lltoft:
   621                           	opt stack 0
   622  00001B                     ?___lwtoft:
   623                           	opt stack 0
   624  00001B                     ___llmod@counter:
   625                           	opt stack 0
   626  00001B                     ___awdiv@divisor:
   627                           	opt stack 0
   628  00001B                     ___awtoft@c:
   629                           	opt stack 0
   630  00001B                     ___lwtoft@c:
   631                           	opt stack 0
   632  00001B                     ___lldiv@quotient:
   633                           	opt stack 0
   634  00001B                     ___lltoft@c:
   635                           	opt stack 0
   636                           
   637                           ; 4 bytes @ 0x1A
   638  00001B                     	ds	1
   639  00001C                     __tdiv_to_l_@quot:
   640                           	opt stack 0
   641                           
   642                           ; 4 bytes @ 0x1B
   643  00001C                     	ds	1
   644  00001D                     ___awdiv@counter:
   645                           	opt stack 0
   646  00001D                     __div_to_l_@cntr:
   647                           	opt stack 0
   648                           
   649                           ; 1 bytes @ 0x1C
   650  00001D                     	ds	1
   651  00001E                     ___awdiv@sign:
   652                           	opt stack 0
   653  00001E                     ___awtoft@sign:
   654                           	opt stack 0
   655  00001E                     __div_to_l_@exp1:
   656                           	opt stack 0
   657                           
   658                           ; 1 bytes @ 0x1D
   659  00001E                     	ds	1
   660  00001F                     ??___lltoft:
   661  00001F                     ___lldiv@counter:
   662                           	opt stack 0
   663  00001F                     ___awdiv@quotient:
   664                           	opt stack 0
   665                           
   666                           ; 2 bytes @ 0x1E
   667  00001F                     	ds	1
   668  000020                     __tdiv_to_l_@cntr:
   669                           	opt stack 0
   670                           
   671                           ; 1 bytes @ 0x1F
   672  000020                     	ds	1
   673  000021                     ?___wmul:
   674                           	opt stack 0
   675  000021                     __tdiv_to_l_@exp1:
   676                           	opt stack 0
   677  000021                     ___wmul@multiplier:
   678                           	opt stack 0
   679                           
   680                           ; 2 bytes @ 0x20
   681  000021                     	ds	2
   682  000023                     ___lltoft@exp:
   683                           	opt stack 0
   684  000023                     ___wmul@multiplicand:
   685                           	opt stack 0
   686                           
   687                           ; 2 bytes @ 0x22
   688  000023                     	ds	2
   689  000025                     ___wmul@product:
   690                           	opt stack 0
   691                           
   692                           ; 2 bytes @ 0x24
   693  000025                     	ds	2
   694  000027                     ?___ftmul:
   695                           	opt stack 0
   696  000027                     ___ftmul@f1:
   697                           	opt stack 0
   698                           
   699                           ; 3 bytes @ 0x26
   700  000027                     	ds	3
   701  00002A                     ___ftmul@f2:
   702                           	opt stack 0
   703                           
   704                           ; 3 bytes @ 0x29
   705  00002A                     	ds	3
   706  00002D                     ??___ftmul:
   707                           
   708                           ; 1 bytes @ 0x2C
   709  00002D                     	ds	3
   710  000030                     ___ftmul@exp:
   711                           	opt stack 0
   712                           
   713                           ; 1 bytes @ 0x2F
   714  000030                     	ds	1
   715  000031                     ___ftmul@f3_as_product:
   716                           	opt stack 0
   717                           
   718                           ; 3 bytes @ 0x30
   719  000031                     	ds	3
   720  000034                     ___ftmul@cntr:
   721                           	opt stack 0
   722                           
   723                           ; 1 bytes @ 0x33
   724  000034                     	ds	1
   725  000035                     ___ftmul@sign:
   726                           	opt stack 0
   727                           
   728                           ; 1 bytes @ 0x34
   729  000035                     	ds	1
   730  000036                     ?___ftdiv:
   731                           	opt stack 0
   732  000036                     ?_fround:
   733                           	opt stack 0
   734  000036                     ?_scale:
   735                           	opt stack 0
   736  000036                     ___ftdiv@f1:
   737                           	opt stack 0
   738                           
   739                           ; 3 bytes @ 0x35
   740  000036                     	ds	3
   741  000039                     ___ftdiv@f2:
   742                           	opt stack 0
   743  000039                     _fround$1582:
   744                           	opt stack 0
   745  000039                     _scale$1583:
   746                           	opt stack 0
   747                           
   748                           ; 3 bytes @ 0x38
   749  000039                     	ds	3
   750  00003C                     ??___ftdiv:
   751  00003C                     scale@scl:
   752                           	opt stack 0
   753  00003C                     _fround$1581:
   754                           	opt stack 0
   755                           
   756                           ; 3 bytes @ 0x3B
   757  00003C                     	ds	3
   758  00003F                     ?___fttol:
   759                           	opt stack 0
   760  00003F                     fround@prec:
   761                           	opt stack 0
   762  00003F                     ___fttol@f1:
   763                           	opt stack 0
   764                           
   765                           ; 3 bytes @ 0x3E
   766  00003F                     	ds	1
   767  000040                     ??___ftadd:
   768                           
   769                           ; 1 bytes @ 0x3F
   770  000040                     	ds	3
   771  000043                     tblptru	equ	0xFF8
   772                           postinc0	equ	0xFEE
   773                           wreg	equ	0xFE8
   774                           
   775                           ; 1 bytes @ 0x42
   776 ;;
   777 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   778 ;;
   779 ;; *************** function _main *****************
   780 ;; Defined at:
   781 ;;		line 143 in file "main_ADC_b.c"
   782 ;; Parameters:    Size  Location     Type
   783 ;;		None
   784 ;; Auto vars:     Size  Location     Type
   785 ;;  voltaje_an0     3   62[BANK0 ] float 
   786 ;;  voltaje_an1     3   55[BANK0 ] float 
   787 ;;  str             2   65[BANK0 ] unsigned char [2]
   788 ;;  an1             2   60[BANK0 ] unsigned int 
   789 ;;  an0             2   58[BANK0 ] unsigned int 
   790 ;; Return value:  Size  Location     Type
   791 ;;                  1    wreg      void 
   792 ;; Registers used:
   793 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   794 ;; Tracked objects:
   795 ;;		On entry : 0/0
   796 ;;		On exit  : 0/0
   797 ;;		Unchanged: 0/0
   798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   799 ;;      Params:         0       0       0       0       0       0       0       0       0
   800 ;;      Locals:         0      12       0       0       0       0       0       0       0
   801 ;;      Temps:          0       0       0       0       0       0       0       0       0
   802 ;;      Totals:         0      12       0       0       0       0       0       0       0
   803 ;;Total ram usage:       12 bytes
   804 ;; Hardware stack levels required when called:    8
   805 ;; This function calls:
   806 ;;		_ADC_Read
   807 ;;		___ftdiv
   808 ;;		___ftmul
   809 ;;		___lwtoft
   810 ;;		_configBoard
   811 ;;		_lcd_iniciar
   812 ;;		_lcd_limpiar
   813 ;;		_lcd_texto
   814 ;;		_lcd_ubicarXY
   815 ;;		_sprintf
   816 ;;		_wait_in_ms
   817 ;; This function is called by:
   818 ;;		Startup code after reset
   819 ;; This function uses a non-reentrant model
   820 ;;
   821                           
   822                           	psect	text0
   823  0019E0                     __ptext0:
   824                           	opt stack 0
   825  0019E0                     _main:
   826                           	opt stack 23
   827                           
   828                           ;main_ADC_b.c: 145: unsigned int an0;
   829                           ;main_ADC_b.c: 146: unsigned int an1;
   830                           ;main_ADC_b.c: 148: configBoard();
   831                           
   832                           ;incstack = 0
   833  0019E0  EC0A  F012         	call	_configBoard	;wreg free
   834                           
   835                           ;main_ADC_b.c: 150: lcd_iniciar();
   836  0019E4  ECC8  F010         	call	_lcd_iniciar	;wreg free
   837  0019E8                     
   838                           ;main_ADC_b.c: 155: ADCON0bits.ADON = 1;
   839  0019E8  80C2               	bsf	4034,0,c	;volatile
   840                           
   841                           ;main_ADC_b.c: 156: wait_in_ms(2);
   842  0019EA  0E00               	movlw	0
   843  0019EC  0100               	movlb	0	; () banked
   844  0019EE  6F72               	movwf	(wait_in_ms@time_in_ms+1)& (0+255),b
   845  0019F0  0E02               	movlw	2
   846  0019F2  6F71               	movwf	wait_in_ms@time_in_ms& (0+255),b
   847  0019F4  EC3B  F011         	call	_wait_in_ms	;wreg free
   848                           
   849                           ;main_ADC_b.c: 158: TRISAbits.RA0=1;
   850  0019F8  8092               	bsf	3986,0,c	;volatile
   851                           
   852                           ;main_ADC_b.c: 159: PORTAbits.RA0=0;
   853  0019FA  9080               	bcf	3968,0,c	;volatile
   854                           
   855                           ;main_ADC_b.c: 160: ADCON0bits.GO_nDONE = 1;
   856  0019FC  82C2               	bsf	4034,1,c	;volatile
   857  0019FE  B2C2               	btfsc	4034,1,c	;volatile
   858  001A00  D7FE               	goto	l207
   859                           
   860                           ;main_ADC_b.c: 163: float voltaje_an0 = 0;
   861  001A02  0E00               	movlw	0
   862  001A04  0100               	movlb	0	; () banked
   863  001A06  6F9E               	movwf	main@voltaje_an0& (0+255),b
   864  001A08  0E00               	movlw	0
   865  001A0A  6F9F               	movwf	(main@voltaje_an0+1)& (0+255),b
   866  001A0C  0E00               	movlw	0
   867  001A0E  6FA0               	movwf	(main@voltaje_an0+2)& (0+255),b
   868                           
   869                           ;main_ADC_b.c: 164: float voltaje_an1 = 0;
   870  001A10  0E00               	movlw	0
   871  001A12  6F97               	movwf	main@voltaje_an1& (0+255),b
   872  001A14  0E00               	movlw	0
   873  001A16  6F98               	movwf	(main@voltaje_an1+1)& (0+255),b
   874  001A18  0E00               	movlw	0
   875  001A1A  6F99               	movwf	(main@voltaje_an1+2)& (0+255),b
   876                           
   877                           ; BSR set to: 0
   878                           ;main_ADC_b.c: 166: an0 = ADC_Read(0);
   879  001A1C  0E00               	movlw	0
   880  001A1E  6F7C               	movwf	(ADC_Read@channel+1)& (0+255),b
   881  001A20  0E00               	movlw	0
   882  001A22  6F7B               	movwf	ADC_Read@channel& (0+255),b
   883  001A24  ECD6  F00E         	call	_ADC_Read	;wreg free
   884  001A28  C07B  F09A         	movff	?_ADC_Read,main@an0
   885  001A2C  C07C  F09B         	movff	?_ADC_Read+1,main@an0+1
   886                           
   887                           ;main_ADC_b.c: 167: wait_in_ms(2);
   888  001A30  0E00               	movlw	0
   889  001A32  0100               	movlb	0	; () banked
   890  001A34  6F72               	movwf	(wait_in_ms@time_in_ms+1)& (0+255),b
   891  001A36  0E02               	movlw	2
   892  001A38  6F71               	movwf	wait_in_ms@time_in_ms& (0+255),b
   893  001A3A  EC3B  F011         	call	_wait_in_ms	;wreg free
   894                           
   895                           ;main_ADC_b.c: 168: an1 = ADC_Read(1);
   896  001A3E  0E00               	movlw	0
   897  001A40  0100               	movlb	0	; () banked
   898  001A42  6F7C               	movwf	(ADC_Read@channel+1)& (0+255),b
   899  001A44  0E01               	movlw	1
   900  001A46  6F7B               	movwf	ADC_Read@channel& (0+255),b
   901  001A48  ECD6  F00E         	call	_ADC_Read	;wreg free
   902  001A4C  C07B  F09C         	movff	?_ADC_Read,main@an1
   903  001A50  C07C  F09D         	movff	?_ADC_Read+1,main@an1+1
   904                           
   905                           ;main_ADC_b.c: 170: voltaje_an0 = (an0 * 4.47)/1023;
   906  001A54  0E0A               	movlw	10
   907  001A56  6E2A               	movwf	___ftmul@f2,c
   908  001A58  0E8F               	movlw	143
   909  001A5A  6E2B               	movwf	___ftmul@f2+1,c
   910  001A5C  0E40               	movlw	64
   911  001A5E  6E2C               	movwf	___ftmul@f2+2,c
   912  001A60  C09A  F01B         	movff	main@an0,___lwtoft@c
   913  001A64  C09B  F01C         	movff	main@an0+1,___lwtoft@c+1
   914  001A68  EC3D  F015         	call	___lwtoft	;wreg free
   915  001A6C  C01B  F027         	movff	?___lwtoft,___ftmul@f1
   916  001A70  C01C  F028         	movff	?___lwtoft+1,___ftmul@f1+1
   917  001A74  C01D  F029         	movff	?___lwtoft+2,___ftmul@f1+2
   918  001A78  ECDA  F00F         	call	___ftmul	;wreg free
   919  001A7C  C027  F036         	movff	?___ftmul,___ftdiv@f1
   920  001A80  C028  F037         	movff	?___ftmul+1,___ftdiv@f1+1
   921  001A84  C029  F038         	movff	?___ftmul+2,___ftdiv@f1+2
   922  001A88  0EC0               	movlw	192
   923  001A8A  6E39               	movwf	___ftdiv@f2,c
   924  001A8C  0E7F               	movlw	127
   925  001A8E  6E3A               	movwf	___ftdiv@f2+1,c
   926  001A90  0E44               	movlw	68
   927  001A92  6E3B               	movwf	___ftdiv@f2+2,c
   928  001A94  EC54  F010         	call	___ftdiv	;wreg free
   929  001A98  C036  F09E         	movff	?___ftdiv,main@voltaje_an0
   930  001A9C  C037  F09F         	movff	?___ftdiv+1,main@voltaje_an0+1
   931  001AA0  C038  F0A0         	movff	?___ftdiv+2,main@voltaje_an0+2
   932                           
   933                           ;main_ADC_b.c: 171: voltaje_an1 = (an1 * 4.47)/1023;
   934  001AA4  0E0A               	movlw	10
   935  001AA6  6E2A               	movwf	___ftmul@f2,c
   936  001AA8  0E8F               	movlw	143
   937  001AAA  6E2B               	movwf	___ftmul@f2+1,c
   938  001AAC  0E40               	movlw	64
   939  001AAE  6E2C               	movwf	___ftmul@f2+2,c
   940  001AB0  C09C  F01B         	movff	main@an1,___lwtoft@c
   941  001AB4  C09D  F01C         	movff	main@an1+1,___lwtoft@c+1
   942  001AB8  EC3D  F015         	call	___lwtoft	;wreg free
   943  001ABC  C01B  F027         	movff	?___lwtoft,___ftmul@f1
   944  001AC0  C01C  F028         	movff	?___lwtoft+1,___ftmul@f1+1
   945  001AC4  C01D  F029         	movff	?___lwtoft+2,___ftmul@f1+2
   946  001AC8  ECDA  F00F         	call	___ftmul	;wreg free
   947  001ACC  C027  F036         	movff	?___ftmul,___ftdiv@f1
   948  001AD0  C028  F037         	movff	?___ftmul+1,___ftdiv@f1+1
   949  001AD4  C029  F038         	movff	?___ftmul+2,___ftdiv@f1+2
   950  001AD8  0EC0               	movlw	192
   951  001ADA  6E39               	movwf	___ftdiv@f2,c
   952  001ADC  0E7F               	movlw	127
   953  001ADE  6E3A               	movwf	___ftdiv@f2+1,c
   954  001AE0  0E44               	movlw	68
   955  001AE2  6E3B               	movwf	___ftdiv@f2+2,c
   956  001AE4  EC54  F010         	call	___ftdiv	;wreg free
   957  001AE8  C036  F097         	movff	?___ftdiv,main@voltaje_an1
   958  001AEC  C037  F098         	movff	?___ftdiv+1,main@voltaje_an1+1
   959  001AF0  C038  F099         	movff	?___ftdiv+2,main@voltaje_an1+2
   960                           
   961                           ;main_ADC_b.c: 174: lcd_limpiar();
   962  001AF4  EC7E  F015         	call	_lcd_limpiar	;wreg free
   963                           
   964                           ;main_ADC_b.c: 176: char str[2];
   965                           ;main_ADC_b.c: 178: sprintf(str,"v1= %0.2f ",voltaje_an0);
   966  001AF8  0EA1               	movlw	low main@str
   967  001AFA  0100               	movlb	0	; () banked
   968  001AFC  6F71               	movwf	sprintf@sp& (0+255),b
   969  001AFE  0E00               	movlw	high main@str
   970  001B00  6F72               	movwf	(sprintf@sp+1)& (0+255),b
   971  001B02  0E77               	movlw	low STR_1
   972  001B04  6F73               	movwf	sprintf@f& (0+255),b
   973  001B06  0E08               	movlw	high STR_1
   974  001B08  6F74               	movwf	(sprintf@f+1)& (0+255),b
   975  001B0A  C09E  F075         	movff	main@voltaje_an0,?_sprintf+4
   976  001B0E  C09F  F076         	movff	main@voltaje_an0+1,?_sprintf+5
   977  001B12  C0A0  F077         	movff	main@voltaje_an0+2,?_sprintf+6
   978  001B16  EC42  F004         	call	_sprintf	;wreg free
   979                           
   980                           ;main_ADC_b.c: 179: lcd_texto(str);
   981  001B1A  0EA1               	movlw	low main@str
   982  001B1C  0100               	movlb	0	; () banked
   983  001B1E  6F82               	movwf	lcd_texto@cadena& (0+255),b
   984  001B20  0E00               	movlw	high main@str
   985  001B22  6F83               	movwf	(lcd_texto@cadena+1)& (0+255),b
   986  001B24  EC00  F015         	call	_lcd_texto	;wreg free
   987                           
   988                           ;main_ADC_b.c: 182: lcd_ubicarXY(2,1);
   989  001B28  0E01               	movlw	1
   990  001B2A  0100               	movlb	0	; () banked
   991  001B2C  6F82               	movwf	lcd_ubicarXY@columna& (0+255),b
   992  001B2E  0E02               	movlw	2
   993  001B30  EC84  F013         	call	_lcd_ubicarXY
   994                           
   995                           ;main_ADC_b.c: 183: lcd_texto(str);
   996  001B34  0EA1               	movlw	low main@str
   997  001B36  0100               	movlb	0	; () banked
   998  001B38  6F82               	movwf	lcd_texto@cadena& (0+255),b
   999  001B3A  0E00               	movlw	high main@str
  1000  001B3C  6F83               	movwf	(lcd_texto@cadena+1)& (0+255),b
  1001  001B3E  EC00  F015         	call	_lcd_texto	;wreg free
  1002                           
  1003                           ;main_ADC_b.c: 185: wait_in_ms(200);
  1004  001B42  0E00               	movlw	0
  1005  001B44  0100               	movlb	0	; () banked
  1006  001B46  6F72               	movwf	(wait_in_ms@time_in_ms+1)& (0+255),b
  1007  001B48  0EC8               	movlw	200
  1008  001B4A  6F71               	movwf	wait_in_ms@time_in_ms& (0+255),b
  1009  001B4C  EC3B  F011         	call	_wait_in_ms	;wreg free
  1010  001B50  D74B               	goto	l205
  1011  001B52                     __end_of_main:
  1012                           	opt stack 0
  1013                           tblptru	equ	0xFF8
  1014                           postinc0	equ	0xFEE
  1015                           wreg	equ	0xFE8
  1016                           
  1017 ;; *************** function _sprintf *****************
  1018 ;; Defined at:
  1019 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  1020 ;; Parameters:    Size  Location     Type
  1021 ;;  sp              2   17[BANK0 ] PTR unsigned char 
  1022 ;;		 -> main@str(2), 
  1023 ;;  f               2   19[BANK0 ] PTR const unsigned char 
  1024 ;;		 -> STR_1(11), 
  1025 ;; Auto vars:     Size  Location     Type
  1026 ;;  tmpval          4   39[BANK0 ] struct .
  1027 ;;  val             4   35[BANK0 ] unsigned long 
  1028 ;;  fval            3   49[BANK0 ] unsigned long 
  1029 ;;  cp              3    0        PTR const unsigned char 
  1030 ;;  prec            2   52[BANK0 ] int 
  1031 ;;  width           2   47[BANK0 ] int 
  1032 ;;  flag            2   45[BANK0 ] unsigned short 
  1033 ;;  exp             2   43[BANK0 ] int 
  1034 ;;  ap              2   33[BANK0 ] PTR void [1]
  1035 ;;		 -> ?_sprintf(2), 
  1036 ;;  len             2    0        unsigned int 
  1037 ;;  c               1   54[BANK0 ] char 
  1038 ;;  d               1    0        unsigned char 
  1039 ;; Return value:  Size  Location     Type
  1040 ;;                  2   17[BANK0 ] int 
  1041 ;; Registers used:
  1042 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1043 ;; Tracked objects:
  1044 ;;		On entry : 0/0
  1045 ;;		On exit  : 0/0
  1046 ;;		Unchanged: 0/0
  1047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1048 ;;      Params:         0       7       0       0       0       0       0       0       0
  1049 ;;      Locals:         0      25       0       0       0       0       0       0       0
  1050 ;;      Temps:          0       6       0       0       0       0       0       0       0
  1051 ;;      Totals:         0      38       0       0       0       0       0       0       0
  1052 ;;Total ram usage:       38 bytes
  1053 ;; Hardware stack levels used:    1
  1054 ;; Hardware stack levels required when called:    4
  1055 ;; This function calls:
  1056 ;;		___awdiv
  1057 ;;		___ftadd
  1058 ;;		___ftge
  1059 ;;		___ftmul
  1060 ;;		___ftneg
  1061 ;;		___ftsub
  1062 ;;		___fttol
  1063 ;;		___lldiv
  1064 ;;		___llmod
  1065 ;;		___lltoft
  1066 ;;		___wmul
  1067 ;;		__div_to_l_
  1068 ;;		__tdiv_to_l_
  1069 ;;		_fround
  1070 ;;		_isdigit
  1071 ;;		_scale
  1072 ;; This function is called by:
  1073 ;;		_main
  1074 ;; This function uses a non-reentrant model
  1075 ;;
  1076                           
  1077                           	psect	text1
  1078  000884                     __ptext1:
  1079                           	opt stack 0
  1080  000884                     _sprintf:
  1081                           	opt stack 26
  1082                           
  1083                           ;doprnt.c: 494: va_list ap;
  1084                           ;doprnt.c: 499: signed char c;
  1085                           ;doprnt.c: 501: int width;
  1086                           ;doprnt.c: 504: int prec;
  1087                           ;doprnt.c: 508: unsigned short flag;
  1088                           ;doprnt.c: 515: char d;
  1089                           ;doprnt.c: 516: double fval;
  1090                           ;doprnt.c: 517: int exp;
  1091                           ;doprnt.c: 523: union {
  1092                           ;doprnt.c: 524: unsigned long vd;
  1093                           ;doprnt.c: 525: double integ;
  1094                           ;doprnt.c: 526: } tmpval;
  1095                           ;doprnt.c: 528: unsigned long val;
  1096                           ;doprnt.c: 529: unsigned len;
  1097                           ;doprnt.c: 530: const char * cp;
  1098                           ;doprnt.c: 533: *ap = __va_start();
  1099                           
  1100                           ;incstack = 0
  1101  000884  0E75               	movlw	low (?_sprintf+4)
  1102  000886  0100               	movlb	0	; () banked
  1103  000888  6F81               	movwf	sprintf@ap& (0+255),b
  1104  00088A  0E00               	movlw	high (?_sprintf+4)
  1105  00088C  6F82               	movwf	(sprintf@ap+1)& (0+255),b
  1106                           
  1107                           ;doprnt.c: 536: while(c = *f++) {
  1108  00088E  EFD8  F008         	goto	l337
  1109  000892                     
  1110                           ; BSR set to: 0
  1111                           ;doprnt.c: 538: if(c != '%')
  1112                           
  1113                           ; BSR set to: 0
  1114  000892  0E25               	movlw	37
  1115  000894  1996               	xorwf	sprintf@c& (0+255),w,b
  1116  000896  B4D8               	btfsc	status,2,c
  1117  000898  D008               	goto	l248
  1118                           
  1119                           ; BSR set to: 0
  1120                           ;doprnt.c: 540: {
  1121                           ;doprnt.c: 541: ((*sp++ = (c)));
  1122  00089A  C071  FFD9         	movff	sprintf@sp,fsr2l
  1123  00089E  C072  FFDA         	movff	sprintf@sp+1,fsr2h
  1124  0008A2  C096  FFDF         	movff	sprintf@c,indf2
  1125  0008A6  EFD6  F008         	goto	l4208
  1126  0008AA                     l248:
  1127                           
  1128                           ; BSR set to: 0
  1129                           ;doprnt.c: 543: }
  1130                           ;doprnt.c: 546: width = 0;
  1131                           
  1132                           ; BSR set to: 0
  1133  0008AA  0E00               	movlw	0
  1134  0008AC  6F90               	movwf	(sprintf@width+1)& (0+255),b
  1135  0008AE  0E00               	movlw	0
  1136  0008B0  6F8F               	movwf	sprintf@width& (0+255),b
  1137                           
  1138                           ;doprnt.c: 548: flag = 0;
  1139  0008B2  0E00               	movlw	0
  1140  0008B4  6F8E               	movwf	(sprintf@flag+1)& (0+255),b
  1141  0008B6  0E00               	movlw	0
  1142  0008B8  6F8D               	movwf	sprintf@flag& (0+255),b
  1143                           
  1144                           ; BSR set to: 0
  1145                           ;doprnt.c: 551: switch(*f) {
  1146                           
  1147                           ;doprnt.c: 550: for(;;) {
  1148  0008BA  D004               	goto	l250
  1149  0008BC                     
  1150                           ;doprnt.c: 580: flag |= 0x04;
  1151                           
  1152                           ; BSR set to: 0
  1153  0008BC  0100               	movlb	0	; () banked
  1154  0008BE  858D               	bsf	sprintf@flag& (0+255),2,b
  1155                           
  1156                           ;doprnt.c: 581: f++;
  1157  0008C0  4B73               	infsnz	sprintf@f& (0+255),f,b
  1158  0008C2  2B74               	incf	(sprintf@f+1)& (0+255),f,b
  1159  0008C4                     l250:
  1160                           
  1161                           ; BSR set to: 0
  1162  0008C4  C073  FFF6         	movff	sprintf@f,tblptrl
  1163  0008C8  C074  FFF7         	movff	sprintf@f+1,tblptrh
  1164  0008CC                     	if	0	;tblptru may be non-zero
  1165  0008CC                     	endif
  1166  0008CC                     	if	0	;tblptru may be non-zero
  1167  0008CC                     	endif
  1168  0008CC  0008               	tblrd		*
  1169  0008CE  50F5               	movf	tablat,w,c
  1170                           
  1171                           ; Switch size 1, requested type "space"
  1172                           ; Number of cases is 1, Range of values is 48 to 48
  1173                           ; switch strategies available:
  1174                           ; Name         Instructions Cycles
  1175                           ; simple_byte            4     3 (average)
  1176                           ;	Chosen strategy is simple_byte
  1177  0008D0  0A30               	xorlw	48	; case 48
  1178  0008D2  B4D8               	btfsc	status,2,c
  1179  0008D4  D7F3               	goto	l251
  1180                           
  1181                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1182                           
  1183                           ;doprnt.c: 586: }
  1184                           
  1185                           ;doprnt.c: 585: break;
  1186  0008D6  C073  FFF6         	movff	sprintf@f,tblptrl
  1187  0008DA  C074  FFF7         	movff	sprintf@f+1,tblptrh
  1188  0008DE                     	if	0	;tblptru may be non-zero
  1189  0008DE                     	endif
  1190  0008DE                     	if	0	;tblptru may be non-zero
  1191  0008DE                     	endif
  1192  0008DE  0008               	tblrd		*
  1193  0008E0  50F5               	movf	tablat,w,c
  1194  0008E2  EC60  F015         	call	_isdigit
  1195  0008E6  A0D8               	btfss	status,0,c
  1196  0008E8  D034               	goto	u4410
  1197                           
  1198                           ;doprnt.c: 598: width = 0;
  1199  0008EA  0E00               	movlw	0
  1200  0008EC  0100               	movlb	0	; () banked
  1201  0008EE  6F90               	movwf	(sprintf@width+1)& (0+255),b
  1202  0008F0  0E00               	movlw	0
  1203  0008F2  6F8F               	movwf	sprintf@width& (0+255),b
  1204  0008F4                     
  1205                           ;doprnt.c: 600: width *= 10;
  1206                           
  1207                           ; BSR set to: 0
  1208  0008F4  C08F  F021         	movff	sprintf@width,___wmul@multiplier
  1209  0008F8  C090  F022         	movff	sprintf@width+1,___wmul@multiplier+1
  1210  0008FC  0E00               	movlw	0
  1211  0008FE  6E24               	movwf	___wmul@multiplicand+1,c
  1212  000900  0E0A               	movlw	10
  1213  000902  6E23               	movwf	___wmul@multiplicand,c
  1214  000904  EC18  F015         	call	___wmul	;wreg free
  1215  000908  C021  F08F         	movff	?___wmul,sprintf@width
  1216  00090C  C022  F090         	movff	?___wmul+1,sprintf@width+1
  1217                           
  1218                           ;doprnt.c: 601: width += *f++ - '0';
  1219  000910  0ED0               	movlw	208
  1220  000912  0100               	movlb	0	; () banked
  1221  000914  6F78               	movwf	??_sprintf& (0+255),b
  1222  000916  0EFF               	movlw	255
  1223  000918  6F79               	movwf	(??_sprintf+1)& (0+255),b
  1224  00091A  C073  FFF6         	movff	sprintf@f,tblptrl
  1225  00091E  C074  FFF7         	movff	sprintf@f+1,tblptrh
  1226  000922                     	if	0	;tblptru may be non-zero
  1227  000922                     	endif
  1228  000922                     	if	0	;tblptru may be non-zero
  1229  000922                     	endif
  1230  000922  0008               	tblrd		*
  1231  000924  50F5               	movf	tablat,w,c
  1232  000926  6F7A               	movwf	(??_sprintf+2)& (0+255),b
  1233  000928  6B7B               	clrf	(??_sprintf+3)& (0+255),b
  1234  00092A  5178               	movf	??_sprintf& (0+255),w,b
  1235  00092C  277A               	addwf	(??_sprintf+2)& (0+255),f,b
  1236  00092E  5179               	movf	(??_sprintf+1)& (0+255),w,b
  1237  000930  237B               	addwfc	(??_sprintf+3)& (0+255),f,b
  1238  000932  517A               	movf	(??_sprintf+2)& (0+255),w,b
  1239  000934  278F               	addwf	sprintf@width& (0+255),f,b
  1240  000936  517B               	movf	(??_sprintf+3)& (0+255),w,b
  1241  000938  2390               	addwfc	(sprintf@width+1)& (0+255),f,b
  1242                           
  1243                           ; BSR set to: 0
  1244  00093A  4B73               	infsnz	sprintf@f& (0+255),f,b
  1245  00093C  2B74               	incf	(sprintf@f+1)& (0+255),f,b
  1246                           
  1247                           ; BSR set to: 0
  1248                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1249  00093E  C073  FFF6         	movff	sprintf@f,tblptrl
  1250  000942  C074  FFF7         	movff	sprintf@f+1,tblptrh
  1251  000946                     	if	0	;tblptru may be non-zero
  1252  000946                     	endif
  1253  000946                     	if	0	;tblptru may be non-zero
  1254  000946                     	endif
  1255  000946  0008               	tblrd		*
  1256  000948  50F5               	movf	tablat,w,c
  1257  00094A  EC60  F015         	call	_isdigit
  1258  00094E  B0D8               	btfsc	status,0,c
  1259  000950  D7D1               	goto	l256
  1260  000952                     u4410:
  1261                           
  1262                           ;doprnt.c: 608: }
  1263                           ;doprnt.c: 611: if(*f == '.') {
  1264  000952  C073  FFF6         	movff	sprintf@f,tblptrl
  1265  000956  C074  FFF7         	movff	sprintf@f+1,tblptrh
  1266  00095A                     	if	0	;tblptru may be non-zero
  1267  00095A                     	endif
  1268  00095A                     	if	0	;tblptru may be non-zero
  1269  00095A                     	endif
  1270  00095A  0008               	tblrd		*
  1271  00095C  50F5               	movf	tablat,w,c
  1272  00095E  0A2E               	xorlw	46
  1273  000960  A4D8               	btfss	status,2,c
  1274  000962  D030               	goto	l258
  1275                           
  1276                           ;doprnt.c: 612: flag |= 0x4000;
  1277  000964  0100               	movlb	0	; () banked
  1278  000966  8D8E               	bsf	(sprintf@flag+1)& (0+255),6,b
  1279                           
  1280                           ;doprnt.c: 613: f++;
  1281  000968  4B73               	infsnz	sprintf@f& (0+255),f,b
  1282  00096A  2B74               	incf	(sprintf@f+1)& (0+255),f,b
  1283                           
  1284                           ; BSR set to: 0
  1285                           ;doprnt.c: 620: {
  1286                           ;doprnt.c: 621: prec = 0;
  1287  00096C  0E00               	movlw	0
  1288  00096E  6F95               	movwf	(sprintf@prec+1)& (0+255),b
  1289  000970  0E00               	movlw	0
  1290  000972  6F94               	movwf	sprintf@prec& (0+255),b
  1291                           
  1292                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1293  000974  D01C               	goto	l259
  1294  000976                     
  1295                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1296                           
  1297                           ; BSR set to: 0
  1298  000976  C094  F021         	movff	sprintf@prec,___wmul@multiplier
  1299  00097A  C095  F022         	movff	sprintf@prec+1,___wmul@multiplier+1
  1300  00097E  0E00               	movlw	0
  1301  000980  6E24               	movwf	___wmul@multiplicand+1,c
  1302  000982  0E0A               	movlw	10
  1303  000984  6E23               	movwf	___wmul@multiplicand,c
  1304  000986  EC18  F015         	call	___wmul	;wreg free
  1305  00098A  C073  FFF6         	movff	sprintf@f,tblptrl
  1306  00098E  C074  FFF7         	movff	sprintf@f+1,tblptrh
  1307  000992                     	if	0	;tblptru may be non-zero
  1308  000992                     	endif
  1309  000992                     	if	0	;tblptru may be non-zero
  1310  000992                     	endif
  1311  000992  0008               	tblrd		*
  1312  000994  50F5               	movf	tablat,w,c
  1313  000996  2621               	addwf	?___wmul,f,c
  1314  000998  0E00               	movlw	0
  1315  00099A  2222               	addwfc	?___wmul+1,f,c
  1316  00099C  0ED0               	movlw	208
  1317  00099E  2421               	addwf	?___wmul,w,c
  1318  0009A0  0100               	movlb	0	; () banked
  1319  0009A2  6F94               	movwf	sprintf@prec& (0+255),b
  1320  0009A4  0EFF               	movlw	255
  1321  0009A6  2022               	addwfc	?___wmul+1,w,c
  1322  0009A8  6F95               	movwf	(sprintf@prec+1)& (0+255),b
  1323                           
  1324                           ; BSR set to: 0
  1325  0009AA  4B73               	infsnz	sprintf@f& (0+255),f,b
  1326  0009AC  2B74               	incf	(sprintf@f+1)& (0+255),f,b
  1327  0009AE                     l259:
  1328                           
  1329                           ; BSR set to: 0
  1330                           
  1331                           ; BSR set to: 0
  1332  0009AE  C073  FFF6         	movff	sprintf@f,tblptrl
  1333  0009B2  C074  FFF7         	movff	sprintf@f+1,tblptrh
  1334  0009B6                     	if	0	;tblptru may be non-zero
  1335  0009B6                     	endif
  1336  0009B6                     	if	0	;tblptru may be non-zero
  1337  0009B6                     	endif
  1338  0009B6  0008               	tblrd		*
  1339  0009B8  50F5               	movf	tablat,w,c
  1340  0009BA  EC60  F015         	call	_isdigit
  1341  0009BE  A0D8               	btfss	status,0,c
  1342  0009C0  D00A               	goto	l263
  1343  0009C2  D7D9               	goto	l260
  1344  0009C4                     l258:
  1345                           
  1346                           ;doprnt.c: 626: prec = 0;
  1347  0009C4  0E00               	movlw	0
  1348  0009C6  0100               	movlb	0	; () banked
  1349  0009C8  6F95               	movwf	(sprintf@prec+1)& (0+255),b
  1350  0009CA  0E00               	movlw	0
  1351  0009CC  6F94               	movwf	sprintf@prec& (0+255),b
  1352                           
  1353                           ; BSR set to: 0
  1354                           ;doprnt.c: 628: flag |= 0x1000;
  1355  0009CE  898E               	bsf	(sprintf@flag+1)& (0+255),4,b
  1356                           
  1357                           ; BSR set to: 0
  1358                           ;doprnt.c: 630: }
  1359                           ;doprnt.c: 635: switch(c = *f++) {
  1360  0009D0  D002               	goto	l263
  1361  0009D2                     
  1362                           ; BSR set to: 0
  1363                           ;doprnt.c: 663: flag |= 0x400;
  1364                           
  1365                           ; BSR set to: 0
  1366  0009D2  858E               	bsf	(sprintf@flag+1)& (0+255),2,b
  1367                           
  1368                           ;doprnt.c: 664: break;
  1369  0009D4  D012               	goto	l267
  1370  0009D6                     l263:
  1371                           
  1372                           ; BSR set to: 0
  1373  0009D6  C073  FFF6         	movff	sprintf@f,tblptrl
  1374  0009DA  C074  FFF7         	movff	sprintf@f+1,tblptrh
  1375  0009DE  0100               	movlb	0	; () banked
  1376  0009E0  4B73               	infsnz	sprintf@f& (0+255),f,b
  1377  0009E2  2B74               	incf	(sprintf@f+1)& (0+255),f,b
  1378  0009E4                     	if	0	;tblptru may be non-zero
  1379  0009E4                     	endif
  1380  0009E4                     	if	0	;tblptru may be non-zero
  1381  0009E4                     	endif
  1382  0009E4  0008               	tblrd		*
  1383  0009E6  CFF5 F096          	movff	tablat,sprintf@c
  1384  0009EA  5196               	movf	sprintf@c& (0+255),w,b
  1385                           
  1386                           ; Switch size 1, requested type "space"
  1387                           ; Number of cases is 2, Range of values is 0 to 102
  1388                           ; switch strategies available:
  1389                           ; Name         Instructions Cycles
  1390                           ; simple_byte            7     4 (average)
  1391                           ;	Chosen strategy is simple_byte
  1392  0009EC  0A00               	xorlw	0	; case 0
  1393  0009EE  B4D8               	btfsc	status,2,c
  1394  0009F0  D3EC               	goto	u4900
  1395  0009F2  0A66               	xorlw	102	; case 102
  1396  0009F4  B4D8               	btfsc	status,2,c
  1397  0009F6  D7ED               	goto	l266
  1398  0009F8  D3DB               	goto	l337
  1399  0009FA                     l267:
  1400                           
  1401                           ; BSR set to: 0
  1402                           ;doprnt.c: 825: if(flag & (0x700)) {
  1403                           
  1404                           ; BSR set to: 0
  1405  0009FA  0E07               	movlw	7
  1406  0009FC  158E               	andwf	(sprintf@flag+1)& (0+255),w,b
  1407  0009FE  B4D8               	btfsc	status,2,c
  1408  000A00  D328               	goto	l269
  1409                           
  1410                           ; BSR set to: 0
  1411                           ;doprnt.c: 827: if(flag & 0x1000)
  1412  000A02  A98E               	btfss	(sprintf@flag+1)& (0+255),4,b
  1413  000A04  D004               	goto	l270
  1414                           
  1415                           ; BSR set to: 0
  1416                           ;doprnt.c: 829: prec = 6;
  1417  000A06  0E00               	movlw	0
  1418  000A08  6F95               	movwf	(sprintf@prec+1)& (0+255),b
  1419  000A0A  0E06               	movlw	6
  1420  000A0C  6F94               	movwf	sprintf@prec& (0+255),b
  1421  000A0E                     l270:
  1422                           
  1423                           ; BSR set to: 0
  1424                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1425                           
  1426                           ; BSR set to: 0
  1427  000A0E  C081  FFD9         	movff	sprintf@ap,fsr2l
  1428  000A12  C082  FFDA         	movff	sprintf@ap+1,fsr2h
  1429  000A16  CFDE F091          	movff	postinc2,sprintf@fval
  1430  000A1A  CFDE F092          	movff	postinc2,sprintf@fval+1
  1431  000A1E  CFDD F093          	movff	postdec2,sprintf@fval+2
  1432                           
  1433                           ; BSR set to: 0
  1434  000A22  0E03               	movlw	3
  1435  000A24  2781               	addwf	sprintf@ap& (0+255),f,b
  1436  000A26  0E00               	movlw	0
  1437  000A28  2382               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1438                           
  1439                           ; BSR set to: 0
  1440                           ;doprnt.c: 831: if(fval < 0.0) {
  1441  000A2A  AF93               	btfss	(sprintf@fval+2)& (0+255),7,b
  1442  000A2C  D011               	goto	l271
  1443                           
  1444                           ; BSR set to: 0
  1445                           ;doprnt.c: 832: fval = -fval;
  1446  000A2E  C091  F013         	movff	sprintf@fval,___ftneg@f1
  1447  000A32  C092  F014         	movff	sprintf@fval+1,___ftneg@f1+1
  1448  000A36  C093  F015         	movff	sprintf@fval+2,___ftneg@f1+2
  1449  000A3A  EC2B  F015         	call	___ftneg	;wreg free
  1450  000A3E  C013  F091         	movff	?___ftneg,sprintf@fval
  1451  000A42  C014  F092         	movff	?___ftneg+1,sprintf@fval+1
  1452  000A46  C015  F093         	movff	?___ftneg+2,sprintf@fval+2
  1453                           
  1454                           ;doprnt.c: 833: flag |= 0x03;
  1455  000A4A  0E03               	movlw	3
  1456  000A4C  0100               	movlb	0	; () banked
  1457  000A4E  138D               	iorwf	sprintf@flag& (0+255),f,b
  1458  000A50                     l271:
  1459                           
  1460                           ; BSR set to: 0
  1461                           ;doprnt.c: 834: }
  1462                           ;doprnt.c: 835: exp = 0;
  1463                           
  1464                           ; BSR set to: 0
  1465  000A50  0E00               	movlw	0
  1466  000A52  6F8C               	movwf	(sprintf@exp+1)& (0+255),b
  1467  000A54  0E00               	movlw	0
  1468  000A56  6F8B               	movwf	sprintf@exp& (0+255),b
  1469                           
  1470                           ; BSR set to: 0
  1471                           ;doprnt.c: 836: if( fval!=0) {
  1472  000A58  5191               	movf	sprintf@fval& (0+255),w,b
  1473  000A5A  1192               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1474  000A5C  1193               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1475  000A5E  B4D8               	btfsc	status,2,c
  1476  000A60  D086               	goto	l276
  1477                           
  1478                           ; BSR set to: 0
  1479                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1480  000A62  0E82               	movlw	130
  1481  000A64  6F78               	movwf	??_sprintf& (0+255),b
  1482  000A66  0EFF               	movlw	255
  1483  000A68  6F79               	movwf	(??_sprintf+1)& (0+255),b
  1484  000A6A  C091  F07A         	movff	sprintf@fval,??_sprintf+2
  1485  000A6E  C092  F07B         	movff	sprintf@fval+1,??_sprintf+3
  1486  000A72  C093  F07C         	movff	sprintf@fval+2,??_sprintf+4
  1487  000A76  C094  F07D         	movff	sprintf@fval+3,??_sprintf+5
  1488  000A7A  0E10               	movlw	16
  1489  000A7C  D005               	goto	u4480
  1490  000A7E                     u4485:
  1491  000A7E  90D8               	bcf	status,0,c
  1492  000A80  337D               	rrcf	(??_sprintf+5)& (0+255),f,b
  1493  000A82  337C               	rrcf	(??_sprintf+4)& (0+255),f,b
  1494  000A84  337B               	rrcf	(??_sprintf+3)& (0+255),f,b
  1495  000A86  337A               	rrcf	(??_sprintf+2)& (0+255),f,b
  1496  000A88                     u4480:
  1497  000A88  2EE8               	decfsz	wreg,f,c
  1498  000A8A  D7F9               	goto	u4485
  1499  000A8C  517A               	movf	(??_sprintf+2)& (0+255),w,b
  1500  000A8E  2578               	addwf	??_sprintf& (0+255),w,b
  1501  000A90  6F8B               	movwf	sprintf@exp& (0+255),b
  1502  000A92  0E00               	movlw	0
  1503  000A94  2179               	addwfc	(??_sprintf+1)& (0+255),w,b
  1504  000A96  6F8C               	movwf	(sprintf@exp+1)& (0+255),b
  1505                           
  1506                           ; BSR set to: 0
  1507                           ;doprnt.c: 838: exp--;
  1508  000A98  078B               	decf	sprintf@exp& (0+255),f,b
  1509  000A9A  A0D8               	btfss	status,0,c
  1510  000A9C  078C               	decf	(sprintf@exp+1)& (0+255),f,b
  1511                           
  1512                           ; BSR set to: 0
  1513                           ;doprnt.c: 839: exp *= 3;
  1514  000A9E  C08B  F021         	movff	sprintf@exp,___wmul@multiplier
  1515  000AA2  C08C  F022         	movff	sprintf@exp+1,___wmul@multiplier+1
  1516  000AA6  0E00               	movlw	0
  1517  000AA8  6E24               	movwf	___wmul@multiplicand+1,c
  1518  000AAA  0E03               	movlw	3
  1519  000AAC  6E23               	movwf	___wmul@multiplicand,c
  1520  000AAE  EC18  F015         	call	___wmul	;wreg free
  1521  000AB2  C021  F08B         	movff	?___wmul,sprintf@exp
  1522  000AB6  C022  F08C         	movff	?___wmul+1,sprintf@exp+1
  1523                           
  1524                           ;doprnt.c: 840: exp /= 10;
  1525  000ABA  C08B  F019         	movff	sprintf@exp,___awdiv@dividend
  1526  000ABE  C08C  F01A         	movff	sprintf@exp+1,___awdiv@dividend+1
  1527  000AC2  0E00               	movlw	0
  1528  000AC4  6E1C               	movwf	___awdiv@divisor+1,c
  1529  000AC6  0E0A               	movlw	10
  1530  000AC8  6E1B               	movwf	___awdiv@divisor,c
  1531  000ACA  EC01  F013         	call	___awdiv	;wreg free
  1532  000ACE  C019  F08B         	movff	?___awdiv,sprintf@exp
  1533  000AD2  C01A  F08C         	movff	?___awdiv+1,sprintf@exp+1
  1534                           
  1535                           ;doprnt.c: 841: if(exp < 0)
  1536  000AD6  0100               	movlb	0	; () banked
  1537  000AD8  AF8C               	btfss	(sprintf@exp+1)& (0+255),7,b
  1538  000ADA  D003               	goto	l273
  1539                           
  1540                           ; BSR set to: 0
  1541                           ;doprnt.c: 842: exp--;
  1542  000ADC  078B               	decf	sprintf@exp& (0+255),f,b
  1543  000ADE  A0D8               	btfss	status,0,c
  1544  000AE0  078C               	decf	(sprintf@exp+1)& (0+255),f,b
  1545  000AE2                     l273:
  1546                           
  1547                           ; BSR set to: 0
  1548                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1549                           
  1550                           ; BSR set to: 0
  1551  000AE2  518B               	movf	sprintf@exp& (0+255),w,b
  1552  000AE4  0800               	sublw	0
  1553  000AE6  ECEC  F008         	call	_scale
  1554  000AEA  C036  F087         	movff	?_scale,sprintf@tmpval
  1555  000AEE  C037  F088         	movff	?_scale+1,sprintf@tmpval+1
  1556  000AF2  C038  F089         	movff	?_scale+2,sprintf@tmpval+2
  1557                           
  1558                           ;doprnt.c: 847: tmpval.integ *= fval;
  1559  000AF6  C087  F027         	movff	sprintf@tmpval,___ftmul@f1
  1560  000AFA  C088  F028         	movff	sprintf@tmpval+1,___ftmul@f1+1
  1561  000AFE  C089  F029         	movff	sprintf@tmpval+2,___ftmul@f1+2
  1562  000B02  C091  F02A         	movff	sprintf@fval,___ftmul@f2
  1563  000B06  C092  F02B         	movff	sprintf@fval+1,___ftmul@f2+1
  1564  000B0A  C093  F02C         	movff	sprintf@fval+2,___ftmul@f2+2
  1565  000B0E  ECDA  F00F         	call	___ftmul	;wreg free
  1566  000B12  C027  F087         	movff	?___ftmul,sprintf@tmpval
  1567  000B16  C028  F088         	movff	?___ftmul+1,sprintf@tmpval+1
  1568  000B1A  C029  F089         	movff	?___ftmul+2,sprintf@tmpval+2
  1569                           
  1570                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1571  000B1E  C087  F013         	movff	sprintf@tmpval,___ftge@ff1
  1572  000B22  C088  F014         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1573  000B26  C089  F015         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1574  000B2A  0E00               	movlw	0
  1575  000B2C  6E16               	movwf	___ftge@ff2,c
  1576  000B2E  0E80               	movlw	128
  1577  000B30  6E17               	movwf	___ftge@ff2+1,c
  1578  000B32  0E3F               	movlw	63
  1579  000B34  6E18               	movwf	___ftge@ff2+2,c
  1580  000B36  ECB9  F012         	call	___ftge	;wreg free
  1581  000B3A  B0D8               	btfsc	status,0,c
  1582  000B3C  D005               	goto	l274
  1583                           
  1584                           ;doprnt.c: 849: exp--;
  1585  000B3E  0100               	movlb	0	; () banked
  1586  000B40  078B               	decf	sprintf@exp& (0+255),f,b
  1587  000B42  A0D8               	btfss	status,0,c
  1588  000B44  078C               	decf	(sprintf@exp+1)& (0+255),f,b
  1589  000B46  D013               	goto	l276
  1590  000B48                     l274:
  1591                           
  1592                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1593                           
  1594                           ; BSR set to: 0
  1595  000B48  C087  F013         	movff	sprintf@tmpval,___ftge@ff1
  1596  000B4C  C088  F014         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1597  000B50  C089  F015         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1598  000B54  0E00               	movlw	0
  1599  000B56  6E16               	movwf	___ftge@ff2,c
  1600  000B58  0E20               	movlw	32
  1601  000B5A  6E17               	movwf	___ftge@ff2+1,c
  1602  000B5C  0E41               	movlw	65
  1603  000B5E  6E18               	movwf	___ftge@ff2+2,c
  1604  000B60  ECB9  F012         	call	___ftge	;wreg free
  1605  000B64  A0D8               	btfss	status,0,c
  1606  000B66  D003               	goto	l276
  1607                           
  1608                           ;doprnt.c: 851: exp++;
  1609  000B68  0100               	movlb	0	; () banked
  1610  000B6A  4B8B               	infsnz	sprintf@exp& (0+255),f,b
  1611  000B6C  2B8C               	incf	(sprintf@exp+1)& (0+255),f,b
  1612  000B6E                     l276:
  1613                           
  1614                           ;doprnt.c: 852: }
  1615                           ;doprnt.c: 1112: if(prec <= 12)
  1616                           
  1617                           ; BSR set to: 0
  1618                           
  1619                           ; BSR set to: 0
  1620                           
  1621                           ; BSR set to: 0
  1622  000B6E  0100               	movlb	0	; () banked
  1623  000B70  BF95               	btfsc	(sprintf@prec+1)& (0+255),7,b
  1624  000B72  D006               	goto	u4520
  1625  000B74  5195               	movf	(sprintf@prec+1)& (0+255),w,b
  1626  000B76  E11B               	bnz	l4014
  1627  000B78  0E0D               	movlw	13
  1628  000B7A  5D94               	subwf	sprintf@prec& (0+255),w,b
  1629  000B7C  B0D8               	btfsc	status,0,c
  1630  000B7E  D017               	goto	l277
  1631  000B80                     u4520:
  1632                           
  1633                           ; BSR set to: 0
  1634                           ;doprnt.c: 1113: fval += fround(prec);
  1635  000B80  C091  F060         	movff	sprintf@fval,___ftadd@f1
  1636  000B84  C092  F061         	movff	sprintf@fval+1,___ftadd@f1+1
  1637  000B88  C093  F062         	movff	sprintf@fval+2,___ftadd@f1+2
  1638  000B8C  5194               	movf	sprintf@prec& (0+255),w,b
  1639  000B8E  ECF0  F00A         	call	_fround
  1640  000B92  C036  F063         	movff	?_fround,___ftadd@f2
  1641  000B96  C037  F064         	movff	?_fround+1,___ftadd@f2+1
  1642  000B9A  C038  F065         	movff	?_fround+2,___ftadd@f2+2
  1643  000B9E  EC19  F00C         	call	___ftadd	;wreg free
  1644  000BA2  C060  F091         	movff	?___ftadd,sprintf@fval
  1645  000BA6  C061  F092         	movff	?___ftadd+1,sprintf@fval+1
  1646  000BAA  C062  F093         	movff	?___ftadd+2,sprintf@fval+2
  1647  000BAE                     l277:
  1648  000BAE                     l4014:
  1649                           
  1650                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1651  000BAE  0100               	movlb	0	; () banked
  1652  000BB0  BF8C               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1653  000BB2  D006               	goto	u4530
  1654  000BB4  518C               	movf	(sprintf@exp+1)& (0+255),w,b
  1655  000BB6  E120               	bnz	l4022
  1656  000BB8  0E0A               	movlw	10
  1657  000BBA  5D8B               	subwf	sprintf@exp& (0+255),w,b
  1658  000BBC  B0D8               	btfsc	status,0,c
  1659  000BBE  D01C               	goto	u4560
  1660  000BC0                     u4530:
  1661                           
  1662                           ; BSR set to: 0
  1663  000BC0  5191               	movf	sprintf@fval& (0+255),w,b
  1664  000BC2  1192               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1665  000BC4  1193               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1666  000BC6  B4D8               	btfsc	status,2,c
  1667  000BC8  D056               	goto	l278
  1668                           
  1669                           ; BSR set to: 0
  1670  000BCA  C091  F03F         	movff	sprintf@fval,___fttol@f1
  1671  000BCE  C092  F040         	movff	sprintf@fval+1,___fttol@f1+1
  1672  000BD2  C093  F041         	movff	sprintf@fval+2,___fttol@f1+2
  1673  000BD6  EC5E  F00F         	call	___fttol	;wreg free
  1674  000BDA  503F               	movf	?___fttol,w,c
  1675  000BDC  1040               	iorwf	?___fttol+1,w,c
  1676  000BDE  1041               	iorwf	?___fttol+2,w,c
  1677  000BE0  1042               	iorwf	?___fttol+3,w,c
  1678  000BE2  A4D8               	btfss	status,2,c
  1679  000BE4  D048               	goto	l278
  1680  000BE6  0100               	movlb	0	; () banked
  1681  000BE8  BF8C               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1682  000BEA  D045               	goto	l278
  1683  000BEC  518C               	movf	(sprintf@exp+1)& (0+255),w,b
  1684  000BEE  E104               	bnz	l4022
  1685  000BF0  0E02               	movlw	2
  1686  000BF2  5D8B               	subwf	sprintf@exp& (0+255),w,b
  1687  000BF4  A0D8               	btfss	status,0,c
  1688  000BF6  D03F               	goto	l278
  1689  000BF8                     u4560:
  1690  000BF8                     l4022:
  1691                           
  1692                           ; BSR set to: 0
  1693                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  1694  000BF8  C087  F013         	movff	sprintf@tmpval,___ftge@ff1
  1695  000BFC  C088  F014         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1696  000C00  C089  F015         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1697  000C04  0E70               	movlw	112
  1698  000C06  6E16               	movwf	___ftge@ff2,c
  1699  000C08  0E89               	movlw	137
  1700  000C0A  6E17               	movwf	___ftge@ff2+1,c
  1701  000C0C  0E40               	movlw	64
  1702  000C0E  6E18               	movwf	___ftge@ff2+2,c
  1703  000C10  ECB9  F012         	call	___ftge	;wreg free
  1704  000C14  B0D8               	btfsc	status,0,c
  1705  000C16  D003               	goto	l281
  1706                           
  1707                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1708  000C18  0100               	movlb	0	; () banked
  1709  000C1A  0EF7               	movlw	247
  1710  000C1C  D002               	goto	L1
  1711  000C1E                     l281:
  1712                           
  1713                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1714                           
  1715                           ; BSR set to: 0
  1716  000C1E  0100               	movlb	0	; () banked
  1717  000C20  0EF8               	movlw	248
  1718  000C22                     L1:
  1719  000C22  278B               	addwf	sprintf@exp& (0+255),f,b
  1720  000C24  0EFF               	movlw	255
  1721  000C26  238C               	addwfc	(sprintf@exp+1)& (0+255),f,b
  1722                           
  1723                           ; BSR set to: 0
  1724                           ;doprnt.c: 1124: }
  1725                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  1726                           
  1727                           ; BSR set to: 0
  1728  000C28  518B               	movf	sprintf@exp& (0+255),w,b
  1729  000C2A  ECEC  F008         	call	_scale
  1730  000C2E  C036  F087         	movff	?_scale,sprintf@tmpval
  1731  000C32  C037  F088         	movff	?_scale+1,sprintf@tmpval+1
  1732  000C36  C038  F089         	movff	?_scale+2,sprintf@tmpval+2
  1733                           
  1734                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  1735  000C3A  C091  F013         	movff	sprintf@fval,__tdiv_to_l_@f1
  1736  000C3E  C092  F014         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  1737  000C42  C093  F015         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  1738  000C46  C087  F016         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  1739  000C4A  C088  F017         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  1740  000C4E  C089  F018         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  1741  000C52  ECA9  F00D         	call	__tdiv_to_l_	;wreg free
  1742  000C56  C013  F083         	movff	?__tdiv_to_l_,sprintf@val
  1743  000C5A  C014  F084         	movff	?__tdiv_to_l_+1,sprintf@val+1
  1744  000C5E  C015  F085         	movff	?__tdiv_to_l_+2,sprintf@val+2
  1745  000C62  C016  F086         	movff	?__tdiv_to_l_+3,sprintf@val+3
  1746                           
  1747                           ;doprnt.c: 1129: fval = 0.0;
  1748  000C66  0E00               	movlw	0
  1749  000C68  0100               	movlb	0	; () banked
  1750  000C6A  6F91               	movwf	sprintf@fval& (0+255),b
  1751  000C6C  0E00               	movlw	0
  1752  000C6E  6F92               	movwf	(sprintf@fval+1)& (0+255),b
  1753  000C70  0E00               	movlw	0
  1754  000C72  6F93               	movwf	(sprintf@fval+2)& (0+255),b
  1755                           
  1756                           ;doprnt.c: 1130: } else {
  1757  000C74  D033               	goto	l287
  1758  000C76                     l278:
  1759                           
  1760                           ;doprnt.c: 1131: val = (unsigned long)fval;
  1761                           
  1762                           ; BSR set to: 0
  1763  000C76  C091  F03F         	movff	sprintf@fval,___fttol@f1
  1764  000C7A  C092  F040         	movff	sprintf@fval+1,___fttol@f1+1
  1765  000C7E  C093  F041         	movff	sprintf@fval+2,___fttol@f1+2
  1766  000C82  EC5E  F00F         	call	___fttol	;wreg free
  1767  000C86  C03F  F083         	movff	?___fttol,sprintf@val
  1768  000C8A  C040  F084         	movff	?___fttol+1,sprintf@val+1
  1769  000C8E  C041  F085         	movff	?___fttol+2,sprintf@val+2
  1770  000C92  C042  F086         	movff	?___fttol+3,sprintf@val+3
  1771                           
  1772                           ;doprnt.c: 1132: fval -= (double)val;
  1773  000C96  C091  F069         	movff	sprintf@fval,___ftsub@f1
  1774  000C9A  C092  F06A         	movff	sprintf@fval+1,___ftsub@f1+1
  1775  000C9E  C093  F06B         	movff	sprintf@fval+2,___ftsub@f1+2
  1776  000CA2  C083  F01B         	movff	sprintf@val,___lltoft@c
  1777  000CA6  C084  F01C         	movff	sprintf@val+1,___lltoft@c+1
  1778  000CAA  C085  F01D         	movff	sprintf@val+2,___lltoft@c+2
  1779  000CAE  C086  F01E         	movff	sprintf@val+3,___lltoft@c+3
  1780  000CB2  EC95  F014         	call	___lltoft	;wreg free
  1781  000CB6  C01B  F06C         	movff	?___lltoft,___ftsub@f2
  1782  000CBA  C01C  F06D         	movff	?___lltoft+1,___ftsub@f2+1
  1783  000CBE  C01D  F06E         	movff	?___lltoft+2,___ftsub@f2+2
  1784  000CC2  ECC3  F014         	call	___ftsub	;wreg free
  1785  000CC6  C069  F091         	movff	?___ftsub,sprintf@fval
  1786  000CCA  C06A  F092         	movff	?___ftsub+1,sprintf@fval+1
  1787  000CCE  C06B  F093         	movff	?___ftsub+2,sprintf@fval+2
  1788                           
  1789                           ;doprnt.c: 1133: exp = 0;
  1790  000CD2  0E00               	movlw	0
  1791  000CD4  0100               	movlb	0	; () banked
  1792  000CD6  6F8C               	movwf	(sprintf@exp+1)& (0+255),b
  1793  000CD8  0E00               	movlw	0
  1794  000CDA  6F8B               	movwf	sprintf@exp& (0+255),b
  1795  000CDC                     l287:
  1796                           
  1797                           ; BSR set to: 0
  1798                           ;doprnt.c: 1134: }
  1799                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  1800                           
  1801                           ; BSR set to: 0
  1802  000CDC  0E01               	movlw	1
  1803  000CDE  6F96               	movwf	sprintf@c& (0+255),b
  1804  000CE0                     l4042:
  1805                           
  1806                           ; BSR set to: 0
  1807  000CE0  0E0A               	movlw	10
  1808  000CE2  1996               	xorwf	sprintf@c& (0+255),w,b
  1809  000CE4  B4D8               	btfsc	status,2,c
  1810  000CE6  D018               	goto	u4600
  1811                           
  1812                           ; BSR set to: 0
  1813                           ;doprnt.c: 1137: if(val < dpowers[c])
  1814                           
  1815                           ; BSR set to: 0
  1816                           
  1817                           ; BSR set to: 0
  1818  000CE8  5196               	movf	sprintf@c& (0+255),w,b
  1819  000CEA  0D04               	mullw	4
  1820  000CEC  0E01               	movlw	low _dpowers
  1821  000CEE  24F3               	addwf	prodl,w,c
  1822  000CF0  6EF6               	movwf	tblptrl,c
  1823  000CF2  0E08               	movlw	high _dpowers
  1824  000CF4  20F4               	addwfc	prodh,w,c
  1825  000CF6  6EF7               	movwf	tblptrh,c
  1826  000CF8                     	if	0	;There are less than 3 active tblptr bytes
  1827  000CF8                     	endif
  1828  000CF8  0009               	tblrd		*+
  1829  000CFA  50F5               	movf	tablat,w,c
  1830  000CFC  5D83               	subwf	sprintf@val& (0+255),w,b
  1831  000CFE  0009               	tblrd		*+
  1832  000D00  50F5               	movf	tablat,w,c
  1833  000D02  5984               	subwfb	(sprintf@val+1)& (0+255),w,b
  1834  000D04  0009               	tblrd		*+
  1835  000D06  50F5               	movf	tablat,w,c
  1836  000D08  5985               	subwfb	(sprintf@val+2)& (0+255),w,b
  1837  000D0A  0009               	tblrd		*+
  1838  000D0C  50F5               	movf	tablat,w,c
  1839  000D0E  5986               	subwfb	(sprintf@val+3)& (0+255),w,b
  1840  000D10  A0D8               	btfss	status,0,c
  1841  000D12  D002               	goto	u4600
  1842                           
  1843                           ; BSR set to: 0
  1844                           
  1845                           ; BSR set to: 0
  1846                           
  1847                           ; BSR set to: 0
  1848                           ;doprnt.c: 1138: break;
  1849  000D14  2B96               	incf	sprintf@c& (0+255),f,b
  1850  000D16  D7E4               	goto	l4042
  1851  000D18                     u4600:
  1852                           
  1853                           ; BSR set to: 0
  1854                           ;doprnt.c: 1142: width -= prec + c + exp;
  1855                           
  1856                           ; BSR set to: 0
  1857  000D18  C096  F078         	movff	sprintf@c,??_sprintf
  1858  000D1C  6B79               	clrf	(??_sprintf+1)& (0+255),b
  1859  000D1E  BF78               	btfsc	??_sprintf& (0+255),7,b
  1860  000D20  0779               	decf	(??_sprintf+1)& (0+255),f,b
  1861  000D22  5194               	movf	sprintf@prec& (0+255),w,b
  1862  000D24  2778               	addwf	??_sprintf& (0+255),f,b
  1863  000D26  5195               	movf	(sprintf@prec+1)& (0+255),w,b
  1864  000D28  2379               	addwfc	(??_sprintf+1)& (0+255),f,b
  1865  000D2A  518B               	movf	sprintf@exp& (0+255),w,b
  1866  000D2C  2778               	addwf	??_sprintf& (0+255),f,b
  1867  000D2E  518C               	movf	(sprintf@exp+1)& (0+255),w,b
  1868  000D30  2379               	addwfc	(??_sprintf+1)& (0+255),f,b
  1869  000D32  5178               	movf	??_sprintf& (0+255),w,b
  1870  000D34  5F8F               	subwf	sprintf@width& (0+255),f,b
  1871  000D36  5179               	movf	(??_sprintf+1)& (0+255),w,b
  1872  000D38  5B90               	subwfb	(sprintf@width+1)& (0+255),f,b
  1873                           
  1874                           ;doprnt.c: 1143: if(
  1875                           ;doprnt.c: 1147: prec)
  1876  000D3A  5194               	movf	sprintf@prec& (0+255),w,b
  1877  000D3C  1195               	iorwf	(sprintf@prec+1)& (0+255),w,b
  1878  000D3E  B4D8               	btfsc	status,2,c
  1879  000D40  D003               	goto	l291
  1880                           
  1881                           ; BSR set to: 0
  1882                           ;doprnt.c: 1148: width--;
  1883  000D42  078F               	decf	sprintf@width& (0+255),f,b
  1884  000D44  A0D8               	btfss	status,0,c
  1885  000D46  0790               	decf	(sprintf@width+1)& (0+255),f,b
  1886  000D48                     l291:
  1887                           
  1888                           ; BSR set to: 0
  1889                           ;doprnt.c: 1149: if(flag & 0x03)
  1890                           
  1891                           ; BSR set to: 0
  1892  000D48  0E03               	movlw	3
  1893  000D4A  158D               	andwf	sprintf@flag& (0+255),w,b
  1894  000D4C  6F78               	movwf	??_sprintf& (0+255),b
  1895  000D4E  0E00               	movlw	0
  1896  000D50  158E               	andwf	(sprintf@flag+1)& (0+255),w,b
  1897  000D52  6F79               	movwf	(??_sprintf+1)& (0+255),b
  1898  000D54  5178               	movf	??_sprintf& (0+255),w,b
  1899  000D56  1179               	iorwf	(??_sprintf+1)& (0+255),w,b
  1900  000D58  B4D8               	btfsc	status,2,c
  1901  000D5A  D003               	goto	l292
  1902                           
  1903                           ; BSR set to: 0
  1904                           ;doprnt.c: 1150: width--;
  1905  000D5C  078F               	decf	sprintf@width& (0+255),f,b
  1906  000D5E  A0D8               	btfss	status,0,c
  1907  000D60  0790               	decf	(sprintf@width+1)& (0+255),f,b
  1908  000D62                     l292:
  1909                           
  1910                           ; BSR set to: 0
  1911                           ;doprnt.c: 1153: if(flag & 0x04) {
  1912                           
  1913                           ; BSR set to: 0
  1914  000D62  A58D               	btfss	sprintf@flag& (0+255),2,b
  1915  000D64  D031               	goto	l299
  1916                           
  1917                           ; BSR set to: 0
  1918                           ;doprnt.c: 1157: if(flag & 0x03)
  1919  000D66  0E03               	movlw	3
  1920  000D68  158D               	andwf	sprintf@flag& (0+255),w,b
  1921  000D6A  6F78               	movwf	??_sprintf& (0+255),b
  1922  000D6C  0E00               	movlw	0
  1923  000D6E  158E               	andwf	(sprintf@flag+1)& (0+255),w,b
  1924  000D70  6F79               	movwf	(??_sprintf+1)& (0+255),b
  1925  000D72  5178               	movf	??_sprintf& (0+255),w,b
  1926  000D74  1179               	iorwf	(??_sprintf+1)& (0+255),w,b
  1927  000D76  B4D8               	btfsc	status,2,c
  1928  000D78  D014               	goto	l295
  1929                           
  1930                           ; BSR set to: 0
  1931                           ;doprnt.c: 1159: ((*sp++ = ('-')));
  1932  000D7A  C071  FFD9         	movff	sprintf@sp,fsr2l
  1933  000D7E  C072  FFDA         	movff	sprintf@sp+1,fsr2h
  1934  000D82  0E2D               	movlw	45
  1935  000D84  6EDF               	movwf	indf2,c
  1936                           
  1937                           ; BSR set to: 0
  1938  000D86  4B71               	infsnz	sprintf@sp& (0+255),f,b
  1939  000D88  2B72               	incf	(sprintf@sp+1)& (0+255),f,b
  1940                           
  1941                           ; BSR set to: 0
  1942                           ;doprnt.c: 1168: while(width > 0) {
  1943  000D8A  D00B               	goto	l295
  1944  000D8C                     l4070:
  1945                           
  1946                           ; BSR set to: 0
  1947                           ;doprnt.c: 1169: ((*sp++ = ('0')));
  1948  000D8C  C071  FFD9         	movff	sprintf@sp,fsr2l
  1949  000D90  C072  FFDA         	movff	sprintf@sp+1,fsr2h
  1950  000D94  0E30               	movlw	48
  1951  000D96  6EDF               	movwf	indf2,c
  1952                           
  1953                           ; BSR set to: 0
  1954  000D98  4B71               	infsnz	sprintf@sp& (0+255),f,b
  1955  000D9A  2B72               	incf	(sprintf@sp+1)& (0+255),f,b
  1956                           
  1957                           ; BSR set to: 0
  1958                           ;doprnt.c: 1170: width--;
  1959  000D9C  078F               	decf	sprintf@width& (0+255),f,b
  1960  000D9E  A0D8               	btfss	status,0,c
  1961  000DA0  0790               	decf	(sprintf@width+1)& (0+255),f,b
  1962  000DA2                     l295:
  1963                           
  1964                           ; BSR set to: 0
  1965                           
  1966                           ; BSR set to: 0
  1967  000DA2  BF90               	btfsc	(sprintf@width+1)& (0+255),7,b
  1968  000DA4  D072               	goto	l303
  1969  000DA6  5190               	movf	(sprintf@width+1)& (0+255),w,b
  1970  000DA8  E1F1               	bnz	l4070
  1971  000DAA  058F               	decf	sprintf@width& (0+255),w,b
  1972  000DAC  A0D8               	btfss	status,0,c
  1973  000DAE  D06D               	goto	l303
  1974  000DB0  D7ED               	goto	l296
  1975  000DB2                     l4078:
  1976                           
  1977                           ; BSR set to: 0
  1978                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  1979  000DB2  C071  FFD9         	movff	sprintf@sp,fsr2l
  1980  000DB6  C072  FFDA         	movff	sprintf@sp+1,fsr2h
  1981  000DBA  0E20               	movlw	32
  1982  000DBC  6EDF               	movwf	indf2,c
  1983                           
  1984                           ; BSR set to: 0
  1985  000DBE  4B71               	infsnz	sprintf@sp& (0+255),f,b
  1986  000DC0  2B72               	incf	(sprintf@sp+1)& (0+255),f,b
  1987                           
  1988                           ; BSR set to: 0
  1989                           ;doprnt.c: 1182: width--;
  1990  000DC2  078F               	decf	sprintf@width& (0+255),f,b
  1991  000DC4  A0D8               	btfss	status,0,c
  1992  000DC6  0790               	decf	(sprintf@width+1)& (0+255),f,b
  1993  000DC8                     l299:
  1994                           
  1995                           ; BSR set to: 0
  1996                           
  1997                           ; BSR set to: 0
  1998  000DC8  BF90               	btfsc	(sprintf@width+1)& (0+255),7,b
  1999  000DCA  D005               	goto	u4660
  2000  000DCC  5190               	movf	(sprintf@width+1)& (0+255),w,b
  2001  000DCE  E1F1               	bnz	l4078
  2002  000DD0  058F               	decf	sprintf@width& (0+255),w,b
  2003  000DD2  B0D8               	btfsc	status,0,c
  2004  000DD4  D7EE               	goto	l300
  2005  000DD6                     u4660:
  2006                           
  2007                           ; BSR set to: 0
  2008                           ;doprnt.c: 1183: }
  2009                           ;doprnt.c: 1188: if(flag & 0x03)
  2010                           
  2011                           ; BSR set to: 0
  2012  000DD6  0E03               	movlw	3
  2013  000DD8  158D               	andwf	sprintf@flag& (0+255),w,b
  2014  000DDA  6F78               	movwf	??_sprintf& (0+255),b
  2015  000DDC  0E00               	movlw	0
  2016  000DDE  158E               	andwf	(sprintf@flag+1)& (0+255),w,b
  2017  000DE0  6F79               	movwf	(??_sprintf+1)& (0+255),b
  2018  000DE2  5178               	movf	??_sprintf& (0+255),w,b
  2019  000DE4  1179               	iorwf	(??_sprintf+1)& (0+255),w,b
  2020  000DE6  B4D8               	btfsc	status,2,c
  2021  000DE8  D050               	goto	l303
  2022                           
  2023                           ; BSR set to: 0
  2024                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  2025  000DEA  C071  FFD9         	movff	sprintf@sp,fsr2l
  2026  000DEE  C072  FFDA         	movff	sprintf@sp+1,fsr2h
  2027  000DF2  0E2D               	movlw	45
  2028  000DF4  D047               	goto	L2
  2029  000DF6                     
  2030                           ; BSR set to: 0
  2031                           ;doprnt.c: 1200: {
  2032                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2033                           
  2034                           ; BSR set to: 0
  2035  000DF6  C083  F013         	movff	sprintf@val,___lldiv@dividend
  2036  000DFA  C084  F014         	movff	sprintf@val+1,___lldiv@dividend+1
  2037  000DFE  C085  F015         	movff	sprintf@val+2,___lldiv@dividend+2
  2038  000E02  C086  F016         	movff	sprintf@val+3,___lldiv@dividend+3
  2039  000E06  5196               	movf	sprintf@c& (0+255),w,b
  2040  000E08  0D04               	mullw	4
  2041  000E0A  0E01               	movlw	low _dpowers
  2042  000E0C  24F3               	addwf	prodl,w,c
  2043  000E0E  6EF6               	movwf	tblptrl,c
  2044  000E10  0E08               	movlw	high _dpowers
  2045  000E12  20F4               	addwfc	prodh,w,c
  2046  000E14  6EF7               	movwf	tblptrh,c
  2047  000E16                     	if	0	;There are less than 3 active tblptr bytes
  2048  000E16                     	endif
  2049  000E16  0009               	tblrd		*+
  2050  000E18  CFF5 F017          	movff	tablat,___lldiv@divisor
  2051  000E1C  0009               	tblrd		*+
  2052  000E1E  CFF5 F018          	movff	tablat,___lldiv@divisor+1
  2053  000E22  0009               	tblrd		*+
  2054  000E24  CFF5 F019          	movff	tablat,___lldiv@divisor+2
  2055  000E28  000A               	tblrd		*-
  2056  000E2A  CFF5 F01A          	movff	tablat,___lldiv@divisor+3
  2057  000E2E  EC43  F013         	call	___lldiv	;wreg free
  2058  000E32  C013  F087         	movff	?___lldiv,sprintf@tmpval
  2059  000E36  C014  F088         	movff	?___lldiv+1,sprintf@tmpval+1
  2060  000E3A  C015  F089         	movff	?___lldiv+2,sprintf@tmpval+2
  2061  000E3E  C016  F08A         	movff	?___lldiv+3,sprintf@tmpval+3
  2062                           
  2063                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2064  000E42  C087  F013         	movff	sprintf@tmpval,___llmod@dividend
  2065  000E46  C088  F014         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2066  000E4A  C089  F015         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2067  000E4E  C08A  F016         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2068  000E52  0E0A               	movlw	10
  2069  000E54  6E17               	movwf	___llmod@divisor,c
  2070  000E56  0E00               	movlw	0
  2071  000E58  6E18               	movwf	___llmod@divisor+1,c
  2072  000E5A  0E00               	movlw	0
  2073  000E5C  6E19               	movwf	___llmod@divisor+2,c
  2074  000E5E  0E00               	movlw	0
  2075  000E60  6E1A               	movwf	___llmod@divisor+3,c
  2076  000E62  EC62  F014         	call	___llmod	;wreg free
  2077  000E66  C013  F087         	movff	?___llmod,sprintf@tmpval
  2078  000E6A  C014  F088         	movff	?___llmod+1,sprintf@tmpval+1
  2079  000E6E  C015  F089         	movff	?___llmod+2,sprintf@tmpval+2
  2080  000E72  C016  F08A         	movff	?___llmod+3,sprintf@tmpval+3
  2081                           
  2082                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  2083  000E76  0100               	movlb	0	; () banked
  2084  000E78  5187               	movf	sprintf@tmpval& (0+255),w,b
  2085  000E7A  0F30               	addlw	48
  2086  000E7C  C071  FFD9         	movff	sprintf@sp,fsr2l
  2087  000E80  C072  FFDA         	movff	sprintf@sp+1,fsr2h
  2088  000E84                     L2:
  2089  000E84  6EDF               	movwf	indf2,c
  2090                           
  2091                           ; BSR set to: 0
  2092  000E86  4B71               	infsnz	sprintf@sp& (0+255),f,b
  2093  000E88  2B72               	incf	(sprintf@sp+1)& (0+255),f,b
  2094  000E8A                     l303:
  2095                           
  2096                           ; BSR set to: 0
  2097                           
  2098                           ; BSR set to: 0
  2099  000E8A  0796               	decf	sprintf@c& (0+255),f,b
  2100  000E8C  2996               	incf	sprintf@c& (0+255),w,b
  2101  000E8E  B4D8               	btfsc	status,2,c
  2102  000E90  D00C               	goto	l306
  2103  000E92  D7B1               	goto	l304
  2104  000E94                     l4102:
  2105                           
  2106                           ; BSR set to: 0
  2107                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  2108  000E94  C071  FFD9         	movff	sprintf@sp,fsr2l
  2109  000E98  C072  FFDA         	movff	sprintf@sp+1,fsr2h
  2110  000E9C  0E30               	movlw	48
  2111  000E9E  6EDF               	movwf	indf2,c
  2112                           
  2113                           ; BSR set to: 0
  2114  000EA0  4B71               	infsnz	sprintf@sp& (0+255),f,b
  2115  000EA2  2B72               	incf	(sprintf@sp+1)& (0+255),f,b
  2116                           
  2117                           ; BSR set to: 0
  2118                           ;doprnt.c: 1209: exp--;
  2119  000EA4  078B               	decf	sprintf@exp& (0+255),f,b
  2120  000EA6  A0D8               	btfss	status,0,c
  2121  000EA8  078C               	decf	(sprintf@exp+1)& (0+255),f,b
  2122  000EAA                     l306:
  2123                           
  2124                           ; BSR set to: 0
  2125                           
  2126                           ; BSR set to: 0
  2127  000EAA  BF8C               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2128  000EAC  D005               	goto	u4690
  2129  000EAE  518C               	movf	(sprintf@exp+1)& (0+255),w,b
  2130  000EB0  E1F1               	bnz	l4102
  2131  000EB2  058B               	decf	sprintf@exp& (0+255),w,b
  2132  000EB4  B0D8               	btfsc	status,0,c
  2133  000EB6  D7EE               	goto	l307
  2134  000EB8                     u4690:
  2135                           
  2136                           ; BSR set to: 0
  2137                           ;doprnt.c: 1210: }
  2138                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2139                           
  2140                           ; BSR set to: 0
  2141  000EB8  BF95               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2142  000EBA  D009               	goto	l309
  2143  000EBC  5195               	movf	(sprintf@prec+1)& (0+255),w,b
  2144  000EBE  E104               	bnz	u4700
  2145  000EC0  0E09               	movlw	9
  2146  000EC2  5D94               	subwf	sprintf@prec& (0+255),w,b
  2147  000EC4  A0D8               	btfss	status,0,c
  2148  000EC6  D003               	goto	l309
  2149  000EC8                     u4700:
  2150                           
  2151                           ; BSR set to: 0
  2152                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2153  000EC8  0E08               	movlw	8
  2154  000ECA  6F96               	movwf	sprintf@c& (0+255),b
  2155  000ECC  D002               	goto	l310
  2156  000ECE                     l309:
  2157                           
  2158                           ; BSR set to: 0
  2159                           ;doprnt.c: 1213: else
  2160                           ;doprnt.c: 1214: c = prec;
  2161  000ECE  C094  F096         	movff	sprintf@prec,sprintf@c
  2162  000ED2                     l310:
  2163                           
  2164                           ; BSR set to: 0
  2165                           ;doprnt.c: 1215: prec -= c;
  2166                           
  2167                           ; BSR set to: 0
  2168  000ED2  5196               	movf	sprintf@c& (0+255),w,b
  2169  000ED4  5F94               	subwf	sprintf@prec& (0+255),f,b
  2170  000ED6  0E00               	movlw	0
  2171  000ED8  BF96               	btfsc	sprintf@c& (0+255),7,b
  2172  000EDA  0EFF               	movlw	255
  2173  000EDC  5B95               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2174                           
  2175                           ; BSR set to: 0
  2176                           ;doprnt.c: 1219: if(c)
  2177  000EDE  5196               	movf	sprintf@c& (0+255),w,b
  2178  000EE0  B4D8               	btfsc	status,2,c
  2179  000EE2  D008               	goto	l311
  2180                           
  2181                           ; BSR set to: 0
  2182                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  2183  000EE4  C071  FFD9         	movff	sprintf@sp,fsr2l
  2184  000EE8  C072  FFDA         	movff	sprintf@sp+1,fsr2h
  2185  000EEC  0E2E               	movlw	46
  2186  000EEE  6EDF               	movwf	indf2,c
  2187                           
  2188                           ; BSR set to: 0
  2189  000EF0  4B71               	infsnz	sprintf@sp& (0+255),f,b
  2190  000EF2  2B72               	incf	(sprintf@sp+1)& (0+255),f,b
  2191  000EF4                     l311:
  2192                           
  2193                           ; BSR set to: 0
  2194                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2195                           
  2196                           ; BSR set to: 0
  2197  000EF4  5196               	movf	sprintf@c& (0+255),w,b
  2198  000EF6  ECEC  F008         	call	_scale
  2199  000EFA  C036  F07E         	movff	?_scale,_sprintf$1584
  2200  000EFE  C037  F07F         	movff	?_scale+1,_sprintf$1584+1
  2201  000F02  C038  F080         	movff	?_scale+2,_sprintf$1584+2
  2202                           
  2203                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2204  000F06  C091  F02A         	movff	sprintf@fval,___ftmul@f2
  2205  000F0A  C092  F02B         	movff	sprintf@fval+1,___ftmul@f2+1
  2206  000F0E  C093  F02C         	movff	sprintf@fval+2,___ftmul@f2+2
  2207  000F12  C07E  F027         	movff	_sprintf$1584,___ftmul@f1
  2208  000F16  C07F  F028         	movff	_sprintf$1584+1,___ftmul@f1+1
  2209  000F1A  C080  F029         	movff	_sprintf$1584+2,___ftmul@f1+2
  2210  000F1E  ECDA  F00F         	call	___ftmul	;wreg free
  2211  000F22  C027  F03F         	movff	?___ftmul,___fttol@f1
  2212  000F26  C028  F040         	movff	?___ftmul+1,___fttol@f1+1
  2213  000F2A  C029  F041         	movff	?___ftmul+2,___fttol@f1+2
  2214  000F2E  EC5E  F00F         	call	___fttol	;wreg free
  2215  000F32  C03F  F083         	movff	?___fttol,sprintf@val
  2216  000F36  C040  F084         	movff	?___fttol+1,sprintf@val+1
  2217  000F3A  C041  F085         	movff	?___fttol+2,sprintf@val+2
  2218  000F3E  C042  F086         	movff	?___fttol+3,sprintf@val+3
  2219                           
  2220                           ;doprnt.c: 1228: while(c--) {
  2221  000F42  D071               	goto	l312
  2222  000F44                     
  2223                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2224  000F44  C083  F013         	movff	sprintf@val,___lldiv@dividend
  2225  000F48  C084  F014         	movff	sprintf@val+1,___lldiv@dividend+1
  2226  000F4C  C085  F015         	movff	sprintf@val+2,___lldiv@dividend+2
  2227  000F50  C086  F016         	movff	sprintf@val+3,___lldiv@dividend+3
  2228  000F54  0100               	movlb	0	; () banked
  2229  000F56  5196               	movf	sprintf@c& (0+255),w,b
  2230  000F58  0D04               	mullw	4
  2231  000F5A  0E01               	movlw	low _dpowers
  2232  000F5C  24F3               	addwf	prodl,w,c
  2233  000F5E  6EF6               	movwf	tblptrl,c
  2234  000F60  0E08               	movlw	high _dpowers
  2235  000F62  20F4               	addwfc	prodh,w,c
  2236  000F64  6EF7               	movwf	tblptrh,c
  2237  000F66                     	if	0	;There are less than 3 active tblptr bytes
  2238  000F66                     	endif
  2239  000F66  0009               	tblrd		*+
  2240  000F68  CFF5 F017          	movff	tablat,___lldiv@divisor
  2241  000F6C  0009               	tblrd		*+
  2242  000F6E  CFF5 F018          	movff	tablat,___lldiv@divisor+1
  2243  000F72  0009               	tblrd		*+
  2244  000F74  CFF5 F019          	movff	tablat,___lldiv@divisor+2
  2245  000F78  000A               	tblrd		*-
  2246  000F7A  CFF5 F01A          	movff	tablat,___lldiv@divisor+3
  2247  000F7E  EC43  F013         	call	___lldiv	;wreg free
  2248  000F82  C013  F087         	movff	?___lldiv,sprintf@tmpval
  2249  000F86  C014  F088         	movff	?___lldiv+1,sprintf@tmpval+1
  2250  000F8A  C015  F089         	movff	?___lldiv+2,sprintf@tmpval+2
  2251  000F8E  C016  F08A         	movff	?___lldiv+3,sprintf@tmpval+3
  2252                           
  2253                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2254  000F92  C087  F013         	movff	sprintf@tmpval,___llmod@dividend
  2255  000F96  C088  F014         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2256  000F9A  C089  F015         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2257  000F9E  C08A  F016         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2258  000FA2  0E0A               	movlw	10
  2259  000FA4  6E17               	movwf	___llmod@divisor,c
  2260  000FA6  0E00               	movlw	0
  2261  000FA8  6E18               	movwf	___llmod@divisor+1,c
  2262  000FAA  0E00               	movlw	0
  2263  000FAC  6E19               	movwf	___llmod@divisor+2,c
  2264  000FAE  0E00               	movlw	0
  2265  000FB0  6E1A               	movwf	___llmod@divisor+3,c
  2266  000FB2  EC62  F014         	call	___llmod	;wreg free
  2267  000FB6  C013  F087         	movff	?___llmod,sprintf@tmpval
  2268  000FBA  C014  F088         	movff	?___llmod+1,sprintf@tmpval+1
  2269  000FBE  C015  F089         	movff	?___llmod+2,sprintf@tmpval+2
  2270  000FC2  C016  F08A         	movff	?___llmod+3,sprintf@tmpval+3
  2271                           
  2272                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  2273  000FC6  0100               	movlb	0	; () banked
  2274  000FC8  5187               	movf	sprintf@tmpval& (0+255),w,b
  2275  000FCA  0F30               	addlw	48
  2276  000FCC  C071  FFD9         	movff	sprintf@sp,fsr2l
  2277  000FD0  C072  FFDA         	movff	sprintf@sp+1,fsr2h
  2278  000FD4  6EDF               	movwf	indf2,c
  2279                           
  2280                           ; BSR set to: 0
  2281  000FD6  4B71               	infsnz	sprintf@sp& (0+255),f,b
  2282  000FD8  2B72               	incf	(sprintf@sp+1)& (0+255),f,b
  2283                           
  2284                           ; BSR set to: 0
  2285                           ;doprnt.c: 1232: val %= dpowers[c];
  2286  000FDA  C083  F013         	movff	sprintf@val,___llmod@dividend
  2287  000FDE  C084  F014         	movff	sprintf@val+1,___llmod@dividend+1
  2288  000FE2  C085  F015         	movff	sprintf@val+2,___llmod@dividend+2
  2289  000FE6  C086  F016         	movff	sprintf@val+3,___llmod@dividend+3
  2290  000FEA  5196               	movf	sprintf@c& (0+255),w,b
  2291  000FEC  0D04               	mullw	4
  2292  000FEE  0E01               	movlw	low _dpowers
  2293  000FF0  24F3               	addwf	prodl,w,c
  2294  000FF2  6EF6               	movwf	tblptrl,c
  2295  000FF4  0E08               	movlw	high _dpowers
  2296  000FF6  20F4               	addwfc	prodh,w,c
  2297  000FF8  6EF7               	movwf	tblptrh,c
  2298  000FFA                     	if	0	;There are less than 3 active tblptr bytes
  2299  000FFA                     	endif
  2300  000FFA  0009               	tblrd		*+
  2301  000FFC  CFF5 F017          	movff	tablat,___llmod@divisor
  2302  001000  0009               	tblrd		*+
  2303  001002  CFF5 F018          	movff	tablat,___llmod@divisor+1
  2304  001006  0009               	tblrd		*+
  2305  001008  CFF5 F019          	movff	tablat,___llmod@divisor+2
  2306  00100C  000A               	tblrd		*-
  2307  00100E  CFF5 F01A          	movff	tablat,___llmod@divisor+3
  2308  001012  EC62  F014         	call	___llmod	;wreg free
  2309  001016  C013  F083         	movff	?___llmod,sprintf@val
  2310  00101A  C014  F084         	movff	?___llmod+1,sprintf@val+1
  2311  00101E  C015  F085         	movff	?___llmod+2,sprintf@val+2
  2312  001022  C016  F086         	movff	?___llmod+3,sprintf@val+3
  2313  001026                     l312:
  2314  001026  0100               	movlb	0	; () banked
  2315  001028  0796               	decf	sprintf@c& (0+255),f,b
  2316  00102A  2996               	incf	sprintf@c& (0+255),w,b
  2317  00102C  B4D8               	btfsc	status,2,c
  2318  00102E  D00C               	goto	l315
  2319  001030  D789               	goto	l313
  2320  001032                     
  2321                           ; BSR set to: 0
  2322                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  2323                           
  2324                           ; BSR set to: 0
  2325  001032  C071  FFD9         	movff	sprintf@sp,fsr2l
  2326  001036  C072  FFDA         	movff	sprintf@sp+1,fsr2h
  2327  00103A  0E30               	movlw	48
  2328  00103C  6EDF               	movwf	indf2,c
  2329                           
  2330                           ; BSR set to: 0
  2331  00103E  4B71               	infsnz	sprintf@sp& (0+255),f,b
  2332  001040  2B72               	incf	(sprintf@sp+1)& (0+255),f,b
  2333                           
  2334                           ; BSR set to: 0
  2335                           ;doprnt.c: 1237: prec--;
  2336  001042  0794               	decf	sprintf@prec& (0+255),f,b
  2337  001044  A0D8               	btfss	status,0,c
  2338  001046  0795               	decf	(sprintf@prec+1)& (0+255),f,b
  2339  001048                     l315:
  2340                           
  2341                           ; BSR set to: 0
  2342                           
  2343                           ; BSR set to: 0
  2344  001048  5194               	movf	sprintf@prec& (0+255),w,b
  2345  00104A  1195               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2346  00104C  B4D8               	btfsc	status,2,c
  2347  00104E  D0B0               	goto	l337
  2348  001050  D7F0               	goto	l316
  2349  001052                     l269:
  2350                           
  2351                           ; BSR set to: 0
  2352                           ;doprnt.c: 1246: }
  2353                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2354                           
  2355                           ; BSR set to: 0
  2356  001052  5194               	movf	sprintf@prec& (0+255),w,b
  2357  001054  1195               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2358  001056  A4D8               	btfss	status,2,c
  2359  001058  D008               	goto	l318
  2360                           
  2361                           ; BSR set to: 0
  2362  00105A  5183               	movf	sprintf@val& (0+255),w,b
  2363  00105C  1184               	iorwf	(sprintf@val+1)& (0+255),w,b
  2364  00105E  1185               	iorwf	(sprintf@val+2)& (0+255),w,b
  2365  001060  1186               	iorwf	(sprintf@val+3)& (0+255),w,b
  2366  001062  A4D8               	btfss	status,2,c
  2367  001064  D002               	goto	l318
  2368                           
  2369                           ; BSR set to: 0
  2370                           ;doprnt.c: 1291: prec++;
  2371  001066  4B94               	infsnz	sprintf@prec& (0+255),f,b
  2372  001068  2B95               	incf	(sprintf@prec+1)& (0+255),f,b
  2373  00106A                     l318:
  2374                           
  2375                           ; BSR set to: 0
  2376                           ;doprnt.c: 1339: if(c < prec)
  2377                           
  2378                           ; BSR set to: 0
  2379  00106A  0E80               	movlw	128
  2380  00106C  BF96               	btfsc	sprintf@c& (0+255),7,b
  2381  00106E  0E7F               	movlw	127
  2382  001070  6F78               	movwf	??_sprintf& (0+255),b
  2383  001072  5194               	movf	sprintf@prec& (0+255),w,b
  2384  001074  5D96               	subwf	sprintf@c& (0+255),w,b
  2385  001076  5195               	movf	(sprintf@prec+1)& (0+255),w,b
  2386  001078  0A80               	xorlw	128
  2387  00107A  5978               	subwfb	??_sprintf& (0+255),w,b
  2388  00107C  B0D8               	btfsc	status,0,c
  2389  00107E  D003               	goto	l319
  2390                           
  2391                           ; BSR set to: 0
  2392                           ;doprnt.c: 1340: c = prec;
  2393  001080  C094  F096         	movff	sprintf@prec,sprintf@c
  2394  001084  D010               	goto	l321
  2395  001086                     l319:
  2396                           
  2397                           ; BSR set to: 0
  2398                           ;doprnt.c: 1341: else if(prec < c)
  2399                           
  2400                           ; BSR set to: 0
  2401  001086  5195               	movf	(sprintf@prec+1)& (0+255),w,b
  2402  001088  0A80               	xorlw	128
  2403  00108A  6F78               	movwf	??_sprintf& (0+255),b
  2404  00108C  5196               	movf	sprintf@c& (0+255),w,b
  2405  00108E  5D94               	subwf	sprintf@prec& (0+255),w,b
  2406  001090  0E80               	movlw	128
  2407  001092  BF96               	btfsc	sprintf@c& (0+255),7,b
  2408  001094  0E7F               	movlw	127
  2409  001096  5978               	subwfb	??_sprintf& (0+255),w,b
  2410  001098  B0D8               	btfsc	status,0,c
  2411  00109A  D005               	goto	l321
  2412                           
  2413                           ; BSR set to: 0
  2414                           ;doprnt.c: 1342: prec = c;
  2415  00109C  5196               	movf	sprintf@c& (0+255),w,b
  2416  00109E  6F94               	movwf	sprintf@prec& (0+255),b
  2417  0010A0  6B95               	clrf	(sprintf@prec+1)& (0+255),b
  2418  0010A2  BF94               	btfsc	sprintf@prec& (0+255),7,b
  2419  0010A4  0795               	decf	(sprintf@prec+1)& (0+255),f,b
  2420  0010A6                     l321:
  2421                           
  2422                           ; BSR set to: 0
  2423                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2424                           
  2425                           ; BSR set to: 0
  2426                           
  2427                           ; BSR set to: 0
  2428  0010A6  518F               	movf	sprintf@width& (0+255),w,b
  2429  0010A8  1190               	iorwf	(sprintf@width+1)& (0+255),w,b
  2430  0010AA  B4D8               	btfsc	status,2,c
  2431  0010AC  D00D               	goto	l322
  2432                           
  2433                           ; BSR set to: 0
  2434  0010AE  0E03               	movlw	3
  2435  0010B0  158D               	andwf	sprintf@flag& (0+255),w,b
  2436  0010B2  6F78               	movwf	??_sprintf& (0+255),b
  2437  0010B4  0E00               	movlw	0
  2438  0010B6  158E               	andwf	(sprintf@flag+1)& (0+255),w,b
  2439  0010B8  6F79               	movwf	(??_sprintf+1)& (0+255),b
  2440  0010BA  5178               	movf	??_sprintf& (0+255),w,b
  2441  0010BC  1179               	iorwf	(??_sprintf+1)& (0+255),w,b
  2442  0010BE  B4D8               	btfsc	status,2,c
  2443  0010C0  D003               	goto	l322
  2444                           
  2445                           ; BSR set to: 0
  2446                           ;doprnt.c: 1346: width--;
  2447  0010C2  078F               	decf	sprintf@width& (0+255),f,b
  2448  0010C4  A0D8               	btfss	status,0,c
  2449  0010C6  0790               	decf	(sprintf@width+1)& (0+255),f,b
  2450  0010C8                     l322:
  2451                           
  2452                           ; BSR set to: 0
  2453                           ;doprnt.c: 1348: if(flag & 0x4000) {
  2454                           
  2455                           ; BSR set to: 0
  2456  0010C8  AD8E               	btfss	(sprintf@flag+1)& (0+255),6,b
  2457  0010CA  D013               	goto	l325
  2458                           
  2459                           ; BSR set to: 0
  2460                           ;doprnt.c: 1349: if(width > prec)
  2461  0010CC  518F               	movf	sprintf@width& (0+255),w,b
  2462  0010CE  5D94               	subwf	sprintf@prec& (0+255),w,b
  2463  0010D0  5195               	movf	(sprintf@prec+1)& (0+255),w,b
  2464  0010D2  0A80               	xorlw	128
  2465  0010D4  6F78               	movwf	??_sprintf& (0+255),b
  2466  0010D6  5190               	movf	(sprintf@width+1)& (0+255),w,b
  2467  0010D8  0A80               	xorlw	128
  2468  0010DA  5978               	subwfb	??_sprintf& (0+255),w,b
  2469  0010DC  B0D8               	btfsc	status,0,c
  2470  0010DE  D005               	goto	l324
  2471                           
  2472                           ; BSR set to: 0
  2473                           ;doprnt.c: 1350: width -= prec;
  2474  0010E0  5194               	movf	sprintf@prec& (0+255),w,b
  2475  0010E2  5F8F               	subwf	sprintf@width& (0+255),f,b
  2476  0010E4  5195               	movf	(sprintf@prec+1)& (0+255),w,b
  2477  0010E6  5B90               	subwfb	(sprintf@width+1)& (0+255),f,b
  2478  0010E8  D004               	goto	l325
  2479  0010EA                     l324:
  2480                           
  2481                           ; BSR set to: 0
  2482                           ;doprnt.c: 1351: else
  2483                           ;doprnt.c: 1352: width = 0;
  2484                           
  2485                           ; BSR set to: 0
  2486  0010EA  0E00               	movlw	0
  2487  0010EC  6F90               	movwf	(sprintf@width+1)& (0+255),b
  2488  0010EE  0E00               	movlw	0
  2489  0010F0  6F8F               	movwf	sprintf@width& (0+255),b
  2490  0010F2                     l325:
  2491                           
  2492                           ; BSR set to: 0
  2493                           ;doprnt.c: 1353: }
  2494                           ;doprnt.c: 1381: if(width > c)
  2495                           
  2496                           ; BSR set to: 0
  2497                           
  2498                           ; BSR set to: 0
  2499  0010F2  0E80               	movlw	128
  2500  0010F4  BF96               	btfsc	sprintf@c& (0+255),7,b
  2501  0010F6  0E7F               	movlw	127
  2502  0010F8  6F78               	movwf	??_sprintf& (0+255),b
  2503  0010FA  518F               	movf	sprintf@width& (0+255),w,b
  2504  0010FC  5D96               	subwf	sprintf@c& (0+255),w,b
  2505  0010FE  5190               	movf	(sprintf@width+1)& (0+255),w,b
  2506  001100  0A80               	xorlw	128
  2507  001102  5978               	subwfb	??_sprintf& (0+255),w,b
  2508  001104  B0D8               	btfsc	status,0,c
  2509  001106  D007               	goto	l326
  2510                           
  2511                           ; BSR set to: 0
  2512                           ;doprnt.c: 1382: width -= c;
  2513  001108  5196               	movf	sprintf@c& (0+255),w,b
  2514  00110A  5F8F               	subwf	sprintf@width& (0+255),f,b
  2515  00110C  0E00               	movlw	0
  2516  00110E  BF96               	btfsc	sprintf@c& (0+255),7,b
  2517  001110  0EFF               	movlw	255
  2518  001112  5B90               	subwfb	(sprintf@width+1)& (0+255),f,b
  2519  001114  D004               	goto	l327
  2520  001116                     l326:
  2521                           
  2522                           ; BSR set to: 0
  2523                           ;doprnt.c: 1383: else
  2524                           ;doprnt.c: 1384: width = 0;
  2525                           
  2526                           ; BSR set to: 0
  2527  001116  0E00               	movlw	0
  2528  001118  6F90               	movwf	(sprintf@width+1)& (0+255),b
  2529  00111A  0E00               	movlw	0
  2530  00111C  6F8F               	movwf	sprintf@width& (0+255),b
  2531  00111E                     l327:
  2532                           
  2533                           ; BSR set to: 0
  2534                           ;doprnt.c: 1387: if(flag & 0x04) {
  2535                           
  2536                           ; BSR set to: 0
  2537  00111E  A58D               	btfss	sprintf@flag& (0+255),2,b
  2538  001120  D022               	goto	l328
  2539                           
  2540                           ; BSR set to: 0
  2541                           ;doprnt.c: 1392: if(flag & 0x03)
  2542  001122  0E03               	movlw	3
  2543  001124  158D               	andwf	sprintf@flag& (0+255),w,b
  2544  001126  6F78               	movwf	??_sprintf& (0+255),b
  2545  001128  0E00               	movlw	0
  2546  00112A  158E               	andwf	(sprintf@flag+1)& (0+255),w,b
  2547  00112C  6F79               	movwf	(??_sprintf+1)& (0+255),b
  2548  00112E  5178               	movf	??_sprintf& (0+255),w,b
  2549  001130  1179               	iorwf	(??_sprintf+1)& (0+255),w,b
  2550  001132  B4D8               	btfsc	status,2,c
  2551  001134  D008               	goto	l329
  2552                           
  2553                           ; BSR set to: 0
  2554                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  2555  001136  C071  FFD9         	movff	sprintf@sp,fsr2l
  2556  00113A  C072  FFDA         	movff	sprintf@sp+1,fsr2h
  2557  00113E  0E2D               	movlw	45
  2558  001140  6EDF               	movwf	indf2,c
  2559                           
  2560                           ; BSR set to: 0
  2561  001142  4B71               	infsnz	sprintf@sp& (0+255),f,b
  2562  001144  2B72               	incf	(sprintf@sp+1)& (0+255),f,b
  2563  001146                     l329:
  2564                           
  2565                           ; BSR set to: 0
  2566                           ;doprnt.c: 1415: if(width)
  2567                           
  2568                           ; BSR set to: 0
  2569  001146  518F               	movf	sprintf@width& (0+255),w,b
  2570  001148  1190               	iorwf	(sprintf@width+1)& (0+255),w,b
  2571  00114A  B4D8               	btfsc	status,2,c
  2572  00114C  D031               	goto	l337
  2573                           
  2574                           ; BSR set to: 0
  2575                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  2576                           
  2577                           ; BSR set to: 0
  2578                           
  2579                           ;doprnt.c: 1416: do
  2580  00114E  C071  FFD9         	movff	sprintf@sp,fsr2l
  2581  001152  C072  FFDA         	movff	sprintf@sp+1,fsr2h
  2582  001156  0E30               	movlw	48
  2583  001158  6EDF               	movwf	indf2,c
  2584                           
  2585                           ; BSR set to: 0
  2586  00115A  4B71               	infsnz	sprintf@sp& (0+255),f,b
  2587  00115C  2B72               	incf	(sprintf@sp+1)& (0+255),f,b
  2588                           
  2589                           ; BSR set to: 0
  2590                           ;doprnt.c: 1418: while(--width);
  2591  00115E  078F               	decf	sprintf@width& (0+255),f,b
  2592  001160  A0D8               	btfss	status,0,c
  2593  001162  0790               	decf	(sprintf@width+1)& (0+255),f,b
  2594  001164  D7F0               	goto	l329
  2595  001166                     l328:
  2596                           
  2597                           ; BSR set to: 0
  2598                           ;doprnt.c: 1422: {
  2599                           ;doprnt.c: 1424: if(width
  2600                           ;doprnt.c: 1428: )
  2601                           
  2602                           ; BSR set to: 0
  2603  001166  518F               	movf	sprintf@width& (0+255),w,b
  2604  001168  1190               	iorwf	(sprintf@width+1)& (0+255),w,b
  2605  00116A  B4D8               	btfsc	status,2,c
  2606  00116C  D00F               	goto	u4880
  2607  00116E                     u4870:
  2608                           
  2609                           ; BSR set to: 0
  2610                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  2611                           
  2612                           ; BSR set to: 0
  2613                           
  2614                           ;doprnt.c: 1429: do
  2615  00116E  C071  FFD9         	movff	sprintf@sp,fsr2l
  2616  001172  C072  FFDA         	movff	sprintf@sp+1,fsr2h
  2617  001176  0E20               	movlw	32
  2618  001178  6EDF               	movwf	indf2,c
  2619                           
  2620                           ; BSR set to: 0
  2621  00117A  4B71               	infsnz	sprintf@sp& (0+255),f,b
  2622  00117C  2B72               	incf	(sprintf@sp+1)& (0+255),f,b
  2623                           
  2624                           ; BSR set to: 0
  2625                           ;doprnt.c: 1431: while(--width);
  2626  00117E  078F               	decf	sprintf@width& (0+255),f,b
  2627  001180  A0D8               	btfss	status,0,c
  2628  001182  0790               	decf	(sprintf@width+1)& (0+255),f,b
  2629  001184  518F               	movf	sprintf@width& (0+255),w,b
  2630  001186  1190               	iorwf	(sprintf@width+1)& (0+255),w,b
  2631  001188  A4D8               	btfss	status,2,c
  2632  00118A  D7F1               	goto	u4870
  2633  00118C                     u4880:
  2634                           
  2635                           ; BSR set to: 0
  2636                           ;doprnt.c: 1438: if(flag & 0x03)
  2637                           
  2638                           ; BSR set to: 0
  2639                           
  2640                           ; BSR set to: 0
  2641  00118C  0E03               	movlw	3
  2642  00118E  158D               	andwf	sprintf@flag& (0+255),w,b
  2643  001190  6F78               	movwf	??_sprintf& (0+255),b
  2644  001192  0E00               	movlw	0
  2645  001194  158E               	andwf	(sprintf@flag+1)& (0+255),w,b
  2646  001196  6F79               	movwf	(??_sprintf+1)& (0+255),b
  2647  001198  5178               	movf	??_sprintf& (0+255),w,b
  2648  00119A  1179               	iorwf	(??_sprintf+1)& (0+255),w,b
  2649  00119C  B4D8               	btfsc	status,2,c
  2650  00119E  D008               	goto	l337
  2651                           
  2652                           ; BSR set to: 0
  2653                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2654  0011A0  C071  FFD9         	movff	sprintf@sp,fsr2l
  2655  0011A4  C072  FFDA         	movff	sprintf@sp+1,fsr2h
  2656  0011A8  0E2D               	movlw	45
  2657  0011AA  6EDF               	movwf	indf2,c
  2658  0011AC                     l4208:
  2659                           
  2660                           ; BSR set to: 0
  2661  0011AC  4B71               	infsnz	sprintf@sp& (0+255),f,b
  2662  0011AE  2B72               	incf	(sprintf@sp+1)& (0+255),f,b
  2663  0011B0                     l337:
  2664                           
  2665                           ; BSR set to: 0
  2666                           
  2667                           ; BSR set to: 0
  2668                           
  2669                           ; BSR set to: 0
  2670                           
  2671                           ; BSR set to: 0
  2672  0011B0  C073  FFF6         	movff	sprintf@f,tblptrl
  2673  0011B4  C074  FFF7         	movff	sprintf@f+1,tblptrh
  2674  0011B8  4B73               	infsnz	sprintf@f& (0+255),f,b
  2675  0011BA  2B74               	incf	(sprintf@f+1)& (0+255),f,b
  2676  0011BC                     	if	0	;tblptru may be non-zero
  2677  0011BC                     	endif
  2678  0011BC                     	if	0	;tblptru may be non-zero
  2679  0011BC                     	endif
  2680  0011BC  0008               	tblrd		*
  2681  0011BE  CFF5 F096          	movff	tablat,sprintf@c
  2682  0011C2  5196               	movf	sprintf@c& (0+255),w,b
  2683  0011C4  A4D8               	btfss	status,2,c
  2684  0011C6  EF49  F004         	goto	l247
  2685  0011CA                     u4900:
  2686                           
  2687                           ; BSR set to: 0
  2688                           ;doprnt.c: 1538: *sp = 0;
  2689                           
  2690                           ; BSR set to: 0
  2691                           
  2692                           ;doprnt.c: 1469: }
  2693                           ;doprnt.c: 1533: }
  2694                           ;doprnt.c: 1535: alldone:
  2695                           
  2696                           ; BSR set to: 0
  2697  0011CA  C071  FFD9         	movff	sprintf@sp,fsr2l
  2698  0011CE  C072  FFDA         	movff	sprintf@sp+1,fsr2h
  2699  0011D2  0E00               	movlw	0
  2700  0011D4  6EDF               	movwf	indf2,c
  2701  0011D6  0012               	return	
  2702  0011D8                     __end_of_sprintf:
  2703                           	opt stack 0
  2704                           tblptru	equ	0xFF8
  2705                           tblptrh	equ	0xFF7
  2706                           tblptrl	equ	0xFF6
  2707                           tablat	equ	0xFF5
  2708                           prodh	equ	0xFF4
  2709                           prodl	equ	0xFF3
  2710                           postinc0	equ	0xFEE
  2711                           wreg	equ	0xFE8
  2712                           indf2	equ	0xFDF
  2713                           postinc2	equ	0xFDE
  2714                           postdec2	equ	0xFDD
  2715                           fsr2h	equ	0xFDA
  2716                           fsr2l	equ	0xFD9
  2717                           status	equ	0xFD8
  2718                           
  2719 ;; *************** function _scale *****************
  2720 ;; Defined at:
  2721 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  2722 ;; Parameters:    Size  Location     Type
  2723 ;;  scl             1    wreg     char 
  2724 ;; Auto vars:     Size  Location     Type
  2725 ;;  scl             1   59[COMRAM] char 
  2726 ;; Return value:  Size  Location     Type
  2727 ;;                  3   53[COMRAM] char 
  2728 ;; Registers used:
  2729 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2730 ;; Tracked objects:
  2731 ;;		On entry : 0/0
  2732 ;;		On exit  : 0/0
  2733 ;;		Unchanged: 0/0
  2734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2735 ;;      Params:         3       0       0       0       0       0       0       0       0
  2736 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2737 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2738 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2739 ;;Total ram usage:        7 bytes
  2740 ;; Hardware stack levels used:    1
  2741 ;; Hardware stack levels required when called:    3
  2742 ;; This function calls:
  2743 ;;		___awdiv
  2744 ;;		___awmod
  2745 ;;		___ftmul
  2746 ;;		___wmul
  2747 ;; This function is called by:
  2748 ;;		_sprintf
  2749 ;; This function uses a non-reentrant model
  2750 ;;
  2751                           
  2752                           	psect	text2
  2753  0011D8                     __ptext2:
  2754                           	opt stack 0
  2755  0011D8                     _scale:
  2756                           	opt stack 26
  2757                           
  2758                           ; BSR set to: 0
  2759                           ;incstack = 0
  2760                           ;scale@scl stored from wreg
  2761  0011D8  6E3C               	movwf	scale@scl,c
  2762                           
  2763                           ;doprnt.c: 428: if(scl < 0) {
  2764  0011DA  AE3C               	btfss	scale@scl,7,c
  2765  0011DC  D101               	goto	l236
  2766                           
  2767                           ;doprnt.c: 429: scl = -scl;
  2768  0011DE  6C3C               	negf	scale@scl,c
  2769                           
  2770                           ;doprnt.c: 430: if(scl>=110)
  2771  0011E0  503C               	movf	scale@scl,w,c
  2772  0011E2  0A80               	xorlw	128
  2773  0011E4  0F12               	addlw	-238
  2774  0011E6  A0D8               	btfss	status,0,c
  2775  0011E8  D091               	goto	l237
  2776                           
  2777                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2778  0011EA  0E00               	movlw	0
  2779  0011EC  6E24               	movwf	___wmul@multiplicand+1,c
  2780  0011EE  0E03               	movlw	3
  2781  0011F0  6E23               	movwf	___wmul@multiplicand,c
  2782  0011F2  0E00               	movlw	0
  2783  0011F4  6E1C               	movwf	___awdiv@divisor+1,c
  2784  0011F6  0E0A               	movlw	10
  2785  0011F8  6E1B               	movwf	___awdiv@divisor,c
  2786  0011FA  0E00               	movlw	0
  2787  0011FC  6E16               	movwf	___awmod@divisor+1,c
  2788  0011FE  0E64               	movlw	100
  2789  001200  6E15               	movwf	___awmod@divisor,c
  2790  001202  503C               	movf	scale@scl,w,c
  2791  001204  6E13               	movwf	___awmod@dividend,c
  2792  001206  6A14               	clrf	___awmod@dividend+1,c
  2793  001208  BE13               	btfsc	___awmod@dividend,7,c
  2794  00120A  0614               	decf	___awmod@dividend+1,f,c
  2795  00120C  ECBF  F013         	call	___awmod	;wreg free
  2796  001210  C013  F019         	movff	?___awmod,___awdiv@dividend
  2797  001214  C014  F01A         	movff	?___awmod+1,___awdiv@dividend+1
  2798  001218  EC01  F013         	call	___awdiv	;wreg free
  2799  00121C  0E09               	movlw	9
  2800  00121E  2419               	addwf	?___awdiv,w,c
  2801  001220  6E21               	movwf	___wmul@multiplier,c
  2802  001222  0E00               	movlw	0
  2803  001224  201A               	addwfc	?___awdiv+1,w,c
  2804  001226  6E22               	movwf	___wmul@multiplier+1,c
  2805  001228  EC18  F015         	call	___wmul	;wreg free
  2806  00122C  0E50               	movlw	low __npowers_
  2807  00122E  2421               	addwf	?___wmul,w,c
  2808  001230  6EF6               	movwf	tblptrl,c
  2809  001232  0E08               	movlw	high __npowers_
  2810  001234  2022               	addwfc	?___wmul+1,w,c
  2811  001236  6EF7               	movwf	tblptrh,c
  2812  001238                     	if	0	;There are less than 3 active tblptr bytes
  2813  001238                     	endif
  2814  001238  0009               	tblrd		*+
  2815  00123A  CFF5 F02A          	movff	tablat,___ftmul@f2
  2816  00123E  0009               	tblrd		*+
  2817  001240  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  2818  001244  000A               	tblrd		*-
  2819  001246  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  2820  00124A  0E00               	movlw	0
  2821  00124C  6E1C               	movwf	___awdiv@divisor+1,c
  2822  00124E  0E64               	movlw	100
  2823  001250  6E1B               	movwf	___awdiv@divisor,c
  2824  001252  503C               	movf	scale@scl,w,c
  2825  001254  6E19               	movwf	___awdiv@dividend,c
  2826  001256  6A1A               	clrf	___awdiv@dividend+1,c
  2827  001258  BE19               	btfsc	___awdiv@dividend,7,c
  2828  00125A  061A               	decf	___awdiv@dividend+1,f,c
  2829  00125C  EC01  F013         	call	___awdiv	;wreg free
  2830  001260  0E12               	movlw	18
  2831  001262  2419               	addwf	?___awdiv,w,c
  2832  001264  6E21               	movwf	___wmul@multiplier,c
  2833  001266  0E00               	movlw	0
  2834  001268  201A               	addwfc	?___awdiv+1,w,c
  2835  00126A  6E22               	movwf	___wmul@multiplier+1,c
  2836  00126C  0E00               	movlw	0
  2837  00126E  6E24               	movwf	___wmul@multiplicand+1,c
  2838  001270  0E03               	movlw	3
  2839  001272  6E23               	movwf	___wmul@multiplicand,c
  2840  001274  EC18  F015         	call	___wmul	;wreg free
  2841  001278  0E50               	movlw	low __npowers_
  2842  00127A  2421               	addwf	?___wmul,w,c
  2843  00127C  6EF6               	movwf	tblptrl,c
  2844  00127E  0E08               	movlw	high __npowers_
  2845  001280  2022               	addwfc	?___wmul+1,w,c
  2846  001282  6EF7               	movwf	tblptrh,c
  2847  001284                     	if	0	;There are less than 3 active tblptr bytes
  2848  001284                     	endif
  2849  001284  0009               	tblrd		*+
  2850  001286  CFF5 F027          	movff	tablat,___ftmul@f1
  2851  00128A  0009               	tblrd		*+
  2852  00128C  CFF5 F028          	movff	tablat,___ftmul@f1+1
  2853  001290  000A               	tblrd		*-
  2854  001292  CFF5 F029          	movff	tablat,___ftmul@f1+2
  2855  001296  ECDA  F00F         	call	___ftmul	;wreg free
  2856  00129A  C027  F039         	movff	?___ftmul,_scale$1583
  2857  00129E  C028  F03A         	movff	?___ftmul+1,_scale$1583+1
  2858  0012A2  C029  F03B         	movff	?___ftmul+2,_scale$1583+2
  2859                           
  2860                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2861  0012A6  C039  F027         	movff	_scale$1583,___ftmul@f1
  2862  0012AA  C03A  F028         	movff	_scale$1583+1,___ftmul@f1+1
  2863  0012AE  C03B  F029         	movff	_scale$1583+2,___ftmul@f1+2
  2864  0012B2  0E00               	movlw	0
  2865  0012B4  6E24               	movwf	___wmul@multiplicand+1,c
  2866  0012B6  0E03               	movlw	3
  2867  0012B8  6E23               	movwf	___wmul@multiplicand,c
  2868  0012BA  0E00               	movlw	0
  2869  0012BC  6E16               	movwf	___awmod@divisor+1,c
  2870  0012BE  0E0A               	movlw	10
  2871  0012C0  6E15               	movwf	___awmod@divisor,c
  2872  0012C2  503C               	movf	scale@scl,w,c
  2873  0012C4  6E13               	movwf	___awmod@dividend,c
  2874  0012C6  6A14               	clrf	___awmod@dividend+1,c
  2875  0012C8  BE13               	btfsc	___awmod@dividend,7,c
  2876  0012CA  0614               	decf	___awmod@dividend+1,f,c
  2877  0012CC  ECBF  F013         	call	___awmod	;wreg free
  2878  0012D0  C013  F021         	movff	?___awmod,___wmul@multiplier
  2879  0012D4  C014  F022         	movff	?___awmod+1,___wmul@multiplier+1
  2880  0012D8  EC18  F015         	call	___wmul	;wreg free
  2881  0012DC  0E50               	movlw	low __npowers_
  2882  0012DE  2421               	addwf	?___wmul,w,c
  2883  0012E0  6EF6               	movwf	tblptrl,c
  2884  0012E2  0E08               	movlw	high __npowers_
  2885  0012E4  2022               	addwfc	?___wmul+1,w,c
  2886  0012E6  6EF7               	movwf	tblptrh,c
  2887  0012E8                     	if	0	;There are less than 3 active tblptr bytes
  2888  0012E8                     	endif
  2889  0012E8  0009               	tblrd		*+
  2890  0012EA  CFF5 F02A          	movff	tablat,___ftmul@f2
  2891  0012EE  0009               	tblrd		*+
  2892  0012F0  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  2893  0012F4  000A               	tblrd		*-
  2894  0012F6  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  2895  0012FA  ECDA  F00F         	call	___ftmul	;wreg free
  2896  0012FE  C027  F036         	movff	?___ftmul,?_scale
  2897  001302  C028  F037         	movff	?___ftmul+1,?_scale+1
  2898  001306  C029  F038         	movff	?___ftmul+2,?_scale+2
  2899  00130A  0012               	return	
  2900  00130C                     l237:
  2901                           
  2902                           ;doprnt.c: 432: else if(scl > 10)
  2903  00130C  503C               	movf	scale@scl,w,c
  2904  00130E  0A80               	xorlw	128
  2905  001310  0F75               	addlw	-139
  2906  001312  A0D8               	btfss	status,0,c
  2907  001314  D053               	goto	l240
  2908                           
  2909                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  2910  001316  0E00               	movlw	0
  2911  001318  6E1C               	movwf	___awdiv@divisor+1,c
  2912  00131A  0E0A               	movlw	10
  2913  00131C  6E1B               	movwf	___awdiv@divisor,c
  2914  00131E  503C               	movf	scale@scl,w,c
  2915  001320  6E19               	movwf	___awdiv@dividend,c
  2916  001322  6A1A               	clrf	___awdiv@dividend+1,c
  2917  001324  BE19               	btfsc	___awdiv@dividend,7,c
  2918  001326  061A               	decf	___awdiv@dividend+1,f,c
  2919  001328  EC01  F013         	call	___awdiv	;wreg free
  2920  00132C  0E09               	movlw	9
  2921  00132E  2419               	addwf	?___awdiv,w,c
  2922  001330  6E21               	movwf	___wmul@multiplier,c
  2923  001332  0E00               	movlw	0
  2924  001334  201A               	addwfc	?___awdiv+1,w,c
  2925  001336  6E22               	movwf	___wmul@multiplier+1,c
  2926  001338  0E00               	movlw	0
  2927  00133A  6E24               	movwf	___wmul@multiplicand+1,c
  2928  00133C  0E03               	movlw	3
  2929  00133E  6E23               	movwf	___wmul@multiplicand,c
  2930  001340  EC18  F015         	call	___wmul	;wreg free
  2931  001344  0E50               	movlw	low __npowers_
  2932  001346  2421               	addwf	?___wmul,w,c
  2933  001348  6EF6               	movwf	tblptrl,c
  2934  00134A  0E08               	movlw	high __npowers_
  2935  00134C  2022               	addwfc	?___wmul+1,w,c
  2936  00134E  6EF7               	movwf	tblptrh,c
  2937  001350                     	if	0	;There are less than 3 active tblptr bytes
  2938  001350                     	endif
  2939  001350  0009               	tblrd		*+
  2940  001352  CFF5 F027          	movff	tablat,___ftmul@f1
  2941  001356  0009               	tblrd		*+
  2942  001358  CFF5 F028          	movff	tablat,___ftmul@f1+1
  2943  00135C  000A               	tblrd		*-
  2944  00135E  CFF5 F029          	movff	tablat,___ftmul@f1+2
  2945  001362  0E00               	movlw	0
  2946  001364  6E24               	movwf	___wmul@multiplicand+1,c
  2947  001366  0E03               	movlw	3
  2948  001368  6E23               	movwf	___wmul@multiplicand,c
  2949  00136A  0E00               	movlw	0
  2950  00136C  6E16               	movwf	___awmod@divisor+1,c
  2951  00136E  0E0A               	movlw	10
  2952  001370  6E15               	movwf	___awmod@divisor,c
  2953  001372  503C               	movf	scale@scl,w,c
  2954  001374  6E13               	movwf	___awmod@dividend,c
  2955  001376  6A14               	clrf	___awmod@dividend+1,c
  2956  001378  BE13               	btfsc	___awmod@dividend,7,c
  2957  00137A  0614               	decf	___awmod@dividend+1,f,c
  2958  00137C  ECBF  F013         	call	___awmod	;wreg free
  2959  001380  C013  F021         	movff	?___awmod,___wmul@multiplier
  2960  001384  C014  F022         	movff	?___awmod+1,___wmul@multiplier+1
  2961  001388  EC18  F015         	call	___wmul	;wreg free
  2962  00138C  0E50               	movlw	low __npowers_
  2963  00138E  2421               	addwf	?___wmul,w,c
  2964  001390  6EF6               	movwf	tblptrl,c
  2965  001392  0E08               	movlw	high __npowers_
  2966  001394  2022               	addwfc	?___wmul+1,w,c
  2967  001396  6EF7               	movwf	tblptrh,c
  2968  001398                     	if	0	;There are less than 3 active tblptr bytes
  2969  001398                     	endif
  2970  001398  0009               	tblrd		*+
  2971  00139A  CFF5 F02A          	movff	tablat,___ftmul@f2
  2972  00139E  0009               	tblrd		*+
  2973  0013A0  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  2974  0013A4  000A               	tblrd		*-
  2975  0013A6  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  2976  0013AA  ECDA  F00F         	call	___ftmul	;wreg free
  2977  0013AE  C027  F036         	movff	?___ftmul,?_scale
  2978  0013B2  C028  F037         	movff	?___ftmul+1,?_scale+1
  2979  0013B6  C029  F038         	movff	?___ftmul+2,?_scale+2
  2980  0013BA  0012               	return	
  2981  0013BC                     l240:
  2982                           
  2983                           ;doprnt.c: 434: return _npowers_[scl];
  2984  0013BC  503C               	movf	scale@scl,w,c
  2985  0013BE  0D03               	mullw	3
  2986  0013C0  0E50               	movlw	low __npowers_
  2987  0013C2  24F3               	addwf	prodl,w,c
  2988  0013C4  6EF6               	movwf	tblptrl,c
  2989  0013C6  0E08               	movlw	high __npowers_
  2990  0013C8  20F4               	addwfc	prodh,w,c
  2991  0013CA  6EF7               	movwf	tblptrh,c
  2992  0013CC                     	if	0	;There are less than 3 active tblptr bytes
  2993  0013CC                     	endif
  2994  0013CC  0009               	tblrd		*+
  2995  0013CE  CFF5 F036          	movff	tablat,?_scale
  2996  0013D2  0009               	tblrd		*+
  2997  0013D4  CFF5 F037          	movff	tablat,?_scale+1
  2998  0013D8  000A               	tblrd		*-
  2999  0013DA  CFF5 F038          	movff	tablat,?_scale+2
  3000  0013DE  0012               	return	
  3001  0013E0                     l236:
  3002                           
  3003                           ;doprnt.c: 435: }
  3004                           ;doprnt.c: 436: if(scl>=110)
  3005  0013E0  503C               	movf	scale@scl,w,c
  3006  0013E2  0A80               	xorlw	128
  3007  0013E4  0F12               	addlw	-238
  3008  0013E6  A0D8               	btfss	status,0,c
  3009  0013E8  D091               	goto	l241
  3010                           
  3011                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3012  0013EA  0E00               	movlw	0
  3013  0013EC  6E24               	movwf	___wmul@multiplicand+1,c
  3014  0013EE  0E03               	movlw	3
  3015  0013F0  6E23               	movwf	___wmul@multiplicand,c
  3016  0013F2  0E00               	movlw	0
  3017  0013F4  6E1C               	movwf	___awdiv@divisor+1,c
  3018  0013F6  0E0A               	movlw	10
  3019  0013F8  6E1B               	movwf	___awdiv@divisor,c
  3020  0013FA  0E00               	movlw	0
  3021  0013FC  6E16               	movwf	___awmod@divisor+1,c
  3022  0013FE  0E64               	movlw	100
  3023  001400  6E15               	movwf	___awmod@divisor,c
  3024  001402  503C               	movf	scale@scl,w,c
  3025  001404  6E13               	movwf	___awmod@dividend,c
  3026  001406  6A14               	clrf	___awmod@dividend+1,c
  3027  001408  BE13               	btfsc	___awmod@dividend,7,c
  3028  00140A  0614               	decf	___awmod@dividend+1,f,c
  3029  00140C  ECBF  F013         	call	___awmod	;wreg free
  3030  001410  C013  F019         	movff	?___awmod,___awdiv@dividend
  3031  001414  C014  F01A         	movff	?___awmod+1,___awdiv@dividend+1
  3032  001418  EC01  F013         	call	___awdiv	;wreg free
  3033  00141C  0E09               	movlw	9
  3034  00141E  2419               	addwf	?___awdiv,w,c
  3035  001420  6E21               	movwf	___wmul@multiplier,c
  3036  001422  0E00               	movlw	0
  3037  001424  201A               	addwfc	?___awdiv+1,w,c
  3038  001426  6E22               	movwf	___wmul@multiplier+1,c
  3039  001428  EC18  F015         	call	___wmul	;wreg free
  3040  00142C  0E29               	movlw	low __powers_
  3041  00142E  2421               	addwf	?___wmul,w,c
  3042  001430  6EF6               	movwf	tblptrl,c
  3043  001432  0E08               	movlw	high __powers_
  3044  001434  2022               	addwfc	?___wmul+1,w,c
  3045  001436  6EF7               	movwf	tblptrh,c
  3046  001438                     	if	0	;There are less than 3 active tblptr bytes
  3047  001438                     	endif
  3048  001438  0009               	tblrd		*+
  3049  00143A  CFF5 F02A          	movff	tablat,___ftmul@f2
  3050  00143E  0009               	tblrd		*+
  3051  001440  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  3052  001444  000A               	tblrd		*-
  3053  001446  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  3054  00144A  0E00               	movlw	0
  3055  00144C  6E1C               	movwf	___awdiv@divisor+1,c
  3056  00144E  0E64               	movlw	100
  3057  001450  6E1B               	movwf	___awdiv@divisor,c
  3058  001452  503C               	movf	scale@scl,w,c
  3059  001454  6E19               	movwf	___awdiv@dividend,c
  3060  001456  6A1A               	clrf	___awdiv@dividend+1,c
  3061  001458  BE19               	btfsc	___awdiv@dividend,7,c
  3062  00145A  061A               	decf	___awdiv@dividend+1,f,c
  3063  00145C  EC01  F013         	call	___awdiv	;wreg free
  3064  001460  0E12               	movlw	18
  3065  001462  2419               	addwf	?___awdiv,w,c
  3066  001464  6E21               	movwf	___wmul@multiplier,c
  3067  001466  0E00               	movlw	0
  3068  001468  201A               	addwfc	?___awdiv+1,w,c
  3069  00146A  6E22               	movwf	___wmul@multiplier+1,c
  3070  00146C  0E00               	movlw	0
  3071  00146E  6E24               	movwf	___wmul@multiplicand+1,c
  3072  001470  0E03               	movlw	3
  3073  001472  6E23               	movwf	___wmul@multiplicand,c
  3074  001474  EC18  F015         	call	___wmul	;wreg free
  3075  001478  0E29               	movlw	low __powers_
  3076  00147A  2421               	addwf	?___wmul,w,c
  3077  00147C  6EF6               	movwf	tblptrl,c
  3078  00147E  0E08               	movlw	high __powers_
  3079  001480  2022               	addwfc	?___wmul+1,w,c
  3080  001482  6EF7               	movwf	tblptrh,c
  3081  001484                     	if	0	;There are less than 3 active tblptr bytes
  3082  001484                     	endif
  3083  001484  0009               	tblrd		*+
  3084  001486  CFF5 F027          	movff	tablat,___ftmul@f1
  3085  00148A  0009               	tblrd		*+
  3086  00148C  CFF5 F028          	movff	tablat,___ftmul@f1+1
  3087  001490  000A               	tblrd		*-
  3088  001492  CFF5 F029          	movff	tablat,___ftmul@f1+2
  3089  001496  ECDA  F00F         	call	___ftmul	;wreg free
  3090  00149A  C027  F039         	movff	?___ftmul,_scale$1583
  3091  00149E  C028  F03A         	movff	?___ftmul+1,_scale$1583+1
  3092  0014A2  C029  F03B         	movff	?___ftmul+2,_scale$1583+2
  3093                           
  3094                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3095  0014A6  C039  F027         	movff	_scale$1583,___ftmul@f1
  3096  0014AA  C03A  F028         	movff	_scale$1583+1,___ftmul@f1+1
  3097  0014AE  C03B  F029         	movff	_scale$1583+2,___ftmul@f1+2
  3098  0014B2  0E00               	movlw	0
  3099  0014B4  6E24               	movwf	___wmul@multiplicand+1,c
  3100  0014B6  0E03               	movlw	3
  3101  0014B8  6E23               	movwf	___wmul@multiplicand,c
  3102  0014BA  0E00               	movlw	0
  3103  0014BC  6E16               	movwf	___awmod@divisor+1,c
  3104  0014BE  0E0A               	movlw	10
  3105  0014C0  6E15               	movwf	___awmod@divisor,c
  3106  0014C2  503C               	movf	scale@scl,w,c
  3107  0014C4  6E13               	movwf	___awmod@dividend,c
  3108  0014C6  6A14               	clrf	___awmod@dividend+1,c
  3109  0014C8  BE13               	btfsc	___awmod@dividend,7,c
  3110  0014CA  0614               	decf	___awmod@dividend+1,f,c
  3111  0014CC  ECBF  F013         	call	___awmod	;wreg free
  3112  0014D0  C013  F021         	movff	?___awmod,___wmul@multiplier
  3113  0014D4  C014  F022         	movff	?___awmod+1,___wmul@multiplier+1
  3114  0014D8  EC18  F015         	call	___wmul	;wreg free
  3115  0014DC  0E29               	movlw	low __powers_
  3116  0014DE  2421               	addwf	?___wmul,w,c
  3117  0014E0  6EF6               	movwf	tblptrl,c
  3118  0014E2  0E08               	movlw	high __powers_
  3119  0014E4  2022               	addwfc	?___wmul+1,w,c
  3120  0014E6  6EF7               	movwf	tblptrh,c
  3121  0014E8                     	if	0	;There are less than 3 active tblptr bytes
  3122  0014E8                     	endif
  3123  0014E8  0009               	tblrd		*+
  3124  0014EA  CFF5 F02A          	movff	tablat,___ftmul@f2
  3125  0014EE  0009               	tblrd		*+
  3126  0014F0  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  3127  0014F4  000A               	tblrd		*-
  3128  0014F6  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  3129  0014FA  ECDA  F00F         	call	___ftmul	;wreg free
  3130  0014FE  C027  F036         	movff	?___ftmul,?_scale
  3131  001502  C028  F037         	movff	?___ftmul+1,?_scale+1
  3132  001506  C029  F038         	movff	?___ftmul+2,?_scale+2
  3133  00150A  0012               	return	
  3134  00150C                     l241:
  3135                           
  3136                           ;doprnt.c: 438: else if(scl > 10)
  3137  00150C  503C               	movf	scale@scl,w,c
  3138  00150E  0A80               	xorlw	128
  3139  001510  0F75               	addlw	-139
  3140  001512  A0D8               	btfss	status,0,c
  3141  001514  D053               	goto	l243
  3142                           
  3143                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3144  001516  0E00               	movlw	0
  3145  001518  6E1C               	movwf	___awdiv@divisor+1,c
  3146  00151A  0E0A               	movlw	10
  3147  00151C  6E1B               	movwf	___awdiv@divisor,c
  3148  00151E  503C               	movf	scale@scl,w,c
  3149  001520  6E19               	movwf	___awdiv@dividend,c
  3150  001522  6A1A               	clrf	___awdiv@dividend+1,c
  3151  001524  BE19               	btfsc	___awdiv@dividend,7,c
  3152  001526  061A               	decf	___awdiv@dividend+1,f,c
  3153  001528  EC01  F013         	call	___awdiv	;wreg free
  3154  00152C  0E09               	movlw	9
  3155  00152E  2419               	addwf	?___awdiv,w,c
  3156  001530  6E21               	movwf	___wmul@multiplier,c
  3157  001532  0E00               	movlw	0
  3158  001534  201A               	addwfc	?___awdiv+1,w,c
  3159  001536  6E22               	movwf	___wmul@multiplier+1,c
  3160  001538  0E00               	movlw	0
  3161  00153A  6E24               	movwf	___wmul@multiplicand+1,c
  3162  00153C  0E03               	movlw	3
  3163  00153E  6E23               	movwf	___wmul@multiplicand,c
  3164  001540  EC18  F015         	call	___wmul	;wreg free
  3165  001544  0E29               	movlw	low __powers_
  3166  001546  2421               	addwf	?___wmul,w,c
  3167  001548  6EF6               	movwf	tblptrl,c
  3168  00154A  0E08               	movlw	high __powers_
  3169  00154C  2022               	addwfc	?___wmul+1,w,c
  3170  00154E  6EF7               	movwf	tblptrh,c
  3171  001550                     	if	0	;There are less than 3 active tblptr bytes
  3172  001550                     	endif
  3173  001550  0009               	tblrd		*+
  3174  001552  CFF5 F027          	movff	tablat,___ftmul@f1
  3175  001556  0009               	tblrd		*+
  3176  001558  CFF5 F028          	movff	tablat,___ftmul@f1+1
  3177  00155C  000A               	tblrd		*-
  3178  00155E  CFF5 F029          	movff	tablat,___ftmul@f1+2
  3179  001562  0E00               	movlw	0
  3180  001564  6E24               	movwf	___wmul@multiplicand+1,c
  3181  001566  0E03               	movlw	3
  3182  001568  6E23               	movwf	___wmul@multiplicand,c
  3183  00156A  0E00               	movlw	0
  3184  00156C  6E16               	movwf	___awmod@divisor+1,c
  3185  00156E  0E0A               	movlw	10
  3186  001570  6E15               	movwf	___awmod@divisor,c
  3187  001572  503C               	movf	scale@scl,w,c
  3188  001574  6E13               	movwf	___awmod@dividend,c
  3189  001576  6A14               	clrf	___awmod@dividend+1,c
  3190  001578  BE13               	btfsc	___awmod@dividend,7,c
  3191  00157A  0614               	decf	___awmod@dividend+1,f,c
  3192  00157C  ECBF  F013         	call	___awmod	;wreg free
  3193  001580  C013  F021         	movff	?___awmod,___wmul@multiplier
  3194  001584  C014  F022         	movff	?___awmod+1,___wmul@multiplier+1
  3195  001588  EC18  F015         	call	___wmul	;wreg free
  3196  00158C  0E29               	movlw	low __powers_
  3197  00158E  2421               	addwf	?___wmul,w,c
  3198  001590  6EF6               	movwf	tblptrl,c
  3199  001592  0E08               	movlw	high __powers_
  3200  001594  2022               	addwfc	?___wmul+1,w,c
  3201  001596  6EF7               	movwf	tblptrh,c
  3202  001598                     	if	0	;There are less than 3 active tblptr bytes
  3203  001598                     	endif
  3204  001598  0009               	tblrd		*+
  3205  00159A  CFF5 F02A          	movff	tablat,___ftmul@f2
  3206  00159E  0009               	tblrd		*+
  3207  0015A0  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  3208  0015A4  000A               	tblrd		*-
  3209  0015A6  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  3210  0015AA  ECDA  F00F         	call	___ftmul	;wreg free
  3211  0015AE  C027  F036         	movff	?___ftmul,?_scale
  3212  0015B2  C028  F037         	movff	?___ftmul+1,?_scale+1
  3213  0015B6  C029  F038         	movff	?___ftmul+2,?_scale+2
  3214  0015BA  0012               	return	
  3215  0015BC                     l243:
  3216                           
  3217                           ;doprnt.c: 440: return _powers_[scl];
  3218  0015BC  503C               	movf	scale@scl,w,c
  3219  0015BE  0D03               	mullw	3
  3220  0015C0  0E29               	movlw	low __powers_
  3221  0015C2  24F3               	addwf	prodl,w,c
  3222  0015C4  6EF6               	movwf	tblptrl,c
  3223  0015C6  0E08               	movlw	high __powers_
  3224  0015C8  20F4               	addwfc	prodh,w,c
  3225  0015CA  6EF7               	movwf	tblptrh,c
  3226  0015CC                     	if	0	;There are less than 3 active tblptr bytes
  3227  0015CC                     	endif
  3228  0015CC  0009               	tblrd		*+
  3229  0015CE  CFF5 F036          	movff	tablat,?_scale
  3230  0015D2  0009               	tblrd		*+
  3231  0015D4  CFF5 F037          	movff	tablat,?_scale+1
  3232  0015D8  000A               	tblrd		*-
  3233  0015DA  CFF5 F038          	movff	tablat,?_scale+2
  3234  0015DE  0012               	return	
  3235  0015E0                     __end_of_scale:
  3236                           	opt stack 0
  3237                           tblptru	equ	0xFF8
  3238                           tblptrh	equ	0xFF7
  3239                           tblptrl	equ	0xFF6
  3240                           tablat	equ	0xFF5
  3241                           prodh	equ	0xFF4
  3242                           prodl	equ	0xFF3
  3243                           postinc0	equ	0xFEE
  3244                           wreg	equ	0xFE8
  3245                           indf2	equ	0xFDF
  3246                           postinc2	equ	0xFDE
  3247                           postdec2	equ	0xFDD
  3248                           fsr2h	equ	0xFDA
  3249                           fsr2l	equ	0xFD9
  3250                           status	equ	0xFD8
  3251                           
  3252 ;; *************** function _isdigit *****************
  3253 ;; Defined at:
  3254 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  3255 ;; Parameters:    Size  Location     Type
  3256 ;;  c               1    wreg     unsigned char 
  3257 ;; Auto vars:     Size  Location     Type
  3258 ;;  c               1   20[COMRAM] unsigned char 
  3259 ;; Return value:  Size  Location     Type
  3260 ;;		None               void
  3261 ;; Registers used:
  3262 ;;		wreg, status,2, status,0
  3263 ;; Tracked objects:
  3264 ;;		On entry : 0/0
  3265 ;;		On exit  : 0/0
  3266 ;;		Unchanged: 0/0
  3267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3268 ;;      Params:         0       0       0       0       0       0       0       0       0
  3269 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3270 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3271 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3272 ;;Total ram usage:        3 bytes
  3273 ;; Hardware stack levels used:    1
  3274 ;; Hardware stack levels required when called:    1
  3275 ;; This function calls:
  3276 ;;		Nothing
  3277 ;; This function is called by:
  3278 ;;		_sprintf
  3279 ;; This function uses a non-reentrant model
  3280 ;;
  3281                           
  3282                           	psect	text3
  3283  002AC0                     __ptext3:
  3284                           	opt stack 0
  3285  002AC0                     _isdigit:
  3286                           	opt stack 28
  3287                           
  3288                           ;incstack = 0
  3289                           ;isdigit@c stored from wreg
  3290  002AC0  6E15               	movwf	isdigit@c,c
  3291  002AC2  0E00               	movlw	0
  3292  002AC4  6E14               	movwf	_isdigit$1223,c
  3293  002AC6  0E3A               	movlw	58
  3294  002AC8  6015               	cpfslt	isdigit@c,c
  3295  002ACA  D005               	goto	l703
  3296  002ACC  0E2F               	movlw	47
  3297  002ACE  6415               	cpfsgt	isdigit@c,c
  3298  002AD0  D002               	goto	l703
  3299  002AD2  0E01               	movlw	1
  3300  002AD4  6E14               	movwf	_isdigit$1223,c
  3301  002AD6                     l703:
  3302  002AD6  C014  F013         	movff	_isdigit$1223,??_isdigit
  3303  002ADA  3013               	rrcf	??_isdigit,w,c
  3304  002ADC  0012               	return	
  3305  002ADE                     __end_of_isdigit:
  3306                           	opt stack 0
  3307                           tblptru	equ	0xFF8
  3308                           tblptrh	equ	0xFF7
  3309                           tblptrl	equ	0xFF6
  3310                           tablat	equ	0xFF5
  3311                           prodh	equ	0xFF4
  3312                           prodl	equ	0xFF3
  3313                           postinc0	equ	0xFEE
  3314                           wreg	equ	0xFE8
  3315                           indf2	equ	0xFDF
  3316                           postinc2	equ	0xFDE
  3317                           postdec2	equ	0xFDD
  3318                           fsr2h	equ	0xFDA
  3319                           fsr2l	equ	0xFD9
  3320                           status	equ	0xFD8
  3321                           
  3322 ;; *************** function _fround *****************
  3323 ;; Defined at:
  3324 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  3325 ;; Parameters:    Size  Location     Type
  3326 ;;  prec            1    wreg     unsigned char 
  3327 ;; Auto vars:     Size  Location     Type
  3328 ;;  prec            1   62[COMRAM] unsigned char 
  3329 ;; Return value:  Size  Location     Type
  3330 ;;                  3   53[COMRAM] unsigned char 
  3331 ;; Registers used:
  3332 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3333 ;; Tracked objects:
  3334 ;;		On entry : 0/0
  3335 ;;		On exit  : 0/0
  3336 ;;		Unchanged: 0/0
  3337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3338 ;;      Params:         3       0       0       0       0       0       0       0       0
  3339 ;;      Locals:         7       0       0       0       0       0       0       0       0
  3340 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3341 ;;      Totals:        10       0       0       0       0       0       0       0       0
  3342 ;;Total ram usage:       10 bytes
  3343 ;; Hardware stack levels used:    1
  3344 ;; Hardware stack levels required when called:    3
  3345 ;; This function calls:
  3346 ;;		___awdiv
  3347 ;;		___awmod
  3348 ;;		___ftmul
  3349 ;;		___wmul
  3350 ;; This function is called by:
  3351 ;;		_sprintf
  3352 ;; This function uses a non-reentrant model
  3353 ;;
  3354                           
  3355                           	psect	text4
  3356  0015E0                     __ptext4:
  3357                           	opt stack 0
  3358  0015E0                     _fround:
  3359                           	opt stack 26
  3360                           
  3361                           ;incstack = 0
  3362                           ;fround@prec stored from wreg
  3363  0015E0  6E3F               	movwf	fround@prec,c
  3364                           
  3365                           ;doprnt.c: 413: if(prec>=110)
  3366  0015E2  0E6D               	movlw	109
  3367  0015E4  643F               	cpfsgt	fround@prec,c
  3368  0015E6  D09F               	goto	l230
  3369                           
  3370                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3371  0015E8  0E00               	movlw	0
  3372  0015EA  6E24               	movwf	___wmul@multiplicand+1,c
  3373  0015EC  0E03               	movlw	3
  3374  0015EE  6E23               	movwf	___wmul@multiplicand,c
  3375  0015F0  0E00               	movlw	0
  3376  0015F2  6E1C               	movwf	___awdiv@divisor+1,c
  3377  0015F4  0E0A               	movlw	10
  3378  0015F6  6E1B               	movwf	___awdiv@divisor,c
  3379  0015F8  0E00               	movlw	0
  3380  0015FA  6E16               	movwf	___awmod@divisor+1,c
  3381  0015FC  0E64               	movlw	100
  3382  0015FE  6E15               	movwf	___awmod@divisor,c
  3383  001600  C03F  F013         	movff	fround@prec,___awmod@dividend
  3384  001604  6A14               	clrf	___awmod@dividend+1,c
  3385  001606  ECBF  F013         	call	___awmod	;wreg free
  3386  00160A  C013  F019         	movff	?___awmod,___awdiv@dividend
  3387  00160E  C014  F01A         	movff	?___awmod+1,___awdiv@dividend+1
  3388  001612  EC01  F013         	call	___awdiv	;wreg free
  3389  001616  0E09               	movlw	9
  3390  001618  2419               	addwf	?___awdiv,w,c
  3391  00161A  6E21               	movwf	___wmul@multiplier,c
  3392  00161C  0E00               	movlw	0
  3393  00161E  201A               	addwfc	?___awdiv+1,w,c
  3394  001620  6E22               	movwf	___wmul@multiplier+1,c
  3395  001622  EC18  F015         	call	___wmul	;wreg free
  3396  001626  0E50               	movlw	low __npowers_
  3397  001628  2421               	addwf	?___wmul,w,c
  3398  00162A  6EF6               	movwf	tblptrl,c
  3399  00162C  0E08               	movlw	high __npowers_
  3400  00162E  2022               	addwfc	?___wmul+1,w,c
  3401  001630  6EF7               	movwf	tblptrh,c
  3402  001632                     	if	0	;There are less than 3 active tblptr bytes
  3403  001632                     	endif
  3404  001632  0009               	tblrd		*+
  3405  001634  CFF5 F02A          	movff	tablat,___ftmul@f2
  3406  001638  0009               	tblrd		*+
  3407  00163A  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  3408  00163E  000A               	tblrd		*-
  3409  001640  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  3410  001644  0E00               	movlw	0
  3411  001646  6E1C               	movwf	___awdiv@divisor+1,c
  3412  001648  0E64               	movlw	100
  3413  00164A  6E1B               	movwf	___awdiv@divisor,c
  3414  00164C  C03F  F019         	movff	fround@prec,___awdiv@dividend
  3415  001650  6A1A               	clrf	___awdiv@dividend+1,c
  3416  001652  EC01  F013         	call	___awdiv	;wreg free
  3417  001656  0E12               	movlw	18
  3418  001658  2419               	addwf	?___awdiv,w,c
  3419  00165A  6E21               	movwf	___wmul@multiplier,c
  3420  00165C  0E00               	movlw	0
  3421  00165E  201A               	addwfc	?___awdiv+1,w,c
  3422  001660  6E22               	movwf	___wmul@multiplier+1,c
  3423  001662  0E00               	movlw	0
  3424  001664  6E24               	movwf	___wmul@multiplicand+1,c
  3425  001666  0E03               	movlw	3
  3426  001668  6E23               	movwf	___wmul@multiplicand,c
  3427  00166A  EC18  F015         	call	___wmul	;wreg free
  3428  00166E  0E50               	movlw	low __npowers_
  3429  001670  2421               	addwf	?___wmul,w,c
  3430  001672  6EF6               	movwf	tblptrl,c
  3431  001674  0E08               	movlw	high __npowers_
  3432  001676  2022               	addwfc	?___wmul+1,w,c
  3433  001678  6EF7               	movwf	tblptrh,c
  3434  00167A                     	if	0	;There are less than 3 active tblptr bytes
  3435  00167A                     	endif
  3436  00167A  0009               	tblrd		*+
  3437  00167C  CFF5 F027          	movff	tablat,___ftmul@f1
  3438  001680  0009               	tblrd		*+
  3439  001682  CFF5 F028          	movff	tablat,___ftmul@f1+1
  3440  001686  000A               	tblrd		*-
  3441  001688  CFF5 F029          	movff	tablat,___ftmul@f1+2
  3442  00168C  ECDA  F00F         	call	___ftmul	;wreg free
  3443  001690  C027  F03C         	movff	?___ftmul,_fround$1581
  3444  001694  C028  F03D         	movff	?___ftmul+1,_fround$1581+1
  3445  001698  C029  F03E         	movff	?___ftmul+2,_fround$1581+2
  3446                           
  3447                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3448  00169C  0E00               	movlw	0
  3449  00169E  6E24               	movwf	___wmul@multiplicand+1,c
  3450  0016A0  0E03               	movlw	3
  3451  0016A2  6E23               	movwf	___wmul@multiplicand,c
  3452  0016A4  0E00               	movlw	0
  3453  0016A6  6E16               	movwf	___awmod@divisor+1,c
  3454  0016A8  0E0A               	movlw	10
  3455  0016AA  6E15               	movwf	___awmod@divisor,c
  3456  0016AC  C03F  F013         	movff	fround@prec,___awmod@dividend
  3457  0016B0  6A14               	clrf	___awmod@dividend+1,c
  3458  0016B2  ECBF  F013         	call	___awmod	;wreg free
  3459  0016B6  C013  F021         	movff	?___awmod,___wmul@multiplier
  3460  0016BA  C014  F022         	movff	?___awmod+1,___wmul@multiplier+1
  3461  0016BE  EC18  F015         	call	___wmul	;wreg free
  3462  0016C2  0E50               	movlw	low __npowers_
  3463  0016C4  2421               	addwf	?___wmul,w,c
  3464  0016C6  6EF6               	movwf	tblptrl,c
  3465  0016C8  0E08               	movlw	high __npowers_
  3466  0016CA  2022               	addwfc	?___wmul+1,w,c
  3467  0016CC  6EF7               	movwf	tblptrh,c
  3468  0016CE                     	if	0	;There are less than 3 active tblptr bytes
  3469  0016CE                     	endif
  3470  0016CE  0009               	tblrd		*+
  3471  0016D0  CFF5 F02A          	movff	tablat,___ftmul@f2
  3472  0016D4  0009               	tblrd		*+
  3473  0016D6  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  3474  0016DA  000A               	tblrd		*-
  3475  0016DC  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  3476  0016E0  C03C  F027         	movff	_fround$1581,___ftmul@f1
  3477  0016E4  C03D  F028         	movff	_fround$1581+1,___ftmul@f1+1
  3478  0016E8  C03E  F029         	movff	_fround$1581+2,___ftmul@f1+2
  3479  0016EC  ECDA  F00F         	call	___ftmul	;wreg free
  3480  0016F0  C027  F039         	movff	?___ftmul,_fround$1582
  3481  0016F4  C028  F03A         	movff	?___ftmul+1,_fround$1582+1
  3482  0016F8  C029  F03B         	movff	?___ftmul+2,_fround$1582+2
  3483                           
  3484                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3485  0016FC  C039  F027         	movff	_fround$1582,___ftmul@f1
  3486  001700  C03A  F028         	movff	_fround$1582+1,___ftmul@f1+1
  3487  001704  C03B  F029         	movff	_fround$1582+2,___ftmul@f1+2
  3488  001708  0E00               	movlw	0
  3489  00170A  6E2A               	movwf	___ftmul@f2,c
  3490  00170C  0E00               	movlw	0
  3491  00170E  6E2B               	movwf	___ftmul@f2+1,c
  3492  001710  0E3F               	movlw	63
  3493  001712  6E2C               	movwf	___ftmul@f2+2,c
  3494  001714  ECDA  F00F         	call	___ftmul	;wreg free
  3495  001718  C027  F036         	movff	?___ftmul,?_fround
  3496  00171C  C028  F037         	movff	?___ftmul+1,?_fround+1
  3497  001720  C029  F038         	movff	?___ftmul+2,?_fround+2
  3498  001724  0012               	return	
  3499  001726                     l230:
  3500                           
  3501                           ;doprnt.c: 415: else if(prec > 10)
  3502  001726  0E0A               	movlw	10
  3503  001728  643F               	cpfsgt	fround@prec,c
  3504  00172A  D063               	goto	l233
  3505                           
  3506                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3507  00172C  0E00               	movlw	0
  3508  00172E  6E24               	movwf	___wmul@multiplicand+1,c
  3509  001730  0E03               	movlw	3
  3510  001732  6E23               	movwf	___wmul@multiplicand,c
  3511  001734  0E00               	movlw	0
  3512  001736  6E16               	movwf	___awmod@divisor+1,c
  3513  001738  0E0A               	movlw	10
  3514  00173A  6E15               	movwf	___awmod@divisor,c
  3515  00173C  C03F  F013         	movff	fround@prec,___awmod@dividend
  3516  001740  6A14               	clrf	___awmod@dividend+1,c
  3517  001742  ECBF  F013         	call	___awmod	;wreg free
  3518  001746  C013  F021         	movff	?___awmod,___wmul@multiplier
  3519  00174A  C014  F022         	movff	?___awmod+1,___wmul@multiplier+1
  3520  00174E  EC18  F015         	call	___wmul	;wreg free
  3521  001752  0E50               	movlw	low __npowers_
  3522  001754  2421               	addwf	?___wmul,w,c
  3523  001756  6EF6               	movwf	tblptrl,c
  3524  001758  0E08               	movlw	high __npowers_
  3525  00175A  2022               	addwfc	?___wmul+1,w,c
  3526  00175C  6EF7               	movwf	tblptrh,c
  3527  00175E                     	if	0	;There are less than 3 active tblptr bytes
  3528  00175E                     	endif
  3529  00175E  0009               	tblrd		*+
  3530  001760  CFF5 F02A          	movff	tablat,___ftmul@f2
  3531  001764  0009               	tblrd		*+
  3532  001766  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  3533  00176A  000A               	tblrd		*-
  3534  00176C  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  3535  001770  0E00               	movlw	0
  3536  001772  6E1C               	movwf	___awdiv@divisor+1,c
  3537  001774  0E0A               	movlw	10
  3538  001776  6E1B               	movwf	___awdiv@divisor,c
  3539  001778  C03F  F019         	movff	fround@prec,___awdiv@dividend
  3540  00177C  6A1A               	clrf	___awdiv@dividend+1,c
  3541  00177E  EC01  F013         	call	___awdiv	;wreg free
  3542  001782  0E09               	movlw	9
  3543  001784  2419               	addwf	?___awdiv,w,c
  3544  001786  6E21               	movwf	___wmul@multiplier,c
  3545  001788  0E00               	movlw	0
  3546  00178A  201A               	addwfc	?___awdiv+1,w,c
  3547  00178C  6E22               	movwf	___wmul@multiplier+1,c
  3548  00178E  0E00               	movlw	0
  3549  001790  6E24               	movwf	___wmul@multiplicand+1,c
  3550  001792  0E03               	movlw	3
  3551  001794  6E23               	movwf	___wmul@multiplicand,c
  3552  001796  EC18  F015         	call	___wmul	;wreg free
  3553  00179A  0E50               	movlw	low __npowers_
  3554  00179C  2421               	addwf	?___wmul,w,c
  3555  00179E  6EF6               	movwf	tblptrl,c
  3556  0017A0  0E08               	movlw	high __npowers_
  3557  0017A2  2022               	addwfc	?___wmul+1,w,c
  3558  0017A4  6EF7               	movwf	tblptrh,c
  3559  0017A6                     	if	0	;There are less than 3 active tblptr bytes
  3560  0017A6                     	endif
  3561  0017A6  0009               	tblrd		*+
  3562  0017A8  CFF5 F027          	movff	tablat,___ftmul@f1
  3563  0017AC  0009               	tblrd		*+
  3564  0017AE  CFF5 F028          	movff	tablat,___ftmul@f1+1
  3565  0017B2  000A               	tblrd		*-
  3566  0017B4  CFF5 F029          	movff	tablat,___ftmul@f1+2
  3567  0017B8  ECDA  F00F         	call	___ftmul	;wreg free
  3568  0017BC  C027  F03C         	movff	?___ftmul,_fround$1581
  3569  0017C0  C028  F03D         	movff	?___ftmul+1,_fround$1581+1
  3570  0017C4  C029  F03E         	movff	?___ftmul+2,_fround$1581+2
  3571                           
  3572                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3573  0017C8  C03C  F027         	movff	_fround$1581,___ftmul@f1
  3574  0017CC  C03D  F028         	movff	_fround$1581+1,___ftmul@f1+1
  3575  0017D0  C03E  F029         	movff	_fround$1581+2,___ftmul@f1+2
  3576  0017D4  0E00               	movlw	0
  3577  0017D6  6E2A               	movwf	___ftmul@f2,c
  3578  0017D8  0E00               	movlw	0
  3579  0017DA  6E2B               	movwf	___ftmul@f2+1,c
  3580  0017DC  0E3F               	movlw	63
  3581  0017DE  6E2C               	movwf	___ftmul@f2+2,c
  3582  0017E0  ECDA  F00F         	call	___ftmul	;wreg free
  3583  0017E4  C027  F036         	movff	?___ftmul,?_fround
  3584  0017E8  C028  F037         	movff	?___ftmul+1,?_fround+1
  3585  0017EC  C029  F038         	movff	?___ftmul+2,?_fround+2
  3586  0017F0  0012               	return	
  3587  0017F2                     l233:
  3588                           
  3589                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3590  0017F2  503F               	movf	fround@prec,w,c
  3591  0017F4  0D03               	mullw	3
  3592  0017F6  0E50               	movlw	low __npowers_
  3593  0017F8  24F3               	addwf	prodl,w,c
  3594  0017FA  6EF6               	movwf	tblptrl,c
  3595  0017FC  0E08               	movlw	high __npowers_
  3596  0017FE  20F4               	addwfc	prodh,w,c
  3597  001800  6EF7               	movwf	tblptrh,c
  3598  001802                     	if	0	;There are less than 3 active tblptr bytes
  3599  001802                     	endif
  3600  001802  0009               	tblrd		*+
  3601  001804  CFF5 F027          	movff	tablat,___ftmul@f1
  3602  001808  0009               	tblrd		*+
  3603  00180A  CFF5 F028          	movff	tablat,___ftmul@f1+1
  3604  00180E  000A               	tblrd		*-
  3605  001810  CFF5 F029          	movff	tablat,___ftmul@f1+2
  3606  001814  0E00               	movlw	0
  3607  001816  6E2A               	movwf	___ftmul@f2,c
  3608  001818  0E00               	movlw	0
  3609  00181A  6E2B               	movwf	___ftmul@f2+1,c
  3610  00181C  0E3F               	movlw	63
  3611  00181E  6E2C               	movwf	___ftmul@f2+2,c
  3612  001820  ECDA  F00F         	call	___ftmul	;wreg free
  3613  001824  C027  F036         	movff	?___ftmul,?_fround
  3614  001828  C028  F037         	movff	?___ftmul+1,?_fround+1
  3615  00182C  C029  F038         	movff	?___ftmul+2,?_fround+2
  3616  001830  0012               	return	
  3617  001832                     __end_of_fround:
  3618                           	opt stack 0
  3619                           tblptru	equ	0xFF8
  3620                           tblptrh	equ	0xFF7
  3621                           tblptrl	equ	0xFF6
  3622                           tablat	equ	0xFF5
  3623                           prodh	equ	0xFF4
  3624                           prodl	equ	0xFF3
  3625                           postinc0	equ	0xFEE
  3626                           wreg	equ	0xFE8
  3627                           indf2	equ	0xFDF
  3628                           postinc2	equ	0xFDE
  3629                           postdec2	equ	0xFDD
  3630                           fsr2h	equ	0xFDA
  3631                           fsr2l	equ	0xFD9
  3632                           status	equ	0xFD8
  3633                           
  3634 ;; *************** function ___wmul *****************
  3635 ;; Defined at:
  3636 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  3637 ;; Parameters:    Size  Location     Type
  3638 ;;  multiplier      2   32[COMRAM] unsigned int 
  3639 ;;  multiplicand    2   34[COMRAM] unsigned int 
  3640 ;; Auto vars:     Size  Location     Type
  3641 ;;  product         2   36[COMRAM] unsigned int 
  3642 ;; Return value:  Size  Location     Type
  3643 ;;                  2   32[COMRAM] unsigned int 
  3644 ;; Registers used:
  3645 ;;		wreg, status,2, status,0, prodl, prodh
  3646 ;; Tracked objects:
  3647 ;;		On entry : 0/0
  3648 ;;		On exit  : 0/0
  3649 ;;		Unchanged: 0/0
  3650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3651 ;;      Params:         4       0       0       0       0       0       0       0       0
  3652 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3653 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3654 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3655 ;;Total ram usage:        6 bytes
  3656 ;; Hardware stack levels used:    1
  3657 ;; Hardware stack levels required when called:    1
  3658 ;; This function calls:
  3659 ;;		Nothing
  3660 ;; This function is called by:
  3661 ;;		_fround
  3662 ;;		_scale
  3663 ;;		_sprintf
  3664 ;; This function uses a non-reentrant model
  3665 ;;
  3666                           
  3667                           	psect	text5
  3668  002A30                     __ptext5:
  3669                           	opt stack 0
  3670  002A30                     ___wmul:
  3671                           	opt stack 27
  3672                           
  3673                           ;incstack = 0
  3674  002A30  5021               	movf	___wmul@multiplier,w,c
  3675  002A32  0223               	mulwf	___wmul@multiplicand,c
  3676  002A34  CFF3 F025          	movff	prodl,___wmul@product
  3677  002A38  CFF4 F026          	movff	prodh,___wmul@product+1
  3678  002A3C  5021               	movf	___wmul@multiplier,w,c
  3679  002A3E  0224               	mulwf	___wmul@multiplicand+1,c
  3680  002A40  50F3               	movf	prodl,w,c
  3681  002A42  2626               	addwf	___wmul@product+1,f,c
  3682  002A44  5022               	movf	___wmul@multiplier+1,w,c
  3683  002A46  0223               	mulwf	___wmul@multiplicand,c
  3684  002A48  50F3               	movf	prodl,w,c
  3685  002A4A  2626               	addwf	___wmul@product+1,f,c
  3686  002A4C  C025  F021         	movff	___wmul@product,?___wmul
  3687  002A50  C026  F022         	movff	___wmul@product+1,?___wmul+1
  3688  002A54  0012               	return	
  3689  002A56                     __end_of___wmul:
  3690                           	opt stack 0
  3691                           tblptru	equ	0xFF8
  3692                           tblptrh	equ	0xFF7
  3693                           tblptrl	equ	0xFF6
  3694                           tablat	equ	0xFF5
  3695                           prodh	equ	0xFF4
  3696                           prodl	equ	0xFF3
  3697                           postinc0	equ	0xFEE
  3698                           wreg	equ	0xFE8
  3699                           indf2	equ	0xFDF
  3700                           postinc2	equ	0xFDE
  3701                           postdec2	equ	0xFDD
  3702                           fsr2h	equ	0xFDA
  3703                           fsr2l	equ	0xFD9
  3704                           status	equ	0xFD8
  3705                           
  3706 ;; *************** function ___ftmul *****************
  3707 ;; Defined at:
  3708 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  3709 ;; Parameters:    Size  Location     Type
  3710 ;;  f1              3   38[COMRAM] float 
  3711 ;;  f2              3   41[COMRAM] float 
  3712 ;; Auto vars:     Size  Location     Type
  3713 ;;  f3_as_produc    3   48[COMRAM] unsigned um
  3714 ;;  sign            1   52[COMRAM] unsigned char 
  3715 ;;  cntr            1   51[COMRAM] unsigned char 
  3716 ;;  exp             1   47[COMRAM] unsigned char 
  3717 ;; Return value:  Size  Location     Type
  3718 ;;                  3   38[COMRAM] float 
  3719 ;; Registers used:
  3720 ;;		wreg, status,2, status,0, cstack
  3721 ;; Tracked objects:
  3722 ;;		On entry : 0/0
  3723 ;;		On exit  : 0/0
  3724 ;;		Unchanged: 0/0
  3725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3726 ;;      Params:         6       0       0       0       0       0       0       0       0
  3727 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3728 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3729 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3730 ;;Total ram usage:       15 bytes
  3731 ;; Hardware stack levels used:    1
  3732 ;; Hardware stack levels required when called:    2
  3733 ;; This function calls:
  3734 ;;		___ftpack
  3735 ;; This function is called by:
  3736 ;;		_main
  3737 ;;		_fround
  3738 ;;		_scale
  3739 ;;		_sprintf
  3740 ;; This function uses a non-reentrant model
  3741 ;;
  3742                           
  3743                           	psect	text6
  3744  001FB4                     __ptext6:
  3745                           	opt stack 0
  3746  001FB4                     ___ftmul:
  3747                           	opt stack 26
  3748                           
  3749                           ;incstack = 0
  3750  001FB4  C029  F02D         	movff	___ftmul@f1+2,??___ftmul
  3751  001FB8  6A2E               	clrf	(??___ftmul+1)& (0+255),c
  3752  001FBA  6A2F               	clrf	(??___ftmul+2)& (0+255),c
  3753  001FBC  3428               	rlcf	___ftmul@f1+1,w,c
  3754  001FBE  362D               	rlcf	??___ftmul& (0+255),f,c
  3755  001FC0  E301               	bnc	u4041
  3756  001FC2  802E               	bsf	(??___ftmul+1)& (0+255),0,c
  3757  001FC4                     u4041:
  3758  001FC4  502D               	movf	??___ftmul,w,c
  3759  001FC6  6E30               	movwf	___ftmul@exp,c
  3760  001FC8  5030               	movf	___ftmul@exp,w,c
  3761  001FCA  A4D8               	btfss	status,2,c
  3762  001FCC  D007               	goto	l667
  3763  001FCE  0E00               	movlw	0
  3764  001FD0  6E27               	movwf	?___ftmul,c
  3765  001FD2  0E00               	movlw	0
  3766  001FD4  6E28               	movwf	?___ftmul+1,c
  3767  001FD6  0E00               	movlw	0
  3768  001FD8  6E29               	movwf	?___ftmul+2,c
  3769  001FDA  0012               	return	
  3770  001FDC                     l667:
  3771  001FDC  C02C  F02D         	movff	___ftmul@f2+2,??___ftmul
  3772  001FE0  6A2E               	clrf	(??___ftmul+1)& (0+255),c
  3773  001FE2  6A2F               	clrf	(??___ftmul+2)& (0+255),c
  3774  001FE4  342B               	rlcf	___ftmul@f2+1,w,c
  3775  001FE6  362D               	rlcf	??___ftmul& (0+255),f,c
  3776  001FE8  E301               	bnc	u4061
  3777  001FEA  802E               	bsf	(??___ftmul+1)& (0+255),0,c
  3778  001FEC                     u4061:
  3779  001FEC  502D               	movf	??___ftmul,w,c
  3780  001FEE  6E35               	movwf	___ftmul@sign,c
  3781  001FF0  5035               	movf	___ftmul@sign,w,c
  3782  001FF2  A4D8               	btfss	status,2,c
  3783  001FF4  D007               	goto	l669
  3784  001FF6  0E00               	movlw	0
  3785  001FF8  6E27               	movwf	?___ftmul,c
  3786  001FFA  0E00               	movlw	0
  3787  001FFC  6E28               	movwf	?___ftmul+1,c
  3788  001FFE  0E00               	movlw	0
  3789  002000  6E29               	movwf	?___ftmul+2,c
  3790  002002  0012               	return	
  3791  002004                     l669:
  3792  002004  5035               	movf	___ftmul@sign,w,c
  3793  002006  0F7B               	addlw	123
  3794  002008  2630               	addwf	___ftmul@exp,f,c
  3795  00200A  C029  F035         	movff	___ftmul@f1+2,___ftmul@sign
  3796  00200E  502C               	movf	___ftmul@f2+2,w,c
  3797  002010  1A35               	xorwf	___ftmul@sign,f,c
  3798  002012  0E80               	movlw	128
  3799  002014  1635               	andwf	___ftmul@sign,f,c
  3800  002016  8E28               	bsf	___ftmul@f1+1,7,c
  3801  002018  8E2B               	bsf	___ftmul@f2+1,7,c
  3802  00201A  0EFF               	movlw	255
  3803  00201C  162A               	andwf	___ftmul@f2,f,c
  3804  00201E  0EFF               	movlw	255
  3805  002020  162B               	andwf	___ftmul@f2+1,f,c
  3806  002022  0E00               	movlw	0
  3807  002024  162C               	andwf	___ftmul@f2+2,f,c
  3808  002026  0E00               	movlw	0
  3809  002028  6E31               	movwf	___ftmul@f3_as_product,c
  3810  00202A  0E00               	movlw	0
  3811  00202C  6E32               	movwf	___ftmul@f3_as_product+1,c
  3812  00202E  0E00               	movlw	0
  3813  002030  6E33               	movwf	___ftmul@f3_as_product+2,c
  3814  002032  0E07               	movlw	7
  3815  002034  6E34               	movwf	___ftmul@cntr,c
  3816  002036  A027               	btfss	___ftmul@f1,0,c
  3817  002038  D006               	goto	l671
  3818  00203A  502A               	movf	___ftmul@f2,w,c
  3819  00203C  2631               	addwf	___ftmul@f3_as_product,f,c
  3820  00203E  502B               	movf	___ftmul@f2+1,w,c
  3821  002040  2232               	addwfc	___ftmul@f3_as_product+1,f,c
  3822  002042  502C               	movf	___ftmul@f2+2,w,c
  3823  002044  2233               	addwfc	___ftmul@f3_as_product+2,f,c
  3824  002046                     l671:
  3825  002046  90D8               	bcf	status,0,c
  3826  002048  3229               	rrcf	___ftmul@f1+2,f,c
  3827  00204A  3228               	rrcf	___ftmul@f1+1,f,c
  3828  00204C  3227               	rrcf	___ftmul@f1,f,c
  3829  00204E  90D8               	bcf	status,0,c
  3830  002050  362A               	rlcf	___ftmul@f2,f,c
  3831  002052  362B               	rlcf	___ftmul@f2+1,f,c
  3832  002054  362C               	rlcf	___ftmul@f2+2,f,c
  3833  002056  2E34               	decfsz	___ftmul@cntr,f,c
  3834  002058  D7EE               	goto	l670
  3835  00205A  0E09               	movlw	9
  3836  00205C  6E34               	movwf	___ftmul@cntr,c
  3837  00205E  A027               	btfss	___ftmul@f1,0,c
  3838  002060  D006               	goto	l674
  3839  002062  502A               	movf	___ftmul@f2,w,c
  3840  002064  2631               	addwf	___ftmul@f3_as_product,f,c
  3841  002066  502B               	movf	___ftmul@f2+1,w,c
  3842  002068  2232               	addwfc	___ftmul@f3_as_product+1,f,c
  3843  00206A  502C               	movf	___ftmul@f2+2,w,c
  3844  00206C  2233               	addwfc	___ftmul@f3_as_product+2,f,c
  3845  00206E                     l674:
  3846  00206E  90D8               	bcf	status,0,c
  3847  002070  3229               	rrcf	___ftmul@f1+2,f,c
  3848  002072  3228               	rrcf	___ftmul@f1+1,f,c
  3849  002074  3227               	rrcf	___ftmul@f1,f,c
  3850  002076  90D8               	bcf	status,0,c
  3851  002078  3233               	rrcf	___ftmul@f3_as_product+2,f,c
  3852  00207A  3232               	rrcf	___ftmul@f3_as_product+1,f,c
  3853  00207C  3231               	rrcf	___ftmul@f3_as_product,f,c
  3854  00207E  2E34               	decfsz	___ftmul@cntr,f,c
  3855  002080  D7EE               	goto	l673
  3856  002082  C031  F013         	movff	___ftmul@f3_as_product,___ftpack@arg
  3857  002086  C032  F014         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3858  00208A  C033  F015         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3859  00208E  C030  F016         	movff	___ftmul@exp,___ftpack@exp
  3860  002092  C035  F017         	movff	___ftmul@sign,___ftpack@sign
  3861  002096  EC62  F012         	call	___ftpack	;wreg free
  3862  00209A  C013  F027         	movff	?___ftpack,?___ftmul
  3863  00209E  C014  F028         	movff	?___ftpack+1,?___ftmul+1
  3864  0020A2  C015  F029         	movff	?___ftpack+2,?___ftmul+2
  3865  0020A6  0012               	return	
  3866  0020A8                     __end_of___ftmul:
  3867                           	opt stack 0
  3868                           tblptru	equ	0xFF8
  3869                           tblptrh	equ	0xFF7
  3870                           tblptrl	equ	0xFF6
  3871                           tablat	equ	0xFF5
  3872                           prodh	equ	0xFF4
  3873                           prodl	equ	0xFF3
  3874                           postinc0	equ	0xFEE
  3875                           wreg	equ	0xFE8
  3876                           indf2	equ	0xFDF
  3877                           postinc2	equ	0xFDE
  3878                           postdec2	equ	0xFDD
  3879                           fsr2h	equ	0xFDA
  3880                           fsr2l	equ	0xFD9
  3881                           status	equ	0xFD8
  3882                           
  3883 ;; *************** function ___awmod *****************
  3884 ;; Defined at:
  3885 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  3886 ;; Parameters:    Size  Location     Type
  3887 ;;  dividend        2   18[COMRAM] int 
  3888 ;;  divisor         2   20[COMRAM] int 
  3889 ;; Auto vars:     Size  Location     Type
  3890 ;;  sign            1   23[COMRAM] unsigned char 
  3891 ;;  counter         1   22[COMRAM] unsigned char 
  3892 ;; Return value:  Size  Location     Type
  3893 ;;                  2   18[COMRAM] int 
  3894 ;; Registers used:
  3895 ;;		wreg, status,2, status,0
  3896 ;; Tracked objects:
  3897 ;;		On entry : 0/0
  3898 ;;		On exit  : 0/0
  3899 ;;		Unchanged: 0/0
  3900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3901 ;;      Params:         4       0       0       0       0       0       0       0       0
  3902 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3903 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3904 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3905 ;;Total ram usage:        6 bytes
  3906 ;; Hardware stack levels used:    1
  3907 ;; Hardware stack levels required when called:    1
  3908 ;; This function calls:
  3909 ;;		Nothing
  3910 ;; This function is called by:
  3911 ;;		_fround
  3912 ;;		_scale
  3913 ;; This function uses a non-reentrant model
  3914 ;;
  3915                           
  3916                           	psect	text7
  3917  00277E                     __ptext7:
  3918                           	opt stack 0
  3919  00277E                     ___awmod:
  3920                           	opt stack 27
  3921                           
  3922                           ;incstack = 0
  3923  00277E  0E00               	movlw	0
  3924  002780  6E18               	movwf	___awmod@sign,c
  3925  002782  AE14               	btfss	___awmod@dividend+1,7,c
  3926  002784  D006               	goto	l520
  3927  002786  6C13               	negf	___awmod@dividend,c
  3928  002788  1E14               	comf	___awmod@dividend+1,f,c
  3929  00278A  B0D8               	btfsc	status,0,c
  3930  00278C  2A14               	incf	___awmod@dividend+1,f,c
  3931  00278E  0E01               	movlw	1
  3932  002790  6E18               	movwf	___awmod@sign,c
  3933  002792                     l520:
  3934  002792  AE16               	btfss	___awmod@divisor+1,7,c
  3935  002794  D004               	goto	l521
  3936  002796  6C15               	negf	___awmod@divisor,c
  3937  002798  1E16               	comf	___awmod@divisor+1,f,c
  3938  00279A  B0D8               	btfsc	status,0,c
  3939  00279C  2A16               	incf	___awmod@divisor+1,f,c
  3940  00279E                     l521:
  3941  00279E  5015               	movf	___awmod@divisor,w,c
  3942  0027A0  1016               	iorwf	___awmod@divisor+1,w,c
  3943  0027A2  B4D8               	btfsc	status,2,c
  3944  0027A4  D018               	goto	l528
  3945  0027A6  0E01               	movlw	1
  3946  0027A8  6E17               	movwf	___awmod@counter,c
  3947  0027AA  D004               	goto	l523
  3948  0027AC  90D8               	bcf	status,0,c
  3949  0027AE  3615               	rlcf	___awmod@divisor,f,c
  3950  0027B0  3616               	rlcf	___awmod@divisor+1,f,c
  3951  0027B2  2A17               	incf	___awmod@counter,f,c
  3952  0027B4                     l523:
  3953  0027B4  AE16               	btfss	___awmod@divisor+1,7,c
  3954  0027B6  D7FA               	goto	l524
  3955  0027B8                     u2500:
  3956  0027B8  5015               	movf	___awmod@divisor,w,c
  3957  0027BA  5C13               	subwf	___awmod@dividend,w,c
  3958  0027BC  5016               	movf	___awmod@divisor+1,w,c
  3959  0027BE  5814               	subwfb	___awmod@dividend+1,w,c
  3960  0027C0  A0D8               	btfss	status,0,c
  3961  0027C2  D004               	goto	l527
  3962  0027C4  5015               	movf	___awmod@divisor,w,c
  3963  0027C6  5E13               	subwf	___awmod@dividend,f,c
  3964  0027C8  5016               	movf	___awmod@divisor+1,w,c
  3965  0027CA  5A14               	subwfb	___awmod@dividend+1,f,c
  3966  0027CC                     l527:
  3967  0027CC  90D8               	bcf	status,0,c
  3968  0027CE  3216               	rrcf	___awmod@divisor+1,f,c
  3969  0027D0  3215               	rrcf	___awmod@divisor,f,c
  3970  0027D2  2E17               	decfsz	___awmod@counter,f,c
  3971  0027D4  D7F1               	goto	u2500
  3972  0027D6                     l528:
  3973  0027D6  5018               	movf	___awmod@sign,w,c
  3974  0027D8  B4D8               	btfsc	status,2,c
  3975  0027DA  D004               	goto	l529
  3976  0027DC  6C13               	negf	___awmod@dividend,c
  3977  0027DE  1E14               	comf	___awmod@dividend+1,f,c
  3978  0027E0  B0D8               	btfsc	status,0,c
  3979  0027E2  2A14               	incf	___awmod@dividend+1,f,c
  3980  0027E4                     l529:
  3981  0027E4  C013  F013         	movff	___awmod@dividend,?___awmod
  3982  0027E8  C014  F014         	movff	___awmod@dividend+1,?___awmod+1
  3983  0027EC  0012               	return	
  3984  0027EE                     __end_of___awmod:
  3985                           	opt stack 0
  3986                           tblptru	equ	0xFF8
  3987                           tblptrh	equ	0xFF7
  3988                           tblptrl	equ	0xFF6
  3989                           tablat	equ	0xFF5
  3990                           prodh	equ	0xFF4
  3991                           prodl	equ	0xFF3
  3992                           postinc0	equ	0xFEE
  3993                           wreg	equ	0xFE8
  3994                           indf2	equ	0xFDF
  3995                           postinc2	equ	0xFDE
  3996                           postdec2	equ	0xFDD
  3997                           fsr2h	equ	0xFDA
  3998                           fsr2l	equ	0xFD9
  3999                           status	equ	0xFD8
  4000                           
  4001 ;; *************** function ___awdiv *****************
  4002 ;; Defined at:
  4003 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  4004 ;; Parameters:    Size  Location     Type
  4005 ;;  dividend        2   24[COMRAM] int 
  4006 ;;  divisor         2   26[COMRAM] int 
  4007 ;; Auto vars:     Size  Location     Type
  4008 ;;  quotient        2   30[COMRAM] int 
  4009 ;;  sign            1   29[COMRAM] unsigned char 
  4010 ;;  counter         1   28[COMRAM] unsigned char 
  4011 ;; Return value:  Size  Location     Type
  4012 ;;                  2   24[COMRAM] int 
  4013 ;; Registers used:
  4014 ;;		wreg, status,2, status,0
  4015 ;; Tracked objects:
  4016 ;;		On entry : 0/0
  4017 ;;		On exit  : 0/0
  4018 ;;		Unchanged: 0/0
  4019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4020 ;;      Params:         4       0       0       0       0       0       0       0       0
  4021 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4022 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4023 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4024 ;;Total ram usage:        8 bytes
  4025 ;; Hardware stack levels used:    1
  4026 ;; Hardware stack levels required when called:    1
  4027 ;; This function calls:
  4028 ;;		Nothing
  4029 ;; This function is called by:
  4030 ;;		_fround
  4031 ;;		_scale
  4032 ;;		_sprintf
  4033 ;; This function uses a non-reentrant model
  4034 ;;
  4035                           
  4036                           	psect	text8
  4037  002602                     __ptext8:
  4038                           	opt stack 0
  4039  002602                     ___awdiv:
  4040                           	opt stack 27
  4041                           
  4042                           ;incstack = 0
  4043  002602  0E00               	movlw	0
  4044  002604  6E1E               	movwf	___awdiv@sign,c
  4045  002606  AE1C               	btfss	___awdiv@divisor+1,7,c
  4046  002608  D006               	goto	l507
  4047  00260A  6C1B               	negf	___awdiv@divisor,c
  4048  00260C  1E1C               	comf	___awdiv@divisor+1,f,c
  4049  00260E  B0D8               	btfsc	status,0,c
  4050  002610  2A1C               	incf	___awdiv@divisor+1,f,c
  4051  002612  0E01               	movlw	1
  4052  002614  6E1E               	movwf	___awdiv@sign,c
  4053  002616                     l507:
  4054  002616  AE1A               	btfss	___awdiv@dividend+1,7,c
  4055  002618  D006               	goto	l508
  4056  00261A  6C19               	negf	___awdiv@dividend,c
  4057  00261C  1E1A               	comf	___awdiv@dividend+1,f,c
  4058  00261E  B0D8               	btfsc	status,0,c
  4059  002620  2A1A               	incf	___awdiv@dividend+1,f,c
  4060  002622  0E01               	movlw	1
  4061  002624  1A1E               	xorwf	___awdiv@sign,f,c
  4062  002626                     l508:
  4063  002626  0E00               	movlw	0
  4064  002628  6E20               	movwf	___awdiv@quotient+1,c
  4065  00262A  0E00               	movlw	0
  4066  00262C  6E1F               	movwf	___awdiv@quotient,c
  4067  00262E  501B               	movf	___awdiv@divisor,w,c
  4068  002630  101C               	iorwf	___awdiv@divisor+1,w,c
  4069  002632  B4D8               	btfsc	status,2,c
  4070  002634  D01C               	goto	l515
  4071  002636  0E01               	movlw	1
  4072  002638  6E1D               	movwf	___awdiv@counter,c
  4073  00263A  D004               	goto	l510
  4074  00263C  90D8               	bcf	status,0,c
  4075  00263E  361B               	rlcf	___awdiv@divisor,f,c
  4076  002640  361C               	rlcf	___awdiv@divisor+1,f,c
  4077  002642  2A1D               	incf	___awdiv@counter,f,c
  4078  002644                     l510:
  4079  002644  AE1C               	btfss	___awdiv@divisor+1,7,c
  4080  002646  D7FA               	goto	l511
  4081  002648                     u2440:
  4082  002648  90D8               	bcf	status,0,c
  4083  00264A  361F               	rlcf	___awdiv@quotient,f,c
  4084  00264C  3620               	rlcf	___awdiv@quotient+1,f,c
  4085  00264E  501B               	movf	___awdiv@divisor,w,c
  4086  002650  5C19               	subwf	___awdiv@dividend,w,c
  4087  002652  501C               	movf	___awdiv@divisor+1,w,c
  4088  002654  581A               	subwfb	___awdiv@dividend+1,w,c
  4089  002656  A0D8               	btfss	status,0,c
  4090  002658  D005               	goto	l514
  4091  00265A  501B               	movf	___awdiv@divisor,w,c
  4092  00265C  5E19               	subwf	___awdiv@dividend,f,c
  4093  00265E  501C               	movf	___awdiv@divisor+1,w,c
  4094  002660  5A1A               	subwfb	___awdiv@dividend+1,f,c
  4095  002662  801F               	bsf	___awdiv@quotient,0,c
  4096  002664                     l514:
  4097  002664  90D8               	bcf	status,0,c
  4098  002666  321C               	rrcf	___awdiv@divisor+1,f,c
  4099  002668  321B               	rrcf	___awdiv@divisor,f,c
  4100  00266A  2E1D               	decfsz	___awdiv@counter,f,c
  4101  00266C  D7ED               	goto	u2440
  4102  00266E                     l515:
  4103  00266E  501E               	movf	___awdiv@sign,w,c
  4104  002670  B4D8               	btfsc	status,2,c
  4105  002672  D004               	goto	l516
  4106  002674  6C1F               	negf	___awdiv@quotient,c
  4107  002676  1E20               	comf	___awdiv@quotient+1,f,c
  4108  002678  B0D8               	btfsc	status,0,c
  4109  00267A  2A20               	incf	___awdiv@quotient+1,f,c
  4110  00267C                     l516:
  4111  00267C  C01F  F019         	movff	___awdiv@quotient,?___awdiv
  4112  002680  C020  F01A         	movff	___awdiv@quotient+1,?___awdiv+1
  4113  002684  0012               	return	
  4114  002686                     __end_of___awdiv:
  4115                           	opt stack 0
  4116                           tblptru	equ	0xFF8
  4117                           tblptrh	equ	0xFF7
  4118                           tblptrl	equ	0xFF6
  4119                           tablat	equ	0xFF5
  4120                           prodh	equ	0xFF4
  4121                           prodl	equ	0xFF3
  4122                           postinc0	equ	0xFEE
  4123                           wreg	equ	0xFE8
  4124                           indf2	equ	0xFDF
  4125                           postinc2	equ	0xFDE
  4126                           postdec2	equ	0xFDD
  4127                           fsr2h	equ	0xFDA
  4128                           fsr2l	equ	0xFD9
  4129                           status	equ	0xFD8
  4130                           
  4131 ;; *************** function __tdiv_to_l_ *****************
  4132 ;; Defined at:
  4133 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdivl.c"
  4134 ;; Parameters:    Size  Location     Type
  4135 ;;  f1              3   18[COMRAM] float 
  4136 ;;  f2              3   21[COMRAM] float 
  4137 ;; Auto vars:     Size  Location     Type
  4138 ;;  quot            4   27[COMRAM] unsigned long 
  4139 ;;  exp1            1   32[COMRAM] unsigned char 
  4140 ;;  cntr            1   31[COMRAM] unsigned char 
  4141 ;; Return value:  Size  Location     Type
  4142 ;;                  4   18[COMRAM] unsigned long 
  4143 ;; Registers used:
  4144 ;;		wreg, status,2, status,0
  4145 ;; Tracked objects:
  4146 ;;		On entry : 0/0
  4147 ;;		On exit  : 0/0
  4148 ;;		Unchanged: 0/0
  4149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4150 ;;      Params:         6       0       0       0       0       0       0       0       0
  4151 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4152 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4153 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4154 ;;Total ram usage:       15 bytes
  4155 ;; Hardware stack levels used:    1
  4156 ;; Hardware stack levels required when called:    1
  4157 ;; This function calls:
  4158 ;;		Nothing
  4159 ;; This function is called by:
  4160 ;;		_sprintf
  4161 ;; This function uses a non-reentrant model
  4162 ;;
  4163                           
  4164                           	psect	text9
  4165  001B52                     __ptext9:
  4166                           	opt stack 0
  4167  001B52                     __tdiv_to_l_:
  4168                           	opt stack 28
  4169                           
  4170                           ;incstack = 0
  4171  001B52  C015  F019         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4172  001B56  6A1A               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4173  001B58  6A1B               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4174  001B5A  3414               	rlcf	__tdiv_to_l_@f1+1,w,c
  4175  001B5C  3619               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4176  001B5E  E301               	bnc	u2631
  4177  001B60  801A               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4178  001B62                     u2631:
  4179  001B62  5019               	movf	??__tdiv_to_l_,w,c
  4180  001B64  6E21               	movwf	__tdiv_to_l_@exp1,c
  4181  001B66  5021               	movf	__tdiv_to_l_@exp1,w,c
  4182  001B68  A4D8               	btfss	status,2,c
  4183  001B6A  D009               	goto	l643
  4184  001B6C  0E00               	movlw	0
  4185  001B6E  6E13               	movwf	?__tdiv_to_l_,c
  4186  001B70  0E00               	movlw	0
  4187  001B72  6E14               	movwf	?__tdiv_to_l_+1,c
  4188  001B74  0E00               	movlw	0
  4189  001B76  6E15               	movwf	?__tdiv_to_l_+2,c
  4190  001B78  0E00               	movlw	0
  4191  001B7A  6E16               	movwf	?__tdiv_to_l_+3,c
  4192  001B7C  0012               	return	
  4193  001B7E                     l643:
  4194  001B7E  C018  F019         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4195  001B82  6A1A               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4196  001B84  6A1B               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4197  001B86  3417               	rlcf	__tdiv_to_l_@f2+1,w,c
  4198  001B88  3619               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4199  001B8A  E301               	bnc	u2651
  4200  001B8C  801A               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4201  001B8E                     u2651:
  4202  001B8E  5019               	movf	??__tdiv_to_l_,w,c
  4203  001B90  6E20               	movwf	__tdiv_to_l_@cntr,c
  4204  001B92  5020               	movf	__tdiv_to_l_@cntr,w,c
  4205  001B94  A4D8               	btfss	status,2,c
  4206  001B96  D009               	goto	l645
  4207  001B98  0E00               	movlw	0
  4208  001B9A  6E13               	movwf	?__tdiv_to_l_,c
  4209  001B9C  0E00               	movlw	0
  4210  001B9E  6E14               	movwf	?__tdiv_to_l_+1,c
  4211  001BA0  0E00               	movlw	0
  4212  001BA2  6E15               	movwf	?__tdiv_to_l_+2,c
  4213  001BA4  0E00               	movlw	0
  4214  001BA6  6E16               	movwf	?__tdiv_to_l_+3,c
  4215  001BA8  0012               	return	
  4216  001BAA                     l645:
  4217  001BAA  8E14               	bsf	__tdiv_to_l_@f1+1,7,c
  4218  001BAC  0EFF               	movlw	255
  4219  001BAE  1613               	andwf	__tdiv_to_l_@f1,f,c
  4220  001BB0  0EFF               	movlw	255
  4221  001BB2  1614               	andwf	__tdiv_to_l_@f1+1,f,c
  4222  001BB4  0E00               	movlw	0
  4223  001BB6  1615               	andwf	__tdiv_to_l_@f1+2,f,c
  4224  001BB8  8E17               	bsf	__tdiv_to_l_@f2+1,7,c
  4225  001BBA  0EFF               	movlw	255
  4226  001BBC  1616               	andwf	__tdiv_to_l_@f2,f,c
  4227  001BBE  0EFF               	movlw	255
  4228  001BC0  1617               	andwf	__tdiv_to_l_@f2+1,f,c
  4229  001BC2  0E00               	movlw	0
  4230  001BC4  1618               	andwf	__tdiv_to_l_@f2+2,f,c
  4231  001BC6  0E00               	movlw	0
  4232  001BC8  6E1C               	movwf	__tdiv_to_l_@quot,c
  4233  001BCA  0E00               	movlw	0
  4234  001BCC  6E1D               	movwf	__tdiv_to_l_@quot+1,c
  4235  001BCE  0E00               	movlw	0
  4236  001BD0  6E1E               	movwf	__tdiv_to_l_@quot+2,c
  4237  001BD2  0E00               	movlw	0
  4238  001BD4  6E1F               	movwf	__tdiv_to_l_@quot+3,c
  4239  001BD6  0E7F               	movlw	127
  4240  001BD8  5E21               	subwf	__tdiv_to_l_@exp1,f,c
  4241  001BDA  5020               	movf	__tdiv_to_l_@cntr,w,c
  4242  001BDC  0F98               	addlw	152
  4243  001BDE  5E21               	subwf	__tdiv_to_l_@exp1,f,c
  4244  001BE0  0E18               	movlw	24
  4245  001BE2  6E20               	movwf	__tdiv_to_l_@cntr,c
  4246  001BE4                     l646:
  4247  001BE4  90D8               	bcf	status,0,c
  4248  001BE6  361C               	rlcf	__tdiv_to_l_@quot,f,c
  4249  001BE8  361D               	rlcf	__tdiv_to_l_@quot+1,f,c
  4250  001BEA  361E               	rlcf	__tdiv_to_l_@quot+2,f,c
  4251  001BEC  361F               	rlcf	__tdiv_to_l_@quot+3,f,c
  4252  001BEE  5016               	movf	__tdiv_to_l_@f2,w,c
  4253  001BF0  5C13               	subwf	__tdiv_to_l_@f1,w,c
  4254  001BF2  5017               	movf	__tdiv_to_l_@f2+1,w,c
  4255  001BF4  5814               	subwfb	__tdiv_to_l_@f1+1,w,c
  4256  001BF6  5018               	movf	__tdiv_to_l_@f2+2,w,c
  4257  001BF8  5815               	subwfb	__tdiv_to_l_@f1+2,w,c
  4258  001BFA  A0D8               	btfss	status,0,c
  4259  001BFC  D007               	goto	l647
  4260  001BFE  5016               	movf	__tdiv_to_l_@f2,w,c
  4261  001C00  5E13               	subwf	__tdiv_to_l_@f1,f,c
  4262  001C02  5017               	movf	__tdiv_to_l_@f2+1,w,c
  4263  001C04  5A14               	subwfb	__tdiv_to_l_@f1+1,f,c
  4264  001C06  5018               	movf	__tdiv_to_l_@f2+2,w,c
  4265  001C08  5A15               	subwfb	__tdiv_to_l_@f1+2,f,c
  4266  001C0A  801C               	bsf	__tdiv_to_l_@quot,0,c
  4267  001C0C                     l647:
  4268  001C0C  90D8               	bcf	status,0,c
  4269  001C0E  3613               	rlcf	__tdiv_to_l_@f1,f,c
  4270  001C10  3614               	rlcf	__tdiv_to_l_@f1+1,f,c
  4271  001C12  3615               	rlcf	__tdiv_to_l_@f1+2,f,c
  4272  001C14  2E20               	decfsz	__tdiv_to_l_@cntr,f,c
  4273  001C16  D7E6               	goto	l646
  4274  001C18  AE21               	btfss	__tdiv_to_l_@exp1,7,c
  4275  001C1A  D016               	goto	l649
  4276  001C1C  5021               	movf	__tdiv_to_l_@exp1,w,c
  4277  001C1E  0A80               	xorlw	128
  4278  001C20  0F97               	addlw	151
  4279  001C22  B0D8               	btfsc	status,0,c
  4280  001C24  D009               	goto	l650
  4281  001C26  0E00               	movlw	0
  4282  001C28  6E13               	movwf	?__tdiv_to_l_,c
  4283  001C2A  0E00               	movlw	0
  4284  001C2C  6E14               	movwf	?__tdiv_to_l_+1,c
  4285  001C2E  0E00               	movlw	0
  4286  001C30  6E15               	movwf	?__tdiv_to_l_+2,c
  4287  001C32  0E00               	movlw	0
  4288  001C34  6E16               	movwf	?__tdiv_to_l_+3,c
  4289  001C36  0012               	return	
  4290  001C38                     l650:
  4291  001C38  90D8               	bcf	status,0,c
  4292  001C3A  321F               	rrcf	__tdiv_to_l_@quot+3,f,c
  4293  001C3C  321E               	rrcf	__tdiv_to_l_@quot+2,f,c
  4294  001C3E  321D               	rrcf	__tdiv_to_l_@quot+1,f,c
  4295  001C40  321C               	rrcf	__tdiv_to_l_@quot,f,c
  4296  001C42  3E21               	incfsz	__tdiv_to_l_@exp1,f,c
  4297  001C44  D7F9               	goto	l650
  4298  001C46  D015               	goto	u2710
  4299  001C48                     l649:
  4300  001C48  0E17               	movlw	23
  4301  001C4A  6421               	cpfsgt	__tdiv_to_l_@exp1,c
  4302  001C4C  D00F               	goto	l655
  4303  001C4E  0E00               	movlw	0
  4304  001C50  6E13               	movwf	?__tdiv_to_l_,c
  4305  001C52  0E00               	movlw	0
  4306  001C54  6E14               	movwf	?__tdiv_to_l_+1,c
  4307  001C56  0E00               	movlw	0
  4308  001C58  6E15               	movwf	?__tdiv_to_l_+2,c
  4309  001C5A  0E00               	movlw	0
  4310  001C5C  6E16               	movwf	?__tdiv_to_l_+3,c
  4311  001C5E  0012               	return	
  4312  001C60  90D8               	bcf	status,0,c
  4313  001C62  361C               	rlcf	__tdiv_to_l_@quot,f,c
  4314  001C64  361D               	rlcf	__tdiv_to_l_@quot+1,f,c
  4315  001C66  361E               	rlcf	__tdiv_to_l_@quot+2,f,c
  4316  001C68  361F               	rlcf	__tdiv_to_l_@quot+3,f,c
  4317  001C6A  0621               	decf	__tdiv_to_l_@exp1,f,c
  4318  001C6C                     l655:
  4319  001C6C  5021               	movf	__tdiv_to_l_@exp1,w,c
  4320  001C6E  A4D8               	btfss	status,2,c
  4321  001C70  D7F7               	goto	l656
  4322  001C72                     u2710:
  4323  001C72  C01C  F013         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4324  001C76  C01D  F014         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4325  001C7A  C01E  F015         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4326  001C7E  C01F  F016         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4327  001C82  0012               	return		;funcret
  4328  001C84                     __end_of__tdiv_to_l_:
  4329                           	opt stack 0
  4330                           tblptru	equ	0xFF8
  4331                           tblptrh	equ	0xFF7
  4332                           tblptrl	equ	0xFF6
  4333                           tablat	equ	0xFF5
  4334                           prodh	equ	0xFF4
  4335                           prodl	equ	0xFF3
  4336                           postinc0	equ	0xFEE
  4337                           wreg	equ	0xFE8
  4338                           indf2	equ	0xFDF
  4339                           postinc2	equ	0xFDE
  4340                           postdec2	equ	0xFDD
  4341                           fsr2h	equ	0xFDA
  4342                           fsr2l	equ	0xFD9
  4343                           status	equ	0xFD8
  4344                           
  4345 ;; *************** function __div_to_l_ *****************
  4346 ;; Defined at:
  4347 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fldivl.c"
  4348 ;; Parameters:    Size  Location     Type
  4349 ;;  f1              3   18[COMRAM] unsigned long 
  4350 ;;  f2              3   21[COMRAM] unsigned long 
  4351 ;; Auto vars:     Size  Location     Type
  4352 ;;  quot            4   24[COMRAM] unsigned long 
  4353 ;;  exp1            1   29[COMRAM] unsigned char 
  4354 ;;  cntr            1   28[COMRAM] unsigned char 
  4355 ;; Return value:  Size  Location     Type
  4356 ;;                  4   18[COMRAM] unsigned long 
  4357 ;; Registers used:
  4358 ;;		wreg, status,2, status,0
  4359 ;; Tracked objects:
  4360 ;;		On entry : 0/0
  4361 ;;		On exit  : 0/0
  4362 ;;		Unchanged: 0/0
  4363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4364 ;;      Params:         6       0       0       0       0       0       0       0       0
  4365 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4366 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4367 ;;      Totals:        12       0       0       0       0       0       0       0       0
  4368 ;;Total ram usage:       12 bytes
  4369 ;; Hardware stack levels used:    1
  4370 ;; Hardware stack levels required when called:    1
  4371 ;; This function calls:
  4372 ;;		Nothing
  4373 ;; This function is called by:
  4374 ;;		_sprintf
  4375 ;; This function uses a non-reentrant model
  4376 ;;
  4377                           
  4378                           	psect	text10
  4379  001C84                     __ptext10:
  4380                           	opt stack 0
  4381  001C84                     __div_to_l_:
  4382                           	opt stack 28
  4383                           
  4384                           ;incstack = 0
  4385  001C84  3415               	rlcf	__div_to_l_@f1+2,w,c
  4386  001C86  3416               	rlcf	__div_to_l_@f1+3,w,c
  4387  001C88  6E1E               	movwf	__div_to_l_@exp1,c
  4388  001C8A  501E               	movf	__div_to_l_@exp1,w,c
  4389  001C8C  A4D8               	btfss	status,2,c
  4390  001C8E  D009               	goto	l539
  4391  001C90  0E00               	movlw	0
  4392  001C92  6E13               	movwf	?__div_to_l_,c
  4393  001C94  0E00               	movlw	0
  4394  001C96  6E14               	movwf	?__div_to_l_+1,c
  4395  001C98  0E00               	movlw	0
  4396  001C9A  6E15               	movwf	?__div_to_l_+2,c
  4397  001C9C  0E00               	movlw	0
  4398  001C9E  6E16               	movwf	?__div_to_l_+3,c
  4399  001CA0  0012               	return	
  4400  001CA2                     l539:
  4401  001CA2  3418               	rlcf	__div_to_l_@f2+2,w,c
  4402  001CA4  3419               	rlcf	__div_to_l_@f2+3,w,c
  4403  001CA6  6E1D               	movwf	__div_to_l_@cntr,c
  4404  001CA8  501D               	movf	__div_to_l_@cntr,w,c
  4405  001CAA  A4D8               	btfss	status,2,c
  4406  001CAC  D009               	goto	l541
  4407  001CAE  0E00               	movlw	0
  4408  001CB0  6E13               	movwf	?__div_to_l_,c
  4409  001CB2  0E00               	movlw	0
  4410  001CB4  6E14               	movwf	?__div_to_l_+1,c
  4411  001CB6  0E00               	movlw	0
  4412  001CB8  6E15               	movwf	?__div_to_l_+2,c
  4413  001CBA  0E00               	movlw	0
  4414  001CBC  6E16               	movwf	?__div_to_l_+3,c
  4415  001CBE  0012               	return	
  4416  001CC0                     l541:
  4417  001CC0  8E15               	bsf	__div_to_l_@f1+2,7,c
  4418  001CC2  0EFF               	movlw	255
  4419  001CC4  1613               	andwf	__div_to_l_@f1,f,c
  4420  001CC6  0EFF               	movlw	255
  4421  001CC8  1614               	andwf	__div_to_l_@f1+1,f,c
  4422  001CCA  0EFF               	movlw	255
  4423  001CCC  1615               	andwf	__div_to_l_@f1+2,f,c
  4424  001CCE  0E00               	movlw	0
  4425  001CD0  1616               	andwf	__div_to_l_@f1+3,f,c
  4426  001CD2  8E18               	bsf	__div_to_l_@f2+2,7,c
  4427  001CD4  0EFF               	movlw	255
  4428  001CD6  1616               	andwf	__div_to_l_@f2,f,c
  4429  001CD8  0EFF               	movlw	255
  4430  001CDA  1617               	andwf	__div_to_l_@f2+1,f,c
  4431  001CDC  0EFF               	movlw	255
  4432  001CDE  1618               	andwf	__div_to_l_@f2+2,f,c
  4433  001CE0  0E00               	movlw	0
  4434  001CE2  1619               	andwf	__div_to_l_@f2+3,f,c
  4435  001CE4  0E00               	movlw	0
  4436  001CE6  6E19               	movwf	__div_to_l_@quot,c
  4437  001CE8  0E00               	movlw	0
  4438  001CEA  6E1A               	movwf	__div_to_l_@quot+1,c
  4439  001CEC  0E00               	movlw	0
  4440  001CEE  6E1B               	movwf	__div_to_l_@quot+2,c
  4441  001CF0  0E00               	movlw	0
  4442  001CF2  6E1C               	movwf	__div_to_l_@quot+3,c
  4443  001CF4  0E7F               	movlw	127
  4444  001CF6  5E1E               	subwf	__div_to_l_@exp1,f,c
  4445  001CF8  501D               	movf	__div_to_l_@cntr,w,c
  4446  001CFA  0FA0               	addlw	160
  4447  001CFC  5E1E               	subwf	__div_to_l_@exp1,f,c
  4448  001CFE  0E20               	movlw	32
  4449  001D00  6E1D               	movwf	__div_to_l_@cntr,c
  4450  001D02  90D8               	bcf	status,0,c
  4451  001D04  3619               	rlcf	__div_to_l_@quot,f,c
  4452  001D06  361A               	rlcf	__div_to_l_@quot+1,f,c
  4453  001D08  361B               	rlcf	__div_to_l_@quot+2,f,c
  4454  001D0A  361C               	rlcf	__div_to_l_@quot+3,f,c
  4455  001D0C  5016               	movf	__div_to_l_@f2,w,c
  4456  001D0E  5C13               	subwf	__div_to_l_@f1,w,c
  4457  001D10  5017               	movf	__div_to_l_@f2+1,w,c
  4458  001D12  5814               	subwfb	__div_to_l_@f1+1,w,c
  4459  001D14  5018               	movf	__div_to_l_@f2+2,w,c
  4460  001D16  5815               	subwfb	__div_to_l_@f1+2,w,c
  4461  001D18  5019               	movf	__div_to_l_@f2+3,w,c
  4462  001D1A  5816               	subwfb	__div_to_l_@f1+3,w,c
  4463  001D1C  A0D8               	btfss	status,0,c
  4464  001D1E  D009               	goto	l543
  4465  001D20  5016               	movf	__div_to_l_@f2,w,c
  4466  001D22  5E13               	subwf	__div_to_l_@f1,f,c
  4467  001D24  5017               	movf	__div_to_l_@f2+1,w,c
  4468  001D26  5A14               	subwfb	__div_to_l_@f1+1,f,c
  4469  001D28  5018               	movf	__div_to_l_@f2+2,w,c
  4470  001D2A  5A15               	subwfb	__div_to_l_@f1+2,f,c
  4471  001D2C  5019               	movf	__div_to_l_@f2+3,w,c
  4472  001D2E  5A16               	subwfb	__div_to_l_@f1+3,f,c
  4473  001D30  8019               	bsf	__div_to_l_@quot,0,c
  4474  001D32                     l543:
  4475  001D32  90D8               	bcf	status,0,c
  4476  001D34  3613               	rlcf	__div_to_l_@f1,f,c
  4477  001D36  3614               	rlcf	__div_to_l_@f1+1,f,c
  4478  001D38  3615               	rlcf	__div_to_l_@f1+2,f,c
  4479  001D3A  3616               	rlcf	__div_to_l_@f1+3,f,c
  4480  001D3C  2E1D               	decfsz	__div_to_l_@cntr,f,c
  4481  001D3E  D7E1               	goto	l542
  4482  001D40  AE1E               	btfss	__div_to_l_@exp1,7,c
  4483  001D42  D016               	goto	l545
  4484  001D44  501E               	movf	__div_to_l_@exp1,w,c
  4485  001D46  0A80               	xorlw	128
  4486  001D48  0F9F               	addlw	159
  4487  001D4A  B0D8               	btfsc	status,0,c
  4488  001D4C  D009               	goto	l546
  4489  001D4E  0E00               	movlw	0
  4490  001D50  6E13               	movwf	?__div_to_l_,c
  4491  001D52  0E00               	movlw	0
  4492  001D54  6E14               	movwf	?__div_to_l_+1,c
  4493  001D56  0E00               	movlw	0
  4494  001D58  6E15               	movwf	?__div_to_l_+2,c
  4495  001D5A  0E00               	movlw	0
  4496  001D5C  6E16               	movwf	?__div_to_l_+3,c
  4497  001D5E  0012               	return	
  4498  001D60                     l546:
  4499  001D60  90D8               	bcf	status,0,c
  4500  001D62  321C               	rrcf	__div_to_l_@quot+3,f,c
  4501  001D64  321B               	rrcf	__div_to_l_@quot+2,f,c
  4502  001D66  321A               	rrcf	__div_to_l_@quot+1,f,c
  4503  001D68  3219               	rrcf	__div_to_l_@quot,f,c
  4504  001D6A  3E1E               	incfsz	__div_to_l_@exp1,f,c
  4505  001D6C  D7F9               	goto	l546
  4506  001D6E  D015               	goto	u2780
  4507  001D70                     l545:
  4508  001D70  0E1F               	movlw	31
  4509  001D72  641E               	cpfsgt	__div_to_l_@exp1,c
  4510  001D74  D00F               	goto	l551
  4511  001D76  0E00               	movlw	0
  4512  001D78  6E13               	movwf	?__div_to_l_,c
  4513  001D7A  0E00               	movlw	0
  4514  001D7C  6E14               	movwf	?__div_to_l_+1,c
  4515  001D7E  0E00               	movlw	0
  4516  001D80  6E15               	movwf	?__div_to_l_+2,c
  4517  001D82  0E00               	movlw	0
  4518  001D84  6E16               	movwf	?__div_to_l_+3,c
  4519  001D86  0012               	return	
  4520  001D88  90D8               	bcf	status,0,c
  4521  001D8A  3619               	rlcf	__div_to_l_@quot,f,c
  4522  001D8C  361A               	rlcf	__div_to_l_@quot+1,f,c
  4523  001D8E  361B               	rlcf	__div_to_l_@quot+2,f,c
  4524  001D90  361C               	rlcf	__div_to_l_@quot+3,f,c
  4525  001D92  061E               	decf	__div_to_l_@exp1,f,c
  4526  001D94                     l551:
  4527  001D94  501E               	movf	__div_to_l_@exp1,w,c
  4528  001D96  A4D8               	btfss	status,2,c
  4529  001D98  D7F7               	goto	l552
  4530  001D9A                     u2780:
  4531  001D9A  C019  F013         	movff	__div_to_l_@quot,?__div_to_l_
  4532  001D9E  C01A  F014         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4533  001DA2  C01B  F015         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4534  001DA6  C01C  F016         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4535  001DAA  0012               	return		;funcret
  4536  001DAC                     __end_of__div_to_l_:
  4537                           	opt stack 0
  4538                           tblptru	equ	0xFF8
  4539                           tblptrh	equ	0xFF7
  4540                           tblptrl	equ	0xFF6
  4541                           tablat	equ	0xFF5
  4542                           prodh	equ	0xFF4
  4543                           prodl	equ	0xFF3
  4544                           postinc0	equ	0xFEE
  4545                           wreg	equ	0xFE8
  4546                           indf2	equ	0xFDF
  4547                           postinc2	equ	0xFDE
  4548                           postdec2	equ	0xFDD
  4549                           fsr2h	equ	0xFDA
  4550                           fsr2l	equ	0xFD9
  4551                           status	equ	0xFD8
  4552                           
  4553 ;; *************** function ___lltoft *****************
  4554 ;; Defined at:
  4555 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
  4556 ;; Parameters:    Size  Location     Type
  4557 ;;  c               4   26[COMRAM] unsigned long 
  4558 ;; Auto vars:     Size  Location     Type
  4559 ;;  exp             1   34[COMRAM] unsigned char 
  4560 ;; Return value:  Size  Location     Type
  4561 ;;                  3   26[COMRAM] float 
  4562 ;; Registers used:
  4563 ;;		wreg, status,2, status,0, cstack
  4564 ;; Tracked objects:
  4565 ;;		On entry : 0/0
  4566 ;;		On exit  : 0/0
  4567 ;;		Unchanged: 0/0
  4568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4569 ;;      Params:         4       0       0       0       0       0       0       0       0
  4570 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4571 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4572 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4573 ;;Total ram usage:        9 bytes
  4574 ;; Hardware stack levels used:    1
  4575 ;; Hardware stack levels required when called:    2
  4576 ;; This function calls:
  4577 ;;		___ftpack
  4578 ;; This function is called by:
  4579 ;;		_sprintf
  4580 ;; This function uses a non-reentrant model
  4581 ;;
  4582                           
  4583                           	psect	text11
  4584  00292A                     __ptext11:
  4585                           	opt stack 0
  4586  00292A                     ___lltoft:
  4587                           	opt stack 27
  4588                           
  4589                           ;incstack = 0
  4590  00292A  0E8E               	movlw	142
  4591  00292C  6E23               	movwf	___lltoft@exp,c
  4592  00292E  D006               	goto	l750
  4593  002930  90D8               	bcf	status,0,c
  4594  002932  321E               	rrcf	___lltoft@c+3,f,c
  4595  002934  321D               	rrcf	___lltoft@c+2,f,c
  4596  002936  321C               	rrcf	___lltoft@c+1,f,c
  4597  002938  321B               	rrcf	___lltoft@c,f,c
  4598  00293A  2A23               	incf	___lltoft@exp,f,c
  4599  00293C                     l750:
  4600  00293C  0E00               	movlw	0
  4601  00293E  141B               	andwf	___lltoft@c,w,c
  4602  002940  6E1F               	movwf	??___lltoft& (0+255),c
  4603  002942  0E00               	movlw	0
  4604  002944  141C               	andwf	___lltoft@c+1,w,c
  4605  002946  6E20               	movwf	(??___lltoft+1)& (0+255),c
  4606  002948  0E00               	movlw	0
  4607  00294A  141D               	andwf	___lltoft@c+2,w,c
  4608  00294C  6E21               	movwf	(??___lltoft+2)& (0+255),c
  4609  00294E  0EFF               	movlw	255
  4610  002950  141E               	andwf	___lltoft@c+3,w,c
  4611  002952  6E22               	movwf	(??___lltoft+3)& (0+255),c
  4612  002954  501F               	movf	??___lltoft,w,c
  4613  002956  1020               	iorwf	??___lltoft+1,w,c
  4614  002958  1021               	iorwf	??___lltoft+2,w,c
  4615  00295A  1022               	iorwf	??___lltoft+3,w,c
  4616  00295C  A4D8               	btfss	status,2,c
  4617  00295E  D7E8               	goto	l751
  4618  002960  C01B  F013         	movff	___lltoft@c,___ftpack@arg
  4619  002964  C01C  F014         	movff	___lltoft@c+1,___ftpack@arg+1
  4620  002968  C01D  F015         	movff	___lltoft@c+2,___ftpack@arg+2
  4621  00296C  C023  F016         	movff	___lltoft@exp,___ftpack@exp
  4622  002970  0E00               	movlw	0
  4623  002972  6E17               	movwf	___ftpack@sign,c
  4624  002974  EC62  F012         	call	___ftpack	;wreg free
  4625  002978  C013  F01B         	movff	?___ftpack,?___lltoft
  4626  00297C  C014  F01C         	movff	?___ftpack+1,?___lltoft+1
  4627  002980  C015  F01D         	movff	?___ftpack+2,?___lltoft+2
  4628  002984  0012               	return	
  4629  002986                     __end_of___lltoft:
  4630                           	opt stack 0
  4631                           tblptru	equ	0xFF8
  4632                           tblptrh	equ	0xFF7
  4633                           tblptrl	equ	0xFF6
  4634                           tablat	equ	0xFF5
  4635                           prodh	equ	0xFF4
  4636                           prodl	equ	0xFF3
  4637                           postinc0	equ	0xFEE
  4638                           wreg	equ	0xFE8
  4639                           indf2	equ	0xFDF
  4640                           postinc2	equ	0xFDE
  4641                           postdec2	equ	0xFDD
  4642                           fsr2h	equ	0xFDA
  4643                           fsr2l	equ	0xFD9
  4644                           status	equ	0xFD8
  4645                           
  4646 ;; *************** function ___llmod *****************
  4647 ;; Defined at:
  4648 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  4649 ;; Parameters:    Size  Location     Type
  4650 ;;  dividend        4   18[COMRAM] unsigned long 
  4651 ;;  divisor         4   22[COMRAM] unsigned long 
  4652 ;; Auto vars:     Size  Location     Type
  4653 ;;  counter         1   26[COMRAM] unsigned char 
  4654 ;; Return value:  Size  Location     Type
  4655 ;;                  4   18[COMRAM] unsigned long 
  4656 ;; Registers used:
  4657 ;;		wreg, status,2, status,0
  4658 ;; Tracked objects:
  4659 ;;		On entry : 0/0
  4660 ;;		On exit  : 0/0
  4661 ;;		Unchanged: 0/0
  4662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4663 ;;      Params:         8       0       0       0       0       0       0       0       0
  4664 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4665 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4666 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4667 ;;Total ram usage:        9 bytes
  4668 ;; Hardware stack levels used:    1
  4669 ;; Hardware stack levels required when called:    1
  4670 ;; This function calls:
  4671 ;;		Nothing
  4672 ;; This function is called by:
  4673 ;;		_sprintf
  4674 ;; This function uses a non-reentrant model
  4675 ;;
  4676                           
  4677                           	psect	text12
  4678  0028C4                     __ptext12:
  4679                           	opt stack 0
  4680  0028C4                     ___llmod:
  4681                           	opt stack 28
  4682                           
  4683                           ;incstack = 0
  4684  0028C4  5017               	movf	___llmod@divisor,w,c
  4685  0028C6  1018               	iorwf	___llmod@divisor+1,w,c
  4686  0028C8  1019               	iorwf	___llmod@divisor+2,w,c
  4687  0028CA  101A               	iorwf	___llmod@divisor+3,w,c
  4688  0028CC  B4D8               	btfsc	status,2,c
  4689  0028CE  D024               	goto	l744
  4690  0028D0  0E01               	movlw	1
  4691  0028D2  6E1B               	movwf	___llmod@counter,c
  4692  0028D4  D006               	goto	l739
  4693  0028D6  90D8               	bcf	status,0,c
  4694  0028D8  3617               	rlcf	___llmod@divisor,f,c
  4695  0028DA  3618               	rlcf	___llmod@divisor+1,f,c
  4696  0028DC  3619               	rlcf	___llmod@divisor+2,f,c
  4697  0028DE  361A               	rlcf	___llmod@divisor+3,f,c
  4698  0028E0  2A1B               	incf	___llmod@counter,f,c
  4699  0028E2                     l739:
  4700  0028E2  AE1A               	btfss	___llmod@divisor+3,7,c
  4701  0028E4  D7F8               	goto	l740
  4702  0028E6                     u2880:
  4703  0028E6  5017               	movf	___llmod@divisor,w,c
  4704  0028E8  5C13               	subwf	___llmod@dividend,w,c
  4705  0028EA  5018               	movf	___llmod@divisor+1,w,c
  4706  0028EC  5814               	subwfb	___llmod@dividend+1,w,c
  4707  0028EE  5019               	movf	___llmod@divisor+2,w,c
  4708  0028F0  5815               	subwfb	___llmod@dividend+2,w,c
  4709  0028F2  501A               	movf	___llmod@divisor+3,w,c
  4710  0028F4  5816               	subwfb	___llmod@dividend+3,w,c
  4711  0028F6  A0D8               	btfss	status,0,c
  4712  0028F8  D008               	goto	l743
  4713  0028FA  5017               	movf	___llmod@divisor,w,c
  4714  0028FC  5E13               	subwf	___llmod@dividend,f,c
  4715  0028FE  5018               	movf	___llmod@divisor+1,w,c
  4716  002900  5A14               	subwfb	___llmod@dividend+1,f,c
  4717  002902  5019               	movf	___llmod@divisor+2,w,c
  4718  002904  5A15               	subwfb	___llmod@dividend+2,f,c
  4719  002906  501A               	movf	___llmod@divisor+3,w,c
  4720  002908  5A16               	subwfb	___llmod@dividend+3,f,c
  4721  00290A                     l743:
  4722  00290A  90D8               	bcf	status,0,c
  4723  00290C  321A               	rrcf	___llmod@divisor+3,f,c
  4724  00290E  3219               	rrcf	___llmod@divisor+2,f,c
  4725  002910  3218               	rrcf	___llmod@divisor+1,f,c
  4726  002912  3217               	rrcf	___llmod@divisor,f,c
  4727  002914  2E1B               	decfsz	___llmod@counter,f,c
  4728  002916  D7E7               	goto	u2880
  4729  002918                     l744:
  4730  002918  C013  F013         	movff	___llmod@dividend,?___llmod
  4731  00291C  C014  F014         	movff	___llmod@dividend+1,?___llmod+1
  4732  002920  C015  F015         	movff	___llmod@dividend+2,?___llmod+2
  4733  002924  C016  F016         	movff	___llmod@dividend+3,?___llmod+3
  4734  002928  0012               	return		;funcret
  4735  00292A                     __end_of___llmod:
  4736                           	opt stack 0
  4737                           tblptru	equ	0xFF8
  4738                           tblptrh	equ	0xFF7
  4739                           tblptrl	equ	0xFF6
  4740                           tablat	equ	0xFF5
  4741                           prodh	equ	0xFF4
  4742                           prodl	equ	0xFF3
  4743                           postinc0	equ	0xFEE
  4744                           wreg	equ	0xFE8
  4745                           indf2	equ	0xFDF
  4746                           postinc2	equ	0xFDE
  4747                           postdec2	equ	0xFDD
  4748                           fsr2h	equ	0xFDA
  4749                           fsr2l	equ	0xFD9
  4750                           status	equ	0xFD8
  4751                           
  4752 ;; *************** function ___lldiv *****************
  4753 ;; Defined at:
  4754 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  4755 ;; Parameters:    Size  Location     Type
  4756 ;;  dividend        4   18[COMRAM] unsigned long 
  4757 ;;  divisor         4   22[COMRAM] unsigned long 
  4758 ;; Auto vars:     Size  Location     Type
  4759 ;;  quotient        4   26[COMRAM] unsigned long 
  4760 ;;  counter         1   30[COMRAM] unsigned char 
  4761 ;; Return value:  Size  Location     Type
  4762 ;;                  4   18[COMRAM] unsigned long 
  4763 ;; Registers used:
  4764 ;;		wreg, status,2, status,0
  4765 ;; Tracked objects:
  4766 ;;		On entry : 0/0
  4767 ;;		On exit  : 0/0
  4768 ;;		Unchanged: 0/0
  4769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4770 ;;      Params:         8       0       0       0       0       0       0       0       0
  4771 ;;      Locals:         5       0       0       0       0       0       0       0       0
  4772 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4773 ;;      Totals:        13       0       0       0       0       0       0       0       0
  4774 ;;Total ram usage:       13 bytes
  4775 ;; Hardware stack levels used:    1
  4776 ;; Hardware stack levels required when called:    1
  4777 ;; This function calls:
  4778 ;;		Nothing
  4779 ;; This function is called by:
  4780 ;;		_sprintf
  4781 ;; This function uses a non-reentrant model
  4782 ;;
  4783                           
  4784                           	psect	text13
  4785  002686                     __ptext13:
  4786                           	opt stack 0
  4787  002686                     ___lldiv:
  4788                           	opt stack 28
  4789                           
  4790                           ;incstack = 0
  4791  002686  0E00               	movlw	0
  4792  002688  6E1B               	movwf	___lldiv@quotient,c
  4793  00268A  0E00               	movlw	0
  4794  00268C  6E1C               	movwf	___lldiv@quotient+1,c
  4795  00268E  0E00               	movlw	0
  4796  002690  6E1D               	movwf	___lldiv@quotient+2,c
  4797  002692  0E00               	movlw	0
  4798  002694  6E1E               	movwf	___lldiv@quotient+3,c
  4799  002696  5017               	movf	___lldiv@divisor,w,c
  4800  002698  1018               	iorwf	___lldiv@divisor+1,w,c
  4801  00269A  1019               	iorwf	___lldiv@divisor+2,w,c
  4802  00269C  101A               	iorwf	___lldiv@divisor+3,w,c
  4803  00269E  B4D8               	btfsc	status,2,c
  4804  0026A0  D02A               	goto	l734
  4805  0026A2  0E01               	movlw	1
  4806  0026A4  6E1F               	movwf	___lldiv@counter,c
  4807  0026A6  D006               	goto	l729
  4808  0026A8  90D8               	bcf	status,0,c
  4809  0026AA  3617               	rlcf	___lldiv@divisor,f,c
  4810  0026AC  3618               	rlcf	___lldiv@divisor+1,f,c
  4811  0026AE  3619               	rlcf	___lldiv@divisor+2,f,c
  4812  0026B0  361A               	rlcf	___lldiv@divisor+3,f,c
  4813  0026B2  2A1F               	incf	___lldiv@counter,f,c
  4814  0026B4                     l729:
  4815  0026B4  AE1A               	btfss	___lldiv@divisor+3,7,c
  4816  0026B6  D7F8               	goto	l730
  4817  0026B8                     u2850:
  4818  0026B8  90D8               	bcf	status,0,c
  4819  0026BA  361B               	rlcf	___lldiv@quotient,f,c
  4820  0026BC  361C               	rlcf	___lldiv@quotient+1,f,c
  4821  0026BE  361D               	rlcf	___lldiv@quotient+2,f,c
  4822  0026C0  361E               	rlcf	___lldiv@quotient+3,f,c
  4823  0026C2  5017               	movf	___lldiv@divisor,w,c
  4824  0026C4  5C13               	subwf	___lldiv@dividend,w,c
  4825  0026C6  5018               	movf	___lldiv@divisor+1,w,c
  4826  0026C8  5814               	subwfb	___lldiv@dividend+1,w,c
  4827  0026CA  5019               	movf	___lldiv@divisor+2,w,c
  4828  0026CC  5815               	subwfb	___lldiv@dividend+2,w,c
  4829  0026CE  501A               	movf	___lldiv@divisor+3,w,c
  4830  0026D0  5816               	subwfb	___lldiv@dividend+3,w,c
  4831  0026D2  A0D8               	btfss	status,0,c
  4832  0026D4  D009               	goto	l733
  4833  0026D6  5017               	movf	___lldiv@divisor,w,c
  4834  0026D8  5E13               	subwf	___lldiv@dividend,f,c
  4835  0026DA  5018               	movf	___lldiv@divisor+1,w,c
  4836  0026DC  5A14               	subwfb	___lldiv@dividend+1,f,c
  4837  0026DE  5019               	movf	___lldiv@divisor+2,w,c
  4838  0026E0  5A15               	subwfb	___lldiv@dividend+2,f,c
  4839  0026E2  501A               	movf	___lldiv@divisor+3,w,c
  4840  0026E4  5A16               	subwfb	___lldiv@dividend+3,f,c
  4841  0026E6  801B               	bsf	___lldiv@quotient,0,c
  4842  0026E8                     l733:
  4843  0026E8  90D8               	bcf	status,0,c
  4844  0026EA  321A               	rrcf	___lldiv@divisor+3,f,c
  4845  0026EC  3219               	rrcf	___lldiv@divisor+2,f,c
  4846  0026EE  3218               	rrcf	___lldiv@divisor+1,f,c
  4847  0026F0  3217               	rrcf	___lldiv@divisor,f,c
  4848  0026F2  2E1F               	decfsz	___lldiv@counter,f,c
  4849  0026F4  D7E1               	goto	u2850
  4850  0026F6                     l734:
  4851  0026F6  C01B  F013         	movff	___lldiv@quotient,?___lldiv
  4852  0026FA  C01C  F014         	movff	___lldiv@quotient+1,?___lldiv+1
  4853  0026FE  C01D  F015         	movff	___lldiv@quotient+2,?___lldiv+2
  4854  002702  C01E  F016         	movff	___lldiv@quotient+3,?___lldiv+3
  4855  002706  0012               	return		;funcret
  4856  002708                     __end_of___lldiv:
  4857                           	opt stack 0
  4858                           tblptru	equ	0xFF8
  4859                           tblptrh	equ	0xFF7
  4860                           tblptrl	equ	0xFF6
  4861                           tablat	equ	0xFF5
  4862                           prodh	equ	0xFF4
  4863                           prodl	equ	0xFF3
  4864                           postinc0	equ	0xFEE
  4865                           wreg	equ	0xFE8
  4866                           indf2	equ	0xFDF
  4867                           postinc2	equ	0xFDE
  4868                           postdec2	equ	0xFDD
  4869                           fsr2h	equ	0xFDA
  4870                           fsr2l	equ	0xFD9
  4871                           status	equ	0xFD8
  4872                           
  4873 ;; *************** function ___ftsub *****************
  4874 ;; Defined at:
  4875 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  4876 ;; Parameters:    Size  Location     Type
  4877 ;;  f1              3    9[BANK0 ] float 
  4878 ;;  f2              3   12[BANK0 ] float 
  4879 ;; Auto vars:     Size  Location     Type
  4880 ;;		None
  4881 ;; Return value:  Size  Location     Type
  4882 ;;                  3    9[BANK0 ] float 
  4883 ;; Registers used:
  4884 ;;		wreg, status,2, status,0, cstack
  4885 ;; Tracked objects:
  4886 ;;		On entry : 0/0
  4887 ;;		On exit  : 0/0
  4888 ;;		Unchanged: 0/0
  4889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4890 ;;      Params:         0       6       0       0       0       0       0       0       0
  4891 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4892 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4893 ;;      Totals:         0       6       0       0       0       0       0       0       0
  4894 ;;Total ram usage:        6 bytes
  4895 ;; Hardware stack levels used:    1
  4896 ;; Hardware stack levels required when called:    3
  4897 ;; This function calls:
  4898 ;;		___ftadd
  4899 ;; This function is called by:
  4900 ;;		_sprintf
  4901 ;; This function uses a non-reentrant model
  4902 ;;
  4903                           
  4904                           	psect	text14
  4905  002986                     __ptext14:
  4906                           	opt stack 0
  4907  002986                     ___ftsub:
  4908                           	opt stack 26
  4909                           
  4910                           ;incstack = 0
  4911  002986  0100               	movlb	0	; () banked
  4912  002988  516C               	movf	___ftsub@f2& (0+255),w,b
  4913  00298A  116D               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  4914  00298C  116E               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  4915  00298E  B4D8               	btfsc	status,2,c
  4916  002990  D006               	goto	l684
  4917                           
  4918                           ; BSR set to: 0
  4919  002992  0E00               	movlw	0
  4920  002994  1B6C               	xorwf	___ftsub@f2& (0+255),f,b
  4921  002996  0E00               	movlw	0
  4922  002998  1B6D               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  4923  00299A  0E80               	movlw	128
  4924  00299C  1B6E               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  4925  00299E                     l684:
  4926                           
  4927                           ; BSR set to: 0
  4928                           
  4929                           ; BSR set to: 0
  4930  00299E  C069  F060         	movff	___ftsub@f1,___ftadd@f1
  4931  0029A2  C06A  F061         	movff	___ftsub@f1+1,___ftadd@f1+1
  4932  0029A6  C06B  F062         	movff	___ftsub@f1+2,___ftadd@f1+2
  4933  0029AA  C06C  F063         	movff	___ftsub@f2,___ftadd@f2
  4934  0029AE  C06D  F064         	movff	___ftsub@f2+1,___ftadd@f2+1
  4935  0029B2  C06E  F065         	movff	___ftsub@f2+2,___ftadd@f2+2
  4936  0029B6  EC19  F00C         	call	___ftadd	;wreg free
  4937  0029BA  C060  F069         	movff	?___ftadd,?___ftsub
  4938  0029BE  C061  F06A         	movff	?___ftadd+1,?___ftsub+1
  4939  0029C2  C062  F06B         	movff	?___ftadd+2,?___ftsub+2
  4940  0029C6  0012               	return	
  4941  0029C8                     __end_of___ftsub:
  4942                           	opt stack 0
  4943                           tblptru	equ	0xFF8
  4944                           tblptrh	equ	0xFF7
  4945                           tblptrl	equ	0xFF6
  4946                           tablat	equ	0xFF5
  4947                           prodh	equ	0xFF4
  4948                           prodl	equ	0xFF3
  4949                           postinc0	equ	0xFEE
  4950                           wreg	equ	0xFE8
  4951                           indf2	equ	0xFDF
  4952                           postinc2	equ	0xFDE
  4953                           postdec2	equ	0xFDD
  4954                           fsr2h	equ	0xFDA
  4955                           fsr2l	equ	0xFD9
  4956                           status	equ	0xFD8
  4957                           
  4958 ;; *************** function ___ftadd *****************
  4959 ;; Defined at:
  4960 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  4961 ;; Parameters:    Size  Location     Type
  4962 ;;  f1              3    0[BANK0 ] float 
  4963 ;;  f2              3    3[BANK0 ] float 
  4964 ;; Auto vars:     Size  Location     Type
  4965 ;;  exp1            1    8[BANK0 ] unsigned char 
  4966 ;;  exp2            1    7[BANK0 ] unsigned char 
  4967 ;;  sign            1    6[BANK0 ] unsigned char 
  4968 ;; Return value:  Size  Location     Type
  4969 ;;                  3    0[BANK0 ] float 
  4970 ;; Registers used:
  4971 ;;		wreg, status,2, status,0, cstack
  4972 ;; Tracked objects:
  4973 ;;		On entry : 0/0
  4974 ;;		On exit  : 0/0
  4975 ;;		Unchanged: 0/0
  4976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4977 ;;      Params:         0       6       0       0       0       0       0       0       0
  4978 ;;      Locals:         0       3       0       0       0       0       0       0       0
  4979 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4980 ;;      Totals:         3       9       0       0       0       0       0       0       0
  4981 ;;Total ram usage:       12 bytes
  4982 ;; Hardware stack levels used:    1
  4983 ;; Hardware stack levels required when called:    2
  4984 ;; This function calls:
  4985 ;;		___ftpack
  4986 ;; This function is called by:
  4987 ;;		_sprintf
  4988 ;;		___ftsub
  4989 ;; This function uses a non-reentrant model
  4990 ;;
  4991                           
  4992                           	psect	text15
  4993  001832                     __ptext15:
  4994                           	opt stack 0
  4995  001832                     ___ftadd:
  4996                           	opt stack 26
  4997                           
  4998                           ;incstack = 0
  4999  001832  C062  F040         	movff	___ftadd@f1+2,??___ftadd
  5000  001836  6A41               	clrf	(??___ftadd+1)& (0+255),c
  5001  001838  6A42               	clrf	(??___ftadd+2)& (0+255),c
  5002  00183A  0100               	movlb	0	; () banked
  5003  00183C  3561               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  5004  00183E  3640               	rlcf	??___ftadd& (0+255),f,c
  5005  001840  E301               	bnc	u3831
  5006  001842  8041               	bsf	(??___ftadd+1)& (0+255),0,c
  5007  001844                     u3831:
  5008  001844  5040               	movf	??___ftadd,w,c
  5009  001846  6F68               	movwf	___ftadd@exp1& (0+255),b
  5010  001848  C065  F040         	movff	___ftadd@f2+2,??___ftadd
  5011  00184C  6A41               	clrf	(??___ftadd+1)& (0+255),c
  5012  00184E  6A42               	clrf	(??___ftadd+2)& (0+255),c
  5013  001850  3564               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  5014  001852  3640               	rlcf	??___ftadd& (0+255),f,c
  5015  001854  E301               	bnc	u3841
  5016  001856  8041               	bsf	(??___ftadd+1)& (0+255),0,c
  5017  001858                     u3841:
  5018  001858  5040               	movf	??___ftadd,w,c
  5019  00185A  6F67               	movwf	___ftadd@exp2& (0+255),b
  5020                           
  5021                           ; BSR set to: 0
  5022  00185C  5168               	movf	___ftadd@exp1& (0+255),w,b
  5023  00185E  B4D8               	btfsc	status,2,c
  5024  001860  D00B               	goto	u3870
  5025                           
  5026                           ; BSR set to: 0
  5027  001862  5167               	movf	___ftadd@exp2& (0+255),w,b
  5028  001864  5D68               	subwf	___ftadd@exp1& (0+255),w,b
  5029  001866  B0D8               	btfsc	status,0,c
  5030  001868  D00E               	goto	l602
  5031                           
  5032                           ; BSR set to: 0
  5033  00186A  5168               	movf	___ftadd@exp1& (0+255),w,b
  5034  00186C  0800               	sublw	0
  5035  00186E  2567               	addwf	___ftadd@exp2& (0+255),w,b
  5036  001870  6E40               	movwf	??___ftadd& (0+255),c
  5037  001872  0E18               	movlw	24
  5038  001874  6440               	cpfsgt	??___ftadd,c
  5039  001876  D007               	goto	l602
  5040  001878                     u3870:
  5041                           
  5042                           ; BSR set to: 0
  5043  001878  C063  F060         	movff	___ftadd@f2,?___ftadd
  5044  00187C  C064  F061         	movff	___ftadd@f2+1,?___ftadd+1
  5045  001880  C065  F062         	movff	___ftadd@f2+2,?___ftadd+2
  5046  001884  0012               	return	
  5047  001886                     l602:
  5048                           
  5049                           ; BSR set to: 0
  5050                           
  5051                           ; BSR set to: 0
  5052  001886  5167               	movf	___ftadd@exp2& (0+255),w,b
  5053  001888  B4D8               	btfsc	status,2,c
  5054  00188A  D00B               	goto	u3900
  5055                           
  5056                           ; BSR set to: 0
  5057  00188C  5168               	movf	___ftadd@exp1& (0+255),w,b
  5058  00188E  5D67               	subwf	___ftadd@exp2& (0+255),w,b
  5059  001890  B0D8               	btfsc	status,0,c
  5060  001892  D00E               	goto	l606
  5061                           
  5062                           ; BSR set to: 0
  5063  001894  5167               	movf	___ftadd@exp2& (0+255),w,b
  5064  001896  0800               	sublw	0
  5065  001898  2568               	addwf	___ftadd@exp1& (0+255),w,b
  5066  00189A  6E40               	movwf	??___ftadd& (0+255),c
  5067  00189C  0E18               	movlw	24
  5068  00189E  6440               	cpfsgt	??___ftadd,c
  5069  0018A0  D007               	goto	l606
  5070  0018A2                     u3900:
  5071                           
  5072                           ; BSR set to: 0
  5073  0018A2  C060  F060         	movff	___ftadd@f1,?___ftadd
  5074  0018A6  C061  F061         	movff	___ftadd@f1+1,?___ftadd+1
  5075  0018AA  C062  F062         	movff	___ftadd@f1+2,?___ftadd+2
  5076  0018AE  0012               	return	
  5077  0018B0                     l606:
  5078                           
  5079                           ; BSR set to: 0
  5080                           
  5081                           ; BSR set to: 0
  5082  0018B0  0E06               	movlw	6
  5083  0018B2  6F66               	movwf	___ftadd@sign& (0+255),b
  5084                           
  5085                           ; BSR set to: 0
  5086  0018B4  BF62               	btfsc	(___ftadd@f1+2)& (0+255),7,b
  5087                           
  5088                           ; BSR set to: 0
  5089  0018B6  8F66               	bsf	___ftadd@sign& (0+255),7,b
  5090                           
  5091                           ; BSR set to: 0
  5092                           
  5093                           ; BSR set to: 0
  5094  0018B8  BF65               	btfsc	(___ftadd@f2+2)& (0+255),7,b
  5095                           
  5096                           ; BSR set to: 0
  5097  0018BA  8D66               	bsf	___ftadd@sign& (0+255),6,b
  5098                           
  5099                           ; BSR set to: 0
  5100  0018BC  8F61               	bsf	(___ftadd@f1+1)& (0+255),7,b
  5101                           
  5102                           ; BSR set to: 0
  5103  0018BE  0EFF               	movlw	255
  5104  0018C0  1760               	andwf	___ftadd@f1& (0+255),f,b
  5105  0018C2  0EFF               	movlw	255
  5106  0018C4  1761               	andwf	(___ftadd@f1+1)& (0+255),f,b
  5107  0018C6  0E00               	movlw	0
  5108  0018C8  1762               	andwf	(___ftadd@f1+2)& (0+255),f,b
  5109  0018CA  8F64               	bsf	(___ftadd@f2+1)& (0+255),7,b
  5110                           
  5111                           ; BSR set to: 0
  5112  0018CC  0EFF               	movlw	255
  5113  0018CE  1763               	andwf	___ftadd@f2& (0+255),f,b
  5114  0018D0  0EFF               	movlw	255
  5115  0018D2  1764               	andwf	(___ftadd@f2+1)& (0+255),f,b
  5116  0018D4  0E00               	movlw	0
  5117  0018D6  1765               	andwf	(___ftadd@f2+2)& (0+255),f,b
  5118                           
  5119                           ; BSR set to: 0
  5120  0018D8  5167               	movf	___ftadd@exp2& (0+255),w,b
  5121  0018DA  5D68               	subwf	___ftadd@exp1& (0+255),w,b
  5122  0018DC  B0D8               	btfsc	status,0,c
  5123  0018DE  D01B               	goto	l611
  5124  0018E0                     u3930:
  5125                           
  5126                           ; BSR set to: 0
  5127                           
  5128                           ; BSR set to: 0
  5129  0018E0  90D8               	bcf	status,0,c
  5130  0018E2  3763               	rlcf	___ftadd@f2& (0+255),f,b
  5131  0018E4  3764               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  5132  0018E6  3765               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  5133  0018E8  0767               	decf	___ftadd@exp2& (0+255),f,b
  5134                           
  5135                           ; BSR set to: 0
  5136  0018EA  5168               	movf	___ftadd@exp1& (0+255),w,b
  5137  0018EC  1967               	xorwf	___ftadd@exp2& (0+255),w,b
  5138  0018EE  B4D8               	btfsc	status,2,c
  5139  0018F0  D00D               	goto	l616
  5140                           
  5141                           ; BSR set to: 0
  5142  0018F2  0766               	decf	___ftadd@sign& (0+255),f,b
  5143  0018F4  C066  F040         	movff	___ftadd@sign,??___ftadd
  5144  0018F8  0E07               	movlw	7
  5145  0018FA  1640               	andwf	??___ftadd,f,c
  5146  0018FC  B4D8               	btfsc	status,2,c
  5147  0018FE  D006               	goto	l616
  5148  001900  D7EF               	goto	u3930
  5149  001902                     
  5150                           ; BSR set to: 0
  5151                           
  5152                           ; BSR set to: 0
  5153  001902  90D8               	bcf	status,0,c
  5154  001904  3362               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  5155  001906  3361               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  5156  001908  3360               	rrcf	___ftadd@f1& (0+255),f,b
  5157  00190A  2B68               	incf	___ftadd@exp1& (0+255),f,b
  5158  00190C                     l616:
  5159                           
  5160                           ; BSR set to: 0
  5161                           
  5162                           ; BSR set to: 0
  5163  00190C  5167               	movf	___ftadd@exp2& (0+255),w,b
  5164  00190E  1968               	xorwf	___ftadd@exp1& (0+255),w,b
  5165  001910  B4D8               	btfsc	status,2,c
  5166  001912  D01F               	goto	u4000
  5167  001914  D7F6               	goto	l617
  5168  001916                     l611:
  5169                           
  5170                           ; BSR set to: 0
  5171                           
  5172                           ; BSR set to: 0
  5173  001916  5168               	movf	___ftadd@exp1& (0+255),w,b
  5174  001918  5D67               	subwf	___ftadd@exp2& (0+255),w,b
  5175  00191A  B0D8               	btfsc	status,0,c
  5176  00191C  D01A               	goto	u4000
  5177  00191E                     u3970:
  5178                           
  5179                           ; BSR set to: 0
  5180                           
  5181                           ; BSR set to: 0
  5182  00191E  90D8               	bcf	status,0,c
  5183  001920  3760               	rlcf	___ftadd@f1& (0+255),f,b
  5184  001922  3761               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  5185  001924  3762               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  5186  001926  0768               	decf	___ftadd@exp1& (0+255),f,b
  5187                           
  5188                           ; BSR set to: 0
  5189  001928  5168               	movf	___ftadd@exp1& (0+255),w,b
  5190  00192A  1967               	xorwf	___ftadd@exp2& (0+255),w,b
  5191  00192C  B4D8               	btfsc	status,2,c
  5192  00192E  D00D               	goto	l625
  5193                           
  5194                           ; BSR set to: 0
  5195  001930  0766               	decf	___ftadd@sign& (0+255),f,b
  5196  001932  C066  F040         	movff	___ftadd@sign,??___ftadd
  5197  001936  0E07               	movlw	7
  5198  001938  1640               	andwf	??___ftadd,f,c
  5199  00193A  B4D8               	btfsc	status,2,c
  5200  00193C  D006               	goto	l625
  5201  00193E  D7EF               	goto	u3970
  5202  001940                     
  5203                           ; BSR set to: 0
  5204                           
  5205                           ; BSR set to: 0
  5206  001940  90D8               	bcf	status,0,c
  5207  001942  3365               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  5208  001944  3364               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  5209  001946  3363               	rrcf	___ftadd@f2& (0+255),f,b
  5210  001948  2B67               	incf	___ftadd@exp2& (0+255),f,b
  5211  00194A                     l625:
  5212                           
  5213                           ; BSR set to: 0
  5214                           
  5215                           ; BSR set to: 0
  5216  00194A  5167               	movf	___ftadd@exp2& (0+255),w,b
  5217  00194C  1968               	xorwf	___ftadd@exp1& (0+255),w,b
  5218  00194E  A4D8               	btfss	status,2,c
  5219  001950  D7F7               	goto	l626
  5220  001952                     u4000:
  5221                           
  5222                           ; BSR set to: 0
  5223                           
  5224                           ; BSR set to: 0
  5225                           
  5226                           ; BSR set to: 0
  5227  001952  AF66               	btfss	___ftadd@sign& (0+255),7,b
  5228  001954  D00C               	goto	l628
  5229                           
  5230                           ; BSR set to: 0
  5231  001956  0EFF               	movlw	255
  5232  001958  1B60               	xorwf	___ftadd@f1& (0+255),f,b
  5233  00195A  0EFF               	movlw	255
  5234  00195C  1B61               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  5235  00195E  0EFF               	movlw	255
  5236  001960  1B62               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  5237  001962  0E01               	movlw	1
  5238  001964  2760               	addwf	___ftadd@f1& (0+255),f,b
  5239  001966  0E00               	movlw	0
  5240  001968  2361               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  5241  00196A  0E00               	movlw	0
  5242  00196C  2362               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  5243  00196E                     l628:
  5244                           
  5245                           ; BSR set to: 0
  5246  00196E  AD66               	btfss	___ftadd@sign& (0+255),6,b
  5247  001970  D00C               	goto	l629
  5248                           
  5249                           ; BSR set to: 0
  5250  001972  0EFF               	movlw	255
  5251  001974  1B63               	xorwf	___ftadd@f2& (0+255),f,b
  5252  001976  0EFF               	movlw	255
  5253  001978  1B64               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  5254  00197A  0EFF               	movlw	255
  5255  00197C  1B65               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  5256  00197E  0E01               	movlw	1
  5257  001980  2763               	addwf	___ftadd@f2& (0+255),f,b
  5258  001982  0E00               	movlw	0
  5259  001984  2364               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  5260  001986  0E00               	movlw	0
  5261  001988  2365               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  5262  00198A                     l629:
  5263                           
  5264                           ; BSR set to: 0
  5265                           
  5266                           ; BSR set to: 0
  5267  00198A  0E00               	movlw	0
  5268  00198C  6F66               	movwf	___ftadd@sign& (0+255),b
  5269                           
  5270                           ; BSR set to: 0
  5271  00198E  5160               	movf	___ftadd@f1& (0+255),w,b
  5272  001990  2763               	addwf	___ftadd@f2& (0+255),f,b
  5273  001992  5161               	movf	(___ftadd@f1+1)& (0+255),w,b
  5274  001994  2364               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  5275  001996  5162               	movf	(___ftadd@f1+2)& (0+255),w,b
  5276  001998  2365               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  5277                           
  5278                           ; BSR set to: 0
  5279  00199A  AF65               	btfss	(___ftadd@f2+2)& (0+255),7,b
  5280  00199C  D00E               	goto	l630
  5281                           
  5282                           ; BSR set to: 0
  5283  00199E  0EFF               	movlw	255
  5284  0019A0  1B63               	xorwf	___ftadd@f2& (0+255),f,b
  5285  0019A2  0EFF               	movlw	255
  5286  0019A4  1B64               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  5287  0019A6  0EFF               	movlw	255
  5288  0019A8  1B65               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  5289  0019AA  0E01               	movlw	1
  5290  0019AC  2763               	addwf	___ftadd@f2& (0+255),f,b
  5291  0019AE  0E00               	movlw	0
  5292  0019B0  2364               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  5293  0019B2  0E00               	movlw	0
  5294  0019B4  2365               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  5295                           
  5296                           ; BSR set to: 0
  5297  0019B6  0E01               	movlw	1
  5298  0019B8  6F66               	movwf	___ftadd@sign& (0+255),b
  5299  0019BA                     l630:
  5300                           
  5301                           ; BSR set to: 0
  5302                           
  5303                           ; BSR set to: 0
  5304  0019BA  C063  F013         	movff	___ftadd@f2,___ftpack@arg
  5305  0019BE  C064  F014         	movff	___ftadd@f2+1,___ftpack@arg+1
  5306  0019C2  C065  F015         	movff	___ftadd@f2+2,___ftpack@arg+2
  5307  0019C6  C068  F016         	movff	___ftadd@exp1,___ftpack@exp
  5308  0019CA  C066  F017         	movff	___ftadd@sign,___ftpack@sign
  5309  0019CE  EC62  F012         	call	___ftpack	;wreg free
  5310  0019D2  C013  F060         	movff	?___ftpack,?___ftadd
  5311  0019D6  C014  F061         	movff	?___ftpack+1,?___ftadd+1
  5312  0019DA  C015  F062         	movff	?___ftpack+2,?___ftadd+2
  5313  0019DE  0012               	return	
  5314  0019E0                     __end_of___ftadd:
  5315                           	opt stack 0
  5316                           tblptru	equ	0xFF8
  5317                           tblptrh	equ	0xFF7
  5318                           tblptrl	equ	0xFF6
  5319                           tablat	equ	0xFF5
  5320                           prodh	equ	0xFF4
  5321                           prodl	equ	0xFF3
  5322                           postinc0	equ	0xFEE
  5323                           wreg	equ	0xFE8
  5324                           indf2	equ	0xFDF
  5325                           postinc2	equ	0xFDE
  5326                           postdec2	equ	0xFDD
  5327                           fsr2h	equ	0xFDA
  5328                           fsr2l	equ	0xFD9
  5329                           status	equ	0xFD8
  5330                           
  5331 ;; *************** function ___ftneg *****************
  5332 ;; Defined at:
  5333 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
  5334 ;; Parameters:    Size  Location     Type
  5335 ;;  f1              3   18[COMRAM] float 
  5336 ;; Auto vars:     Size  Location     Type
  5337 ;;		None
  5338 ;; Return value:  Size  Location     Type
  5339 ;;                  3   18[COMRAM] float 
  5340 ;; Registers used:
  5341 ;;		wreg, status,2, status,0
  5342 ;; Tracked objects:
  5343 ;;		On entry : 0/0
  5344 ;;		On exit  : 0/0
  5345 ;;		Unchanged: 0/0
  5346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5347 ;;      Params:         3       0       0       0       0       0       0       0       0
  5348 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5349 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5350 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5351 ;;Total ram usage:        3 bytes
  5352 ;; Hardware stack levels used:    1
  5353 ;; Hardware stack levels required when called:    1
  5354 ;; This function calls:
  5355 ;;		Nothing
  5356 ;; This function is called by:
  5357 ;;		_sprintf
  5358 ;; This function uses a non-reentrant model
  5359 ;;
  5360                           
  5361                           	psect	text16
  5362  002A56                     __ptext16:
  5363                           	opt stack 0
  5364  002A56                     ___ftneg:
  5365                           	opt stack 28
  5366                           
  5367                           ;incstack = 0
  5368  002A56  5013               	movf	___ftneg@f1,w,c
  5369  002A58  1014               	iorwf	___ftneg@f1+1,w,c
  5370  002A5A  1015               	iorwf	___ftneg@f1+2,w,c
  5371  002A5C  B4D8               	btfsc	status,2,c
  5372  002A5E  D006               	goto	l678
  5373  002A60  0E00               	movlw	0
  5374  002A62  1A13               	xorwf	___ftneg@f1,f,c
  5375  002A64  0E00               	movlw	0
  5376  002A66  1A14               	xorwf	___ftneg@f1+1,f,c
  5377  002A68  0E80               	movlw	128
  5378  002A6A  1A15               	xorwf	___ftneg@f1+2,f,c
  5379  002A6C                     l678:
  5380  002A6C  C013  F013         	movff	___ftneg@f1,?___ftneg
  5381  002A70  C014  F014         	movff	___ftneg@f1+1,?___ftneg+1
  5382  002A74  C015  F015         	movff	___ftneg@f1+2,?___ftneg+2
  5383  002A78  0012               	return		;funcret
  5384  002A7A                     __end_of___ftneg:
  5385                           	opt stack 0
  5386                           tblptru	equ	0xFF8
  5387                           tblptrh	equ	0xFF7
  5388                           tblptrl	equ	0xFF6
  5389                           tablat	equ	0xFF5
  5390                           prodh	equ	0xFF4
  5391                           prodl	equ	0xFF3
  5392                           postinc0	equ	0xFEE
  5393                           wreg	equ	0xFE8
  5394                           indf2	equ	0xFDF
  5395                           postinc2	equ	0xFDE
  5396                           postdec2	equ	0xFDD
  5397                           fsr2h	equ	0xFDA
  5398                           fsr2l	equ	0xFD9
  5399                           status	equ	0xFD8
  5400                           
  5401 ;; *************** function ___ftge *****************
  5402 ;; Defined at:
  5403 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  5404 ;; Parameters:    Size  Location     Type
  5405 ;;  ff1             3   18[COMRAM] float 
  5406 ;;  ff2             3   21[COMRAM] float 
  5407 ;; Auto vars:     Size  Location     Type
  5408 ;;		None
  5409 ;; Return value:  Size  Location     Type
  5410 ;;		None               void
  5411 ;; Registers used:
  5412 ;;		wreg, status,2, status,0
  5413 ;; Tracked objects:
  5414 ;;		On entry : 0/0
  5415 ;;		On exit  : 0/0
  5416 ;;		Unchanged: 0/0
  5417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5418 ;;      Params:         6       0       0       0       0       0       0       0       0
  5419 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5420 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5421 ;;      Totals:         9       0       0       0       0       0       0       0       0
  5422 ;;Total ram usage:        9 bytes
  5423 ;; Hardware stack levels used:    1
  5424 ;; Hardware stack levels required when called:    1
  5425 ;; This function calls:
  5426 ;;		Nothing
  5427 ;; This function is called by:
  5428 ;;		_sprintf
  5429 ;; This function uses a non-reentrant model
  5430 ;;
  5431                           
  5432                           	psect	text17
  5433  002572                     __ptext17:
  5434                           	opt stack 0
  5435  002572                     ___ftge:
  5436                           	opt stack 28
  5437                           
  5438                           ;incstack = 0
  5439  002572  AE15               	btfss	___ftge@ff1+2,7,c
  5440  002574  D016               	goto	l660
  5441  002576  C013  F019         	movff	___ftge@ff1,??___ftge
  5442  00257A  C014  F01A         	movff	___ftge@ff1+1,??___ftge+1
  5443  00257E  C015  F01B         	movff	___ftge@ff1+2,??___ftge+2
  5444  002582  1E19               	comf	??___ftge,f,c
  5445  002584  1E1A               	comf	??___ftge+1,f,c
  5446  002586  1E1B               	comf	??___ftge+2,f,c
  5447  002588  2A19               	incf	??___ftge,f,c
  5448  00258A  0E00               	movlw	0
  5449  00258C  221A               	addwfc	??___ftge+1,f,c
  5450  00258E  221B               	addwfc	??___ftge+2,f,c
  5451  002590  0E00               	movlw	0
  5452  002592  2419               	addwf	??___ftge,w,c
  5453  002594  6E13               	movwf	___ftge@ff1,c
  5454  002596  0E00               	movlw	0
  5455  002598  201A               	addwfc	??___ftge+1,w,c
  5456  00259A  6E14               	movwf	___ftge@ff1+1,c
  5457  00259C  0E80               	movlw	128
  5458  00259E  201B               	addwfc	??___ftge+2,w,c
  5459  0025A0  6E15               	movwf	___ftge@ff1+2,c
  5460  0025A2                     l660:
  5461  0025A2  AE18               	btfss	___ftge@ff2+2,7,c
  5462  0025A4  D016               	goto	l661
  5463  0025A6  C016  F019         	movff	___ftge@ff2,??___ftge
  5464  0025AA  C017  F01A         	movff	___ftge@ff2+1,??___ftge+1
  5465  0025AE  C018  F01B         	movff	___ftge@ff2+2,??___ftge+2
  5466  0025B2  1E19               	comf	??___ftge,f,c
  5467  0025B4  1E1A               	comf	??___ftge+1,f,c
  5468  0025B6  1E1B               	comf	??___ftge+2,f,c
  5469  0025B8  2A19               	incf	??___ftge,f,c
  5470  0025BA  0E00               	movlw	0
  5471  0025BC  221A               	addwfc	??___ftge+1,f,c
  5472  0025BE  221B               	addwfc	??___ftge+2,f,c
  5473  0025C0  0E00               	movlw	0
  5474  0025C2  2419               	addwf	??___ftge,w,c
  5475  0025C4  6E16               	movwf	___ftge@ff2,c
  5476  0025C6  0E00               	movlw	0
  5477  0025C8  201A               	addwfc	??___ftge+1,w,c
  5478  0025CA  6E17               	movwf	___ftge@ff2+1,c
  5479  0025CC  0E80               	movlw	128
  5480  0025CE  201B               	addwfc	??___ftge+2,w,c
  5481  0025D0  6E18               	movwf	___ftge@ff2+2,c
  5482  0025D2                     l661:
  5483  0025D2  0E00               	movlw	0
  5484  0025D4  1A13               	xorwf	___ftge@ff1,f,c
  5485  0025D6  0E00               	movlw	0
  5486  0025D8  1A14               	xorwf	___ftge@ff1+1,f,c
  5487  0025DA  0E80               	movlw	128
  5488  0025DC  1A15               	xorwf	___ftge@ff1+2,f,c
  5489  0025DE  0E00               	movlw	0
  5490  0025E0  1A16               	xorwf	___ftge@ff2,f,c
  5491  0025E2  0E00               	movlw	0
  5492  0025E4  1A17               	xorwf	___ftge@ff2+1,f,c
  5493  0025E6  0E80               	movlw	128
  5494  0025E8  1A18               	xorwf	___ftge@ff2+2,f,c
  5495  0025EA  5016               	movf	___ftge@ff2,w,c
  5496  0025EC  5C13               	subwf	___ftge@ff1,w,c
  5497  0025EE  5017               	movf	___ftge@ff2+1,w,c
  5498  0025F0  5814               	subwfb	___ftge@ff1+1,w,c
  5499  0025F2  5018               	movf	___ftge@ff2+2,w,c
  5500  0025F4  5815               	subwfb	___ftge@ff1+2,w,c
  5501  0025F6  B0D8               	btfsc	status,0,c
  5502  0025F8  D002               	goto	l2254
  5503  0025FA  90D8               	bcf	status,0,c
  5504  0025FC  0012               	return	
  5505  0025FE                     l2254:
  5506  0025FE  80D8               	bsf	status,0,c
  5507  002600  0012               	return	
  5508  002602                     __end_of___ftge:
  5509                           	opt stack 0
  5510                           tblptru	equ	0xFF8
  5511                           tblptrh	equ	0xFF7
  5512                           tblptrl	equ	0xFF6
  5513                           tablat	equ	0xFF5
  5514                           prodh	equ	0xFF4
  5515                           prodl	equ	0xFF3
  5516                           postinc0	equ	0xFEE
  5517                           wreg	equ	0xFE8
  5518                           indf2	equ	0xFDF
  5519                           postinc2	equ	0xFDE
  5520                           postdec2	equ	0xFDD
  5521                           fsr2h	equ	0xFDA
  5522                           fsr2l	equ	0xFD9
  5523                           status	equ	0xFD8
  5524                           
  5525 ;; *************** function _lcd_ubicarXY *****************
  5526 ;; Defined at:
  5527 ;;		line 314 in file "lcd.c"
  5528 ;; Parameters:    Size  Location     Type
  5529 ;;  linea           1    wreg     unsigned char 
  5530 ;;  columna         1   34[BANK0 ] unsigned char 
  5531 ;; Auto vars:     Size  Location     Type
  5532 ;;  linea           1   42[BANK0 ] unsigned char 
  5533 ;;  i               1   41[BANK0 ] unsigned char 
  5534 ;;  i               1   40[BANK0 ] unsigned char 
  5535 ;; Return value:  Size  Location     Type
  5536 ;;                  1    wreg      void 
  5537 ;; Registers used:
  5538 ;;		wreg, status,2, status,0, cstack
  5539 ;; Tracked objects:
  5540 ;;		On entry : 0/0
  5541 ;;		On exit  : 0/0
  5542 ;;		Unchanged: 0/0
  5543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5544 ;;      Params:         0       1       0       0       0       0       0       0       0
  5545 ;;      Locals:         0       3       0       0       0       0       0       0       0
  5546 ;;      Temps:          0       5       0       0       0       0       0       0       0
  5547 ;;      Totals:         0       9       0       0       0       0       0       0       0
  5548 ;;Total ram usage:        9 bytes
  5549 ;; Hardware stack levels used:    1
  5550 ;; Hardware stack levels required when called:    7
  5551 ;; This function calls:
  5552 ;;		_lcd_orden
  5553 ;;		_lcd_origen
  5554 ;; This function is called by:
  5555 ;;		_main
  5556 ;; This function uses a non-reentrant model
  5557 ;;
  5558                           
  5559                           	psect	text18
  5560  002708                     __ptext18:
  5561                           	opt stack 0
  5562  002708                     _lcd_ubicarXY:
  5563                           	opt stack 23
  5564                           
  5565                           ;incstack = 0
  5566                           ;lcd_ubicarXY@linea stored from wreg
  5567  002708  0100               	movlb	0	; () banked
  5568  00270A  6F8A               	movwf	lcd_ubicarXY@linea& (0+255),b
  5569                           
  5570                           ;lcd.c: 315: lcd_origen();
  5571  00270C  EC6F  F015         	call	_lcd_origen	;wreg free
  5572                           
  5573                           ;lcd.c: 316: if (linea==1){
  5574  002710  0100               	movlb	0	; () banked
  5575  002712  058A               	decf	lcd_ubicarXY@linea& (0+255),w,b
  5576  002714  A4D8               	btfss	status,2,c
  5577  002716  D00F               	goto	u4220
  5578                           
  5579                           ; BSR set to: 0
  5580                           ;lcd.c: 317: for(char i=1; i<columna; i++){
  5581  002718  0E01               	movlw	1
  5582  00271A  6F88               	movwf	lcd_ubicarXY@i& (0+255),b
  5583  00271C  D008               	goto	l105
  5584  00271E                     
  5585                           ; BSR set to: 0
  5586                           ;lcd.c: 318: lcd_orden(0x14);
  5587                           
  5588                           ; BSR set to: 0
  5589  00271E  0E00               	movlw	0
  5590  002720  6F7C               	movwf	(lcd_orden@orden+1)& (0+255),b
  5591  002722  0E14               	movlw	20
  5592  002724  6F7B               	movwf	lcd_orden@orden& (0+255),b
  5593  002726  EC2D  F014         	call	_lcd_orden	;wreg free
  5594  00272A  0100               	movlb	0	; () banked
  5595  00272C  2B88               	incf	lcd_ubicarXY@i& (0+255),f,b
  5596  00272E                     l105:
  5597                           
  5598                           ; BSR set to: 0
  5599                           
  5600                           ; BSR set to: 0
  5601  00272E  5182               	movf	lcd_ubicarXY@columna& (0+255),w,b
  5602  002730  5D88               	subwf	lcd_ubicarXY@i& (0+255),w,b
  5603  002732  A0D8               	btfss	status,0,c
  5604  002734  D7F4               	goto	l106
  5605  002736                     u4220:
  5606                           
  5607                           ; BSR set to: 0
  5608                           ;lcd.c: 319: }
  5609                           ;lcd.c: 320: }
  5610                           ;lcd.c: 321: if(linea==2){
  5611                           
  5612                           ; BSR set to: 0
  5613                           
  5614                           ; BSR set to: 0
  5615  002736  0E02               	movlw	2
  5616  002738  198A               	xorwf	lcd_ubicarXY@linea& (0+255),w,b
  5617  00273A  A4D8               	btfss	status,2,c
  5618  00273C  0012               	return	
  5619                           
  5620                           ; BSR set to: 0
  5621                           ;lcd.c: 322: for (char i=1;i<(columna+40);i++){
  5622  00273E  0E01               	movlw	1
  5623  002740  6F89               	movwf	lcd_ubicarXY@i_695& (0+255),b
  5624  002742  D008               	goto	l109
  5625  002744                     
  5626                           ; BSR set to: 0
  5627                           ;lcd.c: 323: lcd_orden(0x14);
  5628                           
  5629                           ; BSR set to: 0
  5630  002744  0E00               	movlw	0
  5631  002746  6F7C               	movwf	(lcd_orden@orden+1)& (0+255),b
  5632  002748  0E14               	movlw	20
  5633  00274A  6F7B               	movwf	lcd_orden@orden& (0+255),b
  5634  00274C  EC2D  F014         	call	_lcd_orden	;wreg free
  5635  002750  0100               	movlb	0	; () banked
  5636  002752  2B89               	incf	lcd_ubicarXY@i_695& (0+255),f,b
  5637  002754                     l109:
  5638                           
  5639                           ; BSR set to: 0
  5640                           
  5641                           ; BSR set to: 0
  5642  002754  5182               	movf	lcd_ubicarXY@columna& (0+255),w,b
  5643  002756  6F83               	movwf	??_lcd_ubicarXY& (0+255),b
  5644  002758  6B84               	clrf	(??_lcd_ubicarXY+1)& (0+255),b
  5645  00275A  0E28               	movlw	40
  5646  00275C  2783               	addwf	??_lcd_ubicarXY& (0+255),f,b
  5647  00275E  0E00               	movlw	0
  5648  002760  2384               	addwfc	(??_lcd_ubicarXY+1)& (0+255),f,b
  5649  002762  5189               	movf	lcd_ubicarXY@i_695& (0+255),w,b
  5650  002764  6F85               	movwf	(??_lcd_ubicarXY+2)& (0+255),b
  5651  002766  6B86               	clrf	(??_lcd_ubicarXY+3)& (0+255),b
  5652  002768  5183               	movf	??_lcd_ubicarXY& (0+255),w,b
  5653  00276A  5D85               	subwf	(??_lcd_ubicarXY+2)& (0+255),w,b
  5654  00276C  5186               	movf	(??_lcd_ubicarXY+3)& (0+255),w,b
  5655  00276E  0A80               	xorlw	128
  5656  002770  6F87               	movwf	(??_lcd_ubicarXY+4)& (0+255),b
  5657  002772  5184               	movf	(??_lcd_ubicarXY+1)& (0+255),w,b
  5658  002774  0A80               	xorlw	128
  5659  002776  5987               	subwfb	(??_lcd_ubicarXY+4)& (0+255),w,b
  5660  002778  B0D8               	btfsc	status,0,c
  5661  00277A  0012               	return	
  5662  00277C  D7E3               	goto	l110
  5663  00277E                     __end_of_lcd_ubicarXY:
  5664                           	opt stack 0
  5665                           tblptru	equ	0xFF8
  5666                           tblptrh	equ	0xFF7
  5667                           tblptrl	equ	0xFF6
  5668                           tablat	equ	0xFF5
  5669                           prodh	equ	0xFF4
  5670                           prodl	equ	0xFF3
  5671                           postinc0	equ	0xFEE
  5672                           wreg	equ	0xFE8
  5673                           indf2	equ	0xFDF
  5674                           postinc2	equ	0xFDE
  5675                           postdec2	equ	0xFDD
  5676                           fsr2h	equ	0xFDA
  5677                           fsr2l	equ	0xFD9
  5678                           status	equ	0xFD8
  5679                           
  5680 ;; *************** function _lcd_origen *****************
  5681 ;; Defined at:
  5682 ;;		line 309 in file "lcd.c"
  5683 ;; Parameters:    Size  Location     Type
  5684 ;;		None
  5685 ;; Auto vars:     Size  Location     Type
  5686 ;;		None
  5687 ;; Return value:  Size  Location     Type
  5688 ;;                  1    wreg      void 
  5689 ;; Registers used:
  5690 ;;		wreg, status,2, status,0, cstack
  5691 ;; Tracked objects:
  5692 ;;		On entry : 0/0
  5693 ;;		On exit  : 0/0
  5694 ;;		Unchanged: 0/0
  5695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5696 ;;      Params:         0       0       0       0       0       0       0       0       0
  5697 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5698 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5699 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5700 ;;Total ram usage:        0 bytes
  5701 ;; Hardware stack levels used:    1
  5702 ;; Hardware stack levels required when called:    6
  5703 ;; This function calls:
  5704 ;;		_lcd_orden
  5705 ;;		_wait_in_ms
  5706 ;; This function is called by:
  5707 ;;		_lcd_ubicarXY
  5708 ;; This function uses a non-reentrant model
  5709 ;;
  5710                           
  5711                           	psect	text19
  5712  002ADE                     __ptext19:
  5713                           	opt stack 0
  5714  002ADE                     _lcd_origen:
  5715                           	opt stack 23
  5716                           
  5717                           ;lcd.c: 310: lcd_orden(0x02);
  5718                           
  5719                           ; BSR set to: 0
  5720                           ;incstack = 0
  5721  002ADE  0E00               	movlw	0
  5722  002AE0  0100               	movlb	0	; () banked
  5723  002AE2  6F7C               	movwf	(lcd_orden@orden+1)& (0+255),b
  5724  002AE4  0E02               	movlw	2
  5725  002AE6  6F7B               	movwf	lcd_orden@orden& (0+255),b
  5726  002AE8  EC2D  F014         	call	_lcd_orden	;wreg free
  5727                           
  5728                           ;lcd.c: 311: wait_in_ms(4);
  5729  002AEC  0E00               	movlw	0
  5730  002AEE  0100               	movlb	0	; () banked
  5731  002AF0  6F72               	movwf	(wait_in_ms@time_in_ms+1)& (0+255),b
  5732  002AF2  0E04               	movlw	4
  5733  002AF4  6F71               	movwf	wait_in_ms@time_in_ms& (0+255),b
  5734  002AF6  EC3B  F011         	call	_wait_in_ms	;wreg free
  5735  002AFA  0012               	return		;funcret
  5736  002AFC                     __end_of_lcd_origen:
  5737                           	opt stack 0
  5738                           tblptru	equ	0xFF8
  5739                           tblptrh	equ	0xFF7
  5740                           tblptrl	equ	0xFF6
  5741                           tablat	equ	0xFF5
  5742                           prodh	equ	0xFF4
  5743                           prodl	equ	0xFF3
  5744                           postinc0	equ	0xFEE
  5745                           wreg	equ	0xFE8
  5746                           indf2	equ	0xFDF
  5747                           postinc2	equ	0xFDE
  5748                           postdec2	equ	0xFDD
  5749                           fsr2h	equ	0xFDA
  5750                           fsr2l	equ	0xFD9
  5751                           status	equ	0xFD8
  5752                           
  5753 ;; *************** function _lcd_texto *****************
  5754 ;; Defined at:
  5755 ;;		line 297 in file "lcd.c"
  5756 ;; Parameters:    Size  Location     Type
  5757 ;;  cadena          2   34[BANK0 ] PTR unsigned char 
  5758 ;;		 -> main@str(2), 
  5759 ;; Auto vars:     Size  Location     Type
  5760 ;;		None
  5761 ;; Return value:  Size  Location     Type
  5762 ;;                  1    wreg      void 
  5763 ;; Registers used:
  5764 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5765 ;; Tracked objects:
  5766 ;;		On entry : 0/0
  5767 ;;		On exit  : 0/0
  5768 ;;		Unchanged: 0/0
  5769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5770 ;;      Params:         0       2       0       0       0       0       0       0       0
  5771 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5772 ;;      Temps:          0       1       0       0       0       0       0       0       0
  5773 ;;      Totals:         0       3       0       0       0       0       0       0       0
  5774 ;;Total ram usage:        3 bytes
  5775 ;; Hardware stack levels used:    1
  5776 ;; Hardware stack levels required when called:    6
  5777 ;; This function calls:
  5778 ;;		_lcd_caracter
  5779 ;; This function is called by:
  5780 ;;		_main
  5781 ;; This function uses a non-reentrant model
  5782 ;;
  5783                           
  5784                           	psect	text20
  5785  002A00                     __ptext20:
  5786                           	opt stack 0
  5787  002A00                     _lcd_texto:
  5788                           	opt stack 24
  5789                           
  5790                           ;lcd.c: 298: while(*cadena != 0x00){
  5791                           
  5792                           ;incstack = 0
  5793  002A00  D00F               	goto	l92
  5794  002A02                     
  5795                           ;lcd.c: 299: lcd_caracter(*cadena);
  5796  002A02  C082  FFD9         	movff	lcd_texto@cadena,fsr2l
  5797  002A06  C083  FFDA         	movff	lcd_texto@cadena+1,fsr2h
  5798  002A0A  50DF               	movf	indf2,w,c
  5799  002A0C  0100               	movlb	0	; () banked
  5800  002A0E  6F84               	movwf	??_lcd_texto& (0+255),b
  5801  002A10  5184               	movf	??_lcd_texto& (0+255),w,b
  5802  002A12  6F7B               	movwf	lcd_caracter@caracter& (0+255),b
  5803  002A14  6B7C               	clrf	(lcd_caracter@caracter+1)& (0+255),b
  5804  002A16  ECF7  F013         	call	_lcd_caracter	;wreg free
  5805                           
  5806                           ;lcd.c: 300: cadena++;
  5807  002A1A  0100               	movlb	0	; () banked
  5808  002A1C  4B82               	infsnz	lcd_texto@cadena& (0+255),f,b
  5809  002A1E  2B83               	incf	(lcd_texto@cadena+1)& (0+255),f,b
  5810  002A20                     l92:
  5811                           
  5812                           ; BSR set to: 0
  5813  002A20  C082  FFD9         	movff	lcd_texto@cadena,fsr2l
  5814  002A24  C083  FFDA         	movff	lcd_texto@cadena+1,fsr2h
  5815  002A28  50DF               	movf	indf2,w,c
  5816  002A2A  B4D8               	btfsc	status,2,c
  5817  002A2C  0012               	return	
  5818  002A2E  D7E9               	goto	l93
  5819  002A30                     __end_of_lcd_texto:
  5820                           	opt stack 0
  5821                           tblptru	equ	0xFF8
  5822                           tblptrh	equ	0xFF7
  5823                           tblptrl	equ	0xFF6
  5824                           tablat	equ	0xFF5
  5825                           prodh	equ	0xFF4
  5826                           prodl	equ	0xFF3
  5827                           postinc0	equ	0xFEE
  5828                           wreg	equ	0xFE8
  5829                           indf2	equ	0xFDF
  5830                           postinc2	equ	0xFDE
  5831                           postdec2	equ	0xFDD
  5832                           fsr2h	equ	0xFDA
  5833                           fsr2l	equ	0xFD9
  5834                           status	equ	0xFD8
  5835                           
  5836 ;; *************** function _lcd_caracter *****************
  5837 ;; Defined at:
  5838 ;;		line 287 in file "lcd.c"
  5839 ;; Parameters:    Size  Location     Type
  5840 ;;  caracter        2   27[BANK0 ] unsigned int 
  5841 ;; Auto vars:     Size  Location     Type
  5842 ;;		None
  5843 ;; Return value:  Size  Location     Type
  5844 ;;                  1    wreg      void 
  5845 ;; Registers used:
  5846 ;;		wreg, status,2, status,0, cstack
  5847 ;; Tracked objects:
  5848 ;;		On entry : 0/0
  5849 ;;		On exit  : 0/0
  5850 ;;		Unchanged: 0/0
  5851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5852 ;;      Params:         0       2       0       0       0       0       0       0       0
  5853 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5854 ;;      Temps:          0       5       0       0       0       0       0       0       0
  5855 ;;      Totals:         0       7       0       0       0       0       0       0       0
  5856 ;;Total ram usage:        7 bytes
  5857 ;; Hardware stack levels used:    1
  5858 ;; Hardware stack levels required when called:    5
  5859 ;; This function calls:
  5860 ;;		_lcd_pulso
  5861 ;; This function is called by:
  5862 ;;		_lcd_texto
  5863 ;; This function uses a non-reentrant model
  5864 ;;
  5865                           
  5866                           	psect	text21
  5867  0027EE                     __ptext21:
  5868                           	opt stack 0
  5869  0027EE                     _lcd_caracter:
  5870                           	opt stack 24
  5871                           
  5872                           ;lcd.c: 288: PORTDbits.RD1=1;
  5873                           
  5874                           ;incstack = 0
  5875  0027EE  8283               	bsf	3971,1,c	;volatile
  5876                           
  5877                           ;lcd.c: 290: PORTD=(((((PORTD>>4&0x0f)|0x0f)&(caracter>>4&0x0f))<<4)|(PORTD&0x0f));
  5878  0027F0  CF83 F07D          	movff	3971,??_lcd_caracter	;volatile
  5879  0027F4  0E0F               	movlw	15
  5880  0027F6  0100               	movlb	0	; () banked
  5881  0027F8  177D               	andwf	??_lcd_caracter& (0+255),f,b
  5882  0027FA  C07B  F07E         	movff	lcd_caracter@caracter,??_lcd_caracter+1
  5883  0027FE  C07C  F07F         	movff	lcd_caracter@caracter+1,??_lcd_caracter+2
  5884  002802  0E04               	movlw	4
  5885  002804  6F80               	movwf	(??_lcd_caracter+3)& (0+255),b
  5886  002806                     u4105:
  5887  002806  90D8               	bcf	status,0,c
  5888  002808  337F               	rrcf	(??_lcd_caracter+2)& (0+255),f,b
  5889  00280A  337E               	rrcf	(??_lcd_caracter+1)& (0+255),f,b
  5890  00280C  2F80               	decfsz	(??_lcd_caracter+3)& (0+255),f,b
  5891  00280E  D7FB               	goto	u4105
  5892  002810  0E0F               	movlw	15
  5893  002812  177E               	andwf	(??_lcd_caracter+1)& (0+255),f,b
  5894  002814  3883               	swapf	3971,w,c	;volatile
  5895  002816  0B0F               	andlw	15
  5896  002818  0B0F               	andlw	15
  5897  00281A  090F               	iorlw	15
  5898  00281C  157E               	andwf	(??_lcd_caracter+1)& (0+255),w,b
  5899  00281E  6F81               	movwf	(??_lcd_caracter+4)& (0+255),b
  5900  002820  3981               	swapf	(??_lcd_caracter+4)& (0+255),w,b
  5901  002822  0BF0               	andlw	240
  5902  002824  117D               	iorwf	??_lcd_caracter& (0+255),w,b
  5903  002826  6E83               	movwf	3971,c	;volatile
  5904                           
  5905                           ; BSR set to: 0
  5906                           ;lcd.c: 291: lcd_pulso();
  5907  002828  EC4F  F015         	call	_lcd_pulso	;wreg free
  5908                           
  5909                           ;lcd.c: 292: PORTD=(((((PORTD>>4&0x0f)|0x0f)&(caracter&0x0f))<<4)|(PORTD&0x0f));
  5910  00282C  CF83 F07D          	movff	3971,??_lcd_caracter	;volatile
  5911  002830  0E0F               	movlw	15
  5912  002832  0100               	movlb	0	; () banked
  5913  002834  177D               	andwf	??_lcd_caracter& (0+255),f,b
  5914  002836  C07B  F07E         	movff	lcd_caracter@caracter,??_lcd_caracter+1
  5915  00283A  0E0F               	movlw	15
  5916  00283C  177E               	andwf	(??_lcd_caracter+1)& (0+255),f,b
  5917  00283E  3883               	swapf	3971,w,c	;volatile
  5918  002840  0B0F               	andlw	15
  5919  002842  0B0F               	andlw	15
  5920  002844  090F               	iorlw	15
  5921  002846  157E               	andwf	(??_lcd_caracter+1)& (0+255),w,b
  5922  002848  6F7F               	movwf	(??_lcd_caracter+2)& (0+255),b
  5923  00284A  397F               	swapf	(??_lcd_caracter+2)& (0+255),w,b
  5924  00284C  0BF0               	andlw	240
  5925  00284E  117D               	iorwf	??_lcd_caracter& (0+255),w,b
  5926  002850  6E83               	movwf	3971,c	;volatile
  5927                           
  5928                           ;lcd.c: 293: lcd_pulso();
  5929  002852  EC4F  F015         	call	_lcd_pulso	;wreg free
  5930                           
  5931                           ;lcd.c: 294: PORTDbits.RD1=0;
  5932  002856  9283               	bcf	3971,1,c	;volatile
  5933  002858  0012               	return		;funcret
  5934  00285A                     __end_of_lcd_caracter:
  5935                           	opt stack 0
  5936                           tblptru	equ	0xFF8
  5937                           tblptrh	equ	0xFF7
  5938                           tblptrl	equ	0xFF6
  5939                           tablat	equ	0xFF5
  5940                           prodh	equ	0xFF4
  5941                           prodl	equ	0xFF3
  5942                           postinc0	equ	0xFEE
  5943                           wreg	equ	0xFE8
  5944                           indf2	equ	0xFDF
  5945                           postinc2	equ	0xFDE
  5946                           postdec2	equ	0xFDD
  5947                           fsr2h	equ	0xFDA
  5948                           fsr2l	equ	0xFD9
  5949                           status	equ	0xFD8
  5950                           
  5951 ;; *************** function _lcd_limpiar *****************
  5952 ;; Defined at:
  5953 ;;		line 304 in file "lcd.c"
  5954 ;; Parameters:    Size  Location     Type
  5955 ;;		None
  5956 ;; Auto vars:     Size  Location     Type
  5957 ;;		None
  5958 ;; Return value:  Size  Location     Type
  5959 ;;                  1    wreg      void 
  5960 ;; Registers used:
  5961 ;;		wreg, status,2, status,0, cstack
  5962 ;; Tracked objects:
  5963 ;;		On entry : 0/0
  5964 ;;		On exit  : 0/0
  5965 ;;		Unchanged: 0/0
  5966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5967 ;;      Params:         0       0       0       0       0       0       0       0       0
  5968 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5969 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5970 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5971 ;;Total ram usage:        0 bytes
  5972 ;; Hardware stack levels used:    1
  5973 ;; Hardware stack levels required when called:    6
  5974 ;; This function calls:
  5975 ;;		_lcd_orden
  5976 ;;		_wait_in_ms
  5977 ;; This function is called by:
  5978 ;;		_main
  5979 ;; This function uses a non-reentrant model
  5980 ;;
  5981                           
  5982                           	psect	text22
  5983  002AFC                     __ptext22:
  5984                           	opt stack 0
  5985  002AFC                     _lcd_limpiar:
  5986                           	opt stack 24
  5987                           
  5988                           ;lcd.c: 305: lcd_orden(0x01);
  5989                           
  5990                           ;incstack = 0
  5991  002AFC  0E00               	movlw	0
  5992  002AFE  0100               	movlb	0	; () banked
  5993  002B00  6F7C               	movwf	(lcd_orden@orden+1)& (0+255),b
  5994  002B02  0E01               	movlw	1
  5995  002B04  6F7B               	movwf	lcd_orden@orden& (0+255),b
  5996  002B06  EC2D  F014         	call	_lcd_orden	;wreg free
  5997                           
  5998                           ;lcd.c: 306: wait_in_ms(2);
  5999  002B0A  0E00               	movlw	0
  6000  002B0C  0100               	movlb	0	; () banked
  6001  002B0E  6F72               	movwf	(wait_in_ms@time_in_ms+1)& (0+255),b
  6002  002B10  0E02               	movlw	2
  6003  002B12  6F71               	movwf	wait_in_ms@time_in_ms& (0+255),b
  6004  002B14  EC3B  F011         	call	_wait_in_ms	;wreg free
  6005  002B18  0012               	return		;funcret
  6006  002B1A                     __end_of_lcd_limpiar:
  6007                           	opt stack 0
  6008                           tblptru	equ	0xFF8
  6009                           tblptrh	equ	0xFF7
  6010                           tblptrl	equ	0xFF6
  6011                           tablat	equ	0xFF5
  6012                           prodh	equ	0xFF4
  6013                           prodl	equ	0xFF3
  6014                           postinc0	equ	0xFEE
  6015                           wreg	equ	0xFE8
  6016                           indf2	equ	0xFDF
  6017                           postinc2	equ	0xFDE
  6018                           postdec2	equ	0xFDD
  6019                           fsr2h	equ	0xFDA
  6020                           fsr2l	equ	0xFD9
  6021                           status	equ	0xFD8
  6022                           
  6023 ;; *************** function _lcd_iniciar *****************
  6024 ;; Defined at:
  6025 ;;		line 225 in file "lcd.c"
  6026 ;; Parameters:    Size  Location     Type
  6027 ;;		None
  6028 ;; Auto vars:     Size  Location     Type
  6029 ;;		None
  6030 ;; Return value:  Size  Location     Type
  6031 ;;                  1    wreg      void 
  6032 ;; Registers used:
  6033 ;;		wreg, status,2, status,0, cstack
  6034 ;; Tracked objects:
  6035 ;;		On entry : 0/0
  6036 ;;		On exit  : 0/0
  6037 ;;		Unchanged: 0/0
  6038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6039 ;;      Params:         0       0       0       0       0       0       0       0       0
  6040 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6041 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6042 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6043 ;;Total ram usage:        0 bytes
  6044 ;; Hardware stack levels used:    1
  6045 ;; Hardware stack levels required when called:    6
  6046 ;; This function calls:
  6047 ;;		_lcd_orden
  6048 ;;		_lcd_pulso
  6049 ;;		_wait_in_ms
  6050 ;; This function is called by:
  6051 ;;		_main
  6052 ;; This function uses a non-reentrant model
  6053 ;;
  6054                           
  6055                           	psect	text23
  6056  002190                     __ptext23:
  6057                           	opt stack 0
  6058  002190                     _lcd_iniciar:
  6059                           	opt stack 24
  6060                           
  6061                           ;lcd.c: 226: TRISDbits.TRISD1=0;
  6062                           
  6063                           ;incstack = 0
  6064  002190  9295               	bcf	3989,1,c	;volatile
  6065                           
  6066                           ;lcd.c: 227: TRISDbits.TRISD2=0;
  6067  002192  9495               	bcf	3989,2,c	;volatile
  6068                           
  6069                           ;lcd.c: 228: TRISDbits.TRISD3=0;
  6070  002194  9695               	bcf	3989,3,c	;volatile
  6071                           
  6072                           ;lcd.c: 229: TRISDbits.TRISD4=0;
  6073  002196  9895               	bcf	3989,4,c	;volatile
  6074                           
  6075                           ;lcd.c: 230: TRISDbits.TRISD5=0;
  6076  002198  9A95               	bcf	3989,5,c	;volatile
  6077                           
  6078                           ;lcd.c: 231: TRISDbits.TRISD6=0;
  6079  00219A  9C95               	bcf	3989,6,c	;volatile
  6080                           
  6081                           ;lcd.c: 232: TRISDbits.TRISD7=0;
  6082  00219C  9E95               	bcf	3989,7,c	;volatile
  6083                           
  6084                           ;lcd.c: 234: PORTDbits.RD1=0;
  6085  00219E  9283               	bcf	3971,1,c	;volatile
  6086                           
  6087                           ;lcd.c: 235: PORTDbits.RD2=0;
  6088  0021A0  9483               	bcf	3971,2,c	;volatile
  6089                           
  6090                           ;lcd.c: 236: PORTDbits.RD3=0;
  6091  0021A2  9683               	bcf	3971,3,c	;volatile
  6092                           
  6093                           ;lcd.c: 237: PORTDbits.RD4=0;
  6094  0021A4  9883               	bcf	3971,4,c	;volatile
  6095                           
  6096                           ;lcd.c: 238: PORTDbits.RD5=0;
  6097  0021A6  9A83               	bcf	3971,5,c	;volatile
  6098                           
  6099                           ;lcd.c: 239: PORTDbits.RD6=0;
  6100  0021A8  9C83               	bcf	3971,6,c	;volatile
  6101                           
  6102                           ;lcd.c: 240: PORTDbits.RD7=0;
  6103  0021AA  9E83               	bcf	3971,7,c	;volatile
  6104                           
  6105                           ;lcd.c: 242: wait_in_ms(20);
  6106  0021AC  0E00               	movlw	0
  6107  0021AE  0100               	movlb	0	; () banked
  6108  0021B0  6F72               	movwf	(wait_in_ms@time_in_ms+1)& (0+255),b
  6109  0021B2  0E14               	movlw	20
  6110  0021B4  6F71               	movwf	wait_in_ms@time_in_ms& (0+255),b
  6111  0021B6  EC3B  F011         	call	_wait_in_ms	;wreg free
  6112                           
  6113                           ;lcd.c: 243: PORTD=0X03<<4;
  6114  0021BA  0E30               	movlw	48
  6115  0021BC  6E83               	movwf	3971,c	;volatile
  6116                           
  6117                           ;lcd.c: 244: lcd_pulso();
  6118  0021BE  EC4F  F015         	call	_lcd_pulso	;wreg free
  6119                           
  6120                           ;lcd.c: 245: wait_in_ms(4);
  6121  0021C2  0E00               	movlw	0
  6122  0021C4  0100               	movlb	0	; () banked
  6123  0021C6  6F72               	movwf	(wait_in_ms@time_in_ms+1)& (0+255),b
  6124  0021C8  0E04               	movlw	4
  6125  0021CA  6F71               	movwf	wait_in_ms@time_in_ms& (0+255),b
  6126  0021CC  EC3B  F011         	call	_wait_in_ms	;wreg free
  6127                           
  6128                           ;lcd.c: 247: PORTD=0X03<<4;
  6129  0021D0  0E30               	movlw	48
  6130  0021D2  6E83               	movwf	3971,c	;volatile
  6131                           
  6132                           ;lcd.c: 248: lcd_pulso();
  6133  0021D4  EC4F  F015         	call	_lcd_pulso	;wreg free
  6134                           
  6135                           ;lcd.c: 249: wait_in_ms(4);
  6136  0021D8  0E00               	movlw	0
  6137  0021DA  0100               	movlb	0	; () banked
  6138  0021DC  6F72               	movwf	(wait_in_ms@time_in_ms+1)& (0+255),b
  6139  0021DE  0E04               	movlw	4
  6140  0021E0  6F71               	movwf	wait_in_ms@time_in_ms& (0+255),b
  6141  0021E2  EC3B  F011         	call	_wait_in_ms	;wreg free
  6142                           
  6143                           ;lcd.c: 251: PORTD=0X03<<4;
  6144  0021E6  0E30               	movlw	48
  6145  0021E8  6E83               	movwf	3971,c	;volatile
  6146                           
  6147                           ;lcd.c: 252: lcd_pulso();
  6148  0021EA  EC4F  F015         	call	_lcd_pulso	;wreg free
  6149                           
  6150                           ;lcd.c: 253: wait_in_ms(1);
  6151  0021EE  0E00               	movlw	0
  6152  0021F0  0100               	movlb	0	; () banked
  6153  0021F2  6F72               	movwf	(wait_in_ms@time_in_ms+1)& (0+255),b
  6154  0021F4  0E01               	movlw	1
  6155  0021F6  6F71               	movwf	wait_in_ms@time_in_ms& (0+255),b
  6156  0021F8  EC3B  F011         	call	_wait_in_ms	;wreg free
  6157                           
  6158                           ;lcd.c: 255: PORTD=0X02<<4;
  6159  0021FC  0E20               	movlw	32
  6160  0021FE  6E83               	movwf	3971,c	;volatile
  6161                           
  6162                           ;lcd.c: 256: lcd_pulso();
  6163  002200  EC4F  F015         	call	_lcd_pulso	;wreg free
  6164                           
  6165                           ;lcd.c: 258: lcd_orden(0x28);
  6166  002204  0E00               	movlw	0
  6167  002206  0100               	movlb	0	; () banked
  6168  002208  6F7C               	movwf	(lcd_orden@orden+1)& (0+255),b
  6169  00220A  0E28               	movlw	40
  6170  00220C  6F7B               	movwf	lcd_orden@orden& (0+255),b
  6171  00220E  EC2D  F014         	call	_lcd_orden	;wreg free
  6172                           
  6173                           ;lcd.c: 259: wait_in_ms(8);
  6174  002212  0E00               	movlw	0
  6175  002214  0100               	movlb	0	; () banked
  6176  002216  6F72               	movwf	(wait_in_ms@time_in_ms+1)& (0+255),b
  6177  002218  0E08               	movlw	8
  6178  00221A  6F71               	movwf	wait_in_ms@time_in_ms& (0+255),b
  6179  00221C  EC3B  F011         	call	_wait_in_ms	;wreg free
  6180                           
  6181                           ;lcd.c: 261: lcd_orden(0x0c);
  6182  002220  0E00               	movlw	0
  6183  002222  0100               	movlb	0	; () banked
  6184  002224  6F7C               	movwf	(lcd_orden@orden+1)& (0+255),b
  6185  002226  0E0C               	movlw	12
  6186  002228  6F7B               	movwf	lcd_orden@orden& (0+255),b
  6187  00222A  EC2D  F014         	call	_lcd_orden	;wreg free
  6188                           
  6189                           ;lcd.c: 262: wait_in_ms(8);
  6190  00222E  0E00               	movlw	0
  6191  002230  0100               	movlb	0	; () banked
  6192  002232  6F72               	movwf	(wait_in_ms@time_in_ms+1)& (0+255),b
  6193  002234  0E08               	movlw	8
  6194  002236  6F71               	movwf	wait_in_ms@time_in_ms& (0+255),b
  6195  002238  EC3B  F011         	call	_wait_in_ms	;wreg free
  6196                           
  6197                           ;lcd.c: 264: lcd_orden(0x01);
  6198  00223C  0E00               	movlw	0
  6199  00223E  0100               	movlb	0	; () banked
  6200  002240  6F7C               	movwf	(lcd_orden@orden+1)& (0+255),b
  6201  002242  0E01               	movlw	1
  6202  002244  6F7B               	movwf	lcd_orden@orden& (0+255),b
  6203  002246  EC2D  F014         	call	_lcd_orden	;wreg free
  6204                           
  6205                           ;lcd.c: 265: wait_in_ms(2);
  6206  00224A  0E00               	movlw	0
  6207  00224C  0100               	movlb	0	; () banked
  6208  00224E  6F72               	movwf	(wait_in_ms@time_in_ms+1)& (0+255),b
  6209  002250  0E02               	movlw	2
  6210  002252  6F71               	movwf	wait_in_ms@time_in_ms& (0+255),b
  6211  002254  EC3B  F011         	call	_wait_in_ms	;wreg free
  6212                           
  6213                           ;lcd.c: 267: lcd_orden(0x06);
  6214  002258  0E00               	movlw	0
  6215  00225A  0100               	movlb	0	; () banked
  6216  00225C  6F7C               	movwf	(lcd_orden@orden+1)& (0+255),b
  6217  00225E  0E06               	movlw	6
  6218  002260  6F7B               	movwf	lcd_orden@orden& (0+255),b
  6219  002262  EC2D  F014         	call	_lcd_orden	;wreg free
  6220                           
  6221                           ;lcd.c: 268: wait_in_ms(8);
  6222  002266  0E00               	movlw	0
  6223  002268  0100               	movlb	0	; () banked
  6224  00226A  6F72               	movwf	(wait_in_ms@time_in_ms+1)& (0+255),b
  6225  00226C  0E08               	movlw	8
  6226  00226E  6F71               	movwf	wait_in_ms@time_in_ms& (0+255),b
  6227  002270  EC3B  F011         	call	_wait_in_ms	;wreg free
  6228  002274  0012               	return		;funcret
  6229  002276                     __end_of_lcd_iniciar:
  6230                           	opt stack 0
  6231                           tblptru	equ	0xFF8
  6232                           tblptrh	equ	0xFF7
  6233                           tblptrl	equ	0xFF6
  6234                           tablat	equ	0xFF5
  6235                           prodh	equ	0xFF4
  6236                           prodl	equ	0xFF3
  6237                           postinc0	equ	0xFEE
  6238                           wreg	equ	0xFE8
  6239                           indf2	equ	0xFDF
  6240                           postinc2	equ	0xFDE
  6241                           postdec2	equ	0xFDD
  6242                           fsr2h	equ	0xFDA
  6243                           fsr2l	equ	0xFD9
  6244                           status	equ	0xFD8
  6245                           
  6246 ;; *************** function _lcd_orden *****************
  6247 ;; Defined at:
  6248 ;;		line 278 in file "lcd.c"
  6249 ;; Parameters:    Size  Location     Type
  6250 ;;  orden           2   27[BANK0 ] unsigned int 
  6251 ;; Auto vars:     Size  Location     Type
  6252 ;;		None
  6253 ;; Return value:  Size  Location     Type
  6254 ;;                  1    wreg      void 
  6255 ;; Registers used:
  6256 ;;		wreg, status,2, status,0, cstack
  6257 ;; Tracked objects:
  6258 ;;		On entry : 0/0
  6259 ;;		On exit  : 0/0
  6260 ;;		Unchanged: 0/0
  6261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6262 ;;      Params:         0       2       0       0       0       0       0       0       0
  6263 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6264 ;;      Temps:          0       5       0       0       0       0       0       0       0
  6265 ;;      Totals:         0       7       0       0       0       0       0       0       0
  6266 ;;Total ram usage:        7 bytes
  6267 ;; Hardware stack levels used:    1
  6268 ;; Hardware stack levels required when called:    5
  6269 ;; This function calls:
  6270 ;;		_lcd_pulso
  6271 ;; This function is called by:
  6272 ;;		_lcd_iniciar
  6273 ;;		_lcd_limpiar
  6274 ;;		_lcd_origen
  6275 ;;		_lcd_ubicarXY
  6276 ;; This function uses a non-reentrant model
  6277 ;;
  6278                           
  6279                           	psect	text24
  6280  00285A                     __ptext24:
  6281                           	opt stack 0
  6282  00285A                     _lcd_orden:
  6283                           	opt stack 23
  6284                           
  6285                           ;lcd.c: 279: PORTDbits.RD1=0;
  6286                           
  6287                           ;incstack = 0
  6288  00285A  9283               	bcf	3971,1,c	;volatile
  6289                           
  6290                           ;lcd.c: 281: PORTD=(((((PORTD>>4&0x0f)|0x0f)&(orden>>4&0x0f))<<4)|(PORTD&0x0f));
  6291  00285C  CF83 F07D          	movff	3971,??_lcd_orden	;volatile
  6292  002860  0E0F               	movlw	15
  6293  002862  0100               	movlb	0	; () banked
  6294  002864  177D               	andwf	??_lcd_orden& (0+255),f,b
  6295  002866  C07B  F07E         	movff	lcd_orden@orden,??_lcd_orden+1
  6296  00286A  C07C  F07F         	movff	lcd_orden@orden+1,??_lcd_orden+2
  6297  00286E  0E04               	movlw	4
  6298  002870  6F80               	movwf	(??_lcd_orden+3)& (0+255),b
  6299  002872                     u3825:
  6300  002872  90D8               	bcf	status,0,c
  6301  002874  337F               	rrcf	(??_lcd_orden+2)& (0+255),f,b
  6302  002876  337E               	rrcf	(??_lcd_orden+1)& (0+255),f,b
  6303  002878  2F80               	decfsz	(??_lcd_orden+3)& (0+255),f,b
  6304  00287A  D7FB               	goto	u3825
  6305  00287C  0E0F               	movlw	15
  6306  00287E  177E               	andwf	(??_lcd_orden+1)& (0+255),f,b
  6307  002880  3883               	swapf	3971,w,c	;volatile
  6308  002882  0B0F               	andlw	15
  6309  002884  0B0F               	andlw	15
  6310  002886  090F               	iorlw	15
  6311  002888  157E               	andwf	(??_lcd_orden+1)& (0+255),w,b
  6312  00288A  6F81               	movwf	(??_lcd_orden+4)& (0+255),b
  6313  00288C  3981               	swapf	(??_lcd_orden+4)& (0+255),w,b
  6314  00288E  0BF0               	andlw	240
  6315  002890  117D               	iorwf	??_lcd_orden& (0+255),w,b
  6316  002892  6E83               	movwf	3971,c	;volatile
  6317                           
  6318                           ; BSR set to: 0
  6319                           ;lcd.c: 282: lcd_pulso();
  6320  002894  EC4F  F015         	call	_lcd_pulso	;wreg free
  6321                           
  6322                           ;lcd.c: 283: PORTD=(((((PORTD>>4&0x0f)|0x0f)&(orden&0x0f))<<4)|(PORTD&0x0f));
  6323  002898  CF83 F07D          	movff	3971,??_lcd_orden	;volatile
  6324  00289C  0E0F               	movlw	15
  6325  00289E  0100               	movlb	0	; () banked
  6326  0028A0  177D               	andwf	??_lcd_orden& (0+255),f,b
  6327  0028A2  C07B  F07E         	movff	lcd_orden@orden,??_lcd_orden+1
  6328  0028A6  0E0F               	movlw	15
  6329  0028A8  177E               	andwf	(??_lcd_orden+1)& (0+255),f,b
  6330  0028AA  3883               	swapf	3971,w,c	;volatile
  6331  0028AC  0B0F               	andlw	15
  6332  0028AE  0B0F               	andlw	15
  6333  0028B0  090F               	iorlw	15
  6334  0028B2  157E               	andwf	(??_lcd_orden+1)& (0+255),w,b
  6335  0028B4  6F7F               	movwf	(??_lcd_orden+2)& (0+255),b
  6336  0028B6  397F               	swapf	(??_lcd_orden+2)& (0+255),w,b
  6337  0028B8  0BF0               	andlw	240
  6338  0028BA  117D               	iorwf	??_lcd_orden& (0+255),w,b
  6339  0028BC  6E83               	movwf	3971,c	;volatile
  6340                           
  6341                           ;lcd.c: 284: lcd_pulso();
  6342  0028BE  EC4F  F015         	call	_lcd_pulso	;wreg free
  6343  0028C2  0012               	return		;funcret
  6344  0028C4                     __end_of_lcd_orden:
  6345                           	opt stack 0
  6346                           tblptru	equ	0xFF8
  6347                           tblptrh	equ	0xFF7
  6348                           tblptrl	equ	0xFF6
  6349                           tablat	equ	0xFF5
  6350                           prodh	equ	0xFF4
  6351                           prodl	equ	0xFF3
  6352                           postinc0	equ	0xFEE
  6353                           wreg	equ	0xFE8
  6354                           indf2	equ	0xFDF
  6355                           postinc2	equ	0xFDE
  6356                           postdec2	equ	0xFDD
  6357                           fsr2h	equ	0xFDA
  6358                           fsr2l	equ	0xFD9
  6359                           status	equ	0xFD8
  6360                           
  6361 ;; *************** function _lcd_pulso *****************
  6362 ;; Defined at:
  6363 ;;		line 271 in file "lcd.c"
  6364 ;; Parameters:    Size  Location     Type
  6365 ;;		None
  6366 ;; Auto vars:     Size  Location     Type
  6367 ;;		None
  6368 ;; Return value:  Size  Location     Type
  6369 ;;                  1    wreg      void 
  6370 ;; Registers used:
  6371 ;;		wreg, status,2, status,0, cstack
  6372 ;; Tracked objects:
  6373 ;;		On entry : 0/0
  6374 ;;		On exit  : 0/0
  6375 ;;		Unchanged: 0/0
  6376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6377 ;;      Params:         0       0       0       0       0       0       0       0       0
  6378 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6379 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6380 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6381 ;;Total ram usage:        0 bytes
  6382 ;; Hardware stack levels used:    1
  6383 ;; Hardware stack levels required when called:    4
  6384 ;; This function calls:
  6385 ;;		_wait_in_ms
  6386 ;; This function is called by:
  6387 ;;		_lcd_iniciar
  6388 ;;		_lcd_orden
  6389 ;;		_lcd_caracter
  6390 ;; This function uses a non-reentrant model
  6391 ;;
  6392                           
  6393                           	psect	text25
  6394  002A9E                     __ptext25:
  6395                           	opt stack 0
  6396  002A9E                     _lcd_pulso:
  6397                           	opt stack 23
  6398                           
  6399                           ;lcd.c: 272: PORTDbits.RD3=1;
  6400                           
  6401                           ;incstack = 0
  6402  002A9E  8683               	bsf	3971,3,c	;volatile
  6403                           
  6404                           ;lcd.c: 273: wait_in_ms(2);
  6405  002AA0  0E00               	movlw	0
  6406  002AA2  0100               	movlb	0	; () banked
  6407  002AA4  6F72               	movwf	(wait_in_ms@time_in_ms+1)& (0+255),b
  6408  002AA6  0E02               	movlw	2
  6409  002AA8  6F71               	movwf	wait_in_ms@time_in_ms& (0+255),b
  6410  002AAA  EC3B  F011         	call	_wait_in_ms	;wreg free
  6411                           
  6412                           ;lcd.c: 274: PORTDbits.RD3=0;
  6413  002AAE  9683               	bcf	3971,3,c	;volatile
  6414                           
  6415                           ;lcd.c: 275: wait_in_ms(2);
  6416  002AB0  0E00               	movlw	0
  6417  002AB2  0100               	movlb	0	; () banked
  6418  002AB4  6F72               	movwf	(wait_in_ms@time_in_ms+1)& (0+255),b
  6419  002AB6  0E02               	movlw	2
  6420  002AB8  6F71               	movwf	wait_in_ms@time_in_ms& (0+255),b
  6421  002ABA  EC3B  F011         	call	_wait_in_ms	;wreg free
  6422  002ABE  0012               	return		;funcret
  6423  002AC0                     __end_of_lcd_pulso:
  6424                           	opt stack 0
  6425                           tblptru	equ	0xFF8
  6426                           tblptrh	equ	0xFF7
  6427                           tblptrl	equ	0xFF6
  6428                           tablat	equ	0xFF5
  6429                           prodh	equ	0xFF4
  6430                           prodl	equ	0xFF3
  6431                           postinc0	equ	0xFEE
  6432                           wreg	equ	0xFE8
  6433                           indf2	equ	0xFDF
  6434                           postinc2	equ	0xFDE
  6435                           postdec2	equ	0xFDD
  6436                           fsr2h	equ	0xFDA
  6437                           fsr2l	equ	0xFD9
  6438                           status	equ	0xFD8
  6439                           
  6440 ;; *************** function _configBoard *****************
  6441 ;; Defined at:
  6442 ;;		line 11 in file "config.c"
  6443 ;; Parameters:    Size  Location     Type
  6444 ;;		None
  6445 ;; Auto vars:     Size  Location     Type
  6446 ;;		None
  6447 ;; Return value:  Size  Location     Type
  6448 ;;                  1    wreg      void 
  6449 ;; Registers used:
  6450 ;;		wreg, status,2
  6451 ;; Tracked objects:
  6452 ;;		On entry : 0/0
  6453 ;;		On exit  : 0/0
  6454 ;;		Unchanged: 0/0
  6455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6456 ;;      Params:         0       0       0       0       0       0       0       0       0
  6457 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6458 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6459 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6460 ;;Total ram usage:        0 bytes
  6461 ;; Hardware stack levels used:    1
  6462 ;; Hardware stack levels required when called:    1
  6463 ;; This function calls:
  6464 ;;		Nothing
  6465 ;; This function is called by:
  6466 ;;		_main
  6467 ;; This function uses a non-reentrant model
  6468 ;;
  6469                           
  6470                           	psect	text26
  6471  002414                     __ptext26:
  6472                           	opt stack 0
  6473  002414                     _configBoard:
  6474                           	opt stack 29
  6475                           
  6476                           ;config.c: 12: ADCON0bits.ADON = 0;
  6477                           
  6478                           ;incstack = 0
  6479  002414  90C2               	bcf	4034,0,c	;volatile
  6480                           
  6481                           ;config.c: 15: ADCON1bits.VCFG = 0b11;
  6482  002416  0E30               	movlw	48
  6483  002418  12C1               	iorwf	4033,f,c	;volatile
  6484                           
  6485                           ;config.c: 16: ADCON1bits.PCFG = 0b0111;
  6486  00241A  50C1               	movf	4033,w,c	;volatile
  6487  00241C  0BF0               	andlw	-16
  6488  00241E  0907               	iorlw	7
  6489  002420  6EC1               	movwf	4033,c	;volatile
  6490                           
  6491                           ;config.c: 18: ADCON2bits.ADFM = 1;
  6492  002422  8EC0               	bsf	4032,7,c	;volatile
  6493                           
  6494                           ;config.c: 19: ADCON2bits.ADCS = 0b110;
  6495  002424  50C0               	movf	4032,w,c	;volatile
  6496  002426  0BF8               	andlw	-8
  6497  002428  0906               	iorlw	6
  6498  00242A  6EC0               	movwf	4032,c	;volatile
  6499                           
  6500                           ;config.c: 20: ADCON2bits.ACQT = 0b101;
  6501  00242C  50C0               	movf	4032,w,c	;volatile
  6502  00242E  0BC7               	andlw	-57
  6503  002430  0928               	iorlw	40
  6504  002432  6EC0               	movwf	4032,c	;volatile
  6505                           
  6506                           ;config.c: 26: TRISA = 1;
  6507  002434  0E01               	movlw	1
  6508  002436  6E92               	movwf	3986,c	;volatile
  6509                           
  6510                           ;config.c: 27: TRISB = 0;
  6511  002438  0E00               	movlw	0
  6512  00243A  6E93               	movwf	3987,c	;volatile
  6513                           
  6514                           ;config.c: 28: TRISC = 0;
  6515  00243C  0E00               	movlw	0
  6516  00243E  6E94               	movwf	3988,c	;volatile
  6517                           
  6518                           ;config.c: 29: TRISD = 0;
  6519  002440  0E00               	movlw	0
  6520  002442  6E95               	movwf	3989,c	;volatile
  6521                           
  6522                           ;config.c: 30: TRISE = 0;
  6523  002444  0E00               	movlw	0
  6524  002446  6E96               	movwf	3990,c	;volatile
  6525                           
  6526                           ;config.c: 32: PORTA = 0;
  6527  002448  0E00               	movlw	0
  6528  00244A  6E80               	movwf	3968,c	;volatile
  6529                           
  6530                           ;config.c: 33: PORTB = 0;
  6531  00244C  0E00               	movlw	0
  6532  00244E  6E81               	movwf	3969,c	;volatile
  6533                           
  6534                           ;config.c: 34: PORTC = 0;
  6535  002450  0E00               	movlw	0
  6536  002452  6E82               	movwf	3970,c	;volatile
  6537                           
  6538                           ;config.c: 35: PORTD = 0;
  6539  002454  0E00               	movlw	0
  6540  002456  6E83               	movwf	3971,c	;volatile
  6541                           
  6542                           ;config.c: 36: PORTE = 0;
  6543  002458  0E00               	movlw	0
  6544  00245A  6E84               	movwf	3972,c	;volatile
  6545                           
  6546                           ;config.c: 38: TRISBbits.TRISB5 = 0;
  6547  00245C  9A93               	bcf	3987,5,c	;volatile
  6548                           
  6549                           ;config.c: 39: TRISBbits.TRISB4 = 0;
  6550  00245E  9893               	bcf	3987,4,c	;volatile
  6551                           
  6552                           ;config.c: 40: TRISAbits.TRISA4 = 1;
  6553  002460  8892               	bsf	3986,4,c	;volatile
  6554                           
  6555                           ;config.c: 43: IPEN = 0;
  6556  002462  9ED0               	bcf	4048,7,c	;volatile
  6557                           
  6558                           ;config.c: 44: INTCONbits.GIE = 0;
  6559  002464  9EF2               	bcf	intcon,7,c	;volatile
  6560                           
  6561                           ;config.c: 45: INTCONbits.PEIE = 1;
  6562  002466  8CF2               	bsf	intcon,6,c	;volatile
  6563                           
  6564                           ;config.c: 46: INTCONbits.INT0IE = 1;
  6565  002468  88F2               	bsf	intcon,4,c	;volatile
  6566                           
  6567                           ;config.c: 47: INTCONbits.TMR0IE = 1;
  6568  00246A  8AF2               	bsf	intcon,5,c	;volatile
  6569                           
  6570                           ;config.c: 49: INTCON2bits.INTEDG0 = 1;
  6571  00246C  8CF1               	bsf	intcon2,6,c	;volatile
  6572                           
  6573                           ;config.c: 50: INTCON2bits.INTEDG1 = 1;
  6574  00246E  8AF1               	bsf	intcon2,5,c	;volatile
  6575                           
  6576                           ;config.c: 51: INTCON2bits.INTEDG2 = 1;
  6577  002470  88F1               	bsf	intcon2,4,c	;volatile
  6578                           
  6579                           ;config.c: 53: INTCON3bits.INT1IP = 0;
  6580  002472  9CF0               	bcf	intcon3,6,c	;volatile
  6581                           
  6582                           ;config.c: 54: INTCON3bits.INT2IP = 0;
  6583  002474  9EF0               	bcf	intcon3,7,c	;volatile
  6584                           
  6585                           ;config.c: 55: INTCON3bits.INT1IE = 1;
  6586  002476  86F0               	bsf	intcon3,3,c	;volatile
  6587                           
  6588                           ;config.c: 56: INTCON3bits.INT2IE = 1;
  6589  002478  88F0               	bsf	intcon3,4,c	;volatile
  6590                           
  6591                           ;config.c: 58: PIE1bits.ADIE = 0;
  6592  00247A  9C9D               	bcf	3997,6,c	;volatile
  6593                           
  6594                           ;config.c: 59: PIR1bits.ADIF = 0;
  6595  00247C  9C9E               	bcf	3998,6,c	;volatile
  6596                           
  6597                           ;config.c: 64: T0CONbits.TMR0ON = 1;
  6598  00247E  8ED5               	bsf	4053,7,c	;volatile
  6599                           
  6600                           ;config.c: 65: T08BIT = 1;
  6601  002480  8CD5               	bsf	4053,6,c	;volatile
  6602                           
  6603                           ;config.c: 66: T0CONbits.T0CS = 0;
  6604  002482  9AD5               	bcf	4053,5,c	;volatile
  6605                           
  6606                           ;config.c: 68: T0CONbits.PSA = 0;
  6607  002484  96D5               	bcf	4053,3,c	;volatile
  6608                           
  6609                           ;config.c: 69: T0CONbits.T0PS = 100;
  6610  002486  50D5               	movf	4053,w,c	;volatile
  6611  002488  0BF8               	andlw	-8
  6612  00248A  0904               	iorlw	4
  6613  00248C  6ED5               	movwf	4053,c	;volatile
  6614                           
  6615                           ;config.c: 70: INTCONbits.TMR0IF = 0;
  6616  00248E  94F2               	bcf	intcon,2,c	;volatile
  6617                           
  6618                           ;config.c: 74: ADCON1bits.PCFG=0b1110;
  6619  002490  50C1               	movf	4033,w,c	;volatile
  6620  002492  0BF0               	andlw	-16
  6621  002494  090E               	iorlw	14
  6622  002496  6EC1               	movwf	4033,c	;volatile
  6623                           
  6624                           ;config.c: 75: TRISAbits.RA0=1;
  6625  002498  8092               	bsf	3986,0,c	;volatile
  6626                           
  6627                           ;config.c: 76: ADCON2bits.ADCS=0b110;
  6628  00249A  50C0               	movf	4032,w,c	;volatile
  6629  00249C  0BF8               	andlw	-8
  6630  00249E  0906               	iorlw	6
  6631  0024A0  6EC0               	movwf	4032,c	;volatile
  6632                           
  6633                           ;config.c: 77: ADCON1bits.VCFG1=0;
  6634  0024A2  9AC1               	bcf	4033,5,c	;volatile
  6635                           
  6636                           ;config.c: 78: ADCON1bits.VCFG0=0;
  6637  0024A4  98C1               	bcf	4033,4,c	;volatile
  6638                           
  6639                           ;config.c: 80: ADCON2bits.ADFM=1;
  6640  0024A6  8EC0               	bsf	4032,7,c	;volatile
  6641                           
  6642                           ;config.c: 81: ADCON1bits.PCFG=0b1011;
  6643  0024A8  50C1               	movf	4033,w,c	;volatile
  6644  0024AA  0BF0               	andlw	-16
  6645  0024AC  090B               	iorlw	11
  6646  0024AE  6EC1               	movwf	4033,c	;volatile
  6647                           
  6648                           ;config.c: 82: TRISAbits.RA0=1;
  6649  0024B0  8092               	bsf	3986,0,c	;volatile
  6650                           
  6651                           ;config.c: 83: TRISAbits.RA1=1;
  6652  0024B2  8292               	bsf	3986,1,c	;volatile
  6653                           
  6654                           ;config.c: 84: ADCON0bits.ADON=1;
  6655  0024B4  80C2               	bsf	4034,0,c	;volatile
  6656                           
  6657                           ;config.c: 86: PIE1bits.ADIE=1;
  6658  0024B6  8C9D               	bsf	3997,6,c	;volatile
  6659                           
  6660                           ;config.c: 87: PIR1bits.ADIF=0;
  6661  0024B8  9C9E               	bcf	3998,6,c	;volatile
  6662                           
  6663                           ;config.c: 89: ADCON2bits.ACQT=0b111;
  6664  0024BA  86C0               	bsf	4032,3,c	;volatile
  6665  0024BC  88C0               	bsf	4032,4,c	;volatile
  6666  0024BE  8AC0               	bsf	4032,5,c	;volatile
  6667                           
  6668                           ;config.c: 90: ADCON0bits.GO=1;
  6669  0024C0  82C2               	bsf	4034,1,c	;volatile
  6670  0024C2  0012               	return		;funcret
  6671  0024C4                     __end_of_configBoard:
  6672                           	opt stack 0
  6673                           tblptru	equ	0xFF8
  6674                           tblptrh	equ	0xFF7
  6675                           tblptrl	equ	0xFF6
  6676                           tablat	equ	0xFF5
  6677                           prodh	equ	0xFF4
  6678                           prodl	equ	0xFF3
  6679                           intcon	equ	0xFF2
  6680                           intcon2	equ	0xFF1
  6681                           intcon3	equ	0xFF0
  6682                           postinc0	equ	0xFEE
  6683                           wreg	equ	0xFE8
  6684                           indf2	equ	0xFDF
  6685                           postinc2	equ	0xFDE
  6686                           postdec2	equ	0xFDD
  6687                           fsr2h	equ	0xFDA
  6688                           fsr2l	equ	0xFD9
  6689                           status	equ	0xFD8
  6690                           
  6691 ;; *************** function ___lwtoft *****************
  6692 ;; Defined at:
  6693 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
  6694 ;; Parameters:    Size  Location     Type
  6695 ;;  c               2   26[COMRAM] unsigned int 
  6696 ;; Auto vars:     Size  Location     Type
  6697 ;;		None
  6698 ;; Return value:  Size  Location     Type
  6699 ;;                  3   26[COMRAM] float 
  6700 ;; Registers used:
  6701 ;;		wreg, status,2, status,0, cstack
  6702 ;; Tracked objects:
  6703 ;;		On entry : 0/0
  6704 ;;		On exit  : 0/0
  6705 ;;		Unchanged: 0/0
  6706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6707 ;;      Params:         3       0       0       0       0       0       0       0       0
  6708 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6709 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6710 ;;      Totals:         3       0       0       0       0       0       0       0       0
  6711 ;;Total ram usage:        3 bytes
  6712 ;; Hardware stack levels used:    1
  6713 ;; Hardware stack levels required when called:    2
  6714 ;; This function calls:
  6715 ;;		___ftpack
  6716 ;; This function is called by:
  6717 ;;		_main
  6718 ;; This function uses a non-reentrant model
  6719 ;;
  6720                           
  6721                           	psect	text27
  6722  002A7A                     __ptext27:
  6723                           	opt stack 0
  6724  002A7A                     ___lwtoft:
  6725                           	opt stack 28
  6726                           
  6727                           ;incstack = 0
  6728  002A7A  C01B  F013         	movff	___lwtoft@c,___ftpack@arg
  6729  002A7E  C01C  F014         	movff	___lwtoft@c+1,___ftpack@arg+1
  6730  002A82  6A15               	clrf	___ftpack@arg+2,c
  6731  002A84  0E8E               	movlw	142
  6732  002A86  6E16               	movwf	___ftpack@exp,c
  6733  002A88  0E00               	movlw	0
  6734  002A8A  6E17               	movwf	___ftpack@sign,c
  6735  002A8C  EC62  F012         	call	___ftpack	;wreg free
  6736  002A90  C013  F01B         	movff	?___ftpack,?___lwtoft
  6737  002A94  C014  F01C         	movff	?___ftpack+1,?___lwtoft+1
  6738  002A98  C015  F01D         	movff	?___ftpack+2,?___lwtoft+2
  6739  002A9C  0012               	return	
  6740  002A9E                     __end_of___lwtoft:
  6741                           	opt stack 0
  6742                           tblptru	equ	0xFF8
  6743                           tblptrh	equ	0xFF7
  6744                           tblptrl	equ	0xFF6
  6745                           tablat	equ	0xFF5
  6746                           prodh	equ	0xFF4
  6747                           prodl	equ	0xFF3
  6748                           intcon	equ	0xFF2
  6749                           intcon2	equ	0xFF1
  6750                           intcon3	equ	0xFF0
  6751                           postinc0	equ	0xFEE
  6752                           wreg	equ	0xFE8
  6753                           indf2	equ	0xFDF
  6754                           postinc2	equ	0xFDE
  6755                           postdec2	equ	0xFDD
  6756                           fsr2h	equ	0xFDA
  6757                           fsr2l	equ	0xFD9
  6758                           status	equ	0xFD8
  6759                           
  6760 ;; *************** function _ADC_Read *****************
  6761 ;; Defined at:
  6762 ;;		line 84 in file "main_ADC_b.c"
  6763 ;; Parameters:    Size  Location     Type
  6764 ;;  channel         2   27[BANK0 ] unsigned int 
  6765 ;; Auto vars:     Size  Location     Type
  6766 ;;		None
  6767 ;; Return value:  Size  Location     Type
  6768 ;;                  2   27[BANK0 ] unsigned int 
  6769 ;; Registers used:
  6770 ;;		wreg, status,2, status,0, cstack
  6771 ;; Tracked objects:
  6772 ;;		On entry : 0/0
  6773 ;;		On exit  : 0/0
  6774 ;;		Unchanged: 0/0
  6775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6776 ;;      Params:         0       2       0       0       0       0       0       0       0
  6777 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6778 ;;      Temps:          0       2       0       0       0       0       0       0       0
  6779 ;;      Totals:         0       4       0       0       0       0       0       0       0
  6780 ;;Total ram usage:        4 bytes
  6781 ;; Hardware stack levels used:    1
  6782 ;; Hardware stack levels required when called:    4
  6783 ;; This function calls:
  6784 ;;		_wait_in_ms
  6785 ;; This function is called by:
  6786 ;;		_main
  6787 ;; This function uses a non-reentrant model
  6788 ;;
  6789                           
  6790                           	psect	text28
  6791  001DAC                     __ptext28:
  6792                           	opt stack 0
  6793  001DAC                     _ADC_Read:
  6794                           	opt stack 26
  6795                           
  6796                           ;main_ADC_b.c: 92: if (channel == 0){
  6797                           
  6798                           ;incstack = 0
  6799  001DAC  0100               	movlb	0	; () banked
  6800  001DAE  517B               	movf	ADC_Read@channel& (0+255),w,b
  6801  001DB0  117C               	iorwf	(ADC_Read@channel+1)& (0+255),w,b
  6802  001DB2  A4D8               	btfss	status,2,c
  6803  001DB4  D004               	goto	l184
  6804                           
  6805                           ; BSR set to: 0
  6806                           ;main_ADC_b.c: 93: ADCON0bits.CHS = 0b0000;
  6807  001DB6  94C2               	bcf	4034,2,c	;volatile
  6808  001DB8  96C2               	bcf	4034,3,c	;volatile
  6809  001DBA  98C2               	bcf	4034,4,c	;volatile
  6810  001DBC  9AC2               	bcf	4034,5,c	;volatile
  6811  001DBE                     l184:
  6812                           
  6813                           ; BSR set to: 0
  6814                           ;main_ADC_b.c: 94: }
  6815                           ;main_ADC_b.c: 95: if (channel == 1){
  6816                           
  6817                           ; BSR set to: 0
  6818  001DBE  057B               	decf	ADC_Read@channel& (0+255),w,b
  6819  001DC0  117C               	iorwf	(ADC_Read@channel+1)& (0+255),w,b
  6820  001DC2  A4D8               	btfss	status,2,c
  6821  001DC4  D004               	goto	l185
  6822                           
  6823                           ; BSR set to: 0
  6824                           ;main_ADC_b.c: 96: ADCON0bits.CHS = 0b0001;
  6825  001DC6  50C2               	movf	4034,w,c	;volatile
  6826  001DC8  0BC3               	andlw	-61
  6827  001DCA  0904               	iorlw	4
  6828  001DCC  6EC2               	movwf	4034,c	;volatile
  6829  001DCE                     l185:
  6830                           
  6831                           ; BSR set to: 0
  6832                           ;main_ADC_b.c: 97: }
  6833                           ;main_ADC_b.c: 98: if (channel == 2){
  6834                           
  6835                           ; BSR set to: 0
  6836  001DCE  0E02               	movlw	2
  6837  001DD0  197B               	xorwf	ADC_Read@channel& (0+255),w,b
  6838  001DD2  117C               	iorwf	(ADC_Read@channel+1)& (0+255),w,b
  6839  001DD4  A4D8               	btfss	status,2,c
  6840  001DD6  D004               	goto	l186
  6841                           
  6842                           ; BSR set to: 0
  6843                           ;main_ADC_b.c: 99: ADCON0bits.CHS = 0010;
  6844  001DD8  50C2               	movf	4034,w,c	;volatile
  6845  001DDA  0BC3               	andlw	-61
  6846  001DDC  0920               	iorlw	32
  6847  001DDE  6EC2               	movwf	4034,c	;volatile
  6848  001DE0                     l186:
  6849                           
  6850                           ; BSR set to: 0
  6851                           ;main_ADC_b.c: 100: }
  6852                           ;main_ADC_b.c: 101: if (channel == 3){
  6853                           
  6854                           ; BSR set to: 0
  6855  001DE0  0E03               	movlw	3
  6856  001DE2  197B               	xorwf	ADC_Read@channel& (0+255),w,b
  6857  001DE4  117C               	iorwf	(ADC_Read@channel+1)& (0+255),w,b
  6858  001DE6  A4D8               	btfss	status,2,c
  6859  001DE8  D004               	goto	l187
  6860                           
  6861                           ; BSR set to: 0
  6862                           ;main_ADC_b.c: 102: ADCON0bits.CHS = 0011;
  6863  001DEA  50C2               	movf	4034,w,c	;volatile
  6864  001DEC  0BC3               	andlw	-61
  6865  001DEE  0924               	iorlw	36
  6866  001DF0  6EC2               	movwf	4034,c	;volatile
  6867  001DF2                     l187:
  6868                           
  6869                           ; BSR set to: 0
  6870                           ;main_ADC_b.c: 103: }
  6871                           ;main_ADC_b.c: 104: if (channel == 4){
  6872                           
  6873                           ; BSR set to: 0
  6874  001DF2  0E04               	movlw	4
  6875  001DF4  197B               	xorwf	ADC_Read@channel& (0+255),w,b
  6876  001DF6  117C               	iorwf	(ADC_Read@channel+1)& (0+255),w,b
  6877  001DF8  A4D8               	btfss	status,2,c
  6878  001DFA  D004               	goto	l188
  6879                           
  6880                           ; BSR set to: 0
  6881                           ;main_ADC_b.c: 105: ADCON0bits.CHS = 0100;
  6882  001DFC  94C2               	bcf	4034,2,c	;volatile
  6883  001DFE  96C2               	bcf	4034,3,c	;volatile
  6884  001E00  98C2               	bcf	4034,4,c	;volatile
  6885  001E02  9AC2               	bcf	4034,5,c	;volatile
  6886  001E04                     l188:
  6887                           
  6888                           ; BSR set to: 0
  6889                           ;main_ADC_b.c: 106: }
  6890                           ;main_ADC_b.c: 107: if (channel == 5){
  6891                           
  6892                           ; BSR set to: 0
  6893  001E04  0E05               	movlw	5
  6894  001E06  197B               	xorwf	ADC_Read@channel& (0+255),w,b
  6895  001E08  117C               	iorwf	(ADC_Read@channel+1)& (0+255),w,b
  6896  001E0A  A4D8               	btfss	status,2,c
  6897  001E0C  D004               	goto	l189
  6898                           
  6899                           ; BSR set to: 0
  6900                           ;main_ADC_b.c: 108: ADCON0bits.CHS = 0101;
  6901  001E0E  50C2               	movf	4034,w,c	;volatile
  6902  001E10  0BC3               	andlw	-61
  6903  001E12  0904               	iorlw	4
  6904  001E14  6EC2               	movwf	4034,c	;volatile
  6905  001E16                     l189:
  6906                           
  6907                           ; BSR set to: 0
  6908                           ;main_ADC_b.c: 109: }
  6909                           ;main_ADC_b.c: 110: if (channel == 6){
  6910                           
  6911                           ; BSR set to: 0
  6912  001E16  0E06               	movlw	6
  6913  001E18  197B               	xorwf	ADC_Read@channel& (0+255),w,b
  6914  001E1A  117C               	iorwf	(ADC_Read@channel+1)& (0+255),w,b
  6915  001E1C  A4D8               	btfss	status,2,c
  6916  001E1E  D004               	goto	l190
  6917                           
  6918                           ; BSR set to: 0
  6919                           ;main_ADC_b.c: 111: ADCON0bits.CHS = 0110;
  6920  001E20  50C2               	movf	4034,w,c	;volatile
  6921  001E22  0BC3               	andlw	-61
  6922  001E24  0920               	iorlw	32
  6923  001E26  6EC2               	movwf	4034,c	;volatile
  6924  001E28                     l190:
  6925                           
  6926                           ; BSR set to: 0
  6927                           ;main_ADC_b.c: 112: }
  6928                           ;main_ADC_b.c: 113: if (channel == 7){
  6929                           
  6930                           ; BSR set to: 0
  6931  001E28  0E07               	movlw	7
  6932  001E2A  197B               	xorwf	ADC_Read@channel& (0+255),w,b
  6933  001E2C  117C               	iorwf	(ADC_Read@channel+1)& (0+255),w,b
  6934  001E2E  A4D8               	btfss	status,2,c
  6935  001E30  D004               	goto	l191
  6936                           
  6937                           ; BSR set to: 0
  6938                           ;main_ADC_b.c: 114: ADCON0bits.CHS = 0111;
  6939  001E32  50C2               	movf	4034,w,c	;volatile
  6940  001E34  0BC3               	andlw	-61
  6941  001E36  0924               	iorlw	36
  6942  001E38  6EC2               	movwf	4034,c	;volatile
  6943  001E3A                     l191:
  6944                           
  6945                           ; BSR set to: 0
  6946                           ;main_ADC_b.c: 115: }
  6947                           ;main_ADC_b.c: 116: if (channel == 8){
  6948                           
  6949                           ; BSR set to: 0
  6950  001E3A  0E08               	movlw	8
  6951  001E3C  197B               	xorwf	ADC_Read@channel& (0+255),w,b
  6952  001E3E  117C               	iorwf	(ADC_Read@channel+1)& (0+255),w,b
  6953  001E40  A4D8               	btfss	status,2,c
  6954  001E42  D004               	goto	l192
  6955                           
  6956                           ; BSR set to: 0
  6957                           ;main_ADC_b.c: 117: ADCON0bits.CHS = 1000;
  6958  001E44  50C2               	movf	4034,w,c	;volatile
  6959  001E46  0BC3               	andlw	-61
  6960  001E48  0920               	iorlw	32
  6961  001E4A  6EC2               	movwf	4034,c	;volatile
  6962  001E4C                     l192:
  6963                           
  6964                           ; BSR set to: 0
  6965                           ;main_ADC_b.c: 118: }
  6966                           ;main_ADC_b.c: 119: if (channel == 9){
  6967                           
  6968                           ; BSR set to: 0
  6969  001E4C  0E09               	movlw	9
  6970  001E4E  197B               	xorwf	ADC_Read@channel& (0+255),w,b
  6971  001E50  117C               	iorwf	(ADC_Read@channel+1)& (0+255),w,b
  6972  001E52  A4D8               	btfss	status,2,c
  6973  001E54  D004               	goto	l193
  6974                           
  6975                           ; BSR set to: 0
  6976                           ;main_ADC_b.c: 120: ADCON0bits.CHS = 1001;
  6977  001E56  50C2               	movf	4034,w,c	;volatile
  6978  001E58  0BC3               	andlw	-61
  6979  001E5A  0924               	iorlw	36
  6980  001E5C  6EC2               	movwf	4034,c	;volatile
  6981  001E5E                     l193:
  6982                           
  6983                           ; BSR set to: 0
  6984                           ;main_ADC_b.c: 121: }
  6985                           ;main_ADC_b.c: 122: if (channel == 10){
  6986                           
  6987                           ; BSR set to: 0
  6988  001E5E  0E0A               	movlw	10
  6989  001E60  197B               	xorwf	ADC_Read@channel& (0+255),w,b
  6990  001E62  117C               	iorwf	(ADC_Read@channel+1)& (0+255),w,b
  6991  001E64  A4D8               	btfss	status,2,c
  6992  001E66  D004               	goto	l194
  6993                           
  6994                           ; BSR set to: 0
  6995                           ;main_ADC_b.c: 123: ADCON0bits.CHS = 1010;
  6996  001E68  50C2               	movf	4034,w,c	;volatile
  6997  001E6A  0BC3               	andlw	-61
  6998  001E6C  0908               	iorlw	8
  6999  001E6E  6EC2               	movwf	4034,c	;volatile
  7000  001E70                     l194:
  7001                           
  7002                           ; BSR set to: 0
  7003                           ;main_ADC_b.c: 124: }
  7004                           ;main_ADC_b.c: 125: if (channel == 11){
  7005                           
  7006                           ; BSR set to: 0
  7007  001E70  0E0B               	movlw	11
  7008  001E72  197B               	xorwf	ADC_Read@channel& (0+255),w,b
  7009  001E74  117C               	iorwf	(ADC_Read@channel+1)& (0+255),w,b
  7010  001E76  A4D8               	btfss	status,2,c
  7011  001E78  D004               	goto	l195
  7012                           
  7013                           ; BSR set to: 0
  7014                           ;main_ADC_b.c: 126: ADCON0bits.CHS = 1011;
  7015  001E7A  50C2               	movf	4034,w,c	;volatile
  7016  001E7C  0BC3               	andlw	-61
  7017  001E7E  090C               	iorlw	12
  7018  001E80  6EC2               	movwf	4034,c	;volatile
  7019  001E82                     l195:
  7020                           
  7021                           ; BSR set to: 0
  7022                           ;main_ADC_b.c: 127: }
  7023                           ;main_ADC_b.c: 128: if (channel == 12){
  7024                           
  7025                           ; BSR set to: 0
  7026  001E82  0E0C               	movlw	12
  7027  001E84  197B               	xorwf	ADC_Read@channel& (0+255),w,b
  7028  001E86  117C               	iorwf	(ADC_Read@channel+1)& (0+255),w,b
  7029  001E88  A4D8               	btfss	status,2,c
  7030  001E8A  D004               	goto	l196
  7031                           
  7032                           ; BSR set to: 0
  7033                           ;main_ADC_b.c: 129: ADCON0bits.CHS = 1100;
  7034  001E8C  50C2               	movf	4034,w,c	;volatile
  7035  001E8E  0BC3               	andlw	-61
  7036  001E90  0930               	iorlw	48
  7037  001E92  6EC2               	movwf	4034,c	;volatile
  7038  001E94                     l196:
  7039                           
  7040                           ; BSR set to: 0
  7041                           ;main_ADC_b.c: 130: }
  7042                           ;main_ADC_b.c: 137: wait_in_ms(2);
  7043                           
  7044                           ; BSR set to: 0
  7045  001E94  0E00               	movlw	0
  7046  001E96  6F72               	movwf	(wait_in_ms@time_in_ms+1)& (0+255),b
  7047  001E98  0E02               	movlw	2
  7048  001E9A  6F71               	movwf	wait_in_ms@time_in_ms& (0+255),b
  7049  001E9C  EC3B  F011         	call	_wait_in_ms	;wreg free
  7050                           
  7051                           ;main_ADC_b.c: 138: ADCON0bits.GO_nDONE = 1;
  7052  001EA0  82C2               	bsf	4034,1,c	;volatile
  7053  001EA2  B2C2               	btfsc	4034,1,c	;volatile
  7054  001EA4  D7FE               	goto	l198
  7055                           
  7056                           ;main_ADC_b.c: 140: return ((ADRESH<<8)+ADRESL);
  7057  001EA6  50C4               	movf	4036,w,c	;volatile
  7058  001EA8  0100               	movlb	0	; () banked
  7059  001EAA  6F7E               	movwf	(??_ADC_Read+1)& (0+255),b
  7060  001EAC  6B7D               	clrf	??_ADC_Read& (0+255),b
  7061  001EAE  50C3               	movf	4035,w,c	;volatile
  7062  001EB0  257D               	addwf	??_ADC_Read& (0+255),w,b
  7063  001EB2  6F7B               	movwf	?_ADC_Read& (0+255),b
  7064  001EB4  0E00               	movlw	0
  7065  001EB6  217E               	addwfc	(??_ADC_Read+1)& (0+255),w,b
  7066  001EB8  6F7C               	movwf	(?_ADC_Read+1)& (0+255),b
  7067  001EBA  0012               	return	
  7068  001EBC                     __end_of_ADC_Read:
  7069                           	opt stack 0
  7070                           tblptru	equ	0xFF8
  7071                           tblptrh	equ	0xFF7
  7072                           tblptrl	equ	0xFF6
  7073                           tablat	equ	0xFF5
  7074                           prodh	equ	0xFF4
  7075                           prodl	equ	0xFF3
  7076                           intcon	equ	0xFF2
  7077                           intcon2	equ	0xFF1
  7078                           intcon3	equ	0xFF0
  7079                           postinc0	equ	0xFEE
  7080                           wreg	equ	0xFE8
  7081                           indf2	equ	0xFDF
  7082                           postinc2	equ	0xFDE
  7083                           postdec2	equ	0xFDD
  7084                           fsr2h	equ	0xFDA
  7085                           fsr2l	equ	0xFD9
  7086                           status	equ	0xFD8
  7087                           
  7088 ;; *************** function _wait_in_ms *****************
  7089 ;; Defined at:
  7090 ;;		line 93 in file "config.c"
  7091 ;; Parameters:    Size  Location     Type
  7092 ;;  time_in_ms      2   17[BANK0 ] int 
  7093 ;; Auto vars:     Size  Location     Type
  7094 ;;  count_ms        2   25[BANK0 ] unsigned int 
  7095 ;;  count           2   23[BANK0 ] unsigned int 
  7096 ;;  flag            2   21[BANK0 ] unsigned int 
  7097 ;; Return value:  Size  Location     Type
  7098 ;;                  1    wreg      void 
  7099 ;; Registers used:
  7100 ;;		wreg, status,2, status,0, cstack
  7101 ;; Tracked objects:
  7102 ;;		On entry : 0/0
  7103 ;;		On exit  : 0/0
  7104 ;;		Unchanged: 0/0
  7105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7106 ;;      Params:         0       2       0       0       0       0       0       0       0
  7107 ;;      Locals:         0       6       0       0       0       0       0       0       0
  7108 ;;      Temps:          0       2       0       0       0       0       0       0       0
  7109 ;;      Totals:         0      10       0       0       0       0       0       0       0
  7110 ;;Total ram usage:       10 bytes
  7111 ;; Hardware stack levels used:    1
  7112 ;; Hardware stack levels required when called:    3
  7113 ;; This function calls:
  7114 ;;		___awtoft
  7115 ;;		___ftdiv
  7116 ;;		___fttol
  7117 ;; This function is called by:
  7118 ;;		_lcd_iniciar
  7119 ;;		_lcd_pulso
  7120 ;;		_lcd_limpiar
  7121 ;;		_lcd_origen
  7122 ;;		_ADC_Read
  7123 ;;		_main
  7124 ;;		_Lcd_Cmd
  7125 ;; This function uses a non-reentrant model
  7126 ;;
  7127                           
  7128                           	psect	text29
  7129  002276                     __ptext29:
  7130                           	opt stack 0
  7131  002276                     _wait_in_ms:
  7132                           	opt stack 27
  7133                           
  7134                           ;config.c: 94: unsigned int count = 0;
  7135                           
  7136                           ; BSR set to: 0
  7137                           ;incstack = 0
  7138  002276  0E00               	movlw	0
  7139  002278  0100               	movlb	0	; () banked
  7140  00227A  6F78               	movwf	(wait_in_ms@count+1)& (0+255),b
  7141  00227C  0E00               	movlw	0
  7142  00227E  6F77               	movwf	wait_in_ms@count& (0+255),b
  7143                           
  7144                           ;config.c: 95: unsigned int count_ms = 0;
  7145  002280  0E00               	movlw	0
  7146  002282  6F7A               	movwf	(wait_in_ms@count_ms+1)& (0+255),b
  7147  002284  0E00               	movlw	0
  7148  002286  6F79               	movwf	wait_in_ms@count_ms& (0+255),b
  7149                           
  7150                           ;config.c: 96: unsigned int flag = 0;
  7151  002288  0E00               	movlw	0
  7152  00228A  6F76               	movwf	(wait_in_ms@flag+1)& (0+255),b
  7153  00228C  0E00               	movlw	0
  7154  00228E  6F75               	movwf	wait_in_ms@flag& (0+255),b
  7155                           
  7156                           ;config.c: 98: TMR0L = 131;
  7157  002290  0E83               	movlw	131
  7158  002292  6ED6               	movwf	4054,c	;volatile
  7159                           
  7160                           ; BSR set to: 0
  7161                           ;config.c: 101: count_ms = ((12000000)*0.001)/((256-TMR0L)*32);
  7162  002294  50D6               	movf	4054,w,c	;volatile
  7163  002296  6F73               	movwf	??_wait_in_ms& (0+255),b
  7164  002298  6B74               	clrf	(??_wait_in_ms+1)& (0+255),b
  7165  00229A  1F73               	comf	??_wait_in_ms& (0+255),f,b
  7166  00229C  1F74               	comf	(??_wait_in_ms+1)& (0+255),f,b
  7167  00229E  4B73               	infsnz	??_wait_in_ms& (0+255),f,b
  7168  0022A0  2B74               	incf	(??_wait_in_ms+1)& (0+255),f,b
  7169  0022A2  0E05               	movlw	5
  7170  0022A4                     u3775:
  7171  0022A4  90D8               	bcf	status,0,c
  7172  0022A6  3773               	rlcf	??_wait_in_ms& (0+255),f,b
  7173  0022A8  3774               	rlcf	(??_wait_in_ms+1)& (0+255),f,b
  7174  0022AA  2EE8               	decfsz	wreg,f,c
  7175  0022AC  D7FB               	goto	u3775
  7176  0022AE  0E00               	movlw	0
  7177  0022B0  2573               	addwf	??_wait_in_ms& (0+255),w,b
  7178  0022B2  6E1B               	movwf	___awtoft@c,c
  7179  0022B4  0E20               	movlw	32
  7180  0022B6  2174               	addwfc	(??_wait_in_ms+1)& (0+255),w,b
  7181  0022B8  6E1C               	movwf	___awtoft@c+1,c
  7182  0022BA  ECE4  F014         	call	___awtoft	;wreg free
  7183  0022BE  C01B  F039         	movff	?___awtoft,___ftdiv@f2
  7184  0022C2  C01C  F03A         	movff	?___awtoft+1,___ftdiv@f2+1
  7185  0022C6  C01D  F03B         	movff	?___awtoft+2,___ftdiv@f2+2
  7186  0022CA  0E80               	movlw	128
  7187  0022CC  6E36               	movwf	___ftdiv@f1,c
  7188  0022CE  0E3B               	movlw	59
  7189  0022D0  6E37               	movwf	___ftdiv@f1+1,c
  7190  0022D2  0E46               	movlw	70
  7191  0022D4  6E38               	movwf	___ftdiv@f1+2,c
  7192  0022D6  EC54  F010         	call	___ftdiv	;wreg free
  7193  0022DA  C036  F03F         	movff	?___ftdiv,___fttol@f1
  7194  0022DE  C037  F040         	movff	?___ftdiv+1,___fttol@f1+1
  7195  0022E2  C038  F041         	movff	?___ftdiv+2,___fttol@f1+2
  7196  0022E6  EC5E  F00F         	call	___fttol	;wreg free
  7197  0022EA  C03F  F079         	movff	?___fttol,wait_in_ms@count_ms
  7198  0022EE  C040  F07A         	movff	?___fttol+1,wait_in_ms@count_ms+1
  7199                           
  7200                           ;config.c: 103: TMR0ON = 1;
  7201  0022F2  8ED5               	bsf	4053,7,c	;volatile
  7202                           
  7203                           ;config.c: 105: while (count < count_ms){
  7204  0022F4  D020               	goto	l63
  7205  0022F6                     l59:
  7206                           
  7207                           ; BSR set to: 0
  7208                           ;config.c: 106: if(TMR0IF == 1){
  7209  0022F6  A4F2               	btfss	intcon,2,c	;volatile
  7210  0022F8  D01E               	goto	l63
  7211                           
  7212                           ; BSR set to: 0
  7213                           ;config.c: 107: TMR0IF = 0;
  7214  0022FA  94F2               	bcf	intcon,2,c	;volatile
  7215                           
  7216                           ; BSR set to: 0
  7217                           ;config.c: 108: TMR0L = 131;
  7218  0022FC  0E83               	movlw	131
  7219  0022FE  6ED6               	movwf	4054,c	;volatile
  7220                           
  7221                           ; BSR set to: 0
  7222                           ;config.c: 109: count ++;
  7223  002300  4B77               	infsnz	wait_in_ms@count& (0+255),f,b
  7224  002302  2B78               	incf	(wait_in_ms@count+1)& (0+255),f,b
  7225                           
  7226                           ; BSR set to: 0
  7227                           ;config.c: 110: if (count == count_ms){
  7228  002304  5179               	movf	wait_in_ms@count_ms& (0+255),w,b
  7229  002306  1977               	xorwf	wait_in_ms@count& (0+255),w,b
  7230  002308  E116               	bnz	l3570
  7231  00230A  517A               	movf	(wait_in_ms@count_ms+1)& (0+255),w,b
  7232  00230C  1978               	xorwf	(wait_in_ms@count+1)& (0+255),w,b
  7233  00230E  A4D8               	btfss	status,2,c
  7234  002310  D012               	goto	l63
  7235                           
  7236                           ; BSR set to: 0
  7237                           ;config.c: 111: flag++;
  7238  002312  4B75               	infsnz	wait_in_ms@flag& (0+255),f,b
  7239  002314  2B76               	incf	(wait_in_ms@flag+1)& (0+255),f,b
  7240                           
  7241                           ; BSR set to: 0
  7242                           ;config.c: 112: if (flag != time_in_ms){
  7243  002316  5175               	movf	wait_in_ms@flag& (0+255),w,b
  7244  002318  1971               	xorwf	wait_in_ms@time_in_ms& (0+255),w,b
  7245  00231A  E104               	bnz	u3800
  7246  00231C  5176               	movf	(wait_in_ms@flag+1)& (0+255),w,b
  7247  00231E  1972               	xorwf	(wait_in_ms@time_in_ms+1)& (0+255),w,b
  7248  002320  B4D8               	btfsc	status,2,c
  7249  002322  D005               	goto	l62
  7250  002324                     u3800:
  7251                           
  7252                           ; BSR set to: 0
  7253                           ;config.c: 113: count = 0;
  7254  002324  0E00               	movlw	0
  7255  002326  6F78               	movwf	(wait_in_ms@count+1)& (0+255),b
  7256  002328  0E00               	movlw	0
  7257  00232A  6F77               	movwf	wait_in_ms@count& (0+255),b
  7258                           
  7259                           ;config.c: 114: }
  7260  00232C  D004               	goto	l63
  7261  00232E                     l62:
  7262                           
  7263                           ; BSR set to: 0
  7264                           ;config.c: 115: else{
  7265                           ;config.c: 116: count = count_ms;
  7266  00232E  C079  F077         	movff	wait_in_ms@count_ms,wait_in_ms@count
  7267  002332  C07A  F078         	movff	wait_in_ms@count_ms+1,wait_in_ms@count+1
  7268  002336                     l63:
  7269  002336                     l3570:
  7270  002336  0100               	movlb	0	; () banked
  7271  002338  5179               	movf	wait_in_ms@count_ms& (0+255),w,b
  7272  00233A  5D77               	subwf	wait_in_ms@count& (0+255),w,b
  7273  00233C  517A               	movf	(wait_in_ms@count_ms+1)& (0+255),w,b
  7274  00233E  5978               	subwfb	(wait_in_ms@count+1)& (0+255),w,b
  7275  002340  B0D8               	btfsc	status,0,c
  7276  002342  0012               	return	
  7277  002344  D7D8               	goto	l59
  7278  002346                     __end_of_wait_in_ms:
  7279                           	opt stack 0
  7280                           tblptru	equ	0xFF8
  7281                           tblptrh	equ	0xFF7
  7282                           tblptrl	equ	0xFF6
  7283                           tablat	equ	0xFF5
  7284                           prodh	equ	0xFF4
  7285                           prodl	equ	0xFF3
  7286                           intcon	equ	0xFF2
  7287                           intcon2	equ	0xFF1
  7288                           intcon3	equ	0xFF0
  7289                           postinc0	equ	0xFEE
  7290                           wreg	equ	0xFE8
  7291                           indf2	equ	0xFDF
  7292                           postinc2	equ	0xFDE
  7293                           postdec2	equ	0xFDD
  7294                           fsr2h	equ	0xFDA
  7295                           fsr2l	equ	0xFD9
  7296                           status	equ	0xFD8
  7297                           
  7298 ;; *************** function ___fttol *****************
  7299 ;; Defined at:
  7300 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  7301 ;; Parameters:    Size  Location     Type
  7302 ;;  f1              3   62[COMRAM] float 
  7303 ;; Auto vars:     Size  Location     Type
  7304 ;;  lval            4   12[BANK0 ] unsigned long 
  7305 ;;  exp1            1   16[BANK0 ] unsigned char 
  7306 ;;  sign1           1   11[BANK0 ] unsigned char 
  7307 ;; Return value:  Size  Location     Type
  7308 ;;                  4   62[COMRAM] long 
  7309 ;; Registers used:
  7310 ;;		wreg, status,2, status,0
  7311 ;; Tracked objects:
  7312 ;;		On entry : 0/0
  7313 ;;		On exit  : 0/0
  7314 ;;		Unchanged: 0/0
  7315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7316 ;;      Params:         4       0       0       0       0       0       0       0       0
  7317 ;;      Locals:         0       6       0       0       0       0       0       0       0
  7318 ;;      Temps:          0       5       0       0       0       0       0       0       0
  7319 ;;      Totals:         4      11       0       0       0       0       0       0       0
  7320 ;;Total ram usage:       15 bytes
  7321 ;; Hardware stack levels used:    1
  7322 ;; Hardware stack levels required when called:    1
  7323 ;; This function calls:
  7324 ;;		Nothing
  7325 ;; This function is called by:
  7326 ;;		_wait_in_ms
  7327 ;;		_sprintf
  7328 ;; This function uses a non-reentrant model
  7329 ;;
  7330                           
  7331                           	psect	text30
  7332  001EBC                     __ptext30:
  7333                           	opt stack 0
  7334  001EBC                     ___fttol:
  7335                           	opt stack 28
  7336                           
  7337                           ; BSR set to: 0
  7338                           ;incstack = 0
  7339  001EBC  C041  F066         	movff	___fttol@f1+2,??___fttol
  7340  001EC0  0100               	movlb	0	; () banked
  7341  001EC2  6B67               	clrf	(??___fttol+1)& (0+255),b
  7342  001EC4  6B68               	clrf	(??___fttol+2)& (0+255),b
  7343  001EC6  3440               	rlcf	___fttol@f1+1,w,c
  7344  001EC8  3766               	rlcf	??___fttol& (0+255),f,b
  7345  001ECA  E301               	bnc	u2001
  7346  001ECC  8167               	bsf	(??___fttol+1)& (0+255),0,b
  7347  001ECE                     u2001:
  7348  001ECE  5166               	movf	??___fttol& (0+255),w,b
  7349  001ED0  6F70               	movwf	___fttol@exp1& (0+255),b
  7350  001ED2  5170               	movf	___fttol@exp1& (0+255),w,b
  7351  001ED4  A4D8               	btfss	status,2,c
  7352  001ED6  D009               	goto	l688
  7353                           
  7354                           ; BSR set to: 0
  7355  001ED8  0E00               	movlw	0
  7356  001EDA  6E3F               	movwf	?___fttol,c
  7357  001EDC  0E00               	movlw	0
  7358  001EDE  6E40               	movwf	?___fttol+1,c
  7359  001EE0  0E00               	movlw	0
  7360  001EE2  6E41               	movwf	?___fttol+2,c
  7361  001EE4  0E00               	movlw	0
  7362  001EE6  6E42               	movwf	?___fttol+3,c
  7363                           
  7364                           ; BSR set to: 0
  7365  001EE8  0012               	return	
  7366  001EEA                     l688:
  7367                           
  7368                           ; BSR set to: 0
  7369                           
  7370                           ; BSR set to: 0
  7371  001EEA  0E17               	movlw	23
  7372  001EEC  6F66               	movwf	??___fttol& (0+255),b
  7373  001EEE  C03F  F067         	movff	___fttol@f1,??___fttol+1
  7374  001EF2  C040  F068         	movff	___fttol@f1+1,??___fttol+2
  7375  001EF6  C041  F069         	movff	___fttol@f1+2,??___fttol+3
  7376  001EFA  2966               	incf	??___fttol& (0+255),w,b
  7377  001EFC  6F6A               	movwf	(??___fttol+4)& (0+255),b
  7378  001EFE  D004               	goto	u2020
  7379  001F00                     u2025:
  7380  001F00  90D8               	bcf	status,0,c
  7381  001F02  3369               	rrcf	(??___fttol+3)& (0+255),f,b
  7382  001F04  3368               	rrcf	(??___fttol+2)& (0+255),f,b
  7383  001F06  3367               	rrcf	(??___fttol+1)& (0+255),f,b
  7384  001F08                     u2020:
  7385  001F08  2F6A               	decfsz	(??___fttol+4)& (0+255),f,b
  7386  001F0A  D7FA               	goto	u2025
  7387  001F0C  0100               	movlb	0	; () banked
  7388  001F0E  5167               	movf	(??___fttol+1)& (0+255),w,b
  7389  001F10  6F6B               	movwf	___fttol@sign1& (0+255),b
  7390                           
  7391                           ; BSR set to: 0
  7392  001F12  8E40               	bsf	___fttol@f1+1,7,c
  7393                           
  7394                           ; BSR set to: 0
  7395  001F14  0EFF               	movlw	255
  7396  001F16  163F               	andwf	___fttol@f1,f,c
  7397  001F18  0EFF               	movlw	255
  7398  001F1A  1640               	andwf	___fttol@f1+1,f,c
  7399  001F1C  0E00               	movlw	0
  7400  001F1E  1641               	andwf	___fttol@f1+2,f,c
  7401                           
  7402                           ; BSR set to: 0
  7403  001F20  503F               	movf	___fttol@f1,w,c
  7404  001F22  6F6C               	movwf	___fttol@lval& (0+255),b
  7405  001F24  5040               	movf	___fttol@f1+1,w,c
  7406  001F26  6F6D               	movwf	(___fttol@lval+1)& (0+255),b
  7407  001F28  5041               	movf	___fttol@f1+2,w,c
  7408  001F2A  6F6E               	movwf	(___fttol@lval+2)& (0+255),b
  7409  001F2C  6B6F               	clrf	(___fttol@lval+3)& (0+255),b
  7410                           
  7411                           ; BSR set to: 0
  7412  001F2E  0E8E               	movlw	142
  7413  001F30  5F70               	subwf	___fttol@exp1& (0+255),f,b
  7414                           
  7415                           ; BSR set to: 0
  7416  001F32  AF70               	btfss	___fttol@exp1& (0+255),7,b
  7417  001F34  D016               	goto	l690
  7418                           
  7419                           ; BSR set to: 0
  7420  001F36  5170               	movf	___fttol@exp1& (0+255),w,b
  7421  001F38  0A80               	xorlw	128
  7422  001F3A  0F8F               	addlw	143
  7423  001F3C  B0D8               	btfsc	status,0,c
  7424  001F3E  D009               	goto	l691
  7425                           
  7426                           ; BSR set to: 0
  7427  001F40  0E00               	movlw	0
  7428  001F42  6E3F               	movwf	?___fttol,c
  7429  001F44  0E00               	movlw	0
  7430  001F46  6E40               	movwf	?___fttol+1,c
  7431  001F48  0E00               	movlw	0
  7432  001F4A  6E41               	movwf	?___fttol+2,c
  7433  001F4C  0E00               	movlw	0
  7434  001F4E  6E42               	movwf	?___fttol+3,c
  7435                           
  7436                           ; BSR set to: 0
  7437  001F50  0012               	return	
  7438  001F52                     l691:
  7439                           
  7440                           ; BSR set to: 0
  7441                           
  7442                           ; BSR set to: 0
  7443                           
  7444                           ; BSR set to: 0
  7445  001F52  90D8               	bcf	status,0,c
  7446  001F54  336F               	rrcf	(___fttol@lval+3)& (0+255),f,b
  7447  001F56  336E               	rrcf	(___fttol@lval+2)& (0+255),f,b
  7448  001F58  336D               	rrcf	(___fttol@lval+1)& (0+255),f,b
  7449  001F5A  336C               	rrcf	___fttol@lval& (0+255),f,b
  7450                           
  7451                           ; BSR set to: 0
  7452  001F5C  3F70               	incfsz	___fttol@exp1& (0+255),f,b
  7453  001F5E  D7F9               	goto	l691
  7454                           
  7455                           ; BSR set to: 0
  7456  001F60  D015               	goto	u2060
  7457  001F62                     l690:
  7458                           
  7459                           ; BSR set to: 0
  7460                           
  7461                           ; BSR set to: 0
  7462  001F62  0E17               	movlw	23
  7463  001F64  6570               	cpfsgt	___fttol@exp1& (0+255),b
  7464  001F66  D00F               	goto	l696
  7465                           
  7466                           ; BSR set to: 0
  7467  001F68  0E00               	movlw	0
  7468  001F6A  6E3F               	movwf	?___fttol,c
  7469  001F6C  0E00               	movlw	0
  7470  001F6E  6E40               	movwf	?___fttol+1,c
  7471  001F70  0E00               	movlw	0
  7472  001F72  6E41               	movwf	?___fttol+2,c
  7473  001F74  0E00               	movlw	0
  7474  001F76  6E42               	movwf	?___fttol+3,c
  7475                           
  7476                           ; BSR set to: 0
  7477  001F78  0012               	return	
  7478  001F7A                     
  7479                           ; BSR set to: 0
  7480                           
  7481                           ; BSR set to: 0
  7482  001F7A  90D8               	bcf	status,0,c
  7483  001F7C  376C               	rlcf	___fttol@lval& (0+255),f,b
  7484  001F7E  376D               	rlcf	(___fttol@lval+1)& (0+255),f,b
  7485  001F80  376E               	rlcf	(___fttol@lval+2)& (0+255),f,b
  7486  001F82  376F               	rlcf	(___fttol@lval+3)& (0+255),f,b
  7487  001F84  0770               	decf	___fttol@exp1& (0+255),f,b
  7488  001F86                     l696:
  7489                           
  7490                           ; BSR set to: 0
  7491                           
  7492                           ; BSR set to: 0
  7493  001F86  5170               	movf	___fttol@exp1& (0+255),w,b
  7494  001F88  A4D8               	btfss	status,2,c
  7495  001F8A  D7F7               	goto	l697
  7496  001F8C                     u2060:
  7497                           
  7498                           ; BSR set to: 0
  7499                           
  7500                           ; BSR set to: 0
  7501                           
  7502                           ; BSR set to: 0
  7503  001F8C  516B               	movf	___fttol@sign1& (0+255),w,b
  7504  001F8E  B4D8               	btfsc	status,2,c
  7505  001F90  D008               	goto	l699
  7506                           
  7507                           ; BSR set to: 0
  7508  001F92  1F6F               	comf	(___fttol@lval+3)& (0+255),f,b
  7509  001F94  1F6E               	comf	(___fttol@lval+2)& (0+255),f,b
  7510  001F96  1F6D               	comf	(___fttol@lval+1)& (0+255),f,b
  7511  001F98  6D6C               	negf	___fttol@lval& (0+255),b
  7512  001F9A  0E00               	movlw	0
  7513  001F9C  236D               	addwfc	(___fttol@lval+1)& (0+255),f,b
  7514  001F9E  236E               	addwfc	(___fttol@lval+2)& (0+255),f,b
  7515  001FA0  236F               	addwfc	(___fttol@lval+3)& (0+255),f,b
  7516  001FA2                     l699:
  7517                           
  7518                           ; BSR set to: 0
  7519                           
  7520                           ; BSR set to: 0
  7521  001FA2  C06C  F03F         	movff	___fttol@lval,?___fttol
  7522  001FA6  C06D  F040         	movff	___fttol@lval+1,?___fttol+1
  7523  001FAA  C06E  F041         	movff	___fttol@lval+2,?___fttol+2
  7524  001FAE  C06F  F042         	movff	___fttol@lval+3,?___fttol+3
  7525  001FB2  0012               	return	
  7526  001FB4                     __end_of___fttol:
  7527                           	opt stack 0
  7528                           tblptru	equ	0xFF8
  7529                           tblptrh	equ	0xFF7
  7530                           tblptrl	equ	0xFF6
  7531                           tablat	equ	0xFF5
  7532                           prodh	equ	0xFF4
  7533                           prodl	equ	0xFF3
  7534                           intcon	equ	0xFF2
  7535                           intcon2	equ	0xFF1
  7536                           intcon3	equ	0xFF0
  7537                           postinc0	equ	0xFEE
  7538                           wreg	equ	0xFE8
  7539                           indf2	equ	0xFDF
  7540                           postinc2	equ	0xFDE
  7541                           postdec2	equ	0xFDD
  7542                           fsr2h	equ	0xFDA
  7543                           fsr2l	equ	0xFD9
  7544                           status	equ	0xFD8
  7545                           
  7546 ;; *************** function ___ftdiv *****************
  7547 ;; Defined at:
  7548 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  7549 ;; Parameters:    Size  Location     Type
  7550 ;;  f1              3   53[COMRAM] float 
  7551 ;;  f2              3   56[COMRAM] float 
  7552 ;; Auto vars:     Size  Location     Type
  7553 ;;  f3              3    1[BANK0 ] float 
  7554 ;;  sign            1    5[BANK0 ] unsigned char 
  7555 ;;  exp             1    4[BANK0 ] unsigned char 
  7556 ;;  cntr            1    0[BANK0 ] unsigned char 
  7557 ;; Return value:  Size  Location     Type
  7558 ;;                  3   53[COMRAM] float 
  7559 ;; Registers used:
  7560 ;;		wreg, status,2, status,0, cstack
  7561 ;; Tracked objects:
  7562 ;;		On entry : 0/0
  7563 ;;		On exit  : 0/0
  7564 ;;		Unchanged: 0/0
  7565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7566 ;;      Params:         6       0       0       0       0       0       0       0       0
  7567 ;;      Locals:         0       6       0       0       0       0       0       0       0
  7568 ;;      Temps:          3       0       0       0       0       0       0       0       0
  7569 ;;      Totals:         9       6       0       0       0       0       0       0       0
  7570 ;;Total ram usage:       15 bytes
  7571 ;; Hardware stack levels used:    1
  7572 ;; Hardware stack levels required when called:    2
  7573 ;; This function calls:
  7574 ;;		___ftpack
  7575 ;; This function is called by:
  7576 ;;		_wait_in_ms
  7577 ;;		_main
  7578 ;; This function uses a non-reentrant model
  7579 ;;
  7580                           
  7581                           	psect	text31
  7582  0020A8                     __ptext31:
  7583                           	opt stack 0
  7584  0020A8                     ___ftdiv:
  7585                           	opt stack 27
  7586                           
  7587                           ; BSR set to: 0
  7588                           ;incstack = 0
  7589  0020A8  C038  F03C         	movff	___ftdiv@f1+2,??___ftdiv
  7590  0020AC  6A3D               	clrf	(??___ftdiv+1)& (0+255),c
  7591  0020AE  6A3E               	clrf	(??___ftdiv+2)& (0+255),c
  7592  0020B0  3437               	rlcf	___ftdiv@f1+1,w,c
  7593  0020B2  363C               	rlcf	??___ftdiv& (0+255),f,c
  7594  0020B4  E301               	bnc	u3711
  7595  0020B6  803D               	bsf	(??___ftdiv+1)& (0+255),0,c
  7596  0020B8                     u3711:
  7597  0020B8  503C               	movf	??___ftdiv,w,c
  7598  0020BA  0100               	movlb	0	; () banked
  7599  0020BC  6F64               	movwf	___ftdiv@exp& (0+255),b
  7600  0020BE  5164               	movf	___ftdiv@exp& (0+255),w,b
  7601  0020C0  A4D8               	btfss	status,2,c
  7602  0020C2  D007               	goto	l635
  7603                           
  7604                           ; BSR set to: 0
  7605  0020C4  0E00               	movlw	0
  7606  0020C6  6E36               	movwf	?___ftdiv,c
  7607  0020C8  0E00               	movlw	0
  7608  0020CA  6E37               	movwf	?___ftdiv+1,c
  7609  0020CC  0E00               	movlw	0
  7610  0020CE  6E38               	movwf	?___ftdiv+2,c
  7611                           
  7612                           ; BSR set to: 0
  7613  0020D0  0012               	return	
  7614  0020D2                     l635:
  7615                           
  7616                           ; BSR set to: 0
  7617                           
  7618                           ; BSR set to: 0
  7619  0020D2  C03B  F03C         	movff	___ftdiv@f2+2,??___ftdiv
  7620  0020D6  6A3D               	clrf	(??___ftdiv+1)& (0+255),c
  7621  0020D8  6A3E               	clrf	(??___ftdiv+2)& (0+255),c
  7622  0020DA  343A               	rlcf	___ftdiv@f2+1,w,c
  7623  0020DC  363C               	rlcf	??___ftdiv& (0+255),f,c
  7624  0020DE  E301               	bnc	u3731
  7625  0020E0  803D               	bsf	(??___ftdiv+1)& (0+255),0,c
  7626  0020E2                     u3731:
  7627  0020E2  503C               	movf	??___ftdiv,w,c
  7628  0020E4  6F65               	movwf	___ftdiv@sign& (0+255),b
  7629  0020E6  5165               	movf	___ftdiv@sign& (0+255),w,b
  7630  0020E8  A4D8               	btfss	status,2,c
  7631  0020EA  D007               	goto	l637
  7632                           
  7633                           ; BSR set to: 0
  7634  0020EC  0E00               	movlw	0
  7635  0020EE  6E36               	movwf	?___ftdiv,c
  7636  0020F0  0E00               	movlw	0
  7637  0020F2  6E37               	movwf	?___ftdiv+1,c
  7638  0020F4  0E00               	movlw	0
  7639  0020F6  6E38               	movwf	?___ftdiv+2,c
  7640                           
  7641                           ; BSR set to: 0
  7642  0020F8  0012               	return	
  7643  0020FA                     l637:
  7644                           
  7645                           ; BSR set to: 0
  7646                           
  7647                           ; BSR set to: 0
  7648  0020FA  0E00               	movlw	0
  7649  0020FC  6F61               	movwf	___ftdiv@f3& (0+255),b
  7650  0020FE  0E00               	movlw	0
  7651  002100  6F62               	movwf	(___ftdiv@f3+1)& (0+255),b
  7652  002102  0E00               	movlw	0
  7653  002104  6F63               	movwf	(___ftdiv@f3+2)& (0+255),b
  7654                           
  7655                           ; BSR set to: 0
  7656  002106  5165               	movf	___ftdiv@sign& (0+255),w,b
  7657  002108  0F89               	addlw	137
  7658  00210A  5F64               	subwf	___ftdiv@exp& (0+255),f,b
  7659                           
  7660                           ; BSR set to: 0
  7661  00210C  C038  F065         	movff	___ftdiv@f1+2,___ftdiv@sign
  7662                           
  7663                           ; BSR set to: 0
  7664  002110  503B               	movf	___ftdiv@f2+2,w,c
  7665  002112  1B65               	xorwf	___ftdiv@sign& (0+255),f,b
  7666                           
  7667                           ; BSR set to: 0
  7668  002114  0E80               	movlw	128
  7669  002116  1765               	andwf	___ftdiv@sign& (0+255),f,b
  7670                           
  7671                           ; BSR set to: 0
  7672  002118  8E37               	bsf	___ftdiv@f1+1,7,c
  7673                           
  7674                           ; BSR set to: 0
  7675  00211A  0EFF               	movlw	255
  7676  00211C  1636               	andwf	___ftdiv@f1,f,c
  7677  00211E  0EFF               	movlw	255
  7678  002120  1637               	andwf	___ftdiv@f1+1,f,c
  7679  002122  0E00               	movlw	0
  7680  002124  1638               	andwf	___ftdiv@f1+2,f,c
  7681                           
  7682                           ; BSR set to: 0
  7683  002126  8E3A               	bsf	___ftdiv@f2+1,7,c
  7684                           
  7685                           ; BSR set to: 0
  7686  002128  0EFF               	movlw	255
  7687  00212A  1639               	andwf	___ftdiv@f2,f,c
  7688  00212C  0EFF               	movlw	255
  7689  00212E  163A               	andwf	___ftdiv@f2+1,f,c
  7690  002130  0E00               	movlw	0
  7691  002132  163B               	andwf	___ftdiv@f2+2,f,c
  7692                           
  7693                           ; BSR set to: 0
  7694  002134  0E18               	movlw	24
  7695  002136  6F60               	movwf	___ftdiv@cntr& (0+255),b
  7696  002138                     
  7697                           ; BSR set to: 0
  7698                           
  7699                           ; BSR set to: 0
  7700  002138  90D8               	bcf	status,0,c
  7701  00213A  3761               	rlcf	___ftdiv@f3& (0+255),f,b
  7702  00213C  3762               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  7703  00213E  3763               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  7704                           
  7705                           ; BSR set to: 0
  7706  002140  5039               	movf	___ftdiv@f2,w,c
  7707  002142  5C36               	subwf	___ftdiv@f1,w,c
  7708  002144  503A               	movf	___ftdiv@f2+1,w,c
  7709  002146  5837               	subwfb	___ftdiv@f1+1,w,c
  7710  002148  503B               	movf	___ftdiv@f2+2,w,c
  7711  00214A  5838               	subwfb	___ftdiv@f1+2,w,c
  7712  00214C  A0D8               	btfss	status,0,c
  7713  00214E  D007               	goto	l639
  7714                           
  7715                           ; BSR set to: 0
  7716  002150  5039               	movf	___ftdiv@f2,w,c
  7717  002152  5E36               	subwf	___ftdiv@f1,f,c
  7718  002154  503A               	movf	___ftdiv@f2+1,w,c
  7719  002156  5A37               	subwfb	___ftdiv@f1+1,f,c
  7720  002158  503B               	movf	___ftdiv@f2+2,w,c
  7721  00215A  5A38               	subwfb	___ftdiv@f1+2,f,c
  7722                           
  7723                           ; BSR set to: 0
  7724  00215C  8161               	bsf	___ftdiv@f3& (0+255),0,b
  7725  00215E                     l639:
  7726                           
  7727                           ; BSR set to: 0
  7728  00215E  90D8               	bcf	status,0,c
  7729  002160  3636               	rlcf	___ftdiv@f1,f,c
  7730  002162  3637               	rlcf	___ftdiv@f1+1,f,c
  7731  002164  3638               	rlcf	___ftdiv@f1+2,f,c
  7732                           
  7733                           ; BSR set to: 0
  7734  002166  2F60               	decfsz	___ftdiv@cntr& (0+255),f,b
  7735  002168  D7E7               	goto	l638
  7736                           
  7737                           ; BSR set to: 0
  7738                           
  7739                           ; BSR set to: 0
  7740  00216A  C061  F013         	movff	___ftdiv@f3,___ftpack@arg
  7741  00216E  C062  F014         	movff	___ftdiv@f3+1,___ftpack@arg+1
  7742  002172  C063  F015         	movff	___ftdiv@f3+2,___ftpack@arg+2
  7743  002176  C064  F016         	movff	___ftdiv@exp,___ftpack@exp
  7744  00217A  C065  F017         	movff	___ftdiv@sign,___ftpack@sign
  7745  00217E  EC62  F012         	call	___ftpack	;wreg free
  7746  002182  C013  F036         	movff	?___ftpack,?___ftdiv
  7747  002186  C014  F037         	movff	?___ftpack+1,?___ftdiv+1
  7748  00218A  C015  F038         	movff	?___ftpack+2,?___ftdiv+2
  7749  00218E  0012               	return	
  7750  002190                     __end_of___ftdiv:
  7751                           	opt stack 0
  7752                           tblptru	equ	0xFF8
  7753                           tblptrh	equ	0xFF7
  7754                           tblptrl	equ	0xFF6
  7755                           tablat	equ	0xFF5
  7756                           prodh	equ	0xFF4
  7757                           prodl	equ	0xFF3
  7758                           intcon	equ	0xFF2
  7759                           intcon2	equ	0xFF1
  7760                           intcon3	equ	0xFF0
  7761                           postinc0	equ	0xFEE
  7762                           wreg	equ	0xFE8
  7763                           indf2	equ	0xFDF
  7764                           postinc2	equ	0xFDE
  7765                           postdec2	equ	0xFDD
  7766                           fsr2h	equ	0xFDA
  7767                           fsr2l	equ	0xFD9
  7768                           status	equ	0xFD8
  7769                           
  7770 ;; *************** function ___awtoft *****************
  7771 ;; Defined at:
  7772 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
  7773 ;; Parameters:    Size  Location     Type
  7774 ;;  c               2   26[COMRAM] int 
  7775 ;; Auto vars:     Size  Location     Type
  7776 ;;  sign            1   29[COMRAM] unsigned char 
  7777 ;; Return value:  Size  Location     Type
  7778 ;;                  3   26[COMRAM] float 
  7779 ;; Registers used:
  7780 ;;		wreg, status,2, status,0, cstack
  7781 ;; Tracked objects:
  7782 ;;		On entry : 0/0
  7783 ;;		On exit  : 0/0
  7784 ;;		Unchanged: 0/0
  7785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7786 ;;      Params:         3       0       0       0       0       0       0       0       0
  7787 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7788 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7789 ;;      Totals:         4       0       0       0       0       0       0       0       0
  7790 ;;Total ram usage:        4 bytes
  7791 ;; Hardware stack levels used:    1
  7792 ;; Hardware stack levels required when called:    2
  7793 ;; This function calls:
  7794 ;;		___ftpack
  7795 ;; This function is called by:
  7796 ;;		_wait_in_ms
  7797 ;; This function uses a non-reentrant model
  7798 ;;
  7799                           
  7800                           	psect	text32
  7801  0029C8                     __ptext32:
  7802                           	opt stack 0
  7803  0029C8                     ___awtoft:
  7804                           	opt stack 27
  7805                           
  7806                           ;incstack = 0
  7807  0029C8  0E00               	movlw	0
  7808  0029CA  6E1E               	movwf	___awtoft@sign,c
  7809  0029CC  AE1C               	btfss	___awtoft@c+1,7,c
  7810  0029CE  D006               	goto	l535
  7811  0029D0  6C1B               	negf	___awtoft@c,c
  7812  0029D2  1E1C               	comf	___awtoft@c+1,f,c
  7813  0029D4  B0D8               	btfsc	status,0,c
  7814  0029D6  2A1C               	incf	___awtoft@c+1,f,c
  7815  0029D8  0E01               	movlw	1
  7816  0029DA  6E1E               	movwf	___awtoft@sign,c
  7817  0029DC                     l535:
  7818  0029DC  C01B  F013         	movff	___awtoft@c,___ftpack@arg
  7819  0029E0  C01C  F014         	movff	___awtoft@c+1,___ftpack@arg+1
  7820  0029E4  6A15               	clrf	___ftpack@arg+2,c
  7821  0029E6  0E8E               	movlw	142
  7822  0029E8  6E16               	movwf	___ftpack@exp,c
  7823  0029EA  C01E  F017         	movff	___awtoft@sign,___ftpack@sign
  7824  0029EE  EC62  F012         	call	___ftpack	;wreg free
  7825  0029F2  C013  F01B         	movff	?___ftpack,?___awtoft
  7826  0029F6  C014  F01C         	movff	?___ftpack+1,?___awtoft+1
  7827  0029FA  C015  F01D         	movff	?___ftpack+2,?___awtoft+2
  7828  0029FE  0012               	return	
  7829  002A00                     __end_of___awtoft:
  7830                           	opt stack 0
  7831                           tblptru	equ	0xFF8
  7832                           tblptrh	equ	0xFF7
  7833                           tblptrl	equ	0xFF6
  7834                           tablat	equ	0xFF5
  7835                           prodh	equ	0xFF4
  7836                           prodl	equ	0xFF3
  7837                           intcon	equ	0xFF2
  7838                           intcon2	equ	0xFF1
  7839                           intcon3	equ	0xFF0
  7840                           postinc0	equ	0xFEE
  7841                           wreg	equ	0xFE8
  7842                           indf2	equ	0xFDF
  7843                           postinc2	equ	0xFDE
  7844                           postdec2	equ	0xFDD
  7845                           fsr2h	equ	0xFDA
  7846                           fsr2l	equ	0xFD9
  7847                           status	equ	0xFD8
  7848                           
  7849 ;; *************** function ___ftpack *****************
  7850 ;; Defined at:
  7851 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  7852 ;; Parameters:    Size  Location     Type
  7853 ;;  arg             3   18[COMRAM] unsigned um
  7854 ;;  exp             1   21[COMRAM] unsigned char 
  7855 ;;  sign            1   22[COMRAM] unsigned char 
  7856 ;; Auto vars:     Size  Location     Type
  7857 ;;		None
  7858 ;; Return value:  Size  Location     Type
  7859 ;;                  3   18[COMRAM] float 
  7860 ;; Registers used:
  7861 ;;		wreg, status,2, status,0
  7862 ;; Tracked objects:
  7863 ;;		On entry : 0/0
  7864 ;;		On exit  : 0/0
  7865 ;;		Unchanged: 0/0
  7866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7867 ;;      Params:         5       0       0       0       0       0       0       0       0
  7868 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7869 ;;      Temps:          3       0       0       0       0       0       0       0       0
  7870 ;;      Totals:         8       0       0       0       0       0       0       0       0
  7871 ;;Total ram usage:        8 bytes
  7872 ;; Hardware stack levels used:    1
  7873 ;; Hardware stack levels required when called:    1
  7874 ;; This function calls:
  7875 ;;		Nothing
  7876 ;; This function is called by:
  7877 ;;		___awtoft
  7878 ;;		___ftadd
  7879 ;;		___ftdiv
  7880 ;;		___ftmul
  7881 ;;		___lltoft
  7882 ;;		___lwtoft
  7883 ;; This function uses a non-reentrant model
  7884 ;;
  7885                           
  7886                           	psect	text33
  7887  0024C4                     __ptext33:
  7888                           	opt stack 0
  7889  0024C4                     ___ftpack:
  7890                           	opt stack 27
  7891                           
  7892                           ;incstack = 0
  7893  0024C4  5016               	movf	___ftpack@exp,w,c
  7894  0024C6  B4D8               	btfsc	status,2,c
  7895  0024C8  D005               	goto	u3640
  7896  0024CA  5013               	movf	___ftpack@arg,w,c
  7897  0024CC  1014               	iorwf	___ftpack@arg+1,w,c
  7898  0024CE  1015               	iorwf	___ftpack@arg+2,w,c
  7899  0024D0  A4D8               	btfss	status,2,c
  7900  0024D2  D00C               	goto	l571
  7901  0024D4                     u3640:
  7902  0024D4  0E00               	movlw	0
  7903  0024D6  6E13               	movwf	?___ftpack,c
  7904  0024D8  0E00               	movlw	0
  7905  0024DA  6E14               	movwf	?___ftpack+1,c
  7906  0024DC  0E00               	movlw	0
  7907  0024DE  6E15               	movwf	?___ftpack+2,c
  7908  0024E0  0012               	return	
  7909  0024E2  2A16               	incf	___ftpack@exp,f,c
  7910  0024E4  90D8               	bcf	status,0,c
  7911  0024E6  3215               	rrcf	___ftpack@arg+2,f,c
  7912  0024E8  3214               	rrcf	___ftpack@arg+1,f,c
  7913  0024EA  3213               	rrcf	___ftpack@arg,f,c
  7914  0024EC                     l571:
  7915  0024EC  0E00               	movlw	0
  7916  0024EE  1413               	andwf	___ftpack@arg,w,c
  7917  0024F0  6E18               	movwf	??___ftpack& (0+255),c
  7918  0024F2  0E00               	movlw	0
  7919  0024F4  1414               	andwf	___ftpack@arg+1,w,c
  7920  0024F6  6E19               	movwf	(??___ftpack+1)& (0+255),c
  7921  0024F8  0EFE               	movlw	254
  7922  0024FA  1415               	andwf	___ftpack@arg+2,w,c
  7923  0024FC  6E1A               	movwf	(??___ftpack+2)& (0+255),c
  7924  0024FE  5018               	movf	??___ftpack,w,c
  7925  002500  1019               	iorwf	??___ftpack+1,w,c
  7926  002502  101A               	iorwf	??___ftpack+2,w,c
  7927  002504  B4D8               	btfsc	status,2,c
  7928  002506  D00C               	goto	l574
  7929  002508  D7EC               	goto	l572
  7930  00250A  2A16               	incf	___ftpack@exp,f,c
  7931  00250C  0E01               	movlw	1
  7932  00250E  2613               	addwf	___ftpack@arg,f,c
  7933  002510  0E00               	movlw	0
  7934  002512  2214               	addwfc	___ftpack@arg+1,f,c
  7935  002514  0E00               	movlw	0
  7936  002516  2215               	addwfc	___ftpack@arg+2,f,c
  7937  002518  90D8               	bcf	status,0,c
  7938  00251A  3215               	rrcf	___ftpack@arg+2,f,c
  7939  00251C  3214               	rrcf	___ftpack@arg+1,f,c
  7940  00251E  3213               	rrcf	___ftpack@arg,f,c
  7941  002520                     l574:
  7942  002520  0E00               	movlw	0
  7943  002522  1413               	andwf	___ftpack@arg,w,c
  7944  002524  6E18               	movwf	??___ftpack& (0+255),c
  7945  002526  0E00               	movlw	0
  7946  002528  1414               	andwf	___ftpack@arg+1,w,c
  7947  00252A  6E19               	movwf	(??___ftpack+1)& (0+255),c
  7948  00252C  0EFF               	movlw	255
  7949  00252E  1415               	andwf	___ftpack@arg+2,w,c
  7950  002530  6E1A               	movwf	(??___ftpack+2)& (0+255),c
  7951  002532  5018               	movf	??___ftpack,w,c
  7952  002534  1019               	iorwf	??___ftpack+1,w,c
  7953  002536  101A               	iorwf	??___ftpack+2,w,c
  7954  002538  B4D8               	btfsc	status,2,c
  7955  00253A  D006               	goto	l577
  7956  00253C  D7E6               	goto	l575
  7957  00253E  0616               	decf	___ftpack@exp,f,c
  7958  002540  90D8               	bcf	status,0,c
  7959  002542  3613               	rlcf	___ftpack@arg,f,c
  7960  002544  3614               	rlcf	___ftpack@arg+1,f,c
  7961  002546  3615               	rlcf	___ftpack@arg+2,f,c
  7962  002548                     l577:
  7963  002548  BE14               	btfsc	___ftpack@arg+1,7,c
  7964  00254A  D003               	goto	u3680
  7965  00254C  0E02               	movlw	2
  7966  00254E  6016               	cpfslt	___ftpack@exp,c
  7967  002550  D7F6               	goto	l578
  7968  002552                     u3680:
  7969  002552  A016               	btfss	___ftpack@exp,0,c
  7970  002554  9E14               	bcf	___ftpack@arg+1,7,c
  7971  002556  90D8               	bcf	status,0,c
  7972  002558  3216               	rrcf	___ftpack@exp,f,c
  7973  00255A  5016               	movf	___ftpack@exp,w,c
  7974  00255C  1215               	iorwf	___ftpack@arg+2,f,c
  7975  00255E  5017               	movf	___ftpack@sign,w,c
  7976  002560  A4D8               	btfss	status,2,c
  7977  002562  8E15               	bsf	___ftpack@arg+2,7,c
  7978  002564  C013  F013         	movff	___ftpack@arg,?___ftpack
  7979  002568  C014  F014         	movff	___ftpack@arg+1,?___ftpack+1
  7980  00256C  C015  F015         	movff	___ftpack@arg+2,?___ftpack+2
  7981  002570  0012               	return	
  7982  002572                     __end_of___ftpack:
  7983                           	opt stack 0
  7984                           tblptru	equ	0xFF8
  7985                           tblptrh	equ	0xFF7
  7986                           tblptrl	equ	0xFF6
  7987                           tablat	equ	0xFF5
  7988                           prodh	equ	0xFF4
  7989                           prodl	equ	0xFF3
  7990                           intcon	equ	0xFF2
  7991                           intcon2	equ	0xFF1
  7992                           intcon3	equ	0xFF0
  7993                           postinc0	equ	0xFEE
  7994                           wreg	equ	0xFE8
  7995                           indf2	equ	0xFDF
  7996                           postinc2	equ	0xFDE
  7997                           postdec2	equ	0xFDD
  7998                           fsr2h	equ	0xFDA
  7999                           fsr2l	equ	0xFD9
  8000                           status	equ	0xFD8
  8001                           
  8002 ;; *************** function _ADCint *****************
  8003 ;; Defined at:
  8004 ;;		line 56 in file "main_ADC_b.c"
  8005 ;; Parameters:    Size  Location     Type
  8006 ;;		None
  8007 ;; Auto vars:     Size  Location     Type
  8008 ;;		None
  8009 ;; Return value:  Size  Location     Type
  8010 ;;                  1    wreg      void 
  8011 ;; Registers used:
  8012 ;;		wreg, status,2
  8013 ;; Tracked objects:
  8014 ;;		On entry : 0/0
  8015 ;;		On exit  : 0/0
  8016 ;;		Unchanged: 0/0
  8017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8018 ;;      Params:         0       0       0       0       0       0       0       0       0
  8019 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8020 ;;      Temps:         18       0       0       0       0       0       0       0       0
  8021 ;;      Totals:        18       0       0       0       0       0       0       0       0
  8022 ;;Total ram usage:       18 bytes
  8023 ;; Hardware stack levels used:    1
  8024 ;; This function calls:
  8025 ;;		Nothing
  8026 ;; This function is called by:
  8027 ;;		Interrupt level 2
  8028 ;; This function uses a non-reentrant model
  8029 ;;
  8030                           
  8031                           	psect	intcode
  8032  000008                     __pintcode:
  8033                           	opt stack 0
  8034  000008                     _ADCint:
  8035                           	opt stack 23
  8036                           
  8037                           ;incstack = 0
  8038  000008  824D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8039  00000A  EDA3  F011         	call	int_func,f	;refresh shadow registers
  8040                           tblptru	equ	0xFF8
  8041                           tblptrh	equ	0xFF7
  8042                           tblptrl	equ	0xFF6
  8043                           tablat	equ	0xFF5
  8044                           prodh	equ	0xFF4
  8045                           prodl	equ	0xFF3
  8046                           intcon	equ	0xFF2
  8047                           intcon2	equ	0xFF1
  8048                           intcon3	equ	0xFF0
  8049                           postinc0	equ	0xFEE
  8050                           wreg	equ	0xFE8
  8051                           indf2	equ	0xFDF
  8052                           postinc2	equ	0xFDE
  8053                           postdec2	equ	0xFDD
  8054                           fsr2h	equ	0xFDA
  8055                           fsr2l	equ	0xFD9
  8056                           status	equ	0xFD8
  8057                           
  8058                           	psect	intcode_body
  8059  002346                     __pintcode_body:
  8060                           	opt stack 23
  8061  002346                     int_func:
  8062                           	opt stack 23
  8063  002346  0006               	pop		; remove dummy address from shadow register refresh
  8064  002348  CFFA F001          	movff	pclath,??_ADCint
  8065  00234C  CFFB F002          	movff	pclatu,??_ADCint+1
  8066  002350  CFE9 F003          	movff	fsr0l,??_ADCint+2
  8067  002354  CFEA F004          	movff	fsr0h,??_ADCint+3
  8068  002358  CFE1 F005          	movff	fsr1l,??_ADCint+4
  8069  00235C  CFE2 F006          	movff	fsr1h,??_ADCint+5
  8070  002360  CFD9 F007          	movff	fsr2l,??_ADCint+6
  8071  002364  CFDA F008          	movff	fsr2h,??_ADCint+7
  8072  002368  CFF3 F009          	movff	prodl,??_ADCint+8
  8073  00236C  CFF4 F00A          	movff	prodh,??_ADCint+9
  8074  002370  CFF6 F00B          	movff	tblptrl,??_ADCint+10
  8075  002374  CFF7 F00C          	movff	tblptrh,??_ADCint+11
  8076  002378  CFF8 F00D          	movff	tblptru,??_ADCint+12
  8077  00237C  CFF5 F00E          	movff	tablat,??_ADCint+13
  8078  002380  C04D  F00F         	movff	btemp,??_ADCint+14
  8079  002384  C04E  F010         	movff	btemp+1,??_ADCint+15
  8080  002388  C04F  F011         	movff	btemp+2,??_ADCint+16
  8081  00238C  C050  F012         	movff	btemp+3,??_ADCint+17
  8082                           
  8083                           ;main_ADC_b.c: 58: if(INTCONbits.INT0IF == 1)
  8084  002390  A2F2               	btfss	intcon,1,c	;volatile
  8085  002392  D005               	goto	i2l177
  8086                           
  8087                           ;main_ADC_b.c: 59: {
  8088                           ;main_ADC_b.c: 60: INTCONbits.INT0IF = 0;
  8089  002394  92F2               	bcf	intcon,1,c	;volatile
  8090                           
  8091                           ;main_ADC_b.c: 61: int0flag = 1;
  8092  002396  0E00               	movlw	0
  8093  002398  6E4C               	movwf	_int0flag+1,c
  8094  00239A  0E01               	movlw	1
  8095  00239C  6E4B               	movwf	_int0flag,c
  8096  00239E                     i2l177:
  8097                           
  8098                           ;main_ADC_b.c: 62: }
  8099                           ;main_ADC_b.c: 64: if(INTCON3bits.INT1IF == 1)
  8100  00239E  A0F0               	btfss	intcon3,0,c	;volatile
  8101  0023A0  D005               	goto	i2l178
  8102                           
  8103                           ;main_ADC_b.c: 65: {
  8104                           ;main_ADC_b.c: 66: INTCON3bits.INT1IF = 0;
  8105  0023A2  90F0               	bcf	intcon3,0,c	;volatile
  8106                           
  8107                           ;main_ADC_b.c: 67: int1flag = 1;
  8108  0023A4  0E00               	movlw	0
  8109  0023A6  6E4A               	movwf	_int1flag+1,c
  8110  0023A8  0E01               	movlw	1
  8111  0023AA  6E49               	movwf	_int1flag,c
  8112  0023AC                     i2l178:
  8113                           
  8114                           ;main_ADC_b.c: 68: }
  8115                           ;main_ADC_b.c: 70: if(INTCON3bits.INT2IF == 1)
  8116  0023AC  A2F0               	btfss	intcon3,1,c	;volatile
  8117  0023AE  D005               	goto	i2l179
  8118                           
  8119                           ;main_ADC_b.c: 71: {
  8120                           ;main_ADC_b.c: 72: INTCON3bits.INT2IF = 0;
  8121  0023B0  92F0               	bcf	intcon3,1,c	;volatile
  8122                           
  8123                           ;main_ADC_b.c: 73: int2flag = 1;
  8124  0023B2  0E00               	movlw	0
  8125  0023B4  6E48               	movwf	_int2flag+1,c
  8126  0023B6  0E01               	movlw	1
  8127  0023B8  6E47               	movwf	_int2flag,c
  8128  0023BA                     i2l179:
  8129                           
  8130                           ;main_ADC_b.c: 74: }
  8131                           ;main_ADC_b.c: 76: if(PIR1bits.ADIF == 1)
  8132  0023BA  AC9E               	btfss	3998,6,c	;volatile
  8133  0023BC  D005               	goto	i2l180
  8134                           
  8135                           ;main_ADC_b.c: 77: {
  8136                           ;main_ADC_b.c: 78: PIR1bits.ADIF = 0;
  8137  0023BE  9C9E               	bcf	3998,6,c	;volatile
  8138                           
  8139                           ;main_ADC_b.c: 79: pir1flag = 1;
  8140  0023C0  0E00               	movlw	0
  8141  0023C2  6E46               	movwf	_pir1flag+1,c
  8142  0023C4  0E01               	movlw	1
  8143  0023C6  6E45               	movwf	_pir1flag,c
  8144  0023C8                     i2l180:
  8145  0023C8  C012  F050         	movff	??_ADCint+17,btemp+3
  8146  0023CC  C011  F04F         	movff	??_ADCint+16,btemp+2
  8147  0023D0  C010  F04E         	movff	??_ADCint+15,btemp+1
  8148  0023D4  C00F  F04D         	movff	??_ADCint+14,btemp
  8149  0023D8  C00E  FFF5         	movff	??_ADCint+13,tablat
  8150  0023DC  C00D  FFF8         	movff	??_ADCint+12,tblptru
  8151  0023E0  C00C  FFF7         	movff	??_ADCint+11,tblptrh
  8152  0023E4  C00B  FFF6         	movff	??_ADCint+10,tblptrl
  8153  0023E8  C00A  FFF4         	movff	??_ADCint+9,prodh
  8154  0023EC  C009  FFF3         	movff	??_ADCint+8,prodl
  8155  0023F0  C008  FFDA         	movff	??_ADCint+7,fsr2h
  8156  0023F4  C007  FFD9         	movff	??_ADCint+6,fsr2l
  8157  0023F8  C006  FFE2         	movff	??_ADCint+5,fsr1h
  8158  0023FC  C005  FFE1         	movff	??_ADCint+4,fsr1l
  8159  002400  C004  FFEA         	movff	??_ADCint+3,fsr0h
  8160  002404  C003  FFE9         	movff	??_ADCint+2,fsr0l
  8161  002408  C002  FFFB         	movff	??_ADCint+1,pclatu
  8162  00240C  C001  FFFA         	movff	??_ADCint,pclath
  8163  002410  924D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8164  002412  0011               	retfie		f
  8165  002414                     __end_of_ADCint:
  8166                           	opt stack 0
  8167                           pclatu	equ	0xFFB
  8168                           pclath	equ	0xFFA
  8169                           tblptru	equ	0xFF8
  8170                           tblptrh	equ	0xFF7
  8171                           tblptrl	equ	0xFF6
  8172                           tablat	equ	0xFF5
  8173                           prodh	equ	0xFF4
  8174                           prodl	equ	0xFF3
  8175                           intcon	equ	0xFF2
  8176                           intcon2	equ	0xFF1
  8177                           intcon3	equ	0xFF0
  8178                           postinc0	equ	0xFEE
  8179                           fsr0h	equ	0xFEA
  8180                           fsr0l	equ	0xFE9
  8181                           wreg	equ	0xFE8
  8182                           fsr1h	equ	0xFE2
  8183                           fsr1l	equ	0xFE1
  8184                           indf2	equ	0xFDF
  8185                           postinc2	equ	0xFDE
  8186                           postdec2	equ	0xFDD
  8187                           fsr2h	equ	0xFDA
  8188                           fsr2l	equ	0xFD9
  8189                           status	equ	0xFD8
  8190                           pclatu	equ	0xFFB
  8191                           pclath	equ	0xFFA
  8192                           tblptru	equ	0xFF8
  8193                           tblptrh	equ	0xFF7
  8194                           tblptrl	equ	0xFF6
  8195                           tablat	equ	0xFF5
  8196                           prodh	equ	0xFF4
  8197                           prodl	equ	0xFF3
  8198                           intcon	equ	0xFF2
  8199                           intcon2	equ	0xFF1
  8200                           intcon3	equ	0xFF0
  8201                           postinc0	equ	0xFEE
  8202                           fsr0h	equ	0xFEA
  8203                           fsr0l	equ	0xFE9
  8204                           wreg	equ	0xFE8
  8205                           fsr1h	equ	0xFE2
  8206                           fsr1l	equ	0xFE1
  8207                           indf2	equ	0xFDF
  8208                           postinc2	equ	0xFDE
  8209                           postdec2	equ	0xFDD
  8210                           fsr2h	equ	0xFDA
  8211                           fsr2l	equ	0xFD9
  8212                           status	equ	0xFD8
  8213                           
  8214                           	psect	rparam
  8215  0000                     pclatu	equ	0xFFB
  8216                           pclath	equ	0xFFA
  8217                           tblptru	equ	0xFF8
  8218                           tblptrh	equ	0xFF7
  8219                           tblptrl	equ	0xFF6
  8220                           tablat	equ	0xFF5
  8221                           prodh	equ	0xFF4
  8222                           prodl	equ	0xFF3
  8223                           intcon	equ	0xFF2
  8224                           intcon2	equ	0xFF1
  8225                           intcon3	equ	0xFF0
  8226                           postinc0	equ	0xFEE
  8227                           fsr0h	equ	0xFEA
  8228                           fsr0l	equ	0xFE9
  8229                           wreg	equ	0xFE8
  8230                           fsr1h	equ	0xFE2
  8231                           fsr1l	equ	0xFE1
  8232                           indf2	equ	0xFDF
  8233                           postinc2	equ	0xFDE
  8234                           postdec2	equ	0xFDD
  8235                           fsr2h	equ	0xFDA
  8236                           fsr2l	equ	0xFD9
  8237                           status	equ	0xFD8
  8238                           
  8239                           	psect	temp
  8240  00004D                     btemp:
  8241                           	opt stack 0
  8242  00004D                     	ds	1
  8243  0000                     int$flags	set	btemp
  8244  0000                     wtemp6	set	btemp+1
  8245                           pclatu	equ	0xFFB
  8246                           pclath	equ	0xFFA
  8247                           tblptru	equ	0xFF8
  8248                           tblptrh	equ	0xFF7
  8249                           tblptrl	equ	0xFF6
  8250                           tablat	equ	0xFF5
  8251                           prodh	equ	0xFF4
  8252                           prodl	equ	0xFF3
  8253                           intcon	equ	0xFF2
  8254                           intcon2	equ	0xFF1
  8255                           intcon3	equ	0xFF0
  8256                           postinc0	equ	0xFEE
  8257                           fsr0h	equ	0xFEA
  8258                           fsr0l	equ	0xFE9
  8259                           wreg	equ	0xFE8
  8260                           fsr1h	equ	0xFE2
  8261                           fsr1l	equ	0xFE1
  8262                           indf2	equ	0xFDF
  8263                           postinc2	equ	0xFDE
  8264                           postdec2	equ	0xFDD
  8265                           fsr2h	equ	0xFDA
  8266                           fsr2l	equ	0xFD9
  8267                           status	equ	0xFD8


Data Sizes:
    Strings     11
    Constant    118
    Data        0
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     66      76
    BANK0           160     67      67
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_1(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 2
		 -> main@str(BANK0[2]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    lcd_texto@cadena	PTR unsigned char  size(2) Largest target is 2
		 -> main@str(BANK0[2]), 


Critical Paths under _main in COMRAM

    _sprintf->___ftadd
    _sprintf->___fttol
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___lwtoft->___ftpack
    _wait_in_ms->___fttol
    ___fttol->___ftdiv
    ___ftdiv->___ftmul
    ___awtoft->___ftpack

Critical Paths under _ADCint in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___fttol
    ___ftsub->___ftadd
    _lcd_ubicarXY->_lcd_orden
    _lcd_origen->_lcd_orden
    _lcd_texto->_lcd_caracter
    _lcd_limpiar->_lcd_orden
    _lcd_iniciar->_lcd_orden
    _lcd_pulso->_wait_in_ms
    _ADC_Read->_wait_in_ms
    _wait_in_ms->___fttol
    ___fttol->___ftdiv

Critical Paths under _ADCint in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ADCint in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ADCint in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ADCint in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ADCint in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ADCint in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ADCint in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ADCint in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                12    12      0  183669
                                             55 BANK0     12    12      0
                           _ADC_Read
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
                        _configBoard
                        _lcd_iniciar
                        _lcd_limpiar
                          _lcd_texto
                       _lcd_ubicarXY
                            _sprintf
                         _wait_in_ms
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             44    37      7   58679
                                             17 BANK0     38    31      7
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                7     4      3   13529
                                             53 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             18 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              10     7      3   13250
                                             53 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2895
                                             32 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    6521
                                             38 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1664
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1820
                                             24 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     455
                                             18 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     598
                                             18 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    3205
                                             26 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     615
                                             18 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     466
                                             18 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    5154
                                              9 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    4738
                                             63 COMRAM     3     3      0
                                              0 BANK0      9     3      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     121
                                             18 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     592
                                             18 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _lcd_ubicarXY                                         9     8      1   30880
                                             34 BANK0      9     8      1
                          _lcd_orden
                         _lcd_origen
 ---------------------------------------------------------------------------------
 (2) _lcd_origen                                           0     0      0   20134
                          _lcd_orden
                         _wait_in_ms
 ---------------------------------------------------------------------------------
 (1) _lcd_texto                                            3     1      2   10073
                                             34 BANK0      3     1      2
                       _lcd_caracter
 ---------------------------------------------------------------------------------
 (2) _lcd_caracter                                         7     5      2    9828
                                             27 BANK0      7     5      2
                          _lcd_pulso
 ---------------------------------------------------------------------------------
 (1) _lcd_limpiar                                          0     0      0   20134
                          _lcd_orden
                         _wait_in_ms
 ---------------------------------------------------------------------------------
 (1) _lcd_iniciar                                          0     0      0   29810
                          _lcd_orden
                          _lcd_pulso
                         _wait_in_ms
 ---------------------------------------------------------------------------------
 (3) _lcd_orden                                            7     5      2   10458
                                             27 BANK0      7     5      2
                          _lcd_pulso
 ---------------------------------------------------------------------------------
 (4) _lcd_pulso                                            0     0      0    9676
                         _wait_in_ms
 ---------------------------------------------------------------------------------
 (1) _configBoard                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             3     0      3    3224
                                             26 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             4     2      2   10259
                                             27 BANK0      4     2      2
                         _wait_in_ms
 ---------------------------------------------------------------------------------
 (1) _wait_in_ms                                          10     8      2    9676
                                             17 BANK0     10     8      2
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     556
                                             62 COMRAM     4     0      4
                                              6 BANK0     11    11      0
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    4113
                                             53 COMRAM     9     3      6
                                              0 BANK0      6     6      0
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    3236
                                             26 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    3013
                                             18 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _ADCint                                              18    18      0       0
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Read
     _wait_in_ms
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___lwtoft
     ___ftpack
   _configBoard
   _lcd_iniciar
     _lcd_orden
       _lcd_pulso
         _wait_in_ms
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
     _lcd_pulso
       _wait_in_ms
         ___awtoft
           ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
     _wait_in_ms
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _lcd_limpiar
     _lcd_orden
       _lcd_pulso
         _wait_in_ms
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
     _wait_in_ms
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _lcd_texto
     _lcd_caracter
       _lcd_pulso
         _wait_in_ms
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
   _lcd_ubicarXY
     _lcd_orden
       _lcd_pulso
         _wait_in_ms
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
     _lcd_origen
       _lcd_orden
         _lcd_pulso
           _wait_in_ms
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
       _wait_in_ms
         ___awtoft
           ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _wait_in_ms
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)

 _ADCint (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     43      43       5       41.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     42      4C       1       80.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      8F      20        0.0%
DATA                 0      0      8F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Feb 21 00:40:28 2018

          ?_lcd_ubicarXY 0082                       l62 232E                       l63 2336  
                     l59 22F6                       l92 2A20                       l93 2A02  
           ___awdiv@sign 001E      ___wmul@multiplicand 0023              __CFG_BORV$3 000000  
           ___ftadd@exp1 0068             ___ftadd@exp2 0067             ___ftadd@sign 0066  
                    l110 2744                      l105 272E                      l106 271E  
                    l300 0DB2                      l109 2754                      l205 19E8  
                    l230 1726                      l310 0ED2                      l311 0EF4  
                    l303 0E8A                      l207 19FE                      l240 13BC  
                    l312 1026                      l304 0DF6                      l233 17F2  
                    l241 150C                      l321 10A6                      l313 0F44  
                    l322 10C8                      l306 0EAA                      l250 08C4  
                    l243 15BC                      l315 1048                      l307 0E94  
                    l251 08BC                      l236 13E0                      l324 10EA  
                    l316 1032                      l260 0976                      l237 130C  
                    l325 10F2                      l309 0ECE                      l190 1E28  
                    l510 2644                      l326 1116                      l318 106A  
                    l270 0A0E                      l191 1E3A                      l511 263C  
                    l327 111E                      l319 1086                      l271 0A50  
                    l263 09D6                      l247 0892                      l192 1E4C  
                    l184 1DBE                      l520 2792                      l328 1166  
                    l256 08F4                      l248 08AA                      l193 1E5E  
                    l185 1DCE                      l521 279E                      l337 11B0  
                    l329 1146                      l281 0C1E                      l273 0AE2  
                    l194 1E70                      l186 1DE0                      l602 1886  
                    l514 2664                      l274 0B48                      l266 09D2  
                    l258 09C4                      l195 1E82                      l187 1DF2  
                    l611 1916                      l515 266E                      l507 2616  
                    l523 27B4                      l291 0D48                      l267 09FA  
                    l259 09AE                      l196 1E94                      l188 1E04  
                    l516 267C                      l508 2626                      l524 27AC  
                    l292 0D62                      l276 0B6E                      l189 1E16  
                    l541 1CC0                      l269 1052                      l277 0BAE  
                    l198 1EA2                      l630 19BA                      l606 18B0  
                    l542 1D02                      l278 0C76                      l535 29DC  
                    l551 1D94                      l543 1D32                      l527 27CC  
                    l703 2AD6                      l295 0DA2                      l287 0CDC  
                    l616 190C                      l552 1D88                      l528 27D6  
                    l296 0D8C                      l625 194A                      l617 1902  
                    l545 1D70                      l529 27E4                      l626 1940  
                    l730 26A8                      l546 1D60                      l650 1C38  
                    l571 24EC                      l635 20D2                      l539 1CA2  
                    l643 1B7E                      l299 0DC8                      l572 24E2  
                    l660 25A2                      l628 196E                      l740 28D6  
                    l637 20FA                      l661 25D2                      l629 198A  
                    l733 26E8                      l645 1BAA                      l574 2520  
                    l638 2138                      l734 26F6                      l750 293C  
                    l646 1BE4                      l670 2036                      l575 250A  
                    l639 215E                      l743 290A                      l751 2930  
                    l655 1C6C                      l647 1C0C                      l671 2046  
                    l744 2918                      l656 1C60                      l577 2548  
                    l729 26B4                      l649 1C48                      l673 205E  
                    l578 253E                      l690 1F62                      l674 206E  
                    l691 1F52                      l739 28E2                      l667 1FDC  
                    l684 299E                      l669 2004                      l678 2A6C  
                    l696 1F86                      l688 1EEA                      l697 1F7A  
                    l699 1FA2             __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000  
           ___awmod@sign 0018                      wreg 000FE8           ??_lcd_caracter 007D  
           __CFG_LVP$OFF 000000             ___ftdiv@cntr 0060             ___ftdiv@sign 0065  
           __CFG_WDT$OFF 000000                     l2254 25FE                     l4102 0E94  
                   l4022 0BF8                     l4014 0BAE                     l4042 0CE0  
                   l4070 0D8C                     l4208 11AC                     l4078 0DB2  
                   l3570 2336                     STR_1 0877                     u2001 1ECE  
                   u2020 1F08                     u2025 1F00                     u2060 1F8C  
                   u4000 1952                     u2500 27B8                     u2440 2648  
                   u4105 2806                     u4041 1FC4                     u4220 2736  
                   u4061 1FEC                     u2710 1C72                     u2631 1B62  
                   _IPEN 007E87                     u4410 0952                     u2651 1B8E  
                   u3711 20B8                     u3640 24D4                     u3800 2324  
                   u4600 0D18                     u4520 0B80                     u2850 26B8  
                   u4530 0BC0                     u3731 20E2                     u3900 18A2  
                   u2780 1D9A                     u4700 0EC8                     u3831 1844  
                   u3680 2552                     u2880 28E6                     u4560 0BF8  
                   u4480 0A88                     u3825 2872                     u3841 1858  
                   u3930 18E0                     u4900 11CA                     u4660 0DD6  
                   u4485 0A7E                     u3870 1878                     u3775 22A4  
                   u3970 191E                     u4690 0EB8                     u4870 116E  
                   u4880 118C                     _main 19E0             ___ftpack@arg 0013  
           ___ftpack@exp 0016                     fsr0h 000FEA                     fsr1h 000FE2  
                   fsr2h 000FDA                     fsr0l 000FE9                     indf2 000FDF  
                   fsr1l 000FE1                     fsr2l 000FD9                     btemp 004D  
       __end_of_ADC_Read 1EBC                     prodh 000FF4                     prodl 000FF3  
                   start 000E             _sprintf$1584 007E            __CFG_MCLRE$ON 000000  
         ??_lcd_ubicarXY 0083             ___ftmul@cntr 0034             ___param_bank 000000  
           ___ftmul@sign 0035     lcd_caracter@caracter 007B             ___fttol@exp1 0070  
           ___fttol@lval 006C            __CFG_PLLDIV$1 000000                    ?_main 0001  
        __end_of___awdiv 2686          __end_of___ftadd 19E0          __end_of___awmod 27EE  
        __end_of___ftdiv 2190          __end_of___ftneg 2A7A          __end_of___lldiv 2708  
        __end_of___ftmul 20A8          ___awdiv@divisor 001B          __end_of___llmod 292A  
        __end_of___ftsub 29C8          __end_of___fttol 1FB4                    i2l180 23C8  
                  i2l177 239E                    i2l178 23AC                    i2l179 23BA  
        ___awdiv@counter 001D                    _TMR0L 000FD6                    _PORTA 000F80  
                  _PORTB 000F81                    _PORTC 000F82                    _PORTD 000F83  
                  _PORTE 000F84            __CFG_USBDIV$2 000000                    _TRISA 000F92  
                  _TRISB 000F93                    _TRISC 000F94                    _TRISD 000F95  
                  _TRISE 000F96             ___lltoft@exp 0023           __CFG_FCMEN$OFF 000000  
          ___awtoft@sign 001E          __end_of_dpowers 0829                    _count 0043  
                  _scale 11D8          __end_of_isdigit 2ADE            ___ftpack@sign 0017  
                  pclath 000FFA                    tablat 000FF5                    status 000FD8  
                  wtemp6 004E          __end_of_sprintf 11D8          __initialization 2B1A  
           __end_of_main 1B52                   ??_main 0043            ___fttol@sign1 006B  
          __activetblptr 000002            lcd_ubicarXY@i 0088     __size_of__tdiv_to_l_ 0132  
    lcd_ubicarXY@columna 0082         ___llmod@dividend 0013                   ?_scale 0036  
                 _ADRESH 000FC4                   _ADRESL 000FC3                   _T08BIT 007EAE  
       ___awdiv@dividend 0019                   _ADCint 0008         __end_of___awtoft 2A00  
       __end_of___ftpack 2572         __end_of___lltoft 2986         __end_of___lwtoft 2A9E  
                 _TMR0IF 007F92                   _TMR0ON 007EAF     __size_of_configBoard 00B0  
       __end_of__powers_ 0850     __end_of_lcd_caracter 285A                   ___ftge 2572  
   __size_of_lcd_iniciar 00E6                   ___wmul 2A30                ??___awdiv 001D  
              ??___ftadd 0040                ??___awmod 0017                ??___ftdiv 003C  
              ??___ftneg 0016                ??___lldiv 001B                ??___ftmul 002D  
              ??___llmod 001B                ??___ftsub 0043                ??___fttol 0066  
   __size_of_lcd_limpiar 001E          ADC_Read@channel 007B                   _fround 15E0  
                 clear_0 2B20         ___awdiv@quotient 001F          ___awmod@divisor 0015  
        ___awmod@counter 0017    ___ftmul@f3_as_product 0031                ??_isdigit 0013  
              ?_ADC_Read 007B             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8     __end_of_lcd_ubicarXY 277E  
              ??_sprintf 0078               __accesstop 0060  __end_of__initialization 2B26  
             ___ftadd@f1 0060               ___ftadd@f2 0063               ___ftge@ff1 0013  
             ___ftge@ff2 0016            ___rparam_used 000001               ___ftdiv@f1 0036  
             ___ftdiv@f2 0039               ___ftdiv@f3 0061               ___ftneg@f1 0013  
             ___awtoft@c 001B               ___ftmul@f1 0027               ___ftmul@f2 002A  
             ___ftsub@f1 0069               ___ftsub@f2 006C               ___fttol@f1 003F  
         __pcstackCOMRAM 0001               ___lltoft@c 001B            __end_of_scale 15E0  
             ___lwtoft@c 001B               __div_to_l_ 1C84               ??_ADC_Read 007D  
     __size_of_lcd_orden 006A       __size_of_lcd_texto 0030       __size_of_lcd_pulso 0022  
        __div_to_l_@exp1 001E          __div_to_l_@cntr 001D                  ??_scale 0039  
        __div_to_l_@quot 0019             sprintf@width 008F                  ?_ADCint 0001  
          __div_to_l_@f1 0013            __div_to_l_@f2 0016           lcd_orden@orden 007B  
                ?___ftge 0013                  ?___wmul 0021                  ?_fround 0036  
              ?___awtoft 001B                ?___ftpack 0013                ?___lltoft 001B  
              ?___lwtoft 001B               _lcd_origen 2ADE          __size_of_ADCint 240C  
  __size_of_lcd_caracter 006C        __end_of__npowers_ 0877                  __Hparam 0000  
             _scale$1583 0039                  __Lparam 0000        __end_of_lcd_orden 28C4  
        __size_of___ftge 0090        __end_of_lcd_texto 2A30        __end_of_lcd_pulso 2AC0  
                ___awdiv 2602                  ___ftadd 1832                  ___awmod 277E  
                ___ftdiv 20A8                  ___ftneg 2A56                  ___lldiv 2686  
        __size_of___wmul 0026                  ___ftmul 1FB4                  ___llmod 28C4  
                ___ftsub 2986                  ___fttol 1EBC             __psmallconst 0800  
                __pcinit 2B1A               ??___awtoft 001E               ??___ftpack 0018  
        __size_of_fround 0252                  __ramtop 0800               ??___lltoft 001F  
                __ptext0 19E0                  __ptext1 0884                  __ptext2 11D8  
                __ptext3 2AC0                  __ptext4 15E0                  __ptext5 2A30  
                __ptext6 1FB4                  __ptext7 277E                  __ptext8 2602  
                __ptext9 1B52               ??___lwtoft 001E                _T0CONbits 000FD5  
  __size_of_lcd_ubicarXY 0076              ?__div_to_l_ 0013                  _dpowers 0801  
                _isdigit 2AC0         ___awmod@dividend 0013             _lcd_caracter 27EE  
                main@an0 009A                  main@an1 009C                  _sprintf 0884  
                main@str 00A1           __pintcode_body 2346     end_of_initialization 2B26  
          __Lmediumconst 0000     wait_in_ms@time_in_ms 0071                  int_func 2346  
        ___lldiv@divisor 0017          ___lldiv@counter 001F                  postdec2 000FDD  
           _lcd_ubicarXY 2708                  postinc0 000FEE                  postinc2 000FDE  
             _wait_in_ms 2276           __tdiv_to_l_@f1 0013           __tdiv_to_l_@f2 0016  
          ??__tdiv_to_l_ 0019                _PORTAbits 000F80                _PORTDbits 000F83  
              _TRISAbits 000F92                _TRISBbits 000F93                _TRISDbits 000F95  
            ?_lcd_origen 0001        __size_of_ADC_Read 0110           __end_of_ADCint 2414  
            ___ftdiv@exp 0064            ??_configBoard 0013            ??_lcd_iniciar 0043  
    __size_of__div_to_l_ 0128            ??_lcd_limpiar 0043              ___ftmul@exp 0030  
      lcd_ubicarXY@i_695 0089        lcd_ubicarXY@linea 008A           __end_of___ftge 2602  
         __end_of___wmul 2A56           __end_of_fround 1832      start_initialization 2B1A  
    __end_of__tdiv_to_l_ 1C84          wait_in_ms@count 0077                 ??_ADCint 0001  
        ___llmod@divisor 0017          ___llmod@counter 001B       wait_in_ms@count_ms 0079  
               ??___ftge 0019                 ??___wmul 0025      __end_of_configBoard 24C4  
    __size_of_lcd_origen 001E              ?_wait_in_ms 0071      __end_of_lcd_iniciar 2276  
               ??_fround 0039      __end_of_lcd_limpiar 2B1A            sprintf@tmpval 0087  
             fround@prec 003F        __size_of___awtoft 0038        __size_of___ftpack 00AE  
      __size_of___lltoft 005C              __pbssCOMRAM 0043        __size_of___lwtoft 0024  
          __pcstackBANK0 0060             _isdigit$1223 0014              sprintf@flag 008D  
            sprintf@fval 0091              sprintf@prec 0094                __pintcode 0008  
               ?___awdiv 0019                 ?___ftadd 0060                 ?___awmod 0013  
               ?___ftdiv 0036                 ?___ftneg 0013                 ?___lldiv 0013  
               ?___ftmul 0027                 ?___llmod 0013                 ?___ftsub 0069  
              __npowers_ 0850                 ?___fttol 003F                _lcd_orden 285A  
            __tdiv_to_l_ 1B52                _lcd_texto 2A00                _lcd_pulso 2A9E  
           ??__div_to_l_ 0019              __smallconst 0800                 ?_isdigit 0001  
               _ADC_Read 1DAC                 ?_sprintf 0071           __size_of_scale 0408  
    __size_of_wait_in_ms 00D0           ___wmul@product 0025              _configBoard 2414  
               _PIE1bits 000F9D              _lcd_iniciar 2190                 _PIR1bits 000F9E  
     __end_of__div_to_l_ 1DAC              _lcd_limpiar 2AFC               ?_lcd_orden 007B  
             ?_lcd_texto 0082               ?_lcd_pulso 0001               _ADCON0bits 000FC2  
             _ADCON1bits 000FC1               _ADCON2bits 000FC0        ___wmul@multiplier 0021  
           ??_lcd_origen 0043              _INTCON2bits 000FF1              _INTCON3bits 000FF0  
         wait_in_ms@flag 0075                 __Hrparam 0000                 __Lrparam 0000  
     __end_of_lcd_origen 2AFC         __size_of___awdiv 0084         __size_of___ftadd 01AE  
       __size_of___awmod 0070         __size_of___ftdiv 00E8         __size_of___ftneg 0024  
       __size_of___lldiv 0082         __size_of___ftmul 00F4         __size_of___llmod 0066  
       __size_of___ftsub 0042         __size_of___fttol 00F8                 ___awtoft 29C8  
               ___ftpack 24C4              _fround$1581 003C              _fround$1582 0039  
               ___lltoft 292A                 ___lwtoft 2A7A               sprintf@exp 008B  
             sprintf@val 0083         __size_of_isdigit 001E                 __ptext10 1C84  
               __ptext11 292A                 __ptext20 2A00                 __ptext12 28C4  
               __ptext21 27EE                 __ptext13 2686                 __ptext30 1EBC  
               __ptext22 2AFC                 __ptext14 2986                 __ptext31 20A8  
               __ptext23 2190                 __ptext15 1832                 __ptext32 29C8  
               __ptext24 285A                 __ptext16 2A56                 __ptext33 24C4  
               __ptext25 2A9E                 __ptext17 2572                 __ptext26 2414  
               __ptext18 2708                 __ptext27 2A7A                 __ptext19 2ADE  
               __ptext28 1DAC                 __ptext29 2276                 __powers_ 0829  
        lcd_texto@cadena 0082                 _int0flag 004B                 _int1flag 0049  
               _int2flag 0047         __size_of_sprintf 0954                 _pir1flag 0045  
          __size_of_main 0172                 int$flags 004D             ??_wait_in_ms 0073  
            ??_lcd_orden 007D              ??_lcd_texto 0084              ??_lcd_pulso 0043  
  __CFG_CPUDIV$OSC1_PLL2 000000               _INTCONbits 000FF2                 isdigit@c 0015  
               scale@scl 003C                 intlevel2 0000                sprintf@ap 0081  
       __tdiv_to_l_@exp1 0021         __tdiv_to_l_@cntr 0020                sprintf@sp 0071  
       __tdiv_to_l_@quot 001C       __end_of_wait_in_ms 2346         ___lldiv@dividend 0013  
           ?__tdiv_to_l_ 0013                 sprintf@c 0096                 sprintf@f 0073  
       ___lldiv@quotient 001B            ?_lcd_caracter 007B       __CFG_FOSC$HSPLL_HS 000000  
           ?_configBoard 0001             ?_lcd_iniciar 0001          main@voltaje_an0 009E  
        main@voltaje_an1 0097             ?_lcd_limpiar 0001  
