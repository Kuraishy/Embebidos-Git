

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Apr 11 19:29:39 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1
    37                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text30,global,reloc=2,class=CODE,delta=1
    41                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    45                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    46                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    47                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    48  0000                     
    49                           ; Version 1.45
    50                           ; Generated 16/11/2017 GMT
    51                           ; 
    52                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    53                           ; All rights reserved.
    54                           ; 
    55                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    56                           ; 
    57                           ; Redistribution and use in source and binary forms, with or without modification, are
    58                           ; permitted provided that the following conditions are met:
    59                           ; 
    60                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    61                           ;        conditions and the following disclaimer.
    62                           ; 
    63                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    64                           ;        of conditions and the following disclaimer in the documentation and/or other
    65                           ;        materials provided with the distribution.
    66                           ; 
    67                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    68                           ;        software without specific prior written permission.
    69                           ; 
    70                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    71                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    72                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    73                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    74                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    75                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    76                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    77                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    78                           ; 
    79                           ; 
    80                           ; Code-generator required, PIC18F4550 Definitions
    81                           ; 
    82                           ; SFR Addresses
    83  0000                     
    84                           	psect	smallconst
    85  0000'                    __psmallconst:
    86                           	opt stack 0
    87  0000' 00                 	db	0
    88  0001'                    _dpowers:
    89                           	opt stack 0
    90  0001' 0001               	dw	1
    91  0003' 0000               	dw	0
    92  0005' 000A               	dw	10
    93  0007' 0000               	dw	0
    94  0009' 0064               	dw	100
    95  000B' 0000               	dw	0
    96  000D' 03E8               	dw	1000
    97  000F' 0000               	dw	0
    98  0011' 2710               	dw	10000
    99  0013' 0000               	dw	0
   100  0015' 86A0               	dw	34464
   101  0017' 0001               	dw	1
   102  0019' 4240               	dw	16960
   103  001B' 000F               	dw	15
   104  001D' 9680               	dw	38528
   105  001F' 0098               	dw	152
   106  0021' E100               	dw	57600
   107  0023' 05F5               	dw	1525
   108  0025' CA00               	dw	51712
   109  0027' 3B9A               	dw	15258
   110  0029'                    __end_of_dpowers:
   111                           	opt stack 0
   112  0029'                    __powers_:
   113                           	opt stack 0
   114  0029' 00                 	db	0
   115  002A' 80                 	db	128
   116  002B' 3F                 	db	63
   117  002C' 00                 	db	0
   118  002D' 20                 	db	32
   119  002E' 41                 	db	65
   120  002F' 00                 	db	0
   121  0030' C8                 	db	200
   122  0031' 42                 	db	66
   123  0032' 00                 	db	0
   124  0033' 7A                 	db	122
   125  0034' 44                 	db	68
   126  0035' 40                 	db	64
   127  0036' 1C                 	db	28
   128  0037' 46                 	db	70
   129  0038' 50                 	db	80
   130  0039' C3                 	db	195
   131  003A' 47                 	db	71
   132  003B' 24                 	db	36
   133  003C' 74                 	db	116
   134  003D' 49                 	db	73
   135  003E' 97                 	db	151
   136  003F' 18                 	db	24
   137  0040' 4B                 	db	75
   138  0041' BC                 	db	188
   139  0042' BE                 	db	190
   140  0043' 4C                 	db	76
   141  0044' 6B                 	db	107
   142  0045' 6E                 	db	110
   143  0046' 4E                 	db	78
   144  0047' 03                 	db	3
   145  0048' 15                 	db	21
   146  0049' 50                 	db	80
   147  004A' 79                 	db	121
   148  004B' AD                 	db	173
   149  004C' 60                 	db	96
   150  004D' F3                 	db	243
   151  004E' 49                 	db	73
   152  004F' 71                 	db	113
   153  0050'                    __end_of__powers_:
   154                           	opt stack 0
   155  0050'                    __npowers_:
   156                           	opt stack 0
   157  0050' 00                 	db	0
   158  0051' 80                 	db	128
   159  0052' 3F                 	db	63
   160  0053' CD                 	db	205
   161  0054' CC                 	db	204
   162  0055' 3D                 	db	61
   163  0056' D7                 	db	215
   164  0057' 23                 	db	35
   165  0058' 3C                 	db	60
   166  0059' 12                 	db	18
   167  005A' 83                 	db	131
   168  005B' 3A                 	db	58
   169  005C' B7                 	db	183
   170  005D' D1                 	db	209
   171  005E' 38                 	db	56
   172  005F' C6                 	db	198
   173  0060' 27                 	db	39
   174  0061' 37                 	db	55
   175  0062' 38                 	db	56
   176  0063' 86                 	db	134
   177  0064' 35                 	db	53
   178  0065' C0                 	db	192
   179  0066' D6                 	db	214
   180  0067' 33                 	db	51
   181  0068' CC                 	db	204
   182  0069' 2B                 	db	43
   183  006A' 32                 	db	50
   184  006B' 70                 	db	112
   185  006C' 89                 	db	137
   186  006D' 30                 	db	48
   187  006E' E7                 	db	231
   188  006F' DB                 	db	219
   189  0070' 2E                 	db	46
   190  0071' E5                 	db	229
   191  0072' 3C                 	db	60
   192  0073' 1E                 	db	30
   193  0074' 42                 	db	66
   194  0075' A2                 	db	162
   195  0076' 0D                 	db	13
   196  0077'                    __end_of__npowers_:
   197                           	opt stack 0
   198  0000                     _PORTAbits	set	3968
   199  0000                     _PORTDbits	set	3971
   200  0000                     _TRISDbits	set	3989
   201  0000                     _T0CONbits	set	4053
   202  0000                     _PIR1bits	set	3998
   203  0000                     _PIE1bits	set	3997
   204  0000                     _INTCON3bits	set	4080
   205  0000                     _INTCON2bits	set	4081
   206  0000                     _INTCONbits	set	4082
   207  0000                     _TRISAbits	set	3986
   208  0000                     _TRISBbits	set	3987
   209  0000                     _PORTE	set	3972
   210  0000                     _PORTD	set	3971
   211  0000                     _PORTC	set	3970
   212  0000                     _PORTB	set	3969
   213  0000                     _PORTA	set	3968
   214  0000                     _TRISE	set	3990
   215  0000                     _TRISD	set	3989
   216  0000                     _TRISC	set	3988
   217  0000                     _TRISB	set	3987
   218  0000                     _TRISA	set	3986
   219  0000                     _ADCON2bits	set	4032
   220  0000                     _ADCON1bits	set	4033
   221  0000                     _ADCON0bits	set	4034
   222  0000                     _TMR0L	set	4054
   223  0000                     _TMR0IF	set	32658
   224  0000                     _TMR0ON	set	32431
   225  0000                     _T08BIT	set	32430
   226  0000                     _IPEN	set	32391
   227  0077'                    STR_1:
   228  0077' 76                 	db	118	;'v'
   229  0078' 31                 	db	49	;'1'
   230  0079' 3D                 	db	61	;'='
   231  007A' 20                 	db	32
   232  007B' 25                 	db	37
   233  007C' 30                 	db	48	;'0'
   234  007D' 2E                 	db	46
   235  007E' 32                 	db	50	;'2'
   236  007F' 66                 	db	102	;'f'
   237  0080' 20                 	db	32
   238  0081' 00                 	db	0
   239                           
   240                           ; #config settings
   241  0082' 00                 	db	0	; dummy byte at the end
   242  0000                     
   243                           	psect	cinit
   244  0000'                    __pcinit:
   245                           	opt stack 0
   246  0000'                    start_initialization:
   247                           	opt stack 0
   248  0000'                    __initialization:
   249                           	opt stack 0
   250                           
   251                           ; Clear objects allocated to COMRAM (10 bytes)
   252  0000' EE00' F000'        	lfsr	0,__pbssCOMRAM
   253  0004' 0E0A               	movlw	10
   254  0006'                    clear_0:
   255  0006' 6AEE               	clrf	postinc0,c
   256  0008' 06E8               	decf	wreg,f,c
   257  000A' E1FD               	bnz	clear_0
   258  000C'                    end_of_initialization:
   259                           	opt stack 0
   260  000C'                    __end_of__initialization:
   261                           	opt stack 0
   262  000C' 9000'              	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   263  000E' 9200'              	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   264  0010' 0E00'              	movlw	low (__Lmediumconst shr (0+16))
   265  0012' 6EF8               	movwf	tblptru,c
   266  0014' 0100               	movlb	0
   267  0016' EF00' F000'        	goto	_main	;jump to C main() function
   268                           tblptru	equ	0xFF8
   269                           postinc0	equ	0xFEE
   270                           wreg	equ	0xFE8
   271                           
   272                           	psect	bssCOMRAM
   273  0000'                    __pbssCOMRAM:
   274                           	opt stack 0
   275  0000'                    _count:
   276                           	opt stack 0
   277  0000'                    	ds	2
   278  0002'                    _pir1flag:
   279                           	opt stack 0
   280  0002'                    	ds	2
   281  0004'                    _int2flag:
   282                           	opt stack 0
   283  0004'                    	ds	2
   284  0006'                    _int1flag:
   285                           	opt stack 0
   286  0006'                    	ds	2
   287  0008'                    _int0flag:
   288                           	opt stack 0
   289  0008'                    	ds	2
   290                           tblptru	equ	0xFF8
   291                           postinc0	equ	0xFEE
   292                           wreg	equ	0xFE8
   293                           
   294                           	psect	cstackBANK0
   295  0000'                    __pcstackBANK0:
   296                           	opt stack 0
   297  0000'                    ?___ftadd:
   298                           	opt stack 0
   299  0000'                    ___ftdiv@cntr:
   300                           	opt stack 0
   301  0000'                    ___ftadd@f1:
   302                           	opt stack 0
   303                           
   304                           ; 3 bytes @ 0x0
   305  0000'                    	ds	1
   306  0001'                    ___ftdiv@f3:
   307                           	opt stack 0
   308                           
   309                           ; 3 bytes @ 0x1
   310  0001'                    	ds	2
   311  0003'                    ___ftadd@f2:
   312                           	opt stack 0
   313                           
   314                           ; 3 bytes @ 0x3
   315  0003'                    	ds	1
   316  0004'                    ___ftdiv@exp:
   317                           	opt stack 0
   318                           
   319                           ; 1 bytes @ 0x4
   320  0004'                    	ds	1
   321  0005'                    ___ftdiv@sign:
   322                           	opt stack 0
   323                           
   324                           ; 1 bytes @ 0x5
   325  0005'                    	ds	1
   326  0006'                    ??___fttol:
   327  0006'                    ___ftadd@sign:
   328                           	opt stack 0
   329                           
   330                           ; 1 bytes @ 0x6
   331  0006'                    	ds	1
   332  0007'                    ___ftadd@exp2:
   333                           	opt stack 0
   334                           
   335                           ; 1 bytes @ 0x7
   336  0007'                    	ds	1
   337  0008'                    ___ftadd@exp1:
   338                           	opt stack 0
   339                           
   340                           ; 1 bytes @ 0x8
   341  0008'                    	ds	1
   342  0009'                    ?___ftsub:
   343                           	opt stack 0
   344  0009'                    ___ftsub@f1:
   345                           	opt stack 0
   346                           
   347                           ; 3 bytes @ 0x9
   348  0009'                    	ds	2
   349  000B'                    ___fttol@sign1:
   350                           	opt stack 0
   351                           
   352                           ; 1 bytes @ 0xB
   353  000B'                    	ds	1
   354  000C'                    ___ftsub@f2:
   355                           	opt stack 0
   356  000C'                    ___fttol@lval:
   357                           	opt stack 0
   358                           
   359                           ; 4 bytes @ 0xC
   360  000C'                    	ds	4
   361  0010'                    ___fttol@exp1:
   362                           	opt stack 0
   363                           
   364                           ; 1 bytes @ 0x10
   365  0010'                    	ds	1
   366  0011'                    ?_sprintf:
   367                           	opt stack 0
   368  0011'                    wait_in_ms@time_in_ms:
   369                           	opt stack 0
   370  0011'                    sprintf@sp:
   371                           	opt stack 0
   372                           
   373                           ; 2 bytes @ 0x11
   374  0011'                    	ds	2
   375  0013'                    ??_wait_in_ms:
   376  0013'                    sprintf@f:
   377                           	opt stack 0
   378                           
   379                           ; 2 bytes @ 0x13
   380  0013'                    	ds	2
   381  0015'                    wait_in_ms@flag:
   382                           	opt stack 0
   383                           
   384                           ; 2 bytes @ 0x15
   385  0015'                    	ds	2
   386  0017'                    wait_in_ms@count:
   387                           	opt stack 0
   388                           
   389                           ; 2 bytes @ 0x17
   390  0017'                    	ds	1
   391  0018'                    ??_sprintf:
   392                           
   393                           ; 1 bytes @ 0x18
   394  0018'                    	ds	1
   395  0019'                    wait_in_ms@count_ms:
   396                           	opt stack 0
   397                           
   398                           ; 2 bytes @ 0x19
   399  0019'                    	ds	2
   400  001B'                    lcd_orden@orden:
   401                           	opt stack 0
   402  001B'                    lcd_caracter@caracter:
   403                           	opt stack 0
   404                           
   405                           ; 2 bytes @ 0x1B
   406  001B'                    	ds	2
   407  001D'                    ??_lcd_orden:
   408  001D'                    ??_lcd_caracter:
   409                           
   410                           ; 1 bytes @ 0x1D
   411  001D'                    	ds	1
   412  001E'                    _sprintf$1581:
   413                           	opt stack 0
   414                           
   415                           ; 3 bytes @ 0x1E
   416  001E'                    	ds	3
   417  0021'                    sprintf@ap:
   418                           	opt stack 0
   419                           
   420                           ; 2 bytes @ 0x21
   421  0021'                    	ds	1
   422  0022'                    lcd_ubicarXY@columna:
   423                           	opt stack 0
   424  0022'                    lcd_texto@cadena:
   425                           	opt stack 0
   426                           
   427                           ; 2 bytes @ 0x22
   428  0022'                    	ds	1
   429  0023'                    ??_lcd_ubicarXY:
   430  0023'                    sprintf@val:
   431                           	opt stack 0
   432                           
   433                           ; 4 bytes @ 0x23
   434  0023'                    	ds	1
   435  0024'                    ??_lcd_texto:
   436                           
   437                           ; 1 bytes @ 0x24
   438  0024'                    	ds	3
   439  0027'                    sprintf@tmpval:
   440                           	opt stack 0
   441                           
   442                           ; 4 bytes @ 0x27
   443  0027'                    	ds	1
   444  0028'                    lcd_ubicarXY@i:
   445                           	opt stack 0
   446                           
   447                           ; 1 bytes @ 0x28
   448  0028'                    	ds	1
   449  0029'                    lcd_ubicarXY@i_695:
   450                           	opt stack 0
   451                           
   452                           ; 1 bytes @ 0x29
   453  0029'                    	ds	1
   454  002A'                    lcd_ubicarXY@linea:
   455                           	opt stack 0
   456                           
   457                           ; 1 bytes @ 0x2A
   458  002A'                    	ds	1
   459  002B'                    sprintf@exp:
   460                           	opt stack 0
   461                           
   462                           ; 2 bytes @ 0x2B
   463  002B'                    	ds	2
   464  002D'                    sprintf@flag:
   465                           	opt stack 0
   466                           
   467                           ; 2 bytes @ 0x2D
   468  002D'                    	ds	2
   469  002F'                    sprintf@width:
   470                           	opt stack 0
   471                           
   472                           ; 2 bytes @ 0x2F
   473  002F'                    	ds	2
   474  0031'                    sprintf@fval:
   475                           	opt stack 0
   476                           
   477                           ; 3 bytes @ 0x31
   478  0031'                    	ds	3
   479  0034'                    sprintf@prec:
   480                           	opt stack 0
   481                           
   482                           ; 2 bytes @ 0x34
   483  0034'                    	ds	2
   484  0036'                    sprintf@c:
   485                           	opt stack 0
   486                           
   487                           ; 1 bytes @ 0x36
   488  0036'                    	ds	1
   489  0037'                    main@voltaje_an1:
   490                           	opt stack 0
   491                           
   492                           ; 3 bytes @ 0x37
   493  0037'                    	ds	3
   494  003A'                    main@an0:
   495                           	opt stack 0
   496                           
   497                           ; 2 bytes @ 0x3A
   498  003A'                    	ds	2
   499  003C'                    main@an1:
   500                           	opt stack 0
   501                           
   502                           ; 2 bytes @ 0x3C
   503  003C'                    	ds	2
   504  003E'                    main@voltaje_an0:
   505                           	opt stack 0
   506                           
   507                           ; 3 bytes @ 0x3E
   508  003E'                    	ds	3
   509  0041'                    main@str:
   510                           	opt stack 0
   511                           
   512                           ; 2 bytes @ 0x41
   513  0041'                    	ds	2
   514                           tblptru	equ	0xFF8
   515                           postinc0	equ	0xFEE
   516                           wreg	equ	0xFE8
   517                           
   518                           	psect	cstackCOMRAM
   519  0000'                    __pcstackCOMRAM:
   520                           	opt stack 0
   521  0000'                    ??_ADCint:
   522  0000'                    ?_ADC_Read:
   523                           	opt stack 0
   524                           
   525                           ; 2 bytes @ 0x0
   526  0000'                    	ds	18
   527  0012'                    ??_isdigit:
   528  0012'                    ?___awmod:
   529                           	opt stack 0
   530  0012'                    ?___ftpack:
   531                           	opt stack 0
   532  0012'                    ?___ftneg:
   533                           	opt stack 0
   534  0012'                    ?__tdiv_to_l_:
   535                           	opt stack 0
   536  0012'                    ?__div_to_l_:
   537                           	opt stack 0
   538  0012'                    ?___lldiv:
   539                           	opt stack 0
   540  0012'                    ?___llmod:
   541                           	opt stack 0
   542  0012'                    ___awmod@dividend:
   543                           	opt stack 0
   544  0012'                    __div_to_l_@f1:
   545                           	opt stack 0
   546  0012'                    ___ftpack@arg:
   547                           	opt stack 0
   548  0012'                    __tdiv_to_l_@f1:
   549                           	opt stack 0
   550  0012'                    ___ftge@ff1:
   551                           	opt stack 0
   552  0012'                    ___ftneg@f1:
   553                           	opt stack 0
   554  0012'                    ___lldiv@dividend:
   555                           	opt stack 0
   556  0012'                    ___llmod@dividend:
   557                           	opt stack 0
   558                           
   559                           ; 4 bytes @ 0x12
   560  0012'                    	ds	1
   561  0013'                    _isdigit$1222:
   562                           	opt stack 0
   563                           
   564                           ; 1 bytes @ 0x13
   565  0013'                    	ds	1
   566  0014'                    isdigit@c:
   567                           	opt stack 0
   568  0014'                    ___awmod@divisor:
   569                           	opt stack 0
   570                           
   571                           ; 2 bytes @ 0x14
   572  0014'                    	ds	1
   573  0015'                    ___ftpack@exp:
   574                           	opt stack 0
   575  0015'                    __div_to_l_@f2:
   576                           	opt stack 0
   577  0015'                    __tdiv_to_l_@f2:
   578                           	opt stack 0
   579  0015'                    ___ftge@ff2:
   580                           	opt stack 0
   581                           
   582                           ; 3 bytes @ 0x15
   583  0015'                    	ds	1
   584  0016'                    ___awmod@counter:
   585                           	opt stack 0
   586  0016'                    ___ftpack@sign:
   587                           	opt stack 0
   588  0016'                    ___lldiv@divisor:
   589                           	opt stack 0
   590  0016'                    ___llmod@divisor:
   591                           	opt stack 0
   592                           
   593                           ; 4 bytes @ 0x16
   594  0016'                    	ds	1
   595  0017'                    ??___ftpack:
   596  0017'                    ___awmod@sign:
   597                           	opt stack 0
   598                           
   599                           ; 1 bytes @ 0x17
   600  0017'                    	ds	1
   601  0018'                    ??__tdiv_to_l_:
   602  0018'                    ??___ftge:
   603  0018'                    ?___awdiv:
   604                           	opt stack 0
   605  0018'                    ___awdiv@dividend:
   606                           	opt stack 0
   607  0018'                    __div_to_l_@quot:
   608                           	opt stack 0
   609                           
   610                           ; 4 bytes @ 0x18
   611  0018'                    	ds	2
   612  001A'                    ?___awtoft:
   613                           	opt stack 0
   614  001A'                    ?___lltoft:
   615                           	opt stack 0
   616  001A'                    ?___lwtoft:
   617                           	opt stack 0
   618  001A'                    ___llmod@counter:
   619                           	opt stack 0
   620  001A'                    ___awdiv@divisor:
   621                           	opt stack 0
   622  001A'                    ___awtoft@c:
   623                           	opt stack 0
   624  001A'                    ___lwtoft@c:
   625                           	opt stack 0
   626  001A'                    ___lldiv@quotient:
   627                           	opt stack 0
   628  001A'                    ___lltoft@c:
   629                           	opt stack 0
   630                           
   631                           ; 4 bytes @ 0x1A
   632  001A'                    	ds	1
   633  001B'                    __tdiv_to_l_@quot:
   634                           	opt stack 0
   635                           
   636                           ; 4 bytes @ 0x1B
   637  001B'                    	ds	1
   638  001C'                    ___awdiv@counter:
   639                           	opt stack 0
   640  001C'                    __div_to_l_@cntr:
   641                           	opt stack 0
   642                           
   643                           ; 1 bytes @ 0x1C
   644  001C'                    	ds	1
   645  001D'                    ___awdiv@sign:
   646                           	opt stack 0
   647  001D'                    ___awtoft@sign:
   648                           	opt stack 0
   649  001D'                    __div_to_l_@exp1:
   650                           	opt stack 0
   651                           
   652                           ; 1 bytes @ 0x1D
   653  001D'                    	ds	1
   654  001E'                    ??___lltoft:
   655  001E'                    ___lldiv@counter:
   656                           	opt stack 0
   657  001E'                    ___awdiv@quotient:
   658                           	opt stack 0
   659                           
   660                           ; 2 bytes @ 0x1E
   661  001E'                    	ds	1
   662  001F'                    __tdiv_to_l_@cntr:
   663                           	opt stack 0
   664                           
   665                           ; 1 bytes @ 0x1F
   666  001F'                    	ds	1
   667  0020'                    ?___wmul:
   668                           	opt stack 0
   669  0020'                    __tdiv_to_l_@exp1:
   670                           	opt stack 0
   671  0020'                    ___wmul@multiplier:
   672                           	opt stack 0
   673                           
   674                           ; 2 bytes @ 0x20
   675  0020'                    	ds	2
   676  0022'                    ___lltoft@exp:
   677                           	opt stack 0
   678  0022'                    ___wmul@multiplicand:
   679                           	opt stack 0
   680                           
   681                           ; 2 bytes @ 0x22
   682  0022'                    	ds	2
   683  0024'                    ___wmul@product:
   684                           	opt stack 0
   685                           
   686                           ; 2 bytes @ 0x24
   687  0024'                    	ds	2
   688  0026'                    ?___ftmul:
   689                           	opt stack 0
   690  0026'                    ___ftmul@f1:
   691                           	opt stack 0
   692                           
   693                           ; 3 bytes @ 0x26
   694  0026'                    	ds	3
   695  0029'                    ___ftmul@f2:
   696                           	opt stack 0
   697                           
   698                           ; 3 bytes @ 0x29
   699  0029'                    	ds	3
   700  002C'                    ??___ftmul:
   701                           
   702                           ; 1 bytes @ 0x2C
   703  002C'                    	ds	3
   704  002F'                    ___ftmul@exp:
   705                           	opt stack 0
   706                           
   707                           ; 1 bytes @ 0x2F
   708  002F'                    	ds	1
   709  0030'                    ___ftmul@f3_as_product:
   710                           	opt stack 0
   711                           
   712                           ; 3 bytes @ 0x30
   713  0030'                    	ds	3
   714  0033'                    ___ftmul@cntr:
   715                           	opt stack 0
   716                           
   717                           ; 1 bytes @ 0x33
   718  0033'                    	ds	1
   719  0034'                    ___ftmul@sign:
   720                           	opt stack 0
   721                           
   722                           ; 1 bytes @ 0x34
   723  0034'                    	ds	1
   724  0035'                    ?___ftdiv:
   725                           	opt stack 0
   726  0035'                    ?_fround:
   727                           	opt stack 0
   728  0035'                    ?_scale:
   729                           	opt stack 0
   730  0035'                    ___ftdiv@f1:
   731                           	opt stack 0
   732                           
   733                           ; 3 bytes @ 0x35
   734  0035'                    	ds	3
   735  0038'                    ___ftdiv@f2:
   736                           	opt stack 0
   737  0038'                    _fround$1579:
   738                           	opt stack 0
   739  0038'                    _scale$1580:
   740                           	opt stack 0
   741                           
   742                           ; 3 bytes @ 0x38
   743  0038'                    	ds	3
   744  003B'                    ??___ftdiv:
   745  003B'                    scale@scl:
   746                           	opt stack 0
   747  003B'                    _fround$1578:
   748                           	opt stack 0
   749                           
   750                           ; 3 bytes @ 0x3B
   751  003B'                    	ds	3
   752  003E'                    ?___fttol:
   753                           	opt stack 0
   754  003E'                    fround@prec:
   755                           	opt stack 0
   756  003E'                    ___fttol@f1:
   757                           	opt stack 0
   758                           
   759                           ; 3 bytes @ 0x3E
   760  003E'                    	ds	1
   761  003F'                    ??___ftadd:
   762                           
   763                           ; 1 bytes @ 0x3F
   764  003F'                    	ds	3
   765  0042'                    tblptru	equ	0xFF8
   766                           postinc0	equ	0xFEE
   767                           wreg	equ	0xFE8
   768                           
   769                           ; 1 bytes @ 0x42
   770 ;;
   771 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   772 ;;
   773 ;; *************** function _main *****************
   774 ;; Defined at:
   775 ;;		line 84 in file "main_ADC_b.c"
   776 ;; Parameters:    Size  Location     Type
   777 ;;		None
   778 ;; Auto vars:     Size  Location     Type
   779 ;;  voltaje_an0     3   62[BANK0 ] float 
   780 ;;  voltaje_an1     3   55[BANK0 ] float 
   781 ;;  str             2   65[BANK0 ] unsigned char [2]
   782 ;;  an1             2   60[BANK0 ] unsigned int 
   783 ;;  an0             2   58[BANK0 ] unsigned int 
   784 ;; Return value:  Size  Location     Type
   785 ;;                  1    wreg      void 
   786 ;; Registers used:
   787 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp, btemp+1, btemp+2, b
      +temp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tbl
      +ptru, prodl, prodh, bsr, cstack
   788 ;; Tracked objects:
   789 ;;		On entry : 0/0
   790 ;;		On exit  : 0/0
   791 ;;		Unchanged: 0/0
   792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   793 ;;      Params:         0       0       0       0       0       0       0       0       0
   794 ;;      Locals:         0      12       0       0       0       0       0       0       0
   795 ;;      Temps:          0       0       0       0       0       0       0       0       0
   796 ;;      Totals:         0      12       0       0       0       0       0       0       0
   797 ;;Total ram usage:       12 bytes
   798 ;; Hardware stack levels required when called:    8
   799 ;; This function calls:
   800 ;;		_ADC_Read
   801 ;;		___ftdiv
   802 ;;		___ftmul
   803 ;;		___lwtoft
   804 ;;		_configBoard
   805 ;;		_lcd_iniciar
   806 ;;		_lcd_limpiar
   807 ;;		_lcd_texto
   808 ;;		_lcd_ubicarXY
   809 ;;		_sprintf
   810 ;;		_wait_in_ms
   811 ;; This function is called by:
   812 ;;		Startup code after reset
   813 ;; This function uses a non-reentrant model
   814 ;;
   815                           
   816                           	psect	text0
   817  0000'                    __ptext0:
   818                           	opt stack 0
   819  0000'                    _main:
   820                           	opt stack 23
   821                           
   822                           ;main_ADC_b.c: 86: unsigned int an0;
   823                           ;main_ADC_b.c: 87: unsigned int an1;
   824                           ;main_ADC_b.c: 89: configBoard();
   825                           
   826                           ;incstack = 0
   827  0000' EC00' F000'        	call	_configBoard	;wreg free
   828                           
   829                           ;main_ADC_b.c: 91: lcd_iniciar();
   830  0004' EC00' F000'        	call	_lcd_iniciar	;wreg free
   831  0008'                    
   832                           ;main_ADC_b.c: 96: ADCON0bits.ADON = 1;
   833  0008' 80C2               	bsf	4034,0,c	;volatile
   834                           
   835                           ;main_ADC_b.c: 97: wait_in_ms(2);
   836  000A' 0E00               	movlw	0
   837  000C' 0100               	movlb	0	; () banked
   838  000E' 6F00'              	movwf	(wait_in_ms@time_in_ms+1)& (0+255),b
   839  0010' 0E02               	movlw	2
   840  0012' 6F00'              	movwf	wait_in_ms@time_in_ms& (0+255),b
   841  0014' EC00' F000'        	call	_wait_in_ms	;wreg free
   842                           
   843                           ;main_ADC_b.c: 99: TRISAbits.RA0=1;
   844  0018' 8092               	bsf	3986,0,c	;volatile
   845                           
   846                           ;main_ADC_b.c: 100: PORTAbits.RA0=0;
   847  001A' 9080               	bcf	3968,0,c	;volatile
   848                           
   849                           ;main_ADC_b.c: 101: ADCON0bits.GO_nDONE = 1;
   850  001C' 82C2               	bsf	4034,1,c	;volatile
   851  001E' B2C2               	btfsc	4034,1,c	;volatile
   852  0020' D7FE               	goto	l186
   853                           
   854                           ;main_ADC_b.c: 104: float voltaje_an0 = 0;
   855  0022' 0E00               	movlw	0
   856  0024' 0100               	movlb	0	; () banked
   857  0026' 6F00'              	movwf	main@voltaje_an0& (0+255),b
   858  0028' 0E00               	movlw	0
   859  002A' 6F00'              	movwf	(main@voltaje_an0+1)& (0+255),b
   860  002C' 0E00               	movlw	0
   861  002E' 6F00'              	movwf	(main@voltaje_an0+2)& (0+255),b
   862                           
   863                           ;main_ADC_b.c: 105: float voltaje_an1 = 0;
   864  0030' 0E00               	movlw	0
   865  0032' 6F00'              	movwf	main@voltaje_an1& (0+255),b
   866  0034' 0E00               	movlw	0
   867  0036' 6F00'              	movwf	(main@voltaje_an1+1)& (0+255),b
   868  0038' 0E00               	movlw	0
   869  003A' 6F00'              	movwf	(main@voltaje_an1+2)& (0+255),b
   870                           
   871                           ; BSR set to: 0
   872                           ;main_ADC_b.c: 107: an0 = ADC_Read(0);
   873  003C' 0E00               	movlw	0
   874  003E' 6E01'              	movwf	?_ADC_Read+1,c
   875  0040' 0E00               	movlw	0
   876  0042' 6E00'              	movwf	?_ADC_Read,c
   877  0044' EC00' F000'        	call	_ADC_Read	;wreg free
   878  0048' C000' F03A'        	movff	?_ADC_Read,main@an0
   879  004C' C001' F03B'        	movff	?_ADC_Read+1,main@an0+1
   880                           
   881                           ;main_ADC_b.c: 108: wait_in_ms(2);
   882  0050' 0E00               	movlw	0
   883  0052' 0100               	movlb	0	; () banked
   884  0054' 6F00'              	movwf	(wait_in_ms@time_in_ms+1)& (0+255),b
   885  0056' 0E02               	movlw	2
   886  0058' 6F00'              	movwf	wait_in_ms@time_in_ms& (0+255),b
   887  005A' EC00' F000'        	call	_wait_in_ms	;wreg free
   888                           
   889                           ;main_ADC_b.c: 109: an1 = ADC_Read(1);
   890  005E' 0E00               	movlw	0
   891  0060' 6E01'              	movwf	?_ADC_Read+1,c
   892  0062' 0E01               	movlw	1
   893  0064' 6E00'              	movwf	?_ADC_Read,c
   894  0066' EC00' F000'        	call	_ADC_Read	;wreg free
   895  006A' C000' F03C'        	movff	?_ADC_Read,main@an1
   896  006E' C001' F03D'        	movff	?_ADC_Read+1,main@an1+1
   897                           
   898                           ;main_ADC_b.c: 111: voltaje_an0 = (an0 * 4.47)/1023;
   899  0072' 0E0A               	movlw	10
   900  0074' 6E29'              	movwf	___ftmul@f2,c
   901  0076' 0E8F               	movlw	143
   902  0078' 6E2A'              	movwf	___ftmul@f2+1,c
   903  007A' 0E40               	movlw	64
   904  007C' 6E2B'              	movwf	___ftmul@f2+2,c
   905  007E' C03A' F01A'        	movff	main@an0,___lwtoft@c
   906  0082' C03B' F01B'        	movff	main@an0+1,___lwtoft@c+1
   907  0086' EC00' F000'        	call	___lwtoft	;wreg free
   908  008A' C01A' F026'        	movff	?___lwtoft,___ftmul@f1
   909  008E' C01B' F027'        	movff	?___lwtoft+1,___ftmul@f1+1
   910  0092' C01C' F028'        	movff	?___lwtoft+2,___ftmul@f1+2
   911  0096' EC00' F000'        	call	___ftmul	;wreg free
   912  009A' C026' F035'        	movff	?___ftmul,___ftdiv@f1
   913  009E' C027' F036'        	movff	?___ftmul+1,___ftdiv@f1+1
   914  00A2' C028' F037'        	movff	?___ftmul+2,___ftdiv@f1+2
   915  00A6' 0EC0               	movlw	192
   916  00A8' 6E38'              	movwf	___ftdiv@f2,c
   917  00AA' 0E7F               	movlw	127
   918  00AC' 6E39'              	movwf	___ftdiv@f2+1,c
   919  00AE' 0E44               	movlw	68
   920  00B0' 6E3A'              	movwf	___ftdiv@f2+2,c
   921  00B2' EC00' F000'        	call	___ftdiv	;wreg free
   922  00B6' C035' F03E'        	movff	?___ftdiv,main@voltaje_an0
   923  00BA' C036' F03F'        	movff	?___ftdiv+1,main@voltaje_an0+1
   924  00BE' C037' F040'        	movff	?___ftdiv+2,main@voltaje_an0+2
   925                           
   926                           ;main_ADC_b.c: 112: voltaje_an1 = (an1 * 4.47)/1023;
   927  00C2' 0E0A               	movlw	10
   928  00C4' 6E29'              	movwf	___ftmul@f2,c
   929  00C6' 0E8F               	movlw	143
   930  00C8' 6E2A'              	movwf	___ftmul@f2+1,c
   931  00CA' 0E40               	movlw	64
   932  00CC' 6E2B'              	movwf	___ftmul@f2+2,c
   933  00CE' C03C' F01A'        	movff	main@an1,___lwtoft@c
   934  00D2' C03D' F01B'        	movff	main@an1+1,___lwtoft@c+1
   935  00D6' EC00' F000'        	call	___lwtoft	;wreg free
   936  00DA' C01A' F026'        	movff	?___lwtoft,___ftmul@f1
   937  00DE' C01B' F027'        	movff	?___lwtoft+1,___ftmul@f1+1
   938  00E2' C01C' F028'        	movff	?___lwtoft+2,___ftmul@f1+2
   939  00E6' EC00' F000'        	call	___ftmul	;wreg free
   940  00EA' C026' F035'        	movff	?___ftmul,___ftdiv@f1
   941  00EE' C027' F036'        	movff	?___ftmul+1,___ftdiv@f1+1
   942  00F2' C028' F037'        	movff	?___ftmul+2,___ftdiv@f1+2
   943  00F6' 0EC0               	movlw	192
   944  00F8' 6E38'              	movwf	___ftdiv@f2,c
   945  00FA' 0E7F               	movlw	127
   946  00FC' 6E39'              	movwf	___ftdiv@f2+1,c
   947  00FE' 0E44               	movlw	68
   948  0100' 6E3A'              	movwf	___ftdiv@f2+2,c
   949  0102' EC00' F000'        	call	___ftdiv	;wreg free
   950  0106' C035' F037'        	movff	?___ftdiv,main@voltaje_an1
   951  010A' C036' F038'        	movff	?___ftdiv+1,main@voltaje_an1+1
   952  010E' C037' F039'        	movff	?___ftdiv+2,main@voltaje_an1+2
   953                           
   954                           ;main_ADC_b.c: 115: lcd_limpiar();
   955  0112' EC00' F000'        	call	_lcd_limpiar	;wreg free
   956                           
   957                           ;main_ADC_b.c: 117: char str[2];
   958                           ;main_ADC_b.c: 119: sprintf(str,"v1= %0.2f ",voltaje_an0);
   959  0116' 0E00'              	movlw	low main@str
   960  0118' 0100               	movlb	0	; () banked
   961  011A' 6F00'              	movwf	sprintf@sp& (0+255),b
   962  011C' 0E00'              	movlw	high main@str
   963  011E' 6F00'              	movwf	(sprintf@sp+1)& (0+255),b
   964  0120' 0E00'              	movlw	low STR_1
   965  0122' 6F00'              	movwf	sprintf@f& (0+255),b
   966  0124' 0E00'              	movlw	high STR_1
   967  0126' 6F00'              	movwf	(sprintf@f+1)& (0+255),b
   968  0128' C03E' F015'        	movff	main@voltaje_an0,?_sprintf+4
   969  012C' C03F' F016'        	movff	main@voltaje_an0+1,?_sprintf+5
   970  0130' C040' F017'        	movff	main@voltaje_an0+2,?_sprintf+6
   971  0134' EC00' F000'        	call	_sprintf	;wreg free
   972                           
   973                           ;main_ADC_b.c: 120: lcd_texto(str);
   974  0138' 0E00'              	movlw	low main@str
   975  013A' 0100               	movlb	0	; () banked
   976  013C' 6F00'              	movwf	lcd_texto@cadena& (0+255),b
   977  013E' 0E00'              	movlw	high main@str
   978  0140' 6F00'              	movwf	(lcd_texto@cadena+1)& (0+255),b
   979  0142' EC00' F000'        	call	_lcd_texto	;wreg free
   980                           
   981                           ;main_ADC_b.c: 123: lcd_ubicarXY(2,1);
   982  0146' 0E01               	movlw	1
   983  0148' 0100               	movlb	0	; () banked
   984  014A' 6F00'              	movwf	lcd_ubicarXY@columna& (0+255),b
   985  014C' 0E02               	movlw	2
   986  014E' EC00' F000'        	call	_lcd_ubicarXY
   987                           
   988                           ;main_ADC_b.c: 124: lcd_texto(str);
   989  0152' 0E00'              	movlw	low main@str
   990  0154' 0100               	movlb	0	; () banked
   991  0156' 6F00'              	movwf	lcd_texto@cadena& (0+255),b
   992  0158' 0E00'              	movlw	high main@str
   993  015A' 6F00'              	movwf	(lcd_texto@cadena+1)& (0+255),b
   994  015C' EC00' F000'        	call	_lcd_texto	;wreg free
   995                           
   996                           ;main_ADC_b.c: 126: wait_in_ms(200);
   997  0160' 0E00               	movlw	0
   998  0162' 0100               	movlb	0	; () banked
   999  0164' 6F00'              	movwf	(wait_in_ms@time_in_ms+1)& (0+255),b
  1000  0166' 0EC8               	movlw	200
  1001  0168' 6F00'              	movwf	wait_in_ms@time_in_ms& (0+255),b
  1002  016A' EC00' F000'        	call	_wait_in_ms	;wreg free
  1003  016E' D74C               	goto	l184
  1004  0170'                    __end_of_main:
  1005                           	opt stack 0
  1006                           tblptru	equ	0xFF8
  1007                           postinc0	equ	0xFEE
  1008                           wreg	equ	0xFE8
  1009                           
  1010 ;; *************** function _sprintf *****************
  1011 ;; Defined at:
  1012 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  1013 ;; Parameters:    Size  Location     Type
  1014 ;;  sp              2   17[BANK0 ] PTR unsigned char 
  1015 ;;		 -> main@str(2), 
  1016 ;;  f               2   19[BANK0 ] PTR const unsigned char 
  1017 ;;		 -> STR_1(11), 
  1018 ;; Auto vars:     Size  Location     Type
  1019 ;;  tmpval          4   39[BANK0 ] struct .
  1020 ;;  val             4   35[BANK0 ] unsigned long 
  1021 ;;  fval            3   49[BANK0 ] unsigned long 
  1022 ;;  cp              3    0        PTR const unsigned char 
  1023 ;;  prec            2   52[BANK0 ] int 
  1024 ;;  width           2   47[BANK0 ] int 
  1025 ;;  flag            2   45[BANK0 ] unsigned short 
  1026 ;;  exp             2   43[BANK0 ] int 
  1027 ;;  ap              2   33[BANK0 ] PTR void [1]
  1028 ;;		 -> ?_sprintf(2), 
  1029 ;;  len             2    0        unsigned int 
  1030 ;;  c               1   54[BANK0 ] char 
  1031 ;;  d               1    0        unsigned char 
  1032 ;; Return value:  Size  Location     Type
  1033 ;;                  2   17[BANK0 ] int 
  1034 ;; Registers used:
  1035 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1036 ;; Tracked objects:
  1037 ;;		On entry : 0/0
  1038 ;;		On exit  : 0/0
  1039 ;;		Unchanged: 0/0
  1040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1041 ;;      Params:         0       7       0       0       0       0       0       0       0
  1042 ;;      Locals:         0      25       0       0       0       0       0       0       0
  1043 ;;      Temps:          0       6       0       0       0       0       0       0       0
  1044 ;;      Totals:         0      38       0       0       0       0       0       0       0
  1045 ;;Total ram usage:       38 bytes
  1046 ;; Hardware stack levels used:    1
  1047 ;; Hardware stack levels required when called:    4
  1048 ;; This function calls:
  1049 ;;		___awdiv
  1050 ;;		___ftadd
  1051 ;;		___ftge
  1052 ;;		___ftmul
  1053 ;;		___ftneg
  1054 ;;		___ftsub
  1055 ;;		___fttol
  1056 ;;		___lldiv
  1057 ;;		___llmod
  1058 ;;		___lltoft
  1059 ;;		___wmul
  1060 ;;		__div_to_l_
  1061 ;;		__tdiv_to_l_
  1062 ;;		_fround
  1063 ;;		_isdigit
  1064 ;;		_scale
  1065 ;; This function is called by:
  1066 ;;		_main
  1067 ;; This function uses a non-reentrant model
  1068 ;;
  1069                           
  1070                           	psect	text1
  1071  0000'                    __ptext1:
  1072                           	opt stack 0
  1073  0000'                    _sprintf:
  1074                           	opt stack 26
  1075                           
  1076                           ;doprnt.c: 494: va_list ap;
  1077                           ;doprnt.c: 499: signed char c;
  1078                           ;doprnt.c: 501: int width;
  1079                           ;doprnt.c: 504: int prec;
  1080                           ;doprnt.c: 508: unsigned short flag;
  1081                           ;doprnt.c: 515: char d;
  1082                           ;doprnt.c: 516: double fval;
  1083                           ;doprnt.c: 517: int exp;
  1084                           ;doprnt.c: 523: union {
  1085                           ;doprnt.c: 524: unsigned long vd;
  1086                           ;doprnt.c: 525: double integ;
  1087                           ;doprnt.c: 526: } tmpval;
  1088                           ;doprnt.c: 528: unsigned long val;
  1089                           ;doprnt.c: 529: unsigned len;
  1090                           ;doprnt.c: 530: const char * cp;
  1091                           ;doprnt.c: 533: *ap = __va_start();
  1092                           
  1093                           ;incstack = 0
  1094  0000' 0E00'              	movlw	low (?_sprintf+4)
  1095  0002' 0100               	movlb	0	; () banked
  1096  0004' 6F00'              	movwf	sprintf@ap& (0+255),b
  1097  0006' 0E00'              	movlw	high (?_sprintf+4)
  1098  0008' 6F00'              	movwf	(sprintf@ap+1)& (0+255),b
  1099                           
  1100                           ;doprnt.c: 536: while(c = *f++) {
  1101  000A' EF00' F000'        	goto	l316
  1102  000E'                    
  1103                           ; BSR set to: 0
  1104                           ;doprnt.c: 538: if(c != '%')
  1105                           
  1106                           ; BSR set to: 0
  1107  000E' 0E25               	movlw	37
  1108  0010' 1900'              	xorwf	sprintf@c& (0+255),w,b
  1109  0012' B4D8               	btfsc	status,2,c
  1110  0014' D008               	goto	l227
  1111                           
  1112                           ; BSR set to: 0
  1113                           ;doprnt.c: 540: {
  1114                           ;doprnt.c: 541: ((*sp++ = (c)));
  1115  0016' C011' FFD9         	movff	sprintf@sp,fsr2l
  1116  001A' C012' FFDA         	movff	sprintf@sp+1,fsr2h
  1117  001E' C036' FFDF         	movff	sprintf@c,indf2
  1118  0022' EF00' F000'        	goto	l4007
  1119  0026'                    l227:
  1120                           
  1121                           ; BSR set to: 0
  1122                           ;doprnt.c: 543: }
  1123                           ;doprnt.c: 546: width = 0;
  1124                           
  1125                           ; BSR set to: 0
  1126  0026' 0E00               	movlw	0
  1127  0028' 6F00'              	movwf	(sprintf@width+1)& (0+255),b
  1128  002A' 0E00               	movlw	0
  1129  002C' 6F00'              	movwf	sprintf@width& (0+255),b
  1130                           
  1131                           ;doprnt.c: 548: flag = 0;
  1132  002E' 0E00               	movlw	0
  1133  0030' 6F00'              	movwf	(sprintf@flag+1)& (0+255),b
  1134  0032' 0E00               	movlw	0
  1135  0034' 6F00'              	movwf	sprintf@flag& (0+255),b
  1136                           
  1137                           ; BSR set to: 0
  1138                           ;doprnt.c: 551: switch(*f) {
  1139                           
  1140                           ;doprnt.c: 550: for(;;) {
  1141  0036' D004               	goto	l229
  1142  0038'                    
  1143                           ;doprnt.c: 580: flag |= 0x04;
  1144                           
  1145                           ; BSR set to: 0
  1146  0038' 0100               	movlb	0	; () banked
  1147  003A' 8500'              	bsf	sprintf@flag& (0+255),2,b
  1148                           
  1149                           ;doprnt.c: 581: f++;
  1150  003C' 4B00'              	infsnz	sprintf@f& (0+255),f,b
  1151  003E' 2B00'              	incf	(sprintf@f+1)& (0+255),f,b
  1152  0040'                    l229:
  1153                           
  1154                           ; BSR set to: 0
  1155  0040' C013' FFF6         	movff	sprintf@f,tblptrl
  1156  0044' C014' FFF7         	movff	sprintf@f+1,tblptrh
  1157  0048'                    	if	0	;tblptru may be non-zero
  1158  0048'                    	endif
  1159  0048'                    	if	0	;tblptru may be non-zero
  1160  0048'                    	endif
  1161  0048' 0008               	tblrd		*
  1162  004A' 50F5               	movf	tablat,w,c
  1163                           
  1164                           ; Switch size 1, requested type "space"
  1165                           ; Number of cases is 1, Range of values is 48 to 48
  1166                           ; switch strategies available:
  1167                           ; Name         Instructions Cycles
  1168                           ; simple_byte            4     3 (average)
  1169                           ;	Chosen strategy is simple_byte
  1170  004C' 0A30               	xorlw	48	; case 48
  1171  004E' B4D8               	btfsc	status,2,c
  1172  0050' D7F3               	goto	l230
  1173                           
  1174                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1175                           
  1176                           ;doprnt.c: 586: }
  1177                           
  1178                           ;doprnt.c: 585: break;
  1179  0052' C013' FFF6         	movff	sprintf@f,tblptrl
  1180  0056' C014' FFF7         	movff	sprintf@f+1,tblptrh
  1181  005A'                    	if	0	;tblptru may be non-zero
  1182  005A'                    	endif
  1183  005A'                    	if	0	;tblptru may be non-zero
  1184  005A'                    	endif
  1185  005A' 0008               	tblrd		*
  1186  005C' 50F5               	movf	tablat,w,c
  1187  005E' EC00' F000'        	call	_isdigit
  1188  0062' A0D8               	btfss	status,0,c
  1189  0064' D034               	goto	u3990
  1190                           
  1191                           ;doprnt.c: 598: width = 0;
  1192  0066' 0E00               	movlw	0
  1193  0068' 0100               	movlb	0	; () banked
  1194  006A' 6F00'              	movwf	(sprintf@width+1)& (0+255),b
  1195  006C' 0E00               	movlw	0
  1196  006E' 6F00'              	movwf	sprintf@width& (0+255),b
  1197  0070'                    
  1198                           ;doprnt.c: 600: width *= 10;
  1199                           
  1200                           ; BSR set to: 0
  1201  0070' C02F' F020'        	movff	sprintf@width,___wmul@multiplier
  1202  0074' C030' F021'        	movff	sprintf@width+1,___wmul@multiplier+1
  1203  0078' 0E00               	movlw	0
  1204  007A' 6E23'              	movwf	___wmul@multiplicand+1,c
  1205  007C' 0E0A               	movlw	10
  1206  007E' 6E22'              	movwf	___wmul@multiplicand,c
  1207  0080' EC00' F000'        	call	___wmul	;wreg free
  1208  0084' C020' F02F'        	movff	?___wmul,sprintf@width
  1209  0088' C021' F030'        	movff	?___wmul+1,sprintf@width+1
  1210                           
  1211                           ;doprnt.c: 601: width += *f++ - '0';
  1212  008C' 0ED0               	movlw	208
  1213  008E' 0100               	movlb	0	; () banked
  1214  0090' 6F00'              	movwf	??_sprintf& (0+255),b
  1215  0092' 0EFF               	movlw	255
  1216  0094' 6F00'              	movwf	(??_sprintf+1)& (0+255),b
  1217  0096' C013' FFF6         	movff	sprintf@f,tblptrl
  1218  009A' C014' FFF7         	movff	sprintf@f+1,tblptrh
  1219  009E'                    	if	0	;tblptru may be non-zero
  1220  009E'                    	endif
  1221  009E'                    	if	0	;tblptru may be non-zero
  1222  009E'                    	endif
  1223  009E' 0008               	tblrd		*
  1224  00A0' 50F5               	movf	tablat,w,c
  1225  00A2' 6F00'              	movwf	(??_sprintf+2)& (0+255),b
  1226  00A4' 6B00'              	clrf	(??_sprintf+3)& (0+255),b
  1227  00A6' 5100'              	movf	??_sprintf& (0+255),w,b
  1228  00A8' 2700'              	addwf	(??_sprintf+2)& (0+255),f,b
  1229  00AA' 5100'              	movf	(??_sprintf+1)& (0+255),w,b
  1230  00AC' 2300'              	addwfc	(??_sprintf+3)& (0+255),f,b
  1231  00AE' 5100'              	movf	(??_sprintf+2)& (0+255),w,b
  1232  00B0' 2700'              	addwf	sprintf@width& (0+255),f,b
  1233  00B2' 5100'              	movf	(??_sprintf+3)& (0+255),w,b
  1234  00B4' 2300'              	addwfc	(sprintf@width+1)& (0+255),f,b
  1235                           
  1236                           ; BSR set to: 0
  1237  00B6' 4B00'              	infsnz	sprintf@f& (0+255),f,b
  1238  00B8' 2B00'              	incf	(sprintf@f+1)& (0+255),f,b
  1239                           
  1240                           ; BSR set to: 0
  1241                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1242  00BA' C013' FFF6         	movff	sprintf@f,tblptrl
  1243  00BE' C014' FFF7         	movff	sprintf@f+1,tblptrh
  1244  00C2'                    	if	0	;tblptru may be non-zero
  1245  00C2'                    	endif
  1246  00C2'                    	if	0	;tblptru may be non-zero
  1247  00C2'                    	endif
  1248  00C2' 0008               	tblrd		*
  1249  00C4' 50F5               	movf	tablat,w,c
  1250  00C6' EC00' F000'        	call	_isdigit
  1251  00CA' B0D8               	btfsc	status,0,c
  1252  00CC' D7D1               	goto	l235
  1253  00CE'                    u3990:
  1254                           
  1255                           ;doprnt.c: 608: }
  1256                           ;doprnt.c: 611: if(*f == '.') {
  1257  00CE' C013' FFF6         	movff	sprintf@f,tblptrl
  1258  00D2' C014' FFF7         	movff	sprintf@f+1,tblptrh
  1259  00D6'                    	if	0	;tblptru may be non-zero
  1260  00D6'                    	endif
  1261  00D6'                    	if	0	;tblptru may be non-zero
  1262  00D6'                    	endif
  1263  00D6' 0008               	tblrd		*
  1264  00D8' 50F5               	movf	tablat,w,c
  1265  00DA' 0A2E               	xorlw	46
  1266  00DC' A4D8               	btfss	status,2,c
  1267  00DE' D030               	goto	l237
  1268                           
  1269                           ;doprnt.c: 612: flag |= 0x4000;
  1270  00E0' 0100               	movlb	0	; () banked
  1271  00E2' 8D00'              	bsf	(sprintf@flag+1)& (0+255),6,b
  1272                           
  1273                           ;doprnt.c: 613: f++;
  1274  00E4' 4B00'              	infsnz	sprintf@f& (0+255),f,b
  1275  00E6' 2B00'              	incf	(sprintf@f+1)& (0+255),f,b
  1276                           
  1277                           ; BSR set to: 0
  1278                           ;doprnt.c: 620: {
  1279                           ;doprnt.c: 621: prec = 0;
  1280  00E8' 0E00               	movlw	0
  1281  00EA' 6F00'              	movwf	(sprintf@prec+1)& (0+255),b
  1282  00EC' 0E00               	movlw	0
  1283  00EE' 6F00'              	movwf	sprintf@prec& (0+255),b
  1284                           
  1285                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1286  00F0' D01C               	goto	l238
  1287  00F2'                    
  1288                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1289                           
  1290                           ; BSR set to: 0
  1291  00F2' C034' F020'        	movff	sprintf@prec,___wmul@multiplier
  1292  00F6' C035' F021'        	movff	sprintf@prec+1,___wmul@multiplier+1
  1293  00FA' 0E00               	movlw	0
  1294  00FC' 6E23'              	movwf	___wmul@multiplicand+1,c
  1295  00FE' 0E0A               	movlw	10
  1296  0100' 6E22'              	movwf	___wmul@multiplicand,c
  1297  0102' EC00' F000'        	call	___wmul	;wreg free
  1298  0106' C013' FFF6         	movff	sprintf@f,tblptrl
  1299  010A' C014' FFF7         	movff	sprintf@f+1,tblptrh
  1300  010E'                    	if	0	;tblptru may be non-zero
  1301  010E'                    	endif
  1302  010E'                    	if	0	;tblptru may be non-zero
  1303  010E'                    	endif
  1304  010E' 0008               	tblrd		*
  1305  0110' 50F5               	movf	tablat,w,c
  1306  0112' 2620'              	addwf	?___wmul,f,c
  1307  0114' 0E00               	movlw	0
  1308  0116' 2221'              	addwfc	?___wmul+1,f,c
  1309  0118' 0ED0               	movlw	208
  1310  011A' 2420'              	addwf	?___wmul,w,c
  1311  011C' 0100               	movlb	0	; () banked
  1312  011E' 6F00'              	movwf	sprintf@prec& (0+255),b
  1313  0120' 0EFF               	movlw	255
  1314  0122' 2021'              	addwfc	?___wmul+1,w,c
  1315  0124' 6F00'              	movwf	(sprintf@prec+1)& (0+255),b
  1316                           
  1317                           ; BSR set to: 0
  1318  0126' 4B00'              	infsnz	sprintf@f& (0+255),f,b
  1319  0128' 2B00'              	incf	(sprintf@f+1)& (0+255),f,b
  1320  012A'                    l238:
  1321                           
  1322                           ; BSR set to: 0
  1323                           
  1324                           ; BSR set to: 0
  1325  012A' C013' FFF6         	movff	sprintf@f,tblptrl
  1326  012E' C014' FFF7         	movff	sprintf@f+1,tblptrh
  1327  0132'                    	if	0	;tblptru may be non-zero
  1328  0132'                    	endif
  1329  0132'                    	if	0	;tblptru may be non-zero
  1330  0132'                    	endif
  1331  0132' 0008               	tblrd		*
  1332  0134' 50F5               	movf	tablat,w,c
  1333  0136' EC00' F000'        	call	_isdigit
  1334  013A' A0D8               	btfss	status,0,c
  1335  013C' D00A               	goto	l242
  1336  013E' D7D9               	goto	l239
  1337  0140'                    l237:
  1338                           
  1339                           ;doprnt.c: 626: prec = 0;
  1340  0140' 0E00               	movlw	0
  1341  0142' 0100               	movlb	0	; () banked
  1342  0144' 6F00'              	movwf	(sprintf@prec+1)& (0+255),b
  1343  0146' 0E00               	movlw	0
  1344  0148' 6F00'              	movwf	sprintf@prec& (0+255),b
  1345                           
  1346                           ; BSR set to: 0
  1347                           ;doprnt.c: 628: flag |= 0x1000;
  1348  014A' 8900'              	bsf	(sprintf@flag+1)& (0+255),4,b
  1349                           
  1350                           ; BSR set to: 0
  1351                           ;doprnt.c: 630: }
  1352                           ;doprnt.c: 635: switch(c = *f++) {
  1353  014C' D002               	goto	l242
  1354  014E'                    
  1355                           ; BSR set to: 0
  1356                           ;doprnt.c: 663: flag |= 0x400;
  1357                           
  1358                           ; BSR set to: 0
  1359  014E' 8500'              	bsf	(sprintf@flag+1)& (0+255),2,b
  1360                           
  1361                           ;doprnt.c: 664: break;
  1362  0150' D012               	goto	l246
  1363  0152'                    l242:
  1364                           
  1365                           ; BSR set to: 0
  1366  0152' C013' FFF6         	movff	sprintf@f,tblptrl
  1367  0156' C014' FFF7         	movff	sprintf@f+1,tblptrh
  1368  015A' 0100               	movlb	0	; () banked
  1369  015C' 4B00'              	infsnz	sprintf@f& (0+255),f,b
  1370  015E' 2B00'              	incf	(sprintf@f+1)& (0+255),f,b
  1371  0160'                    	if	0	;tblptru may be non-zero
  1372  0160'                    	endif
  1373  0160'                    	if	0	;tblptru may be non-zero
  1374  0160'                    	endif
  1375  0160' 0008               	tblrd		*
  1376  0162' CFF5 F036'         	movff	tablat,sprintf@c
  1377  0166' 5100'              	movf	sprintf@c& (0+255),w,b
  1378                           
  1379                           ; Switch size 1, requested type "space"
  1380                           ; Number of cases is 2, Range of values is 0 to 102
  1381                           ; switch strategies available:
  1382                           ; Name         Instructions Cycles
  1383                           ; simple_byte            7     4 (average)
  1384                           ;	Chosen strategy is simple_byte
  1385  0168' 0A00               	xorlw	0	; case 0
  1386  016A' B4D8               	btfsc	status,2,c
  1387  016C' D3EC               	goto	u4480
  1388  016E' 0A66               	xorlw	102	; case 102
  1389  0170' B4D8               	btfsc	status,2,c
  1390  0172' D7ED               	goto	l245
  1391  0174' D3DB               	goto	l316
  1392  0176'                    l246:
  1393                           
  1394                           ; BSR set to: 0
  1395                           ;doprnt.c: 825: if(flag & (0x700)) {
  1396                           
  1397                           ; BSR set to: 0
  1398  0176' 0E07               	movlw	7
  1399  0178' 1500'              	andwf	(sprintf@flag+1)& (0+255),w,b
  1400  017A' B4D8               	btfsc	status,2,c
  1401  017C' D328               	goto	l248
  1402                           
  1403                           ; BSR set to: 0
  1404                           ;doprnt.c: 827: if(flag & 0x1000)
  1405  017E' A900'              	btfss	(sprintf@flag+1)& (0+255),4,b
  1406  0180' D004               	goto	l249
  1407                           
  1408                           ; BSR set to: 0
  1409                           ;doprnt.c: 829: prec = 6;
  1410  0182' 0E00               	movlw	0
  1411  0184' 6F00'              	movwf	(sprintf@prec+1)& (0+255),b
  1412  0186' 0E06               	movlw	6
  1413  0188' 6F00'              	movwf	sprintf@prec& (0+255),b
  1414  018A'                    l249:
  1415                           
  1416                           ; BSR set to: 0
  1417                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1418                           
  1419                           ; BSR set to: 0
  1420  018A' C021' FFD9         	movff	sprintf@ap,fsr2l
  1421  018E' C022' FFDA         	movff	sprintf@ap+1,fsr2h
  1422  0192' CFDE F031'         	movff	postinc2,sprintf@fval
  1423  0196' CFDE F032'         	movff	postinc2,sprintf@fval+1
  1424  019A' CFDD F033'         	movff	postdec2,sprintf@fval+2
  1425                           
  1426                           ; BSR set to: 0
  1427  019E' 0E03               	movlw	3
  1428  01A0' 2700'              	addwf	sprintf@ap& (0+255),f,b
  1429  01A2' 0E00               	movlw	0
  1430  01A4' 2300'              	addwfc	(sprintf@ap+1)& (0+255),f,b
  1431                           
  1432                           ; BSR set to: 0
  1433                           ;doprnt.c: 831: if(fval < 0.0) {
  1434  01A6' AF00'              	btfss	(sprintf@fval+2)& (0+255),7,b
  1435  01A8' D011               	goto	l250
  1436                           
  1437                           ; BSR set to: 0
  1438                           ;doprnt.c: 832: fval = -fval;
  1439  01AA' C031' F012'        	movff	sprintf@fval,___ftneg@f1
  1440  01AE' C032' F013'        	movff	sprintf@fval+1,___ftneg@f1+1
  1441  01B2' C033' F014'        	movff	sprintf@fval+2,___ftneg@f1+2
  1442  01B6' EC00' F000'        	call	___ftneg	;wreg free
  1443  01BA' C012' F031'        	movff	?___ftneg,sprintf@fval
  1444  01BE' C013' F032'        	movff	?___ftneg+1,sprintf@fval+1
  1445  01C2' C014' F033'        	movff	?___ftneg+2,sprintf@fval+2
  1446                           
  1447                           ;doprnt.c: 833: flag |= 0x03;
  1448  01C6' 0E03               	movlw	3
  1449  01C8' 0100               	movlb	0	; () banked
  1450  01CA' 1300'              	iorwf	sprintf@flag& (0+255),f,b
  1451  01CC'                    l250:
  1452                           
  1453                           ; BSR set to: 0
  1454                           ;doprnt.c: 834: }
  1455                           ;doprnt.c: 835: exp = 0;
  1456                           
  1457                           ; BSR set to: 0
  1458  01CC' 0E00               	movlw	0
  1459  01CE' 6F00'              	movwf	(sprintf@exp+1)& (0+255),b
  1460  01D0' 0E00               	movlw	0
  1461  01D2' 6F00'              	movwf	sprintf@exp& (0+255),b
  1462                           
  1463                           ; BSR set to: 0
  1464                           ;doprnt.c: 836: if( fval!=0) {
  1465  01D4' 5100'              	movf	sprintf@fval& (0+255),w,b
  1466  01D6' 1100'              	iorwf	(sprintf@fval+1)& (0+255),w,b
  1467  01D8' 1100'              	iorwf	(sprintf@fval+2)& (0+255),w,b
  1468  01DA' B4D8               	btfsc	status,2,c
  1469  01DC' D086               	goto	l255
  1470                           
  1471                           ; BSR set to: 0
  1472                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1473  01DE' 0E82               	movlw	130
  1474  01E0' 6F00'              	movwf	??_sprintf& (0+255),b
  1475  01E2' 0EFF               	movlw	255
  1476  01E4' 6F00'              	movwf	(??_sprintf+1)& (0+255),b
  1477  01E6' C031' F01A'        	movff	sprintf@fval,??_sprintf+2
  1478  01EA' C032' F01B'        	movff	sprintf@fval+1,??_sprintf+3
  1479  01EE' C033' F01C'        	movff	sprintf@fval+2,??_sprintf+4
  1480  01F2' C034' F01D'        	movff	sprintf@fval+3,??_sprintf+5
  1481  01F6' 0E10               	movlw	16
  1482  01F8' D005               	goto	u4060
  1483  01FA'                    u4065:
  1484  01FA' 90D8               	bcf	status,0,c
  1485  01FC' 3300'              	rrcf	(??_sprintf+5)& (0+255),f,b
  1486  01FE' 3300'              	rrcf	(??_sprintf+4)& (0+255),f,b
  1487  0200' 3300'              	rrcf	(??_sprintf+3)& (0+255),f,b
  1488  0202' 3300'              	rrcf	(??_sprintf+2)& (0+255),f,b
  1489  0204'                    u4060:
  1490  0204' 2EE8               	decfsz	wreg,f,c
  1491  0206' D7F9               	goto	u4065
  1492  0208' 5100'              	movf	(??_sprintf+2)& (0+255),w,b
  1493  020A' 2500'              	addwf	??_sprintf& (0+255),w,b
  1494  020C' 6F00'              	movwf	sprintf@exp& (0+255),b
  1495  020E' 0E00               	movlw	0
  1496  0210' 2100'              	addwfc	(??_sprintf+1)& (0+255),w,b
  1497  0212' 6F00'              	movwf	(sprintf@exp+1)& (0+255),b
  1498                           
  1499                           ; BSR set to: 0
  1500                           ;doprnt.c: 838: exp--;
  1501  0214' 0700'              	decf	sprintf@exp& (0+255),f,b
  1502  0216' A0D8               	btfss	status,0,c
  1503  0218' 0700'              	decf	(sprintf@exp+1)& (0+255),f,b
  1504                           
  1505                           ; BSR set to: 0
  1506                           ;doprnt.c: 839: exp *= 3;
  1507  021A' C02B' F020'        	movff	sprintf@exp,___wmul@multiplier
  1508  021E' C02C' F021'        	movff	sprintf@exp+1,___wmul@multiplier+1
  1509  0222' 0E00               	movlw	0
  1510  0224' 6E23'              	movwf	___wmul@multiplicand+1,c
  1511  0226' 0E03               	movlw	3
  1512  0228' 6E22'              	movwf	___wmul@multiplicand,c
  1513  022A' EC00' F000'        	call	___wmul	;wreg free
  1514  022E' C020' F02B'        	movff	?___wmul,sprintf@exp
  1515  0232' C021' F02C'        	movff	?___wmul+1,sprintf@exp+1
  1516                           
  1517                           ;doprnt.c: 840: exp /= 10;
  1518  0236' C02B' F018'        	movff	sprintf@exp,___awdiv@dividend
  1519  023A' C02C' F019'        	movff	sprintf@exp+1,___awdiv@dividend+1
  1520  023E' 0E00               	movlw	0
  1521  0240' 6E1B'              	movwf	___awdiv@divisor+1,c
  1522  0242' 0E0A               	movlw	10
  1523  0244' 6E1A'              	movwf	___awdiv@divisor,c
  1524  0246' EC00' F000'        	call	___awdiv	;wreg free
  1525  024A' C018' F02B'        	movff	?___awdiv,sprintf@exp
  1526  024E' C019' F02C'        	movff	?___awdiv+1,sprintf@exp+1
  1527                           
  1528                           ;doprnt.c: 841: if(exp < 0)
  1529  0252' 0100               	movlb	0	; () banked
  1530  0254' AF00'              	btfss	(sprintf@exp+1)& (0+255),7,b
  1531  0256' D003               	goto	l252
  1532                           
  1533                           ; BSR set to: 0
  1534                           ;doprnt.c: 842: exp--;
  1535  0258' 0700'              	decf	sprintf@exp& (0+255),f,b
  1536  025A' A0D8               	btfss	status,0,c
  1537  025C' 0700'              	decf	(sprintf@exp+1)& (0+255),f,b
  1538  025E'                    l252:
  1539                           
  1540                           ; BSR set to: 0
  1541                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1542                           
  1543                           ; BSR set to: 0
  1544  025E' 5100'              	movf	sprintf@exp& (0+255),w,b
  1545  0260' 0800               	sublw	0
  1546  0262' EC00' F000'        	call	_scale
  1547  0266' C035' F027'        	movff	?_scale,sprintf@tmpval
  1548  026A' C036' F028'        	movff	?_scale+1,sprintf@tmpval+1
  1549  026E' C037' F029'        	movff	?_scale+2,sprintf@tmpval+2
  1550                           
  1551                           ;doprnt.c: 847: tmpval.integ *= fval;
  1552  0272' C027' F026'        	movff	sprintf@tmpval,___ftmul@f1
  1553  0276' C028' F027'        	movff	sprintf@tmpval+1,___ftmul@f1+1
  1554  027A' C029' F028'        	movff	sprintf@tmpval+2,___ftmul@f1+2
  1555  027E' C031' F029'        	movff	sprintf@fval,___ftmul@f2
  1556  0282' C032' F02A'        	movff	sprintf@fval+1,___ftmul@f2+1
  1557  0286' C033' F02B'        	movff	sprintf@fval+2,___ftmul@f2+2
  1558  028A' EC00' F000'        	call	___ftmul	;wreg free
  1559  028E' C026' F027'        	movff	?___ftmul,sprintf@tmpval
  1560  0292' C027' F028'        	movff	?___ftmul+1,sprintf@tmpval+1
  1561  0296' C028' F029'        	movff	?___ftmul+2,sprintf@tmpval+2
  1562                           
  1563                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1564  029A' C027' F012'        	movff	sprintf@tmpval,___ftge@ff1
  1565  029E' C028' F013'        	movff	sprintf@tmpval+1,___ftge@ff1+1
  1566  02A2' C029' F014'        	movff	sprintf@tmpval+2,___ftge@ff1+2
  1567  02A6' 0E00               	movlw	0
  1568  02A8' 6E15'              	movwf	___ftge@ff2,c
  1569  02AA' 0E80               	movlw	128
  1570  02AC' 6E16'              	movwf	___ftge@ff2+1,c
  1571  02AE' 0E3F               	movlw	63
  1572  02B0' 6E17'              	movwf	___ftge@ff2+2,c
  1573  02B2' EC00' F000'        	call	___ftge	;wreg free
  1574  02B6' B0D8               	btfsc	status,0,c
  1575  02B8' D005               	goto	l253
  1576                           
  1577                           ;doprnt.c: 849: exp--;
  1578  02BA' 0100               	movlb	0	; () banked
  1579  02BC' 0700'              	decf	sprintf@exp& (0+255),f,b
  1580  02BE' A0D8               	btfss	status,0,c
  1581  02C0' 0700'              	decf	(sprintf@exp+1)& (0+255),f,b
  1582  02C2' D013               	goto	l255
  1583  02C4'                    l253:
  1584                           
  1585                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1586                           
  1587                           ; BSR set to: 0
  1588  02C4' C027' F012'        	movff	sprintf@tmpval,___ftge@ff1
  1589  02C8' C028' F013'        	movff	sprintf@tmpval+1,___ftge@ff1+1
  1590  02CC' C029' F014'        	movff	sprintf@tmpval+2,___ftge@ff1+2
  1591  02D0' 0E00               	movlw	0
  1592  02D2' 6E15'              	movwf	___ftge@ff2,c
  1593  02D4' 0E20               	movlw	32
  1594  02D6' 6E16'              	movwf	___ftge@ff2+1,c
  1595  02D8' 0E41               	movlw	65
  1596  02DA' 6E17'              	movwf	___ftge@ff2+2,c
  1597  02DC' EC00' F000'        	call	___ftge	;wreg free
  1598  02E0' A0D8               	btfss	status,0,c
  1599  02E2' D003               	goto	l255
  1600                           
  1601                           ;doprnt.c: 851: exp++;
  1602  02E4' 0100               	movlb	0	; () banked
  1603  02E6' 4B00'              	infsnz	sprintf@exp& (0+255),f,b
  1604  02E8' 2B00'              	incf	(sprintf@exp+1)& (0+255),f,b
  1605  02EA'                    l255:
  1606                           
  1607                           ;doprnt.c: 852: }
  1608                           ;doprnt.c: 1112: if(prec <= 12)
  1609                           
  1610                           ; BSR set to: 0
  1611                           
  1612                           ; BSR set to: 0
  1613                           
  1614                           ; BSR set to: 0
  1615  02EA' 0100               	movlb	0	; () banked
  1616  02EC' BF00'              	btfsc	(sprintf@prec+1)& (0+255),7,b
  1617  02EE' D006               	goto	u4100
  1618  02F0' 5100'              	movf	(sprintf@prec+1)& (0+255),w,b
  1619  02F2' E11B               	bnz	l3813
  1620  02F4' 0E0D               	movlw	13
  1621  02F6' 5D00'              	subwf	sprintf@prec& (0+255),w,b
  1622  02F8' B0D8               	btfsc	status,0,c
  1623  02FA' D017               	goto	l256
  1624  02FC'                    u4100:
  1625                           
  1626                           ; BSR set to: 0
  1627                           ;doprnt.c: 1113: fval += fround(prec);
  1628  02FC' C031' F000'        	movff	sprintf@fval,___ftadd@f1
  1629  0300' C032' F001'        	movff	sprintf@fval+1,___ftadd@f1+1
  1630  0304' C033' F002'        	movff	sprintf@fval+2,___ftadd@f1+2
  1631  0308' 5100'              	movf	sprintf@prec& (0+255),w,b
  1632  030A' EC00' F000'        	call	_fround
  1633  030E' C035' F003'        	movff	?_fround,___ftadd@f2
  1634  0312' C036' F004'        	movff	?_fround+1,___ftadd@f2+1
  1635  0316' C037' F005'        	movff	?_fround+2,___ftadd@f2+2
  1636  031A' EC00' F000'        	call	___ftadd	;wreg free
  1637  031E' C000' F031'        	movff	?___ftadd,sprintf@fval
  1638  0322' C001' F032'        	movff	?___ftadd+1,sprintf@fval+1
  1639  0326' C002' F033'        	movff	?___ftadd+2,sprintf@fval+2
  1640  032A'                    l256:
  1641  032A'                    l3813:
  1642                           
  1643                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1644  032A' 0100               	movlb	0	; () banked
  1645  032C' BF00'              	btfsc	(sprintf@exp+1)& (0+255),7,b
  1646  032E' D006               	goto	u4110
  1647  0330' 5100'              	movf	(sprintf@exp+1)& (0+255),w,b
  1648  0332' E120               	bnz	l3821
  1649  0334' 0E0A               	movlw	10
  1650  0336' 5D00'              	subwf	sprintf@exp& (0+255),w,b
  1651  0338' B0D8               	btfsc	status,0,c
  1652  033A' D01C               	goto	u4140
  1653  033C'                    u4110:
  1654                           
  1655                           ; BSR set to: 0
  1656  033C' 5100'              	movf	sprintf@fval& (0+255),w,b
  1657  033E' 1100'              	iorwf	(sprintf@fval+1)& (0+255),w,b
  1658  0340' 1100'              	iorwf	(sprintf@fval+2)& (0+255),w,b
  1659  0342' B4D8               	btfsc	status,2,c
  1660  0344' D056               	goto	l257
  1661                           
  1662                           ; BSR set to: 0
  1663  0346' C031' F03E'        	movff	sprintf@fval,___fttol@f1
  1664  034A' C032' F03F'        	movff	sprintf@fval+1,___fttol@f1+1
  1665  034E' C033' F040'        	movff	sprintf@fval+2,___fttol@f1+2
  1666  0352' EC00' F000'        	call	___fttol	;wreg free
  1667  0356' 503E'              	movf	?___fttol,w,c
  1668  0358' 103F'              	iorwf	?___fttol+1,w,c
  1669  035A' 1040'              	iorwf	?___fttol+2,w,c
  1670  035C' 1041'              	iorwf	?___fttol+3,w,c
  1671  035E' A4D8               	btfss	status,2,c
  1672  0360' D048               	goto	l257
  1673  0362' 0100               	movlb	0	; () banked
  1674  0364' BF00'              	btfsc	(sprintf@exp+1)& (0+255),7,b
  1675  0366' D045               	goto	l257
  1676  0368' 5100'              	movf	(sprintf@exp+1)& (0+255),w,b
  1677  036A' E104               	bnz	l3821
  1678  036C' 0E02               	movlw	2
  1679  036E' 5D00'              	subwf	sprintf@exp& (0+255),w,b
  1680  0370' A0D8               	btfss	status,0,c
  1681  0372' D03F               	goto	l257
  1682  0374'                    u4140:
  1683  0374'                    l3821:
  1684                           
  1685                           ; BSR set to: 0
  1686                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  1687  0374' C027' F012'        	movff	sprintf@tmpval,___ftge@ff1
  1688  0378' C028' F013'        	movff	sprintf@tmpval+1,___ftge@ff1+1
  1689  037C' C029' F014'        	movff	sprintf@tmpval+2,___ftge@ff1+2
  1690  0380' 0E70               	movlw	112
  1691  0382' 6E15'              	movwf	___ftge@ff2,c
  1692  0384' 0E89               	movlw	137
  1693  0386' 6E16'              	movwf	___ftge@ff2+1,c
  1694  0388' 0E40               	movlw	64
  1695  038A' 6E17'              	movwf	___ftge@ff2+2,c
  1696  038C' EC00' F000'        	call	___ftge	;wreg free
  1697  0390' B0D8               	btfsc	status,0,c
  1698  0392' D003               	goto	l260
  1699                           
  1700                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1701  0394' 0100               	movlb	0	; () banked
  1702  0396' 0EF7               	movlw	247
  1703  0398' D002               	goto	L1
  1704  039A'                    l260:
  1705                           
  1706                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1707                           
  1708                           ; BSR set to: 0
  1709  039A' 0100               	movlb	0	; () banked
  1710  039C' 0EF8               	movlw	248
  1711  039E'                    L1:
  1712  039E' 2700'              	addwf	sprintf@exp& (0+255),f,b
  1713  03A0' 0EFF               	movlw	255
  1714  03A2' 2300'              	addwfc	(sprintf@exp+1)& (0+255),f,b
  1715                           
  1716                           ; BSR set to: 0
  1717                           ;doprnt.c: 1124: }
  1718                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  1719                           
  1720                           ; BSR set to: 0
  1721  03A4' 5100'              	movf	sprintf@exp& (0+255),w,b
  1722  03A6' EC00' F000'        	call	_scale
  1723  03AA' C035' F027'        	movff	?_scale,sprintf@tmpval
  1724  03AE' C036' F028'        	movff	?_scale+1,sprintf@tmpval+1
  1725  03B2' C037' F029'        	movff	?_scale+2,sprintf@tmpval+2
  1726                           
  1727                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  1728  03B6' C031' F012'        	movff	sprintf@fval,__tdiv_to_l_@f1
  1729  03BA' C032' F013'        	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  1730  03BE' C033' F014'        	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  1731  03C2' C027' F015'        	movff	sprintf@tmpval,__tdiv_to_l_@f2
  1732  03C6' C028' F016'        	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  1733  03CA' C029' F017'        	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  1734  03CE' EC00' F000'        	call	__tdiv_to_l_	;wreg free
  1735  03D2' C012' F023'        	movff	?__tdiv_to_l_,sprintf@val
  1736  03D6' C013' F024'        	movff	?__tdiv_to_l_+1,sprintf@val+1
  1737  03DA' C014' F025'        	movff	?__tdiv_to_l_+2,sprintf@val+2
  1738  03DE' C015' F026'        	movff	?__tdiv_to_l_+3,sprintf@val+3
  1739                           
  1740                           ;doprnt.c: 1129: fval = 0.0;
  1741  03E2' 0E00               	movlw	0
  1742  03E4' 0100               	movlb	0	; () banked
  1743  03E6' 6F00'              	movwf	sprintf@fval& (0+255),b
  1744  03E8' 0E00               	movlw	0
  1745  03EA' 6F00'              	movwf	(sprintf@fval+1)& (0+255),b
  1746  03EC' 0E00               	movlw	0
  1747  03EE' 6F00'              	movwf	(sprintf@fval+2)& (0+255),b
  1748                           
  1749                           ;doprnt.c: 1130: } else {
  1750  03F0' D033               	goto	l266
  1751  03F2'                    l257:
  1752                           
  1753                           ;doprnt.c: 1131: val = (unsigned long)fval;
  1754                           
  1755                           ; BSR set to: 0
  1756  03F2' C031' F03E'        	movff	sprintf@fval,___fttol@f1
  1757  03F6' C032' F03F'        	movff	sprintf@fval+1,___fttol@f1+1
  1758  03FA' C033' F040'        	movff	sprintf@fval+2,___fttol@f1+2
  1759  03FE' EC00' F000'        	call	___fttol	;wreg free
  1760  0402' C03E' F023'        	movff	?___fttol,sprintf@val
  1761  0406' C03F' F024'        	movff	?___fttol+1,sprintf@val+1
  1762  040A' C040' F025'        	movff	?___fttol+2,sprintf@val+2
  1763  040E' C041' F026'        	movff	?___fttol+3,sprintf@val+3
  1764                           
  1765                           ;doprnt.c: 1132: fval -= (double)val;
  1766  0412' C031' F009'        	movff	sprintf@fval,___ftsub@f1
  1767  0416' C032' F00A'        	movff	sprintf@fval+1,___ftsub@f1+1
  1768  041A' C033' F00B'        	movff	sprintf@fval+2,___ftsub@f1+2
  1769  041E' C023' F01A'        	movff	sprintf@val,___lltoft@c
  1770  0422' C024' F01B'        	movff	sprintf@val+1,___lltoft@c+1
  1771  0426' C025' F01C'        	movff	sprintf@val+2,___lltoft@c+2
  1772  042A' C026' F01D'        	movff	sprintf@val+3,___lltoft@c+3
  1773  042E' EC00' F000'        	call	___lltoft	;wreg free
  1774  0432' C01A' F00C'        	movff	?___lltoft,___ftsub@f2
  1775  0436' C01B' F00D'        	movff	?___lltoft+1,___ftsub@f2+1
  1776  043A' C01C' F00E'        	movff	?___lltoft+2,___ftsub@f2+2
  1777  043E' EC00' F000'        	call	___ftsub	;wreg free
  1778  0442' C009' F031'        	movff	?___ftsub,sprintf@fval
  1779  0446' C00A' F032'        	movff	?___ftsub+1,sprintf@fval+1
  1780  044A' C00B' F033'        	movff	?___ftsub+2,sprintf@fval+2
  1781                           
  1782                           ;doprnt.c: 1133: exp = 0;
  1783  044E' 0E00               	movlw	0
  1784  0450' 0100               	movlb	0	; () banked
  1785  0452' 6F00'              	movwf	(sprintf@exp+1)& (0+255),b
  1786  0454' 0E00               	movlw	0
  1787  0456' 6F00'              	movwf	sprintf@exp& (0+255),b
  1788  0458'                    l266:
  1789                           
  1790                           ; BSR set to: 0
  1791                           ;doprnt.c: 1134: }
  1792                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  1793                           
  1794                           ; BSR set to: 0
  1795  0458' 0E01               	movlw	1
  1796  045A' 6F00'              	movwf	sprintf@c& (0+255),b
  1797  045C'                    l3841:
  1798                           
  1799                           ; BSR set to: 0
  1800  045C' 0E0A               	movlw	10
  1801  045E' 1900'              	xorwf	sprintf@c& (0+255),w,b
  1802  0460' B4D8               	btfsc	status,2,c
  1803  0462' D018               	goto	u4180
  1804                           
  1805                           ; BSR set to: 0
  1806                           ;doprnt.c: 1137: if(val < dpowers[c])
  1807                           
  1808                           ; BSR set to: 0
  1809                           
  1810                           ; BSR set to: 0
  1811  0464' 5100'              	movf	sprintf@c& (0+255),w,b
  1812  0466' 0D04               	mullw	4
  1813  0468' 0E00'              	movlw	low _dpowers
  1814  046A' 24F3               	addwf	prodl,w,c
  1815  046C' 6EF6               	movwf	tblptrl,c
  1816  046E' 0E00'              	movlw	high _dpowers
  1817  0470' 20F4               	addwfc	prodh,w,c
  1818  0472' 6EF7               	movwf	tblptrh,c
  1819  0474'                    	if	0	;There are less than 3 active tblptr bytes
  1820  0474'                    	endif
  1821  0474' 0009               	tblrd		*+
  1822  0476' 50F5               	movf	tablat,w,c
  1823  0478' 5D00'              	subwf	sprintf@val& (0+255),w,b
  1824  047A' 0009               	tblrd		*+
  1825  047C' 50F5               	movf	tablat,w,c
  1826  047E' 5900'              	subwfb	(sprintf@val+1)& (0+255),w,b
  1827  0480' 0009               	tblrd		*+
  1828  0482' 50F5               	movf	tablat,w,c
  1829  0484' 5900'              	subwfb	(sprintf@val+2)& (0+255),w,b
  1830  0486' 0009               	tblrd		*+
  1831  0488' 50F5               	movf	tablat,w,c
  1832  048A' 5900'              	subwfb	(sprintf@val+3)& (0+255),w,b
  1833  048C' A0D8               	btfss	status,0,c
  1834  048E' D002               	goto	u4180
  1835                           
  1836                           ; BSR set to: 0
  1837                           
  1838                           ; BSR set to: 0
  1839                           
  1840                           ; BSR set to: 0
  1841                           ;doprnt.c: 1138: break;
  1842  0490' 2B00'              	incf	sprintf@c& (0+255),f,b
  1843  0492' D7E4               	goto	l3841
  1844  0494'                    u4180:
  1845                           
  1846                           ; BSR set to: 0
  1847                           ;doprnt.c: 1142: width -= prec + c + exp;
  1848                           
  1849                           ; BSR set to: 0
  1850  0494' C036' F018'        	movff	sprintf@c,??_sprintf
  1851  0498' 6B00'              	clrf	(??_sprintf+1)& (0+255),b
  1852  049A' BF00'              	btfsc	??_sprintf& (0+255),7,b
  1853  049C' 0700'              	decf	(??_sprintf+1)& (0+255),f,b
  1854  049E' 5100'              	movf	sprintf@prec& (0+255),w,b
  1855  04A0' 2700'              	addwf	??_sprintf& (0+255),f,b
  1856  04A2' 5100'              	movf	(sprintf@prec+1)& (0+255),w,b
  1857  04A4' 2300'              	addwfc	(??_sprintf+1)& (0+255),f,b
  1858  04A6' 5100'              	movf	sprintf@exp& (0+255),w,b
  1859  04A8' 2700'              	addwf	??_sprintf& (0+255),f,b
  1860  04AA' 5100'              	movf	(sprintf@exp+1)& (0+255),w,b
  1861  04AC' 2300'              	addwfc	(??_sprintf+1)& (0+255),f,b
  1862  04AE' 5100'              	movf	??_sprintf& (0+255),w,b
  1863  04B0' 5F00'              	subwf	sprintf@width& (0+255),f,b
  1864  04B2' 5100'              	movf	(??_sprintf+1)& (0+255),w,b
  1865  04B4' 5B00'              	subwfb	(sprintf@width+1)& (0+255),f,b
  1866                           
  1867                           ;doprnt.c: 1143: if(
  1868                           ;doprnt.c: 1147: prec)
  1869  04B6' 5100'              	movf	sprintf@prec& (0+255),w,b
  1870  04B8' 1100'              	iorwf	(sprintf@prec+1)& (0+255),w,b
  1871  04BA' B4D8               	btfsc	status,2,c
  1872  04BC' D003               	goto	l270
  1873                           
  1874                           ; BSR set to: 0
  1875                           ;doprnt.c: 1148: width--;
  1876  04BE' 0700'              	decf	sprintf@width& (0+255),f,b
  1877  04C0' A0D8               	btfss	status,0,c
  1878  04C2' 0700'              	decf	(sprintf@width+1)& (0+255),f,b
  1879  04C4'                    l270:
  1880                           
  1881                           ; BSR set to: 0
  1882                           ;doprnt.c: 1149: if(flag & 0x03)
  1883                           
  1884                           ; BSR set to: 0
  1885  04C4' 0E03               	movlw	3
  1886  04C6' 1500'              	andwf	sprintf@flag& (0+255),w,b
  1887  04C8' 6F00'              	movwf	??_sprintf& (0+255),b
  1888  04CA' 0E00               	movlw	0
  1889  04CC' 1500'              	andwf	(sprintf@flag+1)& (0+255),w,b
  1890  04CE' 6F00'              	movwf	(??_sprintf+1)& (0+255),b
  1891  04D0' 5100'              	movf	??_sprintf& (0+255),w,b
  1892  04D2' 1100'              	iorwf	(??_sprintf+1)& (0+255),w,b
  1893  04D4' B4D8               	btfsc	status,2,c
  1894  04D6' D003               	goto	l271
  1895                           
  1896                           ; BSR set to: 0
  1897                           ;doprnt.c: 1150: width--;
  1898  04D8' 0700'              	decf	sprintf@width& (0+255),f,b
  1899  04DA' A0D8               	btfss	status,0,c
  1900  04DC' 0700'              	decf	(sprintf@width+1)& (0+255),f,b
  1901  04DE'                    l271:
  1902                           
  1903                           ; BSR set to: 0
  1904                           ;doprnt.c: 1153: if(flag & 0x04) {
  1905                           
  1906                           ; BSR set to: 0
  1907  04DE' A500'              	btfss	sprintf@flag& (0+255),2,b
  1908  04E0' D031               	goto	l278
  1909                           
  1910                           ; BSR set to: 0
  1911                           ;doprnt.c: 1157: if(flag & 0x03)
  1912  04E2' 0E03               	movlw	3
  1913  04E4' 1500'              	andwf	sprintf@flag& (0+255),w,b
  1914  04E6' 6F00'              	movwf	??_sprintf& (0+255),b
  1915  04E8' 0E00               	movlw	0
  1916  04EA' 1500'              	andwf	(sprintf@flag+1)& (0+255),w,b
  1917  04EC' 6F00'              	movwf	(??_sprintf+1)& (0+255),b
  1918  04EE' 5100'              	movf	??_sprintf& (0+255),w,b
  1919  04F0' 1100'              	iorwf	(??_sprintf+1)& (0+255),w,b
  1920  04F2' B4D8               	btfsc	status,2,c
  1921  04F4' D014               	goto	l274
  1922                           
  1923                           ; BSR set to: 0
  1924                           ;doprnt.c: 1159: ((*sp++ = ('-')));
  1925  04F6' C011' FFD9         	movff	sprintf@sp,fsr2l
  1926  04FA' C012' FFDA         	movff	sprintf@sp+1,fsr2h
  1927  04FE' 0E2D               	movlw	45
  1928  0500' 6EDF               	movwf	indf2,c
  1929                           
  1930                           ; BSR set to: 0
  1931  0502' 4B00'              	infsnz	sprintf@sp& (0+255),f,b
  1932  0504' 2B00'              	incf	(sprintf@sp+1)& (0+255),f,b
  1933                           
  1934                           ; BSR set to: 0
  1935                           ;doprnt.c: 1168: while(width > 0) {
  1936  0506' D00B               	goto	l274
  1937  0508'                    l3869:
  1938                           
  1939                           ; BSR set to: 0
  1940                           ;doprnt.c: 1169: ((*sp++ = ('0')));
  1941  0508' C011' FFD9         	movff	sprintf@sp,fsr2l
  1942  050C' C012' FFDA         	movff	sprintf@sp+1,fsr2h
  1943  0510' 0E30               	movlw	48
  1944  0512' 6EDF               	movwf	indf2,c
  1945                           
  1946                           ; BSR set to: 0
  1947  0514' 4B00'              	infsnz	sprintf@sp& (0+255),f,b
  1948  0516' 2B00'              	incf	(sprintf@sp+1)& (0+255),f,b
  1949                           
  1950                           ; BSR set to: 0
  1951                           ;doprnt.c: 1170: width--;
  1952  0518' 0700'              	decf	sprintf@width& (0+255),f,b
  1953  051A' A0D8               	btfss	status,0,c
  1954  051C' 0700'              	decf	(sprintf@width+1)& (0+255),f,b
  1955  051E'                    l274:
  1956                           
  1957                           ; BSR set to: 0
  1958                           
  1959                           ; BSR set to: 0
  1960  051E' BF00'              	btfsc	(sprintf@width+1)& (0+255),7,b
  1961  0520' D072               	goto	l282
  1962  0522' 5100'              	movf	(sprintf@width+1)& (0+255),w,b
  1963  0524' E1F1               	bnz	l3869
  1964  0526' 0500'              	decf	sprintf@width& (0+255),w,b
  1965  0528' A0D8               	btfss	status,0,c
  1966  052A' D06D               	goto	l282
  1967  052C' D7ED               	goto	l275
  1968  052E'                    l3877:
  1969                           
  1970                           ; BSR set to: 0
  1971                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  1972  052E' C011' FFD9         	movff	sprintf@sp,fsr2l
  1973  0532' C012' FFDA         	movff	sprintf@sp+1,fsr2h
  1974  0536' 0E20               	movlw	32
  1975  0538' 6EDF               	movwf	indf2,c
  1976                           
  1977                           ; BSR set to: 0
  1978  053A' 4B00'              	infsnz	sprintf@sp& (0+255),f,b
  1979  053C' 2B00'              	incf	(sprintf@sp+1)& (0+255),f,b
  1980                           
  1981                           ; BSR set to: 0
  1982                           ;doprnt.c: 1182: width--;
  1983  053E' 0700'              	decf	sprintf@width& (0+255),f,b
  1984  0540' A0D8               	btfss	status,0,c
  1985  0542' 0700'              	decf	(sprintf@width+1)& (0+255),f,b
  1986  0544'                    l278:
  1987                           
  1988                           ; BSR set to: 0
  1989                           
  1990                           ; BSR set to: 0
  1991  0544' BF00'              	btfsc	(sprintf@width+1)& (0+255),7,b
  1992  0546' D005               	goto	u4240
  1993  0548' 5100'              	movf	(sprintf@width+1)& (0+255),w,b
  1994  054A' E1F1               	bnz	l3877
  1995  054C' 0500'              	decf	sprintf@width& (0+255),w,b
  1996  054E' B0D8               	btfsc	status,0,c
  1997  0550' D7EE               	goto	l279
  1998  0552'                    u4240:
  1999                           
  2000                           ; BSR set to: 0
  2001                           ;doprnt.c: 1183: }
  2002                           ;doprnt.c: 1188: if(flag & 0x03)
  2003                           
  2004                           ; BSR set to: 0
  2005  0552' 0E03               	movlw	3
  2006  0554' 1500'              	andwf	sprintf@flag& (0+255),w,b
  2007  0556' 6F00'              	movwf	??_sprintf& (0+255),b
  2008  0558' 0E00               	movlw	0
  2009  055A' 1500'              	andwf	(sprintf@flag+1)& (0+255),w,b
  2010  055C' 6F00'              	movwf	(??_sprintf+1)& (0+255),b
  2011  055E' 5100'              	movf	??_sprintf& (0+255),w,b
  2012  0560' 1100'              	iorwf	(??_sprintf+1)& (0+255),w,b
  2013  0562' B4D8               	btfsc	status,2,c
  2014  0564' D050               	goto	l282
  2015                           
  2016                           ; BSR set to: 0
  2017                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  2018  0566' C011' FFD9         	movff	sprintf@sp,fsr2l
  2019  056A' C012' FFDA         	movff	sprintf@sp+1,fsr2h
  2020  056E' 0E2D               	movlw	45
  2021  0570' D047               	goto	L2
  2022  0572'                    
  2023                           ; BSR set to: 0
  2024                           ;doprnt.c: 1200: {
  2025                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2026                           
  2027                           ; BSR set to: 0
  2028  0572' C023' F012'        	movff	sprintf@val,___lldiv@dividend
  2029  0576' C024' F013'        	movff	sprintf@val+1,___lldiv@dividend+1
  2030  057A' C025' F014'        	movff	sprintf@val+2,___lldiv@dividend+2
  2031  057E' C026' F015'        	movff	sprintf@val+3,___lldiv@dividend+3
  2032  0582' 5100'              	movf	sprintf@c& (0+255),w,b
  2033  0584' 0D04               	mullw	4
  2034  0586' 0E00'              	movlw	low _dpowers
  2035  0588' 24F3               	addwf	prodl,w,c
  2036  058A' 6EF6               	movwf	tblptrl,c
  2037  058C' 0E00'              	movlw	high _dpowers
  2038  058E' 20F4               	addwfc	prodh,w,c
  2039  0590' 6EF7               	movwf	tblptrh,c
  2040  0592'                    	if	0	;There are less than 3 active tblptr bytes
  2041  0592'                    	endif
  2042  0592' 0009               	tblrd		*+
  2043  0594' CFF5 F016'         	movff	tablat,___lldiv@divisor
  2044  0598' 0009               	tblrd		*+
  2045  059A' CFF5 F017'         	movff	tablat,___lldiv@divisor+1
  2046  059E' 0009               	tblrd		*+
  2047  05A0' CFF5 F018'         	movff	tablat,___lldiv@divisor+2
  2048  05A4' 000A               	tblrd		*-
  2049  05A6' CFF5 F019'         	movff	tablat,___lldiv@divisor+3
  2050  05AA' EC00' F000'        	call	___lldiv	;wreg free
  2051  05AE' C012' F027'        	movff	?___lldiv,sprintf@tmpval
  2052  05B2' C013' F028'        	movff	?___lldiv+1,sprintf@tmpval+1
  2053  05B6' C014' F029'        	movff	?___lldiv+2,sprintf@tmpval+2
  2054  05BA' C015' F02A'        	movff	?___lldiv+3,sprintf@tmpval+3
  2055                           
  2056                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2057  05BE' C027' F012'        	movff	sprintf@tmpval,___llmod@dividend
  2058  05C2' C028' F013'        	movff	sprintf@tmpval+1,___llmod@dividend+1
  2059  05C6' C029' F014'        	movff	sprintf@tmpval+2,___llmod@dividend+2
  2060  05CA' C02A' F015'        	movff	sprintf@tmpval+3,___llmod@dividend+3
  2061  05CE' 0E0A               	movlw	10
  2062  05D0' 6E16'              	movwf	___llmod@divisor,c
  2063  05D2' 0E00               	movlw	0
  2064  05D4' 6E17'              	movwf	___llmod@divisor+1,c
  2065  05D6' 0E00               	movlw	0
  2066  05D8' 6E18'              	movwf	___llmod@divisor+2,c
  2067  05DA' 0E00               	movlw	0
  2068  05DC' 6E19'              	movwf	___llmod@divisor+3,c
  2069  05DE' EC00' F000'        	call	___llmod	;wreg free
  2070  05E2' C012' F027'        	movff	?___llmod,sprintf@tmpval
  2071  05E6' C013' F028'        	movff	?___llmod+1,sprintf@tmpval+1
  2072  05EA' C014' F029'        	movff	?___llmod+2,sprintf@tmpval+2
  2073  05EE' C015' F02A'        	movff	?___llmod+3,sprintf@tmpval+3
  2074                           
  2075                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  2076  05F2' 0100               	movlb	0	; () banked
  2077  05F4' 5100'              	movf	sprintf@tmpval& (0+255),w,b
  2078  05F6' 0F30               	addlw	48
  2079  05F8' C011' FFD9         	movff	sprintf@sp,fsr2l
  2080  05FC' C012' FFDA         	movff	sprintf@sp+1,fsr2h
  2081  0600'                    L2:
  2082  0600' 6EDF               	movwf	indf2,c
  2083                           
  2084                           ; BSR set to: 0
  2085  0602' 4B00'              	infsnz	sprintf@sp& (0+255),f,b
  2086  0604' 2B00'              	incf	(sprintf@sp+1)& (0+255),f,b
  2087  0606'                    l282:
  2088                           
  2089                           ; BSR set to: 0
  2090                           
  2091                           ; BSR set to: 0
  2092  0606' 0700'              	decf	sprintf@c& (0+255),f,b
  2093  0608' 2900'              	incf	sprintf@c& (0+255),w,b
  2094  060A' B4D8               	btfsc	status,2,c
  2095  060C' D00C               	goto	l285
  2096  060E' D7B1               	goto	l283
  2097  0610'                    l3901:
  2098                           
  2099                           ; BSR set to: 0
  2100                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  2101  0610' C011' FFD9         	movff	sprintf@sp,fsr2l
  2102  0614' C012' FFDA         	movff	sprintf@sp+1,fsr2h
  2103  0618' 0E30               	movlw	48
  2104  061A' 6EDF               	movwf	indf2,c
  2105                           
  2106                           ; BSR set to: 0
  2107  061C' 4B00'              	infsnz	sprintf@sp& (0+255),f,b
  2108  061E' 2B00'              	incf	(sprintf@sp+1)& (0+255),f,b
  2109                           
  2110                           ; BSR set to: 0
  2111                           ;doprnt.c: 1209: exp--;
  2112  0620' 0700'              	decf	sprintf@exp& (0+255),f,b
  2113  0622' A0D8               	btfss	status,0,c
  2114  0624' 0700'              	decf	(sprintf@exp+1)& (0+255),f,b
  2115  0626'                    l285:
  2116                           
  2117                           ; BSR set to: 0
  2118                           
  2119                           ; BSR set to: 0
  2120  0626' BF00'              	btfsc	(sprintf@exp+1)& (0+255),7,b
  2121  0628' D005               	goto	u4270
  2122  062A' 5100'              	movf	(sprintf@exp+1)& (0+255),w,b
  2123  062C' E1F1               	bnz	l3901
  2124  062E' 0500'              	decf	sprintf@exp& (0+255),w,b
  2125  0630' B0D8               	btfsc	status,0,c
  2126  0632' D7EE               	goto	l286
  2127  0634'                    u4270:
  2128                           
  2129                           ; BSR set to: 0
  2130                           ;doprnt.c: 1210: }
  2131                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2132                           
  2133                           ; BSR set to: 0
  2134  0634' BF00'              	btfsc	(sprintf@prec+1)& (0+255),7,b
  2135  0636' D009               	goto	l288
  2136  0638' 5100'              	movf	(sprintf@prec+1)& (0+255),w,b
  2137  063A' E104               	bnz	u4280
  2138  063C' 0E09               	movlw	9
  2139  063E' 5D00'              	subwf	sprintf@prec& (0+255),w,b
  2140  0640' A0D8               	btfss	status,0,c
  2141  0642' D003               	goto	l288
  2142  0644'                    u4280:
  2143                           
  2144                           ; BSR set to: 0
  2145                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2146  0644' 0E08               	movlw	8
  2147  0646' 6F00'              	movwf	sprintf@c& (0+255),b
  2148  0648' D002               	goto	l289
  2149  064A'                    l288:
  2150                           
  2151                           ; BSR set to: 0
  2152                           ;doprnt.c: 1213: else
  2153                           ;doprnt.c: 1214: c = prec;
  2154  064A' C034' F036'        	movff	sprintf@prec,sprintf@c
  2155  064E'                    l289:
  2156                           
  2157                           ; BSR set to: 0
  2158                           ;doprnt.c: 1215: prec -= c;
  2159                           
  2160                           ; BSR set to: 0
  2161  064E' 5100'              	movf	sprintf@c& (0+255),w,b
  2162  0650' 5F00'              	subwf	sprintf@prec& (0+255),f,b
  2163  0652' 0E00               	movlw	0
  2164  0654' BF00'              	btfsc	sprintf@c& (0+255),7,b
  2165  0656' 0EFF               	movlw	255
  2166  0658' 5B00'              	subwfb	(sprintf@prec+1)& (0+255),f,b
  2167                           
  2168                           ; BSR set to: 0
  2169                           ;doprnt.c: 1219: if(c)
  2170  065A' 5100'              	movf	sprintf@c& (0+255),w,b
  2171  065C' B4D8               	btfsc	status,2,c
  2172  065E' D008               	goto	l290
  2173                           
  2174                           ; BSR set to: 0
  2175                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  2176  0660' C011' FFD9         	movff	sprintf@sp,fsr2l
  2177  0664' C012' FFDA         	movff	sprintf@sp+1,fsr2h
  2178  0668' 0E2E               	movlw	46
  2179  066A' 6EDF               	movwf	indf2,c
  2180                           
  2181                           ; BSR set to: 0
  2182  066C' 4B00'              	infsnz	sprintf@sp& (0+255),f,b
  2183  066E' 2B00'              	incf	(sprintf@sp+1)& (0+255),f,b
  2184  0670'                    l290:
  2185                           
  2186                           ; BSR set to: 0
  2187                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2188                           
  2189                           ; BSR set to: 0
  2190  0670' 5100'              	movf	sprintf@c& (0+255),w,b
  2191  0672' EC00' F000'        	call	_scale
  2192  0676' C035' F01E'        	movff	?_scale,_sprintf$1581
  2193  067A' C036' F01F'        	movff	?_scale+1,_sprintf$1581+1
  2194  067E' C037' F020'        	movff	?_scale+2,_sprintf$1581+2
  2195                           
  2196                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2197  0682' C031' F029'        	movff	sprintf@fval,___ftmul@f2
  2198  0686' C032' F02A'        	movff	sprintf@fval+1,___ftmul@f2+1
  2199  068A' C033' F02B'        	movff	sprintf@fval+2,___ftmul@f2+2
  2200  068E' C01E' F026'        	movff	_sprintf$1581,___ftmul@f1
  2201  0692' C01F' F027'        	movff	_sprintf$1581+1,___ftmul@f1+1
  2202  0696' C020' F028'        	movff	_sprintf$1581+2,___ftmul@f1+2
  2203  069A' EC00' F000'        	call	___ftmul	;wreg free
  2204  069E' C026' F03E'        	movff	?___ftmul,___fttol@f1
  2205  06A2' C027' F03F'        	movff	?___ftmul+1,___fttol@f1+1
  2206  06A6' C028' F040'        	movff	?___ftmul+2,___fttol@f1+2
  2207  06AA' EC00' F000'        	call	___fttol	;wreg free
  2208  06AE' C03E' F023'        	movff	?___fttol,sprintf@val
  2209  06B2' C03F' F024'        	movff	?___fttol+1,sprintf@val+1
  2210  06B6' C040' F025'        	movff	?___fttol+2,sprintf@val+2
  2211  06BA' C041' F026'        	movff	?___fttol+3,sprintf@val+3
  2212                           
  2213                           ;doprnt.c: 1228: while(c--) {
  2214  06BE' D071               	goto	l291
  2215  06C0'                    
  2216                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2217  06C0' C023' F012'        	movff	sprintf@val,___lldiv@dividend
  2218  06C4' C024' F013'        	movff	sprintf@val+1,___lldiv@dividend+1
  2219  06C8' C025' F014'        	movff	sprintf@val+2,___lldiv@dividend+2
  2220  06CC' C026' F015'        	movff	sprintf@val+3,___lldiv@dividend+3
  2221  06D0' 0100               	movlb	0	; () banked
  2222  06D2' 5100'              	movf	sprintf@c& (0+255),w,b
  2223  06D4' 0D04               	mullw	4
  2224  06D6' 0E00'              	movlw	low _dpowers
  2225  06D8' 24F3               	addwf	prodl,w,c
  2226  06DA' 6EF6               	movwf	tblptrl,c
  2227  06DC' 0E00'              	movlw	high _dpowers
  2228  06DE' 20F4               	addwfc	prodh,w,c
  2229  06E0' 6EF7               	movwf	tblptrh,c
  2230  06E2'                    	if	0	;There are less than 3 active tblptr bytes
  2231  06E2'                    	endif
  2232  06E2' 0009               	tblrd		*+
  2233  06E4' CFF5 F016'         	movff	tablat,___lldiv@divisor
  2234  06E8' 0009               	tblrd		*+
  2235  06EA' CFF5 F017'         	movff	tablat,___lldiv@divisor+1
  2236  06EE' 0009               	tblrd		*+
  2237  06F0' CFF5 F018'         	movff	tablat,___lldiv@divisor+2
  2238  06F4' 000A               	tblrd		*-
  2239  06F6' CFF5 F019'         	movff	tablat,___lldiv@divisor+3
  2240  06FA' EC00' F000'        	call	___lldiv	;wreg free
  2241  06FE' C012' F027'        	movff	?___lldiv,sprintf@tmpval
  2242  0702' C013' F028'        	movff	?___lldiv+1,sprintf@tmpval+1
  2243  0706' C014' F029'        	movff	?___lldiv+2,sprintf@tmpval+2
  2244  070A' C015' F02A'        	movff	?___lldiv+3,sprintf@tmpval+3
  2245                           
  2246                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2247  070E' C027' F012'        	movff	sprintf@tmpval,___llmod@dividend
  2248  0712' C028' F013'        	movff	sprintf@tmpval+1,___llmod@dividend+1
  2249  0716' C029' F014'        	movff	sprintf@tmpval+2,___llmod@dividend+2
  2250  071A' C02A' F015'        	movff	sprintf@tmpval+3,___llmod@dividend+3
  2251  071E' 0E0A               	movlw	10
  2252  0720' 6E16'              	movwf	___llmod@divisor,c
  2253  0722' 0E00               	movlw	0
  2254  0724' 6E17'              	movwf	___llmod@divisor+1,c
  2255  0726' 0E00               	movlw	0
  2256  0728' 6E18'              	movwf	___llmod@divisor+2,c
  2257  072A' 0E00               	movlw	0
  2258  072C' 6E19'              	movwf	___llmod@divisor+3,c
  2259  072E' EC00' F000'        	call	___llmod	;wreg free
  2260  0732' C012' F027'        	movff	?___llmod,sprintf@tmpval
  2261  0736' C013' F028'        	movff	?___llmod+1,sprintf@tmpval+1
  2262  073A' C014' F029'        	movff	?___llmod+2,sprintf@tmpval+2
  2263  073E' C015' F02A'        	movff	?___llmod+3,sprintf@tmpval+3
  2264                           
  2265                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  2266  0742' 0100               	movlb	0	; () banked
  2267  0744' 5100'              	movf	sprintf@tmpval& (0+255),w,b
  2268  0746' 0F30               	addlw	48
  2269  0748' C011' FFD9         	movff	sprintf@sp,fsr2l
  2270  074C' C012' FFDA         	movff	sprintf@sp+1,fsr2h
  2271  0750' 6EDF               	movwf	indf2,c
  2272                           
  2273                           ; BSR set to: 0
  2274  0752' 4B00'              	infsnz	sprintf@sp& (0+255),f,b
  2275  0754' 2B00'              	incf	(sprintf@sp+1)& (0+255),f,b
  2276                           
  2277                           ; BSR set to: 0
  2278                           ;doprnt.c: 1232: val %= dpowers[c];
  2279  0756' C023' F012'        	movff	sprintf@val,___llmod@dividend
  2280  075A' C024' F013'        	movff	sprintf@val+1,___llmod@dividend+1
  2281  075E' C025' F014'        	movff	sprintf@val+2,___llmod@dividend+2
  2282  0762' C026' F015'        	movff	sprintf@val+3,___llmod@dividend+3
  2283  0766' 5100'              	movf	sprintf@c& (0+255),w,b
  2284  0768' 0D04               	mullw	4
  2285  076A' 0E00'              	movlw	low _dpowers
  2286  076C' 24F3               	addwf	prodl,w,c
  2287  076E' 6EF6               	movwf	tblptrl,c
  2288  0770' 0E00'              	movlw	high _dpowers
  2289  0772' 20F4               	addwfc	prodh,w,c
  2290  0774' 6EF7               	movwf	tblptrh,c
  2291  0776'                    	if	0	;There are less than 3 active tblptr bytes
  2292  0776'                    	endif
  2293  0776' 0009               	tblrd		*+
  2294  0778' CFF5 F016'         	movff	tablat,___llmod@divisor
  2295  077C' 0009               	tblrd		*+
  2296  077E' CFF5 F017'         	movff	tablat,___llmod@divisor+1
  2297  0782' 0009               	tblrd		*+
  2298  0784' CFF5 F018'         	movff	tablat,___llmod@divisor+2
  2299  0788' 000A               	tblrd		*-
  2300  078A' CFF5 F019'         	movff	tablat,___llmod@divisor+3
  2301  078E' EC00' F000'        	call	___llmod	;wreg free
  2302  0792' C012' F023'        	movff	?___llmod,sprintf@val
  2303  0796' C013' F024'        	movff	?___llmod+1,sprintf@val+1
  2304  079A' C014' F025'        	movff	?___llmod+2,sprintf@val+2
  2305  079E' C015' F026'        	movff	?___llmod+3,sprintf@val+3
  2306  07A2'                    l291:
  2307  07A2' 0100               	movlb	0	; () banked
  2308  07A4' 0700'              	decf	sprintf@c& (0+255),f,b
  2309  07A6' 2900'              	incf	sprintf@c& (0+255),w,b
  2310  07A8' B4D8               	btfsc	status,2,c
  2311  07AA' D00C               	goto	l294
  2312  07AC' D789               	goto	l292
  2313  07AE'                    
  2314                           ; BSR set to: 0
  2315                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  2316                           
  2317                           ; BSR set to: 0
  2318  07AE' C011' FFD9         	movff	sprintf@sp,fsr2l
  2319  07B2' C012' FFDA         	movff	sprintf@sp+1,fsr2h
  2320  07B6' 0E30               	movlw	48
  2321  07B8' 6EDF               	movwf	indf2,c
  2322                           
  2323                           ; BSR set to: 0
  2324  07BA' 4B00'              	infsnz	sprintf@sp& (0+255),f,b
  2325  07BC' 2B00'              	incf	(sprintf@sp+1)& (0+255),f,b
  2326                           
  2327                           ; BSR set to: 0
  2328                           ;doprnt.c: 1237: prec--;
  2329  07BE' 0700'              	decf	sprintf@prec& (0+255),f,b
  2330  07C0' A0D8               	btfss	status,0,c
  2331  07C2' 0700'              	decf	(sprintf@prec+1)& (0+255),f,b
  2332  07C4'                    l294:
  2333                           
  2334                           ; BSR set to: 0
  2335                           
  2336                           ; BSR set to: 0
  2337  07C4' 5100'              	movf	sprintf@prec& (0+255),w,b
  2338  07C6' 1100'              	iorwf	(sprintf@prec+1)& (0+255),w,b
  2339  07C8' B4D8               	btfsc	status,2,c
  2340  07CA' D0B0               	goto	l316
  2341  07CC' D7F0               	goto	l295
  2342  07CE'                    l248:
  2343                           
  2344                           ; BSR set to: 0
  2345                           ;doprnt.c: 1246: }
  2346                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2347                           
  2348                           ; BSR set to: 0
  2349  07CE' 5100'              	movf	sprintf@prec& (0+255),w,b
  2350  07D0' 1100'              	iorwf	(sprintf@prec+1)& (0+255),w,b
  2351  07D2' A4D8               	btfss	status,2,c
  2352  07D4' D008               	goto	l297
  2353                           
  2354                           ; BSR set to: 0
  2355  07D6' 5100'              	movf	sprintf@val& (0+255),w,b
  2356  07D8' 1100'              	iorwf	(sprintf@val+1)& (0+255),w,b
  2357  07DA' 1100'              	iorwf	(sprintf@val+2)& (0+255),w,b
  2358  07DC' 1100'              	iorwf	(sprintf@val+3)& (0+255),w,b
  2359  07DE' A4D8               	btfss	status,2,c
  2360  07E0' D002               	goto	l297
  2361                           
  2362                           ; BSR set to: 0
  2363                           ;doprnt.c: 1291: prec++;
  2364  07E2' 4B00'              	infsnz	sprintf@prec& (0+255),f,b
  2365  07E4' 2B00'              	incf	(sprintf@prec+1)& (0+255),f,b
  2366  07E6'                    l297:
  2367                           
  2368                           ; BSR set to: 0
  2369                           ;doprnt.c: 1339: if(c < prec)
  2370                           
  2371                           ; BSR set to: 0
  2372  07E6' 0E80               	movlw	128
  2373  07E8' BF00'              	btfsc	sprintf@c& (0+255),7,b
  2374  07EA' 0E7F               	movlw	127
  2375  07EC' 6F00'              	movwf	??_sprintf& (0+255),b
  2376  07EE' 5100'              	movf	sprintf@prec& (0+255),w,b
  2377  07F0' 5D00'              	subwf	sprintf@c& (0+255),w,b
  2378  07F2' 5100'              	movf	(sprintf@prec+1)& (0+255),w,b
  2379  07F4' 0A80               	xorlw	128
  2380  07F6' 5900'              	subwfb	??_sprintf& (0+255),w,b
  2381  07F8' B0D8               	btfsc	status,0,c
  2382  07FA' D003               	goto	l298
  2383                           
  2384                           ; BSR set to: 0
  2385                           ;doprnt.c: 1340: c = prec;
  2386  07FC' C034' F036'        	movff	sprintf@prec,sprintf@c
  2387  0800' D010               	goto	l300
  2388  0802'                    l298:
  2389                           
  2390                           ; BSR set to: 0
  2391                           ;doprnt.c: 1341: else if(prec < c)
  2392                           
  2393                           ; BSR set to: 0
  2394  0802' 5100'              	movf	(sprintf@prec+1)& (0+255),w,b
  2395  0804' 0A80               	xorlw	128
  2396  0806' 6F00'              	movwf	??_sprintf& (0+255),b
  2397  0808' 5100'              	movf	sprintf@c& (0+255),w,b
  2398  080A' 5D00'              	subwf	sprintf@prec& (0+255),w,b
  2399  080C' 0E80               	movlw	128
  2400  080E' BF00'              	btfsc	sprintf@c& (0+255),7,b
  2401  0810' 0E7F               	movlw	127
  2402  0812' 5900'              	subwfb	??_sprintf& (0+255),w,b
  2403  0814' B0D8               	btfsc	status,0,c
  2404  0816' D005               	goto	l300
  2405                           
  2406                           ; BSR set to: 0
  2407                           ;doprnt.c: 1342: prec = c;
  2408  0818' 5100'              	movf	sprintf@c& (0+255),w,b
  2409  081A' 6F00'              	movwf	sprintf@prec& (0+255),b
  2410  081C' 6B00'              	clrf	(sprintf@prec+1)& (0+255),b
  2411  081E' BF00'              	btfsc	sprintf@prec& (0+255),7,b
  2412  0820' 0700'              	decf	(sprintf@prec+1)& (0+255),f,b
  2413  0822'                    l300:
  2414                           
  2415                           ; BSR set to: 0
  2416                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2417                           
  2418                           ; BSR set to: 0
  2419                           
  2420                           ; BSR set to: 0
  2421  0822' 5100'              	movf	sprintf@width& (0+255),w,b
  2422  0824' 1100'              	iorwf	(sprintf@width+1)& (0+255),w,b
  2423  0826' B4D8               	btfsc	status,2,c
  2424  0828' D00D               	goto	l301
  2425                           
  2426                           ; BSR set to: 0
  2427  082A' 0E03               	movlw	3
  2428  082C' 1500'              	andwf	sprintf@flag& (0+255),w,b
  2429  082E' 6F00'              	movwf	??_sprintf& (0+255),b
  2430  0830' 0E00               	movlw	0
  2431  0832' 1500'              	andwf	(sprintf@flag+1)& (0+255),w,b
  2432  0834' 6F00'              	movwf	(??_sprintf+1)& (0+255),b
  2433  0836' 5100'              	movf	??_sprintf& (0+255),w,b
  2434  0838' 1100'              	iorwf	(??_sprintf+1)& (0+255),w,b
  2435  083A' B4D8               	btfsc	status,2,c
  2436  083C' D003               	goto	l301
  2437                           
  2438                           ; BSR set to: 0
  2439                           ;doprnt.c: 1346: width--;
  2440  083E' 0700'              	decf	sprintf@width& (0+255),f,b
  2441  0840' A0D8               	btfss	status,0,c
  2442  0842' 0700'              	decf	(sprintf@width+1)& (0+255),f,b
  2443  0844'                    l301:
  2444                           
  2445                           ; BSR set to: 0
  2446                           ;doprnt.c: 1348: if(flag & 0x4000) {
  2447                           
  2448                           ; BSR set to: 0
  2449  0844' AD00'              	btfss	(sprintf@flag+1)& (0+255),6,b
  2450  0846' D013               	goto	l304
  2451                           
  2452                           ; BSR set to: 0
  2453                           ;doprnt.c: 1349: if(width > prec)
  2454  0848' 5100'              	movf	sprintf@width& (0+255),w,b
  2455  084A' 5D00'              	subwf	sprintf@prec& (0+255),w,b
  2456  084C' 5100'              	movf	(sprintf@prec+1)& (0+255),w,b
  2457  084E' 0A80               	xorlw	128
  2458  0850' 6F00'              	movwf	??_sprintf& (0+255),b
  2459  0852' 5100'              	movf	(sprintf@width+1)& (0+255),w,b
  2460  0854' 0A80               	xorlw	128
  2461  0856' 5900'              	subwfb	??_sprintf& (0+255),w,b
  2462  0858' B0D8               	btfsc	status,0,c
  2463  085A' D005               	goto	l303
  2464                           
  2465                           ; BSR set to: 0
  2466                           ;doprnt.c: 1350: width -= prec;
  2467  085C' 5100'              	movf	sprintf@prec& (0+255),w,b
  2468  085E' 5F00'              	subwf	sprintf@width& (0+255),f,b
  2469  0860' 5100'              	movf	(sprintf@prec+1)& (0+255),w,b
  2470  0862' 5B00'              	subwfb	(sprintf@width+1)& (0+255),f,b
  2471  0864' D004               	goto	l304
  2472  0866'                    l303:
  2473                           
  2474                           ; BSR set to: 0
  2475                           ;doprnt.c: 1351: else
  2476                           ;doprnt.c: 1352: width = 0;
  2477                           
  2478                           ; BSR set to: 0
  2479  0866' 0E00               	movlw	0
  2480  0868' 6F00'              	movwf	(sprintf@width+1)& (0+255),b
  2481  086A' 0E00               	movlw	0
  2482  086C' 6F00'              	movwf	sprintf@width& (0+255),b
  2483  086E'                    l304:
  2484                           
  2485                           ; BSR set to: 0
  2486                           ;doprnt.c: 1353: }
  2487                           ;doprnt.c: 1381: if(width > c)
  2488                           
  2489                           ; BSR set to: 0
  2490                           
  2491                           ; BSR set to: 0
  2492  086E' 0E80               	movlw	128
  2493  0870' BF00'              	btfsc	sprintf@c& (0+255),7,b
  2494  0872' 0E7F               	movlw	127
  2495  0874' 6F00'              	movwf	??_sprintf& (0+255),b
  2496  0876' 5100'              	movf	sprintf@width& (0+255),w,b
  2497  0878' 5D00'              	subwf	sprintf@c& (0+255),w,b
  2498  087A' 5100'              	movf	(sprintf@width+1)& (0+255),w,b
  2499  087C' 0A80               	xorlw	128
  2500  087E' 5900'              	subwfb	??_sprintf& (0+255),w,b
  2501  0880' B0D8               	btfsc	status,0,c
  2502  0882' D007               	goto	l305
  2503                           
  2504                           ; BSR set to: 0
  2505                           ;doprnt.c: 1382: width -= c;
  2506  0884' 5100'              	movf	sprintf@c& (0+255),w,b
  2507  0886' 5F00'              	subwf	sprintf@width& (0+255),f,b
  2508  0888' 0E00               	movlw	0
  2509  088A' BF00'              	btfsc	sprintf@c& (0+255),7,b
  2510  088C' 0EFF               	movlw	255
  2511  088E' 5B00'              	subwfb	(sprintf@width+1)& (0+255),f,b
  2512  0890' D004               	goto	l306
  2513  0892'                    l305:
  2514                           
  2515                           ; BSR set to: 0
  2516                           ;doprnt.c: 1383: else
  2517                           ;doprnt.c: 1384: width = 0;
  2518                           
  2519                           ; BSR set to: 0
  2520  0892' 0E00               	movlw	0
  2521  0894' 6F00'              	movwf	(sprintf@width+1)& (0+255),b
  2522  0896' 0E00               	movlw	0
  2523  0898' 6F00'              	movwf	sprintf@width& (0+255),b
  2524  089A'                    l306:
  2525                           
  2526                           ; BSR set to: 0
  2527                           ;doprnt.c: 1387: if(flag & 0x04) {
  2528                           
  2529                           ; BSR set to: 0
  2530  089A' A500'              	btfss	sprintf@flag& (0+255),2,b
  2531  089C' D022               	goto	l307
  2532                           
  2533                           ; BSR set to: 0
  2534                           ;doprnt.c: 1392: if(flag & 0x03)
  2535  089E' 0E03               	movlw	3
  2536  08A0' 1500'              	andwf	sprintf@flag& (0+255),w,b
  2537  08A2' 6F00'              	movwf	??_sprintf& (0+255),b
  2538  08A4' 0E00               	movlw	0
  2539  08A6' 1500'              	andwf	(sprintf@flag+1)& (0+255),w,b
  2540  08A8' 6F00'              	movwf	(??_sprintf+1)& (0+255),b
  2541  08AA' 5100'              	movf	??_sprintf& (0+255),w,b
  2542  08AC' 1100'              	iorwf	(??_sprintf+1)& (0+255),w,b
  2543  08AE' B4D8               	btfsc	status,2,c
  2544  08B0' D008               	goto	l308
  2545                           
  2546                           ; BSR set to: 0
  2547                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  2548  08B2' C011' FFD9         	movff	sprintf@sp,fsr2l
  2549  08B6' C012' FFDA         	movff	sprintf@sp+1,fsr2h
  2550  08BA' 0E2D               	movlw	45
  2551  08BC' 6EDF               	movwf	indf2,c
  2552                           
  2553                           ; BSR set to: 0
  2554  08BE' 4B00'              	infsnz	sprintf@sp& (0+255),f,b
  2555  08C0' 2B00'              	incf	(sprintf@sp+1)& (0+255),f,b
  2556  08C2'                    l308:
  2557                           
  2558                           ; BSR set to: 0
  2559                           ;doprnt.c: 1415: if(width)
  2560                           
  2561                           ; BSR set to: 0
  2562  08C2' 5100'              	movf	sprintf@width& (0+255),w,b
  2563  08C4' 1100'              	iorwf	(sprintf@width+1)& (0+255),w,b
  2564  08C6' B4D8               	btfsc	status,2,c
  2565  08C8' D031               	goto	l316
  2566                           
  2567                           ; BSR set to: 0
  2568                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  2569                           
  2570                           ; BSR set to: 0
  2571                           
  2572                           ;doprnt.c: 1416: do
  2573  08CA' C011' FFD9         	movff	sprintf@sp,fsr2l
  2574  08CE' C012' FFDA         	movff	sprintf@sp+1,fsr2h
  2575  08D2' 0E30               	movlw	48
  2576  08D4' 6EDF               	movwf	indf2,c
  2577                           
  2578                           ; BSR set to: 0
  2579  08D6' 4B00'              	infsnz	sprintf@sp& (0+255),f,b
  2580  08D8' 2B00'              	incf	(sprintf@sp+1)& (0+255),f,b
  2581                           
  2582                           ; BSR set to: 0
  2583                           ;doprnt.c: 1418: while(--width);
  2584  08DA' 0700'              	decf	sprintf@width& (0+255),f,b
  2585  08DC' A0D8               	btfss	status,0,c
  2586  08DE' 0700'              	decf	(sprintf@width+1)& (0+255),f,b
  2587  08E0' D7F0               	goto	l308
  2588  08E2'                    l307:
  2589                           
  2590                           ; BSR set to: 0
  2591                           ;doprnt.c: 1422: {
  2592                           ;doprnt.c: 1424: if(width
  2593                           ;doprnt.c: 1428: )
  2594                           
  2595                           ; BSR set to: 0
  2596  08E2' 5100'              	movf	sprintf@width& (0+255),w,b
  2597  08E4' 1100'              	iorwf	(sprintf@width+1)& (0+255),w,b
  2598  08E6' B4D8               	btfsc	status,2,c
  2599  08E8' D00F               	goto	u4460
  2600  08EA'                    u4450:
  2601                           
  2602                           ; BSR set to: 0
  2603                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  2604                           
  2605                           ; BSR set to: 0
  2606                           
  2607                           ;doprnt.c: 1429: do
  2608  08EA' C011' FFD9         	movff	sprintf@sp,fsr2l
  2609  08EE' C012' FFDA         	movff	sprintf@sp+1,fsr2h
  2610  08F2' 0E20               	movlw	32
  2611  08F4' 6EDF               	movwf	indf2,c
  2612                           
  2613                           ; BSR set to: 0
  2614  08F6' 4B00'              	infsnz	sprintf@sp& (0+255),f,b
  2615  08F8' 2B00'              	incf	(sprintf@sp+1)& (0+255),f,b
  2616                           
  2617                           ; BSR set to: 0
  2618                           ;doprnt.c: 1431: while(--width);
  2619  08FA' 0700'              	decf	sprintf@width& (0+255),f,b
  2620  08FC' A0D8               	btfss	status,0,c
  2621  08FE' 0700'              	decf	(sprintf@width+1)& (0+255),f,b
  2622  0900' 5100'              	movf	sprintf@width& (0+255),w,b
  2623  0902' 1100'              	iorwf	(sprintf@width+1)& (0+255),w,b
  2624  0904' A4D8               	btfss	status,2,c
  2625  0906' D7F1               	goto	u4450
  2626  0908'                    u4460:
  2627                           
  2628                           ; BSR set to: 0
  2629                           ;doprnt.c: 1438: if(flag & 0x03)
  2630                           
  2631                           ; BSR set to: 0
  2632                           
  2633                           ; BSR set to: 0
  2634  0908' 0E03               	movlw	3
  2635  090A' 1500'              	andwf	sprintf@flag& (0+255),w,b
  2636  090C' 6F00'              	movwf	??_sprintf& (0+255),b
  2637  090E' 0E00               	movlw	0
  2638  0910' 1500'              	andwf	(sprintf@flag+1)& (0+255),w,b
  2639  0912' 6F00'              	movwf	(??_sprintf+1)& (0+255),b
  2640  0914' 5100'              	movf	??_sprintf& (0+255),w,b
  2641  0916' 1100'              	iorwf	(??_sprintf+1)& (0+255),w,b
  2642  0918' B4D8               	btfsc	status,2,c
  2643  091A' D008               	goto	l316
  2644                           
  2645                           ; BSR set to: 0
  2646                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2647  091C' C011' FFD9         	movff	sprintf@sp,fsr2l
  2648  0920' C012' FFDA         	movff	sprintf@sp+1,fsr2h
  2649  0924' 0E2D               	movlw	45
  2650  0926' 6EDF               	movwf	indf2,c
  2651  0928'                    l4007:
  2652                           
  2653                           ; BSR set to: 0
  2654  0928' 4B00'              	infsnz	sprintf@sp& (0+255),f,b
  2655  092A' 2B00'              	incf	(sprintf@sp+1)& (0+255),f,b
  2656  092C'                    l316:
  2657                           
  2658                           ; BSR set to: 0
  2659                           
  2660                           ; BSR set to: 0
  2661                           
  2662                           ; BSR set to: 0
  2663                           
  2664                           ; BSR set to: 0
  2665  092C' C013' FFF6         	movff	sprintf@f,tblptrl
  2666  0930' C014' FFF7         	movff	sprintf@f+1,tblptrh
  2667  0934' 4B00'              	infsnz	sprintf@f& (0+255),f,b
  2668  0936' 2B00'              	incf	(sprintf@f+1)& (0+255),f,b
  2669  0938'                    	if	0	;tblptru may be non-zero
  2670  0938'                    	endif
  2671  0938'                    	if	0	;tblptru may be non-zero
  2672  0938'                    	endif
  2673  0938' 0008               	tblrd		*
  2674  093A' CFF5 F036'         	movff	tablat,sprintf@c
  2675  093E' 5100'              	movf	sprintf@c& (0+255),w,b
  2676  0940' A4D8               	btfss	status,2,c
  2677  0942' EF00' F000'        	goto	l226
  2678  0946'                    u4480:
  2679                           
  2680                           ; BSR set to: 0
  2681                           ;doprnt.c: 1538: *sp = 0;
  2682                           
  2683                           ; BSR set to: 0
  2684                           
  2685                           ;doprnt.c: 1469: }
  2686                           ;doprnt.c: 1533: }
  2687                           ;doprnt.c: 1535: alldone:
  2688                           
  2689                           ; BSR set to: 0
  2690  0946' C011' FFD9         	movff	sprintf@sp,fsr2l
  2691  094A' C012' FFDA         	movff	sprintf@sp+1,fsr2h
  2692  094E' 0E00               	movlw	0
  2693  0950' 6EDF               	movwf	indf2,c
  2694  0952' 0012               	return	
  2695  0954'                    __end_of_sprintf:
  2696                           	opt stack 0
  2697                           tblptru	equ	0xFF8
  2698                           tblptrh	equ	0xFF7
  2699                           tblptrl	equ	0xFF6
  2700                           tablat	equ	0xFF5
  2701                           prodh	equ	0xFF4
  2702                           prodl	equ	0xFF3
  2703                           postinc0	equ	0xFEE
  2704                           wreg	equ	0xFE8
  2705                           indf2	equ	0xFDF
  2706                           postinc2	equ	0xFDE
  2707                           postdec2	equ	0xFDD
  2708                           fsr2h	equ	0xFDA
  2709                           fsr2l	equ	0xFD9
  2710                           status	equ	0xFD8
  2711                           
  2712 ;; *************** function _scale *****************
  2713 ;; Defined at:
  2714 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  2715 ;; Parameters:    Size  Location     Type
  2716 ;;  scl             1    wreg     char 
  2717 ;; Auto vars:     Size  Location     Type
  2718 ;;  scl             1   59[COMRAM] char 
  2719 ;; Return value:  Size  Location     Type
  2720 ;;                  3   53[COMRAM] char 
  2721 ;; Registers used:
  2722 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2723 ;; Tracked objects:
  2724 ;;		On entry : 0/0
  2725 ;;		On exit  : 0/0
  2726 ;;		Unchanged: 0/0
  2727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2728 ;;      Params:         3       0       0       0       0       0       0       0       0
  2729 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2730 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2731 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2732 ;;Total ram usage:        7 bytes
  2733 ;; Hardware stack levels used:    1
  2734 ;; Hardware stack levels required when called:    3
  2735 ;; This function calls:
  2736 ;;		___awdiv
  2737 ;;		___awmod
  2738 ;;		___ftmul
  2739 ;;		___wmul
  2740 ;; This function is called by:
  2741 ;;		_sprintf
  2742 ;; This function uses a non-reentrant model
  2743 ;;
  2744                           
  2745                           	psect	text2
  2746  0000'                    __ptext2:
  2747                           	opt stack 0
  2748  0000'                    _scale:
  2749                           	opt stack 26
  2750                           
  2751                           ; BSR set to: 0
  2752                           ;incstack = 0
  2753                           ;scale@scl stored from wreg
  2754  0000' 6E3B'              	movwf	scale@scl,c
  2755                           
  2756                           ;doprnt.c: 428: if(scl < 0) {
  2757  0002' AE3B'              	btfss	scale@scl,7,c
  2758  0004' D101               	goto	l215
  2759                           
  2760                           ;doprnt.c: 429: scl = -scl;
  2761  0006' 6C3B'              	negf	scale@scl,c
  2762                           
  2763                           ;doprnt.c: 430: if(scl>=110)
  2764  0008' 503B'              	movf	scale@scl,w,c
  2765  000A' 0A80               	xorlw	128
  2766  000C' 0F12               	addlw	-238
  2767  000E' A0D8               	btfss	status,0,c
  2768  0010' D091               	goto	l216
  2769                           
  2770                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2771  0012' 0E00               	movlw	0
  2772  0014' 6E23'              	movwf	___wmul@multiplicand+1,c
  2773  0016' 0E03               	movlw	3
  2774  0018' 6E22'              	movwf	___wmul@multiplicand,c
  2775  001A' 0E00               	movlw	0
  2776  001C' 6E1B'              	movwf	___awdiv@divisor+1,c
  2777  001E' 0E0A               	movlw	10
  2778  0020' 6E1A'              	movwf	___awdiv@divisor,c
  2779  0022' 0E00               	movlw	0
  2780  0024' 6E15'              	movwf	___awmod@divisor+1,c
  2781  0026' 0E64               	movlw	100
  2782  0028' 6E14'              	movwf	___awmod@divisor,c
  2783  002A' 503B'              	movf	scale@scl,w,c
  2784  002C' 6E12'              	movwf	___awmod@dividend,c
  2785  002E' 6A13'              	clrf	___awmod@dividend+1,c
  2786  0030' BE12'              	btfsc	___awmod@dividend,7,c
  2787  0032' 0613'              	decf	___awmod@dividend+1,f,c
  2788  0034' EC00' F000'        	call	___awmod	;wreg free
  2789  0038' C012' F018'        	movff	?___awmod,___awdiv@dividend
  2790  003C' C013' F019'        	movff	?___awmod+1,___awdiv@dividend+1
  2791  0040' EC00' F000'        	call	___awdiv	;wreg free
  2792  0044' 0E09               	movlw	9
  2793  0046' 2418'              	addwf	?___awdiv,w,c
  2794  0048' 6E20'              	movwf	___wmul@multiplier,c
  2795  004A' 0E00               	movlw	0
  2796  004C' 2019'              	addwfc	?___awdiv+1,w,c
  2797  004E' 6E21'              	movwf	___wmul@multiplier+1,c
  2798  0050' EC00' F000'        	call	___wmul	;wreg free
  2799  0054' 0E00'              	movlw	low __npowers_
  2800  0056' 2420'              	addwf	?___wmul,w,c
  2801  0058' 6EF6               	movwf	tblptrl,c
  2802  005A' 0E00'              	movlw	high __npowers_
  2803  005C' 2021'              	addwfc	?___wmul+1,w,c
  2804  005E' 6EF7               	movwf	tblptrh,c
  2805  0060'                    	if	0	;There are less than 3 active tblptr bytes
  2806  0060'                    	endif
  2807  0060' 0009               	tblrd		*+
  2808  0062' CFF5 F029'         	movff	tablat,___ftmul@f2
  2809  0066' 0009               	tblrd		*+
  2810  0068' CFF5 F02A'         	movff	tablat,___ftmul@f2+1
  2811  006C' 000A               	tblrd		*-
  2812  006E' CFF5 F02B'         	movff	tablat,___ftmul@f2+2
  2813  0072' 0E00               	movlw	0
  2814  0074' 6E1B'              	movwf	___awdiv@divisor+1,c
  2815  0076' 0E64               	movlw	100
  2816  0078' 6E1A'              	movwf	___awdiv@divisor,c
  2817  007A' 503B'              	movf	scale@scl,w,c
  2818  007C' 6E18'              	movwf	___awdiv@dividend,c
  2819  007E' 6A19'              	clrf	___awdiv@dividend+1,c
  2820  0080' BE18'              	btfsc	___awdiv@dividend,7,c
  2821  0082' 0619'              	decf	___awdiv@dividend+1,f,c
  2822  0084' EC00' F000'        	call	___awdiv	;wreg free
  2823  0088' 0E12               	movlw	18
  2824  008A' 2418'              	addwf	?___awdiv,w,c
  2825  008C' 6E20'              	movwf	___wmul@multiplier,c
  2826  008E' 0E00               	movlw	0
  2827  0090' 2019'              	addwfc	?___awdiv+1,w,c
  2828  0092' 6E21'              	movwf	___wmul@multiplier+1,c
  2829  0094' 0E00               	movlw	0
  2830  0096' 6E23'              	movwf	___wmul@multiplicand+1,c
  2831  0098' 0E03               	movlw	3
  2832  009A' 6E22'              	movwf	___wmul@multiplicand,c
  2833  009C' EC00' F000'        	call	___wmul	;wreg free
  2834  00A0' 0E00'              	movlw	low __npowers_
  2835  00A2' 2420'              	addwf	?___wmul,w,c
  2836  00A4' 6EF6               	movwf	tblptrl,c
  2837  00A6' 0E00'              	movlw	high __npowers_
  2838  00A8' 2021'              	addwfc	?___wmul+1,w,c
  2839  00AA' 6EF7               	movwf	tblptrh,c
  2840  00AC'                    	if	0	;There are less than 3 active tblptr bytes
  2841  00AC'                    	endif
  2842  00AC' 0009               	tblrd		*+
  2843  00AE' CFF5 F026'         	movff	tablat,___ftmul@f1
  2844  00B2' 0009               	tblrd		*+
  2845  00B4' CFF5 F027'         	movff	tablat,___ftmul@f1+1
  2846  00B8' 000A               	tblrd		*-
  2847  00BA' CFF5 F028'         	movff	tablat,___ftmul@f1+2
  2848  00BE' EC00' F000'        	call	___ftmul	;wreg free
  2849  00C2' C026' F038'        	movff	?___ftmul,_scale$1580
  2850  00C6' C027' F039'        	movff	?___ftmul+1,_scale$1580+1
  2851  00CA' C028' F03A'        	movff	?___ftmul+2,_scale$1580+2
  2852                           
  2853                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2854  00CE' C038' F026'        	movff	_scale$1580,___ftmul@f1
  2855  00D2' C039' F027'        	movff	_scale$1580+1,___ftmul@f1+1
  2856  00D6' C03A' F028'        	movff	_scale$1580+2,___ftmul@f1+2
  2857  00DA' 0E00               	movlw	0
  2858  00DC' 6E23'              	movwf	___wmul@multiplicand+1,c
  2859  00DE' 0E03               	movlw	3
  2860  00E0' 6E22'              	movwf	___wmul@multiplicand,c
  2861  00E2' 0E00               	movlw	0
  2862  00E4' 6E15'              	movwf	___awmod@divisor+1,c
  2863  00E6' 0E0A               	movlw	10
  2864  00E8' 6E14'              	movwf	___awmod@divisor,c
  2865  00EA' 503B'              	movf	scale@scl,w,c
  2866  00EC' 6E12'              	movwf	___awmod@dividend,c
  2867  00EE' 6A13'              	clrf	___awmod@dividend+1,c
  2868  00F0' BE12'              	btfsc	___awmod@dividend,7,c
  2869  00F2' 0613'              	decf	___awmod@dividend+1,f,c
  2870  00F4' EC00' F000'        	call	___awmod	;wreg free
  2871  00F8' C012' F020'        	movff	?___awmod,___wmul@multiplier
  2872  00FC' C013' F021'        	movff	?___awmod+1,___wmul@multiplier+1
  2873  0100' EC00' F000'        	call	___wmul	;wreg free
  2874  0104' 0E00'              	movlw	low __npowers_
  2875  0106' 2420'              	addwf	?___wmul,w,c
  2876  0108' 6EF6               	movwf	tblptrl,c
  2877  010A' 0E00'              	movlw	high __npowers_
  2878  010C' 2021'              	addwfc	?___wmul+1,w,c
  2879  010E' 6EF7               	movwf	tblptrh,c
  2880  0110'                    	if	0	;There are less than 3 active tblptr bytes
  2881  0110'                    	endif
  2882  0110' 0009               	tblrd		*+
  2883  0112' CFF5 F029'         	movff	tablat,___ftmul@f2
  2884  0116' 0009               	tblrd		*+
  2885  0118' CFF5 F02A'         	movff	tablat,___ftmul@f2+1
  2886  011C' 000A               	tblrd		*-
  2887  011E' CFF5 F02B'         	movff	tablat,___ftmul@f2+2
  2888  0122' EC00' F000'        	call	___ftmul	;wreg free
  2889  0126' C026' F035'        	movff	?___ftmul,?_scale
  2890  012A' C027' F036'        	movff	?___ftmul+1,?_scale+1
  2891  012E' C028' F037'        	movff	?___ftmul+2,?_scale+2
  2892  0132' 0012               	return	
  2893  0134'                    l216:
  2894                           
  2895                           ;doprnt.c: 432: else if(scl > 10)
  2896  0134' 503B'              	movf	scale@scl,w,c
  2897  0136' 0A80               	xorlw	128
  2898  0138' 0F75               	addlw	-139
  2899  013A' A0D8               	btfss	status,0,c
  2900  013C' D053               	goto	l219
  2901                           
  2902                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  2903  013E' 0E00               	movlw	0
  2904  0140' 6E1B'              	movwf	___awdiv@divisor+1,c
  2905  0142' 0E0A               	movlw	10
  2906  0144' 6E1A'              	movwf	___awdiv@divisor,c
  2907  0146' 503B'              	movf	scale@scl,w,c
  2908  0148' 6E18'              	movwf	___awdiv@dividend,c
  2909  014A' 6A19'              	clrf	___awdiv@dividend+1,c
  2910  014C' BE18'              	btfsc	___awdiv@dividend,7,c
  2911  014E' 0619'              	decf	___awdiv@dividend+1,f,c
  2912  0150' EC00' F000'        	call	___awdiv	;wreg free
  2913  0154' 0E09               	movlw	9
  2914  0156' 2418'              	addwf	?___awdiv,w,c
  2915  0158' 6E20'              	movwf	___wmul@multiplier,c
  2916  015A' 0E00               	movlw	0
  2917  015C' 2019'              	addwfc	?___awdiv+1,w,c
  2918  015E' 6E21'              	movwf	___wmul@multiplier+1,c
  2919  0160' 0E00               	movlw	0
  2920  0162' 6E23'              	movwf	___wmul@multiplicand+1,c
  2921  0164' 0E03               	movlw	3
  2922  0166' 6E22'              	movwf	___wmul@multiplicand,c
  2923  0168' EC00' F000'        	call	___wmul	;wreg free
  2924  016C' 0E00'              	movlw	low __npowers_
  2925  016E' 2420'              	addwf	?___wmul,w,c
  2926  0170' 6EF6               	movwf	tblptrl,c
  2927  0172' 0E00'              	movlw	high __npowers_
  2928  0174' 2021'              	addwfc	?___wmul+1,w,c
  2929  0176' 6EF7               	movwf	tblptrh,c
  2930  0178'                    	if	0	;There are less than 3 active tblptr bytes
  2931  0178'                    	endif
  2932  0178' 0009               	tblrd		*+
  2933  017A' CFF5 F026'         	movff	tablat,___ftmul@f1
  2934  017E' 0009               	tblrd		*+
  2935  0180' CFF5 F027'         	movff	tablat,___ftmul@f1+1
  2936  0184' 000A               	tblrd		*-
  2937  0186' CFF5 F028'         	movff	tablat,___ftmul@f1+2
  2938  018A' 0E00               	movlw	0
  2939  018C' 6E23'              	movwf	___wmul@multiplicand+1,c
  2940  018E' 0E03               	movlw	3
  2941  0190' 6E22'              	movwf	___wmul@multiplicand,c
  2942  0192' 0E00               	movlw	0
  2943  0194' 6E15'              	movwf	___awmod@divisor+1,c
  2944  0196' 0E0A               	movlw	10
  2945  0198' 6E14'              	movwf	___awmod@divisor,c
  2946  019A' 503B'              	movf	scale@scl,w,c
  2947  019C' 6E12'              	movwf	___awmod@dividend,c
  2948  019E' 6A13'              	clrf	___awmod@dividend+1,c
  2949  01A0' BE12'              	btfsc	___awmod@dividend,7,c
  2950  01A2' 0613'              	decf	___awmod@dividend+1,f,c
  2951  01A4' EC00' F000'        	call	___awmod	;wreg free
  2952  01A8' C012' F020'        	movff	?___awmod,___wmul@multiplier
  2953  01AC' C013' F021'        	movff	?___awmod+1,___wmul@multiplier+1
  2954  01B0' EC00' F000'        	call	___wmul	;wreg free
  2955  01B4' 0E00'              	movlw	low __npowers_
  2956  01B6' 2420'              	addwf	?___wmul,w,c
  2957  01B8' 6EF6               	movwf	tblptrl,c
  2958  01BA' 0E00'              	movlw	high __npowers_
  2959  01BC' 2021'              	addwfc	?___wmul+1,w,c
  2960  01BE' 6EF7               	movwf	tblptrh,c
  2961  01C0'                    	if	0	;There are less than 3 active tblptr bytes
  2962  01C0'                    	endif
  2963  01C0' 0009               	tblrd		*+
  2964  01C2' CFF5 F029'         	movff	tablat,___ftmul@f2
  2965  01C6' 0009               	tblrd		*+
  2966  01C8' CFF5 F02A'         	movff	tablat,___ftmul@f2+1
  2967  01CC' 000A               	tblrd		*-
  2968  01CE' CFF5 F02B'         	movff	tablat,___ftmul@f2+2
  2969  01D2' EC00' F000'        	call	___ftmul	;wreg free
  2970  01D6' C026' F035'        	movff	?___ftmul,?_scale
  2971  01DA' C027' F036'        	movff	?___ftmul+1,?_scale+1
  2972  01DE' C028' F037'        	movff	?___ftmul+2,?_scale+2
  2973  01E2' 0012               	return	
  2974  01E4'                    l219:
  2975                           
  2976                           ;doprnt.c: 434: return _npowers_[scl];
  2977  01E4' 503B'              	movf	scale@scl,w,c
  2978  01E6' 0D03               	mullw	3
  2979  01E8' 0E00'              	movlw	low __npowers_
  2980  01EA' 24F3               	addwf	prodl,w,c
  2981  01EC' 6EF6               	movwf	tblptrl,c
  2982  01EE' 0E00'              	movlw	high __npowers_
  2983  01F0' 20F4               	addwfc	prodh,w,c
  2984  01F2' 6EF7               	movwf	tblptrh,c
  2985  01F4'                    	if	0	;There are less than 3 active tblptr bytes
  2986  01F4'                    	endif
  2987  01F4' 0009               	tblrd		*+
  2988  01F6' CFF5 F035'         	movff	tablat,?_scale
  2989  01FA' 0009               	tblrd		*+
  2990  01FC' CFF5 F036'         	movff	tablat,?_scale+1
  2991  0200' 000A               	tblrd		*-
  2992  0202' CFF5 F037'         	movff	tablat,?_scale+2
  2993  0206' 0012               	return	
  2994  0208'                    l215:
  2995                           
  2996                           ;doprnt.c: 435: }
  2997                           ;doprnt.c: 436: if(scl>=110)
  2998  0208' 503B'              	movf	scale@scl,w,c
  2999  020A' 0A80               	xorlw	128
  3000  020C' 0F12               	addlw	-238
  3001  020E' A0D8               	btfss	status,0,c
  3002  0210' D091               	goto	l220
  3003                           
  3004                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3005  0212' 0E00               	movlw	0
  3006  0214' 6E23'              	movwf	___wmul@multiplicand+1,c
  3007  0216' 0E03               	movlw	3
  3008  0218' 6E22'              	movwf	___wmul@multiplicand,c
  3009  021A' 0E00               	movlw	0
  3010  021C' 6E1B'              	movwf	___awdiv@divisor+1,c
  3011  021E' 0E0A               	movlw	10
  3012  0220' 6E1A'              	movwf	___awdiv@divisor,c
  3013  0222' 0E00               	movlw	0
  3014  0224' 6E15'              	movwf	___awmod@divisor+1,c
  3015  0226' 0E64               	movlw	100
  3016  0228' 6E14'              	movwf	___awmod@divisor,c
  3017  022A' 503B'              	movf	scale@scl,w,c
  3018  022C' 6E12'              	movwf	___awmod@dividend,c
  3019  022E' 6A13'              	clrf	___awmod@dividend+1,c
  3020  0230' BE12'              	btfsc	___awmod@dividend,7,c
  3021  0232' 0613'              	decf	___awmod@dividend+1,f,c
  3022  0234' EC00' F000'        	call	___awmod	;wreg free
  3023  0238' C012' F018'        	movff	?___awmod,___awdiv@dividend
  3024  023C' C013' F019'        	movff	?___awmod+1,___awdiv@dividend+1
  3025  0240' EC00' F000'        	call	___awdiv	;wreg free
  3026  0244' 0E09               	movlw	9
  3027  0246' 2418'              	addwf	?___awdiv,w,c
  3028  0248' 6E20'              	movwf	___wmul@multiplier,c
  3029  024A' 0E00               	movlw	0
  3030  024C' 2019'              	addwfc	?___awdiv+1,w,c
  3031  024E' 6E21'              	movwf	___wmul@multiplier+1,c
  3032  0250' EC00' F000'        	call	___wmul	;wreg free
  3033  0254' 0E00'              	movlw	low __powers_
  3034  0256' 2420'              	addwf	?___wmul,w,c
  3035  0258' 6EF6               	movwf	tblptrl,c
  3036  025A' 0E00'              	movlw	high __powers_
  3037  025C' 2021'              	addwfc	?___wmul+1,w,c
  3038  025E' 6EF7               	movwf	tblptrh,c
  3039  0260'                    	if	0	;There are less than 3 active tblptr bytes
  3040  0260'                    	endif
  3041  0260' 0009               	tblrd		*+
  3042  0262' CFF5 F029'         	movff	tablat,___ftmul@f2
  3043  0266' 0009               	tblrd		*+
  3044  0268' CFF5 F02A'         	movff	tablat,___ftmul@f2+1
  3045  026C' 000A               	tblrd		*-
  3046  026E' CFF5 F02B'         	movff	tablat,___ftmul@f2+2
  3047  0272' 0E00               	movlw	0
  3048  0274' 6E1B'              	movwf	___awdiv@divisor+1,c
  3049  0276' 0E64               	movlw	100
  3050  0278' 6E1A'              	movwf	___awdiv@divisor,c
  3051  027A' 503B'              	movf	scale@scl,w,c
  3052  027C' 6E18'              	movwf	___awdiv@dividend,c
  3053  027E' 6A19'              	clrf	___awdiv@dividend+1,c
  3054  0280' BE18'              	btfsc	___awdiv@dividend,7,c
  3055  0282' 0619'              	decf	___awdiv@dividend+1,f,c
  3056  0284' EC00' F000'        	call	___awdiv	;wreg free
  3057  0288' 0E12               	movlw	18
  3058  028A' 2418'              	addwf	?___awdiv,w,c
  3059  028C' 6E20'              	movwf	___wmul@multiplier,c
  3060  028E' 0E00               	movlw	0
  3061  0290' 2019'              	addwfc	?___awdiv+1,w,c
  3062  0292' 6E21'              	movwf	___wmul@multiplier+1,c
  3063  0294' 0E00               	movlw	0
  3064  0296' 6E23'              	movwf	___wmul@multiplicand+1,c
  3065  0298' 0E03               	movlw	3
  3066  029A' 6E22'              	movwf	___wmul@multiplicand,c
  3067  029C' EC00' F000'        	call	___wmul	;wreg free
  3068  02A0' 0E00'              	movlw	low __powers_
  3069  02A2' 2420'              	addwf	?___wmul,w,c
  3070  02A4' 6EF6               	movwf	tblptrl,c
  3071  02A6' 0E00'              	movlw	high __powers_
  3072  02A8' 2021'              	addwfc	?___wmul+1,w,c
  3073  02AA' 6EF7               	movwf	tblptrh,c
  3074  02AC'                    	if	0	;There are less than 3 active tblptr bytes
  3075  02AC'                    	endif
  3076  02AC' 0009               	tblrd		*+
  3077  02AE' CFF5 F026'         	movff	tablat,___ftmul@f1
  3078  02B2' 0009               	tblrd		*+
  3079  02B4' CFF5 F027'         	movff	tablat,___ftmul@f1+1
  3080  02B8' 000A               	tblrd		*-
  3081  02BA' CFF5 F028'         	movff	tablat,___ftmul@f1+2
  3082  02BE' EC00' F000'        	call	___ftmul	;wreg free
  3083  02C2' C026' F038'        	movff	?___ftmul,_scale$1580
  3084  02C6' C027' F039'        	movff	?___ftmul+1,_scale$1580+1
  3085  02CA' C028' F03A'        	movff	?___ftmul+2,_scale$1580+2
  3086                           
  3087                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3088  02CE' C038' F026'        	movff	_scale$1580,___ftmul@f1
  3089  02D2' C039' F027'        	movff	_scale$1580+1,___ftmul@f1+1
  3090  02D6' C03A' F028'        	movff	_scale$1580+2,___ftmul@f1+2
  3091  02DA' 0E00               	movlw	0
  3092  02DC' 6E23'              	movwf	___wmul@multiplicand+1,c
  3093  02DE' 0E03               	movlw	3
  3094  02E0' 6E22'              	movwf	___wmul@multiplicand,c
  3095  02E2' 0E00               	movlw	0
  3096  02E4' 6E15'              	movwf	___awmod@divisor+1,c
  3097  02E6' 0E0A               	movlw	10
  3098  02E8' 6E14'              	movwf	___awmod@divisor,c
  3099  02EA' 503B'              	movf	scale@scl,w,c
  3100  02EC' 6E12'              	movwf	___awmod@dividend,c
  3101  02EE' 6A13'              	clrf	___awmod@dividend+1,c
  3102  02F0' BE12'              	btfsc	___awmod@dividend,7,c
  3103  02F2' 0613'              	decf	___awmod@dividend+1,f,c
  3104  02F4' EC00' F000'        	call	___awmod	;wreg free
  3105  02F8' C012' F020'        	movff	?___awmod,___wmul@multiplier
  3106  02FC' C013' F021'        	movff	?___awmod+1,___wmul@multiplier+1
  3107  0300' EC00' F000'        	call	___wmul	;wreg free
  3108  0304' 0E00'              	movlw	low __powers_
  3109  0306' 2420'              	addwf	?___wmul,w,c
  3110  0308' 6EF6               	movwf	tblptrl,c
  3111  030A' 0E00'              	movlw	high __powers_
  3112  030C' 2021'              	addwfc	?___wmul+1,w,c
  3113  030E' 6EF7               	movwf	tblptrh,c
  3114  0310'                    	if	0	;There are less than 3 active tblptr bytes
  3115  0310'                    	endif
  3116  0310' 0009               	tblrd		*+
  3117  0312' CFF5 F029'         	movff	tablat,___ftmul@f2
  3118  0316' 0009               	tblrd		*+
  3119  0318' CFF5 F02A'         	movff	tablat,___ftmul@f2+1
  3120  031C' 000A               	tblrd		*-
  3121  031E' CFF5 F02B'         	movff	tablat,___ftmul@f2+2
  3122  0322' EC00' F000'        	call	___ftmul	;wreg free
  3123  0326' C026' F035'        	movff	?___ftmul,?_scale
  3124  032A' C027' F036'        	movff	?___ftmul+1,?_scale+1
  3125  032E' C028' F037'        	movff	?___ftmul+2,?_scale+2
  3126  0332' 0012               	return	
  3127  0334'                    l220:
  3128                           
  3129                           ;doprnt.c: 438: else if(scl > 10)
  3130  0334' 503B'              	movf	scale@scl,w,c
  3131  0336' 0A80               	xorlw	128
  3132  0338' 0F75               	addlw	-139
  3133  033A' A0D8               	btfss	status,0,c
  3134  033C' D053               	goto	l222
  3135                           
  3136                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3137  033E' 0E00               	movlw	0
  3138  0340' 6E1B'              	movwf	___awdiv@divisor+1,c
  3139  0342' 0E0A               	movlw	10
  3140  0344' 6E1A'              	movwf	___awdiv@divisor,c
  3141  0346' 503B'              	movf	scale@scl,w,c
  3142  0348' 6E18'              	movwf	___awdiv@dividend,c
  3143  034A' 6A19'              	clrf	___awdiv@dividend+1,c
  3144  034C' BE18'              	btfsc	___awdiv@dividend,7,c
  3145  034E' 0619'              	decf	___awdiv@dividend+1,f,c
  3146  0350' EC00' F000'        	call	___awdiv	;wreg free
  3147  0354' 0E09               	movlw	9
  3148  0356' 2418'              	addwf	?___awdiv,w,c
  3149  0358' 6E20'              	movwf	___wmul@multiplier,c
  3150  035A' 0E00               	movlw	0
  3151  035C' 2019'              	addwfc	?___awdiv+1,w,c
  3152  035E' 6E21'              	movwf	___wmul@multiplier+1,c
  3153  0360' 0E00               	movlw	0
  3154  0362' 6E23'              	movwf	___wmul@multiplicand+1,c
  3155  0364' 0E03               	movlw	3
  3156  0366' 6E22'              	movwf	___wmul@multiplicand,c
  3157  0368' EC00' F000'        	call	___wmul	;wreg free
  3158  036C' 0E00'              	movlw	low __powers_
  3159  036E' 2420'              	addwf	?___wmul,w,c
  3160  0370' 6EF6               	movwf	tblptrl,c
  3161  0372' 0E00'              	movlw	high __powers_
  3162  0374' 2021'              	addwfc	?___wmul+1,w,c
  3163  0376' 6EF7               	movwf	tblptrh,c
  3164  0378'                    	if	0	;There are less than 3 active tblptr bytes
  3165  0378'                    	endif
  3166  0378' 0009               	tblrd		*+
  3167  037A' CFF5 F026'         	movff	tablat,___ftmul@f1
  3168  037E' 0009               	tblrd		*+
  3169  0380' CFF5 F027'         	movff	tablat,___ftmul@f1+1
  3170  0384' 000A               	tblrd		*-
  3171  0386' CFF5 F028'         	movff	tablat,___ftmul@f1+2
  3172  038A' 0E00               	movlw	0
  3173  038C' 6E23'              	movwf	___wmul@multiplicand+1,c
  3174  038E' 0E03               	movlw	3
  3175  0390' 6E22'              	movwf	___wmul@multiplicand,c
  3176  0392' 0E00               	movlw	0
  3177  0394' 6E15'              	movwf	___awmod@divisor+1,c
  3178  0396' 0E0A               	movlw	10
  3179  0398' 6E14'              	movwf	___awmod@divisor,c
  3180  039A' 503B'              	movf	scale@scl,w,c
  3181  039C' 6E12'              	movwf	___awmod@dividend,c
  3182  039E' 6A13'              	clrf	___awmod@dividend+1,c
  3183  03A0' BE12'              	btfsc	___awmod@dividend,7,c
  3184  03A2' 0613'              	decf	___awmod@dividend+1,f,c
  3185  03A4' EC00' F000'        	call	___awmod	;wreg free
  3186  03A8' C012' F020'        	movff	?___awmod,___wmul@multiplier
  3187  03AC' C013' F021'        	movff	?___awmod+1,___wmul@multiplier+1
  3188  03B0' EC00' F000'        	call	___wmul	;wreg free
  3189  03B4' 0E00'              	movlw	low __powers_
  3190  03B6' 2420'              	addwf	?___wmul,w,c
  3191  03B8' 6EF6               	movwf	tblptrl,c
  3192  03BA' 0E00'              	movlw	high __powers_
  3193  03BC' 2021'              	addwfc	?___wmul+1,w,c
  3194  03BE' 6EF7               	movwf	tblptrh,c
  3195  03C0'                    	if	0	;There are less than 3 active tblptr bytes
  3196  03C0'                    	endif
  3197  03C0' 0009               	tblrd		*+
  3198  03C2' CFF5 F029'         	movff	tablat,___ftmul@f2
  3199  03C6' 0009               	tblrd		*+
  3200  03C8' CFF5 F02A'         	movff	tablat,___ftmul@f2+1
  3201  03CC' 000A               	tblrd		*-
  3202  03CE' CFF5 F02B'         	movff	tablat,___ftmul@f2+2
  3203  03D2' EC00' F000'        	call	___ftmul	;wreg free
  3204  03D6' C026' F035'        	movff	?___ftmul,?_scale
  3205  03DA' C027' F036'        	movff	?___ftmul+1,?_scale+1
  3206  03DE' C028' F037'        	movff	?___ftmul+2,?_scale+2
  3207  03E2' 0012               	return	
  3208  03E4'                    l222:
  3209                           
  3210                           ;doprnt.c: 440: return _powers_[scl];
  3211  03E4' 503B'              	movf	scale@scl,w,c
  3212  03E6' 0D03               	mullw	3
  3213  03E8' 0E00'              	movlw	low __powers_
  3214  03EA' 24F3               	addwf	prodl,w,c
  3215  03EC' 6EF6               	movwf	tblptrl,c
  3216  03EE' 0E00'              	movlw	high __powers_
  3217  03F0' 20F4               	addwfc	prodh,w,c
  3218  03F2' 6EF7               	movwf	tblptrh,c
  3219  03F4'                    	if	0	;There are less than 3 active tblptr bytes
  3220  03F4'                    	endif
  3221  03F4' 0009               	tblrd		*+
  3222  03F6' CFF5 F035'         	movff	tablat,?_scale
  3223  03FA' 0009               	tblrd		*+
  3224  03FC' CFF5 F036'         	movff	tablat,?_scale+1
  3225  0400' 000A               	tblrd		*-
  3226  0402' CFF5 F037'         	movff	tablat,?_scale+2
  3227  0406' 0012               	return	
  3228  0408'                    __end_of_scale:
  3229                           	opt stack 0
  3230                           tblptru	equ	0xFF8
  3231                           tblptrh	equ	0xFF7
  3232                           tblptrl	equ	0xFF6
  3233                           tablat	equ	0xFF5
  3234                           prodh	equ	0xFF4
  3235                           prodl	equ	0xFF3
  3236                           postinc0	equ	0xFEE
  3237                           wreg	equ	0xFE8
  3238                           indf2	equ	0xFDF
  3239                           postinc2	equ	0xFDE
  3240                           postdec2	equ	0xFDD
  3241                           fsr2h	equ	0xFDA
  3242                           fsr2l	equ	0xFD9
  3243                           status	equ	0xFD8
  3244                           
  3245 ;; *************** function _isdigit *****************
  3246 ;; Defined at:
  3247 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  3248 ;; Parameters:    Size  Location     Type
  3249 ;;  c               1    wreg     unsigned char 
  3250 ;; Auto vars:     Size  Location     Type
  3251 ;;  c               1   20[COMRAM] unsigned char 
  3252 ;; Return value:  Size  Location     Type
  3253 ;;		None               void
  3254 ;; Registers used:
  3255 ;;		wreg, status,2, status,0
  3256 ;; Tracked objects:
  3257 ;;		On entry : 0/0
  3258 ;;		On exit  : 0/0
  3259 ;;		Unchanged: 0/0
  3260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3261 ;;      Params:         0       0       0       0       0       0       0       0       0
  3262 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3263 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3264 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3265 ;;Total ram usage:        3 bytes
  3266 ;; Hardware stack levels used:    1
  3267 ;; Hardware stack levels required when called:    1
  3268 ;; This function calls:
  3269 ;;		Nothing
  3270 ;; This function is called by:
  3271 ;;		_sprintf
  3272 ;; This function uses a non-reentrant model
  3273 ;;
  3274                           
  3275                           	psect	text3
  3276  0000'                    __ptext3:
  3277                           	opt stack 0
  3278  0000'                    _isdigit:
  3279                           	opt stack 28
  3280                           
  3281                           ;incstack = 0
  3282                           ;isdigit@c stored from wreg
  3283  0000' 6E14'              	movwf	isdigit@c,c
  3284  0002' 0E00               	movlw	0
  3285  0004' 6E13'              	movwf	_isdigit$1222,c
  3286  0006' 0E3A               	movlw	58
  3287  0008' 6014'              	cpfslt	isdigit@c,c
  3288  000A' D005               	goto	l682
  3289  000C' 0E2F               	movlw	47
  3290  000E' 6414'              	cpfsgt	isdigit@c,c
  3291  0010' D002               	goto	l682
  3292  0012' 0E01               	movlw	1
  3293  0014' 6E13'              	movwf	_isdigit$1222,c
  3294  0016'                    l682:
  3295  0016' C013' F012'        	movff	_isdigit$1222,??_isdigit
  3296  001A' 3012'              	rrcf	??_isdigit,w,c
  3297  001C' 0012               	return	
  3298  001E'                    __end_of_isdigit:
  3299                           	opt stack 0
  3300                           tblptru	equ	0xFF8
  3301                           tblptrh	equ	0xFF7
  3302                           tblptrl	equ	0xFF6
  3303                           tablat	equ	0xFF5
  3304                           prodh	equ	0xFF4
  3305                           prodl	equ	0xFF3
  3306                           postinc0	equ	0xFEE
  3307                           wreg	equ	0xFE8
  3308                           indf2	equ	0xFDF
  3309                           postinc2	equ	0xFDE
  3310                           postdec2	equ	0xFDD
  3311                           fsr2h	equ	0xFDA
  3312                           fsr2l	equ	0xFD9
  3313                           status	equ	0xFD8
  3314                           
  3315 ;; *************** function _fround *****************
  3316 ;; Defined at:
  3317 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  3318 ;; Parameters:    Size  Location     Type
  3319 ;;  prec            1    wreg     unsigned char 
  3320 ;; Auto vars:     Size  Location     Type
  3321 ;;  prec            1   62[COMRAM] unsigned char 
  3322 ;; Return value:  Size  Location     Type
  3323 ;;                  3   53[COMRAM] unsigned char 
  3324 ;; Registers used:
  3325 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3326 ;; Tracked objects:
  3327 ;;		On entry : 0/0
  3328 ;;		On exit  : 0/0
  3329 ;;		Unchanged: 0/0
  3330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3331 ;;      Params:         3       0       0       0       0       0       0       0       0
  3332 ;;      Locals:         7       0       0       0       0       0       0       0       0
  3333 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3334 ;;      Totals:        10       0       0       0       0       0       0       0       0
  3335 ;;Total ram usage:       10 bytes
  3336 ;; Hardware stack levels used:    1
  3337 ;; Hardware stack levels required when called:    3
  3338 ;; This function calls:
  3339 ;;		___awdiv
  3340 ;;		___awmod
  3341 ;;		___ftmul
  3342 ;;		___wmul
  3343 ;; This function is called by:
  3344 ;;		_sprintf
  3345 ;; This function uses a non-reentrant model
  3346 ;;
  3347                           
  3348                           	psect	text4
  3349  0000'                    __ptext4:
  3350                           	opt stack 0
  3351  0000'                    _fround:
  3352                           	opt stack 26
  3353                           
  3354                           ;incstack = 0
  3355                           ;fround@prec stored from wreg
  3356  0000' 6E3E'              	movwf	fround@prec,c
  3357                           
  3358                           ;doprnt.c: 413: if(prec>=110)
  3359  0002' 0E6D               	movlw	109
  3360  0004' 643E'              	cpfsgt	fround@prec,c
  3361  0006' D09F               	goto	l209
  3362                           
  3363                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3364  0008' 0E00               	movlw	0
  3365  000A' 6E23'              	movwf	___wmul@multiplicand+1,c
  3366  000C' 0E03               	movlw	3
  3367  000E' 6E22'              	movwf	___wmul@multiplicand,c
  3368  0010' 0E00               	movlw	0
  3369  0012' 6E1B'              	movwf	___awdiv@divisor+1,c
  3370  0014' 0E0A               	movlw	10
  3371  0016' 6E1A'              	movwf	___awdiv@divisor,c
  3372  0018' 0E00               	movlw	0
  3373  001A' 6E15'              	movwf	___awmod@divisor+1,c
  3374  001C' 0E64               	movlw	100
  3375  001E' 6E14'              	movwf	___awmod@divisor,c
  3376  0020' C03E' F012'        	movff	fround@prec,___awmod@dividend
  3377  0024' 6A13'              	clrf	___awmod@dividend+1,c
  3378  0026' EC00' F000'        	call	___awmod	;wreg free
  3379  002A' C012' F018'        	movff	?___awmod,___awdiv@dividend
  3380  002E' C013' F019'        	movff	?___awmod+1,___awdiv@dividend+1
  3381  0032' EC00' F000'        	call	___awdiv	;wreg free
  3382  0036' 0E09               	movlw	9
  3383  0038' 2418'              	addwf	?___awdiv,w,c
  3384  003A' 6E20'              	movwf	___wmul@multiplier,c
  3385  003C' 0E00               	movlw	0
  3386  003E' 2019'              	addwfc	?___awdiv+1,w,c
  3387  0040' 6E21'              	movwf	___wmul@multiplier+1,c
  3388  0042' EC00' F000'        	call	___wmul	;wreg free
  3389  0046' 0E00'              	movlw	low __npowers_
  3390  0048' 2420'              	addwf	?___wmul,w,c
  3391  004A' 6EF6               	movwf	tblptrl,c
  3392  004C' 0E00'              	movlw	high __npowers_
  3393  004E' 2021'              	addwfc	?___wmul+1,w,c
  3394  0050' 6EF7               	movwf	tblptrh,c
  3395  0052'                    	if	0	;There are less than 3 active tblptr bytes
  3396  0052'                    	endif
  3397  0052' 0009               	tblrd		*+
  3398  0054' CFF5 F029'         	movff	tablat,___ftmul@f2
  3399  0058' 0009               	tblrd		*+
  3400  005A' CFF5 F02A'         	movff	tablat,___ftmul@f2+1
  3401  005E' 000A               	tblrd		*-
  3402  0060' CFF5 F02B'         	movff	tablat,___ftmul@f2+2
  3403  0064' 0E00               	movlw	0
  3404  0066' 6E1B'              	movwf	___awdiv@divisor+1,c
  3405  0068' 0E64               	movlw	100
  3406  006A' 6E1A'              	movwf	___awdiv@divisor,c
  3407  006C' C03E' F018'        	movff	fround@prec,___awdiv@dividend
  3408  0070' 6A19'              	clrf	___awdiv@dividend+1,c
  3409  0072' EC00' F000'        	call	___awdiv	;wreg free
  3410  0076' 0E12               	movlw	18
  3411  0078' 2418'              	addwf	?___awdiv,w,c
  3412  007A' 6E20'              	movwf	___wmul@multiplier,c
  3413  007C' 0E00               	movlw	0
  3414  007E' 2019'              	addwfc	?___awdiv+1,w,c
  3415  0080' 6E21'              	movwf	___wmul@multiplier+1,c
  3416  0082' 0E00               	movlw	0
  3417  0084' 6E23'              	movwf	___wmul@multiplicand+1,c
  3418  0086' 0E03               	movlw	3
  3419  0088' 6E22'              	movwf	___wmul@multiplicand,c
  3420  008A' EC00' F000'        	call	___wmul	;wreg free
  3421  008E' 0E00'              	movlw	low __npowers_
  3422  0090' 2420'              	addwf	?___wmul,w,c
  3423  0092' 6EF6               	movwf	tblptrl,c
  3424  0094' 0E00'              	movlw	high __npowers_
  3425  0096' 2021'              	addwfc	?___wmul+1,w,c
  3426  0098' 6EF7               	movwf	tblptrh,c
  3427  009A'                    	if	0	;There are less than 3 active tblptr bytes
  3428  009A'                    	endif
  3429  009A' 0009               	tblrd		*+
  3430  009C' CFF5 F026'         	movff	tablat,___ftmul@f1
  3431  00A0' 0009               	tblrd		*+
  3432  00A2' CFF5 F027'         	movff	tablat,___ftmul@f1+1
  3433  00A6' 000A               	tblrd		*-
  3434  00A8' CFF5 F028'         	movff	tablat,___ftmul@f1+2
  3435  00AC' EC00' F000'        	call	___ftmul	;wreg free
  3436  00B0' C026' F03B'        	movff	?___ftmul,_fround$1578
  3437  00B4' C027' F03C'        	movff	?___ftmul+1,_fround$1578+1
  3438  00B8' C028' F03D'        	movff	?___ftmul+2,_fround$1578+2
  3439                           
  3440                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3441  00BC' 0E00               	movlw	0
  3442  00BE' 6E23'              	movwf	___wmul@multiplicand+1,c
  3443  00C0' 0E03               	movlw	3
  3444  00C2' 6E22'              	movwf	___wmul@multiplicand,c
  3445  00C4' 0E00               	movlw	0
  3446  00C6' 6E15'              	movwf	___awmod@divisor+1,c
  3447  00C8' 0E0A               	movlw	10
  3448  00CA' 6E14'              	movwf	___awmod@divisor,c
  3449  00CC' C03E' F012'        	movff	fround@prec,___awmod@dividend
  3450  00D0' 6A13'              	clrf	___awmod@dividend+1,c
  3451  00D2' EC00' F000'        	call	___awmod	;wreg free
  3452  00D6' C012' F020'        	movff	?___awmod,___wmul@multiplier
  3453  00DA' C013' F021'        	movff	?___awmod+1,___wmul@multiplier+1
  3454  00DE' EC00' F000'        	call	___wmul	;wreg free
  3455  00E2' 0E00'              	movlw	low __npowers_
  3456  00E4' 2420'              	addwf	?___wmul,w,c
  3457  00E6' 6EF6               	movwf	tblptrl,c
  3458  00E8' 0E00'              	movlw	high __npowers_
  3459  00EA' 2021'              	addwfc	?___wmul+1,w,c
  3460  00EC' 6EF7               	movwf	tblptrh,c
  3461  00EE'                    	if	0	;There are less than 3 active tblptr bytes
  3462  00EE'                    	endif
  3463  00EE' 0009               	tblrd		*+
  3464  00F0' CFF5 F029'         	movff	tablat,___ftmul@f2
  3465  00F4' 0009               	tblrd		*+
  3466  00F6' CFF5 F02A'         	movff	tablat,___ftmul@f2+1
  3467  00FA' 000A               	tblrd		*-
  3468  00FC' CFF5 F02B'         	movff	tablat,___ftmul@f2+2
  3469  0100' C03B' F026'        	movff	_fround$1578,___ftmul@f1
  3470  0104' C03C' F027'        	movff	_fround$1578+1,___ftmul@f1+1
  3471  0108' C03D' F028'        	movff	_fround$1578+2,___ftmul@f1+2
  3472  010C' EC00' F000'        	call	___ftmul	;wreg free
  3473  0110' C026' F038'        	movff	?___ftmul,_fround$1579
  3474  0114' C027' F039'        	movff	?___ftmul+1,_fround$1579+1
  3475  0118' C028' F03A'        	movff	?___ftmul+2,_fround$1579+2
  3476                           
  3477                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3478  011C' C038' F026'        	movff	_fround$1579,___ftmul@f1
  3479  0120' C039' F027'        	movff	_fround$1579+1,___ftmul@f1+1
  3480  0124' C03A' F028'        	movff	_fround$1579+2,___ftmul@f1+2
  3481  0128' 0E00               	movlw	0
  3482  012A' 6E29'              	movwf	___ftmul@f2,c
  3483  012C' 0E00               	movlw	0
  3484  012E' 6E2A'              	movwf	___ftmul@f2+1,c
  3485  0130' 0E3F               	movlw	63
  3486  0132' 6E2B'              	movwf	___ftmul@f2+2,c
  3487  0134' EC00' F000'        	call	___ftmul	;wreg free
  3488  0138' C026' F035'        	movff	?___ftmul,?_fround
  3489  013C' C027' F036'        	movff	?___ftmul+1,?_fround+1
  3490  0140' C028' F037'        	movff	?___ftmul+2,?_fround+2
  3491  0144' 0012               	return	
  3492  0146'                    l209:
  3493                           
  3494                           ;doprnt.c: 415: else if(prec > 10)
  3495  0146' 0E0A               	movlw	10
  3496  0148' 643E'              	cpfsgt	fround@prec,c
  3497  014A' D063               	goto	l212
  3498                           
  3499                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3500  014C' 0E00               	movlw	0
  3501  014E' 6E23'              	movwf	___wmul@multiplicand+1,c
  3502  0150' 0E03               	movlw	3
  3503  0152' 6E22'              	movwf	___wmul@multiplicand,c
  3504  0154' 0E00               	movlw	0
  3505  0156' 6E15'              	movwf	___awmod@divisor+1,c
  3506  0158' 0E0A               	movlw	10
  3507  015A' 6E14'              	movwf	___awmod@divisor,c
  3508  015C' C03E' F012'        	movff	fround@prec,___awmod@dividend
  3509  0160' 6A13'              	clrf	___awmod@dividend+1,c
  3510  0162' EC00' F000'        	call	___awmod	;wreg free
  3511  0166' C012' F020'        	movff	?___awmod,___wmul@multiplier
  3512  016A' C013' F021'        	movff	?___awmod+1,___wmul@multiplier+1
  3513  016E' EC00' F000'        	call	___wmul	;wreg free
  3514  0172' 0E00'              	movlw	low __npowers_
  3515  0174' 2420'              	addwf	?___wmul,w,c
  3516  0176' 6EF6               	movwf	tblptrl,c
  3517  0178' 0E00'              	movlw	high __npowers_
  3518  017A' 2021'              	addwfc	?___wmul+1,w,c
  3519  017C' 6EF7               	movwf	tblptrh,c
  3520  017E'                    	if	0	;There are less than 3 active tblptr bytes
  3521  017E'                    	endif
  3522  017E' 0009               	tblrd		*+
  3523  0180' CFF5 F029'         	movff	tablat,___ftmul@f2
  3524  0184' 0009               	tblrd		*+
  3525  0186' CFF5 F02A'         	movff	tablat,___ftmul@f2+1
  3526  018A' 000A               	tblrd		*-
  3527  018C' CFF5 F02B'         	movff	tablat,___ftmul@f2+2
  3528  0190' 0E00               	movlw	0
  3529  0192' 6E1B'              	movwf	___awdiv@divisor+1,c
  3530  0194' 0E0A               	movlw	10
  3531  0196' 6E1A'              	movwf	___awdiv@divisor,c
  3532  0198' C03E' F018'        	movff	fround@prec,___awdiv@dividend
  3533  019C' 6A19'              	clrf	___awdiv@dividend+1,c
  3534  019E' EC00' F000'        	call	___awdiv	;wreg free
  3535  01A2' 0E09               	movlw	9
  3536  01A4' 2418'              	addwf	?___awdiv,w,c
  3537  01A6' 6E20'              	movwf	___wmul@multiplier,c
  3538  01A8' 0E00               	movlw	0
  3539  01AA' 2019'              	addwfc	?___awdiv+1,w,c
  3540  01AC' 6E21'              	movwf	___wmul@multiplier+1,c
  3541  01AE' 0E00               	movlw	0
  3542  01B0' 6E23'              	movwf	___wmul@multiplicand+1,c
  3543  01B2' 0E03               	movlw	3
  3544  01B4' 6E22'              	movwf	___wmul@multiplicand,c
  3545  01B6' EC00' F000'        	call	___wmul	;wreg free
  3546  01BA' 0E00'              	movlw	low __npowers_
  3547  01BC' 2420'              	addwf	?___wmul,w,c
  3548  01BE' 6EF6               	movwf	tblptrl,c
  3549  01C0' 0E00'              	movlw	high __npowers_
  3550  01C2' 2021'              	addwfc	?___wmul+1,w,c
  3551  01C4' 6EF7               	movwf	tblptrh,c
  3552  01C6'                    	if	0	;There are less than 3 active tblptr bytes
  3553  01C6'                    	endif
  3554  01C6' 0009               	tblrd		*+
  3555  01C8' CFF5 F026'         	movff	tablat,___ftmul@f1
  3556  01CC' 0009               	tblrd		*+
  3557  01CE' CFF5 F027'         	movff	tablat,___ftmul@f1+1
  3558  01D2' 000A               	tblrd		*-
  3559  01D4' CFF5 F028'         	movff	tablat,___ftmul@f1+2
  3560  01D8' EC00' F000'        	call	___ftmul	;wreg free
  3561  01DC' C026' F03B'        	movff	?___ftmul,_fround$1578
  3562  01E0' C027' F03C'        	movff	?___ftmul+1,_fround$1578+1
  3563  01E4' C028' F03D'        	movff	?___ftmul+2,_fround$1578+2
  3564                           
  3565                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3566  01E8' C03B' F026'        	movff	_fround$1578,___ftmul@f1
  3567  01EC' C03C' F027'        	movff	_fround$1578+1,___ftmul@f1+1
  3568  01F0' C03D' F028'        	movff	_fround$1578+2,___ftmul@f1+2
  3569  01F4' 0E00               	movlw	0
  3570  01F6' 6E29'              	movwf	___ftmul@f2,c
  3571  01F8' 0E00               	movlw	0
  3572  01FA' 6E2A'              	movwf	___ftmul@f2+1,c
  3573  01FC' 0E3F               	movlw	63
  3574  01FE' 6E2B'              	movwf	___ftmul@f2+2,c
  3575  0200' EC00' F000'        	call	___ftmul	;wreg free
  3576  0204' C026' F035'        	movff	?___ftmul,?_fround
  3577  0208' C027' F036'        	movff	?___ftmul+1,?_fround+1
  3578  020C' C028' F037'        	movff	?___ftmul+2,?_fround+2
  3579  0210' 0012               	return	
  3580  0212'                    l212:
  3581                           
  3582                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3583  0212' 503E'              	movf	fround@prec,w,c
  3584  0214' 0D03               	mullw	3
  3585  0216' 0E00'              	movlw	low __npowers_
  3586  0218' 24F3               	addwf	prodl,w,c
  3587  021A' 6EF6               	movwf	tblptrl,c
  3588  021C' 0E00'              	movlw	high __npowers_
  3589  021E' 20F4               	addwfc	prodh,w,c
  3590  0220' 6EF7               	movwf	tblptrh,c
  3591  0222'                    	if	0	;There are less than 3 active tblptr bytes
  3592  0222'                    	endif
  3593  0222' 0009               	tblrd		*+
  3594  0224' CFF5 F026'         	movff	tablat,___ftmul@f1
  3595  0228' 0009               	tblrd		*+
  3596  022A' CFF5 F027'         	movff	tablat,___ftmul@f1+1
  3597  022E' 000A               	tblrd		*-
  3598  0230' CFF5 F028'         	movff	tablat,___ftmul@f1+2
  3599  0234' 0E00               	movlw	0
  3600  0236' 6E29'              	movwf	___ftmul@f2,c
  3601  0238' 0E00               	movlw	0
  3602  023A' 6E2A'              	movwf	___ftmul@f2+1,c
  3603  023C' 0E3F               	movlw	63
  3604  023E' 6E2B'              	movwf	___ftmul@f2+2,c
  3605  0240' EC00' F000'        	call	___ftmul	;wreg free
  3606  0244' C026' F035'        	movff	?___ftmul,?_fround
  3607  0248' C027' F036'        	movff	?___ftmul+1,?_fround+1
  3608  024C' C028' F037'        	movff	?___ftmul+2,?_fround+2
  3609  0250' 0012               	return	
  3610  0252'                    __end_of_fround:
  3611                           	opt stack 0
  3612                           tblptru	equ	0xFF8
  3613                           tblptrh	equ	0xFF7
  3614                           tblptrl	equ	0xFF6
  3615                           tablat	equ	0xFF5
  3616                           prodh	equ	0xFF4
  3617                           prodl	equ	0xFF3
  3618                           postinc0	equ	0xFEE
  3619                           wreg	equ	0xFE8
  3620                           indf2	equ	0xFDF
  3621                           postinc2	equ	0xFDE
  3622                           postdec2	equ	0xFDD
  3623                           fsr2h	equ	0xFDA
  3624                           fsr2l	equ	0xFD9
  3625                           status	equ	0xFD8
  3626                           
  3627 ;; *************** function ___wmul *****************
  3628 ;; Defined at:
  3629 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  3630 ;; Parameters:    Size  Location     Type
  3631 ;;  multiplier      2   32[COMRAM] unsigned int 
  3632 ;;  multiplicand    2   34[COMRAM] unsigned int 
  3633 ;; Auto vars:     Size  Location     Type
  3634 ;;  product         2   36[COMRAM] unsigned int 
  3635 ;; Return value:  Size  Location     Type
  3636 ;;                  2   32[COMRAM] unsigned int 
  3637 ;; Registers used:
  3638 ;;		wreg, status,2, status,0, prodl, prodh
  3639 ;; Tracked objects:
  3640 ;;		On entry : 0/0
  3641 ;;		On exit  : 0/0
  3642 ;;		Unchanged: 0/0
  3643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3644 ;;      Params:         4       0       0       0       0       0       0       0       0
  3645 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3646 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3647 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3648 ;;Total ram usage:        6 bytes
  3649 ;; Hardware stack levels used:    1
  3650 ;; Hardware stack levels required when called:    1
  3651 ;; This function calls:
  3652 ;;		Nothing
  3653 ;; This function is called by:
  3654 ;;		_fround
  3655 ;;		_scale
  3656 ;;		_sprintf
  3657 ;; This function uses a non-reentrant model
  3658 ;;
  3659                           
  3660                           	psect	text5
  3661  0000'                    __ptext5:
  3662                           	opt stack 0
  3663  0000'                    ___wmul:
  3664                           	opt stack 27
  3665                           
  3666                           ;incstack = 0
  3667  0000' 5020'              	movf	___wmul@multiplier,w,c
  3668  0002' 0222'              	mulwf	___wmul@multiplicand,c
  3669  0004' CFF3 F024'         	movff	prodl,___wmul@product
  3670  0008' CFF4 F025'         	movff	prodh,___wmul@product+1
  3671  000C' 5020'              	movf	___wmul@multiplier,w,c
  3672  000E' 0223'              	mulwf	___wmul@multiplicand+1,c
  3673  0010' 50F3               	movf	prodl,w,c
  3674  0012' 2625'              	addwf	___wmul@product+1,f,c
  3675  0014' 5021'              	movf	___wmul@multiplier+1,w,c
  3676  0016' 0222'              	mulwf	___wmul@multiplicand,c
  3677  0018' 50F3               	movf	prodl,w,c
  3678  001A' 2625'              	addwf	___wmul@product+1,f,c
  3679  001C' C024' F020'        	movff	___wmul@product,?___wmul
  3680  0020' C025' F021'        	movff	___wmul@product+1,?___wmul+1
  3681  0024' 0012               	return	
  3682  0026'                    __end_of___wmul:
  3683                           	opt stack 0
  3684                           tblptru	equ	0xFF8
  3685                           tblptrh	equ	0xFF7
  3686                           tblptrl	equ	0xFF6
  3687                           tablat	equ	0xFF5
  3688                           prodh	equ	0xFF4
  3689                           prodl	equ	0xFF3
  3690                           postinc0	equ	0xFEE
  3691                           wreg	equ	0xFE8
  3692                           indf2	equ	0xFDF
  3693                           postinc2	equ	0xFDE
  3694                           postdec2	equ	0xFDD
  3695                           fsr2h	equ	0xFDA
  3696                           fsr2l	equ	0xFD9
  3697                           status	equ	0xFD8
  3698                           
  3699 ;; *************** function ___ftmul *****************
  3700 ;; Defined at:
  3701 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  3702 ;; Parameters:    Size  Location     Type
  3703 ;;  f1              3   38[COMRAM] float 
  3704 ;;  f2              3   41[COMRAM] float 
  3705 ;; Auto vars:     Size  Location     Type
  3706 ;;  f3_as_produc    3   48[COMRAM] unsigned um
  3707 ;;  sign            1   52[COMRAM] unsigned char 
  3708 ;;  cntr            1   51[COMRAM] unsigned char 
  3709 ;;  exp             1   47[COMRAM] unsigned char 
  3710 ;; Return value:  Size  Location     Type
  3711 ;;                  3   38[COMRAM] float 
  3712 ;; Registers used:
  3713 ;;		wreg, status,2, status,0, cstack
  3714 ;; Tracked objects:
  3715 ;;		On entry : 0/0
  3716 ;;		On exit  : 0/0
  3717 ;;		Unchanged: 0/0
  3718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3719 ;;      Params:         6       0       0       0       0       0       0       0       0
  3720 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3721 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3722 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3723 ;;Total ram usage:       15 bytes
  3724 ;; Hardware stack levels used:    1
  3725 ;; Hardware stack levels required when called:    2
  3726 ;; This function calls:
  3727 ;;		___ftpack
  3728 ;; This function is called by:
  3729 ;;		_main
  3730 ;;		_fround
  3731 ;;		_scale
  3732 ;;		_sprintf
  3733 ;; This function uses a non-reentrant model
  3734 ;;
  3735                           
  3736                           	psect	text6
  3737  0000'                    __ptext6:
  3738                           	opt stack 0
  3739  0000'                    ___ftmul:
  3740                           	opt stack 26
  3741                           
  3742                           ;incstack = 0
  3743  0000' C028' F02C'        	movff	___ftmul@f1+2,??___ftmul
  3744  0004' 6A00'              	clrf	(??___ftmul+1)& (0+255),c
  3745  0006' 6A00'              	clrf	(??___ftmul+2)& (0+255),c
  3746  0008' 3427'              	rlcf	___ftmul@f1+1,w,c
  3747  000A' 3600'              	rlcf	??___ftmul& (0+255),f,c
  3748  000C' E301               	bnc	u3761
  3749  000E' 8000'              	bsf	(??___ftmul+1)& (0+255),0,c
  3750  0010'                    u3761:
  3751  0010' 502C'              	movf	??___ftmul,w,c
  3752  0012' 6E2F'              	movwf	___ftmul@exp,c
  3753  0014' 502F'              	movf	___ftmul@exp,w,c
  3754  0016' A4D8               	btfss	status,2,c
  3755  0018' D007               	goto	l646
  3756  001A' 0E00               	movlw	0
  3757  001C' 6E26'              	movwf	?___ftmul,c
  3758  001E' 0E00               	movlw	0
  3759  0020' 6E27'              	movwf	?___ftmul+1,c
  3760  0022' 0E00               	movlw	0
  3761  0024' 6E28'              	movwf	?___ftmul+2,c
  3762  0026' 0012               	return	
  3763  0028'                    l646:
  3764  0028' C02B' F02C'        	movff	___ftmul@f2+2,??___ftmul
  3765  002C' 6A00'              	clrf	(??___ftmul+1)& (0+255),c
  3766  002E' 6A00'              	clrf	(??___ftmul+2)& (0+255),c
  3767  0030' 342A'              	rlcf	___ftmul@f2+1,w,c
  3768  0032' 3600'              	rlcf	??___ftmul& (0+255),f,c
  3769  0034' E301               	bnc	u3781
  3770  0036' 8000'              	bsf	(??___ftmul+1)& (0+255),0,c
  3771  0038'                    u3781:
  3772  0038' 502C'              	movf	??___ftmul,w,c
  3773  003A' 6E34'              	movwf	___ftmul@sign,c
  3774  003C' 5034'              	movf	___ftmul@sign,w,c
  3775  003E' A4D8               	btfss	status,2,c
  3776  0040' D007               	goto	l648
  3777  0042' 0E00               	movlw	0
  3778  0044' 6E26'              	movwf	?___ftmul,c
  3779  0046' 0E00               	movlw	0
  3780  0048' 6E27'              	movwf	?___ftmul+1,c
  3781  004A' 0E00               	movlw	0
  3782  004C' 6E28'              	movwf	?___ftmul+2,c
  3783  004E' 0012               	return	
  3784  0050'                    l648:
  3785  0050' 5034'              	movf	___ftmul@sign,w,c
  3786  0052' 0F7B               	addlw	123
  3787  0054' 262F'              	addwf	___ftmul@exp,f,c
  3788  0056' C028' F034'        	movff	___ftmul@f1+2,___ftmul@sign
  3789  005A' 502B'              	movf	___ftmul@f2+2,w,c
  3790  005C' 1A34'              	xorwf	___ftmul@sign,f,c
  3791  005E' 0E80               	movlw	128
  3792  0060' 1634'              	andwf	___ftmul@sign,f,c
  3793  0062' 8E27'              	bsf	___ftmul@f1+1,7,c
  3794  0064' 8E2A'              	bsf	___ftmul@f2+1,7,c
  3795  0066' 0EFF               	movlw	255
  3796  0068' 1629'              	andwf	___ftmul@f2,f,c
  3797  006A' 0EFF               	movlw	255
  3798  006C' 162A'              	andwf	___ftmul@f2+1,f,c
  3799  006E' 0E00               	movlw	0
  3800  0070' 162B'              	andwf	___ftmul@f2+2,f,c
  3801  0072' 0E00               	movlw	0
  3802  0074' 6E30'              	movwf	___ftmul@f3_as_product,c
  3803  0076' 0E00               	movlw	0
  3804  0078' 6E31'              	movwf	___ftmul@f3_as_product+1,c
  3805  007A' 0E00               	movlw	0
  3806  007C' 6E32'              	movwf	___ftmul@f3_as_product+2,c
  3807  007E' 0E07               	movlw	7
  3808  0080' 6E33'              	movwf	___ftmul@cntr,c
  3809  0082' A026'              	btfss	___ftmul@f1,0,c
  3810  0084' D006               	goto	l650
  3811  0086' 5029'              	movf	___ftmul@f2,w,c
  3812  0088' 2630'              	addwf	___ftmul@f3_as_product,f,c
  3813  008A' 502A'              	movf	___ftmul@f2+1,w,c
  3814  008C' 2231'              	addwfc	___ftmul@f3_as_product+1,f,c
  3815  008E' 502B'              	movf	___ftmul@f2+2,w,c
  3816  0090' 2232'              	addwfc	___ftmul@f3_as_product+2,f,c
  3817  0092'                    l650:
  3818  0092' 90D8               	bcf	status,0,c
  3819  0094' 3228'              	rrcf	___ftmul@f1+2,f,c
  3820  0096' 3227'              	rrcf	___ftmul@f1+1,f,c
  3821  0098' 3226'              	rrcf	___ftmul@f1,f,c
  3822  009A' 90D8               	bcf	status,0,c
  3823  009C' 3629'              	rlcf	___ftmul@f2,f,c
  3824  009E' 362A'              	rlcf	___ftmul@f2+1,f,c
  3825  00A0' 362B'              	rlcf	___ftmul@f2+2,f,c
  3826  00A2' 2E33'              	decfsz	___ftmul@cntr,f,c
  3827  00A4' D7EE               	goto	l649
  3828  00A6' 0E09               	movlw	9
  3829  00A8' 6E33'              	movwf	___ftmul@cntr,c
  3830  00AA' A026'              	btfss	___ftmul@f1,0,c
  3831  00AC' D006               	goto	l653
  3832  00AE' 5029'              	movf	___ftmul@f2,w,c
  3833  00B0' 2630'              	addwf	___ftmul@f3_as_product,f,c
  3834  00B2' 502A'              	movf	___ftmul@f2+1,w,c
  3835  00B4' 2231'              	addwfc	___ftmul@f3_as_product+1,f,c
  3836  00B6' 502B'              	movf	___ftmul@f2+2,w,c
  3837  00B8' 2232'              	addwfc	___ftmul@f3_as_product+2,f,c
  3838  00BA'                    l653:
  3839  00BA' 90D8               	bcf	status,0,c
  3840  00BC' 3228'              	rrcf	___ftmul@f1+2,f,c
  3841  00BE' 3227'              	rrcf	___ftmul@f1+1,f,c
  3842  00C0' 3226'              	rrcf	___ftmul@f1,f,c
  3843  00C2' 90D8               	bcf	status,0,c
  3844  00C4' 3232'              	rrcf	___ftmul@f3_as_product+2,f,c
  3845  00C6' 3231'              	rrcf	___ftmul@f3_as_product+1,f,c
  3846  00C8' 3230'              	rrcf	___ftmul@f3_as_product,f,c
  3847  00CA' 2E33'              	decfsz	___ftmul@cntr,f,c
  3848  00CC' D7EE               	goto	l652
  3849  00CE' C030' F012'        	movff	___ftmul@f3_as_product,___ftpack@arg
  3850  00D2' C031' F013'        	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3851  00D6' C032' F014'        	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3852  00DA' C02F' F015'        	movff	___ftmul@exp,___ftpack@exp
  3853  00DE' C034' F016'        	movff	___ftmul@sign,___ftpack@sign
  3854  00E2' EC00' F000'        	call	___ftpack	;wreg free
  3855  00E6' C012' F026'        	movff	?___ftpack,?___ftmul
  3856  00EA' C013' F027'        	movff	?___ftpack+1,?___ftmul+1
  3857  00EE' C014' F028'        	movff	?___ftpack+2,?___ftmul+2
  3858  00F2' 0012               	return	
  3859  00F4'                    __end_of___ftmul:
  3860                           	opt stack 0
  3861                           tblptru	equ	0xFF8
  3862                           tblptrh	equ	0xFF7
  3863                           tblptrl	equ	0xFF6
  3864                           tablat	equ	0xFF5
  3865                           prodh	equ	0xFF4
  3866                           prodl	equ	0xFF3
  3867                           postinc0	equ	0xFEE
  3868                           wreg	equ	0xFE8
  3869                           indf2	equ	0xFDF
  3870                           postinc2	equ	0xFDE
  3871                           postdec2	equ	0xFDD
  3872                           fsr2h	equ	0xFDA
  3873                           fsr2l	equ	0xFD9
  3874                           status	equ	0xFD8
  3875                           
  3876 ;; *************** function ___awmod *****************
  3877 ;; Defined at:
  3878 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  3879 ;; Parameters:    Size  Location     Type
  3880 ;;  dividend        2   18[COMRAM] int 
  3881 ;;  divisor         2   20[COMRAM] int 
  3882 ;; Auto vars:     Size  Location     Type
  3883 ;;  sign            1   23[COMRAM] unsigned char 
  3884 ;;  counter         1   22[COMRAM] unsigned char 
  3885 ;; Return value:  Size  Location     Type
  3886 ;;                  2   18[COMRAM] int 
  3887 ;; Registers used:
  3888 ;;		wreg, status,2, status,0
  3889 ;; Tracked objects:
  3890 ;;		On entry : 0/0
  3891 ;;		On exit  : 0/0
  3892 ;;		Unchanged: 0/0
  3893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3894 ;;      Params:         4       0       0       0       0       0       0       0       0
  3895 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3896 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3897 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3898 ;;Total ram usage:        6 bytes
  3899 ;; Hardware stack levels used:    1
  3900 ;; Hardware stack levels required when called:    1
  3901 ;; This function calls:
  3902 ;;		Nothing
  3903 ;; This function is called by:
  3904 ;;		_fround
  3905 ;;		_scale
  3906 ;; This function uses a non-reentrant model
  3907 ;;
  3908                           
  3909                           	psect	text7
  3910  0000'                    __ptext7:
  3911                           	opt stack 0
  3912  0000'                    ___awmod:
  3913                           	opt stack 27
  3914                           
  3915                           ;incstack = 0
  3916  0000' 0E00               	movlw	0
  3917  0002' 6E17'              	movwf	___awmod@sign,c
  3918  0004' AE13'              	btfss	___awmod@dividend+1,7,c
  3919  0006' D006               	goto	l499
  3920  0008' 6C12'              	negf	___awmod@dividend,c
  3921  000A' 1E13'              	comf	___awmod@dividend+1,f,c
  3922  000C' B0D8               	btfsc	status,0,c
  3923  000E' 2A13'              	incf	___awmod@dividend+1,f,c
  3924  0010' 0E01               	movlw	1
  3925  0012' 6E17'              	movwf	___awmod@sign,c
  3926  0014'                    l499:
  3927  0014' AE15'              	btfss	___awmod@divisor+1,7,c
  3928  0016' D004               	goto	l500
  3929  0018' 6C14'              	negf	___awmod@divisor,c
  3930  001A' 1E15'              	comf	___awmod@divisor+1,f,c
  3931  001C' B0D8               	btfsc	status,0,c
  3932  001E' 2A15'              	incf	___awmod@divisor+1,f,c
  3933  0020'                    l500:
  3934  0020' 5014'              	movf	___awmod@divisor,w,c
  3935  0022' 1015'              	iorwf	___awmod@divisor+1,w,c
  3936  0024' B4D8               	btfsc	status,2,c
  3937  0026' D018               	goto	l507
  3938  0028' 0E01               	movlw	1
  3939  002A' 6E16'              	movwf	___awmod@counter,c
  3940  002C' D004               	goto	l502
  3941  002E' 90D8               	bcf	status,0,c
  3942  0030' 3614'              	rlcf	___awmod@divisor,f,c
  3943  0032' 3615'              	rlcf	___awmod@divisor+1,f,c
  3944  0034' 2A16'              	incf	___awmod@counter,f,c
  3945  0036'                    l502:
  3946  0036' AE15'              	btfss	___awmod@divisor+1,7,c
  3947  0038' D7FA               	goto	l503
  3948  003A'                    u2360:
  3949  003A' 5014'              	movf	___awmod@divisor,w,c
  3950  003C' 5C12'              	subwf	___awmod@dividend,w,c
  3951  003E' 5015'              	movf	___awmod@divisor+1,w,c
  3952  0040' 5813'              	subwfb	___awmod@dividend+1,w,c
  3953  0042' A0D8               	btfss	status,0,c
  3954  0044' D004               	goto	l506
  3955  0046' 5014'              	movf	___awmod@divisor,w,c
  3956  0048' 5E12'              	subwf	___awmod@dividend,f,c
  3957  004A' 5015'              	movf	___awmod@divisor+1,w,c
  3958  004C' 5A13'              	subwfb	___awmod@dividend+1,f,c
  3959  004E'                    l506:
  3960  004E' 90D8               	bcf	status,0,c
  3961  0050' 3215'              	rrcf	___awmod@divisor+1,f,c
  3962  0052' 3214'              	rrcf	___awmod@divisor,f,c
  3963  0054' 2E16'              	decfsz	___awmod@counter,f,c
  3964  0056' D7F1               	goto	u2360
  3965  0058'                    l507:
  3966  0058' 5017'              	movf	___awmod@sign,w,c
  3967  005A' B4D8               	btfsc	status,2,c
  3968  005C' D004               	goto	l508
  3969  005E' 6C12'              	negf	___awmod@dividend,c
  3970  0060' 1E13'              	comf	___awmod@dividend+1,f,c
  3971  0062' B0D8               	btfsc	status,0,c
  3972  0064' 2A13'              	incf	___awmod@dividend+1,f,c
  3973  0066'                    l508:
  3974  0066' C012' F012'        	movff	___awmod@dividend,?___awmod
  3975  006A' C013' F013'        	movff	___awmod@dividend+1,?___awmod+1
  3976  006E' 0012               	return	
  3977  0070'                    __end_of___awmod:
  3978                           	opt stack 0
  3979                           tblptru	equ	0xFF8
  3980                           tblptrh	equ	0xFF7
  3981                           tblptrl	equ	0xFF6
  3982                           tablat	equ	0xFF5
  3983                           prodh	equ	0xFF4
  3984                           prodl	equ	0xFF3
  3985                           postinc0	equ	0xFEE
  3986                           wreg	equ	0xFE8
  3987                           indf2	equ	0xFDF
  3988                           postinc2	equ	0xFDE
  3989                           postdec2	equ	0xFDD
  3990                           fsr2h	equ	0xFDA
  3991                           fsr2l	equ	0xFD9
  3992                           status	equ	0xFD8
  3993                           
  3994 ;; *************** function ___awdiv *****************
  3995 ;; Defined at:
  3996 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  3997 ;; Parameters:    Size  Location     Type
  3998 ;;  dividend        2   24[COMRAM] int 
  3999 ;;  divisor         2   26[COMRAM] int 
  4000 ;; Auto vars:     Size  Location     Type
  4001 ;;  quotient        2   30[COMRAM] int 
  4002 ;;  sign            1   29[COMRAM] unsigned char 
  4003 ;;  counter         1   28[COMRAM] unsigned char 
  4004 ;; Return value:  Size  Location     Type
  4005 ;;                  2   24[COMRAM] int 
  4006 ;; Registers used:
  4007 ;;		wreg, status,2, status,0
  4008 ;; Tracked objects:
  4009 ;;		On entry : 0/0
  4010 ;;		On exit  : 0/0
  4011 ;;		Unchanged: 0/0
  4012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4013 ;;      Params:         4       0       0       0       0       0       0       0       0
  4014 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4015 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4016 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4017 ;;Total ram usage:        8 bytes
  4018 ;; Hardware stack levels used:    1
  4019 ;; Hardware stack levels required when called:    1
  4020 ;; This function calls:
  4021 ;;		Nothing
  4022 ;; This function is called by:
  4023 ;;		_fround
  4024 ;;		_scale
  4025 ;;		_sprintf
  4026 ;; This function uses a non-reentrant model
  4027 ;;
  4028                           
  4029                           	psect	text8
  4030  0000'                    __ptext8:
  4031                           	opt stack 0
  4032  0000'                    ___awdiv:
  4033                           	opt stack 27
  4034                           
  4035                           ;incstack = 0
  4036  0000' 0E00               	movlw	0
  4037  0002' 6E1D'              	movwf	___awdiv@sign,c
  4038  0004' AE1B'              	btfss	___awdiv@divisor+1,7,c
  4039  0006' D006               	goto	l486
  4040  0008' 6C1A'              	negf	___awdiv@divisor,c
  4041  000A' 1E1B'              	comf	___awdiv@divisor+1,f,c
  4042  000C' B0D8               	btfsc	status,0,c
  4043  000E' 2A1B'              	incf	___awdiv@divisor+1,f,c
  4044  0010' 0E01               	movlw	1
  4045  0012' 6E1D'              	movwf	___awdiv@sign,c
  4046  0014'                    l486:
  4047  0014' AE19'              	btfss	___awdiv@dividend+1,7,c
  4048  0016' D006               	goto	l487
  4049  0018' 6C18'              	negf	___awdiv@dividend,c
  4050  001A' 1E19'              	comf	___awdiv@dividend+1,f,c
  4051  001C' B0D8               	btfsc	status,0,c
  4052  001E' 2A19'              	incf	___awdiv@dividend+1,f,c
  4053  0020' 0E01               	movlw	1
  4054  0022' 1A1D'              	xorwf	___awdiv@sign,f,c
  4055  0024'                    l487:
  4056  0024' 0E00               	movlw	0
  4057  0026' 6E1F'              	movwf	___awdiv@quotient+1,c
  4058  0028' 0E00               	movlw	0
  4059  002A' 6E1E'              	movwf	___awdiv@quotient,c
  4060  002C' 501A'              	movf	___awdiv@divisor,w,c
  4061  002E' 101B'              	iorwf	___awdiv@divisor+1,w,c
  4062  0030' B4D8               	btfsc	status,2,c
  4063  0032' D01C               	goto	l494
  4064  0034' 0E01               	movlw	1
  4065  0036' 6E1C'              	movwf	___awdiv@counter,c
  4066  0038' D004               	goto	l489
  4067  003A' 90D8               	bcf	status,0,c
  4068  003C' 361A'              	rlcf	___awdiv@divisor,f,c
  4069  003E' 361B'              	rlcf	___awdiv@divisor+1,f,c
  4070  0040' 2A1C'              	incf	___awdiv@counter,f,c
  4071  0042'                    l489:
  4072  0042' AE1B'              	btfss	___awdiv@divisor+1,7,c
  4073  0044' D7FA               	goto	l490
  4074  0046'                    u2300:
  4075  0046' 90D8               	bcf	status,0,c
  4076  0048' 361E'              	rlcf	___awdiv@quotient,f,c
  4077  004A' 361F'              	rlcf	___awdiv@quotient+1,f,c
  4078  004C' 501A'              	movf	___awdiv@divisor,w,c
  4079  004E' 5C18'              	subwf	___awdiv@dividend,w,c
  4080  0050' 501B'              	movf	___awdiv@divisor+1,w,c
  4081  0052' 5819'              	subwfb	___awdiv@dividend+1,w,c
  4082  0054' A0D8               	btfss	status,0,c
  4083  0056' D005               	goto	l493
  4084  0058' 501A'              	movf	___awdiv@divisor,w,c
  4085  005A' 5E18'              	subwf	___awdiv@dividend,f,c
  4086  005C' 501B'              	movf	___awdiv@divisor+1,w,c
  4087  005E' 5A19'              	subwfb	___awdiv@dividend+1,f,c
  4088  0060' 801E'              	bsf	___awdiv@quotient,0,c
  4089  0062'                    l493:
  4090  0062' 90D8               	bcf	status,0,c
  4091  0064' 321B'              	rrcf	___awdiv@divisor+1,f,c
  4092  0066' 321A'              	rrcf	___awdiv@divisor,f,c
  4093  0068' 2E1C'              	decfsz	___awdiv@counter,f,c
  4094  006A' D7ED               	goto	u2300
  4095  006C'                    l494:
  4096  006C' 501D'              	movf	___awdiv@sign,w,c
  4097  006E' B4D8               	btfsc	status,2,c
  4098  0070' D004               	goto	l495
  4099  0072' 6C1E'              	negf	___awdiv@quotient,c
  4100  0074' 1E1F'              	comf	___awdiv@quotient+1,f,c
  4101  0076' B0D8               	btfsc	status,0,c
  4102  0078' 2A1F'              	incf	___awdiv@quotient+1,f,c
  4103  007A'                    l495:
  4104  007A' C01E' F018'        	movff	___awdiv@quotient,?___awdiv
  4105  007E' C01F' F019'        	movff	___awdiv@quotient+1,?___awdiv+1
  4106  0082' 0012               	return	
  4107  0084'                    __end_of___awdiv:
  4108                           	opt stack 0
  4109                           tblptru	equ	0xFF8
  4110                           tblptrh	equ	0xFF7
  4111                           tblptrl	equ	0xFF6
  4112                           tablat	equ	0xFF5
  4113                           prodh	equ	0xFF4
  4114                           prodl	equ	0xFF3
  4115                           postinc0	equ	0xFEE
  4116                           wreg	equ	0xFE8
  4117                           indf2	equ	0xFDF
  4118                           postinc2	equ	0xFDE
  4119                           postdec2	equ	0xFDD
  4120                           fsr2h	equ	0xFDA
  4121                           fsr2l	equ	0xFD9
  4122                           status	equ	0xFD8
  4123                           
  4124 ;; *************** function __tdiv_to_l_ *****************
  4125 ;; Defined at:
  4126 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdivl.c"
  4127 ;; Parameters:    Size  Location     Type
  4128 ;;  f1              3   18[COMRAM] float 
  4129 ;;  f2              3   21[COMRAM] float 
  4130 ;; Auto vars:     Size  Location     Type
  4131 ;;  quot            4   27[COMRAM] unsigned long 
  4132 ;;  exp1            1   32[COMRAM] unsigned char 
  4133 ;;  cntr            1   31[COMRAM] unsigned char 
  4134 ;; Return value:  Size  Location     Type
  4135 ;;                  4   18[COMRAM] unsigned long 
  4136 ;; Registers used:
  4137 ;;		wreg, status,2, status,0
  4138 ;; Tracked objects:
  4139 ;;		On entry : 0/0
  4140 ;;		On exit  : 0/0
  4141 ;;		Unchanged: 0/0
  4142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4143 ;;      Params:         6       0       0       0       0       0       0       0       0
  4144 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4145 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4146 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4147 ;;Total ram usage:       15 bytes
  4148 ;; Hardware stack levels used:    1
  4149 ;; Hardware stack levels required when called:    1
  4150 ;; This function calls:
  4151 ;;		Nothing
  4152 ;; This function is called by:
  4153 ;;		_sprintf
  4154 ;; This function uses a non-reentrant model
  4155 ;;
  4156                           
  4157                           	psect	text9
  4158  0000'                    __ptext9:
  4159                           	opt stack 0
  4160  0000'                    __tdiv_to_l_:
  4161                           	opt stack 28
  4162                           
  4163                           ;incstack = 0
  4164  0000' C014' F018'        	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4165  0004' 6A00'              	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4166  0006' 6A00'              	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4167  0008' 3413'              	rlcf	__tdiv_to_l_@f1+1,w,c
  4168  000A' 3600'              	rlcf	??__tdiv_to_l_& (0+255),f,c
  4169  000C' E301               	bnc	u2491
  4170  000E' 8000'              	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4171  0010'                    u2491:
  4172  0010' 5018'              	movf	??__tdiv_to_l_,w,c
  4173  0012' 6E20'              	movwf	__tdiv_to_l_@exp1,c
  4174  0014' 5020'              	movf	__tdiv_to_l_@exp1,w,c
  4175  0016' A4D8               	btfss	status,2,c
  4176  0018' D009               	goto	l622
  4177  001A' 0E00               	movlw	0
  4178  001C' 6E12'              	movwf	?__tdiv_to_l_,c
  4179  001E' 0E00               	movlw	0
  4180  0020' 6E13'              	movwf	?__tdiv_to_l_+1,c
  4181  0022' 0E00               	movlw	0
  4182  0024' 6E14'              	movwf	?__tdiv_to_l_+2,c
  4183  0026' 0E00               	movlw	0
  4184  0028' 6E15'              	movwf	?__tdiv_to_l_+3,c
  4185  002A' 0012               	return	
  4186  002C'                    l622:
  4187  002C' C017' F018'        	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4188  0030' 6A00'              	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4189  0032' 6A00'              	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4190  0034' 3416'              	rlcf	__tdiv_to_l_@f2+1,w,c
  4191  0036' 3600'              	rlcf	??__tdiv_to_l_& (0+255),f,c
  4192  0038' E301               	bnc	u2511
  4193  003A' 8000'              	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4194  003C'                    u2511:
  4195  003C' 5018'              	movf	??__tdiv_to_l_,w,c
  4196  003E' 6E1F'              	movwf	__tdiv_to_l_@cntr,c
  4197  0040' 501F'              	movf	__tdiv_to_l_@cntr,w,c
  4198  0042' A4D8               	btfss	status,2,c
  4199  0044' D009               	goto	l624
  4200  0046' 0E00               	movlw	0
  4201  0048' 6E12'              	movwf	?__tdiv_to_l_,c
  4202  004A' 0E00               	movlw	0
  4203  004C' 6E13'              	movwf	?__tdiv_to_l_+1,c
  4204  004E' 0E00               	movlw	0
  4205  0050' 6E14'              	movwf	?__tdiv_to_l_+2,c
  4206  0052' 0E00               	movlw	0
  4207  0054' 6E15'              	movwf	?__tdiv_to_l_+3,c
  4208  0056' 0012               	return	
  4209  0058'                    l624:
  4210  0058' 8E13'              	bsf	__tdiv_to_l_@f1+1,7,c
  4211  005A' 0EFF               	movlw	255
  4212  005C' 1612'              	andwf	__tdiv_to_l_@f1,f,c
  4213  005E' 0EFF               	movlw	255
  4214  0060' 1613'              	andwf	__tdiv_to_l_@f1+1,f,c
  4215  0062' 0E00               	movlw	0
  4216  0064' 1614'              	andwf	__tdiv_to_l_@f1+2,f,c
  4217  0066' 8E16'              	bsf	__tdiv_to_l_@f2+1,7,c
  4218  0068' 0EFF               	movlw	255
  4219  006A' 1615'              	andwf	__tdiv_to_l_@f2,f,c
  4220  006C' 0EFF               	movlw	255
  4221  006E' 1616'              	andwf	__tdiv_to_l_@f2+1,f,c
  4222  0070' 0E00               	movlw	0
  4223  0072' 1617'              	andwf	__tdiv_to_l_@f2+2,f,c
  4224  0074' 0E00               	movlw	0
  4225  0076' 6E1B'              	movwf	__tdiv_to_l_@quot,c
  4226  0078' 0E00               	movlw	0
  4227  007A' 6E1C'              	movwf	__tdiv_to_l_@quot+1,c
  4228  007C' 0E00               	movlw	0
  4229  007E' 6E1D'              	movwf	__tdiv_to_l_@quot+2,c
  4230  0080' 0E00               	movlw	0
  4231  0082' 6E1E'              	movwf	__tdiv_to_l_@quot+3,c
  4232  0084' 0E7F               	movlw	127
  4233  0086' 5E20'              	subwf	__tdiv_to_l_@exp1,f,c
  4234  0088' 501F'              	movf	__tdiv_to_l_@cntr,w,c
  4235  008A' 0F98               	addlw	152
  4236  008C' 5E20'              	subwf	__tdiv_to_l_@exp1,f,c
  4237  008E' 0E18               	movlw	24
  4238  0090' 6E1F'              	movwf	__tdiv_to_l_@cntr,c
  4239  0092'                    l625:
  4240  0092' 90D8               	bcf	status,0,c
  4241  0094' 361B'              	rlcf	__tdiv_to_l_@quot,f,c
  4242  0096' 361C'              	rlcf	__tdiv_to_l_@quot+1,f,c
  4243  0098' 361D'              	rlcf	__tdiv_to_l_@quot+2,f,c
  4244  009A' 361E'              	rlcf	__tdiv_to_l_@quot+3,f,c
  4245  009C' 5015'              	movf	__tdiv_to_l_@f2,w,c
  4246  009E' 5C12'              	subwf	__tdiv_to_l_@f1,w,c
  4247  00A0' 5016'              	movf	__tdiv_to_l_@f2+1,w,c
  4248  00A2' 5813'              	subwfb	__tdiv_to_l_@f1+1,w,c
  4249  00A4' 5017'              	movf	__tdiv_to_l_@f2+2,w,c
  4250  00A6' 5814'              	subwfb	__tdiv_to_l_@f1+2,w,c
  4251  00A8' A0D8               	btfss	status,0,c
  4252  00AA' D007               	goto	l626
  4253  00AC' 5015'              	movf	__tdiv_to_l_@f2,w,c
  4254  00AE' 5E12'              	subwf	__tdiv_to_l_@f1,f,c
  4255  00B0' 5016'              	movf	__tdiv_to_l_@f2+1,w,c
  4256  00B2' 5A13'              	subwfb	__tdiv_to_l_@f1+1,f,c
  4257  00B4' 5017'              	movf	__tdiv_to_l_@f2+2,w,c
  4258  00B6' 5A14'              	subwfb	__tdiv_to_l_@f1+2,f,c
  4259  00B8' 801B'              	bsf	__tdiv_to_l_@quot,0,c
  4260  00BA'                    l626:
  4261  00BA' 90D8               	bcf	status,0,c
  4262  00BC' 3612'              	rlcf	__tdiv_to_l_@f1,f,c
  4263  00BE' 3613'              	rlcf	__tdiv_to_l_@f1+1,f,c
  4264  00C0' 3614'              	rlcf	__tdiv_to_l_@f1+2,f,c
  4265  00C2' 2E1F'              	decfsz	__tdiv_to_l_@cntr,f,c
  4266  00C4' D7E6               	goto	l625
  4267  00C6' AE20'              	btfss	__tdiv_to_l_@exp1,7,c
  4268  00C8' D016               	goto	l628
  4269  00CA' 5020'              	movf	__tdiv_to_l_@exp1,w,c
  4270  00CC' 0A80               	xorlw	128
  4271  00CE' 0F97               	addlw	151
  4272  00D0' B0D8               	btfsc	status,0,c
  4273  00D2' D009               	goto	l629
  4274  00D4' 0E00               	movlw	0
  4275  00D6' 6E12'              	movwf	?__tdiv_to_l_,c
  4276  00D8' 0E00               	movlw	0
  4277  00DA' 6E13'              	movwf	?__tdiv_to_l_+1,c
  4278  00DC' 0E00               	movlw	0
  4279  00DE' 6E14'              	movwf	?__tdiv_to_l_+2,c
  4280  00E0' 0E00               	movlw	0
  4281  00E2' 6E15'              	movwf	?__tdiv_to_l_+3,c
  4282  00E4' 0012               	return	
  4283  00E6'                    l629:
  4284  00E6' 90D8               	bcf	status,0,c
  4285  00E8' 321E'              	rrcf	__tdiv_to_l_@quot+3,f,c
  4286  00EA' 321D'              	rrcf	__tdiv_to_l_@quot+2,f,c
  4287  00EC' 321C'              	rrcf	__tdiv_to_l_@quot+1,f,c
  4288  00EE' 321B'              	rrcf	__tdiv_to_l_@quot,f,c
  4289  00F0' 3E20'              	incfsz	__tdiv_to_l_@exp1,f,c
  4290  00F2' D7F9               	goto	l629
  4291  00F4' D015               	goto	u2570
  4292  00F6'                    l628:
  4293  00F6' 0E17               	movlw	23
  4294  00F8' 6420'              	cpfsgt	__tdiv_to_l_@exp1,c
  4295  00FA' D00F               	goto	l634
  4296  00FC' 0E00               	movlw	0
  4297  00FE' 6E12'              	movwf	?__tdiv_to_l_,c
  4298  0100' 0E00               	movlw	0
  4299  0102' 6E13'              	movwf	?__tdiv_to_l_+1,c
  4300  0104' 0E00               	movlw	0
  4301  0106' 6E14'              	movwf	?__tdiv_to_l_+2,c
  4302  0108' 0E00               	movlw	0
  4303  010A' 6E15'              	movwf	?__tdiv_to_l_+3,c
  4304  010C' 0012               	return	
  4305  010E' 90D8               	bcf	status,0,c
  4306  0110' 361B'              	rlcf	__tdiv_to_l_@quot,f,c
  4307  0112' 361C'              	rlcf	__tdiv_to_l_@quot+1,f,c
  4308  0114' 361D'              	rlcf	__tdiv_to_l_@quot+2,f,c
  4309  0116' 361E'              	rlcf	__tdiv_to_l_@quot+3,f,c
  4310  0118' 0620'              	decf	__tdiv_to_l_@exp1,f,c
  4311  011A'                    l634:
  4312  011A' 5020'              	movf	__tdiv_to_l_@exp1,w,c
  4313  011C' A4D8               	btfss	status,2,c
  4314  011E' D7F7               	goto	l635
  4315  0120'                    u2570:
  4316  0120' C01B' F012'        	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4317  0124' C01C' F013'        	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4318  0128' C01D' F014'        	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4319  012C' C01E' F015'        	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4320  0130' 0012               	return		;funcret
  4321  0132'                    __end_of__tdiv_to_l_:
  4322                           	opt stack 0
  4323                           tblptru	equ	0xFF8
  4324                           tblptrh	equ	0xFF7
  4325                           tblptrl	equ	0xFF6
  4326                           tablat	equ	0xFF5
  4327                           prodh	equ	0xFF4
  4328                           prodl	equ	0xFF3
  4329                           postinc0	equ	0xFEE
  4330                           wreg	equ	0xFE8
  4331                           indf2	equ	0xFDF
  4332                           postinc2	equ	0xFDE
  4333                           postdec2	equ	0xFDD
  4334                           fsr2h	equ	0xFDA
  4335                           fsr2l	equ	0xFD9
  4336                           status	equ	0xFD8
  4337                           
  4338 ;; *************** function __div_to_l_ *****************
  4339 ;; Defined at:
  4340 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fldivl.c"
  4341 ;; Parameters:    Size  Location     Type
  4342 ;;  f1              3   18[COMRAM] unsigned long 
  4343 ;;  f2              3   21[COMRAM] unsigned long 
  4344 ;; Auto vars:     Size  Location     Type
  4345 ;;  quot            4   24[COMRAM] unsigned long 
  4346 ;;  exp1            1   29[COMRAM] unsigned char 
  4347 ;;  cntr            1   28[COMRAM] unsigned char 
  4348 ;; Return value:  Size  Location     Type
  4349 ;;                  4   18[COMRAM] unsigned long 
  4350 ;; Registers used:
  4351 ;;		wreg, status,2, status,0
  4352 ;; Tracked objects:
  4353 ;;		On entry : 0/0
  4354 ;;		On exit  : 0/0
  4355 ;;		Unchanged: 0/0
  4356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4357 ;;      Params:         6       0       0       0       0       0       0       0       0
  4358 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4359 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4360 ;;      Totals:        12       0       0       0       0       0       0       0       0
  4361 ;;Total ram usage:       12 bytes
  4362 ;; Hardware stack levels used:    1
  4363 ;; Hardware stack levels required when called:    1
  4364 ;; This function calls:
  4365 ;;		Nothing
  4366 ;; This function is called by:
  4367 ;;		_sprintf
  4368 ;; This function uses a non-reentrant model
  4369 ;;
  4370                           
  4371                           	psect	text10
  4372  0000'                    __ptext10:
  4373                           	opt stack 0
  4374  0000'                    __div_to_l_:
  4375                           	opt stack 28
  4376                           
  4377                           ;incstack = 0
  4378  0000' 3414'              	rlcf	__div_to_l_@f1+2,w,c
  4379  0002' 3415'              	rlcf	__div_to_l_@f1+3,w,c
  4380  0004' 6E1D'              	movwf	__div_to_l_@exp1,c
  4381  0006' 501D'              	movf	__div_to_l_@exp1,w,c
  4382  0008' A4D8               	btfss	status,2,c
  4383  000A' D009               	goto	l518
  4384  000C' 0E00               	movlw	0
  4385  000E' 6E12'              	movwf	?__div_to_l_,c
  4386  0010' 0E00               	movlw	0
  4387  0012' 6E13'              	movwf	?__div_to_l_+1,c
  4388  0014' 0E00               	movlw	0
  4389  0016' 6E14'              	movwf	?__div_to_l_+2,c
  4390  0018' 0E00               	movlw	0
  4391  001A' 6E15'              	movwf	?__div_to_l_+3,c
  4392  001C' 0012               	return	
  4393  001E'                    l518:
  4394  001E' 3417'              	rlcf	__div_to_l_@f2+2,w,c
  4395  0020' 3418'              	rlcf	__div_to_l_@f2+3,w,c
  4396  0022' 6E1C'              	movwf	__div_to_l_@cntr,c
  4397  0024' 501C'              	movf	__div_to_l_@cntr,w,c
  4398  0026' A4D8               	btfss	status,2,c
  4399  0028' D009               	goto	l520
  4400  002A' 0E00               	movlw	0
  4401  002C' 6E12'              	movwf	?__div_to_l_,c
  4402  002E' 0E00               	movlw	0
  4403  0030' 6E13'              	movwf	?__div_to_l_+1,c
  4404  0032' 0E00               	movlw	0
  4405  0034' 6E14'              	movwf	?__div_to_l_+2,c
  4406  0036' 0E00               	movlw	0
  4407  0038' 6E15'              	movwf	?__div_to_l_+3,c
  4408  003A' 0012               	return	
  4409  003C'                    l520:
  4410  003C' 8E14'              	bsf	__div_to_l_@f1+2,7,c
  4411  003E' 0EFF               	movlw	255
  4412  0040' 1612'              	andwf	__div_to_l_@f1,f,c
  4413  0042' 0EFF               	movlw	255
  4414  0044' 1613'              	andwf	__div_to_l_@f1+1,f,c
  4415  0046' 0EFF               	movlw	255
  4416  0048' 1614'              	andwf	__div_to_l_@f1+2,f,c
  4417  004A' 0E00               	movlw	0
  4418  004C' 1615'              	andwf	__div_to_l_@f1+3,f,c
  4419  004E' 8E17'              	bsf	__div_to_l_@f2+2,7,c
  4420  0050' 0EFF               	movlw	255
  4421  0052' 1615'              	andwf	__div_to_l_@f2,f,c
  4422  0054' 0EFF               	movlw	255
  4423  0056' 1616'              	andwf	__div_to_l_@f2+1,f,c
  4424  0058' 0EFF               	movlw	255
  4425  005A' 1617'              	andwf	__div_to_l_@f2+2,f,c
  4426  005C' 0E00               	movlw	0
  4427  005E' 1618'              	andwf	__div_to_l_@f2+3,f,c
  4428  0060' 0E00               	movlw	0
  4429  0062' 6E18'              	movwf	__div_to_l_@quot,c
  4430  0064' 0E00               	movlw	0
  4431  0066' 6E19'              	movwf	__div_to_l_@quot+1,c
  4432  0068' 0E00               	movlw	0
  4433  006A' 6E1A'              	movwf	__div_to_l_@quot+2,c
  4434  006C' 0E00               	movlw	0
  4435  006E' 6E1B'              	movwf	__div_to_l_@quot+3,c
  4436  0070' 0E7F               	movlw	127
  4437  0072' 5E1D'              	subwf	__div_to_l_@exp1,f,c
  4438  0074' 501C'              	movf	__div_to_l_@cntr,w,c
  4439  0076' 0FA0               	addlw	160
  4440  0078' 5E1D'              	subwf	__div_to_l_@exp1,f,c
  4441  007A' 0E20               	movlw	32
  4442  007C' 6E1C'              	movwf	__div_to_l_@cntr,c
  4443  007E' 90D8               	bcf	status,0,c
  4444  0080' 3618'              	rlcf	__div_to_l_@quot,f,c
  4445  0082' 3619'              	rlcf	__div_to_l_@quot+1,f,c
  4446  0084' 361A'              	rlcf	__div_to_l_@quot+2,f,c
  4447  0086' 361B'              	rlcf	__div_to_l_@quot+3,f,c
  4448  0088' 5015'              	movf	__div_to_l_@f2,w,c
  4449  008A' 5C12'              	subwf	__div_to_l_@f1,w,c
  4450  008C' 5016'              	movf	__div_to_l_@f2+1,w,c
  4451  008E' 5813'              	subwfb	__div_to_l_@f1+1,w,c
  4452  0090' 5017'              	movf	__div_to_l_@f2+2,w,c
  4453  0092' 5814'              	subwfb	__div_to_l_@f1+2,w,c
  4454  0094' 5018'              	movf	__div_to_l_@f2+3,w,c
  4455  0096' 5815'              	subwfb	__div_to_l_@f1+3,w,c
  4456  0098' A0D8               	btfss	status,0,c
  4457  009A' D009               	goto	l522
  4458  009C' 5015'              	movf	__div_to_l_@f2,w,c
  4459  009E' 5E12'              	subwf	__div_to_l_@f1,f,c
  4460  00A0' 5016'              	movf	__div_to_l_@f2+1,w,c
  4461  00A2' 5A13'              	subwfb	__div_to_l_@f1+1,f,c
  4462  00A4' 5017'              	movf	__div_to_l_@f2+2,w,c
  4463  00A6' 5A14'              	subwfb	__div_to_l_@f1+2,f,c
  4464  00A8' 5018'              	movf	__div_to_l_@f2+3,w,c
  4465  00AA' 5A15'              	subwfb	__div_to_l_@f1+3,f,c
  4466  00AC' 8018'              	bsf	__div_to_l_@quot,0,c
  4467  00AE'                    l522:
  4468  00AE' 90D8               	bcf	status,0,c
  4469  00B0' 3612'              	rlcf	__div_to_l_@f1,f,c
  4470  00B2' 3613'              	rlcf	__div_to_l_@f1+1,f,c
  4471  00B4' 3614'              	rlcf	__div_to_l_@f1+2,f,c
  4472  00B6' 3615'              	rlcf	__div_to_l_@f1+3,f,c
  4473  00B8' 2E1C'              	decfsz	__div_to_l_@cntr,f,c
  4474  00BA' D7E1               	goto	l521
  4475  00BC' AE1D'              	btfss	__div_to_l_@exp1,7,c
  4476  00BE' D016               	goto	l524
  4477  00C0' 501D'              	movf	__div_to_l_@exp1,w,c
  4478  00C2' 0A80               	xorlw	128
  4479  00C4' 0F9F               	addlw	159
  4480  00C6' B0D8               	btfsc	status,0,c
  4481  00C8' D009               	goto	l525
  4482  00CA' 0E00               	movlw	0
  4483  00CC' 6E12'              	movwf	?__div_to_l_,c
  4484  00CE' 0E00               	movlw	0
  4485  00D0' 6E13'              	movwf	?__div_to_l_+1,c
  4486  00D2' 0E00               	movlw	0
  4487  00D4' 6E14'              	movwf	?__div_to_l_+2,c
  4488  00D6' 0E00               	movlw	0
  4489  00D8' 6E15'              	movwf	?__div_to_l_+3,c
  4490  00DA' 0012               	return	
  4491  00DC'                    l525:
  4492  00DC' 90D8               	bcf	status,0,c
  4493  00DE' 321B'              	rrcf	__div_to_l_@quot+3,f,c
  4494  00E0' 321A'              	rrcf	__div_to_l_@quot+2,f,c
  4495  00E2' 3219'              	rrcf	__div_to_l_@quot+1,f,c
  4496  00E4' 3218'              	rrcf	__div_to_l_@quot,f,c
  4497  00E6' 3E1D'              	incfsz	__div_to_l_@exp1,f,c
  4498  00E8' D7F9               	goto	l525
  4499  00EA' D015               	goto	u2640
  4500  00EC'                    l524:
  4501  00EC' 0E1F               	movlw	31
  4502  00EE' 641D'              	cpfsgt	__div_to_l_@exp1,c
  4503  00F0' D00F               	goto	l530
  4504  00F2' 0E00               	movlw	0
  4505  00F4' 6E12'              	movwf	?__div_to_l_,c
  4506  00F6' 0E00               	movlw	0
  4507  00F8' 6E13'              	movwf	?__div_to_l_+1,c
  4508  00FA' 0E00               	movlw	0
  4509  00FC' 6E14'              	movwf	?__div_to_l_+2,c
  4510  00FE' 0E00               	movlw	0
  4511  0100' 6E15'              	movwf	?__div_to_l_+3,c
  4512  0102' 0012               	return	
  4513  0104' 90D8               	bcf	status,0,c
  4514  0106' 3618'              	rlcf	__div_to_l_@quot,f,c
  4515  0108' 3619'              	rlcf	__div_to_l_@quot+1,f,c
  4516  010A' 361A'              	rlcf	__div_to_l_@quot+2,f,c
  4517  010C' 361B'              	rlcf	__div_to_l_@quot+3,f,c
  4518  010E' 061D'              	decf	__div_to_l_@exp1,f,c
  4519  0110'                    l530:
  4520  0110' 501D'              	movf	__div_to_l_@exp1,w,c
  4521  0112' A4D8               	btfss	status,2,c
  4522  0114' D7F7               	goto	l531
  4523  0116'                    u2640:
  4524  0116' C018' F012'        	movff	__div_to_l_@quot,?__div_to_l_
  4525  011A' C019' F013'        	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4526  011E' C01A' F014'        	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4527  0122' C01B' F015'        	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4528  0126' 0012               	return		;funcret
  4529  0128'                    __end_of__div_to_l_:
  4530                           	opt stack 0
  4531                           tblptru	equ	0xFF8
  4532                           tblptrh	equ	0xFF7
  4533                           tblptrl	equ	0xFF6
  4534                           tablat	equ	0xFF5
  4535                           prodh	equ	0xFF4
  4536                           prodl	equ	0xFF3
  4537                           postinc0	equ	0xFEE
  4538                           wreg	equ	0xFE8
  4539                           indf2	equ	0xFDF
  4540                           postinc2	equ	0xFDE
  4541                           postdec2	equ	0xFDD
  4542                           fsr2h	equ	0xFDA
  4543                           fsr2l	equ	0xFD9
  4544                           status	equ	0xFD8
  4545                           
  4546 ;; *************** function ___lltoft *****************
  4547 ;; Defined at:
  4548 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
  4549 ;; Parameters:    Size  Location     Type
  4550 ;;  c               4   26[COMRAM] unsigned long 
  4551 ;; Auto vars:     Size  Location     Type
  4552 ;;  exp             1   34[COMRAM] unsigned char 
  4553 ;; Return value:  Size  Location     Type
  4554 ;;                  3   26[COMRAM] float 
  4555 ;; Registers used:
  4556 ;;		wreg, status,2, status,0, cstack
  4557 ;; Tracked objects:
  4558 ;;		On entry : 0/0
  4559 ;;		On exit  : 0/0
  4560 ;;		Unchanged: 0/0
  4561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4562 ;;      Params:         4       0       0       0       0       0       0       0       0
  4563 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4564 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4565 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4566 ;;Total ram usage:        9 bytes
  4567 ;; Hardware stack levels used:    1
  4568 ;; Hardware stack levels required when called:    2
  4569 ;; This function calls:
  4570 ;;		___ftpack
  4571 ;; This function is called by:
  4572 ;;		_sprintf
  4573 ;; This function uses a non-reentrant model
  4574 ;;
  4575                           
  4576                           	psect	text11
  4577  0000'                    __ptext11:
  4578                           	opt stack 0
  4579  0000'                    ___lltoft:
  4580                           	opt stack 27
  4581                           
  4582                           ;incstack = 0
  4583  0000' 0E8E               	movlw	142
  4584  0002' 6E22'              	movwf	___lltoft@exp,c
  4585  0004' D006               	goto	l729
  4586  0006' 90D8               	bcf	status,0,c
  4587  0008' 321D'              	rrcf	___lltoft@c+3,f,c
  4588  000A' 321C'              	rrcf	___lltoft@c+2,f,c
  4589  000C' 321B'              	rrcf	___lltoft@c+1,f,c
  4590  000E' 321A'              	rrcf	___lltoft@c,f,c
  4591  0010' 2A22'              	incf	___lltoft@exp,f,c
  4592  0012'                    l729:
  4593  0012' 0E00               	movlw	0
  4594  0014' 141A'              	andwf	___lltoft@c,w,c
  4595  0016' 6E00'              	movwf	??___lltoft& (0+255),c
  4596  0018' 0E00               	movlw	0
  4597  001A' 141B'              	andwf	___lltoft@c+1,w,c
  4598  001C' 6E00'              	movwf	(??___lltoft+1)& (0+255),c
  4599  001E' 0E00               	movlw	0
  4600  0020' 141C'              	andwf	___lltoft@c+2,w,c
  4601  0022' 6E00'              	movwf	(??___lltoft+2)& (0+255),c
  4602  0024' 0EFF               	movlw	255
  4603  0026' 141D'              	andwf	___lltoft@c+3,w,c
  4604  0028' 6E00'              	movwf	(??___lltoft+3)& (0+255),c
  4605  002A' 501E'              	movf	??___lltoft,w,c
  4606  002C' 101F'              	iorwf	??___lltoft+1,w,c
  4607  002E' 1020'              	iorwf	??___lltoft+2,w,c
  4608  0030' 1021'              	iorwf	??___lltoft+3,w,c
  4609  0032' A4D8               	btfss	status,2,c
  4610  0034' D7E8               	goto	l730
  4611  0036' C01A' F012'        	movff	___lltoft@c,___ftpack@arg
  4612  003A' C01B' F013'        	movff	___lltoft@c+1,___ftpack@arg+1
  4613  003E' C01C' F014'        	movff	___lltoft@c+2,___ftpack@arg+2
  4614  0042' C022' F015'        	movff	___lltoft@exp,___ftpack@exp
  4615  0046' 0E00               	movlw	0
  4616  0048' 6E16'              	movwf	___ftpack@sign,c
  4617  004A' EC00' F000'        	call	___ftpack	;wreg free
  4618  004E' C012' F01A'        	movff	?___ftpack,?___lltoft
  4619  0052' C013' F01B'        	movff	?___ftpack+1,?___lltoft+1
  4620  0056' C014' F01C'        	movff	?___ftpack+2,?___lltoft+2
  4621  005A' 0012               	return	
  4622  005C'                    __end_of___lltoft:
  4623                           	opt stack 0
  4624                           tblptru	equ	0xFF8
  4625                           tblptrh	equ	0xFF7
  4626                           tblptrl	equ	0xFF6
  4627                           tablat	equ	0xFF5
  4628                           prodh	equ	0xFF4
  4629                           prodl	equ	0xFF3
  4630                           postinc0	equ	0xFEE
  4631                           wreg	equ	0xFE8
  4632                           indf2	equ	0xFDF
  4633                           postinc2	equ	0xFDE
  4634                           postdec2	equ	0xFDD
  4635                           fsr2h	equ	0xFDA
  4636                           fsr2l	equ	0xFD9
  4637                           status	equ	0xFD8
  4638                           
  4639 ;; *************** function ___llmod *****************
  4640 ;; Defined at:
  4641 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  4642 ;; Parameters:    Size  Location     Type
  4643 ;;  dividend        4   18[COMRAM] unsigned long 
  4644 ;;  divisor         4   22[COMRAM] unsigned long 
  4645 ;; Auto vars:     Size  Location     Type
  4646 ;;  counter         1   26[COMRAM] unsigned char 
  4647 ;; Return value:  Size  Location     Type
  4648 ;;                  4   18[COMRAM] unsigned long 
  4649 ;; Registers used:
  4650 ;;		wreg, status,2, status,0
  4651 ;; Tracked objects:
  4652 ;;		On entry : 0/0
  4653 ;;		On exit  : 0/0
  4654 ;;		Unchanged: 0/0
  4655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4656 ;;      Params:         8       0       0       0       0       0       0       0       0
  4657 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4658 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4659 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4660 ;;Total ram usage:        9 bytes
  4661 ;; Hardware stack levels used:    1
  4662 ;; Hardware stack levels required when called:    1
  4663 ;; This function calls:
  4664 ;;		Nothing
  4665 ;; This function is called by:
  4666 ;;		_sprintf
  4667 ;; This function uses a non-reentrant model
  4668 ;;
  4669                           
  4670                           	psect	text12
  4671  0000'                    __ptext12:
  4672                           	opt stack 0
  4673  0000'                    ___llmod:
  4674                           	opt stack 28
  4675                           
  4676                           ;incstack = 0
  4677  0000' 5016'              	movf	___llmod@divisor,w,c
  4678  0002' 1017'              	iorwf	___llmod@divisor+1,w,c
  4679  0004' 1018'              	iorwf	___llmod@divisor+2,w,c
  4680  0006' 1019'              	iorwf	___llmod@divisor+3,w,c
  4681  0008' B4D8               	btfsc	status,2,c
  4682  000A' D024               	goto	l723
  4683  000C' 0E01               	movlw	1
  4684  000E' 6E1A'              	movwf	___llmod@counter,c
  4685  0010' D006               	goto	l718
  4686  0012' 90D8               	bcf	status,0,c
  4687  0014' 3616'              	rlcf	___llmod@divisor,f,c
  4688  0016' 3617'              	rlcf	___llmod@divisor+1,f,c
  4689  0018' 3618'              	rlcf	___llmod@divisor+2,f,c
  4690  001A' 3619'              	rlcf	___llmod@divisor+3,f,c
  4691  001C' 2A1A'              	incf	___llmod@counter,f,c
  4692  001E'                    l718:
  4693  001E' AE19'              	btfss	___llmod@divisor+3,7,c
  4694  0020' D7F8               	goto	l719
  4695  0022'                    u2740:
  4696  0022' 5016'              	movf	___llmod@divisor,w,c
  4697  0024' 5C12'              	subwf	___llmod@dividend,w,c
  4698  0026' 5017'              	movf	___llmod@divisor+1,w,c
  4699  0028' 5813'              	subwfb	___llmod@dividend+1,w,c
  4700  002A' 5018'              	movf	___llmod@divisor+2,w,c
  4701  002C' 5814'              	subwfb	___llmod@dividend+2,w,c
  4702  002E' 5019'              	movf	___llmod@divisor+3,w,c
  4703  0030' 5815'              	subwfb	___llmod@dividend+3,w,c
  4704  0032' A0D8               	btfss	status,0,c
  4705  0034' D008               	goto	l722
  4706  0036' 5016'              	movf	___llmod@divisor,w,c
  4707  0038' 5E12'              	subwf	___llmod@dividend,f,c
  4708  003A' 5017'              	movf	___llmod@divisor+1,w,c
  4709  003C' 5A13'              	subwfb	___llmod@dividend+1,f,c
  4710  003E' 5018'              	movf	___llmod@divisor+2,w,c
  4711  0040' 5A14'              	subwfb	___llmod@dividend+2,f,c
  4712  0042' 5019'              	movf	___llmod@divisor+3,w,c
  4713  0044' 5A15'              	subwfb	___llmod@dividend+3,f,c
  4714  0046'                    l722:
  4715  0046' 90D8               	bcf	status,0,c
  4716  0048' 3219'              	rrcf	___llmod@divisor+3,f,c
  4717  004A' 3218'              	rrcf	___llmod@divisor+2,f,c
  4718  004C' 3217'              	rrcf	___llmod@divisor+1,f,c
  4719  004E' 3216'              	rrcf	___llmod@divisor,f,c
  4720  0050' 2E1A'              	decfsz	___llmod@counter,f,c
  4721  0052' D7E7               	goto	u2740
  4722  0054'                    l723:
  4723  0054' C012' F012'        	movff	___llmod@dividend,?___llmod
  4724  0058' C013' F013'        	movff	___llmod@dividend+1,?___llmod+1
  4725  005C' C014' F014'        	movff	___llmod@dividend+2,?___llmod+2
  4726  0060' C015' F015'        	movff	___llmod@dividend+3,?___llmod+3
  4727  0064' 0012               	return		;funcret
  4728  0066'                    __end_of___llmod:
  4729                           	opt stack 0
  4730                           tblptru	equ	0xFF8
  4731                           tblptrh	equ	0xFF7
  4732                           tblptrl	equ	0xFF6
  4733                           tablat	equ	0xFF5
  4734                           prodh	equ	0xFF4
  4735                           prodl	equ	0xFF3
  4736                           postinc0	equ	0xFEE
  4737                           wreg	equ	0xFE8
  4738                           indf2	equ	0xFDF
  4739                           postinc2	equ	0xFDE
  4740                           postdec2	equ	0xFDD
  4741                           fsr2h	equ	0xFDA
  4742                           fsr2l	equ	0xFD9
  4743                           status	equ	0xFD8
  4744                           
  4745 ;; *************** function ___lldiv *****************
  4746 ;; Defined at:
  4747 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  4748 ;; Parameters:    Size  Location     Type
  4749 ;;  dividend        4   18[COMRAM] unsigned long 
  4750 ;;  divisor         4   22[COMRAM] unsigned long 
  4751 ;; Auto vars:     Size  Location     Type
  4752 ;;  quotient        4   26[COMRAM] unsigned long 
  4753 ;;  counter         1   30[COMRAM] unsigned char 
  4754 ;; Return value:  Size  Location     Type
  4755 ;;                  4   18[COMRAM] unsigned long 
  4756 ;; Registers used:
  4757 ;;		wreg, status,2, status,0
  4758 ;; Tracked objects:
  4759 ;;		On entry : 0/0
  4760 ;;		On exit  : 0/0
  4761 ;;		Unchanged: 0/0
  4762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4763 ;;      Params:         8       0       0       0       0       0       0       0       0
  4764 ;;      Locals:         5       0       0       0       0       0       0       0       0
  4765 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4766 ;;      Totals:        13       0       0       0       0       0       0       0       0
  4767 ;;Total ram usage:       13 bytes
  4768 ;; Hardware stack levels used:    1
  4769 ;; Hardware stack levels required when called:    1
  4770 ;; This function calls:
  4771 ;;		Nothing
  4772 ;; This function is called by:
  4773 ;;		_sprintf
  4774 ;; This function uses a non-reentrant model
  4775 ;;
  4776                           
  4777                           	psect	text13
  4778  0000'                    __ptext13:
  4779                           	opt stack 0
  4780  0000'                    ___lldiv:
  4781                           	opt stack 28
  4782                           
  4783                           ;incstack = 0
  4784  0000' 0E00               	movlw	0
  4785  0002' 6E1A'              	movwf	___lldiv@quotient,c
  4786  0004' 0E00               	movlw	0
  4787  0006' 6E1B'              	movwf	___lldiv@quotient+1,c
  4788  0008' 0E00               	movlw	0
  4789  000A' 6E1C'              	movwf	___lldiv@quotient+2,c
  4790  000C' 0E00               	movlw	0
  4791  000E' 6E1D'              	movwf	___lldiv@quotient+3,c
  4792  0010' 5016'              	movf	___lldiv@divisor,w,c
  4793  0012' 1017'              	iorwf	___lldiv@divisor+1,w,c
  4794  0014' 1018'              	iorwf	___lldiv@divisor+2,w,c
  4795  0016' 1019'              	iorwf	___lldiv@divisor+3,w,c
  4796  0018' B4D8               	btfsc	status,2,c
  4797  001A' D02A               	goto	l713
  4798  001C' 0E01               	movlw	1
  4799  001E' 6E1E'              	movwf	___lldiv@counter,c
  4800  0020' D006               	goto	l708
  4801  0022' 90D8               	bcf	status,0,c
  4802  0024' 3616'              	rlcf	___lldiv@divisor,f,c
  4803  0026' 3617'              	rlcf	___lldiv@divisor+1,f,c
  4804  0028' 3618'              	rlcf	___lldiv@divisor+2,f,c
  4805  002A' 3619'              	rlcf	___lldiv@divisor+3,f,c
  4806  002C' 2A1E'              	incf	___lldiv@counter,f,c
  4807  002E'                    l708:
  4808  002E' AE19'              	btfss	___lldiv@divisor+3,7,c
  4809  0030' D7F8               	goto	l709
  4810  0032'                    u2710:
  4811  0032' 90D8               	bcf	status,0,c
  4812  0034' 361A'              	rlcf	___lldiv@quotient,f,c
  4813  0036' 361B'              	rlcf	___lldiv@quotient+1,f,c
  4814  0038' 361C'              	rlcf	___lldiv@quotient+2,f,c
  4815  003A' 361D'              	rlcf	___lldiv@quotient+3,f,c
  4816  003C' 5016'              	movf	___lldiv@divisor,w,c
  4817  003E' 5C12'              	subwf	___lldiv@dividend,w,c
  4818  0040' 5017'              	movf	___lldiv@divisor+1,w,c
  4819  0042' 5813'              	subwfb	___lldiv@dividend+1,w,c
  4820  0044' 5018'              	movf	___lldiv@divisor+2,w,c
  4821  0046' 5814'              	subwfb	___lldiv@dividend+2,w,c
  4822  0048' 5019'              	movf	___lldiv@divisor+3,w,c
  4823  004A' 5815'              	subwfb	___lldiv@dividend+3,w,c
  4824  004C' A0D8               	btfss	status,0,c
  4825  004E' D009               	goto	l712
  4826  0050' 5016'              	movf	___lldiv@divisor,w,c
  4827  0052' 5E12'              	subwf	___lldiv@dividend,f,c
  4828  0054' 5017'              	movf	___lldiv@divisor+1,w,c
  4829  0056' 5A13'              	subwfb	___lldiv@dividend+1,f,c
  4830  0058' 5018'              	movf	___lldiv@divisor+2,w,c
  4831  005A' 5A14'              	subwfb	___lldiv@dividend+2,f,c
  4832  005C' 5019'              	movf	___lldiv@divisor+3,w,c
  4833  005E' 5A15'              	subwfb	___lldiv@dividend+3,f,c
  4834  0060' 801A'              	bsf	___lldiv@quotient,0,c
  4835  0062'                    l712:
  4836  0062' 90D8               	bcf	status,0,c
  4837  0064' 3219'              	rrcf	___lldiv@divisor+3,f,c
  4838  0066' 3218'              	rrcf	___lldiv@divisor+2,f,c
  4839  0068' 3217'              	rrcf	___lldiv@divisor+1,f,c
  4840  006A' 3216'              	rrcf	___lldiv@divisor,f,c
  4841  006C' 2E1E'              	decfsz	___lldiv@counter,f,c
  4842  006E' D7E1               	goto	u2710
  4843  0070'                    l713:
  4844  0070' C01A' F012'        	movff	___lldiv@quotient,?___lldiv
  4845  0074' C01B' F013'        	movff	___lldiv@quotient+1,?___lldiv+1
  4846  0078' C01C' F014'        	movff	___lldiv@quotient+2,?___lldiv+2
  4847  007C' C01D' F015'        	movff	___lldiv@quotient+3,?___lldiv+3
  4848  0080' 0012               	return		;funcret
  4849  0082'                    __end_of___lldiv:
  4850                           	opt stack 0
  4851                           tblptru	equ	0xFF8
  4852                           tblptrh	equ	0xFF7
  4853                           tblptrl	equ	0xFF6
  4854                           tablat	equ	0xFF5
  4855                           prodh	equ	0xFF4
  4856                           prodl	equ	0xFF3
  4857                           postinc0	equ	0xFEE
  4858                           wreg	equ	0xFE8
  4859                           indf2	equ	0xFDF
  4860                           postinc2	equ	0xFDE
  4861                           postdec2	equ	0xFDD
  4862                           fsr2h	equ	0xFDA
  4863                           fsr2l	equ	0xFD9
  4864                           status	equ	0xFD8
  4865                           
  4866 ;; *************** function ___ftsub *****************
  4867 ;; Defined at:
  4868 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  4869 ;; Parameters:    Size  Location     Type
  4870 ;;  f1              3    9[BANK0 ] float 
  4871 ;;  f2              3   12[BANK0 ] float 
  4872 ;; Auto vars:     Size  Location     Type
  4873 ;;		None
  4874 ;; Return value:  Size  Location     Type
  4875 ;;                  3    9[BANK0 ] float 
  4876 ;; Registers used:
  4877 ;;		wreg, status,2, status,0, cstack
  4878 ;; Tracked objects:
  4879 ;;		On entry : 0/0
  4880 ;;		On exit  : 0/0
  4881 ;;		Unchanged: 0/0
  4882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4883 ;;      Params:         0       6       0       0       0       0       0       0       0
  4884 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4885 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4886 ;;      Totals:         0       6       0       0       0       0       0       0       0
  4887 ;;Total ram usage:        6 bytes
  4888 ;; Hardware stack levels used:    1
  4889 ;; Hardware stack levels required when called:    3
  4890 ;; This function calls:
  4891 ;;		___ftadd
  4892 ;; This function is called by:
  4893 ;;		_sprintf
  4894 ;; This function uses a non-reentrant model
  4895 ;;
  4896                           
  4897                           	psect	text14
  4898  0000'                    __ptext14:
  4899                           	opt stack 0
  4900  0000'                    ___ftsub:
  4901                           	opt stack 26
  4902                           
  4903                           ;incstack = 0
  4904  0000' 0100               	movlb	0	; () banked
  4905  0002' 5100'              	movf	___ftsub@f2& (0+255),w,b
  4906  0004' 1100'              	iorwf	(___ftsub@f2+1)& (0+255),w,b
  4907  0006' 1100'              	iorwf	(___ftsub@f2+2)& (0+255),w,b
  4908  0008' B4D8               	btfsc	status,2,c
  4909  000A' D006               	goto	l663
  4910                           
  4911                           ; BSR set to: 0
  4912  000C' 0E00               	movlw	0
  4913  000E' 1B00'              	xorwf	___ftsub@f2& (0+255),f,b
  4914  0010' 0E00               	movlw	0
  4915  0012' 1B00'              	xorwf	(___ftsub@f2+1)& (0+255),f,b
  4916  0014' 0E80               	movlw	128
  4917  0016' 1B00'              	xorwf	(___ftsub@f2+2)& (0+255),f,b
  4918  0018'                    l663:
  4919                           
  4920                           ; BSR set to: 0
  4921                           
  4922                           ; BSR set to: 0
  4923  0018' C009' F000'        	movff	___ftsub@f1,___ftadd@f1
  4924  001C' C00A' F001'        	movff	___ftsub@f1+1,___ftadd@f1+1
  4925  0020' C00B' F002'        	movff	___ftsub@f1+2,___ftadd@f1+2
  4926  0024' C00C' F003'        	movff	___ftsub@f2,___ftadd@f2
  4927  0028' C00D' F004'        	movff	___ftsub@f2+1,___ftadd@f2+1
  4928  002C' C00E' F005'        	movff	___ftsub@f2+2,___ftadd@f2+2
  4929  0030' EC00' F000'        	call	___ftadd	;wreg free
  4930  0034' C000' F009'        	movff	?___ftadd,?___ftsub
  4931  0038' C001' F00A'        	movff	?___ftadd+1,?___ftsub+1
  4932  003C' C002' F00B'        	movff	?___ftadd+2,?___ftsub+2
  4933  0040' 0012               	return	
  4934  0042'                    __end_of___ftsub:
  4935                           	opt stack 0
  4936                           tblptru	equ	0xFF8
  4937                           tblptrh	equ	0xFF7
  4938                           tblptrl	equ	0xFF6
  4939                           tablat	equ	0xFF5
  4940                           prodh	equ	0xFF4
  4941                           prodl	equ	0xFF3
  4942                           postinc0	equ	0xFEE
  4943                           wreg	equ	0xFE8
  4944                           indf2	equ	0xFDF
  4945                           postinc2	equ	0xFDE
  4946                           postdec2	equ	0xFDD
  4947                           fsr2h	equ	0xFDA
  4948                           fsr2l	equ	0xFD9
  4949                           status	equ	0xFD8
  4950                           
  4951 ;; *************** function ___ftadd *****************
  4952 ;; Defined at:
  4953 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  4954 ;; Parameters:    Size  Location     Type
  4955 ;;  f1              3    0[BANK0 ] float 
  4956 ;;  f2              3    3[BANK0 ] float 
  4957 ;; Auto vars:     Size  Location     Type
  4958 ;;  exp1            1    8[BANK0 ] unsigned char 
  4959 ;;  exp2            1    7[BANK0 ] unsigned char 
  4960 ;;  sign            1    6[BANK0 ] unsigned char 
  4961 ;; Return value:  Size  Location     Type
  4962 ;;                  3    0[BANK0 ] float 
  4963 ;; Registers used:
  4964 ;;		wreg, status,2, status,0, cstack
  4965 ;; Tracked objects:
  4966 ;;		On entry : 0/0
  4967 ;;		On exit  : 0/0
  4968 ;;		Unchanged: 0/0
  4969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4970 ;;      Params:         0       6       0       0       0       0       0       0       0
  4971 ;;      Locals:         0       3       0       0       0       0       0       0       0
  4972 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4973 ;;      Totals:         3       9       0       0       0       0       0       0       0
  4974 ;;Total ram usage:       12 bytes
  4975 ;; Hardware stack levels used:    1
  4976 ;; Hardware stack levels required when called:    2
  4977 ;; This function calls:
  4978 ;;		___ftpack
  4979 ;; This function is called by:
  4980 ;;		_sprintf
  4981 ;;		___ftsub
  4982 ;; This function uses a non-reentrant model
  4983 ;;
  4984                           
  4985                           	psect	text15
  4986  0000'                    __ptext15:
  4987                           	opt stack 0
  4988  0000'                    ___ftadd:
  4989                           	opt stack 26
  4990                           
  4991                           ;incstack = 0
  4992  0000' C002' F03F'        	movff	___ftadd@f1+2,??___ftadd
  4993  0004' 6A00'              	clrf	(??___ftadd+1)& (0+255),c
  4994  0006' 6A00'              	clrf	(??___ftadd+2)& (0+255),c
  4995  0008' 0100               	movlb	0	; () banked
  4996  000A' 3500'              	rlcf	(___ftadd@f1+1)& (0+255),w,b
  4997  000C' 3600'              	rlcf	??___ftadd& (0+255),f,c
  4998  000E' E301               	bnc	u3551
  4999  0010' 8000'              	bsf	(??___ftadd+1)& (0+255),0,c
  5000  0012'                    u3551:
  5001  0012' 503F'              	movf	??___ftadd,w,c
  5002  0014' 6F00'              	movwf	___ftadd@exp1& (0+255),b
  5003  0016' C005' F03F'        	movff	___ftadd@f2+2,??___ftadd
  5004  001A' 6A00'              	clrf	(??___ftadd+1)& (0+255),c
  5005  001C' 6A00'              	clrf	(??___ftadd+2)& (0+255),c
  5006  001E' 3500'              	rlcf	(___ftadd@f2+1)& (0+255),w,b
  5007  0020' 3600'              	rlcf	??___ftadd& (0+255),f,c
  5008  0022' E301               	bnc	u3561
  5009  0024' 8000'              	bsf	(??___ftadd+1)& (0+255),0,c
  5010  0026'                    u3561:
  5011  0026' 503F'              	movf	??___ftadd,w,c
  5012  0028' 6F00'              	movwf	___ftadd@exp2& (0+255),b
  5013                           
  5014                           ; BSR set to: 0
  5015  002A' 5100'              	movf	___ftadd@exp1& (0+255),w,b
  5016  002C' B4D8               	btfsc	status,2,c
  5017  002E' D00B               	goto	u3590
  5018                           
  5019                           ; BSR set to: 0
  5020  0030' 5100'              	movf	___ftadd@exp2& (0+255),w,b
  5021  0032' 5D00'              	subwf	___ftadd@exp1& (0+255),w,b
  5022  0034' B0D8               	btfsc	status,0,c
  5023  0036' D00E               	goto	l581
  5024                           
  5025                           ; BSR set to: 0
  5026  0038' 5100'              	movf	___ftadd@exp1& (0+255),w,b
  5027  003A' 0800               	sublw	0
  5028  003C' 2500'              	addwf	___ftadd@exp2& (0+255),w,b
  5029  003E' 6E00'              	movwf	??___ftadd& (0+255),c
  5030  0040' 0E18               	movlw	24
  5031  0042' 643F'              	cpfsgt	??___ftadd,c
  5032  0044' D007               	goto	l581
  5033  0046'                    u3590:
  5034                           
  5035                           ; BSR set to: 0
  5036  0046' C003' F000'        	movff	___ftadd@f2,?___ftadd
  5037  004A' C004' F001'        	movff	___ftadd@f2+1,?___ftadd+1
  5038  004E' C005' F002'        	movff	___ftadd@f2+2,?___ftadd+2
  5039  0052' 0012               	return	
  5040  0054'                    l581:
  5041                           
  5042                           ; BSR set to: 0
  5043                           
  5044                           ; BSR set to: 0
  5045  0054' 5100'              	movf	___ftadd@exp2& (0+255),w,b
  5046  0056' B4D8               	btfsc	status,2,c
  5047  0058' D00B               	goto	u3620
  5048                           
  5049                           ; BSR set to: 0
  5050  005A' 5100'              	movf	___ftadd@exp1& (0+255),w,b
  5051  005C' 5D00'              	subwf	___ftadd@exp2& (0+255),w,b
  5052  005E' B0D8               	btfsc	status,0,c
  5053  0060' D00E               	goto	l585
  5054                           
  5055                           ; BSR set to: 0
  5056  0062' 5100'              	movf	___ftadd@exp2& (0+255),w,b
  5057  0064' 0800               	sublw	0
  5058  0066' 2500'              	addwf	___ftadd@exp1& (0+255),w,b
  5059  0068' 6E00'              	movwf	??___ftadd& (0+255),c
  5060  006A' 0E18               	movlw	24
  5061  006C' 643F'              	cpfsgt	??___ftadd,c
  5062  006E' D007               	goto	l585
  5063  0070'                    u3620:
  5064                           
  5065                           ; BSR set to: 0
  5066  0070' C000' F000'        	movff	___ftadd@f1,?___ftadd
  5067  0074' C001' F001'        	movff	___ftadd@f1+1,?___ftadd+1
  5068  0078' C002' F002'        	movff	___ftadd@f1+2,?___ftadd+2
  5069  007C' 0012               	return	
  5070  007E'                    l585:
  5071                           
  5072                           ; BSR set to: 0
  5073                           
  5074                           ; BSR set to: 0
  5075  007E' 0E06               	movlw	6
  5076  0080' 6F00'              	movwf	___ftadd@sign& (0+255),b
  5077                           
  5078                           ; BSR set to: 0
  5079  0082' BF00'              	btfsc	(___ftadd@f1+2)& (0+255),7,b
  5080                           
  5081                           ; BSR set to: 0
  5082  0084' 8F00'              	bsf	___ftadd@sign& (0+255),7,b
  5083                           
  5084                           ; BSR set to: 0
  5085                           
  5086                           ; BSR set to: 0
  5087  0086' BF00'              	btfsc	(___ftadd@f2+2)& (0+255),7,b
  5088                           
  5089                           ; BSR set to: 0
  5090  0088' 8D00'              	bsf	___ftadd@sign& (0+255),6,b
  5091                           
  5092                           ; BSR set to: 0
  5093  008A' 8F00'              	bsf	(___ftadd@f1+1)& (0+255),7,b
  5094                           
  5095                           ; BSR set to: 0
  5096  008C' 0EFF               	movlw	255
  5097  008E' 1700'              	andwf	___ftadd@f1& (0+255),f,b
  5098  0090' 0EFF               	movlw	255
  5099  0092' 1700'              	andwf	(___ftadd@f1+1)& (0+255),f,b
  5100  0094' 0E00               	movlw	0
  5101  0096' 1700'              	andwf	(___ftadd@f1+2)& (0+255),f,b
  5102  0098' 8F00'              	bsf	(___ftadd@f2+1)& (0+255),7,b
  5103                           
  5104                           ; BSR set to: 0
  5105  009A' 0EFF               	movlw	255
  5106  009C' 1700'              	andwf	___ftadd@f2& (0+255),f,b
  5107  009E' 0EFF               	movlw	255
  5108  00A0' 1700'              	andwf	(___ftadd@f2+1)& (0+255),f,b
  5109  00A2' 0E00               	movlw	0
  5110  00A4' 1700'              	andwf	(___ftadd@f2+2)& (0+255),f,b
  5111                           
  5112                           ; BSR set to: 0
  5113  00A6' 5100'              	movf	___ftadd@exp2& (0+255),w,b
  5114  00A8' 5D00'              	subwf	___ftadd@exp1& (0+255),w,b
  5115  00AA' B0D8               	btfsc	status,0,c
  5116  00AC' D01B               	goto	l590
  5117  00AE'                    u3650:
  5118                           
  5119                           ; BSR set to: 0
  5120                           
  5121                           ; BSR set to: 0
  5122  00AE' 90D8               	bcf	status,0,c
  5123  00B0' 3700'              	rlcf	___ftadd@f2& (0+255),f,b
  5124  00B2' 3700'              	rlcf	(___ftadd@f2+1)& (0+255),f,b
  5125  00B4' 3700'              	rlcf	(___ftadd@f2+2)& (0+255),f,b
  5126  00B6' 0700'              	decf	___ftadd@exp2& (0+255),f,b
  5127                           
  5128                           ; BSR set to: 0
  5129  00B8' 5100'              	movf	___ftadd@exp1& (0+255),w,b
  5130  00BA' 1900'              	xorwf	___ftadd@exp2& (0+255),w,b
  5131  00BC' B4D8               	btfsc	status,2,c
  5132  00BE' D00D               	goto	l595
  5133                           
  5134                           ; BSR set to: 0
  5135  00C0' 0700'              	decf	___ftadd@sign& (0+255),f,b
  5136  00C2' C006' F03F'        	movff	___ftadd@sign,??___ftadd
  5137  00C6' 0E07               	movlw	7
  5138  00C8' 163F'              	andwf	??___ftadd,f,c
  5139  00CA' B4D8               	btfsc	status,2,c
  5140  00CC' D006               	goto	l595
  5141  00CE' D7EF               	goto	u3650
  5142  00D0'                    
  5143                           ; BSR set to: 0
  5144                           
  5145                           ; BSR set to: 0
  5146  00D0' 90D8               	bcf	status,0,c
  5147  00D2' 3300'              	rrcf	(___ftadd@f1+2)& (0+255),f,b
  5148  00D4' 3300'              	rrcf	(___ftadd@f1+1)& (0+255),f,b
  5149  00D6' 3300'              	rrcf	___ftadd@f1& (0+255),f,b
  5150  00D8' 2B00'              	incf	___ftadd@exp1& (0+255),f,b
  5151  00DA'                    l595:
  5152                           
  5153                           ; BSR set to: 0
  5154                           
  5155                           ; BSR set to: 0
  5156  00DA' 5100'              	movf	___ftadd@exp2& (0+255),w,b
  5157  00DC' 1900'              	xorwf	___ftadd@exp1& (0+255),w,b
  5158  00DE' B4D8               	btfsc	status,2,c
  5159  00E0' D01F               	goto	u3720
  5160  00E2' D7F6               	goto	l596
  5161  00E4'                    l590:
  5162                           
  5163                           ; BSR set to: 0
  5164                           
  5165                           ; BSR set to: 0
  5166  00E4' 5100'              	movf	___ftadd@exp1& (0+255),w,b
  5167  00E6' 5D00'              	subwf	___ftadd@exp2& (0+255),w,b
  5168  00E8' B0D8               	btfsc	status,0,c
  5169  00EA' D01A               	goto	u3720
  5170  00EC'                    u3690:
  5171                           
  5172                           ; BSR set to: 0
  5173                           
  5174                           ; BSR set to: 0
  5175  00EC' 90D8               	bcf	status,0,c
  5176  00EE' 3700'              	rlcf	___ftadd@f1& (0+255),f,b
  5177  00F0' 3700'              	rlcf	(___ftadd@f1+1)& (0+255),f,b
  5178  00F2' 3700'              	rlcf	(___ftadd@f1+2)& (0+255),f,b
  5179  00F4' 0700'              	decf	___ftadd@exp1& (0+255),f,b
  5180                           
  5181                           ; BSR set to: 0
  5182  00F6' 5100'              	movf	___ftadd@exp1& (0+255),w,b
  5183  00F8' 1900'              	xorwf	___ftadd@exp2& (0+255),w,b
  5184  00FA' B4D8               	btfsc	status,2,c
  5185  00FC' D00D               	goto	l604
  5186                           
  5187                           ; BSR set to: 0
  5188  00FE' 0700'              	decf	___ftadd@sign& (0+255),f,b
  5189  0100' C006' F03F'        	movff	___ftadd@sign,??___ftadd
  5190  0104' 0E07               	movlw	7
  5191  0106' 163F'              	andwf	??___ftadd,f,c
  5192  0108' B4D8               	btfsc	status,2,c
  5193  010A' D006               	goto	l604
  5194  010C' D7EF               	goto	u3690
  5195  010E'                    
  5196                           ; BSR set to: 0
  5197                           
  5198                           ; BSR set to: 0
  5199  010E' 90D8               	bcf	status,0,c
  5200  0110' 3300'              	rrcf	(___ftadd@f2+2)& (0+255),f,b
  5201  0112' 3300'              	rrcf	(___ftadd@f2+1)& (0+255),f,b
  5202  0114' 3300'              	rrcf	___ftadd@f2& (0+255),f,b
  5203  0116' 2B00'              	incf	___ftadd@exp2& (0+255),f,b
  5204  0118'                    l604:
  5205                           
  5206                           ; BSR set to: 0
  5207                           
  5208                           ; BSR set to: 0
  5209  0118' 5100'              	movf	___ftadd@exp2& (0+255),w,b
  5210  011A' 1900'              	xorwf	___ftadd@exp1& (0+255),w,b
  5211  011C' A4D8               	btfss	status,2,c
  5212  011E' D7F7               	goto	l605
  5213  0120'                    u3720:
  5214                           
  5215                           ; BSR set to: 0
  5216                           
  5217                           ; BSR set to: 0
  5218                           
  5219                           ; BSR set to: 0
  5220  0120' AF00'              	btfss	___ftadd@sign& (0+255),7,b
  5221  0122' D00C               	goto	l607
  5222                           
  5223                           ; BSR set to: 0
  5224  0124' 0EFF               	movlw	255
  5225  0126' 1B00'              	xorwf	___ftadd@f1& (0+255),f,b
  5226  0128' 0EFF               	movlw	255
  5227  012A' 1B00'              	xorwf	(___ftadd@f1+1)& (0+255),f,b
  5228  012C' 0EFF               	movlw	255
  5229  012E' 1B00'              	xorwf	(___ftadd@f1+2)& (0+255),f,b
  5230  0130' 0E01               	movlw	1
  5231  0132' 2700'              	addwf	___ftadd@f1& (0+255),f,b
  5232  0134' 0E00               	movlw	0
  5233  0136' 2300'              	addwfc	(___ftadd@f1+1)& (0+255),f,b
  5234  0138' 0E00               	movlw	0
  5235  013A' 2300'              	addwfc	(___ftadd@f1+2)& (0+255),f,b
  5236  013C'                    l607:
  5237                           
  5238                           ; BSR set to: 0
  5239  013C' AD00'              	btfss	___ftadd@sign& (0+255),6,b
  5240  013E' D00C               	goto	l608
  5241                           
  5242                           ; BSR set to: 0
  5243  0140' 0EFF               	movlw	255
  5244  0142' 1B00'              	xorwf	___ftadd@f2& (0+255),f,b
  5245  0144' 0EFF               	movlw	255
  5246  0146' 1B00'              	xorwf	(___ftadd@f2+1)& (0+255),f,b
  5247  0148' 0EFF               	movlw	255
  5248  014A' 1B00'              	xorwf	(___ftadd@f2+2)& (0+255),f,b
  5249  014C' 0E01               	movlw	1
  5250  014E' 2700'              	addwf	___ftadd@f2& (0+255),f,b
  5251  0150' 0E00               	movlw	0
  5252  0152' 2300'              	addwfc	(___ftadd@f2+1)& (0+255),f,b
  5253  0154' 0E00               	movlw	0
  5254  0156' 2300'              	addwfc	(___ftadd@f2+2)& (0+255),f,b
  5255  0158'                    l608:
  5256                           
  5257                           ; BSR set to: 0
  5258                           
  5259                           ; BSR set to: 0
  5260  0158' 0E00               	movlw	0
  5261  015A' 6F00'              	movwf	___ftadd@sign& (0+255),b
  5262                           
  5263                           ; BSR set to: 0
  5264  015C' 5100'              	movf	___ftadd@f1& (0+255),w,b
  5265  015E' 2700'              	addwf	___ftadd@f2& (0+255),f,b
  5266  0160' 5100'              	movf	(___ftadd@f1+1)& (0+255),w,b
  5267  0162' 2300'              	addwfc	(___ftadd@f2+1)& (0+255),f,b
  5268  0164' 5100'              	movf	(___ftadd@f1+2)& (0+255),w,b
  5269  0166' 2300'              	addwfc	(___ftadd@f2+2)& (0+255),f,b
  5270                           
  5271                           ; BSR set to: 0
  5272  0168' AF00'              	btfss	(___ftadd@f2+2)& (0+255),7,b
  5273  016A' D00E               	goto	l609
  5274                           
  5275                           ; BSR set to: 0
  5276  016C' 0EFF               	movlw	255
  5277  016E' 1B00'              	xorwf	___ftadd@f2& (0+255),f,b
  5278  0170' 0EFF               	movlw	255
  5279  0172' 1B00'              	xorwf	(___ftadd@f2+1)& (0+255),f,b
  5280  0174' 0EFF               	movlw	255
  5281  0176' 1B00'              	xorwf	(___ftadd@f2+2)& (0+255),f,b
  5282  0178' 0E01               	movlw	1
  5283  017A' 2700'              	addwf	___ftadd@f2& (0+255),f,b
  5284  017C' 0E00               	movlw	0
  5285  017E' 2300'              	addwfc	(___ftadd@f2+1)& (0+255),f,b
  5286  0180' 0E00               	movlw	0
  5287  0182' 2300'              	addwfc	(___ftadd@f2+2)& (0+255),f,b
  5288                           
  5289                           ; BSR set to: 0
  5290  0184' 0E01               	movlw	1
  5291  0186' 6F00'              	movwf	___ftadd@sign& (0+255),b
  5292  0188'                    l609:
  5293                           
  5294                           ; BSR set to: 0
  5295                           
  5296                           ; BSR set to: 0
  5297  0188' C003' F012'        	movff	___ftadd@f2,___ftpack@arg
  5298  018C' C004' F013'        	movff	___ftadd@f2+1,___ftpack@arg+1
  5299  0190' C005' F014'        	movff	___ftadd@f2+2,___ftpack@arg+2
  5300  0194' C008' F015'        	movff	___ftadd@exp1,___ftpack@exp
  5301  0198' C006' F016'        	movff	___ftadd@sign,___ftpack@sign
  5302  019C' EC00' F000'        	call	___ftpack	;wreg free
  5303  01A0' C012' F000'        	movff	?___ftpack,?___ftadd
  5304  01A4' C013' F001'        	movff	?___ftpack+1,?___ftadd+1
  5305  01A8' C014' F002'        	movff	?___ftpack+2,?___ftadd+2
  5306  01AC' 0012               	return	
  5307  01AE'                    __end_of___ftadd:
  5308                           	opt stack 0
  5309                           tblptru	equ	0xFF8
  5310                           tblptrh	equ	0xFF7
  5311                           tblptrl	equ	0xFF6
  5312                           tablat	equ	0xFF5
  5313                           prodh	equ	0xFF4
  5314                           prodl	equ	0xFF3
  5315                           postinc0	equ	0xFEE
  5316                           wreg	equ	0xFE8
  5317                           indf2	equ	0xFDF
  5318                           postinc2	equ	0xFDE
  5319                           postdec2	equ	0xFDD
  5320                           fsr2h	equ	0xFDA
  5321                           fsr2l	equ	0xFD9
  5322                           status	equ	0xFD8
  5323                           
  5324 ;; *************** function ___ftneg *****************
  5325 ;; Defined at:
  5326 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
  5327 ;; Parameters:    Size  Location     Type
  5328 ;;  f1              3   18[COMRAM] float 
  5329 ;; Auto vars:     Size  Location     Type
  5330 ;;		None
  5331 ;; Return value:  Size  Location     Type
  5332 ;;                  3   18[COMRAM] float 
  5333 ;; Registers used:
  5334 ;;		wreg, status,2, status,0
  5335 ;; Tracked objects:
  5336 ;;		On entry : 0/0
  5337 ;;		On exit  : 0/0
  5338 ;;		Unchanged: 0/0
  5339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5340 ;;      Params:         3       0       0       0       0       0       0       0       0
  5341 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5342 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5343 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5344 ;;Total ram usage:        3 bytes
  5345 ;; Hardware stack levels used:    1
  5346 ;; Hardware stack levels required when called:    1
  5347 ;; This function calls:
  5348 ;;		Nothing
  5349 ;; This function is called by:
  5350 ;;		_sprintf
  5351 ;; This function uses a non-reentrant model
  5352 ;;
  5353                           
  5354                           	psect	text16
  5355  0000'                    __ptext16:
  5356                           	opt stack 0
  5357  0000'                    ___ftneg:
  5358                           	opt stack 28
  5359                           
  5360                           ;incstack = 0
  5361  0000' 5012'              	movf	___ftneg@f1,w,c
  5362  0002' 1013'              	iorwf	___ftneg@f1+1,w,c
  5363  0004' 1014'              	iorwf	___ftneg@f1+2,w,c
  5364  0006' B4D8               	btfsc	status,2,c
  5365  0008' D006               	goto	l657
  5366  000A' 0E00               	movlw	0
  5367  000C' 1A12'              	xorwf	___ftneg@f1,f,c
  5368  000E' 0E00               	movlw	0
  5369  0010' 1A13'              	xorwf	___ftneg@f1+1,f,c
  5370  0012' 0E80               	movlw	128
  5371  0014' 1A14'              	xorwf	___ftneg@f1+2,f,c
  5372  0016'                    l657:
  5373  0016' C012' F012'        	movff	___ftneg@f1,?___ftneg
  5374  001A' C013' F013'        	movff	___ftneg@f1+1,?___ftneg+1
  5375  001E' C014' F014'        	movff	___ftneg@f1+2,?___ftneg+2
  5376  0022' 0012               	return		;funcret
  5377  0024'                    __end_of___ftneg:
  5378                           	opt stack 0
  5379                           tblptru	equ	0xFF8
  5380                           tblptrh	equ	0xFF7
  5381                           tblptrl	equ	0xFF6
  5382                           tablat	equ	0xFF5
  5383                           prodh	equ	0xFF4
  5384                           prodl	equ	0xFF3
  5385                           postinc0	equ	0xFEE
  5386                           wreg	equ	0xFE8
  5387                           indf2	equ	0xFDF
  5388                           postinc2	equ	0xFDE
  5389                           postdec2	equ	0xFDD
  5390                           fsr2h	equ	0xFDA
  5391                           fsr2l	equ	0xFD9
  5392                           status	equ	0xFD8
  5393                           
  5394 ;; *************** function ___ftge *****************
  5395 ;; Defined at:
  5396 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  5397 ;; Parameters:    Size  Location     Type
  5398 ;;  ff1             3   18[COMRAM] float 
  5399 ;;  ff2             3   21[COMRAM] float 
  5400 ;; Auto vars:     Size  Location     Type
  5401 ;;		None
  5402 ;; Return value:  Size  Location     Type
  5403 ;;		None               void
  5404 ;; Registers used:
  5405 ;;		wreg, status,2, status,0
  5406 ;; Tracked objects:
  5407 ;;		On entry : 0/0
  5408 ;;		On exit  : 0/0
  5409 ;;		Unchanged: 0/0
  5410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5411 ;;      Params:         6       0       0       0       0       0       0       0       0
  5412 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5413 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5414 ;;      Totals:         9       0       0       0       0       0       0       0       0
  5415 ;;Total ram usage:        9 bytes
  5416 ;; Hardware stack levels used:    1
  5417 ;; Hardware stack levels required when called:    1
  5418 ;; This function calls:
  5419 ;;		Nothing
  5420 ;; This function is called by:
  5421 ;;		_sprintf
  5422 ;; This function uses a non-reentrant model
  5423 ;;
  5424                           
  5425                           	psect	text17
  5426  0000'                    __ptext17:
  5427                           	opt stack 0
  5428  0000'                    ___ftge:
  5429                           	opt stack 28
  5430                           
  5431                           ;incstack = 0
  5432  0000' AE14'              	btfss	___ftge@ff1+2,7,c
  5433  0002' D016               	goto	l639
  5434  0004' C012' F018'        	movff	___ftge@ff1,??___ftge
  5435  0008' C013' F019'        	movff	___ftge@ff1+1,??___ftge+1
  5436  000C' C014' F01A'        	movff	___ftge@ff1+2,??___ftge+2
  5437  0010' 1E18'              	comf	??___ftge,f,c
  5438  0012' 1E19'              	comf	??___ftge+1,f,c
  5439  0014' 1E1A'              	comf	??___ftge+2,f,c
  5440  0016' 2A18'              	incf	??___ftge,f,c
  5441  0018' 0E00               	movlw	0
  5442  001A' 2219'              	addwfc	??___ftge+1,f,c
  5443  001C' 221A'              	addwfc	??___ftge+2,f,c
  5444  001E' 0E00               	movlw	0
  5445  0020' 2418'              	addwf	??___ftge,w,c
  5446  0022' 6E12'              	movwf	___ftge@ff1,c
  5447  0024' 0E00               	movlw	0
  5448  0026' 2019'              	addwfc	??___ftge+1,w,c
  5449  0028' 6E13'              	movwf	___ftge@ff1+1,c
  5450  002A' 0E80               	movlw	128
  5451  002C' 201A'              	addwfc	??___ftge+2,w,c
  5452  002E' 6E14'              	movwf	___ftge@ff1+2,c
  5453  0030'                    l639:
  5454  0030' AE17'              	btfss	___ftge@ff2+2,7,c
  5455  0032' D016               	goto	l640
  5456  0034' C015' F018'        	movff	___ftge@ff2,??___ftge
  5457  0038' C016' F019'        	movff	___ftge@ff2+1,??___ftge+1
  5458  003C' C017' F01A'        	movff	___ftge@ff2+2,??___ftge+2
  5459  0040' 1E18'              	comf	??___ftge,f,c
  5460  0042' 1E19'              	comf	??___ftge+1,f,c
  5461  0044' 1E1A'              	comf	??___ftge+2,f,c
  5462  0046' 2A18'              	incf	??___ftge,f,c
  5463  0048' 0E00               	movlw	0
  5464  004A' 2219'              	addwfc	??___ftge+1,f,c
  5465  004C' 221A'              	addwfc	??___ftge+2,f,c
  5466  004E' 0E00               	movlw	0
  5467  0050' 2418'              	addwf	??___ftge,w,c
  5468  0052' 6E15'              	movwf	___ftge@ff2,c
  5469  0054' 0E00               	movlw	0
  5470  0056' 2019'              	addwfc	??___ftge+1,w,c
  5471  0058' 6E16'              	movwf	___ftge@ff2+1,c
  5472  005A' 0E80               	movlw	128
  5473  005C' 201A'              	addwfc	??___ftge+2,w,c
  5474  005E' 6E17'              	movwf	___ftge@ff2+2,c
  5475  0060'                    l640:
  5476  0060' 0E00               	movlw	0
  5477  0062' 1A12'              	xorwf	___ftge@ff1,f,c
  5478  0064' 0E00               	movlw	0
  5479  0066' 1A13'              	xorwf	___ftge@ff1+1,f,c
  5480  0068' 0E80               	movlw	128
  5481  006A' 1A14'              	xorwf	___ftge@ff1+2,f,c
  5482  006C' 0E00               	movlw	0
  5483  006E' 1A15'              	xorwf	___ftge@ff2,f,c
  5484  0070' 0E00               	movlw	0
  5485  0072' 1A16'              	xorwf	___ftge@ff2+1,f,c
  5486  0074' 0E80               	movlw	128
  5487  0076' 1A17'              	xorwf	___ftge@ff2+2,f,c
  5488  0078' 5015'              	movf	___ftge@ff2,w,c
  5489  007A' 5C12'              	subwf	___ftge@ff1,w,c
  5490  007C' 5016'              	movf	___ftge@ff2+1,w,c
  5491  007E' 5813'              	subwfb	___ftge@ff1+1,w,c
  5492  0080' 5017'              	movf	___ftge@ff2+2,w,c
  5493  0082' 5814'              	subwfb	___ftge@ff1+2,w,c
  5494  0084' B0D8               	btfsc	status,0,c
  5495  0086' D002               	goto	l2173
  5496  0088' 90D8               	bcf	status,0,c
  5497  008A' 0012               	return	
  5498  008C'                    l2173:
  5499  008C' 80D8               	bsf	status,0,c
  5500  008E' 0012               	return	
  5501  0090'                    __end_of___ftge:
  5502                           	opt stack 0
  5503                           tblptru	equ	0xFF8
  5504                           tblptrh	equ	0xFF7
  5505                           tblptrl	equ	0xFF6
  5506                           tablat	equ	0xFF5
  5507                           prodh	equ	0xFF4
  5508                           prodl	equ	0xFF3
  5509                           postinc0	equ	0xFEE
  5510                           wreg	equ	0xFE8
  5511                           indf2	equ	0xFDF
  5512                           postinc2	equ	0xFDE
  5513                           postdec2	equ	0xFDD
  5514                           fsr2h	equ	0xFDA
  5515                           fsr2l	equ	0xFD9
  5516                           status	equ	0xFD8
  5517                           
  5518 ;; *************** function _lcd_ubicarXY *****************
  5519 ;; Defined at:
  5520 ;;		line 314 in file "lcd.c"
  5521 ;; Parameters:    Size  Location     Type
  5522 ;;  linea           1    wreg     unsigned char 
  5523 ;;  columna         1   34[BANK0 ] unsigned char 
  5524 ;; Auto vars:     Size  Location     Type
  5525 ;;  linea           1   42[BANK0 ] unsigned char 
  5526 ;;  i               1   41[BANK0 ] unsigned char 
  5527 ;;  i               1   40[BANK0 ] unsigned char 
  5528 ;; Return value:  Size  Location     Type
  5529 ;;                  1    wreg      void 
  5530 ;; Registers used:
  5531 ;;		wreg, status,2, status,0, cstack
  5532 ;; Tracked objects:
  5533 ;;		On entry : 0/0
  5534 ;;		On exit  : 0/0
  5535 ;;		Unchanged: 0/0
  5536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5537 ;;      Params:         0       1       0       0       0       0       0       0       0
  5538 ;;      Locals:         0       3       0       0       0       0       0       0       0
  5539 ;;      Temps:          0       5       0       0       0       0       0       0       0
  5540 ;;      Totals:         0       9       0       0       0       0       0       0       0
  5541 ;;Total ram usage:        9 bytes
  5542 ;; Hardware stack levels used:    1
  5543 ;; Hardware stack levels required when called:    7
  5544 ;; This function calls:
  5545 ;;		_lcd_orden
  5546 ;;		_lcd_origen
  5547 ;; This function is called by:
  5548 ;;		_main
  5549 ;; This function uses a non-reentrant model
  5550 ;;
  5551                           
  5552                           	psect	text18
  5553  0000'                    __ptext18:
  5554                           	opt stack 0
  5555  0000'                    _lcd_ubicarXY:
  5556                           	opt stack 23
  5557                           
  5558                           ;incstack = 0
  5559                           ;lcd_ubicarXY@linea stored from wreg
  5560  0000' 0100               	movlb	0	; () banked
  5561  0002' 6F00'              	movwf	lcd_ubicarXY@linea& (0+255),b
  5562                           
  5563                           ;lcd.c: 315: lcd_origen();
  5564  0004' EC00' F000'        	call	_lcd_origen	;wreg free
  5565                           
  5566                           ;lcd.c: 316: if (linea==1){
  5567  0008' 0100               	movlb	0	; () banked
  5568  000A' 0500'              	decf	lcd_ubicarXY@linea& (0+255),w,b
  5569  000C' A4D8               	btfss	status,2,c
  5570  000E' D00F               	goto	u3940
  5571                           
  5572                           ; BSR set to: 0
  5573                           ;lcd.c: 317: for(char i=1; i<columna; i++){
  5574  0010' 0E01               	movlw	1
  5575  0012' 6F00'              	movwf	lcd_ubicarXY@i& (0+255),b
  5576  0014' D008               	goto	l105
  5577  0016'                    
  5578                           ; BSR set to: 0
  5579                           ;lcd.c: 318: lcd_orden(0x14);
  5580                           
  5581                           ; BSR set to: 0
  5582  0016' 0E00               	movlw	0
  5583  0018' 6F00'              	movwf	(lcd_orden@orden+1)& (0+255),b
  5584  001A' 0E14               	movlw	20
  5585  001C' 6F00'              	movwf	lcd_orden@orden& (0+255),b
  5586  001E' EC00' F000'        	call	_lcd_orden	;wreg free
  5587  0022' 0100               	movlb	0	; () banked
  5588  0024' 2B00'              	incf	lcd_ubicarXY@i& (0+255),f,b
  5589  0026'                    l105:
  5590                           
  5591                           ; BSR set to: 0
  5592                           
  5593                           ; BSR set to: 0
  5594  0026' 5100'              	movf	lcd_ubicarXY@columna& (0+255),w,b
  5595  0028' 5D00'              	subwf	lcd_ubicarXY@i& (0+255),w,b
  5596  002A' A0D8               	btfss	status,0,c
  5597  002C' D7F4               	goto	l106
  5598  002E'                    u3940:
  5599                           
  5600                           ; BSR set to: 0
  5601                           ;lcd.c: 319: }
  5602                           ;lcd.c: 320: }
  5603                           ;lcd.c: 321: if(linea==2){
  5604                           
  5605                           ; BSR set to: 0
  5606                           
  5607                           ; BSR set to: 0
  5608  002E' 0E02               	movlw	2
  5609  0030' 1900'              	xorwf	lcd_ubicarXY@linea& (0+255),w,b
  5610  0032' A4D8               	btfss	status,2,c
  5611  0034' 0012               	return	
  5612                           
  5613                           ; BSR set to: 0
  5614                           ;lcd.c: 322: for (char i=1;i<(columna+40);i++){
  5615  0036' 0E01               	movlw	1
  5616  0038' 6F00'              	movwf	lcd_ubicarXY@i_695& (0+255),b
  5617  003A' D008               	goto	l109
  5618  003C'                    
  5619                           ; BSR set to: 0
  5620                           ;lcd.c: 323: lcd_orden(0x14);
  5621                           
  5622                           ; BSR set to: 0
  5623  003C' 0E00               	movlw	0
  5624  003E' 6F00'              	movwf	(lcd_orden@orden+1)& (0+255),b
  5625  0040' 0E14               	movlw	20
  5626  0042' 6F00'              	movwf	lcd_orden@orden& (0+255),b
  5627  0044' EC00' F000'        	call	_lcd_orden	;wreg free
  5628  0048' 0100               	movlb	0	; () banked
  5629  004A' 2B00'              	incf	lcd_ubicarXY@i_695& (0+255),f,b
  5630  004C'                    l109:
  5631                           
  5632                           ; BSR set to: 0
  5633                           
  5634                           ; BSR set to: 0
  5635  004C' 5100'              	movf	lcd_ubicarXY@columna& (0+255),w,b
  5636  004E' 6F00'              	movwf	??_lcd_ubicarXY& (0+255),b
  5637  0050' 6B00'              	clrf	(??_lcd_ubicarXY+1)& (0+255),b
  5638  0052' 0E28               	movlw	40
  5639  0054' 2700'              	addwf	??_lcd_ubicarXY& (0+255),f,b
  5640  0056' 0E00               	movlw	0
  5641  0058' 2300'              	addwfc	(??_lcd_ubicarXY+1)& (0+255),f,b
  5642  005A' 5100'              	movf	lcd_ubicarXY@i_695& (0+255),w,b
  5643  005C' 6F00'              	movwf	(??_lcd_ubicarXY+2)& (0+255),b
  5644  005E' 6B00'              	clrf	(??_lcd_ubicarXY+3)& (0+255),b
  5645  0060' 5100'              	movf	??_lcd_ubicarXY& (0+255),w,b
  5646  0062' 5D00'              	subwf	(??_lcd_ubicarXY+2)& (0+255),w,b
  5647  0064' 5100'              	movf	(??_lcd_ubicarXY+3)& (0+255),w,b
  5648  0066' 0A80               	xorlw	128
  5649  0068' 6F00'              	movwf	(??_lcd_ubicarXY+4)& (0+255),b
  5650  006A' 5100'              	movf	(??_lcd_ubicarXY+1)& (0+255),w,b
  5651  006C' 0A80               	xorlw	128
  5652  006E' 5900'              	subwfb	(??_lcd_ubicarXY+4)& (0+255),w,b
  5653  0070' B0D8               	btfsc	status,0,c
  5654  0072' 0012               	return	
  5655  0074' D7E3               	goto	l110
  5656  0076'                    __end_of_lcd_ubicarXY:
  5657                           	opt stack 0
  5658                           tblptru	equ	0xFF8
  5659                           tblptrh	equ	0xFF7
  5660                           tblptrl	equ	0xFF6
  5661                           tablat	equ	0xFF5
  5662                           prodh	equ	0xFF4
  5663                           prodl	equ	0xFF3
  5664                           postinc0	equ	0xFEE
  5665                           wreg	equ	0xFE8
  5666                           indf2	equ	0xFDF
  5667                           postinc2	equ	0xFDE
  5668                           postdec2	equ	0xFDD
  5669                           fsr2h	equ	0xFDA
  5670                           fsr2l	equ	0xFD9
  5671                           status	equ	0xFD8
  5672                           
  5673 ;; *************** function _lcd_origen *****************
  5674 ;; Defined at:
  5675 ;;		line 309 in file "lcd.c"
  5676 ;; Parameters:    Size  Location     Type
  5677 ;;		None
  5678 ;; Auto vars:     Size  Location     Type
  5679 ;;		None
  5680 ;; Return value:  Size  Location     Type
  5681 ;;                  1    wreg      void 
  5682 ;; Registers used:
  5683 ;;		wreg, status,2, status,0, cstack
  5684 ;; Tracked objects:
  5685 ;;		On entry : 0/0
  5686 ;;		On exit  : 0/0
  5687 ;;		Unchanged: 0/0
  5688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5689 ;;      Params:         0       0       0       0       0       0       0       0       0
  5690 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5691 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5692 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5693 ;;Total ram usage:        0 bytes
  5694 ;; Hardware stack levels used:    1
  5695 ;; Hardware stack levels required when called:    6
  5696 ;; This function calls:
  5697 ;;		_lcd_orden
  5698 ;;		_wait_in_ms
  5699 ;; This function is called by:
  5700 ;;		_lcd_ubicarXY
  5701 ;; This function uses a non-reentrant model
  5702 ;;
  5703                           
  5704                           	psect	text19
  5705  0000'                    __ptext19:
  5706                           	opt stack 0
  5707  0000'                    _lcd_origen:
  5708                           	opt stack 23
  5709                           
  5710                           ;lcd.c: 310: lcd_orden(0x02);
  5711                           
  5712                           ; BSR set to: 0
  5713                           ;incstack = 0
  5714  0000' 0E00               	movlw	0
  5715  0002' 0100               	movlb	0	; () banked
  5716  0004' 6F00'              	movwf	(lcd_orden@orden+1)& (0+255),b
  5717  0006' 0E02               	movlw	2
  5718  0008' 6F00'              	movwf	lcd_orden@orden& (0+255),b
  5719  000A' EC00' F000'        	call	_lcd_orden	;wreg free
  5720                           
  5721                           ;lcd.c: 311: wait_in_ms(4);
  5722  000E' 0E00               	movlw	0
  5723  0010' 0100               	movlb	0	; () banked
  5724  0012' 6F00'              	movwf	(wait_in_ms@time_in_ms+1)& (0+255),b
  5725  0014' 0E04               	movlw	4
  5726  0016' 6F00'              	movwf	wait_in_ms@time_in_ms& (0+255),b
  5727  0018' EC00' F000'        	call	_wait_in_ms	;wreg free
  5728  001C' 0012               	return		;funcret
  5729  001E'                    __end_of_lcd_origen:
  5730                           	opt stack 0
  5731                           tblptru	equ	0xFF8
  5732                           tblptrh	equ	0xFF7
  5733                           tblptrl	equ	0xFF6
  5734                           tablat	equ	0xFF5
  5735                           prodh	equ	0xFF4
  5736                           prodl	equ	0xFF3
  5737                           postinc0	equ	0xFEE
  5738                           wreg	equ	0xFE8
  5739                           indf2	equ	0xFDF
  5740                           postinc2	equ	0xFDE
  5741                           postdec2	equ	0xFDD
  5742                           fsr2h	equ	0xFDA
  5743                           fsr2l	equ	0xFD9
  5744                           status	equ	0xFD8
  5745                           
  5746 ;; *************** function _lcd_texto *****************
  5747 ;; Defined at:
  5748 ;;		line 297 in file "lcd.c"
  5749 ;; Parameters:    Size  Location     Type
  5750 ;;  cadena          2   34[BANK0 ] PTR unsigned char 
  5751 ;;		 -> main@str(2), 
  5752 ;; Auto vars:     Size  Location     Type
  5753 ;;		None
  5754 ;; Return value:  Size  Location     Type
  5755 ;;                  1    wreg      void 
  5756 ;; Registers used:
  5757 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5758 ;; Tracked objects:
  5759 ;;		On entry : 0/0
  5760 ;;		On exit  : 0/0
  5761 ;;		Unchanged: 0/0
  5762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5763 ;;      Params:         0       2       0       0       0       0       0       0       0
  5764 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5765 ;;      Temps:          0       1       0       0       0       0       0       0       0
  5766 ;;      Totals:         0       3       0       0       0       0       0       0       0
  5767 ;;Total ram usage:        3 bytes
  5768 ;; Hardware stack levels used:    1
  5769 ;; Hardware stack levels required when called:    6
  5770 ;; This function calls:
  5771 ;;		_lcd_caracter
  5772 ;; This function is called by:
  5773 ;;		_main
  5774 ;; This function uses a non-reentrant model
  5775 ;;
  5776                           
  5777                           	psect	text20
  5778  0000'                    __ptext20:
  5779                           	opt stack 0
  5780  0000'                    _lcd_texto:
  5781                           	opt stack 24
  5782                           
  5783                           ;lcd.c: 298: while(*cadena != 0x00){
  5784                           
  5785                           ;incstack = 0
  5786  0000' D00F               	goto	l92
  5787  0002'                    
  5788                           ;lcd.c: 299: lcd_caracter(*cadena);
  5789  0002' C022' FFD9         	movff	lcd_texto@cadena,fsr2l
  5790  0006' C023' FFDA         	movff	lcd_texto@cadena+1,fsr2h
  5791  000A' 50DF               	movf	indf2,w,c
  5792  000C' 0100               	movlb	0	; () banked
  5793  000E' 6F00'              	movwf	??_lcd_texto& (0+255),b
  5794  0010' 5100'              	movf	??_lcd_texto& (0+255),w,b
  5795  0012' 6F00'              	movwf	lcd_caracter@caracter& (0+255),b
  5796  0014' 6B00'              	clrf	(lcd_caracter@caracter+1)& (0+255),b
  5797  0016' EC00' F000'        	call	_lcd_caracter	;wreg free
  5798                           
  5799                           ;lcd.c: 300: cadena++;
  5800  001A' 0100               	movlb	0	; () banked
  5801  001C' 4B00'              	infsnz	lcd_texto@cadena& (0+255),f,b
  5802  001E' 2B00'              	incf	(lcd_texto@cadena+1)& (0+255),f,b
  5803  0020'                    l92:
  5804                           
  5805                           ; BSR set to: 0
  5806  0020' C022' FFD9         	movff	lcd_texto@cadena,fsr2l
  5807  0024' C023' FFDA         	movff	lcd_texto@cadena+1,fsr2h
  5808  0028' 50DF               	movf	indf2,w,c
  5809  002A' B4D8               	btfsc	status,2,c
  5810  002C' 0012               	return	
  5811  002E' D7E9               	goto	l93
  5812  0030'                    __end_of_lcd_texto:
  5813                           	opt stack 0
  5814                           tblptru	equ	0xFF8
  5815                           tblptrh	equ	0xFF7
  5816                           tblptrl	equ	0xFF6
  5817                           tablat	equ	0xFF5
  5818                           prodh	equ	0xFF4
  5819                           prodl	equ	0xFF3
  5820                           postinc0	equ	0xFEE
  5821                           wreg	equ	0xFE8
  5822                           indf2	equ	0xFDF
  5823                           postinc2	equ	0xFDE
  5824                           postdec2	equ	0xFDD
  5825                           fsr2h	equ	0xFDA
  5826                           fsr2l	equ	0xFD9
  5827                           status	equ	0xFD8
  5828                           
  5829 ;; *************** function _lcd_caracter *****************
  5830 ;; Defined at:
  5831 ;;		line 287 in file "lcd.c"
  5832 ;; Parameters:    Size  Location     Type
  5833 ;;  caracter        2   27[BANK0 ] unsigned int 
  5834 ;; Auto vars:     Size  Location     Type
  5835 ;;		None
  5836 ;; Return value:  Size  Location     Type
  5837 ;;                  1    wreg      void 
  5838 ;; Registers used:
  5839 ;;		wreg, status,2, status,0, cstack
  5840 ;; Tracked objects:
  5841 ;;		On entry : 0/0
  5842 ;;		On exit  : 0/0
  5843 ;;		Unchanged: 0/0
  5844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5845 ;;      Params:         0       2       0       0       0       0       0       0       0
  5846 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5847 ;;      Temps:          0       5       0       0       0       0       0       0       0
  5848 ;;      Totals:         0       7       0       0       0       0       0       0       0
  5849 ;;Total ram usage:        7 bytes
  5850 ;; Hardware stack levels used:    1
  5851 ;; Hardware stack levels required when called:    5
  5852 ;; This function calls:
  5853 ;;		_lcd_pulso
  5854 ;; This function is called by:
  5855 ;;		_lcd_texto
  5856 ;; This function uses a non-reentrant model
  5857 ;;
  5858                           
  5859                           	psect	text21
  5860  0000'                    __ptext21:
  5861                           	opt stack 0
  5862  0000'                    _lcd_caracter:
  5863                           	opt stack 24
  5864                           
  5865                           ;lcd.c: 288: PORTDbits.RD1=1;
  5866                           
  5867                           ;incstack = 0
  5868  0000' 8283               	bsf	3971,1,c	;volatile
  5869                           
  5870                           ;lcd.c: 290: PORTD=(((((PORTD>>4&0x0f)|0x0f)&(caracter>>4&0x0f))<<4)|(PORTD&0x0f));
  5871  0002' CF83 F01D'         	movff	3971,??_lcd_caracter	;volatile
  5872  0006' 0E0F               	movlw	15
  5873  0008' 0100               	movlb	0	; () banked
  5874  000A' 1700'              	andwf	??_lcd_caracter& (0+255),f,b
  5875  000C' C01B' F01E'        	movff	lcd_caracter@caracter,??_lcd_caracter+1
  5876  0010' C01C' F01F'        	movff	lcd_caracter@caracter+1,??_lcd_caracter+2
  5877  0014' 0E04               	movlw	4
  5878  0016' 6F00'              	movwf	(??_lcd_caracter+3)& (0+255),b
  5879  0018'                    u3825:
  5880  0018' 90D8               	bcf	status,0,c
  5881  001A' 3300'              	rrcf	(??_lcd_caracter+2)& (0+255),f,b
  5882  001C' 3300'              	rrcf	(??_lcd_caracter+1)& (0+255),f,b
  5883  001E' 2F00'              	decfsz	(??_lcd_caracter+3)& (0+255),f,b
  5884  0020' D7FB               	goto	u3825
  5885  0022' 0E0F               	movlw	15
  5886  0024' 1700'              	andwf	(??_lcd_caracter+1)& (0+255),f,b
  5887  0026' 3883               	swapf	3971,w,c	;volatile
  5888  0028' 0B0F               	andlw	15
  5889  002A' 0B0F               	andlw	15
  5890  002C' 090F               	iorlw	15
  5891  002E' 1500'              	andwf	(??_lcd_caracter+1)& (0+255),w,b
  5892  0030' 6F00'              	movwf	(??_lcd_caracter+4)& (0+255),b
  5893  0032' 3900'              	swapf	(??_lcd_caracter+4)& (0+255),w,b
  5894  0034' 0BF0               	andlw	240
  5895  0036' 1100'              	iorwf	??_lcd_caracter& (0+255),w,b
  5896  0038' 6E83               	movwf	3971,c	;volatile
  5897                           
  5898                           ; BSR set to: 0
  5899                           ;lcd.c: 291: lcd_pulso();
  5900  003A' EC00' F000'        	call	_lcd_pulso	;wreg free
  5901                           
  5902                           ;lcd.c: 292: PORTD=(((((PORTD>>4&0x0f)|0x0f)&(caracter&0x0f))<<4)|(PORTD&0x0f));
  5903  003E' CF83 F01D'         	movff	3971,??_lcd_caracter	;volatile
  5904  0042' 0E0F               	movlw	15
  5905  0044' 0100               	movlb	0	; () banked
  5906  0046' 1700'              	andwf	??_lcd_caracter& (0+255),f,b
  5907  0048' C01B' F01E'        	movff	lcd_caracter@caracter,??_lcd_caracter+1
  5908  004C' 0E0F               	movlw	15
  5909  004E' 1700'              	andwf	(??_lcd_caracter+1)& (0+255),f,b
  5910  0050' 3883               	swapf	3971,w,c	;volatile
  5911  0052' 0B0F               	andlw	15
  5912  0054' 0B0F               	andlw	15
  5913  0056' 090F               	iorlw	15
  5914  0058' 1500'              	andwf	(??_lcd_caracter+1)& (0+255),w,b
  5915  005A' 6F00'              	movwf	(??_lcd_caracter+2)& (0+255),b
  5916  005C' 3900'              	swapf	(??_lcd_caracter+2)& (0+255),w,b
  5917  005E' 0BF0               	andlw	240
  5918  0060' 1100'              	iorwf	??_lcd_caracter& (0+255),w,b
  5919  0062' 6E83               	movwf	3971,c	;volatile
  5920                           
  5921                           ;lcd.c: 293: lcd_pulso();
  5922  0064' EC00' F000'        	call	_lcd_pulso	;wreg free
  5923                           
  5924                           ;lcd.c: 294: PORTDbits.RD1=0;
  5925  0068' 9283               	bcf	3971,1,c	;volatile
  5926  006A' 0012               	return		;funcret
  5927  006C'                    __end_of_lcd_caracter:
  5928                           	opt stack 0
  5929                           tblptru	equ	0xFF8
  5930                           tblptrh	equ	0xFF7
  5931                           tblptrl	equ	0xFF6
  5932                           tablat	equ	0xFF5
  5933                           prodh	equ	0xFF4
  5934                           prodl	equ	0xFF3
  5935                           postinc0	equ	0xFEE
  5936                           wreg	equ	0xFE8
  5937                           indf2	equ	0xFDF
  5938                           postinc2	equ	0xFDE
  5939                           postdec2	equ	0xFDD
  5940                           fsr2h	equ	0xFDA
  5941                           fsr2l	equ	0xFD9
  5942                           status	equ	0xFD8
  5943                           
  5944 ;; *************** function _lcd_limpiar *****************
  5945 ;; Defined at:
  5946 ;;		line 304 in file "lcd.c"
  5947 ;; Parameters:    Size  Location     Type
  5948 ;;		None
  5949 ;; Auto vars:     Size  Location     Type
  5950 ;;		None
  5951 ;; Return value:  Size  Location     Type
  5952 ;;                  1    wreg      void 
  5953 ;; Registers used:
  5954 ;;		wreg, status,2, status,0, cstack
  5955 ;; Tracked objects:
  5956 ;;		On entry : 0/0
  5957 ;;		On exit  : 0/0
  5958 ;;		Unchanged: 0/0
  5959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5960 ;;      Params:         0       0       0       0       0       0       0       0       0
  5961 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5962 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5963 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5964 ;;Total ram usage:        0 bytes
  5965 ;; Hardware stack levels used:    1
  5966 ;; Hardware stack levels required when called:    6
  5967 ;; This function calls:
  5968 ;;		_lcd_orden
  5969 ;;		_wait_in_ms
  5970 ;; This function is called by:
  5971 ;;		_main
  5972 ;; This function uses a non-reentrant model
  5973 ;;
  5974                           
  5975                           	psect	text22
  5976  0000'                    __ptext22:
  5977                           	opt stack 0
  5978  0000'                    _lcd_limpiar:
  5979                           	opt stack 24
  5980                           
  5981                           ;lcd.c: 305: lcd_orden(0x01);
  5982                           
  5983                           ;incstack = 0
  5984  0000' 0E00               	movlw	0
  5985  0002' 0100               	movlb	0	; () banked
  5986  0004' 6F00'              	movwf	(lcd_orden@orden+1)& (0+255),b
  5987  0006' 0E01               	movlw	1
  5988  0008' 6F00'              	movwf	lcd_orden@orden& (0+255),b
  5989  000A' EC00' F000'        	call	_lcd_orden	;wreg free
  5990                           
  5991                           ;lcd.c: 306: wait_in_ms(2);
  5992  000E' 0E00               	movlw	0
  5993  0010' 0100               	movlb	0	; () banked
  5994  0012' 6F00'              	movwf	(wait_in_ms@time_in_ms+1)& (0+255),b
  5995  0014' 0E02               	movlw	2
  5996  0016' 6F00'              	movwf	wait_in_ms@time_in_ms& (0+255),b
  5997  0018' EC00' F000'        	call	_wait_in_ms	;wreg free
  5998  001C' 0012               	return		;funcret
  5999  001E'                    __end_of_lcd_limpiar:
  6000                           	opt stack 0
  6001                           tblptru	equ	0xFF8
  6002                           tblptrh	equ	0xFF7
  6003                           tblptrl	equ	0xFF6
  6004                           tablat	equ	0xFF5
  6005                           prodh	equ	0xFF4
  6006                           prodl	equ	0xFF3
  6007                           postinc0	equ	0xFEE
  6008                           wreg	equ	0xFE8
  6009                           indf2	equ	0xFDF
  6010                           postinc2	equ	0xFDE
  6011                           postdec2	equ	0xFDD
  6012                           fsr2h	equ	0xFDA
  6013                           fsr2l	equ	0xFD9
  6014                           status	equ	0xFD8
  6015                           
  6016 ;; *************** function _lcd_iniciar *****************
  6017 ;; Defined at:
  6018 ;;		line 225 in file "lcd.c"
  6019 ;; Parameters:    Size  Location     Type
  6020 ;;		None
  6021 ;; Auto vars:     Size  Location     Type
  6022 ;;		None
  6023 ;; Return value:  Size  Location     Type
  6024 ;;                  1    wreg      void 
  6025 ;; Registers used:
  6026 ;;		wreg, status,2, status,0, cstack
  6027 ;; Tracked objects:
  6028 ;;		On entry : 0/0
  6029 ;;		On exit  : 0/0
  6030 ;;		Unchanged: 0/0
  6031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6032 ;;      Params:         0       0       0       0       0       0       0       0       0
  6033 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6034 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6035 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6036 ;;Total ram usage:        0 bytes
  6037 ;; Hardware stack levels used:    1
  6038 ;; Hardware stack levels required when called:    6
  6039 ;; This function calls:
  6040 ;;		_lcd_orden
  6041 ;;		_lcd_pulso
  6042 ;;		_wait_in_ms
  6043 ;; This function is called by:
  6044 ;;		_main
  6045 ;; This function uses a non-reentrant model
  6046 ;;
  6047                           
  6048                           	psect	text23
  6049  0000'                    __ptext23:
  6050                           	opt stack 0
  6051  0000'                    _lcd_iniciar:
  6052                           	opt stack 24
  6053                           
  6054                           ;lcd.c: 226: TRISDbits.TRISD1=0;
  6055                           
  6056                           ;incstack = 0
  6057  0000' 9295               	bcf	3989,1,c	;volatile
  6058                           
  6059                           ;lcd.c: 227: TRISDbits.TRISD2=0;
  6060  0002' 9495               	bcf	3989,2,c	;volatile
  6061                           
  6062                           ;lcd.c: 228: TRISDbits.TRISD3=0;
  6063  0004' 9695               	bcf	3989,3,c	;volatile
  6064                           
  6065                           ;lcd.c: 229: TRISDbits.TRISD4=0;
  6066  0006' 9895               	bcf	3989,4,c	;volatile
  6067                           
  6068                           ;lcd.c: 230: TRISDbits.TRISD5=0;
  6069  0008' 9A95               	bcf	3989,5,c	;volatile
  6070                           
  6071                           ;lcd.c: 231: TRISDbits.TRISD6=0;
  6072  000A' 9C95               	bcf	3989,6,c	;volatile
  6073                           
  6074                           ;lcd.c: 232: TRISDbits.TRISD7=0;
  6075  000C' 9E95               	bcf	3989,7,c	;volatile
  6076                           
  6077                           ;lcd.c: 234: PORTDbits.RD1=0;
  6078  000E' 9283               	bcf	3971,1,c	;volatile
  6079                           
  6080                           ;lcd.c: 235: PORTDbits.RD2=0;
  6081  0010' 9483               	bcf	3971,2,c	;volatile
  6082                           
  6083                           ;lcd.c: 236: PORTDbits.RD3=0;
  6084  0012' 9683               	bcf	3971,3,c	;volatile
  6085                           
  6086                           ;lcd.c: 237: PORTDbits.RD4=0;
  6087  0014' 9883               	bcf	3971,4,c	;volatile
  6088                           
  6089                           ;lcd.c: 238: PORTDbits.RD5=0;
  6090  0016' 9A83               	bcf	3971,5,c	;volatile
  6091                           
  6092                           ;lcd.c: 239: PORTDbits.RD6=0;
  6093  0018' 9C83               	bcf	3971,6,c	;volatile
  6094                           
  6095                           ;lcd.c: 240: PORTDbits.RD7=0;
  6096  001A' 9E83               	bcf	3971,7,c	;volatile
  6097                           
  6098                           ;lcd.c: 242: wait_in_ms(20);
  6099  001C' 0E00               	movlw	0
  6100  001E' 0100               	movlb	0	; () banked
  6101  0020' 6F00'              	movwf	(wait_in_ms@time_in_ms+1)& (0+255),b
  6102  0022' 0E14               	movlw	20
  6103  0024' 6F00'              	movwf	wait_in_ms@time_in_ms& (0+255),b
  6104  0026' EC00' F000'        	call	_wait_in_ms	;wreg free
  6105                           
  6106                           ;lcd.c: 243: PORTD=0X03<<4;
  6107  002A' 0E30               	movlw	48
  6108  002C' 6E83               	movwf	3971,c	;volatile
  6109                           
  6110                           ;lcd.c: 244: lcd_pulso();
  6111  002E' EC00' F000'        	call	_lcd_pulso	;wreg free
  6112                           
  6113                           ;lcd.c: 245: wait_in_ms(4);
  6114  0032' 0E00               	movlw	0
  6115  0034' 0100               	movlb	0	; () banked
  6116  0036' 6F00'              	movwf	(wait_in_ms@time_in_ms+1)& (0+255),b
  6117  0038' 0E04               	movlw	4
  6118  003A' 6F00'              	movwf	wait_in_ms@time_in_ms& (0+255),b
  6119  003C' EC00' F000'        	call	_wait_in_ms	;wreg free
  6120                           
  6121                           ;lcd.c: 247: PORTD=0X03<<4;
  6122  0040' 0E30               	movlw	48
  6123  0042' 6E83               	movwf	3971,c	;volatile
  6124                           
  6125                           ;lcd.c: 248: lcd_pulso();
  6126  0044' EC00' F000'        	call	_lcd_pulso	;wreg free
  6127                           
  6128                           ;lcd.c: 249: wait_in_ms(4);
  6129  0048' 0E00               	movlw	0
  6130  004A' 0100               	movlb	0	; () banked
  6131  004C' 6F00'              	movwf	(wait_in_ms@time_in_ms+1)& (0+255),b
  6132  004E' 0E04               	movlw	4
  6133  0050' 6F00'              	movwf	wait_in_ms@time_in_ms& (0+255),b
  6134  0052' EC00' F000'        	call	_wait_in_ms	;wreg free
  6135                           
  6136                           ;lcd.c: 251: PORTD=0X03<<4;
  6137  0056' 0E30               	movlw	48
  6138  0058' 6E83               	movwf	3971,c	;volatile
  6139                           
  6140                           ;lcd.c: 252: lcd_pulso();
  6141  005A' EC00' F000'        	call	_lcd_pulso	;wreg free
  6142                           
  6143                           ;lcd.c: 253: wait_in_ms(1);
  6144  005E' 0E00               	movlw	0
  6145  0060' 0100               	movlb	0	; () banked
  6146  0062' 6F00'              	movwf	(wait_in_ms@time_in_ms+1)& (0+255),b
  6147  0064' 0E01               	movlw	1
  6148  0066' 6F00'              	movwf	wait_in_ms@time_in_ms& (0+255),b
  6149  0068' EC00' F000'        	call	_wait_in_ms	;wreg free
  6150                           
  6151                           ;lcd.c: 255: PORTD=0X02<<4;
  6152  006C' 0E20               	movlw	32
  6153  006E' 6E83               	movwf	3971,c	;volatile
  6154                           
  6155                           ;lcd.c: 256: lcd_pulso();
  6156  0070' EC00' F000'        	call	_lcd_pulso	;wreg free
  6157                           
  6158                           ;lcd.c: 258: lcd_orden(0x28);
  6159  0074' 0E00               	movlw	0
  6160  0076' 0100               	movlb	0	; () banked
  6161  0078' 6F00'              	movwf	(lcd_orden@orden+1)& (0+255),b
  6162  007A' 0E28               	movlw	40
  6163  007C' 6F00'              	movwf	lcd_orden@orden& (0+255),b
  6164  007E' EC00' F000'        	call	_lcd_orden	;wreg free
  6165                           
  6166                           ;lcd.c: 259: wait_in_ms(8);
  6167  0082' 0E00               	movlw	0
  6168  0084' 0100               	movlb	0	; () banked
  6169  0086' 6F00'              	movwf	(wait_in_ms@time_in_ms+1)& (0+255),b
  6170  0088' 0E08               	movlw	8
  6171  008A' 6F00'              	movwf	wait_in_ms@time_in_ms& (0+255),b
  6172  008C' EC00' F000'        	call	_wait_in_ms	;wreg free
  6173                           
  6174                           ;lcd.c: 261: lcd_orden(0x0c);
  6175  0090' 0E00               	movlw	0
  6176  0092' 0100               	movlb	0	; () banked
  6177  0094' 6F00'              	movwf	(lcd_orden@orden+1)& (0+255),b
  6178  0096' 0E0C               	movlw	12
  6179  0098' 6F00'              	movwf	lcd_orden@orden& (0+255),b
  6180  009A' EC00' F000'        	call	_lcd_orden	;wreg free
  6181                           
  6182                           ;lcd.c: 262: wait_in_ms(8);
  6183  009E' 0E00               	movlw	0
  6184  00A0' 0100               	movlb	0	; () banked
  6185  00A2' 6F00'              	movwf	(wait_in_ms@time_in_ms+1)& (0+255),b
  6186  00A4' 0E08               	movlw	8
  6187  00A6' 6F00'              	movwf	wait_in_ms@time_in_ms& (0+255),b
  6188  00A8' EC00' F000'        	call	_wait_in_ms	;wreg free
  6189                           
  6190                           ;lcd.c: 264: lcd_orden(0x01);
  6191  00AC' 0E00               	movlw	0
  6192  00AE' 0100               	movlb	0	; () banked
  6193  00B0' 6F00'              	movwf	(lcd_orden@orden+1)& (0+255),b
  6194  00B2' 0E01               	movlw	1
  6195  00B4' 6F00'              	movwf	lcd_orden@orden& (0+255),b
  6196  00B6' EC00' F000'        	call	_lcd_orden	;wreg free
  6197                           
  6198                           ;lcd.c: 265: wait_in_ms(2);
  6199  00BA' 0E00               	movlw	0
  6200  00BC' 0100               	movlb	0	; () banked
  6201  00BE' 6F00'              	movwf	(wait_in_ms@time_in_ms+1)& (0+255),b
  6202  00C0' 0E02               	movlw	2
  6203  00C2' 6F00'              	movwf	wait_in_ms@time_in_ms& (0+255),b
  6204  00C4' EC00' F000'        	call	_wait_in_ms	;wreg free
  6205                           
  6206                           ;lcd.c: 267: lcd_orden(0x06);
  6207  00C8' 0E00               	movlw	0
  6208  00CA' 0100               	movlb	0	; () banked
  6209  00CC' 6F00'              	movwf	(lcd_orden@orden+1)& (0+255),b
  6210  00CE' 0E06               	movlw	6
  6211  00D0' 6F00'              	movwf	lcd_orden@orden& (0+255),b
  6212  00D2' EC00' F000'        	call	_lcd_orden	;wreg free
  6213                           
  6214                           ;lcd.c: 268: wait_in_ms(8);
  6215  00D6' 0E00               	movlw	0
  6216  00D8' 0100               	movlb	0	; () banked
  6217  00DA' 6F00'              	movwf	(wait_in_ms@time_in_ms+1)& (0+255),b
  6218  00DC' 0E08               	movlw	8
  6219  00DE' 6F00'              	movwf	wait_in_ms@time_in_ms& (0+255),b
  6220  00E0' EC00' F000'        	call	_wait_in_ms	;wreg free
  6221  00E4' 0012               	return		;funcret
  6222  00E6'                    __end_of_lcd_iniciar:
  6223                           	opt stack 0
  6224                           tblptru	equ	0xFF8
  6225                           tblptrh	equ	0xFF7
  6226                           tblptrl	equ	0xFF6
  6227                           tablat	equ	0xFF5
  6228                           prodh	equ	0xFF4
  6229                           prodl	equ	0xFF3
  6230                           postinc0	equ	0xFEE
  6231                           wreg	equ	0xFE8
  6232                           indf2	equ	0xFDF
  6233                           postinc2	equ	0xFDE
  6234                           postdec2	equ	0xFDD
  6235                           fsr2h	equ	0xFDA
  6236                           fsr2l	equ	0xFD9
  6237                           status	equ	0xFD8
  6238                           
  6239 ;; *************** function _lcd_orden *****************
  6240 ;; Defined at:
  6241 ;;		line 278 in file "lcd.c"
  6242 ;; Parameters:    Size  Location     Type
  6243 ;;  orden           2   27[BANK0 ] unsigned int 
  6244 ;; Auto vars:     Size  Location     Type
  6245 ;;		None
  6246 ;; Return value:  Size  Location     Type
  6247 ;;                  1    wreg      void 
  6248 ;; Registers used:
  6249 ;;		wreg, status,2, status,0, cstack
  6250 ;; Tracked objects:
  6251 ;;		On entry : 0/0
  6252 ;;		On exit  : 0/0
  6253 ;;		Unchanged: 0/0
  6254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6255 ;;      Params:         0       2       0       0       0       0       0       0       0
  6256 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6257 ;;      Temps:          0       5       0       0       0       0       0       0       0
  6258 ;;      Totals:         0       7       0       0       0       0       0       0       0
  6259 ;;Total ram usage:        7 bytes
  6260 ;; Hardware stack levels used:    1
  6261 ;; Hardware stack levels required when called:    5
  6262 ;; This function calls:
  6263 ;;		_lcd_pulso
  6264 ;; This function is called by:
  6265 ;;		_lcd_iniciar
  6266 ;;		_lcd_limpiar
  6267 ;;		_lcd_origen
  6268 ;;		_lcd_ubicarXY
  6269 ;; This function uses a non-reentrant model
  6270 ;;
  6271                           
  6272                           	psect	text24
  6273  0000'                    __ptext24:
  6274                           	opt stack 0
  6275  0000'                    _lcd_orden:
  6276                           	opt stack 23
  6277                           
  6278                           ;lcd.c: 279: PORTDbits.RD1=0;
  6279                           
  6280                           ;incstack = 0
  6281  0000' 9283               	bcf	3971,1,c	;volatile
  6282                           
  6283                           ;lcd.c: 281: PORTD=(((((PORTD>>4&0x0f)|0x0f)&(orden>>4&0x0f))<<4)|(PORTD&0x0f));
  6284  0002' CF83 F01D'         	movff	3971,??_lcd_orden	;volatile
  6285  0006' 0E0F               	movlw	15
  6286  0008' 0100               	movlb	0	; () banked
  6287  000A' 1700'              	andwf	??_lcd_orden& (0+255),f,b
  6288  000C' C01B' F01E'        	movff	lcd_orden@orden,??_lcd_orden+1
  6289  0010' C01C' F01F'        	movff	lcd_orden@orden+1,??_lcd_orden+2
  6290  0014' 0E04               	movlw	4
  6291  0016' 6F00'              	movwf	(??_lcd_orden+3)& (0+255),b
  6292  0018'                    u3545:
  6293  0018' 90D8               	bcf	status,0,c
  6294  001A' 3300'              	rrcf	(??_lcd_orden+2)& (0+255),f,b
  6295  001C' 3300'              	rrcf	(??_lcd_orden+1)& (0+255),f,b
  6296  001E' 2F00'              	decfsz	(??_lcd_orden+3)& (0+255),f,b
  6297  0020' D7FB               	goto	u3545
  6298  0022' 0E0F               	movlw	15
  6299  0024' 1700'              	andwf	(??_lcd_orden+1)& (0+255),f,b
  6300  0026' 3883               	swapf	3971,w,c	;volatile
  6301  0028' 0B0F               	andlw	15
  6302  002A' 0B0F               	andlw	15
  6303  002C' 090F               	iorlw	15
  6304  002E' 1500'              	andwf	(??_lcd_orden+1)& (0+255),w,b
  6305  0030' 6F00'              	movwf	(??_lcd_orden+4)& (0+255),b
  6306  0032' 3900'              	swapf	(??_lcd_orden+4)& (0+255),w,b
  6307  0034' 0BF0               	andlw	240
  6308  0036' 1100'              	iorwf	??_lcd_orden& (0+255),w,b
  6309  0038' 6E83               	movwf	3971,c	;volatile
  6310                           
  6311                           ; BSR set to: 0
  6312                           ;lcd.c: 282: lcd_pulso();
  6313  003A' EC00' F000'        	call	_lcd_pulso	;wreg free
  6314                           
  6315                           ;lcd.c: 283: PORTD=(((((PORTD>>4&0x0f)|0x0f)&(orden&0x0f))<<4)|(PORTD&0x0f));
  6316  003E' CF83 F01D'         	movff	3971,??_lcd_orden	;volatile
  6317  0042' 0E0F               	movlw	15
  6318  0044' 0100               	movlb	0	; () banked
  6319  0046' 1700'              	andwf	??_lcd_orden& (0+255),f,b
  6320  0048' C01B' F01E'        	movff	lcd_orden@orden,??_lcd_orden+1
  6321  004C' 0E0F               	movlw	15
  6322  004E' 1700'              	andwf	(??_lcd_orden+1)& (0+255),f,b
  6323  0050' 3883               	swapf	3971,w,c	;volatile
  6324  0052' 0B0F               	andlw	15
  6325  0054' 0B0F               	andlw	15
  6326  0056' 090F               	iorlw	15
  6327  0058' 1500'              	andwf	(??_lcd_orden+1)& (0+255),w,b
  6328  005A' 6F00'              	movwf	(??_lcd_orden+2)& (0+255),b
  6329  005C' 3900'              	swapf	(??_lcd_orden+2)& (0+255),w,b
  6330  005E' 0BF0               	andlw	240
  6331  0060' 1100'              	iorwf	??_lcd_orden& (0+255),w,b
  6332  0062' 6E83               	movwf	3971,c	;volatile
  6333                           
  6334                           ;lcd.c: 284: lcd_pulso();
  6335  0064' EC00' F000'        	call	_lcd_pulso	;wreg free
  6336  0068' 0012               	return		;funcret
  6337  006A'                    __end_of_lcd_orden:
  6338                           	opt stack 0
  6339                           tblptru	equ	0xFF8
  6340                           tblptrh	equ	0xFF7
  6341                           tblptrl	equ	0xFF6
  6342                           tablat	equ	0xFF5
  6343                           prodh	equ	0xFF4
  6344                           prodl	equ	0xFF3
  6345                           postinc0	equ	0xFEE
  6346                           wreg	equ	0xFE8
  6347                           indf2	equ	0xFDF
  6348                           postinc2	equ	0xFDE
  6349                           postdec2	equ	0xFDD
  6350                           fsr2h	equ	0xFDA
  6351                           fsr2l	equ	0xFD9
  6352                           status	equ	0xFD8
  6353                           
  6354 ;; *************** function _lcd_pulso *****************
  6355 ;; Defined at:
  6356 ;;		line 271 in file "lcd.c"
  6357 ;; Parameters:    Size  Location     Type
  6358 ;;		None
  6359 ;; Auto vars:     Size  Location     Type
  6360 ;;		None
  6361 ;; Return value:  Size  Location     Type
  6362 ;;                  1    wreg      void 
  6363 ;; Registers used:
  6364 ;;		wreg, status,2, status,0, cstack
  6365 ;; Tracked objects:
  6366 ;;		On entry : 0/0
  6367 ;;		On exit  : 0/0
  6368 ;;		Unchanged: 0/0
  6369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6370 ;;      Params:         0       0       0       0       0       0       0       0       0
  6371 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6372 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6373 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6374 ;;Total ram usage:        0 bytes
  6375 ;; Hardware stack levels used:    1
  6376 ;; Hardware stack levels required when called:    4
  6377 ;; This function calls:
  6378 ;;		_wait_in_ms
  6379 ;; This function is called by:
  6380 ;;		_lcd_iniciar
  6381 ;;		_lcd_orden
  6382 ;;		_lcd_caracter
  6383 ;; This function uses a non-reentrant model
  6384 ;;
  6385                           
  6386                           	psect	text25
  6387  0000'                    __ptext25:
  6388                           	opt stack 0
  6389  0000'                    _lcd_pulso:
  6390                           	opt stack 23
  6391                           
  6392                           ;lcd.c: 272: PORTDbits.RD3=1;
  6393                           
  6394                           ;incstack = 0
  6395  0000' 8683               	bsf	3971,3,c	;volatile
  6396                           
  6397                           ;lcd.c: 273: wait_in_ms(2);
  6398  0002' 0E00               	movlw	0
  6399  0004' 0100               	movlb	0	; () banked
  6400  0006' 6F00'              	movwf	(wait_in_ms@time_in_ms+1)& (0+255),b
  6401  0008' 0E02               	movlw	2
  6402  000A' 6F00'              	movwf	wait_in_ms@time_in_ms& (0+255),b
  6403  000C' EC00' F000'        	call	_wait_in_ms	;wreg free
  6404                           
  6405                           ;lcd.c: 274: PORTDbits.RD3=0;
  6406  0010' 9683               	bcf	3971,3,c	;volatile
  6407                           
  6408                           ;lcd.c: 275: wait_in_ms(2);
  6409  0012' 0E00               	movlw	0
  6410  0014' 0100               	movlb	0	; () banked
  6411  0016' 6F00'              	movwf	(wait_in_ms@time_in_ms+1)& (0+255),b
  6412  0018' 0E02               	movlw	2
  6413  001A' 6F00'              	movwf	wait_in_ms@time_in_ms& (0+255),b
  6414  001C' EC00' F000'        	call	_wait_in_ms	;wreg free
  6415  0020' 0012               	return		;funcret
  6416  0022'                    __end_of_lcd_pulso:
  6417                           	opt stack 0
  6418                           tblptru	equ	0xFF8
  6419                           tblptrh	equ	0xFF7
  6420                           tblptrl	equ	0xFF6
  6421                           tablat	equ	0xFF5
  6422                           prodh	equ	0xFF4
  6423                           prodl	equ	0xFF3
  6424                           postinc0	equ	0xFEE
  6425                           wreg	equ	0xFE8
  6426                           indf2	equ	0xFDF
  6427                           postinc2	equ	0xFDE
  6428                           postdec2	equ	0xFDD
  6429                           fsr2h	equ	0xFDA
  6430                           fsr2l	equ	0xFD9
  6431                           status	equ	0xFD8
  6432                           
  6433 ;; *************** function _wait_in_ms *****************
  6434 ;; Defined at:
  6435 ;;		line 93 in file "config.c"
  6436 ;; Parameters:    Size  Location     Type
  6437 ;;  time_in_ms      2   17[BANK0 ] int 
  6438 ;; Auto vars:     Size  Location     Type
  6439 ;;  count_ms        2   25[BANK0 ] unsigned int 
  6440 ;;  count           2   23[BANK0 ] unsigned int 
  6441 ;;  flag            2   21[BANK0 ] unsigned int 
  6442 ;; Return value:  Size  Location     Type
  6443 ;;                  1    wreg      void 
  6444 ;; Registers used:
  6445 ;;		wreg, status,2, status,0, cstack
  6446 ;; Tracked objects:
  6447 ;;		On entry : 0/0
  6448 ;;		On exit  : 0/0
  6449 ;;		Unchanged: 0/0
  6450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6451 ;;      Params:         0       2       0       0       0       0       0       0       0
  6452 ;;      Locals:         0       6       0       0       0       0       0       0       0
  6453 ;;      Temps:          0       2       0       0       0       0       0       0       0
  6454 ;;      Totals:         0      10       0       0       0       0       0       0       0
  6455 ;;Total ram usage:       10 bytes
  6456 ;; Hardware stack levels used:    1
  6457 ;; Hardware stack levels required when called:    3
  6458 ;; This function calls:
  6459 ;;		___awtoft
  6460 ;;		___ftdiv
  6461 ;;		___fttol
  6462 ;; This function is called by:
  6463 ;;		_lcd_iniciar
  6464 ;;		_lcd_pulso
  6465 ;;		_lcd_limpiar
  6466 ;;		_lcd_origen
  6467 ;;		_main
  6468 ;;		_Lcd_Cmd
  6469 ;; This function uses a non-reentrant model
  6470 ;;
  6471                           
  6472                           	psect	text26
  6473  0000'                    __ptext26:
  6474                           	opt stack 0
  6475  0000'                    _wait_in_ms:
  6476                           	opt stack 27
  6477                           
  6478                           ;config.c: 94: unsigned int count = 0;
  6479                           
  6480                           ;incstack = 0
  6481  0000' 0E00               	movlw	0
  6482  0002' 0100               	movlb	0	; () banked
  6483  0004' 6F00'              	movwf	(wait_in_ms@count+1)& (0+255),b
  6484  0006' 0E00               	movlw	0
  6485  0008' 6F00'              	movwf	wait_in_ms@count& (0+255),b
  6486                           
  6487                           ;config.c: 95: unsigned int count_ms = 0;
  6488  000A' 0E00               	movlw	0
  6489  000C' 6F00'              	movwf	(wait_in_ms@count_ms+1)& (0+255),b
  6490  000E' 0E00               	movlw	0
  6491  0010' 6F00'              	movwf	wait_in_ms@count_ms& (0+255),b
  6492                           
  6493                           ;config.c: 96: unsigned int flag = 0;
  6494  0012' 0E00               	movlw	0
  6495  0014' 6F00'              	movwf	(wait_in_ms@flag+1)& (0+255),b
  6496  0016' 0E00               	movlw	0
  6497  0018' 6F00'              	movwf	wait_in_ms@flag& (0+255),b
  6498                           
  6499                           ;config.c: 98: TMR0L = 131;
  6500  001A' 0E83               	movlw	131
  6501  001C' 6ED6               	movwf	4054,c	;volatile
  6502                           
  6503                           ; BSR set to: 0
  6504                           ;config.c: 101: count_ms = ((12000000)*0.001)/((256-TMR0L)*32);
  6505  001E' 50D6               	movf	4054,w,c	;volatile
  6506  0020' 6F00'              	movwf	??_wait_in_ms& (0+255),b
  6507  0022' 6B00'              	clrf	(??_wait_in_ms+1)& (0+255),b
  6508  0024' 1F00'              	comf	??_wait_in_ms& (0+255),f,b
  6509  0026' 1F00'              	comf	(??_wait_in_ms+1)& (0+255),f,b
  6510  0028' 4B00'              	infsnz	??_wait_in_ms& (0+255),f,b
  6511  002A' 2B00'              	incf	(??_wait_in_ms+1)& (0+255),f,b
  6512  002C' 0E05               	movlw	5
  6513  002E'                    u3495:
  6514  002E' 90D8               	bcf	status,0,c
  6515  0030' 3700'              	rlcf	??_wait_in_ms& (0+255),f,b
  6516  0032' 3700'              	rlcf	(??_wait_in_ms+1)& (0+255),f,b
  6517  0034' 2EE8               	decfsz	wreg,f,c
  6518  0036' D7FB               	goto	u3495
  6519  0038' 0E00               	movlw	0
  6520  003A' 2500'              	addwf	??_wait_in_ms& (0+255),w,b
  6521  003C' 6E1A'              	movwf	___awtoft@c,c
  6522  003E' 0E20               	movlw	32
  6523  0040' 2100'              	addwfc	(??_wait_in_ms+1)& (0+255),w,b
  6524  0042' 6E1B'              	movwf	___awtoft@c+1,c
  6525  0044' EC00' F000'        	call	___awtoft	;wreg free
  6526  0048' C01A' F038'        	movff	?___awtoft,___ftdiv@f2
  6527  004C' C01B' F039'        	movff	?___awtoft+1,___ftdiv@f2+1
  6528  0050' C01C' F03A'        	movff	?___awtoft+2,___ftdiv@f2+2
  6529  0054' 0E80               	movlw	128
  6530  0056' 6E35'              	movwf	___ftdiv@f1,c
  6531  0058' 0E3B               	movlw	59
  6532  005A' 6E36'              	movwf	___ftdiv@f1+1,c
  6533  005C' 0E46               	movlw	70
  6534  005E' 6E37'              	movwf	___ftdiv@f1+2,c
  6535  0060' EC00' F000'        	call	___ftdiv	;wreg free
  6536  0064' C035' F03E'        	movff	?___ftdiv,___fttol@f1
  6537  0068' C036' F03F'        	movff	?___ftdiv+1,___fttol@f1+1
  6538  006C' C037' F040'        	movff	?___ftdiv+2,___fttol@f1+2
  6539  0070' EC00' F000'        	call	___fttol	;wreg free
  6540  0074' C03E' F019'        	movff	?___fttol,wait_in_ms@count_ms
  6541  0078' C03F' F01A'        	movff	?___fttol+1,wait_in_ms@count_ms+1
  6542                           
  6543                           ;config.c: 103: TMR0ON = 1;
  6544  007C' 8ED5               	bsf	4053,7,c	;volatile
  6545                           
  6546                           ;config.c: 105: while (count < count_ms){
  6547  007E' D020               	goto	l63
  6548  0080'                    l59:
  6549                           
  6550                           ; BSR set to: 0
  6551                           ;config.c: 106: if(TMR0IF == 1){
  6552  0080' A4F2               	btfss	intcon,2,c	;volatile
  6553  0082' D01E               	goto	l63
  6554                           
  6555                           ; BSR set to: 0
  6556                           ;config.c: 107: TMR0IF = 0;
  6557  0084' 94F2               	bcf	intcon,2,c	;volatile
  6558                           
  6559                           ; BSR set to: 0
  6560                           ;config.c: 108: TMR0L = 131;
  6561  0086' 0E83               	movlw	131
  6562  0088' 6ED6               	movwf	4054,c	;volatile
  6563                           
  6564                           ; BSR set to: 0
  6565                           ;config.c: 109: count ++;
  6566  008A' 4B00'              	infsnz	wait_in_ms@count& (0+255),f,b
  6567  008C' 2B00'              	incf	(wait_in_ms@count+1)& (0+255),f,b
  6568                           
  6569                           ; BSR set to: 0
  6570                           ;config.c: 110: if (count == count_ms){
  6571  008E' 5100'              	movf	wait_in_ms@count_ms& (0+255),w,b
  6572  0090' 1900'              	xorwf	wait_in_ms@count& (0+255),w,b
  6573  0092' E116               	bnz	l3429
  6574  0094' 5100'              	movf	(wait_in_ms@count_ms+1)& (0+255),w,b
  6575  0096' 1900'              	xorwf	(wait_in_ms@count+1)& (0+255),w,b
  6576  0098' A4D8               	btfss	status,2,c
  6577  009A' D012               	goto	l63
  6578                           
  6579                           ; BSR set to: 0
  6580                           ;config.c: 111: flag++;
  6581  009C' 4B00'              	infsnz	wait_in_ms@flag& (0+255),f,b
  6582  009E' 2B00'              	incf	(wait_in_ms@flag+1)& (0+255),f,b
  6583                           
  6584                           ; BSR set to: 0
  6585                           ;config.c: 112: if (flag != time_in_ms){
  6586  00A0' 5100'              	movf	wait_in_ms@flag& (0+255),w,b
  6587  00A2' 1900'              	xorwf	wait_in_ms@time_in_ms& (0+255),w,b
  6588  00A4' E104               	bnz	u3520
  6589  00A6' 5100'              	movf	(wait_in_ms@flag+1)& (0+255),w,b
  6590  00A8' 1900'              	xorwf	(wait_in_ms@time_in_ms+1)& (0+255),w,b
  6591  00AA' B4D8               	btfsc	status,2,c
  6592  00AC' D005               	goto	l62
  6593  00AE'                    u3520:
  6594                           
  6595                           ; BSR set to: 0
  6596                           ;config.c: 113: count = 0;
  6597  00AE' 0E00               	movlw	0
  6598  00B0' 6F00'              	movwf	(wait_in_ms@count+1)& (0+255),b
  6599  00B2' 0E00               	movlw	0
  6600  00B4' 6F00'              	movwf	wait_in_ms@count& (0+255),b
  6601                           
  6602                           ;config.c: 114: }
  6603  00B6' D004               	goto	l63
  6604  00B8'                    l62:
  6605                           
  6606                           ; BSR set to: 0
  6607                           ;config.c: 115: else{
  6608                           ;config.c: 116: count = count_ms;
  6609  00B8' C019' F017'        	movff	wait_in_ms@count_ms,wait_in_ms@count
  6610  00BC' C01A' F018'        	movff	wait_in_ms@count_ms+1,wait_in_ms@count+1
  6611  00C0'                    l63:
  6612  00C0'                    l3429:
  6613  00C0' 0100               	movlb	0	; () banked
  6614  00C2' 5100'              	movf	wait_in_ms@count_ms& (0+255),w,b
  6615  00C4' 5D00'              	subwf	wait_in_ms@count& (0+255),w,b
  6616  00C6' 5100'              	movf	(wait_in_ms@count_ms+1)& (0+255),w,b
  6617  00C8' 5900'              	subwfb	(wait_in_ms@count+1)& (0+255),w,b
  6618  00CA' B0D8               	btfsc	status,0,c
  6619  00CC' 0012               	return	
  6620  00CE' D7D8               	goto	l59
  6621  00D0'                    __end_of_wait_in_ms:
  6622                           	opt stack 0
  6623                           tblptru	equ	0xFF8
  6624                           tblptrh	equ	0xFF7
  6625                           tblptrl	equ	0xFF6
  6626                           tablat	equ	0xFF5
  6627                           prodh	equ	0xFF4
  6628                           prodl	equ	0xFF3
  6629                           intcon	equ	0xFF2
  6630                           postinc0	equ	0xFEE
  6631                           wreg	equ	0xFE8
  6632                           indf2	equ	0xFDF
  6633                           postinc2	equ	0xFDE
  6634                           postdec2	equ	0xFDD
  6635                           fsr2h	equ	0xFDA
  6636                           fsr2l	equ	0xFD9
  6637                           status	equ	0xFD8
  6638                           
  6639 ;; *************** function ___fttol *****************
  6640 ;; Defined at:
  6641 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  6642 ;; Parameters:    Size  Location     Type
  6643 ;;  f1              3   62[COMRAM] float 
  6644 ;; Auto vars:     Size  Location     Type
  6645 ;;  lval            4   12[BANK0 ] unsigned long 
  6646 ;;  exp1            1   16[BANK0 ] unsigned char 
  6647 ;;  sign1           1   11[BANK0 ] unsigned char 
  6648 ;; Return value:  Size  Location     Type
  6649 ;;                  4   62[COMRAM] long 
  6650 ;; Registers used:
  6651 ;;		wreg, status,2, status,0
  6652 ;; Tracked objects:
  6653 ;;		On entry : 0/0
  6654 ;;		On exit  : 0/0
  6655 ;;		Unchanged: 0/0
  6656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6657 ;;      Params:         4       0       0       0       0       0       0       0       0
  6658 ;;      Locals:         0       6       0       0       0       0       0       0       0
  6659 ;;      Temps:          0       5       0       0       0       0       0       0       0
  6660 ;;      Totals:         4      11       0       0       0       0       0       0       0
  6661 ;;Total ram usage:       15 bytes
  6662 ;; Hardware stack levels used:    1
  6663 ;; Hardware stack levels required when called:    1
  6664 ;; This function calls:
  6665 ;;		Nothing
  6666 ;; This function is called by:
  6667 ;;		_wait_in_ms
  6668 ;;		_sprintf
  6669 ;; This function uses a non-reentrant model
  6670 ;;
  6671                           
  6672                           	psect	text27
  6673  0000'                    __ptext27:
  6674                           	opt stack 0
  6675  0000'                    ___fttol:
  6676                           	opt stack 28
  6677                           
  6678                           ; BSR set to: 0
  6679                           ;incstack = 0
  6680  0000' C040' F006'        	movff	___fttol@f1+2,??___fttol
  6681  0004' 0100               	movlb	0	; () banked
  6682  0006' 6B00'              	clrf	(??___fttol+1)& (0+255),b
  6683  0008' 6B00'              	clrf	(??___fttol+2)& (0+255),b
  6684  000A' 343F'              	rlcf	___fttol@f1+1,w,c
  6685  000C' 3700'              	rlcf	??___fttol& (0+255),f,b
  6686  000E' E301               	bnc	u1861
  6687  0010' 8100'              	bsf	(??___fttol+1)& (0+255),0,b
  6688  0012'                    u1861:
  6689  0012' 5100'              	movf	??___fttol& (0+255),w,b
  6690  0014' 6F00'              	movwf	___fttol@exp1& (0+255),b
  6691  0016' 5100'              	movf	___fttol@exp1& (0+255),w,b
  6692  0018' A4D8               	btfss	status,2,c
  6693  001A' D009               	goto	l667
  6694                           
  6695                           ; BSR set to: 0
  6696  001C' 0E00               	movlw	0
  6697  001E' 6E3E'              	movwf	?___fttol,c
  6698  0020' 0E00               	movlw	0
  6699  0022' 6E3F'              	movwf	?___fttol+1,c
  6700  0024' 0E00               	movlw	0
  6701  0026' 6E40'              	movwf	?___fttol+2,c
  6702  0028' 0E00               	movlw	0
  6703  002A' 6E41'              	movwf	?___fttol+3,c
  6704                           
  6705                           ; BSR set to: 0
  6706  002C' 0012               	return	
  6707  002E'                    l667:
  6708                           
  6709                           ; BSR set to: 0
  6710                           
  6711                           ; BSR set to: 0
  6712  002E' 0E17               	movlw	23
  6713  0030' 6F00'              	movwf	??___fttol& (0+255),b
  6714  0032' C03E' F007'        	movff	___fttol@f1,??___fttol+1
  6715  0036' C03F' F008'        	movff	___fttol@f1+1,??___fttol+2
  6716  003A' C040' F009'        	movff	___fttol@f1+2,??___fttol+3
  6717  003E' 2900'              	incf	??___fttol& (0+255),w,b
  6718  0040' 6F00'              	movwf	(??___fttol+4)& (0+255),b
  6719  0042' D004               	goto	u1880
  6720  0044'                    u1885:
  6721  0044' 90D8               	bcf	status,0,c
  6722  0046' 3300'              	rrcf	(??___fttol+3)& (0+255),f,b
  6723  0048' 3300'              	rrcf	(??___fttol+2)& (0+255),f,b
  6724  004A' 3300'              	rrcf	(??___fttol+1)& (0+255),f,b
  6725  004C'                    u1880:
  6726  004C' 2F00'              	decfsz	(??___fttol+4)& (0+255),f,b
  6727  004E' D7FA               	goto	u1885
  6728  0050' 0100               	movlb	0	; () banked
  6729  0052' 5100'              	movf	(??___fttol+1)& (0+255),w,b
  6730  0054' 6F00'              	movwf	___fttol@sign1& (0+255),b
  6731                           
  6732                           ; BSR set to: 0
  6733  0056' 8E3F'              	bsf	___fttol@f1+1,7,c
  6734                           
  6735                           ; BSR set to: 0
  6736  0058' 0EFF               	movlw	255
  6737  005A' 163E'              	andwf	___fttol@f1,f,c
  6738  005C' 0EFF               	movlw	255
  6739  005E' 163F'              	andwf	___fttol@f1+1,f,c
  6740  0060' 0E00               	movlw	0
  6741  0062' 1640'              	andwf	___fttol@f1+2,f,c
  6742                           
  6743                           ; BSR set to: 0
  6744  0064' 503E'              	movf	___fttol@f1,w,c
  6745  0066' 6F00'              	movwf	___fttol@lval& (0+255),b
  6746  0068' 503F'              	movf	___fttol@f1+1,w,c
  6747  006A' 6F00'              	movwf	(___fttol@lval+1)& (0+255),b
  6748  006C' 5040'              	movf	___fttol@f1+2,w,c
  6749  006E' 6F00'              	movwf	(___fttol@lval+2)& (0+255),b
  6750  0070' 6B00'              	clrf	(___fttol@lval+3)& (0+255),b
  6751                           
  6752                           ; BSR set to: 0
  6753  0072' 0E8E               	movlw	142
  6754  0074' 5F00'              	subwf	___fttol@exp1& (0+255),f,b
  6755                           
  6756                           ; BSR set to: 0
  6757  0076' AF00'              	btfss	___fttol@exp1& (0+255),7,b
  6758  0078' D016               	goto	l669
  6759                           
  6760                           ; BSR set to: 0
  6761  007A' 5100'              	movf	___fttol@exp1& (0+255),w,b
  6762  007C' 0A80               	xorlw	128
  6763  007E' 0F8F               	addlw	143
  6764  0080' B0D8               	btfsc	status,0,c
  6765  0082' D009               	goto	l670
  6766                           
  6767                           ; BSR set to: 0
  6768  0084' 0E00               	movlw	0
  6769  0086' 6E3E'              	movwf	?___fttol,c
  6770  0088' 0E00               	movlw	0
  6771  008A' 6E3F'              	movwf	?___fttol+1,c
  6772  008C' 0E00               	movlw	0
  6773  008E' 6E40'              	movwf	?___fttol+2,c
  6774  0090' 0E00               	movlw	0
  6775  0092' 6E41'              	movwf	?___fttol+3,c
  6776                           
  6777                           ; BSR set to: 0
  6778  0094' 0012               	return	
  6779  0096'                    l670:
  6780                           
  6781                           ; BSR set to: 0
  6782                           
  6783                           ; BSR set to: 0
  6784                           
  6785                           ; BSR set to: 0
  6786  0096' 90D8               	bcf	status,0,c
  6787  0098' 3300'              	rrcf	(___fttol@lval+3)& (0+255),f,b
  6788  009A' 3300'              	rrcf	(___fttol@lval+2)& (0+255),f,b
  6789  009C' 3300'              	rrcf	(___fttol@lval+1)& (0+255),f,b
  6790  009E' 3300'              	rrcf	___fttol@lval& (0+255),f,b
  6791                           
  6792                           ; BSR set to: 0
  6793  00A0' 3F00'              	incfsz	___fttol@exp1& (0+255),f,b
  6794  00A2' D7F9               	goto	l670
  6795                           
  6796                           ; BSR set to: 0
  6797  00A4' D015               	goto	u1920
  6798  00A6'                    l669:
  6799                           
  6800                           ; BSR set to: 0
  6801                           
  6802                           ; BSR set to: 0
  6803  00A6' 0E17               	movlw	23
  6804  00A8' 6500'              	cpfsgt	___fttol@exp1& (0+255),b
  6805  00AA' D00F               	goto	l675
  6806                           
  6807                           ; BSR set to: 0
  6808  00AC' 0E00               	movlw	0
  6809  00AE' 6E3E'              	movwf	?___fttol,c
  6810  00B0' 0E00               	movlw	0
  6811  00B2' 6E3F'              	movwf	?___fttol+1,c
  6812  00B4' 0E00               	movlw	0
  6813  00B6' 6E40'              	movwf	?___fttol+2,c
  6814  00B8' 0E00               	movlw	0
  6815  00BA' 6E41'              	movwf	?___fttol+3,c
  6816                           
  6817                           ; BSR set to: 0
  6818  00BC' 0012               	return	
  6819  00BE'                    
  6820                           ; BSR set to: 0
  6821                           
  6822                           ; BSR set to: 0
  6823  00BE' 90D8               	bcf	status,0,c
  6824  00C0' 3700'              	rlcf	___fttol@lval& (0+255),f,b
  6825  00C2' 3700'              	rlcf	(___fttol@lval+1)& (0+255),f,b
  6826  00C4' 3700'              	rlcf	(___fttol@lval+2)& (0+255),f,b
  6827  00C6' 3700'              	rlcf	(___fttol@lval+3)& (0+255),f,b
  6828  00C8' 0700'              	decf	___fttol@exp1& (0+255),f,b
  6829  00CA'                    l675:
  6830                           
  6831                           ; BSR set to: 0
  6832                           
  6833                           ; BSR set to: 0
  6834  00CA' 5100'              	movf	___fttol@exp1& (0+255),w,b
  6835  00CC' A4D8               	btfss	status,2,c
  6836  00CE' D7F7               	goto	l676
  6837  00D0'                    u1920:
  6838                           
  6839                           ; BSR set to: 0
  6840                           
  6841                           ; BSR set to: 0
  6842                           
  6843                           ; BSR set to: 0
  6844  00D0' 5100'              	movf	___fttol@sign1& (0+255),w,b
  6845  00D2' B4D8               	btfsc	status,2,c
  6846  00D4' D008               	goto	l678
  6847                           
  6848                           ; BSR set to: 0
  6849  00D6' 1F00'              	comf	(___fttol@lval+3)& (0+255),f,b
  6850  00D8' 1F00'              	comf	(___fttol@lval+2)& (0+255),f,b
  6851  00DA' 1F00'              	comf	(___fttol@lval+1)& (0+255),f,b
  6852  00DC' 6D00'              	negf	___fttol@lval& (0+255),b
  6853  00DE' 0E00               	movlw	0
  6854  00E0' 2300'              	addwfc	(___fttol@lval+1)& (0+255),f,b
  6855  00E2' 2300'              	addwfc	(___fttol@lval+2)& (0+255),f,b
  6856  00E4' 2300'              	addwfc	(___fttol@lval+3)& (0+255),f,b
  6857  00E6'                    l678:
  6858                           
  6859                           ; BSR set to: 0
  6860                           
  6861                           ; BSR set to: 0
  6862  00E6' C00C' F03E'        	movff	___fttol@lval,?___fttol
  6863  00EA' C00D' F03F'        	movff	___fttol@lval+1,?___fttol+1
  6864  00EE' C00E' F040'        	movff	___fttol@lval+2,?___fttol+2
  6865  00F2' C00F' F041'        	movff	___fttol@lval+3,?___fttol+3
  6866  00F6' 0012               	return	
  6867  00F8'                    __end_of___fttol:
  6868                           	opt stack 0
  6869                           tblptru	equ	0xFF8
  6870                           tblptrh	equ	0xFF7
  6871                           tblptrl	equ	0xFF6
  6872                           tablat	equ	0xFF5
  6873                           prodh	equ	0xFF4
  6874                           prodl	equ	0xFF3
  6875                           intcon	equ	0xFF2
  6876                           postinc0	equ	0xFEE
  6877                           wreg	equ	0xFE8
  6878                           indf2	equ	0xFDF
  6879                           postinc2	equ	0xFDE
  6880                           postdec2	equ	0xFDD
  6881                           fsr2h	equ	0xFDA
  6882                           fsr2l	equ	0xFD9
  6883                           status	equ	0xFD8
  6884                           
  6885 ;; *************** function ___ftdiv *****************
  6886 ;; Defined at:
  6887 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  6888 ;; Parameters:    Size  Location     Type
  6889 ;;  f1              3   53[COMRAM] float 
  6890 ;;  f2              3   56[COMRAM] float 
  6891 ;; Auto vars:     Size  Location     Type
  6892 ;;  f3              3    1[BANK0 ] float 
  6893 ;;  sign            1    5[BANK0 ] unsigned char 
  6894 ;;  exp             1    4[BANK0 ] unsigned char 
  6895 ;;  cntr            1    0[BANK0 ] unsigned char 
  6896 ;; Return value:  Size  Location     Type
  6897 ;;                  3   53[COMRAM] float 
  6898 ;; Registers used:
  6899 ;;		wreg, status,2, status,0, cstack
  6900 ;; Tracked objects:
  6901 ;;		On entry : 0/0
  6902 ;;		On exit  : 0/0
  6903 ;;		Unchanged: 0/0
  6904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6905 ;;      Params:         6       0       0       0       0       0       0       0       0
  6906 ;;      Locals:         0       6       0       0       0       0       0       0       0
  6907 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6908 ;;      Totals:         9       6       0       0       0       0       0       0       0
  6909 ;;Total ram usage:       15 bytes
  6910 ;; Hardware stack levels used:    1
  6911 ;; Hardware stack levels required when called:    2
  6912 ;; This function calls:
  6913 ;;		___ftpack
  6914 ;; This function is called by:
  6915 ;;		_wait_in_ms
  6916 ;;		_main
  6917 ;; This function uses a non-reentrant model
  6918 ;;
  6919                           
  6920                           	psect	text28
  6921  0000'                    __ptext28:
  6922                           	opt stack 0
  6923  0000'                    ___ftdiv:
  6924                           	opt stack 27
  6925                           
  6926                           ; BSR set to: 0
  6927                           ;incstack = 0
  6928  0000' C037' F03B'        	movff	___ftdiv@f1+2,??___ftdiv
  6929  0004' 6A00'              	clrf	(??___ftdiv+1)& (0+255),c
  6930  0006' 6A00'              	clrf	(??___ftdiv+2)& (0+255),c
  6931  0008' 3436'              	rlcf	___ftdiv@f1+1,w,c
  6932  000A' 3600'              	rlcf	??___ftdiv& (0+255),f,c
  6933  000C' E301               	bnc	u3431
  6934  000E' 8000'              	bsf	(??___ftdiv+1)& (0+255),0,c
  6935  0010'                    u3431:
  6936  0010' 503B'              	movf	??___ftdiv,w,c
  6937  0012' 0100               	movlb	0	; () banked
  6938  0014' 6F00'              	movwf	___ftdiv@exp& (0+255),b
  6939  0016' 5100'              	movf	___ftdiv@exp& (0+255),w,b
  6940  0018' A4D8               	btfss	status,2,c
  6941  001A' D007               	goto	l614
  6942                           
  6943                           ; BSR set to: 0
  6944  001C' 0E00               	movlw	0
  6945  001E' 6E35'              	movwf	?___ftdiv,c
  6946  0020' 0E00               	movlw	0
  6947  0022' 6E36'              	movwf	?___ftdiv+1,c
  6948  0024' 0E00               	movlw	0
  6949  0026' 6E37'              	movwf	?___ftdiv+2,c
  6950                           
  6951                           ; BSR set to: 0
  6952  0028' 0012               	return	
  6953  002A'                    l614:
  6954                           
  6955                           ; BSR set to: 0
  6956                           
  6957                           ; BSR set to: 0
  6958  002A' C03A' F03B'        	movff	___ftdiv@f2+2,??___ftdiv
  6959  002E' 6A00'              	clrf	(??___ftdiv+1)& (0+255),c
  6960  0030' 6A00'              	clrf	(??___ftdiv+2)& (0+255),c
  6961  0032' 3439'              	rlcf	___ftdiv@f2+1,w,c
  6962  0034' 3600'              	rlcf	??___ftdiv& (0+255),f,c
  6963  0036' E301               	bnc	u3451
  6964  0038' 8000'              	bsf	(??___ftdiv+1)& (0+255),0,c
  6965  003A'                    u3451:
  6966  003A' 503B'              	movf	??___ftdiv,w,c
  6967  003C' 6F00'              	movwf	___ftdiv@sign& (0+255),b
  6968  003E' 5100'              	movf	___ftdiv@sign& (0+255),w,b
  6969  0040' A4D8               	btfss	status,2,c
  6970  0042' D007               	goto	l616
  6971                           
  6972                           ; BSR set to: 0
  6973  0044' 0E00               	movlw	0
  6974  0046' 6E35'              	movwf	?___ftdiv,c
  6975  0048' 0E00               	movlw	0
  6976  004A' 6E36'              	movwf	?___ftdiv+1,c
  6977  004C' 0E00               	movlw	0
  6978  004E' 6E37'              	movwf	?___ftdiv+2,c
  6979                           
  6980                           ; BSR set to: 0
  6981  0050' 0012               	return	
  6982  0052'                    l616:
  6983                           
  6984                           ; BSR set to: 0
  6985                           
  6986                           ; BSR set to: 0
  6987  0052' 0E00               	movlw	0
  6988  0054' 6F00'              	movwf	___ftdiv@f3& (0+255),b
  6989  0056' 0E00               	movlw	0
  6990  0058' 6F00'              	movwf	(___ftdiv@f3+1)& (0+255),b
  6991  005A' 0E00               	movlw	0
  6992  005C' 6F00'              	movwf	(___ftdiv@f3+2)& (0+255),b
  6993                           
  6994                           ; BSR set to: 0
  6995  005E' 5100'              	movf	___ftdiv@sign& (0+255),w,b
  6996  0060' 0F89               	addlw	137
  6997  0062' 5F00'              	subwf	___ftdiv@exp& (0+255),f,b
  6998                           
  6999                           ; BSR set to: 0
  7000  0064' C037' F005'        	movff	___ftdiv@f1+2,___ftdiv@sign
  7001                           
  7002                           ; BSR set to: 0
  7003  0068' 503A'              	movf	___ftdiv@f2+2,w,c
  7004  006A' 1B00'              	xorwf	___ftdiv@sign& (0+255),f,b
  7005                           
  7006                           ; BSR set to: 0
  7007  006C' 0E80               	movlw	128
  7008  006E' 1700'              	andwf	___ftdiv@sign& (0+255),f,b
  7009                           
  7010                           ; BSR set to: 0
  7011  0070' 8E36'              	bsf	___ftdiv@f1+1,7,c
  7012                           
  7013                           ; BSR set to: 0
  7014  0072' 0EFF               	movlw	255
  7015  0074' 1635'              	andwf	___ftdiv@f1,f,c
  7016  0076' 0EFF               	movlw	255
  7017  0078' 1636'              	andwf	___ftdiv@f1+1,f,c
  7018  007A' 0E00               	movlw	0
  7019  007C' 1637'              	andwf	___ftdiv@f1+2,f,c
  7020                           
  7021                           ; BSR set to: 0
  7022  007E' 8E39'              	bsf	___ftdiv@f2+1,7,c
  7023                           
  7024                           ; BSR set to: 0
  7025  0080' 0EFF               	movlw	255
  7026  0082' 1638'              	andwf	___ftdiv@f2,f,c
  7027  0084' 0EFF               	movlw	255
  7028  0086' 1639'              	andwf	___ftdiv@f2+1,f,c
  7029  0088' 0E00               	movlw	0
  7030  008A' 163A'              	andwf	___ftdiv@f2+2,f,c
  7031                           
  7032                           ; BSR set to: 0
  7033  008C' 0E18               	movlw	24
  7034  008E' 6F00'              	movwf	___ftdiv@cntr& (0+255),b
  7035  0090'                    
  7036                           ; BSR set to: 0
  7037                           
  7038                           ; BSR set to: 0
  7039  0090' 90D8               	bcf	status,0,c
  7040  0092' 3700'              	rlcf	___ftdiv@f3& (0+255),f,b
  7041  0094' 3700'              	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  7042  0096' 3700'              	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  7043                           
  7044                           ; BSR set to: 0
  7045  0098' 5038'              	movf	___ftdiv@f2,w,c
  7046  009A' 5C35'              	subwf	___ftdiv@f1,w,c
  7047  009C' 5039'              	movf	___ftdiv@f2+1,w,c
  7048  009E' 5836'              	subwfb	___ftdiv@f1+1,w,c
  7049  00A0' 503A'              	movf	___ftdiv@f2+2,w,c
  7050  00A2' 5837'              	subwfb	___ftdiv@f1+2,w,c
  7051  00A4' A0D8               	btfss	status,0,c
  7052  00A6' D007               	goto	l618
  7053                           
  7054                           ; BSR set to: 0
  7055  00A8' 5038'              	movf	___ftdiv@f2,w,c
  7056  00AA' 5E35'              	subwf	___ftdiv@f1,f,c
  7057  00AC' 5039'              	movf	___ftdiv@f2+1,w,c
  7058  00AE' 5A36'              	subwfb	___ftdiv@f1+1,f,c
  7059  00B0' 503A'              	movf	___ftdiv@f2+2,w,c
  7060  00B2' 5A37'              	subwfb	___ftdiv@f1+2,f,c
  7061                           
  7062                           ; BSR set to: 0
  7063  00B4' 8100'              	bsf	___ftdiv@f3& (0+255),0,b
  7064  00B6'                    l618:
  7065                           
  7066                           ; BSR set to: 0
  7067  00B6' 90D8               	bcf	status,0,c
  7068  00B8' 3635'              	rlcf	___ftdiv@f1,f,c
  7069  00BA' 3636'              	rlcf	___ftdiv@f1+1,f,c
  7070  00BC' 3637'              	rlcf	___ftdiv@f1+2,f,c
  7071                           
  7072                           ; BSR set to: 0
  7073  00BE' 2F00'              	decfsz	___ftdiv@cntr& (0+255),f,b
  7074  00C0' D7E7               	goto	l617
  7075                           
  7076                           ; BSR set to: 0
  7077                           
  7078                           ; BSR set to: 0
  7079  00C2' C001' F012'        	movff	___ftdiv@f3,___ftpack@arg
  7080  00C6' C002' F013'        	movff	___ftdiv@f3+1,___ftpack@arg+1
  7081  00CA' C003' F014'        	movff	___ftdiv@f3+2,___ftpack@arg+2
  7082  00CE' C004' F015'        	movff	___ftdiv@exp,___ftpack@exp
  7083  00D2' C005' F016'        	movff	___ftdiv@sign,___ftpack@sign
  7084  00D6' EC00' F000'        	call	___ftpack	;wreg free
  7085  00DA' C012' F035'        	movff	?___ftpack,?___ftdiv
  7086  00DE' C013' F036'        	movff	?___ftpack+1,?___ftdiv+1
  7087  00E2' C014' F037'        	movff	?___ftpack+2,?___ftdiv+2
  7088  00E6' 0012               	return	
  7089  00E8'                    __end_of___ftdiv:
  7090                           	opt stack 0
  7091                           tblptru	equ	0xFF8
  7092                           tblptrh	equ	0xFF7
  7093                           tblptrl	equ	0xFF6
  7094                           tablat	equ	0xFF5
  7095                           prodh	equ	0xFF4
  7096                           prodl	equ	0xFF3
  7097                           intcon	equ	0xFF2
  7098                           postinc0	equ	0xFEE
  7099                           wreg	equ	0xFE8
  7100                           indf2	equ	0xFDF
  7101                           postinc2	equ	0xFDE
  7102                           postdec2	equ	0xFDD
  7103                           fsr2h	equ	0xFDA
  7104                           fsr2l	equ	0xFD9
  7105                           status	equ	0xFD8
  7106                           
  7107 ;; *************** function ___awtoft *****************
  7108 ;; Defined at:
  7109 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
  7110 ;; Parameters:    Size  Location     Type
  7111 ;;  c               2   26[COMRAM] int 
  7112 ;; Auto vars:     Size  Location     Type
  7113 ;;  sign            1   29[COMRAM] unsigned char 
  7114 ;; Return value:  Size  Location     Type
  7115 ;;                  3   26[COMRAM] float 
  7116 ;; Registers used:
  7117 ;;		wreg, status,2, status,0, cstack
  7118 ;; Tracked objects:
  7119 ;;		On entry : 0/0
  7120 ;;		On exit  : 0/0
  7121 ;;		Unchanged: 0/0
  7122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7123 ;;      Params:         3       0       0       0       0       0       0       0       0
  7124 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7125 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7126 ;;      Totals:         4       0       0       0       0       0       0       0       0
  7127 ;;Total ram usage:        4 bytes
  7128 ;; Hardware stack levels used:    1
  7129 ;; Hardware stack levels required when called:    2
  7130 ;; This function calls:
  7131 ;;		___ftpack
  7132 ;; This function is called by:
  7133 ;;		_wait_in_ms
  7134 ;; This function uses a non-reentrant model
  7135 ;;
  7136                           
  7137                           	psect	text29
  7138  0000'                    __ptext29:
  7139                           	opt stack 0
  7140  0000'                    ___awtoft:
  7141                           	opt stack 27
  7142                           
  7143                           ;incstack = 0
  7144  0000' 0E00               	movlw	0
  7145  0002' 6E1D'              	movwf	___awtoft@sign,c
  7146  0004' AE1B'              	btfss	___awtoft@c+1,7,c
  7147  0006' D006               	goto	l514
  7148  0008' 6C1A'              	negf	___awtoft@c,c
  7149  000A' 1E1B'              	comf	___awtoft@c+1,f,c
  7150  000C' B0D8               	btfsc	status,0,c
  7151  000E' 2A1B'              	incf	___awtoft@c+1,f,c
  7152  0010' 0E01               	movlw	1
  7153  0012' 6E1D'              	movwf	___awtoft@sign,c
  7154  0014'                    l514:
  7155  0014' C01A' F012'        	movff	___awtoft@c,___ftpack@arg
  7156  0018' C01B' F013'        	movff	___awtoft@c+1,___ftpack@arg+1
  7157  001C' 6A14'              	clrf	___ftpack@arg+2,c
  7158  001E' 0E8E               	movlw	142
  7159  0020' 6E15'              	movwf	___ftpack@exp,c
  7160  0022' C01D' F016'        	movff	___awtoft@sign,___ftpack@sign
  7161  0026' EC00' F000'        	call	___ftpack	;wreg free
  7162  002A' C012' F01A'        	movff	?___ftpack,?___awtoft
  7163  002E' C013' F01B'        	movff	?___ftpack+1,?___awtoft+1
  7164  0032' C014' F01C'        	movff	?___ftpack+2,?___awtoft+2
  7165  0036' 0012               	return	
  7166  0038'                    __end_of___awtoft:
  7167                           	opt stack 0
  7168                           tblptru	equ	0xFF8
  7169                           tblptrh	equ	0xFF7
  7170                           tblptrl	equ	0xFF6
  7171                           tablat	equ	0xFF5
  7172                           prodh	equ	0xFF4
  7173                           prodl	equ	0xFF3
  7174                           intcon	equ	0xFF2
  7175                           postinc0	equ	0xFEE
  7176                           wreg	equ	0xFE8
  7177                           indf2	equ	0xFDF
  7178                           postinc2	equ	0xFDE
  7179                           postdec2	equ	0xFDD
  7180                           fsr2h	equ	0xFDA
  7181                           fsr2l	equ	0xFD9
  7182                           status	equ	0xFD8
  7183                           
  7184 ;; *************** function _configBoard *****************
  7185 ;; Defined at:
  7186 ;;		line 11 in file "config.c"
  7187 ;; Parameters:    Size  Location     Type
  7188 ;;		None
  7189 ;; Auto vars:     Size  Location     Type
  7190 ;;		None
  7191 ;; Return value:  Size  Location     Type
  7192 ;;                  1    wreg      void 
  7193 ;; Registers used:
  7194 ;;		wreg, status,2
  7195 ;; Tracked objects:
  7196 ;;		On entry : 0/0
  7197 ;;		On exit  : 0/0
  7198 ;;		Unchanged: 0/0
  7199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7200 ;;      Params:         0       0       0       0       0       0       0       0       0
  7201 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7202 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7203 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7204 ;;Total ram usage:        0 bytes
  7205 ;; Hardware stack levels used:    1
  7206 ;; Hardware stack levels required when called:    1
  7207 ;; This function calls:
  7208 ;;		Nothing
  7209 ;; This function is called by:
  7210 ;;		_main
  7211 ;; This function uses a non-reentrant model
  7212 ;;
  7213                           
  7214                           	psect	text30
  7215  0000'                    __ptext30:
  7216                           	opt stack 0
  7217  0000'                    _configBoard:
  7218                           	opt stack 29
  7219                           
  7220                           ;config.c: 12: ADCON0bits.ADON = 0;
  7221                           
  7222                           ;incstack = 0
  7223  0000' 90C2               	bcf	4034,0,c	;volatile
  7224                           
  7225                           ;config.c: 15: ADCON1bits.VCFG = 0b11;
  7226  0002' 0E30               	movlw	48
  7227  0004' 12C1               	iorwf	4033,f,c	;volatile
  7228                           
  7229                           ;config.c: 16: ADCON1bits.PCFG = 0b0111;
  7230  0006' 50C1               	movf	4033,w,c	;volatile
  7231  0008' 0BF0               	andlw	-16
  7232  000A' 0907               	iorlw	7
  7233  000C' 6EC1               	movwf	4033,c	;volatile
  7234                           
  7235                           ;config.c: 18: ADCON2bits.ADFM = 1;
  7236  000E' 8EC0               	bsf	4032,7,c	;volatile
  7237                           
  7238                           ;config.c: 19: ADCON2bits.ADCS = 0b110;
  7239  0010' 50C0               	movf	4032,w,c	;volatile
  7240  0012' 0BF8               	andlw	-8
  7241  0014' 0906               	iorlw	6
  7242  0016' 6EC0               	movwf	4032,c	;volatile
  7243                           
  7244                           ;config.c: 20: ADCON2bits.ACQT = 0b101;
  7245  0018' 50C0               	movf	4032,w,c	;volatile
  7246  001A' 0BC7               	andlw	-57
  7247  001C' 0928               	iorlw	40
  7248  001E' 6EC0               	movwf	4032,c	;volatile
  7249                           
  7250                           ;config.c: 26: TRISA = 1;
  7251  0020' 0E01               	movlw	1
  7252  0022' 6E92               	movwf	3986,c	;volatile
  7253                           
  7254                           ;config.c: 27: TRISB = 0;
  7255  0024' 0E00               	movlw	0
  7256  0026' 6E93               	movwf	3987,c	;volatile
  7257                           
  7258                           ;config.c: 28: TRISC = 0;
  7259  0028' 0E00               	movlw	0
  7260  002A' 6E94               	movwf	3988,c	;volatile
  7261                           
  7262                           ;config.c: 29: TRISD = 0;
  7263  002C' 0E00               	movlw	0
  7264  002E' 6E95               	movwf	3989,c	;volatile
  7265                           
  7266                           ;config.c: 30: TRISE = 0;
  7267  0030' 0E00               	movlw	0
  7268  0032' 6E96               	movwf	3990,c	;volatile
  7269                           
  7270                           ;config.c: 32: PORTA = 0;
  7271  0034' 0E00               	movlw	0
  7272  0036' 6E80               	movwf	3968,c	;volatile
  7273                           
  7274                           ;config.c: 33: PORTB = 0;
  7275  0038' 0E00               	movlw	0
  7276  003A' 6E81               	movwf	3969,c	;volatile
  7277                           
  7278                           ;config.c: 34: PORTC = 0;
  7279  003C' 0E00               	movlw	0
  7280  003E' 6E82               	movwf	3970,c	;volatile
  7281                           
  7282                           ;config.c: 35: PORTD = 0;
  7283  0040' 0E00               	movlw	0
  7284  0042' 6E83               	movwf	3971,c	;volatile
  7285                           
  7286                           ;config.c: 36: PORTE = 0;
  7287  0044' 0E00               	movlw	0
  7288  0046' 6E84               	movwf	3972,c	;volatile
  7289                           
  7290                           ;config.c: 38: TRISBbits.TRISB5 = 0;
  7291  0048' 9A93               	bcf	3987,5,c	;volatile
  7292                           
  7293                           ;config.c: 39: TRISBbits.TRISB4 = 0;
  7294  004A' 9893               	bcf	3987,4,c	;volatile
  7295                           
  7296                           ;config.c: 40: TRISAbits.TRISA4 = 1;
  7297  004C' 8892               	bsf	3986,4,c	;volatile
  7298                           
  7299                           ;config.c: 43: IPEN = 0;
  7300  004E' 9ED0               	bcf	4048,7,c	;volatile
  7301                           
  7302                           ;config.c: 44: INTCONbits.GIE = 0;
  7303  0050' 9EF2               	bcf	intcon,7,c	;volatile
  7304                           
  7305                           ;config.c: 45: INTCONbits.PEIE = 1;
  7306  0052' 8CF2               	bsf	intcon,6,c	;volatile
  7307                           
  7308                           ;config.c: 46: INTCONbits.INT0IE = 1;
  7309  0054' 88F2               	bsf	intcon,4,c	;volatile
  7310                           
  7311                           ;config.c: 47: INTCONbits.TMR0IE = 1;
  7312  0056' 8AF2               	bsf	intcon,5,c	;volatile
  7313                           
  7314                           ;config.c: 49: INTCON2bits.INTEDG0 = 1;
  7315  0058' 8CF1               	bsf	intcon2,6,c	;volatile
  7316                           
  7317                           ;config.c: 50: INTCON2bits.INTEDG1 = 1;
  7318  005A' 8AF1               	bsf	intcon2,5,c	;volatile
  7319                           
  7320                           ;config.c: 51: INTCON2bits.INTEDG2 = 1;
  7321  005C' 88F1               	bsf	intcon2,4,c	;volatile
  7322                           
  7323                           ;config.c: 53: INTCON3bits.INT1IP = 0;
  7324  005E' 9CF0               	bcf	intcon3,6,c	;volatile
  7325                           
  7326                           ;config.c: 54: INTCON3bits.INT2IP = 0;
  7327  0060' 9EF0               	bcf	intcon3,7,c	;volatile
  7328                           
  7329                           ;config.c: 55: INTCON3bits.INT1IE = 1;
  7330  0062' 86F0               	bsf	intcon3,3,c	;volatile
  7331                           
  7332                           ;config.c: 56: INTCON3bits.INT2IE = 1;
  7333  0064' 88F0               	bsf	intcon3,4,c	;volatile
  7334                           
  7335                           ;config.c: 58: PIE1bits.ADIE = 0;
  7336  0066' 9C9D               	bcf	3997,6,c	;volatile
  7337                           
  7338                           ;config.c: 59: PIR1bits.ADIF = 0;
  7339  0068' 9C9E               	bcf	3998,6,c	;volatile
  7340                           
  7341                           ;config.c: 64: T0CONbits.TMR0ON = 1;
  7342  006A' 8ED5               	bsf	4053,7,c	;volatile
  7343                           
  7344                           ;config.c: 65: T08BIT = 1;
  7345  006C' 8CD5               	bsf	4053,6,c	;volatile
  7346                           
  7347                           ;config.c: 66: T0CONbits.T0CS = 0;
  7348  006E' 9AD5               	bcf	4053,5,c	;volatile
  7349                           
  7350                           ;config.c: 68: T0CONbits.PSA = 0;
  7351  0070' 96D5               	bcf	4053,3,c	;volatile
  7352                           
  7353                           ;config.c: 69: T0CONbits.T0PS = 100;
  7354  0072' 50D5               	movf	4053,w,c	;volatile
  7355  0074' 0BF8               	andlw	-8
  7356  0076' 0904               	iorlw	4
  7357  0078' 6ED5               	movwf	4053,c	;volatile
  7358                           
  7359                           ;config.c: 70: INTCONbits.TMR0IF = 0;
  7360  007A' 94F2               	bcf	intcon,2,c	;volatile
  7361                           
  7362                           ;config.c: 74: ADCON1bits.PCFG=0b1110;
  7363  007C' 50C1               	movf	4033,w,c	;volatile
  7364  007E' 0BF0               	andlw	-16
  7365  0080' 090E               	iorlw	14
  7366  0082' 6EC1               	movwf	4033,c	;volatile
  7367                           
  7368                           ;config.c: 75: TRISAbits.RA0=1;
  7369  0084' 8092               	bsf	3986,0,c	;volatile
  7370                           
  7371                           ;config.c: 76: ADCON2bits.ADCS=0b110;
  7372  0086' 50C0               	movf	4032,w,c	;volatile
  7373  0088' 0BF8               	andlw	-8
  7374  008A' 0906               	iorlw	6
  7375  008C' 6EC0               	movwf	4032,c	;volatile
  7376                           
  7377                           ;config.c: 77: ADCON1bits.VCFG1=0;
  7378  008E' 9AC1               	bcf	4033,5,c	;volatile
  7379                           
  7380                           ;config.c: 78: ADCON1bits.VCFG0=0;
  7381  0090' 98C1               	bcf	4033,4,c	;volatile
  7382                           
  7383                           ;config.c: 80: ADCON2bits.ADFM=1;
  7384  0092' 8EC0               	bsf	4032,7,c	;volatile
  7385                           
  7386                           ;config.c: 81: ADCON1bits.PCFG=0b1011;
  7387  0094' 50C1               	movf	4033,w,c	;volatile
  7388  0096' 0BF0               	andlw	-16
  7389  0098' 090B               	iorlw	11
  7390  009A' 6EC1               	movwf	4033,c	;volatile
  7391                           
  7392                           ;config.c: 82: TRISAbits.RA0=1;
  7393  009C' 8092               	bsf	3986,0,c	;volatile
  7394                           
  7395                           ;config.c: 83: TRISAbits.RA1=1;
  7396  009E' 8292               	bsf	3986,1,c	;volatile
  7397                           
  7398                           ;config.c: 84: ADCON0bits.ADON=1;
  7399  00A0' 80C2               	bsf	4034,0,c	;volatile
  7400                           
  7401                           ;config.c: 86: PIE1bits.ADIE=1;
  7402  00A2' 8C9D               	bsf	3997,6,c	;volatile
  7403                           
  7404                           ;config.c: 87: PIR1bits.ADIF=0;
  7405  00A4' 9C9E               	bcf	3998,6,c	;volatile
  7406                           
  7407                           ;config.c: 89: ADCON2bits.ACQT=0b111;
  7408  00A6' 86C0               	bsf	4032,3,c	;volatile
  7409  00A8' 88C0               	bsf	4032,4,c	;volatile
  7410  00AA' 8AC0               	bsf	4032,5,c	;volatile
  7411                           
  7412                           ;config.c: 90: ADCON0bits.GO=1;
  7413  00AC' 82C2               	bsf	4034,1,c	;volatile
  7414  00AE' 0012               	return		;funcret
  7415  00B0'                    __end_of_configBoard:
  7416                           	opt stack 0
  7417                           tblptru	equ	0xFF8
  7418                           tblptrh	equ	0xFF7
  7419                           tblptrl	equ	0xFF6
  7420                           tablat	equ	0xFF5
  7421                           prodh	equ	0xFF4
  7422                           prodl	equ	0xFF3
  7423                           intcon	equ	0xFF2
  7424                           intcon2	equ	0xFF1
  7425                           intcon3	equ	0xFF0
  7426                           postinc0	equ	0xFEE
  7427                           wreg	equ	0xFE8
  7428                           indf2	equ	0xFDF
  7429                           postinc2	equ	0xFDE
  7430                           postdec2	equ	0xFDD
  7431                           fsr2h	equ	0xFDA
  7432                           fsr2l	equ	0xFD9
  7433                           status	equ	0xFD8
  7434                           
  7435 ;; *************** function ___lwtoft *****************
  7436 ;; Defined at:
  7437 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
  7438 ;; Parameters:    Size  Location     Type
  7439 ;;  c               2   26[COMRAM] unsigned int 
  7440 ;; Auto vars:     Size  Location     Type
  7441 ;;		None
  7442 ;; Return value:  Size  Location     Type
  7443 ;;                  3   26[COMRAM] float 
  7444 ;; Registers used:
  7445 ;;		wreg, status,2, status,0, cstack
  7446 ;; Tracked objects:
  7447 ;;		On entry : 0/0
  7448 ;;		On exit  : 0/0
  7449 ;;		Unchanged: 0/0
  7450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7451 ;;      Params:         3       0       0       0       0       0       0       0       0
  7452 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7453 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7454 ;;      Totals:         3       0       0       0       0       0       0       0       0
  7455 ;;Total ram usage:        3 bytes
  7456 ;; Hardware stack levels used:    1
  7457 ;; Hardware stack levels required when called:    2
  7458 ;; This function calls:
  7459 ;;		___ftpack
  7460 ;; This function is called by:
  7461 ;;		_main
  7462 ;; This function uses a non-reentrant model
  7463 ;;
  7464                           
  7465                           	psect	text31
  7466  0000'                    __ptext31:
  7467                           	opt stack 0
  7468  0000'                    ___lwtoft:
  7469                           	opt stack 28
  7470                           
  7471                           ;incstack = 0
  7472  0000' C01A' F012'        	movff	___lwtoft@c,___ftpack@arg
  7473  0004' C01B' F013'        	movff	___lwtoft@c+1,___ftpack@arg+1
  7474  0008' 6A14'              	clrf	___ftpack@arg+2,c
  7475  000A' 0E8E               	movlw	142
  7476  000C' 6E15'              	movwf	___ftpack@exp,c
  7477  000E' 0E00               	movlw	0
  7478  0010' 6E16'              	movwf	___ftpack@sign,c
  7479  0012' EC00' F000'        	call	___ftpack	;wreg free
  7480  0016' C012' F01A'        	movff	?___ftpack,?___lwtoft
  7481  001A' C013' F01B'        	movff	?___ftpack+1,?___lwtoft+1
  7482  001E' C014' F01C'        	movff	?___ftpack+2,?___lwtoft+2
  7483  0022' 0012               	return	
  7484  0024'                    __end_of___lwtoft:
  7485                           	opt stack 0
  7486                           tblptru	equ	0xFF8
  7487                           tblptrh	equ	0xFF7
  7488                           tblptrl	equ	0xFF6
  7489                           tablat	equ	0xFF5
  7490                           prodh	equ	0xFF4
  7491                           prodl	equ	0xFF3
  7492                           intcon	equ	0xFF2
  7493                           intcon2	equ	0xFF1
  7494                           intcon3	equ	0xFF0
  7495                           postinc0	equ	0xFEE
  7496                           wreg	equ	0xFE8
  7497                           indf2	equ	0xFDF
  7498                           postinc2	equ	0xFDE
  7499                           postdec2	equ	0xFDD
  7500                           fsr2h	equ	0xFDA
  7501                           fsr2l	equ	0xFD9
  7502                           status	equ	0xFD8
  7503                           
  7504 ;; *************** function ___ftpack *****************
  7505 ;; Defined at:
  7506 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  7507 ;; Parameters:    Size  Location     Type
  7508 ;;  arg             3   18[COMRAM] unsigned um
  7509 ;;  exp             1   21[COMRAM] unsigned char 
  7510 ;;  sign            1   22[COMRAM] unsigned char 
  7511 ;; Auto vars:     Size  Location     Type
  7512 ;;		None
  7513 ;; Return value:  Size  Location     Type
  7514 ;;                  3   18[COMRAM] float 
  7515 ;; Registers used:
  7516 ;;		wreg, status,2, status,0
  7517 ;; Tracked objects:
  7518 ;;		On entry : 0/0
  7519 ;;		On exit  : 0/0
  7520 ;;		Unchanged: 0/0
  7521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7522 ;;      Params:         5       0       0       0       0       0       0       0       0
  7523 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7524 ;;      Temps:          3       0       0       0       0       0       0       0       0
  7525 ;;      Totals:         8       0       0       0       0       0       0       0       0
  7526 ;;Total ram usage:        8 bytes
  7527 ;; Hardware stack levels used:    1
  7528 ;; Hardware stack levels required when called:    1
  7529 ;; This function calls:
  7530 ;;		Nothing
  7531 ;; This function is called by:
  7532 ;;		___awtoft
  7533 ;;		___ftadd
  7534 ;;		___ftdiv
  7535 ;;		___ftmul
  7536 ;;		___lltoft
  7537 ;;		___lwtoft
  7538 ;; This function uses a non-reentrant model
  7539 ;;
  7540                           
  7541                           	psect	text32
  7542  0000'                    __ptext32:
  7543                           	opt stack 0
  7544  0000'                    ___ftpack:
  7545                           	opt stack 27
  7546                           
  7547                           ;incstack = 0
  7548  0000' 5015'              	movf	___ftpack@exp,w,c
  7549  0002' B4D8               	btfsc	status,2,c
  7550  0004' D005               	goto	u3360
  7551  0006' 5012'              	movf	___ftpack@arg,w,c
  7552  0008' 1013'              	iorwf	___ftpack@arg+1,w,c
  7553  000A' 1014'              	iorwf	___ftpack@arg+2,w,c
  7554  000C' A4D8               	btfss	status,2,c
  7555  000E' D00C               	goto	l550
  7556  0010'                    u3360:
  7557  0010' 0E00               	movlw	0
  7558  0012' 6E12'              	movwf	?___ftpack,c
  7559  0014' 0E00               	movlw	0
  7560  0016' 6E13'              	movwf	?___ftpack+1,c
  7561  0018' 0E00               	movlw	0
  7562  001A' 6E14'              	movwf	?___ftpack+2,c
  7563  001C' 0012               	return	
  7564  001E' 2A15'              	incf	___ftpack@exp,f,c
  7565  0020' 90D8               	bcf	status,0,c
  7566  0022' 3214'              	rrcf	___ftpack@arg+2,f,c
  7567  0024' 3213'              	rrcf	___ftpack@arg+1,f,c
  7568  0026' 3212'              	rrcf	___ftpack@arg,f,c
  7569  0028'                    l550:
  7570  0028' 0E00               	movlw	0
  7571  002A' 1412'              	andwf	___ftpack@arg,w,c
  7572  002C' 6E00'              	movwf	??___ftpack& (0+255),c
  7573  002E' 0E00               	movlw	0
  7574  0030' 1413'              	andwf	___ftpack@arg+1,w,c
  7575  0032' 6E00'              	movwf	(??___ftpack+1)& (0+255),c
  7576  0034' 0EFE               	movlw	254
  7577  0036' 1414'              	andwf	___ftpack@arg+2,w,c
  7578  0038' 6E00'              	movwf	(??___ftpack+2)& (0+255),c
  7579  003A' 5017'              	movf	??___ftpack,w,c
  7580  003C' 1018'              	iorwf	??___ftpack+1,w,c
  7581  003E' 1019'              	iorwf	??___ftpack+2,w,c
  7582  0040' B4D8               	btfsc	status,2,c
  7583  0042' D00C               	goto	l553
  7584  0044' D7EC               	goto	l551
  7585  0046' 2A15'              	incf	___ftpack@exp,f,c
  7586  0048' 0E01               	movlw	1
  7587  004A' 2612'              	addwf	___ftpack@arg,f,c
  7588  004C' 0E00               	movlw	0
  7589  004E' 2213'              	addwfc	___ftpack@arg+1,f,c
  7590  0050' 0E00               	movlw	0
  7591  0052' 2214'              	addwfc	___ftpack@arg+2,f,c
  7592  0054' 90D8               	bcf	status,0,c
  7593  0056' 3214'              	rrcf	___ftpack@arg+2,f,c
  7594  0058' 3213'              	rrcf	___ftpack@arg+1,f,c
  7595  005A' 3212'              	rrcf	___ftpack@arg,f,c
  7596  005C'                    l553:
  7597  005C' 0E00               	movlw	0
  7598  005E' 1412'              	andwf	___ftpack@arg,w,c
  7599  0060' 6E00'              	movwf	??___ftpack& (0+255),c
  7600  0062' 0E00               	movlw	0
  7601  0064' 1413'              	andwf	___ftpack@arg+1,w,c
  7602  0066' 6E00'              	movwf	(??___ftpack+1)& (0+255),c
  7603  0068' 0EFF               	movlw	255
  7604  006A' 1414'              	andwf	___ftpack@arg+2,w,c
  7605  006C' 6E00'              	movwf	(??___ftpack+2)& (0+255),c
  7606  006E' 5017'              	movf	??___ftpack,w,c
  7607  0070' 1018'              	iorwf	??___ftpack+1,w,c
  7608  0072' 1019'              	iorwf	??___ftpack+2,w,c
  7609  0074' B4D8               	btfsc	status,2,c
  7610  0076' D006               	goto	l556
  7611  0078' D7E6               	goto	l554
  7612  007A' 0615'              	decf	___ftpack@exp,f,c
  7613  007C' 90D8               	bcf	status,0,c
  7614  007E' 3612'              	rlcf	___ftpack@arg,f,c
  7615  0080' 3613'              	rlcf	___ftpack@arg+1,f,c
  7616  0082' 3614'              	rlcf	___ftpack@arg+2,f,c
  7617  0084'                    l556:
  7618  0084' BE13'              	btfsc	___ftpack@arg+1,7,c
  7619  0086' D003               	goto	u3400
  7620  0088' 0E02               	movlw	2
  7621  008A' 6015'              	cpfslt	___ftpack@exp,c
  7622  008C' D7F6               	goto	l557
  7623  008E'                    u3400:
  7624  008E' A015'              	btfss	___ftpack@exp,0,c
  7625  0090' 9E13'              	bcf	___ftpack@arg+1,7,c
  7626  0092' 90D8               	bcf	status,0,c
  7627  0094' 3215'              	rrcf	___ftpack@exp,f,c
  7628  0096' 5015'              	movf	___ftpack@exp,w,c
  7629  0098' 1214'              	iorwf	___ftpack@arg+2,f,c
  7630  009A' 5016'              	movf	___ftpack@sign,w,c
  7631  009C' A4D8               	btfss	status,2,c
  7632  009E' 8E14'              	bsf	___ftpack@arg+2,7,c
  7633  00A0' C012' F012'        	movff	___ftpack@arg,?___ftpack
  7634  00A4' C013' F013'        	movff	___ftpack@arg+1,?___ftpack+1
  7635  00A8' C014' F014'        	movff	___ftpack@arg+2,?___ftpack+2
  7636  00AC' 0012               	return	
  7637  00AE'                    __end_of___ftpack:
  7638                           	opt stack 0
  7639                           tblptru	equ	0xFF8
  7640                           tblptrh	equ	0xFF7
  7641                           tblptrl	equ	0xFF6
  7642                           tablat	equ	0xFF5
  7643                           prodh	equ	0xFF4
  7644                           prodl	equ	0xFF3
  7645                           intcon	equ	0xFF2
  7646                           intcon2	equ	0xFF1
  7647                           intcon3	equ	0xFF0
  7648                           postinc0	equ	0xFEE
  7649                           wreg	equ	0xFE8
  7650                           indf2	equ	0xFDF
  7651                           postinc2	equ	0xFDE
  7652                           postdec2	equ	0xFDD
  7653                           fsr2h	equ	0xFDA
  7654                           fsr2l	equ	0xFD9
  7655                           status	equ	0xFD8
  7656                           
  7657 ;; *************** function _ADCint *****************
  7658 ;; Defined at:
  7659 ;;		line 56 in file "main_ADC_b.c"
  7660 ;; Parameters:    Size  Location     Type
  7661 ;;		None
  7662 ;; Auto vars:     Size  Location     Type
  7663 ;;		None
  7664 ;; Return value:  Size  Location     Type
  7665 ;;                  1    wreg      void 
  7666 ;; Registers used:
  7667 ;;		wreg, status,2
  7668 ;; Tracked objects:
  7669 ;;		On entry : 0/0
  7670 ;;		On exit  : 0/0
  7671 ;;		Unchanged: 0/0
  7672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7673 ;;      Params:         0       0       0       0       0       0       0       0       0
  7674 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7675 ;;      Temps:         18       0       0       0       0       0       0       0       0
  7676 ;;      Totals:        18       0       0       0       0       0       0       0       0
  7677 ;;Total ram usage:       18 bytes
  7678 ;; Hardware stack levels used:    1
  7679 ;; This function calls:
  7680 ;;		Nothing
  7681 ;; This function is called by:
  7682 ;;		Interrupt level 2
  7683 ;; This function uses a non-reentrant model
  7684 ;;
  7685                           
  7686                           	psect	intcode
  7687  0000'                    __pintcode:
  7688                           	opt stack 0
  7689  0000'                    _ADCint:
  7690                           	opt stack 23
  7691                           
  7692                           ;incstack = 0
  7693  0000' 8200'              	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7694  0002' ED00' F000'        	call	int_func,f	;refresh shadow registers
  7695                           tblptru	equ	0xFF8
  7696                           tblptrh	equ	0xFF7
  7697                           tblptrl	equ	0xFF6
  7698                           tablat	equ	0xFF5
  7699                           prodh	equ	0xFF4
  7700                           prodl	equ	0xFF3
  7701                           intcon	equ	0xFF2
  7702                           intcon2	equ	0xFF1
  7703                           intcon3	equ	0xFF0
  7704                           postinc0	equ	0xFEE
  7705                           wreg	equ	0xFE8
  7706                           indf2	equ	0xFDF
  7707                           postinc2	equ	0xFDE
  7708                           postdec2	equ	0xFDD
  7709                           fsr2h	equ	0xFDA
  7710                           fsr2l	equ	0xFD9
  7711                           status	equ	0xFD8
  7712                           
  7713                           	psect	intcode_body
  7714  0000'                    __pintcode_body:
  7715                           	opt stack 23
  7716  0000'                    int_func:
  7717                           	opt stack 23
  7718  0000' 0006               	pop		; remove dummy address from shadow register refresh
  7719  0002' CFFA F000'         	movff	pclath,??_ADCint
  7720  0006' CFFB F001'         	movff	pclatu,??_ADCint+1
  7721  000A' CFE9 F002'         	movff	fsr0l,??_ADCint+2
  7722  000E' CFEA F003'         	movff	fsr0h,??_ADCint+3
  7723  0012' CFE1 F004'         	movff	fsr1l,??_ADCint+4
  7724  0016' CFE2 F005'         	movff	fsr1h,??_ADCint+5
  7725  001A' CFD9 F006'         	movff	fsr2l,??_ADCint+6
  7726  001E' CFDA F007'         	movff	fsr2h,??_ADCint+7
  7727  0022' CFF3 F008'         	movff	prodl,??_ADCint+8
  7728  0026' CFF4 F009'         	movff	prodh,??_ADCint+9
  7729  002A' CFF6 F00A'         	movff	tblptrl,??_ADCint+10
  7730  002E' CFF7 F00B'         	movff	tblptrh,??_ADCint+11
  7731  0032' CFF8 F00C'         	movff	tblptru,??_ADCint+12
  7732  0036' CFF5 F00D'         	movff	tablat,??_ADCint+13
  7733  003A' C000' F00E'        	movff	btemp,??_ADCint+14
  7734  003E' C001' F00F'        	movff	btemp+1,??_ADCint+15
  7735  0042' C002' F010'        	movff	btemp+2,??_ADCint+16
  7736  0046' C003' F011'        	movff	btemp+3,??_ADCint+17
  7737                           
  7738                           ;main_ADC_b.c: 58: if(INTCONbits.INT0IF == 1)
  7739  004A' A2F2               	btfss	intcon,1,c	;volatile
  7740  004C' D005               	goto	i2l175
  7741                           
  7742                           ;main_ADC_b.c: 59: {
  7743                           ;main_ADC_b.c: 60: INTCONbits.INT0IF = 0;
  7744  004E' 92F2               	bcf	intcon,1,c	;volatile
  7745                           
  7746                           ;main_ADC_b.c: 61: int0flag = 1;
  7747  0050' 0E00               	movlw	0
  7748  0052' 6E09'              	movwf	_int0flag+1,c
  7749  0054' 0E01               	movlw	1
  7750  0056' 6E08'              	movwf	_int0flag,c
  7751  0058'                    i2l175:
  7752                           
  7753                           ;main_ADC_b.c: 62: }
  7754                           ;main_ADC_b.c: 64: if(INTCON3bits.INT1IF == 1)
  7755  0058' A0F0               	btfss	intcon3,0,c	;volatile
  7756  005A' D005               	goto	i2l176
  7757                           
  7758                           ;main_ADC_b.c: 65: {
  7759                           ;main_ADC_b.c: 66: INTCON3bits.INT1IF = 0;
  7760  005C' 90F0               	bcf	intcon3,0,c	;volatile
  7761                           
  7762                           ;main_ADC_b.c: 67: int1flag = 1;
  7763  005E' 0E00               	movlw	0
  7764  0060' 6E07'              	movwf	_int1flag+1,c
  7765  0062' 0E01               	movlw	1
  7766  0064' 6E06'              	movwf	_int1flag,c
  7767  0066'                    i2l176:
  7768                           
  7769                           ;main_ADC_b.c: 68: }
  7770                           ;main_ADC_b.c: 70: if(INTCON3bits.INT2IF == 1)
  7771  0066' A2F0               	btfss	intcon3,1,c	;volatile
  7772  0068' D005               	goto	i2l177
  7773                           
  7774                           ;main_ADC_b.c: 71: {
  7775                           ;main_ADC_b.c: 72: INTCON3bits.INT2IF = 0;
  7776  006A' 92F0               	bcf	intcon3,1,c	;volatile
  7777                           
  7778                           ;main_ADC_b.c: 73: int2flag = 1;
  7779  006C' 0E00               	movlw	0
  7780  006E' 6E05'              	movwf	_int2flag+1,c
  7781  0070' 0E01               	movlw	1
  7782  0072' 6E04'              	movwf	_int2flag,c
  7783  0074'                    i2l177:
  7784                           
  7785                           ;main_ADC_b.c: 74: }
  7786                           ;main_ADC_b.c: 76: if(PIR1bits.ADIF == 1)
  7787  0074' AC9E               	btfss	3998,6,c	;volatile
  7788  0076' D005               	goto	i2l178
  7789                           
  7790                           ;main_ADC_b.c: 77: {
  7791                           ;main_ADC_b.c: 78: PIR1bits.ADIF = 0;
  7792  0078' 9C9E               	bcf	3998,6,c	;volatile
  7793                           
  7794                           ;main_ADC_b.c: 79: pir1flag = 1;
  7795  007A' 0E00               	movlw	0
  7796  007C' 6E03'              	movwf	_pir1flag+1,c
  7797  007E' 0E01               	movlw	1
  7798  0080' 6E02'              	movwf	_pir1flag,c
  7799  0082'                    i2l178:
  7800  0082' C011' F003'        	movff	??_ADCint+17,btemp+3
  7801  0086' C010' F002'        	movff	??_ADCint+16,btemp+2
  7802  008A' C00F' F001'        	movff	??_ADCint+15,btemp+1
  7803  008E' C00E' F000'        	movff	??_ADCint+14,btemp
  7804  0092' C00D' FFF5         	movff	??_ADCint+13,tablat
  7805  0096' C00C' FFF8         	movff	??_ADCint+12,tblptru
  7806  009A' C00B' FFF7         	movff	??_ADCint+11,tblptrh
  7807  009E' C00A' FFF6         	movff	??_ADCint+10,tblptrl
  7808  00A2' C009' FFF4         	movff	??_ADCint+9,prodh
  7809  00A6' C008' FFF3         	movff	??_ADCint+8,prodl
  7810  00AA' C007' FFDA         	movff	??_ADCint+7,fsr2h
  7811  00AE' C006' FFD9         	movff	??_ADCint+6,fsr2l
  7812  00B2' C005' FFE2         	movff	??_ADCint+5,fsr1h
  7813  00B6' C004' FFE1         	movff	??_ADCint+4,fsr1l
  7814  00BA' C003' FFEA         	movff	??_ADCint+3,fsr0h
  7815  00BE' C002' FFE9         	movff	??_ADCint+2,fsr0l
  7816  00C2' C001' FFFB         	movff	??_ADCint+1,pclatu
  7817  00C6' C000' FFFA         	movff	??_ADCint,pclath
  7818  00CA' 9200'              	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7819  00CC' 0011               	retfie		f
  7820  00CE'                    __end_of_ADCint:
  7821                           	opt stack 0
  7822                           pclatu	equ	0xFFB
  7823                           pclath	equ	0xFFA
  7824                           tblptru	equ	0xFF8
  7825                           tblptrh	equ	0xFF7
  7826                           tblptrl	equ	0xFF6
  7827                           tablat	equ	0xFF5
  7828                           prodh	equ	0xFF4
  7829                           prodl	equ	0xFF3
  7830                           intcon	equ	0xFF2
  7831                           intcon2	equ	0xFF1
  7832                           intcon3	equ	0xFF0
  7833                           postinc0	equ	0xFEE
  7834                           fsr0h	equ	0xFEA
  7835                           fsr0l	equ	0xFE9
  7836                           wreg	equ	0xFE8
  7837                           fsr1h	equ	0xFE2
  7838                           fsr1l	equ	0xFE1
  7839                           indf2	equ	0xFDF
  7840                           postinc2	equ	0xFDE
  7841                           postdec2	equ	0xFDD
  7842                           fsr2h	equ	0xFDA
  7843                           fsr2l	equ	0xFD9
  7844                           status	equ	0xFD8
  7845                           pclatu	equ	0xFFB
  7846                           pclath	equ	0xFFA
  7847                           tblptru	equ	0xFF8
  7848                           tblptrh	equ	0xFF7
  7849                           tblptrl	equ	0xFF6
  7850                           tablat	equ	0xFF5
  7851                           prodh	equ	0xFF4
  7852                           prodl	equ	0xFF3
  7853                           intcon	equ	0xFF2
  7854                           intcon2	equ	0xFF1
  7855                           intcon3	equ	0xFF0
  7856                           postinc0	equ	0xFEE
  7857                           fsr0h	equ	0xFEA
  7858                           fsr0l	equ	0xFE9
  7859                           wreg	equ	0xFE8
  7860                           fsr1h	equ	0xFE2
  7861                           fsr1l	equ	0xFE1
  7862                           indf2	equ	0xFDF
  7863                           postinc2	equ	0xFDE
  7864                           postdec2	equ	0xFDD
  7865                           fsr2h	equ	0xFDA
  7866                           fsr2l	equ	0xFD9
  7867                           status	equ	0xFD8
  7868                           
  7869                           	psect	rparam
  7870  0000                     pclatu	equ	0xFFB
  7871                           pclath	equ	0xFFA
  7872                           tblptru	equ	0xFF8
  7873                           tblptrh	equ	0xFF7
  7874                           tblptrl	equ	0xFF6
  7875                           tablat	equ	0xFF5
  7876                           prodh	equ	0xFF4
  7877                           prodl	equ	0xFF3
  7878                           intcon	equ	0xFF2
  7879                           intcon2	equ	0xFF1
  7880                           intcon3	equ	0xFF0
  7881                           postinc0	equ	0xFEE
  7882                           fsr0h	equ	0xFEA
  7883                           fsr0l	equ	0xFE9
  7884                           wreg	equ	0xFE8
  7885                           fsr1h	equ	0xFE2
  7886                           fsr1l	equ	0xFE1
  7887                           indf2	equ	0xFDF
  7888                           postinc2	equ	0xFDE
  7889                           postdec2	equ	0xFDD
  7890                           fsr2h	equ	0xFDA
  7891                           fsr2l	equ	0xFD9
  7892                           status	equ	0xFD8
  7893                           
  7894                           	psect	temp
  7895  0000'                    btemp:
  7896                           	opt stack 0
  7897  0000'                    	ds	1
  7898  0000                     int$flags	set	btemp
  7899  0000                     wtemp6	set	btemp+1
  7900                           pclatu	equ	0xFFB
  7901                           pclath	equ	0xFFA
  7902                           tblptru	equ	0xFF8
  7903                           tblptrh	equ	0xFF7
  7904                           tblptrl	equ	0xFF6
  7905                           tablat	equ	0xFF5
  7906                           prodh	equ	0xFF4
  7907                           prodl	equ	0xFF3
  7908                           intcon	equ	0xFF2
  7909                           intcon2	equ	0xFF1
  7910                           intcon3	equ	0xFF0
  7911                           postinc0	equ	0xFEE
  7912                           fsr0h	equ	0xFEA
  7913                           fsr0l	equ	0xFE9
  7914                           wreg	equ	0xFE8
  7915                           fsr1h	equ	0xFE2
  7916                           fsr1l	equ	0xFE1
  7917                           indf2	equ	0xFDF
  7918                           postinc2	equ	0xFDE
  7919                           postdec2	equ	0xFDD
  7920                           fsr2h	equ	0xFDA
  7921                           fsr2l	equ	0xFD9
  7922                           status	equ	0xFD8


Data Sizes:
    Strings     11
    Constant    118
    Data        0
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     66      76
    BANK0           160     67      67
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_1(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 2
		 -> main@str(BANK0[2]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    lcd_texto@cadena	PTR unsigned char  size(2) Largest target is 2
		 -> main@str(BANK0[2]), 


Critical Paths under _main in COMRAM

    _sprintf->___ftadd
    _sprintf->___fttol
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___ftsub->___ftadd
    ___ftadd->_fround
    _wait_in_ms->___fttol
    ___fttol->___ftdiv
    ___ftdiv->___ftmul
    ___awtoft->___ftpack
    ___lwtoft->___ftpack

Critical Paths under _ADCint in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___fttol
    ___ftsub->___ftadd
    _lcd_ubicarXY->_lcd_orden
    _lcd_origen->_lcd_orden
    _lcd_texto->_lcd_caracter
    _lcd_limpiar->_lcd_orden
    _lcd_iniciar->_lcd_orden
    _lcd_pulso->_wait_in_ms
    _wait_in_ms->___fttol
    ___fttol->___ftdiv

Critical Paths under _ADCint in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ADCint in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ADCint in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ADCint in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ADCint in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ADCint in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ADCint in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ADCint in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                12    12      0  172510
                                             55 BANK0     12    12      0
                           _ADC_Read
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
                        _configBoard
                        _lcd_iniciar
                        _lcd_limpiar
                          _lcd_texto
                       _lcd_ubicarXY
                            _sprintf
                         _wait_in_ms
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             44    37      7   58679
                                             17 BANK0     38    31      7
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                7     4      3   13529
                                             53 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             18 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              10     7      3   13250
                                             53 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2895
                                             32 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    6521
                                             38 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1664
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1820
                                             24 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     455
                                             18 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     598
                                             18 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    3205
                                             26 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     615
                                             18 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     466
                                             18 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    5154
                                              9 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    4738
                                             63 COMRAM     3     3      0
                                              0 BANK0      9     3      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     121
                                             18 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     592
                                             18 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _lcd_ubicarXY                                         9     8      1   30610
                                             34 BANK0      9     8      1
                          _lcd_orden
                         _lcd_origen
 ---------------------------------------------------------------------------------
 (2) _lcd_origen                                           0     0      0   19954
                          _lcd_orden
                         _wait_in_ms
 ---------------------------------------------------------------------------------
 (1) _lcd_texto                                            3     1      2    9983
                                             34 BANK0      3     1      2
                       _lcd_caracter
 ---------------------------------------------------------------------------------
 (2) _lcd_caracter                                         7     5      2    9738
                                             27 BANK0      7     5      2
                          _lcd_pulso
 ---------------------------------------------------------------------------------
 (1) _lcd_limpiar                                          0     0      0   19954
                          _lcd_orden
                         _wait_in_ms
 ---------------------------------------------------------------------------------
 (1) _lcd_iniciar                                          0     0      0   29540
                          _lcd_orden
                          _lcd_pulso
                         _wait_in_ms
 ---------------------------------------------------------------------------------
 (3) _lcd_orden                                            7     5      2   10368
                                             27 BANK0      7     5      2
                          _lcd_pulso
 ---------------------------------------------------------------------------------
 (4) _lcd_pulso                                            0     0      0    9586
                         _wait_in_ms
 ---------------------------------------------------------------------------------
 (1) _wait_in_ms                                          10     8      2    9586
                                             17 BANK0     10     8      2
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     556
                                             62 COMRAM     4     0      4
                                              6 BANK0     11    11      0
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    4113
                                             53 COMRAM     9     3      6
                                              0 BANK0      6     6      0
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    3236
                                             26 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _configBoard                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             3     0      3    3224
                                             26 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    3013
                                             18 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             2     0      2       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _ADCint                                              18    18      0       0
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Read
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___lwtoft
     ___ftpack
   _configBoard
   _lcd_iniciar
     _lcd_orden
       _lcd_pulso
         _wait_in_ms
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
     _lcd_pulso
       _wait_in_ms
         ___awtoft
           ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
     _wait_in_ms
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _lcd_limpiar
     _lcd_orden
       _lcd_pulso
         _wait_in_ms
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
     _wait_in_ms
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _lcd_texto
     _lcd_caracter
       _lcd_pulso
         _wait_in_ms
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
   _lcd_ubicarXY
     _lcd_orden
       _lcd_pulso
         _wait_in_ms
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
     _lcd_origen
       _lcd_orden
         _lcd_pulso
           _wait_in_ms
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
       _wait_in_ms
         ___awtoft
           ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _wait_in_ms
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)

 _ADCint (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     43      43       5       41.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     42      4C       1       80.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      8F      20        0.0%
DATA                 0      0      8F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Apr 11 19:29:39 2018

          ?_lcd_ubicarXY 000022                       l62 0000B8                       l63 0000C0  
                     l59 000080                       l92 000020                       l93 000002  
           ___awdiv@sign 00001D      ___wmul@multiplicand 000022              __CFG_BORV$3 000000  
           ___ftadd@exp1 000008             ___ftadd@exp2 000007             ___ftadd@sign 000006  
                    l110 00003C                      l105 000026                      l106 000016  
                    l212 000212                      l220 000334                      l300 000822  
                    l109 00004C                      l301 000844                      l222 0003E4  
                    l230 000038                      l215 000208                      l303 000866  
                    l216 000134                      l304 00086E                      l209 000146  
                    l305 000892                      l306 00089A                      l250 0001CC  
                    l242 000152                      l226 00000E                      l219 0001E4  
                    l307 0008E2                      l235 000070                      l227 000026  
                    l500 000020                      l316 00092C                      l308 0008C2  
                    l260 00039A                      l252 00025E                      l253 0002C4  
                    l245 00014E                      l237 000140                      l229 000040  
                    l502 000036                      l270 0004C4                      l246 000176  
                    l238 00012A                      l503 00002E                      l271 0004DE  
                    l255 0002EA                      l239 0000F2                      l520 00003C  
                    l248 0007CE                      l256 00032A                      l184 000008  
                    l521 00007E                      l257 0003F2                      l249 00018A  
                    l514 000014                      l530 000110                      l522 0000AE  
                    l506 00004E                      l290 000670                      l282 000606  
                    l274 00051E                      l266 000458                      l186 00001E  
                    l531 000104                      l507 000058                      l291 0007A2  
                    l283 000572                      l275 000508                      l604 000118  
                    l524 0000EC                      l508 000066                      l292 0006C0  
                    l605 00010E                      l525 0000DC                      l285 000626  
                    l550 000028                      l614 00002A                      l518 00001E  
                    l622 00002C                      l294 0007C4                      l286 000610  
                    l278 000544                      l551 00001E                      l607 00013C  
                    l295 0007AE                      l279 00052E                      l616 000052  
                    l640 000060                      l608 000158                      l712 000062  
                    l624 000058                      l288 00064A                      l553 00005C  
                    l617 000090                      l609 000188                      l713 000070  
                    l625 000092                      l297 0007E6                      l289 00064E  
                    l554 000046                      l618 0000B6                      l722 000046  
                    l730 000006                      l634 00011A                      l626 0000BA  
                    l490 00003A                      l650 000092                      l298 000802  
                    l723 000054                      l635 00010E                      l556 000084  
                    l708 00002E                      l628 0000F6                      l652 0000AA  
                    l557 00007A                      l581 000054                      l709 000022  
                    l629 0000E6                      l493 000062                      l653 0000BA  
                    l670 000096                      l590 0000E4                      l718 00001E  
                    l494 00006C                      l486 000014                      l646 000028  
                    l639 000030                      l663 000018                      l719 000012  
                    l495 00007A                      l487 000024                      l648 000050  
                    l657 000016                      l585 00007E                      l729 000012  
                    l489 000042                      l649 000082                      l682 000016  
                    l675 0000CA                      l667 00002E                      l595 0000DA  
                    l499 000014                      l676 0000BE                      l596 0000D0  
                    l669 0000A6                      l678 0000E6             __CFG_CPB$OFF 000000  
           __CFG_CPD$OFF 000000             ___awmod@sign 000017                      wreg 000FE8  
         ??_lcd_caracter 00001D             __CFG_LVP$OFF 000000             ___ftdiv@cntr 000000  
           ___ftdiv@sign 000005             __CFG_WDT$OFF 000000                     l2173 00008C  
                   l4007 000928                     l3429 0000C0                     l3901 000610  
                   l3821 000374                     l3813 00032A                     l3841 00045C  
                   l3877 00052E                     l3869 000508                     STR_1 000077  
                   u2300 000046                     u4100 0002FC                     u4110 00033C  
                   u2511 00003C                     u3400 00008E                     u2360 00003A  
                   u4140 000374                     u4060 000204                     u2710 000032  
                   u3431 000010                     u3360 000010                     u1920 0000D0  
                   u3520 0000AE                     u2640 000116                     u4240 000552  
                   _IPEN 007E87                     u4065 0001FA                     u2570 000120  
                   u3451 00003A                     u2491 000010                     u3620 000070  
                   u2740 000022                     u4180 000494                     u1861 000012  
                   u4270 000634                     u3551 000012                     u1880 00004C  
                   u3720 000120                     u4280 000644                     u3545 000018  
                   u3561 000026                     u3650 0000AE                     u4450 0008EA  
                   u4460 000908                     u1885 000044                     u3590 000046  
                   u3495 00002E                     u4480 000946                     u3825 000018  
                   u3761 000010                     u3690 0000EC                     u3940 00002E  
                   u3781 000038                     u3990 0000CE                     _main 000000  
           ___ftpack@arg 000012             ___ftpack@exp 000015                     fsr0h 000FEA  
                   fsr1h 000FE2                     fsr2h 000FDA                     fsr0l 000FE9  
                   indf2 000FDF                     fsr1l 000FE1                     fsr2l 000FD9  
                   btemp 000000                     prodh 000FF4                     prodl 000FF3  
                   start 000000*            _sprintf$1581 00001E            __CFG_MCLRE$ON 000000  
         ??_lcd_ubicarXY 000023             ___ftmul@cntr 000033             ___param_bank 000000  
           ___ftmul@sign 000034     lcd_caracter@caracter 00001B             ___fttol@exp1 000010  
           ___fttol@lval 00000C            __CFG_PLLDIV$1 000000                    ?_main 000000  
        __end_of___awdiv 000084          __end_of___ftadd 0001AE          __end_of___awmod 000070  
        __end_of___ftdiv 0000E8          __end_of___ftneg 000024          __end_of___lldiv 000082  
        __end_of___ftmul 0000F4          ___awdiv@divisor 00001A          __end_of___llmod 000066  
        __end_of___ftsub 000042          __end_of___fttol 0000F8                    i2l175 000058  
                  i2l176 000066                    i2l177 000074                    i2l178 000082  
        ___awdiv@counter 00001C                    _TMR0L 000FD6                    _PORTA 000F80  
                  _PORTB 000F81                    _PORTC 000F82                    _PORTD 000F83  
                  _PORTE 000F84            __CFG_USBDIV$2 000000                    _TRISA 000F92  
                  _TRISB 000F93                    _TRISC 000F94                    _TRISD 000F95  
                  _TRISE 000F96             ___lltoft@exp 000022           __CFG_FCMEN$OFF 000000  
          ___awtoft@sign 00001D          __end_of_dpowers 000029                    _count 000000  
                  _scale 000000          __end_of_isdigit 00001E            ___ftpack@sign 000016  
                  pclath 000FFA                    tablat 000FF5                    status 000FD8  
                  wtemp6 000001          __end_of_sprintf 000954          __initialization 000000  
           __end_of_main 000170                   ??_main 000042            ___fttol@sign1 00000B  
          __activetblptr 000002            lcd_ubicarXY@i 000028     __size_of__tdiv_to_l_ 000000  
    lcd_ubicarXY@columna 000022         ___llmod@dividend 000012                   ?_scale 000035  
                 _T08BIT 007EAE         ___awdiv@dividend 000018                   _ADCint 000000  
       __end_of___awtoft 000038         __end_of___ftpack 0000AE         __end_of___lltoft 00005C  
       __end_of___lwtoft 000024                   _TMR0IF 007F92                   _TMR0ON 007EAF  
   __size_of_configBoard 000000         __end_of__powers_ 000050     __end_of_lcd_caracter 00006C  
                 ___ftge 000000     __size_of_lcd_iniciar 000000                   ___wmul 000000  
              ??___awdiv 00001C                ??___ftadd 00003F                ??___awmod 000016  
              ??___ftdiv 00003B                ??___ftneg 000015                ??___lldiv 00001A  
              ??___ftmul 00002C                ??___llmod 00001A                ??___ftsub 000042  
              ??___fttol 000006     __size_of_lcd_limpiar 000000                   _fround 000000  
                 clear_0 000006         ___awdiv@quotient 00001E          ___awmod@divisor 000014  
        ___awmod@counter 000016    ___ftmul@f3_as_product 000030                ??_isdigit 000012  
              ?_ADC_Read 000000             __mediumconst 000000*                  tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8     __end_of_lcd_ubicarXY 000076  
              ??_sprintf 000018               __accesstop 000000* __end_of__initialization 00000C  
             ___ftadd@f1 000000               ___ftadd@f2 000003               ___ftge@ff1 000012  
             ___ftge@ff2 000015            ___rparam_used 000001               ___ftdiv@f1 000035  
             ___ftdiv@f2 000038               ___ftdiv@f3 000001               ___ftneg@f1 000012  
             ___awtoft@c 00001A               ___ftmul@f1 000026               ___ftmul@f2 000029  
             ___ftsub@f1 000009               ___ftsub@f2 00000C               ___fttol@f1 00003E  
         __pcstackCOMRAM 000000               ___lltoft@c 00001A            __end_of_scale 000408  
             ___lwtoft@c 00001A               __div_to_l_ 000000               ??_ADC_Read 000000  
     __size_of_lcd_orden 000000       __size_of_lcd_texto 000000       __size_of_lcd_pulso 000000  
        __div_to_l_@exp1 00001D          __div_to_l_@cntr 00001C                  ??_scale 000038  
        __div_to_l_@quot 000018             sprintf@width 00002F                  ?_ADCint 000000  
          __div_to_l_@f1 000012            __div_to_l_@f2 000015           lcd_orden@orden 00001B  
                ?___ftge 000012                  ?___wmul 000020                  ?_fround 000035  
              ?___awtoft 00001A                ?___ftpack 000012                ?___lltoft 00001A  
              ?___lwtoft 00001A               _lcd_origen 000000          __size_of_ADCint 000000  
  __size_of_lcd_caracter 000000        __end_of__npowers_ 000077                  __Hparam 000000  
             _scale$1580 000038                  __Lparam 000000        __end_of_lcd_orden 00006A  
        __size_of___ftge 000000        __end_of_lcd_texto 000030        __end_of_lcd_pulso 000022  
                ___awdiv 000000                  ___ftadd 000000                  ___awmod 000000  
                ___ftdiv 000000                  ___ftneg 000000                  ___lldiv 000000  
        __size_of___wmul 000000                  ___ftmul 000000                  ___llmod 000000  
                ___ftsub 000000                  ___fttol 000000             __psmallconst 000000  
                __pcinit 000000               ??___awtoft 00001D               ??___ftpack 000017  
        __size_of_fround 000000                  __ramtop 000000*              ??___lltoft 00001E  
                __ptext0 000000                  __ptext1 000000                  __ptext2 000000  
                __ptext3 000000                  __ptext4 000000                  __ptext5 000000  
                __ptext6 000000                  __ptext7 000000                  __ptext8 000000  
                __ptext9 000000               ??___lwtoft 00001D                _T0CONbits 000FD5  
  __size_of_lcd_ubicarXY 000000              ?__div_to_l_ 000012                  _dpowers 000001  
                _isdigit 000000         ___awmod@dividend 000012             _lcd_caracter 000000  
                main@an0 00003A                  main@an1 00003C                  _sprintf 000000  
                main@str 000041           __pintcode_body 000000     end_of_initialization 00000C  
          __Lmediumconst 000000*    wait_in_ms@time_in_ms 000011                  int_func 000000  
        ___lldiv@divisor 000016          ___lldiv@counter 00001E                  postdec2 000FDD  
           _lcd_ubicarXY 000000                  postinc0 000FEE                  postinc2 000FDE  
             _wait_in_ms 000000           __tdiv_to_l_@f1 000012           __tdiv_to_l_@f2 000015  
          ??__tdiv_to_l_ 000018                _PORTAbits 000F80                _PORTDbits 000F83  
              _TRISAbits 000F92                _TRISBbits 000F93                _TRISDbits 000F95  
            ?_lcd_origen 000000           __end_of_ADCint 0000CE              ___ftdiv@exp 000004  
          ??_configBoard 000012            ??_lcd_iniciar 000042      __size_of__div_to_l_ 000000  
          ??_lcd_limpiar 000042              ___ftmul@exp 00002F        lcd_ubicarXY@i_695 000029  
      lcd_ubicarXY@linea 00002A           __end_of___ftge 000090           __end_of___wmul 000026  
         __end_of_fround 000252      start_initialization 000000      __end_of__tdiv_to_l_ 000132  
        wait_in_ms@count 000017                 ??_ADCint 000000          ___llmod@divisor 000016  
        ___llmod@counter 00001A       wait_in_ms@count_ms 000019                 ??___ftge 000018  
               ??___wmul 000024      __end_of_configBoard 0000B0      __size_of_lcd_origen 000000  
            ?_wait_in_ms 000011      __end_of_lcd_iniciar 0000E6                 ??_fround 000038  
    __end_of_lcd_limpiar 00001E            sprintf@tmpval 000027               fround@prec 00003E  
      __size_of___awtoft 000000        __size_of___ftpack 000000        __size_of___lltoft 000000  
            __pbssCOMRAM 000000        __size_of___lwtoft 000000            __pcstackBANK0 000000  
           _isdigit$1222 000013              sprintf@flag 00002D              sprintf@fval 000031  
            sprintf@prec 000034                __pintcode 000000                 ?___awdiv 000018  
               ?___ftadd 000000                 ?___awmod 000012                 ?___ftdiv 000035  
               ?___ftneg 000012                 ?___lldiv 000012                 ?___ftmul 000026  
               ?___llmod 000012                 ?___ftsub 000009                __npowers_ 000050  
               ?___fttol 00003E                _lcd_orden 000000              __tdiv_to_l_ 000000  
              _lcd_texto 000000                _lcd_pulso 000000             ??__div_to_l_ 000018  
            __smallconst 000000*                ?_isdigit 000000                 _ADC_Read 000000* 
               ?_sprintf 000011           __size_of_scale 000000      __size_of_wait_in_ms 000000  
         ___wmul@product 000024              _configBoard 000000                 _PIE1bits 000F9D  
            _lcd_iniciar 000000                 _PIR1bits 000F9E       __end_of__div_to_l_ 000128  
            _lcd_limpiar 000000               ?_lcd_orden 00001B               ?_lcd_texto 000022  
             ?_lcd_pulso 000000               _ADCON0bits 000FC2               _ADCON1bits 000FC1  
             _ADCON2bits 000FC0        ___wmul@multiplier 000020             ??_lcd_origen 000042  
            _INTCON2bits 000FF1              _INTCON3bits 000FF0           wait_in_ms@flag 000015  
               __Hrparam 000000*                __Lrparam 000000*      __end_of_lcd_origen 00001E  
       __size_of___awdiv 000000         __size_of___ftadd 000000         __size_of___awmod 000000  
       __size_of___ftdiv 000000         __size_of___ftneg 000000         __size_of___lldiv 000000  
       __size_of___ftmul 000000         __size_of___llmod 000000         __size_of___ftsub 000000  
       __size_of___fttol 000000                 ___awtoft 000000                 ___ftpack 000000  
            _fround$1578 00003B              _fround$1579 000038                 ___lltoft 000000  
               ___lwtoft 000000               sprintf@exp 00002B               sprintf@val 000023  
       __size_of_isdigit 000000                 __ptext10 000000                 __ptext11 000000  
               __ptext20 000000                 __ptext12 000000                 __ptext21 000000  
               __ptext13 000000                 __ptext30 000000                 __ptext22 000000  
               __ptext14 000000                 __ptext31 000000                 __ptext23 000000  
               __ptext15 000000                 __ptext32 000000                 __ptext24 000000  
               __ptext16 000000                 __ptext25 000000                 __ptext17 000000  
               __ptext26 000000                 __ptext18 000000                 __ptext27 000000  
               __ptext19 000000                 __ptext28 000000                 __ptext29 000000  
               __powers_ 000029          lcd_texto@cadena 000022                 _int0flag 000008  
               _int1flag 000006                 _int2flag 000004         __size_of_sprintf 000000  
               _pir1flag 000002            __size_of_main 000000                 int$flags 000000  
           ??_wait_in_ms 000013              ??_lcd_orden 00001D              ??_lcd_texto 000024  
            ??_lcd_pulso 000042    __CFG_CPUDIV$OSC1_PLL2 000000               _INTCONbits 000FF2  
               isdigit@c 000014                 scale@scl 00003B                 intlevel2 000000* 
              sprintf@ap 000021         __tdiv_to_l_@exp1 000020         __tdiv_to_l_@cntr 00001F  
              sprintf@sp 000011         __tdiv_to_l_@quot 00001B       __end_of_wait_in_ms 0000D0  
       ___lldiv@dividend 000012             ?__tdiv_to_l_ 000012                 sprintf@c 000036  
               sprintf@f 000013         ___lldiv@quotient 00001A            ?_lcd_caracter 00001B  
     __CFG_FOSC$HSPLL_HS 000000             ?_configBoard 000000             ?_lcd_iniciar 000000  
        main@voltaje_an0 00003E          main@voltaje_an1 000037             ?_lcd_limpiar 000000  
