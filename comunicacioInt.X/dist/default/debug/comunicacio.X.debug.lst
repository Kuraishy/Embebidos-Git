

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Mar 15 17:22:17 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=2
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=2
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=2
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    38                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    39                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    40  0000                     
    41                           ; Version 1.45
    42                           ; Generated 16/11/2017 GMT
    43                           ; 
    44                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    45                           ; All rights reserved.
    46                           ; 
    47                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    48                           ; 
    49                           ; Redistribution and use in source and binary forms, with or without modification, are
    50                           ; permitted provided that the following conditions are met:
    51                           ; 
    52                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    53                           ;        conditions and the following disclaimer.
    54                           ; 
    55                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    56                           ;        of conditions and the following disclaimer in the documentation and/or other
    57                           ;        materials provided with the distribution.
    58                           ; 
    59                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    60                           ;        software without specific prior written permission.
    61                           ; 
    62                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    63                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    64                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    65                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    66                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    67                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    68                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    69                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    70                           ; 
    71                           ; 
    72                           ; Code-generator required, PIC18F4550 Definitions
    73                           ; 
    74                           ; SFR Addresses
    75  0000                     
    76                           	psect	idataCOMRAM
    77  0013EE                     __pidataCOMRAM:
    78                           	opt stack 0
    79                           
    80                           ;initializer for _nivel
    81  0013EE  07                 	db	7
    82  0000                     _PORTCbits	set	3970
    83  0000                     _TRISC	set	3988
    84  0000                     _PORTD	set	3971
    85  0000                     _PORTDbits	set	3971
    86  0000                     _TRISDbits	set	3989
    87  0000                     _PORTA	set	3968
    88  0000                     _TRISD	set	3989
    89  0000                     _TRISAbits	set	3986
    90  0000                     _TRISB	set	3987
    91  0000                     _TRISA	set	3986
    92  0000                     _TRISC7	set	31911
    93  0000                     _TRISC6	set	31910
    94  0000                     _OSCCON	set	4051
    95  0000                     _RCREG	set	4014
    96  0000                     _TXREG	set	4013
    97  0000                     _RCSTA	set	4011
    98  0000                     _TXSTA	set	4012
    99  0000                     _SPBRG	set	4015
   100  0000                     _ADRESL	set	4035
   101  0000                     _ADRESH	set	4036
   102  0000                     _PIR1bits	set	3998
   103  0000                     _PIE1bits	set	3997
   104  0000                     _ADCON2bits	set	4032
   105  0000                     _ADCON0bits	set	4034
   106  0000                     _ADCON0	set	4034
   107  0000                     _ADCON1bits	set	4033
   108  0000                     _RCIF	set	31989
   109  0000                     _TXIF	set	31988
   110  0000                     _T0CONbits	set	4053
   111  0000                     _TMR0L	set	4054
   112  0000                     _TMR0ON	set	32431
   113  0000                     _T08BIT	set	32430
   114  0000                     _INTCONbits	set	4082
   115  0000                     _TMR0IF	set	32658
   116                           
   117                           	psect	smallconst
   118  000800                     __psmallconst:
   119                           	opt stack 0
   120  000800  00                 	db	0
   121  000801                     STR_1:
   122  000801  6F                 	db	111	;'o'
   123  000802  6E                 	db	110	;'n'
   124  000803  00                 	db	0
   125                           
   126                           ; #config settings
   127  000804  00                 	db	0	; dummy byte at the end
   128  0000                     
   129                           	psect	cinit
   130  0012D4                     __pcinit:
   131                           	opt stack 0
   132  0012D4                     start_initialization:
   133                           	opt stack 0
   134  0012D4                     __initialization:
   135                           	opt stack 0
   136                           
   137                           ; Initialize objects allocated to COMRAM (1 bytes)
   138                           ; load TBLPTR registers with __pidataCOMRAM
   139  0012D4  0EEE               	movlw	low __pidataCOMRAM
   140  0012D6  6EF6               	movwf	tblptrl,c
   141  0012D8  0E13               	movlw	high __pidataCOMRAM
   142  0012DA  6EF7               	movwf	tblptrh,c
   143  0012DC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   144  0012DE  6EF8               	movwf	tblptru,c
   145  0012E0  0009               	tblrd		*+	;fetch initializer
   146  0012E2  CFF5 F041          	movff	tablat,__pdataCOMRAM
   147                           
   148                           ; Clear objects allocated to COMRAM (18 bytes)
   149  0012E6  EE00  F02F         	lfsr	0,__pbssCOMRAM
   150  0012EA  0E12               	movlw	18
   151  0012EC                     clear_0:
   152  0012EC  6AEE               	clrf	postinc0,c
   153  0012EE  06E8               	decf	wreg,f,c
   154  0012F0  E1FD               	bnz	clear_0
   155  0012F2                     end_of_initialization:
   156                           	opt stack 0
   157  0012F2                     __end_of__initialization:
   158                           	opt stack 0
   159  0012F2  9042               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   160  0012F4  9242               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   161  0012F6  0E00               	movlw	low (__Lsmallconst shr (0+16))
   162  0012F8  6EF8               	movwf	tblptru,c
   163  0012FA  0E08               	movlw	high __Lsmallconst
   164  0012FC  6EF7               	movwf	tblptrh,c
   165  0012FE  0100               	movlb	0
   166  001300  EFA3  F007         	goto	_main	;jump to C main() function
   167                           tblptru	equ	0xFF8
   168                           tblptrh	equ	0xFF7
   169                           tblptrl	equ	0xFF6
   170                           tablat	equ	0xFF5
   171                           postinc0	equ	0xFEE
   172                           wreg	equ	0xFE8
   173                           
   174                           	psect	bssCOMRAM
   175  00002F                     __pbssCOMRAM:
   176                           	opt stack 0
   177  00002F                     _puntuacion:
   178                           	opt stack 0
   179  00002F                     	ds	2
   180  000031                     	ds	1
   181  000032                     _cantidadBotones:
   182                           	opt stack 0
   183  000032                     	ds	1
   184  000033                     _presionoBoton:
   185                           	opt stack 0
   186  000033                     	ds	1
   187  000034                     _numTopos:
   188                           	opt stack 0
   189  000034                     	ds	1
   190  000035                     _dataIn:
   191                           	opt stack 0
   192  000035                     	ds	12
   193                           tblptru	equ	0xFF8
   194                           tblptrh	equ	0xFF7
   195                           tblptrl	equ	0xFF6
   196                           tablat	equ	0xFF5
   197                           postinc0	equ	0xFEE
   198                           wreg	equ	0xFE8
   199                           
   200                           	psect	dataCOMRAM
   201  000041                     __pdataCOMRAM:
   202                           	opt stack 0
   203  000041                     _nivel:
   204                           	opt stack 0
   205  000041                     	ds	1
   206                           tblptru	equ	0xFF8
   207                           tblptrh	equ	0xFF7
   208                           tblptrl	equ	0xFF6
   209                           tablat	equ	0xFF5
   210                           postinc0	equ	0xFEE
   211                           wreg	equ	0xFE8
   212                           
   213                           	psect	cstackBANK0
   214  000060                     __pcstackBANK0:
   215                           	opt stack 0
   216  000060                     ___altoft@exp:
   217                           	opt stack 0
   218                           
   219                           ; 1 bytes @ 0x0
   220  000060                     	ds	1
   221  000061                     ___altoft@sign:
   222                           	opt stack 0
   223                           
   224                           ; 1 bytes @ 0x1
   225  000061                     	ds	1
   226  000062                     ?___ftdiv:
   227                           	opt stack 0
   228  000062                     ___ftdiv@f1:
   229                           	opt stack 0
   230                           
   231                           ; 3 bytes @ 0x2
   232  000062                     	ds	3
   233  000065                     ___ftdiv@f2:
   234                           	opt stack 0
   235                           
   236                           ; 3 bytes @ 0x5
   237  000065                     	ds	3
   238  000068                     ??___ftdiv:
   239                           
   240                           ; 1 bytes @ 0x8
   241  000068                     	ds	3
   242  00006B                     ___ftdiv@cntr:
   243                           	opt stack 0
   244                           
   245                           ; 1 bytes @ 0xB
   246  00006B                     	ds	1
   247  00006C                     ___ftdiv@f3:
   248                           	opt stack 0
   249                           
   250                           ; 3 bytes @ 0xC
   251  00006C                     	ds	3
   252  00006F                     ___ftdiv@exp:
   253                           	opt stack 0
   254                           
   255                           ; 1 bytes @ 0xF
   256  00006F                     	ds	1
   257  000070                     ___ftdiv@sign:
   258                           	opt stack 0
   259                           
   260                           ; 1 bytes @ 0x10
   261  000070                     	ds	1
   262  000071                     ?___ftadd:
   263                           	opt stack 0
   264  000071                     ?___fttol:
   265                           	opt stack 0
   266  000071                     ___ftadd@f1:
   267                           	opt stack 0
   268  000071                     ___fttol@f1:
   269                           	opt stack 0
   270                           
   271                           ; 3 bytes @ 0x11
   272  000071                     	ds	3
   273  000074                     ___ftadd@f2:
   274                           	opt stack 0
   275                           
   276                           ; 3 bytes @ 0x14
   277  000074                     	ds	1
   278  000075                     ??___fttol:
   279                           
   280                           ; 1 bytes @ 0x15
   281  000075                     	ds	2
   282  000077                     ??___ftadd:
   283                           
   284                           ; 1 bytes @ 0x17
   285  000077                     	ds	3
   286  00007A                     ___ftadd@sign:
   287                           	opt stack 0
   288  00007A                     ___fttol@sign1:
   289                           	opt stack 0
   290                           
   291                           ; 1 bytes @ 0x1A
   292  00007A                     	ds	1
   293  00007B                     ___ftadd@exp2:
   294                           	opt stack 0
   295  00007B                     ___fttol@lval:
   296                           	opt stack 0
   297                           
   298                           ; 4 bytes @ 0x1B
   299  00007B                     	ds	1
   300  00007C                     ___ftadd@exp1:
   301                           	opt stack 0
   302                           
   303                           ; 1 bytes @ 0x1C
   304  00007C                     	ds	3
   305  00007F                     ___fttol@exp1:
   306                           	opt stack 0
   307                           
   308                           ; 1 bytes @ 0x1F
   309  00007F                     	ds	1
   310  000080                     wait_in_ms@time_in_ms:
   311                           	opt stack 0
   312  000080                     USART_Init@baud_rate:
   313                           	opt stack 0
   314                           
   315                           ; 4 bytes @ 0x20
   316  000080                     	ds	2
   317  000082                     ??_wait_in_ms:
   318                           
   319                           ; 1 bytes @ 0x22
   320  000082                     	ds	2
   321  000084                     wait_in_ms@flag:
   322                           	opt stack 0
   323  000084                     USART_Init@temp:
   324                           	opt stack 0
   325                           
   326                           ; 3 bytes @ 0x24
   327  000084                     	ds	2
   328  000086                     wait_in_ms@count:
   329                           	opt stack 0
   330                           
   331                           ; 2 bytes @ 0x26
   332  000086                     	ds	2
   333  000088                     wait_in_ms@count_ms:
   334                           	opt stack 0
   335                           
   336                           ; 2 bytes @ 0x28
   337  000088                     	ds	2
   338  00008A                     lcd_orden@orden:
   339                           	opt stack 0
   340  00008A                     lcd_caracter@caracter:
   341                           	opt stack 0
   342                           
   343                           ; 2 bytes @ 0x2A
   344  00008A                     	ds	2
   345  00008C                     ??_lcd_orden:
   346  00008C                     ??_lcd_caracter:
   347                           
   348                           ; 1 bytes @ 0x2C
   349  00008C                     	ds	5
   350  000091                     lcd_texto@cadena:
   351                           	opt stack 0
   352                           
   353                           ; 2 bytes @ 0x31
   354  000091                     	ds	2
   355                           tblptru	equ	0xFF8
   356                           tblptrh	equ	0xFF7
   357                           tblptrl	equ	0xFF6
   358                           tablat	equ	0xFF5
   359                           postinc0	equ	0xFEE
   360                           wreg	equ	0xFE8
   361                           
   362                           	psect	cstackCOMRAM
   363  000001                     __pcstackCOMRAM:
   364                           	opt stack 0
   365  000001                     USART_test@Input:
   366                           	opt stack 0
   367                           
   368                           ; 2 bytes @ 0x0
   369  000001                     	ds	2
   370  000003                     USART_test@length:
   371                           	opt stack 0
   372                           
   373                           ; 1 bytes @ 0x2
   374  000003                     	ds	1
   375  000004                     ??_USART_test:
   376                           
   377                           ; 1 bytes @ 0x3
   378  000004                     	ds	5
   379  000009                     USART_test@i:
   380                           	opt stack 0
   381                           
   382                           ; 2 bytes @ 0x8
   383  000009                     	ds	2
   384  00000B                     USART_test@temp:
   385                           	opt stack 0
   386                           
   387                           ; 1 bytes @ 0xA
   388  00000B                     	ds	1
   389  00000C                     ??_interrupcion:
   390                           
   391                           ; 1 bytes @ 0xB
   392  00000C                     	ds	18
   393  00001E                     ?_strcmp:
   394                           	opt stack 0
   395  00001E                     ?___ftpack:
   396                           	opt stack 0
   397  00001E                     USART_TransmitChar@out:
   398                           	opt stack 0
   399  00001E                     MSdelay@val:
   400                           	opt stack 0
   401  00001E                     memset@p1:
   402                           	opt stack 0
   403  00001E                     strcmp@s1:
   404                           	opt stack 0
   405  00001E                     ___ftpack@arg:
   406                           	opt stack 0
   407                           
   408                           ; 3 bytes @ 0x1D
   409  00001E                     	ds	1
   410  00001F                     USART_SendString@out:
   411                           	opt stack 0
   412                           
   413                           ; 2 bytes @ 0x1E
   414  00001F                     	ds	1
   415  000020                     MSdelay@i:
   416                           	opt stack 0
   417  000020                     memset@c:
   418                           	opt stack 0
   419  000020                     strcmp@s2:
   420                           	opt stack 0
   421                           
   422                           ; 2 bytes @ 0x1F
   423  000020                     	ds	1
   424  000021                     ___ftpack@exp:
   425                           	opt stack 0
   426                           
   427                           ; 1 bytes @ 0x20
   428  000021                     	ds	1
   429  000022                     ??_strcmp:
   430  000022                     ___ftpack@sign:
   431                           	opt stack 0
   432  000022                     MSdelay@j:
   433                           	opt stack 0
   434  000022                     memset@n:
   435                           	opt stack 0
   436                           
   437                           ; 2 bytes @ 0x21
   438  000022                     	ds	1
   439  000023                     ??___ftpack:
   440  000023                     strcmp@r:
   441                           	opt stack 0
   442                           
   443                           ; 1 bytes @ 0x22
   444  000023                     	ds	1
   445  000024                     memset@p:
   446                           	opt stack 0
   447                           
   448                           ; 2 bytes @ 0x23
   449  000024                     	ds	2
   450  000026                     ?___altoft:
   451                           	opt stack 0
   452  000026                     ?___awtoft:
   453                           	opt stack 0
   454  000026                     ___awtoft@c:
   455                           	opt stack 0
   456  000026                     ___altoft@c:
   457                           	opt stack 0
   458                           
   459                           ; 4 bytes @ 0x25
   460  000026                     	ds	3
   461  000029                     ___awtoft@sign:
   462                           	opt stack 0
   463                           
   464                           ; 1 bytes @ 0x28
   465  000029                     	ds	1
   466  00002A                     ??___altoft:
   467                           
   468                           ; 1 bytes @ 0x29
   469  00002A                     	ds	4
   470  00002E                     ??_lcd_texto:
   471  00002E                     
   472                           ; 1 bytes @ 0x2D
   473  00002E                     	ds	1
   474  00002F                     tblptru	equ	0xFF8
   475                           tblptrh	equ	0xFF7
   476                           tblptrl	equ	0xFF6
   477                           tablat	equ	0xFF5
   478                           postinc0	equ	0xFEE
   479                           wreg	equ	0xFE8
   480                           
   481                           ; 1 bytes @ 0x2E
   482 ;;
   483 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   484 ;;
   485 ;; *************** function _main *****************
   486 ;; Defined at:
   487 ;;		line 32 in file "comuni.c"
   488 ;; Parameters:    Size  Location     Type
   489 ;;		None
   490 ;; Auto vars:     Size  Location     Type
   491 ;;		None
   492 ;; Return value:  Size  Location     Type
   493 ;;                  1    wreg      void 
   494 ;; Registers used:
   495 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   496 ;; Tracked objects:
   497 ;;		On entry : 0/0
   498 ;;		On exit  : 0/0
   499 ;;		Unchanged: 0/0
   500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   501 ;;      Params:         0       0       0       0       0       0       0       0       0
   502 ;;      Locals:         0       0       0       0       0       0       0       0       0
   503 ;;      Temps:          0       0       0       0       0       0       0       0       0
   504 ;;      Totals:         0       0       0       0       0       0       0       0       0
   505 ;;Total ram usage:        0 bytes
   506 ;; Hardware stack levels required when called:    8
   507 ;; This function calls:
   508 ;;		_MSdelay
   509 ;;		_USART_Init
   510 ;;		_USART_SendString
   511 ;;		_configBoard
   512 ;;		_lcd_iniciar
   513 ;;		_lcd_limpiar
   514 ;;		_lcd_origen
   515 ;;		_lcd_texto
   516 ;;		_memset
   517 ;;		_strcmp
   518 ;; This function is called by:
   519 ;;		Startup code after reset
   520 ;; This function uses a non-reentrant model
   521 ;;
   522                           
   523                           	psect	text0
   524  000F46                     __ptext0:
   525                           	opt stack 0
   526  000F46                     _main:
   527                           	opt stack 23
   528                           
   529                           ;comuni.c: 34: OSCCON=0x72;
   530                           
   531                           ;incstack = 0
   532  000F46  0E72               	movlw	114
   533  000F48  6ED3               	movwf	4051,c	;volatile
   534                           
   535                           ;comuni.c: 35: TRISC=0;
   536  000F4A  0E00               	movlw	0
   537  000F4C  6E94               	movwf	3988,c	;volatile
   538                           
   539                           ;comuni.c: 36: configBoard();
   540  000F4E  EC6A  F008         	call	_configBoard	;wreg free
   541                           
   542                           ;comuni.c: 37: lcd_iniciar();
   543  000F52  ECCA  F005         	call	_lcd_iniciar	;wreg free
   544                           
   545                           ;comuni.c: 38: USART_Init(9600);
   546  000F56  0E80               	movlw	128
   547  000F58  0100               	movlb	0	; () banked
   548  000F5A  6F80               	movwf	USART_Init@baud_rate& (0+255),b
   549  000F5C  0E25               	movlw	37
   550  000F5E  6F81               	movwf	(USART_Init@baud_rate+1)& (0+255),b
   551  000F60  0E00               	movlw	0
   552  000F62  6F82               	movwf	(USART_Init@baud_rate+2)& (0+255),b
   553  000F64  0E00               	movlw	0
   554  000F66  6F83               	movwf	(USART_Init@baud_rate+3)& (0+255),b
   555  000F68  ECED  F007         	call	_USART_Init	;wreg free
   556                           
   557                           ;comuni.c: 39: MSdelay(50);
   558  000F6C  0E00               	movlw	0
   559  000F6E  6E1F               	movwf	MSdelay@val+1,c
   560  000F70  0E32               	movlw	50
   561  000F72  6E1E               	movwf	MSdelay@val,c
   562  000F74  EC4F  F009         	call	_MSdelay	;wreg free
   563  000F78                     
   564                           ;comuni.c: 41: lcd_origen();
   565  000F78  ECD3  F009         	call	_lcd_origen	;wreg free
   566                           
   567                           ;comuni.c: 45: USART_SendString(dataIn);
   568  000F7C  0E35               	movlw	low _dataIn
   569  000F7E  6E1F               	movwf	USART_SendString@out,c
   570  000F80  0E00               	movlw	high _dataIn
   571  000F82  6E20               	movwf	USART_SendString@out+1,c
   572  000F84  ECB0  F009         	call	_USART_SendString	;wreg free
   573                           
   574                           ;comuni.c: 46: lcd_limpiar();
   575  000F88  ECE2  F009         	call	_lcd_limpiar	;wreg free
   576                           
   577                           ;comuni.c: 47: lcd_texto(dataIn);
   578  000F8C  0E35               	movlw	low _dataIn
   579  000F8E  0100               	movlb	0	; () banked
   580  000F90  6F91               	movwf	lcd_texto@cadena& (0+255),b
   581  000F92  0E00               	movlw	high _dataIn
   582  000F94  6F92               	movwf	(lcd_texto@cadena+1)& (0+255),b
   583  000F96  EC82  F009         	call	_lcd_texto	;wreg free
   584                           
   585                           ;comuni.c: 48: if(!strcmp("on",dataIn)){
   586  000F9A  0E01               	movlw	low STR_1
   587  000F9C  6E1E               	movwf	strcmp@s1,c
   588  000F9E  0E08               	movlw	high STR_1
   589  000FA0  6E1F               	movwf	strcmp@s1+1,c
   590  000FA2  0E35               	movlw	low _dataIn
   591  000FA4  6E20               	movwf	strcmp@s2,c
   592  000FA6  0E00               	movlw	high _dataIn
   593  000FA8  6E21               	movwf	strcmp@s2+1,c
   594  000FAA  EC0D  F009         	call	_strcmp	;wreg free
   595  000FAE  501E               	movf	?_strcmp,w,c
   596  000FB0  101F               	iorwf	?_strcmp+1,w,c
   597  000FB2  A4D8               	btfss	status,2,c
   598  000FB4  D002               	goto	l263
   599                           
   600                           ;comuni.c: 49: PORTCbits.RC2=1;
   601  000FB6  8482               	bsf	3970,2,c	;volatile
   602                           
   603                           ;comuni.c: 50: }
   604  000FB8  D001               	goto	l264
   605  000FBA                     l263:
   606                           
   607                           ;comuni.c: 51: else{
   608                           ;comuni.c: 52: PORTCbits.RC2=0;
   609  000FBA  9482               	bcf	3970,2,c	;volatile
   610  000FBC                     l264:
   611                           
   612                           ;comuni.c: 53: }
   613                           ;comuni.c: 54: memset(dataIn, 0, sizeof dataIn);
   614  000FBC  0E35               	movlw	low _dataIn
   615  000FBE  6E1E               	movwf	memset@p1,c
   616  000FC0  0E00               	movlw	high _dataIn
   617  000FC2  6E1F               	movwf	memset@p1+1,c
   618  000FC4  0E00               	movlw	0
   619  000FC6  6E21               	movwf	memset@c+1,c
   620  000FC8  0E00               	movlw	0
   621  000FCA  6E20               	movwf	memset@c,c
   622  000FCC  0E00               	movlw	0
   623  000FCE  6E23               	movwf	memset@n+1,c
   624  000FD0  0E0C               	movlw	12
   625  000FD2  6E22               	movwf	memset@n,c
   626  000FD4  EC9A  F009         	call	_memset	;wreg free
   627  000FD8  D7CF               	goto	l262
   628  000FDA                     __end_of_main:
   629                           	opt stack 0
   630                           tblptru	equ	0xFF8
   631                           tblptrh	equ	0xFF7
   632                           tblptrl	equ	0xFF6
   633                           tablat	equ	0xFF5
   634                           postinc0	equ	0xFEE
   635                           wreg	equ	0xFE8
   636                           status	equ	0xFD8
   637                           
   638 ;; *************** function _strcmp *****************
   639 ;; Defined at:
   640 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcmp.c"
   641 ;; Parameters:    Size  Location     Type
   642 ;;  s1              2   29[COMRAM] PTR const unsigned char 
   643 ;;		 -> STR_1(3), 
   644 ;;  s2              2   31[COMRAM] PTR const unsigned char 
   645 ;;		 -> dataIn(12), 
   646 ;; Auto vars:     Size  Location     Type
   647 ;;  r               1   34[COMRAM] char 
   648 ;; Return value:  Size  Location     Type
   649 ;;                  2   29[COMRAM] int 
   650 ;; Registers used:
   651 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
   652 ;; Tracked objects:
   653 ;;		On entry : 0/0
   654 ;;		On exit  : 0/0
   655 ;;		Unchanged: 0/0
   656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   657 ;;      Params:         4       0       0       0       0       0       0       0       0
   658 ;;      Locals:         1       0       0       0       0       0       0       0       0
   659 ;;      Temps:          1       0       0       0       0       0       0       0       0
   660 ;;      Totals:         6       0       0       0       0       0       0       0       0
   661 ;;Total ram usage:        6 bytes
   662 ;; Hardware stack levels used:    1
   663 ;; Hardware stack levels required when called:    2
   664 ;; This function calls:
   665 ;;		Nothing
   666 ;; This function is called by:
   667 ;;		_main
   668 ;; This function uses a non-reentrant model
   669 ;;
   670                           
   671                           	psect	text1
   672  00121A                     __ptext1:
   673                           	opt stack 0
   674  00121A                     _strcmp:
   675                           	opt stack 28
   676                           
   677                           ;incstack = 0
   678  00121A  D004               	goto	l839
   679  00121C  4A1E               	infsnz	strcmp@s1,f,c
   680  00121E  2A1F               	incf	strcmp@s1+1,f,c
   681  001220  4A20               	infsnz	strcmp@s2,f,c
   682  001222  2A21               	incf	strcmp@s2+1,f,c
   683  001224                     l839:
   684  001224  C01E  FFF6         	movff	strcmp@s1,tblptrl
   685  001228  C01F  FFF7         	movff	strcmp@s1+1,tblptrh
   686  00122C                     	if	0	;tblptru may be non-zero
   687  00122C                     	endif
   688  00122C                     	if	0	;tblptru may be non-zero
   689  00122C                     	endif
   690  00122C  0008               	tblrd		*
   691  00122E  CFF5 F022          	movff	tablat,??_strcmp
   692  001232  C020  FFD9         	movff	strcmp@s2,fsr2l
   693  001236  C021  FFDA         	movff	strcmp@s2+1,fsr2h
   694  00123A  50DF               	movf	indf2,w,c
   695  00123C  0800               	sublw	0
   696  00123E  2422               	addwf	??_strcmp,w,c
   697  001240  6E23               	movwf	strcmp@r,c
   698  001242  5023               	movf	strcmp@r,w,c
   699  001244  A4D8               	btfss	status,2,c
   700  001246  D009               	goto	u1550
   701  001248  C01E  FFF6         	movff	strcmp@s1,tblptrl
   702  00124C  C01F  FFF7         	movff	strcmp@s1+1,tblptrh
   703  001250                     	if	0	;tblptru may be non-zero
   704  001250                     	endif
   705  001250                     	if	0	;tblptru may be non-zero
   706  001250                     	endif
   707  001250  0008               	tblrd		*
   708  001252  50F5               	movf	tablat,w,c
   709  001254  0900               	iorlw	0
   710  001256  A4D8               	btfss	status,2,c
   711  001258  D7E1               	goto	l840
   712  00125A                     u1550:
   713  00125A  5023               	movf	strcmp@r,w,c
   714  00125C  6E1E               	movwf	?_strcmp,c
   715  00125E  6A1F               	clrf	?_strcmp+1,c
   716  001260  BE1E               	btfsc	?_strcmp,7,c
   717  001262  061F               	decf	?_strcmp+1,f,c
   718  001264  0012               	return	
   719  001266                     __end_of_strcmp:
   720                           	opt stack 0
   721                           tblptru	equ	0xFF8
   722                           tblptrh	equ	0xFF7
   723                           tblptrl	equ	0xFF6
   724                           tablat	equ	0xFF5
   725                           postinc0	equ	0xFEE
   726                           wreg	equ	0xFE8
   727                           indf2	equ	0xFDF
   728                           fsr2h	equ	0xFDA
   729                           fsr2l	equ	0xFD9
   730                           status	equ	0xFD8
   731                           
   732 ;; *************** function _memset *****************
   733 ;; Defined at:
   734 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
   735 ;; Parameters:    Size  Location     Type
   736 ;;  p1              2   29[COMRAM] PTR void 
   737 ;;		 -> dataIn(12), 
   738 ;;  c               2   31[COMRAM] int 
   739 ;;  n               2   33[COMRAM] unsigned int 
   740 ;; Auto vars:     Size  Location     Type
   741 ;;  p               2   35[COMRAM] PTR unsigned char 
   742 ;;		 -> dataIn(12), 
   743 ;; Return value:  Size  Location     Type
   744 ;;                  2   29[COMRAM] PTR void 
   745 ;; Registers used:
   746 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   747 ;; Tracked objects:
   748 ;;		On entry : 0/0
   749 ;;		On exit  : 0/0
   750 ;;		Unchanged: 0/0
   751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   752 ;;      Params:         6       0       0       0       0       0       0       0       0
   753 ;;      Locals:         2       0       0       0       0       0       0       0       0
   754 ;;      Temps:          0       0       0       0       0       0       0       0       0
   755 ;;      Totals:         8       0       0       0       0       0       0       0       0
   756 ;;Total ram usage:        8 bytes
   757 ;; Hardware stack levels used:    1
   758 ;; Hardware stack levels required when called:    2
   759 ;; This function calls:
   760 ;;		Nothing
   761 ;; This function is called by:
   762 ;;		_main
   763 ;; This function uses a non-reentrant model
   764 ;;
   765                           
   766                           	psect	text2
   767  001334                     __ptext2:
   768                           	opt stack 0
   769  001334                     _memset:
   770                           	opt stack 28
   771                           
   772                           ;incstack = 0
   773  001334  C01E  F024         	movff	memset@p1,memset@p
   774  001338  C01F  F025         	movff	memset@p1+1,memset@p+1
   775  00133C  D008               	goto	l713
   776  00133E                     l1869:
   777  00133E  C024  FFD9         	movff	memset@p,fsr2l
   778  001342  C025  FFDA         	movff	memset@p+1,fsr2h
   779  001346  C020  FFDF         	movff	memset@c,indf2
   780  00134A  4A24               	infsnz	memset@p,f,c
   781  00134C  2A25               	incf	memset@p+1,f,c
   782  00134E                     l713:
   783  00134E  0622               	decf	memset@n,f,c
   784  001350  A0D8               	btfss	status,0,c
   785  001352  0623               	decf	memset@n+1,f,c
   786  001354  2822               	incf	memset@n,w,c
   787  001356  E1F3               	bnz	l1869
   788  001358  2823               	incf	memset@n+1,w,c
   789  00135A  B4D8               	btfsc	status,2,c
   790  00135C  0012               	return	
   791  00135E  D7EF               	goto	l714
   792  001360                     __end_of_memset:
   793                           	opt stack 0
   794                           tblptru	equ	0xFF8
   795                           tblptrh	equ	0xFF7
   796                           tblptrl	equ	0xFF6
   797                           tablat	equ	0xFF5
   798                           postinc0	equ	0xFEE
   799                           wreg	equ	0xFE8
   800                           indf2	equ	0xFDF
   801                           fsr2h	equ	0xFDA
   802                           fsr2l	equ	0xFD9
   803                           status	equ	0xFD8
   804                           
   805 ;; *************** function _lcd_texto *****************
   806 ;; Defined at:
   807 ;;		line 296 in file "lcd.c"
   808 ;; Parameters:    Size  Location     Type
   809 ;;  cadena          2   49[BANK0 ] PTR unsigned char 
   810 ;;		 -> dataIn(12), 
   811 ;; Auto vars:     Size  Location     Type
   812 ;;		None
   813 ;; Return value:  Size  Location     Type
   814 ;;                  1    wreg      void 
   815 ;; Registers used:
   816 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   817 ;; Tracked objects:
   818 ;;		On entry : 0/0
   819 ;;		On exit  : 0/0
   820 ;;		Unchanged: 0/0
   821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   822 ;;      Params:         0       2       0       0       0       0       0       0       0
   823 ;;      Locals:         0       0       0       0       0       0       0       0       0
   824 ;;      Temps:          1       0       0       0       0       0       0       0       0
   825 ;;      Totals:         1       2       0       0       0       0       0       0       0
   826 ;;Total ram usage:        3 bytes
   827 ;; Hardware stack levels used:    1
   828 ;; Hardware stack levels required when called:    7
   829 ;; This function calls:
   830 ;;		_lcd_caracter
   831 ;; This function is called by:
   832 ;;		_main
   833 ;; This function uses a non-reentrant model
   834 ;;
   835                           
   836                           	psect	text3
   837  001304                     __ptext3:
   838                           	opt stack 0
   839  001304                     _lcd_texto:
   840                           	opt stack 23
   841                           
   842                           ;lcd.c: 297: while(*cadena != 0x00){
   843                           
   844                           ;incstack = 0
   845  001304  D00F               	goto	l119
   846  001306                     
   847                           ;lcd.c: 298: lcd_caracter(*cadena);
   848  001306  C091  FFD9         	movff	lcd_texto@cadena,fsr2l
   849  00130A  C092  FFDA         	movff	lcd_texto@cadena+1,fsr2h
   850  00130E  50DF               	movf	indf2,w,c
   851  001310  6E2E               	movwf	??_lcd_texto& (0+255),c
   852  001312  502E               	movf	??_lcd_texto,w,c
   853  001314  0100               	movlb	0	; () banked
   854  001316  6F8A               	movwf	lcd_caracter@caracter& (0+255),b
   855  001318  6B8B               	clrf	(lcd_caracter@caracter+1)& (0+255),b
   856  00131A  ECA2  F008         	call	_lcd_caracter	;wreg free
   857                           
   858                           ;lcd.c: 299: cadena++;
   859  00131E  0100               	movlb	0	; () banked
   860  001320  4B91               	infsnz	lcd_texto@cadena& (0+255),f,b
   861  001322  2B92               	incf	(lcd_texto@cadena+1)& (0+255),f,b
   862  001324                     l119:
   863                           
   864                           ; BSR set to: 0
   865  001324  C091  FFD9         	movff	lcd_texto@cadena,fsr2l
   866  001328  C092  FFDA         	movff	lcd_texto@cadena+1,fsr2h
   867  00132C  50DF               	movf	indf2,w,c
   868  00132E  B4D8               	btfsc	status,2,c
   869  001330  0012               	return	
   870  001332  D7E9               	goto	l120
   871  001334                     __end_of_lcd_texto:
   872                           	opt stack 0
   873                           tblptru	equ	0xFF8
   874                           tblptrh	equ	0xFF7
   875                           tblptrl	equ	0xFF6
   876                           tablat	equ	0xFF5
   877                           postinc0	equ	0xFEE
   878                           wreg	equ	0xFE8
   879                           indf2	equ	0xFDF
   880                           fsr2h	equ	0xFDA
   881                           fsr2l	equ	0xFD9
   882                           status	equ	0xFD8
   883                           
   884 ;; *************** function _lcd_caracter *****************
   885 ;; Defined at:
   886 ;;		line 286 in file "lcd.c"
   887 ;; Parameters:    Size  Location     Type
   888 ;;  caracter        2   42[BANK0 ] unsigned int 
   889 ;; Auto vars:     Size  Location     Type
   890 ;;		None
   891 ;; Return value:  Size  Location     Type
   892 ;;                  1    wreg      void 
   893 ;; Registers used:
   894 ;;		wreg, status,2, status,0, cstack
   895 ;; Tracked objects:
   896 ;;		On entry : 0/0
   897 ;;		On exit  : 0/0
   898 ;;		Unchanged: 0/0
   899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   900 ;;      Params:         0       2       0       0       0       0       0       0       0
   901 ;;      Locals:         0       0       0       0       0       0       0       0       0
   902 ;;      Temps:          0       5       0       0       0       0       0       0       0
   903 ;;      Totals:         0       7       0       0       0       0       0       0       0
   904 ;;Total ram usage:        7 bytes
   905 ;; Hardware stack levels used:    1
   906 ;; Hardware stack levels required when called:    6
   907 ;; This function calls:
   908 ;;		_lcd_pulso
   909 ;; This function is called by:
   910 ;;		_lcd_texto
   911 ;; This function uses a non-reentrant model
   912 ;;
   913                           
   914                           	psect	text4
   915  001144                     __ptext4:
   916                           	opt stack 0
   917  001144                     _lcd_caracter:
   918                           	opt stack 23
   919                           
   920                           ;lcd.c: 287: PORTDbits.RD1=1;
   921                           
   922                           ;incstack = 0
   923  001144  8283               	bsf	3971,1,c	;volatile
   924                           
   925                           ;lcd.c: 289: PORTD=(((((PORTD>>4&0x0f)|0x0f)&(caracter>>4&0x0f))<<4)|(PORTD&0x0f));
   926  001146  CF83 F08C          	movff	3971,??_lcd_caracter	;volatile
   927  00114A  0E0F               	movlw	15
   928  00114C  0100               	movlb	0	; () banked
   929  00114E  178C               	andwf	??_lcd_caracter& (0+255),f,b
   930  001150  C08A  F08D         	movff	lcd_caracter@caracter,??_lcd_caracter+1
   931  001154  C08B  F08E         	movff	lcd_caracter@caracter+1,??_lcd_caracter+2
   932  001158  0E04               	movlw	4
   933  00115A  6F8F               	movwf	(??_lcd_caracter+3)& (0+255),b
   934  00115C                     u2015:
   935  00115C  90D8               	bcf	status,0,c
   936  00115E  338E               	rrcf	(??_lcd_caracter+2)& (0+255),f,b
   937  001160  338D               	rrcf	(??_lcd_caracter+1)& (0+255),f,b
   938  001162  2F8F               	decfsz	(??_lcd_caracter+3)& (0+255),f,b
   939  001164  D7FB               	goto	u2015
   940  001166  0E0F               	movlw	15
   941  001168  178D               	andwf	(??_lcd_caracter+1)& (0+255),f,b
   942  00116A  3883               	swapf	3971,w,c	;volatile
   943  00116C  0B0F               	andlw	15
   944  00116E  0B0F               	andlw	15
   945  001170  090F               	iorlw	15
   946  001172  158D               	andwf	(??_lcd_caracter+1)& (0+255),w,b
   947  001174  6F90               	movwf	(??_lcd_caracter+4)& (0+255),b
   948  001176  3990               	swapf	(??_lcd_caracter+4)& (0+255),w,b
   949  001178  0BF0               	andlw	240
   950  00117A  118C               	iorwf	??_lcd_caracter& (0+255),w,b
   951  00117C  6E83               	movwf	3971,c	;volatile
   952                           
   953                           ; BSR set to: 0
   954                           ;lcd.c: 290: lcd_pulso();
   955  00117E  ECC2  F009         	call	_lcd_pulso	;wreg free
   956                           
   957                           ;lcd.c: 291: PORTD=(((((PORTD>>4&0x0f)|0x0f)&(caracter&0x0f))<<4)|(PORTD&0x0f));
   958  001182  CF83 F08C          	movff	3971,??_lcd_caracter	;volatile
   959  001186  0E0F               	movlw	15
   960  001188  0100               	movlb	0	; () banked
   961  00118A  178C               	andwf	??_lcd_caracter& (0+255),f,b
   962  00118C  C08A  F08D         	movff	lcd_caracter@caracter,??_lcd_caracter+1
   963  001190  0E0F               	movlw	15
   964  001192  178D               	andwf	(??_lcd_caracter+1)& (0+255),f,b
   965  001194  3883               	swapf	3971,w,c	;volatile
   966  001196  0B0F               	andlw	15
   967  001198  0B0F               	andlw	15
   968  00119A  090F               	iorlw	15
   969  00119C  158D               	andwf	(??_lcd_caracter+1)& (0+255),w,b
   970  00119E  6F8E               	movwf	(??_lcd_caracter+2)& (0+255),b
   971  0011A0  398E               	swapf	(??_lcd_caracter+2)& (0+255),w,b
   972  0011A2  0BF0               	andlw	240
   973  0011A4  118C               	iorwf	??_lcd_caracter& (0+255),w,b
   974  0011A6  6E83               	movwf	3971,c	;volatile
   975                           
   976                           ;lcd.c: 292: lcd_pulso();
   977  0011A8  ECC2  F009         	call	_lcd_pulso	;wreg free
   978                           
   979                           ;lcd.c: 293: PORTDbits.RD1=0;
   980  0011AC  9283               	bcf	3971,1,c	;volatile
   981  0011AE  0012               	return		;funcret
   982  0011B0                     __end_of_lcd_caracter:
   983                           	opt stack 0
   984                           tblptru	equ	0xFF8
   985                           tblptrh	equ	0xFF7
   986                           tblptrl	equ	0xFF6
   987                           tablat	equ	0xFF5
   988                           postinc0	equ	0xFEE
   989                           wreg	equ	0xFE8
   990                           indf2	equ	0xFDF
   991                           fsr2h	equ	0xFDA
   992                           fsr2l	equ	0xFD9
   993                           status	equ	0xFD8
   994                           
   995 ;; *************** function _lcd_origen *****************
   996 ;; Defined at:
   997 ;;		line 308 in file "lcd.c"
   998 ;; Parameters:    Size  Location     Type
   999 ;;		None
  1000 ;; Auto vars:     Size  Location     Type
  1001 ;;		None
  1002 ;; Return value:  Size  Location     Type
  1003 ;;                  1    wreg      void 
  1004 ;; Registers used:
  1005 ;;		wreg, status,2, status,0, cstack
  1006 ;; Tracked objects:
  1007 ;;		On entry : 0/0
  1008 ;;		On exit  : 0/0
  1009 ;;		Unchanged: 0/0
  1010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1011 ;;      Params:         0       0       0       0       0       0       0       0       0
  1012 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1013 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1014 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1015 ;;Total ram usage:        0 bytes
  1016 ;; Hardware stack levels used:    1
  1017 ;; Hardware stack levels required when called:    7
  1018 ;; This function calls:
  1019 ;;		_lcd_orden
  1020 ;;		_wait_in_ms
  1021 ;; This function is called by:
  1022 ;;		_main
  1023 ;;		_lcd_ubicarXY
  1024 ;; This function uses a non-reentrant model
  1025 ;;
  1026                           
  1027                           	psect	text5
  1028  0013A6                     __ptext5:
  1029                           	opt stack 0
  1030  0013A6                     _lcd_origen:
  1031                           	opt stack 23
  1032                           
  1033                           ;lcd.c: 309: lcd_orden(0x02);
  1034                           
  1035                           ;incstack = 0
  1036  0013A6  0E00               	movlw	0
  1037  0013A8  0100               	movlb	0	; () banked
  1038  0013AA  6F8B               	movwf	(lcd_orden@orden+1)& (0+255),b
  1039  0013AC  0E02               	movlw	2
  1040  0013AE  6F8A               	movwf	lcd_orden@orden& (0+255),b
  1041  0013B0  ECD8  F008         	call	_lcd_orden	;wreg free
  1042                           
  1043                           ;lcd.c: 310: wait_in_ms(4);
  1044  0013B4  0E00               	movlw	0
  1045  0013B6  0100               	movlb	0	; () banked
  1046  0013B8  6F81               	movwf	(wait_in_ms@time_in_ms+1)& (0+255),b
  1047  0013BA  0E04               	movlw	4
  1048  0013BC  6F80               	movwf	wait_in_ms@time_in_ms& (0+255),b
  1049  0013BE  EC3D  F006         	call	_wait_in_ms	;wreg free
  1050  0013C2  0012               	return		;funcret
  1051  0013C4                     __end_of_lcd_origen:
  1052                           	opt stack 0
  1053                           tblptru	equ	0xFF8
  1054                           tblptrh	equ	0xFF7
  1055                           tblptrl	equ	0xFF6
  1056                           tablat	equ	0xFF5
  1057                           postinc0	equ	0xFEE
  1058                           wreg	equ	0xFE8
  1059                           indf2	equ	0xFDF
  1060                           fsr2h	equ	0xFDA
  1061                           fsr2l	equ	0xFD9
  1062                           status	equ	0xFD8
  1063                           
  1064 ;; *************** function _lcd_limpiar *****************
  1065 ;; Defined at:
  1066 ;;		line 303 in file "lcd.c"
  1067 ;; Parameters:    Size  Location     Type
  1068 ;;		None
  1069 ;; Auto vars:     Size  Location     Type
  1070 ;;		None
  1071 ;; Return value:  Size  Location     Type
  1072 ;;                  1    wreg      void 
  1073 ;; Registers used:
  1074 ;;		wreg, status,2, status,0, cstack
  1075 ;; Tracked objects:
  1076 ;;		On entry : 0/0
  1077 ;;		On exit  : 0/0
  1078 ;;		Unchanged: 0/0
  1079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1080 ;;      Params:         0       0       0       0       0       0       0       0       0
  1081 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1082 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1083 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1084 ;;Total ram usage:        0 bytes
  1085 ;; Hardware stack levels used:    1
  1086 ;; Hardware stack levels required when called:    7
  1087 ;; This function calls:
  1088 ;;		_lcd_orden
  1089 ;;		_wait_in_ms
  1090 ;; This function is called by:
  1091 ;;		_main
  1092 ;; This function uses a non-reentrant model
  1093 ;;
  1094                           
  1095                           	psect	text6
  1096  0013C4                     __ptext6:
  1097                           	opt stack 0
  1098  0013C4                     _lcd_limpiar:
  1099                           	opt stack 23
  1100                           
  1101                           ;lcd.c: 304: lcd_orden(0x01);
  1102                           
  1103                           ;incstack = 0
  1104  0013C4  0E00               	movlw	0
  1105  0013C6  0100               	movlb	0	; () banked
  1106  0013C8  6F8B               	movwf	(lcd_orden@orden+1)& (0+255),b
  1107  0013CA  0E01               	movlw	1
  1108  0013CC  6F8A               	movwf	lcd_orden@orden& (0+255),b
  1109  0013CE  ECD8  F008         	call	_lcd_orden	;wreg free
  1110                           
  1111                           ;lcd.c: 305: wait_in_ms(2);
  1112  0013D2  0E00               	movlw	0
  1113  0013D4  0100               	movlb	0	; () banked
  1114  0013D6  6F81               	movwf	(wait_in_ms@time_in_ms+1)& (0+255),b
  1115  0013D8  0E02               	movlw	2
  1116  0013DA  6F80               	movwf	wait_in_ms@time_in_ms& (0+255),b
  1117  0013DC  EC3D  F006         	call	_wait_in_ms	;wreg free
  1118  0013E0  0012               	return		;funcret
  1119  0013E2                     __end_of_lcd_limpiar:
  1120                           	opt stack 0
  1121                           tblptru	equ	0xFF8
  1122                           tblptrh	equ	0xFF7
  1123                           tblptrl	equ	0xFF6
  1124                           tablat	equ	0xFF5
  1125                           postinc0	equ	0xFEE
  1126                           wreg	equ	0xFE8
  1127                           indf2	equ	0xFDF
  1128                           fsr2h	equ	0xFDA
  1129                           fsr2l	equ	0xFD9
  1130                           status	equ	0xFD8
  1131                           
  1132 ;; *************** function _lcd_iniciar *****************
  1133 ;; Defined at:
  1134 ;;		line 224 in file "lcd.c"
  1135 ;; Parameters:    Size  Location     Type
  1136 ;;		None
  1137 ;; Auto vars:     Size  Location     Type
  1138 ;;		None
  1139 ;; Return value:  Size  Location     Type
  1140 ;;                  1    wreg      void 
  1141 ;; Registers used:
  1142 ;;		wreg, status,2, status,0, cstack
  1143 ;; Tracked objects:
  1144 ;;		On entry : 0/0
  1145 ;;		On exit  : 0/0
  1146 ;;		Unchanged: 0/0
  1147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1148 ;;      Params:         0       0       0       0       0       0       0       0       0
  1149 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1150 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1151 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1152 ;;Total ram usage:        0 bytes
  1153 ;; Hardware stack levels used:    1
  1154 ;; Hardware stack levels required when called:    7
  1155 ;; This function calls:
  1156 ;;		_lcd_orden
  1157 ;;		_lcd_pulso
  1158 ;;		_wait_in_ms
  1159 ;; This function is called by:
  1160 ;;		_main
  1161 ;; This function uses a non-reentrant model
  1162 ;;
  1163                           
  1164                           	psect	text7
  1165  000B94                     __ptext7:
  1166                           	opt stack 0
  1167  000B94                     _lcd_iniciar:
  1168                           	opt stack 23
  1169                           
  1170                           ;lcd.c: 225: TRISDbits.TRISD1=0;
  1171                           
  1172                           ;incstack = 0
  1173  000B94  9295               	bcf	3989,1,c	;volatile
  1174                           
  1175                           ;lcd.c: 226: TRISDbits.TRISD2=0;
  1176  000B96  9495               	bcf	3989,2,c	;volatile
  1177                           
  1178                           ;lcd.c: 227: TRISDbits.TRISD3=0;
  1179  000B98  9695               	bcf	3989,3,c	;volatile
  1180                           
  1181                           ;lcd.c: 228: TRISDbits.TRISD4=0;
  1182  000B9A  9895               	bcf	3989,4,c	;volatile
  1183                           
  1184                           ;lcd.c: 229: TRISDbits.TRISD5=0;
  1185  000B9C  9A95               	bcf	3989,5,c	;volatile
  1186                           
  1187                           ;lcd.c: 230: TRISDbits.TRISD6=0;
  1188  000B9E  9C95               	bcf	3989,6,c	;volatile
  1189                           
  1190                           ;lcd.c: 231: TRISDbits.TRISD7=0;
  1191  000BA0  9E95               	bcf	3989,7,c	;volatile
  1192                           
  1193                           ;lcd.c: 233: PORTDbits.RD1=0;
  1194  000BA2  9283               	bcf	3971,1,c	;volatile
  1195                           
  1196                           ;lcd.c: 234: PORTDbits.RD2=0;
  1197  000BA4  9483               	bcf	3971,2,c	;volatile
  1198                           
  1199                           ;lcd.c: 235: PORTDbits.RD3=0;
  1200  000BA6  9683               	bcf	3971,3,c	;volatile
  1201                           
  1202                           ;lcd.c: 236: PORTDbits.RD4=0;
  1203  000BA8  9883               	bcf	3971,4,c	;volatile
  1204                           
  1205                           ;lcd.c: 237: PORTDbits.RD5=0;
  1206  000BAA  9A83               	bcf	3971,5,c	;volatile
  1207                           
  1208                           ;lcd.c: 238: PORTDbits.RD6=0;
  1209  000BAC  9C83               	bcf	3971,6,c	;volatile
  1210                           
  1211                           ;lcd.c: 239: PORTDbits.RD7=0;
  1212  000BAE  9E83               	bcf	3971,7,c	;volatile
  1213                           
  1214                           ;lcd.c: 241: wait_in_ms(20);
  1215  000BB0  0E00               	movlw	0
  1216  000BB2  0100               	movlb	0	; () banked
  1217  000BB4  6F81               	movwf	(wait_in_ms@time_in_ms+1)& (0+255),b
  1218  000BB6  0E14               	movlw	20
  1219  000BB8  6F80               	movwf	wait_in_ms@time_in_ms& (0+255),b
  1220  000BBA  EC3D  F006         	call	_wait_in_ms	;wreg free
  1221                           
  1222                           ;lcd.c: 242: PORTD=0X03<<4;
  1223  000BBE  0E30               	movlw	48
  1224  000BC0  6E83               	movwf	3971,c	;volatile
  1225                           
  1226                           ;lcd.c: 243: lcd_pulso();
  1227  000BC2  ECC2  F009         	call	_lcd_pulso	;wreg free
  1228                           
  1229                           ;lcd.c: 244: wait_in_ms(4);
  1230  000BC6  0E00               	movlw	0
  1231  000BC8  0100               	movlb	0	; () banked
  1232  000BCA  6F81               	movwf	(wait_in_ms@time_in_ms+1)& (0+255),b
  1233  000BCC  0E04               	movlw	4
  1234  000BCE  6F80               	movwf	wait_in_ms@time_in_ms& (0+255),b
  1235  000BD0  EC3D  F006         	call	_wait_in_ms	;wreg free
  1236                           
  1237                           ;lcd.c: 246: PORTD=0X03<<4;
  1238  000BD4  0E30               	movlw	48
  1239  000BD6  6E83               	movwf	3971,c	;volatile
  1240                           
  1241                           ;lcd.c: 247: lcd_pulso();
  1242  000BD8  ECC2  F009         	call	_lcd_pulso	;wreg free
  1243                           
  1244                           ;lcd.c: 248: wait_in_ms(4);
  1245  000BDC  0E00               	movlw	0
  1246  000BDE  0100               	movlb	0	; () banked
  1247  000BE0  6F81               	movwf	(wait_in_ms@time_in_ms+1)& (0+255),b
  1248  000BE2  0E04               	movlw	4
  1249  000BE4  6F80               	movwf	wait_in_ms@time_in_ms& (0+255),b
  1250  000BE6  EC3D  F006         	call	_wait_in_ms	;wreg free
  1251                           
  1252                           ;lcd.c: 250: PORTD=0X03<<4;
  1253  000BEA  0E30               	movlw	48
  1254  000BEC  6E83               	movwf	3971,c	;volatile
  1255                           
  1256                           ;lcd.c: 251: lcd_pulso();
  1257  000BEE  ECC2  F009         	call	_lcd_pulso	;wreg free
  1258                           
  1259                           ;lcd.c: 252: wait_in_ms(1);
  1260  000BF2  0E00               	movlw	0
  1261  000BF4  0100               	movlb	0	; () banked
  1262  000BF6  6F81               	movwf	(wait_in_ms@time_in_ms+1)& (0+255),b
  1263  000BF8  0E01               	movlw	1
  1264  000BFA  6F80               	movwf	wait_in_ms@time_in_ms& (0+255),b
  1265  000BFC  EC3D  F006         	call	_wait_in_ms	;wreg free
  1266                           
  1267                           ;lcd.c: 254: PORTD=0X02<<4;
  1268  000C00  0E20               	movlw	32
  1269  000C02  6E83               	movwf	3971,c	;volatile
  1270                           
  1271                           ;lcd.c: 255: lcd_pulso();
  1272  000C04  ECC2  F009         	call	_lcd_pulso	;wreg free
  1273                           
  1274                           ;lcd.c: 257: lcd_orden(0x28);
  1275  000C08  0E00               	movlw	0
  1276  000C0A  0100               	movlb	0	; () banked
  1277  000C0C  6F8B               	movwf	(lcd_orden@orden+1)& (0+255),b
  1278  000C0E  0E28               	movlw	40
  1279  000C10  6F8A               	movwf	lcd_orden@orden& (0+255),b
  1280  000C12  ECD8  F008         	call	_lcd_orden	;wreg free
  1281                           
  1282                           ;lcd.c: 258: wait_in_ms(8);
  1283  000C16  0E00               	movlw	0
  1284  000C18  0100               	movlb	0	; () banked
  1285  000C1A  6F81               	movwf	(wait_in_ms@time_in_ms+1)& (0+255),b
  1286  000C1C  0E08               	movlw	8
  1287  000C1E  6F80               	movwf	wait_in_ms@time_in_ms& (0+255),b
  1288  000C20  EC3D  F006         	call	_wait_in_ms	;wreg free
  1289                           
  1290                           ;lcd.c: 260: lcd_orden(0x0c);
  1291  000C24  0E00               	movlw	0
  1292  000C26  0100               	movlb	0	; () banked
  1293  000C28  6F8B               	movwf	(lcd_orden@orden+1)& (0+255),b
  1294  000C2A  0E0C               	movlw	12
  1295  000C2C  6F8A               	movwf	lcd_orden@orden& (0+255),b
  1296  000C2E  ECD8  F008         	call	_lcd_orden	;wreg free
  1297                           
  1298                           ;lcd.c: 261: wait_in_ms(8);
  1299  000C32  0E00               	movlw	0
  1300  000C34  0100               	movlb	0	; () banked
  1301  000C36  6F81               	movwf	(wait_in_ms@time_in_ms+1)& (0+255),b
  1302  000C38  0E08               	movlw	8
  1303  000C3A  6F80               	movwf	wait_in_ms@time_in_ms& (0+255),b
  1304  000C3C  EC3D  F006         	call	_wait_in_ms	;wreg free
  1305                           
  1306                           ;lcd.c: 263: lcd_orden(0x01);
  1307  000C40  0E00               	movlw	0
  1308  000C42  0100               	movlb	0	; () banked
  1309  000C44  6F8B               	movwf	(lcd_orden@orden+1)& (0+255),b
  1310  000C46  0E01               	movlw	1
  1311  000C48  6F8A               	movwf	lcd_orden@orden& (0+255),b
  1312  000C4A  ECD8  F008         	call	_lcd_orden	;wreg free
  1313                           
  1314                           ;lcd.c: 264: wait_in_ms(2);
  1315  000C4E  0E00               	movlw	0
  1316  000C50  0100               	movlb	0	; () banked
  1317  000C52  6F81               	movwf	(wait_in_ms@time_in_ms+1)& (0+255),b
  1318  000C54  0E02               	movlw	2
  1319  000C56  6F80               	movwf	wait_in_ms@time_in_ms& (0+255),b
  1320  000C58  EC3D  F006         	call	_wait_in_ms	;wreg free
  1321                           
  1322                           ;lcd.c: 266: lcd_orden(0x06);
  1323  000C5C  0E00               	movlw	0
  1324  000C5E  0100               	movlb	0	; () banked
  1325  000C60  6F8B               	movwf	(lcd_orden@orden+1)& (0+255),b
  1326  000C62  0E06               	movlw	6
  1327  000C64  6F8A               	movwf	lcd_orden@orden& (0+255),b
  1328  000C66  ECD8  F008         	call	_lcd_orden	;wreg free
  1329                           
  1330                           ;lcd.c: 267: wait_in_ms(8);
  1331  000C6A  0E00               	movlw	0
  1332  000C6C  0100               	movlb	0	; () banked
  1333  000C6E  6F81               	movwf	(wait_in_ms@time_in_ms+1)& (0+255),b
  1334  000C70  0E08               	movlw	8
  1335  000C72  6F80               	movwf	wait_in_ms@time_in_ms& (0+255),b
  1336  000C74  EC3D  F006         	call	_wait_in_ms	;wreg free
  1337  000C78  0012               	return		;funcret
  1338  000C7A                     __end_of_lcd_iniciar:
  1339                           	opt stack 0
  1340                           tblptru	equ	0xFF8
  1341                           tblptrh	equ	0xFF7
  1342                           tblptrl	equ	0xFF6
  1343                           tablat	equ	0xFF5
  1344                           postinc0	equ	0xFEE
  1345                           wreg	equ	0xFE8
  1346                           indf2	equ	0xFDF
  1347                           fsr2h	equ	0xFDA
  1348                           fsr2l	equ	0xFD9
  1349                           status	equ	0xFD8
  1350                           
  1351 ;; *************** function _lcd_orden *****************
  1352 ;; Defined at:
  1353 ;;		line 277 in file "lcd.c"
  1354 ;; Parameters:    Size  Location     Type
  1355 ;;  orden           2   42[BANK0 ] unsigned int 
  1356 ;; Auto vars:     Size  Location     Type
  1357 ;;		None
  1358 ;; Return value:  Size  Location     Type
  1359 ;;                  1    wreg      void 
  1360 ;; Registers used:
  1361 ;;		wreg, status,2, status,0, cstack
  1362 ;; Tracked objects:
  1363 ;;		On entry : 0/0
  1364 ;;		On exit  : 0/0
  1365 ;;		Unchanged: 0/0
  1366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1367 ;;      Params:         0       2       0       0       0       0       0       0       0
  1368 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1369 ;;      Temps:          0       5       0       0       0       0       0       0       0
  1370 ;;      Totals:         0       7       0       0       0       0       0       0       0
  1371 ;;Total ram usage:        7 bytes
  1372 ;; Hardware stack levels used:    1
  1373 ;; Hardware stack levels required when called:    6
  1374 ;; This function calls:
  1375 ;;		_lcd_pulso
  1376 ;; This function is called by:
  1377 ;;		_lcd_iniciar
  1378 ;;		_lcd_limpiar
  1379 ;;		_lcd_origen
  1380 ;;		_lcd_ubicarXY
  1381 ;; This function uses a non-reentrant model
  1382 ;;
  1383                           
  1384                           	psect	text8
  1385  0011B0                     __ptext8:
  1386                           	opt stack 0
  1387  0011B0                     _lcd_orden:
  1388                           	opt stack 23
  1389                           
  1390                           ;lcd.c: 278: PORTDbits.RD1=0;
  1391                           
  1392                           ;incstack = 0
  1393  0011B0  9283               	bcf	3971,1,c	;volatile
  1394                           
  1395                           ;lcd.c: 280: PORTD=(((((PORTD>>4&0x0f)|0x0f)&(orden>>4&0x0f))<<4)|(PORTD&0x0f));
  1396  0011B2  CF83 F08C          	movff	3971,??_lcd_orden	;volatile
  1397  0011B6  0E0F               	movlw	15
  1398  0011B8  0100               	movlb	0	; () banked
  1399  0011BA  178C               	andwf	??_lcd_orden& (0+255),f,b
  1400  0011BC  C08A  F08D         	movff	lcd_orden@orden,??_lcd_orden+1
  1401  0011C0  C08B  F08E         	movff	lcd_orden@orden+1,??_lcd_orden+2
  1402  0011C4  0E04               	movlw	4
  1403  0011C6  6F8F               	movwf	(??_lcd_orden+3)& (0+255),b
  1404  0011C8                     u2005:
  1405  0011C8  90D8               	bcf	status,0,c
  1406  0011CA  338E               	rrcf	(??_lcd_orden+2)& (0+255),f,b
  1407  0011CC  338D               	rrcf	(??_lcd_orden+1)& (0+255),f,b
  1408  0011CE  2F8F               	decfsz	(??_lcd_orden+3)& (0+255),f,b
  1409  0011D0  D7FB               	goto	u2005
  1410  0011D2  0E0F               	movlw	15
  1411  0011D4  178D               	andwf	(??_lcd_orden+1)& (0+255),f,b
  1412  0011D6  3883               	swapf	3971,w,c	;volatile
  1413  0011D8  0B0F               	andlw	15
  1414  0011DA  0B0F               	andlw	15
  1415  0011DC  090F               	iorlw	15
  1416  0011DE  158D               	andwf	(??_lcd_orden+1)& (0+255),w,b
  1417  0011E0  6F90               	movwf	(??_lcd_orden+4)& (0+255),b
  1418  0011E2  3990               	swapf	(??_lcd_orden+4)& (0+255),w,b
  1419  0011E4  0BF0               	andlw	240
  1420  0011E6  118C               	iorwf	??_lcd_orden& (0+255),w,b
  1421  0011E8  6E83               	movwf	3971,c	;volatile
  1422                           
  1423                           ; BSR set to: 0
  1424                           ;lcd.c: 281: lcd_pulso();
  1425  0011EA  ECC2  F009         	call	_lcd_pulso	;wreg free
  1426                           
  1427                           ;lcd.c: 282: PORTD=(((((PORTD>>4&0x0f)|0x0f)&(orden&0x0f))<<4)|(PORTD&0x0f));
  1428  0011EE  CF83 F08C          	movff	3971,??_lcd_orden	;volatile
  1429  0011F2  0E0F               	movlw	15
  1430  0011F4  0100               	movlb	0	; () banked
  1431  0011F6  178C               	andwf	??_lcd_orden& (0+255),f,b
  1432  0011F8  C08A  F08D         	movff	lcd_orden@orden,??_lcd_orden+1
  1433  0011FC  0E0F               	movlw	15
  1434  0011FE  178D               	andwf	(??_lcd_orden+1)& (0+255),f,b
  1435  001200  3883               	swapf	3971,w,c	;volatile
  1436  001202  0B0F               	andlw	15
  1437  001204  0B0F               	andlw	15
  1438  001206  090F               	iorlw	15
  1439  001208  158D               	andwf	(??_lcd_orden+1)& (0+255),w,b
  1440  00120A  6F8E               	movwf	(??_lcd_orden+2)& (0+255),b
  1441  00120C  398E               	swapf	(??_lcd_orden+2)& (0+255),w,b
  1442  00120E  0BF0               	andlw	240
  1443  001210  118C               	iorwf	??_lcd_orden& (0+255),w,b
  1444  001212  6E83               	movwf	3971,c	;volatile
  1445                           
  1446                           ;lcd.c: 283: lcd_pulso();
  1447  001214  ECC2  F009         	call	_lcd_pulso	;wreg free
  1448  001218  0012               	return		;funcret
  1449  00121A                     __end_of_lcd_orden:
  1450                           	opt stack 0
  1451                           tblptru	equ	0xFF8
  1452                           tblptrh	equ	0xFF7
  1453                           tblptrl	equ	0xFF6
  1454                           tablat	equ	0xFF5
  1455                           postinc0	equ	0xFEE
  1456                           wreg	equ	0xFE8
  1457                           indf2	equ	0xFDF
  1458                           fsr2h	equ	0xFDA
  1459                           fsr2l	equ	0xFD9
  1460                           status	equ	0xFD8
  1461                           
  1462 ;; *************** function _lcd_pulso *****************
  1463 ;; Defined at:
  1464 ;;		line 270 in file "lcd.c"
  1465 ;; Parameters:    Size  Location     Type
  1466 ;;		None
  1467 ;; Auto vars:     Size  Location     Type
  1468 ;;		None
  1469 ;; Return value:  Size  Location     Type
  1470 ;;                  1    wreg      void 
  1471 ;; Registers used:
  1472 ;;		wreg, status,2, status,0, cstack
  1473 ;; Tracked objects:
  1474 ;;		On entry : 0/0
  1475 ;;		On exit  : 0/0
  1476 ;;		Unchanged: 0/0
  1477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1478 ;;      Params:         0       0       0       0       0       0       0       0       0
  1479 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1480 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1481 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1482 ;;Total ram usage:        0 bytes
  1483 ;; Hardware stack levels used:    1
  1484 ;; Hardware stack levels required when called:    5
  1485 ;; This function calls:
  1486 ;;		_wait_in_ms
  1487 ;; This function is called by:
  1488 ;;		_lcd_iniciar
  1489 ;;		_lcd_orden
  1490 ;;		_lcd_caracter
  1491 ;; This function uses a non-reentrant model
  1492 ;;
  1493                           
  1494                           	psect	text9
  1495  001384                     __ptext9:
  1496                           	opt stack 0
  1497  001384                     _lcd_pulso:
  1498                           	opt stack 23
  1499                           
  1500                           ;lcd.c: 271: PORTDbits.RD3=1;
  1501                           
  1502                           ;incstack = 0
  1503  001384  8683               	bsf	3971,3,c	;volatile
  1504                           
  1505                           ;lcd.c: 272: wait_in_ms(2);
  1506  001386  0E00               	movlw	0
  1507  001388  0100               	movlb	0	; () banked
  1508  00138A  6F81               	movwf	(wait_in_ms@time_in_ms+1)& (0+255),b
  1509  00138C  0E02               	movlw	2
  1510  00138E  6F80               	movwf	wait_in_ms@time_in_ms& (0+255),b
  1511  001390  EC3D  F006         	call	_wait_in_ms	;wreg free
  1512                           
  1513                           ;lcd.c: 273: PORTDbits.RD3=0;
  1514  001394  9683               	bcf	3971,3,c	;volatile
  1515                           
  1516                           ;lcd.c: 274: wait_in_ms(2);
  1517  001396  0E00               	movlw	0
  1518  001398  0100               	movlb	0	; () banked
  1519  00139A  6F81               	movwf	(wait_in_ms@time_in_ms+1)& (0+255),b
  1520  00139C  0E02               	movlw	2
  1521  00139E  6F80               	movwf	wait_in_ms@time_in_ms& (0+255),b
  1522  0013A0  EC3D  F006         	call	_wait_in_ms	;wreg free
  1523  0013A4  0012               	return		;funcret
  1524  0013A6                     __end_of_lcd_pulso:
  1525                           	opt stack 0
  1526                           tblptru	equ	0xFF8
  1527                           tblptrh	equ	0xFF7
  1528                           tblptrl	equ	0xFF6
  1529                           tablat	equ	0xFF5
  1530                           postinc0	equ	0xFEE
  1531                           wreg	equ	0xFE8
  1532                           indf2	equ	0xFDF
  1533                           fsr2h	equ	0xFDA
  1534                           fsr2l	equ	0xFD9
  1535                           status	equ	0xFD8
  1536                           
  1537 ;; *************** function _wait_in_ms *****************
  1538 ;; Defined at:
  1539 ;;		line 81 in file "config.c"
  1540 ;; Parameters:    Size  Location     Type
  1541 ;;  time_in_ms      2   32[BANK0 ] int 
  1542 ;; Auto vars:     Size  Location     Type
  1543 ;;  count_ms        2   40[BANK0 ] unsigned int 
  1544 ;;  count           2   38[BANK0 ] unsigned int 
  1545 ;;  flag            2   36[BANK0 ] unsigned int 
  1546 ;; Return value:  Size  Location     Type
  1547 ;;                  1    wreg      void 
  1548 ;; Registers used:
  1549 ;;		wreg, status,2, status,0, cstack
  1550 ;; Tracked objects:
  1551 ;;		On entry : 0/0
  1552 ;;		On exit  : 0/0
  1553 ;;		Unchanged: 0/0
  1554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1555 ;;      Params:         0       2       0       0       0       0       0       0       0
  1556 ;;      Locals:         0       6       0       0       0       0       0       0       0
  1557 ;;      Temps:          0       2       0       0       0       0       0       0       0
  1558 ;;      Totals:         0      10       0       0       0       0       0       0       0
  1559 ;;Total ram usage:       10 bytes
  1560 ;; Hardware stack levels used:    1
  1561 ;; Hardware stack levels required when called:    4
  1562 ;; This function calls:
  1563 ;;		___awtoft
  1564 ;;		___ftdiv
  1565 ;;		___fttol
  1566 ;; This function is called by:
  1567 ;;		_lcd_iniciar
  1568 ;;		_lcd_pulso
  1569 ;;		_lcd_limpiar
  1570 ;;		_lcd_origen
  1571 ;;		_ADC_Read
  1572 ;;		_Lcd_Cmd
  1573 ;; This function uses a non-reentrant model
  1574 ;;
  1575                           
  1576                           	psect	text10
  1577  000C7A                     __ptext10:
  1578                           	opt stack 0
  1579  000C7A                     _wait_in_ms:
  1580                           	opt stack 23
  1581                           
  1582                           ;config.c: 82: unsigned int count = 0;
  1583                           
  1584                           ;incstack = 0
  1585  000C7A  0E00               	movlw	0
  1586  000C7C  0100               	movlb	0	; () banked
  1587  000C7E  6F87               	movwf	(wait_in_ms@count+1)& (0+255),b
  1588  000C80  0E00               	movlw	0
  1589  000C82  6F86               	movwf	wait_in_ms@count& (0+255),b
  1590                           
  1591                           ;config.c: 83: unsigned int count_ms = 0;
  1592  000C84  0E00               	movlw	0
  1593  000C86  6F89               	movwf	(wait_in_ms@count_ms+1)& (0+255),b
  1594  000C88  0E00               	movlw	0
  1595  000C8A  6F88               	movwf	wait_in_ms@count_ms& (0+255),b
  1596                           
  1597                           ;config.c: 84: unsigned int flag = 0;
  1598  000C8C  0E00               	movlw	0
  1599  000C8E  6F85               	movwf	(wait_in_ms@flag+1)& (0+255),b
  1600  000C90  0E00               	movlw	0
  1601  000C92  6F84               	movwf	wait_in_ms@flag& (0+255),b
  1602                           
  1603                           ;config.c: 86: TMR0L = 131;
  1604  000C94  0E83               	movlw	131
  1605  000C96  6ED6               	movwf	4054,c	;volatile
  1606                           
  1607                           ; BSR set to: 0
  1608                           ;config.c: 89: count_ms = ((8000000)*0.001)/((256-TMR0L)*32);
  1609  000C98  50D6               	movf	4054,w,c	;volatile
  1610  000C9A  6F82               	movwf	??_wait_in_ms& (0+255),b
  1611  000C9C  6B83               	clrf	(??_wait_in_ms+1)& (0+255),b
  1612  000C9E  1F82               	comf	??_wait_in_ms& (0+255),f,b
  1613  000CA0  1F83               	comf	(??_wait_in_ms+1)& (0+255),f,b
  1614  000CA2  4B82               	infsnz	??_wait_in_ms& (0+255),f,b
  1615  000CA4  2B83               	incf	(??_wait_in_ms+1)& (0+255),f,b
  1616  000CA6  0E05               	movlw	5
  1617  000CA8                     u1955:
  1618  000CA8  90D8               	bcf	status,0,c
  1619  000CAA  3782               	rlcf	??_wait_in_ms& (0+255),f,b
  1620  000CAC  3783               	rlcf	(??_wait_in_ms+1)& (0+255),f,b
  1621  000CAE  2EE8               	decfsz	wreg,f,c
  1622  000CB0  D7FB               	goto	u1955
  1623  000CB2  0E00               	movlw	0
  1624  000CB4  2582               	addwf	??_wait_in_ms& (0+255),w,b
  1625  000CB6  6E26               	movwf	___awtoft@c,c
  1626  000CB8  0E20               	movlw	32
  1627  000CBA  2183               	addwfc	(??_wait_in_ms+1)& (0+255),w,b
  1628  000CBC  6E27               	movwf	___awtoft@c+1,c
  1629  000CBE  EC33  F009         	call	___awtoft	;wreg free
  1630  000CC2  C026  F065         	movff	?___awtoft,___ftdiv@f2
  1631  000CC6  C027  F066         	movff	?___awtoft+1,___ftdiv@f2+1
  1632  000CCA  C028  F067         	movff	?___awtoft+2,___ftdiv@f2+2
  1633  000CCE  0E00               	movlw	0
  1634  000CD0  0100               	movlb	0	; () banked
  1635  000CD2  6F62               	movwf	___ftdiv@f1& (0+255),b
  1636  000CD4  0EFA               	movlw	250
  1637  000CD6  6F63               	movwf	(___ftdiv@f1+1)& (0+255),b
  1638  000CD8  0E45               	movlw	69
  1639  000CDA  6F64               	movwf	(___ftdiv@f1+2)& (0+255),b
  1640  000CDC  EC56  F005         	call	___ftdiv	;wreg free
  1641  000CE0  C062  F071         	movff	?___ftdiv,___fttol@f1
  1642  000CE4  C063  F072         	movff	?___ftdiv+1,___fttol@f1+1
  1643  000CE8  C064  F073         	movff	?___ftdiv+2,___fttol@f1+2
  1644  000CEC  ECDA  F004         	call	___fttol	;wreg free
  1645  000CF0  C071  F088         	movff	?___fttol,wait_in_ms@count_ms
  1646  000CF4  C072  F089         	movff	?___fttol+1,wait_in_ms@count_ms+1
  1647                           
  1648                           ;config.c: 91: TMR0ON = 1;
  1649  000CF8  8ED5               	bsf	4053,7,c	;volatile
  1650                           
  1651                           ;config.c: 93: while (count < count_ms){
  1652  000CFA  D020               	goto	l47
  1653  000CFC                     l43:
  1654                           
  1655                           ; BSR set to: 0
  1656                           ;config.c: 94: if(TMR0IF == 1){
  1657  000CFC  A4F2               	btfss	intcon,2,c	;volatile
  1658  000CFE  D01E               	goto	l47
  1659                           
  1660                           ; BSR set to: 0
  1661                           ;config.c: 95: TMR0IF = 0;
  1662  000D00  94F2               	bcf	intcon,2,c	;volatile
  1663                           
  1664                           ; BSR set to: 0
  1665                           ;config.c: 96: TMR0L = 131;
  1666  000D02  0E83               	movlw	131
  1667  000D04  6ED6               	movwf	4054,c	;volatile
  1668                           
  1669                           ; BSR set to: 0
  1670                           ;config.c: 97: count ++;
  1671  000D06  4B86               	infsnz	wait_in_ms@count& (0+255),f,b
  1672  000D08  2B87               	incf	(wait_in_ms@count+1)& (0+255),f,b
  1673                           
  1674                           ; BSR set to: 0
  1675                           ;config.c: 98: if (count == count_ms){
  1676  000D0A  5188               	movf	wait_in_ms@count_ms& (0+255),w,b
  1677  000D0C  1986               	xorwf	wait_in_ms@count& (0+255),w,b
  1678  000D0E  E116               	bnz	l2129
  1679  000D10  5189               	movf	(wait_in_ms@count_ms+1)& (0+255),w,b
  1680  000D12  1987               	xorwf	(wait_in_ms@count+1)& (0+255),w,b
  1681  000D14  A4D8               	btfss	status,2,c
  1682  000D16  D012               	goto	l47
  1683                           
  1684                           ; BSR set to: 0
  1685                           ;config.c: 99: flag++;
  1686  000D18  4B84               	infsnz	wait_in_ms@flag& (0+255),f,b
  1687  000D1A  2B85               	incf	(wait_in_ms@flag+1)& (0+255),f,b
  1688                           
  1689                           ; BSR set to: 0
  1690                           ;config.c: 100: if (flag != time_in_ms){
  1691  000D1C  5184               	movf	wait_in_ms@flag& (0+255),w,b
  1692  000D1E  1980               	xorwf	wait_in_ms@time_in_ms& (0+255),w,b
  1693  000D20  E104               	bnz	u1980
  1694  000D22  5185               	movf	(wait_in_ms@flag+1)& (0+255),w,b
  1695  000D24  1981               	xorwf	(wait_in_ms@time_in_ms+1)& (0+255),w,b
  1696  000D26  B4D8               	btfsc	status,2,c
  1697  000D28  D005               	goto	l46
  1698  000D2A                     u1980:
  1699                           
  1700                           ; BSR set to: 0
  1701                           ;config.c: 101: count = 0;
  1702  000D2A  0E00               	movlw	0
  1703  000D2C  6F87               	movwf	(wait_in_ms@count+1)& (0+255),b
  1704  000D2E  0E00               	movlw	0
  1705  000D30  6F86               	movwf	wait_in_ms@count& (0+255),b
  1706                           
  1707                           ;config.c: 102: }
  1708  000D32  D004               	goto	l47
  1709  000D34                     l46:
  1710                           
  1711                           ; BSR set to: 0
  1712                           ;config.c: 103: else{
  1713                           ;config.c: 104: count = count_ms;
  1714  000D34  C088  F086         	movff	wait_in_ms@count_ms,wait_in_ms@count
  1715  000D38  C089  F087         	movff	wait_in_ms@count_ms+1,wait_in_ms@count+1
  1716  000D3C                     l47:
  1717  000D3C                     l2129:
  1718  000D3C  0100               	movlb	0	; () banked
  1719  000D3E  5188               	movf	wait_in_ms@count_ms& (0+255),w,b
  1720  000D40  5D86               	subwf	wait_in_ms@count& (0+255),w,b
  1721  000D42  5189               	movf	(wait_in_ms@count_ms+1)& (0+255),w,b
  1722  000D44  5987               	subwfb	(wait_in_ms@count+1)& (0+255),w,b
  1723  000D46  B0D8               	btfsc	status,0,c
  1724  000D48  0012               	return	
  1725  000D4A  D7D8               	goto	l43
  1726  000D4C                     __end_of_wait_in_ms:
  1727                           	opt stack 0
  1728                           tblptru	equ	0xFF8
  1729                           tblptrh	equ	0xFF7
  1730                           tblptrl	equ	0xFF6
  1731                           tablat	equ	0xFF5
  1732                           intcon	equ	0xFF2
  1733                           postinc0	equ	0xFEE
  1734                           wreg	equ	0xFE8
  1735                           indf2	equ	0xFDF
  1736                           fsr2h	equ	0xFDA
  1737                           fsr2l	equ	0xFD9
  1738                           status	equ	0xFD8
  1739                           
  1740 ;; *************** function ___awtoft *****************
  1741 ;; Defined at:
  1742 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
  1743 ;; Parameters:    Size  Location     Type
  1744 ;;  c               2   37[COMRAM] int 
  1745 ;; Auto vars:     Size  Location     Type
  1746 ;;  sign            1   40[COMRAM] unsigned char 
  1747 ;; Return value:  Size  Location     Type
  1748 ;;                  3   37[COMRAM] float 
  1749 ;; Registers used:
  1750 ;;		wreg, status,2, status,0, cstack
  1751 ;; Tracked objects:
  1752 ;;		On entry : 0/0
  1753 ;;		On exit  : 0/0
  1754 ;;		Unchanged: 0/0
  1755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1756 ;;      Params:         3       0       0       0       0       0       0       0       0
  1757 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1758 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1759 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1760 ;;Total ram usage:        4 bytes
  1761 ;; Hardware stack levels used:    1
  1762 ;; Hardware stack levels required when called:    3
  1763 ;; This function calls:
  1764 ;;		___ftpack
  1765 ;; This function is called by:
  1766 ;;		_wait_in_ms
  1767 ;; This function uses a non-reentrant model
  1768 ;;
  1769                           
  1770                           	psect	text11
  1771  001266                     __ptext11:
  1772                           	opt stack 0
  1773  001266                     ___awtoft:
  1774                           	opt stack 23
  1775                           
  1776                           ; BSR set to: 0
  1777                           ;incstack = 0
  1778  001266  0E00               	movlw	0
  1779  001268  6E29               	movwf	___awtoft@sign,c
  1780  00126A  AE27               	btfss	___awtoft@c+1,7,c
  1781  00126C  D006               	goto	l481
  1782  00126E  6C26               	negf	___awtoft@c,c
  1783  001270  1E27               	comf	___awtoft@c+1,f,c
  1784  001272  B0D8               	btfsc	status,0,c
  1785  001274  2A27               	incf	___awtoft@c+1,f,c
  1786  001276  0E01               	movlw	1
  1787  001278  6E29               	movwf	___awtoft@sign,c
  1788  00127A                     l481:
  1789  00127A  C026  F01E         	movff	___awtoft@c,___ftpack@arg
  1790  00127E  C027  F01F         	movff	___awtoft@c+1,___ftpack@arg+1
  1791  001282  6A20               	clrf	___ftpack@arg+2,c
  1792  001284  0E8E               	movlw	142
  1793  001286  6E21               	movwf	___ftpack@exp,c
  1794  001288  C029  F022         	movff	___awtoft@sign,___ftpack@sign
  1795  00128C  ECA6  F006         	call	___ftpack	;wreg free
  1796  001290  C01E  F026         	movff	?___ftpack,?___awtoft
  1797  001294  C01F  F027         	movff	?___ftpack+1,?___awtoft+1
  1798  001298  C020  F028         	movff	?___ftpack+2,?___awtoft+2
  1799  00129C  0012               	return	
  1800  00129E                     __end_of___awtoft:
  1801                           	opt stack 0
  1802                           tblptru	equ	0xFF8
  1803                           tblptrh	equ	0xFF7
  1804                           tblptrl	equ	0xFF6
  1805                           tablat	equ	0xFF5
  1806                           intcon	equ	0xFF2
  1807                           postinc0	equ	0xFEE
  1808                           wreg	equ	0xFE8
  1809                           indf2	equ	0xFDF
  1810                           fsr2h	equ	0xFDA
  1811                           fsr2l	equ	0xFD9
  1812                           status	equ	0xFD8
  1813                           
  1814 ;; *************** function _configBoard *****************
  1815 ;; Defined at:
  1816 ;;		line 11 in file "config.c"
  1817 ;; Parameters:    Size  Location     Type
  1818 ;;		None
  1819 ;; Auto vars:     Size  Location     Type
  1820 ;;		None
  1821 ;; Return value:  Size  Location     Type
  1822 ;;                  1    wreg      void 
  1823 ;; Registers used:
  1824 ;;		wreg, status,2
  1825 ;; Tracked objects:
  1826 ;;		On entry : 0/0
  1827 ;;		On exit  : 0/0
  1828 ;;		Unchanged: 0/0
  1829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1830 ;;      Params:         0       0       0       0       0       0       0       0       0
  1831 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1832 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1833 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1834 ;;Total ram usage:        0 bytes
  1835 ;; Hardware stack levels used:    1
  1836 ;; Hardware stack levels required when called:    2
  1837 ;; This function calls:
  1838 ;;		Nothing
  1839 ;; This function is called by:
  1840 ;;		_main
  1841 ;; This function uses a non-reentrant model
  1842 ;;
  1843                           
  1844                           	psect	text12
  1845  0010D4                     __ptext12:
  1846                           	opt stack 0
  1847  0010D4                     _configBoard:
  1848                           	opt stack 28
  1849                           
  1850                           ;config.c: 15: INTCONbits.GIE = 1;
  1851                           
  1852                           ;incstack = 0
  1853  0010D4  8EF2               	bsf	intcon,7,c	;volatile
  1854                           
  1855                           ;config.c: 16: INTCONbits.PEIE = 1;
  1856  0010D6  8CF2               	bsf	intcon,6,c	;volatile
  1857                           
  1858                           ;config.c: 25: T0CONbits.TMR0ON = 1;
  1859  0010D8  8ED5               	bsf	4053,7,c	;volatile
  1860                           
  1861                           ;config.c: 26: T08BIT = 1;
  1862  0010DA  8CD5               	bsf	4053,6,c	;volatile
  1863                           
  1864                           ;config.c: 27: T0CONbits.T0CS = 0;
  1865  0010DC  9AD5               	bcf	4053,5,c	;volatile
  1866                           
  1867                           ;config.c: 29: T0CONbits.PSA = 0;
  1868  0010DE  96D5               	bcf	4053,3,c	;volatile
  1869                           
  1870                           ;config.c: 30: T0CONbits.T0PS = 100;
  1871  0010E0  50D5               	movf	4053,w,c	;volatile
  1872  0010E2  0BF8               	andlw	-8
  1873  0010E4  0904               	iorlw	4
  1874  0010E6  6ED5               	movwf	4053,c	;volatile
  1875                           
  1876                           ;config.c: 31: INTCONbits.TMR0IF = 0;
  1877  0010E8  94F2               	bcf	intcon,2,c	;volatile
  1878                           
  1879                           ;config.c: 33: ADCON1bits.PCFG = 0b1111;
  1880  0010EA  80C1               	bsf	4033,0,c	;volatile
  1881  0010EC  82C1               	bsf	4033,1,c	;volatile
  1882  0010EE  84C1               	bsf	4033,2,c	;volatile
  1883  0010F0  86C1               	bsf	4033,3,c	;volatile
  1884                           
  1885                           ;config.c: 36: TRISA=0b00000000;
  1886  0010F2  0E00               	movlw	0
  1887  0010F4  6E92               	movwf	3986,c	;volatile
  1888                           
  1889                           ;config.c: 37: TRISB=0b00000000;
  1890  0010F6  0E00               	movlw	0
  1891  0010F8  6E93               	movwf	3987,c	;volatile
  1892                           
  1893                           ;config.c: 44: ADCON0 = 0b00000111;
  1894  0010FA  0E07               	movlw	7
  1895  0010FC  6EC2               	movwf	4034,c	;volatile
  1896                           
  1897                           ;config.c: 47: ADCON0bits.ADON = 0;
  1898  0010FE  90C2               	bcf	4034,0,c	;volatile
  1899                           
  1900                           ;config.c: 51: ADCON2bits.ADFM = 1;
  1901  001100  8EC0               	bsf	4032,7,c	;volatile
  1902                           
  1903                           ;config.c: 52: ADCON2bits.ADCS = 0b110;
  1904  001102  50C0               	movf	4032,w,c	;volatile
  1905  001104  0BF8               	andlw	-8
  1906  001106  0906               	iorlw	6
  1907  001108  6EC0               	movwf	4032,c	;volatile
  1908                           
  1909                           ;config.c: 53: ADCON2bits.ACQT = 0b101;
  1910  00110A  50C0               	movf	4032,w,c	;volatile
  1911  00110C  0BC7               	andlw	-57
  1912  00110E  0928               	iorlw	40
  1913  001110  6EC0               	movwf	4032,c	;volatile
  1914                           
  1915                           ;config.c: 54: ADCON1bits.PCFG=0b1101;
  1916  001112  50C1               	movf	4033,w,c	;volatile
  1917  001114  0BF0               	andlw	-16
  1918  001116  090D               	iorlw	13
  1919  001118  6EC1               	movwf	4033,c	;volatile
  1920                           
  1921                           ;config.c: 55: TRISAbits.RA1=1;
  1922  00111A  8292               	bsf	3986,1,c	;volatile
  1923                           
  1924                           ;config.c: 56: ADCON2bits.ADCS=0b110;
  1925  00111C  50C0               	movf	4032,w,c	;volatile
  1926  00111E  0BF8               	andlw	-8
  1927  001120  0906               	iorlw	6
  1928  001122  6EC0               	movwf	4032,c	;volatile
  1929                           
  1930                           ;config.c: 57: ADCON1bits.VCFG1=0;
  1931  001124  9AC1               	bcf	4033,5,c	;volatile
  1932                           
  1933                           ;config.c: 58: ADCON1bits.VCFG0=0;
  1934  001126  98C1               	bcf	4033,4,c	;volatile
  1935                           
  1936                           ;config.c: 60: ADCON2bits.ADFM=1;
  1937  001128  8EC0               	bsf	4032,7,c	;volatile
  1938                           
  1939                           ;config.c: 64: ADCON0bits.ADON=0;
  1940  00112A  90C2               	bcf	4034,0,c	;volatile
  1941                           
  1942                           ;config.c: 66: PIE1bits.ADIE=1;
  1943  00112C  8C9D               	bsf	3997,6,c	;volatile
  1944                           
  1945                           ;config.c: 67: PIR1bits.ADIF=0;
  1946  00112E  9C9E               	bcf	3998,6,c	;volatile
  1947                           
  1948                           ;config.c: 69: PIE1bits.RCIE=1;
  1949  001130  8A9D               	bsf	3997,5,c	;volatile
  1950                           
  1951                           ;config.c: 71: ADCON2bits.ACQT=0b111;
  1952  001132  86C0               	bsf	4032,3,c	;volatile
  1953  001134  88C0               	bsf	4032,4,c	;volatile
  1954  001136  8AC0               	bsf	4032,5,c	;volatile
  1955                           
  1956                           ;config.c: 72: ADCON0bits.GO=1;
  1957  001138  82C2               	bsf	4034,1,c	;volatile
  1958                           
  1959                           ;config.c: 76: TRISD=0;
  1960  00113A  0E00               	movlw	0
  1961  00113C  6E95               	movwf	3989,c	;volatile
  1962                           
  1963                           ;config.c: 77: PORTA=0;
  1964  00113E  0E00               	movlw	0
  1965  001140  6E80               	movwf	3968,c	;volatile
  1966  001142  0012               	return		;funcret
  1967  001144                     __end_of_configBoard:
  1968                           	opt stack 0
  1969                           tblptru	equ	0xFF8
  1970                           tblptrh	equ	0xFF7
  1971                           tblptrl	equ	0xFF6
  1972                           tablat	equ	0xFF5
  1973                           intcon	equ	0xFF2
  1974                           postinc0	equ	0xFEE
  1975                           wreg	equ	0xFE8
  1976                           indf2	equ	0xFDF
  1977                           fsr2h	equ	0xFDA
  1978                           fsr2l	equ	0xFD9
  1979                           status	equ	0xFD8
  1980                           
  1981 ;; *************** function _USART_SendString *****************
  1982 ;; Defined at:
  1983 ;;		line 40 in file "USART_Source_File.c"
  1984 ;; Parameters:    Size  Location     Type
  1985 ;;  out             2   30[COMRAM] PTR const unsigned char 
  1986 ;;		 -> dataIn(12), 
  1987 ;; Auto vars:     Size  Location     Type
  1988 ;;		None
  1989 ;; Return value:  Size  Location     Type
  1990 ;;                  1    wreg      void 
  1991 ;; Registers used:
  1992 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1993 ;; Tracked objects:
  1994 ;;		On entry : 0/0
  1995 ;;		On exit  : 0/0
  1996 ;;		Unchanged: 0/0
  1997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1998 ;;      Params:         2       0       0       0       0       0       0       0       0
  1999 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2000 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2001 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2002 ;;Total ram usage:        2 bytes
  2003 ;; Hardware stack levels used:    1
  2004 ;; Hardware stack levels required when called:    3
  2005 ;; This function calls:
  2006 ;;		_USART_TransmitChar
  2007 ;; This function is called by:
  2008 ;;		_main
  2009 ;; This function uses a non-reentrant model
  2010 ;;
  2011                           
  2012                           	psect	text13
  2013  001360                     __ptext13:
  2014                           	opt stack 0
  2015  001360                     _USART_SendString:
  2016                           	opt stack 27
  2017                           
  2018                           ;USART_Source_File.c: 42: while(*out!='\0')
  2019                           
  2020                           ;incstack = 0
  2021  001360  D009               	goto	l195
  2022  001362                     
  2023                           ;USART_Source_File.c: 43: {
  2024                           ;USART_Source_File.c: 44: USART_TransmitChar(*out);
  2025  001362  C01F  FFD9         	movff	USART_SendString@out,fsr2l
  2026  001366  C020  FFDA         	movff	USART_SendString@out+1,fsr2h
  2027  00136A  50DF               	movf	indf2,w,c
  2028  00136C  ECF1  F009         	call	_USART_TransmitChar
  2029                           
  2030                           ;USART_Source_File.c: 45: out++;
  2031  001370  4A1F               	infsnz	USART_SendString@out,f,c
  2032  001372  2A20               	incf	USART_SendString@out+1,f,c
  2033  001374                     l195:
  2034  001374  C01F  FFD9         	movff	USART_SendString@out,fsr2l
  2035  001378  C020  FFDA         	movff	USART_SendString@out+1,fsr2h
  2036  00137C  50DF               	movf	indf2,w,c
  2037  00137E  B4D8               	btfsc	status,2,c
  2038  001380  0012               	return	
  2039  001382  D7EF               	goto	l196
  2040  001384                     __end_of_USART_SendString:
  2041                           	opt stack 0
  2042                           tblptru	equ	0xFF8
  2043                           tblptrh	equ	0xFF7
  2044                           tblptrl	equ	0xFF6
  2045                           tablat	equ	0xFF5
  2046                           intcon	equ	0xFF2
  2047                           postinc0	equ	0xFEE
  2048                           wreg	equ	0xFE8
  2049                           indf2	equ	0xFDF
  2050                           fsr2h	equ	0xFDA
  2051                           fsr2l	equ	0xFD9
  2052                           status	equ	0xFD8
  2053                           
  2054 ;; *************** function _USART_TransmitChar *****************
  2055 ;; Defined at:
  2056 ;;		line 22 in file "USART_Source_File.c"
  2057 ;; Parameters:    Size  Location     Type
  2058 ;;  out             1    wreg     unsigned char 
  2059 ;; Auto vars:     Size  Location     Type
  2060 ;;  out             1   29[COMRAM] unsigned char 
  2061 ;; Return value:  Size  Location     Type
  2062 ;;                  1    wreg      void 
  2063 ;; Registers used:
  2064 ;;		wreg
  2065 ;; Tracked objects:
  2066 ;;		On entry : 0/0
  2067 ;;		On exit  : 0/0
  2068 ;;		Unchanged: 0/0
  2069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2070 ;;      Params:         0       0       0       0       0       0       0       0       0
  2071 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2072 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2073 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2074 ;;Total ram usage:        1 bytes
  2075 ;; Hardware stack levels used:    1
  2076 ;; Hardware stack levels required when called:    2
  2077 ;; This function calls:
  2078 ;;		Nothing
  2079 ;; This function is called by:
  2080 ;;		_USART_SendString
  2081 ;; This function uses a non-reentrant model
  2082 ;;
  2083                           
  2084                           	psect	text14
  2085  0013E2                     __ptext14:
  2086                           	opt stack 0
  2087  0013E2                     _USART_TransmitChar:
  2088                           	opt stack 27
  2089                           
  2090                           ;incstack = 0
  2091                           ;USART_TransmitChar@out stored from wreg
  2092  0013E2  6E1E               	movwf	USART_TransmitChar@out,c
  2093  0013E4                     
  2094                           ;USART_Source_File.c: 24: while(TXIF==0);
  2095  0013E4  A89E               	btfss	3998,4,c	;volatile
  2096  0013E6  D7FE               	goto	l1123
  2097                           
  2098                           ;USART_Source_File.c: 25: TXREG=out;
  2099  0013E8  C01E  FFAD         	movff	USART_TransmitChar@out,4013	;volatile
  2100  0013EC  0012               	return		;funcret
  2101  0013EE                     __end_of_USART_TransmitChar:
  2102                           	opt stack 0
  2103                           tblptru	equ	0xFF8
  2104                           tblptrh	equ	0xFF7
  2105                           tblptrl	equ	0xFF6
  2106                           tablat	equ	0xFF5
  2107                           intcon	equ	0xFF2
  2108                           postinc0	equ	0xFEE
  2109                           wreg	equ	0xFE8
  2110                           indf2	equ	0xFDF
  2111                           fsr2h	equ	0xFDA
  2112                           fsr2l	equ	0xFD9
  2113                           status	equ	0xFD8
  2114                           
  2115 ;; *************** function _USART_Init *****************
  2116 ;; Defined at:
  2117 ;;		line 10 in file "USART_Source_File.c"
  2118 ;; Parameters:    Size  Location     Type
  2119 ;;  baud_rate       4   32[BANK0 ] long 
  2120 ;; Auto vars:     Size  Location     Type
  2121 ;;  temp            3   36[BANK0 ] float 
  2122 ;; Return value:  Size  Location     Type
  2123 ;;                  1    wreg      void 
  2124 ;; Registers used:
  2125 ;;		wreg, status,2, status,0, cstack
  2126 ;; Tracked objects:
  2127 ;;		On entry : 0/0
  2128 ;;		On exit  : 0/0
  2129 ;;		Unchanged: 0/0
  2130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2131 ;;      Params:         0       4       0       0       0       0       0       0       0
  2132 ;;      Locals:         0       3       0       0       0       0       0       0       0
  2133 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2134 ;;      Totals:         0       7       0       0       0       0       0       0       0
  2135 ;;Total ram usage:        7 bytes
  2136 ;; Hardware stack levels used:    1
  2137 ;; Hardware stack levels required when called:    4
  2138 ;; This function calls:
  2139 ;;		___altoft
  2140 ;;		___ftadd
  2141 ;;		___ftdiv
  2142 ;;		___fttol
  2143 ;; This function is called by:
  2144 ;;		_main
  2145 ;; This function uses a non-reentrant model
  2146 ;;
  2147                           
  2148                           	psect	text15
  2149  000FDA                     __ptext15:
  2150                           	opt stack 0
  2151  000FDA                     _USART_Init:
  2152                           	opt stack 26
  2153                           
  2154                           ;USART_Source_File.c: 12: float temp;
  2155                           ;USART_Source_File.c: 13: TRISC6=0;
  2156                           
  2157                           ;incstack = 0
  2158  000FDA  9C94               	bcf	3988,6,c	;volatile
  2159                           
  2160                           ;USART_Source_File.c: 14: TRISC7=1;
  2161  000FDC  8E94               	bsf	3988,7,c	;volatile
  2162                           
  2163                           ;USART_Source_File.c: 15: temp=(((float)(8000000/64)/(float)baud_rate)-1);
  2164  000FDE  C080  F026         	movff	USART_Init@baud_rate,___altoft@c
  2165  000FE2  C081  F027         	movff	USART_Init@baud_rate+1,___altoft@c+1
  2166  000FE6  C082  F028         	movff	USART_Init@baud_rate+2,___altoft@c+2
  2167  000FEA  C083  F029         	movff	USART_Init@baud_rate+3,___altoft@c+3
  2168  000FEE  EC2D  F008         	call	___altoft	;wreg free
  2169  000FF2  C026  F065         	movff	?___altoft,___ftdiv@f2
  2170  000FF6  C027  F066         	movff	?___altoft+1,___ftdiv@f2+1
  2171  000FFA  C028  F067         	movff	?___altoft+2,___ftdiv@f2+2
  2172  000FFE  0E24               	movlw	36
  2173  001000  0100               	movlb	0	; () banked
  2174  001002  6F62               	movwf	___ftdiv@f1& (0+255),b
  2175  001004  0EF4               	movlw	244
  2176  001006  6F63               	movwf	(___ftdiv@f1+1)& (0+255),b
  2177  001008  0E47               	movlw	71
  2178  00100A  6F64               	movwf	(___ftdiv@f1+2)& (0+255),b
  2179  00100C  EC56  F005         	call	___ftdiv	;wreg free
  2180  001010  C062  F071         	movff	?___ftdiv,___ftadd@f1
  2181  001014  C063  F072         	movff	?___ftdiv+1,___ftadd@f1+1
  2182  001018  C064  F073         	movff	?___ftdiv+2,___ftadd@f1+2
  2183  00101C  0E00               	movlw	0
  2184  00101E  0100               	movlb	0	; () banked
  2185  001020  6F74               	movwf	___ftadd@f2& (0+255),b
  2186  001022  0E80               	movlw	128
  2187  001024  6F75               	movwf	(___ftadd@f2+1)& (0+255),b
  2188  001026  0EBF               	movlw	191
  2189  001028  6F76               	movwf	(___ftadd@f2+2)& (0+255),b
  2190  00102A  EC03  F004         	call	___ftadd	;wreg free
  2191  00102E  C071  F084         	movff	?___ftadd,USART_Init@temp
  2192  001032  C072  F085         	movff	?___ftadd+1,USART_Init@temp+1
  2193  001036  C073  F086         	movff	?___ftadd+2,USART_Init@temp+2
  2194                           
  2195                           ;USART_Source_File.c: 16: SPBRG=(int)temp;
  2196  00103A  C084  F071         	movff	USART_Init@temp,___fttol@f1
  2197  00103E  C085  F072         	movff	USART_Init@temp+1,___fttol@f1+1
  2198  001042  C086  F073         	movff	USART_Init@temp+2,___fttol@f1+2
  2199  001046  ECDA  F004         	call	___fttol	;wreg free
  2200  00104A  0100               	movlb	0	; () banked
  2201  00104C  5171               	movf	?___fttol& (0+255),w,b
  2202  00104E  6EAF               	movwf	4015,c	;volatile
  2203                           
  2204                           ; BSR set to: 0
  2205                           ;USART_Source_File.c: 17: TXSTA=0x20;
  2206  001050  0E20               	movlw	32
  2207  001052  6EAC               	movwf	4012,c	;volatile
  2208                           
  2209                           ; BSR set to: 0
  2210                           ;USART_Source_File.c: 19: RCSTA=0x94;
  2211  001054  0E94               	movlw	148
  2212  001056  6EAB               	movwf	4011,c	;volatile
  2213                           
  2214                           ; BSR set to: 0
  2215  001058  0012               	return		;funcret
  2216  00105A                     __end_of_USART_Init:
  2217                           	opt stack 0
  2218                           tblptru	equ	0xFF8
  2219                           tblptrh	equ	0xFF7
  2220                           tblptrl	equ	0xFF6
  2221                           tablat	equ	0xFF5
  2222                           intcon	equ	0xFF2
  2223                           postinc0	equ	0xFEE
  2224                           wreg	equ	0xFE8
  2225                           indf2	equ	0xFDF
  2226                           fsr2h	equ	0xFDA
  2227                           fsr2l	equ	0xFD9
  2228                           status	equ	0xFD8
  2229                           
  2230 ;; *************** function ___fttol *****************
  2231 ;; Defined at:
  2232 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  2233 ;; Parameters:    Size  Location     Type
  2234 ;;  f1              3   17[BANK0 ] float 
  2235 ;; Auto vars:     Size  Location     Type
  2236 ;;  lval            4   27[BANK0 ] unsigned long 
  2237 ;;  exp1            1   31[BANK0 ] unsigned char 
  2238 ;;  sign1           1   26[BANK0 ] unsigned char 
  2239 ;; Return value:  Size  Location     Type
  2240 ;;                  4   17[BANK0 ] long 
  2241 ;; Registers used:
  2242 ;;		wreg, status,2, status,0
  2243 ;; Tracked objects:
  2244 ;;		On entry : 0/0
  2245 ;;		On exit  : 0/0
  2246 ;;		Unchanged: 0/0
  2247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2248 ;;      Params:         0       4       0       0       0       0       0       0       0
  2249 ;;      Locals:         0       6       0       0       0       0       0       0       0
  2250 ;;      Temps:          0       5       0       0       0       0       0       0       0
  2251 ;;      Totals:         0      15       0       0       0       0       0       0       0
  2252 ;;Total ram usage:       15 bytes
  2253 ;; Hardware stack levels used:    1
  2254 ;; Hardware stack levels required when called:    2
  2255 ;; This function calls:
  2256 ;;		Nothing
  2257 ;; This function is called by:
  2258 ;;		_wait_in_ms
  2259 ;;		_USART_Init
  2260 ;; This function uses a non-reentrant model
  2261 ;;
  2262                           
  2263                           	psect	text16
  2264  0009B4                     __ptext16:
  2265                           	opt stack 0
  2266  0009B4                     ___fttol:
  2267                           	opt stack 24
  2268                           
  2269                           ; BSR set to: 0
  2270                           ;incstack = 0
  2271  0009B4  C073  F075         	movff	___fttol@f1+2,??___fttol
  2272  0009B8  0100               	movlb	0	; () banked
  2273  0009BA  6B76               	clrf	(??___fttol+1)& (0+255),b
  2274  0009BC  6B77               	clrf	(??___fttol+2)& (0+255),b
  2275  0009BE  3572               	rlcf	(___fttol@f1+1)& (0+255),w,b
  2276  0009C0  3775               	rlcf	??___fttol& (0+255),f,b
  2277  0009C2  E301               	bnc	u1111
  2278  0009C4  8176               	bsf	(??___fttol+1)& (0+255),0,b
  2279  0009C6                     u1111:
  2280  0009C6  5175               	movf	??___fttol& (0+255),w,b
  2281  0009C8  6F7F               	movwf	___fttol@exp1& (0+255),b
  2282  0009CA  517F               	movf	___fttol@exp1& (0+255),w,b
  2283  0009CC  A4D8               	btfss	status,2,c
  2284  0009CE  D009               	goto	l600
  2285                           
  2286                           ; BSR set to: 0
  2287  0009D0  0E00               	movlw	0
  2288  0009D2  6F71               	movwf	?___fttol& (0+255),b
  2289  0009D4  0E00               	movlw	0
  2290  0009D6  6F72               	movwf	(?___fttol+1)& (0+255),b
  2291  0009D8  0E00               	movlw	0
  2292  0009DA  6F73               	movwf	(?___fttol+2)& (0+255),b
  2293  0009DC  0E00               	movlw	0
  2294  0009DE  6F74               	movwf	(?___fttol+3)& (0+255),b
  2295                           
  2296                           ; BSR set to: 0
  2297  0009E0  0012               	return	
  2298  0009E2                     l600:
  2299                           
  2300                           ; BSR set to: 0
  2301                           
  2302                           ; BSR set to: 0
  2303  0009E2  0E17               	movlw	23
  2304  0009E4  6F75               	movwf	??___fttol& (0+255),b
  2305  0009E6  C071  F076         	movff	___fttol@f1,??___fttol+1
  2306  0009EA  C072  F077         	movff	___fttol@f1+1,??___fttol+2
  2307  0009EE  C073  F078         	movff	___fttol@f1+2,??___fttol+3
  2308  0009F2  2975               	incf	??___fttol& (0+255),w,b
  2309  0009F4  6F79               	movwf	(??___fttol+4)& (0+255),b
  2310  0009F6  D004               	goto	u1130
  2311  0009F8                     u1135:
  2312  0009F8  90D8               	bcf	status,0,c
  2313  0009FA  3378               	rrcf	(??___fttol+3)& (0+255),f,b
  2314  0009FC  3377               	rrcf	(??___fttol+2)& (0+255),f,b
  2315  0009FE  3376               	rrcf	(??___fttol+1)& (0+255),f,b
  2316  000A00                     u1130:
  2317  000A00  2F79               	decfsz	(??___fttol+4)& (0+255),f,b
  2318  000A02  D7FA               	goto	u1135
  2319  000A04  0100               	movlb	0	; () banked
  2320  000A06  5176               	movf	(??___fttol+1)& (0+255),w,b
  2321  000A08  6F7A               	movwf	___fttol@sign1& (0+255),b
  2322                           
  2323                           ; BSR set to: 0
  2324  000A0A  8F72               	bsf	(___fttol@f1+1)& (0+255),7,b
  2325                           
  2326                           ; BSR set to: 0
  2327  000A0C  0EFF               	movlw	255
  2328  000A0E  1771               	andwf	___fttol@f1& (0+255),f,b
  2329  000A10  0EFF               	movlw	255
  2330  000A12  1772               	andwf	(___fttol@f1+1)& (0+255),f,b
  2331  000A14  0E00               	movlw	0
  2332  000A16  1773               	andwf	(___fttol@f1+2)& (0+255),f,b
  2333                           
  2334                           ; BSR set to: 0
  2335  000A18  5171               	movf	___fttol@f1& (0+255),w,b
  2336  000A1A  6F7B               	movwf	___fttol@lval& (0+255),b
  2337  000A1C  5172               	movf	(___fttol@f1+1)& (0+255),w,b
  2338  000A1E  6F7C               	movwf	(___fttol@lval+1)& (0+255),b
  2339  000A20  5173               	movf	(___fttol@f1+2)& (0+255),w,b
  2340  000A22  6F7D               	movwf	(___fttol@lval+2)& (0+255),b
  2341  000A24  6B7E               	clrf	(___fttol@lval+3)& (0+255),b
  2342                           
  2343                           ; BSR set to: 0
  2344  000A26  0E8E               	movlw	142
  2345  000A28  5F7F               	subwf	___fttol@exp1& (0+255),f,b
  2346                           
  2347                           ; BSR set to: 0
  2348  000A2A  AF7F               	btfss	___fttol@exp1& (0+255),7,b
  2349  000A2C  D016               	goto	l602
  2350                           
  2351                           ; BSR set to: 0
  2352  000A2E  517F               	movf	___fttol@exp1& (0+255),w,b
  2353  000A30  0A80               	xorlw	128
  2354  000A32  0F8F               	addlw	143
  2355  000A34  B0D8               	btfsc	status,0,c
  2356  000A36  D009               	goto	l603
  2357                           
  2358                           ; BSR set to: 0
  2359  000A38  0E00               	movlw	0
  2360  000A3A  6F71               	movwf	?___fttol& (0+255),b
  2361  000A3C  0E00               	movlw	0
  2362  000A3E  6F72               	movwf	(?___fttol+1)& (0+255),b
  2363  000A40  0E00               	movlw	0
  2364  000A42  6F73               	movwf	(?___fttol+2)& (0+255),b
  2365  000A44  0E00               	movlw	0
  2366  000A46  6F74               	movwf	(?___fttol+3)& (0+255),b
  2367                           
  2368                           ; BSR set to: 0
  2369  000A48  0012               	return	
  2370  000A4A                     l603:
  2371                           
  2372                           ; BSR set to: 0
  2373                           
  2374                           ; BSR set to: 0
  2375                           
  2376                           ; BSR set to: 0
  2377  000A4A  90D8               	bcf	status,0,c
  2378  000A4C  337E               	rrcf	(___fttol@lval+3)& (0+255),f,b
  2379  000A4E  337D               	rrcf	(___fttol@lval+2)& (0+255),f,b
  2380  000A50  337C               	rrcf	(___fttol@lval+1)& (0+255),f,b
  2381  000A52  337B               	rrcf	___fttol@lval& (0+255),f,b
  2382                           
  2383                           ; BSR set to: 0
  2384  000A54  3F7F               	incfsz	___fttol@exp1& (0+255),f,b
  2385  000A56  D7F9               	goto	l603
  2386                           
  2387                           ; BSR set to: 0
  2388  000A58  D015               	goto	u1170
  2389  000A5A                     l602:
  2390                           
  2391                           ; BSR set to: 0
  2392                           
  2393                           ; BSR set to: 0
  2394  000A5A  0E17               	movlw	23
  2395  000A5C  657F               	cpfsgt	___fttol@exp1& (0+255),b
  2396  000A5E  D00F               	goto	l608
  2397                           
  2398                           ; BSR set to: 0
  2399  000A60  0E00               	movlw	0
  2400  000A62  6F71               	movwf	?___fttol& (0+255),b
  2401  000A64  0E00               	movlw	0
  2402  000A66  6F72               	movwf	(?___fttol+1)& (0+255),b
  2403  000A68  0E00               	movlw	0
  2404  000A6A  6F73               	movwf	(?___fttol+2)& (0+255),b
  2405  000A6C  0E00               	movlw	0
  2406  000A6E  6F74               	movwf	(?___fttol+3)& (0+255),b
  2407                           
  2408                           ; BSR set to: 0
  2409  000A70  0012               	return	
  2410  000A72                     
  2411                           ; BSR set to: 0
  2412                           
  2413                           ; BSR set to: 0
  2414  000A72  90D8               	bcf	status,0,c
  2415  000A74  377B               	rlcf	___fttol@lval& (0+255),f,b
  2416  000A76  377C               	rlcf	(___fttol@lval+1)& (0+255),f,b
  2417  000A78  377D               	rlcf	(___fttol@lval+2)& (0+255),f,b
  2418  000A7A  377E               	rlcf	(___fttol@lval+3)& (0+255),f,b
  2419  000A7C  077F               	decf	___fttol@exp1& (0+255),f,b
  2420  000A7E                     l608:
  2421                           
  2422                           ; BSR set to: 0
  2423                           
  2424                           ; BSR set to: 0
  2425  000A7E  517F               	movf	___fttol@exp1& (0+255),w,b
  2426  000A80  A4D8               	btfss	status,2,c
  2427  000A82  D7F7               	goto	l609
  2428  000A84                     u1170:
  2429                           
  2430                           ; BSR set to: 0
  2431                           
  2432                           ; BSR set to: 0
  2433                           
  2434                           ; BSR set to: 0
  2435  000A84  517A               	movf	___fttol@sign1& (0+255),w,b
  2436  000A86  B4D8               	btfsc	status,2,c
  2437  000A88  D008               	goto	l611
  2438                           
  2439                           ; BSR set to: 0
  2440  000A8A  1F7E               	comf	(___fttol@lval+3)& (0+255),f,b
  2441  000A8C  1F7D               	comf	(___fttol@lval+2)& (0+255),f,b
  2442  000A8E  1F7C               	comf	(___fttol@lval+1)& (0+255),f,b
  2443  000A90  6D7B               	negf	___fttol@lval& (0+255),b
  2444  000A92  0E00               	movlw	0
  2445  000A94  237C               	addwfc	(___fttol@lval+1)& (0+255),f,b
  2446  000A96  237D               	addwfc	(___fttol@lval+2)& (0+255),f,b
  2447  000A98  237E               	addwfc	(___fttol@lval+3)& (0+255),f,b
  2448  000A9A                     l611:
  2449                           
  2450                           ; BSR set to: 0
  2451                           
  2452                           ; BSR set to: 0
  2453  000A9A  C07B  F071         	movff	___fttol@lval,?___fttol
  2454  000A9E  C07C  F072         	movff	___fttol@lval+1,?___fttol+1
  2455  000AA2  C07D  F073         	movff	___fttol@lval+2,?___fttol+2
  2456  000AA6  C07E  F074         	movff	___fttol@lval+3,?___fttol+3
  2457  000AAA  0012               	return	
  2458  000AAC                     __end_of___fttol:
  2459                           	opt stack 0
  2460                           tblptru	equ	0xFF8
  2461                           tblptrh	equ	0xFF7
  2462                           tblptrl	equ	0xFF6
  2463                           tablat	equ	0xFF5
  2464                           intcon	equ	0xFF2
  2465                           postinc0	equ	0xFEE
  2466                           wreg	equ	0xFE8
  2467                           indf2	equ	0xFDF
  2468                           fsr2h	equ	0xFDA
  2469                           fsr2l	equ	0xFD9
  2470                           status	equ	0xFD8
  2471                           
  2472 ;; *************** function ___ftdiv *****************
  2473 ;; Defined at:
  2474 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  2475 ;; Parameters:    Size  Location     Type
  2476 ;;  f1              3    2[BANK0 ] float 
  2477 ;;  f2              3    5[BANK0 ] float 
  2478 ;; Auto vars:     Size  Location     Type
  2479 ;;  f3              3   12[BANK0 ] float 
  2480 ;;  sign            1   16[BANK0 ] unsigned char 
  2481 ;;  exp             1   15[BANK0 ] unsigned char 
  2482 ;;  cntr            1   11[BANK0 ] unsigned char 
  2483 ;; Return value:  Size  Location     Type
  2484 ;;                  3    2[BANK0 ] float 
  2485 ;; Registers used:
  2486 ;;		wreg, status,2, status,0, cstack
  2487 ;; Tracked objects:
  2488 ;;		On entry : 0/0
  2489 ;;		On exit  : 0/0
  2490 ;;		Unchanged: 0/0
  2491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2492 ;;      Params:         0       6       0       0       0       0       0       0       0
  2493 ;;      Locals:         0       6       0       0       0       0       0       0       0
  2494 ;;      Temps:          0       3       0       0       0       0       0       0       0
  2495 ;;      Totals:         0      15       0       0       0       0       0       0       0
  2496 ;;Total ram usage:       15 bytes
  2497 ;; Hardware stack levels used:    1
  2498 ;; Hardware stack levels required when called:    3
  2499 ;; This function calls:
  2500 ;;		___ftpack
  2501 ;; This function is called by:
  2502 ;;		_wait_in_ms
  2503 ;;		_USART_Init
  2504 ;; This function uses a non-reentrant model
  2505 ;;
  2506                           
  2507                           	psect	text17
  2508  000AAC                     __ptext17:
  2509                           	opt stack 0
  2510  000AAC                     ___ftdiv:
  2511                           	opt stack 23
  2512                           
  2513                           ; BSR set to: 0
  2514                           ;incstack = 0
  2515  000AAC  C064  F068         	movff	___ftdiv@f1+2,??___ftdiv
  2516  000AB0  0100               	movlb	0	; () banked
  2517  000AB2  6B69               	clrf	(??___ftdiv+1)& (0+255),b
  2518  000AB4  6B6A               	clrf	(??___ftdiv+2)& (0+255),b
  2519  000AB6  3563               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
  2520  000AB8  3768               	rlcf	??___ftdiv& (0+255),f,b
  2521  000ABA  E301               	bnc	u1891
  2522  000ABC  8169               	bsf	(??___ftdiv+1)& (0+255),0,b
  2523  000ABE                     u1891:
  2524  000ABE  5168               	movf	??___ftdiv& (0+255),w,b
  2525  000AC0  6F6F               	movwf	___ftdiv@exp& (0+255),b
  2526  000AC2  516F               	movf	___ftdiv@exp& (0+255),w,b
  2527  000AC4  A4D8               	btfss	status,2,c
  2528  000AC6  D007               	goto	l564
  2529                           
  2530                           ; BSR set to: 0
  2531  000AC8  0E00               	movlw	0
  2532  000ACA  6F62               	movwf	?___ftdiv& (0+255),b
  2533  000ACC  0E00               	movlw	0
  2534  000ACE  6F63               	movwf	(?___ftdiv+1)& (0+255),b
  2535  000AD0  0E00               	movlw	0
  2536  000AD2  6F64               	movwf	(?___ftdiv+2)& (0+255),b
  2537                           
  2538                           ; BSR set to: 0
  2539  000AD4  0012               	return	
  2540  000AD6                     l564:
  2541                           
  2542                           ; BSR set to: 0
  2543                           
  2544                           ; BSR set to: 0
  2545  000AD6  C067  F068         	movff	___ftdiv@f2+2,??___ftdiv
  2546  000ADA  6B69               	clrf	(??___ftdiv+1)& (0+255),b
  2547  000ADC  6B6A               	clrf	(??___ftdiv+2)& (0+255),b
  2548  000ADE  3566               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
  2549  000AE0  3768               	rlcf	??___ftdiv& (0+255),f,b
  2550  000AE2  E301               	bnc	u1911
  2551  000AE4  8169               	bsf	(??___ftdiv+1)& (0+255),0,b
  2552  000AE6                     u1911:
  2553  000AE6  5168               	movf	??___ftdiv& (0+255),w,b
  2554  000AE8  6F70               	movwf	___ftdiv@sign& (0+255),b
  2555  000AEA  5170               	movf	___ftdiv@sign& (0+255),w,b
  2556  000AEC  A4D8               	btfss	status,2,c
  2557  000AEE  D007               	goto	l566
  2558                           
  2559                           ; BSR set to: 0
  2560  000AF0  0E00               	movlw	0
  2561  000AF2  6F62               	movwf	?___ftdiv& (0+255),b
  2562  000AF4  0E00               	movlw	0
  2563  000AF6  6F63               	movwf	(?___ftdiv+1)& (0+255),b
  2564  000AF8  0E00               	movlw	0
  2565  000AFA  6F64               	movwf	(?___ftdiv+2)& (0+255),b
  2566                           
  2567                           ; BSR set to: 0
  2568  000AFC  0012               	return	
  2569  000AFE                     l566:
  2570                           
  2571                           ; BSR set to: 0
  2572                           
  2573                           ; BSR set to: 0
  2574  000AFE  0E00               	movlw	0
  2575  000B00  6F6C               	movwf	___ftdiv@f3& (0+255),b
  2576  000B02  0E00               	movlw	0
  2577  000B04  6F6D               	movwf	(___ftdiv@f3+1)& (0+255),b
  2578  000B06  0E00               	movlw	0
  2579  000B08  6F6E               	movwf	(___ftdiv@f3+2)& (0+255),b
  2580                           
  2581                           ; BSR set to: 0
  2582  000B0A  5170               	movf	___ftdiv@sign& (0+255),w,b
  2583  000B0C  0F89               	addlw	137
  2584  000B0E  5F6F               	subwf	___ftdiv@exp& (0+255),f,b
  2585                           
  2586                           ; BSR set to: 0
  2587  000B10  C064  F070         	movff	___ftdiv@f1+2,___ftdiv@sign
  2588                           
  2589                           ; BSR set to: 0
  2590  000B14  5167               	movf	(___ftdiv@f2+2)& (0+255),w,b
  2591  000B16  1B70               	xorwf	___ftdiv@sign& (0+255),f,b
  2592                           
  2593                           ; BSR set to: 0
  2594  000B18  0E80               	movlw	128
  2595  000B1A  1770               	andwf	___ftdiv@sign& (0+255),f,b
  2596                           
  2597                           ; BSR set to: 0
  2598  000B1C  8F63               	bsf	(___ftdiv@f1+1)& (0+255),7,b
  2599                           
  2600                           ; BSR set to: 0
  2601  000B1E  0EFF               	movlw	255
  2602  000B20  1762               	andwf	___ftdiv@f1& (0+255),f,b
  2603  000B22  0EFF               	movlw	255
  2604  000B24  1763               	andwf	(___ftdiv@f1+1)& (0+255),f,b
  2605  000B26  0E00               	movlw	0
  2606  000B28  1764               	andwf	(___ftdiv@f1+2)& (0+255),f,b
  2607                           
  2608                           ; BSR set to: 0
  2609  000B2A  8F66               	bsf	(___ftdiv@f2+1)& (0+255),7,b
  2610                           
  2611                           ; BSR set to: 0
  2612  000B2C  0EFF               	movlw	255
  2613  000B2E  1765               	andwf	___ftdiv@f2& (0+255),f,b
  2614  000B30  0EFF               	movlw	255
  2615  000B32  1766               	andwf	(___ftdiv@f2+1)& (0+255),f,b
  2616  000B34  0E00               	movlw	0
  2617  000B36  1767               	andwf	(___ftdiv@f2+2)& (0+255),f,b
  2618                           
  2619                           ; BSR set to: 0
  2620  000B38  0E18               	movlw	24
  2621  000B3A  6F6B               	movwf	___ftdiv@cntr& (0+255),b
  2622  000B3C                     
  2623                           ; BSR set to: 0
  2624                           
  2625                           ; BSR set to: 0
  2626  000B3C  90D8               	bcf	status,0,c
  2627  000B3E  376C               	rlcf	___ftdiv@f3& (0+255),f,b
  2628  000B40  376D               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  2629  000B42  376E               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  2630                           
  2631                           ; BSR set to: 0
  2632  000B44  5165               	movf	___ftdiv@f2& (0+255),w,b
  2633  000B46  5D62               	subwf	___ftdiv@f1& (0+255),w,b
  2634  000B48  5166               	movf	(___ftdiv@f2+1)& (0+255),w,b
  2635  000B4A  5963               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
  2636  000B4C  5167               	movf	(___ftdiv@f2+2)& (0+255),w,b
  2637  000B4E  5964               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
  2638  000B50  A0D8               	btfss	status,0,c
  2639  000B52  D007               	goto	l568
  2640                           
  2641                           ; BSR set to: 0
  2642  000B54  5165               	movf	___ftdiv@f2& (0+255),w,b
  2643  000B56  5F62               	subwf	___ftdiv@f1& (0+255),f,b
  2644  000B58  5166               	movf	(___ftdiv@f2+1)& (0+255),w,b
  2645  000B5A  5B63               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
  2646  000B5C  5167               	movf	(___ftdiv@f2+2)& (0+255),w,b
  2647  000B5E  5B64               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
  2648                           
  2649                           ; BSR set to: 0
  2650  000B60  816C               	bsf	___ftdiv@f3& (0+255),0,b
  2651  000B62                     l568:
  2652                           
  2653                           ; BSR set to: 0
  2654  000B62  90D8               	bcf	status,0,c
  2655  000B64  3762               	rlcf	___ftdiv@f1& (0+255),f,b
  2656  000B66  3763               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
  2657  000B68  3764               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
  2658                           
  2659                           ; BSR set to: 0
  2660  000B6A  2F6B               	decfsz	___ftdiv@cntr& (0+255),f,b
  2661  000B6C  D7E7               	goto	l567
  2662                           
  2663                           ; BSR set to: 0
  2664                           
  2665                           ; BSR set to: 0
  2666  000B6E  C06C  F01E         	movff	___ftdiv@f3,___ftpack@arg
  2667  000B72  C06D  F01F         	movff	___ftdiv@f3+1,___ftpack@arg+1
  2668  000B76  C06E  F020         	movff	___ftdiv@f3+2,___ftpack@arg+2
  2669  000B7A  C06F  F021         	movff	___ftdiv@exp,___ftpack@exp
  2670  000B7E  C070  F022         	movff	___ftdiv@sign,___ftpack@sign
  2671  000B82  ECA6  F006         	call	___ftpack	;wreg free
  2672  000B86  C01E  F062         	movff	?___ftpack,?___ftdiv
  2673  000B8A  C01F  F063         	movff	?___ftpack+1,?___ftdiv+1
  2674  000B8E  C020  F064         	movff	?___ftpack+2,?___ftdiv+2
  2675  000B92  0012               	return	
  2676  000B94                     __end_of___ftdiv:
  2677                           	opt stack 0
  2678                           tblptru	equ	0xFF8
  2679                           tblptrh	equ	0xFF7
  2680                           tblptrl	equ	0xFF6
  2681                           tablat	equ	0xFF5
  2682                           intcon	equ	0xFF2
  2683                           postinc0	equ	0xFEE
  2684                           wreg	equ	0xFE8
  2685                           indf2	equ	0xFDF
  2686                           fsr2h	equ	0xFDA
  2687                           fsr2l	equ	0xFD9
  2688                           status	equ	0xFD8
  2689                           
  2690 ;; *************** function ___ftadd *****************
  2691 ;; Defined at:
  2692 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  2693 ;; Parameters:    Size  Location     Type
  2694 ;;  f1              3   17[BANK0 ] float 
  2695 ;;  f2              3   20[BANK0 ] float 
  2696 ;; Auto vars:     Size  Location     Type
  2697 ;;  exp1            1   28[BANK0 ] unsigned char 
  2698 ;;  exp2            1   27[BANK0 ] unsigned char 
  2699 ;;  sign            1   26[BANK0 ] unsigned char 
  2700 ;; Return value:  Size  Location     Type
  2701 ;;                  3   17[BANK0 ] float 
  2702 ;; Registers used:
  2703 ;;		wreg, status,2, status,0, cstack
  2704 ;; Tracked objects:
  2705 ;;		On entry : 0/0
  2706 ;;		On exit  : 0/0
  2707 ;;		Unchanged: 0/0
  2708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2709 ;;      Params:         0       6       0       0       0       0       0       0       0
  2710 ;;      Locals:         0       3       0       0       0       0       0       0       0
  2711 ;;      Temps:          0       3       0       0       0       0       0       0       0
  2712 ;;      Totals:         0      12       0       0       0       0       0       0       0
  2713 ;;Total ram usage:       12 bytes
  2714 ;; Hardware stack levels used:    1
  2715 ;; Hardware stack levels required when called:    3
  2716 ;; This function calls:
  2717 ;;		___ftpack
  2718 ;; This function is called by:
  2719 ;;		_USART_Init
  2720 ;; This function uses a non-reentrant model
  2721 ;;
  2722                           
  2723                           	psect	text18
  2724  000806                     __ptext18:
  2725                           	opt stack 0
  2726  000806                     ___ftadd:
  2727                           	opt stack 26
  2728                           
  2729                           ;incstack = 0
  2730  000806  C073  F077         	movff	___ftadd@f1+2,??___ftadd
  2731  00080A  0100               	movlb	0	; () banked
  2732  00080C  6B78               	clrf	(??___ftadd+1)& (0+255),b
  2733  00080E  6B79               	clrf	(??___ftadd+2)& (0+255),b
  2734  000810  3572               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  2735  000812  3777               	rlcf	??___ftadd& (0+255),f,b
  2736  000814  E301               	bnc	u2041
  2737  000816  8178               	bsf	(??___ftadd+1)& (0+255),0,b
  2738  000818                     u2041:
  2739  000818  5177               	movf	??___ftadd& (0+255),w,b
  2740  00081A  6F7C               	movwf	___ftadd@exp1& (0+255),b
  2741  00081C  C076  F077         	movff	___ftadd@f2+2,??___ftadd
  2742  000820  6B78               	clrf	(??___ftadd+1)& (0+255),b
  2743  000822  6B79               	clrf	(??___ftadd+2)& (0+255),b
  2744  000824  3575               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  2745  000826  3777               	rlcf	??___ftadd& (0+255),f,b
  2746  000828  E301               	bnc	u2051
  2747  00082A  8178               	bsf	(??___ftadd+1)& (0+255),0,b
  2748  00082C                     u2051:
  2749  00082C  5177               	movf	??___ftadd& (0+255),w,b
  2750  00082E  6F7B               	movwf	___ftadd@exp2& (0+255),b
  2751                           
  2752                           ; BSR set to: 0
  2753  000830  517C               	movf	___ftadd@exp1& (0+255),w,b
  2754  000832  B4D8               	btfsc	status,2,c
  2755  000834  D00B               	goto	u2080
  2756                           
  2757                           ; BSR set to: 0
  2758  000836  517B               	movf	___ftadd@exp2& (0+255),w,b
  2759  000838  5D7C               	subwf	___ftadd@exp1& (0+255),w,b
  2760  00083A  B0D8               	btfsc	status,0,c
  2761  00083C  D00E               	goto	l531
  2762                           
  2763                           ; BSR set to: 0
  2764  00083E  517C               	movf	___ftadd@exp1& (0+255),w,b
  2765  000840  0800               	sublw	0
  2766  000842  257B               	addwf	___ftadd@exp2& (0+255),w,b
  2767  000844  6F77               	movwf	??___ftadd& (0+255),b
  2768  000846  0E18               	movlw	24
  2769  000848  6577               	cpfsgt	??___ftadd& (0+255),b
  2770  00084A  D007               	goto	l531
  2771  00084C                     u2080:
  2772                           
  2773                           ; BSR set to: 0
  2774  00084C  C074  F071         	movff	___ftadd@f2,?___ftadd
  2775  000850  C075  F072         	movff	___ftadd@f2+1,?___ftadd+1
  2776  000854  C076  F073         	movff	___ftadd@f2+2,?___ftadd+2
  2777  000858  0012               	return	
  2778  00085A                     l531:
  2779                           
  2780                           ; BSR set to: 0
  2781                           
  2782                           ; BSR set to: 0
  2783  00085A  517B               	movf	___ftadd@exp2& (0+255),w,b
  2784  00085C  B4D8               	btfsc	status,2,c
  2785  00085E  D00B               	goto	u2110
  2786                           
  2787                           ; BSR set to: 0
  2788  000860  517C               	movf	___ftadd@exp1& (0+255),w,b
  2789  000862  5D7B               	subwf	___ftadd@exp2& (0+255),w,b
  2790  000864  B0D8               	btfsc	status,0,c
  2791  000866  D00E               	goto	l535
  2792                           
  2793                           ; BSR set to: 0
  2794  000868  517B               	movf	___ftadd@exp2& (0+255),w,b
  2795  00086A  0800               	sublw	0
  2796  00086C  257C               	addwf	___ftadd@exp1& (0+255),w,b
  2797  00086E  6F77               	movwf	??___ftadd& (0+255),b
  2798  000870  0E18               	movlw	24
  2799  000872  6577               	cpfsgt	??___ftadd& (0+255),b
  2800  000874  D007               	goto	l535
  2801  000876                     u2110:
  2802                           
  2803                           ; BSR set to: 0
  2804  000876  C071  F071         	movff	___ftadd@f1,?___ftadd
  2805  00087A  C072  F072         	movff	___ftadd@f1+1,?___ftadd+1
  2806  00087E  C073  F073         	movff	___ftadd@f1+2,?___ftadd+2
  2807  000882  0012               	return	
  2808  000884                     l535:
  2809                           
  2810                           ; BSR set to: 0
  2811                           
  2812                           ; BSR set to: 0
  2813  000884  0E06               	movlw	6
  2814  000886  6F7A               	movwf	___ftadd@sign& (0+255),b
  2815                           
  2816                           ; BSR set to: 0
  2817  000888  BF73               	btfsc	(___ftadd@f1+2)& (0+255),7,b
  2818                           
  2819                           ; BSR set to: 0
  2820  00088A  8F7A               	bsf	___ftadd@sign& (0+255),7,b
  2821                           
  2822                           ; BSR set to: 0
  2823                           
  2824                           ; BSR set to: 0
  2825  00088C  BF76               	btfsc	(___ftadd@f2+2)& (0+255),7,b
  2826                           
  2827                           ; BSR set to: 0
  2828  00088E  8D7A               	bsf	___ftadd@sign& (0+255),6,b
  2829                           
  2830                           ; BSR set to: 0
  2831  000890  8F72               	bsf	(___ftadd@f1+1)& (0+255),7,b
  2832                           
  2833                           ; BSR set to: 0
  2834  000892  0EFF               	movlw	255
  2835  000894  1771               	andwf	___ftadd@f1& (0+255),f,b
  2836  000896  0EFF               	movlw	255
  2837  000898  1772               	andwf	(___ftadd@f1+1)& (0+255),f,b
  2838  00089A  0E00               	movlw	0
  2839  00089C  1773               	andwf	(___ftadd@f1+2)& (0+255),f,b
  2840  00089E  8F75               	bsf	(___ftadd@f2+1)& (0+255),7,b
  2841                           
  2842                           ; BSR set to: 0
  2843  0008A0  0EFF               	movlw	255
  2844  0008A2  1774               	andwf	___ftadd@f2& (0+255),f,b
  2845  0008A4  0EFF               	movlw	255
  2846  0008A6  1775               	andwf	(___ftadd@f2+1)& (0+255),f,b
  2847  0008A8  0E00               	movlw	0
  2848  0008AA  1776               	andwf	(___ftadd@f2+2)& (0+255),f,b
  2849                           
  2850                           ; BSR set to: 0
  2851  0008AC  517B               	movf	___ftadd@exp2& (0+255),w,b
  2852  0008AE  5D7C               	subwf	___ftadd@exp1& (0+255),w,b
  2853  0008B0  B0D8               	btfsc	status,0,c
  2854  0008B2  D01B               	goto	l540
  2855  0008B4                     u2140:
  2856                           
  2857                           ; BSR set to: 0
  2858                           
  2859                           ; BSR set to: 0
  2860  0008B4  90D8               	bcf	status,0,c
  2861  0008B6  3774               	rlcf	___ftadd@f2& (0+255),f,b
  2862  0008B8  3775               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  2863  0008BA  3776               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  2864  0008BC  077B               	decf	___ftadd@exp2& (0+255),f,b
  2865                           
  2866                           ; BSR set to: 0
  2867  0008BE  517C               	movf	___ftadd@exp1& (0+255),w,b
  2868  0008C0  197B               	xorwf	___ftadd@exp2& (0+255),w,b
  2869  0008C2  B4D8               	btfsc	status,2,c
  2870  0008C4  D00D               	goto	l545
  2871                           
  2872                           ; BSR set to: 0
  2873  0008C6  077A               	decf	___ftadd@sign& (0+255),f,b
  2874  0008C8  C07A  F077         	movff	___ftadd@sign,??___ftadd
  2875  0008CC  0E07               	movlw	7
  2876  0008CE  1777               	andwf	??___ftadd& (0+255),f,b
  2877  0008D0  B4D8               	btfsc	status,2,c
  2878  0008D2  D006               	goto	l545
  2879  0008D4  D7EF               	goto	u2140
  2880  0008D6                     
  2881                           ; BSR set to: 0
  2882                           
  2883                           ; BSR set to: 0
  2884  0008D6  90D8               	bcf	status,0,c
  2885  0008D8  3373               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  2886  0008DA  3372               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  2887  0008DC  3371               	rrcf	___ftadd@f1& (0+255),f,b
  2888  0008DE  2B7C               	incf	___ftadd@exp1& (0+255),f,b
  2889  0008E0                     l545:
  2890                           
  2891                           ; BSR set to: 0
  2892                           
  2893                           ; BSR set to: 0
  2894  0008E0  517B               	movf	___ftadd@exp2& (0+255),w,b
  2895  0008E2  197C               	xorwf	___ftadd@exp1& (0+255),w,b
  2896  0008E4  B4D8               	btfsc	status,2,c
  2897  0008E6  D01F               	goto	u2210
  2898  0008E8  D7F6               	goto	l546
  2899  0008EA                     l540:
  2900                           
  2901                           ; BSR set to: 0
  2902                           
  2903                           ; BSR set to: 0
  2904  0008EA  517C               	movf	___ftadd@exp1& (0+255),w,b
  2905  0008EC  5D7B               	subwf	___ftadd@exp2& (0+255),w,b
  2906  0008EE  B0D8               	btfsc	status,0,c
  2907  0008F0  D01A               	goto	u2210
  2908  0008F2                     u2180:
  2909                           
  2910                           ; BSR set to: 0
  2911                           
  2912                           ; BSR set to: 0
  2913  0008F2  90D8               	bcf	status,0,c
  2914  0008F4  3771               	rlcf	___ftadd@f1& (0+255),f,b
  2915  0008F6  3772               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  2916  0008F8  3773               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  2917  0008FA  077C               	decf	___ftadd@exp1& (0+255),f,b
  2918                           
  2919                           ; BSR set to: 0
  2920  0008FC  517C               	movf	___ftadd@exp1& (0+255),w,b
  2921  0008FE  197B               	xorwf	___ftadd@exp2& (0+255),w,b
  2922  000900  B4D8               	btfsc	status,2,c
  2923  000902  D00D               	goto	l554
  2924                           
  2925                           ; BSR set to: 0
  2926  000904  077A               	decf	___ftadd@sign& (0+255),f,b
  2927  000906  C07A  F077         	movff	___ftadd@sign,??___ftadd
  2928  00090A  0E07               	movlw	7
  2929  00090C  1777               	andwf	??___ftadd& (0+255),f,b
  2930  00090E  B4D8               	btfsc	status,2,c
  2931  000910  D006               	goto	l554
  2932  000912  D7EF               	goto	u2180
  2933  000914                     
  2934                           ; BSR set to: 0
  2935                           
  2936                           ; BSR set to: 0
  2937  000914  90D8               	bcf	status,0,c
  2938  000916  3376               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  2939  000918  3375               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  2940  00091A  3374               	rrcf	___ftadd@f2& (0+255),f,b
  2941  00091C  2B7B               	incf	___ftadd@exp2& (0+255),f,b
  2942  00091E                     l554:
  2943                           
  2944                           ; BSR set to: 0
  2945                           
  2946                           ; BSR set to: 0
  2947  00091E  517B               	movf	___ftadd@exp2& (0+255),w,b
  2948  000920  197C               	xorwf	___ftadd@exp1& (0+255),w,b
  2949  000922  A4D8               	btfss	status,2,c
  2950  000924  D7F7               	goto	l555
  2951  000926                     u2210:
  2952                           
  2953                           ; BSR set to: 0
  2954                           
  2955                           ; BSR set to: 0
  2956                           
  2957                           ; BSR set to: 0
  2958  000926  AF7A               	btfss	___ftadd@sign& (0+255),7,b
  2959  000928  D00C               	goto	l557
  2960                           
  2961                           ; BSR set to: 0
  2962  00092A  0EFF               	movlw	255
  2963  00092C  1B71               	xorwf	___ftadd@f1& (0+255),f,b
  2964  00092E  0EFF               	movlw	255
  2965  000930  1B72               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  2966  000932  0EFF               	movlw	255
  2967  000934  1B73               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  2968  000936  0E01               	movlw	1
  2969  000938  2771               	addwf	___ftadd@f1& (0+255),f,b
  2970  00093A  0E00               	movlw	0
  2971  00093C  2372               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  2972  00093E  0E00               	movlw	0
  2973  000940  2373               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  2974  000942                     l557:
  2975                           
  2976                           ; BSR set to: 0
  2977  000942  AD7A               	btfss	___ftadd@sign& (0+255),6,b
  2978  000944  D00C               	goto	l558
  2979                           
  2980                           ; BSR set to: 0
  2981  000946  0EFF               	movlw	255
  2982  000948  1B74               	xorwf	___ftadd@f2& (0+255),f,b
  2983  00094A  0EFF               	movlw	255
  2984  00094C  1B75               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  2985  00094E  0EFF               	movlw	255
  2986  000950  1B76               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  2987  000952  0E01               	movlw	1
  2988  000954  2774               	addwf	___ftadd@f2& (0+255),f,b
  2989  000956  0E00               	movlw	0
  2990  000958  2375               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  2991  00095A  0E00               	movlw	0
  2992  00095C  2376               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  2993  00095E                     l558:
  2994                           
  2995                           ; BSR set to: 0
  2996                           
  2997                           ; BSR set to: 0
  2998  00095E  0E00               	movlw	0
  2999  000960  6F7A               	movwf	___ftadd@sign& (0+255),b
  3000                           
  3001                           ; BSR set to: 0
  3002  000962  5171               	movf	___ftadd@f1& (0+255),w,b
  3003  000964  2774               	addwf	___ftadd@f2& (0+255),f,b
  3004  000966  5172               	movf	(___ftadd@f1+1)& (0+255),w,b
  3005  000968  2375               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  3006  00096A  5173               	movf	(___ftadd@f1+2)& (0+255),w,b
  3007  00096C  2376               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  3008                           
  3009                           ; BSR set to: 0
  3010  00096E  AF76               	btfss	(___ftadd@f2+2)& (0+255),7,b
  3011  000970  D00E               	goto	l559
  3012                           
  3013                           ; BSR set to: 0
  3014  000972  0EFF               	movlw	255
  3015  000974  1B74               	xorwf	___ftadd@f2& (0+255),f,b
  3016  000976  0EFF               	movlw	255
  3017  000978  1B75               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  3018  00097A  0EFF               	movlw	255
  3019  00097C  1B76               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  3020  00097E  0E01               	movlw	1
  3021  000980  2774               	addwf	___ftadd@f2& (0+255),f,b
  3022  000982  0E00               	movlw	0
  3023  000984  2375               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  3024  000986  0E00               	movlw	0
  3025  000988  2376               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  3026                           
  3027                           ; BSR set to: 0
  3028  00098A  0E01               	movlw	1
  3029  00098C  6F7A               	movwf	___ftadd@sign& (0+255),b
  3030  00098E                     l559:
  3031                           
  3032                           ; BSR set to: 0
  3033                           
  3034                           ; BSR set to: 0
  3035  00098E  C074  F01E         	movff	___ftadd@f2,___ftpack@arg
  3036  000992  C075  F01F         	movff	___ftadd@f2+1,___ftpack@arg+1
  3037  000996  C076  F020         	movff	___ftadd@f2+2,___ftpack@arg+2
  3038  00099A  C07C  F021         	movff	___ftadd@exp1,___ftpack@exp
  3039  00099E  C07A  F022         	movff	___ftadd@sign,___ftpack@sign
  3040  0009A2  ECA6  F006         	call	___ftpack	;wreg free
  3041  0009A6  C01E  F071         	movff	?___ftpack,?___ftadd
  3042  0009AA  C01F  F072         	movff	?___ftpack+1,?___ftadd+1
  3043  0009AE  C020  F073         	movff	?___ftpack+2,?___ftadd+2
  3044  0009B2  0012               	return	
  3045  0009B4                     __end_of___ftadd:
  3046                           	opt stack 0
  3047                           tblptru	equ	0xFF8
  3048                           tblptrh	equ	0xFF7
  3049                           tblptrl	equ	0xFF6
  3050                           tablat	equ	0xFF5
  3051                           intcon	equ	0xFF2
  3052                           postinc0	equ	0xFEE
  3053                           wreg	equ	0xFE8
  3054                           indf2	equ	0xFDF
  3055                           fsr2h	equ	0xFDA
  3056                           fsr2l	equ	0xFD9
  3057                           status	equ	0xFD8
  3058                           
  3059 ;; *************** function ___altoft *****************
  3060 ;; Defined at:
  3061 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
  3062 ;; Parameters:    Size  Location     Type
  3063 ;;  c               4   37[COMRAM] long 
  3064 ;; Auto vars:     Size  Location     Type
  3065 ;;  sign            1    1[BANK0 ] unsigned char 
  3066 ;;  exp             1    0[BANK0 ] unsigned char 
  3067 ;; Return value:  Size  Location     Type
  3068 ;;                  3   37[COMRAM] float 
  3069 ;; Registers used:
  3070 ;;		wreg, status,2, status,0, cstack
  3071 ;; Tracked objects:
  3072 ;;		On entry : 0/0
  3073 ;;		On exit  : 0/0
  3074 ;;		Unchanged: 0/0
  3075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3076 ;;      Params:         4       0       0       0       0       0       0       0       0
  3077 ;;      Locals:         0       2       0       0       0       0       0       0       0
  3078 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3079 ;;      Totals:         8       2       0       0       0       0       0       0       0
  3080 ;;Total ram usage:       10 bytes
  3081 ;; Hardware stack levels used:    1
  3082 ;; Hardware stack levels required when called:    3
  3083 ;; This function calls:
  3084 ;;		___ftpack
  3085 ;; This function is called by:
  3086 ;;		_USART_Init
  3087 ;; This function uses a non-reentrant model
  3088 ;;
  3089                           
  3090                           	psect	text19
  3091  00105A                     __ptext19:
  3092                           	opt stack 0
  3093  00105A                     ___altoft:
  3094                           	opt stack 26
  3095                           
  3096                           ;incstack = 0
  3097  00105A  0E00               	movlw	0
  3098  00105C  0100               	movlb	0	; () banked
  3099  00105E  6F61               	movwf	___altoft@sign& (0+255),b
  3100  001060  0E8E               	movlw	142
  3101  001062  6F60               	movwf	___altoft@exp& (0+255),b
  3102                           
  3103                           ; BSR set to: 0
  3104  001064  AE29               	btfss	___altoft@c+3,7,c
  3105  001066  D011               	goto	l370
  3106                           
  3107                           ; BSR set to: 0
  3108  001068  1E29               	comf	___altoft@c+3,f,c
  3109  00106A  1E28               	comf	___altoft@c+2,f,c
  3110  00106C  1E27               	comf	___altoft@c+1,f,c
  3111  00106E  6C26               	negf	___altoft@c,c
  3112  001070  0E00               	movlw	0
  3113  001072  2227               	addwfc	___altoft@c+1,f,c
  3114  001074  2228               	addwfc	___altoft@c+2,f,c
  3115  001076  2229               	addwfc	___altoft@c+3,f,c
  3116                           
  3117                           ; BSR set to: 0
  3118  001078  0E01               	movlw	1
  3119  00107A  6F61               	movwf	___altoft@sign& (0+255),b
  3120                           
  3121                           ; BSR set to: 0
  3122  00107C  D006               	goto	l370
  3123  00107E                     
  3124                           ; BSR set to: 0
  3125                           
  3126                           ; BSR set to: 0
  3127  00107E  90D8               	bcf	status,0,c
  3128  001080  3229               	rrcf	___altoft@c+3,f,c
  3129  001082  3228               	rrcf	___altoft@c+2,f,c
  3130  001084  3227               	rrcf	___altoft@c+1,f,c
  3131  001086  3226               	rrcf	___altoft@c,f,c
  3132  001088  2B60               	incf	___altoft@exp& (0+255),f,b
  3133  00108A                     l370:
  3134                           
  3135                           ; BSR set to: 0
  3136                           
  3137                           ; BSR set to: 0
  3138  00108A  0E00               	movlw	0
  3139  00108C  1426               	andwf	___altoft@c,w,c
  3140  00108E  6E2A               	movwf	??___altoft& (0+255),c
  3141  001090  0E00               	movlw	0
  3142  001092  1427               	andwf	___altoft@c+1,w,c
  3143  001094  6E2B               	movwf	(??___altoft+1)& (0+255),c
  3144  001096  0E00               	movlw	0
  3145  001098  1428               	andwf	___altoft@c+2,w,c
  3146  00109A  6E2C               	movwf	(??___altoft+2)& (0+255),c
  3147  00109C  0EFF               	movlw	255
  3148  00109E  1429               	andwf	___altoft@c+3,w,c
  3149  0010A0  6E2D               	movwf	(??___altoft+3)& (0+255),c
  3150  0010A2  502A               	movf	??___altoft,w,c
  3151  0010A4  102B               	iorwf	??___altoft+1,w,c
  3152  0010A6  102C               	iorwf	??___altoft+2,w,c
  3153  0010A8  102D               	iorwf	??___altoft+3,w,c
  3154  0010AA  A4D8               	btfss	status,2,c
  3155  0010AC  D7E8               	goto	l371
  3156                           
  3157                           ; BSR set to: 0
  3158                           
  3159                           ; BSR set to: 0
  3160  0010AE  C026  F01E         	movff	___altoft@c,___ftpack@arg
  3161  0010B2  C027  F01F         	movff	___altoft@c+1,___ftpack@arg+1
  3162  0010B6  C028  F020         	movff	___altoft@c+2,___ftpack@arg+2
  3163  0010BA  C060  F021         	movff	___altoft@exp,___ftpack@exp
  3164  0010BE  C061  F022         	movff	___altoft@sign,___ftpack@sign
  3165  0010C2  ECA6  F006         	call	___ftpack	;wreg free
  3166  0010C6  C01E  F026         	movff	?___ftpack,?___altoft
  3167  0010CA  C01F  F027         	movff	?___ftpack+1,?___altoft+1
  3168  0010CE  C020  F028         	movff	?___ftpack+2,?___altoft+2
  3169  0010D2  0012               	return	
  3170  0010D4                     __end_of___altoft:
  3171                           	opt stack 0
  3172                           tblptru	equ	0xFF8
  3173                           tblptrh	equ	0xFF7
  3174                           tblptrl	equ	0xFF6
  3175                           tablat	equ	0xFF5
  3176                           intcon	equ	0xFF2
  3177                           postinc0	equ	0xFEE
  3178                           wreg	equ	0xFE8
  3179                           indf2	equ	0xFDF
  3180                           fsr2h	equ	0xFDA
  3181                           fsr2l	equ	0xFD9
  3182                           status	equ	0xFD8
  3183                           
  3184 ;; *************** function ___ftpack *****************
  3185 ;; Defined at:
  3186 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  3187 ;; Parameters:    Size  Location     Type
  3188 ;;  arg             3   29[COMRAM] unsigned um
  3189 ;;  exp             1   32[COMRAM] unsigned char 
  3190 ;;  sign            1   33[COMRAM] unsigned char 
  3191 ;; Auto vars:     Size  Location     Type
  3192 ;;		None
  3193 ;; Return value:  Size  Location     Type
  3194 ;;                  3   29[COMRAM] float 
  3195 ;; Registers used:
  3196 ;;		wreg, status,2, status,0
  3197 ;; Tracked objects:
  3198 ;;		On entry : 0/0
  3199 ;;		On exit  : 0/0
  3200 ;;		Unchanged: 0/0
  3201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3202 ;;      Params:         5       0       0       0       0       0       0       0       0
  3203 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3204 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3205 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3206 ;;Total ram usage:        8 bytes
  3207 ;; Hardware stack levels used:    1
  3208 ;; Hardware stack levels required when called:    2
  3209 ;; This function calls:
  3210 ;;		Nothing
  3211 ;; This function is called by:
  3212 ;;		___altoft
  3213 ;;		___awtoft
  3214 ;;		___ftadd
  3215 ;;		___ftdiv
  3216 ;; This function uses a non-reentrant model
  3217 ;;
  3218                           
  3219                           	psect	text20
  3220  000D4C                     __ptext20:
  3221                           	opt stack 0
  3222  000D4C                     ___ftpack:
  3223                           	opt stack 23
  3224                           
  3225                           ;incstack = 0
  3226  000D4C  5021               	movf	___ftpack@exp,w,c
  3227  000D4E  B4D8               	btfsc	status,2,c
  3228  000D50  D005               	goto	u1820
  3229  000D52  501E               	movf	___ftpack@arg,w,c
  3230  000D54  101F               	iorwf	___ftpack@arg+1,w,c
  3231  000D56  1020               	iorwf	___ftpack@arg+2,w,c
  3232  000D58  A4D8               	btfss	status,2,c
  3233  000D5A  D00C               	goto	l500
  3234  000D5C                     u1820:
  3235  000D5C  0E00               	movlw	0
  3236  000D5E  6E1E               	movwf	?___ftpack,c
  3237  000D60  0E00               	movlw	0
  3238  000D62  6E1F               	movwf	?___ftpack+1,c
  3239  000D64  0E00               	movlw	0
  3240  000D66  6E20               	movwf	?___ftpack+2,c
  3241  000D68  0012               	return	
  3242  000D6A  2A21               	incf	___ftpack@exp,f,c
  3243  000D6C  90D8               	bcf	status,0,c
  3244  000D6E  3220               	rrcf	___ftpack@arg+2,f,c
  3245  000D70  321F               	rrcf	___ftpack@arg+1,f,c
  3246  000D72  321E               	rrcf	___ftpack@arg,f,c
  3247  000D74                     l500:
  3248  000D74  0E00               	movlw	0
  3249  000D76  141E               	andwf	___ftpack@arg,w,c
  3250  000D78  6E23               	movwf	??___ftpack& (0+255),c
  3251  000D7A  0E00               	movlw	0
  3252  000D7C  141F               	andwf	___ftpack@arg+1,w,c
  3253  000D7E  6E24               	movwf	(??___ftpack+1)& (0+255),c
  3254  000D80  0EFE               	movlw	254
  3255  000D82  1420               	andwf	___ftpack@arg+2,w,c
  3256  000D84  6E25               	movwf	(??___ftpack+2)& (0+255),c
  3257  000D86  5023               	movf	??___ftpack,w,c
  3258  000D88  1024               	iorwf	??___ftpack+1,w,c
  3259  000D8A  1025               	iorwf	??___ftpack+2,w,c
  3260  000D8C  B4D8               	btfsc	status,2,c
  3261  000D8E  D00C               	goto	l503
  3262  000D90  D7EC               	goto	l501
  3263  000D92  2A21               	incf	___ftpack@exp,f,c
  3264  000D94  0E01               	movlw	1
  3265  000D96  261E               	addwf	___ftpack@arg,f,c
  3266  000D98  0E00               	movlw	0
  3267  000D9A  221F               	addwfc	___ftpack@arg+1,f,c
  3268  000D9C  0E00               	movlw	0
  3269  000D9E  2220               	addwfc	___ftpack@arg+2,f,c
  3270  000DA0  90D8               	bcf	status,0,c
  3271  000DA2  3220               	rrcf	___ftpack@arg+2,f,c
  3272  000DA4  321F               	rrcf	___ftpack@arg+1,f,c
  3273  000DA6  321E               	rrcf	___ftpack@arg,f,c
  3274  000DA8                     l503:
  3275  000DA8  0E00               	movlw	0
  3276  000DAA  141E               	andwf	___ftpack@arg,w,c
  3277  000DAC  6E23               	movwf	??___ftpack& (0+255),c
  3278  000DAE  0E00               	movlw	0
  3279  000DB0  141F               	andwf	___ftpack@arg+1,w,c
  3280  000DB2  6E24               	movwf	(??___ftpack+1)& (0+255),c
  3281  000DB4  0EFF               	movlw	255
  3282  000DB6  1420               	andwf	___ftpack@arg+2,w,c
  3283  000DB8  6E25               	movwf	(??___ftpack+2)& (0+255),c
  3284  000DBA  5023               	movf	??___ftpack,w,c
  3285  000DBC  1024               	iorwf	??___ftpack+1,w,c
  3286  000DBE  1025               	iorwf	??___ftpack+2,w,c
  3287  000DC0  B4D8               	btfsc	status,2,c
  3288  000DC2  D006               	goto	l506
  3289  000DC4  D7E6               	goto	l504
  3290  000DC6  0621               	decf	___ftpack@exp,f,c
  3291  000DC8  90D8               	bcf	status,0,c
  3292  000DCA  361E               	rlcf	___ftpack@arg,f,c
  3293  000DCC  361F               	rlcf	___ftpack@arg+1,f,c
  3294  000DCE  3620               	rlcf	___ftpack@arg+2,f,c
  3295  000DD0                     l506:
  3296  000DD0  BE1F               	btfsc	___ftpack@arg+1,7,c
  3297  000DD2  D003               	goto	u1860
  3298  000DD4  0E02               	movlw	2
  3299  000DD6  6021               	cpfslt	___ftpack@exp,c
  3300  000DD8  D7F6               	goto	l507
  3301  000DDA                     u1860:
  3302  000DDA  A021               	btfss	___ftpack@exp,0,c
  3303  000DDC  9E1F               	bcf	___ftpack@arg+1,7,c
  3304  000DDE  90D8               	bcf	status,0,c
  3305  000DE0  3221               	rrcf	___ftpack@exp,f,c
  3306  000DE2  5021               	movf	___ftpack@exp,w,c
  3307  000DE4  1220               	iorwf	___ftpack@arg+2,f,c
  3308  000DE6  5022               	movf	___ftpack@sign,w,c
  3309  000DE8  A4D8               	btfss	status,2,c
  3310  000DEA  8E20               	bsf	___ftpack@arg+2,7,c
  3311  000DEC  C01E  F01E         	movff	___ftpack@arg,?___ftpack
  3312  000DF0  C01F  F01F         	movff	___ftpack@arg+1,?___ftpack+1
  3313  000DF4  C020  F020         	movff	___ftpack@arg+2,?___ftpack+2
  3314  000DF8  0012               	return	
  3315  000DFA                     __end_of___ftpack:
  3316                           	opt stack 0
  3317                           tblptru	equ	0xFF8
  3318                           tblptrh	equ	0xFF7
  3319                           tblptrl	equ	0xFF6
  3320                           tablat	equ	0xFF5
  3321                           intcon	equ	0xFF2
  3322                           postinc0	equ	0xFEE
  3323                           wreg	equ	0xFE8
  3324                           indf2	equ	0xFDF
  3325                           fsr2h	equ	0xFDA
  3326                           fsr2l	equ	0xFD9
  3327                           status	equ	0xFD8
  3328                           
  3329 ;; *************** function _MSdelay *****************
  3330 ;; Defined at:
  3331 ;;		line 50 in file "USART_Source_File.c"
  3332 ;; Parameters:    Size  Location     Type
  3333 ;;  val             2   29[COMRAM] unsigned int 
  3334 ;; Auto vars:     Size  Location     Type
  3335 ;;  j               2   33[COMRAM] unsigned int 
  3336 ;;  i               2   31[COMRAM] unsigned int 
  3337 ;; Return value:  Size  Location     Type
  3338 ;;                  1    wreg      void 
  3339 ;; Registers used:
  3340 ;;		wreg, status,2, status,0
  3341 ;; Tracked objects:
  3342 ;;		On entry : 0/0
  3343 ;;		On exit  : 0/0
  3344 ;;		Unchanged: 0/0
  3345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3346 ;;      Params:         2       0       0       0       0       0       0       0       0
  3347 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3348 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3349 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3350 ;;Total ram usage:        6 bytes
  3351 ;; Hardware stack levels used:    1
  3352 ;; Hardware stack levels required when called:    2
  3353 ;; This function calls:
  3354 ;;		Nothing
  3355 ;; This function is called by:
  3356 ;;		_main
  3357 ;; This function uses a non-reentrant model
  3358 ;;
  3359                           
  3360                           	psect	text21
  3361  00129E                     __ptext21:
  3362                           	opt stack 0
  3363  00129E                     _MSdelay:
  3364                           	opt stack 28
  3365                           
  3366                           ;USART_Source_File.c: 52: unsigned int i,j;
  3367                           ;USART_Source_File.c: 53: for(i=0;i<=val;i++)
  3368                           
  3369                           ;incstack = 0
  3370  00129E  0E00               	movlw	0
  3371  0012A0  6E21               	movwf	MSdelay@i+1,c
  3372  0012A2  0E00               	movlw	0
  3373  0012A4  6E20               	movwf	MSdelay@i,c
  3374  0012A6  D00F               	goto	l201
  3375  0012A8                     
  3376                           ;USART_Source_File.c: 54: for(j=0;j<81;j++);
  3377  0012A8  0E00               	movlw	0
  3378  0012AA  6E23               	movwf	MSdelay@j+1,c
  3379  0012AC  0E00               	movlw	0
  3380  0012AE  6E22               	movwf	MSdelay@j,c
  3381  0012B0                     l1843:
  3382  0012B0  5023               	movf	MSdelay@j+1,w,c
  3383  0012B2  E107               	bnz	l1851
  3384  0012B4  0E51               	movlw	81
  3385  0012B6  5C22               	subwf	MSdelay@j,w,c
  3386  0012B8  B0D8               	btfsc	status,0,c
  3387  0012BA  D003               	goto	u1520
  3388  0012BC  4A22               	infsnz	MSdelay@j,f,c
  3389  0012BE  2A23               	incf	MSdelay@j+1,f,c
  3390  0012C0  D7F7               	goto	l1843
  3391  0012C2                     u1520:
  3392  0012C2                     l1851:
  3393  0012C2  4A20               	infsnz	MSdelay@i,f,c
  3394  0012C4  2A21               	incf	MSdelay@i+1,f,c
  3395  0012C6                     l201:
  3396  0012C6  5020               	movf	MSdelay@i,w,c
  3397  0012C8  5C1E               	subwf	MSdelay@val,w,c
  3398  0012CA  5021               	movf	MSdelay@i+1,w,c
  3399  0012CC  581F               	subwfb	MSdelay@val+1,w,c
  3400  0012CE  A0D8               	btfss	status,0,c
  3401  0012D0  0012               	return	
  3402  0012D2  D7EA               	goto	l202
  3403  0012D4                     __end_of_MSdelay:
  3404                           	opt stack 0
  3405                           tblptru	equ	0xFF8
  3406                           tblptrh	equ	0xFF7
  3407                           tblptrl	equ	0xFF6
  3408                           tablat	equ	0xFF5
  3409                           intcon	equ	0xFF2
  3410                           postinc0	equ	0xFEE
  3411                           wreg	equ	0xFE8
  3412                           indf2	equ	0xFDF
  3413                           fsr2h	equ	0xFDA
  3414                           fsr2l	equ	0xFD9
  3415                           status	equ	0xFD8
  3416                           
  3417 ;; *************** function _interrupcion *****************
  3418 ;; Defined at:
  3419 ;;		line 59 in file "comuni.c"
  3420 ;; Parameters:    Size  Location     Type
  3421 ;;		None
  3422 ;; Auto vars:     Size  Location     Type
  3423 ;;		None
  3424 ;; Return value:  Size  Location     Type
  3425 ;;                  1    wreg      void 
  3426 ;; Registers used:
  3427 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3428 ;; Tracked objects:
  3429 ;;		On entry : 0/0
  3430 ;;		On exit  : 0/0
  3431 ;;		Unchanged: 0/0
  3432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3433 ;;      Params:         0       0       0       0       0       0       0       0       0
  3434 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3435 ;;      Temps:         18       0       0       0       0       0       0       0       0
  3436 ;;      Totals:        18       0       0       0       0       0       0       0       0
  3437 ;;Total ram usage:       18 bytes
  3438 ;; Hardware stack levels used:    1
  3439 ;; Hardware stack levels required when called:    1
  3440 ;; This function calls:
  3441 ;;		_USART_test
  3442 ;; This function is called by:
  3443 ;;		Interrupt level 2
  3444 ;; This function uses a non-reentrant model
  3445 ;;
  3446                           
  3447                           	psect	intcode
  3448  000008                     __pintcode:
  3449                           	opt stack 0
  3450  000008                     _interrupcion:
  3451                           	opt stack 23
  3452                           
  3453                           ;incstack = 0
  3454  000008  8242               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3455  00000A  EDFD  F006         	call	int_func,f	;refresh shadow registers
  3456                           tblptru	equ	0xFF8
  3457                           tblptrh	equ	0xFF7
  3458                           tblptrl	equ	0xFF6
  3459                           tablat	equ	0xFF5
  3460                           intcon	equ	0xFF2
  3461                           postinc0	equ	0xFEE
  3462                           wreg	equ	0xFE8
  3463                           indf2	equ	0xFDF
  3464                           fsr2h	equ	0xFDA
  3465                           fsr2l	equ	0xFD9
  3466                           status	equ	0xFD8
  3467                           
  3468                           	psect	intcode_body
  3469  000DFA                     __pintcode_body:
  3470                           	opt stack 23
  3471  000DFA                     int_func:
  3472                           	opt stack 23
  3473  000DFA  0006               	pop		; remove dummy address from shadow register refresh
  3474  000DFC  CFFA F00C          	movff	pclath,??_interrupcion
  3475  000E00  CFFB F00D          	movff	pclatu,??_interrupcion+1
  3476  000E04  CFE9 F00E          	movff	fsr0l,??_interrupcion+2
  3477  000E08  CFEA F00F          	movff	fsr0h,??_interrupcion+3
  3478  000E0C  CFE1 F010          	movff	fsr1l,??_interrupcion+4
  3479  000E10  CFE2 F011          	movff	fsr1h,??_interrupcion+5
  3480  000E14  CFD9 F012          	movff	fsr2l,??_interrupcion+6
  3481  000E18  CFDA F013          	movff	fsr2h,??_interrupcion+7
  3482  000E1C  CFF3 F014          	movff	prodl,??_interrupcion+8
  3483  000E20  CFF4 F015          	movff	prodh,??_interrupcion+9
  3484  000E24  CFF6 F016          	movff	tblptrl,??_interrupcion+10
  3485  000E28  CFF7 F017          	movff	tblptrh,??_interrupcion+11
  3486  000E2C  CFF8 F018          	movff	tblptru,??_interrupcion+12
  3487  000E30  CFF5 F019          	movff	tablat,??_interrupcion+13
  3488  000E34  C042  F01A         	movff	btemp,??_interrupcion+14
  3489  000E38  C043  F01B         	movff	btemp+1,??_interrupcion+15
  3490  000E3C  C044  F01C         	movff	btemp+2,??_interrupcion+16
  3491  000E40  C045  F01D         	movff	btemp+3,??_interrupcion+17
  3492                           
  3493                           ;comuni.c: 60: if(RCIF){
  3494  000E44  AA9E               	btfss	3998,5,c	;volatile
  3495  000E46  D009               	goto	i2l272
  3496                           
  3497                           ;comuni.c: 61: USART_test(&dataIn,sizeof dataIn);
  3498  000E48  0E35               	movlw	low _dataIn
  3499  000E4A  6E01               	movwf	USART_test@Input,c
  3500  000E4C  0E00               	movlw	high _dataIn
  3501  000E4E  6E02               	movwf	USART_test@Input+1,c
  3502  000E50  0E0C               	movlw	12
  3503  000E52  6E03               	movwf	USART_test@length,c
  3504  000E54  EC53  F007         	call	_USART_test	;wreg free
  3505                           
  3506                           ;comuni.c: 63: PORTCbits.RC2=1;
  3507  000E58  8482               	bsf	3970,2,c	;volatile
  3508  000E5A                     i2l272:
  3509  000E5A  C01D  F045         	movff	??_interrupcion+17,btemp+3
  3510  000E5E  C01C  F044         	movff	??_interrupcion+16,btemp+2
  3511  000E62  C01B  F043         	movff	??_interrupcion+15,btemp+1
  3512  000E66  C01A  F042         	movff	??_interrupcion+14,btemp
  3513  000E6A  C019  FFF5         	movff	??_interrupcion+13,tablat
  3514  000E6E  C018  FFF8         	movff	??_interrupcion+12,tblptru
  3515  000E72  C017  FFF7         	movff	??_interrupcion+11,tblptrh
  3516  000E76  C016  FFF6         	movff	??_interrupcion+10,tblptrl
  3517  000E7A  C015  FFF4         	movff	??_interrupcion+9,prodh
  3518  000E7E  C014  FFF3         	movff	??_interrupcion+8,prodl
  3519  000E82  C013  FFDA         	movff	??_interrupcion+7,fsr2h
  3520  000E86  C012  FFD9         	movff	??_interrupcion+6,fsr2l
  3521  000E8A  C011  FFE2         	movff	??_interrupcion+5,fsr1h
  3522  000E8E  C010  FFE1         	movff	??_interrupcion+4,fsr1l
  3523  000E92  C00F  FFEA         	movff	??_interrupcion+3,fsr0h
  3524  000E96  C00E  FFE9         	movff	??_interrupcion+2,fsr0l
  3525  000E9A  C00D  FFFB         	movff	??_interrupcion+1,pclatu
  3526  000E9E  C00C  FFFA         	movff	??_interrupcion,pclath
  3527  000EA2  9242               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3528  000EA4  0011               	retfie		f
  3529  000EA6                     __end_of_interrupcion:
  3530                           	opt stack 0
  3531                           pclatu	equ	0xFFB
  3532                           pclath	equ	0xFFA
  3533                           tblptru	equ	0xFF8
  3534                           tblptrh	equ	0xFF7
  3535                           tblptrl	equ	0xFF6
  3536                           tablat	equ	0xFF5
  3537                           prodh	equ	0xFF4
  3538                           prodl	equ	0xFF3
  3539                           intcon	equ	0xFF2
  3540                           postinc0	equ	0xFEE
  3541                           fsr0h	equ	0xFEA
  3542                           fsr0l	equ	0xFE9
  3543                           wreg	equ	0xFE8
  3544                           fsr1h	equ	0xFE2
  3545                           fsr1l	equ	0xFE1
  3546                           indf2	equ	0xFDF
  3547                           fsr2h	equ	0xFDA
  3548                           fsr2l	equ	0xFD9
  3549                           status	equ	0xFD8
  3550                           
  3551 ;; *************** function _USART_test *****************
  3552 ;; Defined at:
  3553 ;;		line 71 in file "comuni.c"
  3554 ;; Parameters:    Size  Location     Type
  3555 ;;  Input           2    0[COMRAM] PTR unsigned char 
  3556 ;;		 -> dataIn(12), 
  3557 ;;  length          1    2[COMRAM] unsigned char 
  3558 ;; Auto vars:     Size  Location     Type
  3559 ;;  temp            1   10[COMRAM] unsigned char 
  3560 ;;  i               2    8[COMRAM] int 
  3561 ;; Return value:  Size  Location     Type
  3562 ;;                  1    wreg      void 
  3563 ;; Registers used:
  3564 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3565 ;; Tracked objects:
  3566 ;;		On entry : 0/0
  3567 ;;		On exit  : 0/0
  3568 ;;		Unchanged: 0/0
  3569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3570 ;;      Params:         3       0       0       0       0       0       0       0       0
  3571 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3572 ;;      Temps:          5       0       0       0       0       0       0       0       0
  3573 ;;      Totals:        11       0       0       0       0       0       0       0       0
  3574 ;;Total ram usage:       11 bytes
  3575 ;; Hardware stack levels used:    1
  3576 ;; This function calls:
  3577 ;;		Nothing
  3578 ;; This function is called by:
  3579 ;;		_interrupcion
  3580 ;; This function uses a non-reentrant model
  3581 ;;
  3582                           
  3583                           	psect	text23
  3584  000EA6                     __ptext23:
  3585                           	opt stack 0
  3586  000EA6                     _USART_test:
  3587                           	opt stack 23
  3588                           
  3589                           ;comuni.c: 74: for(int i=0;i<=length-2;i++) {
  3590                           
  3591                           ;incstack = 0
  3592  000EA6  0E00               	movlw	0
  3593  000EA8  6E0A               	movwf	USART_test@i+1,c
  3594  000EAA  0E00               	movlw	0
  3595  000EAC  6E09               	movwf	USART_test@i,c
  3596  000EAE  D035               	goto	i2l276
  3597  000EB0                     
  3598                           ;comuni.c: 75: Input[i]=0;
  3599  000EB0  5009               	movf	USART_test@i,w,c
  3600  000EB2  2401               	addwf	USART_test@Input,w,c
  3601  000EB4  6ED9               	movwf	fsr2l,c
  3602  000EB6  500A               	movf	USART_test@i+1,w,c
  3603  000EB8  2002               	addwfc	USART_test@Input+1,w,c
  3604  000EBA  6EDA               	movwf	fsr2h,c
  3605  000EBC  0E00               	movlw	0
  3606  000EBE  6EDF               	movwf	indf2,c
  3607                           
  3608                           ;comuni.c: 79: char temp= RCREG;
  3609  000EC0  CFAE F00B          	movff	4014,USART_test@temp	;volatile
  3610                           
  3611                           ;comuni.c: 81: if(temp>=97 && temp <=122 || temp==32){
  3612  000EC4  0E60               	movlw	96
  3613  000EC6  640B               	cpfsgt	USART_test@temp,c
  3614  000EC8  D003               	goto	i2u158_40
  3615  000ECA  0E7A               	movlw	122
  3616  000ECC  640B               	cpfsgt	USART_test@temp,c
  3617  000ECE  D004               	goto	i2u159_40
  3618  000ED0                     i2u158_40:
  3619  000ED0  0E20               	movlw	32
  3620  000ED2  180B               	xorwf	USART_test@temp,w,c
  3621  000ED4  A4D8               	btfss	status,2,c
  3622  000ED6  D009               	goto	i2l278
  3623  000ED8                     i2u159_40:
  3624                           
  3625                           ;comuni.c: 82: Input[i] =temp;
  3626  000ED8  5009               	movf	USART_test@i,w,c
  3627  000EDA  2401               	addwf	USART_test@Input,w,c
  3628  000EDC  6ED9               	movwf	fsr2l,c
  3629  000EDE  500A               	movf	USART_test@i+1,w,c
  3630  000EE0  2002               	addwfc	USART_test@Input+1,w,c
  3631  000EE2  6EDA               	movwf	fsr2h,c
  3632  000EE4  C00B  FFDF         	movff	USART_test@temp,indf2
  3633                           
  3634                           ;comuni.c: 83: }else{
  3635  000EE8  D014               	goto	i2l283
  3636  000EEA                     i2l278:
  3637                           
  3638                           ;comuni.c: 84: Input[i+1]=0;
  3639  000EEA  0E01               	movlw	1
  3640  000EEC  2409               	addwf	USART_test@i,w,c
  3641  000EEE  6E04               	movwf	??_USART_test& (0+255),c
  3642  000EF0  0E00               	movlw	0
  3643  000EF2  200A               	addwfc	USART_test@i+1,w,c
  3644  000EF4  6E05               	movwf	(??_USART_test+1)& (0+255),c
  3645  000EF6  5004               	movf	??_USART_test,w,c
  3646  000EF8  2401               	addwf	USART_test@Input,w,c
  3647  000EFA  6ED9               	movwf	fsr2l,c
  3648  000EFC  5005               	movf	??_USART_test+1,w,c
  3649  000EFE  2002               	addwfc	USART_test@Input+1,w,c
  3650  000F00  6EDA               	movwf	fsr2h,c
  3651  000F02  0E00               	movlw	0
  3652  000F04  6EDF               	movwf	indf2,c
  3653                           
  3654                           ;comuni.c: 85: i=length-1;
  3655  000F06  0EFF               	movlw	255
  3656  000F08  2403               	addwf	USART_test@length,w,c
  3657  000F0A  6E09               	movwf	USART_test@i,c
  3658  000F0C  6A0A               	clrf	USART_test@i+1,c
  3659  000F0E  0EFF               	movlw	255
  3660  000F10  220A               	addwfc	USART_test@i+1,f,c
  3661  000F12                     i2l283:
  3662                           
  3663                           ;comuni.c: 87: }
  3664                           ;comuni.c: 88: temp=0;
  3665  000F12  0E00               	movlw	0
  3666  000F14  6E0B               	movwf	USART_test@temp,c
  3667  000F16  4A09               	infsnz	USART_test@i,f,c
  3668  000F18  2A0A               	incf	USART_test@i+1,f,c
  3669  000F1A                     i2l276:
  3670  000F1A  0EFE               	movlw	254
  3671  000F1C  6E04               	movwf	??_USART_test& (0+255),c
  3672  000F1E  0EFF               	movlw	255
  3673  000F20  6E05               	movwf	(??_USART_test+1)& (0+255),c
  3674  000F22  5003               	movf	USART_test@length,w,c
  3675  000F24  6E06               	movwf	(??_USART_test+2)& (0+255),c
  3676  000F26  6A07               	clrf	(??_USART_test+3)& (0+255),c
  3677  000F28  5004               	movf	??_USART_test,w,c
  3678  000F2A  2606               	addwf	??_USART_test+2,f,c
  3679  000F2C  5005               	movf	??_USART_test+1,w,c
  3680  000F2E  2207               	addwfc	??_USART_test+3,f,c
  3681  000F30  5009               	movf	USART_test@i,w,c
  3682  000F32  5C06               	subwf	??_USART_test+2,w,c
  3683  000F34  5007               	movf	??_USART_test+3,w,c
  3684  000F36  0A80               	xorlw	128
  3685  000F38  6E08               	movwf	(??_USART_test+4)& (0+255),c
  3686  000F3A  500A               	movf	USART_test@i+1,w,c
  3687  000F3C  0A80               	xorlw	128
  3688  000F3E  5808               	subwfb	(??_USART_test+4)& (0+255),w,c
  3689  000F40  A0D8               	btfss	status,0,c
  3690  000F42  0012               	return	
  3691  000F44  D7B5               	goto	i2l277
  3692  000F46                     __end_of_USART_test:
  3693                           	opt stack 0
  3694                           pclatu	equ	0xFFB
  3695                           pclath	equ	0xFFA
  3696                           tblptru	equ	0xFF8
  3697                           tblptrh	equ	0xFF7
  3698                           tblptrl	equ	0xFF6
  3699                           tablat	equ	0xFF5
  3700                           prodh	equ	0xFF4
  3701                           prodl	equ	0xFF3
  3702                           intcon	equ	0xFF2
  3703                           postinc0	equ	0xFEE
  3704                           fsr0h	equ	0xFEA
  3705                           fsr0l	equ	0xFE9
  3706                           wreg	equ	0xFE8
  3707                           fsr1h	equ	0xFE2
  3708                           fsr1l	equ	0xFE1
  3709                           indf2	equ	0xFDF
  3710                           fsr2h	equ	0xFDA
  3711                           fsr2l	equ	0xFD9
  3712                           status	equ	0xFD8
  3713                           pclatu	equ	0xFFB
  3714                           pclath	equ	0xFFA
  3715                           tblptru	equ	0xFF8
  3716                           tblptrh	equ	0xFF7
  3717                           tblptrl	equ	0xFF6
  3718                           tablat	equ	0xFF5
  3719                           prodh	equ	0xFF4
  3720                           prodl	equ	0xFF3
  3721                           intcon	equ	0xFF2
  3722                           postinc0	equ	0xFEE
  3723                           fsr0h	equ	0xFEA
  3724                           fsr0l	equ	0xFE9
  3725                           wreg	equ	0xFE8
  3726                           fsr1h	equ	0xFE2
  3727                           fsr1l	equ	0xFE1
  3728                           indf2	equ	0xFDF
  3729                           fsr2h	equ	0xFDA
  3730                           fsr2l	equ	0xFD9
  3731                           status	equ	0xFD8
  3732                           
  3733                           	psect	rparam
  3734  0000                     pclatu	equ	0xFFB
  3735                           pclath	equ	0xFFA
  3736                           tblptru	equ	0xFF8
  3737                           tblptrh	equ	0xFF7
  3738                           tblptrl	equ	0xFF6
  3739                           tablat	equ	0xFF5
  3740                           prodh	equ	0xFF4
  3741                           prodl	equ	0xFF3
  3742                           intcon	equ	0xFF2
  3743                           postinc0	equ	0xFEE
  3744                           fsr0h	equ	0xFEA
  3745                           fsr0l	equ	0xFE9
  3746                           wreg	equ	0xFE8
  3747                           fsr1h	equ	0xFE2
  3748                           fsr1l	equ	0xFE1
  3749                           indf2	equ	0xFDF
  3750                           fsr2h	equ	0xFDA
  3751                           fsr2l	equ	0xFD9
  3752                           status	equ	0xFD8
  3753                           
  3754                           	psect	temp
  3755  000042                     btemp:
  3756                           	opt stack 0
  3757  000042                     	ds	1
  3758  0000                     int$flags	set	btemp
  3759  0000                     wtemp6	set	btemp+1
  3760                           pclatu	equ	0xFFB
  3761                           pclath	equ	0xFFA
  3762                           tblptru	equ	0xFF8
  3763                           tblptrh	equ	0xFF7
  3764                           tblptrl	equ	0xFF6
  3765                           tablat	equ	0xFF5
  3766                           prodh	equ	0xFF4
  3767                           prodl	equ	0xFF3
  3768                           intcon	equ	0xFF2
  3769                           postinc0	equ	0xFEE
  3770                           fsr0h	equ	0xFEA
  3771                           fsr0l	equ	0xFE9
  3772                           wreg	equ	0xFE8
  3773                           fsr1h	equ	0xFE2
  3774                           fsr1l	equ	0xFE1
  3775                           indf2	equ	0xFDF
  3776                           fsr2h	equ	0xFDA
  3777                           fsr2l	equ	0xFD9
  3778                           status	equ	0xFD8


Data Sizes:
    Strings     3
    Constant    0
    Data        1
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     46      65
    BANK0           160     51      51
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           239      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 12
		 -> dataIn(COMRAM[12]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_1(CODE[3]), 

    memset@p1	PTR void  size(2) Largest target is 12
		 -> dataIn(COMRAM[12]), 

    memset@p	PTR unsigned char  size(2) Largest target is 12
		 -> dataIn(COMRAM[12]), 

    USART_test@Input	PTR unsigned char  size(2) Largest target is 12
		 -> dataIn(COMRAM[12]), 

    sp__memset	PTR void  size(2) Largest target is 12
		 -> dataIn(COMRAM[12]), 

    USART_SendString@out	PTR const unsigned char  size(2) Largest target is 12
		 -> dataIn(COMRAM[12]), 

    lcd_texto@cadena	PTR unsigned char  size(2) Largest target is 12
		 -> dataIn(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->_lcd_texto
    ___awtoft->___ftpack
    _USART_SendString->_USART_TransmitChar
    _USART_Init->___altoft
    ___ftdiv->___altoft
    ___ftadd->___altoft
    ___altoft->___ftpack

Critical Paths under _interrupcion in COMRAM

    _interrupcion->_USART_test

Critical Paths under _main in BANK0

    _main->_lcd_texto
    _lcd_texto->_lcd_caracter
    _lcd_origen->_lcd_orden
    _lcd_limpiar->_lcd_orden
    _lcd_iniciar->_lcd_orden
    _lcd_pulso->_wait_in_ms
    _wait_in_ms->___fttol
    _USART_Init->___fttol
    ___fttol->___ftdiv
    ___ftdiv->___altoft
    ___ftadd->___ftdiv

Critical Paths under _interrupcion in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupcion in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupcion in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupcion in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupcion in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupcion in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interrupcion in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interrupcion in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   86333
                            _MSdelay
                         _USART_Init
                   _USART_SendString
                        _configBoard
                        _lcd_iniciar
                        _lcd_limpiar
                         _lcd_origen
                          _lcd_texto
                             _memset
                             _strcmp
 ---------------------------------------------------------------------------------
 (1) _strcmp                                               6     2      4     243
                                             29 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _memset                                               8     2      6     324
                                             29 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (1) _lcd_texto                                            3     1      2    9141
                                             45 COMRAM     1     1      0
                                             49 BANK0      2     0      2
                       _lcd_caracter
 ---------------------------------------------------------------------------------
 (2) _lcd_caracter                                         7     5      2    8986
                                             42 BANK0      7     5      2
                          _lcd_pulso
 ---------------------------------------------------------------------------------
 (1) _lcd_origen                                           0     0      0   18450
                          _lcd_orden
                         _wait_in_ms
 ---------------------------------------------------------------------------------
 (1) _lcd_limpiar                                          0     0      0   18450
                          _lcd_orden
                         _wait_in_ms
 ---------------------------------------------------------------------------------
 (1) _lcd_iniciar                                          0     0      0   27284
                          _lcd_orden
                          _lcd_pulso
                         _wait_in_ms
 ---------------------------------------------------------------------------------
 (2) _lcd_orden                                            7     5      2    9616
                                             42 BANK0      7     5      2
                          _lcd_pulso
 ---------------------------------------------------------------------------------
 (3) _lcd_pulso                                            0     0      0    8834
                         _wait_in_ms
 ---------------------------------------------------------------------------------
 (4) _wait_in_ms                                          10     8      2    8834
                                             32 BANK0     10     8      2
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (5) ___awtoft                                             4     1      3    3116
                                             37 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _configBoard                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _USART_SendString                                     2     0      2     136
                                             30 COMRAM     2     0      2
                 _USART_TransmitChar
 ---------------------------------------------------------------------------------
 (2) _USART_TransmitChar                                   1     1      0      15
                                             29 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _USART_Init                                           7     3      4   12137
                                             32 BANK0      7     3      4
                           ___altoft
                            ___ftadd
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (5) ___fttol                                             15    11      4     404
                                             17 BANK0     15    11      4
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftdiv                                             15     9      6    3813
                                              2 BANK0     15     9      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             12     6      6    4578
                                             17 BANK0     12     6      6
                           ___altoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___altoft                                            10     6      4    3187
                                             37 COMRAM     8     4      4
                                              0 BANK0      2     2      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    2893
                                             29 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _MSdelay                                              6     4      2     168
                                             29 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _interrupcion                                        18    18      0     443
                                             11 COMRAM    18    18      0
                         _USART_test
 ---------------------------------------------------------------------------------
 (8) _USART_test                                          11     8      3     443
                                              0 COMRAM    11     8      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MSdelay
   _USART_Init
     ___altoft
       ___ftpack
     ___ftadd
       ___altoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
   _USART_SendString
     _USART_TransmitChar
   _configBoard
   _lcd_iniciar
     _lcd_orden
       _lcd_pulso
         _wait_in_ms
           ___awtoft
             ___ftpack
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
     _lcd_pulso
       _wait_in_ms
         ___awtoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
     _wait_in_ms
       ___awtoft
         ___ftpack
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _lcd_limpiar
     _lcd_orden
       _lcd_pulso
         _wait_in_ms
           ___awtoft
             ___ftpack
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
     _wait_in_ms
       ___awtoft
         ___ftpack
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _lcd_origen
     _lcd_orden
       _lcd_pulso
         _wait_in_ms
           ___awtoft
             ___ftpack
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
     _wait_in_ms
       ___awtoft
         ___ftpack
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _lcd_texto
     _lcd_caracter
       _lcd_pulso
         _wait_in_ms
           ___awtoft
             ___ftpack
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
   _memset
   _strcmp

 _interrupcion (ROOT)
   _USART_test

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM_1           400      0       0      21        0.0%
BIGRAM             3EE      0       0      22        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK3            EF      0       0      12        0.0%
BANK3               EF      0       0      10        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     33      33       5       31.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2E      41       1       69.1%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      74      11        0.0%
DATA                 0      0      74       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Mar 15 17:22:17 2018

                 _USART_test 0EA6                 ___altoft@exp 0060                ___altoft@sign 0061  
                         l43 0CFC                           l46 0D34                           l47 0D3C  
                __CFG_BORV$3 000000                 ___ftadd@exp1 007C                 ___ftadd@exp2 007B  
               ___ftadd@sign 007A                          l120 1306                          l201 12C6  
                        l202 12A8                          l119 1324                          l500 0D74  
                        l501 0D6A                          l262 0F78                          l503 0DA8  
                        l263 0FBA                          l504 0D92                          l600 09E2  
                        l264 0FBC                          l506 0DD0                          l370 108A  
                        l602 0A5A                          l507 0DC6                          l371 107E  
                        l531 085A                          l611 0A9A                          l603 0A4A  
                        l195 1374                          l540 08EA                          l196 1362  
                        l535 0884                          l608 0A7E                          l545 08E0  
                        l609 0A72                          l481 127A                          l713 134E  
                        l554 091E                          l546 08D6                          l714 133E  
                        l555 0914                          l564 0AD6                          l557 0942  
                        l558 095E                          l566 0AFE                          l559 098E  
                        l567 0B3C                          l568 0B62                          l840 121C  
                        l839 1224                          wreg 000FE8               ??_lcd_caracter 008C  
               __CFG_LVP$OFF 000000                 ___ftdiv@cntr 006B                 ___ftdiv@sign 0070  
               __CFG_WDT$OFF 000000                         l1123 13E4                         l2129 0D3C  
                       l1851 12C2                         l1843 12B0                         l1869 133E  
                       STR_1 0801                         u1111 09C6                         u1130 0A00  
                       u2005 11C8                         u2110 0876                         u1135 09F8  
                       u2015 115C                         u2041 0818                         u2210 0926  
                       u1170 0A84                         u2051 082C                         u2140 08B4  
                       u1520 12C2                         u2080 084C                         u2180 08F2  
                       u1550 125A                         u1820 0D5C                         u1911 0AE6  
                       u1860 0DDA                         u1891 0ABE                         u1955 0CA8  
                       u1980 0D2A                         _RCIF 007CF5                         _TXIF 007CF4  
                       _main 0F46                 ___ftpack@arg 001E                 ___ftpack@exp 0021  
                       _temp 0031                         fsr0h 000FEA                         fsr1h 000FE2  
                       fsr2h 000FDA                         fsr0l 000FE9                         indf2 000FDF  
                       fsr1l 000FE1                         fsr2l 000FD9                         btemp 0042  
   __end_of_USART_SendString 1384                         prodh 000FF4                         prodl 000FF3  
                       start 000E              __end_of_MSdelay 12D4                __CFG_MCLRE$ON 000000  
               ___param_bank 000000         lcd_caracter@caracter 008A                 ___fttol@exp1 007F  
               ___fttol@lval 007B                __CFG_PLLDIV$2 000000                        ?_main 0001  
            __end_of___ftadd 09B4              __end_of___ftdiv 0B94              __end_of___fttol 0AAC  
                      i2l272 0E5A                        i2l283 0F12                        i2l276 0F1A  
                      i2l277 0EB0                        i2l278 0EEA                        _RCREG 000FAE  
                      _RCSTA 000FAB                        _TMR0L 000FD6                        _SPBRG 000FAF  
                      _PORTA 000F80                        _PORTD 000F83                        _TRISA 000F92  
                      _TRISB 000F93                        _TRISC 000F94                        _TRISD 000F95  
                      _TXREG 000FAD                        _TXSTA 000FAC               __CFG_FCMEN$OFF 000000  
              ___awtoft@sign 0029                        _nivel 0041                ___ftpack@sign 0022  
                      pclath 000FFA                        tablat 000FF5                        status 000FD8  
                      wtemp6 0043                  ?_USART_Init 0080              __initialization 12D4  
                ?_USART_test 0001                 __end_of_main 0FDA                       ??_main 002F  
              ___fttol@sign1 007A                __activetblptr 000001                       _ADCON0 000FC2  
           __end_of___altoft 10D4                       _ADRESH 000FC4                       _ADRESL 000FC3  
                     _T08BIT 007EAE             __end_of___awtoft 129E             __end_of___ftpack 0DFA  
                  ??_MSdelay 0020                       _OSCCON 000FD3                       _TMR0IF 007F92  
                     _TMR0ON 007EAF                       _TRISC6 007CA6                       _TRISC7 007CA7  
            USART_test@Input 0001         __size_of_configBoard 0070         __end_of_lcd_caracter 11B0  
       __size_of_lcd_iniciar 00E6                       _dataIn 0035                    ??___ftadd 0077  
                  ??___ftdiv 0068                    ??___fttol 0075         __size_of_lcd_limpiar 001E  
                     _memset 1334                       clear_0 12EC              _cantidadBotones 0032  
                     _strcmp 121A                 __pdataCOMRAM 0041   __end_of_USART_TransmitChar 13EE  
               __mediumconst 0000                       tblptrh 000FF7                       tblptrl 000FF6  
                     tblptru 000FF8          __size_of_USART_Init 0080          __size_of_USART_test 00A0  
                 __accesstop 0060      __end_of__initialization 12F2                   ___altoft@c 0026  
                 ___ftadd@f1 0071                   ___ftadd@f2 0074                ___rparam_used 000001  
                 ___ftdiv@f1 0062                   ___ftdiv@f2 0065                   ___ftdiv@f3 006C  
                 ___awtoft@c 0026                   ___fttol@f1 0071               __pcstackCOMRAM 0001  
              ?_interrupcion 0001           __size_of_lcd_orden 006A           __size_of_lcd_texto 0030  
         __size_of_lcd_pulso 0022            ?_USART_SendString 001F           ??_USART_SendString 0021  
             ??_interrupcion 000C               lcd_orden@orden 008A                    ?___altoft 0026  
                    ?_memset 001E                    ?___awtoft 0026                    ?___ftpack 001E  
                    ?_strcmp 001E                   _lcd_origen 13A6                      _MSdelay 129E  
      __size_of_lcd_caracter 006C             USART_test@length 0003                 ??_USART_Init 002E  
                    __Hparam 0000                      __Lparam 0000                 ??_USART_test 0004  
          __end_of_lcd_orden 121A            __end_of_lcd_texto 1334            __end_of_lcd_pulso 13A6  
                    ___ftadd 0806                      ___ftdiv 0AAC                      ___fttol 09B4  
               __psmallconst 0800                   ??___altoft 002A                      __pcinit 12D4  
                 ??___awtoft 0029                   ??___ftpack 0023              __size_of_memset 002C  
                    __ramtop 0800                      __ptext0 0F46                      __ptext1 121A  
                    __ptext2 1334                      __ptext3 1304                      __ptext4 1144  
                    __ptext5 13A6                      __ptext6 13C4                      __ptext7 0B94  
                    __ptext8 11B0                      __ptext9 1384          USART_SendString@out 001F  
                  _T0CONbits 000FD5              __size_of_strcmp 004C               USART_Init@temp 0084  
         __end_of_USART_Init 105A                 _lcd_caracter 1144               __pintcode_body 0DFA  
         __end_of_USART_test 0F46         end_of_initialization 12F2                      memset@c 0020  
                    memset@n 0022                      memset@p 0024         wait_in_ms@time_in_ms 0080  
                    int_func 0DFA                      postinc0 000FEE                   _wait_in_ms 0C7A  
                    strcmp@r 0023                    _PORTCbits 000F82                    _PORTDbits 000F83  
                  _TRISAbits 000F92                    _TRISDbits 000F95                  ?_lcd_origen 0001  
       __end_of_interrupcion 0EA6          USART_Init@baud_rate 0080        USART_TransmitChar@out 001E  
                ___ftdiv@exp 006F                ??_configBoard 001E                   _puntuacion 002F  
         _USART_TransmitChar 13E2                ??_lcd_iniciar 002E                ??_lcd_limpiar 002E  
        ?_USART_TransmitChar 0001                __pidataCOMRAM 13EE               __end_of_memset 1360  
             __end_of_strcmp 1266          start_initialization 12D4         ??_USART_TransmitChar 001E  
            wait_in_ms@count 0086                  USART_test@i 0009           wait_in_ms@count_ms 0088  
             USART_test@temp 000B          __end_of_configBoard 1144          __size_of_lcd_origen 001E  
                ?_wait_in_ms 0080          __end_of_lcd_iniciar 0C7A                     ??_memset 0024  
        __end_of_lcd_limpiar 13E2                     ??_strcmp 0022    __size_of_USART_SendString 0024  
          __size_of___altoft 007A            __size_of___awtoft 0038            __size_of___ftpack 00AE  
                __pbssCOMRAM 002F                __pcstackBANK0 0060                     ?_MSdelay 001E  
                  __pintcode 0008                     ?___ftadd 0071                     ?___ftdiv 0062  
                   ?___fttol 0071                    _lcd_orden 11B0                    _lcd_texto 1304  
                  _lcd_pulso 1384        __size_of_interrupcion 0E9E                  __smallconst 0800  
        __size_of_wait_in_ms 00D2                     MSdelay@i 0020                     MSdelay@j 0022  
                _configBoard 10D4                     _PIE1bits 000F9D                  _lcd_iniciar 0B94  
                   i2u158_40 0ED0                     i2u159_40 0ED8                     _PIR1bits 000F9E  
                _lcd_limpiar 13C4                 _interrupcion 0008                   ?_lcd_orden 008A  
                 ?_lcd_texto 0091                   ?_lcd_pulso 0001                   _ADCON0bits 000FC2  
                 _ADCON1bits 000FC1                   _ADCON2bits 000FC0                 ??_lcd_origen 002E  
           __size_of_MSdelay 0036               wait_in_ms@flag 0084                     __Hrparam 0000  
                   __Lrparam 0000                 __Lsmallconst 0800           __end_of_lcd_origen 13C4  
           __size_of___ftadd 01AE             __size_of___ftdiv 00E8                     ___altoft 105A  
           __size_of___fttol 00F8                     ___awtoft 1266                     ___ftpack 0D4C  
           _USART_SendString 1360                     __ptext10 0C7A                     __ptext11 1266  
                   __ptext20 0D4C                     __ptext12 10D4                     __ptext21 129E  
                   __ptext13 1360                     __ptext14 13E2                     __ptext23 0EA6  
                   __ptext15 0FDA                     __ptext16 09B4                     __ptext17 0AAC  
                   __ptext18 0806                     __ptext19 105A              lcd_texto@cadena 0091  
              __size_of_main 0094                   MSdelay@val 001E                     _numTopos 0034  
                   int$flags 0042                 ??_wait_in_ms 0082                  ??_lcd_orden 008C  
                ??_lcd_texto 002E                  ??_lcd_pulso 002E        __CFG_CPUDIV$OSC1_PLL2 000000  
              _presionoBoton 0033                   _INTCONbits 000FF2                     memset@p1 001E  
__size_of_USART_TransmitChar 000C                     intlevel2 0000           __end_of_wait_in_ms 0D4C  
                   strcmp@s1 001E                     strcmp@s2 0020                ?_lcd_caracter 008A  
         __CFG_FOSC$HSPLL_HS 000000                 ?_configBoard 0001                 ?_lcd_iniciar 0001  
                 _USART_Init 0FDA                 ?_lcd_limpiar 0001  
