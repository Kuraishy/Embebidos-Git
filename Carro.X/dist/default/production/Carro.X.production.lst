

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue May 01 17:32:59 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    39                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    40  0000                     
    41                           ; Version 1.45
    42                           ; Generated 16/11/2017 GMT
    43                           ; 
    44                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    45                           ; All rights reserved.
    46                           ; 
    47                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    48                           ; 
    49                           ; Redistribution and use in source and binary forms, with or without modification, are
    50                           ; permitted provided that the following conditions are met:
    51                           ; 
    52                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    53                           ;        conditions and the following disclaimer.
    54                           ; 
    55                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    56                           ;        of conditions and the following disclaimer in the documentation and/or other
    57                           ;        materials provided with the distribution.
    58                           ; 
    59                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    60                           ;        software without specific prior written permission.
    61                           ; 
    62                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    63                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    64                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    65                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    66                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    67                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    68                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    69                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    70                           ; 
    71                           ; 
    72                           ; Code-generator required, PIC18F4550 Definitions
    73                           ; 
    74                           ; SFR Addresses
    75  0000                     
    76                           	psect	smallconst
    77  000800                     __psmallconst:
    78                           	opt stack 0
    79  000800  00                 	db	0
    80  000801                     exp@coeff:
    81                           	opt stack 0
    82  000801  00                 	db	0
    83  000802  80                 	db	128
    84  000803  3F                 	db	63
    85  000804  72                 	db	114
    86  000805  31                 	db	49
    87  000806  3F                 	db	63
    88  000807  FE                 	db	254
    89  000808  75                 	db	117
    90  000809  3E                 	db	62
    91  00080A  58                 	db	88
    92  00080B  63                 	db	99
    93  00080C  3D                 	db	61
    94  00080D  95                 	db	149
    95  00080E  1D                 	db	29
    96  00080F  3C                 	db	60
    97  000810  C5                 	db	197
    98  000811  AE                 	db	174
    99  000812  3A                 	db	58
   100  000813  79                 	db	121
   101  000814  21                 	db	33
   102  000815  39                 	db	57
   103  000816  94                 	db	148
   104  000817  80                 	db	128
   105  000818  37                 	db	55
   106  000819  93                 	db	147
   107  00081A  A7                 	db	167
   108  00081B  35                 	db	53
   109  00081C  56                 	db	86
   110  00081D  15                 	db	21
   111  00081E  34                 	db	52
   112  00081F                     __end_ofexp@coeff:
   113                           	opt stack 0
   114  00081F                     log@coeff:
   115                           	opt stack 0
   116  00081F  00                 	db	0
   117  000820  00                 	db	0
   118  000821  00                 	db	0
   119  000822  00                 	db	0
   120  000823  80                 	db	128
   121  000824  3F                 	db	63
   122  000825  F0                 	db	240
   123  000826  FF                 	db	255
   124  000827  BE                 	db	190
   125  000828  E2                 	db	226
   126  000829  A9                 	db	169
   127  00082A  3E                 	db	62
   128  00082B  83                 	db	131
   129  00082C  76                 	db	118
   130  00082D  BE                 	db	190
   131  00082E  AE                 	db	174
   132  00082F  2B                 	db	43
   133  000830  3E                 	db	62
   134  000831  3C                 	db	60
   135  000832  C3                 	db	195
   136  000833  BD                 	db	189
   137  000834  D2                 	db	210
   138  000835  13                 	db	19
   139  000836  3D                 	db	61
   140  000837  78                 	db	120
   141  000838  D3                 	db	211
   142  000839  BB                 	db	187
   143  00083A                     __end_oflog@coeff:
   144                           	opt stack 0
   145  00083A  00                 	db	0	; dummy byte at the end
   146  0000                     
   147                           	psect	nvBANK0
   148  0000EF                     __pnvBANK0:
   149                           	opt stack 0
   150  0000EF                     _prescg:
   151                           	opt stack 0
   152  0000EF                     	ds	3
   153  0000                     _CCPR2L	set	4027
   154  0000                     _CCPR1L	set	4030
   155  0000                     _CCP2CONbits	set	4026
   156  0000                     _CCP1CONbits	set	4029
   157  0000                     _PR2	set	4043
   158  0000                     _PORTA	set	3968
   159  0000                     _TRISD	set	3989
   160  0000                     _PIR1bits	set	3998
   161  0000                     _PIE1bits	set	3997
   162  0000                     _ADCON2bits	set	4032
   163  0000                     _ADCON0bits	set	4034
   164  0000                     _ADCON0	set	4034
   165  0000                     _T0CONbits	set	4053
   166  0000                     _INTCONbits	set	4082
   167  0000                     _LATAbits	set	3977
   168  0000                     _LATEbits	set	3981
   169  0000                     _T2CONbits	set	4042
   170  0000                     _TRISCbits	set	3988
   171  0000                     _TRISBbits	set	3987
   172  0000                     _TRISEbits	set	3990
   173  0000                     _TRISAbits	set	3986
   174  0000                     _ADCON1bits	set	4033
   175  0000                     _TMR0L	set	4054
   176  0000                     _TMR0IF	set	32658
   177  0000                     _TMR0ON	set	32431
   178  0000                     _RCIF	set	31989
   179  0000                     _T08BIT	set	32430
   180                           
   181                           ; #config settings
   182  0000                     
   183                           	psect	cinit
   184  001F54                     __pcinit:
   185                           	opt stack 0
   186  001F54                     start_initialization:
   187                           	opt stack 0
   188  001F54                     __initialization:
   189                           	opt stack 0
   190                           
   191                           ; Clear objects allocated to BANK0 (65 bytes)
   192  001F54  EE00  F0AE         	lfsr	0,__pbssBANK0
   193  001F58  0E41               	movlw	65
   194  001F5A                     clear_0:
   195  001F5A  6AEE               	clrf	postinc0,c
   196  001F5C  06E8               	decf	wreg,f,c
   197  001F5E  E1FD               	bnz	clear_0
   198  001F60                     end_of_initialization:
   199                           	opt stack 0
   200  001F60                     __end_of__initialization:
   201                           	opt stack 0
   202  001F60  0E00               	movlw	low (__Lmediumconst shr (0+16))
   203  001F62  6EF8               	movwf	tblptru,c
   204  001F64  0100               	movlb	0
   205  001F66  EFA4  F00E         	goto	_main	;jump to C main() function
   206                           tblptru	equ	0xFF8
   207                           postinc0	equ	0xFEE
   208                           wreg	equ	0xFE8
   209                           
   210                           	psect	bssBANK0
   211  0000AE                     __pbssBANK0:
   212                           	opt stack 0
   213  0000AE                     config_ccp2@F3978:
   214                           	opt stack 0
   215  0000AE                     	ds	30
   216  0000CC                     config_ccp1@F3967:
   217                           	opt stack 0
   218  0000CC                     	ds	30
   219  0000EA                     _pr2g:
   220                           	opt stack 0
   221  0000EA                     	ds	3
   222  0000ED                     _errno:
   223                           	opt stack 0
   224  0000ED                     	ds	2
   225                           tblptru	equ	0xFF8
   226                           postinc0	equ	0xFEE
   227                           wreg	equ	0xFE8
   228                           
   229                           	psect	cstackBANK0
   230  000060                     __pcstackBANK0:
   231                           	opt stack 0
   232  000060                     _exp$1488:
   233                           	opt stack 0
   234                           
   235                           ; 3 bytes @ 0x0
   236  000060                     	ds	3
   237  000063                     exp@exponent:
   238                           	opt stack 0
   239                           
   240                           ; 2 bytes @ 0x3
   241  000063                     	ds	2
   242  000065                     exp@sign:
   243                           	opt stack 0
   244                           
   245                           ; 1 bytes @ 0x5
   246  000065                     	ds	1
   247  000066                     ?_pow:
   248                           	opt stack 0
   249  000066                     pow@x:
   250                           	opt stack 0
   251                           
   252                           ; 3 bytes @ 0x6
   253  000066                     	ds	3
   254  000069                     pow@y:
   255                           	opt stack 0
   256                           
   257                           ; 3 bytes @ 0x9
   258  000069                     	ds	3
   259  00006C                     _pow$1486:
   260                           	opt stack 0
   261                           
   262                           ; 3 bytes @ 0xC
   263  00006C                     	ds	3
   264  00006F                     _pow$1487:
   265                           	opt stack 0
   266                           
   267                           ; 3 bytes @ 0xF
   268  00006F                     	ds	3
   269  000072                     pow@sign:
   270                           	opt stack 0
   271                           
   272                           ; 1 bytes @ 0x12
   273  000072                     	ds	1
   274  000073                     pow@yi:
   275                           	opt stack 0
   276                           
   277                           ; 4 bytes @ 0x13
   278  000073                     	ds	4
   279  000077                     config_ccp1@a:
   280                           	opt stack 0
   281  000077                     config_ccp2@a:
   282                           	opt stack 0
   283                           
   284                           ; 30 bytes @ 0x17
   285  000077                     	ds	30
   286  000095                     _config_ccp1$1480:
   287                           	opt stack 0
   288  000095                     _config_ccp2$1483:
   289                           	opt stack 0
   290                           
   291                           ; 3 bytes @ 0x35
   292  000095                     	ds	3
   293  000098                     config_ccp1@valreg:
   294                           	opt stack 0
   295  000098                     config_ccp2@valreg:
   296                           	opt stack 0
   297                           
   298                           ; 2 bytes @ 0x38
   299  000098                     	ds	2
   300  00009A                     config_ccp1@i:
   301                           	opt stack 0
   302  00009A                     config_ccp2@i:
   303                           	opt stack 0
   304                           
   305                           ; 2 bytes @ 0x3A
   306  00009A                     	ds	2
   307  00009C                     config_ccp1@z:
   308                           	opt stack 0
   309  00009C                     config_ccp2@z:
   310                           	opt stack 0
   311                           
   312                           ; 2 bytes @ 0x3C
   313  00009C                     	ds	2
   314  00009E                     _config_ccp1$1481:
   315                           	opt stack 0
   316  00009E                     _config_ccp2$1484:
   317                           	opt stack 0
   318                           
   319                           ; 3 bytes @ 0x3E
   320  00009E                     	ds	3
   321  0000A1                     _config_ccp1$1482:
   322                           	opt stack 0
   323  0000A1                     _config_ccp2$1485:
   324                           	opt stack 0
   325                           
   326                           ; 3 bytes @ 0x41
   327  0000A1                     	ds	3
   328  0000A4                     config_ccp1@x:
   329                           	opt stack 0
   330  0000A4                     config_ccp2@x:
   331                           	opt stack 0
   332                           
   333                           ; 2 bytes @ 0x44
   334  0000A4                     	ds	2
   335  0000A6                     config_ccp1@w:
   336                           	opt stack 0
   337  0000A6                     config_ccp2@w:
   338                           	opt stack 0
   339                           
   340                           ; 2 bytes @ 0x46
   341  0000A6                     	ds	2
   342  0000A8                     config_ccp1@y:
   343                           	opt stack 0
   344  0000A8                     config_ccp2@y:
   345                           	opt stack 0
   346                           
   347                           ; 2 bytes @ 0x48
   348  0000A8                     	ds	2
   349  0000AA                     config_ccp1@n:
   350                           	opt stack 0
   351  0000AA                     config_ccp2@n:
   352                           	opt stack 0
   353                           
   354                           ; 2 bytes @ 0x4A
   355  0000AA                     	ds	2
   356  0000AC                     config_ccp1@j:
   357                           	opt stack 0
   358  0000AC                     config_ccp2@j:
   359                           	opt stack 0
   360                           
   361                           ; 2 bytes @ 0x4C
   362  0000AC                     	ds	2
   363                           tblptru	equ	0xFF8
   364                           postinc0	equ	0xFEE
   365                           wreg	equ	0xFE8
   366                           
   367                           	psect	cstackCOMRAM
   368  000001                     __pcstackCOMRAM:
   369                           	opt stack 0
   370  000001                     ?___wmul:
   371                           	opt stack 0
   372  000001                     ?___awdiv:
   373                           	opt stack 0
   374  000001                     ?___ftpack:
   375                           	opt stack 0
   376  000001                     ?_frexp:
   377                           	opt stack 0
   378  000001                     ?___ftneg:
   379                           	opt stack 0
   380  000001                     ___wmul@multiplier:
   381                           	opt stack 0
   382  000001                     ___awdiv@dividend:
   383                           	opt stack 0
   384  000001                     ___ftpack@arg:
   385                           	opt stack 0
   386  000001                     ___ftge@ff1:
   387                           	opt stack 0
   388  000001                     ___ftneg@f1:
   389                           	opt stack 0
   390  000001                     frexp@value:
   391                           	opt stack 0
   392                           
   393                           ; 3 bytes @ 0x0
   394  000001                     	ds	2
   395  000003                     ___wmul@multiplicand:
   396                           	opt stack 0
   397  000003                     ___awdiv@divisor:
   398                           	opt stack 0
   399                           
   400                           ; 2 bytes @ 0x2
   401  000003                     	ds	1
   402  000004                     ___ftpack@exp:
   403                           	opt stack 0
   404  000004                     frexp@eptr:
   405                           	opt stack 0
   406  000004                     ___ftge@ff2:
   407                           	opt stack 0
   408                           
   409                           ; 3 bytes @ 0x3
   410  000004                     	ds	1
   411  000005                     ___awdiv@counter:
   412                           	opt stack 0
   413  000005                     ___ftpack@sign:
   414                           	opt stack 0
   415  000005                     ___wmul@product:
   416                           	opt stack 0
   417                           
   418                           ; 2 bytes @ 0x4
   419  000005                     	ds	1
   420  000006                     ??___ftpack:
   421  000006                     ??_frexp:
   422  000006                     ___awdiv@sign:
   423                           	opt stack 0
   424                           
   425                           ; 1 bytes @ 0x5
   426  000006                     	ds	1
   427  000007                     ??___ftge:
   428  000007                     ___awdiv@quotient:
   429                           	opt stack 0
   430                           
   431                           ; 2 bytes @ 0x6
   432  000007                     	ds	2
   433  000009                     ?___awtoft:
   434                           	opt stack 0
   435  000009                     ?___lbtoft:
   436                           	opt stack 0
   437  000009                     ?___lltoft:
   438                           	opt stack 0
   439  000009                     ___awtoft@c:
   440                           	opt stack 0
   441  000009                     ___lltoft@c:
   442                           	opt stack 0
   443                           
   444                           ; 4 bytes @ 0x8
   445  000009                     	ds	3
   446  00000C                     ___awtoft@sign:
   447                           	opt stack 0
   448  00000C                     ___lbtoft@c:
   449                           	opt stack 0
   450                           
   451                           ; 1 bytes @ 0xB
   452  00000C                     	ds	1
   453  00000D                     ??___lltoft:
   454  00000D                     ?___ftadd:
   455                           	opt stack 0
   456  00000D                     config_timer2@onoff:
   457                           	opt stack 0
   458  00000D                     ___ftadd@f1:
   459                           	opt stack 0
   460                           
   461                           ; 3 bytes @ 0xC
   462  00000D                     	ds	2
   463  00000F                     config_timer2@presc:
   464                           	opt stack 0
   465                           
   466                           ; 2 bytes @ 0xE
   467  00000F                     	ds	1
   468  000010                     ___ftadd@f2:
   469                           	opt stack 0
   470                           
   471                           ; 3 bytes @ 0xF
   472  000010                     	ds	1
   473  000011                     ??_config_timer2:
   474  000011                     ___lltoft@exp:
   475                           	opt stack 0
   476                           
   477                           ; 1 bytes @ 0x10
   478  000011                     	ds	2
   479  000013                     ??___ftadd:
   480                           
   481                           ; 1 bytes @ 0x12
   482  000013                     	ds	3
   483  000016                     ___ftadd@sign:
   484                           	opt stack 0
   485                           
   486                           ; 1 bytes @ 0x15
   487  000016                     	ds	1
   488  000017                     ___ftadd@exp2:
   489                           	opt stack 0
   490                           
   491                           ; 1 bytes @ 0x16
   492  000017                     	ds	1
   493  000018                     ___ftadd@exp1:
   494                           	opt stack 0
   495                           
   496                           ; 1 bytes @ 0x17
   497  000018                     	ds	1
   498  000019                     ?___ftmul:
   499                           	opt stack 0
   500  000019                     ?___ftsub:
   501                           	opt stack 0
   502  000019                     ___ftmul@f1:
   503                           	opt stack 0
   504  000019                     ___ftsub@f1:
   505                           	opt stack 0
   506                           
   507                           ; 3 bytes @ 0x18
   508  000019                     	ds	3
   509  00001C                     ___ftmul@f2:
   510                           	opt stack 0
   511  00001C                     ___ftsub@f2:
   512                           	opt stack 0
   513                           
   514                           ; 3 bytes @ 0x1B
   515  00001C                     	ds	3
   516  00001F                     ??___ftmul:
   517  00001F                     
   518                           ; 1 bytes @ 0x1E
   519  00001F                     	ds	3
   520  000022                     ___ftmul@exp:
   521                           	opt stack 0
   522                           
   523                           ; 1 bytes @ 0x21
   524  000022                     	ds	1
   525  000023                     ___ftmul@f3_as_product:
   526                           	opt stack 0
   527                           
   528                           ; 3 bytes @ 0x22
   529  000023                     	ds	3
   530  000026                     ___ftmul@cntr:
   531                           	opt stack 0
   532                           
   533                           ; 1 bytes @ 0x25
   534  000026                     	ds	1
   535  000027                     ___ftmul@sign:
   536                           	opt stack 0
   537                           
   538                           ; 1 bytes @ 0x26
   539  000027                     	ds	1
   540  000028                     ?___ftdiv:
   541                           	opt stack 0
   542  000028                     ?_eval_poly:
   543                           	opt stack 0
   544  000028                     ___ftdiv@f1:
   545                           	opt stack 0
   546  000028                     eval_poly@x:
   547                           	opt stack 0
   548                           
   549                           ; 3 bytes @ 0x27
   550  000028                     	ds	3
   551  00002B                     eval_poly@d:
   552                           	opt stack 0
   553  00002B                     ___ftdiv@f2:
   554                           	opt stack 0
   555                           
   556                           ; 3 bytes @ 0x2A
   557  00002B                     	ds	2
   558  00002D                     eval_poly@n:
   559                           	opt stack 0
   560                           
   561                           ; 2 bytes @ 0x2C
   562  00002D                     	ds	1
   563  00002E                     ??___ftdiv:
   564                           
   565                           ; 1 bytes @ 0x2D
   566  00002E                     	ds	1
   567  00002F                     ??_eval_poly:
   568                           
   569                           ; 1 bytes @ 0x2E
   570  00002F                     	ds	2
   571  000031                     ___ftdiv@cntr:
   572                           	opt stack 0
   573  000031                     eval_poly@res:
   574                           	opt stack 0
   575                           
   576                           ; 3 bytes @ 0x30
   577  000031                     	ds	1
   578  000032                     ___ftdiv@f3:
   579                           	opt stack 0
   580                           
   581                           ; 3 bytes @ 0x31
   582  000032                     	ds	2
   583  000034                     ?_log:
   584                           	opt stack 0
   585  000034                     ?_ldexp:
   586                           	opt stack 0
   587  000034                     ldexp@value:
   588                           	opt stack 0
   589  000034                     log@x:
   590                           	opt stack 0
   591                           
   592                           ; 3 bytes @ 0x33
   593  000034                     	ds	1
   594  000035                     ___ftdiv@exp:
   595                           	opt stack 0
   596                           
   597                           ; 1 bytes @ 0x34
   598  000035                     	ds	1
   599  000036                     ___ftdiv@sign:
   600                           	opt stack 0
   601                           
   602                           ; 1 bytes @ 0x35
   603  000036                     	ds	1
   604  000037                     ?___fttol:
   605                           	opt stack 0
   606  000037                     ldexp@newexp:
   607                           	opt stack 0
   608  000037                     log@exponent:
   609                           	opt stack 0
   610  000037                     ___fttol@f1:
   611                           	opt stack 0
   612                           
   613                           ; 3 bytes @ 0x36
   614  000037                     	ds	2
   615  000039                     ??_ldexp:
   616                           
   617                           ; 1 bytes @ 0x38
   618  000039                     	ds	2
   619  00003B                     ??___fttol:
   620                           
   621                           ; 1 bytes @ 0x3A
   622  00003B                     	ds	5
   623  000040                     ___fttol@sign1:
   624                           	opt stack 0
   625                           
   626                           ; 1 bytes @ 0x3F
   627  000040                     	ds	1
   628  000041                     ___fttol@lval:
   629                           	opt stack 0
   630                           
   631                           ; 4 bytes @ 0x40
   632  000041                     	ds	4
   633  000045                     ___fttol@exp1:
   634                           	opt stack 0
   635                           
   636                           ; 1 bytes @ 0x44
   637  000045                     	ds	1
   638  000046                     ?___altoft:
   639                           	opt stack 0
   640  000046                     coinfig_ccpcon@fosc:
   641                           	opt stack 0
   642  000046                     ___altoft@c:
   643                           	opt stack 0
   644                           
   645                           ; 4 bytes @ 0x45
   646  000046                     	ds	3
   647  000049                     coinfig_ccpcon@freq:
   648                           	opt stack 0
   649                           
   650                           ; 3 bytes @ 0x48
   651  000049                     	ds	1
   652  00004A                     ??___altoft:
   653                           
   654                           ; 1 bytes @ 0x49
   655  00004A                     	ds	2
   656  00004C                     _coinfig_ccpcon$1479:
   657                           	opt stack 0
   658                           
   659                           ; 3 bytes @ 0x4B
   660  00004C                     	ds	2
   661  00004E                     ___altoft@exp:
   662                           	opt stack 0
   663                           
   664                           ; 1 bytes @ 0x4D
   665  00004E                     	ds	1
   666  00004F                     ___altoft@sign:
   667                           	opt stack 0
   668                           
   669                           ; 1 bytes @ 0x4E
   670  00004F                     	ds	1
   671  000050                     ?_floor:
   672                           	opt stack 0
   673  000050                     floor@x:
   674                           	opt stack 0
   675                           
   676                           ; 3 bytes @ 0x4F
   677  000050                     	ds	3
   678  000053                     floor@i:
   679                           	opt stack 0
   680                           
   681                           ; 3 bytes @ 0x52
   682  000053                     	ds	3
   683  000056                     floor@expon:
   684                           	opt stack 0
   685                           
   686                           ; 2 bytes @ 0x55
   687  000056                     	ds	2
   688  000058                     ?_exp:
   689                           	opt stack 0
   690  000058                     exp@x:
   691                           	opt stack 0
   692                           
   693                           ; 3 bytes @ 0x57
   694  000058                     	ds	3
   695  00005B                     config_ccp1@duty1:
   696                           	opt stack 0
   697  00005B                     config_ccp2@duty2:
   698                           	opt stack 0
   699                           
   700                           ; 2 bytes @ 0x5A
   701  00005B                     	ds	2
   702  00005D                     ??_config_ccp1:
   703  00005D                     ??_config_ccp2:
   704                           
   705                           ; 1 bytes @ 0x5C
   706  00005D                     	ds	2
   707  00005F                     tblptru	equ	0xFF8
   708                           postinc0	equ	0xFEE
   709                           wreg	equ	0xFE8
   710                           
   711                           ; 1 bytes @ 0x5E
   712 ;;
   713 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   714 ;;
   715 ;; *************** function _main *****************
   716 ;; Defined at:
   717 ;;		line 45 in file "carroMain.c"
   718 ;; Parameters:    Size  Location     Type
   719 ;;		None
   720 ;; Auto vars:     Size  Location     Type
   721 ;;		None
   722 ;; Return value:  Size  Location     Type
   723 ;;                  1    wreg      void 
   724 ;; Registers used:
   725 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   726 ;; Tracked objects:
   727 ;;		On entry : 0/0
   728 ;;		On exit  : 0/0
   729 ;;		Unchanged: 0/0
   730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   731 ;;      Params:         0       0       0       0       0       0       0       0       0
   732 ;;      Locals:         0       0       0       0       0       0       0       0       0
   733 ;;      Temps:          0       0       0       0       0       0       0       0       0
   734 ;;      Totals:         0       0       0       0       0       0       0       0       0
   735 ;;Total ram usage:        0 bytes
   736 ;; Hardware stack levels required when called:    6
   737 ;; This function calls:
   738 ;;		_coinfig_ccpcon
   739 ;;		_configBoard
   740 ;;		_config_ccp1
   741 ;;		_config_ccp2
   742 ;;		_config_timer2
   743 ;; This function is called by:
   744 ;;		Startup code after reset
   745 ;; This function uses a non-reentrant model
   746 ;;
   747                           
   748                           	psect	text0
   749  001D48                     __ptext0:
   750                           	opt stack 0
   751  001D48                     _main:
   752                           	opt stack 25
   753                           
   754                           ;carroMain.c: 47: configBoard();
   755                           
   756                           ;incstack = 0
   757  001D48  ECD9  F00E         	call	_configBoard	;wreg free
   758                           
   759                           ;carroMain.c: 48: ADCON1bits.PCFG = 0b1111;
   760  001D4C  80C1               	bsf	4033,0,c	;volatile
   761  001D4E  82C1               	bsf	4033,1,c	;volatile
   762  001D50  84C1               	bsf	4033,2,c	;volatile
   763  001D52  86C1               	bsf	4033,3,c	;volatile
   764                           
   765                           ;carroMain.c: 50: TRISAbits.RA0=0;
   766  001D54  9092               	bcf	3986,0,c	;volatile
   767                           
   768                           ;carroMain.c: 51: TRISAbits.RA1=0;
   769  001D56  9292               	bcf	3986,1,c	;volatile
   770                           
   771                           ;carroMain.c: 52: TRISEbits.RE0=0;
   772  001D58  9096               	bcf	3990,0,c	;volatile
   773                           
   774                           ;carroMain.c: 53: TRISEbits.RE1=0;
   775  001D5A  9296               	bcf	3990,1,c	;volatile
   776                           
   777                           ;carroMain.c: 55: TRISBbits.RB5=1;
   778  001D5C  8A93               	bsf	3987,5,c	;volatile
   779                           
   780                           ;carroMain.c: 56: TRISBbits.RB4=1;
   781  001D5E  8893               	bsf	3987,4,c	;volatile
   782                           
   783                           ;carroMain.c: 57: TRISBbits.RB3=1;
   784  001D60  8693               	bsf	3987,3,c	;volatile
   785                           
   786                           ;carroMain.c: 61: TRISCbits.RC2 = 0;
   787  001D62  9494               	bcf	3988,2,c	;volatile
   788                           
   789                           ;carroMain.c: 62: TRISCbits.RC1 = 0;
   790  001D64  9294               	bcf	3988,1,c	;volatile
   791                           
   792                           ;carroMain.c: 64: config_timer2(0,16);
   793  001D66  0E00               	movlw	0
   794  001D68  6E0E               	movwf	config_timer2@onoff+1,c
   795  001D6A  0E00               	movlw	0
   796  001D6C  6E0D               	movwf	config_timer2@onoff,c
   797  001D6E  0E00               	movlw	0
   798  001D70  6E10               	movwf	config_timer2@presc+1,c
   799  001D72  0E10               	movlw	16
   800  001D74  6E0F               	movwf	config_timer2@presc,c
   801  001D76  EC6C  F00E         	call	_config_timer2	;wreg free
   802                           
   803                           ;carroMain.c: 65: coinfig_ccpcon(48000000,5000);
   804  001D7A  0E1B               	movlw	27
   805  001D7C  6E46               	movwf	coinfig_ccpcon@fosc,c
   806  001D7E  0E37               	movlw	55
   807  001D80  6E47               	movwf	coinfig_ccpcon@fosc+1,c
   808  001D82  0E4C               	movlw	76
   809  001D84  6E48               	movwf	coinfig_ccpcon@fosc+2,c
   810  001D86  0E40               	movlw	64
   811  001D88  6E49               	movwf	coinfig_ccpcon@freq,c
   812  001D8A  0E9C               	movlw	156
   813  001D8C  6E4A               	movwf	coinfig_ccpcon@freq+1,c
   814  001D8E  0E45               	movlw	69
   815  001D90  6E4B               	movwf	coinfig_ccpcon@freq+2,c
   816  001D92  ECAB  F00C         	call	_coinfig_ccpcon	;wreg free
   817                           
   818                           ;carroMain.c: 66: config_ccp1(25);
   819  001D96  0E00               	movlw	0
   820  001D98  6E5C               	movwf	config_ccp1@duty1+1,c
   821  001D9A  0E19               	movlw	25
   822  001D9C  6E5B               	movwf	config_ccp1@duty1,c
   823  001D9E  EC87  F005         	call	_config_ccp1	;wreg free
   824                           
   825                           ;carroMain.c: 67: config_ccp2(35);
   826  001DA2  0E00               	movlw	0
   827  001DA4  6E5C               	movwf	config_ccp2@duty2+1,c
   828  001DA6  0E23               	movlw	35
   829  001DA8  6E5B               	movwf	config_ccp2@duty2,c
   830  001DAA  EC1E  F004         	call	_config_ccp2	;wreg free
   831                           
   832                           ;carroMain.c: 69: T2CONbits.TMR2ON = 0;
   833  001DAE  94CA               	bcf	4042,2,c	;volatile
   834  001DB0                     l35:
   835  001DB0  D7FF               	goto	l35
   836  001DB2                     __end_of_main:
   837                           	opt stack 0
   838                           tblptru	equ	0xFF8
   839                           postinc0	equ	0xFEE
   840                           wreg	equ	0xFE8
   841                           
   842 ;; *************** function _config_timer2 *****************
   843 ;; Defined at:
   844 ;;		line 14 in file "Pwm.c"
   845 ;; Parameters:    Size  Location     Type
   846 ;;  onoff           2   12[COMRAM] int 
   847 ;;  presc           2   14[COMRAM] int 
   848 ;; Auto vars:     Size  Location     Type
   849 ;;		None
   850 ;; Return value:  Size  Location     Type
   851 ;;                  1    wreg      void 
   852 ;; Registers used:
   853 ;;		wreg, status,2, status,0, cstack
   854 ;; Tracked objects:
   855 ;;		On entry : 0/0
   856 ;;		On exit  : 0/0
   857 ;;		Unchanged: 0/0
   858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   859 ;;      Params:         4       0       0       0       0       0       0       0       0
   860 ;;      Locals:         0       0       0       0       0       0       0       0       0
   861 ;;      Temps:          2       0       0       0       0       0       0       0       0
   862 ;;      Totals:         6       0       0       0       0       0       0       0       0
   863 ;;Total ram usage:        6 bytes
   864 ;; Hardware stack levels used:    1
   865 ;; Hardware stack levels required when called:    2
   866 ;; This function calls:
   867 ;;		___awtoft
   868 ;; This function is called by:
   869 ;;		_main
   870 ;; This function uses a non-reentrant model
   871 ;;
   872                           
   873                           	psect	text1
   874  001CD8                     __ptext1:
   875                           	opt stack 0
   876  001CD8                     _config_timer2:
   877                           	opt stack 28
   878                           
   879                           ;Pwm.c: 16: T2CONbits.TOUTPS = 0b0000;
   880                           
   881                           ;incstack = 0
   882  001CD8  96CA               	bcf	4042,3,c	;volatile
   883  001CDA  98CA               	bcf	4042,4,c	;volatile
   884  001CDC  9ACA               	bcf	4042,5,c	;volatile
   885  001CDE  9CCA               	bcf	4042,6,c	;volatile
   886                           
   887                           ;Pwm.c: 18: prescg = presc;
   888  001CE0  C00F  F009         	movff	config_timer2@presc,___awtoft@c
   889  001CE4  C010  F00A         	movff	config_timer2@presc+1,___awtoft@c+1
   890  001CE8  EC57  F00F         	call	___awtoft	;wreg free
   891  001CEC  C009  F0EF         	movff	?___awtoft,_prescg
   892  001CF0  C00A  F0F0         	movff	?___awtoft+1,_prescg+1
   893  001CF4  C00B  F0F1         	movff	?___awtoft+2,_prescg+2
   894                           
   895                           ;Pwm.c: 20: switch(presc)
   896  001CF8  D00B               	goto	l127
   897  001CFA  0EFC               	movlw	-4
   898  001CFC  16CA               	andwf	4042,f,c	;volatile
   899  001CFE  D01A               	goto	l129
   900  001D00  50CA               	movf	4042,w,c	;volatile
   901  001D02  0BFC               	andlw	-4
   902  001D04  0901               	iorlw	1
   903  001D06  6ECA               	movwf	4042,c	;volatile
   904  001D08  D015               	goto	l129
   905  001D0A  0E03               	movlw	3
   906  001D0C  12CA               	iorwf	4042,f,c	;volatile
   907                           
   908                           ;Pwm.c: 25: }
   909  001D0E  D012               	goto	l129
   910  001D10                     l127:
   911  001D10  C00F  F011         	movff	config_timer2@presc,??_config_timer2
   912  001D14  C010  F012         	movff	config_timer2@presc+1,??_config_timer2+1
   913                           
   914                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   915                           ; Switch size 1, requested type "space"
   916                           ; Number of cases is 1, Range of values is 0 to 0
   917                           ; switch strategies available:
   918                           ; Name         Instructions Cycles
   919                           ; simple_byte            4     3 (average)
   920                           ;	Chosen strategy is simple_byte
   921  001D18  5012               	movf	??_config_timer2+1,w,c
   922  001D1A  0A00               	xorlw	0	; case 0
   923  001D1C  A4D8               	btfss	status,2,c
   924  001D1E  D00A               	goto	l129
   925                           
   926                           ; Switch size 1, requested type "space"
   927                           ; Number of cases is 3, Range of values is 1 to 16
   928                           ; switch strategies available:
   929                           ; Name         Instructions Cycles
   930                           ; simple_byte           10     6 (average)
   931                           ;	Chosen strategy is simple_byte
   932  001D20  5011               	movf	??_config_timer2,w,c
   933  001D22  0A01               	xorlw	1	; case 1
   934  001D24  B4D8               	btfsc	status,2,c
   935  001D26  D7E9               	goto	l128
   936  001D28  0A05               	xorlw	5	; case 4
   937  001D2A  B4D8               	btfsc	status,2,c
   938  001D2C  D7E9               	goto	l130
   939  001D2E  0A14               	xorlw	20	; case 16
   940  001D30  B4D8               	btfsc	status,2,c
   941  001D32  D7EB               	goto	l131
   942  001D34                     l129:
   943                           
   944                           ;Pwm.c: 27: T2CONbits.TOUTPS = 0b0000;
   945  001D34  96CA               	bcf	4042,3,c	;volatile
   946  001D36  98CA               	bcf	4042,4,c	;volatile
   947  001D38  9ACA               	bcf	4042,5,c	;volatile
   948  001D3A  9CCA               	bcf	4042,6,c	;volatile
   949                           
   950                           ;Pwm.c: 29: T2CONbits.TMR2ON = onoff;
   951  001D3C  B00D               	btfsc	config_timer2@onoff,0,c
   952  001D3E  D002               	bra	u2045
   953  001D40  94CA               	bcf	4042,2,c	;volatile
   954  001D42  D001               	bra	u2046
   955  001D44                     u2045:
   956  001D44  84CA               	bsf	4042,2,c	;volatile
   957  001D46                     u2046:
   958  001D46  0012               	return		;funcret
   959  001D48                     __end_of_config_timer2:
   960                           	opt stack 0
   961                           tblptru	equ	0xFF8
   962                           postinc0	equ	0xFEE
   963                           wreg	equ	0xFE8
   964                           status	equ	0xFD8
   965                           
   966 ;; *************** function _config_ccp2 *****************
   967 ;; Defined at:
   968 ;;		line 85 in file "Pwm.c"
   969 ;; Parameters:    Size  Location     Type
   970 ;;  duty2           2   90[COMRAM] int 
   971 ;; Auto vars:     Size  Location     Type
   972 ;;  a              30   23[BANK0 ] int [15]
   973 ;;  j               2   76[BANK0 ] int 
   974 ;;  n               2   74[BANK0 ] int 
   975 ;;  y               2   72[BANK0 ] unsigned int 
   976 ;;  w               2   70[BANK0 ] unsigned int 
   977 ;;  x               2   68[BANK0 ] int 
   978 ;;  z               2   60[BANK0 ] int 
   979 ;;  i               2   58[BANK0 ] int 
   980 ;;  valreg          2   56[BANK0 ] int 
   981 ;; Return value:  Size  Location     Type
   982 ;;                  1    wreg      void 
   983 ;; Registers used:
   984 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   985 ;; Tracked objects:
   986 ;;		On entry : 0/0
   987 ;;		On exit  : 0/0
   988 ;;		Unchanged: 0/0
   989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   990 ;;      Params:         2       0       0       0       0       0       0       0       0
   991 ;;      Locals:         0      55       0       0       0       0       0       0       0
   992 ;;      Temps:          2       0       0       0       0       0       0       0       0
   993 ;;      Totals:         4      55       0       0       0       0       0       0       0
   994 ;;Total ram usage:       59 bytes
   995 ;; Hardware stack levels used:    1
   996 ;; Hardware stack levels required when called:    5
   997 ;; This function calls:
   998 ;;		___awdiv
   999 ;;		___awtoft
  1000 ;;		___ftadd
  1001 ;;		___ftdiv
  1002 ;;		___ftmul
  1003 ;;		___fttol
  1004 ;;		_pow
  1005 ;; This function is called by:
  1006 ;;		_main
  1007 ;; This function uses a non-reentrant model
  1008 ;;
  1009                           
  1010                           	psect	text2
  1011  00083C                     __ptext2:
  1012                           	opt stack 0
  1013  00083C                     _config_ccp2:
  1014                           	opt stack 25
  1015                           
  1016                           ;Pwm.c: 87: int valreg;
  1017                           ;Pwm.c: 89: valreg = (duty2*(pr2g + 1)*4)/100;
  1018                           
  1019                           ;incstack = 0
  1020  00083C  C05B  F009         	movff	config_ccp2@duty2,___awtoft@c
  1021  000840  C05C  F00A         	movff	config_ccp2@duty2+1,___awtoft@c+1
  1022  000844  EC57  F00F         	call	___awtoft	;wreg free
  1023  000848  C009  F01C         	movff	?___awtoft,___ftmul@f2
  1024  00084C  C00A  F01D         	movff	?___awtoft+1,___ftmul@f2+1
  1025  000850  C00B  F01E         	movff	?___awtoft+2,___ftmul@f2+2
  1026  000854  0E00               	movlw	0
  1027  000856  6E10               	movwf	___ftadd@f2,c
  1028  000858  0E80               	movlw	128
  1029  00085A  6E11               	movwf	___ftadd@f2+1,c
  1030  00085C  0E3F               	movlw	63
  1031  00085E  6E12               	movwf	___ftadd@f2+2,c
  1032  000860  C0EA  F00D         	movff	_pr2g,___ftadd@f1
  1033  000864  C0EB  F00E         	movff	_pr2g+1,___ftadd@f1+1
  1034  000868  C0EC  F00F         	movff	_pr2g+2,___ftadd@f1+2
  1035  00086C  ECE6  F007         	call	___ftadd	;wreg free
  1036  000870  C00D  F019         	movff	?___ftadd,___ftmul@f1
  1037  000874  C00E  F01A         	movff	?___ftadd+1,___ftmul@f1+1
  1038  000878  C00F  F01B         	movff	?___ftadd+2,___ftmul@f1+2
  1039  00087C  EC83  F00A         	call	___ftmul	;wreg free
  1040  000880  C019  F095         	movff	?___ftmul,_config_ccp2$1483
  1041  000884  C01A  F096         	movff	?___ftmul+1,_config_ccp2$1483+1
  1042  000888  C01B  F097         	movff	?___ftmul+2,_config_ccp2$1483+2
  1043                           
  1044                           ;Pwm.c: 87: int valreg;
  1045                           ;Pwm.c: 89: valreg = (duty2*(pr2g + 1)*4)/100;
  1046  00088C  0E00               	movlw	0
  1047  00088E  6E2B               	movwf	___ftdiv@f2,c
  1048  000890  0EC8               	movlw	200
  1049  000892  6E2C               	movwf	___ftdiv@f2+1,c
  1050  000894  0E42               	movlw	66
  1051  000896  6E2D               	movwf	___ftdiv@f2+2,c
  1052  000898  0E00               	movlw	0
  1053  00089A  6E1C               	movwf	___ftmul@f2,c
  1054  00089C  0E80               	movlw	128
  1055  00089E  6E1D               	movwf	___ftmul@f2+1,c
  1056  0008A0  0E40               	movlw	64
  1057  0008A2  6E1E               	movwf	___ftmul@f2+2,c
  1058  0008A4  C095  F019         	movff	_config_ccp2$1483,___ftmul@f1
  1059  0008A8  C096  F01A         	movff	_config_ccp2$1483+1,___ftmul@f1+1
  1060  0008AC  C097  F01B         	movff	_config_ccp2$1483+2,___ftmul@f1+2
  1061  0008B0  EC83  F00A         	call	___ftmul	;wreg free
  1062  0008B4  C019  F028         	movff	?___ftmul,___ftdiv@f1
  1063  0008B8  C01A  F029         	movff	?___ftmul+1,___ftdiv@f1+1
  1064  0008BC  C01B  F02A         	movff	?___ftmul+2,___ftdiv@f1+2
  1065  0008C0  ECFD  F00A         	call	___ftdiv	;wreg free
  1066  0008C4  C028  F037         	movff	?___ftdiv,___fttol@f1
  1067  0008C8  C029  F038         	movff	?___ftdiv+1,___fttol@f1+1
  1068  0008CC  C02A  F039         	movff	?___ftdiv+2,___fttol@f1+2
  1069  0008D0  EC09  F00A         	call	___fttol	;wreg free
  1070  0008D4  C037  F098         	movff	?___fttol,config_ccp2@valreg
  1071  0008D8  C038  F099         	movff	?___fttol+1,config_ccp2@valreg+1
  1072                           
  1073                           ;Pwm.c: 92: int n,x,i,j,z;
  1074                           ;Pwm.c: 93: unsigned int w,y;
  1075                           ;Pwm.c: 94: int a[15] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  1076  0008DC  EE20  F0AE         	lfsr	2,config_ccp2@F3978
  1077  0008E0  EE10  F077         	lfsr	1,config_ccp2@a
  1078  0008E4  0E1D               	movlw	29
  1079  0008E6                     u2111:
  1080  0008E6  CFDB FFE3          	movff	plusw2,plusw1
  1081  0008EA  06E8               	decf	wreg,f,c
  1082  0008EC  E2FC               	bc	u2111
  1083                           
  1084                           ;Pwm.c: 96: n = valreg;
  1085  0008EE  C098  F0AA         	movff	config_ccp2@valreg,config_ccp2@n
  1086  0008F2  C099  F0AB         	movff	config_ccp2@valreg+1,config_ccp2@n+1
  1087                           
  1088                           ;Pwm.c: 97: i = 0;
  1089  0008F6  0E00               	movlw	0
  1090  0008F8  0100               	movlb	0	; () banked
  1091  0008FA  6F9B               	movwf	(config_ccp2@i+1)& (0+255),b
  1092  0008FC  0E00               	movlw	0
  1093  0008FE  6F9A               	movwf	config_ccp2@i& (0+255),b
  1094                           
  1095                           ; BSR set to: 0
  1096                           ;Pwm.c: 98: z = 0;
  1097  000900  0E00               	movlw	0
  1098  000902  6F9D               	movwf	(config_ccp2@z+1)& (0+255),b
  1099  000904  0E00               	movlw	0
  1100  000906  6F9C               	movwf	config_ccp2@z& (0+255),b
  1101                           
  1102                           ; BSR set to: 0
  1103                           ;Pwm.c: 99: y = 0;
  1104  000908  0E00               	movlw	0
  1105  00090A  6FA9               	movwf	(config_ccp2@y+1)& (0+255),b
  1106  00090C  0E00               	movlw	0
  1107  00090E  6FA8               	movwf	config_ccp2@y& (0+255),b
  1108                           
  1109                           ; BSR set to: 0
  1110                           ;Pwm.c: 100: w = 0;
  1111  000910  0E00               	movlw	0
  1112  000912  6FA7               	movwf	(config_ccp2@w+1)& (0+255),b
  1113  000914  0E00               	movlw	0
  1114  000916  6FA6               	movwf	config_ccp2@w& (0+255),b
  1115                           
  1116                           ;Pwm.c: 102: while(n > 0)
  1117  000918  D024               	goto	l152
  1118  00091A                     l2398:
  1119                           
  1120                           ; BSR set to: 0
  1121                           ;Pwm.c: 103: {
  1122                           ;Pwm.c: 104: a[i] = n % 2;
  1123  00091A  0E01               	movlw	1
  1124  00091C  15AA               	andwf	config_ccp2@n& (0+255),w,b
  1125  00091E  6E5D               	movwf	??_config_ccp2& (0+255),c
  1126  000920  0E00               	movlw	0
  1127  000922  15AB               	andwf	(config_ccp2@n+1)& (0+255),w,b
  1128  000924  6E5E               	movwf	(??_config_ccp2+1)& (0+255),c
  1129  000926  90D8               	bcf	status,0,c
  1130  000928  359A               	rlcf	config_ccp2@i& (0+255),w,b
  1131  00092A  6ED9               	movwf	fsr2l,c
  1132  00092C  359B               	rlcf	(config_ccp2@i+1)& (0+255),w,b
  1133  00092E  6EDA               	movwf	fsr2h,c
  1134  000930  0E77               	movlw	low config_ccp2@a
  1135  000932  26D9               	addwf	fsr2l,f,c
  1136  000934  0E00               	movlw	high config_ccp2@a
  1137  000936  22DA               	addwfc	fsr2h,f,c
  1138  000938  C05D  FFDE         	movff	??_config_ccp2,postinc2
  1139  00093C  C05E  FFDD         	movff	??_config_ccp2+1,postdec2
  1140                           
  1141                           ; BSR set to: 0
  1142                           ;Pwm.c: 105: n = n / 2;
  1143  000940  C0AA  F001         	movff	config_ccp2@n,___awdiv@dividend
  1144  000944  C0AB  F002         	movff	config_ccp2@n+1,___awdiv@dividend+1
  1145  000948  0E00               	movlw	0
  1146  00094A  6E04               	movwf	___awdiv@divisor+1,c
  1147  00094C  0E02               	movlw	2
  1148  00094E  6E03               	movwf	___awdiv@divisor,c
  1149  000950  ECEE  F00D         	call	___awdiv	;wreg free
  1150  000954  C001  F0AA         	movff	?___awdiv,config_ccp2@n
  1151  000958  C002  F0AB         	movff	?___awdiv+1,config_ccp2@n+1
  1152                           
  1153                           ;Pwm.c: 106: i++;
  1154  00095C  0100               	movlb	0	; () banked
  1155  00095E  4B9A               	infsnz	config_ccp2@i& (0+255),f,b
  1156  000960  2B9B               	incf	(config_ccp2@i+1)& (0+255),f,b
  1157  000962                     l152:
  1158                           
  1159                           ; BSR set to: 0
  1160                           
  1161                           ; BSR set to: 0
  1162  000962  BFAB               	btfsc	(config_ccp2@n+1)& (0+255),7,b
  1163  000964  D005               	goto	u2120
  1164  000966  51AB               	movf	(config_ccp2@n+1)& (0+255),w,b
  1165  000968  E1D8               	bnz	l2398
  1166  00096A  05AA               	decf	config_ccp2@n& (0+255),w,b
  1167  00096C  B0D8               	btfsc	status,0,c
  1168  00096E  D7D5               	goto	l153
  1169  000970                     u2120:
  1170                           
  1171                           ; BSR set to: 0
  1172                           ;Pwm.c: 107: }
  1173                           ;Pwm.c: 109: for(j = 0 ; j <= 1; j++)
  1174                           
  1175                           ; BSR set to: 0
  1176  000970  0E00               	movlw	0
  1177  000972  6FAD               	movwf	(config_ccp2@j+1)& (0+255),b
  1178  000974  0E00               	movlw	0
  1179  000976  6FAC               	movwf	config_ccp2@j& (0+255),b
  1180  000978                     l2408:
  1181                           
  1182                           ; BSR set to: 0
  1183  000978  BFAD               	btfsc	(config_ccp2@j+1)& (0+255),7,b
  1184  00097A  D006               	goto	l155
  1185  00097C  51AD               	movf	(config_ccp2@j+1)& (0+255),w,b
  1186  00097E  E159               	bnz	l2424
  1187  000980  0E02               	movlw	2
  1188  000982  5DAC               	subwf	config_ccp2@j& (0+255),w,b
  1189  000984  B0D8               	btfsc	status,0,c
  1190  000986  D055               	goto	u2140
  1191  000988                     l155:
  1192                           
  1193                           ; BSR set to: 0
  1194                           ;Pwm.c: 110: {
  1195                           ;Pwm.c: 111: x = a[j] * (pow (2,j));
  1196                           
  1197                           ; BSR set to: 0
  1198  000988  C0AC  F009         	movff	config_ccp2@j,___awtoft@c
  1199  00098C  C0AD  F00A         	movff	config_ccp2@j+1,___awtoft@c+1
  1200  000990  EC57  F00F         	call	___awtoft	;wreg free
  1201  000994  C009  F09E         	movff	?___awtoft,_config_ccp2$1484
  1202  000998  C00A  F09F         	movff	?___awtoft+1,_config_ccp2$1484+1
  1203  00099C  C00B  F0A0         	movff	?___awtoft+2,_config_ccp2$1484+2
  1204                           
  1205                           ;Pwm.c: 110: {
  1206                           ;Pwm.c: 111: x = a[j] * (pow (2,j));
  1207  0009A0  C09E  F069         	movff	_config_ccp2$1484,pow@y
  1208  0009A4  C09F  F06A         	movff	_config_ccp2$1484+1,pow@y+1
  1209  0009A8  C0A0  F06B         	movff	_config_ccp2$1484+2,pow@y+2
  1210  0009AC  0E00               	movlw	0
  1211  0009AE  0100               	movlb	0	; () banked
  1212  0009B0  6F66               	movwf	pow@x& (0+255),b
  1213  0009B2  0E00               	movlw	0
  1214  0009B4  6F67               	movwf	(pow@x+1)& (0+255),b
  1215  0009B6  0E40               	movlw	64
  1216  0009B8  6F68               	movwf	(pow@x+2)& (0+255),b
  1217  0009BA  ECBC  F008         	call	_pow	;wreg free
  1218  0009BE  C066  F0A1         	movff	?_pow,_config_ccp2$1485
  1219  0009C2  C067  F0A2         	movff	?_pow+1,_config_ccp2$1485+1
  1220  0009C6  C068  F0A3         	movff	?_pow+2,_config_ccp2$1485+2
  1221                           
  1222                           ;Pwm.c: 110: {
  1223                           ;Pwm.c: 111: x = a[j] * (pow (2,j));
  1224  0009CA  C0A1  F01C         	movff	_config_ccp2$1485,___ftmul@f2
  1225  0009CE  C0A2  F01D         	movff	_config_ccp2$1485+1,___ftmul@f2+1
  1226  0009D2  C0A3  F01E         	movff	_config_ccp2$1485+2,___ftmul@f2+2
  1227  0009D6  90D8               	bcf	status,0,c
  1228  0009D8  0100               	movlb	0	; () banked
  1229  0009DA  35AC               	rlcf	config_ccp2@j& (0+255),w,b
  1230  0009DC  6ED9               	movwf	fsr2l,c
  1231  0009DE  35AD               	rlcf	(config_ccp2@j+1)& (0+255),w,b
  1232  0009E0  6EDA               	movwf	fsr2h,c
  1233  0009E2  0E77               	movlw	low config_ccp2@a
  1234  0009E4  26D9               	addwf	fsr2l,f,c
  1235  0009E6  0E00               	movlw	high config_ccp2@a
  1236  0009E8  22DA               	addwfc	fsr2h,f,c
  1237  0009EA  CFDE F009          	movff	postinc2,___awtoft@c
  1238  0009EE  CFDD F00A          	movff	postdec2,___awtoft@c+1
  1239  0009F2  EC57  F00F         	call	___awtoft	;wreg free
  1240  0009F6  C009  F019         	movff	?___awtoft,___ftmul@f1
  1241  0009FA  C00A  F01A         	movff	?___awtoft+1,___ftmul@f1+1
  1242  0009FE  C00B  F01B         	movff	?___awtoft+2,___ftmul@f1+2
  1243  000A02  EC83  F00A         	call	___ftmul	;wreg free
  1244  000A06  C019  F037         	movff	?___ftmul,___fttol@f1
  1245  000A0A  C01A  F038         	movff	?___ftmul+1,___fttol@f1+1
  1246  000A0E  C01B  F039         	movff	?___ftmul+2,___fttol@f1+2
  1247  000A12  EC09  F00A         	call	___fttol	;wreg free
  1248  000A16  C037  F0A4         	movff	?___fttol,config_ccp2@x
  1249  000A1A  C038  F0A5         	movff	?___fttol+1,config_ccp2@x+1
  1250                           
  1251                           ;Pwm.c: 112: y = x + y;
  1252  000A1E  0100               	movlb	0	; () banked
  1253  000A20  51A8               	movf	config_ccp2@y& (0+255),w,b
  1254  000A22  25A4               	addwf	config_ccp2@x& (0+255),w,b
  1255  000A24  6FA8               	movwf	config_ccp2@y& (0+255),b
  1256  000A26  51A9               	movf	(config_ccp2@y+1)& (0+255),w,b
  1257  000A28  21A5               	addwfc	(config_ccp2@x+1)& (0+255),w,b
  1258  000A2A  6FA9               	movwf	(config_ccp2@y+1)& (0+255),b
  1259                           
  1260                           ; BSR set to: 0
  1261  000A2C  4BAC               	infsnz	config_ccp2@j& (0+255),f,b
  1262  000A2E  2BAD               	incf	(config_ccp2@j+1)& (0+255),f,b
  1263  000A30  D7A3               	goto	l2408
  1264  000A32                     u2140:
  1265  000A32                     l2424:
  1266                           
  1267                           ; BSR set to: 0
  1268                           ;Pwm.c: 113: }
  1269                           ;Pwm.c: 114: for(j = 2 ; j <= 9; j++)
  1270  000A32  0E00               	movlw	0
  1271  000A34  6FAD               	movwf	(config_ccp2@j+1)& (0+255),b
  1272  000A36  0E02               	movlw	2
  1273  000A38  6FAC               	movwf	config_ccp2@j& (0+255),b
  1274  000A3A                     l2426:
  1275                           
  1276                           ; BSR set to: 0
  1277  000A3A  BFAD               	btfsc	(config_ccp2@j+1)& (0+255),7,b
  1278  000A3C  D006               	goto	l157
  1279  000A3E  51AD               	movf	(config_ccp2@j+1)& (0+255),w,b
  1280  000A40  E15B               	bnz	l2444
  1281  000A42  0E0A               	movlw	10
  1282  000A44  5DAC               	subwf	config_ccp2@j& (0+255),w,b
  1283  000A46  B0D8               	btfsc	status,0,c
  1284  000A48  D057               	goto	u2160
  1285  000A4A                     l157:
  1286                           
  1287                           ; BSR set to: 0
  1288                           ;Pwm.c: 115: {
  1289                           ;Pwm.c: 116: x = a[j] * (pow (2,z));
  1290                           
  1291                           ; BSR set to: 0
  1292  000A4A  C09C  F009         	movff	config_ccp2@z,___awtoft@c
  1293  000A4E  C09D  F00A         	movff	config_ccp2@z+1,___awtoft@c+1
  1294  000A52  EC57  F00F         	call	___awtoft	;wreg free
  1295  000A56  C009  F09E         	movff	?___awtoft,_config_ccp2$1484
  1296  000A5A  C00A  F09F         	movff	?___awtoft+1,_config_ccp2$1484+1
  1297  000A5E  C00B  F0A0         	movff	?___awtoft+2,_config_ccp2$1484+2
  1298                           
  1299                           ;Pwm.c: 115: {
  1300                           ;Pwm.c: 116: x = a[j] * (pow (2,z));
  1301  000A62  C09E  F069         	movff	_config_ccp2$1484,pow@y
  1302  000A66  C09F  F06A         	movff	_config_ccp2$1484+1,pow@y+1
  1303  000A6A  C0A0  F06B         	movff	_config_ccp2$1484+2,pow@y+2
  1304  000A6E  0E00               	movlw	0
  1305  000A70  0100               	movlb	0	; () banked
  1306  000A72  6F66               	movwf	pow@x& (0+255),b
  1307  000A74  0E00               	movlw	0
  1308  000A76  6F67               	movwf	(pow@x+1)& (0+255),b
  1309  000A78  0E40               	movlw	64
  1310  000A7A  6F68               	movwf	(pow@x+2)& (0+255),b
  1311  000A7C  ECBC  F008         	call	_pow	;wreg free
  1312  000A80  C066  F0A1         	movff	?_pow,_config_ccp2$1485
  1313  000A84  C067  F0A2         	movff	?_pow+1,_config_ccp2$1485+1
  1314  000A88  C068  F0A3         	movff	?_pow+2,_config_ccp2$1485+2
  1315                           
  1316                           ;Pwm.c: 115: {
  1317                           ;Pwm.c: 116: x = a[j] * (pow (2,z));
  1318  000A8C  C0A1  F01C         	movff	_config_ccp2$1485,___ftmul@f2
  1319  000A90  C0A2  F01D         	movff	_config_ccp2$1485+1,___ftmul@f2+1
  1320  000A94  C0A3  F01E         	movff	_config_ccp2$1485+2,___ftmul@f2+2
  1321  000A98  90D8               	bcf	status,0,c
  1322  000A9A  0100               	movlb	0	; () banked
  1323  000A9C  35AC               	rlcf	config_ccp2@j& (0+255),w,b
  1324  000A9E  6ED9               	movwf	fsr2l,c
  1325  000AA0  35AD               	rlcf	(config_ccp2@j+1)& (0+255),w,b
  1326  000AA2  6EDA               	movwf	fsr2h,c
  1327  000AA4  0E77               	movlw	low config_ccp2@a
  1328  000AA6  26D9               	addwf	fsr2l,f,c
  1329  000AA8  0E00               	movlw	high config_ccp2@a
  1330  000AAA  22DA               	addwfc	fsr2h,f,c
  1331  000AAC  CFDE F009          	movff	postinc2,___awtoft@c
  1332  000AB0  CFDD F00A          	movff	postdec2,___awtoft@c+1
  1333  000AB4  EC57  F00F         	call	___awtoft	;wreg free
  1334  000AB8  C009  F019         	movff	?___awtoft,___ftmul@f1
  1335  000ABC  C00A  F01A         	movff	?___awtoft+1,___ftmul@f1+1
  1336  000AC0  C00B  F01B         	movff	?___awtoft+2,___ftmul@f1+2
  1337  000AC4  EC83  F00A         	call	___ftmul	;wreg free
  1338  000AC8  C019  F037         	movff	?___ftmul,___fttol@f1
  1339  000ACC  C01A  F038         	movff	?___ftmul+1,___fttol@f1+1
  1340  000AD0  C01B  F039         	movff	?___ftmul+2,___fttol@f1+2
  1341  000AD4  EC09  F00A         	call	___fttol	;wreg free
  1342  000AD8  C037  F0A4         	movff	?___fttol,config_ccp2@x
  1343  000ADC  C038  F0A5         	movff	?___fttol+1,config_ccp2@x+1
  1344                           
  1345                           ;Pwm.c: 117: w = x + w;
  1346  000AE0  0100               	movlb	0	; () banked
  1347  000AE2  51A6               	movf	config_ccp2@w& (0+255),w,b
  1348  000AE4  25A4               	addwf	config_ccp2@x& (0+255),w,b
  1349  000AE6  6FA6               	movwf	config_ccp2@w& (0+255),b
  1350  000AE8  51A7               	movf	(config_ccp2@w+1)& (0+255),w,b
  1351  000AEA  21A5               	addwfc	(config_ccp2@x+1)& (0+255),w,b
  1352  000AEC  6FA7               	movwf	(config_ccp2@w+1)& (0+255),b
  1353                           
  1354                           ; BSR set to: 0
  1355                           ;Pwm.c: 118: z++;
  1356  000AEE  4B9C               	infsnz	config_ccp2@z& (0+255),f,b
  1357  000AF0  2B9D               	incf	(config_ccp2@z+1)& (0+255),f,b
  1358                           
  1359                           ; BSR set to: 0
  1360  000AF2  4BAC               	infsnz	config_ccp2@j& (0+255),f,b
  1361  000AF4  2BAD               	incf	(config_ccp2@j+1)& (0+255),f,b
  1362  000AF6  D7A1               	goto	l2426
  1363  000AF8                     u2160:
  1364  000AF8                     l2444:
  1365                           
  1366                           ; BSR set to: 0
  1367                           ;Pwm.c: 119: }
  1368                           ;Pwm.c: 121: CCP2CONbits.DC2B = y;
  1369  000AF8  C0A8  F05D         	movff	config_ccp2@y,??_config_ccp2
  1370  000AFC  3A5D               	swapf	??_config_ccp2,f,c
  1371  000AFE  50BA               	movf	4026,w,c	;volatile
  1372  000B00  185D               	xorwf	??_config_ccp2,w,c
  1373  000B02  0BCF               	andlw	-49
  1374  000B04  185D               	xorwf	??_config_ccp2,w,c
  1375  000B06  6EBA               	movwf	4026,c	;volatile
  1376                           
  1377                           ; BSR set to: 0
  1378                           ;Pwm.c: 122: CCPR2L = w;
  1379  000B08  C0A6  FFBB         	movff	config_ccp2@w,4027	;volatile
  1380                           
  1381                           ; BSR set to: 0
  1382  000B0C  0012               	return		;funcret
  1383  000B0E                     __end_of_config_ccp2:
  1384                           	opt stack 0
  1385                           tblptru	equ	0xFF8
  1386                           postinc0	equ	0xFEE
  1387                           wreg	equ	0xFE8
  1388                           plusw1	equ	0xFE3
  1389                           postinc2	equ	0xFDE
  1390                           postdec2	equ	0xFDD
  1391                           plusw2	equ	0xFDB
  1392                           fsr2h	equ	0xFDA
  1393                           fsr2l	equ	0xFD9
  1394                           status	equ	0xFD8
  1395                           
  1396 ;; *************** function _config_ccp1 *****************
  1397 ;; Defined at:
  1398 ;;		line 43 in file "Pwm.c"
  1399 ;; Parameters:    Size  Location     Type
  1400 ;;  duty1           2   90[COMRAM] int 
  1401 ;; Auto vars:     Size  Location     Type
  1402 ;;  a              30   23[BANK0 ] int [15]
  1403 ;;  j               2   76[BANK0 ] int 
  1404 ;;  n               2   74[BANK0 ] int 
  1405 ;;  y               2   72[BANK0 ] unsigned int 
  1406 ;;  w               2   70[BANK0 ] unsigned int 
  1407 ;;  x               2   68[BANK0 ] int 
  1408 ;;  z               2   60[BANK0 ] int 
  1409 ;;  i               2   58[BANK0 ] int 
  1410 ;;  valreg          2   56[BANK0 ] int 
  1411 ;; Return value:  Size  Location     Type
  1412 ;;                  1    wreg      void 
  1413 ;; Registers used:
  1414 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1415 ;; Tracked objects:
  1416 ;;		On entry : 0/0
  1417 ;;		On exit  : 0/0
  1418 ;;		Unchanged: 0/0
  1419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1420 ;;      Params:         2       0       0       0       0       0       0       0       0
  1421 ;;      Locals:         0      55       0       0       0       0       0       0       0
  1422 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1423 ;;      Totals:         4      55       0       0       0       0       0       0       0
  1424 ;;Total ram usage:       59 bytes
  1425 ;; Hardware stack levels used:    1
  1426 ;; Hardware stack levels required when called:    5
  1427 ;; This function calls:
  1428 ;;		___awdiv
  1429 ;;		___awtoft
  1430 ;;		___ftadd
  1431 ;;		___ftdiv
  1432 ;;		___ftmul
  1433 ;;		___fttol
  1434 ;;		_pow
  1435 ;; This function is called by:
  1436 ;;		_main
  1437 ;; This function uses a non-reentrant model
  1438 ;;
  1439                           
  1440                           	psect	text3
  1441  000B0E                     __ptext3:
  1442                           	opt stack 0
  1443  000B0E                     _config_ccp1:
  1444                           	opt stack 25
  1445                           
  1446                           ;Pwm.c: 45: int valreg;
  1447                           ;Pwm.c: 47: valreg = (duty1*(pr2g + 1)*4)/100;
  1448                           
  1449                           ; BSR set to: 0
  1450                           ;incstack = 0
  1451  000B0E  C05B  F009         	movff	config_ccp1@duty1,___awtoft@c
  1452  000B12  C05C  F00A         	movff	config_ccp1@duty1+1,___awtoft@c+1
  1453  000B16  EC57  F00F         	call	___awtoft	;wreg free
  1454  000B1A  C009  F01C         	movff	?___awtoft,___ftmul@f2
  1455  000B1E  C00A  F01D         	movff	?___awtoft+1,___ftmul@f2+1
  1456  000B22  C00B  F01E         	movff	?___awtoft+2,___ftmul@f2+2
  1457  000B26  0E00               	movlw	0
  1458  000B28  6E10               	movwf	___ftadd@f2,c
  1459  000B2A  0E80               	movlw	128
  1460  000B2C  6E11               	movwf	___ftadd@f2+1,c
  1461  000B2E  0E3F               	movlw	63
  1462  000B30  6E12               	movwf	___ftadd@f2+2,c
  1463  000B32  C0EA  F00D         	movff	_pr2g,___ftadd@f1
  1464  000B36  C0EB  F00E         	movff	_pr2g+1,___ftadd@f1+1
  1465  000B3A  C0EC  F00F         	movff	_pr2g+2,___ftadd@f1+2
  1466  000B3E  ECE6  F007         	call	___ftadd	;wreg free
  1467  000B42  C00D  F019         	movff	?___ftadd,___ftmul@f1
  1468  000B46  C00E  F01A         	movff	?___ftadd+1,___ftmul@f1+1
  1469  000B4A  C00F  F01B         	movff	?___ftadd+2,___ftmul@f1+2
  1470  000B4E  EC83  F00A         	call	___ftmul	;wreg free
  1471  000B52  C019  F095         	movff	?___ftmul,_config_ccp1$1480
  1472  000B56  C01A  F096         	movff	?___ftmul+1,_config_ccp1$1480+1
  1473  000B5A  C01B  F097         	movff	?___ftmul+2,_config_ccp1$1480+2
  1474                           
  1475                           ;Pwm.c: 45: int valreg;
  1476                           ;Pwm.c: 47: valreg = (duty1*(pr2g + 1)*4)/100;
  1477  000B5E  0E00               	movlw	0
  1478  000B60  6E2B               	movwf	___ftdiv@f2,c
  1479  000B62  0EC8               	movlw	200
  1480  000B64  6E2C               	movwf	___ftdiv@f2+1,c
  1481  000B66  0E42               	movlw	66
  1482  000B68  6E2D               	movwf	___ftdiv@f2+2,c
  1483  000B6A  0E00               	movlw	0
  1484  000B6C  6E1C               	movwf	___ftmul@f2,c
  1485  000B6E  0E80               	movlw	128
  1486  000B70  6E1D               	movwf	___ftmul@f2+1,c
  1487  000B72  0E40               	movlw	64
  1488  000B74  6E1E               	movwf	___ftmul@f2+2,c
  1489  000B76  C095  F019         	movff	_config_ccp1$1480,___ftmul@f1
  1490  000B7A  C096  F01A         	movff	_config_ccp1$1480+1,___ftmul@f1+1
  1491  000B7E  C097  F01B         	movff	_config_ccp1$1480+2,___ftmul@f1+2
  1492  000B82  EC83  F00A         	call	___ftmul	;wreg free
  1493  000B86  C019  F028         	movff	?___ftmul,___ftdiv@f1
  1494  000B8A  C01A  F029         	movff	?___ftmul+1,___ftdiv@f1+1
  1495  000B8E  C01B  F02A         	movff	?___ftmul+2,___ftdiv@f1+2
  1496  000B92  ECFD  F00A         	call	___ftdiv	;wreg free
  1497  000B96  C028  F037         	movff	?___ftdiv,___fttol@f1
  1498  000B9A  C029  F038         	movff	?___ftdiv+1,___fttol@f1+1
  1499  000B9E  C02A  F039         	movff	?___ftdiv+2,___fttol@f1+2
  1500  000BA2  EC09  F00A         	call	___fttol	;wreg free
  1501  000BA6  C037  F098         	movff	?___fttol,config_ccp1@valreg
  1502  000BAA  C038  F099         	movff	?___fttol+1,config_ccp1@valreg+1
  1503                           
  1504                           ;Pwm.c: 50: int n,x,i,j,z;
  1505                           ;Pwm.c: 51: unsigned int w,y;
  1506                           ;Pwm.c: 52: int a[15] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  1507  000BAE  EE20  F0CC         	lfsr	2,config_ccp1@F3967
  1508  000BB2  EE10  F077         	lfsr	1,config_ccp1@a
  1509  000BB6  0E1D               	movlw	29
  1510  000BB8                     u2051:
  1511  000BB8  CFDB FFE3          	movff	plusw2,plusw1
  1512  000BBC  06E8               	decf	wreg,f,c
  1513  000BBE  E2FC               	bc	u2051
  1514                           
  1515                           ;Pwm.c: 54: n = valreg;
  1516  000BC0  C098  F0AA         	movff	config_ccp1@valreg,config_ccp1@n
  1517  000BC4  C099  F0AB         	movff	config_ccp1@valreg+1,config_ccp1@n+1
  1518                           
  1519                           ;Pwm.c: 55: i = 0;
  1520  000BC8  0E00               	movlw	0
  1521  000BCA  0100               	movlb	0	; () banked
  1522  000BCC  6F9B               	movwf	(config_ccp1@i+1)& (0+255),b
  1523  000BCE  0E00               	movlw	0
  1524  000BD0  6F9A               	movwf	config_ccp1@i& (0+255),b
  1525                           
  1526                           ; BSR set to: 0
  1527                           ;Pwm.c: 56: z = 0;
  1528  000BD2  0E00               	movlw	0
  1529  000BD4  6F9D               	movwf	(config_ccp1@z+1)& (0+255),b
  1530  000BD6  0E00               	movlw	0
  1531  000BD8  6F9C               	movwf	config_ccp1@z& (0+255),b
  1532                           
  1533                           ; BSR set to: 0
  1534                           ;Pwm.c: 57: y = 0;
  1535  000BDA  0E00               	movlw	0
  1536  000BDC  6FA9               	movwf	(config_ccp1@y+1)& (0+255),b
  1537  000BDE  0E00               	movlw	0
  1538  000BE0  6FA8               	movwf	config_ccp1@y& (0+255),b
  1539                           
  1540                           ; BSR set to: 0
  1541                           ;Pwm.c: 58: w = 0;
  1542  000BE2  0E00               	movlw	0
  1543  000BE4  6FA7               	movwf	(config_ccp1@w+1)& (0+255),b
  1544  000BE6  0E00               	movlw	0
  1545  000BE8  6FA6               	movwf	config_ccp1@w& (0+255),b
  1546                           
  1547                           ;Pwm.c: 60: while(n > 0)
  1548  000BEA  D024               	goto	l140
  1549  000BEC                     l2334:
  1550                           
  1551                           ; BSR set to: 0
  1552                           ;Pwm.c: 61: {
  1553                           ;Pwm.c: 62: a[i] = n % 2;
  1554  000BEC  0E01               	movlw	1
  1555  000BEE  15AA               	andwf	config_ccp1@n& (0+255),w,b
  1556  000BF0  6E5D               	movwf	??_config_ccp1& (0+255),c
  1557  000BF2  0E00               	movlw	0
  1558  000BF4  15AB               	andwf	(config_ccp1@n+1)& (0+255),w,b
  1559  000BF6  6E5E               	movwf	(??_config_ccp1+1)& (0+255),c
  1560  000BF8  90D8               	bcf	status,0,c
  1561  000BFA  359A               	rlcf	config_ccp1@i& (0+255),w,b
  1562  000BFC  6ED9               	movwf	fsr2l,c
  1563  000BFE  359B               	rlcf	(config_ccp1@i+1)& (0+255),w,b
  1564  000C00  6EDA               	movwf	fsr2h,c
  1565  000C02  0E77               	movlw	low config_ccp1@a
  1566  000C04  26D9               	addwf	fsr2l,f,c
  1567  000C06  0E00               	movlw	high config_ccp1@a
  1568  000C08  22DA               	addwfc	fsr2h,f,c
  1569  000C0A  C05D  FFDE         	movff	??_config_ccp1,postinc2
  1570  000C0E  C05E  FFDD         	movff	??_config_ccp1+1,postdec2
  1571                           
  1572                           ; BSR set to: 0
  1573                           ;Pwm.c: 63: n = n / 2;
  1574  000C12  C0AA  F001         	movff	config_ccp1@n,___awdiv@dividend
  1575  000C16  C0AB  F002         	movff	config_ccp1@n+1,___awdiv@dividend+1
  1576  000C1A  0E00               	movlw	0
  1577  000C1C  6E04               	movwf	___awdiv@divisor+1,c
  1578  000C1E  0E02               	movlw	2
  1579  000C20  6E03               	movwf	___awdiv@divisor,c
  1580  000C22  ECEE  F00D         	call	___awdiv	;wreg free
  1581  000C26  C001  F0AA         	movff	?___awdiv,config_ccp1@n
  1582  000C2A  C002  F0AB         	movff	?___awdiv+1,config_ccp1@n+1
  1583                           
  1584                           ;Pwm.c: 64: i++;
  1585  000C2E  0100               	movlb	0	; () banked
  1586  000C30  4B9A               	infsnz	config_ccp1@i& (0+255),f,b
  1587  000C32  2B9B               	incf	(config_ccp1@i+1)& (0+255),f,b
  1588  000C34                     l140:
  1589                           
  1590                           ; BSR set to: 0
  1591                           
  1592                           ; BSR set to: 0
  1593  000C34  BFAB               	btfsc	(config_ccp1@n+1)& (0+255),7,b
  1594  000C36  D005               	goto	u2060
  1595  000C38  51AB               	movf	(config_ccp1@n+1)& (0+255),w,b
  1596  000C3A  E1D8               	bnz	l2334
  1597  000C3C  05AA               	decf	config_ccp1@n& (0+255),w,b
  1598  000C3E  B0D8               	btfsc	status,0,c
  1599  000C40  D7D5               	goto	l141
  1600  000C42                     u2060:
  1601                           
  1602                           ; BSR set to: 0
  1603                           ;Pwm.c: 65: }
  1604                           ;Pwm.c: 67: for(j = 0 ; j <= 1; j++)
  1605                           
  1606                           ; BSR set to: 0
  1607  000C42  0E00               	movlw	0
  1608  000C44  6FAD               	movwf	(config_ccp1@j+1)& (0+255),b
  1609  000C46  0E00               	movlw	0
  1610  000C48  6FAC               	movwf	config_ccp1@j& (0+255),b
  1611  000C4A                     l2344:
  1612                           
  1613                           ; BSR set to: 0
  1614  000C4A  BFAD               	btfsc	(config_ccp1@j+1)& (0+255),7,b
  1615  000C4C  D006               	goto	l143
  1616  000C4E  51AD               	movf	(config_ccp1@j+1)& (0+255),w,b
  1617  000C50  E159               	bnz	l2360
  1618  000C52  0E02               	movlw	2
  1619  000C54  5DAC               	subwf	config_ccp1@j& (0+255),w,b
  1620  000C56  B0D8               	btfsc	status,0,c
  1621  000C58  D055               	goto	u2080
  1622  000C5A                     l143:
  1623                           
  1624                           ; BSR set to: 0
  1625                           ;Pwm.c: 68: {
  1626                           ;Pwm.c: 69: x = a[j] * (pow (2,j));
  1627                           
  1628                           ; BSR set to: 0
  1629  000C5A  C0AC  F009         	movff	config_ccp1@j,___awtoft@c
  1630  000C5E  C0AD  F00A         	movff	config_ccp1@j+1,___awtoft@c+1
  1631  000C62  EC57  F00F         	call	___awtoft	;wreg free
  1632  000C66  C009  F09E         	movff	?___awtoft,_config_ccp1$1481
  1633  000C6A  C00A  F09F         	movff	?___awtoft+1,_config_ccp1$1481+1
  1634  000C6E  C00B  F0A0         	movff	?___awtoft+2,_config_ccp1$1481+2
  1635                           
  1636                           ;Pwm.c: 68: {
  1637                           ;Pwm.c: 69: x = a[j] * (pow (2,j));
  1638  000C72  C09E  F069         	movff	_config_ccp1$1481,pow@y
  1639  000C76  C09F  F06A         	movff	_config_ccp1$1481+1,pow@y+1
  1640  000C7A  C0A0  F06B         	movff	_config_ccp1$1481+2,pow@y+2
  1641  000C7E  0E00               	movlw	0
  1642  000C80  0100               	movlb	0	; () banked
  1643  000C82  6F66               	movwf	pow@x& (0+255),b
  1644  000C84  0E00               	movlw	0
  1645  000C86  6F67               	movwf	(pow@x+1)& (0+255),b
  1646  000C88  0E40               	movlw	64
  1647  000C8A  6F68               	movwf	(pow@x+2)& (0+255),b
  1648  000C8C  ECBC  F008         	call	_pow	;wreg free
  1649  000C90  C066  F0A1         	movff	?_pow,_config_ccp1$1482
  1650  000C94  C067  F0A2         	movff	?_pow+1,_config_ccp1$1482+1
  1651  000C98  C068  F0A3         	movff	?_pow+2,_config_ccp1$1482+2
  1652                           
  1653                           ;Pwm.c: 68: {
  1654                           ;Pwm.c: 69: x = a[j] * (pow (2,j));
  1655  000C9C  C0A1  F01C         	movff	_config_ccp1$1482,___ftmul@f2
  1656  000CA0  C0A2  F01D         	movff	_config_ccp1$1482+1,___ftmul@f2+1
  1657  000CA4  C0A3  F01E         	movff	_config_ccp1$1482+2,___ftmul@f2+2
  1658  000CA8  90D8               	bcf	status,0,c
  1659  000CAA  0100               	movlb	0	; () banked
  1660  000CAC  35AC               	rlcf	config_ccp1@j& (0+255),w,b
  1661  000CAE  6ED9               	movwf	fsr2l,c
  1662  000CB0  35AD               	rlcf	(config_ccp1@j+1)& (0+255),w,b
  1663  000CB2  6EDA               	movwf	fsr2h,c
  1664  000CB4  0E77               	movlw	low config_ccp1@a
  1665  000CB6  26D9               	addwf	fsr2l,f,c
  1666  000CB8  0E00               	movlw	high config_ccp1@a
  1667  000CBA  22DA               	addwfc	fsr2h,f,c
  1668  000CBC  CFDE F009          	movff	postinc2,___awtoft@c
  1669  000CC0  CFDD F00A          	movff	postdec2,___awtoft@c+1
  1670  000CC4  EC57  F00F         	call	___awtoft	;wreg free
  1671  000CC8  C009  F019         	movff	?___awtoft,___ftmul@f1
  1672  000CCC  C00A  F01A         	movff	?___awtoft+1,___ftmul@f1+1
  1673  000CD0  C00B  F01B         	movff	?___awtoft+2,___ftmul@f1+2
  1674  000CD4  EC83  F00A         	call	___ftmul	;wreg free
  1675  000CD8  C019  F037         	movff	?___ftmul,___fttol@f1
  1676  000CDC  C01A  F038         	movff	?___ftmul+1,___fttol@f1+1
  1677  000CE0  C01B  F039         	movff	?___ftmul+2,___fttol@f1+2
  1678  000CE4  EC09  F00A         	call	___fttol	;wreg free
  1679  000CE8  C037  F0A4         	movff	?___fttol,config_ccp1@x
  1680  000CEC  C038  F0A5         	movff	?___fttol+1,config_ccp1@x+1
  1681                           
  1682                           ;Pwm.c: 70: y = x + y;
  1683  000CF0  0100               	movlb	0	; () banked
  1684  000CF2  51A8               	movf	config_ccp1@y& (0+255),w,b
  1685  000CF4  25A4               	addwf	config_ccp1@x& (0+255),w,b
  1686  000CF6  6FA8               	movwf	config_ccp1@y& (0+255),b
  1687  000CF8  51A9               	movf	(config_ccp1@y+1)& (0+255),w,b
  1688  000CFA  21A5               	addwfc	(config_ccp1@x+1)& (0+255),w,b
  1689  000CFC  6FA9               	movwf	(config_ccp1@y+1)& (0+255),b
  1690                           
  1691                           ; BSR set to: 0
  1692  000CFE  4BAC               	infsnz	config_ccp1@j& (0+255),f,b
  1693  000D00  2BAD               	incf	(config_ccp1@j+1)& (0+255),f,b
  1694  000D02  D7A3               	goto	l2344
  1695  000D04                     u2080:
  1696  000D04                     l2360:
  1697                           
  1698                           ; BSR set to: 0
  1699                           ;Pwm.c: 71: }
  1700                           ;Pwm.c: 72: for(j = 2 ; j <= 9; j++)
  1701  000D04  0E00               	movlw	0
  1702  000D06  6FAD               	movwf	(config_ccp1@j+1)& (0+255),b
  1703  000D08  0E02               	movlw	2
  1704  000D0A  6FAC               	movwf	config_ccp1@j& (0+255),b
  1705  000D0C                     l2362:
  1706                           
  1707                           ; BSR set to: 0
  1708  000D0C  BFAD               	btfsc	(config_ccp1@j+1)& (0+255),7,b
  1709  000D0E  D006               	goto	l145
  1710  000D10  51AD               	movf	(config_ccp1@j+1)& (0+255),w,b
  1711  000D12  E15B               	bnz	l2380
  1712  000D14  0E0A               	movlw	10
  1713  000D16  5DAC               	subwf	config_ccp1@j& (0+255),w,b
  1714  000D18  B0D8               	btfsc	status,0,c
  1715  000D1A  D057               	goto	u2100
  1716  000D1C                     l145:
  1717                           
  1718                           ; BSR set to: 0
  1719                           ;Pwm.c: 73: {
  1720                           ;Pwm.c: 74: x = a[j] * (pow (2,z));
  1721                           
  1722                           ; BSR set to: 0
  1723  000D1C  C09C  F009         	movff	config_ccp1@z,___awtoft@c
  1724  000D20  C09D  F00A         	movff	config_ccp1@z+1,___awtoft@c+1
  1725  000D24  EC57  F00F         	call	___awtoft	;wreg free
  1726  000D28  C009  F09E         	movff	?___awtoft,_config_ccp1$1481
  1727  000D2C  C00A  F09F         	movff	?___awtoft+1,_config_ccp1$1481+1
  1728  000D30  C00B  F0A0         	movff	?___awtoft+2,_config_ccp1$1481+2
  1729                           
  1730                           ;Pwm.c: 73: {
  1731                           ;Pwm.c: 74: x = a[j] * (pow (2,z));
  1732  000D34  C09E  F069         	movff	_config_ccp1$1481,pow@y
  1733  000D38  C09F  F06A         	movff	_config_ccp1$1481+1,pow@y+1
  1734  000D3C  C0A0  F06B         	movff	_config_ccp1$1481+2,pow@y+2
  1735  000D40  0E00               	movlw	0
  1736  000D42  0100               	movlb	0	; () banked
  1737  000D44  6F66               	movwf	pow@x& (0+255),b
  1738  000D46  0E00               	movlw	0
  1739  000D48  6F67               	movwf	(pow@x+1)& (0+255),b
  1740  000D4A  0E40               	movlw	64
  1741  000D4C  6F68               	movwf	(pow@x+2)& (0+255),b
  1742  000D4E  ECBC  F008         	call	_pow	;wreg free
  1743  000D52  C066  F0A1         	movff	?_pow,_config_ccp1$1482
  1744  000D56  C067  F0A2         	movff	?_pow+1,_config_ccp1$1482+1
  1745  000D5A  C068  F0A3         	movff	?_pow+2,_config_ccp1$1482+2
  1746                           
  1747                           ;Pwm.c: 73: {
  1748                           ;Pwm.c: 74: x = a[j] * (pow (2,z));
  1749  000D5E  C0A1  F01C         	movff	_config_ccp1$1482,___ftmul@f2
  1750  000D62  C0A2  F01D         	movff	_config_ccp1$1482+1,___ftmul@f2+1
  1751  000D66  C0A3  F01E         	movff	_config_ccp1$1482+2,___ftmul@f2+2
  1752  000D6A  90D8               	bcf	status,0,c
  1753  000D6C  0100               	movlb	0	; () banked
  1754  000D6E  35AC               	rlcf	config_ccp1@j& (0+255),w,b
  1755  000D70  6ED9               	movwf	fsr2l,c
  1756  000D72  35AD               	rlcf	(config_ccp1@j+1)& (0+255),w,b
  1757  000D74  6EDA               	movwf	fsr2h,c
  1758  000D76  0E77               	movlw	low config_ccp1@a
  1759  000D78  26D9               	addwf	fsr2l,f,c
  1760  000D7A  0E00               	movlw	high config_ccp1@a
  1761  000D7C  22DA               	addwfc	fsr2h,f,c
  1762  000D7E  CFDE F009          	movff	postinc2,___awtoft@c
  1763  000D82  CFDD F00A          	movff	postdec2,___awtoft@c+1
  1764  000D86  EC57  F00F         	call	___awtoft	;wreg free
  1765  000D8A  C009  F019         	movff	?___awtoft,___ftmul@f1
  1766  000D8E  C00A  F01A         	movff	?___awtoft+1,___ftmul@f1+1
  1767  000D92  C00B  F01B         	movff	?___awtoft+2,___ftmul@f1+2
  1768  000D96  EC83  F00A         	call	___ftmul	;wreg free
  1769  000D9A  C019  F037         	movff	?___ftmul,___fttol@f1
  1770  000D9E  C01A  F038         	movff	?___ftmul+1,___fttol@f1+1
  1771  000DA2  C01B  F039         	movff	?___ftmul+2,___fttol@f1+2
  1772  000DA6  EC09  F00A         	call	___fttol	;wreg free
  1773  000DAA  C037  F0A4         	movff	?___fttol,config_ccp1@x
  1774  000DAE  C038  F0A5         	movff	?___fttol+1,config_ccp1@x+1
  1775                           
  1776                           ;Pwm.c: 75: w = x + w;
  1777  000DB2  0100               	movlb	0	; () banked
  1778  000DB4  51A6               	movf	config_ccp1@w& (0+255),w,b
  1779  000DB6  25A4               	addwf	config_ccp1@x& (0+255),w,b
  1780  000DB8  6FA6               	movwf	config_ccp1@w& (0+255),b
  1781  000DBA  51A7               	movf	(config_ccp1@w+1)& (0+255),w,b
  1782  000DBC  21A5               	addwfc	(config_ccp1@x+1)& (0+255),w,b
  1783  000DBE  6FA7               	movwf	(config_ccp1@w+1)& (0+255),b
  1784                           
  1785                           ; BSR set to: 0
  1786                           ;Pwm.c: 76: z++;
  1787  000DC0  4B9C               	infsnz	config_ccp1@z& (0+255),f,b
  1788  000DC2  2B9D               	incf	(config_ccp1@z+1)& (0+255),f,b
  1789                           
  1790                           ; BSR set to: 0
  1791  000DC4  4BAC               	infsnz	config_ccp1@j& (0+255),f,b
  1792  000DC6  2BAD               	incf	(config_ccp1@j+1)& (0+255),f,b
  1793  000DC8  D7A1               	goto	l2362
  1794  000DCA                     u2100:
  1795  000DCA                     l2380:
  1796                           
  1797                           ; BSR set to: 0
  1798                           ;Pwm.c: 77: }
  1799                           ;Pwm.c: 79: CCP1CONbits.DC1B = y;
  1800  000DCA  C0A8  F05D         	movff	config_ccp1@y,??_config_ccp1
  1801  000DCE  3A5D               	swapf	??_config_ccp1,f,c
  1802  000DD0  50BD               	movf	4029,w,c	;volatile
  1803  000DD2  185D               	xorwf	??_config_ccp1,w,c
  1804  000DD4  0BCF               	andlw	-49
  1805  000DD6  185D               	xorwf	??_config_ccp1,w,c
  1806  000DD8  6EBD               	movwf	4029,c	;volatile
  1807                           
  1808                           ; BSR set to: 0
  1809                           ;Pwm.c: 80: CCPR1L = w;
  1810  000DDA  C0A6  FFBE         	movff	config_ccp1@w,4030	;volatile
  1811                           
  1812                           ; BSR set to: 0
  1813  000DDE  0012               	return		;funcret
  1814  000DE0                     __end_of_config_ccp1:
  1815                           	opt stack 0
  1816                           tblptru	equ	0xFF8
  1817                           postinc0	equ	0xFEE
  1818                           wreg	equ	0xFE8
  1819                           plusw1	equ	0xFE3
  1820                           postinc2	equ	0xFDE
  1821                           postdec2	equ	0xFDD
  1822                           plusw2	equ	0xFDB
  1823                           fsr2h	equ	0xFDA
  1824                           fsr2l	equ	0xFD9
  1825                           status	equ	0xFD8
  1826                           
  1827 ;; *************** function _pow *****************
  1828 ;; Defined at:
  1829 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\pow.c"
  1830 ;; Parameters:    Size  Location     Type
  1831 ;;  x               3    6[BANK0 ] void 
  1832 ;;  y               3    9[BANK0 ] void 
  1833 ;; Auto vars:     Size  Location     Type
  1834 ;;  yi              4   19[BANK0 ] unsigned long 
  1835 ;;  sign            1   18[BANK0 ] unsigned char 
  1836 ;; Return value:  Size  Location     Type
  1837 ;;                  3    6[BANK0 ] unsigned char 
  1838 ;; Registers used:
  1839 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1840 ;; Tracked objects:
  1841 ;;		On entry : 0/0
  1842 ;;		On exit  : 0/0
  1843 ;;		Unchanged: 0/0
  1844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1845 ;;      Params:         0       6       0       0       0       0       0       0       0
  1846 ;;      Locals:         0      11       0       0       0       0       0       0       0
  1847 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1848 ;;      Totals:         0      17       0       0       0       0       0       0       0
  1849 ;;Total ram usage:       17 bytes
  1850 ;; Hardware stack levels used:    1
  1851 ;; Hardware stack levels required when called:    4
  1852 ;; This function calls:
  1853 ;;		___ftge
  1854 ;;		___ftmul
  1855 ;;		___ftneg
  1856 ;;		___fttol
  1857 ;;		___lltoft
  1858 ;;		_exp
  1859 ;;		_log
  1860 ;; This function is called by:
  1861 ;;		_config_ccp1
  1862 ;;		_config_ccp2
  1863 ;; This function uses a non-reentrant model
  1864 ;;
  1865                           
  1866                           	psect	text4
  1867  001178                     __ptext4:
  1868                           	opt stack 0
  1869  001178                     _pow:
  1870                           	opt stack 25
  1871                           
  1872                           ; BSR set to: 0
  1873                           ;incstack = 0
  1874  001178  0E00               	movlw	0
  1875  00117A  0100               	movlb	0	; () banked
  1876  00117C  6F72               	movwf	pow@sign& (0+255),b
  1877                           
  1878                           ; BSR set to: 0
  1879  00117E  5166               	movf	pow@x& (0+255),w,b
  1880  001180  1167               	iorwf	(pow@x+1)& (0+255),w,b
  1881  001182  1168               	iorwf	(pow@x+2)& (0+255),w,b
  1882  001184  A4D8               	btfss	status,2,c
  1883  001186  D01D               	goto	l593
  1884                           
  1885                           ; BSR set to: 0
  1886  001188  0E00               	movlw	0
  1887  00118A  6E01               	movwf	___ftge@ff1,c
  1888  00118C  0E00               	movlw	0
  1889  00118E  6E02               	movwf	___ftge@ff1+1,c
  1890  001190  0E00               	movlw	0
  1891  001192  6E03               	movwf	___ftge@ff1+2,c
  1892  001194  C069  F004         	movff	pow@y,___ftge@ff2
  1893  001198  C06A  F005         	movff	pow@y+1,___ftge@ff2+1
  1894  00119C  C06B  F006         	movff	pow@y+2,___ftge@ff2+2
  1895  0011A0  ECA6  F00D         	call	___ftge	;wreg free
  1896  0011A4  A0D8               	btfss	status,0,c
  1897  0011A6  D005               	goto	l594
  1898  0011A8  0E00               	movlw	0
  1899  0011AA  0100               	movlb	0	; () banked
  1900  0011AC  6FEE               	movwf	(_errno+1)& (0+255),b
  1901  0011AE  0E21               	movlw	33
  1902  0011B0  6FED               	movwf	_errno& (0+255),b
  1903  0011B2                     l594:
  1904  0011B2  0E00               	movlw	0
  1905  0011B4  0100               	movlb	0	; () banked
  1906  0011B6  6F66               	movwf	?_pow& (0+255),b
  1907  0011B8  0E00               	movlw	0
  1908  0011BA  6F67               	movwf	(?_pow+1)& (0+255),b
  1909  0011BC  0E00               	movlw	0
  1910  0011BE  6F68               	movwf	(?_pow+2)& (0+255),b
  1911                           
  1912                           ; BSR set to: 0
  1913  0011C0  0012               	return	
  1914  0011C2                     l593:
  1915                           
  1916                           ; BSR set to: 0
  1917                           
  1918                           ; BSR set to: 0
  1919  0011C2  5169               	movf	pow@y& (0+255),w,b
  1920  0011C4  116A               	iorwf	(pow@y+1)& (0+255),w,b
  1921  0011C6  116B               	iorwf	(pow@y+2)& (0+255),w,b
  1922  0011C8  A4D8               	btfss	status,2,c
  1923  0011CA  D007               	goto	l596
  1924                           
  1925                           ; BSR set to: 0
  1926  0011CC  0E00               	movlw	0
  1927  0011CE  6F66               	movwf	?_pow& (0+255),b
  1928  0011D0  0E80               	movlw	128
  1929  0011D2  6F67               	movwf	(?_pow+1)& (0+255),b
  1930  0011D4  0E3F               	movlw	63
  1931  0011D6  6F68               	movwf	(?_pow+2)& (0+255),b
  1932                           
  1933                           ; BSR set to: 0
  1934  0011D8  0012               	return	
  1935  0011DA                     l596:
  1936                           
  1937                           ; BSR set to: 0
  1938                           
  1939                           ; BSR set to: 0
  1940  0011DA  AF68               	btfss	(pow@x+2)& (0+255),7,b
  1941  0011DC  D041               	goto	l597
  1942                           
  1943                           ; BSR set to: 0
  1944  0011DE  C069  F037         	movff	pow@y,___fttol@f1
  1945  0011E2  C06A  F038         	movff	pow@y+1,___fttol@f1+1
  1946  0011E6  C06B  F039         	movff	pow@y+2,___fttol@f1+2
  1947  0011EA  EC09  F00A         	call	___fttol	;wreg free
  1948  0011EE  C037  F073         	movff	?___fttol,pow@yi
  1949  0011F2  C038  F074         	movff	?___fttol+1,pow@yi+1
  1950  0011F6  C039  F075         	movff	?___fttol+2,pow@yi+2
  1951  0011FA  C03A  F076         	movff	?___fttol+3,pow@yi+3
  1952  0011FE  C073  F009         	movff	pow@yi,___lltoft@c
  1953  001202  C074  F00A         	movff	pow@yi+1,___lltoft@c+1
  1954  001206  C075  F00B         	movff	pow@yi+2,___lltoft@c+2
  1955  00120A  C076  F00C         	movff	pow@yi+3,___lltoft@c+3
  1956  00120E  EC09  F00F         	call	___lltoft	;wreg free
  1957  001212  0100               	movlb	0	; () banked
  1958  001214  5169               	movf	pow@y& (0+255),w,b
  1959  001216  1809               	xorwf	?___lltoft,w,c
  1960  001218  E107               	bnz	u1960
  1961  00121A  516A               	movf	(pow@y+1)& (0+255),w,b
  1962  00121C  180A               	xorwf	?___lltoft+1,w,c
  1963  00121E  E104               	bnz	u1960
  1964  001220  516B               	movf	(pow@y+2)& (0+255),w,b
  1965  001222  180B               	xorwf	?___lltoft+2,w,c
  1966  001224  B4D8               	btfsc	status,2,c
  1967  001226  D00B               	goto	l598
  1968  001228                     u1960:
  1969                           
  1970                           ; BSR set to: 0
  1971  001228  0E00               	movlw	0
  1972  00122A  6FEE               	movwf	(_errno+1)& (0+255),b
  1973  00122C  0E21               	movlw	33
  1974  00122E  6FED               	movwf	_errno& (0+255),b
  1975  001230  0E00               	movlw	0
  1976  001232  6F66               	movwf	?_pow& (0+255),b
  1977  001234  0E00               	movlw	0
  1978  001236  6F67               	movwf	(?_pow+1)& (0+255),b
  1979  001238  0E00               	movlw	0
  1980  00123A  6F68               	movwf	(?_pow+2)& (0+255),b
  1981                           
  1982                           ; BSR set to: 0
  1983  00123C  0012               	return	
  1984  00123E                     l598:
  1985                           
  1986                           ; BSR set to: 0
  1987                           
  1988                           ; BSR set to: 0
  1989  00123E  5173               	movf	pow@yi& (0+255),w,b
  1990  001240  0B01               	andlw	1
  1991  001242  6F72               	movwf	pow@sign& (0+255),b
  1992                           
  1993                           ; BSR set to: 0
  1994  001244  C066  F001         	movff	pow@x,___ftneg@f1
  1995  001248  C067  F002         	movff	pow@x+1,___ftneg@f1+1
  1996  00124C  C068  F003         	movff	pow@x+2,___ftneg@f1+2
  1997  001250  EC86  F00F         	call	___ftneg	;wreg free
  1998  001254  C001  F066         	movff	?___ftneg,pow@x
  1999  001258  C002  F067         	movff	?___ftneg+1,pow@x+1
  2000  00125C  C003  F068         	movff	?___ftneg+2,pow@x+2
  2001  001260                     l597:
  2002  001260  C066  F034         	movff	pow@x,log@x
  2003  001264  C067  F035         	movff	pow@x+1,log@x+1
  2004  001268  C068  F036         	movff	pow@x+2,log@x+2
  2005  00126C  EC7A  F009         	call	_log	;wreg free
  2006  001270  C034  F06C         	movff	?_log,_pow$1486
  2007  001274  C035  F06D         	movff	?_log+1,_pow$1486+1
  2008  001278  C036  F06E         	movff	?_log+2,_pow$1486+2
  2009  00127C  C06C  F019         	movff	_pow$1486,___ftmul@f1
  2010  001280  C06D  F01A         	movff	_pow$1486+1,___ftmul@f1+1
  2011  001284  C06E  F01B         	movff	_pow$1486+2,___ftmul@f1+2
  2012  001288  C069  F01C         	movff	pow@y,___ftmul@f2
  2013  00128C  C06A  F01D         	movff	pow@y+1,___ftmul@f2+1
  2014  001290  C06B  F01E         	movff	pow@y+2,___ftmul@f2+2
  2015  001294  EC83  F00A         	call	___ftmul	;wreg free
  2016  001298  C019  F06F         	movff	?___ftmul,_pow$1487
  2017  00129C  C01A  F070         	movff	?___ftmul+1,_pow$1487+1
  2018  0012A0  C01B  F071         	movff	?___ftmul+2,_pow$1487+2
  2019  0012A4  C06F  F058         	movff	_pow$1487,exp@x
  2020  0012A8  C070  F059         	movff	_pow$1487+1,exp@x+1
  2021  0012AC  C071  F05A         	movff	_pow$1487+2,exp@x+2
  2022  0012B0  ECF0  F006         	call	_exp	;wreg free
  2023  0012B4  C058  F066         	movff	?_exp,pow@x
  2024  0012B8  C059  F067         	movff	?_exp+1,pow@x+1
  2025  0012BC  C05A  F068         	movff	?_exp+2,pow@x+2
  2026  0012C0  0100               	movlb	0	; () banked
  2027  0012C2  5172               	movf	pow@sign& (0+255),w,b
  2028  0012C4  B4D8               	btfsc	status,2,c
  2029  0012C6  D00F               	goto	l599
  2030                           
  2031                           ; BSR set to: 0
  2032  0012C8  C066  F001         	movff	pow@x,___ftneg@f1
  2033  0012CC  C067  F002         	movff	pow@x+1,___ftneg@f1+1
  2034  0012D0  C068  F003         	movff	pow@x+2,___ftneg@f1+2
  2035  0012D4  EC86  F00F         	call	___ftneg	;wreg free
  2036  0012D8  C001  F066         	movff	?___ftneg,?_pow
  2037  0012DC  C002  F067         	movff	?___ftneg+1,?_pow+1
  2038  0012E0  C003  F068         	movff	?___ftneg+2,?_pow+2
  2039  0012E4  0012               	return	
  2040  0012E6                     l599:
  2041                           
  2042                           ; BSR set to: 0
  2043  0012E6  C066  F066         	movff	pow@x,?_pow
  2044  0012EA  C067  F067         	movff	pow@x+1,?_pow+1
  2045  0012EE  C068  F068         	movff	pow@x+2,?_pow+2
  2046  0012F2  0012               	return		;funcret
  2047  0012F4                     __end_of_pow:
  2048                           	opt stack 0
  2049                           tblptru	equ	0xFF8
  2050                           postinc0	equ	0xFEE
  2051                           wreg	equ	0xFE8
  2052                           plusw1	equ	0xFE3
  2053                           postinc2	equ	0xFDE
  2054                           postdec2	equ	0xFDD
  2055                           plusw2	equ	0xFDB
  2056                           fsr2h	equ	0xFDA
  2057                           fsr2l	equ	0xFD9
  2058                           status	equ	0xFD8
  2059                           
  2060 ;; *************** function _log *****************
  2061 ;; Defined at:
  2062 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
  2063 ;; Parameters:    Size  Location     Type
  2064 ;;  x               3   51[COMRAM] unsigned char 
  2065 ;; Auto vars:     Size  Location     Type
  2066 ;;  exponent        2   54[COMRAM] int 
  2067 ;; Return value:  Size  Location     Type
  2068 ;;                  3   51[COMRAM] int 
  2069 ;; Registers used:
  2070 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2071 ;; Tracked objects:
  2072 ;;		On entry : 0/0
  2073 ;;		On exit  : 0/0
  2074 ;;		Unchanged: 0/0
  2075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2076 ;;      Params:         3       0       0       0       0       0       0       0       0
  2077 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2078 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2079 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2080 ;;Total ram usage:        5 bytes
  2081 ;; Hardware stack levels used:    1
  2082 ;; Hardware stack levels required when called:    3
  2083 ;; This function calls:
  2084 ;;		___awtoft
  2085 ;;		___ftadd
  2086 ;;		___ftmul
  2087 ;;		_eval_poly
  2088 ;;		_frexp
  2089 ;; This function is called by:
  2090 ;;		_pow
  2091 ;; This function uses a non-reentrant model
  2092 ;;
  2093                           
  2094                           	psect	text5
  2095  0012F4                     __ptext5:
  2096                           	opt stack 0
  2097  0012F4                     _log:
  2098                           	opt stack 25
  2099                           
  2100                           ;incstack = 0
  2101  0012F4  AE36               	btfss	log@x+2,7,c
  2102  0012F6  D00C               	goto	l795
  2103  0012F8  0E00               	movlw	0
  2104  0012FA  0100               	movlb	0	; () banked
  2105  0012FC  6FEE               	movwf	(_errno+1)& (0+255),b
  2106  0012FE  0E21               	movlw	33
  2107  001300  6FED               	movwf	_errno& (0+255),b
  2108  001302  0E00               	movlw	0
  2109  001304  6E34               	movwf	?_log,c
  2110  001306  0E00               	movlw	0
  2111  001308  6E35               	movwf	?_log+1,c
  2112  00130A  0E00               	movlw	0
  2113  00130C  6E36               	movwf	?_log+2,c
  2114                           
  2115                           ; BSR set to: 0
  2116  00130E  0012               	return	
  2117  001310                     l795:
  2118                           
  2119                           ; BSR set to: 0
  2120  001310  5034               	movf	log@x,w,c
  2121  001312  1035               	iorwf	log@x+1,w,c
  2122  001314  1036               	iorwf	log@x+2,w,c
  2123  001316  A4D8               	btfss	status,2,c
  2124  001318  D00C               	goto	l797
  2125  00131A  0E00               	movlw	0
  2126  00131C  0100               	movlb	0	; () banked
  2127  00131E  6FEE               	movwf	(_errno+1)& (0+255),b
  2128  001320  0E22               	movlw	34
  2129  001322  6FED               	movwf	_errno& (0+255),b
  2130  001324  0E00               	movlw	0
  2131  001326  6E34               	movwf	?_log,c
  2132  001328  0E00               	movlw	0
  2133  00132A  6E35               	movwf	?_log+1,c
  2134  00132C  0E00               	movlw	0
  2135  00132E  6E36               	movwf	?_log+2,c
  2136                           
  2137                           ; BSR set to: 0
  2138  001330  0012               	return	
  2139  001332                     l797:
  2140                           
  2141                           ; BSR set to: 0
  2142  001332  0E00               	movlw	0
  2143  001334  6E1C               	movwf	___ftmul@f2,c
  2144  001336  0E00               	movlw	0
  2145  001338  6E1D               	movwf	___ftmul@f2+1,c
  2146  00133A  0E40               	movlw	64
  2147  00133C  6E1E               	movwf	___ftmul@f2+2,c
  2148  00133E  0E37               	movlw	low log@exponent
  2149  001340  6E04               	movwf	frexp@eptr,c
  2150  001342  0E00               	movlw	high log@exponent
  2151  001344  6E05               	movwf	frexp@eptr+1,c
  2152  001346  C034  F001         	movff	log@x,frexp@value
  2153  00134A  C035  F002         	movff	log@x+1,frexp@value+1
  2154  00134E  C036  F003         	movff	log@x+2,frexp@value+2
  2155  001352  EC5E  F00D         	call	_frexp	;wreg free
  2156  001356  C001  F019         	movff	?_frexp,___ftmul@f1
  2157  00135A  C002  F01A         	movff	?_frexp+1,___ftmul@f1+1
  2158  00135E  C003  F01B         	movff	?_frexp+2,___ftmul@f1+2
  2159  001362  EC83  F00A         	call	___ftmul	;wreg free
  2160  001366  C019  F00D         	movff	?___ftmul,___ftadd@f1
  2161  00136A  C01A  F00E         	movff	?___ftmul+1,___ftadd@f1+1
  2162  00136E  C01B  F00F         	movff	?___ftmul+2,___ftadd@f1+2
  2163  001372  0E00               	movlw	0
  2164  001374  6E10               	movwf	___ftadd@f2,c
  2165  001376  0E80               	movlw	128
  2166  001378  6E11               	movwf	___ftadd@f2+1,c
  2167  00137A  0EBF               	movlw	191
  2168  00137C  6E12               	movwf	___ftadd@f2+2,c
  2169  00137E  ECE6  F007         	call	___ftadd	;wreg free
  2170  001382  C00D  F034         	movff	?___ftadd,log@x
  2171  001386  C00E  F035         	movff	?___ftadd+1,log@x+1
  2172  00138A  C00F  F036         	movff	?___ftadd+2,log@x+2
  2173  00138E  0637               	decf	log@exponent,f,c
  2174  001390  A0D8               	btfss	status,0,c
  2175  001392  0638               	decf	log@exponent+1,f,c
  2176  001394  C034  F028         	movff	log@x,eval_poly@x
  2177  001398  C035  F029         	movff	log@x+1,eval_poly@x+1
  2178  00139C  C036  F02A         	movff	log@x+2,eval_poly@x+2
  2179  0013A0  0E1F               	movlw	low log@coeff
  2180  0013A2  6E2B               	movwf	eval_poly@d,c
  2181  0013A4  0E08               	movlw	high log@coeff
  2182  0013A6  6E2C               	movwf	eval_poly@d+1,c
  2183  0013A8  0E00               	movlw	0
  2184  0013AA  6E2E               	movwf	eval_poly@n+1,c
  2185  0013AC  0E08               	movlw	8
  2186  0013AE  6E2D               	movwf	eval_poly@n,c
  2187  0013B0  ECDF  F00B         	call	_eval_poly	;wreg free
  2188  0013B4  C028  F034         	movff	?_eval_poly,log@x
  2189  0013B8  C029  F035         	movff	?_eval_poly+1,log@x+1
  2190  0013BC  C02A  F036         	movff	?_eval_poly+2,log@x+2
  2191  0013C0  0E72               	movlw	114
  2192  0013C2  6E1C               	movwf	___ftmul@f2,c
  2193  0013C4  0E31               	movlw	49
  2194  0013C6  6E1D               	movwf	___ftmul@f2+1,c
  2195  0013C8  0E3F               	movlw	63
  2196  0013CA  6E1E               	movwf	___ftmul@f2+2,c
  2197  0013CC  C037  F009         	movff	log@exponent,___awtoft@c
  2198  0013D0  C038  F00A         	movff	log@exponent+1,___awtoft@c+1
  2199  0013D4  EC57  F00F         	call	___awtoft	;wreg free
  2200  0013D8  C009  F019         	movff	?___awtoft,___ftmul@f1
  2201  0013DC  C00A  F01A         	movff	?___awtoft+1,___ftmul@f1+1
  2202  0013E0  C00B  F01B         	movff	?___awtoft+2,___ftmul@f1+2
  2203  0013E4  EC83  F00A         	call	___ftmul	;wreg free
  2204  0013E8  C019  F00D         	movff	?___ftmul,___ftadd@f1
  2205  0013EC  C01A  F00E         	movff	?___ftmul+1,___ftadd@f1+1
  2206  0013F0  C01B  F00F         	movff	?___ftmul+2,___ftadd@f1+2
  2207  0013F4  C034  F010         	movff	log@x,___ftadd@f2
  2208  0013F8  C035  F011         	movff	log@x+1,___ftadd@f2+1
  2209  0013FC  C036  F012         	movff	log@x+2,___ftadd@f2+2
  2210  001400  ECE6  F007         	call	___ftadd	;wreg free
  2211  001404  C00D  F034         	movff	?___ftadd,?_log
  2212  001408  C00E  F035         	movff	?___ftadd+1,?_log+1
  2213  00140C  C00F  F036         	movff	?___ftadd+2,?_log+2
  2214  001410  0012               	return	
  2215  001412                     __end_of_log:
  2216                           	opt stack 0
  2217                           tblptru	equ	0xFF8
  2218                           postinc0	equ	0xFEE
  2219                           wreg	equ	0xFE8
  2220                           plusw1	equ	0xFE3
  2221                           postinc2	equ	0xFDE
  2222                           postdec2	equ	0xFDD
  2223                           plusw2	equ	0xFDB
  2224                           fsr2h	equ	0xFDA
  2225                           fsr2l	equ	0xFD9
  2226                           status	equ	0xFD8
  2227                           
  2228 ;; *************** function _exp *****************
  2229 ;; Defined at:
  2230 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\exp.c"
  2231 ;; Parameters:    Size  Location     Type
  2232 ;;  x               3   87[COMRAM] int 
  2233 ;; Auto vars:     Size  Location     Type
  2234 ;;  exponent        2    3[BANK0 ] int 
  2235 ;;  sign            1    5[BANK0 ] unsigned char 
  2236 ;; Return value:  Size  Location     Type
  2237 ;;                  3   87[COMRAM] unsigned char 
  2238 ;; Registers used:
  2239 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2240 ;; Tracked objects:
  2241 ;;		On entry : 0/0
  2242 ;;		On exit  : 0/0
  2243 ;;		Unchanged: 0/0
  2244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2245 ;;      Params:         3       0       0       0       0       0       0       0       0
  2246 ;;      Locals:         0       6       0       0       0       0       0       0       0
  2247 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2248 ;;      Totals:         3       6       0       0       0       0       0       0       0
  2249 ;;Total ram usage:        9 bytes
  2250 ;; Hardware stack levels used:    1
  2251 ;; Hardware stack levels required when called:    3
  2252 ;; This function calls:
  2253 ;;		___awtoft
  2254 ;;		___ftdiv
  2255 ;;		___ftge
  2256 ;;		___ftmul
  2257 ;;		___ftneg
  2258 ;;		___ftsub
  2259 ;;		___fttol
  2260 ;;		_eval_poly
  2261 ;;		_floor
  2262 ;;		_ldexp
  2263 ;; This function is called by:
  2264 ;;		_pow
  2265 ;; This function uses a non-reentrant model
  2266 ;;
  2267                           
  2268                           	psect	text6
  2269  000DE0                     __ptext6:
  2270                           	opt stack 0
  2271  000DE0                     _exp:
  2272                           	opt stack 25
  2273                           
  2274                           ;incstack = 0
  2275  000DE0  5058               	movf	exp@x,w,c
  2276  000DE2  1059               	iorwf	exp@x+1,w,c
  2277  000DE4  105A               	iorwf	exp@x+2,w,c
  2278  000DE6  A4D8               	btfss	status,2,c
  2279  000DE8  D007               	goto	l753
  2280  000DEA  0E00               	movlw	0
  2281  000DEC  6E58               	movwf	?_exp,c
  2282  000DEE  0E80               	movlw	128
  2283  000DF0  6E59               	movwf	?_exp+1,c
  2284  000DF2  0E3F               	movlw	63
  2285  000DF4  6E5A               	movwf	?_exp+2,c
  2286  000DF6  0012               	return	
  2287  000DF8                     l753:
  2288  000DF8  0E72               	movlw	114
  2289  000DFA  6E01               	movwf	___ftge@ff1,c
  2290  000DFC  0E31               	movlw	49
  2291  000DFE  6E02               	movwf	___ftge@ff1+1,c
  2292  000E00  0E44               	movlw	68
  2293  000E02  6E03               	movwf	___ftge@ff1+2,c
  2294  000E04  C058  F004         	movff	exp@x,___ftge@ff2
  2295  000E08  C059  F005         	movff	exp@x+1,___ftge@ff2+1
  2296  000E0C  C05A  F006         	movff	exp@x+2,___ftge@ff2+2
  2297  000E10  ECA6  F00D         	call	___ftge	;wreg free
  2298  000E14  B0D8               	btfsc	status,0,c
  2299  000E16  D00C               	goto	l755
  2300  000E18  0E00               	movlw	0
  2301  000E1A  0100               	movlb	0	; () banked
  2302  000E1C  6FEE               	movwf	(_errno+1)& (0+255),b
  2303  000E1E  0E22               	movlw	34
  2304  000E20  6FED               	movwf	_errno& (0+255),b
  2305  000E22  0EFF               	movlw	255
  2306  000E24  6E58               	movwf	?_exp,c
  2307  000E26  0E7F               	movlw	127
  2308  000E28  6E59               	movwf	?_exp+1,c
  2309  000E2A  0E7F               	movlw	127
  2310  000E2C  6E5A               	movwf	?_exp+2,c
  2311                           
  2312                           ; BSR set to: 0
  2313  000E2E  0012               	return	
  2314  000E30                     l755:
  2315                           
  2316                           ; BSR set to: 0
  2317  000E30  C058  F001         	movff	exp@x,___ftge@ff1
  2318  000E34  C059  F002         	movff	exp@x+1,___ftge@ff1+1
  2319  000E38  C05A  F003         	movff	exp@x+2,___ftge@ff1+2
  2320  000E3C  0E49               	movlw	73
  2321  000E3E  6E04               	movwf	___ftge@ff2,c
  2322  000E40  0E3A               	movlw	58
  2323  000E42  6E05               	movwf	___ftge@ff2+1,c
  2324  000E44  0EC4               	movlw	196
  2325  000E46  6E06               	movwf	___ftge@ff2+2,c
  2326  000E48  ECA6  F00D         	call	___ftge	;wreg free
  2327  000E4C  B0D8               	btfsc	status,0,c
  2328  000E4E  D00C               	goto	l756
  2329  000E50  0E00               	movlw	0
  2330  000E52  0100               	movlb	0	; () banked
  2331  000E54  6FEE               	movwf	(_errno+1)& (0+255),b
  2332  000E56  0E22               	movlw	34
  2333  000E58  6FED               	movwf	_errno& (0+255),b
  2334  000E5A  0E00               	movlw	0
  2335  000E5C  6E58               	movwf	?_exp,c
  2336  000E5E  0E00               	movlw	0
  2337  000E60  6E59               	movwf	?_exp+1,c
  2338  000E62  0E00               	movlw	0
  2339  000E64  6E5A               	movwf	?_exp+2,c
  2340                           
  2341                           ; BSR set to: 0
  2342  000E66  0012               	return	
  2343  000E68                     l756:
  2344                           
  2345                           ; BSR set to: 0
  2346  000E68  AE5A               	btfss	exp@x+2,7,c
  2347  000E6A  D002               	goto	u1870
  2348  000E6C  0E01               	movlw	1
  2349  000E6E  D001               	goto	u1880
  2350  000E70                     u1870:
  2351  000E70  0E00               	movlw	0
  2352  000E72                     u1880:
  2353  000E72  0100               	movlb	0	; () banked
  2354  000E74  6F65               	movwf	exp@sign& (0+255),b
  2355                           
  2356                           ; BSR set to: 0
  2357  000E76  5165               	movf	exp@sign& (0+255),w,b
  2358  000E78  B4D8               	btfsc	status,2,c
  2359  000E7A  D00E               	goto	l757
  2360                           
  2361                           ; BSR set to: 0
  2362  000E7C  C058  F001         	movff	exp@x,___ftneg@f1
  2363  000E80  C059  F002         	movff	exp@x+1,___ftneg@f1+1
  2364  000E84  C05A  F003         	movff	exp@x+2,___ftneg@f1+2
  2365  000E88  EC86  F00F         	call	___ftneg	;wreg free
  2366  000E8C  C001  F058         	movff	?___ftneg,exp@x
  2367  000E90  C002  F059         	movff	?___ftneg+1,exp@x+1
  2368  000E94  C003  F05A         	movff	?___ftneg+2,exp@x+2
  2369  000E98                     l757:
  2370  000E98  C058  F019         	movff	exp@x,___ftmul@f1
  2371  000E9C  C059  F01A         	movff	exp@x+1,___ftmul@f1+1
  2372  000EA0  C05A  F01B         	movff	exp@x+2,___ftmul@f1+2
  2373  000EA4  0EAA               	movlw	170
  2374  000EA6  6E1C               	movwf	___ftmul@f2,c
  2375  000EA8  0EB8               	movlw	184
  2376  000EAA  6E1D               	movwf	___ftmul@f2+1,c
  2377  000EAC  0E3F               	movlw	63
  2378  000EAE  6E1E               	movwf	___ftmul@f2+2,c
  2379  000EB0  EC83  F00A         	call	___ftmul	;wreg free
  2380  000EB4  C019  F058         	movff	?___ftmul,exp@x
  2381  000EB8  C01A  F059         	movff	?___ftmul+1,exp@x+1
  2382  000EBC  C01B  F05A         	movff	?___ftmul+2,exp@x+2
  2383  000EC0  C058  F050         	movff	exp@x,floor@x
  2384  000EC4  C059  F051         	movff	exp@x+1,floor@x+1
  2385  000EC8  C05A  F052         	movff	exp@x+2,floor@x+2
  2386  000ECC  EC70  F00B         	call	_floor	;wreg free
  2387  000ED0  C050  F060         	movff	?_floor,_exp$1488
  2388  000ED4  C051  F061         	movff	?_floor+1,_exp$1488+1
  2389  000ED8  C052  F062         	movff	?_floor+2,_exp$1488+2
  2390  000EDC  C060  F037         	movff	_exp$1488,___fttol@f1
  2391  000EE0  C061  F038         	movff	_exp$1488+1,___fttol@f1+1
  2392  000EE4  C062  F039         	movff	_exp$1488+2,___fttol@f1+2
  2393  000EE8  EC09  F00A         	call	___fttol	;wreg free
  2394  000EEC  C037  F063         	movff	?___fttol,exp@exponent
  2395  000EF0  C038  F064         	movff	?___fttol+1,exp@exponent+1
  2396  000EF4  C058  F019         	movff	exp@x,___ftsub@f1
  2397  000EF8  C059  F01A         	movff	exp@x+1,___ftsub@f1+1
  2398  000EFC  C05A  F01B         	movff	exp@x+2,___ftsub@f1+2
  2399  000F00  C063  F009         	movff	exp@exponent,___awtoft@c
  2400  000F04  C064  F00A         	movff	exp@exponent+1,___awtoft@c+1
  2401  000F08  EC57  F00F         	call	___awtoft	;wreg free
  2402  000F0C  C009  F01C         	movff	?___awtoft,___ftsub@f2
  2403  000F10  C00A  F01D         	movff	?___awtoft+1,___ftsub@f2+1
  2404  000F14  C00B  F01E         	movff	?___awtoft+2,___ftsub@f2+2
  2405  000F18  EC37  F00F         	call	___ftsub	;wreg free
  2406  000F1C  C019  F058         	movff	?___ftsub,exp@x
  2407  000F20  C01A  F059         	movff	?___ftsub+1,exp@x+1
  2408  000F24  C01B  F05A         	movff	?___ftsub+2,exp@x+2
  2409  000F28  C058  F028         	movff	exp@x,eval_poly@x
  2410  000F2C  C059  F029         	movff	exp@x+1,eval_poly@x+1
  2411  000F30  C05A  F02A         	movff	exp@x+2,eval_poly@x+2
  2412  000F34  0E01               	movlw	low exp@coeff
  2413  000F36  6E2B               	movwf	eval_poly@d,c
  2414  000F38  0E08               	movlw	high exp@coeff
  2415  000F3A  6E2C               	movwf	eval_poly@d+1,c
  2416  000F3C  0E00               	movlw	0
  2417  000F3E  6E2E               	movwf	eval_poly@n+1,c
  2418  000F40  0E09               	movlw	9
  2419  000F42  6E2D               	movwf	eval_poly@n,c
  2420  000F44  ECDF  F00B         	call	_eval_poly	;wreg free
  2421  000F48  C028  F034         	movff	?_eval_poly,ldexp@value
  2422  000F4C  C029  F035         	movff	?_eval_poly+1,ldexp@value+1
  2423  000F50  C02A  F036         	movff	?_eval_poly+2,ldexp@value+2
  2424  000F54  C063  F037         	movff	exp@exponent,ldexp@newexp
  2425  000F58  C064  F038         	movff	exp@exponent+1,ldexp@newexp+1
  2426  000F5C  EC48  F00C         	call	_ldexp	;wreg free
  2427  000F60  C034  F058         	movff	?_ldexp,exp@x
  2428  000F64  C035  F059         	movff	?_ldexp+1,exp@x+1
  2429  000F68  C036  F05A         	movff	?_ldexp+2,exp@x+2
  2430  000F6C  0100               	movlb	0	; () banked
  2431  000F6E  5165               	movf	exp@sign& (0+255),w,b
  2432  000F70  B4D8               	btfsc	status,2,c
  2433  000F72  D025               	goto	l758
  2434                           
  2435                           ; BSR set to: 0
  2436  000F74  2858               	incf	exp@x,w,c
  2437  000F76  E10E               	bnz	l2202
  2438  000F78  0E7F               	movlw	127
  2439  000F7A  1859               	xorwf	exp@x+1,w,c
  2440  000F7C  E10B               	bnz	l2202
  2441  000F7E  0E7F               	movlw	127
  2442  000F80  185A               	xorwf	exp@x+2,w,c
  2443  000F82  A4D8               	btfss	status,2,c
  2444  000F84  D007               	goto	l759
  2445                           
  2446                           ; BSR set to: 0
  2447  000F86  0E00               	movlw	0
  2448  000F88  6E58               	movwf	?_exp,c
  2449  000F8A  0E00               	movlw	0
  2450  000F8C  6E59               	movwf	?_exp+1,c
  2451  000F8E  0E00               	movlw	0
  2452  000F90  6E5A               	movwf	?_exp+2,c
  2453                           
  2454                           ; BSR set to: 0
  2455  000F92  0012               	return	
  2456  000F94                     l759:
  2457  000F94                     l2202:
  2458                           
  2459                           ; BSR set to: 0
  2460  000F94  0E00               	movlw	0
  2461  000F96  6E28               	movwf	___ftdiv@f1,c
  2462  000F98  0E80               	movlw	128
  2463  000F9A  6E29               	movwf	___ftdiv@f1+1,c
  2464  000F9C  0E3F               	movlw	63
  2465  000F9E  6E2A               	movwf	___ftdiv@f1+2,c
  2466  000FA0  C058  F02B         	movff	exp@x,___ftdiv@f2
  2467  000FA4  C059  F02C         	movff	exp@x+1,___ftdiv@f2+1
  2468  000FA8  C05A  F02D         	movff	exp@x+2,___ftdiv@f2+2
  2469  000FAC  ECFD  F00A         	call	___ftdiv	;wreg free
  2470  000FB0  C028  F058         	movff	?___ftdiv,?_exp
  2471  000FB4  C029  F059         	movff	?___ftdiv+1,?_exp+1
  2472  000FB8  C02A  F05A         	movff	?___ftdiv+2,?_exp+2
  2473  000FBC  0012               	return	
  2474  000FBE                     l758:
  2475                           
  2476                           ; BSR set to: 0
  2477  000FBE  C058  F058         	movff	exp@x,?_exp
  2478  000FC2  C059  F059         	movff	exp@x+1,?_exp+1
  2479  000FC6  C05A  F05A         	movff	exp@x+2,?_exp+2
  2480  000FCA  0012               	return		;funcret
  2481  000FCC                     __end_of_exp:
  2482                           	opt stack 0
  2483                           tblptru	equ	0xFF8
  2484                           postinc0	equ	0xFEE
  2485                           wreg	equ	0xFE8
  2486                           plusw1	equ	0xFE3
  2487                           postinc2	equ	0xFDE
  2488                           postdec2	equ	0xFDD
  2489                           plusw2	equ	0xFDB
  2490                           fsr2h	equ	0xFDA
  2491                           fsr2l	equ	0xFD9
  2492                           status	equ	0xFD8
  2493                           
  2494 ;; *************** function _ldexp *****************
  2495 ;; Defined at:
  2496 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
  2497 ;; Parameters:    Size  Location     Type
  2498 ;;  value           3   51[COMRAM] unsigned char 
  2499 ;;  newexp          2   54[COMRAM] int 
  2500 ;; Auto vars:     Size  Location     Type
  2501 ;;		None
  2502 ;; Return value:  Size  Location     Type
  2503 ;;                  3   51[COMRAM] int 
  2504 ;; Registers used:
  2505 ;;		wreg, status,2, status,0
  2506 ;; Tracked objects:
  2507 ;;		On entry : 0/0
  2508 ;;		On exit  : 0/0
  2509 ;;		Unchanged: 0/0
  2510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2511 ;;      Params:         5       0       0       0       0       0       0       0       0
  2512 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2513 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2514 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2515 ;;Total ram usage:        7 bytes
  2516 ;; Hardware stack levels used:    1
  2517 ;; This function calls:
  2518 ;;		Nothing
  2519 ;; This function is called by:
  2520 ;;		_exp
  2521 ;; This function uses a non-reentrant model
  2522 ;;
  2523                           
  2524                           	psect	text7
  2525  001890                     __ptext7:
  2526                           	opt stack 0
  2527  001890                     _ldexp:
  2528                           	opt stack 27
  2529                           
  2530                           ;incstack = 0
  2531  001890  5034               	movf	ldexp@value,w,c
  2532  001892  1035               	iorwf	ldexp@value+1,w,c
  2533  001894  1036               	iorwf	ldexp@value+2,w,c
  2534  001896  A4D8               	btfss	status,2,c
  2535  001898  D007               	goto	l777
  2536  00189A  0E00               	movlw	0
  2537  00189C  6E34               	movwf	?_ldexp,c
  2538  00189E  0E00               	movlw	0
  2539  0018A0  6E35               	movwf	?_ldexp+1,c
  2540  0018A2  0E00               	movlw	0
  2541  0018A4  6E36               	movwf	?_ldexp+2,c
  2542  0018A6  0012               	return	
  2543  0018A8                     l777:
  2544  0018A8  5036               	movf	ldexp@value+2,w,c
  2545  0018AA  0B7F               	andlw	127
  2546  0018AC  6E39               	movwf	??_ldexp& (0+255),c
  2547  0018AE  6A3A               	clrf	(??_ldexp+1)& (0+255),c
  2548  0018B0  90D8               	bcf	status,0,c
  2549  0018B2  3639               	rlcf	??_ldexp,f,c
  2550  0018B4  363A               	rlcf	??_ldexp+1,f,c
  2551  0018B6  5039               	movf	??_ldexp,w,c
  2552  0018B8  2637               	addwf	ldexp@newexp,f,c
  2553  0018BA  503A               	movf	??_ldexp+1,w,c
  2554  0018BC  2238               	addwfc	ldexp@newexp+1,f,c
  2555  0018BE  AE35               	btfss	ldexp@value+1,7,c
  2556  0018C0  D003               	goto	u1770
  2557  0018C2  6A39               	clrf	??_ldexp& (0+255),c
  2558  0018C4  2A39               	incf	??_ldexp& (0+255),f,c
  2559  0018C6  D001               	goto	u1778
  2560  0018C8                     u1770:
  2561  0018C8  6A39               	clrf	??_ldexp& (0+255),c
  2562  0018CA                     u1778:
  2563  0018CA  5039               	movf	??_ldexp,w,c
  2564  0018CC  2637               	addwf	ldexp@newexp,f,c
  2565  0018CE  0E00               	movlw	0
  2566  0018D0  2238               	addwfc	ldexp@newexp+1,f,c
  2567  0018D2  AE38               	btfss	ldexp@newexp+1,7,c
  2568  0018D4  D00C               	goto	l779
  2569  0018D6  0E00               	movlw	0
  2570  0018D8  0100               	movlb	0	; () banked
  2571  0018DA  6FEE               	movwf	(_errno+1)& (0+255),b
  2572  0018DC  0E22               	movlw	34
  2573  0018DE  6FED               	movwf	_errno& (0+255),b
  2574  0018E0  0E00               	movlw	0
  2575  0018E2  6E34               	movwf	?_ldexp,c
  2576  0018E4  0E00               	movlw	0
  2577  0018E6  6E35               	movwf	?_ldexp+1,c
  2578  0018E8  0E00               	movlw	0
  2579  0018EA                     L1:
  2580  0018EA  6E36               	movwf	?_ldexp+2,c
  2581                           
  2582                           ; BSR set to: 0
  2583  0018EC  0012               	return	
  2584  0018EE                     l779:
  2585                           
  2586                           ; BSR set to: 0
  2587  0018EE  BE38               	btfsc	ldexp@newexp+1,7,c
  2588  0018F0  D016               	goto	l781
  2589  0018F2  0438               	decf	ldexp@newexp+1,w,c
  2590  0018F4  A0D8               	btfss	status,0,c
  2591  0018F6  D013               	goto	l781
  2592  0018F8  0E00               	movlw	0
  2593  0018FA  0100               	movlb	0	; () banked
  2594  0018FC  6FEE               	movwf	(_errno+1)& (0+255),b
  2595  0018FE  0E22               	movlw	34
  2596  001900  6FED               	movwf	_errno& (0+255),b
  2597                           
  2598                           ; BSR set to: 0
  2599  001902  AE36               	btfss	ldexp@value+2,7,c
  2600  001904  D006               	goto	l782
  2601                           
  2602                           ; BSR set to: 0
  2603  001906  0EFF               	movlw	255
  2604  001908  6E34               	movwf	?_ldexp,c
  2605  00190A  0E7F               	movlw	127
  2606  00190C  6E35               	movwf	?_ldexp+1,c
  2607  00190E  0EFF               	movlw	255
  2608  001910  D7EC               	goto	L1
  2609  001912                     l782:
  2610                           
  2611                           ; BSR set to: 0
  2612                           
  2613                           ; BSR set to: 0
  2614  001912  0EFF               	movlw	255
  2615  001914  6E34               	movwf	?_ldexp,c
  2616  001916  0E7F               	movlw	127
  2617  001918  6E35               	movwf	?_ldexp+1,c
  2618  00191A  0E7F               	movlw	127
  2619  00191C  D7E6               	goto	L1
  2620  00191E                     l781:
  2621                           
  2622                           ; BSR set to: 0
  2623  00191E  3438               	rlcf	ldexp@newexp+1,w,c
  2624  001920  3038               	rrcf	ldexp@newexp+1,w,c
  2625  001922  6E3A               	movwf	(??_ldexp+1)& (0+255),c
  2626  001924  3037               	rrcf	ldexp@newexp,w,c
  2627  001926  6E39               	movwf	??_ldexp& (0+255),c
  2628  001928  5036               	movf	ldexp@value+2,w,c
  2629  00192A  1839               	xorwf	??_ldexp,w,c
  2630  00192C  0B80               	andlw	-128
  2631  00192E  1839               	xorwf	??_ldexp,w,c
  2632  001930  6E36               	movwf	ldexp@value+2,c
  2633  001932  C037  F039         	movff	ldexp@newexp,??_ldexp
  2634  001936  0E01               	movlw	1
  2635  001938  1639               	andwf	??_ldexp,f,c
  2636  00193A  3239               	rrcf	??_ldexp,f,c
  2637  00193C  3239               	rrcf	??_ldexp,f,c
  2638  00193E  5035               	movf	ldexp@value+1,w,c
  2639  001940  1839               	xorwf	??_ldexp,w,c
  2640  001942  0B7F               	andlw	-129
  2641  001944  1839               	xorwf	??_ldexp,w,c
  2642  001946  6E35               	movwf	ldexp@value+1,c
  2643  001948  C034  F034         	movff	ldexp@value,?_ldexp
  2644  00194C  C035  F035         	movff	ldexp@value+1,?_ldexp+1
  2645  001950  C036  F036         	movff	ldexp@value+2,?_ldexp+2
  2646  001954  0012               	return	
  2647  001956                     __end_of_ldexp:
  2648                           	opt stack 0
  2649                           tblptru	equ	0xFF8
  2650                           postinc0	equ	0xFEE
  2651                           wreg	equ	0xFE8
  2652                           plusw1	equ	0xFE3
  2653                           postinc2	equ	0xFDE
  2654                           postdec2	equ	0xFDD
  2655                           plusw2	equ	0xFDB
  2656                           fsr2h	equ	0xFDA
  2657                           fsr2l	equ	0xFD9
  2658                           status	equ	0xFD8
  2659                           
  2660 ;; *************** function _floor *****************
  2661 ;; Defined at:
  2662 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\floor.c"
  2663 ;; Parameters:    Size  Location     Type
  2664 ;;  x               3   79[COMRAM] int 
  2665 ;; Auto vars:     Size  Location     Type
  2666 ;;  i               3   82[COMRAM] int 
  2667 ;;  expon           2   85[COMRAM] int 
  2668 ;; Return value:  Size  Location     Type
  2669 ;;                  3   79[COMRAM] int 
  2670 ;; Registers used:
  2671 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2672 ;; Tracked objects:
  2673 ;;		On entry : 0/0
  2674 ;;		On exit  : 0/0
  2675 ;;		Unchanged: 0/0
  2676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2677 ;;      Params:         3       0       0       0       0       0       0       0       0
  2678 ;;      Locals:         5       0       0       0       0       0       0       0       0
  2679 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2680 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2681 ;;Total ram usage:        8 bytes
  2682 ;; Hardware stack levels used:    1
  2683 ;; Hardware stack levels required when called:    2
  2684 ;; This function calls:
  2685 ;;		___altoft
  2686 ;;		___ftadd
  2687 ;;		___ftge
  2688 ;;		___fttol
  2689 ;;		_frexp
  2690 ;; This function is called by:
  2691 ;;		_exp
  2692 ;; This function uses a non-reentrant model
  2693 ;;
  2694                           
  2695                           	psect	text8
  2696  0016E0                     __ptext8:
  2697                           	opt stack 0
  2698  0016E0                     _floor:
  2699                           	opt stack 25
  2700                           
  2701                           ;incstack = 0
  2702  0016E0  C050  F001         	movff	floor@x,frexp@value
  2703  0016E4  C051  F002         	movff	floor@x+1,frexp@value+1
  2704  0016E8  C052  F003         	movff	floor@x+2,frexp@value+2
  2705  0016EC  0E56               	movlw	low floor@expon
  2706  0016EE  6E04               	movwf	frexp@eptr,c
  2707  0016F0  0E00               	movlw	high floor@expon
  2708  0016F2  6E05               	movwf	frexp@eptr+1,c
  2709  0016F4  EC5E  F00D         	call	_frexp	;wreg free
  2710  0016F8  AE57               	btfss	floor@expon+1,7,c
  2711  0016FA  D010               	goto	l764
  2712  0016FC  AE52               	btfss	floor@x+2,7,c
  2713  0016FE  D007               	goto	l765
  2714  001700  0E00               	movlw	0
  2715  001702  6E50               	movwf	?_floor,c
  2716  001704  0E80               	movlw	128
  2717  001706  6E51               	movwf	?_floor+1,c
  2718  001708  0EBF               	movlw	191
  2719  00170A  6E52               	movwf	?_floor+2,c
  2720  00170C  0012               	return	
  2721  00170E                     l765:
  2722  00170E  0E00               	movlw	0
  2723  001710  6E50               	movwf	?_floor,c
  2724  001712  0E00               	movlw	0
  2725  001714  6E51               	movwf	?_floor+1,c
  2726  001716  0E00               	movlw	0
  2727  001718  6E52               	movwf	?_floor+2,c
  2728  00171A  0012               	return	
  2729  00171C                     l764:
  2730  00171C  5057               	movf	floor@expon+1,w,c
  2731  00171E  E104               	bnz	u1730
  2732  001720  0E15               	movlw	21
  2733  001722  5C56               	subwf	floor@expon,w,c
  2734  001724  A0D8               	btfss	status,0,c
  2735  001726  D007               	goto	l767
  2736  001728                     u1730:
  2737  001728  C050  F050         	movff	floor@x,?_floor
  2738  00172C  C051  F051         	movff	floor@x+1,?_floor+1
  2739  001730  C052  F052         	movff	floor@x+2,?_floor+2
  2740  001734  0012               	return	
  2741  001736                     l767:
  2742  001736  C050  F037         	movff	floor@x,___fttol@f1
  2743  00173A  C051  F038         	movff	floor@x+1,___fttol@f1+1
  2744  00173E  C052  F039         	movff	floor@x+2,___fttol@f1+2
  2745  001742  EC09  F00A         	call	___fttol	;wreg free
  2746  001746  C037  F046         	movff	?___fttol,___altoft@c
  2747  00174A  C038  F047         	movff	?___fttol+1,___altoft@c+1
  2748  00174E  C039  F048         	movff	?___fttol+2,___altoft@c+2
  2749  001752  C03A  F049         	movff	?___fttol+3,___altoft@c+3
  2750  001756  EC30  F00E         	call	___altoft	;wreg free
  2751  00175A  C046  F053         	movff	?___altoft,floor@i
  2752  00175E  C047  F054         	movff	?___altoft+1,floor@i+1
  2753  001762  C048  F055         	movff	?___altoft+2,floor@i+2
  2754  001766  C050  F001         	movff	floor@x,___ftge@ff1
  2755  00176A  C051  F002         	movff	floor@x+1,___ftge@ff1+1
  2756  00176E  C052  F003         	movff	floor@x+2,___ftge@ff1+2
  2757  001772  C053  F004         	movff	floor@i,___ftge@ff2
  2758  001776  C054  F005         	movff	floor@i+1,___ftge@ff2+1
  2759  00177A  C055  F006         	movff	floor@i+2,___ftge@ff2+2
  2760  00177E  ECA6  F00D         	call	___ftge	;wreg free
  2761  001782  B0D8               	btfsc	status,0,c
  2762  001784  D015               	goto	l768
  2763  001786  C053  F00D         	movff	floor@i,___ftadd@f1
  2764  00178A  C054  F00E         	movff	floor@i+1,___ftadd@f1+1
  2765  00178E  C055  F00F         	movff	floor@i+2,___ftadd@f1+2
  2766  001792  0E00               	movlw	0
  2767  001794  6E10               	movwf	___ftadd@f2,c
  2768  001796  0E80               	movlw	128
  2769  001798  6E11               	movwf	___ftadd@f2+1,c
  2770  00179A  0EBF               	movlw	191
  2771  00179C  6E12               	movwf	___ftadd@f2+2,c
  2772  00179E  ECE6  F007         	call	___ftadd	;wreg free
  2773  0017A2  C00D  F050         	movff	?___ftadd,?_floor
  2774  0017A6  C00E  F051         	movff	?___ftadd+1,?_floor+1
  2775  0017AA  C00F  F052         	movff	?___ftadd+2,?_floor+2
  2776  0017AE  0012               	return	
  2777  0017B0                     l768:
  2778  0017B0  C053  F050         	movff	floor@i,?_floor
  2779  0017B4  C054  F051         	movff	floor@i+1,?_floor+1
  2780  0017B8  C055  F052         	movff	floor@i+2,?_floor+2
  2781  0017BC  0012               	return		;funcret
  2782  0017BE                     __end_of_floor:
  2783                           	opt stack 0
  2784                           tblptru	equ	0xFF8
  2785                           postinc0	equ	0xFEE
  2786                           wreg	equ	0xFE8
  2787                           plusw1	equ	0xFE3
  2788                           postinc2	equ	0xFDE
  2789                           postdec2	equ	0xFDD
  2790                           plusw2	equ	0xFDB
  2791                           fsr2h	equ	0xFDA
  2792                           fsr2l	equ	0xFD9
  2793                           status	equ	0xFD8
  2794                           
  2795 ;; *************** function _frexp *****************
  2796 ;; Defined at:
  2797 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
  2798 ;; Parameters:    Size  Location     Type
  2799 ;;  value           3    0[COMRAM] int 
  2800 ;;  eptr            2    3[COMRAM] PTR int 
  2801 ;;		 -> log@exponent(2), floor@expon(2), 
  2802 ;; Auto vars:     Size  Location     Type
  2803 ;;		None
  2804 ;; Return value:  Size  Location     Type
  2805 ;;                  3    0[COMRAM] PTR int 
  2806 ;; Registers used:
  2807 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2808 ;; Tracked objects:
  2809 ;;		On entry : 0/0
  2810 ;;		On exit  : 0/0
  2811 ;;		Unchanged: 0/0
  2812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2813 ;;      Params:         5       0       0       0       0       0       0       0       0
  2814 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2815 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2816 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2817 ;;Total ram usage:        7 bytes
  2818 ;; Hardware stack levels used:    1
  2819 ;; This function calls:
  2820 ;;		Nothing
  2821 ;; This function is called by:
  2822 ;;		_floor
  2823 ;;		_log
  2824 ;; This function uses a non-reentrant model
  2825 ;;
  2826                           
  2827                           	psect	text9
  2828  001ABC                     __ptext9:
  2829                           	opt stack 0
  2830  001ABC                     _frexp:
  2831                           	opt stack 27
  2832                           
  2833                           ;incstack = 0
  2834  001ABC  5001               	movf	frexp@value,w,c
  2835  001ABE  1002               	iorwf	frexp@value+1,w,c
  2836  001AC0  1003               	iorwf	frexp@value+2,w,c
  2837  001AC2  A4D8               	btfss	status,2,c
  2838  001AC4  D00F               	goto	l773
  2839  001AC6  C004  FFD9         	movff	frexp@eptr,fsr2l
  2840  001ACA  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  2841  001ACE  0E00               	movlw	0
  2842  001AD0  6EDE               	movwf	postinc2,c
  2843  001AD2  0E00               	movlw	0
  2844  001AD4  6EDD               	movwf	postdec2,c
  2845  001AD6  0E00               	movlw	0
  2846  001AD8  6E01               	movwf	?_frexp,c
  2847  001ADA  0E00               	movlw	0
  2848  001ADC  6E02               	movwf	?_frexp+1,c
  2849  001ADE  0E00               	movlw	0
  2850  001AE0  6E03               	movwf	?_frexp+2,c
  2851  001AE2  0012               	return	
  2852  001AE4                     l773:
  2853  001AE4  5003               	movf	frexp@value+2,w,c
  2854  001AE6  0B7F               	andlw	127
  2855  001AE8  6E06               	movwf	??_frexp& (0+255),c
  2856  001AEA  6A07               	clrf	(??_frexp+1)& (0+255),c
  2857  001AEC  90D8               	bcf	status,0,c
  2858  001AEE  3606               	rlcf	??_frexp,f,c
  2859  001AF0  3607               	rlcf	??_frexp+1,f,c
  2860  001AF2  C004  FFD9         	movff	frexp@eptr,fsr2l
  2861  001AF6  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  2862  001AFA  C006  FFDE         	movff	??_frexp,postinc2
  2863  001AFE  C007  FFDD         	movff	??_frexp+1,postdec2
  2864  001B02  AE02               	btfss	frexp@value+1,7,c
  2865  001B04  D003               	goto	u1620
  2866  001B06  6A06               	clrf	??_frexp& (0+255),c
  2867  001B08  2A06               	incf	??_frexp& (0+255),f,c
  2868  001B0A  D001               	goto	u1628
  2869  001B0C                     u1620:
  2870  001B0C  6A06               	clrf	??_frexp& (0+255),c
  2871  001B0E                     u1628:
  2872  001B0E  5006               	movf	??_frexp,w,c
  2873  001B10  C004  FFD9         	movff	frexp@eptr,fsr2l
  2874  001B14  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  2875  001B18  12DE               	iorwf	postinc2,f,c
  2876  001B1A  0E00               	movlw	0
  2877  001B1C  12DD               	iorwf	postdec2,f,c
  2878  001B1E  C004  FFD9         	movff	frexp@eptr,fsr2l
  2879  001B22  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  2880  001B26  0E82               	movlw	130
  2881  001B28  26DE               	addwf	postinc2,f,c
  2882  001B2A  0EFF               	movlw	255
  2883  001B2C  22DD               	addwfc	postdec2,f,c
  2884  001B2E  8003               	bsf	frexp@value+2,0,c
  2885  001B30  8203               	bsf	frexp@value+2,1,c
  2886  001B32  8403               	bsf	frexp@value+2,2,c
  2887  001B34  8603               	bsf	frexp@value+2,3,c
  2888  001B36  8803               	bsf	frexp@value+2,4,c
  2889  001B38  8A03               	bsf	frexp@value+2,5,c
  2890  001B3A  9C03               	bcf	frexp@value+2,6,c
  2891  001B3C  9E02               	bcf	frexp@value+1,7,c
  2892  001B3E  C001  F001         	movff	frexp@value,?_frexp
  2893  001B42  C002  F002         	movff	frexp@value+1,?_frexp+1
  2894  001B46  C003  F003         	movff	frexp@value+2,?_frexp+2
  2895  001B4A  0012               	return	
  2896  001B4C                     __end_of_frexp:
  2897                           	opt stack 0
  2898                           tblptru	equ	0xFF8
  2899                           postinc0	equ	0xFEE
  2900                           wreg	equ	0xFE8
  2901                           plusw1	equ	0xFE3
  2902                           postinc2	equ	0xFDE
  2903                           postdec2	equ	0xFDD
  2904                           plusw2	equ	0xFDB
  2905                           fsr2h	equ	0xFDA
  2906                           fsr2l	equ	0xFD9
  2907                           status	equ	0xFD8
  2908                           
  2909 ;; *************** function ___ftge *****************
  2910 ;; Defined at:
  2911 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  2912 ;; Parameters:    Size  Location     Type
  2913 ;;  ff1             3    0[COMRAM] float 
  2914 ;;  ff2             3    3[COMRAM] float 
  2915 ;; Auto vars:     Size  Location     Type
  2916 ;;		None
  2917 ;; Return value:  Size  Location     Type
  2918 ;;		None               void
  2919 ;; Registers used:
  2920 ;;		wreg, status,2, status,0
  2921 ;; Tracked objects:
  2922 ;;		On entry : 0/0
  2923 ;;		On exit  : 0/0
  2924 ;;		Unchanged: 0/0
  2925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2926 ;;      Params:         6       0       0       0       0       0       0       0       0
  2927 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2928 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2929 ;;      Totals:         9       0       0       0       0       0       0       0       0
  2930 ;;Total ram usage:        9 bytes
  2931 ;; Hardware stack levels used:    1
  2932 ;; This function calls:
  2933 ;;		Nothing
  2934 ;; This function is called by:
  2935 ;;		_pow
  2936 ;;		_exp
  2937 ;;		_floor
  2938 ;; This function uses a non-reentrant model
  2939 ;;
  2940                           
  2941                           	psect	text10
  2942  001B4C                     __ptext10:
  2943                           	opt stack 0
  2944  001B4C                     ___ftge:
  2945                           	opt stack 26
  2946                           
  2947                           ;incstack = 0
  2948  001B4C  AE03               	btfss	___ftge@ff1+2,7,c
  2949  001B4E  D016               	goto	l446
  2950  001B50  C001  F007         	movff	___ftge@ff1,??___ftge
  2951  001B54  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  2952  001B58  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  2953  001B5C  1E07               	comf	??___ftge,f,c
  2954  001B5E  1E08               	comf	??___ftge+1,f,c
  2955  001B60  1E09               	comf	??___ftge+2,f,c
  2956  001B62  2A07               	incf	??___ftge,f,c
  2957  001B64  0E00               	movlw	0
  2958  001B66  2208               	addwfc	??___ftge+1,f,c
  2959  001B68  2209               	addwfc	??___ftge+2,f,c
  2960  001B6A  0E00               	movlw	0
  2961  001B6C  2407               	addwf	??___ftge,w,c
  2962  001B6E  6E01               	movwf	___ftge@ff1,c
  2963  001B70  0E00               	movlw	0
  2964  001B72  2008               	addwfc	??___ftge+1,w,c
  2965  001B74  6E02               	movwf	___ftge@ff1+1,c
  2966  001B76  0E80               	movlw	128
  2967  001B78  2009               	addwfc	??___ftge+2,w,c
  2968  001B7A  6E03               	movwf	___ftge@ff1+2,c
  2969  001B7C                     l446:
  2970  001B7C  AE06               	btfss	___ftge@ff2+2,7,c
  2971  001B7E  D016               	goto	l447
  2972  001B80  C004  F007         	movff	___ftge@ff2,??___ftge
  2973  001B84  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  2974  001B88  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  2975  001B8C  1E07               	comf	??___ftge,f,c
  2976  001B8E  1E08               	comf	??___ftge+1,f,c
  2977  001B90  1E09               	comf	??___ftge+2,f,c
  2978  001B92  2A07               	incf	??___ftge,f,c
  2979  001B94  0E00               	movlw	0
  2980  001B96  2208               	addwfc	??___ftge+1,f,c
  2981  001B98  2209               	addwfc	??___ftge+2,f,c
  2982  001B9A  0E00               	movlw	0
  2983  001B9C  2407               	addwf	??___ftge,w,c
  2984  001B9E  6E04               	movwf	___ftge@ff2,c
  2985  001BA0  0E00               	movlw	0
  2986  001BA2  2008               	addwfc	??___ftge+1,w,c
  2987  001BA4  6E05               	movwf	___ftge@ff2+1,c
  2988  001BA6  0E80               	movlw	128
  2989  001BA8  2009               	addwfc	??___ftge+2,w,c
  2990  001BAA  6E06               	movwf	___ftge@ff2+2,c
  2991  001BAC                     l447:
  2992  001BAC  0E00               	movlw	0
  2993  001BAE  1A01               	xorwf	___ftge@ff1,f,c
  2994  001BB0  0E00               	movlw	0
  2995  001BB2  1A02               	xorwf	___ftge@ff1+1,f,c
  2996  001BB4  0E80               	movlw	128
  2997  001BB6  1A03               	xorwf	___ftge@ff1+2,f,c
  2998  001BB8  0E00               	movlw	0
  2999  001BBA  1A04               	xorwf	___ftge@ff2,f,c
  3000  001BBC  0E00               	movlw	0
  3001  001BBE  1A05               	xorwf	___ftge@ff2+1,f,c
  3002  001BC0  0E80               	movlw	128
  3003  001BC2  1A06               	xorwf	___ftge@ff2+2,f,c
  3004  001BC4  5004               	movf	___ftge@ff2,w,c
  3005  001BC6  5C01               	subwf	___ftge@ff1,w,c
  3006  001BC8  5005               	movf	___ftge@ff2+1,w,c
  3007  001BCA  5802               	subwfb	___ftge@ff1+1,w,c
  3008  001BCC  5006               	movf	___ftge@ff2+2,w,c
  3009  001BCE  5803               	subwfb	___ftge@ff1+2,w,c
  3010  001BD0  B0D8               	btfsc	status,0,c
  3011  001BD2  D002               	goto	l1730
  3012  001BD4  90D8               	bcf	status,0,c
  3013  001BD6  0012               	return	
  3014  001BD8                     l1730:
  3015  001BD8  80D8               	bsf	status,0,c
  3016  001BDA  0012               	return	
  3017  001BDC                     __end_of___ftge:
  3018                           	opt stack 0
  3019                           tblptru	equ	0xFF8
  3020                           postinc0	equ	0xFEE
  3021                           wreg	equ	0xFE8
  3022                           plusw1	equ	0xFE3
  3023                           postinc2	equ	0xFDE
  3024                           postdec2	equ	0xFDD
  3025                           plusw2	equ	0xFDB
  3026                           fsr2h	equ	0xFDA
  3027                           fsr2l	equ	0xFD9
  3028                           status	equ	0xFD8
  3029                           
  3030 ;; *************** function ___altoft *****************
  3031 ;; Defined at:
  3032 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
  3033 ;; Parameters:    Size  Location     Type
  3034 ;;  c               4   69[COMRAM] long 
  3035 ;; Auto vars:     Size  Location     Type
  3036 ;;  sign            1   78[COMRAM] unsigned char 
  3037 ;;  exp             1   77[COMRAM] unsigned char 
  3038 ;; Return value:  Size  Location     Type
  3039 ;;                  3   69[COMRAM] float 
  3040 ;; Registers used:
  3041 ;;		wreg, status,2, status,0, cstack
  3042 ;; Tracked objects:
  3043 ;;		On entry : 0/0
  3044 ;;		On exit  : 0/0
  3045 ;;		Unchanged: 0/0
  3046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3047 ;;      Params:         4       0       0       0       0       0       0       0       0
  3048 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3049 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3050 ;;      Totals:        10       0       0       0       0       0       0       0       0
  3051 ;;Total ram usage:       10 bytes
  3052 ;; Hardware stack levels used:    1
  3053 ;; Hardware stack levels required when called:    1
  3054 ;; This function calls:
  3055 ;;		___ftpack
  3056 ;; This function is called by:
  3057 ;;		_floor
  3058 ;; This function uses a non-reentrant model
  3059 ;;
  3060                           
  3061                           	psect	text11
  3062  001C60                     __ptext11:
  3063                           	opt stack 0
  3064  001C60                     ___altoft:
  3065                           	opt stack 25
  3066                           
  3067                           ;incstack = 0
  3068  001C60  0E00               	movlw	0
  3069  001C62  6E4F               	movwf	___altoft@sign,c
  3070  001C64  0E8E               	movlw	142
  3071  001C66  6E4E               	movwf	___altoft@exp,c
  3072  001C68  AE49               	btfss	___altoft@c+3,7,c
  3073  001C6A  D011               	goto	l244
  3074  001C6C  1E49               	comf	___altoft@c+3,f,c
  3075  001C6E  1E48               	comf	___altoft@c+2,f,c
  3076  001C70  1E47               	comf	___altoft@c+1,f,c
  3077  001C72  6C46               	negf	___altoft@c,c
  3078  001C74  0E00               	movlw	0
  3079  001C76  2247               	addwfc	___altoft@c+1,f,c
  3080  001C78  2248               	addwfc	___altoft@c+2,f,c
  3081  001C7A  2249               	addwfc	___altoft@c+3,f,c
  3082  001C7C  0E01               	movlw	1
  3083  001C7E  6E4F               	movwf	___altoft@sign,c
  3084  001C80  D006               	goto	l244
  3085  001C82  90D8               	bcf	status,0,c
  3086  001C84  3249               	rrcf	___altoft@c+3,f,c
  3087  001C86  3248               	rrcf	___altoft@c+2,f,c
  3088  001C88  3247               	rrcf	___altoft@c+1,f,c
  3089  001C8A  3246               	rrcf	___altoft@c,f,c
  3090  001C8C  2A4E               	incf	___altoft@exp,f,c
  3091  001C8E                     l244:
  3092  001C8E  0E00               	movlw	0
  3093  001C90  1446               	andwf	___altoft@c,w,c
  3094  001C92  6E4A               	movwf	??___altoft& (0+255),c
  3095  001C94  0E00               	movlw	0
  3096  001C96  1447               	andwf	___altoft@c+1,w,c
  3097  001C98  6E4B               	movwf	(??___altoft+1)& (0+255),c
  3098  001C9A  0E00               	movlw	0
  3099  001C9C  1448               	andwf	___altoft@c+2,w,c
  3100  001C9E  6E4C               	movwf	(??___altoft+2)& (0+255),c
  3101  001CA0  0EFF               	movlw	255
  3102  001CA2  1449               	andwf	___altoft@c+3,w,c
  3103  001CA4  6E4D               	movwf	(??___altoft+3)& (0+255),c
  3104  001CA6  504A               	movf	??___altoft,w,c
  3105  001CA8  104B               	iorwf	??___altoft+1,w,c
  3106  001CAA  104C               	iorwf	??___altoft+2,w,c
  3107  001CAC  104D               	iorwf	??___altoft+3,w,c
  3108  001CAE  A4D8               	btfss	status,2,c
  3109  001CB0  D7E8               	goto	l245
  3110  001CB2  C046  F001         	movff	___altoft@c,___ftpack@arg
  3111  001CB6  C047  F002         	movff	___altoft@c+1,___ftpack@arg+1
  3112  001CBA  C048  F003         	movff	___altoft@c+2,___ftpack@arg+2
  3113  001CBE  C04E  F004         	movff	___altoft@exp,___ftpack@exp
  3114  001CC2  C04F  F005         	movff	___altoft@sign,___ftpack@sign
  3115  001CC6  EC07  F00D         	call	___ftpack	;wreg free
  3116  001CCA  C001  F046         	movff	?___ftpack,?___altoft
  3117  001CCE  C002  F047         	movff	?___ftpack+1,?___altoft+1
  3118  001CD2  C003  F048         	movff	?___ftpack+2,?___altoft+2
  3119  001CD6  0012               	return	
  3120  001CD8                     __end_of___altoft:
  3121                           	opt stack 0
  3122                           tblptru	equ	0xFF8
  3123                           postinc0	equ	0xFEE
  3124                           wreg	equ	0xFE8
  3125                           plusw1	equ	0xFE3
  3126                           postinc2	equ	0xFDE
  3127                           postdec2	equ	0xFDD
  3128                           plusw2	equ	0xFDB
  3129                           fsr2h	equ	0xFDA
  3130                           fsr2l	equ	0xFD9
  3131                           status	equ	0xFD8
  3132                           
  3133 ;; *************** function _eval_poly *****************
  3134 ;; Defined at:
  3135 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
  3136 ;; Parameters:    Size  Location     Type
  3137 ;;  x               3   39[COMRAM] float 
  3138 ;;  d               2   42[COMRAM] PTR const 
  3139 ;;		 -> log@coeff(27), exp@coeff(30), 
  3140 ;;  n               2   44[COMRAM] int 
  3141 ;; Auto vars:     Size  Location     Type
  3142 ;;  res             3   48[COMRAM] int 
  3143 ;; Return value:  Size  Location     Type
  3144 ;;                  3   39[COMRAM] int 
  3145 ;; Registers used:
  3146 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3147 ;; Tracked objects:
  3148 ;;		On entry : 0/0
  3149 ;;		On exit  : 0/0
  3150 ;;		Unchanged: 0/0
  3151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3152 ;;      Params:         7       0       0       0       0       0       0       0       0
  3153 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3154 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3155 ;;      Totals:        12       0       0       0       0       0       0       0       0
  3156 ;;Total ram usage:       12 bytes
  3157 ;; Hardware stack levels used:    1
  3158 ;; Hardware stack levels required when called:    2
  3159 ;; This function calls:
  3160 ;;		___ftadd
  3161 ;;		___ftmul
  3162 ;;		___wmul
  3163 ;; This function is called by:
  3164 ;;		_exp
  3165 ;;		_log
  3166 ;; This function uses a non-reentrant model
  3167 ;;
  3168                           
  3169                           	psect	text12
  3170  0017BE                     __ptext12:
  3171                           	opt stack 0
  3172  0017BE                     _eval_poly:
  3173                           	opt stack 25
  3174                           
  3175                           ;incstack = 0
  3176  0017BE  C02D  F001         	movff	eval_poly@n,___wmul@multiplier
  3177  0017C2  C02E  F002         	movff	eval_poly@n+1,___wmul@multiplier+1
  3178  0017C6  0E00               	movlw	0
  3179  0017C8  6E04               	movwf	___wmul@multiplicand+1,c
  3180  0017CA  0E03               	movlw	3
  3181  0017CC  6E03               	movwf	___wmul@multiplicand,c
  3182  0017CE  EC73  F00F         	call	___wmul	;wreg free
  3183  0017D2  C02B  F02F         	movff	eval_poly@d,??_eval_poly
  3184  0017D6  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
  3185  0017DA  5001               	movf	?___wmul,w,c
  3186  0017DC  262F               	addwf	??_eval_poly,f,c
  3187  0017DE  5002               	movf	?___wmul+1,w,c
  3188  0017E0  2230               	addwfc	??_eval_poly+1,f,c
  3189  0017E2  C02F  FFF6         	movff	??_eval_poly,tblptrl
  3190  0017E6  C030  FFF7         	movff	??_eval_poly+1,tblptrh
  3191  0017EA                     	if	0	;tblptru may be non-zero
  3192  0017EA                     	endif
  3193  0017EA                     	if	0	;tblptru may be non-zero
  3194  0017EA                     	endif
  3195  0017EA  0009               	tblrd		*+
  3196  0017EC  CFF5 F031          	movff	tablat,eval_poly@res
  3197  0017F0  0009               	tblrd		*+
  3198  0017F2  CFF5 F032          	movff	tablat,eval_poly@res+1
  3199  0017F6  000A               	tblrd		*-
  3200  0017F8  CFF5 F033          	movff	tablat,eval_poly@res+2
  3201  0017FC  D03E               	goto	l803
  3202  0017FE  C031  F01C         	movff	eval_poly@res,___ftmul@f2
  3203  001802  C032  F01D         	movff	eval_poly@res+1,___ftmul@f2+1
  3204  001806  C033  F01E         	movff	eval_poly@res+2,___ftmul@f2+2
  3205  00180A  C028  F019         	movff	eval_poly@x,___ftmul@f1
  3206  00180E  C029  F01A         	movff	eval_poly@x+1,___ftmul@f1+1
  3207  001812  C02A  F01B         	movff	eval_poly@x+2,___ftmul@f1+2
  3208  001816  EC83  F00A         	call	___ftmul	;wreg free
  3209  00181A  C019  F00D         	movff	?___ftmul,___ftadd@f1
  3210  00181E  C01A  F00E         	movff	?___ftmul+1,___ftadd@f1+1
  3211  001822  C01B  F00F         	movff	?___ftmul+2,___ftadd@f1+2
  3212  001826  0E00               	movlw	0
  3213  001828  6E04               	movwf	___wmul@multiplicand+1,c
  3214  00182A  0E03               	movlw	3
  3215  00182C  6E03               	movwf	___wmul@multiplicand,c
  3216  00182E  062D               	decf	eval_poly@n,f,c
  3217  001830  A0D8               	btfss	status,0,c
  3218  001832  062E               	decf	eval_poly@n+1,f,c
  3219  001834  C02D  F001         	movff	eval_poly@n,___wmul@multiplier
  3220  001838  C02E  F002         	movff	eval_poly@n+1,___wmul@multiplier+1
  3221  00183C  EC73  F00F         	call	___wmul	;wreg free
  3222  001840  C02B  F02F         	movff	eval_poly@d,??_eval_poly
  3223  001844  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
  3224  001848  5001               	movf	?___wmul,w,c
  3225  00184A  262F               	addwf	??_eval_poly,f,c
  3226  00184C  5002               	movf	?___wmul+1,w,c
  3227  00184E  2230               	addwfc	??_eval_poly+1,f,c
  3228  001850  C02F  FFF6         	movff	??_eval_poly,tblptrl
  3229  001854  C030  FFF7         	movff	??_eval_poly+1,tblptrh
  3230  001858                     	if	0	;tblptru may be non-zero
  3231  001858                     	endif
  3232  001858                     	if	0	;tblptru may be non-zero
  3233  001858                     	endif
  3234  001858  0009               	tblrd		*+
  3235  00185A  CFF5 F010          	movff	tablat,___ftadd@f2
  3236  00185E  0009               	tblrd		*+
  3237  001860  CFF5 F011          	movff	tablat,___ftadd@f2+1
  3238  001864  000A               	tblrd		*-
  3239  001866  CFF5 F012          	movff	tablat,___ftadd@f2+2
  3240  00186A  ECE6  F007         	call	___ftadd	;wreg free
  3241  00186E  C00D  F031         	movff	?___ftadd,eval_poly@res
  3242  001872  C00E  F032         	movff	?___ftadd+1,eval_poly@res+1
  3243  001876  C00F  F033         	movff	?___ftadd+2,eval_poly@res+2
  3244  00187A                     l803:
  3245  00187A  502D               	movf	eval_poly@n,w,c
  3246  00187C  102E               	iorwf	eval_poly@n+1,w,c
  3247  00187E  A4D8               	btfss	status,2,c
  3248  001880  D7BE               	goto	l804
  3249  001882  C031  F028         	movff	eval_poly@res,?_eval_poly
  3250  001886  C032  F029         	movff	eval_poly@res+1,?_eval_poly+1
  3251  00188A  C033  F02A         	movff	eval_poly@res+2,?_eval_poly+2
  3252  00188E  0012               	return		;funcret
  3253  001890                     __end_of_eval_poly:
  3254                           	opt stack 0
  3255                           tblptru	equ	0xFF8
  3256                           tblptrh	equ	0xFF7
  3257                           tblptrl	equ	0xFF6
  3258                           tablat	equ	0xFF5
  3259                           postinc0	equ	0xFEE
  3260                           wreg	equ	0xFE8
  3261                           plusw1	equ	0xFE3
  3262                           postinc2	equ	0xFDE
  3263                           postdec2	equ	0xFDD
  3264                           plusw2	equ	0xFDB
  3265                           fsr2h	equ	0xFDA
  3266                           fsr2l	equ	0xFD9
  3267                           status	equ	0xFD8
  3268                           
  3269 ;; *************** function ___wmul *****************
  3270 ;; Defined at:
  3271 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  3272 ;; Parameters:    Size  Location     Type
  3273 ;;  multiplier      2    0[COMRAM] unsigned int 
  3274 ;;  multiplicand    2    2[COMRAM] unsigned int 
  3275 ;; Auto vars:     Size  Location     Type
  3276 ;;  product         2    4[COMRAM] unsigned int 
  3277 ;; Return value:  Size  Location     Type
  3278 ;;                  2    0[COMRAM] unsigned int 
  3279 ;; Registers used:
  3280 ;;		wreg, status,2, status,0, prodl, prodh
  3281 ;; Tracked objects:
  3282 ;;		On entry : 0/0
  3283 ;;		On exit  : 0/0
  3284 ;;		Unchanged: 0/0
  3285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3286 ;;      Params:         4       0       0       0       0       0       0       0       0
  3287 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3288 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3289 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3290 ;;Total ram usage:        6 bytes
  3291 ;; Hardware stack levels used:    1
  3292 ;; This function calls:
  3293 ;;		Nothing
  3294 ;; This function is called by:
  3295 ;;		_eval_poly
  3296 ;; This function uses a non-reentrant model
  3297 ;;
  3298                           
  3299                           	psect	text13
  3300  001EE6                     __ptext13:
  3301                           	opt stack 0
  3302  001EE6                     ___wmul:
  3303                           	opt stack 26
  3304                           
  3305                           ;incstack = 0
  3306  001EE6  5001               	movf	___wmul@multiplier,w,c
  3307  001EE8  0203               	mulwf	___wmul@multiplicand,c
  3308  001EEA  CFF3 F005          	movff	prodl,___wmul@product
  3309  001EEE  CFF4 F006          	movff	prodh,___wmul@product+1
  3310  001EF2  5001               	movf	___wmul@multiplier,w,c
  3311  001EF4  0204               	mulwf	___wmul@multiplicand+1,c
  3312  001EF6  50F3               	movf	prodl,w,c
  3313  001EF8  2606               	addwf	___wmul@product+1,f,c
  3314  001EFA  5002               	movf	___wmul@multiplier+1,w,c
  3315  001EFC  0203               	mulwf	___wmul@multiplicand,c
  3316  001EFE  50F3               	movf	prodl,w,c
  3317  001F00  2606               	addwf	___wmul@product+1,f,c
  3318  001F02  C005  F001         	movff	___wmul@product,?___wmul
  3319  001F06  C006  F002         	movff	___wmul@product+1,?___wmul+1
  3320  001F0A  0012               	return	
  3321  001F0C                     __end_of___wmul:
  3322                           	opt stack 0
  3323                           tblptru	equ	0xFF8
  3324                           tblptrh	equ	0xFF7
  3325                           tblptrl	equ	0xFF6
  3326                           tablat	equ	0xFF5
  3327                           prodh	equ	0xFF4
  3328                           prodl	equ	0xFF3
  3329                           postinc0	equ	0xFEE
  3330                           wreg	equ	0xFE8
  3331                           plusw1	equ	0xFE3
  3332                           postinc2	equ	0xFDE
  3333                           postdec2	equ	0xFDD
  3334                           plusw2	equ	0xFDB
  3335                           fsr2h	equ	0xFDA
  3336                           fsr2l	equ	0xFD9
  3337                           status	equ	0xFD8
  3338                           
  3339 ;; *************** function ___ftsub *****************
  3340 ;; Defined at:
  3341 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  3342 ;; Parameters:    Size  Location     Type
  3343 ;;  f1              3   24[COMRAM] float 
  3344 ;;  f2              3   27[COMRAM] float 
  3345 ;; Auto vars:     Size  Location     Type
  3346 ;;		None
  3347 ;; Return value:  Size  Location     Type
  3348 ;;                  3   24[COMRAM] float 
  3349 ;; Registers used:
  3350 ;;		wreg, status,2, status,0, cstack
  3351 ;; Tracked objects:
  3352 ;;		On entry : 0/0
  3353 ;;		On exit  : 0/0
  3354 ;;		Unchanged: 0/0
  3355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3356 ;;      Params:         6       0       0       0       0       0       0       0       0
  3357 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3358 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3359 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3360 ;;Total ram usage:        6 bytes
  3361 ;; Hardware stack levels used:    1
  3362 ;; Hardware stack levels required when called:    2
  3363 ;; This function calls:
  3364 ;;		___ftadd
  3365 ;; This function is called by:
  3366 ;;		_exp
  3367 ;; This function uses a non-reentrant model
  3368 ;;
  3369                           
  3370                           	psect	text14
  3371  001E6E                     __ptext14:
  3372                           	opt stack 0
  3373  001E6E                     ___ftsub:
  3374                           	opt stack 25
  3375                           
  3376                           ;incstack = 0
  3377  001E6E  501C               	movf	___ftsub@f2,w,c
  3378  001E70  101D               	iorwf	___ftsub@f2+1,w,c
  3379  001E72  101E               	iorwf	___ftsub@f2+2,w,c
  3380  001E74  B4D8               	btfsc	status,2,c
  3381  001E76  D006               	goto	l470
  3382  001E78  0E00               	movlw	0
  3383  001E7A  1A1C               	xorwf	___ftsub@f2,f,c
  3384  001E7C  0E00               	movlw	0
  3385  001E7E  1A1D               	xorwf	___ftsub@f2+1,f,c
  3386  001E80  0E80               	movlw	128
  3387  001E82  1A1E               	xorwf	___ftsub@f2+2,f,c
  3388  001E84                     l470:
  3389  001E84  C019  F00D         	movff	___ftsub@f1,___ftadd@f1
  3390  001E88  C01A  F00E         	movff	___ftsub@f1+1,___ftadd@f1+1
  3391  001E8C  C01B  F00F         	movff	___ftsub@f1+2,___ftadd@f1+2
  3392  001E90  C01C  F010         	movff	___ftsub@f2,___ftadd@f2
  3393  001E94  C01D  F011         	movff	___ftsub@f2+1,___ftadd@f2+1
  3394  001E98  C01E  F012         	movff	___ftsub@f2+2,___ftadd@f2+2
  3395  001E9C  ECE6  F007         	call	___ftadd	;wreg free
  3396  001EA0  C00D  F019         	movff	?___ftadd,?___ftsub
  3397  001EA4  C00E  F01A         	movff	?___ftadd+1,?___ftsub+1
  3398  001EA8  C00F  F01B         	movff	?___ftadd+2,?___ftsub+2
  3399  001EAC  0012               	return	
  3400  001EAE                     __end_of___ftsub:
  3401                           	opt stack 0
  3402                           tblptru	equ	0xFF8
  3403                           tblptrh	equ	0xFF7
  3404                           tblptrl	equ	0xFF6
  3405                           tablat	equ	0xFF5
  3406                           prodh	equ	0xFF4
  3407                           prodl	equ	0xFF3
  3408                           postinc0	equ	0xFEE
  3409                           wreg	equ	0xFE8
  3410                           plusw1	equ	0xFE3
  3411                           postinc2	equ	0xFDE
  3412                           postdec2	equ	0xFDD
  3413                           plusw2	equ	0xFDB
  3414                           fsr2h	equ	0xFDA
  3415                           fsr2l	equ	0xFD9
  3416                           status	equ	0xFD8
  3417                           
  3418 ;; *************** function ___ftneg *****************
  3419 ;; Defined at:
  3420 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
  3421 ;; Parameters:    Size  Location     Type
  3422 ;;  f1              3    0[COMRAM] float 
  3423 ;; Auto vars:     Size  Location     Type
  3424 ;;		None
  3425 ;; Return value:  Size  Location     Type
  3426 ;;                  3    0[COMRAM] float 
  3427 ;; Registers used:
  3428 ;;		wreg, status,2, status,0
  3429 ;; Tracked objects:
  3430 ;;		On entry : 0/0
  3431 ;;		On exit  : 0/0
  3432 ;;		Unchanged: 0/0
  3433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3434 ;;      Params:         3       0       0       0       0       0       0       0       0
  3435 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3436 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3437 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3438 ;;Total ram usage:        3 bytes
  3439 ;; Hardware stack levels used:    1
  3440 ;; This function calls:
  3441 ;;		Nothing
  3442 ;; This function is called by:
  3443 ;;		_pow
  3444 ;;		_exp
  3445 ;; This function uses a non-reentrant model
  3446 ;;
  3447                           
  3448                           	psect	text15
  3449  001F0C                     __ptext15:
  3450                           	opt stack 0
  3451  001F0C                     ___ftneg:
  3452                           	opt stack 27
  3453                           
  3454                           ;incstack = 0
  3455  001F0C  5001               	movf	___ftneg@f1,w,c
  3456  001F0E  1002               	iorwf	___ftneg@f1+1,w,c
  3457  001F10  1003               	iorwf	___ftneg@f1+2,w,c
  3458  001F12  B4D8               	btfsc	status,2,c
  3459  001F14  D006               	goto	l464
  3460  001F16  0E00               	movlw	0
  3461  001F18  1A01               	xorwf	___ftneg@f1,f,c
  3462  001F1A  0E00               	movlw	0
  3463  001F1C  1A02               	xorwf	___ftneg@f1+1,f,c
  3464  001F1E  0E80               	movlw	128
  3465  001F20  1A03               	xorwf	___ftneg@f1+2,f,c
  3466  001F22                     l464:
  3467  001F22  C001  F001         	movff	___ftneg@f1,?___ftneg
  3468  001F26  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  3469  001F2A  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  3470  001F2E  0012               	return		;funcret
  3471  001F30                     __end_of___ftneg:
  3472                           	opt stack 0
  3473                           tblptru	equ	0xFF8
  3474                           tblptrh	equ	0xFF7
  3475                           tblptrl	equ	0xFF6
  3476                           tablat	equ	0xFF5
  3477                           prodh	equ	0xFF4
  3478                           prodl	equ	0xFF3
  3479                           postinc0	equ	0xFEE
  3480                           wreg	equ	0xFE8
  3481                           plusw1	equ	0xFE3
  3482                           postinc2	equ	0xFDE
  3483                           postdec2	equ	0xFDD
  3484                           plusw2	equ	0xFDB
  3485                           fsr2h	equ	0xFDA
  3486                           fsr2l	equ	0xFD9
  3487                           status	equ	0xFD8
  3488                           
  3489 ;; *************** function ___awtoft *****************
  3490 ;; Defined at:
  3491 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
  3492 ;; Parameters:    Size  Location     Type
  3493 ;;  c               2    8[COMRAM] int 
  3494 ;; Auto vars:     Size  Location     Type
  3495 ;;  sign            1   11[COMRAM] unsigned char 
  3496 ;; Return value:  Size  Location     Type
  3497 ;;                  3    8[COMRAM] float 
  3498 ;; Registers used:
  3499 ;;		wreg, status,2, status,0, cstack
  3500 ;; Tracked objects:
  3501 ;;		On entry : 0/0
  3502 ;;		On exit  : 0/0
  3503 ;;		Unchanged: 0/0
  3504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3505 ;;      Params:         3       0       0       0       0       0       0       0       0
  3506 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3507 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3508 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3509 ;;Total ram usage:        4 bytes
  3510 ;; Hardware stack levels used:    1
  3511 ;; Hardware stack levels required when called:    1
  3512 ;; This function calls:
  3513 ;;		___ftpack
  3514 ;; This function is called by:
  3515 ;;		_config_timer2
  3516 ;;		_config_ccp1
  3517 ;;		_config_ccp2
  3518 ;;		_exp
  3519 ;;		_log
  3520 ;;		_wait_in_ms
  3521 ;; This function uses a non-reentrant model
  3522 ;;
  3523                           
  3524                           	psect	text16
  3525  001EAE                     __ptext16:
  3526                           	opt stack 0
  3527  001EAE                     ___awtoft:
  3528                           	opt stack 28
  3529                           
  3530                           ;incstack = 0
  3531  001EAE  0E00               	movlw	0
  3532  001EB0  6E0C               	movwf	___awtoft@sign,c
  3533  001EB2  AE0A               	btfss	___awtoft@c+1,7,c
  3534  001EB4  D006               	goto	l355
  3535  001EB6  6C09               	negf	___awtoft@c,c
  3536  001EB8  1E0A               	comf	___awtoft@c+1,f,c
  3537  001EBA  B0D8               	btfsc	status,0,c
  3538  001EBC  2A0A               	incf	___awtoft@c+1,f,c
  3539  001EBE  0E01               	movlw	1
  3540  001EC0  6E0C               	movwf	___awtoft@sign,c
  3541  001EC2                     l355:
  3542  001EC2  C009  F001         	movff	___awtoft@c,___ftpack@arg
  3543  001EC6  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  3544  001ECA  6A03               	clrf	___ftpack@arg+2,c
  3545  001ECC  0E8E               	movlw	142
  3546  001ECE  6E04               	movwf	___ftpack@exp,c
  3547  001ED0  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  3548  001ED4  EC07  F00D         	call	___ftpack	;wreg free
  3549  001ED8  C001  F009         	movff	?___ftpack,?___awtoft
  3550  001EDC  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  3551  001EE0  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  3552  001EE4  0012               	return	
  3553  001EE6                     __end_of___awtoft:
  3554                           	opt stack 0
  3555                           tblptru	equ	0xFF8
  3556                           tblptrh	equ	0xFF7
  3557                           tblptrl	equ	0xFF6
  3558                           tablat	equ	0xFF5
  3559                           prodh	equ	0xFF4
  3560                           prodl	equ	0xFF3
  3561                           postinc0	equ	0xFEE
  3562                           wreg	equ	0xFE8
  3563                           plusw1	equ	0xFE3
  3564                           postinc2	equ	0xFDE
  3565                           postdec2	equ	0xFDD
  3566                           plusw2	equ	0xFDB
  3567                           fsr2h	equ	0xFDA
  3568                           fsr2l	equ	0xFD9
  3569                           status	equ	0xFD8
  3570                           
  3571 ;; *************** function ___lltoft *****************
  3572 ;; Defined at:
  3573 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
  3574 ;; Parameters:    Size  Location     Type
  3575 ;;  c               4    8[COMRAM] unsigned long 
  3576 ;; Auto vars:     Size  Location     Type
  3577 ;;  exp             1   16[COMRAM] unsigned char 
  3578 ;; Return value:  Size  Location     Type
  3579 ;;                  3    8[COMRAM] float 
  3580 ;; Registers used:
  3581 ;;		wreg, status,2, status,0, cstack
  3582 ;; Tracked objects:
  3583 ;;		On entry : 0/0
  3584 ;;		On exit  : 0/0
  3585 ;;		Unchanged: 0/0
  3586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3587 ;;      Params:         4       0       0       0       0       0       0       0       0
  3588 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3589 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3590 ;;      Totals:         9       0       0       0       0       0       0       0       0
  3591 ;;Total ram usage:        9 bytes
  3592 ;; Hardware stack levels used:    1
  3593 ;; Hardware stack levels required when called:    1
  3594 ;; This function calls:
  3595 ;;		___ftpack
  3596 ;; This function is called by:
  3597 ;;		_pow
  3598 ;; This function uses a non-reentrant model
  3599 ;;
  3600                           
  3601                           	psect	text17
  3602  001E12                     __ptext17:
  3603                           	opt stack 0
  3604  001E12                     ___lltoft:
  3605                           	opt stack 27
  3606                           
  3607                           ;incstack = 0
  3608  001E12  0E8E               	movlw	142
  3609  001E14  6E11               	movwf	___lltoft@exp,c
  3610  001E16  D006               	goto	l531
  3611  001E18  90D8               	bcf	status,0,c
  3612  001E1A  320C               	rrcf	___lltoft@c+3,f,c
  3613  001E1C  320B               	rrcf	___lltoft@c+2,f,c
  3614  001E1E  320A               	rrcf	___lltoft@c+1,f,c
  3615  001E20  3209               	rrcf	___lltoft@c,f,c
  3616  001E22  2A11               	incf	___lltoft@exp,f,c
  3617  001E24                     l531:
  3618  001E24  0E00               	movlw	0
  3619  001E26  1409               	andwf	___lltoft@c,w,c
  3620  001E28  6E0D               	movwf	??___lltoft& (0+255),c
  3621  001E2A  0E00               	movlw	0
  3622  001E2C  140A               	andwf	___lltoft@c+1,w,c
  3623  001E2E  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  3624  001E30  0E00               	movlw	0
  3625  001E32  140B               	andwf	___lltoft@c+2,w,c
  3626  001E34  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  3627  001E36  0EFF               	movlw	255
  3628  001E38  140C               	andwf	___lltoft@c+3,w,c
  3629  001E3A  6E10               	movwf	(??___lltoft+3)& (0+255),c
  3630  001E3C  500D               	movf	??___lltoft,w,c
  3631  001E3E  100E               	iorwf	??___lltoft+1,w,c
  3632  001E40  100F               	iorwf	??___lltoft+2,w,c
  3633  001E42  1010               	iorwf	??___lltoft+3,w,c
  3634  001E44  A4D8               	btfss	status,2,c
  3635  001E46  D7E8               	goto	l532
  3636  001E48  C009  F001         	movff	___lltoft@c,___ftpack@arg
  3637  001E4C  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  3638  001E50  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  3639  001E54  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  3640  001E58  0E00               	movlw	0
  3641  001E5A  6E05               	movwf	___ftpack@sign,c
  3642  001E5C  EC07  F00D         	call	___ftpack	;wreg free
  3643  001E60  C001  F009         	movff	?___ftpack,?___lltoft
  3644  001E64  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  3645  001E68  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  3646  001E6C  0012               	return	
  3647  001E6E                     __end_of___lltoft:
  3648                           	opt stack 0
  3649                           tblptru	equ	0xFF8
  3650                           tblptrh	equ	0xFF7
  3651                           tblptrl	equ	0xFF6
  3652                           tablat	equ	0xFF5
  3653                           prodh	equ	0xFF4
  3654                           prodl	equ	0xFF3
  3655                           postinc0	equ	0xFEE
  3656                           wreg	equ	0xFE8
  3657                           plusw1	equ	0xFE3
  3658                           postinc2	equ	0xFDE
  3659                           postdec2	equ	0xFDD
  3660                           plusw2	equ	0xFDB
  3661                           fsr2h	equ	0xFDA
  3662                           fsr2l	equ	0xFD9
  3663                           status	equ	0xFD8
  3664                           
  3665 ;; *************** function ___awdiv *****************
  3666 ;; Defined at:
  3667 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  3668 ;; Parameters:    Size  Location     Type
  3669 ;;  dividend        2    0[COMRAM] int 
  3670 ;;  divisor         2    2[COMRAM] int 
  3671 ;; Auto vars:     Size  Location     Type
  3672 ;;  quotient        2    6[COMRAM] int 
  3673 ;;  sign            1    5[COMRAM] unsigned char 
  3674 ;;  counter         1    4[COMRAM] unsigned char 
  3675 ;; Return value:  Size  Location     Type
  3676 ;;                  2    0[COMRAM] int 
  3677 ;; Registers used:
  3678 ;;		wreg, status,2, status,0
  3679 ;; Tracked objects:
  3680 ;;		On entry : 0/0
  3681 ;;		On exit  : 0/0
  3682 ;;		Unchanged: 0/0
  3683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3684 ;;      Params:         4       0       0       0       0       0       0       0       0
  3685 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3686 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3687 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3688 ;;Total ram usage:        8 bytes
  3689 ;; Hardware stack levels used:    1
  3690 ;; This function calls:
  3691 ;;		Nothing
  3692 ;; This function is called by:
  3693 ;;		_config_ccp1
  3694 ;;		_config_ccp2
  3695 ;; This function uses a non-reentrant model
  3696 ;;
  3697                           
  3698                           	psect	text18
  3699  001BDC                     __ptext18:
  3700                           	opt stack 0
  3701  001BDC                     ___awdiv:
  3702                           	opt stack 29
  3703                           
  3704                           ;incstack = 0
  3705  001BDC  0E00               	movlw	0
  3706  001BDE  6E06               	movwf	___awdiv@sign,c
  3707  001BE0  AE04               	btfss	___awdiv@divisor+1,7,c
  3708  001BE2  D006               	goto	l327
  3709  001BE4  6C03               	negf	___awdiv@divisor,c
  3710  001BE6  1E04               	comf	___awdiv@divisor+1,f,c
  3711  001BE8  B0D8               	btfsc	status,0,c
  3712  001BEA  2A04               	incf	___awdiv@divisor+1,f,c
  3713  001BEC  0E01               	movlw	1
  3714  001BEE  6E06               	movwf	___awdiv@sign,c
  3715  001BF0                     l327:
  3716  001BF0  AE02               	btfss	___awdiv@dividend+1,7,c
  3717  001BF2  D006               	goto	l328
  3718  001BF4  6C01               	negf	___awdiv@dividend,c
  3719  001BF6  1E02               	comf	___awdiv@dividend+1,f,c
  3720  001BF8  B0D8               	btfsc	status,0,c
  3721  001BFA  2A02               	incf	___awdiv@dividend+1,f,c
  3722  001BFC  0E01               	movlw	1
  3723  001BFE  1A06               	xorwf	___awdiv@sign,f,c
  3724  001C00                     l328:
  3725  001C00  0E00               	movlw	0
  3726  001C02  6E08               	movwf	___awdiv@quotient+1,c
  3727  001C04  0E00               	movlw	0
  3728  001C06  6E07               	movwf	___awdiv@quotient,c
  3729  001C08  5003               	movf	___awdiv@divisor,w,c
  3730  001C0A  1004               	iorwf	___awdiv@divisor+1,w,c
  3731  001C0C  B4D8               	btfsc	status,2,c
  3732  001C0E  D01C               	goto	l335
  3733  001C10  0E01               	movlw	1
  3734  001C12  6E05               	movwf	___awdiv@counter,c
  3735  001C14  D004               	goto	l330
  3736  001C16  90D8               	bcf	status,0,c
  3737  001C18  3603               	rlcf	___awdiv@divisor,f,c
  3738  001C1A  3604               	rlcf	___awdiv@divisor+1,f,c
  3739  001C1C  2A05               	incf	___awdiv@counter,f,c
  3740  001C1E                     l330:
  3741  001C1E  AE04               	btfss	___awdiv@divisor+1,7,c
  3742  001C20  D7FA               	goto	l331
  3743  001C22                     u2010:
  3744  001C22  90D8               	bcf	status,0,c
  3745  001C24  3607               	rlcf	___awdiv@quotient,f,c
  3746  001C26  3608               	rlcf	___awdiv@quotient+1,f,c
  3747  001C28  5003               	movf	___awdiv@divisor,w,c
  3748  001C2A  5C01               	subwf	___awdiv@dividend,w,c
  3749  001C2C  5004               	movf	___awdiv@divisor+1,w,c
  3750  001C2E  5802               	subwfb	___awdiv@dividend+1,w,c
  3751  001C30  A0D8               	btfss	status,0,c
  3752  001C32  D005               	goto	l334
  3753  001C34  5003               	movf	___awdiv@divisor,w,c
  3754  001C36  5E01               	subwf	___awdiv@dividend,f,c
  3755  001C38  5004               	movf	___awdiv@divisor+1,w,c
  3756  001C3A  5A02               	subwfb	___awdiv@dividend+1,f,c
  3757  001C3C  8007               	bsf	___awdiv@quotient,0,c
  3758  001C3E                     l334:
  3759  001C3E  90D8               	bcf	status,0,c
  3760  001C40  3204               	rrcf	___awdiv@divisor+1,f,c
  3761  001C42  3203               	rrcf	___awdiv@divisor,f,c
  3762  001C44  2E05               	decfsz	___awdiv@counter,f,c
  3763  001C46  D7ED               	goto	u2010
  3764  001C48                     l335:
  3765  001C48  5006               	movf	___awdiv@sign,w,c
  3766  001C4A  B4D8               	btfsc	status,2,c
  3767  001C4C  D004               	goto	l336
  3768  001C4E  6C07               	negf	___awdiv@quotient,c
  3769  001C50  1E08               	comf	___awdiv@quotient+1,f,c
  3770  001C52  B0D8               	btfsc	status,0,c
  3771  001C54  2A08               	incf	___awdiv@quotient+1,f,c
  3772  001C56                     l336:
  3773  001C56  C007  F001         	movff	___awdiv@quotient,?___awdiv
  3774  001C5A  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  3775  001C5E  0012               	return	
  3776  001C60                     __end_of___awdiv:
  3777                           	opt stack 0
  3778                           tblptru	equ	0xFF8
  3779                           tblptrh	equ	0xFF7
  3780                           tblptrl	equ	0xFF6
  3781                           tablat	equ	0xFF5
  3782                           prodh	equ	0xFF4
  3783                           prodl	equ	0xFF3
  3784                           postinc0	equ	0xFEE
  3785                           wreg	equ	0xFE8
  3786                           plusw1	equ	0xFE3
  3787                           postinc2	equ	0xFDE
  3788                           postdec2	equ	0xFDD
  3789                           plusw2	equ	0xFDB
  3790                           fsr2h	equ	0xFDA
  3791                           fsr2l	equ	0xFD9
  3792                           status	equ	0xFD8
  3793                           
  3794 ;; *************** function _configBoard *****************
  3795 ;; Defined at:
  3796 ;;		line 11 in file "config.c"
  3797 ;; Parameters:    Size  Location     Type
  3798 ;;		None
  3799 ;; Auto vars:     Size  Location     Type
  3800 ;;		None
  3801 ;; Return value:  Size  Location     Type
  3802 ;;                  1    wreg      void 
  3803 ;; Registers used:
  3804 ;;		wreg, status,2
  3805 ;; Tracked objects:
  3806 ;;		On entry : 0/0
  3807 ;;		On exit  : 0/0
  3808 ;;		Unchanged: 0/0
  3809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3810 ;;      Params:         0       0       0       0       0       0       0       0       0
  3811 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3812 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3813 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3814 ;;Total ram usage:        0 bytes
  3815 ;; Hardware stack levels used:    1
  3816 ;; This function calls:
  3817 ;;		Nothing
  3818 ;; This function is called by:
  3819 ;;		_main
  3820 ;; This function uses a non-reentrant model
  3821 ;;
  3822                           
  3823                           	psect	text19
  3824  001DB2                     __ptext19:
  3825                           	opt stack 0
  3826  001DB2                     _configBoard:
  3827                           	opt stack 30
  3828                           
  3829                           ;config.c: 15: INTCONbits.GIE = 0;
  3830                           
  3831                           ;incstack = 0
  3832  001DB2  9EF2               	bcf	intcon,7,c	;volatile
  3833                           
  3834                           ;config.c: 16: INTCONbits.PEIE = 0;
  3835  001DB4  9CF2               	bcf	intcon,6,c	;volatile
  3836                           
  3837                           ;config.c: 25: T0CONbits.TMR0ON = 1;
  3838  001DB6  8ED5               	bsf	4053,7,c	;volatile
  3839                           
  3840                           ;config.c: 26: T08BIT = 1;
  3841  001DB8  8CD5               	bsf	4053,6,c	;volatile
  3842                           
  3843                           ;config.c: 27: T0CONbits.T0CS = 0;
  3844  001DBA  9AD5               	bcf	4053,5,c	;volatile
  3845                           
  3846                           ;config.c: 29: T0CONbits.PSA = 0;
  3847  001DBC  96D5               	bcf	4053,3,c	;volatile
  3848                           
  3849                           ;config.c: 30: T0CONbits.T0PS = 100;
  3850  001DBE  50D5               	movf	4053,w,c	;volatile
  3851  001DC0  0BF8               	andlw	-8
  3852  001DC2  0904               	iorlw	4
  3853  001DC4  6ED5               	movwf	4053,c	;volatile
  3854                           
  3855                           ;config.c: 31: INTCONbits.TMR0IF = 0;
  3856  001DC6  94F2               	bcf	intcon,2,c	;volatile
  3857                           
  3858                           ;config.c: 33: ADCON1bits.PCFG = 0b1111;
  3859  001DC8  80C1               	bsf	4033,0,c	;volatile
  3860  001DCA  82C1               	bsf	4033,1,c	;volatile
  3861  001DCC  84C1               	bsf	4033,2,c	;volatile
  3862  001DCE  86C1               	bsf	4033,3,c	;volatile
  3863                           
  3864                           ;config.c: 44: ADCON0 = 0b00000111;
  3865  001DD0  0E07               	movlw	7
  3866  001DD2  6EC2               	movwf	4034,c	;volatile
  3867                           
  3868                           ;config.c: 47: ADCON0bits.ADON = 0;
  3869  001DD4  90C2               	bcf	4034,0,c	;volatile
  3870                           
  3871                           ;config.c: 51: ADCON2bits.ADFM = 1;
  3872  001DD6  8EC0               	bsf	4032,7,c	;volatile
  3873                           
  3874                           ;config.c: 52: ADCON2bits.ADCS = 0b110;
  3875  001DD8  50C0               	movf	4032,w,c	;volatile
  3876  001DDA  0BF8               	andlw	-8
  3877  001DDC  0906               	iorlw	6
  3878  001DDE  6EC0               	movwf	4032,c	;volatile
  3879                           
  3880                           ;config.c: 53: ADCON2bits.ACQT = 0b101;
  3881  001DE0  50C0               	movf	4032,w,c	;volatile
  3882  001DE2  0BC7               	andlw	-57
  3883  001DE4  0928               	iorlw	40
  3884  001DE6  6EC0               	movwf	4032,c	;volatile
  3885                           
  3886                           ;config.c: 55: TRISAbits.RA1=1;
  3887  001DE8  8292               	bsf	3986,1,c	;volatile
  3888                           
  3889                           ;config.c: 56: ADCON2bits.ADCS=0b110;
  3890  001DEA  50C0               	movf	4032,w,c	;volatile
  3891  001DEC  0BF8               	andlw	-8
  3892  001DEE  0906               	iorlw	6
  3893  001DF0  6EC0               	movwf	4032,c	;volatile
  3894                           
  3895                           ;config.c: 57: ADCON1bits.VCFG1=0;
  3896  001DF2  9AC1               	bcf	4033,5,c	;volatile
  3897                           
  3898                           ;config.c: 58: ADCON1bits.VCFG0=0;
  3899  001DF4  98C1               	bcf	4033,4,c	;volatile
  3900                           
  3901                           ;config.c: 60: ADCON2bits.ADFM=1;
  3902  001DF6  8EC0               	bsf	4032,7,c	;volatile
  3903                           
  3904                           ;config.c: 64: ADCON0bits.ADON=0;
  3905  001DF8  90C2               	bcf	4034,0,c	;volatile
  3906                           
  3907                           ;config.c: 66: PIE1bits.ADIE=0;
  3908  001DFA  9C9D               	bcf	3997,6,c	;volatile
  3909                           
  3910                           ;config.c: 67: PIR1bits.ADIF=0;
  3911  001DFC  9C9E               	bcf	3998,6,c	;volatile
  3912                           
  3913                           ;config.c: 69: ADCON2bits.ACQT=0b111;
  3914  001DFE  86C0               	bsf	4032,3,c	;volatile
  3915  001E00  88C0               	bsf	4032,4,c	;volatile
  3916  001E02  8AC0               	bsf	4032,5,c	;volatile
  3917                           
  3918                           ;config.c: 70: ADCON0bits.GO=1;
  3919  001E04  82C2               	bsf	4034,1,c	;volatile
  3920                           
  3921                           ;config.c: 72: RCIF=0;
  3922  001E06  9A9E               	bcf	3998,5,c	;volatile
  3923                           
  3924                           ;config.c: 75: TRISD=0;
  3925  001E08  0E00               	movlw	0
  3926  001E0A  6E95               	movwf	3989,c	;volatile
  3927                           
  3928                           ;config.c: 76: PORTA=0;
  3929  001E0C  0E00               	movlw	0
  3930  001E0E  6E80               	movwf	3968,c	;volatile
  3931  001E10  0012               	return		;funcret
  3932  001E12                     __end_of_configBoard:
  3933                           	opt stack 0
  3934                           tblptru	equ	0xFF8
  3935                           tblptrh	equ	0xFF7
  3936                           tblptrl	equ	0xFF6
  3937                           tablat	equ	0xFF5
  3938                           prodh	equ	0xFF4
  3939                           prodl	equ	0xFF3
  3940                           intcon	equ	0xFF2
  3941                           postinc0	equ	0xFEE
  3942                           wreg	equ	0xFE8
  3943                           plusw1	equ	0xFE3
  3944                           postinc2	equ	0xFDE
  3945                           postdec2	equ	0xFDD
  3946                           plusw2	equ	0xFDB
  3947                           fsr2h	equ	0xFDA
  3948                           fsr2l	equ	0xFD9
  3949                           status	equ	0xFD8
  3950                           
  3951 ;; *************** function _coinfig_ccpcon *****************
  3952 ;; Defined at:
  3953 ;;		line 34 in file "Pwm.c"
  3954 ;; Parameters:    Size  Location     Type
  3955 ;;  fosc            3   69[COMRAM] float 
  3956 ;;  freq            3   72[COMRAM] float 
  3957 ;; Auto vars:     Size  Location     Type
  3958 ;;		None
  3959 ;; Return value:  Size  Location     Type
  3960 ;;                  1    wreg      void 
  3961 ;; Registers used:
  3962 ;;		wreg, status,2, status,0, cstack
  3963 ;; Tracked objects:
  3964 ;;		On entry : 0/0
  3965 ;;		On exit  : 0/0
  3966 ;;		Unchanged: 0/0
  3967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3968 ;;      Params:         6       0       0       0       0       0       0       0       0
  3969 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3970 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3971 ;;      Totals:         9       0       0       0       0       0       0       0       0
  3972 ;;Total ram usage:        9 bytes
  3973 ;; Hardware stack levels used:    1
  3974 ;; Hardware stack levels required when called:    2
  3975 ;; This function calls:
  3976 ;;		___ftadd
  3977 ;;		___ftdiv
  3978 ;;		___ftmul
  3979 ;;		___fttol
  3980 ;;		___lbtoft
  3981 ;; This function is called by:
  3982 ;;		_main
  3983 ;; This function uses a non-reentrant model
  3984 ;;
  3985                           
  3986                           	psect	text20
  3987  001956                     __ptext20:
  3988                           	opt stack 0
  3989  001956                     _coinfig_ccpcon:
  3990                           	opt stack 28
  3991                           
  3992                           ;Pwm.c: 36: PR2 = ((fosc/(4*freq*prescg))-1);
  3993                           
  3994                           ;incstack = 0
  3995  001956  C0EF  F01C         	movff	_prescg,___ftmul@f2
  3996  00195A  C0F0  F01D         	movff	_prescg+1,___ftmul@f2+1
  3997  00195E  C0F1  F01E         	movff	_prescg+2,___ftmul@f2+2
  3998  001962  C049  F019         	movff	coinfig_ccpcon@freq,___ftmul@f1
  3999  001966  C04A  F01A         	movff	coinfig_ccpcon@freq+1,___ftmul@f1+1
  4000  00196A  C04B  F01B         	movff	coinfig_ccpcon@freq+2,___ftmul@f1+2
  4001  00196E  EC83  F00A         	call	___ftmul	;wreg free
  4002  001972  C019  F04C         	movff	?___ftmul,_coinfig_ccpcon$1479
  4003  001976  C01A  F04D         	movff	?___ftmul+1,_coinfig_ccpcon$1479+1
  4004  00197A  C01B  F04E         	movff	?___ftmul+2,_coinfig_ccpcon$1479+2
  4005                           
  4006                           ;Pwm.c: 36: PR2 = ((fosc/(4*freq*prescg))-1);
  4007  00197E  0E00               	movlw	0
  4008  001980  6E10               	movwf	___ftadd@f2,c
  4009  001982  0E80               	movlw	128
  4010  001984  6E11               	movwf	___ftadd@f2+1,c
  4011  001986  0EBF               	movlw	191
  4012  001988  6E12               	movwf	___ftadd@f2+2,c
  4013  00198A  0E00               	movlw	0
  4014  00198C  6E1C               	movwf	___ftmul@f2,c
  4015  00198E  0E80               	movlw	128
  4016  001990  6E1D               	movwf	___ftmul@f2+1,c
  4017  001992  0E40               	movlw	64
  4018  001994  6E1E               	movwf	___ftmul@f2+2,c
  4019  001996  C04C  F019         	movff	_coinfig_ccpcon$1479,___ftmul@f1
  4020  00199A  C04D  F01A         	movff	_coinfig_ccpcon$1479+1,___ftmul@f1+1
  4021  00199E  C04E  F01B         	movff	_coinfig_ccpcon$1479+2,___ftmul@f1+2
  4022  0019A2  EC83  F00A         	call	___ftmul	;wreg free
  4023  0019A6  C019  F02B         	movff	?___ftmul,___ftdiv@f2
  4024  0019AA  C01A  F02C         	movff	?___ftmul+1,___ftdiv@f2+1
  4025  0019AE  C01B  F02D         	movff	?___ftmul+2,___ftdiv@f2+2
  4026  0019B2  C046  F028         	movff	coinfig_ccpcon@fosc,___ftdiv@f1
  4027  0019B6  C047  F029         	movff	coinfig_ccpcon@fosc+1,___ftdiv@f1+1
  4028  0019BA  C048  F02A         	movff	coinfig_ccpcon@fosc+2,___ftdiv@f1+2
  4029  0019BE  ECFD  F00A         	call	___ftdiv	;wreg free
  4030  0019C2  C028  F00D         	movff	?___ftdiv,___ftadd@f1
  4031  0019C6  C029  F00E         	movff	?___ftdiv+1,___ftadd@f1+1
  4032  0019CA  C02A  F00F         	movff	?___ftdiv+2,___ftadd@f1+2
  4033  0019CE  ECE6  F007         	call	___ftadd	;wreg free
  4034  0019D2  C00D  F037         	movff	?___ftadd,___fttol@f1
  4035  0019D6  C00E  F038         	movff	?___ftadd+1,___fttol@f1+1
  4036  0019DA  C00F  F039         	movff	?___ftadd+2,___fttol@f1+2
  4037  0019DE  EC09  F00A         	call	___fttol	;wreg free
  4038  0019E2  5037               	movf	?___fttol,w,c
  4039  0019E4  6ECB               	movwf	4043,c	;volatile
  4040                           
  4041                           ;Pwm.c: 37: pr2g = PR2;
  4042  0019E6  50CB               	movf	4043,w,c	;volatile
  4043  0019E8  EC98  F00F         	call	___lbtoft
  4044  0019EC  C009  F0EA         	movff	?___lbtoft,_pr2g
  4045  0019F0  C00A  F0EB         	movff	?___lbtoft+1,_pr2g+1
  4046  0019F4  C00B  F0EC         	movff	?___lbtoft+2,_pr2g+2
  4047                           
  4048                           ;Pwm.c: 38: CCP1CONbits.P1M = 0b00;
  4049  0019F8  0E3F               	movlw	-193
  4050  0019FA  16BD               	andwf	4029,f,c	;volatile
  4051                           
  4052                           ;Pwm.c: 39: CCP2CONbits.CCP2M = 1100;
  4053  0019FC  50BA               	movf	4026,w,c	;volatile
  4054  0019FE  0BF0               	andlw	-16
  4055  001A00  090C               	iorlw	12
  4056  001A02  6EBA               	movwf	4026,c	;volatile
  4057                           
  4058                           ;Pwm.c: 40: CCP1CONbits.CCP1M = 1100;
  4059  001A04  50BD               	movf	4029,w,c	;volatile
  4060  001A06  0BF0               	andlw	-16
  4061  001A08  090C               	iorlw	12
  4062  001A0A  6EBD               	movwf	4029,c	;volatile
  4063  001A0C  0012               	return		;funcret
  4064  001A0E                     __end_of_coinfig_ccpcon:
  4065                           	opt stack 0
  4066                           tblptru	equ	0xFF8
  4067                           tblptrh	equ	0xFF7
  4068                           tblptrl	equ	0xFF6
  4069                           tablat	equ	0xFF5
  4070                           prodh	equ	0xFF4
  4071                           prodl	equ	0xFF3
  4072                           intcon	equ	0xFF2
  4073                           postinc0	equ	0xFEE
  4074                           wreg	equ	0xFE8
  4075                           plusw1	equ	0xFE3
  4076                           postinc2	equ	0xFDE
  4077                           postdec2	equ	0xFDD
  4078                           plusw2	equ	0xFDB
  4079                           fsr2h	equ	0xFDA
  4080                           fsr2l	equ	0xFD9
  4081                           status	equ	0xFD8
  4082                           
  4083 ;; *************** function ___lbtoft *****************
  4084 ;; Defined at:
  4085 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lbtoft.c"
  4086 ;; Parameters:    Size  Location     Type
  4087 ;;  c               1    wreg     unsigned char 
  4088 ;; Auto vars:     Size  Location     Type
  4089 ;;  c               1   11[COMRAM] unsigned char 
  4090 ;; Return value:  Size  Location     Type
  4091 ;;                  3    8[COMRAM] float 
  4092 ;; Registers used:
  4093 ;;		wreg, status,2, status,0, cstack
  4094 ;; Tracked objects:
  4095 ;;		On entry : 0/0
  4096 ;;		On exit  : 0/0
  4097 ;;		Unchanged: 0/0
  4098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4099 ;;      Params:         3       0       0       0       0       0       0       0       0
  4100 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4101 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4102 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4103 ;;Total ram usage:        4 bytes
  4104 ;; Hardware stack levels used:    1
  4105 ;; Hardware stack levels required when called:    1
  4106 ;; This function calls:
  4107 ;;		___ftpack
  4108 ;; This function is called by:
  4109 ;;		_coinfig_ccpcon
  4110 ;; This function uses a non-reentrant model
  4111 ;;
  4112                           
  4113                           	psect	text21
  4114  001F30                     __ptext21:
  4115                           	opt stack 0
  4116  001F30                     ___lbtoft:
  4117                           	opt stack 28
  4118                           
  4119                           ;incstack = 0
  4120                           ;___lbtoft@c stored from wreg
  4121  001F30  6E0C               	movwf	___lbtoft@c,c
  4122  001F32  500C               	movf	___lbtoft@c,w,c
  4123  001F34  6E01               	movwf	___ftpack@arg,c
  4124  001F36  6A02               	clrf	___ftpack@arg+1,c
  4125  001F38  6A03               	clrf	___ftpack@arg+2,c
  4126  001F3A  0E8E               	movlw	142
  4127  001F3C  6E04               	movwf	___ftpack@exp,c
  4128  001F3E  0E00               	movlw	0
  4129  001F40  6E05               	movwf	___ftpack@sign,c
  4130  001F42  EC07  F00D         	call	___ftpack	;wreg free
  4131  001F46  C001  F009         	movff	?___ftpack,?___lbtoft
  4132  001F4A  C002  F00A         	movff	?___ftpack+1,?___lbtoft+1
  4133  001F4E  C003  F00B         	movff	?___ftpack+2,?___lbtoft+2
  4134  001F52  0012               	return	
  4135  001F54                     __end_of___lbtoft:
  4136                           	opt stack 0
  4137                           tblptru	equ	0xFF8
  4138                           tblptrh	equ	0xFF7
  4139                           tblptrl	equ	0xFF6
  4140                           tablat	equ	0xFF5
  4141                           prodh	equ	0xFF4
  4142                           prodl	equ	0xFF3
  4143                           intcon	equ	0xFF2
  4144                           postinc0	equ	0xFEE
  4145                           wreg	equ	0xFE8
  4146                           plusw1	equ	0xFE3
  4147                           postinc2	equ	0xFDE
  4148                           postdec2	equ	0xFDD
  4149                           plusw2	equ	0xFDB
  4150                           fsr2h	equ	0xFDA
  4151                           fsr2l	equ	0xFD9
  4152                           status	equ	0xFD8
  4153                           
  4154 ;; *************** function ___fttol *****************
  4155 ;; Defined at:
  4156 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  4157 ;; Parameters:    Size  Location     Type
  4158 ;;  f1              3   54[COMRAM] float 
  4159 ;; Auto vars:     Size  Location     Type
  4160 ;;  lval            4   64[COMRAM] unsigned long 
  4161 ;;  exp1            1   68[COMRAM] unsigned char 
  4162 ;;  sign1           1   63[COMRAM] unsigned char 
  4163 ;; Return value:  Size  Location     Type
  4164 ;;                  4   54[COMRAM] long 
  4165 ;; Registers used:
  4166 ;;		wreg, status,2, status,0
  4167 ;; Tracked objects:
  4168 ;;		On entry : 0/0
  4169 ;;		On exit  : 0/0
  4170 ;;		Unchanged: 0/0
  4171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4172 ;;      Params:         4       0       0       0       0       0       0       0       0
  4173 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4174 ;;      Temps:          5       0       0       0       0       0       0       0       0
  4175 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4176 ;;Total ram usage:       15 bytes
  4177 ;; Hardware stack levels used:    1
  4178 ;; This function calls:
  4179 ;;		Nothing
  4180 ;; This function is called by:
  4181 ;;		_coinfig_ccpcon
  4182 ;;		_config_ccp1
  4183 ;;		_config_ccp2
  4184 ;;		_pow
  4185 ;;		_exp
  4186 ;;		_floor
  4187 ;;		_wait_in_ms
  4188 ;; This function uses a non-reentrant model
  4189 ;;
  4190                           
  4191                           	psect	text22
  4192  001412                     __ptext22:
  4193                           	opt stack 0
  4194  001412                     ___fttol:
  4195                           	opt stack 26
  4196                           
  4197                           ;incstack = 0
  4198  001412  C039  F03B         	movff	___fttol@f1+2,??___fttol
  4199  001416  6A3C               	clrf	(??___fttol+1)& (0+255),c
  4200  001418  6A3D               	clrf	(??___fttol+2)& (0+255),c
  4201  00141A  3438               	rlcf	___fttol@f1+1,w,c
  4202  00141C  363B               	rlcf	??___fttol& (0+255),f,c
  4203  00141E  E301               	bnc	u1531
  4204  001420  803C               	bsf	(??___fttol+1)& (0+255),0,c
  4205  001422                     u1531:
  4206  001422  503B               	movf	??___fttol,w,c
  4207  001424  6E45               	movwf	___fttol@exp1,c
  4208  001426  5045               	movf	___fttol@exp1,w,c
  4209  001428  A4D8               	btfss	status,2,c
  4210  00142A  D009               	goto	l474
  4211  00142C  0E00               	movlw	0
  4212  00142E  6E37               	movwf	?___fttol,c
  4213  001430  0E00               	movlw	0
  4214  001432  6E38               	movwf	?___fttol+1,c
  4215  001434  0E00               	movlw	0
  4216  001436  6E39               	movwf	?___fttol+2,c
  4217  001438  0E00               	movlw	0
  4218  00143A  6E3A               	movwf	?___fttol+3,c
  4219  00143C  0012               	return	
  4220  00143E                     l474:
  4221  00143E  0E17               	movlw	23
  4222  001440  6E3B               	movwf	??___fttol& (0+255),c
  4223  001442  C037  F03C         	movff	___fttol@f1,??___fttol+1
  4224  001446  C038  F03D         	movff	___fttol@f1+1,??___fttol+2
  4225  00144A  C039  F03E         	movff	___fttol@f1+2,??___fttol+3
  4226  00144E  283B               	incf	??___fttol,w,c
  4227  001450  6E3F               	movwf	(??___fttol+4)& (0+255),c
  4228  001452  D004               	goto	u1550
  4229  001454                     u1555:
  4230  001454  90D8               	bcf	status,0,c
  4231  001456  323E               	rrcf	??___fttol+3,f,c
  4232  001458  323D               	rrcf	??___fttol+2,f,c
  4233  00145A  323C               	rrcf	??___fttol+1,f,c
  4234  00145C                     u1550:
  4235  00145C  2E3F               	decfsz	(??___fttol+4)& (0+255),f,c
  4236  00145E  D7FA               	goto	u1555
  4237  001460  503C               	movf	??___fttol+1,w,c
  4238  001462  6E40               	movwf	___fttol@sign1,c
  4239  001464  8E38               	bsf	___fttol@f1+1,7,c
  4240  001466  0EFF               	movlw	255
  4241  001468  1637               	andwf	___fttol@f1,f,c
  4242  00146A  0EFF               	movlw	255
  4243  00146C  1638               	andwf	___fttol@f1+1,f,c
  4244  00146E  0E00               	movlw	0
  4245  001470  1639               	andwf	___fttol@f1+2,f,c
  4246  001472  5037               	movf	___fttol@f1,w,c
  4247  001474  6E41               	movwf	___fttol@lval,c
  4248  001476  5038               	movf	___fttol@f1+1,w,c
  4249  001478  6E42               	movwf	___fttol@lval+1,c
  4250  00147A  5039               	movf	___fttol@f1+2,w,c
  4251  00147C  6E43               	movwf	___fttol@lval+2,c
  4252  00147E  6A44               	clrf	___fttol@lval+3,c
  4253  001480  0E8E               	movlw	142
  4254  001482  5E45               	subwf	___fttol@exp1,f,c
  4255  001484  AE45               	btfss	___fttol@exp1,7,c
  4256  001486  D016               	goto	l476
  4257  001488  5045               	movf	___fttol@exp1,w,c
  4258  00148A  0A80               	xorlw	128
  4259  00148C  0F8F               	addlw	143
  4260  00148E  B0D8               	btfsc	status,0,c
  4261  001490  D009               	goto	l477
  4262  001492  0E00               	movlw	0
  4263  001494  6E37               	movwf	?___fttol,c
  4264  001496  0E00               	movlw	0
  4265  001498  6E38               	movwf	?___fttol+1,c
  4266  00149A  0E00               	movlw	0
  4267  00149C  6E39               	movwf	?___fttol+2,c
  4268  00149E  0E00               	movlw	0
  4269  0014A0  6E3A               	movwf	?___fttol+3,c
  4270  0014A2  0012               	return	
  4271  0014A4                     l477:
  4272  0014A4  90D8               	bcf	status,0,c
  4273  0014A6  3244               	rrcf	___fttol@lval+3,f,c
  4274  0014A8  3243               	rrcf	___fttol@lval+2,f,c
  4275  0014AA  3242               	rrcf	___fttol@lval+1,f,c
  4276  0014AC  3241               	rrcf	___fttol@lval,f,c
  4277  0014AE  3E45               	incfsz	___fttol@exp1,f,c
  4278  0014B0  D7F9               	goto	l477
  4279  0014B2  D015               	goto	u1590
  4280  0014B4                     l476:
  4281  0014B4  0E17               	movlw	23
  4282  0014B6  6445               	cpfsgt	___fttol@exp1,c
  4283  0014B8  D00F               	goto	l482
  4284  0014BA  0E00               	movlw	0
  4285  0014BC  6E37               	movwf	?___fttol,c
  4286  0014BE  0E00               	movlw	0
  4287  0014C0  6E38               	movwf	?___fttol+1,c
  4288  0014C2  0E00               	movlw	0
  4289  0014C4  6E39               	movwf	?___fttol+2,c
  4290  0014C6  0E00               	movlw	0
  4291  0014C8  6E3A               	movwf	?___fttol+3,c
  4292  0014CA  0012               	return	
  4293  0014CC  90D8               	bcf	status,0,c
  4294  0014CE  3641               	rlcf	___fttol@lval,f,c
  4295  0014D0  3642               	rlcf	___fttol@lval+1,f,c
  4296  0014D2  3643               	rlcf	___fttol@lval+2,f,c
  4297  0014D4  3644               	rlcf	___fttol@lval+3,f,c
  4298  0014D6  0645               	decf	___fttol@exp1,f,c
  4299  0014D8                     l482:
  4300  0014D8  5045               	movf	___fttol@exp1,w,c
  4301  0014DA  A4D8               	btfss	status,2,c
  4302  0014DC  D7F7               	goto	l483
  4303  0014DE                     u1590:
  4304  0014DE  5040               	movf	___fttol@sign1,w,c
  4305  0014E0  B4D8               	btfsc	status,2,c
  4306  0014E2  D008               	goto	l485
  4307  0014E4  1E44               	comf	___fttol@lval+3,f,c
  4308  0014E6  1E43               	comf	___fttol@lval+2,f,c
  4309  0014E8  1E42               	comf	___fttol@lval+1,f,c
  4310  0014EA  6C41               	negf	___fttol@lval,c
  4311  0014EC  0E00               	movlw	0
  4312  0014EE  2242               	addwfc	___fttol@lval+1,f,c
  4313  0014F0  2243               	addwfc	___fttol@lval+2,f,c
  4314  0014F2  2244               	addwfc	___fttol@lval+3,f,c
  4315  0014F4                     l485:
  4316  0014F4  C041  F037         	movff	___fttol@lval,?___fttol
  4317  0014F8  C042  F038         	movff	___fttol@lval+1,?___fttol+1
  4318  0014FC  C043  F039         	movff	___fttol@lval+2,?___fttol+2
  4319  001500  C044  F03A         	movff	___fttol@lval+3,?___fttol+3
  4320  001504  0012               	return	
  4321  001506                     __end_of___fttol:
  4322                           	opt stack 0
  4323                           tblptru	equ	0xFF8
  4324                           tblptrh	equ	0xFF7
  4325                           tblptrl	equ	0xFF6
  4326                           tablat	equ	0xFF5
  4327                           prodh	equ	0xFF4
  4328                           prodl	equ	0xFF3
  4329                           intcon	equ	0xFF2
  4330                           postinc0	equ	0xFEE
  4331                           wreg	equ	0xFE8
  4332                           plusw1	equ	0xFE3
  4333                           postinc2	equ	0xFDE
  4334                           postdec2	equ	0xFDD
  4335                           plusw2	equ	0xFDB
  4336                           fsr2h	equ	0xFDA
  4337                           fsr2l	equ	0xFD9
  4338                           status	equ	0xFD8
  4339                           
  4340 ;; *************** function ___ftmul *****************
  4341 ;; Defined at:
  4342 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  4343 ;; Parameters:    Size  Location     Type
  4344 ;;  f1              3   24[COMRAM] float 
  4345 ;;  f2              3   27[COMRAM] float 
  4346 ;; Auto vars:     Size  Location     Type
  4347 ;;  f3_as_produc    3   34[COMRAM] unsigned um
  4348 ;;  sign            1   38[COMRAM] unsigned char 
  4349 ;;  cntr            1   37[COMRAM] unsigned char 
  4350 ;;  exp             1   33[COMRAM] unsigned char 
  4351 ;; Return value:  Size  Location     Type
  4352 ;;                  3   24[COMRAM] float 
  4353 ;; Registers used:
  4354 ;;		wreg, status,2, status,0, cstack
  4355 ;; Tracked objects:
  4356 ;;		On entry : 0/0
  4357 ;;		On exit  : 0/0
  4358 ;;		Unchanged: 0/0
  4359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4360 ;;      Params:         6       0       0       0       0       0       0       0       0
  4361 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4362 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4363 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4364 ;;Total ram usage:       15 bytes
  4365 ;; Hardware stack levels used:    1
  4366 ;; Hardware stack levels required when called:    1
  4367 ;; This function calls:
  4368 ;;		___ftpack
  4369 ;; This function is called by:
  4370 ;;		_coinfig_ccpcon
  4371 ;;		_config_ccp1
  4372 ;;		_config_ccp2
  4373 ;;		_pow
  4374 ;;		_exp
  4375 ;;		_log
  4376 ;;		_eval_poly
  4377 ;; This function uses a non-reentrant model
  4378 ;;
  4379                           
  4380                           	psect	text23
  4381  001506                     __ptext23:
  4382                           	opt stack 0
  4383  001506                     ___ftmul:
  4384                           	opt stack 25
  4385                           
  4386                           ;incstack = 0
  4387  001506  C01B  F01F         	movff	___ftmul@f1+2,??___ftmul
  4388  00150A  6A20               	clrf	(??___ftmul+1)& (0+255),c
  4389  00150C  6A21               	clrf	(??___ftmul+2)& (0+255),c
  4390  00150E  341A               	rlcf	___ftmul@f1+1,w,c
  4391  001510  361F               	rlcf	??___ftmul& (0+255),f,c
  4392  001512  E301               	bnc	u1441
  4393  001514  8020               	bsf	(??___ftmul+1)& (0+255),0,c
  4394  001516                     u1441:
  4395  001516  501F               	movf	??___ftmul,w,c
  4396  001518  6E22               	movwf	___ftmul@exp,c
  4397  00151A  5022               	movf	___ftmul@exp,w,c
  4398  00151C  A4D8               	btfss	status,2,c
  4399  00151E  D007               	goto	l453
  4400  001520  0E00               	movlw	0
  4401  001522  6E19               	movwf	?___ftmul,c
  4402  001524  0E00               	movlw	0
  4403  001526  6E1A               	movwf	?___ftmul+1,c
  4404  001528  0E00               	movlw	0
  4405  00152A  6E1B               	movwf	?___ftmul+2,c
  4406  00152C  0012               	return	
  4407  00152E                     l453:
  4408  00152E  C01E  F01F         	movff	___ftmul@f2+2,??___ftmul
  4409  001532  6A20               	clrf	(??___ftmul+1)& (0+255),c
  4410  001534  6A21               	clrf	(??___ftmul+2)& (0+255),c
  4411  001536  341D               	rlcf	___ftmul@f2+1,w,c
  4412  001538  361F               	rlcf	??___ftmul& (0+255),f,c
  4413  00153A  E301               	bnc	u1461
  4414  00153C  8020               	bsf	(??___ftmul+1)& (0+255),0,c
  4415  00153E                     u1461:
  4416  00153E  501F               	movf	??___ftmul,w,c
  4417  001540  6E27               	movwf	___ftmul@sign,c
  4418  001542  5027               	movf	___ftmul@sign,w,c
  4419  001544  A4D8               	btfss	status,2,c
  4420  001546  D007               	goto	l455
  4421  001548  0E00               	movlw	0
  4422  00154A  6E19               	movwf	?___ftmul,c
  4423  00154C  0E00               	movlw	0
  4424  00154E  6E1A               	movwf	?___ftmul+1,c
  4425  001550  0E00               	movlw	0
  4426  001552  6E1B               	movwf	?___ftmul+2,c
  4427  001554  0012               	return	
  4428  001556                     l455:
  4429  001556  5027               	movf	___ftmul@sign,w,c
  4430  001558  0F7B               	addlw	123
  4431  00155A  2622               	addwf	___ftmul@exp,f,c
  4432  00155C  C01B  F027         	movff	___ftmul@f1+2,___ftmul@sign
  4433  001560  501E               	movf	___ftmul@f2+2,w,c
  4434  001562  1A27               	xorwf	___ftmul@sign,f,c
  4435  001564  0E80               	movlw	128
  4436  001566  1627               	andwf	___ftmul@sign,f,c
  4437  001568  8E1A               	bsf	___ftmul@f1+1,7,c
  4438  00156A  8E1D               	bsf	___ftmul@f2+1,7,c
  4439  00156C  0EFF               	movlw	255
  4440  00156E  161C               	andwf	___ftmul@f2,f,c
  4441  001570  0EFF               	movlw	255
  4442  001572  161D               	andwf	___ftmul@f2+1,f,c
  4443  001574  0E00               	movlw	0
  4444  001576  161E               	andwf	___ftmul@f2+2,f,c
  4445  001578  0E00               	movlw	0
  4446  00157A  6E23               	movwf	___ftmul@f3_as_product,c
  4447  00157C  0E00               	movlw	0
  4448  00157E  6E24               	movwf	___ftmul@f3_as_product+1,c
  4449  001580  0E00               	movlw	0
  4450  001582  6E25               	movwf	___ftmul@f3_as_product+2,c
  4451  001584  0E07               	movlw	7
  4452  001586  6E26               	movwf	___ftmul@cntr,c
  4453  001588  A019               	btfss	___ftmul@f1,0,c
  4454  00158A  D006               	goto	l457
  4455  00158C  501C               	movf	___ftmul@f2,w,c
  4456  00158E  2623               	addwf	___ftmul@f3_as_product,f,c
  4457  001590  501D               	movf	___ftmul@f2+1,w,c
  4458  001592  2224               	addwfc	___ftmul@f3_as_product+1,f,c
  4459  001594  501E               	movf	___ftmul@f2+2,w,c
  4460  001596  2225               	addwfc	___ftmul@f3_as_product+2,f,c
  4461  001598                     l457:
  4462  001598  90D8               	bcf	status,0,c
  4463  00159A  321B               	rrcf	___ftmul@f1+2,f,c
  4464  00159C  321A               	rrcf	___ftmul@f1+1,f,c
  4465  00159E  3219               	rrcf	___ftmul@f1,f,c
  4466  0015A0  90D8               	bcf	status,0,c
  4467  0015A2  361C               	rlcf	___ftmul@f2,f,c
  4468  0015A4  361D               	rlcf	___ftmul@f2+1,f,c
  4469  0015A6  361E               	rlcf	___ftmul@f2+2,f,c
  4470  0015A8  2E26               	decfsz	___ftmul@cntr,f,c
  4471  0015AA  D7EE               	goto	l456
  4472  0015AC  0E09               	movlw	9
  4473  0015AE  6E26               	movwf	___ftmul@cntr,c
  4474  0015B0  A019               	btfss	___ftmul@f1,0,c
  4475  0015B2  D006               	goto	l460
  4476  0015B4  501C               	movf	___ftmul@f2,w,c
  4477  0015B6  2623               	addwf	___ftmul@f3_as_product,f,c
  4478  0015B8  501D               	movf	___ftmul@f2+1,w,c
  4479  0015BA  2224               	addwfc	___ftmul@f3_as_product+1,f,c
  4480  0015BC  501E               	movf	___ftmul@f2+2,w,c
  4481  0015BE  2225               	addwfc	___ftmul@f3_as_product+2,f,c
  4482  0015C0                     l460:
  4483  0015C0  90D8               	bcf	status,0,c
  4484  0015C2  321B               	rrcf	___ftmul@f1+2,f,c
  4485  0015C4  321A               	rrcf	___ftmul@f1+1,f,c
  4486  0015C6  3219               	rrcf	___ftmul@f1,f,c
  4487  0015C8  90D8               	bcf	status,0,c
  4488  0015CA  3225               	rrcf	___ftmul@f3_as_product+2,f,c
  4489  0015CC  3224               	rrcf	___ftmul@f3_as_product+1,f,c
  4490  0015CE  3223               	rrcf	___ftmul@f3_as_product,f,c
  4491  0015D0  2E26               	decfsz	___ftmul@cntr,f,c
  4492  0015D2  D7EE               	goto	l459
  4493  0015D4  C023  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  4494  0015D8  C024  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4495  0015DC  C025  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4496  0015E0  C022  F004         	movff	___ftmul@exp,___ftpack@exp
  4497  0015E4  C027  F005         	movff	___ftmul@sign,___ftpack@sign
  4498  0015E8  EC07  F00D         	call	___ftpack	;wreg free
  4499  0015EC  C001  F019         	movff	?___ftpack,?___ftmul
  4500  0015F0  C002  F01A         	movff	?___ftpack+1,?___ftmul+1
  4501  0015F4  C003  F01B         	movff	?___ftpack+2,?___ftmul+2
  4502  0015F8  0012               	return	
  4503  0015FA                     __end_of___ftmul:
  4504                           	opt stack 0
  4505                           tblptru	equ	0xFF8
  4506                           tblptrh	equ	0xFF7
  4507                           tblptrl	equ	0xFF6
  4508                           tablat	equ	0xFF5
  4509                           prodh	equ	0xFF4
  4510                           prodl	equ	0xFF3
  4511                           intcon	equ	0xFF2
  4512                           postinc0	equ	0xFEE
  4513                           wreg	equ	0xFE8
  4514                           plusw1	equ	0xFE3
  4515                           postinc2	equ	0xFDE
  4516                           postdec2	equ	0xFDD
  4517                           plusw2	equ	0xFDB
  4518                           fsr2h	equ	0xFDA
  4519                           fsr2l	equ	0xFD9
  4520                           status	equ	0xFD8
  4521                           
  4522 ;; *************** function ___ftdiv *****************
  4523 ;; Defined at:
  4524 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  4525 ;; Parameters:    Size  Location     Type
  4526 ;;  f1              3   39[COMRAM] float 
  4527 ;;  f2              3   42[COMRAM] float 
  4528 ;; Auto vars:     Size  Location     Type
  4529 ;;  f3              3   49[COMRAM] float 
  4530 ;;  sign            1   53[COMRAM] unsigned char 
  4531 ;;  exp             1   52[COMRAM] unsigned char 
  4532 ;;  cntr            1   48[COMRAM] unsigned char 
  4533 ;; Return value:  Size  Location     Type
  4534 ;;                  3   39[COMRAM] float 
  4535 ;; Registers used:
  4536 ;;		wreg, status,2, status,0, cstack
  4537 ;; Tracked objects:
  4538 ;;		On entry : 0/0
  4539 ;;		On exit  : 0/0
  4540 ;;		Unchanged: 0/0
  4541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4542 ;;      Params:         6       0       0       0       0       0       0       0       0
  4543 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4544 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4545 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4546 ;;Total ram usage:       15 bytes
  4547 ;; Hardware stack levels used:    1
  4548 ;; Hardware stack levels required when called:    1
  4549 ;; This function calls:
  4550 ;;		___ftpack
  4551 ;; This function is called by:
  4552 ;;		_coinfig_ccpcon
  4553 ;;		_config_ccp1
  4554 ;;		_config_ccp2
  4555 ;;		_exp
  4556 ;;		_wait_in_ms
  4557 ;; This function uses a non-reentrant model
  4558 ;;
  4559                           
  4560                           	psect	text24
  4561  0015FA                     __ptext24:
  4562                           	opt stack 0
  4563  0015FA                     ___ftdiv:
  4564                           	opt stack 26
  4565                           
  4566                           ;incstack = 0
  4567  0015FA  C02A  F02E         	movff	___ftdiv@f1+2,??___ftdiv
  4568  0015FE  6A2F               	clrf	(??___ftdiv+1)& (0+255),c
  4569  001600  6A30               	clrf	(??___ftdiv+2)& (0+255),c
  4570  001602  3429               	rlcf	___ftdiv@f1+1,w,c
  4571  001604  362E               	rlcf	??___ftdiv& (0+255),f,c
  4572  001606  E301               	bnc	u1631
  4573  001608  802F               	bsf	(??___ftdiv+1)& (0+255),0,c
  4574  00160A                     u1631:
  4575  00160A  502E               	movf	??___ftdiv,w,c
  4576  00160C  6E35               	movwf	___ftdiv@exp,c
  4577  00160E  5035               	movf	___ftdiv@exp,w,c
  4578  001610  A4D8               	btfss	status,2,c
  4579  001612  D007               	goto	l438
  4580  001614  0E00               	movlw	0
  4581  001616  6E28               	movwf	?___ftdiv,c
  4582  001618  0E00               	movlw	0
  4583  00161A  6E29               	movwf	?___ftdiv+1,c
  4584  00161C  0E00               	movlw	0
  4585  00161E  6E2A               	movwf	?___ftdiv+2,c
  4586  001620  0012               	return	
  4587  001622                     l438:
  4588  001622  C02D  F02E         	movff	___ftdiv@f2+2,??___ftdiv
  4589  001626  6A2F               	clrf	(??___ftdiv+1)& (0+255),c
  4590  001628  6A30               	clrf	(??___ftdiv+2)& (0+255),c
  4591  00162A  342C               	rlcf	___ftdiv@f2+1,w,c
  4592  00162C  362E               	rlcf	??___ftdiv& (0+255),f,c
  4593  00162E  E301               	bnc	u1651
  4594  001630  802F               	bsf	(??___ftdiv+1)& (0+255),0,c
  4595  001632                     u1651:
  4596  001632  502E               	movf	??___ftdiv,w,c
  4597  001634  6E36               	movwf	___ftdiv@sign,c
  4598  001636  5036               	movf	___ftdiv@sign,w,c
  4599  001638  A4D8               	btfss	status,2,c
  4600  00163A  D007               	goto	l440
  4601  00163C  0E00               	movlw	0
  4602  00163E  6E28               	movwf	?___ftdiv,c
  4603  001640  0E00               	movlw	0
  4604  001642  6E29               	movwf	?___ftdiv+1,c
  4605  001644  0E00               	movlw	0
  4606  001646  6E2A               	movwf	?___ftdiv+2,c
  4607  001648  0012               	return	
  4608  00164A                     l440:
  4609  00164A  0E00               	movlw	0
  4610  00164C  6E32               	movwf	___ftdiv@f3,c
  4611  00164E  0E00               	movlw	0
  4612  001650  6E33               	movwf	___ftdiv@f3+1,c
  4613  001652  0E00               	movlw	0
  4614  001654  6E34               	movwf	___ftdiv@f3+2,c
  4615  001656  5036               	movf	___ftdiv@sign,w,c
  4616  001658  0F89               	addlw	137
  4617  00165A  5E35               	subwf	___ftdiv@exp,f,c
  4618  00165C  C02A  F036         	movff	___ftdiv@f1+2,___ftdiv@sign
  4619  001660  502D               	movf	___ftdiv@f2+2,w,c
  4620  001662  1A36               	xorwf	___ftdiv@sign,f,c
  4621  001664  0E80               	movlw	128
  4622  001666  1636               	andwf	___ftdiv@sign,f,c
  4623  001668  8E29               	bsf	___ftdiv@f1+1,7,c
  4624  00166A  0EFF               	movlw	255
  4625  00166C  1628               	andwf	___ftdiv@f1,f,c
  4626  00166E  0EFF               	movlw	255
  4627  001670  1629               	andwf	___ftdiv@f1+1,f,c
  4628  001672  0E00               	movlw	0
  4629  001674  162A               	andwf	___ftdiv@f1+2,f,c
  4630  001676  8E2C               	bsf	___ftdiv@f2+1,7,c
  4631  001678  0EFF               	movlw	255
  4632  00167A  162B               	andwf	___ftdiv@f2,f,c
  4633  00167C  0EFF               	movlw	255
  4634  00167E  162C               	andwf	___ftdiv@f2+1,f,c
  4635  001680  0E00               	movlw	0
  4636  001682  162D               	andwf	___ftdiv@f2+2,f,c
  4637  001684  0E18               	movlw	24
  4638  001686  6E31               	movwf	___ftdiv@cntr,c
  4639  001688  90D8               	bcf	status,0,c
  4640  00168A  3632               	rlcf	___ftdiv@f3,f,c
  4641  00168C  3633               	rlcf	___ftdiv@f3+1,f,c
  4642  00168E  3634               	rlcf	___ftdiv@f3+2,f,c
  4643  001690  502B               	movf	___ftdiv@f2,w,c
  4644  001692  5C28               	subwf	___ftdiv@f1,w,c
  4645  001694  502C               	movf	___ftdiv@f2+1,w,c
  4646  001696  5829               	subwfb	___ftdiv@f1+1,w,c
  4647  001698  502D               	movf	___ftdiv@f2+2,w,c
  4648  00169A  582A               	subwfb	___ftdiv@f1+2,w,c
  4649  00169C  A0D8               	btfss	status,0,c
  4650  00169E  D007               	goto	l442
  4651  0016A0  502B               	movf	___ftdiv@f2,w,c
  4652  0016A2  5E28               	subwf	___ftdiv@f1,f,c
  4653  0016A4  502C               	movf	___ftdiv@f2+1,w,c
  4654  0016A6  5A29               	subwfb	___ftdiv@f1+1,f,c
  4655  0016A8  502D               	movf	___ftdiv@f2+2,w,c
  4656  0016AA  5A2A               	subwfb	___ftdiv@f1+2,f,c
  4657  0016AC  8032               	bsf	___ftdiv@f3,0,c
  4658  0016AE                     l442:
  4659  0016AE  90D8               	bcf	status,0,c
  4660  0016B0  3628               	rlcf	___ftdiv@f1,f,c
  4661  0016B2  3629               	rlcf	___ftdiv@f1+1,f,c
  4662  0016B4  362A               	rlcf	___ftdiv@f1+2,f,c
  4663  0016B6  2E31               	decfsz	___ftdiv@cntr,f,c
  4664  0016B8  D7E7               	goto	l441
  4665  0016BA  C032  F001         	movff	___ftdiv@f3,___ftpack@arg
  4666  0016BE  C033  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  4667  0016C2  C034  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  4668  0016C6  C035  F004         	movff	___ftdiv@exp,___ftpack@exp
  4669  0016CA  C036  F005         	movff	___ftdiv@sign,___ftpack@sign
  4670  0016CE  EC07  F00D         	call	___ftpack	;wreg free
  4671  0016D2  C001  F028         	movff	?___ftpack,?___ftdiv
  4672  0016D6  C002  F029         	movff	?___ftpack+1,?___ftdiv+1
  4673  0016DA  C003  F02A         	movff	?___ftpack+2,?___ftdiv+2
  4674  0016DE  0012               	return	
  4675  0016E0                     __end_of___ftdiv:
  4676                           	opt stack 0
  4677                           tblptru	equ	0xFF8
  4678                           tblptrh	equ	0xFF7
  4679                           tblptrl	equ	0xFF6
  4680                           tablat	equ	0xFF5
  4681                           prodh	equ	0xFF4
  4682                           prodl	equ	0xFF3
  4683                           intcon	equ	0xFF2
  4684                           postinc0	equ	0xFEE
  4685                           wreg	equ	0xFE8
  4686                           plusw1	equ	0xFE3
  4687                           postinc2	equ	0xFDE
  4688                           postdec2	equ	0xFDD
  4689                           plusw2	equ	0xFDB
  4690                           fsr2h	equ	0xFDA
  4691                           fsr2l	equ	0xFD9
  4692                           status	equ	0xFD8
  4693                           
  4694 ;; *************** function ___ftadd *****************
  4695 ;; Defined at:
  4696 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  4697 ;; Parameters:    Size  Location     Type
  4698 ;;  f1              3   12[COMRAM] float 
  4699 ;;  f2              3   15[COMRAM] float 
  4700 ;; Auto vars:     Size  Location     Type
  4701 ;;  exp1            1   23[COMRAM] unsigned char 
  4702 ;;  exp2            1   22[COMRAM] unsigned char 
  4703 ;;  sign            1   21[COMRAM] unsigned char 
  4704 ;; Return value:  Size  Location     Type
  4705 ;;                  3   12[COMRAM] float 
  4706 ;; Registers used:
  4707 ;;		wreg, status,2, status,0, cstack
  4708 ;; Tracked objects:
  4709 ;;		On entry : 0/0
  4710 ;;		On exit  : 0/0
  4711 ;;		Unchanged: 0/0
  4712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4713 ;;      Params:         6       0       0       0       0       0       0       0       0
  4714 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4715 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4716 ;;      Totals:        12       0       0       0       0       0       0       0       0
  4717 ;;Total ram usage:       12 bytes
  4718 ;; Hardware stack levels used:    1
  4719 ;; Hardware stack levels required when called:    1
  4720 ;; This function calls:
  4721 ;;		___ftpack
  4722 ;; This function is called by:
  4723 ;;		_coinfig_ccpcon
  4724 ;;		_config_ccp1
  4725 ;;		_config_ccp2
  4726 ;;		___ftsub
  4727 ;;		_floor
  4728 ;;		_log
  4729 ;;		_eval_poly
  4730 ;; This function uses a non-reentrant model
  4731 ;;
  4732                           
  4733                           	psect	text25
  4734  000FCC                     __ptext25:
  4735                           	opt stack 0
  4736  000FCC                     ___ftadd:
  4737                           	opt stack 25
  4738                           
  4739                           ;incstack = 0
  4740  000FCC  C00F  F013         	movff	___ftadd@f1+2,??___ftadd
  4741  000FD0  6A14               	clrf	(??___ftadd+1)& (0+255),c
  4742  000FD2  6A15               	clrf	(??___ftadd+2)& (0+255),c
  4743  000FD4  340E               	rlcf	___ftadd@f1+1,w,c
  4744  000FD6  3613               	rlcf	??___ftadd& (0+255),f,c
  4745  000FD8  E301               	bnc	u1231
  4746  000FDA  8014               	bsf	(??___ftadd+1)& (0+255),0,c
  4747  000FDC                     u1231:
  4748  000FDC  5013               	movf	??___ftadd,w,c
  4749  000FDE  6E18               	movwf	___ftadd@exp1,c
  4750  000FE0  C012  F013         	movff	___ftadd@f2+2,??___ftadd
  4751  000FE4  6A14               	clrf	(??___ftadd+1)& (0+255),c
  4752  000FE6  6A15               	clrf	(??___ftadd+2)& (0+255),c
  4753  000FE8  3411               	rlcf	___ftadd@f2+1,w,c
  4754  000FEA  3613               	rlcf	??___ftadd& (0+255),f,c
  4755  000FEC  E301               	bnc	u1241
  4756  000FEE  8014               	bsf	(??___ftadd+1)& (0+255),0,c
  4757  000FF0                     u1241:
  4758  000FF0  5013               	movf	??___ftadd,w,c
  4759  000FF2  6E17               	movwf	___ftadd@exp2,c
  4760  000FF4  5018               	movf	___ftadd@exp1,w,c
  4761  000FF6  B4D8               	btfsc	status,2,c
  4762  000FF8  D00B               	goto	u1270
  4763  000FFA  5017               	movf	___ftadd@exp2,w,c
  4764  000FFC  5C18               	subwf	___ftadd@exp1,w,c
  4765  000FFE  B0D8               	btfsc	status,0,c
  4766  001000  D00E               	goto	l405
  4767  001002  5018               	movf	___ftadd@exp1,w,c
  4768  001004  0800               	sublw	0
  4769  001006  2417               	addwf	___ftadd@exp2,w,c
  4770  001008  6E13               	movwf	??___ftadd& (0+255),c
  4771  00100A  0E18               	movlw	24
  4772  00100C  6413               	cpfsgt	??___ftadd,c
  4773  00100E  D007               	goto	l405
  4774  001010                     u1270:
  4775  001010  C010  F00D         	movff	___ftadd@f2,?___ftadd
  4776  001014  C011  F00E         	movff	___ftadd@f2+1,?___ftadd+1
  4777  001018  C012  F00F         	movff	___ftadd@f2+2,?___ftadd+2
  4778  00101C  0012               	return	
  4779  00101E                     l405:
  4780  00101E  5017               	movf	___ftadd@exp2,w,c
  4781  001020  B4D8               	btfsc	status,2,c
  4782  001022  D00B               	goto	u1300
  4783  001024  5018               	movf	___ftadd@exp1,w,c
  4784  001026  5C17               	subwf	___ftadd@exp2,w,c
  4785  001028  B0D8               	btfsc	status,0,c
  4786  00102A  D00E               	goto	l409
  4787  00102C  5017               	movf	___ftadd@exp2,w,c
  4788  00102E  0800               	sublw	0
  4789  001030  2418               	addwf	___ftadd@exp1,w,c
  4790  001032  6E13               	movwf	??___ftadd& (0+255),c
  4791  001034  0E18               	movlw	24
  4792  001036  6413               	cpfsgt	??___ftadd,c
  4793  001038  D007               	goto	l409
  4794  00103A                     u1300:
  4795  00103A  C00D  F00D         	movff	___ftadd@f1,?___ftadd
  4796  00103E  C00E  F00E         	movff	___ftadd@f1+1,?___ftadd+1
  4797  001042  C00F  F00F         	movff	___ftadd@f1+2,?___ftadd+2
  4798  001046  0012               	return	
  4799  001048                     l409:
  4800  001048  0E06               	movlw	6
  4801  00104A  6E16               	movwf	___ftadd@sign,c
  4802  00104C  BE0F               	btfsc	___ftadd@f1+2,7,c
  4803  00104E  8E16               	bsf	___ftadd@sign,7,c
  4804  001050  BE12               	btfsc	___ftadd@f2+2,7,c
  4805  001052  8C16               	bsf	___ftadd@sign,6,c
  4806  001054  8E0E               	bsf	___ftadd@f1+1,7,c
  4807  001056  0EFF               	movlw	255
  4808  001058  160D               	andwf	___ftadd@f1,f,c
  4809  00105A  0EFF               	movlw	255
  4810  00105C  160E               	andwf	___ftadd@f1+1,f,c
  4811  00105E  0E00               	movlw	0
  4812  001060  160F               	andwf	___ftadd@f1+2,f,c
  4813  001062  8E11               	bsf	___ftadd@f2+1,7,c
  4814  001064  0EFF               	movlw	255
  4815  001066  1610               	andwf	___ftadd@f2,f,c
  4816  001068  0EFF               	movlw	255
  4817  00106A  1611               	andwf	___ftadd@f2+1,f,c
  4818  00106C  0E00               	movlw	0
  4819  00106E  1612               	andwf	___ftadd@f2+2,f,c
  4820  001070  5017               	movf	___ftadd@exp2,w,c
  4821  001072  5C18               	subwf	___ftadd@exp1,w,c
  4822  001074  B0D8               	btfsc	status,0,c
  4823  001076  D01B               	goto	l414
  4824  001078                     u1330:
  4825  001078  90D8               	bcf	status,0,c
  4826  00107A  3610               	rlcf	___ftadd@f2,f,c
  4827  00107C  3611               	rlcf	___ftadd@f2+1,f,c
  4828  00107E  3612               	rlcf	___ftadd@f2+2,f,c
  4829  001080  0617               	decf	___ftadd@exp2,f,c
  4830  001082  5018               	movf	___ftadd@exp1,w,c
  4831  001084  1817               	xorwf	___ftadd@exp2,w,c
  4832  001086  B4D8               	btfsc	status,2,c
  4833  001088  D00D               	goto	l419
  4834  00108A  0616               	decf	___ftadd@sign,f,c
  4835  00108C  C016  F013         	movff	___ftadd@sign,??___ftadd
  4836  001090  0E07               	movlw	7
  4837  001092  1613               	andwf	??___ftadd,f,c
  4838  001094  B4D8               	btfsc	status,2,c
  4839  001096  D006               	goto	l419
  4840  001098  D7EF               	goto	u1330
  4841  00109A  90D8               	bcf	status,0,c
  4842  00109C  320F               	rrcf	___ftadd@f1+2,f,c
  4843  00109E  320E               	rrcf	___ftadd@f1+1,f,c
  4844  0010A0  320D               	rrcf	___ftadd@f1,f,c
  4845  0010A2  2A18               	incf	___ftadd@exp1,f,c
  4846  0010A4                     l419:
  4847  0010A4  5017               	movf	___ftadd@exp2,w,c
  4848  0010A6  1818               	xorwf	___ftadd@exp1,w,c
  4849  0010A8  B4D8               	btfsc	status,2,c
  4850  0010AA  D01F               	goto	u1400
  4851  0010AC  D7F6               	goto	l420
  4852  0010AE                     l414:
  4853  0010AE  5018               	movf	___ftadd@exp1,w,c
  4854  0010B0  5C17               	subwf	___ftadd@exp2,w,c
  4855  0010B2  B0D8               	btfsc	status,0,c
  4856  0010B4  D01A               	goto	u1400
  4857  0010B6                     u1370:
  4858  0010B6  90D8               	bcf	status,0,c
  4859  0010B8  360D               	rlcf	___ftadd@f1,f,c
  4860  0010BA  360E               	rlcf	___ftadd@f1+1,f,c
  4861  0010BC  360F               	rlcf	___ftadd@f1+2,f,c
  4862  0010BE  0618               	decf	___ftadd@exp1,f,c
  4863  0010C0  5018               	movf	___ftadd@exp1,w,c
  4864  0010C2  1817               	xorwf	___ftadd@exp2,w,c
  4865  0010C4  B4D8               	btfsc	status,2,c
  4866  0010C6  D00D               	goto	l428
  4867  0010C8  0616               	decf	___ftadd@sign,f,c
  4868  0010CA  C016  F013         	movff	___ftadd@sign,??___ftadd
  4869  0010CE  0E07               	movlw	7
  4870  0010D0  1613               	andwf	??___ftadd,f,c
  4871  0010D2  B4D8               	btfsc	status,2,c
  4872  0010D4  D006               	goto	l428
  4873  0010D6  D7EF               	goto	u1370
  4874  0010D8  90D8               	bcf	status,0,c
  4875  0010DA  3212               	rrcf	___ftadd@f2+2,f,c
  4876  0010DC  3211               	rrcf	___ftadd@f2+1,f,c
  4877  0010DE  3210               	rrcf	___ftadd@f2,f,c
  4878  0010E0  2A17               	incf	___ftadd@exp2,f,c
  4879  0010E2                     l428:
  4880  0010E2  5017               	movf	___ftadd@exp2,w,c
  4881  0010E4  1818               	xorwf	___ftadd@exp1,w,c
  4882  0010E6  A4D8               	btfss	status,2,c
  4883  0010E8  D7F7               	goto	l429
  4884  0010EA                     u1400:
  4885  0010EA  AE16               	btfss	___ftadd@sign,7,c
  4886  0010EC  D00C               	goto	l431
  4887  0010EE  0EFF               	movlw	255
  4888  0010F0  1A0D               	xorwf	___ftadd@f1,f,c
  4889  0010F2  0EFF               	movlw	255
  4890  0010F4  1A0E               	xorwf	___ftadd@f1+1,f,c
  4891  0010F6  0EFF               	movlw	255
  4892  0010F8  1A0F               	xorwf	___ftadd@f1+2,f,c
  4893  0010FA  0E01               	movlw	1
  4894  0010FC  260D               	addwf	___ftadd@f1,f,c
  4895  0010FE  0E00               	movlw	0
  4896  001100  220E               	addwfc	___ftadd@f1+1,f,c
  4897  001102  0E00               	movlw	0
  4898  001104  220F               	addwfc	___ftadd@f1+2,f,c
  4899  001106                     l431:
  4900  001106  AC16               	btfss	___ftadd@sign,6,c
  4901  001108  D00C               	goto	l432
  4902  00110A  0EFF               	movlw	255
  4903  00110C  1A10               	xorwf	___ftadd@f2,f,c
  4904  00110E  0EFF               	movlw	255
  4905  001110  1A11               	xorwf	___ftadd@f2+1,f,c
  4906  001112  0EFF               	movlw	255
  4907  001114  1A12               	xorwf	___ftadd@f2+2,f,c
  4908  001116  0E01               	movlw	1
  4909  001118  2610               	addwf	___ftadd@f2,f,c
  4910  00111A  0E00               	movlw	0
  4911  00111C  2211               	addwfc	___ftadd@f2+1,f,c
  4912  00111E  0E00               	movlw	0
  4913  001120  2212               	addwfc	___ftadd@f2+2,f,c
  4914  001122                     l432:
  4915  001122  0E00               	movlw	0
  4916  001124  6E16               	movwf	___ftadd@sign,c
  4917  001126  500D               	movf	___ftadd@f1,w,c
  4918  001128  2610               	addwf	___ftadd@f2,f,c
  4919  00112A  500E               	movf	___ftadd@f1+1,w,c
  4920  00112C  2211               	addwfc	___ftadd@f2+1,f,c
  4921  00112E  500F               	movf	___ftadd@f1+2,w,c
  4922  001130  2212               	addwfc	___ftadd@f2+2,f,c
  4923  001132  AE12               	btfss	___ftadd@f2+2,7,c
  4924  001134  D00E               	goto	l433
  4925  001136  0EFF               	movlw	255
  4926  001138  1A10               	xorwf	___ftadd@f2,f,c
  4927  00113A  0EFF               	movlw	255
  4928  00113C  1A11               	xorwf	___ftadd@f2+1,f,c
  4929  00113E  0EFF               	movlw	255
  4930  001140  1A12               	xorwf	___ftadd@f2+2,f,c
  4931  001142  0E01               	movlw	1
  4932  001144  2610               	addwf	___ftadd@f2,f,c
  4933  001146  0E00               	movlw	0
  4934  001148  2211               	addwfc	___ftadd@f2+1,f,c
  4935  00114A  0E00               	movlw	0
  4936  00114C  2212               	addwfc	___ftadd@f2+2,f,c
  4937  00114E  0E01               	movlw	1
  4938  001150  6E16               	movwf	___ftadd@sign,c
  4939  001152                     l433:
  4940  001152  C010  F001         	movff	___ftadd@f2,___ftpack@arg
  4941  001156  C011  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  4942  00115A  C012  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  4943  00115E  C018  F004         	movff	___ftadd@exp1,___ftpack@exp
  4944  001162  C016  F005         	movff	___ftadd@sign,___ftpack@sign
  4945  001166  EC07  F00D         	call	___ftpack	;wreg free
  4946  00116A  C001  F00D         	movff	?___ftpack,?___ftadd
  4947  00116E  C002  F00E         	movff	?___ftpack+1,?___ftadd+1
  4948  001172  C003  F00F         	movff	?___ftpack+2,?___ftadd+2
  4949  001176  0012               	return	
  4950  001178                     __end_of___ftadd:
  4951                           	opt stack 0
  4952                           tblptru	equ	0xFF8
  4953                           tblptrh	equ	0xFF7
  4954                           tblptrl	equ	0xFF6
  4955                           tablat	equ	0xFF5
  4956                           prodh	equ	0xFF4
  4957                           prodl	equ	0xFF3
  4958                           intcon	equ	0xFF2
  4959                           postinc0	equ	0xFEE
  4960                           wreg	equ	0xFE8
  4961                           plusw1	equ	0xFE3
  4962                           postinc2	equ	0xFDE
  4963                           postdec2	equ	0xFDD
  4964                           plusw2	equ	0xFDB
  4965                           fsr2h	equ	0xFDA
  4966                           fsr2l	equ	0xFD9
  4967                           status	equ	0xFD8
  4968                           
  4969 ;; *************** function ___ftpack *****************
  4970 ;; Defined at:
  4971 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  4972 ;; Parameters:    Size  Location     Type
  4973 ;;  arg             3    0[COMRAM] unsigned um
  4974 ;;  exp             1    3[COMRAM] unsigned char 
  4975 ;;  sign            1    4[COMRAM] unsigned char 
  4976 ;; Auto vars:     Size  Location     Type
  4977 ;;		None
  4978 ;; Return value:  Size  Location     Type
  4979 ;;                  3    0[COMRAM] float 
  4980 ;; Registers used:
  4981 ;;		wreg, status,2, status,0
  4982 ;; Tracked objects:
  4983 ;;		On entry : 0/0
  4984 ;;		On exit  : 0/0
  4985 ;;		Unchanged: 0/0
  4986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4987 ;;      Params:         5       0       0       0       0       0       0       0       0
  4988 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4989 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4990 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4991 ;;Total ram usage:        8 bytes
  4992 ;; Hardware stack levels used:    1
  4993 ;; This function calls:
  4994 ;;		Nothing
  4995 ;; This function is called by:
  4996 ;;		___altoft
  4997 ;;		___awtoft
  4998 ;;		___ftadd
  4999 ;;		___ftdiv
  5000 ;;		___ftmul
  5001 ;;		___lbtoft
  5002 ;;		___lltoft
  5003 ;; This function uses a non-reentrant model
  5004 ;;
  5005                           
  5006                           	psect	text26
  5007  001A0E                     __ptext26:
  5008                           	opt stack 0
  5009  001A0E                     ___ftpack:
  5010                           	opt stack 28
  5011                           
  5012                           ;incstack = 0
  5013  001A0E  5004               	movf	___ftpack@exp,w,c
  5014  001A10  B4D8               	btfsc	status,2,c
  5015  001A12  D005               	goto	u1140
  5016  001A14  5001               	movf	___ftpack@arg,w,c
  5017  001A16  1002               	iorwf	___ftpack@arg+1,w,c
  5018  001A18  1003               	iorwf	___ftpack@arg+2,w,c
  5019  001A1A  A4D8               	btfss	status,2,c
  5020  001A1C  D00C               	goto	l374
  5021  001A1E                     u1140:
  5022  001A1E  0E00               	movlw	0
  5023  001A20  6E01               	movwf	?___ftpack,c
  5024  001A22  0E00               	movlw	0
  5025  001A24  6E02               	movwf	?___ftpack+1,c
  5026  001A26  0E00               	movlw	0
  5027  001A28  6E03               	movwf	?___ftpack+2,c
  5028  001A2A  0012               	return	
  5029  001A2C  2A04               	incf	___ftpack@exp,f,c
  5030  001A2E  90D8               	bcf	status,0,c
  5031  001A30  3203               	rrcf	___ftpack@arg+2,f,c
  5032  001A32  3202               	rrcf	___ftpack@arg+1,f,c
  5033  001A34  3201               	rrcf	___ftpack@arg,f,c
  5034  001A36                     l374:
  5035  001A36  0E00               	movlw	0
  5036  001A38  1401               	andwf	___ftpack@arg,w,c
  5037  001A3A  6E06               	movwf	??___ftpack& (0+255),c
  5038  001A3C  0E00               	movlw	0
  5039  001A3E  1402               	andwf	___ftpack@arg+1,w,c
  5040  001A40  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5041  001A42  0EFE               	movlw	254
  5042  001A44  1403               	andwf	___ftpack@arg+2,w,c
  5043  001A46  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5044  001A48  5006               	movf	??___ftpack,w,c
  5045  001A4A  1007               	iorwf	??___ftpack+1,w,c
  5046  001A4C  1008               	iorwf	??___ftpack+2,w,c
  5047  001A4E  B4D8               	btfsc	status,2,c
  5048  001A50  D00C               	goto	l377
  5049  001A52  D7EC               	goto	l375
  5050  001A54  2A04               	incf	___ftpack@exp,f,c
  5051  001A56  0E01               	movlw	1
  5052  001A58  2601               	addwf	___ftpack@arg,f,c
  5053  001A5A  0E00               	movlw	0
  5054  001A5C  2202               	addwfc	___ftpack@arg+1,f,c
  5055  001A5E  0E00               	movlw	0
  5056  001A60  2203               	addwfc	___ftpack@arg+2,f,c
  5057  001A62  90D8               	bcf	status,0,c
  5058  001A64  3203               	rrcf	___ftpack@arg+2,f,c
  5059  001A66  3202               	rrcf	___ftpack@arg+1,f,c
  5060  001A68  3201               	rrcf	___ftpack@arg,f,c
  5061  001A6A                     l377:
  5062  001A6A  0E00               	movlw	0
  5063  001A6C  1401               	andwf	___ftpack@arg,w,c
  5064  001A6E  6E06               	movwf	??___ftpack& (0+255),c
  5065  001A70  0E00               	movlw	0
  5066  001A72  1402               	andwf	___ftpack@arg+1,w,c
  5067  001A74  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5068  001A76  0EFF               	movlw	255
  5069  001A78  1403               	andwf	___ftpack@arg+2,w,c
  5070  001A7A  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5071  001A7C  5006               	movf	??___ftpack,w,c
  5072  001A7E  1007               	iorwf	??___ftpack+1,w,c
  5073  001A80  1008               	iorwf	??___ftpack+2,w,c
  5074  001A82  B4D8               	btfsc	status,2,c
  5075  001A84  D006               	goto	l380
  5076  001A86  D7E6               	goto	l378
  5077  001A88  0604               	decf	___ftpack@exp,f,c
  5078  001A8A  90D8               	bcf	status,0,c
  5079  001A8C  3601               	rlcf	___ftpack@arg,f,c
  5080  001A8E  3602               	rlcf	___ftpack@arg+1,f,c
  5081  001A90  3603               	rlcf	___ftpack@arg+2,f,c
  5082  001A92                     l380:
  5083  001A92  BE02               	btfsc	___ftpack@arg+1,7,c
  5084  001A94  D003               	goto	u1180
  5085  001A96  0E02               	movlw	2
  5086  001A98  6004               	cpfslt	___ftpack@exp,c
  5087  001A9A  D7F6               	goto	l381
  5088  001A9C                     u1180:
  5089  001A9C  A004               	btfss	___ftpack@exp,0,c
  5090  001A9E  9E02               	bcf	___ftpack@arg+1,7,c
  5091  001AA0  90D8               	bcf	status,0,c
  5092  001AA2  3204               	rrcf	___ftpack@exp,f,c
  5093  001AA4  5004               	movf	___ftpack@exp,w,c
  5094  001AA6  1203               	iorwf	___ftpack@arg+2,f,c
  5095  001AA8  5005               	movf	___ftpack@sign,w,c
  5096  001AAA  A4D8               	btfss	status,2,c
  5097  001AAC  8E03               	bsf	___ftpack@arg+2,7,c
  5098  001AAE  C001  F001         	movff	___ftpack@arg,?___ftpack
  5099  001AB2  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  5100  001AB6  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  5101  001ABA  0012               	return	
  5102  001ABC                     __end_of___ftpack:
  5103                           	opt stack 0
  5104                           tblptru	equ	0xFF8
  5105                           tblptrh	equ	0xFF7
  5106                           tblptrl	equ	0xFF6
  5107                           tablat	equ	0xFF5
  5108                           prodh	equ	0xFF4
  5109                           prodl	equ	0xFF3
  5110                           intcon	equ	0xFF2
  5111                           postinc0	equ	0xFEE
  5112                           wreg	equ	0xFE8
  5113                           plusw1	equ	0xFE3
  5114                           postinc2	equ	0xFDE
  5115                           postdec2	equ	0xFDD
  5116                           plusw2	equ	0xFDB
  5117                           fsr2h	equ	0xFDA
  5118                           fsr2l	equ	0xFD9
  5119                           status	equ	0xFD8
  5120                           tblptru	equ	0xFF8
  5121                           tblptrh	equ	0xFF7
  5122                           tblptrl	equ	0xFF6
  5123                           tablat	equ	0xFF5
  5124                           prodh	equ	0xFF4
  5125                           prodl	equ	0xFF3
  5126                           intcon	equ	0xFF2
  5127                           postinc0	equ	0xFEE
  5128                           wreg	equ	0xFE8
  5129                           plusw1	equ	0xFE3
  5130                           postinc2	equ	0xFDE
  5131                           postdec2	equ	0xFDD
  5132                           plusw2	equ	0xFDB
  5133                           fsr2h	equ	0xFDA
  5134                           fsr2l	equ	0xFD9
  5135                           status	equ	0xFD8
  5136                           
  5137                           	psect	rparam
  5138  0000                     tblptru	equ	0xFF8
  5139                           tblptrh	equ	0xFF7
  5140                           tblptrl	equ	0xFF6
  5141                           tablat	equ	0xFF5
  5142                           prodh	equ	0xFF4
  5143                           prodl	equ	0xFF3
  5144                           intcon	equ	0xFF2
  5145                           postinc0	equ	0xFEE
  5146                           wreg	equ	0xFE8
  5147                           plusw1	equ	0xFE3
  5148                           postinc2	equ	0xFDE
  5149                           postdec2	equ	0xFDD
  5150                           plusw2	equ	0xFDB
  5151                           fsr2h	equ	0xFDA
  5152                           fsr2l	equ	0xFD9
  5153                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    57
    Data        0
    BSS         65
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     94      94
    BANK0           160     78     146
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_config_ccp1
    _main->_config_ccp2
    _config_timer2->___awtoft
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___altoft->___fttol
    _eval_poly->___ftmul
    ___ftsub->___ftadd
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    _coinfig_ccpcon->___fttol
    ___lbtoft->___ftpack
    ___fttol->___ftdiv
    ___ftmul->___ftadd
    ___ftdiv->___ftmul
    ___ftadd->___awtoft

Critical Paths under _main in BANK0

    _main->_config_ccp1
    _main->_config_ccp2
    _config_ccp2->_pow
    _config_ccp1->_pow
    _pow->_exp

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  221775
                     _coinfig_ccpcon
                        _configBoard
                        _config_ccp1
                        _config_ccp2
                      _config_timer2
 ---------------------------------------------------------------------------------
 (1) _config_timer2                                        6     2      4    3956
                                             12 COMRAM     6     2      4
                           ___awtoft
 ---------------------------------------------------------------------------------
 (1) _config_ccp2                                         59    57      2   99976
                                             90 COMRAM     4     2      2
                                             23 BANK0     55    55      0
                            ___awdiv
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (1) _config_ccp1                                         59    57      2   99976
                                             90 COMRAM     4     2      2
                                             23 BANK0     55    55      0
                            ___awdiv
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (2) _pow                                                 17    11      6   79872
                                              6 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  5     2      3   26079
                                             51 COMRAM     5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _exp                                                  9     6      3   42552
                                             87 COMRAM     3     0      3
                                              0 BANK0      6     6      0
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (4) _ldexp                                                7     2      5     400
                                             51 COMRAM     7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (4) _floor                                                8     5      3   10249
                                             79 COMRAM     8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                7     2      5     528
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (5) ___ftge                                               9     3      6     744
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (5) ___altoft                                            10     6      4    2797
                                             69 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           12     5      7   11303
                                             39 COMRAM    12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     463
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    5110
                                             24 COMRAM     6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     273
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    3738
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2728
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     604
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _configBoard                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _coinfig_ccpcon                                       9     3      6   17867
                                             69 COMRAM     9     3      6
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             4     1      3    2605
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___fttol                                             15    11      4    1088
                                             54 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftmul                                             15     9      6    5441
                                             24 COMRAM    15     9      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    3749
                                             39 COMRAM    15     9      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    4765
                                             12 COMRAM    12     6      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2583
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _coinfig_ccpcon
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
     ___lbtoft
       ___ftpack
   _configBoard
   _config_ccp1
     ___awdiv
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul
         _frexp
   _config_ccp2
     ___awdiv
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul
         _frexp
   _config_timer2
     ___awtoft
       ___ftpack

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     4E      92       5       91.3%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5E      5E       1       98.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      F0      20        0.0%
DATA                 0      0      F0       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue May 01 17:32:59 2018

           ___altoft@exp 004E            ___altoft@sign 004F                       l35 1DB0  
           ___awdiv@sign 0006      ___wmul@multiplicand 0003              __CFG_BORV$3 000000  
           ___ftadd@exp1 0018             ___ftadd@exp2 0017             ___ftadd@sign 0016  
                    l130 1D00                      l131 1D0A                      l140 0C34  
                    l141 0BEC                      l143 0C5A                      l127 1D10  
                    l152 0962                      l128 1CFA                      l145 0D1C  
                    l153 091A                      l129 1D34                      l330 1C1E  
                    l331 1C16                      l155 0988                      l420 109A  
                    l244 1C8E                      l405 101E                      l245 1C82  
                    l157 0A4A                      l414 10AE                      l334 1C3E  
                    l431 1106                      l335 1C48                      l327 1BF0  
                    l432 1122                      l440 164A                      l336 1C56  
                    l328 1C00                      l433 1152                      l409 1048  
                    l441 1688                      l442 16AE                      l419 10A4  
                    l531 1E24                      l355 1EC2                      l380 1A92  
                    l428 10E2                      l460 15C0                      l532 1E18  
                    l381 1A88                      l429 10D8                      l453 152E  
                    l374 1A36                      l438 1622                      l470 1E84  
                    l446 1B7C                      l375 1A2C                      l455 1556  
                    l447 1BAC                      l456 1588                      l464 1F22  
                    l377 1A6A                      l457 1598                      l378 1A54  
                    l482 14D8                      l474 143E                      l459 15B0  
                    l483 14CC                      l803 187A                      l476 14B4  
                    l804 17FE                      l485 14F4                      l477 14A4  
                    l753 0DF8                      l593 11C2                      l594 11B2  
                    l755 0E30                      l764 171C                      l756 0E68  
                    l596 11DA                      l773 1AE4                      l765 170E  
                    l781 191E                      l757 0E98                      l597 1260  
                    l782 1912                      l758 0FBE                      l598 123E  
                    l767 1736                      l759 0F94                      l599 12E6  
                    l768 17B0                      l777 18A8                      l779 18EE  
                    l795 1310                      l797 1332                      _PR2 000FCB  
                    _exp 0DE0                      _log 12F4                      _pow 1178  
                    wreg 000FE8             __CFG_LVP$OFF 000000             ___ftdiv@cntr 0031  
           ___ftdiv@sign 0036             __CFG_WDT$OFF 000000                     l2202 0F94  
                   l2334 0BEC                     l2360 0D04                     l2344 0C4A  
                   l2424 0A32                     l2408 0978                     l1730 1BD8  
                   l2362 0D0C                     l2426 0A3A                     l2380 0DCA  
                   l2444 0AF8                     l2398 091A                     ?_exp 0058  
                   ?_log 0034                     ?_pow 0066                     u2010 1C22  
                   u1140 1A1E                     u1300 103A                     u2100 0DCA  
                   u1231 0FDC                     u2111 08E6                     u1400 10EA  
                   u2120 0970                     u1241 0FF0                     u1330 1078  
                   u2051 0BB8                     u1180 1A9C                     u2060 0C42  
                   u2140 0A32                     u2045 1D44                     u1270 1010  
                   u2046 1D46                     u2080 0D04                     u2160 0AF8  
                   u1441 1516                     u1370 10B6                     u1531 1422  
                   u1620 1B0C                     u1461 153E                     u1550 145C  
                   u1631 160A                     u1730 1728                     u1651 1632  
                   u1555 1454                     u1628 1B0E                     u1590 14DE  
                   u1770 18C8                     u1870 0E70                     u1880 0E72  
                   u1960 1228                     u1778 18CA                     _RCIF 007CF5  
           config_ccp1@a 0077             config_ccp2@a 0077             config_ccp1@i 009A  
           config_ccp1@j 00AC             config_ccp2@i 009A             config_ccp2@j 00AC  
           config_ccp1@n 00AA             config_ccp2@n 00AA             config_ccp1@w 00A6  
           config_ccp1@x 00A4             config_ccp1@y 00A8             config_ccp1@z 009C  
           config_ccp2@w 00A6             config_ccp2@x 00A4             config_ccp2@y 00A8  
           config_ccp2@z 009C                     _pr2g 00EA                     _main 1D48  
           ___ftpack@arg 0001             ___ftpack@exp 0004                     fsr2h 000FDA  
                   fsr2l 000FD9                     exp@x 0058                     log@x 0034  
                   pow@x 0066                     pow@y 0069                     prodh 000FF4  
                   prodl 000FF3                     start 0000            __CFG_MCLRE$ON 000000  
           ___ftmul@cntr 0026             ___param_bank 000000             ___ftmul@sign 0027  
           ___fttol@exp1 0045                    ??_exp 005B             ___fttol@lval 0041  
                  ??_log 0037                    ??_pow 005B            __CFG_PLLDIV$2 000000  
                  ?_main 0001          __end_of___awdiv 1C60          __end_of___ftadd 1178  
        __end_of___ftdiv 16E0          __end_of___ftneg 1F30          __end_of___ftmul 15FA  
        ___awdiv@divisor 0003          __end_of___ftsub 1EAE          __end_of___fttol 1506  
        ___awdiv@counter 0005                    _TMR0L 000FD6                    _PORTA 000F80  
                  _TRISD 000F95             ___lltoft@exp 0011           __CFG_FCMEN$OFF 000000  
          ___awtoft@sign 000C                    _floor 16E0                    _ldexp 1890  
                  _frexp 1ABC                    _errno 00ED            ___ftpack@sign 0005  
                  tablat 000FF5                    pow@yi 0073                    plusw1 000FE3  
                  plusw2 000FDB                    status 000FD8          ??_config_timer2 0011  
            exp@exponent 0063              ldexp@newexp 0037          __initialization 1F54  
            log@exponent 0037             __end_of_main 1DB2                   ??_main 005F  
          ___fttol@sign1 0040            __activetblptr 000002                   _ADCON0 000FC2  
                 ?_floor 0050                   ?_ldexp 0034                   ?_frexp 0001  
       __end_of___altoft 1CD8                   _CCPR1L 000FBE                   _CCPR2L 000FBB  
                 _T08BIT 007EAE         ___awdiv@dividend 0001         __end_of___awtoft 1EE6  
       __end_of___ftpack 1ABC         __end_of___lbtoft 1F54         __end_of___lltoft 1E6E  
       ??_coinfig_ccpcon 004C                   _TMR0IF 007F92                   _TMR0ON 007EAF  
   __size_of_configBoard 0060       config_timer2@onoff 000D       config_timer2@presc 000F  
                 ___ftge 1B4C     __size_of_config_ccp1 02D2     __size_of_config_ccp2 02D2  
                 ___wmul 1EE6                ??___awdiv 0005                ??___ftadd 0013  
              ??___ftdiv 002E                ??___ftneg 0004                ??___ftmul 001F  
              ??___ftsub 001F                ??___fttol 003B                   clear_0 1F5A  
       ___awdiv@quotient 0007                   _prescg 00EF                   floor@i 0053  
                 floor@x 0050    ___ftmul@f3_as_product 0023             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
       __end_ofexp@coeff 081F         __end_oflog@coeff 083A               __accesstop 0060  
__end_of__initialization 1F60               ___altoft@c 0046               ___ftadd@f1 000D  
             ___ftadd@f2 0010               ___ftge@ff1 0001               ___ftge@ff2 0004  
           eval_poly@res 0031            ___rparam_used 000001               ___ftdiv@f1 0028  
             ___ftdiv@f2 002B               ___ftdiv@f3 0032               ___ftneg@f1 0001  
             ___awtoft@c 0009               ___lbtoft@c 000C               ___ftmul@f1 0019  
             ___ftmul@f2 001C               ___ftsub@f1 0019               ___ftsub@f2 001C  
             ___fttol@f1 0037           __pcstackCOMRAM 0001               ___lltoft@c 0009  
          __end_of_floor 17BE            __end_of_ldexp 1956            __end_of_frexp 1B4C  
                ??_floor 0053                  ??_ldexp 0039                  ??_frexp 0006  
     coinfig_ccpcon@freq 0049       coinfig_ccpcon@fosc 0046         _config_ccp1$1480 0095  
       _config_ccp1$1481 009E         _config_ccp1$1482 00A1         _config_ccp2$1483 0095  
       _config_ccp2$1484 009E         _config_ccp2$1485 00A1               __pbssBANK0 00AE  
     __size_of_eval_poly 00D2                  ?___ftge 0001                  ?___wmul 0001  
              ?___altoft 0046                ?___awtoft 0009                ?___ftpack 0001  
              ?___lbtoft 0009                ?___lltoft 0009                  __Hparam 0000  
                __Lparam 0000          __size_of___ftge 0090                  ___awdiv 1BDC  
                ___ftadd 0FCC                  ___ftdiv 15FA                  ___ftneg 1F0C  
        __size_of___wmul 0026                  ___ftmul 1506                  ___ftsub 1E6E  
                ___fttol 1412             __psmallconst 0800               ??___altoft 004A  
                __pcinit 1F54               ??___awtoft 000C               ??___ftpack 0006  
             ??___lbtoft 000C        __end_of_eval_poly 1890                  __ramtop 0800  
             ??___lltoft 000D                  __ptext0 1D48                  __ptext1 1CD8  
                __ptext2 083C                  __ptext3 0B0E                  __ptext4 1178  
                __ptext5 12F4                  __ptext6 0DE0                  __ptext7 1890  
                __ptext8 16E0                  __ptext9 1ABC                _T0CONbits 000FD5  
              _T2CONbits 000FCA             __size_of_exp 01EC             __size_of_log 011E  
           __size_of_pow 017C     end_of_initialization 1F60                  exp@sign 0065  
          __Lmediumconst 0000    __end_of_config_timer2 1D48                  pow@sign 0072  
                postdec2 000FDD                  postinc0 000FEE                  postinc2 000FDE  
              _TRISAbits 000F92                _TRISBbits 000F93                _TRISCbits 000F94  
              _TRISEbits 000F96              _CCP1CONbits 000FBD              ___ftdiv@exp 0035  
          ??_configBoard 0001              _CCP2CONbits 000FBA            ??_config_ccp1 005D  
          ??_config_ccp2 005D              ___ftmul@exp 0022           __end_of___ftge 1BDC  
         __end_of___wmul 1F0C               floor@expon 0056      start_initialization 1F54  
             eval_poly@d 002B               eval_poly@n 002D               eval_poly@x 0028  
             ldexp@value 0034              __end_of_exp 0FCC              __end_of_log 1412  
            __end_of_pow 12F4               frexp@value 0001                 ??___ftge 0007  
__size_of_coinfig_ccpcon 00B8                 ??___wmul 0005      __end_of_configBoard 1E12  
    __end_of_config_ccp1 0DE0      __end_of_config_ccp2 0B0E        __size_of___altoft 0078  
      __size_of___awtoft 0038        __size_of___ftpack 00AE        __size_of___lbtoft 0024  
      __size_of___lltoft 005C            __pcstackBANK0 0060      _coinfig_ccpcon$1479 004C  
      config_ccp1@valreg 0098                __pnvBANK0 00EF        config_ccp2@valreg 0098  
               ?___awdiv 0001                 ?___ftadd 000D                 ?___ftdiv 0028  
               ?___ftneg 0001                 ?___ftmul 0019                 ?___ftsub 0019  
               ?___fttol 0037              __smallconst 0800                _eval_poly 17BE  
         __size_of_floor 00DE           __size_of_ldexp 00C6           __size_of_frexp 0090  
         ___wmul@product 0005                 _LATAbits 000F89                 _LATEbits 000F8D  
            _configBoard 1DB2                 _PIE1bits 000F9D              _config_ccp1 0B0E  
            _config_ccp2 083C                 _PIR1bits 000F9E               _ADCON0bits 000FC2  
             _ADCON1bits 000FC1               _ADCON2bits 000FC0        ___wmul@multiplier 0001  
             ?_eval_poly 0028                frexp@eptr 0004                 __Hrparam 0000  
               __Lrparam 0000           _coinfig_ccpcon 1956         config_ccp1@F3967 00CC  
       config_ccp2@F3978 00AE         __size_of___awdiv 0084         __size_of___ftadd 01AC  
       __size_of___ftdiv 00E6         __size_of___ftneg 0024                 ___altoft 1C60  
       __size_of___ftmul 00F4         __size_of___ftsub 0040         __size_of___fttol 00F4  
               ___awtoft 1EAE                 ___ftpack 1A0E                 ___lbtoft 1F30  
               ___lltoft 1E12         config_ccp1@duty1 005B                 _exp$1488 0060  
       config_ccp2@duty2 005B   __size_of_config_timer2 0070                 __ptext10 1B4C  
               __ptext11 1C60                 __ptext20 1956                 __ptext12 17BE  
               __ptext21 1F30                 __ptext13 1EE6                 __ptext22 1412  
               __ptext14 1E6E                 __ptext23 1506                 __ptext15 1F0C  
               __ptext24 15FA                 __ptext16 1EAE                 __ptext25 0FCC  
               __ptext17 1E12                 __ptext26 1A0E                 __ptext18 1BDC  
               __ptext19 1DB2                 _pow$1486 006C                 _pow$1487 006F  
          __size_of_main 006A   __end_of_coinfig_ccpcon 1A0E    __CFG_CPUDIV$OSC1_PLL2 000000  
               exp@coeff 0801                 log@coeff 081F               _INTCONbits 000FF2  
            ??_eval_poly 002F          ?_coinfig_ccpcon 0046            _config_timer2 1CD8  
     __CFG_FOSC$HSPLL_HS 000000             ?_configBoard 0001           ?_config_timer2 000D  
           ?_config_ccp1 005B             ?_config_ccp2 005B  
