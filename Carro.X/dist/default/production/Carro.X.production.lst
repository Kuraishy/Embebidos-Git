

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue May 01 17:20:21 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    39                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    40  0000                     
    41                           ; Version 1.45
    42                           ; Generated 16/11/2017 GMT
    43                           ; 
    44                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    45                           ; All rights reserved.
    46                           ; 
    47                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    48                           ; 
    49                           ; Redistribution and use in source and binary forms, with or without modification, are
    50                           ; permitted provided that the following conditions are met:
    51                           ; 
    52                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    53                           ;        conditions and the following disclaimer.
    54                           ; 
    55                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    56                           ;        of conditions and the following disclaimer in the documentation and/or other
    57                           ;        materials provided with the distribution.
    58                           ; 
    59                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    60                           ;        software without specific prior written permission.
    61                           ; 
    62                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    63                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    64                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    65                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    66                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    67                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    68                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    69                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    70                           ; 
    71                           ; 
    72                           ; Code-generator required, PIC18F4550 Definitions
    73                           ; 
    74                           ; SFR Addresses
    75  0000                     
    76                           	psect	smallconst
    77  000800                     __psmallconst:
    78                           	opt stack 0
    79  000800  00                 	db	0
    80  000801                     exp@coeff:
    81                           	opt stack 0
    82  000801  00                 	db	0
    83  000802  80                 	db	128
    84  000803  3F                 	db	63
    85  000804  72                 	db	114
    86  000805  31                 	db	49
    87  000806  3F                 	db	63
    88  000807  FE                 	db	254
    89  000808  75                 	db	117
    90  000809  3E                 	db	62
    91  00080A  58                 	db	88
    92  00080B  63                 	db	99
    93  00080C  3D                 	db	61
    94  00080D  95                 	db	149
    95  00080E  1D                 	db	29
    96  00080F  3C                 	db	60
    97  000810  C5                 	db	197
    98  000811  AE                 	db	174
    99  000812  3A                 	db	58
   100  000813  79                 	db	121
   101  000814  21                 	db	33
   102  000815  39                 	db	57
   103  000816  94                 	db	148
   104  000817  80                 	db	128
   105  000818  37                 	db	55
   106  000819  93                 	db	147
   107  00081A  A7                 	db	167
   108  00081B  35                 	db	53
   109  00081C  56                 	db	86
   110  00081D  15                 	db	21
   111  00081E  34                 	db	52
   112  00081F                     __end_ofexp@coeff:
   113                           	opt stack 0
   114  00081F                     log@coeff:
   115                           	opt stack 0
   116  00081F  00                 	db	0
   117  000820  00                 	db	0
   118  000821  00                 	db	0
   119  000822  00                 	db	0
   120  000823  80                 	db	128
   121  000824  3F                 	db	63
   122  000825  F0                 	db	240
   123  000826  FF                 	db	255
   124  000827  BE                 	db	190
   125  000828  E2                 	db	226
   126  000829  A9                 	db	169
   127  00082A  3E                 	db	62
   128  00082B  83                 	db	131
   129  00082C  76                 	db	118
   130  00082D  BE                 	db	190
   131  00082E  AE                 	db	174
   132  00082F  2B                 	db	43
   133  000830  3E                 	db	62
   134  000831  3C                 	db	60
   135  000832  C3                 	db	195
   136  000833  BD                 	db	189
   137  000834  D2                 	db	210
   138  000835  13                 	db	19
   139  000836  3D                 	db	61
   140  000837  78                 	db	120
   141  000838  D3                 	db	211
   142  000839  BB                 	db	187
   143  00083A                     __end_oflog@coeff:
   144                           	opt stack 0
   145  00083A  00                 	db	0	; dummy byte at the end
   146  0000                     
   147                           	psect	nvBANK0
   148  0000EF                     __pnvBANK0:
   149                           	opt stack 0
   150  0000EF                     _prescg:
   151                           	opt stack 0
   152  0000EF                     	ds	3
   153  0000                     _CCPR2L	set	4027
   154  0000                     _CCPR1L	set	4030
   155  0000                     _CCP2CONbits	set	4026
   156  0000                     _CCP1CONbits	set	4029
   157  0000                     _PR2	set	4043
   158  0000                     _PORTA	set	3968
   159  0000                     _TRISD	set	3989
   160  0000                     _PIR1bits	set	3998
   161  0000                     _PIE1bits	set	3997
   162  0000                     _ADCON2bits	set	4032
   163  0000                     _ADCON0bits	set	4034
   164  0000                     _ADCON0	set	4034
   165  0000                     _T0CONbits	set	4053
   166  0000                     _INTCONbits	set	4082
   167  0000                     _LATAbits	set	3977
   168  0000                     _LATEbits	set	3981
   169  0000                     _T2CONbits	set	4042
   170  0000                     _TRISCbits	set	3988
   171  0000                     _TRISEbits	set	3990
   172  0000                     _TRISAbits	set	3986
   173  0000                     _ADCON1bits	set	4033
   174  0000                     _TMR0L	set	4054
   175  0000                     _TMR0IF	set	32658
   176  0000                     _TMR0ON	set	32431
   177  0000                     _RCIF	set	31989
   178  0000                     _T08BIT	set	32430
   179                           
   180                           ; #config settings
   181  0000                     
   182                           	psect	cinit
   183  001F4E                     __pcinit:
   184                           	opt stack 0
   185  001F4E                     start_initialization:
   186                           	opt stack 0
   187  001F4E                     __initialization:
   188                           	opt stack 0
   189                           
   190                           ; Clear objects allocated to BANK0 (65 bytes)
   191  001F4E  EE00  F0AE         	lfsr	0,__pbssBANK0
   192  001F52  0E41               	movlw	65
   193  001F54                     clear_0:
   194  001F54  6AEE               	clrf	postinc0,c
   195  001F56  06E8               	decf	wreg,f,c
   196  001F58  E1FD               	bnz	clear_0
   197  001F5A                     end_of_initialization:
   198                           	opt stack 0
   199  001F5A                     __end_of__initialization:
   200                           	opt stack 0
   201  001F5A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   202  001F5C  6EF8               	movwf	tblptru,c
   203  001F5E  0100               	movlb	0
   204  001F60  EFA4  F00E         	goto	_main	;jump to C main() function
   205                           tblptru	equ	0xFF8
   206                           postinc0	equ	0xFEE
   207                           wreg	equ	0xFE8
   208                           
   209                           	psect	bssBANK0
   210  0000AE                     __pbssBANK0:
   211                           	opt stack 0
   212  0000AE                     config_ccp2@F3978:
   213                           	opt stack 0
   214  0000AE                     	ds	30
   215  0000CC                     config_ccp1@F3967:
   216                           	opt stack 0
   217  0000CC                     	ds	30
   218  0000EA                     _pr2g:
   219                           	opt stack 0
   220  0000EA                     	ds	3
   221  0000ED                     _errno:
   222                           	opt stack 0
   223  0000ED                     	ds	2
   224                           tblptru	equ	0xFF8
   225                           postinc0	equ	0xFEE
   226                           wreg	equ	0xFE8
   227                           
   228                           	psect	cstackBANK0
   229  000060                     __pcstackBANK0:
   230                           	opt stack 0
   231  000060                     _exp$1440:
   232                           	opt stack 0
   233                           
   234                           ; 3 bytes @ 0x0
   235  000060                     	ds	3
   236  000063                     exp@exponent:
   237                           	opt stack 0
   238                           
   239                           ; 2 bytes @ 0x3
   240  000063                     	ds	2
   241  000065                     exp@sign:
   242                           	opt stack 0
   243                           
   244                           ; 1 bytes @ 0x5
   245  000065                     	ds	1
   246  000066                     ?_pow:
   247                           	opt stack 0
   248  000066                     pow@x:
   249                           	opt stack 0
   250                           
   251                           ; 3 bytes @ 0x6
   252  000066                     	ds	3
   253  000069                     pow@y:
   254                           	opt stack 0
   255                           
   256                           ; 3 bytes @ 0x9
   257  000069                     	ds	3
   258  00006C                     _pow$1438:
   259                           	opt stack 0
   260                           
   261                           ; 3 bytes @ 0xC
   262  00006C                     	ds	3
   263  00006F                     _pow$1439:
   264                           	opt stack 0
   265                           
   266                           ; 3 bytes @ 0xF
   267  00006F                     	ds	3
   268  000072                     pow@sign:
   269                           	opt stack 0
   270                           
   271                           ; 1 bytes @ 0x12
   272  000072                     	ds	1
   273  000073                     pow@yi:
   274                           	opt stack 0
   275                           
   276                           ; 4 bytes @ 0x13
   277  000073                     	ds	4
   278  000077                     config_ccp1@a:
   279                           	opt stack 0
   280  000077                     config_ccp2@a:
   281                           	opt stack 0
   282                           
   283                           ; 30 bytes @ 0x17
   284  000077                     	ds	30
   285  000095                     _config_ccp1$1432:
   286                           	opt stack 0
   287  000095                     _config_ccp2$1435:
   288                           	opt stack 0
   289                           
   290                           ; 3 bytes @ 0x35
   291  000095                     	ds	3
   292  000098                     config_ccp1@valreg:
   293                           	opt stack 0
   294  000098                     config_ccp2@valreg:
   295                           	opt stack 0
   296                           
   297                           ; 2 bytes @ 0x38
   298  000098                     	ds	2
   299  00009A                     config_ccp1@i:
   300                           	opt stack 0
   301  00009A                     config_ccp2@i:
   302                           	opt stack 0
   303                           
   304                           ; 2 bytes @ 0x3A
   305  00009A                     	ds	2
   306  00009C                     config_ccp1@z:
   307                           	opt stack 0
   308  00009C                     config_ccp2@z:
   309                           	opt stack 0
   310                           
   311                           ; 2 bytes @ 0x3C
   312  00009C                     	ds	2
   313  00009E                     _config_ccp1$1433:
   314                           	opt stack 0
   315  00009E                     _config_ccp2$1436:
   316                           	opt stack 0
   317                           
   318                           ; 3 bytes @ 0x3E
   319  00009E                     	ds	3
   320  0000A1                     _config_ccp1$1434:
   321                           	opt stack 0
   322  0000A1                     _config_ccp2$1437:
   323                           	opt stack 0
   324                           
   325                           ; 3 bytes @ 0x41
   326  0000A1                     	ds	3
   327  0000A4                     config_ccp1@x:
   328                           	opt stack 0
   329  0000A4                     config_ccp2@x:
   330                           	opt stack 0
   331                           
   332                           ; 2 bytes @ 0x44
   333  0000A4                     	ds	2
   334  0000A6                     config_ccp1@w:
   335                           	opt stack 0
   336  0000A6                     config_ccp2@w:
   337                           	opt stack 0
   338                           
   339                           ; 2 bytes @ 0x46
   340  0000A6                     	ds	2
   341  0000A8                     config_ccp1@y:
   342                           	opt stack 0
   343  0000A8                     config_ccp2@y:
   344                           	opt stack 0
   345                           
   346                           ; 2 bytes @ 0x48
   347  0000A8                     	ds	2
   348  0000AA                     config_ccp1@n:
   349                           	opt stack 0
   350  0000AA                     config_ccp2@n:
   351                           	opt stack 0
   352                           
   353                           ; 2 bytes @ 0x4A
   354  0000AA                     	ds	2
   355  0000AC                     config_ccp1@j:
   356                           	opt stack 0
   357  0000AC                     config_ccp2@j:
   358                           	opt stack 0
   359                           
   360                           ; 2 bytes @ 0x4C
   361  0000AC                     	ds	2
   362                           tblptru	equ	0xFF8
   363                           postinc0	equ	0xFEE
   364                           wreg	equ	0xFE8
   365                           
   366                           	psect	cstackCOMRAM
   367  000001                     __pcstackCOMRAM:
   368                           	opt stack 0
   369  000001                     ?___wmul:
   370                           	opt stack 0
   371  000001                     ?___awdiv:
   372                           	opt stack 0
   373  000001                     ?___ftpack:
   374                           	opt stack 0
   375  000001                     ?_frexp:
   376                           	opt stack 0
   377  000001                     ?___ftneg:
   378                           	opt stack 0
   379  000001                     ___wmul@multiplier:
   380                           	opt stack 0
   381  000001                     ___awdiv@dividend:
   382                           	opt stack 0
   383  000001                     ___ftpack@arg:
   384                           	opt stack 0
   385  000001                     ___ftge@ff1:
   386                           	opt stack 0
   387  000001                     ___ftneg@f1:
   388                           	opt stack 0
   389  000001                     frexp@value:
   390                           	opt stack 0
   391                           
   392                           ; 3 bytes @ 0x0
   393  000001                     	ds	2
   394  000003                     ___wmul@multiplicand:
   395                           	opt stack 0
   396  000003                     ___awdiv@divisor:
   397                           	opt stack 0
   398                           
   399                           ; 2 bytes @ 0x2
   400  000003                     	ds	1
   401  000004                     ___ftpack@exp:
   402                           	opt stack 0
   403  000004                     frexp@eptr:
   404                           	opt stack 0
   405  000004                     ___ftge@ff2:
   406                           	opt stack 0
   407                           
   408                           ; 3 bytes @ 0x3
   409  000004                     	ds	1
   410  000005                     ___awdiv@counter:
   411                           	opt stack 0
   412  000005                     ___ftpack@sign:
   413                           	opt stack 0
   414  000005                     ___wmul@product:
   415                           	opt stack 0
   416                           
   417                           ; 2 bytes @ 0x4
   418  000005                     	ds	1
   419  000006                     ??___ftpack:
   420  000006                     ??_frexp:
   421  000006                     ___awdiv@sign:
   422                           	opt stack 0
   423                           
   424                           ; 1 bytes @ 0x5
   425  000006                     	ds	1
   426  000007                     ??___ftge:
   427  000007                     ___awdiv@quotient:
   428                           	opt stack 0
   429                           
   430                           ; 2 bytes @ 0x6
   431  000007                     	ds	2
   432  000009                     ?___awtoft:
   433                           	opt stack 0
   434  000009                     ?___lbtoft:
   435                           	opt stack 0
   436  000009                     ?___lltoft:
   437                           	opt stack 0
   438  000009                     ___awtoft@c:
   439                           	opt stack 0
   440  000009                     ___lltoft@c:
   441                           	opt stack 0
   442                           
   443                           ; 4 bytes @ 0x8
   444  000009                     	ds	3
   445  00000C                     ___awtoft@sign:
   446                           	opt stack 0
   447  00000C                     ___lbtoft@c:
   448                           	opt stack 0
   449                           
   450                           ; 1 bytes @ 0xB
   451  00000C                     	ds	1
   452  00000D                     ??___lltoft:
   453  00000D                     ?___ftadd:
   454                           	opt stack 0
   455  00000D                     config_timer2@onoff:
   456                           	opt stack 0
   457  00000D                     ___ftadd@f1:
   458                           	opt stack 0
   459                           
   460                           ; 3 bytes @ 0xC
   461  00000D                     	ds	2
   462  00000F                     config_timer2@presc:
   463                           	opt stack 0
   464                           
   465                           ; 2 bytes @ 0xE
   466  00000F                     	ds	1
   467  000010                     ___ftadd@f2:
   468                           	opt stack 0
   469                           
   470                           ; 3 bytes @ 0xF
   471  000010                     	ds	1
   472  000011                     ??_config_timer2:
   473  000011                     ___lltoft@exp:
   474                           	opt stack 0
   475                           
   476                           ; 1 bytes @ 0x10
   477  000011                     	ds	2
   478  000013                     ??___ftadd:
   479                           
   480                           ; 1 bytes @ 0x12
   481  000013                     	ds	3
   482  000016                     ___ftadd@sign:
   483                           	opt stack 0
   484                           
   485                           ; 1 bytes @ 0x15
   486  000016                     	ds	1
   487  000017                     ___ftadd@exp2:
   488                           	opt stack 0
   489                           
   490                           ; 1 bytes @ 0x16
   491  000017                     	ds	1
   492  000018                     ___ftadd@exp1:
   493                           	opt stack 0
   494                           
   495                           ; 1 bytes @ 0x17
   496  000018                     	ds	1
   497  000019                     ?___ftmul:
   498                           	opt stack 0
   499  000019                     ?___ftsub:
   500                           	opt stack 0
   501  000019                     ___ftmul@f1:
   502                           	opt stack 0
   503  000019                     ___ftsub@f1:
   504                           	opt stack 0
   505                           
   506                           ; 3 bytes @ 0x18
   507  000019                     	ds	3
   508  00001C                     ___ftmul@f2:
   509                           	opt stack 0
   510  00001C                     ___ftsub@f2:
   511                           	opt stack 0
   512                           
   513                           ; 3 bytes @ 0x1B
   514  00001C                     	ds	3
   515  00001F                     ??___ftmul:
   516  00001F                     
   517                           ; 1 bytes @ 0x1E
   518  00001F                     	ds	3
   519  000022                     ___ftmul@exp:
   520                           	opt stack 0
   521                           
   522                           ; 1 bytes @ 0x21
   523  000022                     	ds	1
   524  000023                     ___ftmul@f3_as_product:
   525                           	opt stack 0
   526                           
   527                           ; 3 bytes @ 0x22
   528  000023                     	ds	3
   529  000026                     ___ftmul@cntr:
   530                           	opt stack 0
   531                           
   532                           ; 1 bytes @ 0x25
   533  000026                     	ds	1
   534  000027                     ___ftmul@sign:
   535                           	opt stack 0
   536                           
   537                           ; 1 bytes @ 0x26
   538  000027                     	ds	1
   539  000028                     ?___ftdiv:
   540                           	opt stack 0
   541  000028                     ?_eval_poly:
   542                           	opt stack 0
   543  000028                     ___ftdiv@f1:
   544                           	opt stack 0
   545  000028                     eval_poly@x:
   546                           	opt stack 0
   547                           
   548                           ; 3 bytes @ 0x27
   549  000028                     	ds	3
   550  00002B                     eval_poly@d:
   551                           	opt stack 0
   552  00002B                     ___ftdiv@f2:
   553                           	opt stack 0
   554                           
   555                           ; 3 bytes @ 0x2A
   556  00002B                     	ds	2
   557  00002D                     eval_poly@n:
   558                           	opt stack 0
   559                           
   560                           ; 2 bytes @ 0x2C
   561  00002D                     	ds	1
   562  00002E                     ??___ftdiv:
   563                           
   564                           ; 1 bytes @ 0x2D
   565  00002E                     	ds	1
   566  00002F                     ??_eval_poly:
   567                           
   568                           ; 1 bytes @ 0x2E
   569  00002F                     	ds	2
   570  000031                     ___ftdiv@cntr:
   571                           	opt stack 0
   572  000031                     eval_poly@res:
   573                           	opt stack 0
   574                           
   575                           ; 3 bytes @ 0x30
   576  000031                     	ds	1
   577  000032                     ___ftdiv@f3:
   578                           	opt stack 0
   579                           
   580                           ; 3 bytes @ 0x31
   581  000032                     	ds	2
   582  000034                     ?_log:
   583                           	opt stack 0
   584  000034                     ?_ldexp:
   585                           	opt stack 0
   586  000034                     ldexp@value:
   587                           	opt stack 0
   588  000034                     log@x:
   589                           	opt stack 0
   590                           
   591                           ; 3 bytes @ 0x33
   592  000034                     	ds	1
   593  000035                     ___ftdiv@exp:
   594                           	opt stack 0
   595                           
   596                           ; 1 bytes @ 0x34
   597  000035                     	ds	1
   598  000036                     ___ftdiv@sign:
   599                           	opt stack 0
   600                           
   601                           ; 1 bytes @ 0x35
   602  000036                     	ds	1
   603  000037                     ?___fttol:
   604                           	opt stack 0
   605  000037                     ldexp@newexp:
   606                           	opt stack 0
   607  000037                     log@exponent:
   608                           	opt stack 0
   609  000037                     ___fttol@f1:
   610                           	opt stack 0
   611                           
   612                           ; 3 bytes @ 0x36
   613  000037                     	ds	2
   614  000039                     ??_ldexp:
   615                           
   616                           ; 1 bytes @ 0x38
   617  000039                     	ds	2
   618  00003B                     ??___fttol:
   619                           
   620                           ; 1 bytes @ 0x3A
   621  00003B                     	ds	5
   622  000040                     ___fttol@sign1:
   623                           	opt stack 0
   624                           
   625                           ; 1 bytes @ 0x3F
   626  000040                     	ds	1
   627  000041                     ___fttol@lval:
   628                           	opt stack 0
   629                           
   630                           ; 4 bytes @ 0x40
   631  000041                     	ds	4
   632  000045                     ___fttol@exp1:
   633                           	opt stack 0
   634                           
   635                           ; 1 bytes @ 0x44
   636  000045                     	ds	1
   637  000046                     ?___altoft:
   638                           	opt stack 0
   639  000046                     coinfig_ccpcon@fosc:
   640                           	opt stack 0
   641  000046                     ___altoft@c:
   642                           	opt stack 0
   643                           
   644                           ; 4 bytes @ 0x45
   645  000046                     	ds	3
   646  000049                     coinfig_ccpcon@freq:
   647                           	opt stack 0
   648                           
   649                           ; 3 bytes @ 0x48
   650  000049                     	ds	1
   651  00004A                     ??___altoft:
   652                           
   653                           ; 1 bytes @ 0x49
   654  00004A                     	ds	2
   655  00004C                     _coinfig_ccpcon$1431:
   656                           	opt stack 0
   657                           
   658                           ; 3 bytes @ 0x4B
   659  00004C                     	ds	2
   660  00004E                     ___altoft@exp:
   661                           	opt stack 0
   662                           
   663                           ; 1 bytes @ 0x4D
   664  00004E                     	ds	1
   665  00004F                     ___altoft@sign:
   666                           	opt stack 0
   667                           
   668                           ; 1 bytes @ 0x4E
   669  00004F                     	ds	1
   670  000050                     ?_floor:
   671                           	opt stack 0
   672  000050                     floor@x:
   673                           	opt stack 0
   674                           
   675                           ; 3 bytes @ 0x4F
   676  000050                     	ds	3
   677  000053                     floor@i:
   678                           	opt stack 0
   679                           
   680                           ; 3 bytes @ 0x52
   681  000053                     	ds	3
   682  000056                     floor@expon:
   683                           	opt stack 0
   684                           
   685                           ; 2 bytes @ 0x55
   686  000056                     	ds	2
   687  000058                     ?_exp:
   688                           	opt stack 0
   689  000058                     exp@x:
   690                           	opt stack 0
   691                           
   692                           ; 3 bytes @ 0x57
   693  000058                     	ds	3
   694  00005B                     config_ccp1@duty1:
   695                           	opt stack 0
   696  00005B                     config_ccp2@duty2:
   697                           	opt stack 0
   698                           
   699                           ; 2 bytes @ 0x5A
   700  00005B                     	ds	2
   701  00005D                     ??_config_ccp1:
   702  00005D                     ??_config_ccp2:
   703                           
   704                           ; 1 bytes @ 0x5C
   705  00005D                     	ds	2
   706  00005F                     tblptru	equ	0xFF8
   707                           postinc0	equ	0xFEE
   708                           wreg	equ	0xFE8
   709                           
   710                           ; 1 bytes @ 0x5E
   711 ;;
   712 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   713 ;;
   714 ;; *************** function _main *****************
   715 ;; Defined at:
   716 ;;		line 40 in file "carroMain.c"
   717 ;; Parameters:    Size  Location     Type
   718 ;;		None
   719 ;; Auto vars:     Size  Location     Type
   720 ;;		None
   721 ;; Return value:  Size  Location     Type
   722 ;;                  1    wreg      void 
   723 ;; Registers used:
   724 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   725 ;; Tracked objects:
   726 ;;		On entry : 0/0
   727 ;;		On exit  : 0/0
   728 ;;		Unchanged: 0/0
   729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   730 ;;      Params:         0       0       0       0       0       0       0       0       0
   731 ;;      Locals:         0       0       0       0       0       0       0       0       0
   732 ;;      Temps:          0       0       0       0       0       0       0       0       0
   733 ;;      Totals:         0       0       0       0       0       0       0       0       0
   734 ;;Total ram usage:        0 bytes
   735 ;; Hardware stack levels required when called:    6
   736 ;; This function calls:
   737 ;;		_coinfig_ccpcon
   738 ;;		_configBoard
   739 ;;		_config_ccp1
   740 ;;		_config_ccp2
   741 ;;		_config_timer2
   742 ;; This function is called by:
   743 ;;		Startup code after reset
   744 ;; This function uses a non-reentrant model
   745 ;;
   746                           
   747                           	psect	text0
   748  001D48                     __ptext0:
   749                           	opt stack 0
   750  001D48                     _main:
   751                           	opt stack 25
   752                           
   753                           ;carroMain.c: 42: configBoard();
   754                           
   755                           ;incstack = 0
   756  001D48  ECD6  F00E         	call	_configBoard	;wreg free
   757                           
   758                           ;carroMain.c: 43: ADCON1bits.PCFG = 0b1111;
   759  001D4C  80C1               	bsf	4033,0,c	;volatile
   760  001D4E  82C1               	bsf	4033,1,c	;volatile
   761  001D50  84C1               	bsf	4033,2,c	;volatile
   762  001D52  86C1               	bsf	4033,3,c	;volatile
   763                           
   764                           ;carroMain.c: 45: TRISAbits.RA0=0;
   765  001D54  9092               	bcf	3986,0,c	;volatile
   766                           
   767                           ;carroMain.c: 46: TRISAbits.RA1=0;
   768  001D56  9292               	bcf	3986,1,c	;volatile
   769                           
   770                           ;carroMain.c: 47: TRISEbits.RE0=0;
   771  001D58  9096               	bcf	3990,0,c	;volatile
   772                           
   773                           ;carroMain.c: 48: TRISEbits.RE1=0;
   774  001D5A  9296               	bcf	3990,1,c	;volatile
   775                           
   776                           ;carroMain.c: 51: TRISCbits.RC2 = 0;
   777  001D5C  9494               	bcf	3988,2,c	;volatile
   778                           
   779                           ;carroMain.c: 52: TRISCbits.RC1 = 0;
   780  001D5E  9294               	bcf	3988,1,c	;volatile
   781                           
   782                           ;carroMain.c: 54: config_timer2(0,16);
   783  001D60  0E00               	movlw	0
   784  001D62  6E0E               	movwf	config_timer2@onoff+1,c
   785  001D64  0E00               	movlw	0
   786  001D66  6E0D               	movwf	config_timer2@onoff,c
   787  001D68  0E00               	movlw	0
   788  001D6A  6E10               	movwf	config_timer2@presc+1,c
   789  001D6C  0E10               	movlw	16
   790  001D6E  6E0F               	movwf	config_timer2@presc,c
   791  001D70  EC6C  F00E         	call	_config_timer2	;wreg free
   792                           
   793                           ;carroMain.c: 55: coinfig_ccpcon(48000000,5000);
   794  001D74  0E1B               	movlw	27
   795  001D76  6E46               	movwf	coinfig_ccpcon@fosc,c
   796  001D78  0E37               	movlw	55
   797  001D7A  6E47               	movwf	coinfig_ccpcon@fosc+1,c
   798  001D7C  0E4C               	movlw	76
   799  001D7E  6E48               	movwf	coinfig_ccpcon@fosc+2,c
   800  001D80  0E40               	movlw	64
   801  001D82  6E49               	movwf	coinfig_ccpcon@freq,c
   802  001D84  0E9C               	movlw	156
   803  001D86  6E4A               	movwf	coinfig_ccpcon@freq+1,c
   804  001D88  0E45               	movlw	69
   805  001D8A  6E4B               	movwf	coinfig_ccpcon@freq+2,c
   806  001D8C  ECAB  F00C         	call	_coinfig_ccpcon	;wreg free
   807                           
   808                           ;carroMain.c: 56: config_ccp1(25);
   809  001D90  0E00               	movlw	0
   810  001D92  6E5C               	movwf	config_ccp1@duty1+1,c
   811  001D94  0E19               	movlw	25
   812  001D96  6E5B               	movwf	config_ccp1@duty1,c
   813  001D98  EC87  F005         	call	_config_ccp1	;wreg free
   814                           
   815                           ;carroMain.c: 57: config_ccp2(35);
   816  001D9C  0E00               	movlw	0
   817  001D9E  6E5C               	movwf	config_ccp2@duty2+1,c
   818  001DA0  0E23               	movlw	35
   819  001DA2  6E5B               	movwf	config_ccp2@duty2,c
   820  001DA4  EC1E  F004         	call	_config_ccp2	;wreg free
   821                           
   822                           ;carroMain.c: 59: T2CONbits.TMR2ON = 1;
   823  001DA8  84CA               	bsf	4042,2,c	;volatile
   824  001DAA                     l33:
   825  001DAA  D7FF               	goto	l33
   826  001DAC                     __end_of_main:
   827                           	opt stack 0
   828                           tblptru	equ	0xFF8
   829                           postinc0	equ	0xFEE
   830                           wreg	equ	0xFE8
   831                           
   832 ;; *************** function _config_timer2 *****************
   833 ;; Defined at:
   834 ;;		line 14 in file "Pwm.c"
   835 ;; Parameters:    Size  Location     Type
   836 ;;  onoff           2   12[COMRAM] int 
   837 ;;  presc           2   14[COMRAM] int 
   838 ;; Auto vars:     Size  Location     Type
   839 ;;		None
   840 ;; Return value:  Size  Location     Type
   841 ;;                  1    wreg      void 
   842 ;; Registers used:
   843 ;;		wreg, status,2, status,0, cstack
   844 ;; Tracked objects:
   845 ;;		On entry : 0/0
   846 ;;		On exit  : 0/0
   847 ;;		Unchanged: 0/0
   848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   849 ;;      Params:         4       0       0       0       0       0       0       0       0
   850 ;;      Locals:         0       0       0       0       0       0       0       0       0
   851 ;;      Temps:          2       0       0       0       0       0       0       0       0
   852 ;;      Totals:         6       0       0       0       0       0       0       0       0
   853 ;;Total ram usage:        6 bytes
   854 ;; Hardware stack levels used:    1
   855 ;; Hardware stack levels required when called:    2
   856 ;; This function calls:
   857 ;;		___awtoft
   858 ;; This function is called by:
   859 ;;		_main
   860 ;; This function uses a non-reentrant model
   861 ;;
   862                           
   863                           	psect	text1
   864  001CD8                     __ptext1:
   865                           	opt stack 0
   866  001CD8                     _config_timer2:
   867                           	opt stack 28
   868                           
   869                           ;Pwm.c: 16: T2CONbits.TOUTPS = 0b0000;
   870                           
   871                           ;incstack = 0
   872  001CD8  96CA               	bcf	4042,3,c	;volatile
   873  001CDA  98CA               	bcf	4042,4,c	;volatile
   874  001CDC  9ACA               	bcf	4042,5,c	;volatile
   875  001CDE  9CCA               	bcf	4042,6,c	;volatile
   876                           
   877                           ;Pwm.c: 18: prescg = presc;
   878  001CE0  C00F  F009         	movff	config_timer2@presc,___awtoft@c
   879  001CE4  C010  F00A         	movff	config_timer2@presc+1,___awtoft@c+1
   880  001CE8  EC54  F00F         	call	___awtoft	;wreg free
   881  001CEC  C009  F0EF         	movff	?___awtoft,_prescg
   882  001CF0  C00A  F0F0         	movff	?___awtoft+1,_prescg+1
   883  001CF4  C00B  F0F1         	movff	?___awtoft+2,_prescg+2
   884                           
   885                           ;Pwm.c: 20: switch(presc)
   886  001CF8  D00B               	goto	l125
   887  001CFA  0EFC               	movlw	-4
   888  001CFC  16CA               	andwf	4042,f,c	;volatile
   889  001CFE  D01A               	goto	l127
   890  001D00  50CA               	movf	4042,w,c	;volatile
   891  001D02  0BFC               	andlw	-4
   892  001D04  0901               	iorlw	1
   893  001D06  6ECA               	movwf	4042,c	;volatile
   894  001D08  D015               	goto	l127
   895  001D0A  0E03               	movlw	3
   896  001D0C  12CA               	iorwf	4042,f,c	;volatile
   897                           
   898                           ;Pwm.c: 25: }
   899  001D0E  D012               	goto	l127
   900  001D10                     l125:
   901  001D10  C00F  F011         	movff	config_timer2@presc,??_config_timer2
   902  001D14  C010  F012         	movff	config_timer2@presc+1,??_config_timer2+1
   903                           
   904                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   905                           ; Switch size 1, requested type "space"
   906                           ; Number of cases is 1, Range of values is 0 to 0
   907                           ; switch strategies available:
   908                           ; Name         Instructions Cycles
   909                           ; simple_byte            4     3 (average)
   910                           ;	Chosen strategy is simple_byte
   911  001D18  5012               	movf	??_config_timer2+1,w,c
   912  001D1A  0A00               	xorlw	0	; case 0
   913  001D1C  A4D8               	btfss	status,2,c
   914  001D1E  D00A               	goto	l127
   915                           
   916                           ; Switch size 1, requested type "space"
   917                           ; Number of cases is 3, Range of values is 1 to 16
   918                           ; switch strategies available:
   919                           ; Name         Instructions Cycles
   920                           ; simple_byte           10     6 (average)
   921                           ;	Chosen strategy is simple_byte
   922  001D20  5011               	movf	??_config_timer2,w,c
   923  001D22  0A01               	xorlw	1	; case 1
   924  001D24  B4D8               	btfsc	status,2,c
   925  001D26  D7E9               	goto	l126
   926  001D28  0A05               	xorlw	5	; case 4
   927  001D2A  B4D8               	btfsc	status,2,c
   928  001D2C  D7E9               	goto	l128
   929  001D2E  0A14               	xorlw	20	; case 16
   930  001D30  B4D8               	btfsc	status,2,c
   931  001D32  D7EB               	goto	l129
   932  001D34                     l127:
   933                           
   934                           ;Pwm.c: 27: T2CONbits.TOUTPS = 0b0000;
   935  001D34  96CA               	bcf	4042,3,c	;volatile
   936  001D36  98CA               	bcf	4042,4,c	;volatile
   937  001D38  9ACA               	bcf	4042,5,c	;volatile
   938  001D3A  9CCA               	bcf	4042,6,c	;volatile
   939                           
   940                           ;Pwm.c: 29: T2CONbits.TMR2ON = onoff;
   941  001D3C  B00D               	btfsc	config_timer2@onoff,0,c
   942  001D3E  D002               	bra	u2045
   943  001D40  94CA               	bcf	4042,2,c	;volatile
   944  001D42  D001               	bra	u2046
   945  001D44                     u2045:
   946  001D44  84CA               	bsf	4042,2,c	;volatile
   947  001D46                     u2046:
   948  001D46  0012               	return		;funcret
   949  001D48                     __end_of_config_timer2:
   950                           	opt stack 0
   951                           tblptru	equ	0xFF8
   952                           postinc0	equ	0xFEE
   953                           wreg	equ	0xFE8
   954                           status	equ	0xFD8
   955                           
   956 ;; *************** function _config_ccp2 *****************
   957 ;; Defined at:
   958 ;;		line 85 in file "Pwm.c"
   959 ;; Parameters:    Size  Location     Type
   960 ;;  duty2           2   90[COMRAM] int 
   961 ;; Auto vars:     Size  Location     Type
   962 ;;  a              30   23[BANK0 ] int [15]
   963 ;;  j               2   76[BANK0 ] int 
   964 ;;  n               2   74[BANK0 ] int 
   965 ;;  y               2   72[BANK0 ] unsigned int 
   966 ;;  w               2   70[BANK0 ] unsigned int 
   967 ;;  x               2   68[BANK0 ] int 
   968 ;;  z               2   60[BANK0 ] int 
   969 ;;  i               2   58[BANK0 ] int 
   970 ;;  valreg          2   56[BANK0 ] int 
   971 ;; Return value:  Size  Location     Type
   972 ;;                  1    wreg      void 
   973 ;; Registers used:
   974 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   975 ;; Tracked objects:
   976 ;;		On entry : 0/0
   977 ;;		On exit  : 0/0
   978 ;;		Unchanged: 0/0
   979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   980 ;;      Params:         2       0       0       0       0       0       0       0       0
   981 ;;      Locals:         0      55       0       0       0       0       0       0       0
   982 ;;      Temps:          2       0       0       0       0       0       0       0       0
   983 ;;      Totals:         4      55       0       0       0       0       0       0       0
   984 ;;Total ram usage:       59 bytes
   985 ;; Hardware stack levels used:    1
   986 ;; Hardware stack levels required when called:    5
   987 ;; This function calls:
   988 ;;		___awdiv
   989 ;;		___awtoft
   990 ;;		___ftadd
   991 ;;		___ftdiv
   992 ;;		___ftmul
   993 ;;		___fttol
   994 ;;		_pow
   995 ;; This function is called by:
   996 ;;		_main
   997 ;; This function uses a non-reentrant model
   998 ;;
   999                           
  1000                           	psect	text2
  1001  00083C                     __ptext2:
  1002                           	opt stack 0
  1003  00083C                     _config_ccp2:
  1004                           	opt stack 25
  1005                           
  1006                           ;Pwm.c: 87: int valreg;
  1007                           ;Pwm.c: 89: valreg = (duty2*(pr2g + 1)*4)/100;
  1008                           
  1009                           ;incstack = 0
  1010  00083C  C05B  F009         	movff	config_ccp2@duty2,___awtoft@c
  1011  000840  C05C  F00A         	movff	config_ccp2@duty2+1,___awtoft@c+1
  1012  000844  EC54  F00F         	call	___awtoft	;wreg free
  1013  000848  C009  F01C         	movff	?___awtoft,___ftmul@f2
  1014  00084C  C00A  F01D         	movff	?___awtoft+1,___ftmul@f2+1
  1015  000850  C00B  F01E         	movff	?___awtoft+2,___ftmul@f2+2
  1016  000854  0E00               	movlw	0
  1017  000856  6E10               	movwf	___ftadd@f2,c
  1018  000858  0E80               	movlw	128
  1019  00085A  6E11               	movwf	___ftadd@f2+1,c
  1020  00085C  0E3F               	movlw	63
  1021  00085E  6E12               	movwf	___ftadd@f2+2,c
  1022  000860  C0EA  F00D         	movff	_pr2g,___ftadd@f1
  1023  000864  C0EB  F00E         	movff	_pr2g+1,___ftadd@f1+1
  1024  000868  C0EC  F00F         	movff	_pr2g+2,___ftadd@f1+2
  1025  00086C  ECE6  F007         	call	___ftadd	;wreg free
  1026  000870  C00D  F019         	movff	?___ftadd,___ftmul@f1
  1027  000874  C00E  F01A         	movff	?___ftadd+1,___ftmul@f1+1
  1028  000878  C00F  F01B         	movff	?___ftadd+2,___ftmul@f1+2
  1029  00087C  EC83  F00A         	call	___ftmul	;wreg free
  1030  000880  C019  F095         	movff	?___ftmul,_config_ccp2$1435
  1031  000884  C01A  F096         	movff	?___ftmul+1,_config_ccp2$1435+1
  1032  000888  C01B  F097         	movff	?___ftmul+2,_config_ccp2$1435+2
  1033                           
  1034                           ;Pwm.c: 87: int valreg;
  1035                           ;Pwm.c: 89: valreg = (duty2*(pr2g + 1)*4)/100;
  1036  00088C  0E00               	movlw	0
  1037  00088E  6E2B               	movwf	___ftdiv@f2,c
  1038  000890  0EC8               	movlw	200
  1039  000892  6E2C               	movwf	___ftdiv@f2+1,c
  1040  000894  0E42               	movlw	66
  1041  000896  6E2D               	movwf	___ftdiv@f2+2,c
  1042  000898  0E00               	movlw	0
  1043  00089A  6E1C               	movwf	___ftmul@f2,c
  1044  00089C  0E80               	movlw	128
  1045  00089E  6E1D               	movwf	___ftmul@f2+1,c
  1046  0008A0  0E40               	movlw	64
  1047  0008A2  6E1E               	movwf	___ftmul@f2+2,c
  1048  0008A4  C095  F019         	movff	_config_ccp2$1435,___ftmul@f1
  1049  0008A8  C096  F01A         	movff	_config_ccp2$1435+1,___ftmul@f1+1
  1050  0008AC  C097  F01B         	movff	_config_ccp2$1435+2,___ftmul@f1+2
  1051  0008B0  EC83  F00A         	call	___ftmul	;wreg free
  1052  0008B4  C019  F028         	movff	?___ftmul,___ftdiv@f1
  1053  0008B8  C01A  F029         	movff	?___ftmul+1,___ftdiv@f1+1
  1054  0008BC  C01B  F02A         	movff	?___ftmul+2,___ftdiv@f1+2
  1055  0008C0  ECFD  F00A         	call	___ftdiv	;wreg free
  1056  0008C4  C028  F037         	movff	?___ftdiv,___fttol@f1
  1057  0008C8  C029  F038         	movff	?___ftdiv+1,___fttol@f1+1
  1058  0008CC  C02A  F039         	movff	?___ftdiv+2,___fttol@f1+2
  1059  0008D0  EC09  F00A         	call	___fttol	;wreg free
  1060  0008D4  C037  F098         	movff	?___fttol,config_ccp2@valreg
  1061  0008D8  C038  F099         	movff	?___fttol+1,config_ccp2@valreg+1
  1062                           
  1063                           ;Pwm.c: 92: int n,x,i,j,z;
  1064                           ;Pwm.c: 93: unsigned int w,y;
  1065                           ;Pwm.c: 94: int a[15] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  1066  0008DC  EE20  F0AE         	lfsr	2,config_ccp2@F3978
  1067  0008E0  EE10  F077         	lfsr	1,config_ccp2@a
  1068  0008E4  0E1D               	movlw	29
  1069  0008E6                     u2111:
  1070  0008E6  CFDB FFE3          	movff	plusw2,plusw1
  1071  0008EA  06E8               	decf	wreg,f,c
  1072  0008EC  E2FC               	bc	u2111
  1073                           
  1074                           ;Pwm.c: 96: n = valreg;
  1075  0008EE  C098  F0AA         	movff	config_ccp2@valreg,config_ccp2@n
  1076  0008F2  C099  F0AB         	movff	config_ccp2@valreg+1,config_ccp2@n+1
  1077                           
  1078                           ;Pwm.c: 97: i = 0;
  1079  0008F6  0E00               	movlw	0
  1080  0008F8  0100               	movlb	0	; () banked
  1081  0008FA  6F9B               	movwf	(config_ccp2@i+1)& (0+255),b
  1082  0008FC  0E00               	movlw	0
  1083  0008FE  6F9A               	movwf	config_ccp2@i& (0+255),b
  1084                           
  1085                           ; BSR set to: 0
  1086                           ;Pwm.c: 98: z = 0;
  1087  000900  0E00               	movlw	0
  1088  000902  6F9D               	movwf	(config_ccp2@z+1)& (0+255),b
  1089  000904  0E00               	movlw	0
  1090  000906  6F9C               	movwf	config_ccp2@z& (0+255),b
  1091                           
  1092                           ; BSR set to: 0
  1093                           ;Pwm.c: 99: y = 0;
  1094  000908  0E00               	movlw	0
  1095  00090A  6FA9               	movwf	(config_ccp2@y+1)& (0+255),b
  1096  00090C  0E00               	movlw	0
  1097  00090E  6FA8               	movwf	config_ccp2@y& (0+255),b
  1098                           
  1099                           ; BSR set to: 0
  1100                           ;Pwm.c: 100: w = 0;
  1101  000910  0E00               	movlw	0
  1102  000912  6FA7               	movwf	(config_ccp2@w+1)& (0+255),b
  1103  000914  0E00               	movlw	0
  1104  000916  6FA6               	movwf	config_ccp2@w& (0+255),b
  1105                           
  1106                           ;Pwm.c: 102: while(n > 0)
  1107  000918  D024               	goto	l150
  1108  00091A                     l2390:
  1109                           
  1110                           ; BSR set to: 0
  1111                           ;Pwm.c: 103: {
  1112                           ;Pwm.c: 104: a[i] = n % 2;
  1113  00091A  0E01               	movlw	1
  1114  00091C  15AA               	andwf	config_ccp2@n& (0+255),w,b
  1115  00091E  6E5D               	movwf	??_config_ccp2& (0+255),c
  1116  000920  0E00               	movlw	0
  1117  000922  15AB               	andwf	(config_ccp2@n+1)& (0+255),w,b
  1118  000924  6E5E               	movwf	(??_config_ccp2+1)& (0+255),c
  1119  000926  90D8               	bcf	status,0,c
  1120  000928  359A               	rlcf	config_ccp2@i& (0+255),w,b
  1121  00092A  6ED9               	movwf	fsr2l,c
  1122  00092C  359B               	rlcf	(config_ccp2@i+1)& (0+255),w,b
  1123  00092E  6EDA               	movwf	fsr2h,c
  1124  000930  0E77               	movlw	low config_ccp2@a
  1125  000932  26D9               	addwf	fsr2l,f,c
  1126  000934  0E00               	movlw	high config_ccp2@a
  1127  000936  22DA               	addwfc	fsr2h,f,c
  1128  000938  C05D  FFDE         	movff	??_config_ccp2,postinc2
  1129  00093C  C05E  FFDD         	movff	??_config_ccp2+1,postdec2
  1130                           
  1131                           ; BSR set to: 0
  1132                           ;Pwm.c: 105: n = n / 2;
  1133  000940  C0AA  F001         	movff	config_ccp2@n,___awdiv@dividend
  1134  000944  C0AB  F002         	movff	config_ccp2@n+1,___awdiv@dividend+1
  1135  000948  0E00               	movlw	0
  1136  00094A  6E04               	movwf	___awdiv@divisor+1,c
  1137  00094C  0E02               	movlw	2
  1138  00094E  6E03               	movwf	___awdiv@divisor,c
  1139  000950  ECEE  F00D         	call	___awdiv	;wreg free
  1140  000954  C001  F0AA         	movff	?___awdiv,config_ccp2@n
  1141  000958  C002  F0AB         	movff	?___awdiv+1,config_ccp2@n+1
  1142                           
  1143                           ;Pwm.c: 106: i++;
  1144  00095C  0100               	movlb	0	; () banked
  1145  00095E  4B9A               	infsnz	config_ccp2@i& (0+255),f,b
  1146  000960  2B9B               	incf	(config_ccp2@i+1)& (0+255),f,b
  1147  000962                     l150:
  1148                           
  1149                           ; BSR set to: 0
  1150                           
  1151                           ; BSR set to: 0
  1152  000962  BFAB               	btfsc	(config_ccp2@n+1)& (0+255),7,b
  1153  000964  D005               	goto	u2120
  1154  000966  51AB               	movf	(config_ccp2@n+1)& (0+255),w,b
  1155  000968  E1D8               	bnz	l2390
  1156  00096A  05AA               	decf	config_ccp2@n& (0+255),w,b
  1157  00096C  B0D8               	btfsc	status,0,c
  1158  00096E  D7D5               	goto	l151
  1159  000970                     u2120:
  1160                           
  1161                           ; BSR set to: 0
  1162                           ;Pwm.c: 107: }
  1163                           ;Pwm.c: 109: for(j = 0 ; j <= 1; j++)
  1164                           
  1165                           ; BSR set to: 0
  1166  000970  0E00               	movlw	0
  1167  000972  6FAD               	movwf	(config_ccp2@j+1)& (0+255),b
  1168  000974  0E00               	movlw	0
  1169  000976  6FAC               	movwf	config_ccp2@j& (0+255),b
  1170  000978                     l2400:
  1171                           
  1172                           ; BSR set to: 0
  1173  000978  BFAD               	btfsc	(config_ccp2@j+1)& (0+255),7,b
  1174  00097A  D006               	goto	l153
  1175  00097C  51AD               	movf	(config_ccp2@j+1)& (0+255),w,b
  1176  00097E  E159               	bnz	l2416
  1177  000980  0E02               	movlw	2
  1178  000982  5DAC               	subwf	config_ccp2@j& (0+255),w,b
  1179  000984  B0D8               	btfsc	status,0,c
  1180  000986  D055               	goto	u2140
  1181  000988                     l153:
  1182                           
  1183                           ; BSR set to: 0
  1184                           ;Pwm.c: 110: {
  1185                           ;Pwm.c: 111: x = a[j] * (pow (2,j));
  1186                           
  1187                           ; BSR set to: 0
  1188  000988  C0AC  F009         	movff	config_ccp2@j,___awtoft@c
  1189  00098C  C0AD  F00A         	movff	config_ccp2@j+1,___awtoft@c+1
  1190  000990  EC54  F00F         	call	___awtoft	;wreg free
  1191  000994  C009  F09E         	movff	?___awtoft,_config_ccp2$1436
  1192  000998  C00A  F09F         	movff	?___awtoft+1,_config_ccp2$1436+1
  1193  00099C  C00B  F0A0         	movff	?___awtoft+2,_config_ccp2$1436+2
  1194                           
  1195                           ;Pwm.c: 110: {
  1196                           ;Pwm.c: 111: x = a[j] * (pow (2,j));
  1197  0009A0  C09E  F069         	movff	_config_ccp2$1436,pow@y
  1198  0009A4  C09F  F06A         	movff	_config_ccp2$1436+1,pow@y+1
  1199  0009A8  C0A0  F06B         	movff	_config_ccp2$1436+2,pow@y+2
  1200  0009AC  0E00               	movlw	0
  1201  0009AE  0100               	movlb	0	; () banked
  1202  0009B0  6F66               	movwf	pow@x& (0+255),b
  1203  0009B2  0E00               	movlw	0
  1204  0009B4  6F67               	movwf	(pow@x+1)& (0+255),b
  1205  0009B6  0E40               	movlw	64
  1206  0009B8  6F68               	movwf	(pow@x+2)& (0+255),b
  1207  0009BA  ECBC  F008         	call	_pow	;wreg free
  1208  0009BE  C066  F0A1         	movff	?_pow,_config_ccp2$1437
  1209  0009C2  C067  F0A2         	movff	?_pow+1,_config_ccp2$1437+1
  1210  0009C6  C068  F0A3         	movff	?_pow+2,_config_ccp2$1437+2
  1211                           
  1212                           ;Pwm.c: 110: {
  1213                           ;Pwm.c: 111: x = a[j] * (pow (2,j));
  1214  0009CA  C0A1  F01C         	movff	_config_ccp2$1437,___ftmul@f2
  1215  0009CE  C0A2  F01D         	movff	_config_ccp2$1437+1,___ftmul@f2+1
  1216  0009D2  C0A3  F01E         	movff	_config_ccp2$1437+2,___ftmul@f2+2
  1217  0009D6  90D8               	bcf	status,0,c
  1218  0009D8  0100               	movlb	0	; () banked
  1219  0009DA  35AC               	rlcf	config_ccp2@j& (0+255),w,b
  1220  0009DC  6ED9               	movwf	fsr2l,c
  1221  0009DE  35AD               	rlcf	(config_ccp2@j+1)& (0+255),w,b
  1222  0009E0  6EDA               	movwf	fsr2h,c
  1223  0009E2  0E77               	movlw	low config_ccp2@a
  1224  0009E4  26D9               	addwf	fsr2l,f,c
  1225  0009E6  0E00               	movlw	high config_ccp2@a
  1226  0009E8  22DA               	addwfc	fsr2h,f,c
  1227  0009EA  CFDE F009          	movff	postinc2,___awtoft@c
  1228  0009EE  CFDD F00A          	movff	postdec2,___awtoft@c+1
  1229  0009F2  EC54  F00F         	call	___awtoft	;wreg free
  1230  0009F6  C009  F019         	movff	?___awtoft,___ftmul@f1
  1231  0009FA  C00A  F01A         	movff	?___awtoft+1,___ftmul@f1+1
  1232  0009FE  C00B  F01B         	movff	?___awtoft+2,___ftmul@f1+2
  1233  000A02  EC83  F00A         	call	___ftmul	;wreg free
  1234  000A06  C019  F037         	movff	?___ftmul,___fttol@f1
  1235  000A0A  C01A  F038         	movff	?___ftmul+1,___fttol@f1+1
  1236  000A0E  C01B  F039         	movff	?___ftmul+2,___fttol@f1+2
  1237  000A12  EC09  F00A         	call	___fttol	;wreg free
  1238  000A16  C037  F0A4         	movff	?___fttol,config_ccp2@x
  1239  000A1A  C038  F0A5         	movff	?___fttol+1,config_ccp2@x+1
  1240                           
  1241                           ;Pwm.c: 112: y = x + y;
  1242  000A1E  0100               	movlb	0	; () banked
  1243  000A20  51A8               	movf	config_ccp2@y& (0+255),w,b
  1244  000A22  25A4               	addwf	config_ccp2@x& (0+255),w,b
  1245  000A24  6FA8               	movwf	config_ccp2@y& (0+255),b
  1246  000A26  51A9               	movf	(config_ccp2@y+1)& (0+255),w,b
  1247  000A28  21A5               	addwfc	(config_ccp2@x+1)& (0+255),w,b
  1248  000A2A  6FA9               	movwf	(config_ccp2@y+1)& (0+255),b
  1249                           
  1250                           ; BSR set to: 0
  1251  000A2C  4BAC               	infsnz	config_ccp2@j& (0+255),f,b
  1252  000A2E  2BAD               	incf	(config_ccp2@j+1)& (0+255),f,b
  1253  000A30  D7A3               	goto	l2400
  1254  000A32                     u2140:
  1255  000A32                     l2416:
  1256                           
  1257                           ; BSR set to: 0
  1258                           ;Pwm.c: 113: }
  1259                           ;Pwm.c: 114: for(j = 2 ; j <= 9; j++)
  1260  000A32  0E00               	movlw	0
  1261  000A34  6FAD               	movwf	(config_ccp2@j+1)& (0+255),b
  1262  000A36  0E02               	movlw	2
  1263  000A38  6FAC               	movwf	config_ccp2@j& (0+255),b
  1264  000A3A                     l2418:
  1265                           
  1266                           ; BSR set to: 0
  1267  000A3A  BFAD               	btfsc	(config_ccp2@j+1)& (0+255),7,b
  1268  000A3C  D006               	goto	l155
  1269  000A3E  51AD               	movf	(config_ccp2@j+1)& (0+255),w,b
  1270  000A40  E15B               	bnz	l2436
  1271  000A42  0E0A               	movlw	10
  1272  000A44  5DAC               	subwf	config_ccp2@j& (0+255),w,b
  1273  000A46  B0D8               	btfsc	status,0,c
  1274  000A48  D057               	goto	u2160
  1275  000A4A                     l155:
  1276                           
  1277                           ; BSR set to: 0
  1278                           ;Pwm.c: 115: {
  1279                           ;Pwm.c: 116: x = a[j] * (pow (2,z));
  1280                           
  1281                           ; BSR set to: 0
  1282  000A4A  C09C  F009         	movff	config_ccp2@z,___awtoft@c
  1283  000A4E  C09D  F00A         	movff	config_ccp2@z+1,___awtoft@c+1
  1284  000A52  EC54  F00F         	call	___awtoft	;wreg free
  1285  000A56  C009  F09E         	movff	?___awtoft,_config_ccp2$1436
  1286  000A5A  C00A  F09F         	movff	?___awtoft+1,_config_ccp2$1436+1
  1287  000A5E  C00B  F0A0         	movff	?___awtoft+2,_config_ccp2$1436+2
  1288                           
  1289                           ;Pwm.c: 115: {
  1290                           ;Pwm.c: 116: x = a[j] * (pow (2,z));
  1291  000A62  C09E  F069         	movff	_config_ccp2$1436,pow@y
  1292  000A66  C09F  F06A         	movff	_config_ccp2$1436+1,pow@y+1
  1293  000A6A  C0A0  F06B         	movff	_config_ccp2$1436+2,pow@y+2
  1294  000A6E  0E00               	movlw	0
  1295  000A70  0100               	movlb	0	; () banked
  1296  000A72  6F66               	movwf	pow@x& (0+255),b
  1297  000A74  0E00               	movlw	0
  1298  000A76  6F67               	movwf	(pow@x+1)& (0+255),b
  1299  000A78  0E40               	movlw	64
  1300  000A7A  6F68               	movwf	(pow@x+2)& (0+255),b
  1301  000A7C  ECBC  F008         	call	_pow	;wreg free
  1302  000A80  C066  F0A1         	movff	?_pow,_config_ccp2$1437
  1303  000A84  C067  F0A2         	movff	?_pow+1,_config_ccp2$1437+1
  1304  000A88  C068  F0A3         	movff	?_pow+2,_config_ccp2$1437+2
  1305                           
  1306                           ;Pwm.c: 115: {
  1307                           ;Pwm.c: 116: x = a[j] * (pow (2,z));
  1308  000A8C  C0A1  F01C         	movff	_config_ccp2$1437,___ftmul@f2
  1309  000A90  C0A2  F01D         	movff	_config_ccp2$1437+1,___ftmul@f2+1
  1310  000A94  C0A3  F01E         	movff	_config_ccp2$1437+2,___ftmul@f2+2
  1311  000A98  90D8               	bcf	status,0,c
  1312  000A9A  0100               	movlb	0	; () banked
  1313  000A9C  35AC               	rlcf	config_ccp2@j& (0+255),w,b
  1314  000A9E  6ED9               	movwf	fsr2l,c
  1315  000AA0  35AD               	rlcf	(config_ccp2@j+1)& (0+255),w,b
  1316  000AA2  6EDA               	movwf	fsr2h,c
  1317  000AA4  0E77               	movlw	low config_ccp2@a
  1318  000AA6  26D9               	addwf	fsr2l,f,c
  1319  000AA8  0E00               	movlw	high config_ccp2@a
  1320  000AAA  22DA               	addwfc	fsr2h,f,c
  1321  000AAC  CFDE F009          	movff	postinc2,___awtoft@c
  1322  000AB0  CFDD F00A          	movff	postdec2,___awtoft@c+1
  1323  000AB4  EC54  F00F         	call	___awtoft	;wreg free
  1324  000AB8  C009  F019         	movff	?___awtoft,___ftmul@f1
  1325  000ABC  C00A  F01A         	movff	?___awtoft+1,___ftmul@f1+1
  1326  000AC0  C00B  F01B         	movff	?___awtoft+2,___ftmul@f1+2
  1327  000AC4  EC83  F00A         	call	___ftmul	;wreg free
  1328  000AC8  C019  F037         	movff	?___ftmul,___fttol@f1
  1329  000ACC  C01A  F038         	movff	?___ftmul+1,___fttol@f1+1
  1330  000AD0  C01B  F039         	movff	?___ftmul+2,___fttol@f1+2
  1331  000AD4  EC09  F00A         	call	___fttol	;wreg free
  1332  000AD8  C037  F0A4         	movff	?___fttol,config_ccp2@x
  1333  000ADC  C038  F0A5         	movff	?___fttol+1,config_ccp2@x+1
  1334                           
  1335                           ;Pwm.c: 117: w = x + w;
  1336  000AE0  0100               	movlb	0	; () banked
  1337  000AE2  51A6               	movf	config_ccp2@w& (0+255),w,b
  1338  000AE4  25A4               	addwf	config_ccp2@x& (0+255),w,b
  1339  000AE6  6FA6               	movwf	config_ccp2@w& (0+255),b
  1340  000AE8  51A7               	movf	(config_ccp2@w+1)& (0+255),w,b
  1341  000AEA  21A5               	addwfc	(config_ccp2@x+1)& (0+255),w,b
  1342  000AEC  6FA7               	movwf	(config_ccp2@w+1)& (0+255),b
  1343                           
  1344                           ; BSR set to: 0
  1345                           ;Pwm.c: 118: z++;
  1346  000AEE  4B9C               	infsnz	config_ccp2@z& (0+255),f,b
  1347  000AF0  2B9D               	incf	(config_ccp2@z+1)& (0+255),f,b
  1348                           
  1349                           ; BSR set to: 0
  1350  000AF2  4BAC               	infsnz	config_ccp2@j& (0+255),f,b
  1351  000AF4  2BAD               	incf	(config_ccp2@j+1)& (0+255),f,b
  1352  000AF6  D7A1               	goto	l2418
  1353  000AF8                     u2160:
  1354  000AF8                     l2436:
  1355                           
  1356                           ; BSR set to: 0
  1357                           ;Pwm.c: 119: }
  1358                           ;Pwm.c: 121: CCP2CONbits.DC2B = y;
  1359  000AF8  C0A8  F05D         	movff	config_ccp2@y,??_config_ccp2
  1360  000AFC  3A5D               	swapf	??_config_ccp2,f,c
  1361  000AFE  50BA               	movf	4026,w,c	;volatile
  1362  000B00  185D               	xorwf	??_config_ccp2,w,c
  1363  000B02  0BCF               	andlw	-49
  1364  000B04  185D               	xorwf	??_config_ccp2,w,c
  1365  000B06  6EBA               	movwf	4026,c	;volatile
  1366                           
  1367                           ; BSR set to: 0
  1368                           ;Pwm.c: 122: CCPR2L = w;
  1369  000B08  C0A6  FFBB         	movff	config_ccp2@w,4027	;volatile
  1370                           
  1371                           ; BSR set to: 0
  1372  000B0C  0012               	return		;funcret
  1373  000B0E                     __end_of_config_ccp2:
  1374                           	opt stack 0
  1375                           tblptru	equ	0xFF8
  1376                           postinc0	equ	0xFEE
  1377                           wreg	equ	0xFE8
  1378                           plusw1	equ	0xFE3
  1379                           postinc2	equ	0xFDE
  1380                           postdec2	equ	0xFDD
  1381                           plusw2	equ	0xFDB
  1382                           fsr2h	equ	0xFDA
  1383                           fsr2l	equ	0xFD9
  1384                           status	equ	0xFD8
  1385                           
  1386 ;; *************** function _config_ccp1 *****************
  1387 ;; Defined at:
  1388 ;;		line 43 in file "Pwm.c"
  1389 ;; Parameters:    Size  Location     Type
  1390 ;;  duty1           2   90[COMRAM] int 
  1391 ;; Auto vars:     Size  Location     Type
  1392 ;;  a              30   23[BANK0 ] int [15]
  1393 ;;  j               2   76[BANK0 ] int 
  1394 ;;  n               2   74[BANK0 ] int 
  1395 ;;  y               2   72[BANK0 ] unsigned int 
  1396 ;;  w               2   70[BANK0 ] unsigned int 
  1397 ;;  x               2   68[BANK0 ] int 
  1398 ;;  z               2   60[BANK0 ] int 
  1399 ;;  i               2   58[BANK0 ] int 
  1400 ;;  valreg          2   56[BANK0 ] int 
  1401 ;; Return value:  Size  Location     Type
  1402 ;;                  1    wreg      void 
  1403 ;; Registers used:
  1404 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1405 ;; Tracked objects:
  1406 ;;		On entry : 0/0
  1407 ;;		On exit  : 0/0
  1408 ;;		Unchanged: 0/0
  1409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1410 ;;      Params:         2       0       0       0       0       0       0       0       0
  1411 ;;      Locals:         0      55       0       0       0       0       0       0       0
  1412 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1413 ;;      Totals:         4      55       0       0       0       0       0       0       0
  1414 ;;Total ram usage:       59 bytes
  1415 ;; Hardware stack levels used:    1
  1416 ;; Hardware stack levels required when called:    5
  1417 ;; This function calls:
  1418 ;;		___awdiv
  1419 ;;		___awtoft
  1420 ;;		___ftadd
  1421 ;;		___ftdiv
  1422 ;;		___ftmul
  1423 ;;		___fttol
  1424 ;;		_pow
  1425 ;; This function is called by:
  1426 ;;		_main
  1427 ;; This function uses a non-reentrant model
  1428 ;;
  1429                           
  1430                           	psect	text3
  1431  000B0E                     __ptext3:
  1432                           	opt stack 0
  1433  000B0E                     _config_ccp1:
  1434                           	opt stack 25
  1435                           
  1436                           ;Pwm.c: 45: int valreg;
  1437                           ;Pwm.c: 47: valreg = (duty1*(pr2g + 1)*4)/100;
  1438                           
  1439                           ; BSR set to: 0
  1440                           ;incstack = 0
  1441  000B0E  C05B  F009         	movff	config_ccp1@duty1,___awtoft@c
  1442  000B12  C05C  F00A         	movff	config_ccp1@duty1+1,___awtoft@c+1
  1443  000B16  EC54  F00F         	call	___awtoft	;wreg free
  1444  000B1A  C009  F01C         	movff	?___awtoft,___ftmul@f2
  1445  000B1E  C00A  F01D         	movff	?___awtoft+1,___ftmul@f2+1
  1446  000B22  C00B  F01E         	movff	?___awtoft+2,___ftmul@f2+2
  1447  000B26  0E00               	movlw	0
  1448  000B28  6E10               	movwf	___ftadd@f2,c
  1449  000B2A  0E80               	movlw	128
  1450  000B2C  6E11               	movwf	___ftadd@f2+1,c
  1451  000B2E  0E3F               	movlw	63
  1452  000B30  6E12               	movwf	___ftadd@f2+2,c
  1453  000B32  C0EA  F00D         	movff	_pr2g,___ftadd@f1
  1454  000B36  C0EB  F00E         	movff	_pr2g+1,___ftadd@f1+1
  1455  000B3A  C0EC  F00F         	movff	_pr2g+2,___ftadd@f1+2
  1456  000B3E  ECE6  F007         	call	___ftadd	;wreg free
  1457  000B42  C00D  F019         	movff	?___ftadd,___ftmul@f1
  1458  000B46  C00E  F01A         	movff	?___ftadd+1,___ftmul@f1+1
  1459  000B4A  C00F  F01B         	movff	?___ftadd+2,___ftmul@f1+2
  1460  000B4E  EC83  F00A         	call	___ftmul	;wreg free
  1461  000B52  C019  F095         	movff	?___ftmul,_config_ccp1$1432
  1462  000B56  C01A  F096         	movff	?___ftmul+1,_config_ccp1$1432+1
  1463  000B5A  C01B  F097         	movff	?___ftmul+2,_config_ccp1$1432+2
  1464                           
  1465                           ;Pwm.c: 45: int valreg;
  1466                           ;Pwm.c: 47: valreg = (duty1*(pr2g + 1)*4)/100;
  1467  000B5E  0E00               	movlw	0
  1468  000B60  6E2B               	movwf	___ftdiv@f2,c
  1469  000B62  0EC8               	movlw	200
  1470  000B64  6E2C               	movwf	___ftdiv@f2+1,c
  1471  000B66  0E42               	movlw	66
  1472  000B68  6E2D               	movwf	___ftdiv@f2+2,c
  1473  000B6A  0E00               	movlw	0
  1474  000B6C  6E1C               	movwf	___ftmul@f2,c
  1475  000B6E  0E80               	movlw	128
  1476  000B70  6E1D               	movwf	___ftmul@f2+1,c
  1477  000B72  0E40               	movlw	64
  1478  000B74  6E1E               	movwf	___ftmul@f2+2,c
  1479  000B76  C095  F019         	movff	_config_ccp1$1432,___ftmul@f1
  1480  000B7A  C096  F01A         	movff	_config_ccp1$1432+1,___ftmul@f1+1
  1481  000B7E  C097  F01B         	movff	_config_ccp1$1432+2,___ftmul@f1+2
  1482  000B82  EC83  F00A         	call	___ftmul	;wreg free
  1483  000B86  C019  F028         	movff	?___ftmul,___ftdiv@f1
  1484  000B8A  C01A  F029         	movff	?___ftmul+1,___ftdiv@f1+1
  1485  000B8E  C01B  F02A         	movff	?___ftmul+2,___ftdiv@f1+2
  1486  000B92  ECFD  F00A         	call	___ftdiv	;wreg free
  1487  000B96  C028  F037         	movff	?___ftdiv,___fttol@f1
  1488  000B9A  C029  F038         	movff	?___ftdiv+1,___fttol@f1+1
  1489  000B9E  C02A  F039         	movff	?___ftdiv+2,___fttol@f1+2
  1490  000BA2  EC09  F00A         	call	___fttol	;wreg free
  1491  000BA6  C037  F098         	movff	?___fttol,config_ccp1@valreg
  1492  000BAA  C038  F099         	movff	?___fttol+1,config_ccp1@valreg+1
  1493                           
  1494                           ;Pwm.c: 50: int n,x,i,j,z;
  1495                           ;Pwm.c: 51: unsigned int w,y;
  1496                           ;Pwm.c: 52: int a[15] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  1497  000BAE  EE20  F0CC         	lfsr	2,config_ccp1@F3967
  1498  000BB2  EE10  F077         	lfsr	1,config_ccp1@a
  1499  000BB6  0E1D               	movlw	29
  1500  000BB8                     u2051:
  1501  000BB8  CFDB FFE3          	movff	plusw2,plusw1
  1502  000BBC  06E8               	decf	wreg,f,c
  1503  000BBE  E2FC               	bc	u2051
  1504                           
  1505                           ;Pwm.c: 54: n = valreg;
  1506  000BC0  C098  F0AA         	movff	config_ccp1@valreg,config_ccp1@n
  1507  000BC4  C099  F0AB         	movff	config_ccp1@valreg+1,config_ccp1@n+1
  1508                           
  1509                           ;Pwm.c: 55: i = 0;
  1510  000BC8  0E00               	movlw	0
  1511  000BCA  0100               	movlb	0	; () banked
  1512  000BCC  6F9B               	movwf	(config_ccp1@i+1)& (0+255),b
  1513  000BCE  0E00               	movlw	0
  1514  000BD0  6F9A               	movwf	config_ccp1@i& (0+255),b
  1515                           
  1516                           ; BSR set to: 0
  1517                           ;Pwm.c: 56: z = 0;
  1518  000BD2  0E00               	movlw	0
  1519  000BD4  6F9D               	movwf	(config_ccp1@z+1)& (0+255),b
  1520  000BD6  0E00               	movlw	0
  1521  000BD8  6F9C               	movwf	config_ccp1@z& (0+255),b
  1522                           
  1523                           ; BSR set to: 0
  1524                           ;Pwm.c: 57: y = 0;
  1525  000BDA  0E00               	movlw	0
  1526  000BDC  6FA9               	movwf	(config_ccp1@y+1)& (0+255),b
  1527  000BDE  0E00               	movlw	0
  1528  000BE0  6FA8               	movwf	config_ccp1@y& (0+255),b
  1529                           
  1530                           ; BSR set to: 0
  1531                           ;Pwm.c: 58: w = 0;
  1532  000BE2  0E00               	movlw	0
  1533  000BE4  6FA7               	movwf	(config_ccp1@w+1)& (0+255),b
  1534  000BE6  0E00               	movlw	0
  1535  000BE8  6FA6               	movwf	config_ccp1@w& (0+255),b
  1536                           
  1537                           ;Pwm.c: 60: while(n > 0)
  1538  000BEA  D024               	goto	l138
  1539  000BEC                     l2326:
  1540                           
  1541                           ; BSR set to: 0
  1542                           ;Pwm.c: 61: {
  1543                           ;Pwm.c: 62: a[i] = n % 2;
  1544  000BEC  0E01               	movlw	1
  1545  000BEE  15AA               	andwf	config_ccp1@n& (0+255),w,b
  1546  000BF0  6E5D               	movwf	??_config_ccp1& (0+255),c
  1547  000BF2  0E00               	movlw	0
  1548  000BF4  15AB               	andwf	(config_ccp1@n+1)& (0+255),w,b
  1549  000BF6  6E5E               	movwf	(??_config_ccp1+1)& (0+255),c
  1550  000BF8  90D8               	bcf	status,0,c
  1551  000BFA  359A               	rlcf	config_ccp1@i& (0+255),w,b
  1552  000BFC  6ED9               	movwf	fsr2l,c
  1553  000BFE  359B               	rlcf	(config_ccp1@i+1)& (0+255),w,b
  1554  000C00  6EDA               	movwf	fsr2h,c
  1555  000C02  0E77               	movlw	low config_ccp1@a
  1556  000C04  26D9               	addwf	fsr2l,f,c
  1557  000C06  0E00               	movlw	high config_ccp1@a
  1558  000C08  22DA               	addwfc	fsr2h,f,c
  1559  000C0A  C05D  FFDE         	movff	??_config_ccp1,postinc2
  1560  000C0E  C05E  FFDD         	movff	??_config_ccp1+1,postdec2
  1561                           
  1562                           ; BSR set to: 0
  1563                           ;Pwm.c: 63: n = n / 2;
  1564  000C12  C0AA  F001         	movff	config_ccp1@n,___awdiv@dividend
  1565  000C16  C0AB  F002         	movff	config_ccp1@n+1,___awdiv@dividend+1
  1566  000C1A  0E00               	movlw	0
  1567  000C1C  6E04               	movwf	___awdiv@divisor+1,c
  1568  000C1E  0E02               	movlw	2
  1569  000C20  6E03               	movwf	___awdiv@divisor,c
  1570  000C22  ECEE  F00D         	call	___awdiv	;wreg free
  1571  000C26  C001  F0AA         	movff	?___awdiv,config_ccp1@n
  1572  000C2A  C002  F0AB         	movff	?___awdiv+1,config_ccp1@n+1
  1573                           
  1574                           ;Pwm.c: 64: i++;
  1575  000C2E  0100               	movlb	0	; () banked
  1576  000C30  4B9A               	infsnz	config_ccp1@i& (0+255),f,b
  1577  000C32  2B9B               	incf	(config_ccp1@i+1)& (0+255),f,b
  1578  000C34                     l138:
  1579                           
  1580                           ; BSR set to: 0
  1581                           
  1582                           ; BSR set to: 0
  1583  000C34  BFAB               	btfsc	(config_ccp1@n+1)& (0+255),7,b
  1584  000C36  D005               	goto	u2060
  1585  000C38  51AB               	movf	(config_ccp1@n+1)& (0+255),w,b
  1586  000C3A  E1D8               	bnz	l2326
  1587  000C3C  05AA               	decf	config_ccp1@n& (0+255),w,b
  1588  000C3E  B0D8               	btfsc	status,0,c
  1589  000C40  D7D5               	goto	l139
  1590  000C42                     u2060:
  1591                           
  1592                           ; BSR set to: 0
  1593                           ;Pwm.c: 65: }
  1594                           ;Pwm.c: 67: for(j = 0 ; j <= 1; j++)
  1595                           
  1596                           ; BSR set to: 0
  1597  000C42  0E00               	movlw	0
  1598  000C44  6FAD               	movwf	(config_ccp1@j+1)& (0+255),b
  1599  000C46  0E00               	movlw	0
  1600  000C48  6FAC               	movwf	config_ccp1@j& (0+255),b
  1601  000C4A                     l2336:
  1602                           
  1603                           ; BSR set to: 0
  1604  000C4A  BFAD               	btfsc	(config_ccp1@j+1)& (0+255),7,b
  1605  000C4C  D006               	goto	l141
  1606  000C4E  51AD               	movf	(config_ccp1@j+1)& (0+255),w,b
  1607  000C50  E159               	bnz	l2352
  1608  000C52  0E02               	movlw	2
  1609  000C54  5DAC               	subwf	config_ccp1@j& (0+255),w,b
  1610  000C56  B0D8               	btfsc	status,0,c
  1611  000C58  D055               	goto	u2080
  1612  000C5A                     l141:
  1613                           
  1614                           ; BSR set to: 0
  1615                           ;Pwm.c: 68: {
  1616                           ;Pwm.c: 69: x = a[j] * (pow (2,j));
  1617                           
  1618                           ; BSR set to: 0
  1619  000C5A  C0AC  F009         	movff	config_ccp1@j,___awtoft@c
  1620  000C5E  C0AD  F00A         	movff	config_ccp1@j+1,___awtoft@c+1
  1621  000C62  EC54  F00F         	call	___awtoft	;wreg free
  1622  000C66  C009  F09E         	movff	?___awtoft,_config_ccp1$1433
  1623  000C6A  C00A  F09F         	movff	?___awtoft+1,_config_ccp1$1433+1
  1624  000C6E  C00B  F0A0         	movff	?___awtoft+2,_config_ccp1$1433+2
  1625                           
  1626                           ;Pwm.c: 68: {
  1627                           ;Pwm.c: 69: x = a[j] * (pow (2,j));
  1628  000C72  C09E  F069         	movff	_config_ccp1$1433,pow@y
  1629  000C76  C09F  F06A         	movff	_config_ccp1$1433+1,pow@y+1
  1630  000C7A  C0A0  F06B         	movff	_config_ccp1$1433+2,pow@y+2
  1631  000C7E  0E00               	movlw	0
  1632  000C80  0100               	movlb	0	; () banked
  1633  000C82  6F66               	movwf	pow@x& (0+255),b
  1634  000C84  0E00               	movlw	0
  1635  000C86  6F67               	movwf	(pow@x+1)& (0+255),b
  1636  000C88  0E40               	movlw	64
  1637  000C8A  6F68               	movwf	(pow@x+2)& (0+255),b
  1638  000C8C  ECBC  F008         	call	_pow	;wreg free
  1639  000C90  C066  F0A1         	movff	?_pow,_config_ccp1$1434
  1640  000C94  C067  F0A2         	movff	?_pow+1,_config_ccp1$1434+1
  1641  000C98  C068  F0A3         	movff	?_pow+2,_config_ccp1$1434+2
  1642                           
  1643                           ;Pwm.c: 68: {
  1644                           ;Pwm.c: 69: x = a[j] * (pow (2,j));
  1645  000C9C  C0A1  F01C         	movff	_config_ccp1$1434,___ftmul@f2
  1646  000CA0  C0A2  F01D         	movff	_config_ccp1$1434+1,___ftmul@f2+1
  1647  000CA4  C0A3  F01E         	movff	_config_ccp1$1434+2,___ftmul@f2+2
  1648  000CA8  90D8               	bcf	status,0,c
  1649  000CAA  0100               	movlb	0	; () banked
  1650  000CAC  35AC               	rlcf	config_ccp1@j& (0+255),w,b
  1651  000CAE  6ED9               	movwf	fsr2l,c
  1652  000CB0  35AD               	rlcf	(config_ccp1@j+1)& (0+255),w,b
  1653  000CB2  6EDA               	movwf	fsr2h,c
  1654  000CB4  0E77               	movlw	low config_ccp1@a
  1655  000CB6  26D9               	addwf	fsr2l,f,c
  1656  000CB8  0E00               	movlw	high config_ccp1@a
  1657  000CBA  22DA               	addwfc	fsr2h,f,c
  1658  000CBC  CFDE F009          	movff	postinc2,___awtoft@c
  1659  000CC0  CFDD F00A          	movff	postdec2,___awtoft@c+1
  1660  000CC4  EC54  F00F         	call	___awtoft	;wreg free
  1661  000CC8  C009  F019         	movff	?___awtoft,___ftmul@f1
  1662  000CCC  C00A  F01A         	movff	?___awtoft+1,___ftmul@f1+1
  1663  000CD0  C00B  F01B         	movff	?___awtoft+2,___ftmul@f1+2
  1664  000CD4  EC83  F00A         	call	___ftmul	;wreg free
  1665  000CD8  C019  F037         	movff	?___ftmul,___fttol@f1
  1666  000CDC  C01A  F038         	movff	?___ftmul+1,___fttol@f1+1
  1667  000CE0  C01B  F039         	movff	?___ftmul+2,___fttol@f1+2
  1668  000CE4  EC09  F00A         	call	___fttol	;wreg free
  1669  000CE8  C037  F0A4         	movff	?___fttol,config_ccp1@x
  1670  000CEC  C038  F0A5         	movff	?___fttol+1,config_ccp1@x+1
  1671                           
  1672                           ;Pwm.c: 70: y = x + y;
  1673  000CF0  0100               	movlb	0	; () banked
  1674  000CF2  51A8               	movf	config_ccp1@y& (0+255),w,b
  1675  000CF4  25A4               	addwf	config_ccp1@x& (0+255),w,b
  1676  000CF6  6FA8               	movwf	config_ccp1@y& (0+255),b
  1677  000CF8  51A9               	movf	(config_ccp1@y+1)& (0+255),w,b
  1678  000CFA  21A5               	addwfc	(config_ccp1@x+1)& (0+255),w,b
  1679  000CFC  6FA9               	movwf	(config_ccp1@y+1)& (0+255),b
  1680                           
  1681                           ; BSR set to: 0
  1682  000CFE  4BAC               	infsnz	config_ccp1@j& (0+255),f,b
  1683  000D00  2BAD               	incf	(config_ccp1@j+1)& (0+255),f,b
  1684  000D02  D7A3               	goto	l2336
  1685  000D04                     u2080:
  1686  000D04                     l2352:
  1687                           
  1688                           ; BSR set to: 0
  1689                           ;Pwm.c: 71: }
  1690                           ;Pwm.c: 72: for(j = 2 ; j <= 9; j++)
  1691  000D04  0E00               	movlw	0
  1692  000D06  6FAD               	movwf	(config_ccp1@j+1)& (0+255),b
  1693  000D08  0E02               	movlw	2
  1694  000D0A  6FAC               	movwf	config_ccp1@j& (0+255),b
  1695  000D0C                     l2354:
  1696                           
  1697                           ; BSR set to: 0
  1698  000D0C  BFAD               	btfsc	(config_ccp1@j+1)& (0+255),7,b
  1699  000D0E  D006               	goto	l143
  1700  000D10  51AD               	movf	(config_ccp1@j+1)& (0+255),w,b
  1701  000D12  E15B               	bnz	l2372
  1702  000D14  0E0A               	movlw	10
  1703  000D16  5DAC               	subwf	config_ccp1@j& (0+255),w,b
  1704  000D18  B0D8               	btfsc	status,0,c
  1705  000D1A  D057               	goto	u2100
  1706  000D1C                     l143:
  1707                           
  1708                           ; BSR set to: 0
  1709                           ;Pwm.c: 73: {
  1710                           ;Pwm.c: 74: x = a[j] * (pow (2,z));
  1711                           
  1712                           ; BSR set to: 0
  1713  000D1C  C09C  F009         	movff	config_ccp1@z,___awtoft@c
  1714  000D20  C09D  F00A         	movff	config_ccp1@z+1,___awtoft@c+1
  1715  000D24  EC54  F00F         	call	___awtoft	;wreg free
  1716  000D28  C009  F09E         	movff	?___awtoft,_config_ccp1$1433
  1717  000D2C  C00A  F09F         	movff	?___awtoft+1,_config_ccp1$1433+1
  1718  000D30  C00B  F0A0         	movff	?___awtoft+2,_config_ccp1$1433+2
  1719                           
  1720                           ;Pwm.c: 73: {
  1721                           ;Pwm.c: 74: x = a[j] * (pow (2,z));
  1722  000D34  C09E  F069         	movff	_config_ccp1$1433,pow@y
  1723  000D38  C09F  F06A         	movff	_config_ccp1$1433+1,pow@y+1
  1724  000D3C  C0A0  F06B         	movff	_config_ccp1$1433+2,pow@y+2
  1725  000D40  0E00               	movlw	0
  1726  000D42  0100               	movlb	0	; () banked
  1727  000D44  6F66               	movwf	pow@x& (0+255),b
  1728  000D46  0E00               	movlw	0
  1729  000D48  6F67               	movwf	(pow@x+1)& (0+255),b
  1730  000D4A  0E40               	movlw	64
  1731  000D4C  6F68               	movwf	(pow@x+2)& (0+255),b
  1732  000D4E  ECBC  F008         	call	_pow	;wreg free
  1733  000D52  C066  F0A1         	movff	?_pow,_config_ccp1$1434
  1734  000D56  C067  F0A2         	movff	?_pow+1,_config_ccp1$1434+1
  1735  000D5A  C068  F0A3         	movff	?_pow+2,_config_ccp1$1434+2
  1736                           
  1737                           ;Pwm.c: 73: {
  1738                           ;Pwm.c: 74: x = a[j] * (pow (2,z));
  1739  000D5E  C0A1  F01C         	movff	_config_ccp1$1434,___ftmul@f2
  1740  000D62  C0A2  F01D         	movff	_config_ccp1$1434+1,___ftmul@f2+1
  1741  000D66  C0A3  F01E         	movff	_config_ccp1$1434+2,___ftmul@f2+2
  1742  000D6A  90D8               	bcf	status,0,c
  1743  000D6C  0100               	movlb	0	; () banked
  1744  000D6E  35AC               	rlcf	config_ccp1@j& (0+255),w,b
  1745  000D70  6ED9               	movwf	fsr2l,c
  1746  000D72  35AD               	rlcf	(config_ccp1@j+1)& (0+255),w,b
  1747  000D74  6EDA               	movwf	fsr2h,c
  1748  000D76  0E77               	movlw	low config_ccp1@a
  1749  000D78  26D9               	addwf	fsr2l,f,c
  1750  000D7A  0E00               	movlw	high config_ccp1@a
  1751  000D7C  22DA               	addwfc	fsr2h,f,c
  1752  000D7E  CFDE F009          	movff	postinc2,___awtoft@c
  1753  000D82  CFDD F00A          	movff	postdec2,___awtoft@c+1
  1754  000D86  EC54  F00F         	call	___awtoft	;wreg free
  1755  000D8A  C009  F019         	movff	?___awtoft,___ftmul@f1
  1756  000D8E  C00A  F01A         	movff	?___awtoft+1,___ftmul@f1+1
  1757  000D92  C00B  F01B         	movff	?___awtoft+2,___ftmul@f1+2
  1758  000D96  EC83  F00A         	call	___ftmul	;wreg free
  1759  000D9A  C019  F037         	movff	?___ftmul,___fttol@f1
  1760  000D9E  C01A  F038         	movff	?___ftmul+1,___fttol@f1+1
  1761  000DA2  C01B  F039         	movff	?___ftmul+2,___fttol@f1+2
  1762  000DA6  EC09  F00A         	call	___fttol	;wreg free
  1763  000DAA  C037  F0A4         	movff	?___fttol,config_ccp1@x
  1764  000DAE  C038  F0A5         	movff	?___fttol+1,config_ccp1@x+1
  1765                           
  1766                           ;Pwm.c: 75: w = x + w;
  1767  000DB2  0100               	movlb	0	; () banked
  1768  000DB4  51A6               	movf	config_ccp1@w& (0+255),w,b
  1769  000DB6  25A4               	addwf	config_ccp1@x& (0+255),w,b
  1770  000DB8  6FA6               	movwf	config_ccp1@w& (0+255),b
  1771  000DBA  51A7               	movf	(config_ccp1@w+1)& (0+255),w,b
  1772  000DBC  21A5               	addwfc	(config_ccp1@x+1)& (0+255),w,b
  1773  000DBE  6FA7               	movwf	(config_ccp1@w+1)& (0+255),b
  1774                           
  1775                           ; BSR set to: 0
  1776                           ;Pwm.c: 76: z++;
  1777  000DC0  4B9C               	infsnz	config_ccp1@z& (0+255),f,b
  1778  000DC2  2B9D               	incf	(config_ccp1@z+1)& (0+255),f,b
  1779                           
  1780                           ; BSR set to: 0
  1781  000DC4  4BAC               	infsnz	config_ccp1@j& (0+255),f,b
  1782  000DC6  2BAD               	incf	(config_ccp1@j+1)& (0+255),f,b
  1783  000DC8  D7A1               	goto	l2354
  1784  000DCA                     u2100:
  1785  000DCA                     l2372:
  1786                           
  1787                           ; BSR set to: 0
  1788                           ;Pwm.c: 77: }
  1789                           ;Pwm.c: 79: CCP1CONbits.DC1B = y;
  1790  000DCA  C0A8  F05D         	movff	config_ccp1@y,??_config_ccp1
  1791  000DCE  3A5D               	swapf	??_config_ccp1,f,c
  1792  000DD0  50BD               	movf	4029,w,c	;volatile
  1793  000DD2  185D               	xorwf	??_config_ccp1,w,c
  1794  000DD4  0BCF               	andlw	-49
  1795  000DD6  185D               	xorwf	??_config_ccp1,w,c
  1796  000DD8  6EBD               	movwf	4029,c	;volatile
  1797                           
  1798                           ; BSR set to: 0
  1799                           ;Pwm.c: 80: CCPR1L = w;
  1800  000DDA  C0A6  FFBE         	movff	config_ccp1@w,4030	;volatile
  1801                           
  1802                           ; BSR set to: 0
  1803  000DDE  0012               	return		;funcret
  1804  000DE0                     __end_of_config_ccp1:
  1805                           	opt stack 0
  1806                           tblptru	equ	0xFF8
  1807                           postinc0	equ	0xFEE
  1808                           wreg	equ	0xFE8
  1809                           plusw1	equ	0xFE3
  1810                           postinc2	equ	0xFDE
  1811                           postdec2	equ	0xFDD
  1812                           plusw2	equ	0xFDB
  1813                           fsr2h	equ	0xFDA
  1814                           fsr2l	equ	0xFD9
  1815                           status	equ	0xFD8
  1816                           
  1817 ;; *************** function _pow *****************
  1818 ;; Defined at:
  1819 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\pow.c"
  1820 ;; Parameters:    Size  Location     Type
  1821 ;;  x               3    6[BANK0 ] void 
  1822 ;;  y               3    9[BANK0 ] void 
  1823 ;; Auto vars:     Size  Location     Type
  1824 ;;  yi              4   19[BANK0 ] unsigned long 
  1825 ;;  sign            1   18[BANK0 ] unsigned char 
  1826 ;; Return value:  Size  Location     Type
  1827 ;;                  3    6[BANK0 ] unsigned char 
  1828 ;; Registers used:
  1829 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1830 ;; Tracked objects:
  1831 ;;		On entry : 0/0
  1832 ;;		On exit  : 0/0
  1833 ;;		Unchanged: 0/0
  1834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1835 ;;      Params:         0       6       0       0       0       0       0       0       0
  1836 ;;      Locals:         0      11       0       0       0       0       0       0       0
  1837 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1838 ;;      Totals:         0      17       0       0       0       0       0       0       0
  1839 ;;Total ram usage:       17 bytes
  1840 ;; Hardware stack levels used:    1
  1841 ;; Hardware stack levels required when called:    4
  1842 ;; This function calls:
  1843 ;;		___ftge
  1844 ;;		___ftmul
  1845 ;;		___ftneg
  1846 ;;		___fttol
  1847 ;;		___lltoft
  1848 ;;		_exp
  1849 ;;		_log
  1850 ;; This function is called by:
  1851 ;;		_config_ccp1
  1852 ;;		_config_ccp2
  1853 ;; This function uses a non-reentrant model
  1854 ;;
  1855                           
  1856                           	psect	text4
  1857  001178                     __ptext4:
  1858                           	opt stack 0
  1859  001178                     _pow:
  1860                           	opt stack 25
  1861                           
  1862                           ; BSR set to: 0
  1863                           ;incstack = 0
  1864  001178  0E00               	movlw	0
  1865  00117A  0100               	movlb	0	; () banked
  1866  00117C  6F72               	movwf	pow@sign& (0+255),b
  1867                           
  1868                           ; BSR set to: 0
  1869  00117E  5166               	movf	pow@x& (0+255),w,b
  1870  001180  1167               	iorwf	(pow@x+1)& (0+255),w,b
  1871  001182  1168               	iorwf	(pow@x+2)& (0+255),w,b
  1872  001184  A4D8               	btfss	status,2,c
  1873  001186  D01D               	goto	l591
  1874                           
  1875                           ; BSR set to: 0
  1876  001188  0E00               	movlw	0
  1877  00118A  6E01               	movwf	___ftge@ff1,c
  1878  00118C  0E00               	movlw	0
  1879  00118E  6E02               	movwf	___ftge@ff1+1,c
  1880  001190  0E00               	movlw	0
  1881  001192  6E03               	movwf	___ftge@ff1+2,c
  1882  001194  C069  F004         	movff	pow@y,___ftge@ff2
  1883  001198  C06A  F005         	movff	pow@y+1,___ftge@ff2+1
  1884  00119C  C06B  F006         	movff	pow@y+2,___ftge@ff2+2
  1885  0011A0  ECA6  F00D         	call	___ftge	;wreg free
  1886  0011A4  A0D8               	btfss	status,0,c
  1887  0011A6  D005               	goto	l592
  1888  0011A8  0E00               	movlw	0
  1889  0011AA  0100               	movlb	0	; () banked
  1890  0011AC  6FEE               	movwf	(_errno+1)& (0+255),b
  1891  0011AE  0E21               	movlw	33
  1892  0011B0  6FED               	movwf	_errno& (0+255),b
  1893  0011B2                     l592:
  1894  0011B2  0E00               	movlw	0
  1895  0011B4  0100               	movlb	0	; () banked
  1896  0011B6  6F66               	movwf	?_pow& (0+255),b
  1897  0011B8  0E00               	movlw	0
  1898  0011BA  6F67               	movwf	(?_pow+1)& (0+255),b
  1899  0011BC  0E00               	movlw	0
  1900  0011BE  6F68               	movwf	(?_pow+2)& (0+255),b
  1901                           
  1902                           ; BSR set to: 0
  1903  0011C0  0012               	return	
  1904  0011C2                     l591:
  1905                           
  1906                           ; BSR set to: 0
  1907                           
  1908                           ; BSR set to: 0
  1909  0011C2  5169               	movf	pow@y& (0+255),w,b
  1910  0011C4  116A               	iorwf	(pow@y+1)& (0+255),w,b
  1911  0011C6  116B               	iorwf	(pow@y+2)& (0+255),w,b
  1912  0011C8  A4D8               	btfss	status,2,c
  1913  0011CA  D007               	goto	l594
  1914                           
  1915                           ; BSR set to: 0
  1916  0011CC  0E00               	movlw	0
  1917  0011CE  6F66               	movwf	?_pow& (0+255),b
  1918  0011D0  0E80               	movlw	128
  1919  0011D2  6F67               	movwf	(?_pow+1)& (0+255),b
  1920  0011D4  0E3F               	movlw	63
  1921  0011D6  6F68               	movwf	(?_pow+2)& (0+255),b
  1922                           
  1923                           ; BSR set to: 0
  1924  0011D8  0012               	return	
  1925  0011DA                     l594:
  1926                           
  1927                           ; BSR set to: 0
  1928                           
  1929                           ; BSR set to: 0
  1930  0011DA  AF68               	btfss	(pow@x+2)& (0+255),7,b
  1931  0011DC  D041               	goto	l595
  1932                           
  1933                           ; BSR set to: 0
  1934  0011DE  C069  F037         	movff	pow@y,___fttol@f1
  1935  0011E2  C06A  F038         	movff	pow@y+1,___fttol@f1+1
  1936  0011E6  C06B  F039         	movff	pow@y+2,___fttol@f1+2
  1937  0011EA  EC09  F00A         	call	___fttol	;wreg free
  1938  0011EE  C037  F073         	movff	?___fttol,pow@yi
  1939  0011F2  C038  F074         	movff	?___fttol+1,pow@yi+1
  1940  0011F6  C039  F075         	movff	?___fttol+2,pow@yi+2
  1941  0011FA  C03A  F076         	movff	?___fttol+3,pow@yi+3
  1942  0011FE  C073  F009         	movff	pow@yi,___lltoft@c
  1943  001202  C074  F00A         	movff	pow@yi+1,___lltoft@c+1
  1944  001206  C075  F00B         	movff	pow@yi+2,___lltoft@c+2
  1945  00120A  C076  F00C         	movff	pow@yi+3,___lltoft@c+3
  1946  00120E  EC06  F00F         	call	___lltoft	;wreg free
  1947  001212  0100               	movlb	0	; () banked
  1948  001214  5169               	movf	pow@y& (0+255),w,b
  1949  001216  1809               	xorwf	?___lltoft,w,c
  1950  001218  E107               	bnz	u1960
  1951  00121A  516A               	movf	(pow@y+1)& (0+255),w,b
  1952  00121C  180A               	xorwf	?___lltoft+1,w,c
  1953  00121E  E104               	bnz	u1960
  1954  001220  516B               	movf	(pow@y+2)& (0+255),w,b
  1955  001222  180B               	xorwf	?___lltoft+2,w,c
  1956  001224  B4D8               	btfsc	status,2,c
  1957  001226  D00B               	goto	l596
  1958  001228                     u1960:
  1959                           
  1960                           ; BSR set to: 0
  1961  001228  0E00               	movlw	0
  1962  00122A  6FEE               	movwf	(_errno+1)& (0+255),b
  1963  00122C  0E21               	movlw	33
  1964  00122E  6FED               	movwf	_errno& (0+255),b
  1965  001230  0E00               	movlw	0
  1966  001232  6F66               	movwf	?_pow& (0+255),b
  1967  001234  0E00               	movlw	0
  1968  001236  6F67               	movwf	(?_pow+1)& (0+255),b
  1969  001238  0E00               	movlw	0
  1970  00123A  6F68               	movwf	(?_pow+2)& (0+255),b
  1971                           
  1972                           ; BSR set to: 0
  1973  00123C  0012               	return	
  1974  00123E                     l596:
  1975                           
  1976                           ; BSR set to: 0
  1977                           
  1978                           ; BSR set to: 0
  1979  00123E  5173               	movf	pow@yi& (0+255),w,b
  1980  001240  0B01               	andlw	1
  1981  001242  6F72               	movwf	pow@sign& (0+255),b
  1982                           
  1983                           ; BSR set to: 0
  1984  001244  C066  F001         	movff	pow@x,___ftneg@f1
  1985  001248  C067  F002         	movff	pow@x+1,___ftneg@f1+1
  1986  00124C  C068  F003         	movff	pow@x+2,___ftneg@f1+2
  1987  001250  EC83  F00F         	call	___ftneg	;wreg free
  1988  001254  C001  F066         	movff	?___ftneg,pow@x
  1989  001258  C002  F067         	movff	?___ftneg+1,pow@x+1
  1990  00125C  C003  F068         	movff	?___ftneg+2,pow@x+2
  1991  001260                     l595:
  1992  001260  C066  F034         	movff	pow@x,log@x
  1993  001264  C067  F035         	movff	pow@x+1,log@x+1
  1994  001268  C068  F036         	movff	pow@x+2,log@x+2
  1995  00126C  EC7A  F009         	call	_log	;wreg free
  1996  001270  C034  F06C         	movff	?_log,_pow$1438
  1997  001274  C035  F06D         	movff	?_log+1,_pow$1438+1
  1998  001278  C036  F06E         	movff	?_log+2,_pow$1438+2
  1999  00127C  C06C  F019         	movff	_pow$1438,___ftmul@f1
  2000  001280  C06D  F01A         	movff	_pow$1438+1,___ftmul@f1+1
  2001  001284  C06E  F01B         	movff	_pow$1438+2,___ftmul@f1+2
  2002  001288  C069  F01C         	movff	pow@y,___ftmul@f2
  2003  00128C  C06A  F01D         	movff	pow@y+1,___ftmul@f2+1
  2004  001290  C06B  F01E         	movff	pow@y+2,___ftmul@f2+2
  2005  001294  EC83  F00A         	call	___ftmul	;wreg free
  2006  001298  C019  F06F         	movff	?___ftmul,_pow$1439
  2007  00129C  C01A  F070         	movff	?___ftmul+1,_pow$1439+1
  2008  0012A0  C01B  F071         	movff	?___ftmul+2,_pow$1439+2
  2009  0012A4  C06F  F058         	movff	_pow$1439,exp@x
  2010  0012A8  C070  F059         	movff	_pow$1439+1,exp@x+1
  2011  0012AC  C071  F05A         	movff	_pow$1439+2,exp@x+2
  2012  0012B0  ECF0  F006         	call	_exp	;wreg free
  2013  0012B4  C058  F066         	movff	?_exp,pow@x
  2014  0012B8  C059  F067         	movff	?_exp+1,pow@x+1
  2015  0012BC  C05A  F068         	movff	?_exp+2,pow@x+2
  2016  0012C0  0100               	movlb	0	; () banked
  2017  0012C2  5172               	movf	pow@sign& (0+255),w,b
  2018  0012C4  B4D8               	btfsc	status,2,c
  2019  0012C6  D00F               	goto	l597
  2020                           
  2021                           ; BSR set to: 0
  2022  0012C8  C066  F001         	movff	pow@x,___ftneg@f1
  2023  0012CC  C067  F002         	movff	pow@x+1,___ftneg@f1+1
  2024  0012D0  C068  F003         	movff	pow@x+2,___ftneg@f1+2
  2025  0012D4  EC83  F00F         	call	___ftneg	;wreg free
  2026  0012D8  C001  F066         	movff	?___ftneg,?_pow
  2027  0012DC  C002  F067         	movff	?___ftneg+1,?_pow+1
  2028  0012E0  C003  F068         	movff	?___ftneg+2,?_pow+2
  2029  0012E4  0012               	return	
  2030  0012E6                     l597:
  2031                           
  2032                           ; BSR set to: 0
  2033  0012E6  C066  F066         	movff	pow@x,?_pow
  2034  0012EA  C067  F067         	movff	pow@x+1,?_pow+1
  2035  0012EE  C068  F068         	movff	pow@x+2,?_pow+2
  2036  0012F2  0012               	return		;funcret
  2037  0012F4                     __end_of_pow:
  2038                           	opt stack 0
  2039                           tblptru	equ	0xFF8
  2040                           postinc0	equ	0xFEE
  2041                           wreg	equ	0xFE8
  2042                           plusw1	equ	0xFE3
  2043                           postinc2	equ	0xFDE
  2044                           postdec2	equ	0xFDD
  2045                           plusw2	equ	0xFDB
  2046                           fsr2h	equ	0xFDA
  2047                           fsr2l	equ	0xFD9
  2048                           status	equ	0xFD8
  2049                           
  2050 ;; *************** function _log *****************
  2051 ;; Defined at:
  2052 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
  2053 ;; Parameters:    Size  Location     Type
  2054 ;;  x               3   51[COMRAM] unsigned char 
  2055 ;; Auto vars:     Size  Location     Type
  2056 ;;  exponent        2   54[COMRAM] int 
  2057 ;; Return value:  Size  Location     Type
  2058 ;;                  3   51[COMRAM] int 
  2059 ;; Registers used:
  2060 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2061 ;; Tracked objects:
  2062 ;;		On entry : 0/0
  2063 ;;		On exit  : 0/0
  2064 ;;		Unchanged: 0/0
  2065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2066 ;;      Params:         3       0       0       0       0       0       0       0       0
  2067 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2068 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2069 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2070 ;;Total ram usage:        5 bytes
  2071 ;; Hardware stack levels used:    1
  2072 ;; Hardware stack levels required when called:    3
  2073 ;; This function calls:
  2074 ;;		___awtoft
  2075 ;;		___ftadd
  2076 ;;		___ftmul
  2077 ;;		_eval_poly
  2078 ;;		_frexp
  2079 ;; This function is called by:
  2080 ;;		_pow
  2081 ;; This function uses a non-reentrant model
  2082 ;;
  2083                           
  2084                           	psect	text5
  2085  0012F4                     __ptext5:
  2086                           	opt stack 0
  2087  0012F4                     _log:
  2088                           	opt stack 25
  2089                           
  2090                           ;incstack = 0
  2091  0012F4  AE36               	btfss	log@x+2,7,c
  2092  0012F6  D00C               	goto	l793
  2093  0012F8  0E00               	movlw	0
  2094  0012FA  0100               	movlb	0	; () banked
  2095  0012FC  6FEE               	movwf	(_errno+1)& (0+255),b
  2096  0012FE  0E21               	movlw	33
  2097  001300  6FED               	movwf	_errno& (0+255),b
  2098  001302  0E00               	movlw	0
  2099  001304  6E34               	movwf	?_log,c
  2100  001306  0E00               	movlw	0
  2101  001308  6E35               	movwf	?_log+1,c
  2102  00130A  0E00               	movlw	0
  2103  00130C  6E36               	movwf	?_log+2,c
  2104                           
  2105                           ; BSR set to: 0
  2106  00130E  0012               	return	
  2107  001310                     l793:
  2108                           
  2109                           ; BSR set to: 0
  2110  001310  5034               	movf	log@x,w,c
  2111  001312  1035               	iorwf	log@x+1,w,c
  2112  001314  1036               	iorwf	log@x+2,w,c
  2113  001316  A4D8               	btfss	status,2,c
  2114  001318  D00C               	goto	l795
  2115  00131A  0E00               	movlw	0
  2116  00131C  0100               	movlb	0	; () banked
  2117  00131E  6FEE               	movwf	(_errno+1)& (0+255),b
  2118  001320  0E22               	movlw	34
  2119  001322  6FED               	movwf	_errno& (0+255),b
  2120  001324  0E00               	movlw	0
  2121  001326  6E34               	movwf	?_log,c
  2122  001328  0E00               	movlw	0
  2123  00132A  6E35               	movwf	?_log+1,c
  2124  00132C  0E00               	movlw	0
  2125  00132E  6E36               	movwf	?_log+2,c
  2126                           
  2127                           ; BSR set to: 0
  2128  001330  0012               	return	
  2129  001332                     l795:
  2130                           
  2131                           ; BSR set to: 0
  2132  001332  0E00               	movlw	0
  2133  001334  6E1C               	movwf	___ftmul@f2,c
  2134  001336  0E00               	movlw	0
  2135  001338  6E1D               	movwf	___ftmul@f2+1,c
  2136  00133A  0E40               	movlw	64
  2137  00133C  6E1E               	movwf	___ftmul@f2+2,c
  2138  00133E  0E37               	movlw	low log@exponent
  2139  001340  6E04               	movwf	frexp@eptr,c
  2140  001342  0E00               	movlw	high log@exponent
  2141  001344  6E05               	movwf	frexp@eptr+1,c
  2142  001346  C034  F001         	movff	log@x,frexp@value
  2143  00134A  C035  F002         	movff	log@x+1,frexp@value+1
  2144  00134E  C036  F003         	movff	log@x+2,frexp@value+2
  2145  001352  EC5E  F00D         	call	_frexp	;wreg free
  2146  001356  C001  F019         	movff	?_frexp,___ftmul@f1
  2147  00135A  C002  F01A         	movff	?_frexp+1,___ftmul@f1+1
  2148  00135E  C003  F01B         	movff	?_frexp+2,___ftmul@f1+2
  2149  001362  EC83  F00A         	call	___ftmul	;wreg free
  2150  001366  C019  F00D         	movff	?___ftmul,___ftadd@f1
  2151  00136A  C01A  F00E         	movff	?___ftmul+1,___ftadd@f1+1
  2152  00136E  C01B  F00F         	movff	?___ftmul+2,___ftadd@f1+2
  2153  001372  0E00               	movlw	0
  2154  001374  6E10               	movwf	___ftadd@f2,c
  2155  001376  0E80               	movlw	128
  2156  001378  6E11               	movwf	___ftadd@f2+1,c
  2157  00137A  0EBF               	movlw	191
  2158  00137C  6E12               	movwf	___ftadd@f2+2,c
  2159  00137E  ECE6  F007         	call	___ftadd	;wreg free
  2160  001382  C00D  F034         	movff	?___ftadd,log@x
  2161  001386  C00E  F035         	movff	?___ftadd+1,log@x+1
  2162  00138A  C00F  F036         	movff	?___ftadd+2,log@x+2
  2163  00138E  0637               	decf	log@exponent,f,c
  2164  001390  A0D8               	btfss	status,0,c
  2165  001392  0638               	decf	log@exponent+1,f,c
  2166  001394  C034  F028         	movff	log@x,eval_poly@x
  2167  001398  C035  F029         	movff	log@x+1,eval_poly@x+1
  2168  00139C  C036  F02A         	movff	log@x+2,eval_poly@x+2
  2169  0013A0  0E1F               	movlw	low log@coeff
  2170  0013A2  6E2B               	movwf	eval_poly@d,c
  2171  0013A4  0E08               	movlw	high log@coeff
  2172  0013A6  6E2C               	movwf	eval_poly@d+1,c
  2173  0013A8  0E00               	movlw	0
  2174  0013AA  6E2E               	movwf	eval_poly@n+1,c
  2175  0013AC  0E08               	movlw	8
  2176  0013AE  6E2D               	movwf	eval_poly@n,c
  2177  0013B0  ECDF  F00B         	call	_eval_poly	;wreg free
  2178  0013B4  C028  F034         	movff	?_eval_poly,log@x
  2179  0013B8  C029  F035         	movff	?_eval_poly+1,log@x+1
  2180  0013BC  C02A  F036         	movff	?_eval_poly+2,log@x+2
  2181  0013C0  0E72               	movlw	114
  2182  0013C2  6E1C               	movwf	___ftmul@f2,c
  2183  0013C4  0E31               	movlw	49
  2184  0013C6  6E1D               	movwf	___ftmul@f2+1,c
  2185  0013C8  0E3F               	movlw	63
  2186  0013CA  6E1E               	movwf	___ftmul@f2+2,c
  2187  0013CC  C037  F009         	movff	log@exponent,___awtoft@c
  2188  0013D0  C038  F00A         	movff	log@exponent+1,___awtoft@c+1
  2189  0013D4  EC54  F00F         	call	___awtoft	;wreg free
  2190  0013D8  C009  F019         	movff	?___awtoft,___ftmul@f1
  2191  0013DC  C00A  F01A         	movff	?___awtoft+1,___ftmul@f1+1
  2192  0013E0  C00B  F01B         	movff	?___awtoft+2,___ftmul@f1+2
  2193  0013E4  EC83  F00A         	call	___ftmul	;wreg free
  2194  0013E8  C019  F00D         	movff	?___ftmul,___ftadd@f1
  2195  0013EC  C01A  F00E         	movff	?___ftmul+1,___ftadd@f1+1
  2196  0013F0  C01B  F00F         	movff	?___ftmul+2,___ftadd@f1+2
  2197  0013F4  C034  F010         	movff	log@x,___ftadd@f2
  2198  0013F8  C035  F011         	movff	log@x+1,___ftadd@f2+1
  2199  0013FC  C036  F012         	movff	log@x+2,___ftadd@f2+2
  2200  001400  ECE6  F007         	call	___ftadd	;wreg free
  2201  001404  C00D  F034         	movff	?___ftadd,?_log
  2202  001408  C00E  F035         	movff	?___ftadd+1,?_log+1
  2203  00140C  C00F  F036         	movff	?___ftadd+2,?_log+2
  2204  001410  0012               	return	
  2205  001412                     __end_of_log:
  2206                           	opt stack 0
  2207                           tblptru	equ	0xFF8
  2208                           postinc0	equ	0xFEE
  2209                           wreg	equ	0xFE8
  2210                           plusw1	equ	0xFE3
  2211                           postinc2	equ	0xFDE
  2212                           postdec2	equ	0xFDD
  2213                           plusw2	equ	0xFDB
  2214                           fsr2h	equ	0xFDA
  2215                           fsr2l	equ	0xFD9
  2216                           status	equ	0xFD8
  2217                           
  2218 ;; *************** function _exp *****************
  2219 ;; Defined at:
  2220 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\exp.c"
  2221 ;; Parameters:    Size  Location     Type
  2222 ;;  x               3   87[COMRAM] int 
  2223 ;; Auto vars:     Size  Location     Type
  2224 ;;  exponent        2    3[BANK0 ] int 
  2225 ;;  sign            1    5[BANK0 ] unsigned char 
  2226 ;; Return value:  Size  Location     Type
  2227 ;;                  3   87[COMRAM] unsigned char 
  2228 ;; Registers used:
  2229 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2230 ;; Tracked objects:
  2231 ;;		On entry : 0/0
  2232 ;;		On exit  : 0/0
  2233 ;;		Unchanged: 0/0
  2234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2235 ;;      Params:         3       0       0       0       0       0       0       0       0
  2236 ;;      Locals:         0       6       0       0       0       0       0       0       0
  2237 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2238 ;;      Totals:         3       6       0       0       0       0       0       0       0
  2239 ;;Total ram usage:        9 bytes
  2240 ;; Hardware stack levels used:    1
  2241 ;; Hardware stack levels required when called:    3
  2242 ;; This function calls:
  2243 ;;		___awtoft
  2244 ;;		___ftdiv
  2245 ;;		___ftge
  2246 ;;		___ftmul
  2247 ;;		___ftneg
  2248 ;;		___ftsub
  2249 ;;		___fttol
  2250 ;;		_eval_poly
  2251 ;;		_floor
  2252 ;;		_ldexp
  2253 ;; This function is called by:
  2254 ;;		_pow
  2255 ;; This function uses a non-reentrant model
  2256 ;;
  2257                           
  2258                           	psect	text6
  2259  000DE0                     __ptext6:
  2260                           	opt stack 0
  2261  000DE0                     _exp:
  2262                           	opt stack 25
  2263                           
  2264                           ;incstack = 0
  2265  000DE0  5058               	movf	exp@x,w,c
  2266  000DE2  1059               	iorwf	exp@x+1,w,c
  2267  000DE4  105A               	iorwf	exp@x+2,w,c
  2268  000DE6  A4D8               	btfss	status,2,c
  2269  000DE8  D007               	goto	l751
  2270  000DEA  0E00               	movlw	0
  2271  000DEC  6E58               	movwf	?_exp,c
  2272  000DEE  0E80               	movlw	128
  2273  000DF0  6E59               	movwf	?_exp+1,c
  2274  000DF2  0E3F               	movlw	63
  2275  000DF4  6E5A               	movwf	?_exp+2,c
  2276  000DF6  0012               	return	
  2277  000DF8                     l751:
  2278  000DF8  0E72               	movlw	114
  2279  000DFA  6E01               	movwf	___ftge@ff1,c
  2280  000DFC  0E31               	movlw	49
  2281  000DFE  6E02               	movwf	___ftge@ff1+1,c
  2282  000E00  0E44               	movlw	68
  2283  000E02  6E03               	movwf	___ftge@ff1+2,c
  2284  000E04  C058  F004         	movff	exp@x,___ftge@ff2
  2285  000E08  C059  F005         	movff	exp@x+1,___ftge@ff2+1
  2286  000E0C  C05A  F006         	movff	exp@x+2,___ftge@ff2+2
  2287  000E10  ECA6  F00D         	call	___ftge	;wreg free
  2288  000E14  B0D8               	btfsc	status,0,c
  2289  000E16  D00C               	goto	l753
  2290  000E18  0E00               	movlw	0
  2291  000E1A  0100               	movlb	0	; () banked
  2292  000E1C  6FEE               	movwf	(_errno+1)& (0+255),b
  2293  000E1E  0E22               	movlw	34
  2294  000E20  6FED               	movwf	_errno& (0+255),b
  2295  000E22  0EFF               	movlw	255
  2296  000E24  6E58               	movwf	?_exp,c
  2297  000E26  0E7F               	movlw	127
  2298  000E28  6E59               	movwf	?_exp+1,c
  2299  000E2A  0E7F               	movlw	127
  2300  000E2C  6E5A               	movwf	?_exp+2,c
  2301                           
  2302                           ; BSR set to: 0
  2303  000E2E  0012               	return	
  2304  000E30                     l753:
  2305                           
  2306                           ; BSR set to: 0
  2307  000E30  C058  F001         	movff	exp@x,___ftge@ff1
  2308  000E34  C059  F002         	movff	exp@x+1,___ftge@ff1+1
  2309  000E38  C05A  F003         	movff	exp@x+2,___ftge@ff1+2
  2310  000E3C  0E49               	movlw	73
  2311  000E3E  6E04               	movwf	___ftge@ff2,c
  2312  000E40  0E3A               	movlw	58
  2313  000E42  6E05               	movwf	___ftge@ff2+1,c
  2314  000E44  0EC4               	movlw	196
  2315  000E46  6E06               	movwf	___ftge@ff2+2,c
  2316  000E48  ECA6  F00D         	call	___ftge	;wreg free
  2317  000E4C  B0D8               	btfsc	status,0,c
  2318  000E4E  D00C               	goto	l754
  2319  000E50  0E00               	movlw	0
  2320  000E52  0100               	movlb	0	; () banked
  2321  000E54  6FEE               	movwf	(_errno+1)& (0+255),b
  2322  000E56  0E22               	movlw	34
  2323  000E58  6FED               	movwf	_errno& (0+255),b
  2324  000E5A  0E00               	movlw	0
  2325  000E5C  6E58               	movwf	?_exp,c
  2326  000E5E  0E00               	movlw	0
  2327  000E60  6E59               	movwf	?_exp+1,c
  2328  000E62  0E00               	movlw	0
  2329  000E64  6E5A               	movwf	?_exp+2,c
  2330                           
  2331                           ; BSR set to: 0
  2332  000E66  0012               	return	
  2333  000E68                     l754:
  2334                           
  2335                           ; BSR set to: 0
  2336  000E68  AE5A               	btfss	exp@x+2,7,c
  2337  000E6A  D002               	goto	u1870
  2338  000E6C  0E01               	movlw	1
  2339  000E6E  D001               	goto	u1880
  2340  000E70                     u1870:
  2341  000E70  0E00               	movlw	0
  2342  000E72                     u1880:
  2343  000E72  0100               	movlb	0	; () banked
  2344  000E74  6F65               	movwf	exp@sign& (0+255),b
  2345                           
  2346                           ; BSR set to: 0
  2347  000E76  5165               	movf	exp@sign& (0+255),w,b
  2348  000E78  B4D8               	btfsc	status,2,c
  2349  000E7A  D00E               	goto	l755
  2350                           
  2351                           ; BSR set to: 0
  2352  000E7C  C058  F001         	movff	exp@x,___ftneg@f1
  2353  000E80  C059  F002         	movff	exp@x+1,___ftneg@f1+1
  2354  000E84  C05A  F003         	movff	exp@x+2,___ftneg@f1+2
  2355  000E88  EC83  F00F         	call	___ftneg	;wreg free
  2356  000E8C  C001  F058         	movff	?___ftneg,exp@x
  2357  000E90  C002  F059         	movff	?___ftneg+1,exp@x+1
  2358  000E94  C003  F05A         	movff	?___ftneg+2,exp@x+2
  2359  000E98                     l755:
  2360  000E98  C058  F019         	movff	exp@x,___ftmul@f1
  2361  000E9C  C059  F01A         	movff	exp@x+1,___ftmul@f1+1
  2362  000EA0  C05A  F01B         	movff	exp@x+2,___ftmul@f1+2
  2363  000EA4  0EAA               	movlw	170
  2364  000EA6  6E1C               	movwf	___ftmul@f2,c
  2365  000EA8  0EB8               	movlw	184
  2366  000EAA  6E1D               	movwf	___ftmul@f2+1,c
  2367  000EAC  0E3F               	movlw	63
  2368  000EAE  6E1E               	movwf	___ftmul@f2+2,c
  2369  000EB0  EC83  F00A         	call	___ftmul	;wreg free
  2370  000EB4  C019  F058         	movff	?___ftmul,exp@x
  2371  000EB8  C01A  F059         	movff	?___ftmul+1,exp@x+1
  2372  000EBC  C01B  F05A         	movff	?___ftmul+2,exp@x+2
  2373  000EC0  C058  F050         	movff	exp@x,floor@x
  2374  000EC4  C059  F051         	movff	exp@x+1,floor@x+1
  2375  000EC8  C05A  F052         	movff	exp@x+2,floor@x+2
  2376  000ECC  EC70  F00B         	call	_floor	;wreg free
  2377  000ED0  C050  F060         	movff	?_floor,_exp$1440
  2378  000ED4  C051  F061         	movff	?_floor+1,_exp$1440+1
  2379  000ED8  C052  F062         	movff	?_floor+2,_exp$1440+2
  2380  000EDC  C060  F037         	movff	_exp$1440,___fttol@f1
  2381  000EE0  C061  F038         	movff	_exp$1440+1,___fttol@f1+1
  2382  000EE4  C062  F039         	movff	_exp$1440+2,___fttol@f1+2
  2383  000EE8  EC09  F00A         	call	___fttol	;wreg free
  2384  000EEC  C037  F063         	movff	?___fttol,exp@exponent
  2385  000EF0  C038  F064         	movff	?___fttol+1,exp@exponent+1
  2386  000EF4  C058  F019         	movff	exp@x,___ftsub@f1
  2387  000EF8  C059  F01A         	movff	exp@x+1,___ftsub@f1+1
  2388  000EFC  C05A  F01B         	movff	exp@x+2,___ftsub@f1+2
  2389  000F00  C063  F009         	movff	exp@exponent,___awtoft@c
  2390  000F04  C064  F00A         	movff	exp@exponent+1,___awtoft@c+1
  2391  000F08  EC54  F00F         	call	___awtoft	;wreg free
  2392  000F0C  C009  F01C         	movff	?___awtoft,___ftsub@f2
  2393  000F10  C00A  F01D         	movff	?___awtoft+1,___ftsub@f2+1
  2394  000F14  C00B  F01E         	movff	?___awtoft+2,___ftsub@f2+2
  2395  000F18  EC34  F00F         	call	___ftsub	;wreg free
  2396  000F1C  C019  F058         	movff	?___ftsub,exp@x
  2397  000F20  C01A  F059         	movff	?___ftsub+1,exp@x+1
  2398  000F24  C01B  F05A         	movff	?___ftsub+2,exp@x+2
  2399  000F28  C058  F028         	movff	exp@x,eval_poly@x
  2400  000F2C  C059  F029         	movff	exp@x+1,eval_poly@x+1
  2401  000F30  C05A  F02A         	movff	exp@x+2,eval_poly@x+2
  2402  000F34  0E01               	movlw	low exp@coeff
  2403  000F36  6E2B               	movwf	eval_poly@d,c
  2404  000F38  0E08               	movlw	high exp@coeff
  2405  000F3A  6E2C               	movwf	eval_poly@d+1,c
  2406  000F3C  0E00               	movlw	0
  2407  000F3E  6E2E               	movwf	eval_poly@n+1,c
  2408  000F40  0E09               	movlw	9
  2409  000F42  6E2D               	movwf	eval_poly@n,c
  2410  000F44  ECDF  F00B         	call	_eval_poly	;wreg free
  2411  000F48  C028  F034         	movff	?_eval_poly,ldexp@value
  2412  000F4C  C029  F035         	movff	?_eval_poly+1,ldexp@value+1
  2413  000F50  C02A  F036         	movff	?_eval_poly+2,ldexp@value+2
  2414  000F54  C063  F037         	movff	exp@exponent,ldexp@newexp
  2415  000F58  C064  F038         	movff	exp@exponent+1,ldexp@newexp+1
  2416  000F5C  EC48  F00C         	call	_ldexp	;wreg free
  2417  000F60  C034  F058         	movff	?_ldexp,exp@x
  2418  000F64  C035  F059         	movff	?_ldexp+1,exp@x+1
  2419  000F68  C036  F05A         	movff	?_ldexp+2,exp@x+2
  2420  000F6C  0100               	movlb	0	; () banked
  2421  000F6E  5165               	movf	exp@sign& (0+255),w,b
  2422  000F70  B4D8               	btfsc	status,2,c
  2423  000F72  D025               	goto	l756
  2424                           
  2425                           ; BSR set to: 0
  2426  000F74  2858               	incf	exp@x,w,c
  2427  000F76  E10E               	bnz	l2194
  2428  000F78  0E7F               	movlw	127
  2429  000F7A  1859               	xorwf	exp@x+1,w,c
  2430  000F7C  E10B               	bnz	l2194
  2431  000F7E  0E7F               	movlw	127
  2432  000F80  185A               	xorwf	exp@x+2,w,c
  2433  000F82  A4D8               	btfss	status,2,c
  2434  000F84  D007               	goto	l757
  2435                           
  2436                           ; BSR set to: 0
  2437  000F86  0E00               	movlw	0
  2438  000F88  6E58               	movwf	?_exp,c
  2439  000F8A  0E00               	movlw	0
  2440  000F8C  6E59               	movwf	?_exp+1,c
  2441  000F8E  0E00               	movlw	0
  2442  000F90  6E5A               	movwf	?_exp+2,c
  2443                           
  2444                           ; BSR set to: 0
  2445  000F92  0012               	return	
  2446  000F94                     l757:
  2447  000F94                     l2194:
  2448                           
  2449                           ; BSR set to: 0
  2450  000F94  0E00               	movlw	0
  2451  000F96  6E28               	movwf	___ftdiv@f1,c
  2452  000F98  0E80               	movlw	128
  2453  000F9A  6E29               	movwf	___ftdiv@f1+1,c
  2454  000F9C  0E3F               	movlw	63
  2455  000F9E  6E2A               	movwf	___ftdiv@f1+2,c
  2456  000FA0  C058  F02B         	movff	exp@x,___ftdiv@f2
  2457  000FA4  C059  F02C         	movff	exp@x+1,___ftdiv@f2+1
  2458  000FA8  C05A  F02D         	movff	exp@x+2,___ftdiv@f2+2
  2459  000FAC  ECFD  F00A         	call	___ftdiv	;wreg free
  2460  000FB0  C028  F058         	movff	?___ftdiv,?_exp
  2461  000FB4  C029  F059         	movff	?___ftdiv+1,?_exp+1
  2462  000FB8  C02A  F05A         	movff	?___ftdiv+2,?_exp+2
  2463  000FBC  0012               	return	
  2464  000FBE                     l756:
  2465                           
  2466                           ; BSR set to: 0
  2467  000FBE  C058  F058         	movff	exp@x,?_exp
  2468  000FC2  C059  F059         	movff	exp@x+1,?_exp+1
  2469  000FC6  C05A  F05A         	movff	exp@x+2,?_exp+2
  2470  000FCA  0012               	return		;funcret
  2471  000FCC                     __end_of_exp:
  2472                           	opt stack 0
  2473                           tblptru	equ	0xFF8
  2474                           postinc0	equ	0xFEE
  2475                           wreg	equ	0xFE8
  2476                           plusw1	equ	0xFE3
  2477                           postinc2	equ	0xFDE
  2478                           postdec2	equ	0xFDD
  2479                           plusw2	equ	0xFDB
  2480                           fsr2h	equ	0xFDA
  2481                           fsr2l	equ	0xFD9
  2482                           status	equ	0xFD8
  2483                           
  2484 ;; *************** function _ldexp *****************
  2485 ;; Defined at:
  2486 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
  2487 ;; Parameters:    Size  Location     Type
  2488 ;;  value           3   51[COMRAM] unsigned char 
  2489 ;;  newexp          2   54[COMRAM] int 
  2490 ;; Auto vars:     Size  Location     Type
  2491 ;;		None
  2492 ;; Return value:  Size  Location     Type
  2493 ;;                  3   51[COMRAM] int 
  2494 ;; Registers used:
  2495 ;;		wreg, status,2, status,0
  2496 ;; Tracked objects:
  2497 ;;		On entry : 0/0
  2498 ;;		On exit  : 0/0
  2499 ;;		Unchanged: 0/0
  2500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2501 ;;      Params:         5       0       0       0       0       0       0       0       0
  2502 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2503 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2504 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2505 ;;Total ram usage:        7 bytes
  2506 ;; Hardware stack levels used:    1
  2507 ;; This function calls:
  2508 ;;		Nothing
  2509 ;; This function is called by:
  2510 ;;		_exp
  2511 ;; This function uses a non-reentrant model
  2512 ;;
  2513                           
  2514                           	psect	text7
  2515  001890                     __ptext7:
  2516                           	opt stack 0
  2517  001890                     _ldexp:
  2518                           	opt stack 27
  2519                           
  2520                           ;incstack = 0
  2521  001890  5034               	movf	ldexp@value,w,c
  2522  001892  1035               	iorwf	ldexp@value+1,w,c
  2523  001894  1036               	iorwf	ldexp@value+2,w,c
  2524  001896  A4D8               	btfss	status,2,c
  2525  001898  D007               	goto	l775
  2526  00189A  0E00               	movlw	0
  2527  00189C  6E34               	movwf	?_ldexp,c
  2528  00189E  0E00               	movlw	0
  2529  0018A0  6E35               	movwf	?_ldexp+1,c
  2530  0018A2  0E00               	movlw	0
  2531  0018A4  6E36               	movwf	?_ldexp+2,c
  2532  0018A6  0012               	return	
  2533  0018A8                     l775:
  2534  0018A8  5036               	movf	ldexp@value+2,w,c
  2535  0018AA  0B7F               	andlw	127
  2536  0018AC  6E39               	movwf	??_ldexp& (0+255),c
  2537  0018AE  6A3A               	clrf	(??_ldexp+1)& (0+255),c
  2538  0018B0  90D8               	bcf	status,0,c
  2539  0018B2  3639               	rlcf	??_ldexp,f,c
  2540  0018B4  363A               	rlcf	??_ldexp+1,f,c
  2541  0018B6  5039               	movf	??_ldexp,w,c
  2542  0018B8  2637               	addwf	ldexp@newexp,f,c
  2543  0018BA  503A               	movf	??_ldexp+1,w,c
  2544  0018BC  2238               	addwfc	ldexp@newexp+1,f,c
  2545  0018BE  AE35               	btfss	ldexp@value+1,7,c
  2546  0018C0  D003               	goto	u1770
  2547  0018C2  6A39               	clrf	??_ldexp& (0+255),c
  2548  0018C4  2A39               	incf	??_ldexp& (0+255),f,c
  2549  0018C6  D001               	goto	u1778
  2550  0018C8                     u1770:
  2551  0018C8  6A39               	clrf	??_ldexp& (0+255),c
  2552  0018CA                     u1778:
  2553  0018CA  5039               	movf	??_ldexp,w,c
  2554  0018CC  2637               	addwf	ldexp@newexp,f,c
  2555  0018CE  0E00               	movlw	0
  2556  0018D0  2238               	addwfc	ldexp@newexp+1,f,c
  2557  0018D2  AE38               	btfss	ldexp@newexp+1,7,c
  2558  0018D4  D00C               	goto	l777
  2559  0018D6  0E00               	movlw	0
  2560  0018D8  0100               	movlb	0	; () banked
  2561  0018DA  6FEE               	movwf	(_errno+1)& (0+255),b
  2562  0018DC  0E22               	movlw	34
  2563  0018DE  6FED               	movwf	_errno& (0+255),b
  2564  0018E0  0E00               	movlw	0
  2565  0018E2  6E34               	movwf	?_ldexp,c
  2566  0018E4  0E00               	movlw	0
  2567  0018E6  6E35               	movwf	?_ldexp+1,c
  2568  0018E8  0E00               	movlw	0
  2569  0018EA                     L1:
  2570  0018EA  6E36               	movwf	?_ldexp+2,c
  2571                           
  2572                           ; BSR set to: 0
  2573  0018EC  0012               	return	
  2574  0018EE                     l777:
  2575                           
  2576                           ; BSR set to: 0
  2577  0018EE  BE38               	btfsc	ldexp@newexp+1,7,c
  2578  0018F0  D016               	goto	l779
  2579  0018F2  0438               	decf	ldexp@newexp+1,w,c
  2580  0018F4  A0D8               	btfss	status,0,c
  2581  0018F6  D013               	goto	l779
  2582  0018F8  0E00               	movlw	0
  2583  0018FA  0100               	movlb	0	; () banked
  2584  0018FC  6FEE               	movwf	(_errno+1)& (0+255),b
  2585  0018FE  0E22               	movlw	34
  2586  001900  6FED               	movwf	_errno& (0+255),b
  2587                           
  2588                           ; BSR set to: 0
  2589  001902  AE36               	btfss	ldexp@value+2,7,c
  2590  001904  D006               	goto	l780
  2591                           
  2592                           ; BSR set to: 0
  2593  001906  0EFF               	movlw	255
  2594  001908  6E34               	movwf	?_ldexp,c
  2595  00190A  0E7F               	movlw	127
  2596  00190C  6E35               	movwf	?_ldexp+1,c
  2597  00190E  0EFF               	movlw	255
  2598  001910  D7EC               	goto	L1
  2599  001912                     l780:
  2600                           
  2601                           ; BSR set to: 0
  2602                           
  2603                           ; BSR set to: 0
  2604  001912  0EFF               	movlw	255
  2605  001914  6E34               	movwf	?_ldexp,c
  2606  001916  0E7F               	movlw	127
  2607  001918  6E35               	movwf	?_ldexp+1,c
  2608  00191A  0E7F               	movlw	127
  2609  00191C  D7E6               	goto	L1
  2610  00191E                     l779:
  2611                           
  2612                           ; BSR set to: 0
  2613  00191E  3438               	rlcf	ldexp@newexp+1,w,c
  2614  001920  3038               	rrcf	ldexp@newexp+1,w,c
  2615  001922  6E3A               	movwf	(??_ldexp+1)& (0+255),c
  2616  001924  3037               	rrcf	ldexp@newexp,w,c
  2617  001926  6E39               	movwf	??_ldexp& (0+255),c
  2618  001928  5036               	movf	ldexp@value+2,w,c
  2619  00192A  1839               	xorwf	??_ldexp,w,c
  2620  00192C  0B80               	andlw	-128
  2621  00192E  1839               	xorwf	??_ldexp,w,c
  2622  001930  6E36               	movwf	ldexp@value+2,c
  2623  001932  C037  F039         	movff	ldexp@newexp,??_ldexp
  2624  001936  0E01               	movlw	1
  2625  001938  1639               	andwf	??_ldexp,f,c
  2626  00193A  3239               	rrcf	??_ldexp,f,c
  2627  00193C  3239               	rrcf	??_ldexp,f,c
  2628  00193E  5035               	movf	ldexp@value+1,w,c
  2629  001940  1839               	xorwf	??_ldexp,w,c
  2630  001942  0B7F               	andlw	-129
  2631  001944  1839               	xorwf	??_ldexp,w,c
  2632  001946  6E35               	movwf	ldexp@value+1,c
  2633  001948  C034  F034         	movff	ldexp@value,?_ldexp
  2634  00194C  C035  F035         	movff	ldexp@value+1,?_ldexp+1
  2635  001950  C036  F036         	movff	ldexp@value+2,?_ldexp+2
  2636  001954  0012               	return	
  2637  001956                     __end_of_ldexp:
  2638                           	opt stack 0
  2639                           tblptru	equ	0xFF8
  2640                           postinc0	equ	0xFEE
  2641                           wreg	equ	0xFE8
  2642                           plusw1	equ	0xFE3
  2643                           postinc2	equ	0xFDE
  2644                           postdec2	equ	0xFDD
  2645                           plusw2	equ	0xFDB
  2646                           fsr2h	equ	0xFDA
  2647                           fsr2l	equ	0xFD9
  2648                           status	equ	0xFD8
  2649                           
  2650 ;; *************** function _floor *****************
  2651 ;; Defined at:
  2652 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\floor.c"
  2653 ;; Parameters:    Size  Location     Type
  2654 ;;  x               3   79[COMRAM] int 
  2655 ;; Auto vars:     Size  Location     Type
  2656 ;;  i               3   82[COMRAM] int 
  2657 ;;  expon           2   85[COMRAM] int 
  2658 ;; Return value:  Size  Location     Type
  2659 ;;                  3   79[COMRAM] int 
  2660 ;; Registers used:
  2661 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2662 ;; Tracked objects:
  2663 ;;		On entry : 0/0
  2664 ;;		On exit  : 0/0
  2665 ;;		Unchanged: 0/0
  2666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2667 ;;      Params:         3       0       0       0       0       0       0       0       0
  2668 ;;      Locals:         5       0       0       0       0       0       0       0       0
  2669 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2670 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2671 ;;Total ram usage:        8 bytes
  2672 ;; Hardware stack levels used:    1
  2673 ;; Hardware stack levels required when called:    2
  2674 ;; This function calls:
  2675 ;;		___altoft
  2676 ;;		___ftadd
  2677 ;;		___ftge
  2678 ;;		___fttol
  2679 ;;		_frexp
  2680 ;; This function is called by:
  2681 ;;		_exp
  2682 ;; This function uses a non-reentrant model
  2683 ;;
  2684                           
  2685                           	psect	text8
  2686  0016E0                     __ptext8:
  2687                           	opt stack 0
  2688  0016E0                     _floor:
  2689                           	opt stack 25
  2690                           
  2691                           ;incstack = 0
  2692  0016E0  C050  F001         	movff	floor@x,frexp@value
  2693  0016E4  C051  F002         	movff	floor@x+1,frexp@value+1
  2694  0016E8  C052  F003         	movff	floor@x+2,frexp@value+2
  2695  0016EC  0E56               	movlw	low floor@expon
  2696  0016EE  6E04               	movwf	frexp@eptr,c
  2697  0016F0  0E00               	movlw	high floor@expon
  2698  0016F2  6E05               	movwf	frexp@eptr+1,c
  2699  0016F4  EC5E  F00D         	call	_frexp	;wreg free
  2700  0016F8  AE57               	btfss	floor@expon+1,7,c
  2701  0016FA  D010               	goto	l762
  2702  0016FC  AE52               	btfss	floor@x+2,7,c
  2703  0016FE  D007               	goto	l763
  2704  001700  0E00               	movlw	0
  2705  001702  6E50               	movwf	?_floor,c
  2706  001704  0E80               	movlw	128
  2707  001706  6E51               	movwf	?_floor+1,c
  2708  001708  0EBF               	movlw	191
  2709  00170A  6E52               	movwf	?_floor+2,c
  2710  00170C  0012               	return	
  2711  00170E                     l763:
  2712  00170E  0E00               	movlw	0
  2713  001710  6E50               	movwf	?_floor,c
  2714  001712  0E00               	movlw	0
  2715  001714  6E51               	movwf	?_floor+1,c
  2716  001716  0E00               	movlw	0
  2717  001718  6E52               	movwf	?_floor+2,c
  2718  00171A  0012               	return	
  2719  00171C                     l762:
  2720  00171C  5057               	movf	floor@expon+1,w,c
  2721  00171E  E104               	bnz	u1730
  2722  001720  0E15               	movlw	21
  2723  001722  5C56               	subwf	floor@expon,w,c
  2724  001724  A0D8               	btfss	status,0,c
  2725  001726  D007               	goto	l765
  2726  001728                     u1730:
  2727  001728  C050  F050         	movff	floor@x,?_floor
  2728  00172C  C051  F051         	movff	floor@x+1,?_floor+1
  2729  001730  C052  F052         	movff	floor@x+2,?_floor+2
  2730  001734  0012               	return	
  2731  001736                     l765:
  2732  001736  C050  F037         	movff	floor@x,___fttol@f1
  2733  00173A  C051  F038         	movff	floor@x+1,___fttol@f1+1
  2734  00173E  C052  F039         	movff	floor@x+2,___fttol@f1+2
  2735  001742  EC09  F00A         	call	___fttol	;wreg free
  2736  001746  C037  F046         	movff	?___fttol,___altoft@c
  2737  00174A  C038  F047         	movff	?___fttol+1,___altoft@c+1
  2738  00174E  C039  F048         	movff	?___fttol+2,___altoft@c+2
  2739  001752  C03A  F049         	movff	?___fttol+3,___altoft@c+3
  2740  001756  EC30  F00E         	call	___altoft	;wreg free
  2741  00175A  C046  F053         	movff	?___altoft,floor@i
  2742  00175E  C047  F054         	movff	?___altoft+1,floor@i+1
  2743  001762  C048  F055         	movff	?___altoft+2,floor@i+2
  2744  001766  C050  F001         	movff	floor@x,___ftge@ff1
  2745  00176A  C051  F002         	movff	floor@x+1,___ftge@ff1+1
  2746  00176E  C052  F003         	movff	floor@x+2,___ftge@ff1+2
  2747  001772  C053  F004         	movff	floor@i,___ftge@ff2
  2748  001776  C054  F005         	movff	floor@i+1,___ftge@ff2+1
  2749  00177A  C055  F006         	movff	floor@i+2,___ftge@ff2+2
  2750  00177E  ECA6  F00D         	call	___ftge	;wreg free
  2751  001782  B0D8               	btfsc	status,0,c
  2752  001784  D015               	goto	l766
  2753  001786  C053  F00D         	movff	floor@i,___ftadd@f1
  2754  00178A  C054  F00E         	movff	floor@i+1,___ftadd@f1+1
  2755  00178E  C055  F00F         	movff	floor@i+2,___ftadd@f1+2
  2756  001792  0E00               	movlw	0
  2757  001794  6E10               	movwf	___ftadd@f2,c
  2758  001796  0E80               	movlw	128
  2759  001798  6E11               	movwf	___ftadd@f2+1,c
  2760  00179A  0EBF               	movlw	191
  2761  00179C  6E12               	movwf	___ftadd@f2+2,c
  2762  00179E  ECE6  F007         	call	___ftadd	;wreg free
  2763  0017A2  C00D  F050         	movff	?___ftadd,?_floor
  2764  0017A6  C00E  F051         	movff	?___ftadd+1,?_floor+1
  2765  0017AA  C00F  F052         	movff	?___ftadd+2,?_floor+2
  2766  0017AE  0012               	return	
  2767  0017B0                     l766:
  2768  0017B0  C053  F050         	movff	floor@i,?_floor
  2769  0017B4  C054  F051         	movff	floor@i+1,?_floor+1
  2770  0017B8  C055  F052         	movff	floor@i+2,?_floor+2
  2771  0017BC  0012               	return		;funcret
  2772  0017BE                     __end_of_floor:
  2773                           	opt stack 0
  2774                           tblptru	equ	0xFF8
  2775                           postinc0	equ	0xFEE
  2776                           wreg	equ	0xFE8
  2777                           plusw1	equ	0xFE3
  2778                           postinc2	equ	0xFDE
  2779                           postdec2	equ	0xFDD
  2780                           plusw2	equ	0xFDB
  2781                           fsr2h	equ	0xFDA
  2782                           fsr2l	equ	0xFD9
  2783                           status	equ	0xFD8
  2784                           
  2785 ;; *************** function _frexp *****************
  2786 ;; Defined at:
  2787 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
  2788 ;; Parameters:    Size  Location     Type
  2789 ;;  value           3    0[COMRAM] int 
  2790 ;;  eptr            2    3[COMRAM] PTR int 
  2791 ;;		 -> log@exponent(2), floor@expon(2), 
  2792 ;; Auto vars:     Size  Location     Type
  2793 ;;		None
  2794 ;; Return value:  Size  Location     Type
  2795 ;;                  3    0[COMRAM] PTR int 
  2796 ;; Registers used:
  2797 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2798 ;; Tracked objects:
  2799 ;;		On entry : 0/0
  2800 ;;		On exit  : 0/0
  2801 ;;		Unchanged: 0/0
  2802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2803 ;;      Params:         5       0       0       0       0       0       0       0       0
  2804 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2805 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2806 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2807 ;;Total ram usage:        7 bytes
  2808 ;; Hardware stack levels used:    1
  2809 ;; This function calls:
  2810 ;;		Nothing
  2811 ;; This function is called by:
  2812 ;;		_floor
  2813 ;;		_log
  2814 ;; This function uses a non-reentrant model
  2815 ;;
  2816                           
  2817                           	psect	text9
  2818  001ABC                     __ptext9:
  2819                           	opt stack 0
  2820  001ABC                     _frexp:
  2821                           	opt stack 27
  2822                           
  2823                           ;incstack = 0
  2824  001ABC  5001               	movf	frexp@value,w,c
  2825  001ABE  1002               	iorwf	frexp@value+1,w,c
  2826  001AC0  1003               	iorwf	frexp@value+2,w,c
  2827  001AC2  A4D8               	btfss	status,2,c
  2828  001AC4  D00F               	goto	l771
  2829  001AC6  C004  FFD9         	movff	frexp@eptr,fsr2l
  2830  001ACA  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  2831  001ACE  0E00               	movlw	0
  2832  001AD0  6EDE               	movwf	postinc2,c
  2833  001AD2  0E00               	movlw	0
  2834  001AD4  6EDD               	movwf	postdec2,c
  2835  001AD6  0E00               	movlw	0
  2836  001AD8  6E01               	movwf	?_frexp,c
  2837  001ADA  0E00               	movlw	0
  2838  001ADC  6E02               	movwf	?_frexp+1,c
  2839  001ADE  0E00               	movlw	0
  2840  001AE0  6E03               	movwf	?_frexp+2,c
  2841  001AE2  0012               	return	
  2842  001AE4                     l771:
  2843  001AE4  5003               	movf	frexp@value+2,w,c
  2844  001AE6  0B7F               	andlw	127
  2845  001AE8  6E06               	movwf	??_frexp& (0+255),c
  2846  001AEA  6A07               	clrf	(??_frexp+1)& (0+255),c
  2847  001AEC  90D8               	bcf	status,0,c
  2848  001AEE  3606               	rlcf	??_frexp,f,c
  2849  001AF0  3607               	rlcf	??_frexp+1,f,c
  2850  001AF2  C004  FFD9         	movff	frexp@eptr,fsr2l
  2851  001AF6  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  2852  001AFA  C006  FFDE         	movff	??_frexp,postinc2
  2853  001AFE  C007  FFDD         	movff	??_frexp+1,postdec2
  2854  001B02  AE02               	btfss	frexp@value+1,7,c
  2855  001B04  D003               	goto	u1620
  2856  001B06  6A06               	clrf	??_frexp& (0+255),c
  2857  001B08  2A06               	incf	??_frexp& (0+255),f,c
  2858  001B0A  D001               	goto	u1628
  2859  001B0C                     u1620:
  2860  001B0C  6A06               	clrf	??_frexp& (0+255),c
  2861  001B0E                     u1628:
  2862  001B0E  5006               	movf	??_frexp,w,c
  2863  001B10  C004  FFD9         	movff	frexp@eptr,fsr2l
  2864  001B14  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  2865  001B18  12DE               	iorwf	postinc2,f,c
  2866  001B1A  0E00               	movlw	0
  2867  001B1C  12DD               	iorwf	postdec2,f,c
  2868  001B1E  C004  FFD9         	movff	frexp@eptr,fsr2l
  2869  001B22  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  2870  001B26  0E82               	movlw	130
  2871  001B28  26DE               	addwf	postinc2,f,c
  2872  001B2A  0EFF               	movlw	255
  2873  001B2C  22DD               	addwfc	postdec2,f,c
  2874  001B2E  8003               	bsf	frexp@value+2,0,c
  2875  001B30  8203               	bsf	frexp@value+2,1,c
  2876  001B32  8403               	bsf	frexp@value+2,2,c
  2877  001B34  8603               	bsf	frexp@value+2,3,c
  2878  001B36  8803               	bsf	frexp@value+2,4,c
  2879  001B38  8A03               	bsf	frexp@value+2,5,c
  2880  001B3A  9C03               	bcf	frexp@value+2,6,c
  2881  001B3C  9E02               	bcf	frexp@value+1,7,c
  2882  001B3E  C001  F001         	movff	frexp@value,?_frexp
  2883  001B42  C002  F002         	movff	frexp@value+1,?_frexp+1
  2884  001B46  C003  F003         	movff	frexp@value+2,?_frexp+2
  2885  001B4A  0012               	return	
  2886  001B4C                     __end_of_frexp:
  2887                           	opt stack 0
  2888                           tblptru	equ	0xFF8
  2889                           postinc0	equ	0xFEE
  2890                           wreg	equ	0xFE8
  2891                           plusw1	equ	0xFE3
  2892                           postinc2	equ	0xFDE
  2893                           postdec2	equ	0xFDD
  2894                           plusw2	equ	0xFDB
  2895                           fsr2h	equ	0xFDA
  2896                           fsr2l	equ	0xFD9
  2897                           status	equ	0xFD8
  2898                           
  2899 ;; *************** function ___ftge *****************
  2900 ;; Defined at:
  2901 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  2902 ;; Parameters:    Size  Location     Type
  2903 ;;  ff1             3    0[COMRAM] float 
  2904 ;;  ff2             3    3[COMRAM] float 
  2905 ;; Auto vars:     Size  Location     Type
  2906 ;;		None
  2907 ;; Return value:  Size  Location     Type
  2908 ;;		None               void
  2909 ;; Registers used:
  2910 ;;		wreg, status,2, status,0
  2911 ;; Tracked objects:
  2912 ;;		On entry : 0/0
  2913 ;;		On exit  : 0/0
  2914 ;;		Unchanged: 0/0
  2915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2916 ;;      Params:         6       0       0       0       0       0       0       0       0
  2917 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2918 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2919 ;;      Totals:         9       0       0       0       0       0       0       0       0
  2920 ;;Total ram usage:        9 bytes
  2921 ;; Hardware stack levels used:    1
  2922 ;; This function calls:
  2923 ;;		Nothing
  2924 ;; This function is called by:
  2925 ;;		_pow
  2926 ;;		_exp
  2927 ;;		_floor
  2928 ;; This function uses a non-reentrant model
  2929 ;;
  2930                           
  2931                           	psect	text10
  2932  001B4C                     __ptext10:
  2933                           	opt stack 0
  2934  001B4C                     ___ftge:
  2935                           	opt stack 26
  2936                           
  2937                           ;incstack = 0
  2938  001B4C  AE03               	btfss	___ftge@ff1+2,7,c
  2939  001B4E  D016               	goto	l444
  2940  001B50  C001  F007         	movff	___ftge@ff1,??___ftge
  2941  001B54  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  2942  001B58  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  2943  001B5C  1E07               	comf	??___ftge,f,c
  2944  001B5E  1E08               	comf	??___ftge+1,f,c
  2945  001B60  1E09               	comf	??___ftge+2,f,c
  2946  001B62  2A07               	incf	??___ftge,f,c
  2947  001B64  0E00               	movlw	0
  2948  001B66  2208               	addwfc	??___ftge+1,f,c
  2949  001B68  2209               	addwfc	??___ftge+2,f,c
  2950  001B6A  0E00               	movlw	0
  2951  001B6C  2407               	addwf	??___ftge,w,c
  2952  001B6E  6E01               	movwf	___ftge@ff1,c
  2953  001B70  0E00               	movlw	0
  2954  001B72  2008               	addwfc	??___ftge+1,w,c
  2955  001B74  6E02               	movwf	___ftge@ff1+1,c
  2956  001B76  0E80               	movlw	128
  2957  001B78  2009               	addwfc	??___ftge+2,w,c
  2958  001B7A  6E03               	movwf	___ftge@ff1+2,c
  2959  001B7C                     l444:
  2960  001B7C  AE06               	btfss	___ftge@ff2+2,7,c
  2961  001B7E  D016               	goto	l445
  2962  001B80  C004  F007         	movff	___ftge@ff2,??___ftge
  2963  001B84  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  2964  001B88  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  2965  001B8C  1E07               	comf	??___ftge,f,c
  2966  001B8E  1E08               	comf	??___ftge+1,f,c
  2967  001B90  1E09               	comf	??___ftge+2,f,c
  2968  001B92  2A07               	incf	??___ftge,f,c
  2969  001B94  0E00               	movlw	0
  2970  001B96  2208               	addwfc	??___ftge+1,f,c
  2971  001B98  2209               	addwfc	??___ftge+2,f,c
  2972  001B9A  0E00               	movlw	0
  2973  001B9C  2407               	addwf	??___ftge,w,c
  2974  001B9E  6E04               	movwf	___ftge@ff2,c
  2975  001BA0  0E00               	movlw	0
  2976  001BA2  2008               	addwfc	??___ftge+1,w,c
  2977  001BA4  6E05               	movwf	___ftge@ff2+1,c
  2978  001BA6  0E80               	movlw	128
  2979  001BA8  2009               	addwfc	??___ftge+2,w,c
  2980  001BAA  6E06               	movwf	___ftge@ff2+2,c
  2981  001BAC                     l445:
  2982  001BAC  0E00               	movlw	0
  2983  001BAE  1A01               	xorwf	___ftge@ff1,f,c
  2984  001BB0  0E00               	movlw	0
  2985  001BB2  1A02               	xorwf	___ftge@ff1+1,f,c
  2986  001BB4  0E80               	movlw	128
  2987  001BB6  1A03               	xorwf	___ftge@ff1+2,f,c
  2988  001BB8  0E00               	movlw	0
  2989  001BBA  1A04               	xorwf	___ftge@ff2,f,c
  2990  001BBC  0E00               	movlw	0
  2991  001BBE  1A05               	xorwf	___ftge@ff2+1,f,c
  2992  001BC0  0E80               	movlw	128
  2993  001BC2  1A06               	xorwf	___ftge@ff2+2,f,c
  2994  001BC4  5004               	movf	___ftge@ff2,w,c
  2995  001BC6  5C01               	subwf	___ftge@ff1,w,c
  2996  001BC8  5005               	movf	___ftge@ff2+1,w,c
  2997  001BCA  5802               	subwfb	___ftge@ff1+1,w,c
  2998  001BCC  5006               	movf	___ftge@ff2+2,w,c
  2999  001BCE  5803               	subwfb	___ftge@ff1+2,w,c
  3000  001BD0  B0D8               	btfsc	status,0,c
  3001  001BD2  D002               	goto	l1722
  3002  001BD4  90D8               	bcf	status,0,c
  3003  001BD6  0012               	return	
  3004  001BD8                     l1722:
  3005  001BD8  80D8               	bsf	status,0,c
  3006  001BDA  0012               	return	
  3007  001BDC                     __end_of___ftge:
  3008                           	opt stack 0
  3009                           tblptru	equ	0xFF8
  3010                           postinc0	equ	0xFEE
  3011                           wreg	equ	0xFE8
  3012                           plusw1	equ	0xFE3
  3013                           postinc2	equ	0xFDE
  3014                           postdec2	equ	0xFDD
  3015                           plusw2	equ	0xFDB
  3016                           fsr2h	equ	0xFDA
  3017                           fsr2l	equ	0xFD9
  3018                           status	equ	0xFD8
  3019                           
  3020 ;; *************** function ___altoft *****************
  3021 ;; Defined at:
  3022 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
  3023 ;; Parameters:    Size  Location     Type
  3024 ;;  c               4   69[COMRAM] long 
  3025 ;; Auto vars:     Size  Location     Type
  3026 ;;  sign            1   78[COMRAM] unsigned char 
  3027 ;;  exp             1   77[COMRAM] unsigned char 
  3028 ;; Return value:  Size  Location     Type
  3029 ;;                  3   69[COMRAM] float 
  3030 ;; Registers used:
  3031 ;;		wreg, status,2, status,0, cstack
  3032 ;; Tracked objects:
  3033 ;;		On entry : 0/0
  3034 ;;		On exit  : 0/0
  3035 ;;		Unchanged: 0/0
  3036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3037 ;;      Params:         4       0       0       0       0       0       0       0       0
  3038 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3039 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3040 ;;      Totals:        10       0       0       0       0       0       0       0       0
  3041 ;;Total ram usage:       10 bytes
  3042 ;; Hardware stack levels used:    1
  3043 ;; Hardware stack levels required when called:    1
  3044 ;; This function calls:
  3045 ;;		___ftpack
  3046 ;; This function is called by:
  3047 ;;		_floor
  3048 ;; This function uses a non-reentrant model
  3049 ;;
  3050                           
  3051                           	psect	text11
  3052  001C60                     __ptext11:
  3053                           	opt stack 0
  3054  001C60                     ___altoft:
  3055                           	opt stack 25
  3056                           
  3057                           ;incstack = 0
  3058  001C60  0E00               	movlw	0
  3059  001C62  6E4F               	movwf	___altoft@sign,c
  3060  001C64  0E8E               	movlw	142
  3061  001C66  6E4E               	movwf	___altoft@exp,c
  3062  001C68  AE49               	btfss	___altoft@c+3,7,c
  3063  001C6A  D011               	goto	l242
  3064  001C6C  1E49               	comf	___altoft@c+3,f,c
  3065  001C6E  1E48               	comf	___altoft@c+2,f,c
  3066  001C70  1E47               	comf	___altoft@c+1,f,c
  3067  001C72  6C46               	negf	___altoft@c,c
  3068  001C74  0E00               	movlw	0
  3069  001C76  2247               	addwfc	___altoft@c+1,f,c
  3070  001C78  2248               	addwfc	___altoft@c+2,f,c
  3071  001C7A  2249               	addwfc	___altoft@c+3,f,c
  3072  001C7C  0E01               	movlw	1
  3073  001C7E  6E4F               	movwf	___altoft@sign,c
  3074  001C80  D006               	goto	l242
  3075  001C82  90D8               	bcf	status,0,c
  3076  001C84  3249               	rrcf	___altoft@c+3,f,c
  3077  001C86  3248               	rrcf	___altoft@c+2,f,c
  3078  001C88  3247               	rrcf	___altoft@c+1,f,c
  3079  001C8A  3246               	rrcf	___altoft@c,f,c
  3080  001C8C  2A4E               	incf	___altoft@exp,f,c
  3081  001C8E                     l242:
  3082  001C8E  0E00               	movlw	0
  3083  001C90  1446               	andwf	___altoft@c,w,c
  3084  001C92  6E4A               	movwf	??___altoft& (0+255),c
  3085  001C94  0E00               	movlw	0
  3086  001C96  1447               	andwf	___altoft@c+1,w,c
  3087  001C98  6E4B               	movwf	(??___altoft+1)& (0+255),c
  3088  001C9A  0E00               	movlw	0
  3089  001C9C  1448               	andwf	___altoft@c+2,w,c
  3090  001C9E  6E4C               	movwf	(??___altoft+2)& (0+255),c
  3091  001CA0  0EFF               	movlw	255
  3092  001CA2  1449               	andwf	___altoft@c+3,w,c
  3093  001CA4  6E4D               	movwf	(??___altoft+3)& (0+255),c
  3094  001CA6  504A               	movf	??___altoft,w,c
  3095  001CA8  104B               	iorwf	??___altoft+1,w,c
  3096  001CAA  104C               	iorwf	??___altoft+2,w,c
  3097  001CAC  104D               	iorwf	??___altoft+3,w,c
  3098  001CAE  A4D8               	btfss	status,2,c
  3099  001CB0  D7E8               	goto	l243
  3100  001CB2  C046  F001         	movff	___altoft@c,___ftpack@arg
  3101  001CB6  C047  F002         	movff	___altoft@c+1,___ftpack@arg+1
  3102  001CBA  C048  F003         	movff	___altoft@c+2,___ftpack@arg+2
  3103  001CBE  C04E  F004         	movff	___altoft@exp,___ftpack@exp
  3104  001CC2  C04F  F005         	movff	___altoft@sign,___ftpack@sign
  3105  001CC6  EC07  F00D         	call	___ftpack	;wreg free
  3106  001CCA  C001  F046         	movff	?___ftpack,?___altoft
  3107  001CCE  C002  F047         	movff	?___ftpack+1,?___altoft+1
  3108  001CD2  C003  F048         	movff	?___ftpack+2,?___altoft+2
  3109  001CD6  0012               	return	
  3110  001CD8                     __end_of___altoft:
  3111                           	opt stack 0
  3112                           tblptru	equ	0xFF8
  3113                           postinc0	equ	0xFEE
  3114                           wreg	equ	0xFE8
  3115                           plusw1	equ	0xFE3
  3116                           postinc2	equ	0xFDE
  3117                           postdec2	equ	0xFDD
  3118                           plusw2	equ	0xFDB
  3119                           fsr2h	equ	0xFDA
  3120                           fsr2l	equ	0xFD9
  3121                           status	equ	0xFD8
  3122                           
  3123 ;; *************** function _eval_poly *****************
  3124 ;; Defined at:
  3125 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
  3126 ;; Parameters:    Size  Location     Type
  3127 ;;  x               3   39[COMRAM] float 
  3128 ;;  d               2   42[COMRAM] PTR const 
  3129 ;;		 -> log@coeff(27), exp@coeff(30), 
  3130 ;;  n               2   44[COMRAM] int 
  3131 ;; Auto vars:     Size  Location     Type
  3132 ;;  res             3   48[COMRAM] int 
  3133 ;; Return value:  Size  Location     Type
  3134 ;;                  3   39[COMRAM] int 
  3135 ;; Registers used:
  3136 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3137 ;; Tracked objects:
  3138 ;;		On entry : 0/0
  3139 ;;		On exit  : 0/0
  3140 ;;		Unchanged: 0/0
  3141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3142 ;;      Params:         7       0       0       0       0       0       0       0       0
  3143 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3144 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3145 ;;      Totals:        12       0       0       0       0       0       0       0       0
  3146 ;;Total ram usage:       12 bytes
  3147 ;; Hardware stack levels used:    1
  3148 ;; Hardware stack levels required when called:    2
  3149 ;; This function calls:
  3150 ;;		___ftadd
  3151 ;;		___ftmul
  3152 ;;		___wmul
  3153 ;; This function is called by:
  3154 ;;		_exp
  3155 ;;		_log
  3156 ;; This function uses a non-reentrant model
  3157 ;;
  3158                           
  3159                           	psect	text12
  3160  0017BE                     __ptext12:
  3161                           	opt stack 0
  3162  0017BE                     _eval_poly:
  3163                           	opt stack 25
  3164                           
  3165                           ;incstack = 0
  3166  0017BE  C02D  F001         	movff	eval_poly@n,___wmul@multiplier
  3167  0017C2  C02E  F002         	movff	eval_poly@n+1,___wmul@multiplier+1
  3168  0017C6  0E00               	movlw	0
  3169  0017C8  6E04               	movwf	___wmul@multiplicand+1,c
  3170  0017CA  0E03               	movlw	3
  3171  0017CC  6E03               	movwf	___wmul@multiplicand,c
  3172  0017CE  EC70  F00F         	call	___wmul	;wreg free
  3173  0017D2  C02B  F02F         	movff	eval_poly@d,??_eval_poly
  3174  0017D6  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
  3175  0017DA  5001               	movf	?___wmul,w,c
  3176  0017DC  262F               	addwf	??_eval_poly,f,c
  3177  0017DE  5002               	movf	?___wmul+1,w,c
  3178  0017E0  2230               	addwfc	??_eval_poly+1,f,c
  3179  0017E2  C02F  FFF6         	movff	??_eval_poly,tblptrl
  3180  0017E6  C030  FFF7         	movff	??_eval_poly+1,tblptrh
  3181  0017EA                     	if	0	;tblptru may be non-zero
  3182  0017EA                     	endif
  3183  0017EA                     	if	0	;tblptru may be non-zero
  3184  0017EA                     	endif
  3185  0017EA  0009               	tblrd		*+
  3186  0017EC  CFF5 F031          	movff	tablat,eval_poly@res
  3187  0017F0  0009               	tblrd		*+
  3188  0017F2  CFF5 F032          	movff	tablat,eval_poly@res+1
  3189  0017F6  000A               	tblrd		*-
  3190  0017F8  CFF5 F033          	movff	tablat,eval_poly@res+2
  3191  0017FC  D03E               	goto	l801
  3192  0017FE  C031  F01C         	movff	eval_poly@res,___ftmul@f2
  3193  001802  C032  F01D         	movff	eval_poly@res+1,___ftmul@f2+1
  3194  001806  C033  F01E         	movff	eval_poly@res+2,___ftmul@f2+2
  3195  00180A  C028  F019         	movff	eval_poly@x,___ftmul@f1
  3196  00180E  C029  F01A         	movff	eval_poly@x+1,___ftmul@f1+1
  3197  001812  C02A  F01B         	movff	eval_poly@x+2,___ftmul@f1+2
  3198  001816  EC83  F00A         	call	___ftmul	;wreg free
  3199  00181A  C019  F00D         	movff	?___ftmul,___ftadd@f1
  3200  00181E  C01A  F00E         	movff	?___ftmul+1,___ftadd@f1+1
  3201  001822  C01B  F00F         	movff	?___ftmul+2,___ftadd@f1+2
  3202  001826  0E00               	movlw	0
  3203  001828  6E04               	movwf	___wmul@multiplicand+1,c
  3204  00182A  0E03               	movlw	3
  3205  00182C  6E03               	movwf	___wmul@multiplicand,c
  3206  00182E  062D               	decf	eval_poly@n,f,c
  3207  001830  A0D8               	btfss	status,0,c
  3208  001832  062E               	decf	eval_poly@n+1,f,c
  3209  001834  C02D  F001         	movff	eval_poly@n,___wmul@multiplier
  3210  001838  C02E  F002         	movff	eval_poly@n+1,___wmul@multiplier+1
  3211  00183C  EC70  F00F         	call	___wmul	;wreg free
  3212  001840  C02B  F02F         	movff	eval_poly@d,??_eval_poly
  3213  001844  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
  3214  001848  5001               	movf	?___wmul,w,c
  3215  00184A  262F               	addwf	??_eval_poly,f,c
  3216  00184C  5002               	movf	?___wmul+1,w,c
  3217  00184E  2230               	addwfc	??_eval_poly+1,f,c
  3218  001850  C02F  FFF6         	movff	??_eval_poly,tblptrl
  3219  001854  C030  FFF7         	movff	??_eval_poly+1,tblptrh
  3220  001858                     	if	0	;tblptru may be non-zero
  3221  001858                     	endif
  3222  001858                     	if	0	;tblptru may be non-zero
  3223  001858                     	endif
  3224  001858  0009               	tblrd		*+
  3225  00185A  CFF5 F010          	movff	tablat,___ftadd@f2
  3226  00185E  0009               	tblrd		*+
  3227  001860  CFF5 F011          	movff	tablat,___ftadd@f2+1
  3228  001864  000A               	tblrd		*-
  3229  001866  CFF5 F012          	movff	tablat,___ftadd@f2+2
  3230  00186A  ECE6  F007         	call	___ftadd	;wreg free
  3231  00186E  C00D  F031         	movff	?___ftadd,eval_poly@res
  3232  001872  C00E  F032         	movff	?___ftadd+1,eval_poly@res+1
  3233  001876  C00F  F033         	movff	?___ftadd+2,eval_poly@res+2
  3234  00187A                     l801:
  3235  00187A  502D               	movf	eval_poly@n,w,c
  3236  00187C  102E               	iorwf	eval_poly@n+1,w,c
  3237  00187E  A4D8               	btfss	status,2,c
  3238  001880  D7BE               	goto	l802
  3239  001882  C031  F028         	movff	eval_poly@res,?_eval_poly
  3240  001886  C032  F029         	movff	eval_poly@res+1,?_eval_poly+1
  3241  00188A  C033  F02A         	movff	eval_poly@res+2,?_eval_poly+2
  3242  00188E  0012               	return		;funcret
  3243  001890                     __end_of_eval_poly:
  3244                           	opt stack 0
  3245                           tblptru	equ	0xFF8
  3246                           tblptrh	equ	0xFF7
  3247                           tblptrl	equ	0xFF6
  3248                           tablat	equ	0xFF5
  3249                           postinc0	equ	0xFEE
  3250                           wreg	equ	0xFE8
  3251                           plusw1	equ	0xFE3
  3252                           postinc2	equ	0xFDE
  3253                           postdec2	equ	0xFDD
  3254                           plusw2	equ	0xFDB
  3255                           fsr2h	equ	0xFDA
  3256                           fsr2l	equ	0xFD9
  3257                           status	equ	0xFD8
  3258                           
  3259 ;; *************** function ___wmul *****************
  3260 ;; Defined at:
  3261 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  3262 ;; Parameters:    Size  Location     Type
  3263 ;;  multiplier      2    0[COMRAM] unsigned int 
  3264 ;;  multiplicand    2    2[COMRAM] unsigned int 
  3265 ;; Auto vars:     Size  Location     Type
  3266 ;;  product         2    4[COMRAM] unsigned int 
  3267 ;; Return value:  Size  Location     Type
  3268 ;;                  2    0[COMRAM] unsigned int 
  3269 ;; Registers used:
  3270 ;;		wreg, status,2, status,0, prodl, prodh
  3271 ;; Tracked objects:
  3272 ;;		On entry : 0/0
  3273 ;;		On exit  : 0/0
  3274 ;;		Unchanged: 0/0
  3275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3276 ;;      Params:         4       0       0       0       0       0       0       0       0
  3277 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3278 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3279 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3280 ;;Total ram usage:        6 bytes
  3281 ;; Hardware stack levels used:    1
  3282 ;; This function calls:
  3283 ;;		Nothing
  3284 ;; This function is called by:
  3285 ;;		_eval_poly
  3286 ;; This function uses a non-reentrant model
  3287 ;;
  3288                           
  3289                           	psect	text13
  3290  001EE0                     __ptext13:
  3291                           	opt stack 0
  3292  001EE0                     ___wmul:
  3293                           	opt stack 26
  3294                           
  3295                           ;incstack = 0
  3296  001EE0  5001               	movf	___wmul@multiplier,w,c
  3297  001EE2  0203               	mulwf	___wmul@multiplicand,c
  3298  001EE4  CFF3 F005          	movff	prodl,___wmul@product
  3299  001EE8  CFF4 F006          	movff	prodh,___wmul@product+1
  3300  001EEC  5001               	movf	___wmul@multiplier,w,c
  3301  001EEE  0204               	mulwf	___wmul@multiplicand+1,c
  3302  001EF0  50F3               	movf	prodl,w,c
  3303  001EF2  2606               	addwf	___wmul@product+1,f,c
  3304  001EF4  5002               	movf	___wmul@multiplier+1,w,c
  3305  001EF6  0203               	mulwf	___wmul@multiplicand,c
  3306  001EF8  50F3               	movf	prodl,w,c
  3307  001EFA  2606               	addwf	___wmul@product+1,f,c
  3308  001EFC  C005  F001         	movff	___wmul@product,?___wmul
  3309  001F00  C006  F002         	movff	___wmul@product+1,?___wmul+1
  3310  001F04  0012               	return	
  3311  001F06                     __end_of___wmul:
  3312                           	opt stack 0
  3313                           tblptru	equ	0xFF8
  3314                           tblptrh	equ	0xFF7
  3315                           tblptrl	equ	0xFF6
  3316                           tablat	equ	0xFF5
  3317                           prodh	equ	0xFF4
  3318                           prodl	equ	0xFF3
  3319                           postinc0	equ	0xFEE
  3320                           wreg	equ	0xFE8
  3321                           plusw1	equ	0xFE3
  3322                           postinc2	equ	0xFDE
  3323                           postdec2	equ	0xFDD
  3324                           plusw2	equ	0xFDB
  3325                           fsr2h	equ	0xFDA
  3326                           fsr2l	equ	0xFD9
  3327                           status	equ	0xFD8
  3328                           
  3329 ;; *************** function ___ftsub *****************
  3330 ;; Defined at:
  3331 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  3332 ;; Parameters:    Size  Location     Type
  3333 ;;  f1              3   24[COMRAM] float 
  3334 ;;  f2              3   27[COMRAM] float 
  3335 ;; Auto vars:     Size  Location     Type
  3336 ;;		None
  3337 ;; Return value:  Size  Location     Type
  3338 ;;                  3   24[COMRAM] float 
  3339 ;; Registers used:
  3340 ;;		wreg, status,2, status,0, cstack
  3341 ;; Tracked objects:
  3342 ;;		On entry : 0/0
  3343 ;;		On exit  : 0/0
  3344 ;;		Unchanged: 0/0
  3345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3346 ;;      Params:         6       0       0       0       0       0       0       0       0
  3347 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3348 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3349 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3350 ;;Total ram usage:        6 bytes
  3351 ;; Hardware stack levels used:    1
  3352 ;; Hardware stack levels required when called:    2
  3353 ;; This function calls:
  3354 ;;		___ftadd
  3355 ;; This function is called by:
  3356 ;;		_exp
  3357 ;; This function uses a non-reentrant model
  3358 ;;
  3359                           
  3360                           	psect	text14
  3361  001E68                     __ptext14:
  3362                           	opt stack 0
  3363  001E68                     ___ftsub:
  3364                           	opt stack 25
  3365                           
  3366                           ;incstack = 0
  3367  001E68  501C               	movf	___ftsub@f2,w,c
  3368  001E6A  101D               	iorwf	___ftsub@f2+1,w,c
  3369  001E6C  101E               	iorwf	___ftsub@f2+2,w,c
  3370  001E6E  B4D8               	btfsc	status,2,c
  3371  001E70  D006               	goto	l468
  3372  001E72  0E00               	movlw	0
  3373  001E74  1A1C               	xorwf	___ftsub@f2,f,c
  3374  001E76  0E00               	movlw	0
  3375  001E78  1A1D               	xorwf	___ftsub@f2+1,f,c
  3376  001E7A  0E80               	movlw	128
  3377  001E7C  1A1E               	xorwf	___ftsub@f2+2,f,c
  3378  001E7E                     l468:
  3379  001E7E  C019  F00D         	movff	___ftsub@f1,___ftadd@f1
  3380  001E82  C01A  F00E         	movff	___ftsub@f1+1,___ftadd@f1+1
  3381  001E86  C01B  F00F         	movff	___ftsub@f1+2,___ftadd@f1+2
  3382  001E8A  C01C  F010         	movff	___ftsub@f2,___ftadd@f2
  3383  001E8E  C01D  F011         	movff	___ftsub@f2+1,___ftadd@f2+1
  3384  001E92  C01E  F012         	movff	___ftsub@f2+2,___ftadd@f2+2
  3385  001E96  ECE6  F007         	call	___ftadd	;wreg free
  3386  001E9A  C00D  F019         	movff	?___ftadd,?___ftsub
  3387  001E9E  C00E  F01A         	movff	?___ftadd+1,?___ftsub+1
  3388  001EA2  C00F  F01B         	movff	?___ftadd+2,?___ftsub+2
  3389  001EA6  0012               	return	
  3390  001EA8                     __end_of___ftsub:
  3391                           	opt stack 0
  3392                           tblptru	equ	0xFF8
  3393                           tblptrh	equ	0xFF7
  3394                           tblptrl	equ	0xFF6
  3395                           tablat	equ	0xFF5
  3396                           prodh	equ	0xFF4
  3397                           prodl	equ	0xFF3
  3398                           postinc0	equ	0xFEE
  3399                           wreg	equ	0xFE8
  3400                           plusw1	equ	0xFE3
  3401                           postinc2	equ	0xFDE
  3402                           postdec2	equ	0xFDD
  3403                           plusw2	equ	0xFDB
  3404                           fsr2h	equ	0xFDA
  3405                           fsr2l	equ	0xFD9
  3406                           status	equ	0xFD8
  3407                           
  3408 ;; *************** function ___ftneg *****************
  3409 ;; Defined at:
  3410 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
  3411 ;; Parameters:    Size  Location     Type
  3412 ;;  f1              3    0[COMRAM] float 
  3413 ;; Auto vars:     Size  Location     Type
  3414 ;;		None
  3415 ;; Return value:  Size  Location     Type
  3416 ;;                  3    0[COMRAM] float 
  3417 ;; Registers used:
  3418 ;;		wreg, status,2, status,0
  3419 ;; Tracked objects:
  3420 ;;		On entry : 0/0
  3421 ;;		On exit  : 0/0
  3422 ;;		Unchanged: 0/0
  3423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3424 ;;      Params:         3       0       0       0       0       0       0       0       0
  3425 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3426 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3427 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3428 ;;Total ram usage:        3 bytes
  3429 ;; Hardware stack levels used:    1
  3430 ;; This function calls:
  3431 ;;		Nothing
  3432 ;; This function is called by:
  3433 ;;		_pow
  3434 ;;		_exp
  3435 ;; This function uses a non-reentrant model
  3436 ;;
  3437                           
  3438                           	psect	text15
  3439  001F06                     __ptext15:
  3440                           	opt stack 0
  3441  001F06                     ___ftneg:
  3442                           	opt stack 27
  3443                           
  3444                           ;incstack = 0
  3445  001F06  5001               	movf	___ftneg@f1,w,c
  3446  001F08  1002               	iorwf	___ftneg@f1+1,w,c
  3447  001F0A  1003               	iorwf	___ftneg@f1+2,w,c
  3448  001F0C  B4D8               	btfsc	status,2,c
  3449  001F0E  D006               	goto	l462
  3450  001F10  0E00               	movlw	0
  3451  001F12  1A01               	xorwf	___ftneg@f1,f,c
  3452  001F14  0E00               	movlw	0
  3453  001F16  1A02               	xorwf	___ftneg@f1+1,f,c
  3454  001F18  0E80               	movlw	128
  3455  001F1A  1A03               	xorwf	___ftneg@f1+2,f,c
  3456  001F1C                     l462:
  3457  001F1C  C001  F001         	movff	___ftneg@f1,?___ftneg
  3458  001F20  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  3459  001F24  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  3460  001F28  0012               	return		;funcret
  3461  001F2A                     __end_of___ftneg:
  3462                           	opt stack 0
  3463                           tblptru	equ	0xFF8
  3464                           tblptrh	equ	0xFF7
  3465                           tblptrl	equ	0xFF6
  3466                           tablat	equ	0xFF5
  3467                           prodh	equ	0xFF4
  3468                           prodl	equ	0xFF3
  3469                           postinc0	equ	0xFEE
  3470                           wreg	equ	0xFE8
  3471                           plusw1	equ	0xFE3
  3472                           postinc2	equ	0xFDE
  3473                           postdec2	equ	0xFDD
  3474                           plusw2	equ	0xFDB
  3475                           fsr2h	equ	0xFDA
  3476                           fsr2l	equ	0xFD9
  3477                           status	equ	0xFD8
  3478                           
  3479 ;; *************** function ___awtoft *****************
  3480 ;; Defined at:
  3481 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
  3482 ;; Parameters:    Size  Location     Type
  3483 ;;  c               2    8[COMRAM] int 
  3484 ;; Auto vars:     Size  Location     Type
  3485 ;;  sign            1   11[COMRAM] unsigned char 
  3486 ;; Return value:  Size  Location     Type
  3487 ;;                  3    8[COMRAM] float 
  3488 ;; Registers used:
  3489 ;;		wreg, status,2, status,0, cstack
  3490 ;; Tracked objects:
  3491 ;;		On entry : 0/0
  3492 ;;		On exit  : 0/0
  3493 ;;		Unchanged: 0/0
  3494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3495 ;;      Params:         3       0       0       0       0       0       0       0       0
  3496 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3497 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3498 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3499 ;;Total ram usage:        4 bytes
  3500 ;; Hardware stack levels used:    1
  3501 ;; Hardware stack levels required when called:    1
  3502 ;; This function calls:
  3503 ;;		___ftpack
  3504 ;; This function is called by:
  3505 ;;		_config_timer2
  3506 ;;		_config_ccp1
  3507 ;;		_config_ccp2
  3508 ;;		_exp
  3509 ;;		_log
  3510 ;;		_wait_in_ms
  3511 ;; This function uses a non-reentrant model
  3512 ;;
  3513                           
  3514                           	psect	text16
  3515  001EA8                     __ptext16:
  3516                           	opt stack 0
  3517  001EA8                     ___awtoft:
  3518                           	opt stack 28
  3519                           
  3520                           ;incstack = 0
  3521  001EA8  0E00               	movlw	0
  3522  001EAA  6E0C               	movwf	___awtoft@sign,c
  3523  001EAC  AE0A               	btfss	___awtoft@c+1,7,c
  3524  001EAE  D006               	goto	l353
  3525  001EB0  6C09               	negf	___awtoft@c,c
  3526  001EB2  1E0A               	comf	___awtoft@c+1,f,c
  3527  001EB4  B0D8               	btfsc	status,0,c
  3528  001EB6  2A0A               	incf	___awtoft@c+1,f,c
  3529  001EB8  0E01               	movlw	1
  3530  001EBA  6E0C               	movwf	___awtoft@sign,c
  3531  001EBC                     l353:
  3532  001EBC  C009  F001         	movff	___awtoft@c,___ftpack@arg
  3533  001EC0  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  3534  001EC4  6A03               	clrf	___ftpack@arg+2,c
  3535  001EC6  0E8E               	movlw	142
  3536  001EC8  6E04               	movwf	___ftpack@exp,c
  3537  001ECA  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  3538  001ECE  EC07  F00D         	call	___ftpack	;wreg free
  3539  001ED2  C001  F009         	movff	?___ftpack,?___awtoft
  3540  001ED6  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  3541  001EDA  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  3542  001EDE  0012               	return	
  3543  001EE0                     __end_of___awtoft:
  3544                           	opt stack 0
  3545                           tblptru	equ	0xFF8
  3546                           tblptrh	equ	0xFF7
  3547                           tblptrl	equ	0xFF6
  3548                           tablat	equ	0xFF5
  3549                           prodh	equ	0xFF4
  3550                           prodl	equ	0xFF3
  3551                           postinc0	equ	0xFEE
  3552                           wreg	equ	0xFE8
  3553                           plusw1	equ	0xFE3
  3554                           postinc2	equ	0xFDE
  3555                           postdec2	equ	0xFDD
  3556                           plusw2	equ	0xFDB
  3557                           fsr2h	equ	0xFDA
  3558                           fsr2l	equ	0xFD9
  3559                           status	equ	0xFD8
  3560                           
  3561 ;; *************** function ___lltoft *****************
  3562 ;; Defined at:
  3563 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
  3564 ;; Parameters:    Size  Location     Type
  3565 ;;  c               4    8[COMRAM] unsigned long 
  3566 ;; Auto vars:     Size  Location     Type
  3567 ;;  exp             1   16[COMRAM] unsigned char 
  3568 ;; Return value:  Size  Location     Type
  3569 ;;                  3    8[COMRAM] float 
  3570 ;; Registers used:
  3571 ;;		wreg, status,2, status,0, cstack
  3572 ;; Tracked objects:
  3573 ;;		On entry : 0/0
  3574 ;;		On exit  : 0/0
  3575 ;;		Unchanged: 0/0
  3576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3577 ;;      Params:         4       0       0       0       0       0       0       0       0
  3578 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3579 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3580 ;;      Totals:         9       0       0       0       0       0       0       0       0
  3581 ;;Total ram usage:        9 bytes
  3582 ;; Hardware stack levels used:    1
  3583 ;; Hardware stack levels required when called:    1
  3584 ;; This function calls:
  3585 ;;		___ftpack
  3586 ;; This function is called by:
  3587 ;;		_pow
  3588 ;; This function uses a non-reentrant model
  3589 ;;
  3590                           
  3591                           	psect	text17
  3592  001E0C                     __ptext17:
  3593                           	opt stack 0
  3594  001E0C                     ___lltoft:
  3595                           	opt stack 27
  3596                           
  3597                           ;incstack = 0
  3598  001E0C  0E8E               	movlw	142
  3599  001E0E  6E11               	movwf	___lltoft@exp,c
  3600  001E10  D006               	goto	l529
  3601  001E12  90D8               	bcf	status,0,c
  3602  001E14  320C               	rrcf	___lltoft@c+3,f,c
  3603  001E16  320B               	rrcf	___lltoft@c+2,f,c
  3604  001E18  320A               	rrcf	___lltoft@c+1,f,c
  3605  001E1A  3209               	rrcf	___lltoft@c,f,c
  3606  001E1C  2A11               	incf	___lltoft@exp,f,c
  3607  001E1E                     l529:
  3608  001E1E  0E00               	movlw	0
  3609  001E20  1409               	andwf	___lltoft@c,w,c
  3610  001E22  6E0D               	movwf	??___lltoft& (0+255),c
  3611  001E24  0E00               	movlw	0
  3612  001E26  140A               	andwf	___lltoft@c+1,w,c
  3613  001E28  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  3614  001E2A  0E00               	movlw	0
  3615  001E2C  140B               	andwf	___lltoft@c+2,w,c
  3616  001E2E  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  3617  001E30  0EFF               	movlw	255
  3618  001E32  140C               	andwf	___lltoft@c+3,w,c
  3619  001E34  6E10               	movwf	(??___lltoft+3)& (0+255),c
  3620  001E36  500D               	movf	??___lltoft,w,c
  3621  001E38  100E               	iorwf	??___lltoft+1,w,c
  3622  001E3A  100F               	iorwf	??___lltoft+2,w,c
  3623  001E3C  1010               	iorwf	??___lltoft+3,w,c
  3624  001E3E  A4D8               	btfss	status,2,c
  3625  001E40  D7E8               	goto	l530
  3626  001E42  C009  F001         	movff	___lltoft@c,___ftpack@arg
  3627  001E46  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  3628  001E4A  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  3629  001E4E  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  3630  001E52  0E00               	movlw	0
  3631  001E54  6E05               	movwf	___ftpack@sign,c
  3632  001E56  EC07  F00D         	call	___ftpack	;wreg free
  3633  001E5A  C001  F009         	movff	?___ftpack,?___lltoft
  3634  001E5E  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  3635  001E62  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  3636  001E66  0012               	return	
  3637  001E68                     __end_of___lltoft:
  3638                           	opt stack 0
  3639                           tblptru	equ	0xFF8
  3640                           tblptrh	equ	0xFF7
  3641                           tblptrl	equ	0xFF6
  3642                           tablat	equ	0xFF5
  3643                           prodh	equ	0xFF4
  3644                           prodl	equ	0xFF3
  3645                           postinc0	equ	0xFEE
  3646                           wreg	equ	0xFE8
  3647                           plusw1	equ	0xFE3
  3648                           postinc2	equ	0xFDE
  3649                           postdec2	equ	0xFDD
  3650                           plusw2	equ	0xFDB
  3651                           fsr2h	equ	0xFDA
  3652                           fsr2l	equ	0xFD9
  3653                           status	equ	0xFD8
  3654                           
  3655 ;; *************** function ___awdiv *****************
  3656 ;; Defined at:
  3657 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  3658 ;; Parameters:    Size  Location     Type
  3659 ;;  dividend        2    0[COMRAM] int 
  3660 ;;  divisor         2    2[COMRAM] int 
  3661 ;; Auto vars:     Size  Location     Type
  3662 ;;  quotient        2    6[COMRAM] int 
  3663 ;;  sign            1    5[COMRAM] unsigned char 
  3664 ;;  counter         1    4[COMRAM] unsigned char 
  3665 ;; Return value:  Size  Location     Type
  3666 ;;                  2    0[COMRAM] int 
  3667 ;; Registers used:
  3668 ;;		wreg, status,2, status,0
  3669 ;; Tracked objects:
  3670 ;;		On entry : 0/0
  3671 ;;		On exit  : 0/0
  3672 ;;		Unchanged: 0/0
  3673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3674 ;;      Params:         4       0       0       0       0       0       0       0       0
  3675 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3676 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3677 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3678 ;;Total ram usage:        8 bytes
  3679 ;; Hardware stack levels used:    1
  3680 ;; This function calls:
  3681 ;;		Nothing
  3682 ;; This function is called by:
  3683 ;;		_config_ccp1
  3684 ;;		_config_ccp2
  3685 ;; This function uses a non-reentrant model
  3686 ;;
  3687                           
  3688                           	psect	text18
  3689  001BDC                     __ptext18:
  3690                           	opt stack 0
  3691  001BDC                     ___awdiv:
  3692                           	opt stack 29
  3693                           
  3694                           ;incstack = 0
  3695  001BDC  0E00               	movlw	0
  3696  001BDE  6E06               	movwf	___awdiv@sign,c
  3697  001BE0  AE04               	btfss	___awdiv@divisor+1,7,c
  3698  001BE2  D006               	goto	l325
  3699  001BE4  6C03               	negf	___awdiv@divisor,c
  3700  001BE6  1E04               	comf	___awdiv@divisor+1,f,c
  3701  001BE8  B0D8               	btfsc	status,0,c
  3702  001BEA  2A04               	incf	___awdiv@divisor+1,f,c
  3703  001BEC  0E01               	movlw	1
  3704  001BEE  6E06               	movwf	___awdiv@sign,c
  3705  001BF0                     l325:
  3706  001BF0  AE02               	btfss	___awdiv@dividend+1,7,c
  3707  001BF2  D006               	goto	l326
  3708  001BF4  6C01               	negf	___awdiv@dividend,c
  3709  001BF6  1E02               	comf	___awdiv@dividend+1,f,c
  3710  001BF8  B0D8               	btfsc	status,0,c
  3711  001BFA  2A02               	incf	___awdiv@dividend+1,f,c
  3712  001BFC  0E01               	movlw	1
  3713  001BFE  1A06               	xorwf	___awdiv@sign,f,c
  3714  001C00                     l326:
  3715  001C00  0E00               	movlw	0
  3716  001C02  6E08               	movwf	___awdiv@quotient+1,c
  3717  001C04  0E00               	movlw	0
  3718  001C06  6E07               	movwf	___awdiv@quotient,c
  3719  001C08  5003               	movf	___awdiv@divisor,w,c
  3720  001C0A  1004               	iorwf	___awdiv@divisor+1,w,c
  3721  001C0C  B4D8               	btfsc	status,2,c
  3722  001C0E  D01C               	goto	l333
  3723  001C10  0E01               	movlw	1
  3724  001C12  6E05               	movwf	___awdiv@counter,c
  3725  001C14  D004               	goto	l328
  3726  001C16  90D8               	bcf	status,0,c
  3727  001C18  3603               	rlcf	___awdiv@divisor,f,c
  3728  001C1A  3604               	rlcf	___awdiv@divisor+1,f,c
  3729  001C1C  2A05               	incf	___awdiv@counter,f,c
  3730  001C1E                     l328:
  3731  001C1E  AE04               	btfss	___awdiv@divisor+1,7,c
  3732  001C20  D7FA               	goto	l329
  3733  001C22                     u2010:
  3734  001C22  90D8               	bcf	status,0,c
  3735  001C24  3607               	rlcf	___awdiv@quotient,f,c
  3736  001C26  3608               	rlcf	___awdiv@quotient+1,f,c
  3737  001C28  5003               	movf	___awdiv@divisor,w,c
  3738  001C2A  5C01               	subwf	___awdiv@dividend,w,c
  3739  001C2C  5004               	movf	___awdiv@divisor+1,w,c
  3740  001C2E  5802               	subwfb	___awdiv@dividend+1,w,c
  3741  001C30  A0D8               	btfss	status,0,c
  3742  001C32  D005               	goto	l332
  3743  001C34  5003               	movf	___awdiv@divisor,w,c
  3744  001C36  5E01               	subwf	___awdiv@dividend,f,c
  3745  001C38  5004               	movf	___awdiv@divisor+1,w,c
  3746  001C3A  5A02               	subwfb	___awdiv@dividend+1,f,c
  3747  001C3C  8007               	bsf	___awdiv@quotient,0,c
  3748  001C3E                     l332:
  3749  001C3E  90D8               	bcf	status,0,c
  3750  001C40  3204               	rrcf	___awdiv@divisor+1,f,c
  3751  001C42  3203               	rrcf	___awdiv@divisor,f,c
  3752  001C44  2E05               	decfsz	___awdiv@counter,f,c
  3753  001C46  D7ED               	goto	u2010
  3754  001C48                     l333:
  3755  001C48  5006               	movf	___awdiv@sign,w,c
  3756  001C4A  B4D8               	btfsc	status,2,c
  3757  001C4C  D004               	goto	l334
  3758  001C4E  6C07               	negf	___awdiv@quotient,c
  3759  001C50  1E08               	comf	___awdiv@quotient+1,f,c
  3760  001C52  B0D8               	btfsc	status,0,c
  3761  001C54  2A08               	incf	___awdiv@quotient+1,f,c
  3762  001C56                     l334:
  3763  001C56  C007  F001         	movff	___awdiv@quotient,?___awdiv
  3764  001C5A  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  3765  001C5E  0012               	return	
  3766  001C60                     __end_of___awdiv:
  3767                           	opt stack 0
  3768                           tblptru	equ	0xFF8
  3769                           tblptrh	equ	0xFF7
  3770                           tblptrl	equ	0xFF6
  3771                           tablat	equ	0xFF5
  3772                           prodh	equ	0xFF4
  3773                           prodl	equ	0xFF3
  3774                           postinc0	equ	0xFEE
  3775                           wreg	equ	0xFE8
  3776                           plusw1	equ	0xFE3
  3777                           postinc2	equ	0xFDE
  3778                           postdec2	equ	0xFDD
  3779                           plusw2	equ	0xFDB
  3780                           fsr2h	equ	0xFDA
  3781                           fsr2l	equ	0xFD9
  3782                           status	equ	0xFD8
  3783                           
  3784 ;; *************** function _configBoard *****************
  3785 ;; Defined at:
  3786 ;;		line 11 in file "config.c"
  3787 ;; Parameters:    Size  Location     Type
  3788 ;;		None
  3789 ;; Auto vars:     Size  Location     Type
  3790 ;;		None
  3791 ;; Return value:  Size  Location     Type
  3792 ;;                  1    wreg      void 
  3793 ;; Registers used:
  3794 ;;		wreg, status,2
  3795 ;; Tracked objects:
  3796 ;;		On entry : 0/0
  3797 ;;		On exit  : 0/0
  3798 ;;		Unchanged: 0/0
  3799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3800 ;;      Params:         0       0       0       0       0       0       0       0       0
  3801 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3802 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3803 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3804 ;;Total ram usage:        0 bytes
  3805 ;; Hardware stack levels used:    1
  3806 ;; This function calls:
  3807 ;;		Nothing
  3808 ;; This function is called by:
  3809 ;;		_main
  3810 ;; This function uses a non-reentrant model
  3811 ;;
  3812                           
  3813                           	psect	text19
  3814  001DAC                     __ptext19:
  3815                           	opt stack 0
  3816  001DAC                     _configBoard:
  3817                           	opt stack 30
  3818                           
  3819                           ;config.c: 15: INTCONbits.GIE = 0;
  3820                           
  3821                           ;incstack = 0
  3822  001DAC  9EF2               	bcf	intcon,7,c	;volatile
  3823                           
  3824                           ;config.c: 16: INTCONbits.PEIE = 0;
  3825  001DAE  9CF2               	bcf	intcon,6,c	;volatile
  3826                           
  3827                           ;config.c: 25: T0CONbits.TMR0ON = 1;
  3828  001DB0  8ED5               	bsf	4053,7,c	;volatile
  3829                           
  3830                           ;config.c: 26: T08BIT = 1;
  3831  001DB2  8CD5               	bsf	4053,6,c	;volatile
  3832                           
  3833                           ;config.c: 27: T0CONbits.T0CS = 0;
  3834  001DB4  9AD5               	bcf	4053,5,c	;volatile
  3835                           
  3836                           ;config.c: 29: T0CONbits.PSA = 0;
  3837  001DB6  96D5               	bcf	4053,3,c	;volatile
  3838                           
  3839                           ;config.c: 30: T0CONbits.T0PS = 100;
  3840  001DB8  50D5               	movf	4053,w,c	;volatile
  3841  001DBA  0BF8               	andlw	-8
  3842  001DBC  0904               	iorlw	4
  3843  001DBE  6ED5               	movwf	4053,c	;volatile
  3844                           
  3845                           ;config.c: 31: INTCONbits.TMR0IF = 0;
  3846  001DC0  94F2               	bcf	intcon,2,c	;volatile
  3847                           
  3848                           ;config.c: 33: ADCON1bits.PCFG = 0b1111;
  3849  001DC2  80C1               	bsf	4033,0,c	;volatile
  3850  001DC4  82C1               	bsf	4033,1,c	;volatile
  3851  001DC6  84C1               	bsf	4033,2,c	;volatile
  3852  001DC8  86C1               	bsf	4033,3,c	;volatile
  3853                           
  3854                           ;config.c: 44: ADCON0 = 0b00000111;
  3855  001DCA  0E07               	movlw	7
  3856  001DCC  6EC2               	movwf	4034,c	;volatile
  3857                           
  3858                           ;config.c: 47: ADCON0bits.ADON = 0;
  3859  001DCE  90C2               	bcf	4034,0,c	;volatile
  3860                           
  3861                           ;config.c: 51: ADCON2bits.ADFM = 1;
  3862  001DD0  8EC0               	bsf	4032,7,c	;volatile
  3863                           
  3864                           ;config.c: 52: ADCON2bits.ADCS = 0b110;
  3865  001DD2  50C0               	movf	4032,w,c	;volatile
  3866  001DD4  0BF8               	andlw	-8
  3867  001DD6  0906               	iorlw	6
  3868  001DD8  6EC0               	movwf	4032,c	;volatile
  3869                           
  3870                           ;config.c: 53: ADCON2bits.ACQT = 0b101;
  3871  001DDA  50C0               	movf	4032,w,c	;volatile
  3872  001DDC  0BC7               	andlw	-57
  3873  001DDE  0928               	iorlw	40
  3874  001DE0  6EC0               	movwf	4032,c	;volatile
  3875                           
  3876                           ;config.c: 55: TRISAbits.RA1=1;
  3877  001DE2  8292               	bsf	3986,1,c	;volatile
  3878                           
  3879                           ;config.c: 56: ADCON2bits.ADCS=0b110;
  3880  001DE4  50C0               	movf	4032,w,c	;volatile
  3881  001DE6  0BF8               	andlw	-8
  3882  001DE8  0906               	iorlw	6
  3883  001DEA  6EC0               	movwf	4032,c	;volatile
  3884                           
  3885                           ;config.c: 57: ADCON1bits.VCFG1=0;
  3886  001DEC  9AC1               	bcf	4033,5,c	;volatile
  3887                           
  3888                           ;config.c: 58: ADCON1bits.VCFG0=0;
  3889  001DEE  98C1               	bcf	4033,4,c	;volatile
  3890                           
  3891                           ;config.c: 60: ADCON2bits.ADFM=1;
  3892  001DF0  8EC0               	bsf	4032,7,c	;volatile
  3893                           
  3894                           ;config.c: 64: ADCON0bits.ADON=0;
  3895  001DF2  90C2               	bcf	4034,0,c	;volatile
  3896                           
  3897                           ;config.c: 66: PIE1bits.ADIE=0;
  3898  001DF4  9C9D               	bcf	3997,6,c	;volatile
  3899                           
  3900                           ;config.c: 67: PIR1bits.ADIF=0;
  3901  001DF6  9C9E               	bcf	3998,6,c	;volatile
  3902                           
  3903                           ;config.c: 69: ADCON2bits.ACQT=0b111;
  3904  001DF8  86C0               	bsf	4032,3,c	;volatile
  3905  001DFA  88C0               	bsf	4032,4,c	;volatile
  3906  001DFC  8AC0               	bsf	4032,5,c	;volatile
  3907                           
  3908                           ;config.c: 70: ADCON0bits.GO=1;
  3909  001DFE  82C2               	bsf	4034,1,c	;volatile
  3910                           
  3911                           ;config.c: 72: RCIF=0;
  3912  001E00  9A9E               	bcf	3998,5,c	;volatile
  3913                           
  3914                           ;config.c: 75: TRISD=0;
  3915  001E02  0E00               	movlw	0
  3916  001E04  6E95               	movwf	3989,c	;volatile
  3917                           
  3918                           ;config.c: 76: PORTA=0;
  3919  001E06  0E00               	movlw	0
  3920  001E08  6E80               	movwf	3968,c	;volatile
  3921  001E0A  0012               	return		;funcret
  3922  001E0C                     __end_of_configBoard:
  3923                           	opt stack 0
  3924                           tblptru	equ	0xFF8
  3925                           tblptrh	equ	0xFF7
  3926                           tblptrl	equ	0xFF6
  3927                           tablat	equ	0xFF5
  3928                           prodh	equ	0xFF4
  3929                           prodl	equ	0xFF3
  3930                           intcon	equ	0xFF2
  3931                           postinc0	equ	0xFEE
  3932                           wreg	equ	0xFE8
  3933                           plusw1	equ	0xFE3
  3934                           postinc2	equ	0xFDE
  3935                           postdec2	equ	0xFDD
  3936                           plusw2	equ	0xFDB
  3937                           fsr2h	equ	0xFDA
  3938                           fsr2l	equ	0xFD9
  3939                           status	equ	0xFD8
  3940                           
  3941 ;; *************** function _coinfig_ccpcon *****************
  3942 ;; Defined at:
  3943 ;;		line 34 in file "Pwm.c"
  3944 ;; Parameters:    Size  Location     Type
  3945 ;;  fosc            3   69[COMRAM] float 
  3946 ;;  freq            3   72[COMRAM] float 
  3947 ;; Auto vars:     Size  Location     Type
  3948 ;;		None
  3949 ;; Return value:  Size  Location     Type
  3950 ;;                  1    wreg      void 
  3951 ;; Registers used:
  3952 ;;		wreg, status,2, status,0, cstack
  3953 ;; Tracked objects:
  3954 ;;		On entry : 0/0
  3955 ;;		On exit  : 0/0
  3956 ;;		Unchanged: 0/0
  3957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3958 ;;      Params:         6       0       0       0       0       0       0       0       0
  3959 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3960 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3961 ;;      Totals:         9       0       0       0       0       0       0       0       0
  3962 ;;Total ram usage:        9 bytes
  3963 ;; Hardware stack levels used:    1
  3964 ;; Hardware stack levels required when called:    2
  3965 ;; This function calls:
  3966 ;;		___ftadd
  3967 ;;		___ftdiv
  3968 ;;		___ftmul
  3969 ;;		___fttol
  3970 ;;		___lbtoft
  3971 ;; This function is called by:
  3972 ;;		_main
  3973 ;; This function uses a non-reentrant model
  3974 ;;
  3975                           
  3976                           	psect	text20
  3977  001956                     __ptext20:
  3978                           	opt stack 0
  3979  001956                     _coinfig_ccpcon:
  3980                           	opt stack 28
  3981                           
  3982                           ;Pwm.c: 36: PR2 = ((fosc/(4*freq*prescg))-1);
  3983                           
  3984                           ;incstack = 0
  3985  001956  C0EF  F01C         	movff	_prescg,___ftmul@f2
  3986  00195A  C0F0  F01D         	movff	_prescg+1,___ftmul@f2+1
  3987  00195E  C0F1  F01E         	movff	_prescg+2,___ftmul@f2+2
  3988  001962  C049  F019         	movff	coinfig_ccpcon@freq,___ftmul@f1
  3989  001966  C04A  F01A         	movff	coinfig_ccpcon@freq+1,___ftmul@f1+1
  3990  00196A  C04B  F01B         	movff	coinfig_ccpcon@freq+2,___ftmul@f1+2
  3991  00196E  EC83  F00A         	call	___ftmul	;wreg free
  3992  001972  C019  F04C         	movff	?___ftmul,_coinfig_ccpcon$1431
  3993  001976  C01A  F04D         	movff	?___ftmul+1,_coinfig_ccpcon$1431+1
  3994  00197A  C01B  F04E         	movff	?___ftmul+2,_coinfig_ccpcon$1431+2
  3995                           
  3996                           ;Pwm.c: 36: PR2 = ((fosc/(4*freq*prescg))-1);
  3997  00197E  0E00               	movlw	0
  3998  001980  6E10               	movwf	___ftadd@f2,c
  3999  001982  0E80               	movlw	128
  4000  001984  6E11               	movwf	___ftadd@f2+1,c
  4001  001986  0EBF               	movlw	191
  4002  001988  6E12               	movwf	___ftadd@f2+2,c
  4003  00198A  0E00               	movlw	0
  4004  00198C  6E1C               	movwf	___ftmul@f2,c
  4005  00198E  0E80               	movlw	128
  4006  001990  6E1D               	movwf	___ftmul@f2+1,c
  4007  001992  0E40               	movlw	64
  4008  001994  6E1E               	movwf	___ftmul@f2+2,c
  4009  001996  C04C  F019         	movff	_coinfig_ccpcon$1431,___ftmul@f1
  4010  00199A  C04D  F01A         	movff	_coinfig_ccpcon$1431+1,___ftmul@f1+1
  4011  00199E  C04E  F01B         	movff	_coinfig_ccpcon$1431+2,___ftmul@f1+2
  4012  0019A2  EC83  F00A         	call	___ftmul	;wreg free
  4013  0019A6  C019  F02B         	movff	?___ftmul,___ftdiv@f2
  4014  0019AA  C01A  F02C         	movff	?___ftmul+1,___ftdiv@f2+1
  4015  0019AE  C01B  F02D         	movff	?___ftmul+2,___ftdiv@f2+2
  4016  0019B2  C046  F028         	movff	coinfig_ccpcon@fosc,___ftdiv@f1
  4017  0019B6  C047  F029         	movff	coinfig_ccpcon@fosc+1,___ftdiv@f1+1
  4018  0019BA  C048  F02A         	movff	coinfig_ccpcon@fosc+2,___ftdiv@f1+2
  4019  0019BE  ECFD  F00A         	call	___ftdiv	;wreg free
  4020  0019C2  C028  F00D         	movff	?___ftdiv,___ftadd@f1
  4021  0019C6  C029  F00E         	movff	?___ftdiv+1,___ftadd@f1+1
  4022  0019CA  C02A  F00F         	movff	?___ftdiv+2,___ftadd@f1+2
  4023  0019CE  ECE6  F007         	call	___ftadd	;wreg free
  4024  0019D2  C00D  F037         	movff	?___ftadd,___fttol@f1
  4025  0019D6  C00E  F038         	movff	?___ftadd+1,___fttol@f1+1
  4026  0019DA  C00F  F039         	movff	?___ftadd+2,___fttol@f1+2
  4027  0019DE  EC09  F00A         	call	___fttol	;wreg free
  4028  0019E2  5037               	movf	?___fttol,w,c
  4029  0019E4  6ECB               	movwf	4043,c	;volatile
  4030                           
  4031                           ;Pwm.c: 37: pr2g = PR2;
  4032  0019E6  50CB               	movf	4043,w,c	;volatile
  4033  0019E8  EC95  F00F         	call	___lbtoft
  4034  0019EC  C009  F0EA         	movff	?___lbtoft,_pr2g
  4035  0019F0  C00A  F0EB         	movff	?___lbtoft+1,_pr2g+1
  4036  0019F4  C00B  F0EC         	movff	?___lbtoft+2,_pr2g+2
  4037                           
  4038                           ;Pwm.c: 38: CCP1CONbits.P1M = 0b00;
  4039  0019F8  0E3F               	movlw	-193
  4040  0019FA  16BD               	andwf	4029,f,c	;volatile
  4041                           
  4042                           ;Pwm.c: 39: CCP2CONbits.CCP2M = 1100;
  4043  0019FC  50BA               	movf	4026,w,c	;volatile
  4044  0019FE  0BF0               	andlw	-16
  4045  001A00  090C               	iorlw	12
  4046  001A02  6EBA               	movwf	4026,c	;volatile
  4047                           
  4048                           ;Pwm.c: 40: CCP1CONbits.CCP1M = 1100;
  4049  001A04  50BD               	movf	4029,w,c	;volatile
  4050  001A06  0BF0               	andlw	-16
  4051  001A08  090C               	iorlw	12
  4052  001A0A  6EBD               	movwf	4029,c	;volatile
  4053  001A0C  0012               	return		;funcret
  4054  001A0E                     __end_of_coinfig_ccpcon:
  4055                           	opt stack 0
  4056                           tblptru	equ	0xFF8
  4057                           tblptrh	equ	0xFF7
  4058                           tblptrl	equ	0xFF6
  4059                           tablat	equ	0xFF5
  4060                           prodh	equ	0xFF4
  4061                           prodl	equ	0xFF3
  4062                           intcon	equ	0xFF2
  4063                           postinc0	equ	0xFEE
  4064                           wreg	equ	0xFE8
  4065                           plusw1	equ	0xFE3
  4066                           postinc2	equ	0xFDE
  4067                           postdec2	equ	0xFDD
  4068                           plusw2	equ	0xFDB
  4069                           fsr2h	equ	0xFDA
  4070                           fsr2l	equ	0xFD9
  4071                           status	equ	0xFD8
  4072                           
  4073 ;; *************** function ___lbtoft *****************
  4074 ;; Defined at:
  4075 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lbtoft.c"
  4076 ;; Parameters:    Size  Location     Type
  4077 ;;  c               1    wreg     unsigned char 
  4078 ;; Auto vars:     Size  Location     Type
  4079 ;;  c               1   11[COMRAM] unsigned char 
  4080 ;; Return value:  Size  Location     Type
  4081 ;;                  3    8[COMRAM] float 
  4082 ;; Registers used:
  4083 ;;		wreg, status,2, status,0, cstack
  4084 ;; Tracked objects:
  4085 ;;		On entry : 0/0
  4086 ;;		On exit  : 0/0
  4087 ;;		Unchanged: 0/0
  4088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4089 ;;      Params:         3       0       0       0       0       0       0       0       0
  4090 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4091 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4092 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4093 ;;Total ram usage:        4 bytes
  4094 ;; Hardware stack levels used:    1
  4095 ;; Hardware stack levels required when called:    1
  4096 ;; This function calls:
  4097 ;;		___ftpack
  4098 ;; This function is called by:
  4099 ;;		_coinfig_ccpcon
  4100 ;; This function uses a non-reentrant model
  4101 ;;
  4102                           
  4103                           	psect	text21
  4104  001F2A                     __ptext21:
  4105                           	opt stack 0
  4106  001F2A                     ___lbtoft:
  4107                           	opt stack 28
  4108                           
  4109                           ;incstack = 0
  4110                           ;___lbtoft@c stored from wreg
  4111  001F2A  6E0C               	movwf	___lbtoft@c,c
  4112  001F2C  500C               	movf	___lbtoft@c,w,c
  4113  001F2E  6E01               	movwf	___ftpack@arg,c
  4114  001F30  6A02               	clrf	___ftpack@arg+1,c
  4115  001F32  6A03               	clrf	___ftpack@arg+2,c
  4116  001F34  0E8E               	movlw	142
  4117  001F36  6E04               	movwf	___ftpack@exp,c
  4118  001F38  0E00               	movlw	0
  4119  001F3A  6E05               	movwf	___ftpack@sign,c
  4120  001F3C  EC07  F00D         	call	___ftpack	;wreg free
  4121  001F40  C001  F009         	movff	?___ftpack,?___lbtoft
  4122  001F44  C002  F00A         	movff	?___ftpack+1,?___lbtoft+1
  4123  001F48  C003  F00B         	movff	?___ftpack+2,?___lbtoft+2
  4124  001F4C  0012               	return	
  4125  001F4E                     __end_of___lbtoft:
  4126                           	opt stack 0
  4127                           tblptru	equ	0xFF8
  4128                           tblptrh	equ	0xFF7
  4129                           tblptrl	equ	0xFF6
  4130                           tablat	equ	0xFF5
  4131                           prodh	equ	0xFF4
  4132                           prodl	equ	0xFF3
  4133                           intcon	equ	0xFF2
  4134                           postinc0	equ	0xFEE
  4135                           wreg	equ	0xFE8
  4136                           plusw1	equ	0xFE3
  4137                           postinc2	equ	0xFDE
  4138                           postdec2	equ	0xFDD
  4139                           plusw2	equ	0xFDB
  4140                           fsr2h	equ	0xFDA
  4141                           fsr2l	equ	0xFD9
  4142                           status	equ	0xFD8
  4143                           
  4144 ;; *************** function ___fttol *****************
  4145 ;; Defined at:
  4146 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  4147 ;; Parameters:    Size  Location     Type
  4148 ;;  f1              3   54[COMRAM] float 
  4149 ;; Auto vars:     Size  Location     Type
  4150 ;;  lval            4   64[COMRAM] unsigned long 
  4151 ;;  exp1            1   68[COMRAM] unsigned char 
  4152 ;;  sign1           1   63[COMRAM] unsigned char 
  4153 ;; Return value:  Size  Location     Type
  4154 ;;                  4   54[COMRAM] long 
  4155 ;; Registers used:
  4156 ;;		wreg, status,2, status,0
  4157 ;; Tracked objects:
  4158 ;;		On entry : 0/0
  4159 ;;		On exit  : 0/0
  4160 ;;		Unchanged: 0/0
  4161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4162 ;;      Params:         4       0       0       0       0       0       0       0       0
  4163 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4164 ;;      Temps:          5       0       0       0       0       0       0       0       0
  4165 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4166 ;;Total ram usage:       15 bytes
  4167 ;; Hardware stack levels used:    1
  4168 ;; This function calls:
  4169 ;;		Nothing
  4170 ;; This function is called by:
  4171 ;;		_coinfig_ccpcon
  4172 ;;		_config_ccp1
  4173 ;;		_config_ccp2
  4174 ;;		_pow
  4175 ;;		_exp
  4176 ;;		_floor
  4177 ;;		_wait_in_ms
  4178 ;; This function uses a non-reentrant model
  4179 ;;
  4180                           
  4181                           	psect	text22
  4182  001412                     __ptext22:
  4183                           	opt stack 0
  4184  001412                     ___fttol:
  4185                           	opt stack 26
  4186                           
  4187                           ;incstack = 0
  4188  001412  C039  F03B         	movff	___fttol@f1+2,??___fttol
  4189  001416  6A3C               	clrf	(??___fttol+1)& (0+255),c
  4190  001418  6A3D               	clrf	(??___fttol+2)& (0+255),c
  4191  00141A  3438               	rlcf	___fttol@f1+1,w,c
  4192  00141C  363B               	rlcf	??___fttol& (0+255),f,c
  4193  00141E  E301               	bnc	u1531
  4194  001420  803C               	bsf	(??___fttol+1)& (0+255),0,c
  4195  001422                     u1531:
  4196  001422  503B               	movf	??___fttol,w,c
  4197  001424  6E45               	movwf	___fttol@exp1,c
  4198  001426  5045               	movf	___fttol@exp1,w,c
  4199  001428  A4D8               	btfss	status,2,c
  4200  00142A  D009               	goto	l472
  4201  00142C  0E00               	movlw	0
  4202  00142E  6E37               	movwf	?___fttol,c
  4203  001430  0E00               	movlw	0
  4204  001432  6E38               	movwf	?___fttol+1,c
  4205  001434  0E00               	movlw	0
  4206  001436  6E39               	movwf	?___fttol+2,c
  4207  001438  0E00               	movlw	0
  4208  00143A  6E3A               	movwf	?___fttol+3,c
  4209  00143C  0012               	return	
  4210  00143E                     l472:
  4211  00143E  0E17               	movlw	23
  4212  001440  6E3B               	movwf	??___fttol& (0+255),c
  4213  001442  C037  F03C         	movff	___fttol@f1,??___fttol+1
  4214  001446  C038  F03D         	movff	___fttol@f1+1,??___fttol+2
  4215  00144A  C039  F03E         	movff	___fttol@f1+2,??___fttol+3
  4216  00144E  283B               	incf	??___fttol,w,c
  4217  001450  6E3F               	movwf	(??___fttol+4)& (0+255),c
  4218  001452  D004               	goto	u1550
  4219  001454                     u1555:
  4220  001454  90D8               	bcf	status,0,c
  4221  001456  323E               	rrcf	??___fttol+3,f,c
  4222  001458  323D               	rrcf	??___fttol+2,f,c
  4223  00145A  323C               	rrcf	??___fttol+1,f,c
  4224  00145C                     u1550:
  4225  00145C  2E3F               	decfsz	(??___fttol+4)& (0+255),f,c
  4226  00145E  D7FA               	goto	u1555
  4227  001460  503C               	movf	??___fttol+1,w,c
  4228  001462  6E40               	movwf	___fttol@sign1,c
  4229  001464  8E38               	bsf	___fttol@f1+1,7,c
  4230  001466  0EFF               	movlw	255
  4231  001468  1637               	andwf	___fttol@f1,f,c
  4232  00146A  0EFF               	movlw	255
  4233  00146C  1638               	andwf	___fttol@f1+1,f,c
  4234  00146E  0E00               	movlw	0
  4235  001470  1639               	andwf	___fttol@f1+2,f,c
  4236  001472  5037               	movf	___fttol@f1,w,c
  4237  001474  6E41               	movwf	___fttol@lval,c
  4238  001476  5038               	movf	___fttol@f1+1,w,c
  4239  001478  6E42               	movwf	___fttol@lval+1,c
  4240  00147A  5039               	movf	___fttol@f1+2,w,c
  4241  00147C  6E43               	movwf	___fttol@lval+2,c
  4242  00147E  6A44               	clrf	___fttol@lval+3,c
  4243  001480  0E8E               	movlw	142
  4244  001482  5E45               	subwf	___fttol@exp1,f,c
  4245  001484  AE45               	btfss	___fttol@exp1,7,c
  4246  001486  D016               	goto	l474
  4247  001488  5045               	movf	___fttol@exp1,w,c
  4248  00148A  0A80               	xorlw	128
  4249  00148C  0F8F               	addlw	143
  4250  00148E  B0D8               	btfsc	status,0,c
  4251  001490  D009               	goto	l475
  4252  001492  0E00               	movlw	0
  4253  001494  6E37               	movwf	?___fttol,c
  4254  001496  0E00               	movlw	0
  4255  001498  6E38               	movwf	?___fttol+1,c
  4256  00149A  0E00               	movlw	0
  4257  00149C  6E39               	movwf	?___fttol+2,c
  4258  00149E  0E00               	movlw	0
  4259  0014A0  6E3A               	movwf	?___fttol+3,c
  4260  0014A2  0012               	return	
  4261  0014A4                     l475:
  4262  0014A4  90D8               	bcf	status,0,c
  4263  0014A6  3244               	rrcf	___fttol@lval+3,f,c
  4264  0014A8  3243               	rrcf	___fttol@lval+2,f,c
  4265  0014AA  3242               	rrcf	___fttol@lval+1,f,c
  4266  0014AC  3241               	rrcf	___fttol@lval,f,c
  4267  0014AE  3E45               	incfsz	___fttol@exp1,f,c
  4268  0014B0  D7F9               	goto	l475
  4269  0014B2  D015               	goto	u1590
  4270  0014B4                     l474:
  4271  0014B4  0E17               	movlw	23
  4272  0014B6  6445               	cpfsgt	___fttol@exp1,c
  4273  0014B8  D00F               	goto	l480
  4274  0014BA  0E00               	movlw	0
  4275  0014BC  6E37               	movwf	?___fttol,c
  4276  0014BE  0E00               	movlw	0
  4277  0014C0  6E38               	movwf	?___fttol+1,c
  4278  0014C2  0E00               	movlw	0
  4279  0014C4  6E39               	movwf	?___fttol+2,c
  4280  0014C6  0E00               	movlw	0
  4281  0014C8  6E3A               	movwf	?___fttol+3,c
  4282  0014CA  0012               	return	
  4283  0014CC  90D8               	bcf	status,0,c
  4284  0014CE  3641               	rlcf	___fttol@lval,f,c
  4285  0014D0  3642               	rlcf	___fttol@lval+1,f,c
  4286  0014D2  3643               	rlcf	___fttol@lval+2,f,c
  4287  0014D4  3644               	rlcf	___fttol@lval+3,f,c
  4288  0014D6  0645               	decf	___fttol@exp1,f,c
  4289  0014D8                     l480:
  4290  0014D8  5045               	movf	___fttol@exp1,w,c
  4291  0014DA  A4D8               	btfss	status,2,c
  4292  0014DC  D7F7               	goto	l481
  4293  0014DE                     u1590:
  4294  0014DE  5040               	movf	___fttol@sign1,w,c
  4295  0014E0  B4D8               	btfsc	status,2,c
  4296  0014E2  D008               	goto	l483
  4297  0014E4  1E44               	comf	___fttol@lval+3,f,c
  4298  0014E6  1E43               	comf	___fttol@lval+2,f,c
  4299  0014E8  1E42               	comf	___fttol@lval+1,f,c
  4300  0014EA  6C41               	negf	___fttol@lval,c
  4301  0014EC  0E00               	movlw	0
  4302  0014EE  2242               	addwfc	___fttol@lval+1,f,c
  4303  0014F0  2243               	addwfc	___fttol@lval+2,f,c
  4304  0014F2  2244               	addwfc	___fttol@lval+3,f,c
  4305  0014F4                     l483:
  4306  0014F4  C041  F037         	movff	___fttol@lval,?___fttol
  4307  0014F8  C042  F038         	movff	___fttol@lval+1,?___fttol+1
  4308  0014FC  C043  F039         	movff	___fttol@lval+2,?___fttol+2
  4309  001500  C044  F03A         	movff	___fttol@lval+3,?___fttol+3
  4310  001504  0012               	return	
  4311  001506                     __end_of___fttol:
  4312                           	opt stack 0
  4313                           tblptru	equ	0xFF8
  4314                           tblptrh	equ	0xFF7
  4315                           tblptrl	equ	0xFF6
  4316                           tablat	equ	0xFF5
  4317                           prodh	equ	0xFF4
  4318                           prodl	equ	0xFF3
  4319                           intcon	equ	0xFF2
  4320                           postinc0	equ	0xFEE
  4321                           wreg	equ	0xFE8
  4322                           plusw1	equ	0xFE3
  4323                           postinc2	equ	0xFDE
  4324                           postdec2	equ	0xFDD
  4325                           plusw2	equ	0xFDB
  4326                           fsr2h	equ	0xFDA
  4327                           fsr2l	equ	0xFD9
  4328                           status	equ	0xFD8
  4329                           
  4330 ;; *************** function ___ftmul *****************
  4331 ;; Defined at:
  4332 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  4333 ;; Parameters:    Size  Location     Type
  4334 ;;  f1              3   24[COMRAM] float 
  4335 ;;  f2              3   27[COMRAM] float 
  4336 ;; Auto vars:     Size  Location     Type
  4337 ;;  f3_as_produc    3   34[COMRAM] unsigned um
  4338 ;;  sign            1   38[COMRAM] unsigned char 
  4339 ;;  cntr            1   37[COMRAM] unsigned char 
  4340 ;;  exp             1   33[COMRAM] unsigned char 
  4341 ;; Return value:  Size  Location     Type
  4342 ;;                  3   24[COMRAM] float 
  4343 ;; Registers used:
  4344 ;;		wreg, status,2, status,0, cstack
  4345 ;; Tracked objects:
  4346 ;;		On entry : 0/0
  4347 ;;		On exit  : 0/0
  4348 ;;		Unchanged: 0/0
  4349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4350 ;;      Params:         6       0       0       0       0       0       0       0       0
  4351 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4352 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4353 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4354 ;;Total ram usage:       15 bytes
  4355 ;; Hardware stack levels used:    1
  4356 ;; Hardware stack levels required when called:    1
  4357 ;; This function calls:
  4358 ;;		___ftpack
  4359 ;; This function is called by:
  4360 ;;		_coinfig_ccpcon
  4361 ;;		_config_ccp1
  4362 ;;		_config_ccp2
  4363 ;;		_pow
  4364 ;;		_exp
  4365 ;;		_log
  4366 ;;		_eval_poly
  4367 ;; This function uses a non-reentrant model
  4368 ;;
  4369                           
  4370                           	psect	text23
  4371  001506                     __ptext23:
  4372                           	opt stack 0
  4373  001506                     ___ftmul:
  4374                           	opt stack 25
  4375                           
  4376                           ;incstack = 0
  4377  001506  C01B  F01F         	movff	___ftmul@f1+2,??___ftmul
  4378  00150A  6A20               	clrf	(??___ftmul+1)& (0+255),c
  4379  00150C  6A21               	clrf	(??___ftmul+2)& (0+255),c
  4380  00150E  341A               	rlcf	___ftmul@f1+1,w,c
  4381  001510  361F               	rlcf	??___ftmul& (0+255),f,c
  4382  001512  E301               	bnc	u1441
  4383  001514  8020               	bsf	(??___ftmul+1)& (0+255),0,c
  4384  001516                     u1441:
  4385  001516  501F               	movf	??___ftmul,w,c
  4386  001518  6E22               	movwf	___ftmul@exp,c
  4387  00151A  5022               	movf	___ftmul@exp,w,c
  4388  00151C  A4D8               	btfss	status,2,c
  4389  00151E  D007               	goto	l451
  4390  001520  0E00               	movlw	0
  4391  001522  6E19               	movwf	?___ftmul,c
  4392  001524  0E00               	movlw	0
  4393  001526  6E1A               	movwf	?___ftmul+1,c
  4394  001528  0E00               	movlw	0
  4395  00152A  6E1B               	movwf	?___ftmul+2,c
  4396  00152C  0012               	return	
  4397  00152E                     l451:
  4398  00152E  C01E  F01F         	movff	___ftmul@f2+2,??___ftmul
  4399  001532  6A20               	clrf	(??___ftmul+1)& (0+255),c
  4400  001534  6A21               	clrf	(??___ftmul+2)& (0+255),c
  4401  001536  341D               	rlcf	___ftmul@f2+1,w,c
  4402  001538  361F               	rlcf	??___ftmul& (0+255),f,c
  4403  00153A  E301               	bnc	u1461
  4404  00153C  8020               	bsf	(??___ftmul+1)& (0+255),0,c
  4405  00153E                     u1461:
  4406  00153E  501F               	movf	??___ftmul,w,c
  4407  001540  6E27               	movwf	___ftmul@sign,c
  4408  001542  5027               	movf	___ftmul@sign,w,c
  4409  001544  A4D8               	btfss	status,2,c
  4410  001546  D007               	goto	l453
  4411  001548  0E00               	movlw	0
  4412  00154A  6E19               	movwf	?___ftmul,c
  4413  00154C  0E00               	movlw	0
  4414  00154E  6E1A               	movwf	?___ftmul+1,c
  4415  001550  0E00               	movlw	0
  4416  001552  6E1B               	movwf	?___ftmul+2,c
  4417  001554  0012               	return	
  4418  001556                     l453:
  4419  001556  5027               	movf	___ftmul@sign,w,c
  4420  001558  0F7B               	addlw	123
  4421  00155A  2622               	addwf	___ftmul@exp,f,c
  4422  00155C  C01B  F027         	movff	___ftmul@f1+2,___ftmul@sign
  4423  001560  501E               	movf	___ftmul@f2+2,w,c
  4424  001562  1A27               	xorwf	___ftmul@sign,f,c
  4425  001564  0E80               	movlw	128
  4426  001566  1627               	andwf	___ftmul@sign,f,c
  4427  001568  8E1A               	bsf	___ftmul@f1+1,7,c
  4428  00156A  8E1D               	bsf	___ftmul@f2+1,7,c
  4429  00156C  0EFF               	movlw	255
  4430  00156E  161C               	andwf	___ftmul@f2,f,c
  4431  001570  0EFF               	movlw	255
  4432  001572  161D               	andwf	___ftmul@f2+1,f,c
  4433  001574  0E00               	movlw	0
  4434  001576  161E               	andwf	___ftmul@f2+2,f,c
  4435  001578  0E00               	movlw	0
  4436  00157A  6E23               	movwf	___ftmul@f3_as_product,c
  4437  00157C  0E00               	movlw	0
  4438  00157E  6E24               	movwf	___ftmul@f3_as_product+1,c
  4439  001580  0E00               	movlw	0
  4440  001582  6E25               	movwf	___ftmul@f3_as_product+2,c
  4441  001584  0E07               	movlw	7
  4442  001586  6E26               	movwf	___ftmul@cntr,c
  4443  001588  A019               	btfss	___ftmul@f1,0,c
  4444  00158A  D006               	goto	l455
  4445  00158C  501C               	movf	___ftmul@f2,w,c
  4446  00158E  2623               	addwf	___ftmul@f3_as_product,f,c
  4447  001590  501D               	movf	___ftmul@f2+1,w,c
  4448  001592  2224               	addwfc	___ftmul@f3_as_product+1,f,c
  4449  001594  501E               	movf	___ftmul@f2+2,w,c
  4450  001596  2225               	addwfc	___ftmul@f3_as_product+2,f,c
  4451  001598                     l455:
  4452  001598  90D8               	bcf	status,0,c
  4453  00159A  321B               	rrcf	___ftmul@f1+2,f,c
  4454  00159C  321A               	rrcf	___ftmul@f1+1,f,c
  4455  00159E  3219               	rrcf	___ftmul@f1,f,c
  4456  0015A0  90D8               	bcf	status,0,c
  4457  0015A2  361C               	rlcf	___ftmul@f2,f,c
  4458  0015A4  361D               	rlcf	___ftmul@f2+1,f,c
  4459  0015A6  361E               	rlcf	___ftmul@f2+2,f,c
  4460  0015A8  2E26               	decfsz	___ftmul@cntr,f,c
  4461  0015AA  D7EE               	goto	l454
  4462  0015AC  0E09               	movlw	9
  4463  0015AE  6E26               	movwf	___ftmul@cntr,c
  4464  0015B0  A019               	btfss	___ftmul@f1,0,c
  4465  0015B2  D006               	goto	l458
  4466  0015B4  501C               	movf	___ftmul@f2,w,c
  4467  0015B6  2623               	addwf	___ftmul@f3_as_product,f,c
  4468  0015B8  501D               	movf	___ftmul@f2+1,w,c
  4469  0015BA  2224               	addwfc	___ftmul@f3_as_product+1,f,c
  4470  0015BC  501E               	movf	___ftmul@f2+2,w,c
  4471  0015BE  2225               	addwfc	___ftmul@f3_as_product+2,f,c
  4472  0015C0                     l458:
  4473  0015C0  90D8               	bcf	status,0,c
  4474  0015C2  321B               	rrcf	___ftmul@f1+2,f,c
  4475  0015C4  321A               	rrcf	___ftmul@f1+1,f,c
  4476  0015C6  3219               	rrcf	___ftmul@f1,f,c
  4477  0015C8  90D8               	bcf	status,0,c
  4478  0015CA  3225               	rrcf	___ftmul@f3_as_product+2,f,c
  4479  0015CC  3224               	rrcf	___ftmul@f3_as_product+1,f,c
  4480  0015CE  3223               	rrcf	___ftmul@f3_as_product,f,c
  4481  0015D0  2E26               	decfsz	___ftmul@cntr,f,c
  4482  0015D2  D7EE               	goto	l457
  4483  0015D4  C023  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  4484  0015D8  C024  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4485  0015DC  C025  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4486  0015E0  C022  F004         	movff	___ftmul@exp,___ftpack@exp
  4487  0015E4  C027  F005         	movff	___ftmul@sign,___ftpack@sign
  4488  0015E8  EC07  F00D         	call	___ftpack	;wreg free
  4489  0015EC  C001  F019         	movff	?___ftpack,?___ftmul
  4490  0015F0  C002  F01A         	movff	?___ftpack+1,?___ftmul+1
  4491  0015F4  C003  F01B         	movff	?___ftpack+2,?___ftmul+2
  4492  0015F8  0012               	return	
  4493  0015FA                     __end_of___ftmul:
  4494                           	opt stack 0
  4495                           tblptru	equ	0xFF8
  4496                           tblptrh	equ	0xFF7
  4497                           tblptrl	equ	0xFF6
  4498                           tablat	equ	0xFF5
  4499                           prodh	equ	0xFF4
  4500                           prodl	equ	0xFF3
  4501                           intcon	equ	0xFF2
  4502                           postinc0	equ	0xFEE
  4503                           wreg	equ	0xFE8
  4504                           plusw1	equ	0xFE3
  4505                           postinc2	equ	0xFDE
  4506                           postdec2	equ	0xFDD
  4507                           plusw2	equ	0xFDB
  4508                           fsr2h	equ	0xFDA
  4509                           fsr2l	equ	0xFD9
  4510                           status	equ	0xFD8
  4511                           
  4512 ;; *************** function ___ftdiv *****************
  4513 ;; Defined at:
  4514 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  4515 ;; Parameters:    Size  Location     Type
  4516 ;;  f1              3   39[COMRAM] float 
  4517 ;;  f2              3   42[COMRAM] float 
  4518 ;; Auto vars:     Size  Location     Type
  4519 ;;  f3              3   49[COMRAM] float 
  4520 ;;  sign            1   53[COMRAM] unsigned char 
  4521 ;;  exp             1   52[COMRAM] unsigned char 
  4522 ;;  cntr            1   48[COMRAM] unsigned char 
  4523 ;; Return value:  Size  Location     Type
  4524 ;;                  3   39[COMRAM] float 
  4525 ;; Registers used:
  4526 ;;		wreg, status,2, status,0, cstack
  4527 ;; Tracked objects:
  4528 ;;		On entry : 0/0
  4529 ;;		On exit  : 0/0
  4530 ;;		Unchanged: 0/0
  4531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4532 ;;      Params:         6       0       0       0       0       0       0       0       0
  4533 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4534 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4535 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4536 ;;Total ram usage:       15 bytes
  4537 ;; Hardware stack levels used:    1
  4538 ;; Hardware stack levels required when called:    1
  4539 ;; This function calls:
  4540 ;;		___ftpack
  4541 ;; This function is called by:
  4542 ;;		_coinfig_ccpcon
  4543 ;;		_config_ccp1
  4544 ;;		_config_ccp2
  4545 ;;		_exp
  4546 ;;		_wait_in_ms
  4547 ;; This function uses a non-reentrant model
  4548 ;;
  4549                           
  4550                           	psect	text24
  4551  0015FA                     __ptext24:
  4552                           	opt stack 0
  4553  0015FA                     ___ftdiv:
  4554                           	opt stack 26
  4555                           
  4556                           ;incstack = 0
  4557  0015FA  C02A  F02E         	movff	___ftdiv@f1+2,??___ftdiv
  4558  0015FE  6A2F               	clrf	(??___ftdiv+1)& (0+255),c
  4559  001600  6A30               	clrf	(??___ftdiv+2)& (0+255),c
  4560  001602  3429               	rlcf	___ftdiv@f1+1,w,c
  4561  001604  362E               	rlcf	??___ftdiv& (0+255),f,c
  4562  001606  E301               	bnc	u1631
  4563  001608  802F               	bsf	(??___ftdiv+1)& (0+255),0,c
  4564  00160A                     u1631:
  4565  00160A  502E               	movf	??___ftdiv,w,c
  4566  00160C  6E35               	movwf	___ftdiv@exp,c
  4567  00160E  5035               	movf	___ftdiv@exp,w,c
  4568  001610  A4D8               	btfss	status,2,c
  4569  001612  D007               	goto	l436
  4570  001614  0E00               	movlw	0
  4571  001616  6E28               	movwf	?___ftdiv,c
  4572  001618  0E00               	movlw	0
  4573  00161A  6E29               	movwf	?___ftdiv+1,c
  4574  00161C  0E00               	movlw	0
  4575  00161E  6E2A               	movwf	?___ftdiv+2,c
  4576  001620  0012               	return	
  4577  001622                     l436:
  4578  001622  C02D  F02E         	movff	___ftdiv@f2+2,??___ftdiv
  4579  001626  6A2F               	clrf	(??___ftdiv+1)& (0+255),c
  4580  001628  6A30               	clrf	(??___ftdiv+2)& (0+255),c
  4581  00162A  342C               	rlcf	___ftdiv@f2+1,w,c
  4582  00162C  362E               	rlcf	??___ftdiv& (0+255),f,c
  4583  00162E  E301               	bnc	u1651
  4584  001630  802F               	bsf	(??___ftdiv+1)& (0+255),0,c
  4585  001632                     u1651:
  4586  001632  502E               	movf	??___ftdiv,w,c
  4587  001634  6E36               	movwf	___ftdiv@sign,c
  4588  001636  5036               	movf	___ftdiv@sign,w,c
  4589  001638  A4D8               	btfss	status,2,c
  4590  00163A  D007               	goto	l438
  4591  00163C  0E00               	movlw	0
  4592  00163E  6E28               	movwf	?___ftdiv,c
  4593  001640  0E00               	movlw	0
  4594  001642  6E29               	movwf	?___ftdiv+1,c
  4595  001644  0E00               	movlw	0
  4596  001646  6E2A               	movwf	?___ftdiv+2,c
  4597  001648  0012               	return	
  4598  00164A                     l438:
  4599  00164A  0E00               	movlw	0
  4600  00164C  6E32               	movwf	___ftdiv@f3,c
  4601  00164E  0E00               	movlw	0
  4602  001650  6E33               	movwf	___ftdiv@f3+1,c
  4603  001652  0E00               	movlw	0
  4604  001654  6E34               	movwf	___ftdiv@f3+2,c
  4605  001656  5036               	movf	___ftdiv@sign,w,c
  4606  001658  0F89               	addlw	137
  4607  00165A  5E35               	subwf	___ftdiv@exp,f,c
  4608  00165C  C02A  F036         	movff	___ftdiv@f1+2,___ftdiv@sign
  4609  001660  502D               	movf	___ftdiv@f2+2,w,c
  4610  001662  1A36               	xorwf	___ftdiv@sign,f,c
  4611  001664  0E80               	movlw	128
  4612  001666  1636               	andwf	___ftdiv@sign,f,c
  4613  001668  8E29               	bsf	___ftdiv@f1+1,7,c
  4614  00166A  0EFF               	movlw	255
  4615  00166C  1628               	andwf	___ftdiv@f1,f,c
  4616  00166E  0EFF               	movlw	255
  4617  001670  1629               	andwf	___ftdiv@f1+1,f,c
  4618  001672  0E00               	movlw	0
  4619  001674  162A               	andwf	___ftdiv@f1+2,f,c
  4620  001676  8E2C               	bsf	___ftdiv@f2+1,7,c
  4621  001678  0EFF               	movlw	255
  4622  00167A  162B               	andwf	___ftdiv@f2,f,c
  4623  00167C  0EFF               	movlw	255
  4624  00167E  162C               	andwf	___ftdiv@f2+1,f,c
  4625  001680  0E00               	movlw	0
  4626  001682  162D               	andwf	___ftdiv@f2+2,f,c
  4627  001684  0E18               	movlw	24
  4628  001686  6E31               	movwf	___ftdiv@cntr,c
  4629  001688  90D8               	bcf	status,0,c
  4630  00168A  3632               	rlcf	___ftdiv@f3,f,c
  4631  00168C  3633               	rlcf	___ftdiv@f3+1,f,c
  4632  00168E  3634               	rlcf	___ftdiv@f3+2,f,c
  4633  001690  502B               	movf	___ftdiv@f2,w,c
  4634  001692  5C28               	subwf	___ftdiv@f1,w,c
  4635  001694  502C               	movf	___ftdiv@f2+1,w,c
  4636  001696  5829               	subwfb	___ftdiv@f1+1,w,c
  4637  001698  502D               	movf	___ftdiv@f2+2,w,c
  4638  00169A  582A               	subwfb	___ftdiv@f1+2,w,c
  4639  00169C  A0D8               	btfss	status,0,c
  4640  00169E  D007               	goto	l440
  4641  0016A0  502B               	movf	___ftdiv@f2,w,c
  4642  0016A2  5E28               	subwf	___ftdiv@f1,f,c
  4643  0016A4  502C               	movf	___ftdiv@f2+1,w,c
  4644  0016A6  5A29               	subwfb	___ftdiv@f1+1,f,c
  4645  0016A8  502D               	movf	___ftdiv@f2+2,w,c
  4646  0016AA  5A2A               	subwfb	___ftdiv@f1+2,f,c
  4647  0016AC  8032               	bsf	___ftdiv@f3,0,c
  4648  0016AE                     l440:
  4649  0016AE  90D8               	bcf	status,0,c
  4650  0016B0  3628               	rlcf	___ftdiv@f1,f,c
  4651  0016B2  3629               	rlcf	___ftdiv@f1+1,f,c
  4652  0016B4  362A               	rlcf	___ftdiv@f1+2,f,c
  4653  0016B6  2E31               	decfsz	___ftdiv@cntr,f,c
  4654  0016B8  D7E7               	goto	l439
  4655  0016BA  C032  F001         	movff	___ftdiv@f3,___ftpack@arg
  4656  0016BE  C033  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  4657  0016C2  C034  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  4658  0016C6  C035  F004         	movff	___ftdiv@exp,___ftpack@exp
  4659  0016CA  C036  F005         	movff	___ftdiv@sign,___ftpack@sign
  4660  0016CE  EC07  F00D         	call	___ftpack	;wreg free
  4661  0016D2  C001  F028         	movff	?___ftpack,?___ftdiv
  4662  0016D6  C002  F029         	movff	?___ftpack+1,?___ftdiv+1
  4663  0016DA  C003  F02A         	movff	?___ftpack+2,?___ftdiv+2
  4664  0016DE  0012               	return	
  4665  0016E0                     __end_of___ftdiv:
  4666                           	opt stack 0
  4667                           tblptru	equ	0xFF8
  4668                           tblptrh	equ	0xFF7
  4669                           tblptrl	equ	0xFF6
  4670                           tablat	equ	0xFF5
  4671                           prodh	equ	0xFF4
  4672                           prodl	equ	0xFF3
  4673                           intcon	equ	0xFF2
  4674                           postinc0	equ	0xFEE
  4675                           wreg	equ	0xFE8
  4676                           plusw1	equ	0xFE3
  4677                           postinc2	equ	0xFDE
  4678                           postdec2	equ	0xFDD
  4679                           plusw2	equ	0xFDB
  4680                           fsr2h	equ	0xFDA
  4681                           fsr2l	equ	0xFD9
  4682                           status	equ	0xFD8
  4683                           
  4684 ;; *************** function ___ftadd *****************
  4685 ;; Defined at:
  4686 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  4687 ;; Parameters:    Size  Location     Type
  4688 ;;  f1              3   12[COMRAM] float 
  4689 ;;  f2              3   15[COMRAM] float 
  4690 ;; Auto vars:     Size  Location     Type
  4691 ;;  exp1            1   23[COMRAM] unsigned char 
  4692 ;;  exp2            1   22[COMRAM] unsigned char 
  4693 ;;  sign            1   21[COMRAM] unsigned char 
  4694 ;; Return value:  Size  Location     Type
  4695 ;;                  3   12[COMRAM] float 
  4696 ;; Registers used:
  4697 ;;		wreg, status,2, status,0, cstack
  4698 ;; Tracked objects:
  4699 ;;		On entry : 0/0
  4700 ;;		On exit  : 0/0
  4701 ;;		Unchanged: 0/0
  4702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4703 ;;      Params:         6       0       0       0       0       0       0       0       0
  4704 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4705 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4706 ;;      Totals:        12       0       0       0       0       0       0       0       0
  4707 ;;Total ram usage:       12 bytes
  4708 ;; Hardware stack levels used:    1
  4709 ;; Hardware stack levels required when called:    1
  4710 ;; This function calls:
  4711 ;;		___ftpack
  4712 ;; This function is called by:
  4713 ;;		_coinfig_ccpcon
  4714 ;;		_config_ccp1
  4715 ;;		_config_ccp2
  4716 ;;		___ftsub
  4717 ;;		_floor
  4718 ;;		_log
  4719 ;;		_eval_poly
  4720 ;; This function uses a non-reentrant model
  4721 ;;
  4722                           
  4723                           	psect	text25
  4724  000FCC                     __ptext25:
  4725                           	opt stack 0
  4726  000FCC                     ___ftadd:
  4727                           	opt stack 25
  4728                           
  4729                           ;incstack = 0
  4730  000FCC  C00F  F013         	movff	___ftadd@f1+2,??___ftadd
  4731  000FD0  6A14               	clrf	(??___ftadd+1)& (0+255),c
  4732  000FD2  6A15               	clrf	(??___ftadd+2)& (0+255),c
  4733  000FD4  340E               	rlcf	___ftadd@f1+1,w,c
  4734  000FD6  3613               	rlcf	??___ftadd& (0+255),f,c
  4735  000FD8  E301               	bnc	u1231
  4736  000FDA  8014               	bsf	(??___ftadd+1)& (0+255),0,c
  4737  000FDC                     u1231:
  4738  000FDC  5013               	movf	??___ftadd,w,c
  4739  000FDE  6E18               	movwf	___ftadd@exp1,c
  4740  000FE0  C012  F013         	movff	___ftadd@f2+2,??___ftadd
  4741  000FE4  6A14               	clrf	(??___ftadd+1)& (0+255),c
  4742  000FE6  6A15               	clrf	(??___ftadd+2)& (0+255),c
  4743  000FE8  3411               	rlcf	___ftadd@f2+1,w,c
  4744  000FEA  3613               	rlcf	??___ftadd& (0+255),f,c
  4745  000FEC  E301               	bnc	u1241
  4746  000FEE  8014               	bsf	(??___ftadd+1)& (0+255),0,c
  4747  000FF0                     u1241:
  4748  000FF0  5013               	movf	??___ftadd,w,c
  4749  000FF2  6E17               	movwf	___ftadd@exp2,c
  4750  000FF4  5018               	movf	___ftadd@exp1,w,c
  4751  000FF6  B4D8               	btfsc	status,2,c
  4752  000FF8  D00B               	goto	u1270
  4753  000FFA  5017               	movf	___ftadd@exp2,w,c
  4754  000FFC  5C18               	subwf	___ftadd@exp1,w,c
  4755  000FFE  B0D8               	btfsc	status,0,c
  4756  001000  D00E               	goto	l403
  4757  001002  5018               	movf	___ftadd@exp1,w,c
  4758  001004  0800               	sublw	0
  4759  001006  2417               	addwf	___ftadd@exp2,w,c
  4760  001008  6E13               	movwf	??___ftadd& (0+255),c
  4761  00100A  0E18               	movlw	24
  4762  00100C  6413               	cpfsgt	??___ftadd,c
  4763  00100E  D007               	goto	l403
  4764  001010                     u1270:
  4765  001010  C010  F00D         	movff	___ftadd@f2,?___ftadd
  4766  001014  C011  F00E         	movff	___ftadd@f2+1,?___ftadd+1
  4767  001018  C012  F00F         	movff	___ftadd@f2+2,?___ftadd+2
  4768  00101C  0012               	return	
  4769  00101E                     l403:
  4770  00101E  5017               	movf	___ftadd@exp2,w,c
  4771  001020  B4D8               	btfsc	status,2,c
  4772  001022  D00B               	goto	u1300
  4773  001024  5018               	movf	___ftadd@exp1,w,c
  4774  001026  5C17               	subwf	___ftadd@exp2,w,c
  4775  001028  B0D8               	btfsc	status,0,c
  4776  00102A  D00E               	goto	l407
  4777  00102C  5017               	movf	___ftadd@exp2,w,c
  4778  00102E  0800               	sublw	0
  4779  001030  2418               	addwf	___ftadd@exp1,w,c
  4780  001032  6E13               	movwf	??___ftadd& (0+255),c
  4781  001034  0E18               	movlw	24
  4782  001036  6413               	cpfsgt	??___ftadd,c
  4783  001038  D007               	goto	l407
  4784  00103A                     u1300:
  4785  00103A  C00D  F00D         	movff	___ftadd@f1,?___ftadd
  4786  00103E  C00E  F00E         	movff	___ftadd@f1+1,?___ftadd+1
  4787  001042  C00F  F00F         	movff	___ftadd@f1+2,?___ftadd+2
  4788  001046  0012               	return	
  4789  001048                     l407:
  4790  001048  0E06               	movlw	6
  4791  00104A  6E16               	movwf	___ftadd@sign,c
  4792  00104C  BE0F               	btfsc	___ftadd@f1+2,7,c
  4793  00104E  8E16               	bsf	___ftadd@sign,7,c
  4794  001050  BE12               	btfsc	___ftadd@f2+2,7,c
  4795  001052  8C16               	bsf	___ftadd@sign,6,c
  4796  001054  8E0E               	bsf	___ftadd@f1+1,7,c
  4797  001056  0EFF               	movlw	255
  4798  001058  160D               	andwf	___ftadd@f1,f,c
  4799  00105A  0EFF               	movlw	255
  4800  00105C  160E               	andwf	___ftadd@f1+1,f,c
  4801  00105E  0E00               	movlw	0
  4802  001060  160F               	andwf	___ftadd@f1+2,f,c
  4803  001062  8E11               	bsf	___ftadd@f2+1,7,c
  4804  001064  0EFF               	movlw	255
  4805  001066  1610               	andwf	___ftadd@f2,f,c
  4806  001068  0EFF               	movlw	255
  4807  00106A  1611               	andwf	___ftadd@f2+1,f,c
  4808  00106C  0E00               	movlw	0
  4809  00106E  1612               	andwf	___ftadd@f2+2,f,c
  4810  001070  5017               	movf	___ftadd@exp2,w,c
  4811  001072  5C18               	subwf	___ftadd@exp1,w,c
  4812  001074  B0D8               	btfsc	status,0,c
  4813  001076  D01B               	goto	l412
  4814  001078                     u1330:
  4815  001078  90D8               	bcf	status,0,c
  4816  00107A  3610               	rlcf	___ftadd@f2,f,c
  4817  00107C  3611               	rlcf	___ftadd@f2+1,f,c
  4818  00107E  3612               	rlcf	___ftadd@f2+2,f,c
  4819  001080  0617               	decf	___ftadd@exp2,f,c
  4820  001082  5018               	movf	___ftadd@exp1,w,c
  4821  001084  1817               	xorwf	___ftadd@exp2,w,c
  4822  001086  B4D8               	btfsc	status,2,c
  4823  001088  D00D               	goto	l417
  4824  00108A  0616               	decf	___ftadd@sign,f,c
  4825  00108C  C016  F013         	movff	___ftadd@sign,??___ftadd
  4826  001090  0E07               	movlw	7
  4827  001092  1613               	andwf	??___ftadd,f,c
  4828  001094  B4D8               	btfsc	status,2,c
  4829  001096  D006               	goto	l417
  4830  001098  D7EF               	goto	u1330
  4831  00109A  90D8               	bcf	status,0,c
  4832  00109C  320F               	rrcf	___ftadd@f1+2,f,c
  4833  00109E  320E               	rrcf	___ftadd@f1+1,f,c
  4834  0010A0  320D               	rrcf	___ftadd@f1,f,c
  4835  0010A2  2A18               	incf	___ftadd@exp1,f,c
  4836  0010A4                     l417:
  4837  0010A4  5017               	movf	___ftadd@exp2,w,c
  4838  0010A6  1818               	xorwf	___ftadd@exp1,w,c
  4839  0010A8  B4D8               	btfsc	status,2,c
  4840  0010AA  D01F               	goto	u1400
  4841  0010AC  D7F6               	goto	l418
  4842  0010AE                     l412:
  4843  0010AE  5018               	movf	___ftadd@exp1,w,c
  4844  0010B0  5C17               	subwf	___ftadd@exp2,w,c
  4845  0010B2  B0D8               	btfsc	status,0,c
  4846  0010B4  D01A               	goto	u1400
  4847  0010B6                     u1370:
  4848  0010B6  90D8               	bcf	status,0,c
  4849  0010B8  360D               	rlcf	___ftadd@f1,f,c
  4850  0010BA  360E               	rlcf	___ftadd@f1+1,f,c
  4851  0010BC  360F               	rlcf	___ftadd@f1+2,f,c
  4852  0010BE  0618               	decf	___ftadd@exp1,f,c
  4853  0010C0  5018               	movf	___ftadd@exp1,w,c
  4854  0010C2  1817               	xorwf	___ftadd@exp2,w,c
  4855  0010C4  B4D8               	btfsc	status,2,c
  4856  0010C6  D00D               	goto	l426
  4857  0010C8  0616               	decf	___ftadd@sign,f,c
  4858  0010CA  C016  F013         	movff	___ftadd@sign,??___ftadd
  4859  0010CE  0E07               	movlw	7
  4860  0010D0  1613               	andwf	??___ftadd,f,c
  4861  0010D2  B4D8               	btfsc	status,2,c
  4862  0010D4  D006               	goto	l426
  4863  0010D6  D7EF               	goto	u1370
  4864  0010D8  90D8               	bcf	status,0,c
  4865  0010DA  3212               	rrcf	___ftadd@f2+2,f,c
  4866  0010DC  3211               	rrcf	___ftadd@f2+1,f,c
  4867  0010DE  3210               	rrcf	___ftadd@f2,f,c
  4868  0010E0  2A17               	incf	___ftadd@exp2,f,c
  4869  0010E2                     l426:
  4870  0010E2  5017               	movf	___ftadd@exp2,w,c
  4871  0010E4  1818               	xorwf	___ftadd@exp1,w,c
  4872  0010E6  A4D8               	btfss	status,2,c
  4873  0010E8  D7F7               	goto	l427
  4874  0010EA                     u1400:
  4875  0010EA  AE16               	btfss	___ftadd@sign,7,c
  4876  0010EC  D00C               	goto	l429
  4877  0010EE  0EFF               	movlw	255
  4878  0010F0  1A0D               	xorwf	___ftadd@f1,f,c
  4879  0010F2  0EFF               	movlw	255
  4880  0010F4  1A0E               	xorwf	___ftadd@f1+1,f,c
  4881  0010F6  0EFF               	movlw	255
  4882  0010F8  1A0F               	xorwf	___ftadd@f1+2,f,c
  4883  0010FA  0E01               	movlw	1
  4884  0010FC  260D               	addwf	___ftadd@f1,f,c
  4885  0010FE  0E00               	movlw	0
  4886  001100  220E               	addwfc	___ftadd@f1+1,f,c
  4887  001102  0E00               	movlw	0
  4888  001104  220F               	addwfc	___ftadd@f1+2,f,c
  4889  001106                     l429:
  4890  001106  AC16               	btfss	___ftadd@sign,6,c
  4891  001108  D00C               	goto	l430
  4892  00110A  0EFF               	movlw	255
  4893  00110C  1A10               	xorwf	___ftadd@f2,f,c
  4894  00110E  0EFF               	movlw	255
  4895  001110  1A11               	xorwf	___ftadd@f2+1,f,c
  4896  001112  0EFF               	movlw	255
  4897  001114  1A12               	xorwf	___ftadd@f2+2,f,c
  4898  001116  0E01               	movlw	1
  4899  001118  2610               	addwf	___ftadd@f2,f,c
  4900  00111A  0E00               	movlw	0
  4901  00111C  2211               	addwfc	___ftadd@f2+1,f,c
  4902  00111E  0E00               	movlw	0
  4903  001120  2212               	addwfc	___ftadd@f2+2,f,c
  4904  001122                     l430:
  4905  001122  0E00               	movlw	0
  4906  001124  6E16               	movwf	___ftadd@sign,c
  4907  001126  500D               	movf	___ftadd@f1,w,c
  4908  001128  2610               	addwf	___ftadd@f2,f,c
  4909  00112A  500E               	movf	___ftadd@f1+1,w,c
  4910  00112C  2211               	addwfc	___ftadd@f2+1,f,c
  4911  00112E  500F               	movf	___ftadd@f1+2,w,c
  4912  001130  2212               	addwfc	___ftadd@f2+2,f,c
  4913  001132  AE12               	btfss	___ftadd@f2+2,7,c
  4914  001134  D00E               	goto	l431
  4915  001136  0EFF               	movlw	255
  4916  001138  1A10               	xorwf	___ftadd@f2,f,c
  4917  00113A  0EFF               	movlw	255
  4918  00113C  1A11               	xorwf	___ftadd@f2+1,f,c
  4919  00113E  0EFF               	movlw	255
  4920  001140  1A12               	xorwf	___ftadd@f2+2,f,c
  4921  001142  0E01               	movlw	1
  4922  001144  2610               	addwf	___ftadd@f2,f,c
  4923  001146  0E00               	movlw	0
  4924  001148  2211               	addwfc	___ftadd@f2+1,f,c
  4925  00114A  0E00               	movlw	0
  4926  00114C  2212               	addwfc	___ftadd@f2+2,f,c
  4927  00114E  0E01               	movlw	1
  4928  001150  6E16               	movwf	___ftadd@sign,c
  4929  001152                     l431:
  4930  001152  C010  F001         	movff	___ftadd@f2,___ftpack@arg
  4931  001156  C011  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  4932  00115A  C012  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  4933  00115E  C018  F004         	movff	___ftadd@exp1,___ftpack@exp
  4934  001162  C016  F005         	movff	___ftadd@sign,___ftpack@sign
  4935  001166  EC07  F00D         	call	___ftpack	;wreg free
  4936  00116A  C001  F00D         	movff	?___ftpack,?___ftadd
  4937  00116E  C002  F00E         	movff	?___ftpack+1,?___ftadd+1
  4938  001172  C003  F00F         	movff	?___ftpack+2,?___ftadd+2
  4939  001176  0012               	return	
  4940  001178                     __end_of___ftadd:
  4941                           	opt stack 0
  4942                           tblptru	equ	0xFF8
  4943                           tblptrh	equ	0xFF7
  4944                           tblptrl	equ	0xFF6
  4945                           tablat	equ	0xFF5
  4946                           prodh	equ	0xFF4
  4947                           prodl	equ	0xFF3
  4948                           intcon	equ	0xFF2
  4949                           postinc0	equ	0xFEE
  4950                           wreg	equ	0xFE8
  4951                           plusw1	equ	0xFE3
  4952                           postinc2	equ	0xFDE
  4953                           postdec2	equ	0xFDD
  4954                           plusw2	equ	0xFDB
  4955                           fsr2h	equ	0xFDA
  4956                           fsr2l	equ	0xFD9
  4957                           status	equ	0xFD8
  4958                           
  4959 ;; *************** function ___ftpack *****************
  4960 ;; Defined at:
  4961 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  4962 ;; Parameters:    Size  Location     Type
  4963 ;;  arg             3    0[COMRAM] unsigned um
  4964 ;;  exp             1    3[COMRAM] unsigned char 
  4965 ;;  sign            1    4[COMRAM] unsigned char 
  4966 ;; Auto vars:     Size  Location     Type
  4967 ;;		None
  4968 ;; Return value:  Size  Location     Type
  4969 ;;                  3    0[COMRAM] float 
  4970 ;; Registers used:
  4971 ;;		wreg, status,2, status,0
  4972 ;; Tracked objects:
  4973 ;;		On entry : 0/0
  4974 ;;		On exit  : 0/0
  4975 ;;		Unchanged: 0/0
  4976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4977 ;;      Params:         5       0       0       0       0       0       0       0       0
  4978 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4979 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4980 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4981 ;;Total ram usage:        8 bytes
  4982 ;; Hardware stack levels used:    1
  4983 ;; This function calls:
  4984 ;;		Nothing
  4985 ;; This function is called by:
  4986 ;;		___altoft
  4987 ;;		___awtoft
  4988 ;;		___ftadd
  4989 ;;		___ftdiv
  4990 ;;		___ftmul
  4991 ;;		___lbtoft
  4992 ;;		___lltoft
  4993 ;; This function uses a non-reentrant model
  4994 ;;
  4995                           
  4996                           	psect	text26
  4997  001A0E                     __ptext26:
  4998                           	opt stack 0
  4999  001A0E                     ___ftpack:
  5000                           	opt stack 28
  5001                           
  5002                           ;incstack = 0
  5003  001A0E  5004               	movf	___ftpack@exp,w,c
  5004  001A10  B4D8               	btfsc	status,2,c
  5005  001A12  D005               	goto	u1140
  5006  001A14  5001               	movf	___ftpack@arg,w,c
  5007  001A16  1002               	iorwf	___ftpack@arg+1,w,c
  5008  001A18  1003               	iorwf	___ftpack@arg+2,w,c
  5009  001A1A  A4D8               	btfss	status,2,c
  5010  001A1C  D00C               	goto	l372
  5011  001A1E                     u1140:
  5012  001A1E  0E00               	movlw	0
  5013  001A20  6E01               	movwf	?___ftpack,c
  5014  001A22  0E00               	movlw	0
  5015  001A24  6E02               	movwf	?___ftpack+1,c
  5016  001A26  0E00               	movlw	0
  5017  001A28  6E03               	movwf	?___ftpack+2,c
  5018  001A2A  0012               	return	
  5019  001A2C  2A04               	incf	___ftpack@exp,f,c
  5020  001A2E  90D8               	bcf	status,0,c
  5021  001A30  3203               	rrcf	___ftpack@arg+2,f,c
  5022  001A32  3202               	rrcf	___ftpack@arg+1,f,c
  5023  001A34  3201               	rrcf	___ftpack@arg,f,c
  5024  001A36                     l372:
  5025  001A36  0E00               	movlw	0
  5026  001A38  1401               	andwf	___ftpack@arg,w,c
  5027  001A3A  6E06               	movwf	??___ftpack& (0+255),c
  5028  001A3C  0E00               	movlw	0
  5029  001A3E  1402               	andwf	___ftpack@arg+1,w,c
  5030  001A40  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5031  001A42  0EFE               	movlw	254
  5032  001A44  1403               	andwf	___ftpack@arg+2,w,c
  5033  001A46  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5034  001A48  5006               	movf	??___ftpack,w,c
  5035  001A4A  1007               	iorwf	??___ftpack+1,w,c
  5036  001A4C  1008               	iorwf	??___ftpack+2,w,c
  5037  001A4E  B4D8               	btfsc	status,2,c
  5038  001A50  D00C               	goto	l375
  5039  001A52  D7EC               	goto	l373
  5040  001A54  2A04               	incf	___ftpack@exp,f,c
  5041  001A56  0E01               	movlw	1
  5042  001A58  2601               	addwf	___ftpack@arg,f,c
  5043  001A5A  0E00               	movlw	0
  5044  001A5C  2202               	addwfc	___ftpack@arg+1,f,c
  5045  001A5E  0E00               	movlw	0
  5046  001A60  2203               	addwfc	___ftpack@arg+2,f,c
  5047  001A62  90D8               	bcf	status,0,c
  5048  001A64  3203               	rrcf	___ftpack@arg+2,f,c
  5049  001A66  3202               	rrcf	___ftpack@arg+1,f,c
  5050  001A68  3201               	rrcf	___ftpack@arg,f,c
  5051  001A6A                     l375:
  5052  001A6A  0E00               	movlw	0
  5053  001A6C  1401               	andwf	___ftpack@arg,w,c
  5054  001A6E  6E06               	movwf	??___ftpack& (0+255),c
  5055  001A70  0E00               	movlw	0
  5056  001A72  1402               	andwf	___ftpack@arg+1,w,c
  5057  001A74  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5058  001A76  0EFF               	movlw	255
  5059  001A78  1403               	andwf	___ftpack@arg+2,w,c
  5060  001A7A  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5061  001A7C  5006               	movf	??___ftpack,w,c
  5062  001A7E  1007               	iorwf	??___ftpack+1,w,c
  5063  001A80  1008               	iorwf	??___ftpack+2,w,c
  5064  001A82  B4D8               	btfsc	status,2,c
  5065  001A84  D006               	goto	l378
  5066  001A86  D7E6               	goto	l376
  5067  001A88  0604               	decf	___ftpack@exp,f,c
  5068  001A8A  90D8               	bcf	status,0,c
  5069  001A8C  3601               	rlcf	___ftpack@arg,f,c
  5070  001A8E  3602               	rlcf	___ftpack@arg+1,f,c
  5071  001A90  3603               	rlcf	___ftpack@arg+2,f,c
  5072  001A92                     l378:
  5073  001A92  BE02               	btfsc	___ftpack@arg+1,7,c
  5074  001A94  D003               	goto	u1180
  5075  001A96  0E02               	movlw	2
  5076  001A98  6004               	cpfslt	___ftpack@exp,c
  5077  001A9A  D7F6               	goto	l379
  5078  001A9C                     u1180:
  5079  001A9C  A004               	btfss	___ftpack@exp,0,c
  5080  001A9E  9E02               	bcf	___ftpack@arg+1,7,c
  5081  001AA0  90D8               	bcf	status,0,c
  5082  001AA2  3204               	rrcf	___ftpack@exp,f,c
  5083  001AA4  5004               	movf	___ftpack@exp,w,c
  5084  001AA6  1203               	iorwf	___ftpack@arg+2,f,c
  5085  001AA8  5005               	movf	___ftpack@sign,w,c
  5086  001AAA  A4D8               	btfss	status,2,c
  5087  001AAC  8E03               	bsf	___ftpack@arg+2,7,c
  5088  001AAE  C001  F001         	movff	___ftpack@arg,?___ftpack
  5089  001AB2  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  5090  001AB6  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  5091  001ABA  0012               	return	
  5092  001ABC                     __end_of___ftpack:
  5093                           	opt stack 0
  5094                           tblptru	equ	0xFF8
  5095                           tblptrh	equ	0xFF7
  5096                           tblptrl	equ	0xFF6
  5097                           tablat	equ	0xFF5
  5098                           prodh	equ	0xFF4
  5099                           prodl	equ	0xFF3
  5100                           intcon	equ	0xFF2
  5101                           postinc0	equ	0xFEE
  5102                           wreg	equ	0xFE8
  5103                           plusw1	equ	0xFE3
  5104                           postinc2	equ	0xFDE
  5105                           postdec2	equ	0xFDD
  5106                           plusw2	equ	0xFDB
  5107                           fsr2h	equ	0xFDA
  5108                           fsr2l	equ	0xFD9
  5109                           status	equ	0xFD8
  5110                           tblptru	equ	0xFF8
  5111                           tblptrh	equ	0xFF7
  5112                           tblptrl	equ	0xFF6
  5113                           tablat	equ	0xFF5
  5114                           prodh	equ	0xFF4
  5115                           prodl	equ	0xFF3
  5116                           intcon	equ	0xFF2
  5117                           postinc0	equ	0xFEE
  5118                           wreg	equ	0xFE8
  5119                           plusw1	equ	0xFE3
  5120                           postinc2	equ	0xFDE
  5121                           postdec2	equ	0xFDD
  5122                           plusw2	equ	0xFDB
  5123                           fsr2h	equ	0xFDA
  5124                           fsr2l	equ	0xFD9
  5125                           status	equ	0xFD8
  5126                           
  5127                           	psect	rparam
  5128  0000                     tblptru	equ	0xFF8
  5129                           tblptrh	equ	0xFF7
  5130                           tblptrl	equ	0xFF6
  5131                           tablat	equ	0xFF5
  5132                           prodh	equ	0xFF4
  5133                           prodl	equ	0xFF3
  5134                           intcon	equ	0xFF2
  5135                           postinc0	equ	0xFEE
  5136                           wreg	equ	0xFE8
  5137                           plusw1	equ	0xFE3
  5138                           postinc2	equ	0xFDE
  5139                           postdec2	equ	0xFDD
  5140                           plusw2	equ	0xFDB
  5141                           fsr2h	equ	0xFDA
  5142                           fsr2l	equ	0xFD9
  5143                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    57
    Data        0
    BSS         65
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     94      94
    BANK0           160     78     146
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_config_ccp1
    _main->_config_ccp2
    _config_timer2->___awtoft
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___altoft->___fttol
    _eval_poly->___ftmul
    ___ftsub->___ftadd
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    _coinfig_ccpcon->___fttol
    ___lbtoft->___ftpack
    ___fttol->___ftdiv
    ___ftmul->___ftadd
    ___ftdiv->___ftmul
    ___ftadd->___awtoft

Critical Paths under _main in BANK0

    _main->_config_ccp1
    _main->_config_ccp2
    _config_ccp2->_pow
    _config_ccp1->_pow
    _pow->_exp

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  221775
                     _coinfig_ccpcon
                        _configBoard
                        _config_ccp1
                        _config_ccp2
                      _config_timer2
 ---------------------------------------------------------------------------------
 (1) _config_timer2                                        6     2      4    3956
                                             12 COMRAM     6     2      4
                           ___awtoft
 ---------------------------------------------------------------------------------
 (1) _config_ccp2                                         59    57      2   99976
                                             90 COMRAM     4     2      2
                                             23 BANK0     55    55      0
                            ___awdiv
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (1) _config_ccp1                                         59    57      2   99976
                                             90 COMRAM     4     2      2
                                             23 BANK0     55    55      0
                            ___awdiv
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (2) _pow                                                 17    11      6   79872
                                              6 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  5     2      3   26079
                                             51 COMRAM     5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _exp                                                  9     6      3   42552
                                             87 COMRAM     3     0      3
                                              0 BANK0      6     6      0
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (4) _ldexp                                                7     2      5     400
                                             51 COMRAM     7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (4) _floor                                                8     5      3   10249
                                             79 COMRAM     8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                7     2      5     528
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (5) ___ftge                                               9     3      6     744
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (5) ___altoft                                            10     6      4    2797
                                             69 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           12     5      7   11303
                                             39 COMRAM    12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     463
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    5110
                                             24 COMRAM     6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     273
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    3738
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2728
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     604
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _configBoard                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _coinfig_ccpcon                                       9     3      6   17867
                                             69 COMRAM     9     3      6
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             4     1      3    2605
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___fttol                                             15    11      4    1088
                                             54 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftmul                                             15     9      6    5441
                                             24 COMRAM    15     9      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    3749
                                             39 COMRAM    15     9      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    4765
                                             12 COMRAM    12     6      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2583
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _coinfig_ccpcon
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
     ___lbtoft
       ___ftpack
   _configBoard
   _config_ccp1
     ___awdiv
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul
         _frexp
   _config_ccp2
     ___awdiv
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul
         _frexp
   _config_timer2
     ___awtoft
       ___ftpack

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     4E      92       5       91.3%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5E      5E       1       98.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      F0      20        0.0%
DATA                 0      0      F0       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue May 01 17:20:21 2018

           ___altoft@exp 004E            ___altoft@sign 004F                       l33 1DAA  
           ___awdiv@sign 0006      ___wmul@multiplicand 0003              __CFG_BORV$3 000000  
           ___ftadd@exp1 0018             ___ftadd@exp2 0017             ___ftadd@sign 0016  
                    l141 0C5A                      l125 1D10                      l150 0962  
                    l126 1CFA                      l143 0D1C                      l151 091A  
                    l127 1D34                      l128 1D00                      l153 0988  
                    l129 1D0A                      l242 1C8E                      l138 0C34  
                    l403 101E                      l243 1C82                      l139 0BEC  
                    l155 0A4A                      l412 10AE                      l332 1C3E  
                    l333 1C48                      l325 1BF0                      l430 1122  
                    l334 1C56                      l326 1C00                      l431 1152  
                    l407 1048                      l440 16AE                      l328 1C1E  
                    l417 10A4                      l329 1C16                      l353 1EBC  
                    l426 10E2                      l418 109A                      l530 1E12  
                    l427 10D8                      l451 152E                      l372 1A36  
                    l436 1622                      l444 1B7C                      l373 1A2C  
                    l429 1106                      l453 1556                      l445 1BAC  
                    l438 164A                      l454 1588                      l462 1F1C  
                    l375 1A6A                      l439 1688                      l455 1598  
                    l376 1A54                      l480 14D8                      l472 143E  
                    l457 15B0                      l481 14CC                      l529 1E1E  
                    l801 187A                      l378 1A92                      l458 15C0  
                    l474 14B4                      l802 17FE                      l379 1A88  
                    l483 14F4                      l475 14A4                      l468 1E7E  
                    l751 0DF8                      l591 11C2                      l592 11B2  
                    l753 0E30                      l762 171C                      l754 0E68  
                    l594 11DA                      l771 1AE4                      l763 170E  
                    l755 0E98                      l595 1260                      l780 1912  
                    l756 0FBE                      l596 123E                      l765 1736  
                    l757 0F94                      l597 12E6                      l766 17B0  
                    l775 18A8                      l777 18EE                      l793 1310  
                    l779 191E                      l795 1332                      _PR2 000FCB  
                    _exp 0DE0                      _log 12F4                      _pow 1178  
                    wreg 000FE8             __CFG_LVP$OFF 000000             ___ftdiv@cntr 0031  
           ___ftdiv@sign 0036             __CFG_WDT$OFF 000000                     l2400 0978  
                   l2326 0BEC                     l2352 0D04                     l2336 0C4A  
                   l2416 0A32                     l1722 1BD8                     l2194 0F94  
                   l2354 0D0C                     l2418 0A3A                     l2372 0DCA  
                   l2436 0AF8                     l2390 091A                     ?_exp 0058  
                   ?_log 0034                     ?_pow 0066                     u2010 1C22  
                   u1140 1A1E                     u1300 103A                     u2100 0DCA  
                   u1231 0FDC                     u2111 08E6                     u1400 10EA  
                   u2120 0970                     u1241 0FF0                     u1330 1078  
                   u2051 0BB8                     u1180 1A9C                     u2060 0C42  
                   u2140 0A32                     u2045 1D44                     u1270 1010  
                   u2046 1D46                     u2080 0D04                     u2160 0AF8  
                   u1441 1516                     u1370 10B6                     u1531 1422  
                   u1620 1B0C                     u1461 153E                     u1550 145C  
                   u1631 160A                     u1730 1728                     u1651 1632  
                   u1555 1454                     u1628 1B0E                     u1590 14DE  
                   u1770 18C8                     u1870 0E70                     u1880 0E72  
                   u1960 1228                     u1778 18CA                     _RCIF 007CF5  
           config_ccp1@a 0077             config_ccp2@a 0077             config_ccp1@i 009A  
           config_ccp1@j 00AC             config_ccp2@i 009A             config_ccp2@j 00AC  
           config_ccp1@n 00AA             config_ccp2@n 00AA             config_ccp1@w 00A6  
           config_ccp1@x 00A4             config_ccp1@y 00A8             config_ccp1@z 009C  
           config_ccp2@w 00A6             config_ccp2@x 00A4             config_ccp2@y 00A8  
           config_ccp2@z 009C                     _pr2g 00EA                     _main 1D48  
           ___ftpack@arg 0001             ___ftpack@exp 0004                     fsr2h 000FDA  
                   fsr2l 000FD9                     exp@x 0058                     log@x 0034  
                   pow@x 0066                     pow@y 0069                     prodh 000FF4  
                   prodl 000FF3                     start 0000            __CFG_MCLRE$ON 000000  
           ___ftmul@cntr 0026             ___param_bank 000000             ___ftmul@sign 0027  
           ___fttol@exp1 0045                    ??_exp 005B             ___fttol@lval 0041  
                  ??_log 0037                    ??_pow 005B            __CFG_PLLDIV$2 000000  
                  ?_main 0001          __end_of___awdiv 1C60          __end_of___ftadd 1178  
        __end_of___ftdiv 16E0          __end_of___ftneg 1F2A          __end_of___ftmul 15FA  
        ___awdiv@divisor 0003          __end_of___ftsub 1EA8          __end_of___fttol 1506  
        ___awdiv@counter 0005                    _TMR0L 000FD6                    _PORTA 000F80  
                  _TRISD 000F95             ___lltoft@exp 0011           __CFG_FCMEN$OFF 000000  
          ___awtoft@sign 000C                    _floor 16E0                    _ldexp 1890  
                  _frexp 1ABC                    _errno 00ED            ___ftpack@sign 0005  
                  tablat 000FF5                    pow@yi 0073                    plusw1 000FE3  
                  plusw2 000FDB                    status 000FD8          ??_config_timer2 0011  
            exp@exponent 0063              ldexp@newexp 0037          __initialization 1F4E  
            log@exponent 0037             __end_of_main 1DAC                   ??_main 005F  
          ___fttol@sign1 0040            __activetblptr 000002                   _ADCON0 000FC2  
                 ?_floor 0050                   ?_ldexp 0034                   ?_frexp 0001  
       __end_of___altoft 1CD8                   _CCPR1L 000FBE                   _CCPR2L 000FBB  
                 _T08BIT 007EAE         ___awdiv@dividend 0001         __end_of___awtoft 1EE0  
       __end_of___ftpack 1ABC         __end_of___lbtoft 1F4E         __end_of___lltoft 1E68  
       ??_coinfig_ccpcon 004C                   _TMR0IF 007F92                   _TMR0ON 007EAF  
   __size_of_configBoard 0060       config_timer2@onoff 000D       config_timer2@presc 000F  
                 ___ftge 1B4C     __size_of_config_ccp1 02D2     __size_of_config_ccp2 02D2  
                 ___wmul 1EE0                ??___awdiv 0005                ??___ftadd 0013  
              ??___ftdiv 002E                ??___ftneg 0004                ??___ftmul 001F  
              ??___ftsub 001F                ??___fttol 003B                   clear_0 1F54  
       ___awdiv@quotient 0007                   _prescg 00EF                   floor@i 0053  
                 floor@x 0050    ___ftmul@f3_as_product 0023             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
       __end_ofexp@coeff 081F         __end_oflog@coeff 083A               __accesstop 0060  
__end_of__initialization 1F5A               ___altoft@c 0046               ___ftadd@f1 000D  
             ___ftadd@f2 0010               ___ftge@ff1 0001               ___ftge@ff2 0004  
           eval_poly@res 0031            ___rparam_used 000001               ___ftdiv@f1 0028  
             ___ftdiv@f2 002B               ___ftdiv@f3 0032               ___ftneg@f1 0001  
             ___awtoft@c 0009               ___lbtoft@c 000C               ___ftmul@f1 0019  
             ___ftmul@f2 001C               ___ftsub@f1 0019               ___ftsub@f2 001C  
             ___fttol@f1 0037           __pcstackCOMRAM 0001               ___lltoft@c 0009  
          __end_of_floor 17BE            __end_of_ldexp 1956            __end_of_frexp 1B4C  
                ??_floor 0053                  ??_ldexp 0039                  ??_frexp 0006  
     coinfig_ccpcon@freq 0049       coinfig_ccpcon@fosc 0046         _config_ccp1$1432 0095  
       _config_ccp1$1433 009E         _config_ccp1$1434 00A1         _config_ccp2$1435 0095  
       _config_ccp2$1436 009E         _config_ccp2$1437 00A1               __pbssBANK0 00AE  
     __size_of_eval_poly 00D2                  ?___ftge 0001                  ?___wmul 0001  
              ?___altoft 0046                ?___awtoft 0009                ?___ftpack 0001  
              ?___lbtoft 0009                ?___lltoft 0009                  __Hparam 0000  
                __Lparam 0000          __size_of___ftge 0090                  ___awdiv 1BDC  
                ___ftadd 0FCC                  ___ftdiv 15FA                  ___ftneg 1F06  
        __size_of___wmul 0026                  ___ftmul 1506                  ___ftsub 1E68  
                ___fttol 1412             __psmallconst 0800               ??___altoft 004A  
                __pcinit 1F4E               ??___awtoft 000C               ??___ftpack 0006  
             ??___lbtoft 000C        __end_of_eval_poly 1890                  __ramtop 0800  
             ??___lltoft 000D                  __ptext0 1D48                  __ptext1 1CD8  
                __ptext2 083C                  __ptext3 0B0E                  __ptext4 1178  
                __ptext5 12F4                  __ptext6 0DE0                  __ptext7 1890  
                __ptext8 16E0                  __ptext9 1ABC                _T0CONbits 000FD5  
              _T2CONbits 000FCA             __size_of_exp 01EC             __size_of_log 011E  
           __size_of_pow 017C     end_of_initialization 1F5A                  exp@sign 0065  
          __Lmediumconst 0000    __end_of_config_timer2 1D48                  pow@sign 0072  
                postdec2 000FDD                  postinc0 000FEE                  postinc2 000FDE  
              _TRISAbits 000F92                _TRISCbits 000F94                _TRISEbits 000F96  
            _CCP1CONbits 000FBD              ___ftdiv@exp 0035            ??_configBoard 0001  
            _CCP2CONbits 000FBA            ??_config_ccp1 005D            ??_config_ccp2 005D  
            ___ftmul@exp 0022           __end_of___ftge 1BDC           __end_of___wmul 1F06  
             floor@expon 0056      start_initialization 1F4E               eval_poly@d 002B  
             eval_poly@n 002D               eval_poly@x 0028               ldexp@value 0034  
            __end_of_exp 0FCC              __end_of_log 1412              __end_of_pow 12F4  
             frexp@value 0001                 ??___ftge 0007  __size_of_coinfig_ccpcon 00B8  
               ??___wmul 0005      __end_of_configBoard 1E0C      __end_of_config_ccp1 0DE0  
    __end_of_config_ccp2 0B0E        __size_of___altoft 0078        __size_of___awtoft 0038  
      __size_of___ftpack 00AE        __size_of___lbtoft 0024        __size_of___lltoft 005C  
          __pcstackBANK0 0060      _coinfig_ccpcon$1431 004C        config_ccp1@valreg 0098  
              __pnvBANK0 00EF        config_ccp2@valreg 0098                 ?___awdiv 0001  
               ?___ftadd 000D                 ?___ftdiv 0028                 ?___ftneg 0001  
               ?___ftmul 0019                 ?___ftsub 0019                 ?___fttol 0037  
            __smallconst 0800                _eval_poly 17BE           __size_of_floor 00DE  
         __size_of_ldexp 00C6           __size_of_frexp 0090           ___wmul@product 0005  
               _LATAbits 000F89                 _LATEbits 000F8D              _configBoard 1DAC  
               _PIE1bits 000F9D              _config_ccp1 0B0E              _config_ccp2 083C  
               _PIR1bits 000F9E               _ADCON0bits 000FC2               _ADCON1bits 000FC1  
             _ADCON2bits 000FC0        ___wmul@multiplier 0001               ?_eval_poly 0028  
              frexp@eptr 0004                 __Hrparam 0000                 __Lrparam 0000  
         _coinfig_ccpcon 1956         config_ccp1@F3967 00CC         config_ccp2@F3978 00AE  
       __size_of___awdiv 0084         __size_of___ftadd 01AC         __size_of___ftdiv 00E6  
       __size_of___ftneg 0024                 ___altoft 1C60         __size_of___ftmul 00F4  
       __size_of___ftsub 0040         __size_of___fttol 00F4                 ___awtoft 1EA8  
               ___ftpack 1A0E                 ___lbtoft 1F2A                 ___lltoft 1E0C  
               _exp$1440 0060         config_ccp1@duty1 005B         config_ccp2@duty2 005B  
 __size_of_config_timer2 0070                 __ptext10 1B4C                 __ptext11 1C60  
               __ptext20 1956                 __ptext12 17BE                 __ptext21 1F2A  
               __ptext13 1EE0                 __ptext22 1412                 __ptext14 1E68  
               __ptext23 1506                 __ptext15 1F06                 __ptext24 15FA  
               __ptext16 1EA8                 __ptext25 0FCC                 __ptext17 1E0C  
               __ptext26 1A0E                 __ptext18 1BDC                 __ptext19 1DAC  
               _pow$1438 006C                 _pow$1439 006F            __size_of_main 0064  
 __end_of_coinfig_ccpcon 1A0E    __CFG_CPUDIV$OSC1_PLL2 000000                 exp@coeff 0801  
               log@coeff 081F               _INTCONbits 000FF2              ??_eval_poly 002F  
        ?_coinfig_ccpcon 0046            _config_timer2 1CD8       __CFG_FOSC$HSPLL_HS 000000  
           ?_configBoard 0001           ?_config_timer2 000D             ?_config_ccp1 005B  
           ?_config_ccp2 005B  
