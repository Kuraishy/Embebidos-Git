

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Mar 07 19:07:00 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1
    30                           	psect	text21,global,reloc=2,class=CODE,delta=1
    31                           	psect	text22,global,reloc=2,class=CODE,delta=1
    32                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text24,global,reloc=2,class=CODE,delta=1
    34                           	psect	text25,global,reloc=2,class=CODE,delta=1
    35                           	psect	text26,global,reloc=2,class=CODE,delta=1
    36                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text29,global,reloc=2,class=CODE,delta=1
    39                           	psect	text30,global,reloc=2,class=CODE,delta=1
    40                           	psect	text31,global,reloc=2,class=CODE,delta=1
    41                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    47                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    48                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    49                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    50  0000                     
    51                           ; Version 1.45
    52                           ; Generated 16/11/2017 GMT
    53                           ; 
    54                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    55                           ; All rights reserved.
    56                           ; 
    57                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    58                           ; 
    59                           ; Redistribution and use in source and binary forms, with or without modification, are
    60                           ; permitted provided that the following conditions are met:
    61                           ; 
    62                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    63                           ;        conditions and the following disclaimer.
    64                           ; 
    65                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    66                           ;        of conditions and the following disclaimer in the documentation and/or other
    67                           ;        materials provided with the distribution.
    68                           ; 
    69                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    70                           ;        software without specific prior written permission.
    71                           ; 
    72                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    73                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    74                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    75                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    76                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    77                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    78                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    79                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    80                           ; 
    81                           ; 
    82                           ; Code-generator required, PIC18F4550 Definitions
    83                           ; 
    84                           ; SFR Addresses
    85  0000                     
    86                           	psect	smallconst
    87  000800                     __psmallconst:
    88                           	opt stack 0
    89  000800  00                 	db	0
    90  000801                     _dpowers:
    91                           	opt stack 0
    92  000801  0001               	dw	1
    93  000803  0000               	dw	0
    94  000805  000A               	dw	10
    95  000807  0000               	dw	0
    96  000809  0064               	dw	100
    97  00080B  0000               	dw	0
    98  00080D  03E8               	dw	1000
    99  00080F  0000               	dw	0
   100  000811  2710               	dw	10000
   101  000813  0000               	dw	0
   102  000815  86A0               	dw	34464
   103  000817  0001               	dw	1
   104  000819  4240               	dw	16960
   105  00081B  000F               	dw	15
   106  00081D  9680               	dw	38528
   107  00081F  0098               	dw	152
   108  000821  E100               	dw	57600
   109  000823  05F5               	dw	1525
   110  000825  CA00               	dw	51712
   111  000827  3B9A               	dw	15258
   112  000829                     __end_of_dpowers:
   113                           	opt stack 0
   114  000829                     __powers_:
   115                           	opt stack 0
   116  000829  00                 	db	0
   117  00082A  80                 	db	128
   118  00082B  3F                 	db	63
   119  00082C  00                 	db	0
   120  00082D  20                 	db	32
   121  00082E  41                 	db	65
   122  00082F  00                 	db	0
   123  000830  C8                 	db	200
   124  000831  42                 	db	66
   125  000832  00                 	db	0
   126  000833  7A                 	db	122
   127  000834  44                 	db	68
   128  000835  40                 	db	64
   129  000836  1C                 	db	28
   130  000837  46                 	db	70
   131  000838  50                 	db	80
   132  000839  C3                 	db	195
   133  00083A  47                 	db	71
   134  00083B  24                 	db	36
   135  00083C  74                 	db	116
   136  00083D  49                 	db	73
   137  00083E  97                 	db	151
   138  00083F  18                 	db	24
   139  000840  4B                 	db	75
   140  000841  BC                 	db	188
   141  000842  BE                 	db	190
   142  000843  4C                 	db	76
   143  000844  6B                 	db	107
   144  000845  6E                 	db	110
   145  000846  4E                 	db	78
   146  000847  03                 	db	3
   147  000848  15                 	db	21
   148  000849  50                 	db	80
   149  00084A  79                 	db	121
   150  00084B  AD                 	db	173
   151  00084C  60                 	db	96
   152  00084D  F3                 	db	243
   153  00084E  49                 	db	73
   154  00084F  71                 	db	113
   155  000850                     __end_of__powers_:
   156                           	opt stack 0
   157  000850                     __npowers_:
   158                           	opt stack 0
   159  000850  00                 	db	0
   160  000851  80                 	db	128
   161  000852  3F                 	db	63
   162  000853  CD                 	db	205
   163  000854  CC                 	db	204
   164  000855  3D                 	db	61
   165  000856  D7                 	db	215
   166  000857  23                 	db	35
   167  000858  3C                 	db	60
   168  000859  12                 	db	18
   169  00085A  83                 	db	131
   170  00085B  3A                 	db	58
   171  00085C  B7                 	db	183
   172  00085D  D1                 	db	209
   173  00085E  38                 	db	56
   174  00085F  C6                 	db	198
   175  000860  27                 	db	39
   176  000861  37                 	db	55
   177  000862  38                 	db	56
   178  000863  86                 	db	134
   179  000864  35                 	db	53
   180  000865  C0                 	db	192
   181  000866  D6                 	db	214
   182  000867  33                 	db	51
   183  000868  CC                 	db	204
   184  000869  2B                 	db	43
   185  00086A  32                 	db	50
   186  00086B  70                 	db	112
   187  00086C  89                 	db	137
   188  00086D  30                 	db	48
   189  00086E  E7                 	db	231
   190  00086F  DB                 	db	219
   191  000870  2E                 	db	46
   192  000871  E5                 	db	229
   193  000872  3C                 	db	60
   194  000873  1E                 	db	30
   195  000874  42                 	db	66
   196  000875  A2                 	db	162
   197  000876  0D                 	db	13
   198  000877                     __end_of__npowers_:
   199                           	opt stack 0
   200  0000                     _RCREG	set	4014
   201  0000                     _TXREG	set	4013
   202  0000                     _RCSTA	set	4011
   203  0000                     _TXSTA	set	4012
   204  0000                     _SPBRG	set	4015
   205  0000                     _PORTD	set	3971
   206  0000                     _PORTDbits	set	3971
   207  0000                     _TRISDbits	set	3989
   208  0000                     _ADRESL	set	4035
   209  0000                     _ADRESH	set	4036
   210  0000                     _TRISCbits	set	3988
   211  0000                     _PORTA	set	3968
   212  0000                     _TRISD	set	3989
   213  0000                     _PIR1bits	set	3998
   214  0000                     _PIE1bits	set	3997
   215  0000                     _TRISAbits	set	3986
   216  0000                     _ADCON2bits	set	4032
   217  0000                     _ADCON0	set	4034
   218  0000                     _TRISB	set	3987
   219  0000                     _TRISA	set	3986
   220  0000                     _ADCON1bits	set	4033
   221  0000                     _T0CONbits	set	4053
   222  0000                     _INTCONbits	set	4082
   223  0000                     _PORTCbits	set	3970
   224  0000                     _PORTBbits	set	3969
   225  0000                     _TRISBbits	set	3987
   226  0000                     _ADCON0bits	set	4034
   227  0000                     _OSCCON	set	4051
   228  0000                     _TMR0L	set	4054
   229  0000                     _RCIF	set	31989
   230  0000                     _TXIF	set	31988
   231  0000                     _TRISC7	set	31911
   232  0000                     _TRISC6	set	31910
   233  0000                     _TMR0IF	set	32658
   234  0000                     _TMR0ON	set	32431
   235  0000                     _T08BIT	set	32430
   236  000877                     STR_1:
   237  000877  25                 	db	37
   238  000878  31                 	db	49	;'1'
   239  000879  2E                 	db	46
   240  00087A  32                 	db	50	;'2'
   241  00087B  66                 	db	102	;'f'
   242  00087C  0A                 	db	10
   243  00087D  00                 	db	0
   244                           
   245                           ; #config settings
   246  00087E  00                 	db	0	; dummy byte at the end
   247  0000                     
   248                           	psect	cinit
   249  002A22                     __pcinit:
   250                           	opt stack 0
   251  002A22                     start_initialization:
   252                           	opt stack 0
   253  002A22                     __initialization:
   254                           	opt stack 0
   255  002A22                     end_of_initialization:
   256                           	opt stack 0
   257  002A22                     __end_of__initialization:
   258                           	opt stack 0
   259  002A22  904D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   260  002A24  924D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   261  002A26  0E00               	movlw	low (__Lmediumconst shr (0+16))
   262  002A28  6EF8               	movwf	tblptru,c
   263  002A2A  0100               	movlb	0
   264  002A2C  EF92  F00C         	goto	_main	;jump to C main() function
   265                           tblptru	equ	0xFF8
   266                           
   267                           	psect	cstackBANK0
   268  000060                     __pcstackBANK0:
   269                           	opt stack 0
   270  000060                     ??___ftadd:
   271  000060                     ??___fttol:
   272                           
   273                           ; 1 bytes @ 0x0
   274  000060                     	ds	3
   275  000063                     ___ftadd@sign:
   276                           	opt stack 0
   277                           
   278                           ; 1 bytes @ 0x3
   279  000063                     	ds	1
   280  000064                     ___ftadd@exp2:
   281                           	opt stack 0
   282                           
   283                           ; 1 bytes @ 0x4
   284  000064                     	ds	1
   285  000065                     ___ftadd@exp1:
   286                           	opt stack 0
   287  000065                     ___fttol@sign1:
   288                           	opt stack 0
   289                           
   290                           ; 1 bytes @ 0x5
   291  000065                     	ds	1
   292  000066                     ?___ftsub:
   293                           	opt stack 0
   294  000066                     ___ftsub@f1:
   295                           	opt stack 0
   296  000066                     ___fttol@lval:
   297                           	opt stack 0
   298                           
   299                           ; 4 bytes @ 0x6
   300  000066                     	ds	3
   301  000069                     ___ftsub@f2:
   302                           	opt stack 0
   303                           
   304                           ; 3 bytes @ 0x9
   305  000069                     	ds	1
   306  00006A                     ___fttol@exp1:
   307                           	opt stack 0
   308                           
   309                           ; 1 bytes @ 0xA
   310  00006A                     	ds	1
   311  00006B                     wait_in_ms@flag:
   312                           	opt stack 0
   313  00006B                     USART_Init@baud_rate:
   314                           	opt stack 0
   315                           
   316                           ; 4 bytes @ 0xB
   317  00006B                     	ds	1
   318  00006C                     ?_sprintf:
   319                           	opt stack 0
   320  00006C                     sprintf@sp:
   321                           	opt stack 0
   322                           
   323                           ; 2 bytes @ 0xC
   324  00006C                     	ds	1
   325  00006D                     wait_in_ms@count:
   326                           	opt stack 0
   327                           
   328                           ; 2 bytes @ 0xD
   329  00006D                     	ds	1
   330  00006E                     sprintf@f:
   331                           	opt stack 0
   332                           
   333                           ; 2 bytes @ 0xE
   334  00006E                     	ds	1
   335  00006F                     wait_in_ms@count_ms:
   336                           	opt stack 0
   337  00006F                     USART_Init@temp:
   338                           	opt stack 0
   339                           
   340                           ; 3 bytes @ 0xF
   341  00006F                     	ds	2
   342  000071                     ?_ADC_Read:
   343                           	opt stack 0
   344  000071                     ADC_Read@channel:
   345                           	opt stack 0
   346  000071                     lcd_orden@orden:
   347                           	opt stack 0
   348                           
   349                           ; 2 bytes @ 0x11
   350  000071                     	ds	2
   351  000073                     ??_ADC_Read:
   352  000073                     ??_sprintf:
   353  000073                     ??_lcd_orden:
   354                           
   355                           ; 1 bytes @ 0x13
   356  000073                     	ds	6
   357  000079                     _sprintf$1619:
   358                           	opt stack 0
   359                           
   360                           ; 3 bytes @ 0x19
   361  000079                     	ds	3
   362  00007C                     sprintf@ap:
   363                           	opt stack 0
   364                           
   365                           ; 2 bytes @ 0x1C
   366  00007C                     	ds	2
   367  00007E                     sprintf@val:
   368                           	opt stack 0
   369                           
   370                           ; 4 bytes @ 0x1E
   371  00007E                     	ds	4
   372  000082                     sprintf@flag:
   373                           	opt stack 0
   374                           
   375                           ; 2 bytes @ 0x22
   376  000082                     	ds	2
   377  000084                     sprintf@width:
   378                           	opt stack 0
   379                           
   380                           ; 2 bytes @ 0x24
   381  000084                     	ds	2
   382  000086                     sprintf@tmpval:
   383                           	opt stack 0
   384                           
   385                           ; 4 bytes @ 0x26
   386  000086                     	ds	4
   387  00008A                     sprintf@exp:
   388                           	opt stack 0
   389                           
   390                           ; 2 bytes @ 0x2A
   391  00008A                     	ds	2
   392  00008C                     sprintf@fval:
   393                           	opt stack 0
   394                           
   395                           ; 3 bytes @ 0x2C
   396  00008C                     	ds	3
   397  00008F                     sprintf@prec:
   398                           	opt stack 0
   399                           
   400                           ; 2 bytes @ 0x2F
   401  00008F                     	ds	2
   402  000091                     sprintf@c:
   403                           	opt stack 0
   404                           
   405                           ; 1 bytes @ 0x31
   406  000091                     	ds	1
   407  000092                     main@pulsoCorazonX:
   408                           	opt stack 0
   409                           
   410                           ; 2 bytes @ 0x32
   411  000092                     	ds	2
   412  000094                     main@pulsos_test:
   413                           	opt stack 0
   414                           
   415                           ; 2 bytes @ 0x34
   416  000094                     	ds	2
   417  000096                     main@pulsoCorazonY:
   418                           	opt stack 0
   419                           
   420                           ; 2 bytes @ 0x36
   421  000096                     	ds	2
   422  000098                     main@an1:
   423                           	opt stack 0
   424                           
   425                           ; 2 bytes @ 0x38
   426  000098                     	ds	2
   427  00009A                     main@voltaje_an1:
   428                           	opt stack 0
   429                           
   430                           ; 3 bytes @ 0x3A
   431  00009A                     	ds	3
   432  00009D                     main@str:
   433                           	opt stack 0
   434                           
   435                           ; 3 bytes @ 0x3D
   436  00009D                     	ds	3
   437                           tblptru	equ	0xFF8
   438                           
   439                           	psect	cstackCOMRAM
   440  000001                     __pcstackCOMRAM:
   441                           	opt stack 0
   442  000001                     ??_ADCint:
   443  000001                     
   444                           ; 1 bytes @ 0x0
   445  000001                     	ds	18
   446  000013                     ??_isdigit:
   447  000013                     ?___awmod:
   448                           	opt stack 0
   449  000013                     ?___ftpack:
   450                           	opt stack 0
   451  000013                     ?___ftneg:
   452                           	opt stack 0
   453  000013                     ?__tdiv_to_l_:
   454                           	opt stack 0
   455  000013                     ?__div_to_l_:
   456                           	opt stack 0
   457  000013                     ?___lldiv:
   458                           	opt stack 0
   459  000013                     ?___llmod:
   460                           	opt stack 0
   461  000013                     USART_TransmitChar@out:
   462                           	opt stack 0
   463  000013                     MSdelay@val:
   464                           	opt stack 0
   465  000013                     ___awmod@dividend:
   466                           	opt stack 0
   467  000013                     __div_to_l_@f1:
   468                           	opt stack 0
   469  000013                     ___ftpack@arg:
   470                           	opt stack 0
   471  000013                     __tdiv_to_l_@f1:
   472                           	opt stack 0
   473  000013                     ___ftge@ff1:
   474                           	opt stack 0
   475  000013                     ___ftneg@f1:
   476                           	opt stack 0
   477  000013                     ___lldiv@dividend:
   478                           	opt stack 0
   479  000013                     ___llmod@dividend:
   480                           	opt stack 0
   481                           
   482                           ; 4 bytes @ 0x12
   483  000013                     	ds	1
   484  000014                     _isdigit$1257:
   485                           	opt stack 0
   486  000014                     USART_SendString@out:
   487                           	opt stack 0
   488                           
   489                           ; 2 bytes @ 0x13
   490  000014                     	ds	1
   491  000015                     isdigit@c:
   492                           	opt stack 0
   493  000015                     MSdelay@i:
   494                           	opt stack 0
   495  000015                     ___awmod@divisor:
   496                           	opt stack 0
   497                           
   498                           ; 2 bytes @ 0x14
   499  000015                     	ds	1
   500  000016                     ___ftpack@exp:
   501                           	opt stack 0
   502  000016                     __div_to_l_@f2:
   503                           	opt stack 0
   504  000016                     __tdiv_to_l_@f2:
   505                           	opt stack 0
   506  000016                     ___ftge@ff2:
   507                           	opt stack 0
   508                           
   509                           ; 3 bytes @ 0x15
   510  000016                     	ds	1
   511  000017                     ___awmod@counter:
   512                           	opt stack 0
   513  000017                     ___ftpack@sign:
   514                           	opt stack 0
   515  000017                     MSdelay@j:
   516                           	opt stack 0
   517  000017                     ___lldiv@divisor:
   518                           	opt stack 0
   519  000017                     ___llmod@divisor:
   520                           	opt stack 0
   521                           
   522                           ; 4 bytes @ 0x16
   523  000017                     	ds	1
   524  000018                     ??___ftpack:
   525  000018                     ___awmod@sign:
   526                           	opt stack 0
   527                           
   528                           ; 1 bytes @ 0x17
   529  000018                     	ds	1
   530  000019                     ??__tdiv_to_l_:
   531  000019                     ??___ftge:
   532  000019                     ?___awdiv:
   533                           	opt stack 0
   534  000019                     ___awdiv@dividend:
   535                           	opt stack 0
   536  000019                     __div_to_l_@quot:
   537                           	opt stack 0
   538                           
   539                           ; 4 bytes @ 0x18
   540  000019                     	ds	2
   541  00001B                     ?___altoft:
   542                           	opt stack 0
   543  00001B                     ?___awtoft:
   544                           	opt stack 0
   545  00001B                     ?___lltoft:
   546                           	opt stack 0
   547  00001B                     ?___lwtoft:
   548                           	opt stack 0
   549  00001B                     ___llmod@counter:
   550                           	opt stack 0
   551  00001B                     ___awdiv@divisor:
   552                           	opt stack 0
   553  00001B                     ___awtoft@c:
   554                           	opt stack 0
   555  00001B                     ___lwtoft@c:
   556                           	opt stack 0
   557  00001B                     ___altoft@c:
   558                           	opt stack 0
   559  00001B                     ___lldiv@quotient:
   560                           	opt stack 0
   561  00001B                     ___lltoft@c:
   562                           	opt stack 0
   563                           
   564                           ; 4 bytes @ 0x1A
   565  00001B                     	ds	1
   566  00001C                     __tdiv_to_l_@quot:
   567                           	opt stack 0
   568                           
   569                           ; 4 bytes @ 0x1B
   570  00001C                     	ds	1
   571  00001D                     ___awdiv@counter:
   572                           	opt stack 0
   573  00001D                     __div_to_l_@cntr:
   574                           	opt stack 0
   575                           
   576                           ; 1 bytes @ 0x1C
   577  00001D                     	ds	1
   578  00001E                     ___awdiv@sign:
   579                           	opt stack 0
   580  00001E                     ___awtoft@sign:
   581                           	opt stack 0
   582  00001E                     __div_to_l_@exp1:
   583                           	opt stack 0
   584  00001E                     pacienteMuerto@testv:
   585                           	opt stack 0
   586                           
   587                           ; 3 bytes @ 0x1D
   588  00001E                     	ds	1
   589  00001F                     ??___altoft:
   590  00001F                     ??___lltoft:
   591  00001F                     ___lldiv@counter:
   592                           	opt stack 0
   593  00001F                     ___awdiv@quotient:
   594                           	opt stack 0
   595                           
   596                           ; 2 bytes @ 0x1E
   597  00001F                     	ds	1
   598  000020                     __tdiv_to_l_@cntr:
   599                           	opt stack 0
   600                           
   601                           ; 1 bytes @ 0x1F
   602  000020                     	ds	1
   603  000021                     ?___wmul:
   604                           	opt stack 0
   605  000021                     __tdiv_to_l_@exp1:
   606                           	opt stack 0
   607  000021                     ___wmul@multiplier:
   608                           	opt stack 0
   609                           
   610                           ; 2 bytes @ 0x20
   611  000021                     	ds	2
   612  000023                     ___altoft@exp:
   613                           	opt stack 0
   614  000023                     ___lltoft@exp:
   615                           	opt stack 0
   616  000023                     ___wmul@multiplicand:
   617                           	opt stack 0
   618                           
   619                           ; 2 bytes @ 0x22
   620  000023                     	ds	1
   621  000024                     ___altoft@sign:
   622                           	opt stack 0
   623                           
   624                           ; 1 bytes @ 0x23
   625  000024                     	ds	1
   626  000025                     ___wmul@product:
   627                           	opt stack 0
   628                           
   629                           ; 2 bytes @ 0x24
   630  000025                     	ds	2
   631  000027                     ?___ftmul:
   632                           	opt stack 0
   633  000027                     ___ftmul@f1:
   634                           	opt stack 0
   635                           
   636                           ; 3 bytes @ 0x26
   637  000027                     	ds	3
   638  00002A                     ___ftmul@f2:
   639                           	opt stack 0
   640                           
   641                           ; 3 bytes @ 0x29
   642  00002A                     	ds	3
   643  00002D                     ??___ftmul:
   644                           
   645                           ; 1 bytes @ 0x2C
   646  00002D                     	ds	3
   647  000030                     ___ftmul@exp:
   648                           	opt stack 0
   649                           
   650                           ; 1 bytes @ 0x2F
   651  000030                     	ds	1
   652  000031                     ___ftmul@f3_as_product:
   653                           	opt stack 0
   654                           
   655                           ; 3 bytes @ 0x30
   656  000031                     	ds	3
   657  000034                     ___ftmul@cntr:
   658                           	opt stack 0
   659                           
   660                           ; 1 bytes @ 0x33
   661  000034                     	ds	1
   662  000035                     ___ftmul@sign:
   663                           	opt stack 0
   664                           
   665                           ; 1 bytes @ 0x34
   666  000035                     	ds	1
   667  000036                     ?___ftdiv:
   668                           	opt stack 0
   669  000036                     ?_fround:
   670                           	opt stack 0
   671  000036                     ?_scale:
   672                           	opt stack 0
   673  000036                     ___ftdiv@f1:
   674                           	opt stack 0
   675                           
   676                           ; 3 bytes @ 0x35
   677  000036                     	ds	3
   678  000039                     ___ftdiv@f2:
   679                           	opt stack 0
   680  000039                     _fround$1617:
   681                           	opt stack 0
   682  000039                     _scale$1618:
   683                           	opt stack 0
   684                           
   685                           ; 3 bytes @ 0x38
   686  000039                     	ds	3
   687  00003C                     ??___ftdiv:
   688  00003C                     scale@scl:
   689                           	opt stack 0
   690  00003C                     _fround$1616:
   691                           	opt stack 0
   692                           
   693                           ; 3 bytes @ 0x3B
   694  00003C                     	ds	3
   695  00003F                     fround@prec:
   696                           	opt stack 0
   697  00003F                     ___ftdiv@cntr:
   698                           	opt stack 0
   699                           
   700                           ; 1 bytes @ 0x3E
   701  00003F                     	ds	1
   702  000040                     ___ftdiv@f3:
   703                           	opt stack 0
   704                           
   705                           ; 3 bytes @ 0x3F
   706  000040                     	ds	3
   707  000043                     ___ftdiv@exp:
   708                           	opt stack 0
   709                           
   710                           ; 1 bytes @ 0x42
   711  000043                     	ds	1
   712  000044                     ___ftdiv@sign:
   713                           	opt stack 0
   714                           
   715                           ; 1 bytes @ 0x43
   716  000044                     	ds	1
   717  000045                     ?___ftadd:
   718                           	opt stack 0
   719  000045                     ?___fttol:
   720                           	opt stack 0
   721  000045                     ___ftadd@f1:
   722                           	opt stack 0
   723  000045                     ___fttol@f1:
   724                           	opt stack 0
   725                           
   726                           ; 3 bytes @ 0x44
   727  000045                     	ds	3
   728  000048                     ___ftadd@f2:
   729                           	opt stack 0
   730                           
   731                           ; 3 bytes @ 0x47
   732  000048                     	ds	1
   733  000049                     wait_in_ms@time_in_ms:
   734                           	opt stack 0
   735                           
   736                           ; 2 bytes @ 0x48
   737  000049                     	ds	2
   738  00004B                     ??_wait_in_ms:
   739  00004B                     
   740                           ; 1 bytes @ 0x4A
   741  00004B                     	ds	2
   742  00004D                     tblptru	equ	0xFF8
   743                           
   744                           ; 1 bytes @ 0x4C
   745 ;;
   746 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   747 ;;
   748 ;; *************** function _main *****************
   749 ;; Defined at:
   750 ;;		line 40 in file "ECG.c"
   751 ;; Parameters:    Size  Location     Type
   752 ;;		None
   753 ;; Auto vars:     Size  Location     Type
   754 ;;  str             3   61[BANK0 ] unsigned char [3]
   755 ;;  voltaje_an1     3   58[BANK0 ] float 
   756 ;;  an1             2   56[BANK0 ] unsigned int 
   757 ;;  pulsoCorazon    2   54[BANK0 ] int 
   758 ;;  pulsos_test     2   52[BANK0 ] int 
   759 ;;  pulsoCorazon    2   50[BANK0 ] int 
   760 ;;  data_in         1    0        unsigned char 
   761 ;; Return value:  Size  Location     Type
   762 ;;                  1    wreg      void 
   763 ;; Registers used:
   764 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   765 ;; Tracked objects:
   766 ;;		On entry : 0/0
   767 ;;		On exit  : 0/0
   768 ;;		Unchanged: 0/0
   769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   770 ;;      Params:         0       0       0       0       0       0       0       0       0
   771 ;;      Locals:         0      14       0       0       0       0       0       0       0
   772 ;;      Temps:          0       0       0       0       0       0       0       0       0
   773 ;;      Totals:         0      14       0       0       0       0       0       0       0
   774 ;;Total ram usage:       14 bytes
   775 ;; Hardware stack levels required when called:    7
   776 ;; This function calls:
   777 ;;		_ADC_Read
   778 ;;		_MSdelay
   779 ;;		_USART_Init
   780 ;;		_USART_SendString
   781 ;;		___ftdiv
   782 ;;		___ftge
   783 ;;		___ftmul
   784 ;;		___lwtoft
   785 ;;		_configBoard
   786 ;;		_lcd_iniciar
   787 ;;		_lcd_origen
   788 ;;		_pacienteMuerto
   789 ;;		_sprintf
   790 ;;		_wait_in_ms
   791 ;; This function is called by:
   792 ;;		Startup code after reset
   793 ;; This function uses a non-reentrant model
   794 ;;
   795                           
   796                           	psect	text0
   797  001924                     __ptext0:
   798                           	opt stack 0
   799  001924                     _main:
   800                           	opt stack 24
   801                           
   802                           ;ECG.c: 42: configBoard();
   803                           
   804                           ;incstack = 0
   805  001924  ECBF  F013         	call	_configBoard	;wreg free
   806                           
   807                           ;ECG.c: 44: lcd_iniciar();
   808  001928  EC64  F010         	call	_lcd_iniciar	;wreg free
   809                           
   810                           ;ECG.c: 45: OSCCON=0x72;
   811  00192C  0E72               	movlw	114
   812  00192E  6ED3               	movwf	4051,c	;volatile
   813                           
   814                           ;ECG.c: 47: char data_in;
   815                           ;ECG.c: 49: USART_Init(9600);
   816  001930  0E80               	movlw	128
   817  001932  0100               	movlb	0	; () banked
   818  001934  6F6B               	movwf	USART_Init@baud_rate& (0+255),b
   819  001936  0E25               	movlw	37
   820  001938  6F6C               	movwf	(USART_Init@baud_rate+1)& (0+255),b
   821  00193A  0E00               	movlw	0
   822  00193C  6F6D               	movwf	(USART_Init@baud_rate+2)& (0+255),b
   823  00193E  0E00               	movlw	0
   824  001940  6F6E               	movwf	(USART_Init@baud_rate+3)& (0+255),b
   825  001942  ECA6  F012         	call	_USART_Init	;wreg free
   826                           
   827                           ;ECG.c: 50: MSdelay(50);
   828  001946  0E00               	movlw	0
   829  001948  6E14               	movwf	MSdelay@val+1,c
   830  00194A  0E32               	movlw	50
   831  00194C  6E13               	movwf	MSdelay@val,c
   832  00194E  EC81  F014         	call	_MSdelay	;wreg free
   833                           
   834                           ;ECG.c: 51: unsigned int an1;
   835                           ;ECG.c: 53: int pulsoCorazonX=0;
   836  001952  0E00               	movlw	0
   837  001954  0100               	movlb	0	; () banked
   838  001956  6F93               	movwf	(main@pulsoCorazonX+1)& (0+255),b
   839  001958  0E00               	movlw	0
   840  00195A  6F92               	movwf	main@pulsoCorazonX& (0+255),b
   841                           
   842                           ; BSR set to: 0
   843                           ;ECG.c: 56: ADCON0bits.CHS = 0b0001;
   844  00195C  50C2               	movf	4034,w,c	;volatile
   845  00195E  0BC3               	andlw	-61
   846  001960  0904               	iorlw	4
   847  001962  6EC2               	movwf	4034,c	;volatile
   848                           
   849                           ; BSR set to: 0
   850                           ;ECG.c: 57: float voltaje_an1 = 0;
   851  001964  0E00               	movlw	0
   852  001966  6F9A               	movwf	main@voltaje_an1& (0+255),b
   853  001968  0E00               	movlw	0
   854  00196A  6F9B               	movwf	(main@voltaje_an1+1)& (0+255),b
   855  00196C  0E00               	movlw	0
   856  00196E  6F9C               	movwf	(main@voltaje_an1+2)& (0+255),b
   857                           
   858                           ; BSR set to: 0
   859                           ;ECG.c: 58: char str[3];
   860                           ;ECG.c: 59: int pulsos_test=0;
   861  001970  0E00               	movlw	0
   862  001972  6F95               	movwf	(main@pulsos_test+1)& (0+255),b
   863  001974  0E00               	movlw	0
   864  001976  6F94               	movwf	main@pulsos_test& (0+255),b
   865                           
   866                           ; BSR set to: 0
   867                           ;ECG.c: 60: int pulsoCorazonY=0;
   868  001978  0E00               	movlw	0
   869  00197A  6F97               	movwf	(main@pulsoCorazonY+1)& (0+255),b
   870  00197C  0E00               	movlw	0
   871  00197E  6F96               	movwf	main@pulsoCorazonY& (0+255),b
   872  001980                     
   873                           ;ECG.c: 69: wait_in_ms(2);
   874                           
   875                           ; BSR set to: 0
   876  001980  0E00               	movlw	0
   877  001982  6E4A               	movwf	wait_in_ms@time_in_ms+1,c
   878  001984  0E02               	movlw	2
   879  001986  6E49               	movwf	wait_in_ms@time_in_ms,c
   880  001988  ECCF  F010         	call	_wait_in_ms	;wreg free
   881                           
   882                           ;ECG.c: 70: an1 = ADC_Read(1);
   883  00198C  0E00               	movlw	0
   884  00198E  0100               	movlb	0	; () banked
   885  001990  6F72               	movwf	(ADC_Read@channel+1)& (0+255),b
   886  001992  0E01               	movlw	1
   887  001994  6F71               	movwf	ADC_Read@channel& (0+255),b
   888  001996  EC73  F00E         	call	_ADC_Read	;wreg free
   889  00199A  C071  F098         	movff	?_ADC_Read,main@an1
   890  00199E  C072  F099         	movff	?_ADC_Read+1,main@an1+1
   891                           
   892                           ;ECG.c: 71: voltaje_an1 = (an1 * 4.47)/1023;
   893  0019A2  0E0A               	movlw	10
   894  0019A4  6E2A               	movwf	___ftmul@f2,c
   895  0019A6  0E8F               	movlw	143
   896  0019A8  6E2B               	movwf	___ftmul@f2+1,c
   897  0019AA  0E40               	movlw	64
   898  0019AC  6E2C               	movwf	___ftmul@f2+2,c
   899  0019AE  C098  F01B         	movff	main@an1,___lwtoft@c
   900  0019B2  C099  F01C         	movff	main@an1+1,___lwtoft@c+1
   901  0019B6  ECC1  F014         	call	___lwtoft	;wreg free
   902  0019BA  C01B  F027         	movff	?___lwtoft,___ftmul@f1
   903  0019BE  C01C  F028         	movff	?___lwtoft+1,___ftmul@f1+1
   904  0019C2  C01D  F029         	movff	?___lwtoft+2,___ftmul@f1+2
   905  0019C6  EC77  F00F         	call	___ftmul	;wreg free
   906  0019CA  C027  F036         	movff	?___ftmul,___ftdiv@f1
   907  0019CE  C028  F037         	movff	?___ftmul+1,___ftdiv@f1+1
   908  0019D2  C029  F038         	movff	?___ftmul+2,___ftdiv@f1+2
   909  0019D6  0EC0               	movlw	192
   910  0019D8  6E39               	movwf	___ftdiv@f2,c
   911  0019DA  0E7F               	movlw	127
   912  0019DC  6E3A               	movwf	___ftdiv@f2+1,c
   913  0019DE  0E44               	movlw	68
   914  0019E0  6E3B               	movwf	___ftdiv@f2+2,c
   915  0019E2  ECF1  F00F         	call	___ftdiv	;wreg free
   916  0019E6  C036  F09A         	movff	?___ftdiv,main@voltaje_an1
   917  0019EA  C037  F09B         	movff	?___ftdiv+1,main@voltaje_an1+1
   918  0019EE  C038  F09C         	movff	?___ftdiv+2,main@voltaje_an1+2
   919                           
   920                           ;ECG.c: 73: sprintf(str,"%1.2f\n",voltaje_an1);
   921  0019F2  0E9D               	movlw	low main@str
   922  0019F4  0100               	movlb	0	; () banked
   923  0019F6  6F6C               	movwf	sprintf@sp& (0+255),b
   924  0019F8  0E00               	movlw	high main@str
   925  0019FA  6F6D               	movwf	(sprintf@sp+1)& (0+255),b
   926  0019FC  0E77               	movlw	low STR_1
   927  0019FE  6F6E               	movwf	sprintf@f& (0+255),b
   928  001A00  0E08               	movlw	high STR_1
   929  001A02  6F6F               	movwf	(sprintf@f+1)& (0+255),b
   930  001A04  C09A  F070         	movff	main@voltaje_an1,?_sprintf+4
   931  001A08  C09B  F071         	movff	main@voltaje_an1+1,?_sprintf+5
   932  001A0C  C09C  F072         	movff	main@voltaje_an1+2,?_sprintf+6
   933  001A10  EC40  F004         	call	_sprintf	;wreg free
   934                           
   935                           ;ECG.c: 74: USART_SendString(str);
   936  001A14  0E9D               	movlw	low main@str
   937  001A16  6E14               	movwf	USART_SendString@out,c
   938  001A18  0E00               	movlw	high main@str
   939  001A1A  6E15               	movwf	USART_SendString@out+1,c
   940  001A1C  ECD3  F014         	call	_USART_SendString	;wreg free
   941                           
   942                           ;ECG.c: 76: pacienteMuerto(an1);
   943  001A20  C098  F01B         	movff	main@an1,___lwtoft@c
   944  001A24  C099  F01C         	movff	main@an1+1,___lwtoft@c+1
   945  001A28  ECC1  F014         	call	___lwtoft	;wreg free
   946  001A2C  C01B  F01E         	movff	?___lwtoft,pacienteMuerto@testv
   947  001A30  C01C  F01F         	movff	?___lwtoft+1,pacienteMuerto@testv+1
   948  001A34  C01D  F020         	movff	?___lwtoft+2,pacienteMuerto@testv+2
   949  001A38  EC20  F014         	call	_pacienteMuerto	;wreg free
   950                           
   951                           ;ECG.c: 77: if(voltaje_an1>3.8){
   952  001A3C  0E33               	movlw	51
   953  001A3E  6E13               	movwf	___ftge@ff1,c
   954  001A40  0E73               	movlw	115
   955  001A42  6E14               	movwf	___ftge@ff1+1,c
   956  001A44  0E40               	movlw	64
   957  001A46  6E15               	movwf	___ftge@ff1+2,c
   958  001A48  C09A  F016         	movff	main@voltaje_an1,___ftge@ff2
   959  001A4C  C09B  F017         	movff	main@voltaje_an1+1,___ftge@ff2+1
   960  001A50  C09C  F018         	movff	main@voltaje_an1+2,___ftge@ff2+2
   961  001A54  ECDB  F011         	call	___ftge	;wreg free
   962  001A58  B0D8               	btfsc	status,0,c
   963  001A5A  D009               	goto	l36
   964                           
   965                           ;ECG.c: 79: TRISBbits.RB0=0;
   966  001A5C  9093               	bcf	3987,0,c	;volatile
   967                           
   968                           ;ECG.c: 80: PORTBbits.RB0=1;
   969  001A5E  8081               	bsf	3969,0,c	;volatile
   970                           
   971                           ;ECG.c: 81: wait_in_ms(50);
   972  001A60  0E00               	movlw	0
   973  001A62  6E4A               	movwf	wait_in_ms@time_in_ms+1,c
   974  001A64  0E32               	movlw	50
   975  001A66  6E49               	movwf	wait_in_ms@time_in_ms,c
   976  001A68  ECCF  F010         	call	_wait_in_ms	;wreg free
   977                           
   978                           ;ECG.c: 82: PORTBbits.RB0=0;
   979  001A6C  9081               	bcf	3969,0,c	;volatile
   980  001A6E                     l36:
   981                           
   982                           ;ECG.c: 84: }
   983                           ;ECG.c: 86: wait_in_ms(2);
   984  001A6E  0E00               	movlw	0
   985  001A70  6E4A               	movwf	wait_in_ms@time_in_ms+1,c
   986  001A72  0E02               	movlw	2
   987  001A74  6E49               	movwf	wait_in_ms@time_in_ms,c
   988  001A76  ECCF  F010         	call	_wait_in_ms	;wreg free
   989                           
   990                           ;ECG.c: 94: MSdelay(150);
   991  001A7A  0E00               	movlw	0
   992  001A7C  6E14               	movwf	MSdelay@val+1,c
   993  001A7E  0E96               	movlw	150
   994  001A80  6E13               	movwf	MSdelay@val,c
   995  001A82  EC81  F014         	call	_MSdelay	;wreg free
   996                           
   997                           ;ECG.c: 95: lcd_origen();
   998  001A86  EC03  F015         	call	_lcd_origen	;wreg free
   999  001A8A  D77A               	goto	l35
  1000  001A8C                     __end_of_main:
  1001                           	opt stack 0
  1002                           tblptru	equ	0xFF8
  1003                           status	equ	0xFD8
  1004                           
  1005 ;; *************** function _sprintf *****************
  1006 ;; Defined at:
  1007 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  1008 ;; Parameters:    Size  Location     Type
  1009 ;;  sp              2   12[BANK0 ] PTR unsigned char 
  1010 ;;		 -> main@str(3), 
  1011 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  1012 ;;		 -> STR_1(7), 
  1013 ;; Auto vars:     Size  Location     Type
  1014 ;;  tmpval          4   38[BANK0 ] struct .
  1015 ;;  val             4   30[BANK0 ] unsigned long 
  1016 ;;  fval            3   44[BANK0 ] unsigned long 
  1017 ;;  cp              3    0        PTR const unsigned char 
  1018 ;;  prec            2   47[BANK0 ] int 
  1019 ;;  exp             2   42[BANK0 ] int 
  1020 ;;  width           2   36[BANK0 ] int 
  1021 ;;  flag            2   34[BANK0 ] unsigned short 
  1022 ;;  ap              2   28[BANK0 ] PTR void [1]
  1023 ;;		 -> ?_sprintf(2), 
  1024 ;;  len             2    0        unsigned int 
  1025 ;;  c               1   49[BANK0 ] char 
  1026 ;;  d               1    0        unsigned char 
  1027 ;; Return value:  Size  Location     Type
  1028 ;;                  2   12[BANK0 ] int 
  1029 ;; Registers used:
  1030 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1031 ;; Tracked objects:
  1032 ;;		On entry : 0/0
  1033 ;;		On exit  : 0/0
  1034 ;;		Unchanged: 0/0
  1035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1036 ;;      Params:         0       7       0       0       0       0       0       0       0
  1037 ;;      Locals:         0      25       0       0       0       0       0       0       0
  1038 ;;      Temps:          0       6       0       0       0       0       0       0       0
  1039 ;;      Totals:         0      38       0       0       0       0       0       0       0
  1040 ;;Total ram usage:       38 bytes
  1041 ;; Hardware stack levels used:    1
  1042 ;; Hardware stack levels required when called:    4
  1043 ;; This function calls:
  1044 ;;		___awdiv
  1045 ;;		___ftadd
  1046 ;;		___ftge
  1047 ;;		___ftmul
  1048 ;;		___ftneg
  1049 ;;		___ftsub
  1050 ;;		___fttol
  1051 ;;		___lldiv
  1052 ;;		___llmod
  1053 ;;		___lltoft
  1054 ;;		___wmul
  1055 ;;		__div_to_l_
  1056 ;;		__tdiv_to_l_
  1057 ;;		_fround
  1058 ;;		_isdigit
  1059 ;;		_scale
  1060 ;; This function is called by:
  1061 ;;		_main
  1062 ;; This function uses a non-reentrant model
  1063 ;;
  1064                           
  1065                           	psect	text1
  1066  000880                     __ptext1:
  1067                           	opt stack 0
  1068  000880                     _sprintf:
  1069                           	opt stack 26
  1070                           
  1071                           ;doprnt.c: 494: va_list ap;
  1072                           ;doprnt.c: 499: signed char c;
  1073                           ;doprnt.c: 501: int width;
  1074                           ;doprnt.c: 504: int prec;
  1075                           ;doprnt.c: 508: unsigned short flag;
  1076                           ;doprnt.c: 515: char d;
  1077                           ;doprnt.c: 516: double fval;
  1078                           ;doprnt.c: 517: int exp;
  1079                           ;doprnt.c: 523: union {
  1080                           ;doprnt.c: 524: unsigned long vd;
  1081                           ;doprnt.c: 525: double integ;
  1082                           ;doprnt.c: 526: } tmpval;
  1083                           ;doprnt.c: 528: unsigned long val;
  1084                           ;doprnt.c: 529: unsigned len;
  1085                           ;doprnt.c: 530: const char * cp;
  1086                           ;doprnt.c: 533: *ap = __va_start();
  1087                           
  1088                           ;incstack = 0
  1089  000880  0E70               	movlw	low (?_sprintf+4)
  1090  000882  0100               	movlb	0	; () banked
  1091  000884  6F7C               	movwf	sprintf@ap& (0+255),b
  1092  000886  0E00               	movlw	high (?_sprintf+4)
  1093  000888  6F7D               	movwf	(sprintf@ap+1)& (0+255),b
  1094                           
  1095                           ;doprnt.c: 536: while(c = *f++) {
  1096  00088A  EF7A  F008         	goto	l358
  1097  00088E                     
  1098                           ; BSR set to: 0
  1099                           ;doprnt.c: 538: if(c != '%')
  1100                           
  1101                           ; BSR set to: 0
  1102  00088E  0E25               	movlw	37
  1103  000890  1991               	xorwf	sprintf@c& (0+255),w,b
  1104  000892  B4D8               	btfsc	status,2,c
  1105  000894  D008               	goto	l287
  1106                           
  1107                           ; BSR set to: 0
  1108                           ;doprnt.c: 540: {
  1109                           ;doprnt.c: 541: ((*sp++ = (c)));
  1110  000896  C06C  FFD9         	movff	sprintf@sp,fsr2l
  1111  00089A  C06D  FFDA         	movff	sprintf@sp+1,fsr2h
  1112  00089E  C091  FFDF         	movff	sprintf@c,indf2
  1113  0008A2  EF78  F008         	goto	l3361
  1114  0008A6                     l287:
  1115                           
  1116                           ; BSR set to: 0
  1117                           ;doprnt.c: 543: }
  1118                           ;doprnt.c: 546: width = 0;
  1119                           
  1120                           ; BSR set to: 0
  1121  0008A6  0E00               	movlw	0
  1122  0008A8  6F85               	movwf	(sprintf@width+1)& (0+255),b
  1123  0008AA  0E00               	movlw	0
  1124  0008AC  6F84               	movwf	sprintf@width& (0+255),b
  1125                           
  1126                           ;doprnt.c: 548: flag = 0;
  1127  0008AE  0E00               	movlw	0
  1128  0008B0  6F83               	movwf	(sprintf@flag+1)& (0+255),b
  1129  0008B2  0E00               	movlw	0
  1130  0008B4  6F82               	movwf	sprintf@flag& (0+255),b
  1131                           
  1132                           ; BSR set to: 0
  1133                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1134  0008B6  C06E  FFF6         	movff	sprintf@f,tblptrl
  1135  0008BA  C06F  FFF7         	movff	sprintf@f+1,tblptrh
  1136  0008BE                     	if	0	;tblptru may be non-zero
  1137  0008BE                     	endif
  1138  0008BE                     	if	0	;tblptru may be non-zero
  1139  0008BE                     	endif
  1140  0008BE  0008               	tblrd		*
  1141  0008C0  50F5               	movf	tablat,w,c
  1142  0008C2  ECE5  F014         	call	_isdigit
  1143  0008C6  A0D8               	btfss	status,0,c
  1144  0008C8  D034               	goto	u3130
  1145                           
  1146                           ;doprnt.c: 598: width = 0;
  1147  0008CA  0E00               	movlw	0
  1148  0008CC  0100               	movlb	0	; () banked
  1149  0008CE  6F85               	movwf	(sprintf@width+1)& (0+255),b
  1150  0008D0  0E00               	movlw	0
  1151  0008D2  6F84               	movwf	sprintf@width& (0+255),b
  1152  0008D4                     
  1153                           ;doprnt.c: 600: width *= 10;
  1154                           
  1155                           ; BSR set to: 0
  1156  0008D4  C084  F021         	movff	sprintf@width,___wmul@multiplier
  1157  0008D8  C085  F022         	movff	sprintf@width+1,___wmul@multiplier+1
  1158  0008DC  0E00               	movlw	0
  1159  0008DE  6E24               	movwf	___wmul@multiplicand+1,c
  1160  0008E0  0E0A               	movlw	10
  1161  0008E2  6E23               	movwf	___wmul@multiplicand,c
  1162  0008E4  EC9C  F014         	call	___wmul	;wreg free
  1163  0008E8  C021  F084         	movff	?___wmul,sprintf@width
  1164  0008EC  C022  F085         	movff	?___wmul+1,sprintf@width+1
  1165                           
  1166                           ;doprnt.c: 601: width += *f++ - '0';
  1167  0008F0  0ED0               	movlw	208
  1168  0008F2  0100               	movlb	0	; () banked
  1169  0008F4  6F73               	movwf	??_sprintf& (0+255),b
  1170  0008F6  0EFF               	movlw	255
  1171  0008F8  6F74               	movwf	(??_sprintf+1)& (0+255),b
  1172  0008FA  C06E  FFF6         	movff	sprintf@f,tblptrl
  1173  0008FE  C06F  FFF7         	movff	sprintf@f+1,tblptrh
  1174  000902                     	if	0	;tblptru may be non-zero
  1175  000902                     	endif
  1176  000902                     	if	0	;tblptru may be non-zero
  1177  000902                     	endif
  1178  000902  0008               	tblrd		*
  1179  000904  50F5               	movf	tablat,w,c
  1180  000906  6F75               	movwf	(??_sprintf+2)& (0+255),b
  1181  000908  6B76               	clrf	(??_sprintf+3)& (0+255),b
  1182  00090A  5173               	movf	??_sprintf& (0+255),w,b
  1183  00090C  2775               	addwf	(??_sprintf+2)& (0+255),f,b
  1184  00090E  5174               	movf	(??_sprintf+1)& (0+255),w,b
  1185  000910  2376               	addwfc	(??_sprintf+3)& (0+255),f,b
  1186  000912  5175               	movf	(??_sprintf+2)& (0+255),w,b
  1187  000914  2784               	addwf	sprintf@width& (0+255),f,b
  1188  000916  5176               	movf	(??_sprintf+3)& (0+255),w,b
  1189  000918  2385               	addwfc	(sprintf@width+1)& (0+255),f,b
  1190                           
  1191                           ; BSR set to: 0
  1192  00091A  4B6E               	infsnz	sprintf@f& (0+255),f,b
  1193  00091C  2B6F               	incf	(sprintf@f+1)& (0+255),f,b
  1194                           
  1195                           ; BSR set to: 0
  1196                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1197  00091E  C06E  FFF6         	movff	sprintf@f,tblptrl
  1198  000922  C06F  FFF7         	movff	sprintf@f+1,tblptrh
  1199  000926                     	if	0	;tblptru may be non-zero
  1200  000926                     	endif
  1201  000926                     	if	0	;tblptru may be non-zero
  1202  000926                     	endif
  1203  000926  0008               	tblrd		*
  1204  000928  50F5               	movf	tablat,w,c
  1205  00092A  ECE5  F014         	call	_isdigit
  1206  00092E  B0D8               	btfsc	status,0,c
  1207  000930  D7D1               	goto	l289
  1208  000932                     u3130:
  1209                           
  1210                           ;doprnt.c: 608: }
  1211                           ;doprnt.c: 611: if(*f == '.') {
  1212  000932  C06E  FFF6         	movff	sprintf@f,tblptrl
  1213  000936  C06F  FFF7         	movff	sprintf@f+1,tblptrh
  1214  00093A                     	if	0	;tblptru may be non-zero
  1215  00093A                     	endif
  1216  00093A                     	if	0	;tblptru may be non-zero
  1217  00093A                     	endif
  1218  00093A  0008               	tblrd		*
  1219  00093C  50F5               	movf	tablat,w,c
  1220  00093E  0A2E               	xorlw	46
  1221  000940  A4D8               	btfss	status,2,c
  1222  000942  D030               	goto	l291
  1223                           
  1224                           ;doprnt.c: 612: flag |= 0x4000;
  1225  000944  0100               	movlb	0	; () banked
  1226  000946  8D83               	bsf	(sprintf@flag+1)& (0+255),6,b
  1227                           
  1228                           ;doprnt.c: 613: f++;
  1229  000948  4B6E               	infsnz	sprintf@f& (0+255),f,b
  1230  00094A  2B6F               	incf	(sprintf@f+1)& (0+255),f,b
  1231                           
  1232                           ; BSR set to: 0
  1233                           ;doprnt.c: 620: {
  1234                           ;doprnt.c: 621: prec = 0;
  1235  00094C  0E00               	movlw	0
  1236  00094E  6F90               	movwf	(sprintf@prec+1)& (0+255),b
  1237  000950  0E00               	movlw	0
  1238  000952  6F8F               	movwf	sprintf@prec& (0+255),b
  1239                           
  1240                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1241  000954  D01C               	goto	l292
  1242  000956                     
  1243                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1244                           
  1245                           ; BSR set to: 0
  1246  000956  C08F  F021         	movff	sprintf@prec,___wmul@multiplier
  1247  00095A  C090  F022         	movff	sprintf@prec+1,___wmul@multiplier+1
  1248  00095E  0E00               	movlw	0
  1249  000960  6E24               	movwf	___wmul@multiplicand+1,c
  1250  000962  0E0A               	movlw	10
  1251  000964  6E23               	movwf	___wmul@multiplicand,c
  1252  000966  EC9C  F014         	call	___wmul	;wreg free
  1253  00096A  C06E  FFF6         	movff	sprintf@f,tblptrl
  1254  00096E  C06F  FFF7         	movff	sprintf@f+1,tblptrh
  1255  000972                     	if	0	;tblptru may be non-zero
  1256  000972                     	endif
  1257  000972                     	if	0	;tblptru may be non-zero
  1258  000972                     	endif
  1259  000972  0008               	tblrd		*
  1260  000974  50F5               	movf	tablat,w,c
  1261  000976  2621               	addwf	?___wmul,f,c
  1262  000978  0E00               	movlw	0
  1263  00097A  2222               	addwfc	?___wmul+1,f,c
  1264  00097C  0ED0               	movlw	208
  1265  00097E  2421               	addwf	?___wmul,w,c
  1266  000980  0100               	movlb	0	; () banked
  1267  000982  6F8F               	movwf	sprintf@prec& (0+255),b
  1268  000984  0EFF               	movlw	255
  1269  000986  2022               	addwfc	?___wmul+1,w,c
  1270  000988  6F90               	movwf	(sprintf@prec+1)& (0+255),b
  1271                           
  1272                           ; BSR set to: 0
  1273  00098A  4B6E               	infsnz	sprintf@f& (0+255),f,b
  1274  00098C  2B6F               	incf	(sprintf@f+1)& (0+255),f,b
  1275  00098E                     l292:
  1276                           
  1277                           ; BSR set to: 0
  1278                           
  1279                           ; BSR set to: 0
  1280  00098E  C06E  FFF6         	movff	sprintf@f,tblptrl
  1281  000992  C06F  FFF7         	movff	sprintf@f+1,tblptrh
  1282  000996                     	if	0	;tblptru may be non-zero
  1283  000996                     	endif
  1284  000996                     	if	0	;tblptru may be non-zero
  1285  000996                     	endif
  1286  000996  0008               	tblrd		*
  1287  000998  50F5               	movf	tablat,w,c
  1288  00099A  ECE5  F014         	call	_isdigit
  1289  00099E  A0D8               	btfss	status,0,c
  1290  0009A0  D00A               	goto	l296
  1291  0009A2  D7D9               	goto	l293
  1292  0009A4                     l291:
  1293                           
  1294                           ;doprnt.c: 626: prec = 0;
  1295  0009A4  0E00               	movlw	0
  1296  0009A6  0100               	movlb	0	; () banked
  1297  0009A8  6F90               	movwf	(sprintf@prec+1)& (0+255),b
  1298  0009AA  0E00               	movlw	0
  1299  0009AC  6F8F               	movwf	sprintf@prec& (0+255),b
  1300                           
  1301                           ; BSR set to: 0
  1302                           ;doprnt.c: 628: flag |= 0x1000;
  1303  0009AE  8983               	bsf	(sprintf@flag+1)& (0+255),4,b
  1304                           
  1305                           ; BSR set to: 0
  1306                           ;doprnt.c: 630: }
  1307                           ;doprnt.c: 635: switch(c = *f++) {
  1308  0009B0  D002               	goto	l296
  1309  0009B2                     
  1310                           ; BSR set to: 0
  1311                           ;doprnt.c: 663: flag |= 0x400;
  1312                           
  1313                           ; BSR set to: 0
  1314  0009B2  8583               	bsf	(sprintf@flag+1)& (0+255),2,b
  1315                           
  1316                           ;doprnt.c: 664: break;
  1317  0009B4  D012               	goto	l300
  1318  0009B6                     l296:
  1319                           
  1320                           ; BSR set to: 0
  1321  0009B6  C06E  FFF6         	movff	sprintf@f,tblptrl
  1322  0009BA  C06F  FFF7         	movff	sprintf@f+1,tblptrh
  1323  0009BE  0100               	movlb	0	; () banked
  1324  0009C0  4B6E               	infsnz	sprintf@f& (0+255),f,b
  1325  0009C2  2B6F               	incf	(sprintf@f+1)& (0+255),f,b
  1326  0009C4                     	if	0	;tblptru may be non-zero
  1327  0009C4                     	endif
  1328  0009C4                     	if	0	;tblptru may be non-zero
  1329  0009C4                     	endif
  1330  0009C4  0008               	tblrd		*
  1331  0009C6  CFF5 F091          	movff	tablat,sprintf@c
  1332  0009CA  5191               	movf	sprintf@c& (0+255),w,b
  1333                           
  1334                           ; Switch size 1, requested type "space"
  1335                           ; Number of cases is 2, Range of values is 0 to 102
  1336                           ; switch strategies available:
  1337                           ; Name         Instructions Cycles
  1338                           ; simple_byte            7     4 (average)
  1339                           ;	Chosen strategy is simple_byte
  1340  0009CC  0A00               	xorlw	0	; case 0
  1341  0009CE  B4D8               	btfsc	status,2,c
  1342  0009D0  D39E               	goto	u3550
  1343  0009D2  0A66               	xorlw	102	; case 102
  1344  0009D4  B4D8               	btfsc	status,2,c
  1345  0009D6  D7ED               	goto	l299
  1346  0009D8  D38D               	goto	l358
  1347  0009DA                     l300:
  1348                           
  1349                           ; BSR set to: 0
  1350                           ;doprnt.c: 825: if(flag & (0x700)) {
  1351                           
  1352                           ; BSR set to: 0
  1353  0009DA  0E07               	movlw	7
  1354  0009DC  1583               	andwf	(sprintf@flag+1)& (0+255),w,b
  1355  0009DE  B4D8               	btfsc	status,2,c
  1356  0009E0  D2FE               	goto	l302
  1357                           
  1358                           ; BSR set to: 0
  1359                           ;doprnt.c: 827: if(flag & 0x1000)
  1360  0009E2  A983               	btfss	(sprintf@flag+1)& (0+255),4,b
  1361  0009E4  D004               	goto	l303
  1362                           
  1363                           ; BSR set to: 0
  1364                           ;doprnt.c: 829: prec = 6;
  1365  0009E6  0E00               	movlw	0
  1366  0009E8  6F90               	movwf	(sprintf@prec+1)& (0+255),b
  1367  0009EA  0E06               	movlw	6
  1368  0009EC  6F8F               	movwf	sprintf@prec& (0+255),b
  1369  0009EE                     l303:
  1370                           
  1371                           ; BSR set to: 0
  1372                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1373                           
  1374                           ; BSR set to: 0
  1375  0009EE  C07C  FFD9         	movff	sprintf@ap,fsr2l
  1376  0009F2  C07D  FFDA         	movff	sprintf@ap+1,fsr2h
  1377  0009F6  CFDE F08C          	movff	postinc2,sprintf@fval
  1378  0009FA  CFDE F08D          	movff	postinc2,sprintf@fval+1
  1379  0009FE  CFDD F08E          	movff	postdec2,sprintf@fval+2
  1380                           
  1381                           ; BSR set to: 0
  1382  000A02  0E03               	movlw	3
  1383  000A04  277C               	addwf	sprintf@ap& (0+255),f,b
  1384  000A06  0E00               	movlw	0
  1385  000A08  237D               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1386                           
  1387                           ; BSR set to: 0
  1388                           ;doprnt.c: 831: if(fval < 0.0) {
  1389  000A0A  AF8E               	btfss	(sprintf@fval+2)& (0+255),7,b
  1390  000A0C  D011               	goto	l304
  1391                           
  1392                           ; BSR set to: 0
  1393                           ;doprnt.c: 832: fval = -fval;
  1394  000A0E  C08C  F013         	movff	sprintf@fval,___ftneg@f1
  1395  000A12  C08D  F014         	movff	sprintf@fval+1,___ftneg@f1+1
  1396  000A16  C08E  F015         	movff	sprintf@fval+2,___ftneg@f1+2
  1397  000A1A  ECAF  F014         	call	___ftneg	;wreg free
  1398  000A1E  C013  F08C         	movff	?___ftneg,sprintf@fval
  1399  000A22  C014  F08D         	movff	?___ftneg+1,sprintf@fval+1
  1400  000A26  C015  F08E         	movff	?___ftneg+2,sprintf@fval+2
  1401                           
  1402                           ;doprnt.c: 833: flag |= 0x03;
  1403  000A2A  0E03               	movlw	3
  1404  000A2C  0100               	movlb	0	; () banked
  1405  000A2E  1382               	iorwf	sprintf@flag& (0+255),f,b
  1406  000A30                     l304:
  1407                           
  1408                           ; BSR set to: 0
  1409                           ;doprnt.c: 834: }
  1410                           ;doprnt.c: 835: exp = 0;
  1411                           
  1412                           ; BSR set to: 0
  1413  000A30  0E00               	movlw	0
  1414  000A32  6F8B               	movwf	(sprintf@exp+1)& (0+255),b
  1415  000A34  0E00               	movlw	0
  1416  000A36  6F8A               	movwf	sprintf@exp& (0+255),b
  1417                           
  1418                           ; BSR set to: 0
  1419                           ;doprnt.c: 836: if( fval!=0) {
  1420  000A38  518C               	movf	sprintf@fval& (0+255),w,b
  1421  000A3A  118D               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1422  000A3C  118E               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1423  000A3E  B4D8               	btfsc	status,2,c
  1424  000A40  D086               	goto	l309
  1425                           
  1426                           ; BSR set to: 0
  1427                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1428  000A42  0E82               	movlw	130
  1429  000A44  6F73               	movwf	??_sprintf& (0+255),b
  1430  000A46  0EFF               	movlw	255
  1431  000A48  6F74               	movwf	(??_sprintf+1)& (0+255),b
  1432  000A4A  C08C  F075         	movff	sprintf@fval,??_sprintf+2
  1433  000A4E  C08D  F076         	movff	sprintf@fval+1,??_sprintf+3
  1434  000A52  C08E  F077         	movff	sprintf@fval+2,??_sprintf+4
  1435  000A56  C08F  F078         	movff	sprintf@fval+3,??_sprintf+5
  1436  000A5A  0E10               	movlw	16
  1437  000A5C  D005               	goto	u3200
  1438  000A5E                     u3205:
  1439  000A5E  90D8               	bcf	status,0,c
  1440  000A60  3378               	rrcf	(??_sprintf+5)& (0+255),f,b
  1441  000A62  3377               	rrcf	(??_sprintf+4)& (0+255),f,b
  1442  000A64  3376               	rrcf	(??_sprintf+3)& (0+255),f,b
  1443  000A66  3375               	rrcf	(??_sprintf+2)& (0+255),f,b
  1444  000A68                     u3200:
  1445  000A68  2EE8               	decfsz	wreg,f,c
  1446  000A6A  D7F9               	goto	u3205
  1447  000A6C  5175               	movf	(??_sprintf+2)& (0+255),w,b
  1448  000A6E  2573               	addwf	??_sprintf& (0+255),w,b
  1449  000A70  6F8A               	movwf	sprintf@exp& (0+255),b
  1450  000A72  0E00               	movlw	0
  1451  000A74  2174               	addwfc	(??_sprintf+1)& (0+255),w,b
  1452  000A76  6F8B               	movwf	(sprintf@exp+1)& (0+255),b
  1453                           
  1454                           ; BSR set to: 0
  1455                           ;doprnt.c: 838: exp--;
  1456  000A78  078A               	decf	sprintf@exp& (0+255),f,b
  1457  000A7A  A0D8               	btfss	status,0,c
  1458  000A7C  078B               	decf	(sprintf@exp+1)& (0+255),f,b
  1459                           
  1460                           ; BSR set to: 0
  1461                           ;doprnt.c: 839: exp *= 3;
  1462  000A7E  C08A  F021         	movff	sprintf@exp,___wmul@multiplier
  1463  000A82  C08B  F022         	movff	sprintf@exp+1,___wmul@multiplier+1
  1464  000A86  0E00               	movlw	0
  1465  000A88  6E24               	movwf	___wmul@multiplicand+1,c
  1466  000A8A  0E03               	movlw	3
  1467  000A8C  6E23               	movwf	___wmul@multiplicand,c
  1468  000A8E  EC9C  F014         	call	___wmul	;wreg free
  1469  000A92  C021  F08A         	movff	?___wmul,sprintf@exp
  1470  000A96  C022  F08B         	movff	?___wmul+1,sprintf@exp+1
  1471                           
  1472                           ;doprnt.c: 840: exp /= 10;
  1473  000A9A  C08A  F019         	movff	sprintf@exp,___awdiv@dividend
  1474  000A9E  C08B  F01A         	movff	sprintf@exp+1,___awdiv@dividend+1
  1475  000AA2  0E00               	movlw	0
  1476  000AA4  6E1C               	movwf	___awdiv@divisor+1,c
  1477  000AA6  0E0A               	movlw	10
  1478  000AA8  6E1B               	movwf	___awdiv@divisor,c
  1479  000AAA  EC23  F012         	call	___awdiv	;wreg free
  1480  000AAE  C019  F08A         	movff	?___awdiv,sprintf@exp
  1481  000AB2  C01A  F08B         	movff	?___awdiv+1,sprintf@exp+1
  1482                           
  1483                           ;doprnt.c: 841: if(exp < 0)
  1484  000AB6  0100               	movlb	0	; () banked
  1485  000AB8  AF8B               	btfss	(sprintf@exp+1)& (0+255),7,b
  1486  000ABA  D003               	goto	l306
  1487                           
  1488                           ; BSR set to: 0
  1489                           ;doprnt.c: 842: exp--;
  1490  000ABC  078A               	decf	sprintf@exp& (0+255),f,b
  1491  000ABE  A0D8               	btfss	status,0,c
  1492  000AC0  078B               	decf	(sprintf@exp+1)& (0+255),f,b
  1493  000AC2                     l306:
  1494                           
  1495                           ; BSR set to: 0
  1496                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1497                           
  1498                           ; BSR set to: 0
  1499  000AC2  518A               	movf	sprintf@exp& (0+255),w,b
  1500  000AC4  0800               	sublw	0
  1501  000AC6  EC8E  F008         	call	_scale
  1502  000ACA  C036  F086         	movff	?_scale,sprintf@tmpval
  1503  000ACE  C037  F087         	movff	?_scale+1,sprintf@tmpval+1
  1504  000AD2  C038  F088         	movff	?_scale+2,sprintf@tmpval+2
  1505                           
  1506                           ;doprnt.c: 847: tmpval.integ *= fval;
  1507  000AD6  C086  F027         	movff	sprintf@tmpval,___ftmul@f1
  1508  000ADA  C087  F028         	movff	sprintf@tmpval+1,___ftmul@f1+1
  1509  000ADE  C088  F029         	movff	sprintf@tmpval+2,___ftmul@f1+2
  1510  000AE2  C08C  F02A         	movff	sprintf@fval,___ftmul@f2
  1511  000AE6  C08D  F02B         	movff	sprintf@fval+1,___ftmul@f2+1
  1512  000AEA  C08E  F02C         	movff	sprintf@fval+2,___ftmul@f2+2
  1513  000AEE  EC77  F00F         	call	___ftmul	;wreg free
  1514  000AF2  C027  F086         	movff	?___ftmul,sprintf@tmpval
  1515  000AF6  C028  F087         	movff	?___ftmul+1,sprintf@tmpval+1
  1516  000AFA  C029  F088         	movff	?___ftmul+2,sprintf@tmpval+2
  1517                           
  1518                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1519  000AFE  C086  F013         	movff	sprintf@tmpval,___ftge@ff1
  1520  000B02  C087  F014         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1521  000B06  C088  F015         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1522  000B0A  0E00               	movlw	0
  1523  000B0C  6E16               	movwf	___ftge@ff2,c
  1524  000B0E  0E80               	movlw	128
  1525  000B10  6E17               	movwf	___ftge@ff2+1,c
  1526  000B12  0E3F               	movlw	63
  1527  000B14  6E18               	movwf	___ftge@ff2+2,c
  1528  000B16  ECDB  F011         	call	___ftge	;wreg free
  1529  000B1A  B0D8               	btfsc	status,0,c
  1530  000B1C  D005               	goto	l307
  1531                           
  1532                           ;doprnt.c: 849: exp--;
  1533  000B1E  0100               	movlb	0	; () banked
  1534  000B20  078A               	decf	sprintf@exp& (0+255),f,b
  1535  000B22  A0D8               	btfss	status,0,c
  1536  000B24  078B               	decf	(sprintf@exp+1)& (0+255),f,b
  1537  000B26  D013               	goto	l309
  1538  000B28                     l307:
  1539                           
  1540                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1541                           
  1542                           ; BSR set to: 0
  1543  000B28  C086  F013         	movff	sprintf@tmpval,___ftge@ff1
  1544  000B2C  C087  F014         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1545  000B30  C088  F015         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1546  000B34  0E00               	movlw	0
  1547  000B36  6E16               	movwf	___ftge@ff2,c
  1548  000B38  0E20               	movlw	32
  1549  000B3A  6E17               	movwf	___ftge@ff2+1,c
  1550  000B3C  0E41               	movlw	65
  1551  000B3E  6E18               	movwf	___ftge@ff2+2,c
  1552  000B40  ECDB  F011         	call	___ftge	;wreg free
  1553  000B44  A0D8               	btfss	status,0,c
  1554  000B46  D003               	goto	l309
  1555                           
  1556                           ;doprnt.c: 851: exp++;
  1557  000B48  0100               	movlb	0	; () banked
  1558  000B4A  4B8A               	infsnz	sprintf@exp& (0+255),f,b
  1559  000B4C  2B8B               	incf	(sprintf@exp+1)& (0+255),f,b
  1560  000B4E                     l309:
  1561                           
  1562                           ;doprnt.c: 852: }
  1563                           ;doprnt.c: 1112: if(prec <= 12)
  1564                           
  1565                           ; BSR set to: 0
  1566                           
  1567                           ; BSR set to: 0
  1568                           
  1569                           ; BSR set to: 0
  1570  000B4E  0100               	movlb	0	; () banked
  1571  000B50  BF90               	btfsc	(sprintf@prec+1)& (0+255),7,b
  1572  000B52  D006               	goto	u3240
  1573  000B54  5190               	movf	(sprintf@prec+1)& (0+255),w,b
  1574  000B56  E11B               	bnz	l3199
  1575  000B58  0E0D               	movlw	13
  1576  000B5A  5D8F               	subwf	sprintf@prec& (0+255),w,b
  1577  000B5C  B0D8               	btfsc	status,0,c
  1578  000B5E  D017               	goto	l310
  1579  000B60                     u3240:
  1580                           
  1581                           ; BSR set to: 0
  1582                           ;doprnt.c: 1113: fval += fround(prec);
  1583  000B60  C08C  F045         	movff	sprintf@fval,___ftadd@f1
  1584  000B64  C08D  F046         	movff	sprintf@fval+1,___ftadd@f1+1
  1585  000B68  C08E  F047         	movff	sprintf@fval+2,___ftadd@f1+2
  1586  000B6C  518F               	movf	sprintf@prec& (0+255),w,b
  1587  000B6E  EC92  F00A         	call	_fround
  1588  000B72  C036  F048         	movff	?_fround,___ftadd@f2
  1589  000B76  C037  F049         	movff	?_fround+1,___ftadd@f2+1
  1590  000B7A  C038  F04A         	movff	?_fround+2,___ftadd@f2+2
  1591  000B7E  ECBB  F00B         	call	___ftadd	;wreg free
  1592  000B82  C045  F08C         	movff	?___ftadd,sprintf@fval
  1593  000B86  C046  F08D         	movff	?___ftadd+1,sprintf@fval+1
  1594  000B8A  C047  F08E         	movff	?___ftadd+2,sprintf@fval+2
  1595  000B8E                     l310:
  1596  000B8E                     l3199:
  1597                           
  1598                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1599  000B8E  0100               	movlb	0	; () banked
  1600  000B90  BF8B               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1601  000B92  D006               	goto	u3250
  1602  000B94  518B               	movf	(sprintf@exp+1)& (0+255),w,b
  1603  000B96  E120               	bnz	l3207
  1604  000B98  0E0A               	movlw	10
  1605  000B9A  5D8A               	subwf	sprintf@exp& (0+255),w,b
  1606  000B9C  B0D8               	btfsc	status,0,c
  1607  000B9E  D01C               	goto	u3280
  1608  000BA0                     u3250:
  1609                           
  1610                           ; BSR set to: 0
  1611  000BA0  518C               	movf	sprintf@fval& (0+255),w,b
  1612  000BA2  118D               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1613  000BA4  118E               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1614  000BA6  B4D8               	btfsc	status,2,c
  1615  000BA8  D056               	goto	l311
  1616                           
  1617                           ; BSR set to: 0
  1618  000BAA  C08C  F045         	movff	sprintf@fval,___fttol@f1
  1619  000BAE  C08D  F046         	movff	sprintf@fval+1,___fttol@f1+1
  1620  000BB2  C08E  F047         	movff	sprintf@fval+2,___fttol@f1+2
  1621  000BB6  ECFB  F00E         	call	___fttol	;wreg free
  1622  000BBA  5045               	movf	?___fttol,w,c
  1623  000BBC  1046               	iorwf	?___fttol+1,w,c
  1624  000BBE  1047               	iorwf	?___fttol+2,w,c
  1625  000BC0  1048               	iorwf	?___fttol+3,w,c
  1626  000BC2  A4D8               	btfss	status,2,c
  1627  000BC4  D048               	goto	l311
  1628  000BC6  0100               	movlb	0	; () banked
  1629  000BC8  BF8B               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1630  000BCA  D045               	goto	l311
  1631  000BCC  518B               	movf	(sprintf@exp+1)& (0+255),w,b
  1632  000BCE  E104               	bnz	l3207
  1633  000BD0  0E02               	movlw	2
  1634  000BD2  5D8A               	subwf	sprintf@exp& (0+255),w,b
  1635  000BD4  A0D8               	btfss	status,0,c
  1636  000BD6  D03F               	goto	l311
  1637  000BD8                     u3280:
  1638  000BD8                     l3207:
  1639                           
  1640                           ; BSR set to: 0
  1641                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  1642  000BD8  C086  F013         	movff	sprintf@tmpval,___ftge@ff1
  1643  000BDC  C087  F014         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1644  000BE0  C088  F015         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1645  000BE4  0E70               	movlw	112
  1646  000BE6  6E16               	movwf	___ftge@ff2,c
  1647  000BE8  0E89               	movlw	137
  1648  000BEA  6E17               	movwf	___ftge@ff2+1,c
  1649  000BEC  0E40               	movlw	64
  1650  000BEE  6E18               	movwf	___ftge@ff2+2,c
  1651  000BF0  ECDB  F011         	call	___ftge	;wreg free
  1652  000BF4  B0D8               	btfsc	status,0,c
  1653  000BF6  D003               	goto	l314
  1654                           
  1655                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1656  000BF8  0100               	movlb	0	; () banked
  1657  000BFA  0EF7               	movlw	247
  1658  000BFC  D002               	goto	L1
  1659  000BFE                     l314:
  1660                           
  1661                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1662                           
  1663                           ; BSR set to: 0
  1664  000BFE  0100               	movlb	0	; () banked
  1665  000C00  0EF8               	movlw	248
  1666  000C02                     L1:
  1667  000C02  278A               	addwf	sprintf@exp& (0+255),f,b
  1668  000C04  0EFF               	movlw	255
  1669  000C06  238B               	addwfc	(sprintf@exp+1)& (0+255),f,b
  1670                           
  1671                           ; BSR set to: 0
  1672                           ;doprnt.c: 1124: }
  1673                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  1674                           
  1675                           ; BSR set to: 0
  1676  000C08  518A               	movf	sprintf@exp& (0+255),w,b
  1677  000C0A  EC8E  F008         	call	_scale
  1678  000C0E  C036  F086         	movff	?_scale,sprintf@tmpval
  1679  000C12  C037  F087         	movff	?_scale+1,sprintf@tmpval+1
  1680  000C16  C038  F088         	movff	?_scale+2,sprintf@tmpval+2
  1681                           
  1682                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  1683  000C1A  C08C  F013         	movff	sprintf@fval,__tdiv_to_l_@f1
  1684  000C1E  C08D  F014         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  1685  000C22  C08E  F015         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  1686  000C26  C086  F016         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  1687  000C2A  C087  F017         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  1688  000C2E  C088  F018         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  1689  000C32  EC46  F00D         	call	__tdiv_to_l_	;wreg free
  1690  000C36  C013  F07E         	movff	?__tdiv_to_l_,sprintf@val
  1691  000C3A  C014  F07F         	movff	?__tdiv_to_l_+1,sprintf@val+1
  1692  000C3E  C015  F080         	movff	?__tdiv_to_l_+2,sprintf@val+2
  1693  000C42  C016  F081         	movff	?__tdiv_to_l_+3,sprintf@val+3
  1694                           
  1695                           ;doprnt.c: 1129: fval = 0.0;
  1696  000C46  0E00               	movlw	0
  1697  000C48  0100               	movlb	0	; () banked
  1698  000C4A  6F8C               	movwf	sprintf@fval& (0+255),b
  1699  000C4C  0E00               	movlw	0
  1700  000C4E  6F8D               	movwf	(sprintf@fval+1)& (0+255),b
  1701  000C50  0E00               	movlw	0
  1702  000C52  6F8E               	movwf	(sprintf@fval+2)& (0+255),b
  1703                           
  1704                           ;doprnt.c: 1130: } else {
  1705  000C54  D033               	goto	l320
  1706  000C56                     l311:
  1707                           
  1708                           ;doprnt.c: 1131: val = (unsigned long)fval;
  1709                           
  1710                           ; BSR set to: 0
  1711  000C56  C08C  F045         	movff	sprintf@fval,___fttol@f1
  1712  000C5A  C08D  F046         	movff	sprintf@fval+1,___fttol@f1+1
  1713  000C5E  C08E  F047         	movff	sprintf@fval+2,___fttol@f1+2
  1714  000C62  ECFB  F00E         	call	___fttol	;wreg free
  1715  000C66  C045  F07E         	movff	?___fttol,sprintf@val
  1716  000C6A  C046  F07F         	movff	?___fttol+1,sprintf@val+1
  1717  000C6E  C047  F080         	movff	?___fttol+2,sprintf@val+2
  1718  000C72  C048  F081         	movff	?___fttol+3,sprintf@val+3
  1719                           
  1720                           ;doprnt.c: 1132: fval -= (double)val;
  1721  000C76  C08C  F066         	movff	sprintf@fval,___ftsub@f1
  1722  000C7A  C08D  F067         	movff	sprintf@fval+1,___ftsub@f1+1
  1723  000C7E  C08E  F068         	movff	sprintf@fval+2,___ftsub@f1+2
  1724  000C82  C07E  F01B         	movff	sprintf@val,___lltoft@c
  1725  000C86  C07F  F01C         	movff	sprintf@val+1,___lltoft@c+1
  1726  000C8A  C080  F01D         	movff	sprintf@val+2,___lltoft@c+2
  1727  000C8E  C081  F01E         	movff	sprintf@val+3,___lltoft@c+3
  1728  000C92  ECF2  F013         	call	___lltoft	;wreg free
  1729  000C96  C01B  F069         	movff	?___lltoft,___ftsub@f2
  1730  000C9A  C01C  F06A         	movff	?___lltoft+1,___ftsub@f2+1
  1731  000C9E  C01D  F06B         	movff	?___lltoft+2,___ftsub@f2+2
  1732  000CA2  EC44  F014         	call	___ftsub	;wreg free
  1733  000CA6  C066  F08C         	movff	?___ftsub,sprintf@fval
  1734  000CAA  C067  F08D         	movff	?___ftsub+1,sprintf@fval+1
  1735  000CAE  C068  F08E         	movff	?___ftsub+2,sprintf@fval+2
  1736                           
  1737                           ;doprnt.c: 1133: exp = 0;
  1738  000CB2  0E00               	movlw	0
  1739  000CB4  0100               	movlb	0	; () banked
  1740  000CB6  6F8B               	movwf	(sprintf@exp+1)& (0+255),b
  1741  000CB8  0E00               	movlw	0
  1742  000CBA  6F8A               	movwf	sprintf@exp& (0+255),b
  1743  000CBC                     l320:
  1744                           
  1745                           ; BSR set to: 0
  1746                           ;doprnt.c: 1134: }
  1747                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  1748                           
  1749                           ; BSR set to: 0
  1750  000CBC  0E01               	movlw	1
  1751  000CBE  6F91               	movwf	sprintf@c& (0+255),b
  1752  000CC0                     l3227:
  1753                           
  1754                           ; BSR set to: 0
  1755  000CC0  0E0A               	movlw	10
  1756  000CC2  1991               	xorwf	sprintf@c& (0+255),w,b
  1757  000CC4  B4D8               	btfsc	status,2,c
  1758  000CC6  D018               	goto	u3320
  1759                           
  1760                           ; BSR set to: 0
  1761                           ;doprnt.c: 1137: if(val < dpowers[c])
  1762                           
  1763                           ; BSR set to: 0
  1764                           
  1765                           ; BSR set to: 0
  1766  000CC8  5191               	movf	sprintf@c& (0+255),w,b
  1767  000CCA  0D04               	mullw	4
  1768  000CCC  0E01               	movlw	low _dpowers
  1769  000CCE  24F3               	addwf	prodl,w,c
  1770  000CD0  6EF6               	movwf	tblptrl,c
  1771  000CD2  0E08               	movlw	high _dpowers
  1772  000CD4  20F4               	addwfc	prodh,w,c
  1773  000CD6  6EF7               	movwf	tblptrh,c
  1774  000CD8                     	if	0	;There are less than 3 active tblptr bytes
  1775  000CD8                     	endif
  1776  000CD8  0009               	tblrd		*+
  1777  000CDA  50F5               	movf	tablat,w,c
  1778  000CDC  5D7E               	subwf	sprintf@val& (0+255),w,b
  1779  000CDE  0009               	tblrd		*+
  1780  000CE0  50F5               	movf	tablat,w,c
  1781  000CE2  597F               	subwfb	(sprintf@val+1)& (0+255),w,b
  1782  000CE4  0009               	tblrd		*+
  1783  000CE6  50F5               	movf	tablat,w,c
  1784  000CE8  5980               	subwfb	(sprintf@val+2)& (0+255),w,b
  1785  000CEA  0009               	tblrd		*+
  1786  000CEC  50F5               	movf	tablat,w,c
  1787  000CEE  5981               	subwfb	(sprintf@val+3)& (0+255),w,b
  1788  000CF0  A0D8               	btfss	status,0,c
  1789  000CF2  D002               	goto	u3320
  1790                           
  1791                           ; BSR set to: 0
  1792                           
  1793                           ; BSR set to: 0
  1794                           
  1795                           ; BSR set to: 0
  1796                           ;doprnt.c: 1138: break;
  1797  000CF4  2B91               	incf	sprintf@c& (0+255),f,b
  1798  000CF6  D7E4               	goto	l3227
  1799  000CF8                     u3320:
  1800                           
  1801                           ; BSR set to: 0
  1802                           ;doprnt.c: 1142: width -= prec + c + exp;
  1803                           
  1804                           ; BSR set to: 0
  1805  000CF8  C091  F073         	movff	sprintf@c,??_sprintf
  1806  000CFC  6B74               	clrf	(??_sprintf+1)& (0+255),b
  1807  000CFE  BF73               	btfsc	??_sprintf& (0+255),7,b
  1808  000D00  0774               	decf	(??_sprintf+1)& (0+255),f,b
  1809  000D02  518F               	movf	sprintf@prec& (0+255),w,b
  1810  000D04  2773               	addwf	??_sprintf& (0+255),f,b
  1811  000D06  5190               	movf	(sprintf@prec+1)& (0+255),w,b
  1812  000D08  2374               	addwfc	(??_sprintf+1)& (0+255),f,b
  1813  000D0A  518A               	movf	sprintf@exp& (0+255),w,b
  1814  000D0C  2773               	addwf	??_sprintf& (0+255),f,b
  1815  000D0E  518B               	movf	(sprintf@exp+1)& (0+255),w,b
  1816  000D10  2374               	addwfc	(??_sprintf+1)& (0+255),f,b
  1817  000D12  5173               	movf	??_sprintf& (0+255),w,b
  1818  000D14  5F84               	subwf	sprintf@width& (0+255),f,b
  1819  000D16  5174               	movf	(??_sprintf+1)& (0+255),w,b
  1820  000D18  5B85               	subwfb	(sprintf@width+1)& (0+255),f,b
  1821                           
  1822                           ;doprnt.c: 1143: if(
  1823                           ;doprnt.c: 1147: prec)
  1824  000D1A  518F               	movf	sprintf@prec& (0+255),w,b
  1825  000D1C  1190               	iorwf	(sprintf@prec+1)& (0+255),w,b
  1826  000D1E  B4D8               	btfsc	status,2,c
  1827  000D20  D003               	goto	l324
  1828                           
  1829                           ; BSR set to: 0
  1830                           ;doprnt.c: 1148: width--;
  1831  000D22  0784               	decf	sprintf@width& (0+255),f,b
  1832  000D24  A0D8               	btfss	status,0,c
  1833  000D26  0785               	decf	(sprintf@width+1)& (0+255),f,b
  1834  000D28                     l324:
  1835                           
  1836                           ; BSR set to: 0
  1837                           ;doprnt.c: 1149: if(flag & 0x03)
  1838                           
  1839                           ; BSR set to: 0
  1840  000D28  0E03               	movlw	3
  1841  000D2A  1582               	andwf	sprintf@flag& (0+255),w,b
  1842  000D2C  6F73               	movwf	??_sprintf& (0+255),b
  1843  000D2E  0E00               	movlw	0
  1844  000D30  1583               	andwf	(sprintf@flag+1)& (0+255),w,b
  1845  000D32  6F74               	movwf	(??_sprintf+1)& (0+255),b
  1846  000D34  5173               	movf	??_sprintf& (0+255),w,b
  1847  000D36  1174               	iorwf	(??_sprintf+1)& (0+255),w,b
  1848  000D38  B4D8               	btfsc	status,2,c
  1849  000D3A  D00C               	goto	l326
  1850  000D3C  D008               	goto	l3251
  1851  000D3E                     l3247:
  1852                           
  1853                           ; BSR set to: 0
  1854                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  1855  000D3E  C06C  FFD9         	movff	sprintf@sp,fsr2l
  1856  000D42  C06D  FFDA         	movff	sprintf@sp+1,fsr2h
  1857  000D46  0E20               	movlw	32
  1858  000D48  6EDF               	movwf	indf2,c
  1859                           
  1860                           ; BSR set to: 0
  1861  000D4A  4B6C               	infsnz	sprintf@sp& (0+255),f,b
  1862  000D4C  2B6D               	incf	(sprintf@sp+1)& (0+255),f,b
  1863  000D4E                     l3251:
  1864                           
  1865                           ; BSR set to: 0
  1866                           ;doprnt.c: 1182: width--;
  1867  000D4E  0784               	decf	sprintf@width& (0+255),f,b
  1868  000D50  A0D8               	btfss	status,0,c
  1869  000D52  0785               	decf	(sprintf@width+1)& (0+255),f,b
  1870  000D54                     l326:
  1871                           
  1872                           ; BSR set to: 0
  1873                           
  1874                           ; BSR set to: 0
  1875  000D54  BF85               	btfsc	(sprintf@width+1)& (0+255),7,b
  1876  000D56  D005               	goto	u3350
  1877  000D58  5185               	movf	(sprintf@width+1)& (0+255),w,b
  1878  000D5A  E1F1               	bnz	l3247
  1879  000D5C  0584               	decf	sprintf@width& (0+255),w,b
  1880  000D5E  B0D8               	btfsc	status,0,c
  1881  000D60  D7EE               	goto	l327
  1882  000D62                     u3350:
  1883                           
  1884                           ; BSR set to: 0
  1885                           ;doprnt.c: 1183: }
  1886                           ;doprnt.c: 1188: if(flag & 0x03)
  1887                           
  1888                           ; BSR set to: 0
  1889  000D62  0E03               	movlw	3
  1890  000D64  1582               	andwf	sprintf@flag& (0+255),w,b
  1891  000D66  6F73               	movwf	??_sprintf& (0+255),b
  1892  000D68  0E00               	movlw	0
  1893  000D6A  1583               	andwf	(sprintf@flag+1)& (0+255),w,b
  1894  000D6C  6F74               	movwf	(??_sprintf+1)& (0+255),b
  1895  000D6E  5173               	movf	??_sprintf& (0+255),w,b
  1896  000D70  1174               	iorwf	(??_sprintf+1)& (0+255),w,b
  1897  000D72  B4D8               	btfsc	status,2,c
  1898  000D74  D050               	goto	l330
  1899                           
  1900                           ; BSR set to: 0
  1901                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  1902  000D76  C06C  FFD9         	movff	sprintf@sp,fsr2l
  1903  000D7A  C06D  FFDA         	movff	sprintf@sp+1,fsr2h
  1904  000D7E  0E2D               	movlw	45
  1905  000D80  D047               	goto	L2
  1906  000D82                     
  1907                           ; BSR set to: 0
  1908                           ;doprnt.c: 1200: {
  1909                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  1910                           
  1911                           ; BSR set to: 0
  1912  000D82  C07E  F013         	movff	sprintf@val,___lldiv@dividend
  1913  000D86  C07F  F014         	movff	sprintf@val+1,___lldiv@dividend+1
  1914  000D8A  C080  F015         	movff	sprintf@val+2,___lldiv@dividend+2
  1915  000D8E  C081  F016         	movff	sprintf@val+3,___lldiv@dividend+3
  1916  000D92  5191               	movf	sprintf@c& (0+255),w,b
  1917  000D94  0D04               	mullw	4
  1918  000D96  0E01               	movlw	low _dpowers
  1919  000D98  24F3               	addwf	prodl,w,c
  1920  000D9A  6EF6               	movwf	tblptrl,c
  1921  000D9C  0E08               	movlw	high _dpowers
  1922  000D9E  20F4               	addwfc	prodh,w,c
  1923  000DA0  6EF7               	movwf	tblptrh,c
  1924  000DA2                     	if	0	;There are less than 3 active tblptr bytes
  1925  000DA2                     	endif
  1926  000DA2  0009               	tblrd		*+
  1927  000DA4  CFF5 F017          	movff	tablat,___lldiv@divisor
  1928  000DA8  0009               	tblrd		*+
  1929  000DAA  CFF5 F018          	movff	tablat,___lldiv@divisor+1
  1930  000DAE  0009               	tblrd		*+
  1931  000DB0  CFF5 F019          	movff	tablat,___lldiv@divisor+2
  1932  000DB4  000A               	tblrd		*-
  1933  000DB6  CFF5 F01A          	movff	tablat,___lldiv@divisor+3
  1934  000DBA  EC65  F012         	call	___lldiv	;wreg free
  1935  000DBE  C013  F086         	movff	?___lldiv,sprintf@tmpval
  1936  000DC2  C014  F087         	movff	?___lldiv+1,sprintf@tmpval+1
  1937  000DC6  C015  F088         	movff	?___lldiv+2,sprintf@tmpval+2
  1938  000DCA  C016  F089         	movff	?___lldiv+3,sprintf@tmpval+3
  1939                           
  1940                           ;doprnt.c: 1202: tmpval.vd %= 10;
  1941  000DCE  C086  F013         	movff	sprintf@tmpval,___llmod@dividend
  1942  000DD2  C087  F014         	movff	sprintf@tmpval+1,___llmod@dividend+1
  1943  000DD6  C088  F015         	movff	sprintf@tmpval+2,___llmod@dividend+2
  1944  000DDA  C089  F016         	movff	sprintf@tmpval+3,___llmod@dividend+3
  1945  000DDE  0E0A               	movlw	10
  1946  000DE0  6E17               	movwf	___llmod@divisor,c
  1947  000DE2  0E00               	movlw	0
  1948  000DE4  6E18               	movwf	___llmod@divisor+1,c
  1949  000DE6  0E00               	movlw	0
  1950  000DE8  6E19               	movwf	___llmod@divisor+2,c
  1951  000DEA  0E00               	movlw	0
  1952  000DEC  6E1A               	movwf	___llmod@divisor+3,c
  1953  000DEE  EC8C  F013         	call	___llmod	;wreg free
  1954  000DF2  C013  F086         	movff	?___llmod,sprintf@tmpval
  1955  000DF6  C014  F087         	movff	?___llmod+1,sprintf@tmpval+1
  1956  000DFA  C015  F088         	movff	?___llmod+2,sprintf@tmpval+2
  1957  000DFE  C016  F089         	movff	?___llmod+3,sprintf@tmpval+3
  1958                           
  1959                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  1960  000E02  0100               	movlb	0	; () banked
  1961  000E04  5186               	movf	sprintf@tmpval& (0+255),w,b
  1962  000E06  0F30               	addlw	48
  1963  000E08  C06C  FFD9         	movff	sprintf@sp,fsr2l
  1964  000E0C  C06D  FFDA         	movff	sprintf@sp+1,fsr2h
  1965  000E10                     L2:
  1966  000E10  6EDF               	movwf	indf2,c
  1967                           
  1968                           ; BSR set to: 0
  1969  000E12  4B6C               	infsnz	sprintf@sp& (0+255),f,b
  1970  000E14  2B6D               	incf	(sprintf@sp+1)& (0+255),f,b
  1971  000E16                     l330:
  1972                           
  1973                           ; BSR set to: 0
  1974                           
  1975                           ; BSR set to: 0
  1976  000E16  0791               	decf	sprintf@c& (0+255),f,b
  1977  000E18  2991               	incf	sprintf@c& (0+255),w,b
  1978  000E1A  B4D8               	btfsc	status,2,c
  1979  000E1C  D00C               	goto	l333
  1980  000E1E  D7B1               	goto	l331
  1981  000E20                     l3271:
  1982                           
  1983                           ; BSR set to: 0
  1984                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  1985  000E20  C06C  FFD9         	movff	sprintf@sp,fsr2l
  1986  000E24  C06D  FFDA         	movff	sprintf@sp+1,fsr2h
  1987  000E28  0E30               	movlw	48
  1988  000E2A  6EDF               	movwf	indf2,c
  1989                           
  1990                           ; BSR set to: 0
  1991  000E2C  4B6C               	infsnz	sprintf@sp& (0+255),f,b
  1992  000E2E  2B6D               	incf	(sprintf@sp+1)& (0+255),f,b
  1993                           
  1994                           ; BSR set to: 0
  1995                           ;doprnt.c: 1209: exp--;
  1996  000E30  078A               	decf	sprintf@exp& (0+255),f,b
  1997  000E32  A0D8               	btfss	status,0,c
  1998  000E34  078B               	decf	(sprintf@exp+1)& (0+255),f,b
  1999  000E36                     l333:
  2000                           
  2001                           ; BSR set to: 0
  2002                           
  2003                           ; BSR set to: 0
  2004  000E36  BF8B               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2005  000E38  D005               	goto	u3380
  2006  000E3A  518B               	movf	(sprintf@exp+1)& (0+255),w,b
  2007  000E3C  E1F1               	bnz	l3271
  2008  000E3E  058A               	decf	sprintf@exp& (0+255),w,b
  2009  000E40  B0D8               	btfsc	status,0,c
  2010  000E42  D7EE               	goto	l334
  2011  000E44                     u3380:
  2012                           
  2013                           ; BSR set to: 0
  2014                           ;doprnt.c: 1210: }
  2015                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2016                           
  2017                           ; BSR set to: 0
  2018  000E44  BF90               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2019  000E46  D009               	goto	l336
  2020  000E48  5190               	movf	(sprintf@prec+1)& (0+255),w,b
  2021  000E4A  E104               	bnz	u3390
  2022  000E4C  0E09               	movlw	9
  2023  000E4E  5D8F               	subwf	sprintf@prec& (0+255),w,b
  2024  000E50  A0D8               	btfss	status,0,c
  2025  000E52  D003               	goto	l336
  2026  000E54                     u3390:
  2027                           
  2028                           ; BSR set to: 0
  2029                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2030  000E54  0E08               	movlw	8
  2031  000E56  6F91               	movwf	sprintf@c& (0+255),b
  2032  000E58  D002               	goto	l337
  2033  000E5A                     l336:
  2034                           
  2035                           ; BSR set to: 0
  2036                           ;doprnt.c: 1213: else
  2037                           ;doprnt.c: 1214: c = prec;
  2038  000E5A  C08F  F091         	movff	sprintf@prec,sprintf@c
  2039  000E5E                     l337:
  2040                           
  2041                           ; BSR set to: 0
  2042                           ;doprnt.c: 1215: prec -= c;
  2043                           
  2044                           ; BSR set to: 0
  2045  000E5E  5191               	movf	sprintf@c& (0+255),w,b
  2046  000E60  5F8F               	subwf	sprintf@prec& (0+255),f,b
  2047  000E62  0E00               	movlw	0
  2048  000E64  BF91               	btfsc	sprintf@c& (0+255),7,b
  2049  000E66  0EFF               	movlw	255
  2050  000E68  5B90               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2051                           
  2052                           ; BSR set to: 0
  2053                           ;doprnt.c: 1219: if(c)
  2054  000E6A  5191               	movf	sprintf@c& (0+255),w,b
  2055  000E6C  B4D8               	btfsc	status,2,c
  2056  000E6E  D008               	goto	l338
  2057                           
  2058                           ; BSR set to: 0
  2059                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  2060  000E70  C06C  FFD9         	movff	sprintf@sp,fsr2l
  2061  000E74  C06D  FFDA         	movff	sprintf@sp+1,fsr2h
  2062  000E78  0E2E               	movlw	46
  2063  000E7A  6EDF               	movwf	indf2,c
  2064                           
  2065                           ; BSR set to: 0
  2066  000E7C  4B6C               	infsnz	sprintf@sp& (0+255),f,b
  2067  000E7E  2B6D               	incf	(sprintf@sp+1)& (0+255),f,b
  2068  000E80                     l338:
  2069                           
  2070                           ; BSR set to: 0
  2071                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2072                           
  2073                           ; BSR set to: 0
  2074  000E80  5191               	movf	sprintf@c& (0+255),w,b
  2075  000E82  EC8E  F008         	call	_scale
  2076  000E86  C036  F079         	movff	?_scale,_sprintf$1619
  2077  000E8A  C037  F07A         	movff	?_scale+1,_sprintf$1619+1
  2078  000E8E  C038  F07B         	movff	?_scale+2,_sprintf$1619+2
  2079                           
  2080                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2081  000E92  C08C  F02A         	movff	sprintf@fval,___ftmul@f2
  2082  000E96  C08D  F02B         	movff	sprintf@fval+1,___ftmul@f2+1
  2083  000E9A  C08E  F02C         	movff	sprintf@fval+2,___ftmul@f2+2
  2084  000E9E  C079  F027         	movff	_sprintf$1619,___ftmul@f1
  2085  000EA2  C07A  F028         	movff	_sprintf$1619+1,___ftmul@f1+1
  2086  000EA6  C07B  F029         	movff	_sprintf$1619+2,___ftmul@f1+2
  2087  000EAA  EC77  F00F         	call	___ftmul	;wreg free
  2088  000EAE  C027  F045         	movff	?___ftmul,___fttol@f1
  2089  000EB2  C028  F046         	movff	?___ftmul+1,___fttol@f1+1
  2090  000EB6  C029  F047         	movff	?___ftmul+2,___fttol@f1+2
  2091  000EBA  ECFB  F00E         	call	___fttol	;wreg free
  2092  000EBE  C045  F07E         	movff	?___fttol,sprintf@val
  2093  000EC2  C046  F07F         	movff	?___fttol+1,sprintf@val+1
  2094  000EC6  C047  F080         	movff	?___fttol+2,sprintf@val+2
  2095  000ECA  C048  F081         	movff	?___fttol+3,sprintf@val+3
  2096                           
  2097                           ;doprnt.c: 1228: while(c--) {
  2098  000ECE  D071               	goto	l339
  2099  000ED0                     
  2100                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2101  000ED0  C07E  F013         	movff	sprintf@val,___lldiv@dividend
  2102  000ED4  C07F  F014         	movff	sprintf@val+1,___lldiv@dividend+1
  2103  000ED8  C080  F015         	movff	sprintf@val+2,___lldiv@dividend+2
  2104  000EDC  C081  F016         	movff	sprintf@val+3,___lldiv@dividend+3
  2105  000EE0  0100               	movlb	0	; () banked
  2106  000EE2  5191               	movf	sprintf@c& (0+255),w,b
  2107  000EE4  0D04               	mullw	4
  2108  000EE6  0E01               	movlw	low _dpowers
  2109  000EE8  24F3               	addwf	prodl,w,c
  2110  000EEA  6EF6               	movwf	tblptrl,c
  2111  000EEC  0E08               	movlw	high _dpowers
  2112  000EEE  20F4               	addwfc	prodh,w,c
  2113  000EF0  6EF7               	movwf	tblptrh,c
  2114  000EF2                     	if	0	;There are less than 3 active tblptr bytes
  2115  000EF2                     	endif
  2116  000EF2  0009               	tblrd		*+
  2117  000EF4  CFF5 F017          	movff	tablat,___lldiv@divisor
  2118  000EF8  0009               	tblrd		*+
  2119  000EFA  CFF5 F018          	movff	tablat,___lldiv@divisor+1
  2120  000EFE  0009               	tblrd		*+
  2121  000F00  CFF5 F019          	movff	tablat,___lldiv@divisor+2
  2122  000F04  000A               	tblrd		*-
  2123  000F06  CFF5 F01A          	movff	tablat,___lldiv@divisor+3
  2124  000F0A  EC65  F012         	call	___lldiv	;wreg free
  2125  000F0E  C013  F086         	movff	?___lldiv,sprintf@tmpval
  2126  000F12  C014  F087         	movff	?___lldiv+1,sprintf@tmpval+1
  2127  000F16  C015  F088         	movff	?___lldiv+2,sprintf@tmpval+2
  2128  000F1A  C016  F089         	movff	?___lldiv+3,sprintf@tmpval+3
  2129                           
  2130                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2131  000F1E  C086  F013         	movff	sprintf@tmpval,___llmod@dividend
  2132  000F22  C087  F014         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2133  000F26  C088  F015         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2134  000F2A  C089  F016         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2135  000F2E  0E0A               	movlw	10
  2136  000F30  6E17               	movwf	___llmod@divisor,c
  2137  000F32  0E00               	movlw	0
  2138  000F34  6E18               	movwf	___llmod@divisor+1,c
  2139  000F36  0E00               	movlw	0
  2140  000F38  6E19               	movwf	___llmod@divisor+2,c
  2141  000F3A  0E00               	movlw	0
  2142  000F3C  6E1A               	movwf	___llmod@divisor+3,c
  2143  000F3E  EC8C  F013         	call	___llmod	;wreg free
  2144  000F42  C013  F086         	movff	?___llmod,sprintf@tmpval
  2145  000F46  C014  F087         	movff	?___llmod+1,sprintf@tmpval+1
  2146  000F4A  C015  F088         	movff	?___llmod+2,sprintf@tmpval+2
  2147  000F4E  C016  F089         	movff	?___llmod+3,sprintf@tmpval+3
  2148                           
  2149                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  2150  000F52  0100               	movlb	0	; () banked
  2151  000F54  5186               	movf	sprintf@tmpval& (0+255),w,b
  2152  000F56  0F30               	addlw	48
  2153  000F58  C06C  FFD9         	movff	sprintf@sp,fsr2l
  2154  000F5C  C06D  FFDA         	movff	sprintf@sp+1,fsr2h
  2155  000F60  6EDF               	movwf	indf2,c
  2156                           
  2157                           ; BSR set to: 0
  2158  000F62  4B6C               	infsnz	sprintf@sp& (0+255),f,b
  2159  000F64  2B6D               	incf	(sprintf@sp+1)& (0+255),f,b
  2160                           
  2161                           ; BSR set to: 0
  2162                           ;doprnt.c: 1232: val %= dpowers[c];
  2163  000F66  C07E  F013         	movff	sprintf@val,___llmod@dividend
  2164  000F6A  C07F  F014         	movff	sprintf@val+1,___llmod@dividend+1
  2165  000F6E  C080  F015         	movff	sprintf@val+2,___llmod@dividend+2
  2166  000F72  C081  F016         	movff	sprintf@val+3,___llmod@dividend+3
  2167  000F76  5191               	movf	sprintf@c& (0+255),w,b
  2168  000F78  0D04               	mullw	4
  2169  000F7A  0E01               	movlw	low _dpowers
  2170  000F7C  24F3               	addwf	prodl,w,c
  2171  000F7E  6EF6               	movwf	tblptrl,c
  2172  000F80  0E08               	movlw	high _dpowers
  2173  000F82  20F4               	addwfc	prodh,w,c
  2174  000F84  6EF7               	movwf	tblptrh,c
  2175  000F86                     	if	0	;There are less than 3 active tblptr bytes
  2176  000F86                     	endif
  2177  000F86  0009               	tblrd		*+
  2178  000F88  CFF5 F017          	movff	tablat,___llmod@divisor
  2179  000F8C  0009               	tblrd		*+
  2180  000F8E  CFF5 F018          	movff	tablat,___llmod@divisor+1
  2181  000F92  0009               	tblrd		*+
  2182  000F94  CFF5 F019          	movff	tablat,___llmod@divisor+2
  2183  000F98  000A               	tblrd		*-
  2184  000F9A  CFF5 F01A          	movff	tablat,___llmod@divisor+3
  2185  000F9E  EC8C  F013         	call	___llmod	;wreg free
  2186  000FA2  C013  F07E         	movff	?___llmod,sprintf@val
  2187  000FA6  C014  F07F         	movff	?___llmod+1,sprintf@val+1
  2188  000FAA  C015  F080         	movff	?___llmod+2,sprintf@val+2
  2189  000FAE  C016  F081         	movff	?___llmod+3,sprintf@val+3
  2190  000FB2                     l339:
  2191  000FB2  0100               	movlb	0	; () banked
  2192  000FB4  0791               	decf	sprintf@c& (0+255),f,b
  2193  000FB6  2991               	incf	sprintf@c& (0+255),w,b
  2194  000FB8  B4D8               	btfsc	status,2,c
  2195  000FBA  D00C               	goto	l342
  2196  000FBC  D789               	goto	l340
  2197  000FBE                     
  2198                           ; BSR set to: 0
  2199                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  2200                           
  2201                           ; BSR set to: 0
  2202  000FBE  C06C  FFD9         	movff	sprintf@sp,fsr2l
  2203  000FC2  C06D  FFDA         	movff	sprintf@sp+1,fsr2h
  2204  000FC6  0E30               	movlw	48
  2205  000FC8  6EDF               	movwf	indf2,c
  2206                           
  2207                           ; BSR set to: 0
  2208  000FCA  4B6C               	infsnz	sprintf@sp& (0+255),f,b
  2209  000FCC  2B6D               	incf	(sprintf@sp+1)& (0+255),f,b
  2210                           
  2211                           ; BSR set to: 0
  2212                           ;doprnt.c: 1237: prec--;
  2213  000FCE  078F               	decf	sprintf@prec& (0+255),f,b
  2214  000FD0  A0D8               	btfss	status,0,c
  2215  000FD2  0790               	decf	(sprintf@prec+1)& (0+255),f,b
  2216  000FD4                     l342:
  2217                           
  2218                           ; BSR set to: 0
  2219                           
  2220                           ; BSR set to: 0
  2221  000FD4  518F               	movf	sprintf@prec& (0+255),w,b
  2222  000FD6  1190               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2223  000FD8  B4D8               	btfsc	status,2,c
  2224  000FDA  D08C               	goto	l358
  2225  000FDC  D7F0               	goto	l343
  2226  000FDE                     l302:
  2227                           
  2228                           ; BSR set to: 0
  2229                           ;doprnt.c: 1246: }
  2230                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2231                           
  2232                           ; BSR set to: 0
  2233  000FDE  518F               	movf	sprintf@prec& (0+255),w,b
  2234  000FE0  1190               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2235  000FE2  A4D8               	btfss	status,2,c
  2236  000FE4  D008               	goto	l345
  2237                           
  2238                           ; BSR set to: 0
  2239  000FE6  517E               	movf	sprintf@val& (0+255),w,b
  2240  000FE8  117F               	iorwf	(sprintf@val+1)& (0+255),w,b
  2241  000FEA  1180               	iorwf	(sprintf@val+2)& (0+255),w,b
  2242  000FEC  1181               	iorwf	(sprintf@val+3)& (0+255),w,b
  2243  000FEE  A4D8               	btfss	status,2,c
  2244  000FF0  D002               	goto	l345
  2245                           
  2246                           ; BSR set to: 0
  2247                           ;doprnt.c: 1291: prec++;
  2248  000FF2  4B8F               	infsnz	sprintf@prec& (0+255),f,b
  2249  000FF4  2B90               	incf	(sprintf@prec+1)& (0+255),f,b
  2250  000FF6                     l345:
  2251                           
  2252                           ; BSR set to: 0
  2253                           ;doprnt.c: 1339: if(c < prec)
  2254                           
  2255                           ; BSR set to: 0
  2256  000FF6  0E80               	movlw	128
  2257  000FF8  BF91               	btfsc	sprintf@c& (0+255),7,b
  2258  000FFA  0E7F               	movlw	127
  2259  000FFC  6F73               	movwf	??_sprintf& (0+255),b
  2260  000FFE  518F               	movf	sprintf@prec& (0+255),w,b
  2261  001000  5D91               	subwf	sprintf@c& (0+255),w,b
  2262  001002  5190               	movf	(sprintf@prec+1)& (0+255),w,b
  2263  001004  0A80               	xorlw	128
  2264  001006  5973               	subwfb	??_sprintf& (0+255),w,b
  2265  001008  B0D8               	btfsc	status,0,c
  2266  00100A  D003               	goto	l346
  2267                           
  2268                           ; BSR set to: 0
  2269                           ;doprnt.c: 1340: c = prec;
  2270  00100C  C08F  F091         	movff	sprintf@prec,sprintf@c
  2271  001010  D010               	goto	l348
  2272  001012                     l346:
  2273                           
  2274                           ; BSR set to: 0
  2275                           ;doprnt.c: 1341: else if(prec < c)
  2276                           
  2277                           ; BSR set to: 0
  2278  001012  5190               	movf	(sprintf@prec+1)& (0+255),w,b
  2279  001014  0A80               	xorlw	128
  2280  001016  6F73               	movwf	??_sprintf& (0+255),b
  2281  001018  5191               	movf	sprintf@c& (0+255),w,b
  2282  00101A  5D8F               	subwf	sprintf@prec& (0+255),w,b
  2283  00101C  0E80               	movlw	128
  2284  00101E  BF91               	btfsc	sprintf@c& (0+255),7,b
  2285  001020  0E7F               	movlw	127
  2286  001022  5973               	subwfb	??_sprintf& (0+255),w,b
  2287  001024  B0D8               	btfsc	status,0,c
  2288  001026  D005               	goto	l348
  2289                           
  2290                           ; BSR set to: 0
  2291                           ;doprnt.c: 1342: prec = c;
  2292  001028  5191               	movf	sprintf@c& (0+255),w,b
  2293  00102A  6F8F               	movwf	sprintf@prec& (0+255),b
  2294  00102C  6B90               	clrf	(sprintf@prec+1)& (0+255),b
  2295  00102E  BF8F               	btfsc	sprintf@prec& (0+255),7,b
  2296  001030  0790               	decf	(sprintf@prec+1)& (0+255),f,b
  2297  001032                     l348:
  2298                           
  2299                           ; BSR set to: 0
  2300                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2301                           
  2302                           ; BSR set to: 0
  2303                           
  2304                           ; BSR set to: 0
  2305  001032  5184               	movf	sprintf@width& (0+255),w,b
  2306  001034  1185               	iorwf	(sprintf@width+1)& (0+255),w,b
  2307  001036  B4D8               	btfsc	status,2,c
  2308  001038  D00D               	goto	l349
  2309                           
  2310                           ; BSR set to: 0
  2311  00103A  0E03               	movlw	3
  2312  00103C  1582               	andwf	sprintf@flag& (0+255),w,b
  2313  00103E  6F73               	movwf	??_sprintf& (0+255),b
  2314  001040  0E00               	movlw	0
  2315  001042  1583               	andwf	(sprintf@flag+1)& (0+255),w,b
  2316  001044  6F74               	movwf	(??_sprintf+1)& (0+255),b
  2317  001046  5173               	movf	??_sprintf& (0+255),w,b
  2318  001048  1174               	iorwf	(??_sprintf+1)& (0+255),w,b
  2319  00104A  B4D8               	btfsc	status,2,c
  2320  00104C  D003               	goto	l349
  2321                           
  2322                           ; BSR set to: 0
  2323                           ;doprnt.c: 1346: width--;
  2324  00104E  0784               	decf	sprintf@width& (0+255),f,b
  2325  001050  A0D8               	btfss	status,0,c
  2326  001052  0785               	decf	(sprintf@width+1)& (0+255),f,b
  2327  001054                     l349:
  2328                           
  2329                           ; BSR set to: 0
  2330                           ;doprnt.c: 1348: if(flag & 0x4000) {
  2331                           
  2332                           ; BSR set to: 0
  2333  001054  AD83               	btfss	(sprintf@flag+1)& (0+255),6,b
  2334  001056  D013               	goto	l352
  2335                           
  2336                           ; BSR set to: 0
  2337                           ;doprnt.c: 1349: if(width > prec)
  2338  001058  5184               	movf	sprintf@width& (0+255),w,b
  2339  00105A  5D8F               	subwf	sprintf@prec& (0+255),w,b
  2340  00105C  5190               	movf	(sprintf@prec+1)& (0+255),w,b
  2341  00105E  0A80               	xorlw	128
  2342  001060  6F73               	movwf	??_sprintf& (0+255),b
  2343  001062  5185               	movf	(sprintf@width+1)& (0+255),w,b
  2344  001064  0A80               	xorlw	128
  2345  001066  5973               	subwfb	??_sprintf& (0+255),w,b
  2346  001068  B0D8               	btfsc	status,0,c
  2347  00106A  D005               	goto	l351
  2348                           
  2349                           ; BSR set to: 0
  2350                           ;doprnt.c: 1350: width -= prec;
  2351  00106C  518F               	movf	sprintf@prec& (0+255),w,b
  2352  00106E  5F84               	subwf	sprintf@width& (0+255),f,b
  2353  001070  5190               	movf	(sprintf@prec+1)& (0+255),w,b
  2354  001072  5B85               	subwfb	(sprintf@width+1)& (0+255),f,b
  2355  001074  D004               	goto	l352
  2356  001076                     l351:
  2357                           
  2358                           ; BSR set to: 0
  2359                           ;doprnt.c: 1351: else
  2360                           ;doprnt.c: 1352: width = 0;
  2361                           
  2362                           ; BSR set to: 0
  2363  001076  0E00               	movlw	0
  2364  001078  6F85               	movwf	(sprintf@width+1)& (0+255),b
  2365  00107A  0E00               	movlw	0
  2366  00107C  6F84               	movwf	sprintf@width& (0+255),b
  2367  00107E                     l352:
  2368                           
  2369                           ; BSR set to: 0
  2370                           ;doprnt.c: 1353: }
  2371                           ;doprnt.c: 1381: if(width > c)
  2372                           
  2373                           ; BSR set to: 0
  2374                           
  2375                           ; BSR set to: 0
  2376  00107E  0E80               	movlw	128
  2377  001080  BF91               	btfsc	sprintf@c& (0+255),7,b
  2378  001082  0E7F               	movlw	127
  2379  001084  6F73               	movwf	??_sprintf& (0+255),b
  2380  001086  5184               	movf	sprintf@width& (0+255),w,b
  2381  001088  5D91               	subwf	sprintf@c& (0+255),w,b
  2382  00108A  5185               	movf	(sprintf@width+1)& (0+255),w,b
  2383  00108C  0A80               	xorlw	128
  2384  00108E  5973               	subwfb	??_sprintf& (0+255),w,b
  2385  001090  B0D8               	btfsc	status,0,c
  2386  001092  D007               	goto	l353
  2387                           
  2388                           ; BSR set to: 0
  2389                           ;doprnt.c: 1382: width -= c;
  2390  001094  5191               	movf	sprintf@c& (0+255),w,b
  2391  001096  5F84               	subwf	sprintf@width& (0+255),f,b
  2392  001098  0E00               	movlw	0
  2393  00109A  BF91               	btfsc	sprintf@c& (0+255),7,b
  2394  00109C  0EFF               	movlw	255
  2395  00109E  5B85               	subwfb	(sprintf@width+1)& (0+255),f,b
  2396  0010A0  D004               	goto	l354
  2397  0010A2                     l353:
  2398                           
  2399                           ; BSR set to: 0
  2400                           ;doprnt.c: 1383: else
  2401                           ;doprnt.c: 1384: width = 0;
  2402                           
  2403                           ; BSR set to: 0
  2404  0010A2  0E00               	movlw	0
  2405  0010A4  6F85               	movwf	(sprintf@width+1)& (0+255),b
  2406  0010A6  0E00               	movlw	0
  2407  0010A8  6F84               	movwf	sprintf@width& (0+255),b
  2408  0010AA                     l354:
  2409                           
  2410                           ; BSR set to: 0
  2411                           ;doprnt.c: 1422: {
  2412                           ;doprnt.c: 1424: if(width
  2413                           ;doprnt.c: 1428: )
  2414                           
  2415                           ; BSR set to: 0
  2416  0010AA  5184               	movf	sprintf@width& (0+255),w,b
  2417  0010AC  1185               	iorwf	(sprintf@width+1)& (0+255),w,b
  2418  0010AE  B4D8               	btfsc	status,2,c
  2419  0010B0  D00F               	goto	u3530
  2420  0010B2                     u3520:
  2421                           
  2422                           ; BSR set to: 0
  2423                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  2424                           
  2425                           ; BSR set to: 0
  2426                           
  2427                           ;doprnt.c: 1429: do
  2428  0010B2  C06C  FFD9         	movff	sprintf@sp,fsr2l
  2429  0010B6  C06D  FFDA         	movff	sprintf@sp+1,fsr2h
  2430  0010BA  0E20               	movlw	32
  2431  0010BC  6EDF               	movwf	indf2,c
  2432                           
  2433                           ; BSR set to: 0
  2434  0010BE  4B6C               	infsnz	sprintf@sp& (0+255),f,b
  2435  0010C0  2B6D               	incf	(sprintf@sp+1)& (0+255),f,b
  2436                           
  2437                           ; BSR set to: 0
  2438                           ;doprnt.c: 1431: while(--width);
  2439  0010C2  0784               	decf	sprintf@width& (0+255),f,b
  2440  0010C4  A0D8               	btfss	status,0,c
  2441  0010C6  0785               	decf	(sprintf@width+1)& (0+255),f,b
  2442  0010C8  5184               	movf	sprintf@width& (0+255),w,b
  2443  0010CA  1185               	iorwf	(sprintf@width+1)& (0+255),w,b
  2444  0010CC  A4D8               	btfss	status,2,c
  2445  0010CE  D7F1               	goto	u3520
  2446  0010D0                     u3530:
  2447                           
  2448                           ; BSR set to: 0
  2449                           ;doprnt.c: 1438: if(flag & 0x03)
  2450                           
  2451                           ; BSR set to: 0
  2452                           
  2453                           ; BSR set to: 0
  2454  0010D0  0E03               	movlw	3
  2455  0010D2  1582               	andwf	sprintf@flag& (0+255),w,b
  2456  0010D4  6F73               	movwf	??_sprintf& (0+255),b
  2457  0010D6  0E00               	movlw	0
  2458  0010D8  1583               	andwf	(sprintf@flag+1)& (0+255),w,b
  2459  0010DA  6F74               	movwf	(??_sprintf+1)& (0+255),b
  2460  0010DC  5173               	movf	??_sprintf& (0+255),w,b
  2461  0010DE  1174               	iorwf	(??_sprintf+1)& (0+255),w,b
  2462  0010E0  B4D8               	btfsc	status,2,c
  2463  0010E2  D008               	goto	l358
  2464                           
  2465                           ; BSR set to: 0
  2466                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2467  0010E4  C06C  FFD9         	movff	sprintf@sp,fsr2l
  2468  0010E8  C06D  FFDA         	movff	sprintf@sp+1,fsr2h
  2469  0010EC  0E2D               	movlw	45
  2470  0010EE  6EDF               	movwf	indf2,c
  2471  0010F0                     l3361:
  2472                           
  2473                           ; BSR set to: 0
  2474  0010F0  4B6C               	infsnz	sprintf@sp& (0+255),f,b
  2475  0010F2  2B6D               	incf	(sprintf@sp+1)& (0+255),f,b
  2476  0010F4                     l358:
  2477                           
  2478                           ; BSR set to: 0
  2479                           
  2480                           ; BSR set to: 0
  2481                           
  2482                           ; BSR set to: 0
  2483  0010F4  C06E  FFF6         	movff	sprintf@f,tblptrl
  2484  0010F8  C06F  FFF7         	movff	sprintf@f+1,tblptrh
  2485  0010FC  4B6E               	infsnz	sprintf@f& (0+255),f,b
  2486  0010FE  2B6F               	incf	(sprintf@f+1)& (0+255),f,b
  2487  001100                     	if	0	;tblptru may be non-zero
  2488  001100                     	endif
  2489  001100                     	if	0	;tblptru may be non-zero
  2490  001100                     	endif
  2491  001100  0008               	tblrd		*
  2492  001102  CFF5 F091          	movff	tablat,sprintf@c
  2493  001106  5191               	movf	sprintf@c& (0+255),w,b
  2494  001108  A4D8               	btfss	status,2,c
  2495  00110A  EF47  F004         	goto	l286
  2496  00110E                     u3550:
  2497                           
  2498                           ; BSR set to: 0
  2499                           ;doprnt.c: 1538: *sp = 0;
  2500                           
  2501                           ; BSR set to: 0
  2502                           
  2503                           ;doprnt.c: 1469: }
  2504                           ;doprnt.c: 1533: }
  2505                           ;doprnt.c: 1535: alldone:
  2506                           
  2507                           ; BSR set to: 0
  2508  00110E  C06C  FFD9         	movff	sprintf@sp,fsr2l
  2509  001112  C06D  FFDA         	movff	sprintf@sp+1,fsr2h
  2510  001116  0E00               	movlw	0
  2511  001118  6EDF               	movwf	indf2,c
  2512  00111A  0012               	return	
  2513  00111C                     __end_of_sprintf:
  2514                           	opt stack 0
  2515                           tblptru	equ	0xFF8
  2516                           tblptrh	equ	0xFF7
  2517                           tblptrl	equ	0xFF6
  2518                           tablat	equ	0xFF5
  2519                           prodh	equ	0xFF4
  2520                           prodl	equ	0xFF3
  2521                           wreg	equ	0xFE8
  2522                           indf2	equ	0xFDF
  2523                           postinc2	equ	0xFDE
  2524                           postdec2	equ	0xFDD
  2525                           fsr2h	equ	0xFDA
  2526                           fsr2l	equ	0xFD9
  2527                           status	equ	0xFD8
  2528                           
  2529 ;; *************** function _scale *****************
  2530 ;; Defined at:
  2531 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  2532 ;; Parameters:    Size  Location     Type
  2533 ;;  scl             1    wreg     char 
  2534 ;; Auto vars:     Size  Location     Type
  2535 ;;  scl             1   59[COMRAM] char 
  2536 ;; Return value:  Size  Location     Type
  2537 ;;                  3   53[COMRAM] char 
  2538 ;; Registers used:
  2539 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2540 ;; Tracked objects:
  2541 ;;		On entry : 0/0
  2542 ;;		On exit  : 0/0
  2543 ;;		Unchanged: 0/0
  2544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2545 ;;      Params:         3       0       0       0       0       0       0       0       0
  2546 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2547 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2548 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2549 ;;Total ram usage:        7 bytes
  2550 ;; Hardware stack levels used:    1
  2551 ;; Hardware stack levels required when called:    3
  2552 ;; This function calls:
  2553 ;;		___awdiv
  2554 ;;		___awmod
  2555 ;;		___ftmul
  2556 ;;		___wmul
  2557 ;; This function is called by:
  2558 ;;		_sprintf
  2559 ;; This function uses a non-reentrant model
  2560 ;;
  2561                           
  2562                           	psect	text2
  2563  00111C                     __ptext2:
  2564                           	opt stack 0
  2565  00111C                     _scale:
  2566                           	opt stack 26
  2567                           
  2568                           ; BSR set to: 0
  2569                           ;incstack = 0
  2570                           ;scale@scl stored from wreg
  2571  00111C  6E3C               	movwf	scale@scl,c
  2572                           
  2573                           ;doprnt.c: 428: if(scl < 0) {
  2574  00111E  AE3C               	btfss	scale@scl,7,c
  2575  001120  D101               	goto	l275
  2576                           
  2577                           ;doprnt.c: 429: scl = -scl;
  2578  001122  6C3C               	negf	scale@scl,c
  2579                           
  2580                           ;doprnt.c: 430: if(scl>=110)
  2581  001124  503C               	movf	scale@scl,w,c
  2582  001126  0A80               	xorlw	128
  2583  001128  0F12               	addlw	-238
  2584  00112A  A0D8               	btfss	status,0,c
  2585  00112C  D091               	goto	l276
  2586                           
  2587                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2588  00112E  0E00               	movlw	0
  2589  001130  6E24               	movwf	___wmul@multiplicand+1,c
  2590  001132  0E03               	movlw	3
  2591  001134  6E23               	movwf	___wmul@multiplicand,c
  2592  001136  0E00               	movlw	0
  2593  001138  6E1C               	movwf	___awdiv@divisor+1,c
  2594  00113A  0E0A               	movlw	10
  2595  00113C  6E1B               	movwf	___awdiv@divisor,c
  2596  00113E  0E00               	movlw	0
  2597  001140  6E16               	movwf	___awmod@divisor+1,c
  2598  001142  0E64               	movlw	100
  2599  001144  6E15               	movwf	___awmod@divisor,c
  2600  001146  503C               	movf	scale@scl,w,c
  2601  001148  6E13               	movwf	___awmod@dividend,c
  2602  00114A  6A14               	clrf	___awmod@dividend+1,c
  2603  00114C  BE13               	btfsc	___awmod@dividend,7,c
  2604  00114E  0614               	decf	___awmod@dividend+1,f,c
  2605  001150  EC1F  F013         	call	___awmod	;wreg free
  2606  001154  C013  F019         	movff	?___awmod,___awdiv@dividend
  2607  001158  C014  F01A         	movff	?___awmod+1,___awdiv@dividend+1
  2608  00115C  EC23  F012         	call	___awdiv	;wreg free
  2609  001160  0E09               	movlw	9
  2610  001162  2419               	addwf	?___awdiv,w,c
  2611  001164  6E21               	movwf	___wmul@multiplier,c
  2612  001166  0E00               	movlw	0
  2613  001168  201A               	addwfc	?___awdiv+1,w,c
  2614  00116A  6E22               	movwf	___wmul@multiplier+1,c
  2615  00116C  EC9C  F014         	call	___wmul	;wreg free
  2616  001170  0E50               	movlw	low __npowers_
  2617  001172  2421               	addwf	?___wmul,w,c
  2618  001174  6EF6               	movwf	tblptrl,c
  2619  001176  0E08               	movlw	high __npowers_
  2620  001178  2022               	addwfc	?___wmul+1,w,c
  2621  00117A  6EF7               	movwf	tblptrh,c
  2622  00117C                     	if	0	;There are less than 3 active tblptr bytes
  2623  00117C                     	endif
  2624  00117C  0009               	tblrd		*+
  2625  00117E  CFF5 F02A          	movff	tablat,___ftmul@f2
  2626  001182  0009               	tblrd		*+
  2627  001184  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  2628  001188  000A               	tblrd		*-
  2629  00118A  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  2630  00118E  0E00               	movlw	0
  2631  001190  6E1C               	movwf	___awdiv@divisor+1,c
  2632  001192  0E64               	movlw	100
  2633  001194  6E1B               	movwf	___awdiv@divisor,c
  2634  001196  503C               	movf	scale@scl,w,c
  2635  001198  6E19               	movwf	___awdiv@dividend,c
  2636  00119A  6A1A               	clrf	___awdiv@dividend+1,c
  2637  00119C  BE19               	btfsc	___awdiv@dividend,7,c
  2638  00119E  061A               	decf	___awdiv@dividend+1,f,c
  2639  0011A0  EC23  F012         	call	___awdiv	;wreg free
  2640  0011A4  0E12               	movlw	18
  2641  0011A6  2419               	addwf	?___awdiv,w,c
  2642  0011A8  6E21               	movwf	___wmul@multiplier,c
  2643  0011AA  0E00               	movlw	0
  2644  0011AC  201A               	addwfc	?___awdiv+1,w,c
  2645  0011AE  6E22               	movwf	___wmul@multiplier+1,c
  2646  0011B0  0E00               	movlw	0
  2647  0011B2  6E24               	movwf	___wmul@multiplicand+1,c
  2648  0011B4  0E03               	movlw	3
  2649  0011B6  6E23               	movwf	___wmul@multiplicand,c
  2650  0011B8  EC9C  F014         	call	___wmul	;wreg free
  2651  0011BC  0E50               	movlw	low __npowers_
  2652  0011BE  2421               	addwf	?___wmul,w,c
  2653  0011C0  6EF6               	movwf	tblptrl,c
  2654  0011C2  0E08               	movlw	high __npowers_
  2655  0011C4  2022               	addwfc	?___wmul+1,w,c
  2656  0011C6  6EF7               	movwf	tblptrh,c
  2657  0011C8                     	if	0	;There are less than 3 active tblptr bytes
  2658  0011C8                     	endif
  2659  0011C8  0009               	tblrd		*+
  2660  0011CA  CFF5 F027          	movff	tablat,___ftmul@f1
  2661  0011CE  0009               	tblrd		*+
  2662  0011D0  CFF5 F028          	movff	tablat,___ftmul@f1+1
  2663  0011D4  000A               	tblrd		*-
  2664  0011D6  CFF5 F029          	movff	tablat,___ftmul@f1+2
  2665  0011DA  EC77  F00F         	call	___ftmul	;wreg free
  2666  0011DE  C027  F039         	movff	?___ftmul,_scale$1618
  2667  0011E2  C028  F03A         	movff	?___ftmul+1,_scale$1618+1
  2668  0011E6  C029  F03B         	movff	?___ftmul+2,_scale$1618+2
  2669                           
  2670                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2671  0011EA  C039  F027         	movff	_scale$1618,___ftmul@f1
  2672  0011EE  C03A  F028         	movff	_scale$1618+1,___ftmul@f1+1
  2673  0011F2  C03B  F029         	movff	_scale$1618+2,___ftmul@f1+2
  2674  0011F6  0E00               	movlw	0
  2675  0011F8  6E24               	movwf	___wmul@multiplicand+1,c
  2676  0011FA  0E03               	movlw	3
  2677  0011FC  6E23               	movwf	___wmul@multiplicand,c
  2678  0011FE  0E00               	movlw	0
  2679  001200  6E16               	movwf	___awmod@divisor+1,c
  2680  001202  0E0A               	movlw	10
  2681  001204  6E15               	movwf	___awmod@divisor,c
  2682  001206  503C               	movf	scale@scl,w,c
  2683  001208  6E13               	movwf	___awmod@dividend,c
  2684  00120A  6A14               	clrf	___awmod@dividend+1,c
  2685  00120C  BE13               	btfsc	___awmod@dividend,7,c
  2686  00120E  0614               	decf	___awmod@dividend+1,f,c
  2687  001210  EC1F  F013         	call	___awmod	;wreg free
  2688  001214  C013  F021         	movff	?___awmod,___wmul@multiplier
  2689  001218  C014  F022         	movff	?___awmod+1,___wmul@multiplier+1
  2690  00121C  EC9C  F014         	call	___wmul	;wreg free
  2691  001220  0E50               	movlw	low __npowers_
  2692  001222  2421               	addwf	?___wmul,w,c
  2693  001224  6EF6               	movwf	tblptrl,c
  2694  001226  0E08               	movlw	high __npowers_
  2695  001228  2022               	addwfc	?___wmul+1,w,c
  2696  00122A  6EF7               	movwf	tblptrh,c
  2697  00122C                     	if	0	;There are less than 3 active tblptr bytes
  2698  00122C                     	endif
  2699  00122C  0009               	tblrd		*+
  2700  00122E  CFF5 F02A          	movff	tablat,___ftmul@f2
  2701  001232  0009               	tblrd		*+
  2702  001234  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  2703  001238  000A               	tblrd		*-
  2704  00123A  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  2705  00123E  EC77  F00F         	call	___ftmul	;wreg free
  2706  001242  C027  F036         	movff	?___ftmul,?_scale
  2707  001246  C028  F037         	movff	?___ftmul+1,?_scale+1
  2708  00124A  C029  F038         	movff	?___ftmul+2,?_scale+2
  2709  00124E  0012               	return	
  2710  001250                     l276:
  2711                           
  2712                           ;doprnt.c: 432: else if(scl > 10)
  2713  001250  503C               	movf	scale@scl,w,c
  2714  001252  0A80               	xorlw	128
  2715  001254  0F75               	addlw	-139
  2716  001256  A0D8               	btfss	status,0,c
  2717  001258  D053               	goto	l279
  2718                           
  2719                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  2720  00125A  0E00               	movlw	0
  2721  00125C  6E1C               	movwf	___awdiv@divisor+1,c
  2722  00125E  0E0A               	movlw	10
  2723  001260  6E1B               	movwf	___awdiv@divisor,c
  2724  001262  503C               	movf	scale@scl,w,c
  2725  001264  6E19               	movwf	___awdiv@dividend,c
  2726  001266  6A1A               	clrf	___awdiv@dividend+1,c
  2727  001268  BE19               	btfsc	___awdiv@dividend,7,c
  2728  00126A  061A               	decf	___awdiv@dividend+1,f,c
  2729  00126C  EC23  F012         	call	___awdiv	;wreg free
  2730  001270  0E09               	movlw	9
  2731  001272  2419               	addwf	?___awdiv,w,c
  2732  001274  6E21               	movwf	___wmul@multiplier,c
  2733  001276  0E00               	movlw	0
  2734  001278  201A               	addwfc	?___awdiv+1,w,c
  2735  00127A  6E22               	movwf	___wmul@multiplier+1,c
  2736  00127C  0E00               	movlw	0
  2737  00127E  6E24               	movwf	___wmul@multiplicand+1,c
  2738  001280  0E03               	movlw	3
  2739  001282  6E23               	movwf	___wmul@multiplicand,c
  2740  001284  EC9C  F014         	call	___wmul	;wreg free
  2741  001288  0E50               	movlw	low __npowers_
  2742  00128A  2421               	addwf	?___wmul,w,c
  2743  00128C  6EF6               	movwf	tblptrl,c
  2744  00128E  0E08               	movlw	high __npowers_
  2745  001290  2022               	addwfc	?___wmul+1,w,c
  2746  001292  6EF7               	movwf	tblptrh,c
  2747  001294                     	if	0	;There are less than 3 active tblptr bytes
  2748  001294                     	endif
  2749  001294  0009               	tblrd		*+
  2750  001296  CFF5 F027          	movff	tablat,___ftmul@f1
  2751  00129A  0009               	tblrd		*+
  2752  00129C  CFF5 F028          	movff	tablat,___ftmul@f1+1
  2753  0012A0  000A               	tblrd		*-
  2754  0012A2  CFF5 F029          	movff	tablat,___ftmul@f1+2
  2755  0012A6  0E00               	movlw	0
  2756  0012A8  6E24               	movwf	___wmul@multiplicand+1,c
  2757  0012AA  0E03               	movlw	3
  2758  0012AC  6E23               	movwf	___wmul@multiplicand,c
  2759  0012AE  0E00               	movlw	0
  2760  0012B0  6E16               	movwf	___awmod@divisor+1,c
  2761  0012B2  0E0A               	movlw	10
  2762  0012B4  6E15               	movwf	___awmod@divisor,c
  2763  0012B6  503C               	movf	scale@scl,w,c
  2764  0012B8  6E13               	movwf	___awmod@dividend,c
  2765  0012BA  6A14               	clrf	___awmod@dividend+1,c
  2766  0012BC  BE13               	btfsc	___awmod@dividend,7,c
  2767  0012BE  0614               	decf	___awmod@dividend+1,f,c
  2768  0012C0  EC1F  F013         	call	___awmod	;wreg free
  2769  0012C4  C013  F021         	movff	?___awmod,___wmul@multiplier
  2770  0012C8  C014  F022         	movff	?___awmod+1,___wmul@multiplier+1
  2771  0012CC  EC9C  F014         	call	___wmul	;wreg free
  2772  0012D0  0E50               	movlw	low __npowers_
  2773  0012D2  2421               	addwf	?___wmul,w,c
  2774  0012D4  6EF6               	movwf	tblptrl,c
  2775  0012D6  0E08               	movlw	high __npowers_
  2776  0012D8  2022               	addwfc	?___wmul+1,w,c
  2777  0012DA  6EF7               	movwf	tblptrh,c
  2778  0012DC                     	if	0	;There are less than 3 active tblptr bytes
  2779  0012DC                     	endif
  2780  0012DC  0009               	tblrd		*+
  2781  0012DE  CFF5 F02A          	movff	tablat,___ftmul@f2
  2782  0012E2  0009               	tblrd		*+
  2783  0012E4  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  2784  0012E8  000A               	tblrd		*-
  2785  0012EA  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  2786  0012EE  EC77  F00F         	call	___ftmul	;wreg free
  2787  0012F2  C027  F036         	movff	?___ftmul,?_scale
  2788  0012F6  C028  F037         	movff	?___ftmul+1,?_scale+1
  2789  0012FA  C029  F038         	movff	?___ftmul+2,?_scale+2
  2790  0012FE  0012               	return	
  2791  001300                     l279:
  2792                           
  2793                           ;doprnt.c: 434: return _npowers_[scl];
  2794  001300  503C               	movf	scale@scl,w,c
  2795  001302  0D03               	mullw	3
  2796  001304  0E50               	movlw	low __npowers_
  2797  001306  24F3               	addwf	prodl,w,c
  2798  001308  6EF6               	movwf	tblptrl,c
  2799  00130A  0E08               	movlw	high __npowers_
  2800  00130C  20F4               	addwfc	prodh,w,c
  2801  00130E  6EF7               	movwf	tblptrh,c
  2802  001310                     	if	0	;There are less than 3 active tblptr bytes
  2803  001310                     	endif
  2804  001310  0009               	tblrd		*+
  2805  001312  CFF5 F036          	movff	tablat,?_scale
  2806  001316  0009               	tblrd		*+
  2807  001318  CFF5 F037          	movff	tablat,?_scale+1
  2808  00131C  000A               	tblrd		*-
  2809  00131E  CFF5 F038          	movff	tablat,?_scale+2
  2810  001322  0012               	return	
  2811  001324                     l275:
  2812                           
  2813                           ;doprnt.c: 435: }
  2814                           ;doprnt.c: 436: if(scl>=110)
  2815  001324  503C               	movf	scale@scl,w,c
  2816  001326  0A80               	xorlw	128
  2817  001328  0F12               	addlw	-238
  2818  00132A  A0D8               	btfss	status,0,c
  2819  00132C  D091               	goto	l280
  2820                           
  2821                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2822  00132E  0E00               	movlw	0
  2823  001330  6E24               	movwf	___wmul@multiplicand+1,c
  2824  001332  0E03               	movlw	3
  2825  001334  6E23               	movwf	___wmul@multiplicand,c
  2826  001336  0E00               	movlw	0
  2827  001338  6E1C               	movwf	___awdiv@divisor+1,c
  2828  00133A  0E0A               	movlw	10
  2829  00133C  6E1B               	movwf	___awdiv@divisor,c
  2830  00133E  0E00               	movlw	0
  2831  001340  6E16               	movwf	___awmod@divisor+1,c
  2832  001342  0E64               	movlw	100
  2833  001344  6E15               	movwf	___awmod@divisor,c
  2834  001346  503C               	movf	scale@scl,w,c
  2835  001348  6E13               	movwf	___awmod@dividend,c
  2836  00134A  6A14               	clrf	___awmod@dividend+1,c
  2837  00134C  BE13               	btfsc	___awmod@dividend,7,c
  2838  00134E  0614               	decf	___awmod@dividend+1,f,c
  2839  001350  EC1F  F013         	call	___awmod	;wreg free
  2840  001354  C013  F019         	movff	?___awmod,___awdiv@dividend
  2841  001358  C014  F01A         	movff	?___awmod+1,___awdiv@dividend+1
  2842  00135C  EC23  F012         	call	___awdiv	;wreg free
  2843  001360  0E09               	movlw	9
  2844  001362  2419               	addwf	?___awdiv,w,c
  2845  001364  6E21               	movwf	___wmul@multiplier,c
  2846  001366  0E00               	movlw	0
  2847  001368  201A               	addwfc	?___awdiv+1,w,c
  2848  00136A  6E22               	movwf	___wmul@multiplier+1,c
  2849  00136C  EC9C  F014         	call	___wmul	;wreg free
  2850  001370  0E29               	movlw	low __powers_
  2851  001372  2421               	addwf	?___wmul,w,c
  2852  001374  6EF6               	movwf	tblptrl,c
  2853  001376  0E08               	movlw	high __powers_
  2854  001378  2022               	addwfc	?___wmul+1,w,c
  2855  00137A  6EF7               	movwf	tblptrh,c
  2856  00137C                     	if	0	;There are less than 3 active tblptr bytes
  2857  00137C                     	endif
  2858  00137C  0009               	tblrd		*+
  2859  00137E  CFF5 F02A          	movff	tablat,___ftmul@f2
  2860  001382  0009               	tblrd		*+
  2861  001384  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  2862  001388  000A               	tblrd		*-
  2863  00138A  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  2864  00138E  0E00               	movlw	0
  2865  001390  6E1C               	movwf	___awdiv@divisor+1,c
  2866  001392  0E64               	movlw	100
  2867  001394  6E1B               	movwf	___awdiv@divisor,c
  2868  001396  503C               	movf	scale@scl,w,c
  2869  001398  6E19               	movwf	___awdiv@dividend,c
  2870  00139A  6A1A               	clrf	___awdiv@dividend+1,c
  2871  00139C  BE19               	btfsc	___awdiv@dividend,7,c
  2872  00139E  061A               	decf	___awdiv@dividend+1,f,c
  2873  0013A0  EC23  F012         	call	___awdiv	;wreg free
  2874  0013A4  0E12               	movlw	18
  2875  0013A6  2419               	addwf	?___awdiv,w,c
  2876  0013A8  6E21               	movwf	___wmul@multiplier,c
  2877  0013AA  0E00               	movlw	0
  2878  0013AC  201A               	addwfc	?___awdiv+1,w,c
  2879  0013AE  6E22               	movwf	___wmul@multiplier+1,c
  2880  0013B0  0E00               	movlw	0
  2881  0013B2  6E24               	movwf	___wmul@multiplicand+1,c
  2882  0013B4  0E03               	movlw	3
  2883  0013B6  6E23               	movwf	___wmul@multiplicand,c
  2884  0013B8  EC9C  F014         	call	___wmul	;wreg free
  2885  0013BC  0E29               	movlw	low __powers_
  2886  0013BE  2421               	addwf	?___wmul,w,c
  2887  0013C0  6EF6               	movwf	tblptrl,c
  2888  0013C2  0E08               	movlw	high __powers_
  2889  0013C4  2022               	addwfc	?___wmul+1,w,c
  2890  0013C6  6EF7               	movwf	tblptrh,c
  2891  0013C8                     	if	0	;There are less than 3 active tblptr bytes
  2892  0013C8                     	endif
  2893  0013C8  0009               	tblrd		*+
  2894  0013CA  CFF5 F027          	movff	tablat,___ftmul@f1
  2895  0013CE  0009               	tblrd		*+
  2896  0013D0  CFF5 F028          	movff	tablat,___ftmul@f1+1
  2897  0013D4  000A               	tblrd		*-
  2898  0013D6  CFF5 F029          	movff	tablat,___ftmul@f1+2
  2899  0013DA  EC77  F00F         	call	___ftmul	;wreg free
  2900  0013DE  C027  F039         	movff	?___ftmul,_scale$1618
  2901  0013E2  C028  F03A         	movff	?___ftmul+1,_scale$1618+1
  2902  0013E6  C029  F03B         	movff	?___ftmul+2,_scale$1618+2
  2903                           
  2904                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2905  0013EA  C039  F027         	movff	_scale$1618,___ftmul@f1
  2906  0013EE  C03A  F028         	movff	_scale$1618+1,___ftmul@f1+1
  2907  0013F2  C03B  F029         	movff	_scale$1618+2,___ftmul@f1+2
  2908  0013F6  0E00               	movlw	0
  2909  0013F8  6E24               	movwf	___wmul@multiplicand+1,c
  2910  0013FA  0E03               	movlw	3
  2911  0013FC  6E23               	movwf	___wmul@multiplicand,c
  2912  0013FE  0E00               	movlw	0
  2913  001400  6E16               	movwf	___awmod@divisor+1,c
  2914  001402  0E0A               	movlw	10
  2915  001404  6E15               	movwf	___awmod@divisor,c
  2916  001406  503C               	movf	scale@scl,w,c
  2917  001408  6E13               	movwf	___awmod@dividend,c
  2918  00140A  6A14               	clrf	___awmod@dividend+1,c
  2919  00140C  BE13               	btfsc	___awmod@dividend,7,c
  2920  00140E  0614               	decf	___awmod@dividend+1,f,c
  2921  001410  EC1F  F013         	call	___awmod	;wreg free
  2922  001414  C013  F021         	movff	?___awmod,___wmul@multiplier
  2923  001418  C014  F022         	movff	?___awmod+1,___wmul@multiplier+1
  2924  00141C  EC9C  F014         	call	___wmul	;wreg free
  2925  001420  0E29               	movlw	low __powers_
  2926  001422  2421               	addwf	?___wmul,w,c
  2927  001424  6EF6               	movwf	tblptrl,c
  2928  001426  0E08               	movlw	high __powers_
  2929  001428  2022               	addwfc	?___wmul+1,w,c
  2930  00142A  6EF7               	movwf	tblptrh,c
  2931  00142C                     	if	0	;There are less than 3 active tblptr bytes
  2932  00142C                     	endif
  2933  00142C  0009               	tblrd		*+
  2934  00142E  CFF5 F02A          	movff	tablat,___ftmul@f2
  2935  001432  0009               	tblrd		*+
  2936  001434  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  2937  001438  000A               	tblrd		*-
  2938  00143A  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  2939  00143E  EC77  F00F         	call	___ftmul	;wreg free
  2940  001442  C027  F036         	movff	?___ftmul,?_scale
  2941  001446  C028  F037         	movff	?___ftmul+1,?_scale+1
  2942  00144A  C029  F038         	movff	?___ftmul+2,?_scale+2
  2943  00144E  0012               	return	
  2944  001450                     l280:
  2945                           
  2946                           ;doprnt.c: 438: else if(scl > 10)
  2947  001450  503C               	movf	scale@scl,w,c
  2948  001452  0A80               	xorlw	128
  2949  001454  0F75               	addlw	-139
  2950  001456  A0D8               	btfss	status,0,c
  2951  001458  D053               	goto	l282
  2952                           
  2953                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  2954  00145A  0E00               	movlw	0
  2955  00145C  6E1C               	movwf	___awdiv@divisor+1,c
  2956  00145E  0E0A               	movlw	10
  2957  001460  6E1B               	movwf	___awdiv@divisor,c
  2958  001462  503C               	movf	scale@scl,w,c
  2959  001464  6E19               	movwf	___awdiv@dividend,c
  2960  001466  6A1A               	clrf	___awdiv@dividend+1,c
  2961  001468  BE19               	btfsc	___awdiv@dividend,7,c
  2962  00146A  061A               	decf	___awdiv@dividend+1,f,c
  2963  00146C  EC23  F012         	call	___awdiv	;wreg free
  2964  001470  0E09               	movlw	9
  2965  001472  2419               	addwf	?___awdiv,w,c
  2966  001474  6E21               	movwf	___wmul@multiplier,c
  2967  001476  0E00               	movlw	0
  2968  001478  201A               	addwfc	?___awdiv+1,w,c
  2969  00147A  6E22               	movwf	___wmul@multiplier+1,c
  2970  00147C  0E00               	movlw	0
  2971  00147E  6E24               	movwf	___wmul@multiplicand+1,c
  2972  001480  0E03               	movlw	3
  2973  001482  6E23               	movwf	___wmul@multiplicand,c
  2974  001484  EC9C  F014         	call	___wmul	;wreg free
  2975  001488  0E29               	movlw	low __powers_
  2976  00148A  2421               	addwf	?___wmul,w,c
  2977  00148C  6EF6               	movwf	tblptrl,c
  2978  00148E  0E08               	movlw	high __powers_
  2979  001490  2022               	addwfc	?___wmul+1,w,c
  2980  001492  6EF7               	movwf	tblptrh,c
  2981  001494                     	if	0	;There are less than 3 active tblptr bytes
  2982  001494                     	endif
  2983  001494  0009               	tblrd		*+
  2984  001496  CFF5 F027          	movff	tablat,___ftmul@f1
  2985  00149A  0009               	tblrd		*+
  2986  00149C  CFF5 F028          	movff	tablat,___ftmul@f1+1
  2987  0014A0  000A               	tblrd		*-
  2988  0014A2  CFF5 F029          	movff	tablat,___ftmul@f1+2
  2989  0014A6  0E00               	movlw	0
  2990  0014A8  6E24               	movwf	___wmul@multiplicand+1,c
  2991  0014AA  0E03               	movlw	3
  2992  0014AC  6E23               	movwf	___wmul@multiplicand,c
  2993  0014AE  0E00               	movlw	0
  2994  0014B0  6E16               	movwf	___awmod@divisor+1,c
  2995  0014B2  0E0A               	movlw	10
  2996  0014B4  6E15               	movwf	___awmod@divisor,c
  2997  0014B6  503C               	movf	scale@scl,w,c
  2998  0014B8  6E13               	movwf	___awmod@dividend,c
  2999  0014BA  6A14               	clrf	___awmod@dividend+1,c
  3000  0014BC  BE13               	btfsc	___awmod@dividend,7,c
  3001  0014BE  0614               	decf	___awmod@dividend+1,f,c
  3002  0014C0  EC1F  F013         	call	___awmod	;wreg free
  3003  0014C4  C013  F021         	movff	?___awmod,___wmul@multiplier
  3004  0014C8  C014  F022         	movff	?___awmod+1,___wmul@multiplier+1
  3005  0014CC  EC9C  F014         	call	___wmul	;wreg free
  3006  0014D0  0E29               	movlw	low __powers_
  3007  0014D2  2421               	addwf	?___wmul,w,c
  3008  0014D4  6EF6               	movwf	tblptrl,c
  3009  0014D6  0E08               	movlw	high __powers_
  3010  0014D8  2022               	addwfc	?___wmul+1,w,c
  3011  0014DA  6EF7               	movwf	tblptrh,c
  3012  0014DC                     	if	0	;There are less than 3 active tblptr bytes
  3013  0014DC                     	endif
  3014  0014DC  0009               	tblrd		*+
  3015  0014DE  CFF5 F02A          	movff	tablat,___ftmul@f2
  3016  0014E2  0009               	tblrd		*+
  3017  0014E4  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  3018  0014E8  000A               	tblrd		*-
  3019  0014EA  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  3020  0014EE  EC77  F00F         	call	___ftmul	;wreg free
  3021  0014F2  C027  F036         	movff	?___ftmul,?_scale
  3022  0014F6  C028  F037         	movff	?___ftmul+1,?_scale+1
  3023  0014FA  C029  F038         	movff	?___ftmul+2,?_scale+2
  3024  0014FE  0012               	return	
  3025  001500                     l282:
  3026                           
  3027                           ;doprnt.c: 440: return _powers_[scl];
  3028  001500  503C               	movf	scale@scl,w,c
  3029  001502  0D03               	mullw	3
  3030  001504  0E29               	movlw	low __powers_
  3031  001506  24F3               	addwf	prodl,w,c
  3032  001508  6EF6               	movwf	tblptrl,c
  3033  00150A  0E08               	movlw	high __powers_
  3034  00150C  20F4               	addwfc	prodh,w,c
  3035  00150E  6EF7               	movwf	tblptrh,c
  3036  001510                     	if	0	;There are less than 3 active tblptr bytes
  3037  001510                     	endif
  3038  001510  0009               	tblrd		*+
  3039  001512  CFF5 F036          	movff	tablat,?_scale
  3040  001516  0009               	tblrd		*+
  3041  001518  CFF5 F037          	movff	tablat,?_scale+1
  3042  00151C  000A               	tblrd		*-
  3043  00151E  CFF5 F038          	movff	tablat,?_scale+2
  3044  001522  0012               	return	
  3045  001524                     __end_of_scale:
  3046                           	opt stack 0
  3047                           tblptru	equ	0xFF8
  3048                           tblptrh	equ	0xFF7
  3049                           tblptrl	equ	0xFF6
  3050                           tablat	equ	0xFF5
  3051                           prodh	equ	0xFF4
  3052                           prodl	equ	0xFF3
  3053                           wreg	equ	0xFE8
  3054                           indf2	equ	0xFDF
  3055                           postinc2	equ	0xFDE
  3056                           postdec2	equ	0xFDD
  3057                           fsr2h	equ	0xFDA
  3058                           fsr2l	equ	0xFD9
  3059                           status	equ	0xFD8
  3060                           
  3061 ;; *************** function _isdigit *****************
  3062 ;; Defined at:
  3063 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  3064 ;; Parameters:    Size  Location     Type
  3065 ;;  c               1    wreg     unsigned char 
  3066 ;; Auto vars:     Size  Location     Type
  3067 ;;  c               1   20[COMRAM] unsigned char 
  3068 ;; Return value:  Size  Location     Type
  3069 ;;		None               void
  3070 ;; Registers used:
  3071 ;;		wreg, status,2, status,0
  3072 ;; Tracked objects:
  3073 ;;		On entry : 0/0
  3074 ;;		On exit  : 0/0
  3075 ;;		Unchanged: 0/0
  3076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3077 ;;      Params:         0       0       0       0       0       0       0       0       0
  3078 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3079 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3080 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3081 ;;Total ram usage:        3 bytes
  3082 ;; Hardware stack levels used:    1
  3083 ;; Hardware stack levels required when called:    1
  3084 ;; This function calls:
  3085 ;;		Nothing
  3086 ;; This function is called by:
  3087 ;;		_sprintf
  3088 ;; This function uses a non-reentrant model
  3089 ;;
  3090                           
  3091                           	psect	text3
  3092  0029CA                     __ptext3:
  3093                           	opt stack 0
  3094  0029CA                     _isdigit:
  3095                           	opt stack 28
  3096                           
  3097                           ;incstack = 0
  3098                           ;isdigit@c stored from wreg
  3099  0029CA  6E15               	movwf	isdigit@c,c
  3100  0029CC  0E00               	movlw	0
  3101  0029CE  6E14               	movwf	_isdigit$1257,c
  3102  0029D0  0E3A               	movlw	58
  3103  0029D2  6015               	cpfslt	isdigit@c,c
  3104  0029D4  D005               	goto	l724
  3105  0029D6  0E2F               	movlw	47
  3106  0029D8  6415               	cpfsgt	isdigit@c,c
  3107  0029DA  D002               	goto	l724
  3108  0029DC  0E01               	movlw	1
  3109  0029DE  6E14               	movwf	_isdigit$1257,c
  3110  0029E0                     l724:
  3111  0029E0  C014  F013         	movff	_isdigit$1257,??_isdigit
  3112  0029E4  3013               	rrcf	??_isdigit,w,c
  3113  0029E6  0012               	return	
  3114  0029E8                     __end_of_isdigit:
  3115                           	opt stack 0
  3116                           tblptru	equ	0xFF8
  3117                           tblptrh	equ	0xFF7
  3118                           tblptrl	equ	0xFF6
  3119                           tablat	equ	0xFF5
  3120                           prodh	equ	0xFF4
  3121                           prodl	equ	0xFF3
  3122                           wreg	equ	0xFE8
  3123                           indf2	equ	0xFDF
  3124                           postinc2	equ	0xFDE
  3125                           postdec2	equ	0xFDD
  3126                           fsr2h	equ	0xFDA
  3127                           fsr2l	equ	0xFD9
  3128                           status	equ	0xFD8
  3129                           
  3130 ;; *************** function _fround *****************
  3131 ;; Defined at:
  3132 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  3133 ;; Parameters:    Size  Location     Type
  3134 ;;  prec            1    wreg     unsigned char 
  3135 ;; Auto vars:     Size  Location     Type
  3136 ;;  prec            1   62[COMRAM] unsigned char 
  3137 ;; Return value:  Size  Location     Type
  3138 ;;                  3   53[COMRAM] unsigned char 
  3139 ;; Registers used:
  3140 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3141 ;; Tracked objects:
  3142 ;;		On entry : 0/0
  3143 ;;		On exit  : 0/0
  3144 ;;		Unchanged: 0/0
  3145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3146 ;;      Params:         3       0       0       0       0       0       0       0       0
  3147 ;;      Locals:         7       0       0       0       0       0       0       0       0
  3148 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3149 ;;      Totals:        10       0       0       0       0       0       0       0       0
  3150 ;;Total ram usage:       10 bytes
  3151 ;; Hardware stack levels used:    1
  3152 ;; Hardware stack levels required when called:    3
  3153 ;; This function calls:
  3154 ;;		___awdiv
  3155 ;;		___awmod
  3156 ;;		___ftmul
  3157 ;;		___wmul
  3158 ;; This function is called by:
  3159 ;;		_sprintf
  3160 ;; This function uses a non-reentrant model
  3161 ;;
  3162                           
  3163                           	psect	text4
  3164  001524                     __ptext4:
  3165                           	opt stack 0
  3166  001524                     _fround:
  3167                           	opt stack 26
  3168                           
  3169                           ;incstack = 0
  3170                           ;fround@prec stored from wreg
  3171  001524  6E3F               	movwf	fround@prec,c
  3172                           
  3173                           ;doprnt.c: 413: if(prec>=110)
  3174  001526  0E6D               	movlw	109
  3175  001528  643F               	cpfsgt	fround@prec,c
  3176  00152A  D09F               	goto	l269
  3177                           
  3178                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3179  00152C  0E00               	movlw	0
  3180  00152E  6E24               	movwf	___wmul@multiplicand+1,c
  3181  001530  0E03               	movlw	3
  3182  001532  6E23               	movwf	___wmul@multiplicand,c
  3183  001534  0E00               	movlw	0
  3184  001536  6E1C               	movwf	___awdiv@divisor+1,c
  3185  001538  0E0A               	movlw	10
  3186  00153A  6E1B               	movwf	___awdiv@divisor,c
  3187  00153C  0E00               	movlw	0
  3188  00153E  6E16               	movwf	___awmod@divisor+1,c
  3189  001540  0E64               	movlw	100
  3190  001542  6E15               	movwf	___awmod@divisor,c
  3191  001544  C03F  F013         	movff	fround@prec,___awmod@dividend
  3192  001548  6A14               	clrf	___awmod@dividend+1,c
  3193  00154A  EC1F  F013         	call	___awmod	;wreg free
  3194  00154E  C013  F019         	movff	?___awmod,___awdiv@dividend
  3195  001552  C014  F01A         	movff	?___awmod+1,___awdiv@dividend+1
  3196  001556  EC23  F012         	call	___awdiv	;wreg free
  3197  00155A  0E09               	movlw	9
  3198  00155C  2419               	addwf	?___awdiv,w,c
  3199  00155E  6E21               	movwf	___wmul@multiplier,c
  3200  001560  0E00               	movlw	0
  3201  001562  201A               	addwfc	?___awdiv+1,w,c
  3202  001564  6E22               	movwf	___wmul@multiplier+1,c
  3203  001566  EC9C  F014         	call	___wmul	;wreg free
  3204  00156A  0E50               	movlw	low __npowers_
  3205  00156C  2421               	addwf	?___wmul,w,c
  3206  00156E  6EF6               	movwf	tblptrl,c
  3207  001570  0E08               	movlw	high __npowers_
  3208  001572  2022               	addwfc	?___wmul+1,w,c
  3209  001574  6EF7               	movwf	tblptrh,c
  3210  001576                     	if	0	;There are less than 3 active tblptr bytes
  3211  001576                     	endif
  3212  001576  0009               	tblrd		*+
  3213  001578  CFF5 F02A          	movff	tablat,___ftmul@f2
  3214  00157C  0009               	tblrd		*+
  3215  00157E  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  3216  001582  000A               	tblrd		*-
  3217  001584  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  3218  001588  0E00               	movlw	0
  3219  00158A  6E1C               	movwf	___awdiv@divisor+1,c
  3220  00158C  0E64               	movlw	100
  3221  00158E  6E1B               	movwf	___awdiv@divisor,c
  3222  001590  C03F  F019         	movff	fround@prec,___awdiv@dividend
  3223  001594  6A1A               	clrf	___awdiv@dividend+1,c
  3224  001596  EC23  F012         	call	___awdiv	;wreg free
  3225  00159A  0E12               	movlw	18
  3226  00159C  2419               	addwf	?___awdiv,w,c
  3227  00159E  6E21               	movwf	___wmul@multiplier,c
  3228  0015A0  0E00               	movlw	0
  3229  0015A2  201A               	addwfc	?___awdiv+1,w,c
  3230  0015A4  6E22               	movwf	___wmul@multiplier+1,c
  3231  0015A6  0E00               	movlw	0
  3232  0015A8  6E24               	movwf	___wmul@multiplicand+1,c
  3233  0015AA  0E03               	movlw	3
  3234  0015AC  6E23               	movwf	___wmul@multiplicand,c
  3235  0015AE  EC9C  F014         	call	___wmul	;wreg free
  3236  0015B2  0E50               	movlw	low __npowers_
  3237  0015B4  2421               	addwf	?___wmul,w,c
  3238  0015B6  6EF6               	movwf	tblptrl,c
  3239  0015B8  0E08               	movlw	high __npowers_
  3240  0015BA  2022               	addwfc	?___wmul+1,w,c
  3241  0015BC  6EF7               	movwf	tblptrh,c
  3242  0015BE                     	if	0	;There are less than 3 active tblptr bytes
  3243  0015BE                     	endif
  3244  0015BE  0009               	tblrd		*+
  3245  0015C0  CFF5 F027          	movff	tablat,___ftmul@f1
  3246  0015C4  0009               	tblrd		*+
  3247  0015C6  CFF5 F028          	movff	tablat,___ftmul@f1+1
  3248  0015CA  000A               	tblrd		*-
  3249  0015CC  CFF5 F029          	movff	tablat,___ftmul@f1+2
  3250  0015D0  EC77  F00F         	call	___ftmul	;wreg free
  3251  0015D4  C027  F03C         	movff	?___ftmul,_fround$1616
  3252  0015D8  C028  F03D         	movff	?___ftmul+1,_fround$1616+1
  3253  0015DC  C029  F03E         	movff	?___ftmul+2,_fround$1616+2
  3254                           
  3255                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3256  0015E0  0E00               	movlw	0
  3257  0015E2  6E24               	movwf	___wmul@multiplicand+1,c
  3258  0015E4  0E03               	movlw	3
  3259  0015E6  6E23               	movwf	___wmul@multiplicand,c
  3260  0015E8  0E00               	movlw	0
  3261  0015EA  6E16               	movwf	___awmod@divisor+1,c
  3262  0015EC  0E0A               	movlw	10
  3263  0015EE  6E15               	movwf	___awmod@divisor,c
  3264  0015F0  C03F  F013         	movff	fround@prec,___awmod@dividend
  3265  0015F4  6A14               	clrf	___awmod@dividend+1,c
  3266  0015F6  EC1F  F013         	call	___awmod	;wreg free
  3267  0015FA  C013  F021         	movff	?___awmod,___wmul@multiplier
  3268  0015FE  C014  F022         	movff	?___awmod+1,___wmul@multiplier+1
  3269  001602  EC9C  F014         	call	___wmul	;wreg free
  3270  001606  0E50               	movlw	low __npowers_
  3271  001608  2421               	addwf	?___wmul,w,c
  3272  00160A  6EF6               	movwf	tblptrl,c
  3273  00160C  0E08               	movlw	high __npowers_
  3274  00160E  2022               	addwfc	?___wmul+1,w,c
  3275  001610  6EF7               	movwf	tblptrh,c
  3276  001612                     	if	0	;There are less than 3 active tblptr bytes
  3277  001612                     	endif
  3278  001612  0009               	tblrd		*+
  3279  001614  CFF5 F02A          	movff	tablat,___ftmul@f2
  3280  001618  0009               	tblrd		*+
  3281  00161A  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  3282  00161E  000A               	tblrd		*-
  3283  001620  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  3284  001624  C03C  F027         	movff	_fround$1616,___ftmul@f1
  3285  001628  C03D  F028         	movff	_fround$1616+1,___ftmul@f1+1
  3286  00162C  C03E  F029         	movff	_fround$1616+2,___ftmul@f1+2
  3287  001630  EC77  F00F         	call	___ftmul	;wreg free
  3288  001634  C027  F039         	movff	?___ftmul,_fround$1617
  3289  001638  C028  F03A         	movff	?___ftmul+1,_fround$1617+1
  3290  00163C  C029  F03B         	movff	?___ftmul+2,_fround$1617+2
  3291                           
  3292                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3293  001640  C039  F027         	movff	_fround$1617,___ftmul@f1
  3294  001644  C03A  F028         	movff	_fround$1617+1,___ftmul@f1+1
  3295  001648  C03B  F029         	movff	_fround$1617+2,___ftmul@f1+2
  3296  00164C  0E00               	movlw	0
  3297  00164E  6E2A               	movwf	___ftmul@f2,c
  3298  001650  0E00               	movlw	0
  3299  001652  6E2B               	movwf	___ftmul@f2+1,c
  3300  001654  0E3F               	movlw	63
  3301  001656  6E2C               	movwf	___ftmul@f2+2,c
  3302  001658  EC77  F00F         	call	___ftmul	;wreg free
  3303  00165C  C027  F036         	movff	?___ftmul,?_fround
  3304  001660  C028  F037         	movff	?___ftmul+1,?_fround+1
  3305  001664  C029  F038         	movff	?___ftmul+2,?_fround+2
  3306  001668  0012               	return	
  3307  00166A                     l269:
  3308                           
  3309                           ;doprnt.c: 415: else if(prec > 10)
  3310  00166A  0E0A               	movlw	10
  3311  00166C  643F               	cpfsgt	fround@prec,c
  3312  00166E  D063               	goto	l272
  3313                           
  3314                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3315  001670  0E00               	movlw	0
  3316  001672  6E24               	movwf	___wmul@multiplicand+1,c
  3317  001674  0E03               	movlw	3
  3318  001676  6E23               	movwf	___wmul@multiplicand,c
  3319  001678  0E00               	movlw	0
  3320  00167A  6E16               	movwf	___awmod@divisor+1,c
  3321  00167C  0E0A               	movlw	10
  3322  00167E  6E15               	movwf	___awmod@divisor,c
  3323  001680  C03F  F013         	movff	fround@prec,___awmod@dividend
  3324  001684  6A14               	clrf	___awmod@dividend+1,c
  3325  001686  EC1F  F013         	call	___awmod	;wreg free
  3326  00168A  C013  F021         	movff	?___awmod,___wmul@multiplier
  3327  00168E  C014  F022         	movff	?___awmod+1,___wmul@multiplier+1
  3328  001692  EC9C  F014         	call	___wmul	;wreg free
  3329  001696  0E50               	movlw	low __npowers_
  3330  001698  2421               	addwf	?___wmul,w,c
  3331  00169A  6EF6               	movwf	tblptrl,c
  3332  00169C  0E08               	movlw	high __npowers_
  3333  00169E  2022               	addwfc	?___wmul+1,w,c
  3334  0016A0  6EF7               	movwf	tblptrh,c
  3335  0016A2                     	if	0	;There are less than 3 active tblptr bytes
  3336  0016A2                     	endif
  3337  0016A2  0009               	tblrd		*+
  3338  0016A4  CFF5 F02A          	movff	tablat,___ftmul@f2
  3339  0016A8  0009               	tblrd		*+
  3340  0016AA  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  3341  0016AE  000A               	tblrd		*-
  3342  0016B0  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  3343  0016B4  0E00               	movlw	0
  3344  0016B6  6E1C               	movwf	___awdiv@divisor+1,c
  3345  0016B8  0E0A               	movlw	10
  3346  0016BA  6E1B               	movwf	___awdiv@divisor,c
  3347  0016BC  C03F  F019         	movff	fround@prec,___awdiv@dividend
  3348  0016C0  6A1A               	clrf	___awdiv@dividend+1,c
  3349  0016C2  EC23  F012         	call	___awdiv	;wreg free
  3350  0016C6  0E09               	movlw	9
  3351  0016C8  2419               	addwf	?___awdiv,w,c
  3352  0016CA  6E21               	movwf	___wmul@multiplier,c
  3353  0016CC  0E00               	movlw	0
  3354  0016CE  201A               	addwfc	?___awdiv+1,w,c
  3355  0016D0  6E22               	movwf	___wmul@multiplier+1,c
  3356  0016D2  0E00               	movlw	0
  3357  0016D4  6E24               	movwf	___wmul@multiplicand+1,c
  3358  0016D6  0E03               	movlw	3
  3359  0016D8  6E23               	movwf	___wmul@multiplicand,c
  3360  0016DA  EC9C  F014         	call	___wmul	;wreg free
  3361  0016DE  0E50               	movlw	low __npowers_
  3362  0016E0  2421               	addwf	?___wmul,w,c
  3363  0016E2  6EF6               	movwf	tblptrl,c
  3364  0016E4  0E08               	movlw	high __npowers_
  3365  0016E6  2022               	addwfc	?___wmul+1,w,c
  3366  0016E8  6EF7               	movwf	tblptrh,c
  3367  0016EA                     	if	0	;There are less than 3 active tblptr bytes
  3368  0016EA                     	endif
  3369  0016EA  0009               	tblrd		*+
  3370  0016EC  CFF5 F027          	movff	tablat,___ftmul@f1
  3371  0016F0  0009               	tblrd		*+
  3372  0016F2  CFF5 F028          	movff	tablat,___ftmul@f1+1
  3373  0016F6  000A               	tblrd		*-
  3374  0016F8  CFF5 F029          	movff	tablat,___ftmul@f1+2
  3375  0016FC  EC77  F00F         	call	___ftmul	;wreg free
  3376  001700  C027  F03C         	movff	?___ftmul,_fround$1616
  3377  001704  C028  F03D         	movff	?___ftmul+1,_fround$1616+1
  3378  001708  C029  F03E         	movff	?___ftmul+2,_fround$1616+2
  3379                           
  3380                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3381  00170C  C03C  F027         	movff	_fround$1616,___ftmul@f1
  3382  001710  C03D  F028         	movff	_fround$1616+1,___ftmul@f1+1
  3383  001714  C03E  F029         	movff	_fround$1616+2,___ftmul@f1+2
  3384  001718  0E00               	movlw	0
  3385  00171A  6E2A               	movwf	___ftmul@f2,c
  3386  00171C  0E00               	movlw	0
  3387  00171E  6E2B               	movwf	___ftmul@f2+1,c
  3388  001720  0E3F               	movlw	63
  3389  001722  6E2C               	movwf	___ftmul@f2+2,c
  3390  001724  EC77  F00F         	call	___ftmul	;wreg free
  3391  001728  C027  F036         	movff	?___ftmul,?_fround
  3392  00172C  C028  F037         	movff	?___ftmul+1,?_fround+1
  3393  001730  C029  F038         	movff	?___ftmul+2,?_fround+2
  3394  001734  0012               	return	
  3395  001736                     l272:
  3396                           
  3397                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3398  001736  503F               	movf	fround@prec,w,c
  3399  001738  0D03               	mullw	3
  3400  00173A  0E50               	movlw	low __npowers_
  3401  00173C  24F3               	addwf	prodl,w,c
  3402  00173E  6EF6               	movwf	tblptrl,c
  3403  001740  0E08               	movlw	high __npowers_
  3404  001742  20F4               	addwfc	prodh,w,c
  3405  001744  6EF7               	movwf	tblptrh,c
  3406  001746                     	if	0	;There are less than 3 active tblptr bytes
  3407  001746                     	endif
  3408  001746  0009               	tblrd		*+
  3409  001748  CFF5 F027          	movff	tablat,___ftmul@f1
  3410  00174C  0009               	tblrd		*+
  3411  00174E  CFF5 F028          	movff	tablat,___ftmul@f1+1
  3412  001752  000A               	tblrd		*-
  3413  001754  CFF5 F029          	movff	tablat,___ftmul@f1+2
  3414  001758  0E00               	movlw	0
  3415  00175A  6E2A               	movwf	___ftmul@f2,c
  3416  00175C  0E00               	movlw	0
  3417  00175E  6E2B               	movwf	___ftmul@f2+1,c
  3418  001760  0E3F               	movlw	63
  3419  001762  6E2C               	movwf	___ftmul@f2+2,c
  3420  001764  EC77  F00F         	call	___ftmul	;wreg free
  3421  001768  C027  F036         	movff	?___ftmul,?_fround
  3422  00176C  C028  F037         	movff	?___ftmul+1,?_fround+1
  3423  001770  C029  F038         	movff	?___ftmul+2,?_fround+2
  3424  001774  0012               	return	
  3425  001776                     __end_of_fround:
  3426                           	opt stack 0
  3427                           tblptru	equ	0xFF8
  3428                           tblptrh	equ	0xFF7
  3429                           tblptrl	equ	0xFF6
  3430                           tablat	equ	0xFF5
  3431                           prodh	equ	0xFF4
  3432                           prodl	equ	0xFF3
  3433                           wreg	equ	0xFE8
  3434                           indf2	equ	0xFDF
  3435                           postinc2	equ	0xFDE
  3436                           postdec2	equ	0xFDD
  3437                           fsr2h	equ	0xFDA
  3438                           fsr2l	equ	0xFD9
  3439                           status	equ	0xFD8
  3440                           
  3441 ;; *************** function ___wmul *****************
  3442 ;; Defined at:
  3443 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  3444 ;; Parameters:    Size  Location     Type
  3445 ;;  multiplier      2   32[COMRAM] unsigned int 
  3446 ;;  multiplicand    2   34[COMRAM] unsigned int 
  3447 ;; Auto vars:     Size  Location     Type
  3448 ;;  product         2   36[COMRAM] unsigned int 
  3449 ;; Return value:  Size  Location     Type
  3450 ;;                  2   32[COMRAM] unsigned int 
  3451 ;; Registers used:
  3452 ;;		wreg, status,2, status,0, prodl, prodh
  3453 ;; Tracked objects:
  3454 ;;		On entry : 0/0
  3455 ;;		On exit  : 0/0
  3456 ;;		Unchanged: 0/0
  3457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3458 ;;      Params:         4       0       0       0       0       0       0       0       0
  3459 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3460 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3461 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3462 ;;Total ram usage:        6 bytes
  3463 ;; Hardware stack levels used:    1
  3464 ;; Hardware stack levels required when called:    1
  3465 ;; This function calls:
  3466 ;;		Nothing
  3467 ;; This function is called by:
  3468 ;;		_fround
  3469 ;;		_scale
  3470 ;;		_sprintf
  3471 ;; This function uses a non-reentrant model
  3472 ;;
  3473                           
  3474                           	psect	text5
  3475  002938                     __ptext5:
  3476                           	opt stack 0
  3477  002938                     ___wmul:
  3478                           	opt stack 27
  3479                           
  3480                           ;incstack = 0
  3481  002938  5021               	movf	___wmul@multiplier,w,c
  3482  00293A  0223               	mulwf	___wmul@multiplicand,c
  3483  00293C  CFF3 F025          	movff	prodl,___wmul@product
  3484  002940  CFF4 F026          	movff	prodh,___wmul@product+1
  3485  002944  5021               	movf	___wmul@multiplier,w,c
  3486  002946  0224               	mulwf	___wmul@multiplicand+1,c
  3487  002948  50F3               	movf	prodl,w,c
  3488  00294A  2626               	addwf	___wmul@product+1,f,c
  3489  00294C  5022               	movf	___wmul@multiplier+1,w,c
  3490  00294E  0223               	mulwf	___wmul@multiplicand,c
  3491  002950  50F3               	movf	prodl,w,c
  3492  002952  2626               	addwf	___wmul@product+1,f,c
  3493  002954  C025  F021         	movff	___wmul@product,?___wmul
  3494  002958  C026  F022         	movff	___wmul@product+1,?___wmul+1
  3495  00295C  0012               	return	
  3496  00295E                     __end_of___wmul:
  3497                           	opt stack 0
  3498                           tblptru	equ	0xFF8
  3499                           tblptrh	equ	0xFF7
  3500                           tblptrl	equ	0xFF6
  3501                           tablat	equ	0xFF5
  3502                           prodh	equ	0xFF4
  3503                           prodl	equ	0xFF3
  3504                           wreg	equ	0xFE8
  3505                           indf2	equ	0xFDF
  3506                           postinc2	equ	0xFDE
  3507                           postdec2	equ	0xFDD
  3508                           fsr2h	equ	0xFDA
  3509                           fsr2l	equ	0xFD9
  3510                           status	equ	0xFD8
  3511                           
  3512 ;; *************** function ___ftmul *****************
  3513 ;; Defined at:
  3514 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  3515 ;; Parameters:    Size  Location     Type
  3516 ;;  f1              3   38[COMRAM] float 
  3517 ;;  f2              3   41[COMRAM] float 
  3518 ;; Auto vars:     Size  Location     Type
  3519 ;;  f3_as_produc    3   48[COMRAM] unsigned um
  3520 ;;  sign            1   52[COMRAM] unsigned char 
  3521 ;;  cntr            1   51[COMRAM] unsigned char 
  3522 ;;  exp             1   47[COMRAM] unsigned char 
  3523 ;; Return value:  Size  Location     Type
  3524 ;;                  3   38[COMRAM] float 
  3525 ;; Registers used:
  3526 ;;		wreg, status,2, status,0, cstack
  3527 ;; Tracked objects:
  3528 ;;		On entry : 0/0
  3529 ;;		On exit  : 0/0
  3530 ;;		Unchanged: 0/0
  3531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3532 ;;      Params:         6       0       0       0       0       0       0       0       0
  3533 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3534 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3535 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3536 ;;Total ram usage:       15 bytes
  3537 ;; Hardware stack levels used:    1
  3538 ;; Hardware stack levels required when called:    2
  3539 ;; This function calls:
  3540 ;;		___ftpack
  3541 ;; This function is called by:
  3542 ;;		_main
  3543 ;;		_fround
  3544 ;;		_scale
  3545 ;;		_sprintf
  3546 ;; This function uses a non-reentrant model
  3547 ;;
  3548                           
  3549                           	psect	text6
  3550  001EEE                     __ptext6:
  3551                           	opt stack 0
  3552  001EEE                     ___ftmul:
  3553                           	opt stack 26
  3554                           
  3555                           ;incstack = 0
  3556  001EEE  C029  F02D         	movff	___ftmul@f1+2,??___ftmul
  3557  001EF2  6A2E               	clrf	(??___ftmul+1)& (0+255),c
  3558  001EF4  6A2F               	clrf	(??___ftmul+2)& (0+255),c
  3559  001EF6  3428               	rlcf	___ftmul@f1+1,w,c
  3560  001EF8  362D               	rlcf	??___ftmul& (0+255),f,c
  3561  001EFA  E301               	bnc	u2351
  3562  001EFC  802E               	bsf	(??___ftmul+1)& (0+255),0,c
  3563  001EFE                     u2351:
  3564  001EFE  502D               	movf	??___ftmul,w,c
  3565  001F00  6E30               	movwf	___ftmul@exp,c
  3566  001F02  5030               	movf	___ftmul@exp,w,c
  3567  001F04  A4D8               	btfss	status,2,c
  3568  001F06  D007               	goto	l688
  3569  001F08  0E00               	movlw	0
  3570  001F0A  6E27               	movwf	?___ftmul,c
  3571  001F0C  0E00               	movlw	0
  3572  001F0E  6E28               	movwf	?___ftmul+1,c
  3573  001F10  0E00               	movlw	0
  3574  001F12  6E29               	movwf	?___ftmul+2,c
  3575  001F14  0012               	return	
  3576  001F16                     l688:
  3577  001F16  C02C  F02D         	movff	___ftmul@f2+2,??___ftmul
  3578  001F1A  6A2E               	clrf	(??___ftmul+1)& (0+255),c
  3579  001F1C  6A2F               	clrf	(??___ftmul+2)& (0+255),c
  3580  001F1E  342B               	rlcf	___ftmul@f2+1,w,c
  3581  001F20  362D               	rlcf	??___ftmul& (0+255),f,c
  3582  001F22  E301               	bnc	u2371
  3583  001F24  802E               	bsf	(??___ftmul+1)& (0+255),0,c
  3584  001F26                     u2371:
  3585  001F26  502D               	movf	??___ftmul,w,c
  3586  001F28  6E35               	movwf	___ftmul@sign,c
  3587  001F2A  5035               	movf	___ftmul@sign,w,c
  3588  001F2C  A4D8               	btfss	status,2,c
  3589  001F2E  D007               	goto	l690
  3590  001F30  0E00               	movlw	0
  3591  001F32  6E27               	movwf	?___ftmul,c
  3592  001F34  0E00               	movlw	0
  3593  001F36  6E28               	movwf	?___ftmul+1,c
  3594  001F38  0E00               	movlw	0
  3595  001F3A  6E29               	movwf	?___ftmul+2,c
  3596  001F3C  0012               	return	
  3597  001F3E                     l690:
  3598  001F3E  5035               	movf	___ftmul@sign,w,c
  3599  001F40  0F7B               	addlw	123
  3600  001F42  2630               	addwf	___ftmul@exp,f,c
  3601  001F44  C029  F035         	movff	___ftmul@f1+2,___ftmul@sign
  3602  001F48  502C               	movf	___ftmul@f2+2,w,c
  3603  001F4A  1A35               	xorwf	___ftmul@sign,f,c
  3604  001F4C  0E80               	movlw	128
  3605  001F4E  1635               	andwf	___ftmul@sign,f,c
  3606  001F50  8E28               	bsf	___ftmul@f1+1,7,c
  3607  001F52  8E2B               	bsf	___ftmul@f2+1,7,c
  3608  001F54  0EFF               	movlw	255
  3609  001F56  162A               	andwf	___ftmul@f2,f,c
  3610  001F58  0EFF               	movlw	255
  3611  001F5A  162B               	andwf	___ftmul@f2+1,f,c
  3612  001F5C  0E00               	movlw	0
  3613  001F5E  162C               	andwf	___ftmul@f2+2,f,c
  3614  001F60  0E00               	movlw	0
  3615  001F62  6E31               	movwf	___ftmul@f3_as_product,c
  3616  001F64  0E00               	movlw	0
  3617  001F66  6E32               	movwf	___ftmul@f3_as_product+1,c
  3618  001F68  0E00               	movlw	0
  3619  001F6A  6E33               	movwf	___ftmul@f3_as_product+2,c
  3620  001F6C  0E07               	movlw	7
  3621  001F6E  6E34               	movwf	___ftmul@cntr,c
  3622  001F70  A027               	btfss	___ftmul@f1,0,c
  3623  001F72  D006               	goto	l692
  3624  001F74  502A               	movf	___ftmul@f2,w,c
  3625  001F76  2631               	addwf	___ftmul@f3_as_product,f,c
  3626  001F78  502B               	movf	___ftmul@f2+1,w,c
  3627  001F7A  2232               	addwfc	___ftmul@f3_as_product+1,f,c
  3628  001F7C  502C               	movf	___ftmul@f2+2,w,c
  3629  001F7E  2233               	addwfc	___ftmul@f3_as_product+2,f,c
  3630  001F80                     l692:
  3631  001F80  90D8               	bcf	status,0,c
  3632  001F82  3229               	rrcf	___ftmul@f1+2,f,c
  3633  001F84  3228               	rrcf	___ftmul@f1+1,f,c
  3634  001F86  3227               	rrcf	___ftmul@f1,f,c
  3635  001F88  90D8               	bcf	status,0,c
  3636  001F8A  362A               	rlcf	___ftmul@f2,f,c
  3637  001F8C  362B               	rlcf	___ftmul@f2+1,f,c
  3638  001F8E  362C               	rlcf	___ftmul@f2+2,f,c
  3639  001F90  2E34               	decfsz	___ftmul@cntr,f,c
  3640  001F92  D7EE               	goto	l691
  3641  001F94  0E09               	movlw	9
  3642  001F96  6E34               	movwf	___ftmul@cntr,c
  3643  001F98  A027               	btfss	___ftmul@f1,0,c
  3644  001F9A  D006               	goto	l695
  3645  001F9C  502A               	movf	___ftmul@f2,w,c
  3646  001F9E  2631               	addwf	___ftmul@f3_as_product,f,c
  3647  001FA0  502B               	movf	___ftmul@f2+1,w,c
  3648  001FA2  2232               	addwfc	___ftmul@f3_as_product+1,f,c
  3649  001FA4  502C               	movf	___ftmul@f2+2,w,c
  3650  001FA6  2233               	addwfc	___ftmul@f3_as_product+2,f,c
  3651  001FA8                     l695:
  3652  001FA8  90D8               	bcf	status,0,c
  3653  001FAA  3229               	rrcf	___ftmul@f1+2,f,c
  3654  001FAC  3228               	rrcf	___ftmul@f1+1,f,c
  3655  001FAE  3227               	rrcf	___ftmul@f1,f,c
  3656  001FB0  90D8               	bcf	status,0,c
  3657  001FB2  3233               	rrcf	___ftmul@f3_as_product+2,f,c
  3658  001FB4  3232               	rrcf	___ftmul@f3_as_product+1,f,c
  3659  001FB6  3231               	rrcf	___ftmul@f3_as_product,f,c
  3660  001FB8  2E34               	decfsz	___ftmul@cntr,f,c
  3661  001FBA  D7EE               	goto	l694
  3662  001FBC  C031  F013         	movff	___ftmul@f3_as_product,___ftpack@arg
  3663  001FC0  C032  F014         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3664  001FC4  C033  F015         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3665  001FC8  C030  F016         	movff	___ftmul@exp,___ftpack@exp
  3666  001FCC  C035  F017         	movff	___ftmul@sign,___ftpack@sign
  3667  001FD0  EC37  F011         	call	___ftpack	;wreg free
  3668  001FD4  C013  F027         	movff	?___ftpack,?___ftmul
  3669  001FD8  C014  F028         	movff	?___ftpack+1,?___ftmul+1
  3670  001FDC  C015  F029         	movff	?___ftpack+2,?___ftmul+2
  3671  001FE0  0012               	return	
  3672  001FE2                     __end_of___ftmul:
  3673                           	opt stack 0
  3674                           tblptru	equ	0xFF8
  3675                           tblptrh	equ	0xFF7
  3676                           tblptrl	equ	0xFF6
  3677                           tablat	equ	0xFF5
  3678                           prodh	equ	0xFF4
  3679                           prodl	equ	0xFF3
  3680                           wreg	equ	0xFE8
  3681                           indf2	equ	0xFDF
  3682                           postinc2	equ	0xFDE
  3683                           postdec2	equ	0xFDD
  3684                           fsr2h	equ	0xFDA
  3685                           fsr2l	equ	0xFD9
  3686                           status	equ	0xFD8
  3687                           
  3688 ;; *************** function ___awmod *****************
  3689 ;; Defined at:
  3690 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  3691 ;; Parameters:    Size  Location     Type
  3692 ;;  dividend        2   18[COMRAM] int 
  3693 ;;  divisor         2   20[COMRAM] int 
  3694 ;; Auto vars:     Size  Location     Type
  3695 ;;  sign            1   23[COMRAM] unsigned char 
  3696 ;;  counter         1   22[COMRAM] unsigned char 
  3697 ;; Return value:  Size  Location     Type
  3698 ;;                  2   18[COMRAM] int 
  3699 ;; Registers used:
  3700 ;;		wreg, status,2, status,0
  3701 ;; Tracked objects:
  3702 ;;		On entry : 0/0
  3703 ;;		On exit  : 0/0
  3704 ;;		Unchanged: 0/0
  3705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3706 ;;      Params:         4       0       0       0       0       0       0       0       0
  3707 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3708 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3709 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3710 ;;Total ram usage:        6 bytes
  3711 ;; Hardware stack levels used:    1
  3712 ;; Hardware stack levels required when called:    1
  3713 ;; This function calls:
  3714 ;;		Nothing
  3715 ;; This function is called by:
  3716 ;;		_fround
  3717 ;;		_scale
  3718 ;; This function uses a non-reentrant model
  3719 ;;
  3720                           
  3721                           	psect	text7
  3722  00263E                     __ptext7:
  3723                           	opt stack 0
  3724  00263E                     ___awmod:
  3725                           	opt stack 27
  3726                           
  3727                           ;incstack = 0
  3728  00263E  0E00               	movlw	0
  3729  002640  6E18               	movwf	___awmod@sign,c
  3730  002642  AE14               	btfss	___awmod@dividend+1,7,c
  3731  002644  D006               	goto	l541
  3732  002646  6C13               	negf	___awmod@dividend,c
  3733  002648  1E14               	comf	___awmod@dividend+1,f,c
  3734  00264A  B0D8               	btfsc	status,0,c
  3735  00264C  2A14               	incf	___awmod@dividend+1,f,c
  3736  00264E  0E01               	movlw	1
  3737  002650  6E18               	movwf	___awmod@sign,c
  3738  002652                     l541:
  3739  002652  AE16               	btfss	___awmod@divisor+1,7,c
  3740  002654  D004               	goto	l542
  3741  002656  6C15               	negf	___awmod@divisor,c
  3742  002658  1E16               	comf	___awmod@divisor+1,f,c
  3743  00265A  B0D8               	btfsc	status,0,c
  3744  00265C  2A16               	incf	___awmod@divisor+1,f,c
  3745  00265E                     l542:
  3746  00265E  5015               	movf	___awmod@divisor,w,c
  3747  002660  1016               	iorwf	___awmod@divisor+1,w,c
  3748  002662  B4D8               	btfsc	status,2,c
  3749  002664  D018               	goto	l549
  3750  002666  0E01               	movlw	1
  3751  002668  6E17               	movwf	___awmod@counter,c
  3752  00266A  D004               	goto	l544
  3753  00266C  90D8               	bcf	status,0,c
  3754  00266E  3615               	rlcf	___awmod@divisor,f,c
  3755  002670  3616               	rlcf	___awmod@divisor+1,f,c
  3756  002672  2A17               	incf	___awmod@counter,f,c
  3757  002674                     l544:
  3758  002674  AE16               	btfss	___awmod@divisor+1,7,c
  3759  002676  D7FA               	goto	l545
  3760  002678                     u2500:
  3761  002678  5015               	movf	___awmod@divisor,w,c
  3762  00267A  5C13               	subwf	___awmod@dividend,w,c
  3763  00267C  5016               	movf	___awmod@divisor+1,w,c
  3764  00267E  5814               	subwfb	___awmod@dividend+1,w,c
  3765  002680  A0D8               	btfss	status,0,c
  3766  002682  D004               	goto	l548
  3767  002684  5015               	movf	___awmod@divisor,w,c
  3768  002686  5E13               	subwf	___awmod@dividend,f,c
  3769  002688  5016               	movf	___awmod@divisor+1,w,c
  3770  00268A  5A14               	subwfb	___awmod@dividend+1,f,c
  3771  00268C                     l548:
  3772  00268C  90D8               	bcf	status,0,c
  3773  00268E  3216               	rrcf	___awmod@divisor+1,f,c
  3774  002690  3215               	rrcf	___awmod@divisor,f,c
  3775  002692  2E17               	decfsz	___awmod@counter,f,c
  3776  002694  D7F1               	goto	u2500
  3777  002696                     l549:
  3778  002696  5018               	movf	___awmod@sign,w,c
  3779  002698  B4D8               	btfsc	status,2,c
  3780  00269A  D004               	goto	l550
  3781  00269C  6C13               	negf	___awmod@dividend,c
  3782  00269E  1E14               	comf	___awmod@dividend+1,f,c
  3783  0026A0  B0D8               	btfsc	status,0,c
  3784  0026A2  2A14               	incf	___awmod@dividend+1,f,c
  3785  0026A4                     l550:
  3786  0026A4  C013  F013         	movff	___awmod@dividend,?___awmod
  3787  0026A8  C014  F014         	movff	___awmod@dividend+1,?___awmod+1
  3788  0026AC  0012               	return	
  3789  0026AE                     __end_of___awmod:
  3790                           	opt stack 0
  3791                           tblptru	equ	0xFF8
  3792                           tblptrh	equ	0xFF7
  3793                           tblptrl	equ	0xFF6
  3794                           tablat	equ	0xFF5
  3795                           prodh	equ	0xFF4
  3796                           prodl	equ	0xFF3
  3797                           wreg	equ	0xFE8
  3798                           indf2	equ	0xFDF
  3799                           postinc2	equ	0xFDE
  3800                           postdec2	equ	0xFDD
  3801                           fsr2h	equ	0xFDA
  3802                           fsr2l	equ	0xFD9
  3803                           status	equ	0xFD8
  3804                           
  3805 ;; *************** function ___awdiv *****************
  3806 ;; Defined at:
  3807 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  3808 ;; Parameters:    Size  Location     Type
  3809 ;;  dividend        2   24[COMRAM] int 
  3810 ;;  divisor         2   26[COMRAM] int 
  3811 ;; Auto vars:     Size  Location     Type
  3812 ;;  quotient        2   30[COMRAM] int 
  3813 ;;  sign            1   29[COMRAM] unsigned char 
  3814 ;;  counter         1   28[COMRAM] unsigned char 
  3815 ;; Return value:  Size  Location     Type
  3816 ;;                  2   24[COMRAM] int 
  3817 ;; Registers used:
  3818 ;;		wreg, status,2, status,0
  3819 ;; Tracked objects:
  3820 ;;		On entry : 0/0
  3821 ;;		On exit  : 0/0
  3822 ;;		Unchanged: 0/0
  3823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3824 ;;      Params:         4       0       0       0       0       0       0       0       0
  3825 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3826 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3827 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3828 ;;Total ram usage:        8 bytes
  3829 ;; Hardware stack levels used:    1
  3830 ;; Hardware stack levels required when called:    1
  3831 ;; This function calls:
  3832 ;;		Nothing
  3833 ;; This function is called by:
  3834 ;;		_fround
  3835 ;;		_scale
  3836 ;;		_sprintf
  3837 ;; This function uses a non-reentrant model
  3838 ;;
  3839                           
  3840                           	psect	text8
  3841  002446                     __ptext8:
  3842                           	opt stack 0
  3843  002446                     ___awdiv:
  3844                           	opt stack 27
  3845                           
  3846                           ;incstack = 0
  3847  002446  0E00               	movlw	0
  3848  002448  6E1E               	movwf	___awdiv@sign,c
  3849  00244A  AE1C               	btfss	___awdiv@divisor+1,7,c
  3850  00244C  D006               	goto	l528
  3851  00244E  6C1B               	negf	___awdiv@divisor,c
  3852  002450  1E1C               	comf	___awdiv@divisor+1,f,c
  3853  002452  B0D8               	btfsc	status,0,c
  3854  002454  2A1C               	incf	___awdiv@divisor+1,f,c
  3855  002456  0E01               	movlw	1
  3856  002458  6E1E               	movwf	___awdiv@sign,c
  3857  00245A                     l528:
  3858  00245A  AE1A               	btfss	___awdiv@dividend+1,7,c
  3859  00245C  D006               	goto	l529
  3860  00245E  6C19               	negf	___awdiv@dividend,c
  3861  002460  1E1A               	comf	___awdiv@dividend+1,f,c
  3862  002462  B0D8               	btfsc	status,0,c
  3863  002464  2A1A               	incf	___awdiv@dividend+1,f,c
  3864  002466  0E01               	movlw	1
  3865  002468  1A1E               	xorwf	___awdiv@sign,f,c
  3866  00246A                     l529:
  3867  00246A  0E00               	movlw	0
  3868  00246C  6E20               	movwf	___awdiv@quotient+1,c
  3869  00246E  0E00               	movlw	0
  3870  002470  6E1F               	movwf	___awdiv@quotient,c
  3871  002472  501B               	movf	___awdiv@divisor,w,c
  3872  002474  101C               	iorwf	___awdiv@divisor+1,w,c
  3873  002476  B4D8               	btfsc	status,2,c
  3874  002478  D01C               	goto	l536
  3875  00247A  0E01               	movlw	1
  3876  00247C  6E1D               	movwf	___awdiv@counter,c
  3877  00247E  D004               	goto	l531
  3878  002480  90D8               	bcf	status,0,c
  3879  002482  361B               	rlcf	___awdiv@divisor,f,c
  3880  002484  361C               	rlcf	___awdiv@divisor+1,f,c
  3881  002486  2A1D               	incf	___awdiv@counter,f,c
  3882  002488                     l531:
  3883  002488  AE1C               	btfss	___awdiv@divisor+1,7,c
  3884  00248A  D7FA               	goto	l532
  3885  00248C                     u2440:
  3886  00248C  90D8               	bcf	status,0,c
  3887  00248E  361F               	rlcf	___awdiv@quotient,f,c
  3888  002490  3620               	rlcf	___awdiv@quotient+1,f,c
  3889  002492  501B               	movf	___awdiv@divisor,w,c
  3890  002494  5C19               	subwf	___awdiv@dividend,w,c
  3891  002496  501C               	movf	___awdiv@divisor+1,w,c
  3892  002498  581A               	subwfb	___awdiv@dividend+1,w,c
  3893  00249A  A0D8               	btfss	status,0,c
  3894  00249C  D005               	goto	l535
  3895  00249E  501B               	movf	___awdiv@divisor,w,c
  3896  0024A0  5E19               	subwf	___awdiv@dividend,f,c
  3897  0024A2  501C               	movf	___awdiv@divisor+1,w,c
  3898  0024A4  5A1A               	subwfb	___awdiv@dividend+1,f,c
  3899  0024A6  801F               	bsf	___awdiv@quotient,0,c
  3900  0024A8                     l535:
  3901  0024A8  90D8               	bcf	status,0,c
  3902  0024AA  321C               	rrcf	___awdiv@divisor+1,f,c
  3903  0024AC  321B               	rrcf	___awdiv@divisor,f,c
  3904  0024AE  2E1D               	decfsz	___awdiv@counter,f,c
  3905  0024B0  D7ED               	goto	u2440
  3906  0024B2                     l536:
  3907  0024B2  501E               	movf	___awdiv@sign,w,c
  3908  0024B4  B4D8               	btfsc	status,2,c
  3909  0024B6  D004               	goto	l537
  3910  0024B8  6C1F               	negf	___awdiv@quotient,c
  3911  0024BA  1E20               	comf	___awdiv@quotient+1,f,c
  3912  0024BC  B0D8               	btfsc	status,0,c
  3913  0024BE  2A20               	incf	___awdiv@quotient+1,f,c
  3914  0024C0                     l537:
  3915  0024C0  C01F  F019         	movff	___awdiv@quotient,?___awdiv
  3916  0024C4  C020  F01A         	movff	___awdiv@quotient+1,?___awdiv+1
  3917  0024C8  0012               	return	
  3918  0024CA                     __end_of___awdiv:
  3919                           	opt stack 0
  3920                           tblptru	equ	0xFF8
  3921                           tblptrh	equ	0xFF7
  3922                           tblptrl	equ	0xFF6
  3923                           tablat	equ	0xFF5
  3924                           prodh	equ	0xFF4
  3925                           prodl	equ	0xFF3
  3926                           wreg	equ	0xFE8
  3927                           indf2	equ	0xFDF
  3928                           postinc2	equ	0xFDE
  3929                           postdec2	equ	0xFDD
  3930                           fsr2h	equ	0xFDA
  3931                           fsr2l	equ	0xFD9
  3932                           status	equ	0xFD8
  3933                           
  3934 ;; *************** function __tdiv_to_l_ *****************
  3935 ;; Defined at:
  3936 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdivl.c"
  3937 ;; Parameters:    Size  Location     Type
  3938 ;;  f1              3   18[COMRAM] float 
  3939 ;;  f2              3   21[COMRAM] float 
  3940 ;; Auto vars:     Size  Location     Type
  3941 ;;  quot            4   27[COMRAM] unsigned long 
  3942 ;;  exp1            1   32[COMRAM] unsigned char 
  3943 ;;  cntr            1   31[COMRAM] unsigned char 
  3944 ;; Return value:  Size  Location     Type
  3945 ;;                  4   18[COMRAM] unsigned long 
  3946 ;; Registers used:
  3947 ;;		wreg, status,2, status,0
  3948 ;; Tracked objects:
  3949 ;;		On entry : 0/0
  3950 ;;		On exit  : 0/0
  3951 ;;		Unchanged: 0/0
  3952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3953 ;;      Params:         6       0       0       0       0       0       0       0       0
  3954 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3955 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3956 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3957 ;;Total ram usage:       15 bytes
  3958 ;; Hardware stack levels used:    1
  3959 ;; Hardware stack levels required when called:    1
  3960 ;; This function calls:
  3961 ;;		Nothing
  3962 ;; This function is called by:
  3963 ;;		_sprintf
  3964 ;; This function uses a non-reentrant model
  3965 ;;
  3966                           
  3967                           	psect	text9
  3968  001A8C                     __ptext9:
  3969                           	opt stack 0
  3970  001A8C                     __tdiv_to_l_:
  3971                           	opt stack 28
  3972                           
  3973                           ;incstack = 0
  3974  001A8C  C015  F019         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  3975  001A90  6A1A               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3976  001A92  6A1B               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3977  001A94  3414               	rlcf	__tdiv_to_l_@f1+1,w,c
  3978  001A96  3619               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3979  001A98  E301               	bnc	u2641
  3980  001A9A  801A               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3981  001A9C                     u2641:
  3982  001A9C  5019               	movf	??__tdiv_to_l_,w,c
  3983  001A9E  6E21               	movwf	__tdiv_to_l_@exp1,c
  3984  001AA0  5021               	movf	__tdiv_to_l_@exp1,w,c
  3985  001AA2  A4D8               	btfss	status,2,c
  3986  001AA4  D009               	goto	l664
  3987  001AA6  0E00               	movlw	0
  3988  001AA8  6E13               	movwf	?__tdiv_to_l_,c
  3989  001AAA  0E00               	movlw	0
  3990  001AAC  6E14               	movwf	?__tdiv_to_l_+1,c
  3991  001AAE  0E00               	movlw	0
  3992  001AB0  6E15               	movwf	?__tdiv_to_l_+2,c
  3993  001AB2  0E00               	movlw	0
  3994  001AB4  6E16               	movwf	?__tdiv_to_l_+3,c
  3995  001AB6  0012               	return	
  3996  001AB8                     l664:
  3997  001AB8  C018  F019         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  3998  001ABC  6A1A               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3999  001ABE  6A1B               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4000  001AC0  3417               	rlcf	__tdiv_to_l_@f2+1,w,c
  4001  001AC2  3619               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4002  001AC4  E301               	bnc	u2661
  4003  001AC6  801A               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4004  001AC8                     u2661:
  4005  001AC8  5019               	movf	??__tdiv_to_l_,w,c
  4006  001ACA  6E20               	movwf	__tdiv_to_l_@cntr,c
  4007  001ACC  5020               	movf	__tdiv_to_l_@cntr,w,c
  4008  001ACE  A4D8               	btfss	status,2,c
  4009  001AD0  D009               	goto	l666
  4010  001AD2  0E00               	movlw	0
  4011  001AD4  6E13               	movwf	?__tdiv_to_l_,c
  4012  001AD6  0E00               	movlw	0
  4013  001AD8  6E14               	movwf	?__tdiv_to_l_+1,c
  4014  001ADA  0E00               	movlw	0
  4015  001ADC  6E15               	movwf	?__tdiv_to_l_+2,c
  4016  001ADE  0E00               	movlw	0
  4017  001AE0  6E16               	movwf	?__tdiv_to_l_+3,c
  4018  001AE2  0012               	return	
  4019  001AE4                     l666:
  4020  001AE4  8E14               	bsf	__tdiv_to_l_@f1+1,7,c
  4021  001AE6  0EFF               	movlw	255
  4022  001AE8  1613               	andwf	__tdiv_to_l_@f1,f,c
  4023  001AEA  0EFF               	movlw	255
  4024  001AEC  1614               	andwf	__tdiv_to_l_@f1+1,f,c
  4025  001AEE  0E00               	movlw	0
  4026  001AF0  1615               	andwf	__tdiv_to_l_@f1+2,f,c
  4027  001AF2  8E17               	bsf	__tdiv_to_l_@f2+1,7,c
  4028  001AF4  0EFF               	movlw	255
  4029  001AF6  1616               	andwf	__tdiv_to_l_@f2,f,c
  4030  001AF8  0EFF               	movlw	255
  4031  001AFA  1617               	andwf	__tdiv_to_l_@f2+1,f,c
  4032  001AFC  0E00               	movlw	0
  4033  001AFE  1618               	andwf	__tdiv_to_l_@f2+2,f,c
  4034  001B00  0E00               	movlw	0
  4035  001B02  6E1C               	movwf	__tdiv_to_l_@quot,c
  4036  001B04  0E00               	movlw	0
  4037  001B06  6E1D               	movwf	__tdiv_to_l_@quot+1,c
  4038  001B08  0E00               	movlw	0
  4039  001B0A  6E1E               	movwf	__tdiv_to_l_@quot+2,c
  4040  001B0C  0E00               	movlw	0
  4041  001B0E  6E1F               	movwf	__tdiv_to_l_@quot+3,c
  4042  001B10  0E7F               	movlw	127
  4043  001B12  5E21               	subwf	__tdiv_to_l_@exp1,f,c
  4044  001B14  5020               	movf	__tdiv_to_l_@cntr,w,c
  4045  001B16  0F98               	addlw	152
  4046  001B18  5E21               	subwf	__tdiv_to_l_@exp1,f,c
  4047  001B1A  0E18               	movlw	24
  4048  001B1C  6E20               	movwf	__tdiv_to_l_@cntr,c
  4049  001B1E                     l667:
  4050  001B1E  90D8               	bcf	status,0,c
  4051  001B20  361C               	rlcf	__tdiv_to_l_@quot,f,c
  4052  001B22  361D               	rlcf	__tdiv_to_l_@quot+1,f,c
  4053  001B24  361E               	rlcf	__tdiv_to_l_@quot+2,f,c
  4054  001B26  361F               	rlcf	__tdiv_to_l_@quot+3,f,c
  4055  001B28  5016               	movf	__tdiv_to_l_@f2,w,c
  4056  001B2A  5C13               	subwf	__tdiv_to_l_@f1,w,c
  4057  001B2C  5017               	movf	__tdiv_to_l_@f2+1,w,c
  4058  001B2E  5814               	subwfb	__tdiv_to_l_@f1+1,w,c
  4059  001B30  5018               	movf	__tdiv_to_l_@f2+2,w,c
  4060  001B32  5815               	subwfb	__tdiv_to_l_@f1+2,w,c
  4061  001B34  A0D8               	btfss	status,0,c
  4062  001B36  D007               	goto	l668
  4063  001B38  5016               	movf	__tdiv_to_l_@f2,w,c
  4064  001B3A  5E13               	subwf	__tdiv_to_l_@f1,f,c
  4065  001B3C  5017               	movf	__tdiv_to_l_@f2+1,w,c
  4066  001B3E  5A14               	subwfb	__tdiv_to_l_@f1+1,f,c
  4067  001B40  5018               	movf	__tdiv_to_l_@f2+2,w,c
  4068  001B42  5A15               	subwfb	__tdiv_to_l_@f1+2,f,c
  4069  001B44  801C               	bsf	__tdiv_to_l_@quot,0,c
  4070  001B46                     l668:
  4071  001B46  90D8               	bcf	status,0,c
  4072  001B48  3613               	rlcf	__tdiv_to_l_@f1,f,c
  4073  001B4A  3614               	rlcf	__tdiv_to_l_@f1+1,f,c
  4074  001B4C  3615               	rlcf	__tdiv_to_l_@f1+2,f,c
  4075  001B4E  2E20               	decfsz	__tdiv_to_l_@cntr,f,c
  4076  001B50  D7E6               	goto	l667
  4077  001B52  AE21               	btfss	__tdiv_to_l_@exp1,7,c
  4078  001B54  D016               	goto	l670
  4079  001B56  5021               	movf	__tdiv_to_l_@exp1,w,c
  4080  001B58  0A80               	xorlw	128
  4081  001B5A  0F97               	addlw	151
  4082  001B5C  B0D8               	btfsc	status,0,c
  4083  001B5E  D009               	goto	l671
  4084  001B60  0E00               	movlw	0
  4085  001B62  6E13               	movwf	?__tdiv_to_l_,c
  4086  001B64  0E00               	movlw	0
  4087  001B66  6E14               	movwf	?__tdiv_to_l_+1,c
  4088  001B68  0E00               	movlw	0
  4089  001B6A  6E15               	movwf	?__tdiv_to_l_+2,c
  4090  001B6C  0E00               	movlw	0
  4091  001B6E  6E16               	movwf	?__tdiv_to_l_+3,c
  4092  001B70  0012               	return	
  4093  001B72                     l671:
  4094  001B72  90D8               	bcf	status,0,c
  4095  001B74  321F               	rrcf	__tdiv_to_l_@quot+3,f,c
  4096  001B76  321E               	rrcf	__tdiv_to_l_@quot+2,f,c
  4097  001B78  321D               	rrcf	__tdiv_to_l_@quot+1,f,c
  4098  001B7A  321C               	rrcf	__tdiv_to_l_@quot,f,c
  4099  001B7C  3E21               	incfsz	__tdiv_to_l_@exp1,f,c
  4100  001B7E  D7F9               	goto	l671
  4101  001B80  D015               	goto	u2720
  4102  001B82                     l670:
  4103  001B82  0E17               	movlw	23
  4104  001B84  6421               	cpfsgt	__tdiv_to_l_@exp1,c
  4105  001B86  D00F               	goto	l676
  4106  001B88  0E00               	movlw	0
  4107  001B8A  6E13               	movwf	?__tdiv_to_l_,c
  4108  001B8C  0E00               	movlw	0
  4109  001B8E  6E14               	movwf	?__tdiv_to_l_+1,c
  4110  001B90  0E00               	movlw	0
  4111  001B92  6E15               	movwf	?__tdiv_to_l_+2,c
  4112  001B94  0E00               	movlw	0
  4113  001B96  6E16               	movwf	?__tdiv_to_l_+3,c
  4114  001B98  0012               	return	
  4115  001B9A  90D8               	bcf	status,0,c
  4116  001B9C  361C               	rlcf	__tdiv_to_l_@quot,f,c
  4117  001B9E  361D               	rlcf	__tdiv_to_l_@quot+1,f,c
  4118  001BA0  361E               	rlcf	__tdiv_to_l_@quot+2,f,c
  4119  001BA2  361F               	rlcf	__tdiv_to_l_@quot+3,f,c
  4120  001BA4  0621               	decf	__tdiv_to_l_@exp1,f,c
  4121  001BA6                     l676:
  4122  001BA6  5021               	movf	__tdiv_to_l_@exp1,w,c
  4123  001BA8  A4D8               	btfss	status,2,c
  4124  001BAA  D7F7               	goto	l677
  4125  001BAC                     u2720:
  4126  001BAC  C01C  F013         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4127  001BB0  C01D  F014         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4128  001BB4  C01E  F015         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4129  001BB8  C01F  F016         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4130  001BBC  0012               	return		;funcret
  4131  001BBE                     __end_of__tdiv_to_l_:
  4132                           	opt stack 0
  4133                           tblptru	equ	0xFF8
  4134                           tblptrh	equ	0xFF7
  4135                           tblptrl	equ	0xFF6
  4136                           tablat	equ	0xFF5
  4137                           prodh	equ	0xFF4
  4138                           prodl	equ	0xFF3
  4139                           wreg	equ	0xFE8
  4140                           indf2	equ	0xFDF
  4141                           postinc2	equ	0xFDE
  4142                           postdec2	equ	0xFDD
  4143                           fsr2h	equ	0xFDA
  4144                           fsr2l	equ	0xFD9
  4145                           status	equ	0xFD8
  4146                           
  4147 ;; *************** function __div_to_l_ *****************
  4148 ;; Defined at:
  4149 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fldivl.c"
  4150 ;; Parameters:    Size  Location     Type
  4151 ;;  f1              3   18[COMRAM] unsigned long 
  4152 ;;  f2              3   21[COMRAM] unsigned long 
  4153 ;; Auto vars:     Size  Location     Type
  4154 ;;  quot            4   24[COMRAM] unsigned long 
  4155 ;;  exp1            1   29[COMRAM] unsigned char 
  4156 ;;  cntr            1   28[COMRAM] unsigned char 
  4157 ;; Return value:  Size  Location     Type
  4158 ;;                  4   18[COMRAM] unsigned long 
  4159 ;; Registers used:
  4160 ;;		wreg, status,2, status,0
  4161 ;; Tracked objects:
  4162 ;;		On entry : 0/0
  4163 ;;		On exit  : 0/0
  4164 ;;		Unchanged: 0/0
  4165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4166 ;;      Params:         6       0       0       0       0       0       0       0       0
  4167 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4168 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4169 ;;      Totals:        12       0       0       0       0       0       0       0       0
  4170 ;;Total ram usage:       12 bytes
  4171 ;; Hardware stack levels used:    1
  4172 ;; Hardware stack levels required when called:    1
  4173 ;; This function calls:
  4174 ;;		Nothing
  4175 ;; This function is called by:
  4176 ;;		_sprintf
  4177 ;; This function uses a non-reentrant model
  4178 ;;
  4179                           
  4180                           	psect	text10
  4181  001BBE                     __ptext10:
  4182                           	opt stack 0
  4183  001BBE                     __div_to_l_:
  4184                           	opt stack 28
  4185                           
  4186                           ;incstack = 0
  4187  001BBE  3415               	rlcf	__div_to_l_@f1+2,w,c
  4188  001BC0  3416               	rlcf	__div_to_l_@f1+3,w,c
  4189  001BC2  6E1E               	movwf	__div_to_l_@exp1,c
  4190  001BC4  501E               	movf	__div_to_l_@exp1,w,c
  4191  001BC6  A4D8               	btfss	status,2,c
  4192  001BC8  D009               	goto	l560
  4193  001BCA  0E00               	movlw	0
  4194  001BCC  6E13               	movwf	?__div_to_l_,c
  4195  001BCE  0E00               	movlw	0
  4196  001BD0  6E14               	movwf	?__div_to_l_+1,c
  4197  001BD2  0E00               	movlw	0
  4198  001BD4  6E15               	movwf	?__div_to_l_+2,c
  4199  001BD6  0E00               	movlw	0
  4200  001BD8  6E16               	movwf	?__div_to_l_+3,c
  4201  001BDA  0012               	return	
  4202  001BDC                     l560:
  4203  001BDC  3418               	rlcf	__div_to_l_@f2+2,w,c
  4204  001BDE  3419               	rlcf	__div_to_l_@f2+3,w,c
  4205  001BE0  6E1D               	movwf	__div_to_l_@cntr,c
  4206  001BE2  501D               	movf	__div_to_l_@cntr,w,c
  4207  001BE4  A4D8               	btfss	status,2,c
  4208  001BE6  D009               	goto	l562
  4209  001BE8  0E00               	movlw	0
  4210  001BEA  6E13               	movwf	?__div_to_l_,c
  4211  001BEC  0E00               	movlw	0
  4212  001BEE  6E14               	movwf	?__div_to_l_+1,c
  4213  001BF0  0E00               	movlw	0
  4214  001BF2  6E15               	movwf	?__div_to_l_+2,c
  4215  001BF4  0E00               	movlw	0
  4216  001BF6  6E16               	movwf	?__div_to_l_+3,c
  4217  001BF8  0012               	return	
  4218  001BFA                     l562:
  4219  001BFA  8E15               	bsf	__div_to_l_@f1+2,7,c
  4220  001BFC  0EFF               	movlw	255
  4221  001BFE  1613               	andwf	__div_to_l_@f1,f,c
  4222  001C00  0EFF               	movlw	255
  4223  001C02  1614               	andwf	__div_to_l_@f1+1,f,c
  4224  001C04  0EFF               	movlw	255
  4225  001C06  1615               	andwf	__div_to_l_@f1+2,f,c
  4226  001C08  0E00               	movlw	0
  4227  001C0A  1616               	andwf	__div_to_l_@f1+3,f,c
  4228  001C0C  8E18               	bsf	__div_to_l_@f2+2,7,c
  4229  001C0E  0EFF               	movlw	255
  4230  001C10  1616               	andwf	__div_to_l_@f2,f,c
  4231  001C12  0EFF               	movlw	255
  4232  001C14  1617               	andwf	__div_to_l_@f2+1,f,c
  4233  001C16  0EFF               	movlw	255
  4234  001C18  1618               	andwf	__div_to_l_@f2+2,f,c
  4235  001C1A  0E00               	movlw	0
  4236  001C1C  1619               	andwf	__div_to_l_@f2+3,f,c
  4237  001C1E  0E00               	movlw	0
  4238  001C20  6E19               	movwf	__div_to_l_@quot,c
  4239  001C22  0E00               	movlw	0
  4240  001C24  6E1A               	movwf	__div_to_l_@quot+1,c
  4241  001C26  0E00               	movlw	0
  4242  001C28  6E1B               	movwf	__div_to_l_@quot+2,c
  4243  001C2A  0E00               	movlw	0
  4244  001C2C  6E1C               	movwf	__div_to_l_@quot+3,c
  4245  001C2E  0E7F               	movlw	127
  4246  001C30  5E1E               	subwf	__div_to_l_@exp1,f,c
  4247  001C32  501D               	movf	__div_to_l_@cntr,w,c
  4248  001C34  0FA0               	addlw	160
  4249  001C36  5E1E               	subwf	__div_to_l_@exp1,f,c
  4250  001C38  0E20               	movlw	32
  4251  001C3A  6E1D               	movwf	__div_to_l_@cntr,c
  4252  001C3C  90D8               	bcf	status,0,c
  4253  001C3E  3619               	rlcf	__div_to_l_@quot,f,c
  4254  001C40  361A               	rlcf	__div_to_l_@quot+1,f,c
  4255  001C42  361B               	rlcf	__div_to_l_@quot+2,f,c
  4256  001C44  361C               	rlcf	__div_to_l_@quot+3,f,c
  4257  001C46  5016               	movf	__div_to_l_@f2,w,c
  4258  001C48  5C13               	subwf	__div_to_l_@f1,w,c
  4259  001C4A  5017               	movf	__div_to_l_@f2+1,w,c
  4260  001C4C  5814               	subwfb	__div_to_l_@f1+1,w,c
  4261  001C4E  5018               	movf	__div_to_l_@f2+2,w,c
  4262  001C50  5815               	subwfb	__div_to_l_@f1+2,w,c
  4263  001C52  5019               	movf	__div_to_l_@f2+3,w,c
  4264  001C54  5816               	subwfb	__div_to_l_@f1+3,w,c
  4265  001C56  A0D8               	btfss	status,0,c
  4266  001C58  D009               	goto	l564
  4267  001C5A  5016               	movf	__div_to_l_@f2,w,c
  4268  001C5C  5E13               	subwf	__div_to_l_@f1,f,c
  4269  001C5E  5017               	movf	__div_to_l_@f2+1,w,c
  4270  001C60  5A14               	subwfb	__div_to_l_@f1+1,f,c
  4271  001C62  5018               	movf	__div_to_l_@f2+2,w,c
  4272  001C64  5A15               	subwfb	__div_to_l_@f1+2,f,c
  4273  001C66  5019               	movf	__div_to_l_@f2+3,w,c
  4274  001C68  5A16               	subwfb	__div_to_l_@f1+3,f,c
  4275  001C6A  8019               	bsf	__div_to_l_@quot,0,c
  4276  001C6C                     l564:
  4277  001C6C  90D8               	bcf	status,0,c
  4278  001C6E  3613               	rlcf	__div_to_l_@f1,f,c
  4279  001C70  3614               	rlcf	__div_to_l_@f1+1,f,c
  4280  001C72  3615               	rlcf	__div_to_l_@f1+2,f,c
  4281  001C74  3616               	rlcf	__div_to_l_@f1+3,f,c
  4282  001C76  2E1D               	decfsz	__div_to_l_@cntr,f,c
  4283  001C78  D7E1               	goto	l563
  4284  001C7A  AE1E               	btfss	__div_to_l_@exp1,7,c
  4285  001C7C  D016               	goto	l566
  4286  001C7E  501E               	movf	__div_to_l_@exp1,w,c
  4287  001C80  0A80               	xorlw	128
  4288  001C82  0F9F               	addlw	159
  4289  001C84  B0D8               	btfsc	status,0,c
  4290  001C86  D009               	goto	l567
  4291  001C88  0E00               	movlw	0
  4292  001C8A  6E13               	movwf	?__div_to_l_,c
  4293  001C8C  0E00               	movlw	0
  4294  001C8E  6E14               	movwf	?__div_to_l_+1,c
  4295  001C90  0E00               	movlw	0
  4296  001C92  6E15               	movwf	?__div_to_l_+2,c
  4297  001C94  0E00               	movlw	0
  4298  001C96  6E16               	movwf	?__div_to_l_+3,c
  4299  001C98  0012               	return	
  4300  001C9A                     l567:
  4301  001C9A  90D8               	bcf	status,0,c
  4302  001C9C  321C               	rrcf	__div_to_l_@quot+3,f,c
  4303  001C9E  321B               	rrcf	__div_to_l_@quot+2,f,c
  4304  001CA0  321A               	rrcf	__div_to_l_@quot+1,f,c
  4305  001CA2  3219               	rrcf	__div_to_l_@quot,f,c
  4306  001CA4  3E1E               	incfsz	__div_to_l_@exp1,f,c
  4307  001CA6  D7F9               	goto	l567
  4308  001CA8  D015               	goto	u2790
  4309  001CAA                     l566:
  4310  001CAA  0E1F               	movlw	31
  4311  001CAC  641E               	cpfsgt	__div_to_l_@exp1,c
  4312  001CAE  D00F               	goto	l572
  4313  001CB0  0E00               	movlw	0
  4314  001CB2  6E13               	movwf	?__div_to_l_,c
  4315  001CB4  0E00               	movlw	0
  4316  001CB6  6E14               	movwf	?__div_to_l_+1,c
  4317  001CB8  0E00               	movlw	0
  4318  001CBA  6E15               	movwf	?__div_to_l_+2,c
  4319  001CBC  0E00               	movlw	0
  4320  001CBE  6E16               	movwf	?__div_to_l_+3,c
  4321  001CC0  0012               	return	
  4322  001CC2  90D8               	bcf	status,0,c
  4323  001CC4  3619               	rlcf	__div_to_l_@quot,f,c
  4324  001CC6  361A               	rlcf	__div_to_l_@quot+1,f,c
  4325  001CC8  361B               	rlcf	__div_to_l_@quot+2,f,c
  4326  001CCA  361C               	rlcf	__div_to_l_@quot+3,f,c
  4327  001CCC  061E               	decf	__div_to_l_@exp1,f,c
  4328  001CCE                     l572:
  4329  001CCE  501E               	movf	__div_to_l_@exp1,w,c
  4330  001CD0  A4D8               	btfss	status,2,c
  4331  001CD2  D7F7               	goto	l573
  4332  001CD4                     u2790:
  4333  001CD4  C019  F013         	movff	__div_to_l_@quot,?__div_to_l_
  4334  001CD8  C01A  F014         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4335  001CDC  C01B  F015         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4336  001CE0  C01C  F016         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4337  001CE4  0012               	return		;funcret
  4338  001CE6                     __end_of__div_to_l_:
  4339                           	opt stack 0
  4340                           tblptru	equ	0xFF8
  4341                           tblptrh	equ	0xFF7
  4342                           tblptrl	equ	0xFF6
  4343                           tablat	equ	0xFF5
  4344                           prodh	equ	0xFF4
  4345                           prodl	equ	0xFF3
  4346                           wreg	equ	0xFE8
  4347                           indf2	equ	0xFDF
  4348                           postinc2	equ	0xFDE
  4349                           postdec2	equ	0xFDD
  4350                           fsr2h	equ	0xFDA
  4351                           fsr2l	equ	0xFD9
  4352                           status	equ	0xFD8
  4353                           
  4354 ;; *************** function ___lltoft *****************
  4355 ;; Defined at:
  4356 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
  4357 ;; Parameters:    Size  Location     Type
  4358 ;;  c               4   26[COMRAM] unsigned long 
  4359 ;; Auto vars:     Size  Location     Type
  4360 ;;  exp             1   34[COMRAM] unsigned char 
  4361 ;; Return value:  Size  Location     Type
  4362 ;;                  3   26[COMRAM] float 
  4363 ;; Registers used:
  4364 ;;		wreg, status,2, status,0, cstack
  4365 ;; Tracked objects:
  4366 ;;		On entry : 0/0
  4367 ;;		On exit  : 0/0
  4368 ;;		Unchanged: 0/0
  4369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4370 ;;      Params:         4       0       0       0       0       0       0       0       0
  4371 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4372 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4373 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4374 ;;Total ram usage:        9 bytes
  4375 ;; Hardware stack levels used:    1
  4376 ;; Hardware stack levels required when called:    2
  4377 ;; This function calls:
  4378 ;;		___ftpack
  4379 ;; This function is called by:
  4380 ;;		_sprintf
  4381 ;; This function uses a non-reentrant model
  4382 ;;
  4383                           
  4384                           	psect	text11
  4385  0027E4                     __ptext11:
  4386                           	opt stack 0
  4387  0027E4                     ___lltoft:
  4388                           	opt stack 27
  4389                           
  4390                           ;incstack = 0
  4391  0027E4  0E8E               	movlw	142
  4392  0027E6  6E23               	movwf	___lltoft@exp,c
  4393  0027E8  D006               	goto	l771
  4394  0027EA  90D8               	bcf	status,0,c
  4395  0027EC  321E               	rrcf	___lltoft@c+3,f,c
  4396  0027EE  321D               	rrcf	___lltoft@c+2,f,c
  4397  0027F0  321C               	rrcf	___lltoft@c+1,f,c
  4398  0027F2  321B               	rrcf	___lltoft@c,f,c
  4399  0027F4  2A23               	incf	___lltoft@exp,f,c
  4400  0027F6                     l771:
  4401  0027F6  0E00               	movlw	0
  4402  0027F8  141B               	andwf	___lltoft@c,w,c
  4403  0027FA  6E1F               	movwf	??___lltoft& (0+255),c
  4404  0027FC  0E00               	movlw	0
  4405  0027FE  141C               	andwf	___lltoft@c+1,w,c
  4406  002800  6E20               	movwf	(??___lltoft+1)& (0+255),c
  4407  002802  0E00               	movlw	0
  4408  002804  141D               	andwf	___lltoft@c+2,w,c
  4409  002806  6E21               	movwf	(??___lltoft+2)& (0+255),c
  4410  002808  0EFF               	movlw	255
  4411  00280A  141E               	andwf	___lltoft@c+3,w,c
  4412  00280C  6E22               	movwf	(??___lltoft+3)& (0+255),c
  4413  00280E  501F               	movf	??___lltoft,w,c
  4414  002810  1020               	iorwf	??___lltoft+1,w,c
  4415  002812  1021               	iorwf	??___lltoft+2,w,c
  4416  002814  1022               	iorwf	??___lltoft+3,w,c
  4417  002816  A4D8               	btfss	status,2,c
  4418  002818  D7E8               	goto	l772
  4419  00281A  C01B  F013         	movff	___lltoft@c,___ftpack@arg
  4420  00281E  C01C  F014         	movff	___lltoft@c+1,___ftpack@arg+1
  4421  002822  C01D  F015         	movff	___lltoft@c+2,___ftpack@arg+2
  4422  002826  C023  F016         	movff	___lltoft@exp,___ftpack@exp
  4423  00282A  0E00               	movlw	0
  4424  00282C  6E17               	movwf	___ftpack@sign,c
  4425  00282E  EC37  F011         	call	___ftpack	;wreg free
  4426  002832  C013  F01B         	movff	?___ftpack,?___lltoft
  4427  002836  C014  F01C         	movff	?___ftpack+1,?___lltoft+1
  4428  00283A  C015  F01D         	movff	?___ftpack+2,?___lltoft+2
  4429  00283E  0012               	return	
  4430  002840                     __end_of___lltoft:
  4431                           	opt stack 0
  4432                           tblptru	equ	0xFF8
  4433                           tblptrh	equ	0xFF7
  4434                           tblptrl	equ	0xFF6
  4435                           tablat	equ	0xFF5
  4436                           prodh	equ	0xFF4
  4437                           prodl	equ	0xFF3
  4438                           wreg	equ	0xFE8
  4439                           indf2	equ	0xFDF
  4440                           postinc2	equ	0xFDE
  4441                           postdec2	equ	0xFDD
  4442                           fsr2h	equ	0xFDA
  4443                           fsr2l	equ	0xFD9
  4444                           status	equ	0xFD8
  4445                           
  4446 ;; *************** function ___llmod *****************
  4447 ;; Defined at:
  4448 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  4449 ;; Parameters:    Size  Location     Type
  4450 ;;  dividend        4   18[COMRAM] unsigned long 
  4451 ;;  divisor         4   22[COMRAM] unsigned long 
  4452 ;; Auto vars:     Size  Location     Type
  4453 ;;  counter         1   26[COMRAM] unsigned char 
  4454 ;; Return value:  Size  Location     Type
  4455 ;;                  4   18[COMRAM] unsigned long 
  4456 ;; Registers used:
  4457 ;;		wreg, status,2, status,0
  4458 ;; Tracked objects:
  4459 ;;		On entry : 0/0
  4460 ;;		On exit  : 0/0
  4461 ;;		Unchanged: 0/0
  4462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4463 ;;      Params:         8       0       0       0       0       0       0       0       0
  4464 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4465 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4466 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4467 ;;Total ram usage:        9 bytes
  4468 ;; Hardware stack levels used:    1
  4469 ;; Hardware stack levels required when called:    1
  4470 ;; This function calls:
  4471 ;;		Nothing
  4472 ;; This function is called by:
  4473 ;;		_sprintf
  4474 ;; This function uses a non-reentrant model
  4475 ;;
  4476                           
  4477                           	psect	text12
  4478  002718                     __ptext12:
  4479                           	opt stack 0
  4480  002718                     ___llmod:
  4481                           	opt stack 28
  4482                           
  4483                           ;incstack = 0
  4484  002718  5017               	movf	___llmod@divisor,w,c
  4485  00271A  1018               	iorwf	___llmod@divisor+1,w,c
  4486  00271C  1019               	iorwf	___llmod@divisor+2,w,c
  4487  00271E  101A               	iorwf	___llmod@divisor+3,w,c
  4488  002720  B4D8               	btfsc	status,2,c
  4489  002722  D024               	goto	l765
  4490  002724  0E01               	movlw	1
  4491  002726  6E1B               	movwf	___llmod@counter,c
  4492  002728  D006               	goto	l760
  4493  00272A  90D8               	bcf	status,0,c
  4494  00272C  3617               	rlcf	___llmod@divisor,f,c
  4495  00272E  3618               	rlcf	___llmod@divisor+1,f,c
  4496  002730  3619               	rlcf	___llmod@divisor+2,f,c
  4497  002732  361A               	rlcf	___llmod@divisor+3,f,c
  4498  002734  2A1B               	incf	___llmod@counter,f,c
  4499  002736                     l760:
  4500  002736  AE1A               	btfss	___llmod@divisor+3,7,c
  4501  002738  D7F8               	goto	l761
  4502  00273A                     u2910:
  4503  00273A  5017               	movf	___llmod@divisor,w,c
  4504  00273C  5C13               	subwf	___llmod@dividend,w,c
  4505  00273E  5018               	movf	___llmod@divisor+1,w,c
  4506  002740  5814               	subwfb	___llmod@dividend+1,w,c
  4507  002742  5019               	movf	___llmod@divisor+2,w,c
  4508  002744  5815               	subwfb	___llmod@dividend+2,w,c
  4509  002746  501A               	movf	___llmod@divisor+3,w,c
  4510  002748  5816               	subwfb	___llmod@dividend+3,w,c
  4511  00274A  A0D8               	btfss	status,0,c
  4512  00274C  D008               	goto	l764
  4513  00274E  5017               	movf	___llmod@divisor,w,c
  4514  002750  5E13               	subwf	___llmod@dividend,f,c
  4515  002752  5018               	movf	___llmod@divisor+1,w,c
  4516  002754  5A14               	subwfb	___llmod@dividend+1,f,c
  4517  002756  5019               	movf	___llmod@divisor+2,w,c
  4518  002758  5A15               	subwfb	___llmod@dividend+2,f,c
  4519  00275A  501A               	movf	___llmod@divisor+3,w,c
  4520  00275C  5A16               	subwfb	___llmod@dividend+3,f,c
  4521  00275E                     l764:
  4522  00275E  90D8               	bcf	status,0,c
  4523  002760  321A               	rrcf	___llmod@divisor+3,f,c
  4524  002762  3219               	rrcf	___llmod@divisor+2,f,c
  4525  002764  3218               	rrcf	___llmod@divisor+1,f,c
  4526  002766  3217               	rrcf	___llmod@divisor,f,c
  4527  002768  2E1B               	decfsz	___llmod@counter,f,c
  4528  00276A  D7E7               	goto	u2910
  4529  00276C                     l765:
  4530  00276C  C013  F013         	movff	___llmod@dividend,?___llmod
  4531  002770  C014  F014         	movff	___llmod@dividend+1,?___llmod+1
  4532  002774  C015  F015         	movff	___llmod@dividend+2,?___llmod+2
  4533  002778  C016  F016         	movff	___llmod@dividend+3,?___llmod+3
  4534  00277C  0012               	return		;funcret
  4535  00277E                     __end_of___llmod:
  4536                           	opt stack 0
  4537                           tblptru	equ	0xFF8
  4538                           tblptrh	equ	0xFF7
  4539                           tblptrl	equ	0xFF6
  4540                           tablat	equ	0xFF5
  4541                           prodh	equ	0xFF4
  4542                           prodl	equ	0xFF3
  4543                           wreg	equ	0xFE8
  4544                           indf2	equ	0xFDF
  4545                           postinc2	equ	0xFDE
  4546                           postdec2	equ	0xFDD
  4547                           fsr2h	equ	0xFDA
  4548                           fsr2l	equ	0xFD9
  4549                           status	equ	0xFD8
  4550                           
  4551 ;; *************** function ___lldiv *****************
  4552 ;; Defined at:
  4553 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  4554 ;; Parameters:    Size  Location     Type
  4555 ;;  dividend        4   18[COMRAM] unsigned long 
  4556 ;;  divisor         4   22[COMRAM] unsigned long 
  4557 ;; Auto vars:     Size  Location     Type
  4558 ;;  quotient        4   26[COMRAM] unsigned long 
  4559 ;;  counter         1   30[COMRAM] unsigned char 
  4560 ;; Return value:  Size  Location     Type
  4561 ;;                  4   18[COMRAM] unsigned long 
  4562 ;; Registers used:
  4563 ;;		wreg, status,2, status,0
  4564 ;; Tracked objects:
  4565 ;;		On entry : 0/0
  4566 ;;		On exit  : 0/0
  4567 ;;		Unchanged: 0/0
  4568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4569 ;;      Params:         8       0       0       0       0       0       0       0       0
  4570 ;;      Locals:         5       0       0       0       0       0       0       0       0
  4571 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4572 ;;      Totals:        13       0       0       0       0       0       0       0       0
  4573 ;;Total ram usage:       13 bytes
  4574 ;; Hardware stack levels used:    1
  4575 ;; Hardware stack levels required when called:    1
  4576 ;; This function calls:
  4577 ;;		Nothing
  4578 ;; This function is called by:
  4579 ;;		_sprintf
  4580 ;; This function uses a non-reentrant model
  4581 ;;
  4582                           
  4583                           	psect	text13
  4584  0024CA                     __ptext13:
  4585                           	opt stack 0
  4586  0024CA                     ___lldiv:
  4587                           	opt stack 28
  4588                           
  4589                           ;incstack = 0
  4590  0024CA  0E00               	movlw	0
  4591  0024CC  6E1B               	movwf	___lldiv@quotient,c
  4592  0024CE  0E00               	movlw	0
  4593  0024D0  6E1C               	movwf	___lldiv@quotient+1,c
  4594  0024D2  0E00               	movlw	0
  4595  0024D4  6E1D               	movwf	___lldiv@quotient+2,c
  4596  0024D6  0E00               	movlw	0
  4597  0024D8  6E1E               	movwf	___lldiv@quotient+3,c
  4598  0024DA  5017               	movf	___lldiv@divisor,w,c
  4599  0024DC  1018               	iorwf	___lldiv@divisor+1,w,c
  4600  0024DE  1019               	iorwf	___lldiv@divisor+2,w,c
  4601  0024E0  101A               	iorwf	___lldiv@divisor+3,w,c
  4602  0024E2  B4D8               	btfsc	status,2,c
  4603  0024E4  D02A               	goto	l755
  4604  0024E6  0E01               	movlw	1
  4605  0024E8  6E1F               	movwf	___lldiv@counter,c
  4606  0024EA  D006               	goto	l750
  4607  0024EC  90D8               	bcf	status,0,c
  4608  0024EE  3617               	rlcf	___lldiv@divisor,f,c
  4609  0024F0  3618               	rlcf	___lldiv@divisor+1,f,c
  4610  0024F2  3619               	rlcf	___lldiv@divisor+2,f,c
  4611  0024F4  361A               	rlcf	___lldiv@divisor+3,f,c
  4612  0024F6  2A1F               	incf	___lldiv@counter,f,c
  4613  0024F8                     l750:
  4614  0024F8  AE1A               	btfss	___lldiv@divisor+3,7,c
  4615  0024FA  D7F8               	goto	l751
  4616  0024FC                     u2880:
  4617  0024FC  90D8               	bcf	status,0,c
  4618  0024FE  361B               	rlcf	___lldiv@quotient,f,c
  4619  002500  361C               	rlcf	___lldiv@quotient+1,f,c
  4620  002502  361D               	rlcf	___lldiv@quotient+2,f,c
  4621  002504  361E               	rlcf	___lldiv@quotient+3,f,c
  4622  002506  5017               	movf	___lldiv@divisor,w,c
  4623  002508  5C13               	subwf	___lldiv@dividend,w,c
  4624  00250A  5018               	movf	___lldiv@divisor+1,w,c
  4625  00250C  5814               	subwfb	___lldiv@dividend+1,w,c
  4626  00250E  5019               	movf	___lldiv@divisor+2,w,c
  4627  002510  5815               	subwfb	___lldiv@dividend+2,w,c
  4628  002512  501A               	movf	___lldiv@divisor+3,w,c
  4629  002514  5816               	subwfb	___lldiv@dividend+3,w,c
  4630  002516  A0D8               	btfss	status,0,c
  4631  002518  D009               	goto	l754
  4632  00251A  5017               	movf	___lldiv@divisor,w,c
  4633  00251C  5E13               	subwf	___lldiv@dividend,f,c
  4634  00251E  5018               	movf	___lldiv@divisor+1,w,c
  4635  002520  5A14               	subwfb	___lldiv@dividend+1,f,c
  4636  002522  5019               	movf	___lldiv@divisor+2,w,c
  4637  002524  5A15               	subwfb	___lldiv@dividend+2,f,c
  4638  002526  501A               	movf	___lldiv@divisor+3,w,c
  4639  002528  5A16               	subwfb	___lldiv@dividend+3,f,c
  4640  00252A  801B               	bsf	___lldiv@quotient,0,c
  4641  00252C                     l754:
  4642  00252C  90D8               	bcf	status,0,c
  4643  00252E  321A               	rrcf	___lldiv@divisor+3,f,c
  4644  002530  3219               	rrcf	___lldiv@divisor+2,f,c
  4645  002532  3218               	rrcf	___lldiv@divisor+1,f,c
  4646  002534  3217               	rrcf	___lldiv@divisor,f,c
  4647  002536  2E1F               	decfsz	___lldiv@counter,f,c
  4648  002538  D7E1               	goto	u2880
  4649  00253A                     l755:
  4650  00253A  C01B  F013         	movff	___lldiv@quotient,?___lldiv
  4651  00253E  C01C  F014         	movff	___lldiv@quotient+1,?___lldiv+1
  4652  002542  C01D  F015         	movff	___lldiv@quotient+2,?___lldiv+2
  4653  002546  C01E  F016         	movff	___lldiv@quotient+3,?___lldiv+3
  4654  00254A  0012               	return		;funcret
  4655  00254C                     __end_of___lldiv:
  4656                           	opt stack 0
  4657                           tblptru	equ	0xFF8
  4658                           tblptrh	equ	0xFF7
  4659                           tblptrl	equ	0xFF6
  4660                           tablat	equ	0xFF5
  4661                           prodh	equ	0xFF4
  4662                           prodl	equ	0xFF3
  4663                           wreg	equ	0xFE8
  4664                           indf2	equ	0xFDF
  4665                           postinc2	equ	0xFDE
  4666                           postdec2	equ	0xFDD
  4667                           fsr2h	equ	0xFDA
  4668                           fsr2l	equ	0xFD9
  4669                           status	equ	0xFD8
  4670                           
  4671 ;; *************** function ___ftsub *****************
  4672 ;; Defined at:
  4673 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  4674 ;; Parameters:    Size  Location     Type
  4675 ;;  f1              3    6[BANK0 ] float 
  4676 ;;  f2              3    9[BANK0 ] float 
  4677 ;; Auto vars:     Size  Location     Type
  4678 ;;		None
  4679 ;; Return value:  Size  Location     Type
  4680 ;;                  3    6[BANK0 ] float 
  4681 ;; Registers used:
  4682 ;;		wreg, status,2, status,0, cstack
  4683 ;; Tracked objects:
  4684 ;;		On entry : 0/0
  4685 ;;		On exit  : 0/0
  4686 ;;		Unchanged: 0/0
  4687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4688 ;;      Params:         0       6       0       0       0       0       0       0       0
  4689 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4690 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4691 ;;      Totals:         0       6       0       0       0       0       0       0       0
  4692 ;;Total ram usage:        6 bytes
  4693 ;; Hardware stack levels used:    1
  4694 ;; Hardware stack levels required when called:    3
  4695 ;; This function calls:
  4696 ;;		___ftadd
  4697 ;; This function is called by:
  4698 ;;		_sprintf
  4699 ;; This function uses a non-reentrant model
  4700 ;;
  4701                           
  4702                           	psect	text14
  4703  002888                     __ptext14:
  4704                           	opt stack 0
  4705  002888                     ___ftsub:
  4706                           	opt stack 26
  4707                           
  4708                           ;incstack = 0
  4709  002888  0100               	movlb	0	; () banked
  4710  00288A  5169               	movf	___ftsub@f2& (0+255),w,b
  4711  00288C  116A               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  4712  00288E  116B               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  4713  002890  B4D8               	btfsc	status,2,c
  4714  002892  D006               	goto	l705
  4715                           
  4716                           ; BSR set to: 0
  4717  002894  0E00               	movlw	0
  4718  002896  1B69               	xorwf	___ftsub@f2& (0+255),f,b
  4719  002898  0E00               	movlw	0
  4720  00289A  1B6A               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  4721  00289C  0E80               	movlw	128
  4722  00289E  1B6B               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  4723  0028A0                     l705:
  4724                           
  4725                           ; BSR set to: 0
  4726                           
  4727                           ; BSR set to: 0
  4728  0028A0  C066  F045         	movff	___ftsub@f1,___ftadd@f1
  4729  0028A4  C067  F046         	movff	___ftsub@f1+1,___ftadd@f1+1
  4730  0028A8  C068  F047         	movff	___ftsub@f1+2,___ftadd@f1+2
  4731  0028AC  C069  F048         	movff	___ftsub@f2,___ftadd@f2
  4732  0028B0  C06A  F049         	movff	___ftsub@f2+1,___ftadd@f2+1
  4733  0028B4  C06B  F04A         	movff	___ftsub@f2+2,___ftadd@f2+2
  4734  0028B8  ECBB  F00B         	call	___ftadd	;wreg free
  4735  0028BC  C045  F066         	movff	?___ftadd,?___ftsub
  4736  0028C0  C046  F067         	movff	?___ftadd+1,?___ftsub+1
  4737  0028C4  C047  F068         	movff	?___ftadd+2,?___ftsub+2
  4738  0028C8  0012               	return	
  4739  0028CA                     __end_of___ftsub:
  4740                           	opt stack 0
  4741                           tblptru	equ	0xFF8
  4742                           tblptrh	equ	0xFF7
  4743                           tblptrl	equ	0xFF6
  4744                           tablat	equ	0xFF5
  4745                           prodh	equ	0xFF4
  4746                           prodl	equ	0xFF3
  4747                           wreg	equ	0xFE8
  4748                           indf2	equ	0xFDF
  4749                           postinc2	equ	0xFDE
  4750                           postdec2	equ	0xFDD
  4751                           fsr2h	equ	0xFDA
  4752                           fsr2l	equ	0xFD9
  4753                           status	equ	0xFD8
  4754                           
  4755 ;; *************** function ___ftneg *****************
  4756 ;; Defined at:
  4757 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
  4758 ;; Parameters:    Size  Location     Type
  4759 ;;  f1              3   18[COMRAM] float 
  4760 ;; Auto vars:     Size  Location     Type
  4761 ;;		None
  4762 ;; Return value:  Size  Location     Type
  4763 ;;                  3   18[COMRAM] float 
  4764 ;; Registers used:
  4765 ;;		wreg, status,2, status,0
  4766 ;; Tracked objects:
  4767 ;;		On entry : 0/0
  4768 ;;		On exit  : 0/0
  4769 ;;		Unchanged: 0/0
  4770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4771 ;;      Params:         3       0       0       0       0       0       0       0       0
  4772 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4773 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4774 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4775 ;;Total ram usage:        3 bytes
  4776 ;; Hardware stack levels used:    1
  4777 ;; Hardware stack levels required when called:    1
  4778 ;; This function calls:
  4779 ;;		Nothing
  4780 ;; This function is called by:
  4781 ;;		_sprintf
  4782 ;; This function uses a non-reentrant model
  4783 ;;
  4784                           
  4785                           	psect	text15
  4786  00295E                     __ptext15:
  4787                           	opt stack 0
  4788  00295E                     ___ftneg:
  4789                           	opt stack 28
  4790                           
  4791                           ;incstack = 0
  4792  00295E  5013               	movf	___ftneg@f1,w,c
  4793  002960  1014               	iorwf	___ftneg@f1+1,w,c
  4794  002962  1015               	iorwf	___ftneg@f1+2,w,c
  4795  002964  B4D8               	btfsc	status,2,c
  4796  002966  D006               	goto	l699
  4797  002968  0E00               	movlw	0
  4798  00296A  1A13               	xorwf	___ftneg@f1,f,c
  4799  00296C  0E00               	movlw	0
  4800  00296E  1A14               	xorwf	___ftneg@f1+1,f,c
  4801  002970  0E80               	movlw	128
  4802  002972  1A15               	xorwf	___ftneg@f1+2,f,c
  4803  002974                     l699:
  4804  002974  C013  F013         	movff	___ftneg@f1,?___ftneg
  4805  002978  C014  F014         	movff	___ftneg@f1+1,?___ftneg+1
  4806  00297C  C015  F015         	movff	___ftneg@f1+2,?___ftneg+2
  4807  002980  0012               	return		;funcret
  4808  002982                     __end_of___ftneg:
  4809                           	opt stack 0
  4810                           tblptru	equ	0xFF8
  4811                           tblptrh	equ	0xFF7
  4812                           tblptrl	equ	0xFF6
  4813                           tablat	equ	0xFF5
  4814                           prodh	equ	0xFF4
  4815                           prodl	equ	0xFF3
  4816                           wreg	equ	0xFE8
  4817                           indf2	equ	0xFDF
  4818                           postinc2	equ	0xFDE
  4819                           postdec2	equ	0xFDD
  4820                           fsr2h	equ	0xFDA
  4821                           fsr2l	equ	0xFD9
  4822                           status	equ	0xFD8
  4823                           
  4824 ;; *************** function _pacienteMuerto *****************
  4825 ;; Defined at:
  4826 ;;		line 123 in file "ECG.c"
  4827 ;; Parameters:    Size  Location     Type
  4828 ;;  testv           3   29[COMRAM] float 
  4829 ;; Auto vars:     Size  Location     Type
  4830 ;;		None
  4831 ;; Return value:  Size  Location     Type
  4832 ;;                  1    wreg      void 
  4833 ;; Registers used:
  4834 ;;		wreg, status,2, status,0, cstack
  4835 ;; Tracked objects:
  4836 ;;		On entry : 0/0
  4837 ;;		On exit  : 0/0
  4838 ;;		Unchanged: 0/0
  4839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4840 ;;      Params:         3       0       0       0       0       0       0       0       0
  4841 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4842 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4843 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4844 ;;Total ram usage:        3 bytes
  4845 ;; Hardware stack levels used:    1
  4846 ;; Hardware stack levels required when called:    2
  4847 ;; This function calls:
  4848 ;;		___ftge
  4849 ;; This function is called by:
  4850 ;;		_main
  4851 ;; This function uses a non-reentrant model
  4852 ;;
  4853                           
  4854                           	psect	text16
  4855  002840                     __ptext16:
  4856                           	opt stack 0
  4857  002840                     _pacienteMuerto:
  4858                           	opt stack 28
  4859                           
  4860                           ;ECG.c: 125: if(testv<50 && testv>-10){
  4861                           
  4862                           ;incstack = 0
  4863  002840  C01E  F013         	movff	pacienteMuerto@testv,___ftge@ff1
  4864  002844  C01F  F014         	movff	pacienteMuerto@testv+1,___ftge@ff1+1
  4865  002848  C020  F015         	movff	pacienteMuerto@testv+2,___ftge@ff1+2
  4866  00284C  0E00               	movlw	0
  4867  00284E  6E16               	movwf	___ftge@ff2,c
  4868  002850  0E48               	movlw	72
  4869  002852  6E17               	movwf	___ftge@ff2+1,c
  4870  002854  0E42               	movlw	66
  4871  002856  6E18               	movwf	___ftge@ff2+2,c
  4872  002858  ECDB  F011         	call	___ftge	;wreg free
  4873  00285C  B0D8               	btfsc	status,0,c
  4874  00285E  D012               	goto	l42
  4875  002860  0E00               	movlw	0
  4876  002862  6E13               	movwf	___ftge@ff1,c
  4877  002864  0E20               	movlw	32
  4878  002866  6E14               	movwf	___ftge@ff1+1,c
  4879  002868  0EC1               	movlw	193
  4880  00286A  6E15               	movwf	___ftge@ff1+2,c
  4881  00286C  C01E  F016         	movff	pacienteMuerto@testv,___ftge@ff2
  4882  002870  C01F  F017         	movff	pacienteMuerto@testv+1,___ftge@ff2+1
  4883  002874  C020  F018         	movff	pacienteMuerto@testv+2,___ftge@ff2+2
  4884  002878  ECDB  F011         	call	___ftge	;wreg free
  4885  00287C  B0D8               	btfsc	status,0,c
  4886  00287E  D002               	goto	l42
  4887                           
  4888                           ;ECG.c: 126: PORTCbits.RC1=1;
  4889  002880  8282               	bsf	3970,1,c	;volatile
  4890                           
  4891                           ;ECG.c: 128: }
  4892  002882  0012               	return	
  4893  002884                     l42:
  4894                           
  4895                           ;ECG.c: 130: else
  4896                           ;ECG.c: 131: {
  4897                           ;ECG.c: 133: PORTCbits.RC1=0;
  4898  002884  9282               	bcf	3970,1,c	;volatile
  4899  002886  0012               	return	
  4900  002888                     __end_of_pacienteMuerto:
  4901                           	opt stack 0
  4902                           tblptru	equ	0xFF8
  4903                           tblptrh	equ	0xFF7
  4904                           tblptrl	equ	0xFF6
  4905                           tablat	equ	0xFF5
  4906                           prodh	equ	0xFF4
  4907                           prodl	equ	0xFF3
  4908                           wreg	equ	0xFE8
  4909                           indf2	equ	0xFDF
  4910                           postinc2	equ	0xFDE
  4911                           postdec2	equ	0xFDD
  4912                           fsr2h	equ	0xFDA
  4913                           fsr2l	equ	0xFD9
  4914                           status	equ	0xFD8
  4915                           
  4916 ;; *************** function ___ftge *****************
  4917 ;; Defined at:
  4918 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  4919 ;; Parameters:    Size  Location     Type
  4920 ;;  ff1             3   18[COMRAM] float 
  4921 ;;  ff2             3   21[COMRAM] float 
  4922 ;; Auto vars:     Size  Location     Type
  4923 ;;		None
  4924 ;; Return value:  Size  Location     Type
  4925 ;;		None               void
  4926 ;; Registers used:
  4927 ;;		wreg, status,2, status,0
  4928 ;; Tracked objects:
  4929 ;;		On entry : 0/0
  4930 ;;		On exit  : 0/0
  4931 ;;		Unchanged: 0/0
  4932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4933 ;;      Params:         6       0       0       0       0       0       0       0       0
  4934 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4935 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4936 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4937 ;;Total ram usage:        9 bytes
  4938 ;; Hardware stack levels used:    1
  4939 ;; Hardware stack levels required when called:    1
  4940 ;; This function calls:
  4941 ;;		Nothing
  4942 ;; This function is called by:
  4943 ;;		_main
  4944 ;;		_pacienteMuerto
  4945 ;;		_sprintf
  4946 ;; This function uses a non-reentrant model
  4947 ;;
  4948                           
  4949                           	psect	text17
  4950  0023B6                     __ptext17:
  4951                           	opt stack 0
  4952  0023B6                     ___ftge:
  4953                           	opt stack 28
  4954                           
  4955                           ;incstack = 0
  4956  0023B6  AE15               	btfss	___ftge@ff1+2,7,c
  4957  0023B8  D016               	goto	l681
  4958  0023BA  C013  F019         	movff	___ftge@ff1,??___ftge
  4959  0023BE  C014  F01A         	movff	___ftge@ff1+1,??___ftge+1
  4960  0023C2  C015  F01B         	movff	___ftge@ff1+2,??___ftge+2
  4961  0023C6  1E19               	comf	??___ftge,f,c
  4962  0023C8  1E1A               	comf	??___ftge+1,f,c
  4963  0023CA  1E1B               	comf	??___ftge+2,f,c
  4964  0023CC  2A19               	incf	??___ftge,f,c
  4965  0023CE  0E00               	movlw	0
  4966  0023D0  221A               	addwfc	??___ftge+1,f,c
  4967  0023D2  221B               	addwfc	??___ftge+2,f,c
  4968  0023D4  0E00               	movlw	0
  4969  0023D6  2419               	addwf	??___ftge,w,c
  4970  0023D8  6E13               	movwf	___ftge@ff1,c
  4971  0023DA  0E00               	movlw	0
  4972  0023DC  201A               	addwfc	??___ftge+1,w,c
  4973  0023DE  6E14               	movwf	___ftge@ff1+1,c
  4974  0023E0  0E80               	movlw	128
  4975  0023E2  201B               	addwfc	??___ftge+2,w,c
  4976  0023E4  6E15               	movwf	___ftge@ff1+2,c
  4977  0023E6                     l681:
  4978  0023E6  AE18               	btfss	___ftge@ff2+2,7,c
  4979  0023E8  D016               	goto	l682
  4980  0023EA  C016  F019         	movff	___ftge@ff2,??___ftge
  4981  0023EE  C017  F01A         	movff	___ftge@ff2+1,??___ftge+1
  4982  0023F2  C018  F01B         	movff	___ftge@ff2+2,??___ftge+2
  4983  0023F6  1E19               	comf	??___ftge,f,c
  4984  0023F8  1E1A               	comf	??___ftge+1,f,c
  4985  0023FA  1E1B               	comf	??___ftge+2,f,c
  4986  0023FC  2A19               	incf	??___ftge,f,c
  4987  0023FE  0E00               	movlw	0
  4988  002400  221A               	addwfc	??___ftge+1,f,c
  4989  002402  221B               	addwfc	??___ftge+2,f,c
  4990  002404  0E00               	movlw	0
  4991  002406  2419               	addwf	??___ftge,w,c
  4992  002408  6E16               	movwf	___ftge@ff2,c
  4993  00240A  0E00               	movlw	0
  4994  00240C  201A               	addwfc	??___ftge+1,w,c
  4995  00240E  6E17               	movwf	___ftge@ff2+1,c
  4996  002410  0E80               	movlw	128
  4997  002412  201B               	addwfc	??___ftge+2,w,c
  4998  002414  6E18               	movwf	___ftge@ff2+2,c
  4999  002416                     l682:
  5000  002416  0E00               	movlw	0
  5001  002418  1A13               	xorwf	___ftge@ff1,f,c
  5002  00241A  0E00               	movlw	0
  5003  00241C  1A14               	xorwf	___ftge@ff1+1,f,c
  5004  00241E  0E80               	movlw	128
  5005  002420  1A15               	xorwf	___ftge@ff1+2,f,c
  5006  002422  0E00               	movlw	0
  5007  002424  1A16               	xorwf	___ftge@ff2,f,c
  5008  002426  0E00               	movlw	0
  5009  002428  1A17               	xorwf	___ftge@ff2+1,f,c
  5010  00242A  0E80               	movlw	128
  5011  00242C  1A18               	xorwf	___ftge@ff2+2,f,c
  5012  00242E  5016               	movf	___ftge@ff2,w,c
  5013  002430  5C13               	subwf	___ftge@ff1,w,c
  5014  002432  5017               	movf	___ftge@ff2+1,w,c
  5015  002434  5814               	subwfb	___ftge@ff1+1,w,c
  5016  002436  5018               	movf	___ftge@ff2+2,w,c
  5017  002438  5815               	subwfb	___ftge@ff1+2,w,c
  5018  00243A  B0D8               	btfsc	status,0,c
  5019  00243C  D002               	goto	l2275
  5020  00243E  90D8               	bcf	status,0,c
  5021  002440  0012               	return	
  5022  002442                     l2275:
  5023  002442  80D8               	bsf	status,0,c
  5024  002444  0012               	return	
  5025  002446                     __end_of___ftge:
  5026                           	opt stack 0
  5027                           tblptru	equ	0xFF8
  5028                           tblptrh	equ	0xFF7
  5029                           tblptrl	equ	0xFF6
  5030                           tablat	equ	0xFF5
  5031                           prodh	equ	0xFF4
  5032                           prodl	equ	0xFF3
  5033                           wreg	equ	0xFE8
  5034                           indf2	equ	0xFDF
  5035                           postinc2	equ	0xFDE
  5036                           postdec2	equ	0xFDD
  5037                           fsr2h	equ	0xFDA
  5038                           fsr2l	equ	0xFD9
  5039                           status	equ	0xFD8
  5040                           
  5041 ;; *************** function _lcd_origen *****************
  5042 ;; Defined at:
  5043 ;;		line 308 in file "lcd.c"
  5044 ;; Parameters:    Size  Location     Type
  5045 ;;		None
  5046 ;; Auto vars:     Size  Location     Type
  5047 ;;		None
  5048 ;; Return value:  Size  Location     Type
  5049 ;;                  1    wreg      void 
  5050 ;; Registers used:
  5051 ;;		wreg, status,2, status,0, cstack
  5052 ;; Tracked objects:
  5053 ;;		On entry : 0/0
  5054 ;;		On exit  : 0/0
  5055 ;;		Unchanged: 0/0
  5056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5057 ;;      Params:         0       0       0       0       0       0       0       0       0
  5058 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5059 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5060 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5061 ;;Total ram usage:        0 bytes
  5062 ;; Hardware stack levels used:    1
  5063 ;; Hardware stack levels required when called:    6
  5064 ;; This function calls:
  5065 ;;		_lcd_orden
  5066 ;;		_wait_in_ms
  5067 ;; This function is called by:
  5068 ;;		_main
  5069 ;;		_lcd_ubicarXY
  5070 ;; This function uses a non-reentrant model
  5071 ;;
  5072                           
  5073                           	psect	text18
  5074  002A06                     __ptext18:
  5075                           	opt stack 0
  5076  002A06                     _lcd_origen:
  5077                           	opt stack 24
  5078                           
  5079                           ;lcd.c: 309: lcd_orden(0x02);
  5080                           
  5081                           ;incstack = 0
  5082  002A06  0E00               	movlw	0
  5083  002A08  0100               	movlb	0	; () banked
  5084  002A0A  6F72               	movwf	(lcd_orden@orden+1)& (0+255),b
  5085  002A0C  0E02               	movlw	2
  5086  002A0E  6F71               	movwf	lcd_orden@orden& (0+255),b
  5087  002A10  EC57  F013         	call	_lcd_orden	;wreg free
  5088                           
  5089                           ;lcd.c: 310: wait_in_ms(4);
  5090  002A14  0E00               	movlw	0
  5091  002A16  6E4A               	movwf	wait_in_ms@time_in_ms+1,c
  5092  002A18  0E04               	movlw	4
  5093  002A1A  6E49               	movwf	wait_in_ms@time_in_ms,c
  5094  002A1C  ECCF  F010         	call	_wait_in_ms	;wreg free
  5095  002A20  0012               	return		;funcret
  5096  002A22                     __end_of_lcd_origen:
  5097                           	opt stack 0
  5098                           tblptru	equ	0xFF8
  5099                           tblptrh	equ	0xFF7
  5100                           tblptrl	equ	0xFF6
  5101                           tablat	equ	0xFF5
  5102                           prodh	equ	0xFF4
  5103                           prodl	equ	0xFF3
  5104                           wreg	equ	0xFE8
  5105                           indf2	equ	0xFDF
  5106                           postinc2	equ	0xFDE
  5107                           postdec2	equ	0xFDD
  5108                           fsr2h	equ	0xFDA
  5109                           fsr2l	equ	0xFD9
  5110                           status	equ	0xFD8
  5111                           
  5112 ;; *************** function _lcd_iniciar *****************
  5113 ;; Defined at:
  5114 ;;		line 224 in file "lcd.c"
  5115 ;; Parameters:    Size  Location     Type
  5116 ;;		None
  5117 ;; Auto vars:     Size  Location     Type
  5118 ;;		None
  5119 ;; Return value:  Size  Location     Type
  5120 ;;                  1    wreg      void 
  5121 ;; Registers used:
  5122 ;;		wreg, status,2, status,0, cstack
  5123 ;; Tracked objects:
  5124 ;;		On entry : 0/0
  5125 ;;		On exit  : 0/0
  5126 ;;		Unchanged: 0/0
  5127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5128 ;;      Params:         0       0       0       0       0       0       0       0       0
  5129 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5130 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5131 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5132 ;;Total ram usage:        0 bytes
  5133 ;; Hardware stack levels used:    1
  5134 ;; Hardware stack levels required when called:    6
  5135 ;; This function calls:
  5136 ;;		_lcd_orden
  5137 ;;		_lcd_pulso
  5138 ;;		_wait_in_ms
  5139 ;; This function is called by:
  5140 ;;		_main
  5141 ;; This function uses a non-reentrant model
  5142 ;;
  5143                           
  5144                           	psect	text19
  5145  0020C8                     __ptext19:
  5146                           	opt stack 0
  5147  0020C8                     _lcd_iniciar:
  5148                           	opt stack 24
  5149                           
  5150                           ;lcd.c: 225: TRISDbits.TRISD1=0;
  5151                           
  5152                           ;incstack = 0
  5153  0020C8  9295               	bcf	3989,1,c	;volatile
  5154                           
  5155                           ;lcd.c: 226: TRISDbits.TRISD2=0;
  5156  0020CA  9495               	bcf	3989,2,c	;volatile
  5157                           
  5158                           ;lcd.c: 227: TRISDbits.TRISD3=0;
  5159  0020CC  9695               	bcf	3989,3,c	;volatile
  5160                           
  5161                           ;lcd.c: 228: TRISDbits.TRISD4=0;
  5162  0020CE  9895               	bcf	3989,4,c	;volatile
  5163                           
  5164                           ;lcd.c: 229: TRISDbits.TRISD5=0;
  5165  0020D0  9A95               	bcf	3989,5,c	;volatile
  5166                           
  5167                           ;lcd.c: 230: TRISDbits.TRISD6=0;
  5168  0020D2  9C95               	bcf	3989,6,c	;volatile
  5169                           
  5170                           ;lcd.c: 231: TRISDbits.TRISD7=0;
  5171  0020D4  9E95               	bcf	3989,7,c	;volatile
  5172                           
  5173                           ;lcd.c: 233: PORTDbits.RD1=0;
  5174  0020D6  9283               	bcf	3971,1,c	;volatile
  5175                           
  5176                           ;lcd.c: 234: PORTDbits.RD2=0;
  5177  0020D8  9483               	bcf	3971,2,c	;volatile
  5178                           
  5179                           ;lcd.c: 235: PORTDbits.RD3=0;
  5180  0020DA  9683               	bcf	3971,3,c	;volatile
  5181                           
  5182                           ;lcd.c: 236: PORTDbits.RD4=0;
  5183  0020DC  9883               	bcf	3971,4,c	;volatile
  5184                           
  5185                           ;lcd.c: 237: PORTDbits.RD5=0;
  5186  0020DE  9A83               	bcf	3971,5,c	;volatile
  5187                           
  5188                           ;lcd.c: 238: PORTDbits.RD6=0;
  5189  0020E0  9C83               	bcf	3971,6,c	;volatile
  5190                           
  5191                           ;lcd.c: 239: PORTDbits.RD7=0;
  5192  0020E2  9E83               	bcf	3971,7,c	;volatile
  5193                           
  5194                           ;lcd.c: 241: wait_in_ms(20);
  5195  0020E4  0E00               	movlw	0
  5196  0020E6  6E4A               	movwf	wait_in_ms@time_in_ms+1,c
  5197  0020E8  0E14               	movlw	20
  5198  0020EA  6E49               	movwf	wait_in_ms@time_in_ms,c
  5199  0020EC  ECCF  F010         	call	_wait_in_ms	;wreg free
  5200                           
  5201                           ;lcd.c: 242: PORTD=0X03<<4;
  5202  0020F0  0E30               	movlw	48
  5203  0020F2  6E83               	movwf	3971,c	;volatile
  5204                           
  5205                           ;lcd.c: 243: lcd_pulso();
  5206  0020F4  ECF4  F014         	call	_lcd_pulso	;wreg free
  5207                           
  5208                           ;lcd.c: 244: wait_in_ms(4);
  5209  0020F8  0E00               	movlw	0
  5210  0020FA  6E4A               	movwf	wait_in_ms@time_in_ms+1,c
  5211  0020FC  0E04               	movlw	4
  5212  0020FE  6E49               	movwf	wait_in_ms@time_in_ms,c
  5213  002100  ECCF  F010         	call	_wait_in_ms	;wreg free
  5214                           
  5215                           ;lcd.c: 246: PORTD=0X03<<4;
  5216  002104  0E30               	movlw	48
  5217  002106  6E83               	movwf	3971,c	;volatile
  5218                           
  5219                           ;lcd.c: 247: lcd_pulso();
  5220  002108  ECF4  F014         	call	_lcd_pulso	;wreg free
  5221                           
  5222                           ;lcd.c: 248: wait_in_ms(4);
  5223  00210C  0E00               	movlw	0
  5224  00210E  6E4A               	movwf	wait_in_ms@time_in_ms+1,c
  5225  002110  0E04               	movlw	4
  5226  002112  6E49               	movwf	wait_in_ms@time_in_ms,c
  5227  002114  ECCF  F010         	call	_wait_in_ms	;wreg free
  5228                           
  5229                           ;lcd.c: 250: PORTD=0X03<<4;
  5230  002118  0E30               	movlw	48
  5231  00211A  6E83               	movwf	3971,c	;volatile
  5232                           
  5233                           ;lcd.c: 251: lcd_pulso();
  5234  00211C  ECF4  F014         	call	_lcd_pulso	;wreg free
  5235                           
  5236                           ;lcd.c: 252: wait_in_ms(1);
  5237  002120  0E00               	movlw	0
  5238  002122  6E4A               	movwf	wait_in_ms@time_in_ms+1,c
  5239  002124  0E01               	movlw	1
  5240  002126  6E49               	movwf	wait_in_ms@time_in_ms,c
  5241  002128  ECCF  F010         	call	_wait_in_ms	;wreg free
  5242                           
  5243                           ;lcd.c: 254: PORTD=0X02<<4;
  5244  00212C  0E20               	movlw	32
  5245  00212E  6E83               	movwf	3971,c	;volatile
  5246                           
  5247                           ;lcd.c: 255: lcd_pulso();
  5248  002130  ECF4  F014         	call	_lcd_pulso	;wreg free
  5249                           
  5250                           ;lcd.c: 257: lcd_orden(0x28);
  5251  002134  0E00               	movlw	0
  5252  002136  0100               	movlb	0	; () banked
  5253  002138  6F72               	movwf	(lcd_orden@orden+1)& (0+255),b
  5254  00213A  0E28               	movlw	40
  5255  00213C  6F71               	movwf	lcd_orden@orden& (0+255),b
  5256  00213E  EC57  F013         	call	_lcd_orden	;wreg free
  5257                           
  5258                           ;lcd.c: 258: wait_in_ms(8);
  5259  002142  0E00               	movlw	0
  5260  002144  6E4A               	movwf	wait_in_ms@time_in_ms+1,c
  5261  002146  0E08               	movlw	8
  5262  002148  6E49               	movwf	wait_in_ms@time_in_ms,c
  5263  00214A  ECCF  F010         	call	_wait_in_ms	;wreg free
  5264                           
  5265                           ;lcd.c: 260: lcd_orden(0x0c);
  5266  00214E  0E00               	movlw	0
  5267  002150  0100               	movlb	0	; () banked
  5268  002152  6F72               	movwf	(lcd_orden@orden+1)& (0+255),b
  5269  002154  0E0C               	movlw	12
  5270  002156  6F71               	movwf	lcd_orden@orden& (0+255),b
  5271  002158  EC57  F013         	call	_lcd_orden	;wreg free
  5272                           
  5273                           ;lcd.c: 261: wait_in_ms(8);
  5274  00215C  0E00               	movlw	0
  5275  00215E  6E4A               	movwf	wait_in_ms@time_in_ms+1,c
  5276  002160  0E08               	movlw	8
  5277  002162  6E49               	movwf	wait_in_ms@time_in_ms,c
  5278  002164  ECCF  F010         	call	_wait_in_ms	;wreg free
  5279                           
  5280                           ;lcd.c: 263: lcd_orden(0x01);
  5281  002168  0E00               	movlw	0
  5282  00216A  0100               	movlb	0	; () banked
  5283  00216C  6F72               	movwf	(lcd_orden@orden+1)& (0+255),b
  5284  00216E  0E01               	movlw	1
  5285  002170  6F71               	movwf	lcd_orden@orden& (0+255),b
  5286  002172  EC57  F013         	call	_lcd_orden	;wreg free
  5287                           
  5288                           ;lcd.c: 264: wait_in_ms(2);
  5289  002176  0E00               	movlw	0
  5290  002178  6E4A               	movwf	wait_in_ms@time_in_ms+1,c
  5291  00217A  0E02               	movlw	2
  5292  00217C  6E49               	movwf	wait_in_ms@time_in_ms,c
  5293  00217E  ECCF  F010         	call	_wait_in_ms	;wreg free
  5294                           
  5295                           ;lcd.c: 266: lcd_orden(0x06);
  5296  002182  0E00               	movlw	0
  5297  002184  0100               	movlb	0	; () banked
  5298  002186  6F72               	movwf	(lcd_orden@orden+1)& (0+255),b
  5299  002188  0E06               	movlw	6
  5300  00218A  6F71               	movwf	lcd_orden@orden& (0+255),b
  5301  00218C  EC57  F013         	call	_lcd_orden	;wreg free
  5302                           
  5303                           ;lcd.c: 267: wait_in_ms(8);
  5304  002190  0E00               	movlw	0
  5305  002192  6E4A               	movwf	wait_in_ms@time_in_ms+1,c
  5306  002194  0E08               	movlw	8
  5307  002196  6E49               	movwf	wait_in_ms@time_in_ms,c
  5308  002198  ECCF  F010         	call	_wait_in_ms	;wreg free
  5309  00219C  0012               	return		;funcret
  5310  00219E                     __end_of_lcd_iniciar:
  5311                           	opt stack 0
  5312                           tblptru	equ	0xFF8
  5313                           tblptrh	equ	0xFF7
  5314                           tblptrl	equ	0xFF6
  5315                           tablat	equ	0xFF5
  5316                           prodh	equ	0xFF4
  5317                           prodl	equ	0xFF3
  5318                           wreg	equ	0xFE8
  5319                           indf2	equ	0xFDF
  5320                           postinc2	equ	0xFDE
  5321                           postdec2	equ	0xFDD
  5322                           fsr2h	equ	0xFDA
  5323                           fsr2l	equ	0xFD9
  5324                           status	equ	0xFD8
  5325                           
  5326 ;; *************** function _lcd_orden *****************
  5327 ;; Defined at:
  5328 ;;		line 277 in file "lcd.c"
  5329 ;; Parameters:    Size  Location     Type
  5330 ;;  orden           2   17[BANK0 ] unsigned int 
  5331 ;; Auto vars:     Size  Location     Type
  5332 ;;		None
  5333 ;; Return value:  Size  Location     Type
  5334 ;;                  1    wreg      void 
  5335 ;; Registers used:
  5336 ;;		wreg, status,2, status,0, cstack
  5337 ;; Tracked objects:
  5338 ;;		On entry : 0/0
  5339 ;;		On exit  : 0/0
  5340 ;;		Unchanged: 0/0
  5341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5342 ;;      Params:         0       2       0       0       0       0       0       0       0
  5343 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5344 ;;      Temps:          0       5       0       0       0       0       0       0       0
  5345 ;;      Totals:         0       7       0       0       0       0       0       0       0
  5346 ;;Total ram usage:        7 bytes
  5347 ;; Hardware stack levels used:    1
  5348 ;; Hardware stack levels required when called:    5
  5349 ;; This function calls:
  5350 ;;		_lcd_pulso
  5351 ;; This function is called by:
  5352 ;;		_lcd_iniciar
  5353 ;;		_lcd_origen
  5354 ;;		_lcd_limpiar
  5355 ;;		_lcd_ubicarXY
  5356 ;; This function uses a non-reentrant model
  5357 ;;
  5358                           
  5359                           	psect	text20
  5360  0026AE                     __ptext20:
  5361                           	opt stack 0
  5362  0026AE                     _lcd_orden:
  5363                           	opt stack 24
  5364                           
  5365                           ;lcd.c: 278: PORTDbits.RD1=0;
  5366                           
  5367                           ;incstack = 0
  5368  0026AE  9283               	bcf	3971,1,c	;volatile
  5369                           
  5370                           ;lcd.c: 280: PORTD=(((((PORTD>>4&0x0f)|0x0f)&(orden>>4&0x0f))<<4)|(PORTD&0x0f));
  5371  0026B0  CF83 F073          	movff	3971,??_lcd_orden	;volatile
  5372  0026B4  0E0F               	movlw	15
  5373  0026B6  0100               	movlb	0	; () banked
  5374  0026B8  1773               	andwf	??_lcd_orden& (0+255),f,b
  5375  0026BA  C071  F074         	movff	lcd_orden@orden,??_lcd_orden+1
  5376  0026BE  C072  F075         	movff	lcd_orden@orden+1,??_lcd_orden+2
  5377  0026C2  0E04               	movlw	4
  5378  0026C4  6F76               	movwf	(??_lcd_orden+3)& (0+255),b
  5379  0026C6                     u2535:
  5380  0026C6  90D8               	bcf	status,0,c
  5381  0026C8  3375               	rrcf	(??_lcd_orden+2)& (0+255),f,b
  5382  0026CA  3374               	rrcf	(??_lcd_orden+1)& (0+255),f,b
  5383  0026CC  2F76               	decfsz	(??_lcd_orden+3)& (0+255),f,b
  5384  0026CE  D7FB               	goto	u2535
  5385  0026D0  0E0F               	movlw	15
  5386  0026D2  1774               	andwf	(??_lcd_orden+1)& (0+255),f,b
  5387  0026D4  3883               	swapf	3971,w,c	;volatile
  5388  0026D6  0B0F               	andlw	15
  5389  0026D8  0B0F               	andlw	15
  5390  0026DA  090F               	iorlw	15
  5391  0026DC  1574               	andwf	(??_lcd_orden+1)& (0+255),w,b
  5392  0026DE  6F77               	movwf	(??_lcd_orden+4)& (0+255),b
  5393  0026E0  3977               	swapf	(??_lcd_orden+4)& (0+255),w,b
  5394  0026E2  0BF0               	andlw	240
  5395  0026E4  1173               	iorwf	??_lcd_orden& (0+255),w,b
  5396  0026E6  6E83               	movwf	3971,c	;volatile
  5397                           
  5398                           ; BSR set to: 0
  5399                           ;lcd.c: 281: lcd_pulso();
  5400  0026E8  ECF4  F014         	call	_lcd_pulso	;wreg free
  5401                           
  5402                           ;lcd.c: 282: PORTD=(((((PORTD>>4&0x0f)|0x0f)&(orden&0x0f))<<4)|(PORTD&0x0f));
  5403  0026EC  CF83 F073          	movff	3971,??_lcd_orden	;volatile
  5404  0026F0  0E0F               	movlw	15
  5405  0026F2  0100               	movlb	0	; () banked
  5406  0026F4  1773               	andwf	??_lcd_orden& (0+255),f,b
  5407  0026F6  C071  F074         	movff	lcd_orden@orden,??_lcd_orden+1
  5408  0026FA  0E0F               	movlw	15
  5409  0026FC  1774               	andwf	(??_lcd_orden+1)& (0+255),f,b
  5410  0026FE  3883               	swapf	3971,w,c	;volatile
  5411  002700  0B0F               	andlw	15
  5412  002702  0B0F               	andlw	15
  5413  002704  090F               	iorlw	15
  5414  002706  1574               	andwf	(??_lcd_orden+1)& (0+255),w,b
  5415  002708  6F75               	movwf	(??_lcd_orden+2)& (0+255),b
  5416  00270A  3975               	swapf	(??_lcd_orden+2)& (0+255),w,b
  5417  00270C  0BF0               	andlw	240
  5418  00270E  1173               	iorwf	??_lcd_orden& (0+255),w,b
  5419  002710  6E83               	movwf	3971,c	;volatile
  5420                           
  5421                           ;lcd.c: 283: lcd_pulso();
  5422  002712  ECF4  F014         	call	_lcd_pulso	;wreg free
  5423  002716  0012               	return		;funcret
  5424  002718                     __end_of_lcd_orden:
  5425                           	opt stack 0
  5426                           tblptru	equ	0xFF8
  5427                           tblptrh	equ	0xFF7
  5428                           tblptrl	equ	0xFF6
  5429                           tablat	equ	0xFF5
  5430                           prodh	equ	0xFF4
  5431                           prodl	equ	0xFF3
  5432                           wreg	equ	0xFE8
  5433                           indf2	equ	0xFDF
  5434                           postinc2	equ	0xFDE
  5435                           postdec2	equ	0xFDD
  5436                           fsr2h	equ	0xFDA
  5437                           fsr2l	equ	0xFD9
  5438                           status	equ	0xFD8
  5439                           
  5440 ;; *************** function _lcd_pulso *****************
  5441 ;; Defined at:
  5442 ;;		line 270 in file "lcd.c"
  5443 ;; Parameters:    Size  Location     Type
  5444 ;;		None
  5445 ;; Auto vars:     Size  Location     Type
  5446 ;;		None
  5447 ;; Return value:  Size  Location     Type
  5448 ;;                  1    wreg      void 
  5449 ;; Registers used:
  5450 ;;		wreg, status,2, status,0, cstack
  5451 ;; Tracked objects:
  5452 ;;		On entry : 0/0
  5453 ;;		On exit  : 0/0
  5454 ;;		Unchanged: 0/0
  5455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5456 ;;      Params:         0       0       0       0       0       0       0       0       0
  5457 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5458 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5459 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5460 ;;Total ram usage:        0 bytes
  5461 ;; Hardware stack levels used:    1
  5462 ;; Hardware stack levels required when called:    4
  5463 ;; This function calls:
  5464 ;;		_wait_in_ms
  5465 ;; This function is called by:
  5466 ;;		_lcd_iniciar
  5467 ;;		_lcd_orden
  5468 ;;		_lcd_caracter
  5469 ;; This function uses a non-reentrant model
  5470 ;;
  5471                           
  5472                           	psect	text21
  5473  0029E8                     __ptext21:
  5474                           	opt stack 0
  5475  0029E8                     _lcd_pulso:
  5476                           	opt stack 24
  5477                           
  5478                           ;lcd.c: 271: PORTDbits.RD3=1;
  5479                           
  5480                           ;incstack = 0
  5481  0029E8  8683               	bsf	3971,3,c	;volatile
  5482                           
  5483                           ;lcd.c: 272: wait_in_ms(2);
  5484  0029EA  0E00               	movlw	0
  5485  0029EC  6E4A               	movwf	wait_in_ms@time_in_ms+1,c
  5486  0029EE  0E02               	movlw	2
  5487  0029F0  6E49               	movwf	wait_in_ms@time_in_ms,c
  5488  0029F2  ECCF  F010         	call	_wait_in_ms	;wreg free
  5489                           
  5490                           ;lcd.c: 273: PORTDbits.RD3=0;
  5491  0029F6  9683               	bcf	3971,3,c	;volatile
  5492                           
  5493                           ;lcd.c: 274: wait_in_ms(2);
  5494  0029F8  0E00               	movlw	0
  5495  0029FA  6E4A               	movwf	wait_in_ms@time_in_ms+1,c
  5496  0029FC  0E02               	movlw	2
  5497  0029FE  6E49               	movwf	wait_in_ms@time_in_ms,c
  5498  002A00  ECCF  F010         	call	_wait_in_ms	;wreg free
  5499  002A04  0012               	return		;funcret
  5500  002A06                     __end_of_lcd_pulso:
  5501                           	opt stack 0
  5502                           tblptru	equ	0xFF8
  5503                           tblptrh	equ	0xFF7
  5504                           tblptrl	equ	0xFF6
  5505                           tablat	equ	0xFF5
  5506                           prodh	equ	0xFF4
  5507                           prodl	equ	0xFF3
  5508                           wreg	equ	0xFE8
  5509                           indf2	equ	0xFDF
  5510                           postinc2	equ	0xFDE
  5511                           postdec2	equ	0xFDD
  5512                           fsr2h	equ	0xFDA
  5513                           fsr2l	equ	0xFD9
  5514                           status	equ	0xFD8
  5515                           
  5516 ;; *************** function _configBoard *****************
  5517 ;; Defined at:
  5518 ;;		line 11 in file "config.c"
  5519 ;; Parameters:    Size  Location     Type
  5520 ;;		None
  5521 ;; Auto vars:     Size  Location     Type
  5522 ;;		None
  5523 ;; Return value:  Size  Location     Type
  5524 ;;                  1    wreg      void 
  5525 ;; Registers used:
  5526 ;;		wreg, status,2
  5527 ;; Tracked objects:
  5528 ;;		On entry : 0/0
  5529 ;;		On exit  : 0/0
  5530 ;;		Unchanged: 0/0
  5531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5532 ;;      Params:         0       0       0       0       0       0       0       0       0
  5533 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5534 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5535 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5536 ;;Total ram usage:        0 bytes
  5537 ;; Hardware stack levels used:    1
  5538 ;; Hardware stack levels required when called:    1
  5539 ;; This function calls:
  5540 ;;		Nothing
  5541 ;; This function is called by:
  5542 ;;		_main
  5543 ;; This function uses a non-reentrant model
  5544 ;;
  5545                           
  5546                           	psect	text22
  5547  00277E                     __ptext22:
  5548                           	opt stack 0
  5549  00277E                     _configBoard:
  5550                           	opt stack 29
  5551                           
  5552                           ;config.c: 15: INTCONbits.GIE = 1;
  5553                           
  5554                           ;incstack = 0
  5555  00277E  8EF2               	bsf	intcon,7,c	;volatile
  5556                           
  5557                           ;config.c: 16: INTCONbits.PEIE = 1;
  5558  002780  8CF2               	bsf	intcon,6,c	;volatile
  5559                           
  5560                           ;config.c: 25: T0CONbits.TMR0ON = 1;
  5561  002782  8ED5               	bsf	4053,7,c	;volatile
  5562                           
  5563                           ;config.c: 26: T08BIT = 1;
  5564  002784  8CD5               	bsf	4053,6,c	;volatile
  5565                           
  5566                           ;config.c: 27: T0CONbits.T0CS = 0;
  5567  002786  9AD5               	bcf	4053,5,c	;volatile
  5568                           
  5569                           ;config.c: 29: T0CONbits.PSA = 0;
  5570  002788  96D5               	bcf	4053,3,c	;volatile
  5571                           
  5572                           ;config.c: 30: T0CONbits.T0PS = 100;
  5573  00278A  50D5               	movf	4053,w,c	;volatile
  5574  00278C  0BF8               	andlw	-8
  5575  00278E  0904               	iorlw	4
  5576  002790  6ED5               	movwf	4053,c	;volatile
  5577                           
  5578                           ;config.c: 31: INTCONbits.TMR0IF = 0;
  5579  002792  94F2               	bcf	intcon,2,c	;volatile
  5580                           
  5581                           ;config.c: 33: ADCON1bits.PCFG = 0b1111;
  5582  002794  80C1               	bsf	4033,0,c	;volatile
  5583  002796  82C1               	bsf	4033,1,c	;volatile
  5584  002798  84C1               	bsf	4033,2,c	;volatile
  5585  00279A  86C1               	bsf	4033,3,c	;volatile
  5586                           
  5587                           ;config.c: 36: TRISA=0b00000000;
  5588  00279C  0E00               	movlw	0
  5589  00279E  6E92               	movwf	3986,c	;volatile
  5590                           
  5591                           ;config.c: 37: TRISB=0b00000000;
  5592  0027A0  0E00               	movlw	0
  5593  0027A2  6E93               	movwf	3987,c	;volatile
  5594                           
  5595                           ;config.c: 44: ADCON0 = 0b00000111;
  5596  0027A4  0E07               	movlw	7
  5597  0027A6  6EC2               	movwf	4034,c	;volatile
  5598                           
  5599                           ;config.c: 48: ADCON0bits.ADON = 0;
  5600  0027A8  90C2               	bcf	4034,0,c	;volatile
  5601                           
  5602                           ;config.c: 49: ADCON0bits.GODONE = 0;
  5603  0027AA  92C2               	bcf	4034,1,c	;volatile
  5604                           
  5605                           ;config.c: 51: ADCON0bits.CHS0 = 0;
  5606  0027AC  94C2               	bcf	4034,2,c	;volatile
  5607                           
  5608                           ;config.c: 52: ADCON0bits.CHS1 = 0;
  5609  0027AE  96C2               	bcf	4034,3,c	;volatile
  5610                           
  5611                           ;config.c: 53: ADCON0bits.CHS2 = 0;
  5612  0027B0  98C2               	bcf	4034,4,c	;volatile
  5613                           
  5614                           ;config.c: 54: ADCON0bits.CHS3 = 0;
  5615  0027B2  9AC2               	bcf	4034,5,c	;volatile
  5616                           
  5617                           ;config.c: 56: ADCON1bits.VCFG0 = 0;
  5618  0027B4  98C1               	bcf	4033,4,c	;volatile
  5619                           
  5620                           ;config.c: 57: ADCON1bits.VCFG1 = 0;
  5621  0027B6  9AC1               	bcf	4033,5,c	;volatile
  5622                           
  5623                           ;config.c: 59: ADCON1bits.PCFG0 = 1;
  5624  0027B8  80C1               	bsf	4033,0,c	;volatile
  5625                           
  5626                           ;config.c: 60: ADCON1bits.PCFG1 = 1;
  5627  0027BA  82C1               	bsf	4033,1,c	;volatile
  5628                           
  5629                           ;config.c: 61: ADCON1bits.PCFG2 = 0;
  5630  0027BC  94C1               	bcf	4033,2,c	;volatile
  5631                           
  5632                           ;config.c: 62: ADCON1bits.PCFG3 = 1;
  5633  0027BE  86C1               	bsf	4033,3,c	;volatile
  5634                           
  5635                           ;config.c: 64: ADCON2bits.ADFM = 1;
  5636  0027C0  8EC0               	bsf	4032,7,c	;volatile
  5637                           
  5638                           ;config.c: 66: ADCON2bits.ACQT0 = 0;
  5639  0027C2  96C0               	bcf	4032,3,c	;volatile
  5640                           
  5641                           ;config.c: 67: ADCON2bits.ACQT1 = 0;
  5642  0027C4  98C0               	bcf	4032,4,c	;volatile
  5643                           
  5644                           ;config.c: 68: ADCON2bits.ACQT2 = 1;
  5645  0027C6  8AC0               	bsf	4032,5,c	;volatile
  5646                           
  5647                           ;config.c: 70: ADCON2bits.ADCS0 = 0;
  5648  0027C8  90C0               	bcf	4032,0,c	;volatile
  5649                           
  5650                           ;config.c: 71: ADCON2bits.ADCS1 = 1;
  5651  0027CA  82C0               	bsf	4032,1,c	;volatile
  5652                           
  5653                           ;config.c: 72: ADCON2bits.ADCS2 = 1 ;
  5654  0027CC  84C0               	bsf	4032,2,c	;volatile
  5655                           
  5656                           ;config.c: 75: TRISAbits.RA1=1;
  5657  0027CE  8292               	bsf	3986,1,c	;volatile
  5658                           
  5659                           ;config.c: 76: ADCON0bits.ADON=1;
  5660  0027D0  80C2               	bsf	4034,0,c	;volatile
  5661                           
  5662                           ;config.c: 77: PIE1bits.ADIE=1;
  5663  0027D2  8C9D               	bsf	3997,6,c	;volatile
  5664                           
  5665                           ;config.c: 78: PIR1bits.ADIF=0;
  5666  0027D4  9C9E               	bcf	3998,6,c	;volatile
  5667                           
  5668                           ;config.c: 81: ADCON0bits.GO=1;
  5669  0027D6  82C2               	bsf	4034,1,c	;volatile
  5670                           
  5671                           ;config.c: 85: TRISD=0;
  5672  0027D8  0E00               	movlw	0
  5673  0027DA  6E95               	movwf	3989,c	;volatile
  5674                           
  5675                           ;config.c: 86: PORTA=0;
  5676  0027DC  0E00               	movlw	0
  5677  0027DE  6E80               	movwf	3968,c	;volatile
  5678                           
  5679                           ;config.c: 87: TRISCbits.RC1=0;
  5680  0027E0  9294               	bcf	3988,1,c	;volatile
  5681  0027E2  0012               	return		;funcret
  5682  0027E4                     __end_of_configBoard:
  5683                           	opt stack 0
  5684                           tblptru	equ	0xFF8
  5685                           tblptrh	equ	0xFF7
  5686                           tblptrl	equ	0xFF6
  5687                           tablat	equ	0xFF5
  5688                           prodh	equ	0xFF4
  5689                           prodl	equ	0xFF3
  5690                           intcon	equ	0xFF2
  5691                           wreg	equ	0xFE8
  5692                           indf2	equ	0xFDF
  5693                           postinc2	equ	0xFDE
  5694                           postdec2	equ	0xFDD
  5695                           fsr2h	equ	0xFDA
  5696                           fsr2l	equ	0xFD9
  5697                           status	equ	0xFD8
  5698                           
  5699 ;; *************** function ___lwtoft *****************
  5700 ;; Defined at:
  5701 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
  5702 ;; Parameters:    Size  Location     Type
  5703 ;;  c               2   26[COMRAM] unsigned int 
  5704 ;; Auto vars:     Size  Location     Type
  5705 ;;		None
  5706 ;; Return value:  Size  Location     Type
  5707 ;;                  3   26[COMRAM] float 
  5708 ;; Registers used:
  5709 ;;		wreg, status,2, status,0, cstack
  5710 ;; Tracked objects:
  5711 ;;		On entry : 0/0
  5712 ;;		On exit  : 0/0
  5713 ;;		Unchanged: 0/0
  5714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5715 ;;      Params:         3       0       0       0       0       0       0       0       0
  5716 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5717 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5718 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5719 ;;Total ram usage:        3 bytes
  5720 ;; Hardware stack levels used:    1
  5721 ;; Hardware stack levels required when called:    2
  5722 ;; This function calls:
  5723 ;;		___ftpack
  5724 ;; This function is called by:
  5725 ;;		_main
  5726 ;; This function uses a non-reentrant model
  5727 ;;
  5728                           
  5729                           	psect	text23
  5730  002982                     __ptext23:
  5731                           	opt stack 0
  5732  002982                     ___lwtoft:
  5733                           	opt stack 28
  5734                           
  5735                           ;incstack = 0
  5736  002982  C01B  F013         	movff	___lwtoft@c,___ftpack@arg
  5737  002986  C01C  F014         	movff	___lwtoft@c+1,___ftpack@arg+1
  5738  00298A  6A15               	clrf	___ftpack@arg+2,c
  5739  00298C  0E8E               	movlw	142
  5740  00298E  6E16               	movwf	___ftpack@exp,c
  5741  002990  0E00               	movlw	0
  5742  002992  6E17               	movwf	___ftpack@sign,c
  5743  002994  EC37  F011         	call	___ftpack	;wreg free
  5744  002998  C013  F01B         	movff	?___ftpack,?___lwtoft
  5745  00299C  C014  F01C         	movff	?___ftpack+1,?___lwtoft+1
  5746  0029A0  C015  F01D         	movff	?___ftpack+2,?___lwtoft+2
  5747  0029A4  0012               	return	
  5748  0029A6                     __end_of___lwtoft:
  5749                           	opt stack 0
  5750                           tblptru	equ	0xFF8
  5751                           tblptrh	equ	0xFF7
  5752                           tblptrl	equ	0xFF6
  5753                           tablat	equ	0xFF5
  5754                           prodh	equ	0xFF4
  5755                           prodl	equ	0xFF3
  5756                           intcon	equ	0xFF2
  5757                           wreg	equ	0xFE8
  5758                           indf2	equ	0xFDF
  5759                           postinc2	equ	0xFDE
  5760                           postdec2	equ	0xFDD
  5761                           fsr2h	equ	0xFDA
  5762                           fsr2l	equ	0xFD9
  5763                           status	equ	0xFD8
  5764                           
  5765 ;; *************** function _USART_SendString *****************
  5766 ;; Defined at:
  5767 ;;		line 34 in file "USART_Source_File.c"
  5768 ;; Parameters:    Size  Location     Type
  5769 ;;  out             2   19[COMRAM] PTR const unsigned char 
  5770 ;;		 -> main@str(3), 
  5771 ;; Auto vars:     Size  Location     Type
  5772 ;;		None
  5773 ;; Return value:  Size  Location     Type
  5774 ;;                  1    wreg      void 
  5775 ;; Registers used:
  5776 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5777 ;; Tracked objects:
  5778 ;;		On entry : 0/0
  5779 ;;		On exit  : 0/0
  5780 ;;		Unchanged: 0/0
  5781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5782 ;;      Params:         2       0       0       0       0       0       0       0       0
  5783 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5784 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5785 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5786 ;;Total ram usage:        2 bytes
  5787 ;; Hardware stack levels used:    1
  5788 ;; Hardware stack levels required when called:    2
  5789 ;; This function calls:
  5790 ;;		_USART_TransmitChar
  5791 ;; This function is called by:
  5792 ;;		_main
  5793 ;; This function uses a non-reentrant model
  5794 ;;
  5795                           
  5796                           	psect	text24
  5797  0029A6                     __ptext24:
  5798                           	opt stack 0
  5799  0029A6                     _USART_SendString:
  5800                           	opt stack 28
  5801                           
  5802                           ;USART_Source_File.c: 36: while(*out!='\0')
  5803                           
  5804                           ;incstack = 0
  5805  0029A6  D009               	goto	l239
  5806  0029A8                     
  5807                           ;USART_Source_File.c: 37: {
  5808                           ;USART_Source_File.c: 38: USART_TransmitChar(*out);
  5809  0029A8  C014  FFD9         	movff	USART_SendString@out,fsr2l
  5810  0029AC  C015  FFDA         	movff	USART_SendString@out+1,fsr2h
  5811  0029B0  50DF               	movf	indf2,w,c
  5812  0029B2  EC18  F015         	call	_USART_TransmitChar
  5813                           
  5814                           ;USART_Source_File.c: 39: out++;
  5815  0029B6  4A14               	infsnz	USART_SendString@out,f,c
  5816  0029B8  2A15               	incf	USART_SendString@out+1,f,c
  5817  0029BA                     l239:
  5818  0029BA  C014  FFD9         	movff	USART_SendString@out,fsr2l
  5819  0029BE  C015  FFDA         	movff	USART_SendString@out+1,fsr2h
  5820  0029C2  50DF               	movf	indf2,w,c
  5821  0029C4  B4D8               	btfsc	status,2,c
  5822  0029C6  0012               	return	
  5823  0029C8  D7EF               	goto	l240
  5824  0029CA                     __end_of_USART_SendString:
  5825                           	opt stack 0
  5826                           tblptru	equ	0xFF8
  5827                           tblptrh	equ	0xFF7
  5828                           tblptrl	equ	0xFF6
  5829                           tablat	equ	0xFF5
  5830                           prodh	equ	0xFF4
  5831                           prodl	equ	0xFF3
  5832                           intcon	equ	0xFF2
  5833                           wreg	equ	0xFE8
  5834                           indf2	equ	0xFDF
  5835                           postinc2	equ	0xFDE
  5836                           postdec2	equ	0xFDD
  5837                           fsr2h	equ	0xFDA
  5838                           fsr2l	equ	0xFD9
  5839                           status	equ	0xFD8
  5840                           
  5841 ;; *************** function _USART_TransmitChar *****************
  5842 ;; Defined at:
  5843 ;;		line 20 in file "USART_Source_File.c"
  5844 ;; Parameters:    Size  Location     Type
  5845 ;;  out             1    wreg     unsigned char 
  5846 ;; Auto vars:     Size  Location     Type
  5847 ;;  out             1   18[COMRAM] unsigned char 
  5848 ;; Return value:  Size  Location     Type
  5849 ;;                  1    wreg      void 
  5850 ;; Registers used:
  5851 ;;		wreg
  5852 ;; Tracked objects:
  5853 ;;		On entry : 0/0
  5854 ;;		On exit  : 0/0
  5855 ;;		Unchanged: 0/0
  5856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5857 ;;      Params:         0       0       0       0       0       0       0       0       0
  5858 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5859 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5860 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5861 ;;Total ram usage:        1 bytes
  5862 ;; Hardware stack levels used:    1
  5863 ;; Hardware stack levels required when called:    1
  5864 ;; This function calls:
  5865 ;;		Nothing
  5866 ;; This function is called by:
  5867 ;;		_USART_SendString
  5868 ;; This function uses a non-reentrant model
  5869 ;;
  5870                           
  5871                           	psect	text25
  5872  002A30                     __ptext25:
  5873                           	opt stack 0
  5874  002A30                     _USART_TransmitChar:
  5875                           	opt stack 28
  5876                           
  5877                           ;incstack = 0
  5878                           ;USART_TransmitChar@out stored from wreg
  5879  002A30  6E13               	movwf	USART_TransmitChar@out,c
  5880  002A32                     
  5881                           ;USART_Source_File.c: 22: while(TXIF==0);
  5882  002A32  A89E               	btfss	3998,4,c	;volatile
  5883  002A34  D7FE               	goto	l2659
  5884                           
  5885                           ;USART_Source_File.c: 23: TXREG=out;
  5886  002A36  C013  FFAD         	movff	USART_TransmitChar@out,4013	;volatile
  5887  002A3A  0012               	return		;funcret
  5888  002A3C                     __end_of_USART_TransmitChar:
  5889                           	opt stack 0
  5890                           tblptru	equ	0xFF8
  5891                           tblptrh	equ	0xFF7
  5892                           tblptrl	equ	0xFF6
  5893                           tablat	equ	0xFF5
  5894                           prodh	equ	0xFF4
  5895                           prodl	equ	0xFF3
  5896                           intcon	equ	0xFF2
  5897                           wreg	equ	0xFE8
  5898                           indf2	equ	0xFDF
  5899                           postinc2	equ	0xFDE
  5900                           postdec2	equ	0xFDD
  5901                           fsr2h	equ	0xFDA
  5902                           fsr2l	equ	0xFD9
  5903                           status	equ	0xFD8
  5904                           
  5905 ;; *************** function _USART_Init *****************
  5906 ;; Defined at:
  5907 ;;		line 9 in file "USART_Source_File.c"
  5908 ;; Parameters:    Size  Location     Type
  5909 ;;  baud_rate       4   11[BANK0 ] long 
  5910 ;; Auto vars:     Size  Location     Type
  5911 ;;  temp            3   15[BANK0 ] float 
  5912 ;; Return value:  Size  Location     Type
  5913 ;;                  1    wreg      void 
  5914 ;; Registers used:
  5915 ;;		wreg, status,2, status,0, cstack
  5916 ;; Tracked objects:
  5917 ;;		On entry : 0/0
  5918 ;;		On exit  : 0/0
  5919 ;;		Unchanged: 0/0
  5920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5921 ;;      Params:         0       4       0       0       0       0       0       0       0
  5922 ;;      Locals:         0       3       0       0       0       0       0       0       0
  5923 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5924 ;;      Totals:         0       7       0       0       0       0       0       0       0
  5925 ;;Total ram usage:        7 bytes
  5926 ;; Hardware stack levels used:    1
  5927 ;; Hardware stack levels required when called:    3
  5928 ;; This function calls:
  5929 ;;		___altoft
  5930 ;;		___ftadd
  5931 ;;		___ftdiv
  5932 ;;		___fttol
  5933 ;; This function is called by:
  5934 ;;		_main
  5935 ;; This function uses a non-reentrant model
  5936 ;;
  5937                           
  5938                           	psect	text26
  5939  00254C                     __ptext26:
  5940                           	opt stack 0
  5941  00254C                     _USART_Init:
  5942                           	opt stack 27
  5943                           
  5944                           ;USART_Source_File.c: 11: float temp;
  5945                           ;USART_Source_File.c: 12: TRISC6=0;
  5946                           
  5947                           ;incstack = 0
  5948  00254C  9C94               	bcf	3988,6,c	;volatile
  5949                           
  5950                           ;USART_Source_File.c: 13: TRISC7=1;
  5951  00254E  8E94               	bsf	3988,7,c	;volatile
  5952                           
  5953                           ;USART_Source_File.c: 14: temp=(((float)(8000000/64)/(float)baud_rate)-1);
  5954  002550  C06B  F01B         	movff	USART_Init@baud_rate,___altoft@c
  5955  002554  C06C  F01C         	movff	USART_Init@baud_rate+1,___altoft@c+1
  5956  002558  C06D  F01D         	movff	USART_Init@baud_rate+2,___altoft@c+2
  5957  00255C  C06E  F01E         	movff	USART_Init@baud_rate+3,___altoft@c+3
  5958  002560  ECE3  F012         	call	___altoft	;wreg free
  5959  002564  C01B  F039         	movff	?___altoft,___ftdiv@f2
  5960  002568  C01C  F03A         	movff	?___altoft+1,___ftdiv@f2+1
  5961  00256C  C01D  F03B         	movff	?___altoft+2,___ftdiv@f2+2
  5962  002570  0E24               	movlw	36
  5963  002572  6E36               	movwf	___ftdiv@f1,c
  5964  002574  0EF4               	movlw	244
  5965  002576  6E37               	movwf	___ftdiv@f1+1,c
  5966  002578  0E47               	movlw	71
  5967  00257A  6E38               	movwf	___ftdiv@f1+2,c
  5968  00257C  ECF1  F00F         	call	___ftdiv	;wreg free
  5969  002580  C036  F045         	movff	?___ftdiv,___ftadd@f1
  5970  002584  C037  F046         	movff	?___ftdiv+1,___ftadd@f1+1
  5971  002588  C038  F047         	movff	?___ftdiv+2,___ftadd@f1+2
  5972  00258C  0E00               	movlw	0
  5973  00258E  6E48               	movwf	___ftadd@f2,c
  5974  002590  0E80               	movlw	128
  5975  002592  6E49               	movwf	___ftadd@f2+1,c
  5976  002594  0EBF               	movlw	191
  5977  002596  6E4A               	movwf	___ftadd@f2+2,c
  5978  002598  ECBB  F00B         	call	___ftadd	;wreg free
  5979  00259C  C045  F06F         	movff	?___ftadd,USART_Init@temp
  5980  0025A0  C046  F070         	movff	?___ftadd+1,USART_Init@temp+1
  5981  0025A4  C047  F071         	movff	?___ftadd+2,USART_Init@temp+2
  5982                           
  5983                           ;USART_Source_File.c: 15: SPBRG=(int)temp;
  5984  0025A8  C06F  F045         	movff	USART_Init@temp,___fttol@f1
  5985  0025AC  C070  F046         	movff	USART_Init@temp+1,___fttol@f1+1
  5986  0025B0  C071  F047         	movff	USART_Init@temp+2,___fttol@f1+2
  5987  0025B4  ECFB  F00E         	call	___fttol	;wreg free
  5988  0025B8  5045               	movf	?___fttol,w,c
  5989  0025BA  6EAF               	movwf	4015,c	;volatile
  5990                           
  5991                           ;USART_Source_File.c: 16: TXSTA=0x20;
  5992  0025BC  0E20               	movlw	32
  5993  0025BE  6EAC               	movwf	4012,c	;volatile
  5994                           
  5995                           ;USART_Source_File.c: 17: RCSTA=0x90;
  5996  0025C0  0E90               	movlw	144
  5997  0025C2  6EAB               	movwf	4011,c	;volatile
  5998  0025C4  0012               	return		;funcret
  5999  0025C6                     __end_of_USART_Init:
  6000                           	opt stack 0
  6001                           tblptru	equ	0xFF8
  6002                           tblptrh	equ	0xFF7
  6003                           tblptrl	equ	0xFF6
  6004                           tablat	equ	0xFF5
  6005                           prodh	equ	0xFF4
  6006                           prodl	equ	0xFF3
  6007                           intcon	equ	0xFF2
  6008                           wreg	equ	0xFE8
  6009                           indf2	equ	0xFDF
  6010                           postinc2	equ	0xFDE
  6011                           postdec2	equ	0xFDD
  6012                           fsr2h	equ	0xFDA
  6013                           fsr2l	equ	0xFD9
  6014                           status	equ	0xFD8
  6015                           
  6016 ;; *************** function ___ftadd *****************
  6017 ;; Defined at:
  6018 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  6019 ;; Parameters:    Size  Location     Type
  6020 ;;  f1              3   68[COMRAM] float 
  6021 ;;  f2              3   71[COMRAM] float 
  6022 ;; Auto vars:     Size  Location     Type
  6023 ;;  exp1            1    5[BANK0 ] unsigned char 
  6024 ;;  exp2            1    4[BANK0 ] unsigned char 
  6025 ;;  sign            1    3[BANK0 ] unsigned char 
  6026 ;; Return value:  Size  Location     Type
  6027 ;;                  3   68[COMRAM] float 
  6028 ;; Registers used:
  6029 ;;		wreg, status,2, status,0, cstack
  6030 ;; Tracked objects:
  6031 ;;		On entry : 0/0
  6032 ;;		On exit  : 0/0
  6033 ;;		Unchanged: 0/0
  6034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6035 ;;      Params:         6       0       0       0       0       0       0       0       0
  6036 ;;      Locals:         0       3       0       0       0       0       0       0       0
  6037 ;;      Temps:          0       3       0       0       0       0       0       0       0
  6038 ;;      Totals:         6       6       0       0       0       0       0       0       0
  6039 ;;Total ram usage:       12 bytes
  6040 ;; Hardware stack levels used:    1
  6041 ;; Hardware stack levels required when called:    2
  6042 ;; This function calls:
  6043 ;;		___ftpack
  6044 ;; This function is called by:
  6045 ;;		_USART_Init
  6046 ;;		_sprintf
  6047 ;;		___ftsub
  6048 ;; This function uses a non-reentrant model
  6049 ;;
  6050                           
  6051                           	psect	text27
  6052  001776                     __ptext27:
  6053                           	opt stack 0
  6054  001776                     ___ftadd:
  6055                           	opt stack 26
  6056                           
  6057                           ;incstack = 0
  6058  001776  C047  F060         	movff	___ftadd@f1+2,??___ftadd
  6059  00177A  0100               	movlb	0	; () banked
  6060  00177C  6B61               	clrf	(??___ftadd+1)& (0+255),b
  6061  00177E  6B62               	clrf	(??___ftadd+2)& (0+255),b
  6062  001780  3446               	rlcf	___ftadd@f1+1,w,c
  6063  001782  3760               	rlcf	??___ftadd& (0+255),f,b
  6064  001784  E301               	bnc	u2141
  6065  001786  8161               	bsf	(??___ftadd+1)& (0+255),0,b
  6066  001788                     u2141:
  6067  001788  5160               	movf	??___ftadd& (0+255),w,b
  6068  00178A  6F65               	movwf	___ftadd@exp1& (0+255),b
  6069  00178C  C04A  F060         	movff	___ftadd@f2+2,??___ftadd
  6070  001790  6B61               	clrf	(??___ftadd+1)& (0+255),b
  6071  001792  6B62               	clrf	(??___ftadd+2)& (0+255),b
  6072  001794  3449               	rlcf	___ftadd@f2+1,w,c
  6073  001796  3760               	rlcf	??___ftadd& (0+255),f,b
  6074  001798  E301               	bnc	u2151
  6075  00179A  8161               	bsf	(??___ftadd+1)& (0+255),0,b
  6076  00179C                     u2151:
  6077  00179C  5160               	movf	??___ftadd& (0+255),w,b
  6078  00179E  6F64               	movwf	___ftadd@exp2& (0+255),b
  6079                           
  6080                           ; BSR set to: 0
  6081  0017A0  5165               	movf	___ftadd@exp1& (0+255),w,b
  6082  0017A2  B4D8               	btfsc	status,2,c
  6083  0017A4  D00B               	goto	u2180
  6084                           
  6085                           ; BSR set to: 0
  6086  0017A6  5164               	movf	___ftadd@exp2& (0+255),w,b
  6087  0017A8  5D65               	subwf	___ftadd@exp1& (0+255),w,b
  6088  0017AA  B0D8               	btfsc	status,0,c
  6089  0017AC  D00E               	goto	l623
  6090                           
  6091                           ; BSR set to: 0
  6092  0017AE  5165               	movf	___ftadd@exp1& (0+255),w,b
  6093  0017B0  0800               	sublw	0
  6094  0017B2  2564               	addwf	___ftadd@exp2& (0+255),w,b
  6095  0017B4  6F60               	movwf	??___ftadd& (0+255),b
  6096  0017B6  0E18               	movlw	24
  6097  0017B8  6560               	cpfsgt	??___ftadd& (0+255),b
  6098  0017BA  D007               	goto	l623
  6099  0017BC                     u2180:
  6100                           
  6101                           ; BSR set to: 0
  6102  0017BC  C048  F045         	movff	___ftadd@f2,?___ftadd
  6103  0017C0  C049  F046         	movff	___ftadd@f2+1,?___ftadd+1
  6104  0017C4  C04A  F047         	movff	___ftadd@f2+2,?___ftadd+2
  6105  0017C8  0012               	return	
  6106  0017CA                     l623:
  6107                           
  6108                           ; BSR set to: 0
  6109                           
  6110                           ; BSR set to: 0
  6111  0017CA  5164               	movf	___ftadd@exp2& (0+255),w,b
  6112  0017CC  B4D8               	btfsc	status,2,c
  6113  0017CE  D00B               	goto	u2210
  6114                           
  6115                           ; BSR set to: 0
  6116  0017D0  5165               	movf	___ftadd@exp1& (0+255),w,b
  6117  0017D2  5D64               	subwf	___ftadd@exp2& (0+255),w,b
  6118  0017D4  B0D8               	btfsc	status,0,c
  6119  0017D6  D00E               	goto	l627
  6120                           
  6121                           ; BSR set to: 0
  6122  0017D8  5164               	movf	___ftadd@exp2& (0+255),w,b
  6123  0017DA  0800               	sublw	0
  6124  0017DC  2565               	addwf	___ftadd@exp1& (0+255),w,b
  6125  0017DE  6F60               	movwf	??___ftadd& (0+255),b
  6126  0017E0  0E18               	movlw	24
  6127  0017E2  6560               	cpfsgt	??___ftadd& (0+255),b
  6128  0017E4  D007               	goto	l627
  6129  0017E6                     u2210:
  6130                           
  6131                           ; BSR set to: 0
  6132  0017E6  C045  F045         	movff	___ftadd@f1,?___ftadd
  6133  0017EA  C046  F046         	movff	___ftadd@f1+1,?___ftadd+1
  6134  0017EE  C047  F047         	movff	___ftadd@f1+2,?___ftadd+2
  6135  0017F2  0012               	return	
  6136  0017F4                     l627:
  6137                           
  6138                           ; BSR set to: 0
  6139                           
  6140                           ; BSR set to: 0
  6141  0017F4  0E06               	movlw	6
  6142  0017F6  6F63               	movwf	___ftadd@sign& (0+255),b
  6143                           
  6144                           ; BSR set to: 0
  6145  0017F8  BE47               	btfsc	___ftadd@f1+2,7,c
  6146                           
  6147                           ; BSR set to: 0
  6148  0017FA  8F63               	bsf	___ftadd@sign& (0+255),7,b
  6149                           
  6150                           ; BSR set to: 0
  6151                           
  6152                           ; BSR set to: 0
  6153  0017FC  BE4A               	btfsc	___ftadd@f2+2,7,c
  6154                           
  6155                           ; BSR set to: 0
  6156  0017FE  8D63               	bsf	___ftadd@sign& (0+255),6,b
  6157                           
  6158                           ; BSR set to: 0
  6159  001800  8E46               	bsf	___ftadd@f1+1,7,c
  6160                           
  6161                           ; BSR set to: 0
  6162  001802  0EFF               	movlw	255
  6163  001804  1645               	andwf	___ftadd@f1,f,c
  6164  001806  0EFF               	movlw	255
  6165  001808  1646               	andwf	___ftadd@f1+1,f,c
  6166  00180A  0E00               	movlw	0
  6167  00180C  1647               	andwf	___ftadd@f1+2,f,c
  6168  00180E  8E49               	bsf	___ftadd@f2+1,7,c
  6169                           
  6170                           ; BSR set to: 0
  6171  001810  0EFF               	movlw	255
  6172  001812  1648               	andwf	___ftadd@f2,f,c
  6173  001814  0EFF               	movlw	255
  6174  001816  1649               	andwf	___ftadd@f2+1,f,c
  6175  001818  0E00               	movlw	0
  6176  00181A  164A               	andwf	___ftadd@f2+2,f,c
  6177                           
  6178                           ; BSR set to: 0
  6179  00181C  5164               	movf	___ftadd@exp2& (0+255),w,b
  6180  00181E  5D65               	subwf	___ftadd@exp1& (0+255),w,b
  6181  001820  B0D8               	btfsc	status,0,c
  6182  001822  D01B               	goto	l632
  6183  001824                     u2240:
  6184                           
  6185                           ; BSR set to: 0
  6186                           
  6187                           ; BSR set to: 0
  6188  001824  90D8               	bcf	status,0,c
  6189  001826  3648               	rlcf	___ftadd@f2,f,c
  6190  001828  3649               	rlcf	___ftadd@f2+1,f,c
  6191  00182A  364A               	rlcf	___ftadd@f2+2,f,c
  6192  00182C  0764               	decf	___ftadd@exp2& (0+255),f,b
  6193                           
  6194                           ; BSR set to: 0
  6195  00182E  5165               	movf	___ftadd@exp1& (0+255),w,b
  6196  001830  1964               	xorwf	___ftadd@exp2& (0+255),w,b
  6197  001832  B4D8               	btfsc	status,2,c
  6198  001834  D00D               	goto	l637
  6199                           
  6200                           ; BSR set to: 0
  6201  001836  0763               	decf	___ftadd@sign& (0+255),f,b
  6202  001838  C063  F060         	movff	___ftadd@sign,??___ftadd
  6203  00183C  0E07               	movlw	7
  6204  00183E  1760               	andwf	??___ftadd& (0+255),f,b
  6205  001840  B4D8               	btfsc	status,2,c
  6206  001842  D006               	goto	l637
  6207  001844  D7EF               	goto	u2240
  6208  001846                     
  6209                           ; BSR set to: 0
  6210                           
  6211                           ; BSR set to: 0
  6212  001846  90D8               	bcf	status,0,c
  6213  001848  3247               	rrcf	___ftadd@f1+2,f,c
  6214  00184A  3246               	rrcf	___ftadd@f1+1,f,c
  6215  00184C  3245               	rrcf	___ftadd@f1,f,c
  6216  00184E  2B65               	incf	___ftadd@exp1& (0+255),f,b
  6217  001850                     l637:
  6218                           
  6219                           ; BSR set to: 0
  6220                           
  6221                           ; BSR set to: 0
  6222  001850  5164               	movf	___ftadd@exp2& (0+255),w,b
  6223  001852  1965               	xorwf	___ftadd@exp1& (0+255),w,b
  6224  001854  B4D8               	btfsc	status,2,c
  6225  001856  D01F               	goto	u2310
  6226  001858  D7F6               	goto	l638
  6227  00185A                     l632:
  6228                           
  6229                           ; BSR set to: 0
  6230                           
  6231                           ; BSR set to: 0
  6232  00185A  5165               	movf	___ftadd@exp1& (0+255),w,b
  6233  00185C  5D64               	subwf	___ftadd@exp2& (0+255),w,b
  6234  00185E  B0D8               	btfsc	status,0,c
  6235  001860  D01A               	goto	u2310
  6236  001862                     u2280:
  6237                           
  6238                           ; BSR set to: 0
  6239                           
  6240                           ; BSR set to: 0
  6241  001862  90D8               	bcf	status,0,c
  6242  001864  3645               	rlcf	___ftadd@f1,f,c
  6243  001866  3646               	rlcf	___ftadd@f1+1,f,c
  6244  001868  3647               	rlcf	___ftadd@f1+2,f,c
  6245  00186A  0765               	decf	___ftadd@exp1& (0+255),f,b
  6246                           
  6247                           ; BSR set to: 0
  6248  00186C  5165               	movf	___ftadd@exp1& (0+255),w,b
  6249  00186E  1964               	xorwf	___ftadd@exp2& (0+255),w,b
  6250  001870  B4D8               	btfsc	status,2,c
  6251  001872  D00D               	goto	l646
  6252                           
  6253                           ; BSR set to: 0
  6254  001874  0763               	decf	___ftadd@sign& (0+255),f,b
  6255  001876  C063  F060         	movff	___ftadd@sign,??___ftadd
  6256  00187A  0E07               	movlw	7
  6257  00187C  1760               	andwf	??___ftadd& (0+255),f,b
  6258  00187E  B4D8               	btfsc	status,2,c
  6259  001880  D006               	goto	l646
  6260  001882  D7EF               	goto	u2280
  6261  001884                     
  6262                           ; BSR set to: 0
  6263                           
  6264                           ; BSR set to: 0
  6265  001884  90D8               	bcf	status,0,c
  6266  001886  324A               	rrcf	___ftadd@f2+2,f,c
  6267  001888  3249               	rrcf	___ftadd@f2+1,f,c
  6268  00188A  3248               	rrcf	___ftadd@f2,f,c
  6269  00188C  2B64               	incf	___ftadd@exp2& (0+255),f,b
  6270  00188E                     l646:
  6271                           
  6272                           ; BSR set to: 0
  6273                           
  6274                           ; BSR set to: 0
  6275  00188E  5164               	movf	___ftadd@exp2& (0+255),w,b
  6276  001890  1965               	xorwf	___ftadd@exp1& (0+255),w,b
  6277  001892  A4D8               	btfss	status,2,c
  6278  001894  D7F7               	goto	l647
  6279  001896                     u2310:
  6280                           
  6281                           ; BSR set to: 0
  6282                           
  6283                           ; BSR set to: 0
  6284                           
  6285                           ; BSR set to: 0
  6286  001896  AF63               	btfss	___ftadd@sign& (0+255),7,b
  6287  001898  D00C               	goto	l649
  6288                           
  6289                           ; BSR set to: 0
  6290  00189A  0EFF               	movlw	255
  6291  00189C  1A45               	xorwf	___ftadd@f1,f,c
  6292  00189E  0EFF               	movlw	255
  6293  0018A0  1A46               	xorwf	___ftadd@f1+1,f,c
  6294  0018A2  0EFF               	movlw	255
  6295  0018A4  1A47               	xorwf	___ftadd@f1+2,f,c
  6296  0018A6  0E01               	movlw	1
  6297  0018A8  2645               	addwf	___ftadd@f1,f,c
  6298  0018AA  0E00               	movlw	0
  6299  0018AC  2246               	addwfc	___ftadd@f1+1,f,c
  6300  0018AE  0E00               	movlw	0
  6301  0018B0  2247               	addwfc	___ftadd@f1+2,f,c
  6302  0018B2                     l649:
  6303                           
  6304                           ; BSR set to: 0
  6305  0018B2  AD63               	btfss	___ftadd@sign& (0+255),6,b
  6306  0018B4  D00C               	goto	l650
  6307                           
  6308                           ; BSR set to: 0
  6309  0018B6  0EFF               	movlw	255
  6310  0018B8  1A48               	xorwf	___ftadd@f2,f,c
  6311  0018BA  0EFF               	movlw	255
  6312  0018BC  1A49               	xorwf	___ftadd@f2+1,f,c
  6313  0018BE  0EFF               	movlw	255
  6314  0018C0  1A4A               	xorwf	___ftadd@f2+2,f,c
  6315  0018C2  0E01               	movlw	1
  6316  0018C4  2648               	addwf	___ftadd@f2,f,c
  6317  0018C6  0E00               	movlw	0
  6318  0018C8  2249               	addwfc	___ftadd@f2+1,f,c
  6319  0018CA  0E00               	movlw	0
  6320  0018CC  224A               	addwfc	___ftadd@f2+2,f,c
  6321  0018CE                     l650:
  6322                           
  6323                           ; BSR set to: 0
  6324                           
  6325                           ; BSR set to: 0
  6326  0018CE  0E00               	movlw	0
  6327  0018D0  6F63               	movwf	___ftadd@sign& (0+255),b
  6328                           
  6329                           ; BSR set to: 0
  6330  0018D2  5045               	movf	___ftadd@f1,w,c
  6331  0018D4  2648               	addwf	___ftadd@f2,f,c
  6332  0018D6  5046               	movf	___ftadd@f1+1,w,c
  6333  0018D8  2249               	addwfc	___ftadd@f2+1,f,c
  6334  0018DA  5047               	movf	___ftadd@f1+2,w,c
  6335  0018DC  224A               	addwfc	___ftadd@f2+2,f,c
  6336                           
  6337                           ; BSR set to: 0
  6338  0018DE  AE4A               	btfss	___ftadd@f2+2,7,c
  6339  0018E0  D00E               	goto	l651
  6340                           
  6341                           ; BSR set to: 0
  6342  0018E2  0EFF               	movlw	255
  6343  0018E4  1A48               	xorwf	___ftadd@f2,f,c
  6344  0018E6  0EFF               	movlw	255
  6345  0018E8  1A49               	xorwf	___ftadd@f2+1,f,c
  6346  0018EA  0EFF               	movlw	255
  6347  0018EC  1A4A               	xorwf	___ftadd@f2+2,f,c
  6348  0018EE  0E01               	movlw	1
  6349  0018F0  2648               	addwf	___ftadd@f2,f,c
  6350  0018F2  0E00               	movlw	0
  6351  0018F4  2249               	addwfc	___ftadd@f2+1,f,c
  6352  0018F6  0E00               	movlw	0
  6353  0018F8  224A               	addwfc	___ftadd@f2+2,f,c
  6354                           
  6355                           ; BSR set to: 0
  6356  0018FA  0E01               	movlw	1
  6357  0018FC  6F63               	movwf	___ftadd@sign& (0+255),b
  6358  0018FE                     l651:
  6359                           
  6360                           ; BSR set to: 0
  6361                           
  6362                           ; BSR set to: 0
  6363  0018FE  C048  F013         	movff	___ftadd@f2,___ftpack@arg
  6364  001902  C049  F014         	movff	___ftadd@f2+1,___ftpack@arg+1
  6365  001906  C04A  F015         	movff	___ftadd@f2+2,___ftpack@arg+2
  6366  00190A  C065  F016         	movff	___ftadd@exp1,___ftpack@exp
  6367  00190E  C063  F017         	movff	___ftadd@sign,___ftpack@sign
  6368  001912  EC37  F011         	call	___ftpack	;wreg free
  6369  001916  C013  F045         	movff	?___ftpack,?___ftadd
  6370  00191A  C014  F046         	movff	?___ftpack+1,?___ftadd+1
  6371  00191E  C015  F047         	movff	?___ftpack+2,?___ftadd+2
  6372  001922  0012               	return	
  6373  001924                     __end_of___ftadd:
  6374                           	opt stack 0
  6375                           tblptru	equ	0xFF8
  6376                           tblptrh	equ	0xFF7
  6377                           tblptrl	equ	0xFF6
  6378                           tablat	equ	0xFF5
  6379                           prodh	equ	0xFF4
  6380                           prodl	equ	0xFF3
  6381                           intcon	equ	0xFF2
  6382                           wreg	equ	0xFE8
  6383                           indf2	equ	0xFDF
  6384                           postinc2	equ	0xFDE
  6385                           postdec2	equ	0xFDD
  6386                           fsr2h	equ	0xFDA
  6387                           fsr2l	equ	0xFD9
  6388                           status	equ	0xFD8
  6389                           
  6390 ;; *************** function ___altoft *****************
  6391 ;; Defined at:
  6392 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
  6393 ;; Parameters:    Size  Location     Type
  6394 ;;  c               4   26[COMRAM] long 
  6395 ;; Auto vars:     Size  Location     Type
  6396 ;;  sign            1   35[COMRAM] unsigned char 
  6397 ;;  exp             1   34[COMRAM] unsigned char 
  6398 ;; Return value:  Size  Location     Type
  6399 ;;                  3   26[COMRAM] float 
  6400 ;; Registers used:
  6401 ;;		wreg, status,2, status,0, cstack
  6402 ;; Tracked objects:
  6403 ;;		On entry : 0/0
  6404 ;;		On exit  : 0/0
  6405 ;;		Unchanged: 0/0
  6406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6407 ;;      Params:         4       0       0       0       0       0       0       0       0
  6408 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6409 ;;      Temps:          4       0       0       0       0       0       0       0       0
  6410 ;;      Totals:        10       0       0       0       0       0       0       0       0
  6411 ;;Total ram usage:       10 bytes
  6412 ;; Hardware stack levels used:    1
  6413 ;; Hardware stack levels required when called:    2
  6414 ;; This function calls:
  6415 ;;		___ftpack
  6416 ;; This function is called by:
  6417 ;;		_USART_Init
  6418 ;; This function uses a non-reentrant model
  6419 ;;
  6420                           
  6421                           	psect	text28
  6422  0025C6                     __ptext28:
  6423                           	opt stack 0
  6424  0025C6                     ___altoft:
  6425                           	opt stack 27
  6426                           
  6427                           ;incstack = 0
  6428  0025C6  0E00               	movlw	0
  6429  0025C8  6E24               	movwf	___altoft@sign,c
  6430  0025CA  0E8E               	movlw	142
  6431  0025CC  6E23               	movwf	___altoft@exp,c
  6432  0025CE  AE1E               	btfss	___altoft@c+3,7,c
  6433  0025D0  D011               	goto	l445
  6434  0025D2  1E1E               	comf	___altoft@c+3,f,c
  6435  0025D4  1E1D               	comf	___altoft@c+2,f,c
  6436  0025D6  1E1C               	comf	___altoft@c+1,f,c
  6437  0025D8  6C1B               	negf	___altoft@c,c
  6438  0025DA  0E00               	movlw	0
  6439  0025DC  221C               	addwfc	___altoft@c+1,f,c
  6440  0025DE  221D               	addwfc	___altoft@c+2,f,c
  6441  0025E0  221E               	addwfc	___altoft@c+3,f,c
  6442  0025E2  0E01               	movlw	1
  6443  0025E4  6E24               	movwf	___altoft@sign,c
  6444  0025E6  D006               	goto	l445
  6445  0025E8  90D8               	bcf	status,0,c
  6446  0025EA  321E               	rrcf	___altoft@c+3,f,c
  6447  0025EC  321D               	rrcf	___altoft@c+2,f,c
  6448  0025EE  321C               	rrcf	___altoft@c+1,f,c
  6449  0025F0  321B               	rrcf	___altoft@c,f,c
  6450  0025F2  2A23               	incf	___altoft@exp,f,c
  6451  0025F4                     l445:
  6452  0025F4  0E00               	movlw	0
  6453  0025F6  141B               	andwf	___altoft@c,w,c
  6454  0025F8  6E1F               	movwf	??___altoft& (0+255),c
  6455  0025FA  0E00               	movlw	0
  6456  0025FC  141C               	andwf	___altoft@c+1,w,c
  6457  0025FE  6E20               	movwf	(??___altoft+1)& (0+255),c
  6458  002600  0E00               	movlw	0
  6459  002602  141D               	andwf	___altoft@c+2,w,c
  6460  002604  6E21               	movwf	(??___altoft+2)& (0+255),c
  6461  002606  0EFF               	movlw	255
  6462  002608  141E               	andwf	___altoft@c+3,w,c
  6463  00260A  6E22               	movwf	(??___altoft+3)& (0+255),c
  6464  00260C  501F               	movf	??___altoft,w,c
  6465  00260E  1020               	iorwf	??___altoft+1,w,c
  6466  002610  1021               	iorwf	??___altoft+2,w,c
  6467  002612  1022               	iorwf	??___altoft+3,w,c
  6468  002614  A4D8               	btfss	status,2,c
  6469  002616  D7E8               	goto	l446
  6470  002618  C01B  F013         	movff	___altoft@c,___ftpack@arg
  6471  00261C  C01C  F014         	movff	___altoft@c+1,___ftpack@arg+1
  6472  002620  C01D  F015         	movff	___altoft@c+2,___ftpack@arg+2
  6473  002624  C023  F016         	movff	___altoft@exp,___ftpack@exp
  6474  002628  C024  F017         	movff	___altoft@sign,___ftpack@sign
  6475  00262C  EC37  F011         	call	___ftpack	;wreg free
  6476  002630  C013  F01B         	movff	?___ftpack,?___altoft
  6477  002634  C014  F01C         	movff	?___ftpack+1,?___altoft+1
  6478  002638  C015  F01D         	movff	?___ftpack+2,?___altoft+2
  6479  00263C  0012               	return	
  6480  00263E                     __end_of___altoft:
  6481                           	opt stack 0
  6482                           tblptru	equ	0xFF8
  6483                           tblptrh	equ	0xFF7
  6484                           tblptrl	equ	0xFF6
  6485                           tablat	equ	0xFF5
  6486                           prodh	equ	0xFF4
  6487                           prodl	equ	0xFF3
  6488                           intcon	equ	0xFF2
  6489                           wreg	equ	0xFE8
  6490                           indf2	equ	0xFDF
  6491                           postinc2	equ	0xFDE
  6492                           postdec2	equ	0xFDD
  6493                           fsr2h	equ	0xFDA
  6494                           fsr2l	equ	0xFD9
  6495                           status	equ	0xFD8
  6496                           
  6497 ;; *************** function _MSdelay *****************
  6498 ;; Defined at:
  6499 ;;		line 43 in file "USART_Source_File.c"
  6500 ;; Parameters:    Size  Location     Type
  6501 ;;  val             2   18[COMRAM] unsigned int 
  6502 ;; Auto vars:     Size  Location     Type
  6503 ;;  j               2   22[COMRAM] unsigned int 
  6504 ;;  i               2   20[COMRAM] unsigned int 
  6505 ;; Return value:  Size  Location     Type
  6506 ;;                  1    wreg      void 
  6507 ;; Registers used:
  6508 ;;		wreg, status,2, status,0
  6509 ;; Tracked objects:
  6510 ;;		On entry : 0/0
  6511 ;;		On exit  : 0/0
  6512 ;;		Unchanged: 0/0
  6513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6514 ;;      Params:         2       0       0       0       0       0       0       0       0
  6515 ;;      Locals:         4       0       0       0       0       0       0       0       0
  6516 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6517 ;;      Totals:         6       0       0       0       0       0       0       0       0
  6518 ;;Total ram usage:        6 bytes
  6519 ;; Hardware stack levels used:    1
  6520 ;; Hardware stack levels required when called:    1
  6521 ;; This function calls:
  6522 ;;		Nothing
  6523 ;; This function is called by:
  6524 ;;		_main
  6525 ;; This function uses a non-reentrant model
  6526 ;;
  6527                           
  6528                           	psect	text29
  6529  002902                     __ptext29:
  6530                           	opt stack 0
  6531  002902                     _MSdelay:
  6532                           	opt stack 29
  6533                           
  6534                           ;USART_Source_File.c: 45: unsigned int i,j;
  6535                           ;USART_Source_File.c: 46: for(i=0;i<=val;i++)
  6536                           
  6537                           ;incstack = 0
  6538  002902  0E00               	movlw	0
  6539  002904  6E16               	movwf	MSdelay@i+1,c
  6540  002906  0E00               	movlw	0
  6541  002908  6E15               	movwf	MSdelay@i,c
  6542  00290A  D00F               	goto	l245
  6543  00290C                     
  6544                           ;USART_Source_File.c: 47: for(j=0;j<81;j++);
  6545  00290C  0E00               	movlw	0
  6546  00290E  6E18               	movwf	MSdelay@j+1,c
  6547  002910  0E00               	movlw	0
  6548  002912  6E17               	movwf	MSdelay@j,c
  6549  002914                     l3035:
  6550  002914  5018               	movf	MSdelay@j+1,w,c
  6551  002916  E107               	bnz	l3043
  6552  002918  0E51               	movlw	81
  6553  00291A  5C17               	subwf	MSdelay@j,w,c
  6554  00291C  B0D8               	btfsc	status,0,c
  6555  00291E  D003               	goto	u2950
  6556  002920  4A17               	infsnz	MSdelay@j,f,c
  6557  002922  2A18               	incf	MSdelay@j+1,f,c
  6558  002924  D7F7               	goto	l3035
  6559  002926                     u2950:
  6560  002926                     l3043:
  6561  002926  4A15               	infsnz	MSdelay@i,f,c
  6562  002928  2A16               	incf	MSdelay@i+1,f,c
  6563  00292A                     l245:
  6564  00292A  5015               	movf	MSdelay@i,w,c
  6565  00292C  5C13               	subwf	MSdelay@val,w,c
  6566  00292E  5016               	movf	MSdelay@i+1,w,c
  6567  002930  5814               	subwfb	MSdelay@val+1,w,c
  6568  002932  A0D8               	btfss	status,0,c
  6569  002934  0012               	return	
  6570  002936  D7EA               	goto	l246
  6571  002938                     __end_of_MSdelay:
  6572                           	opt stack 0
  6573                           tblptru	equ	0xFF8
  6574                           tblptrh	equ	0xFF7
  6575                           tblptrl	equ	0xFF6
  6576                           tablat	equ	0xFF5
  6577                           prodh	equ	0xFF4
  6578                           prodl	equ	0xFF3
  6579                           intcon	equ	0xFF2
  6580                           wreg	equ	0xFE8
  6581                           indf2	equ	0xFDF
  6582                           postinc2	equ	0xFDE
  6583                           postdec2	equ	0xFDD
  6584                           fsr2h	equ	0xFDA
  6585                           fsr2l	equ	0xFD9
  6586                           status	equ	0xFD8
  6587                           
  6588 ;; *************** function _ADC_Read *****************
  6589 ;; Defined at:
  6590 ;;		line 26 in file "funciones.c"
  6591 ;; Parameters:    Size  Location     Type
  6592 ;;  channel         2   17[BANK0 ] unsigned int 
  6593 ;; Auto vars:     Size  Location     Type
  6594 ;;		None
  6595 ;; Return value:  Size  Location     Type
  6596 ;;                  2   17[BANK0 ] unsigned int 
  6597 ;; Registers used:
  6598 ;;		wreg, status,2, status,0, cstack
  6599 ;; Tracked objects:
  6600 ;;		On entry : 0/0
  6601 ;;		On exit  : 0/0
  6602 ;;		Unchanged: 0/0
  6603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6604 ;;      Params:         0       2       0       0       0       0       0       0       0
  6605 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6606 ;;      Temps:          0       2       0       0       0       0       0       0       0
  6607 ;;      Totals:         0       4       0       0       0       0       0       0       0
  6608 ;;Total ram usage:        4 bytes
  6609 ;; Hardware stack levels used:    1
  6610 ;; Hardware stack levels required when called:    4
  6611 ;; This function calls:
  6612 ;;		_wait_in_ms
  6613 ;; This function is called by:
  6614 ;;		_main
  6615 ;; This function uses a non-reentrant model
  6616 ;;
  6617                           
  6618                           	psect	text30
  6619  001CE6                     __ptext30:
  6620                           	opt stack 0
  6621  001CE6                     _ADC_Read:
  6622                           	opt stack 26
  6623                           
  6624                           ;funciones.c: 34: if (channel == 0){
  6625                           
  6626                           ;incstack = 0
  6627  001CE6  0100               	movlb	0	; () banked
  6628  001CE8  5171               	movf	ADC_Read@channel& (0+255),w,b
  6629  001CEA  1172               	iorwf	(ADC_Read@channel+1)& (0+255),w,b
  6630  001CEC  A4D8               	btfss	status,2,c
  6631  001CEE  D004               	goto	l120
  6632                           
  6633                           ; BSR set to: 0
  6634                           ;funciones.c: 35: ADCON0bits.CHS = 0b0000;
  6635  001CF0  94C2               	bcf	4034,2,c	;volatile
  6636  001CF2  96C2               	bcf	4034,3,c	;volatile
  6637  001CF4  98C2               	bcf	4034,4,c	;volatile
  6638  001CF6  9AC2               	bcf	4034,5,c	;volatile
  6639  001CF8                     l120:
  6640                           
  6641                           ; BSR set to: 0
  6642                           ;funciones.c: 36: }
  6643                           ;funciones.c: 37: if (channel == 1){
  6644                           
  6645                           ; BSR set to: 0
  6646  001CF8  0571               	decf	ADC_Read@channel& (0+255),w,b
  6647  001CFA  1172               	iorwf	(ADC_Read@channel+1)& (0+255),w,b
  6648  001CFC  A4D8               	btfss	status,2,c
  6649  001CFE  D004               	goto	l121
  6650                           
  6651                           ; BSR set to: 0
  6652                           ;funciones.c: 38: ADCON0bits.CHS = 0b0001;
  6653  001D00  50C2               	movf	4034,w,c	;volatile
  6654  001D02  0BC3               	andlw	-61
  6655  001D04  0904               	iorlw	4
  6656  001D06  6EC2               	movwf	4034,c	;volatile
  6657  001D08                     l121:
  6658                           
  6659                           ; BSR set to: 0
  6660                           ;funciones.c: 39: }
  6661                           ;funciones.c: 40: if (channel == 2){
  6662                           
  6663                           ; BSR set to: 0
  6664  001D08  0E02               	movlw	2
  6665  001D0A  1971               	xorwf	ADC_Read@channel& (0+255),w,b
  6666  001D0C  1172               	iorwf	(ADC_Read@channel+1)& (0+255),w,b
  6667  001D0E  A4D8               	btfss	status,2,c
  6668  001D10  D004               	goto	l122
  6669                           
  6670                           ; BSR set to: 0
  6671                           ;funciones.c: 41: ADCON0bits.CHS = 0010;
  6672  001D12  50C2               	movf	4034,w,c	;volatile
  6673  001D14  0BC3               	andlw	-61
  6674  001D16  0920               	iorlw	32
  6675  001D18  6EC2               	movwf	4034,c	;volatile
  6676  001D1A                     l122:
  6677                           
  6678                           ; BSR set to: 0
  6679                           ;funciones.c: 42: }
  6680                           ;funciones.c: 43: if (channel == 3){
  6681                           
  6682                           ; BSR set to: 0
  6683  001D1A  0E03               	movlw	3
  6684  001D1C  1971               	xorwf	ADC_Read@channel& (0+255),w,b
  6685  001D1E  1172               	iorwf	(ADC_Read@channel+1)& (0+255),w,b
  6686  001D20  A4D8               	btfss	status,2,c
  6687  001D22  D004               	goto	l123
  6688                           
  6689                           ; BSR set to: 0
  6690                           ;funciones.c: 44: ADCON0bits.CHS = 0011;
  6691  001D24  50C2               	movf	4034,w,c	;volatile
  6692  001D26  0BC3               	andlw	-61
  6693  001D28  0924               	iorlw	36
  6694  001D2A  6EC2               	movwf	4034,c	;volatile
  6695  001D2C                     l123:
  6696                           
  6697                           ; BSR set to: 0
  6698                           ;funciones.c: 45: }
  6699                           ;funciones.c: 46: if (channel == 4){
  6700                           
  6701                           ; BSR set to: 0
  6702  001D2C  0E04               	movlw	4
  6703  001D2E  1971               	xorwf	ADC_Read@channel& (0+255),w,b
  6704  001D30  1172               	iorwf	(ADC_Read@channel+1)& (0+255),w,b
  6705  001D32  A4D8               	btfss	status,2,c
  6706  001D34  D004               	goto	l124
  6707                           
  6708                           ; BSR set to: 0
  6709                           ;funciones.c: 47: ADCON0bits.CHS = 0100;
  6710  001D36  94C2               	bcf	4034,2,c	;volatile
  6711  001D38  96C2               	bcf	4034,3,c	;volatile
  6712  001D3A  98C2               	bcf	4034,4,c	;volatile
  6713  001D3C  9AC2               	bcf	4034,5,c	;volatile
  6714  001D3E                     l124:
  6715                           
  6716                           ; BSR set to: 0
  6717                           ;funciones.c: 48: }
  6718                           ;funciones.c: 49: if (channel == 5){
  6719                           
  6720                           ; BSR set to: 0
  6721  001D3E  0E05               	movlw	5
  6722  001D40  1971               	xorwf	ADC_Read@channel& (0+255),w,b
  6723  001D42  1172               	iorwf	(ADC_Read@channel+1)& (0+255),w,b
  6724  001D44  A4D8               	btfss	status,2,c
  6725  001D46  D004               	goto	l125
  6726                           
  6727                           ; BSR set to: 0
  6728                           ;funciones.c: 50: ADCON0bits.CHS = 0101;
  6729  001D48  50C2               	movf	4034,w,c	;volatile
  6730  001D4A  0BC3               	andlw	-61
  6731  001D4C  0904               	iorlw	4
  6732  001D4E  6EC2               	movwf	4034,c	;volatile
  6733  001D50                     l125:
  6734                           
  6735                           ; BSR set to: 0
  6736                           ;funciones.c: 51: }
  6737                           ;funciones.c: 52: if (channel == 6){
  6738                           
  6739                           ; BSR set to: 0
  6740  001D50  0E06               	movlw	6
  6741  001D52  1971               	xorwf	ADC_Read@channel& (0+255),w,b
  6742  001D54  1172               	iorwf	(ADC_Read@channel+1)& (0+255),w,b
  6743  001D56  A4D8               	btfss	status,2,c
  6744  001D58  D004               	goto	l126
  6745                           
  6746                           ; BSR set to: 0
  6747                           ;funciones.c: 53: ADCON0bits.CHS = 0110;
  6748  001D5A  50C2               	movf	4034,w,c	;volatile
  6749  001D5C  0BC3               	andlw	-61
  6750  001D5E  0920               	iorlw	32
  6751  001D60  6EC2               	movwf	4034,c	;volatile
  6752  001D62                     l126:
  6753                           
  6754                           ; BSR set to: 0
  6755                           ;funciones.c: 54: }
  6756                           ;funciones.c: 55: if (channel == 7){
  6757                           
  6758                           ; BSR set to: 0
  6759  001D62  0E07               	movlw	7
  6760  001D64  1971               	xorwf	ADC_Read@channel& (0+255),w,b
  6761  001D66  1172               	iorwf	(ADC_Read@channel+1)& (0+255),w,b
  6762  001D68  A4D8               	btfss	status,2,c
  6763  001D6A  D004               	goto	l127
  6764                           
  6765                           ; BSR set to: 0
  6766                           ;funciones.c: 56: ADCON0bits.CHS = 0111;
  6767  001D6C  50C2               	movf	4034,w,c	;volatile
  6768  001D6E  0BC3               	andlw	-61
  6769  001D70  0924               	iorlw	36
  6770  001D72  6EC2               	movwf	4034,c	;volatile
  6771  001D74                     l127:
  6772                           
  6773                           ; BSR set to: 0
  6774                           ;funciones.c: 57: }
  6775                           ;funciones.c: 58: if (channel == 8){
  6776                           
  6777                           ; BSR set to: 0
  6778  001D74  0E08               	movlw	8
  6779  001D76  1971               	xorwf	ADC_Read@channel& (0+255),w,b
  6780  001D78  1172               	iorwf	(ADC_Read@channel+1)& (0+255),w,b
  6781  001D7A  A4D8               	btfss	status,2,c
  6782  001D7C  D004               	goto	l128
  6783                           
  6784                           ; BSR set to: 0
  6785                           ;funciones.c: 59: ADCON0bits.CHS = 1000;
  6786  001D7E  50C2               	movf	4034,w,c	;volatile
  6787  001D80  0BC3               	andlw	-61
  6788  001D82  0920               	iorlw	32
  6789  001D84  6EC2               	movwf	4034,c	;volatile
  6790  001D86                     l128:
  6791                           
  6792                           ; BSR set to: 0
  6793                           ;funciones.c: 60: }
  6794                           ;funciones.c: 61: if (channel == 9){
  6795                           
  6796                           ; BSR set to: 0
  6797  001D86  0E09               	movlw	9
  6798  001D88  1971               	xorwf	ADC_Read@channel& (0+255),w,b
  6799  001D8A  1172               	iorwf	(ADC_Read@channel+1)& (0+255),w,b
  6800  001D8C  A4D8               	btfss	status,2,c
  6801  001D8E  D004               	goto	l129
  6802                           
  6803                           ; BSR set to: 0
  6804                           ;funciones.c: 62: ADCON0bits.CHS = 1001;
  6805  001D90  50C2               	movf	4034,w,c	;volatile
  6806  001D92  0BC3               	andlw	-61
  6807  001D94  0924               	iorlw	36
  6808  001D96  6EC2               	movwf	4034,c	;volatile
  6809  001D98                     l129:
  6810                           
  6811                           ; BSR set to: 0
  6812                           ;funciones.c: 63: }
  6813                           ;funciones.c: 64: if (channel == 10){
  6814                           
  6815                           ; BSR set to: 0
  6816  001D98  0E0A               	movlw	10
  6817  001D9A  1971               	xorwf	ADC_Read@channel& (0+255),w,b
  6818  001D9C  1172               	iorwf	(ADC_Read@channel+1)& (0+255),w,b
  6819  001D9E  A4D8               	btfss	status,2,c
  6820  001DA0  D004               	goto	l130
  6821                           
  6822                           ; BSR set to: 0
  6823                           ;funciones.c: 65: ADCON0bits.CHS = 1010;
  6824  001DA2  50C2               	movf	4034,w,c	;volatile
  6825  001DA4  0BC3               	andlw	-61
  6826  001DA6  0908               	iorlw	8
  6827  001DA8  6EC2               	movwf	4034,c	;volatile
  6828  001DAA                     l130:
  6829                           
  6830                           ; BSR set to: 0
  6831                           ;funciones.c: 66: }
  6832                           ;funciones.c: 67: if (channel == 11){
  6833                           
  6834                           ; BSR set to: 0
  6835  001DAA  0E0B               	movlw	11
  6836  001DAC  1971               	xorwf	ADC_Read@channel& (0+255),w,b
  6837  001DAE  1172               	iorwf	(ADC_Read@channel+1)& (0+255),w,b
  6838  001DB0  A4D8               	btfss	status,2,c
  6839  001DB2  D004               	goto	l131
  6840                           
  6841                           ; BSR set to: 0
  6842                           ;funciones.c: 68: ADCON0bits.CHS = 1011;
  6843  001DB4  50C2               	movf	4034,w,c	;volatile
  6844  001DB6  0BC3               	andlw	-61
  6845  001DB8  090C               	iorlw	12
  6846  001DBA  6EC2               	movwf	4034,c	;volatile
  6847  001DBC                     l131:
  6848                           
  6849                           ; BSR set to: 0
  6850                           ;funciones.c: 69: }
  6851                           ;funciones.c: 70: if (channel == 12){
  6852                           
  6853                           ; BSR set to: 0
  6854  001DBC  0E0C               	movlw	12
  6855  001DBE  1971               	xorwf	ADC_Read@channel& (0+255),w,b
  6856  001DC0  1172               	iorwf	(ADC_Read@channel+1)& (0+255),w,b
  6857  001DC2  A4D8               	btfss	status,2,c
  6858  001DC4  D004               	goto	l132
  6859                           
  6860                           ; BSR set to: 0
  6861                           ;funciones.c: 71: ADCON0bits.CHS = 1100;
  6862  001DC6  50C2               	movf	4034,w,c	;volatile
  6863  001DC8  0BC3               	andlw	-61
  6864  001DCA  0930               	iorlw	48
  6865  001DCC  6EC2               	movwf	4034,c	;volatile
  6866  001DCE                     l132:
  6867                           
  6868                           ; BSR set to: 0
  6869                           ;funciones.c: 72: }
  6870                           ;funciones.c: 79: wait_in_ms(2);
  6871                           
  6872                           ; BSR set to: 0
  6873  001DCE  0E00               	movlw	0
  6874  001DD0  6E4A               	movwf	wait_in_ms@time_in_ms+1,c
  6875  001DD2  0E02               	movlw	2
  6876  001DD4  6E49               	movwf	wait_in_ms@time_in_ms,c
  6877  001DD6  ECCF  F010         	call	_wait_in_ms	;wreg free
  6878                           
  6879                           ;funciones.c: 80: ADCON0bits.GO_nDONE = 1;
  6880  001DDA  82C2               	bsf	4034,1,c	;volatile
  6881  001DDC  B2C2               	btfsc	4034,1,c	;volatile
  6882  001DDE  D7FE               	goto	l134
  6883                           
  6884                           ;funciones.c: 82: return ((ADRESH<<8)+ADRESL);
  6885  001DE0  50C4               	movf	4036,w,c	;volatile
  6886  001DE2  0100               	movlb	0	; () banked
  6887  001DE4  6F74               	movwf	(??_ADC_Read+1)& (0+255),b
  6888  001DE6  6B73               	clrf	??_ADC_Read& (0+255),b
  6889  001DE8  50C3               	movf	4035,w,c	;volatile
  6890  001DEA  2573               	addwf	??_ADC_Read& (0+255),w,b
  6891  001DEC  6F71               	movwf	?_ADC_Read& (0+255),b
  6892  001DEE  0E00               	movlw	0
  6893  001DF0  2174               	addwfc	(??_ADC_Read+1)& (0+255),w,b
  6894  001DF2  6F72               	movwf	(?_ADC_Read+1)& (0+255),b
  6895  001DF4  0012               	return	
  6896  001DF6                     __end_of_ADC_Read:
  6897                           	opt stack 0
  6898                           tblptru	equ	0xFF8
  6899                           tblptrh	equ	0xFF7
  6900                           tblptrl	equ	0xFF6
  6901                           tablat	equ	0xFF5
  6902                           prodh	equ	0xFF4
  6903                           prodl	equ	0xFF3
  6904                           intcon	equ	0xFF2
  6905                           wreg	equ	0xFE8
  6906                           indf2	equ	0xFDF
  6907                           postinc2	equ	0xFDE
  6908                           postdec2	equ	0xFDD
  6909                           fsr2h	equ	0xFDA
  6910                           fsr2l	equ	0xFD9
  6911                           status	equ	0xFD8
  6912                           
  6913 ;; *************** function _wait_in_ms *****************
  6914 ;; Defined at:
  6915 ;;		line 91 in file "config.c"
  6916 ;; Parameters:    Size  Location     Type
  6917 ;;  time_in_ms      2   72[COMRAM] int 
  6918 ;; Auto vars:     Size  Location     Type
  6919 ;;  count_ms        2   15[BANK0 ] unsigned int 
  6920 ;;  count           2   13[BANK0 ] unsigned int 
  6921 ;;  flag            2   11[BANK0 ] unsigned int 
  6922 ;; Return value:  Size  Location     Type
  6923 ;;                  1    wreg      void 
  6924 ;; Registers used:
  6925 ;;		wreg, status,2, status,0, cstack
  6926 ;; Tracked objects:
  6927 ;;		On entry : 0/0
  6928 ;;		On exit  : 0/0
  6929 ;;		Unchanged: 0/0
  6930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6931 ;;      Params:         2       0       0       0       0       0       0       0       0
  6932 ;;      Locals:         0       6       0       0       0       0       0       0       0
  6933 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6934 ;;      Totals:         4       6       0       0       0       0       0       0       0
  6935 ;;Total ram usage:       10 bytes
  6936 ;; Hardware stack levels used:    1
  6937 ;; Hardware stack levels required when called:    3
  6938 ;; This function calls:
  6939 ;;		___awtoft
  6940 ;;		___ftdiv
  6941 ;;		___fttol
  6942 ;; This function is called by:
  6943 ;;		_main
  6944 ;;		_ADC_Read
  6945 ;;		_lcd_iniciar
  6946 ;;		_lcd_pulso
  6947 ;;		_lcd_origen
  6948 ;;		_lcd_limpiar
  6949 ;;		_Lcd_Cmd
  6950 ;; This function uses a non-reentrant model
  6951 ;;
  6952                           
  6953                           	psect	text31
  6954  00219E                     __ptext31:
  6955                           	opt stack 0
  6956  00219E                     _wait_in_ms:
  6957                           	opt stack 27
  6958                           
  6959                           ;config.c: 92: unsigned int count = 0;
  6960                           
  6961                           ; BSR set to: 0
  6962                           ;incstack = 0
  6963  00219E  0E00               	movlw	0
  6964  0021A0  0100               	movlb	0	; () banked
  6965  0021A2  6F6E               	movwf	(wait_in_ms@count+1)& (0+255),b
  6966  0021A4  0E00               	movlw	0
  6967  0021A6  6F6D               	movwf	wait_in_ms@count& (0+255),b
  6968                           
  6969                           ;config.c: 93: unsigned int count_ms = 0;
  6970  0021A8  0E00               	movlw	0
  6971  0021AA  6F70               	movwf	(wait_in_ms@count_ms+1)& (0+255),b
  6972  0021AC  0E00               	movlw	0
  6973  0021AE  6F6F               	movwf	wait_in_ms@count_ms& (0+255),b
  6974                           
  6975                           ;config.c: 94: unsigned int flag = 0;
  6976  0021B0  0E00               	movlw	0
  6977  0021B2  6F6C               	movwf	(wait_in_ms@flag+1)& (0+255),b
  6978  0021B4  0E00               	movlw	0
  6979  0021B6  6F6B               	movwf	wait_in_ms@flag& (0+255),b
  6980                           
  6981                           ;config.c: 96: TMR0L = 131;
  6982  0021B8  0E83               	movlw	131
  6983  0021BA  6ED6               	movwf	4054,c	;volatile
  6984                           
  6985                           ; BSR set to: 0
  6986                           ;config.c: 99: count_ms = ((8000000)*0.001)/((256-TMR0L)*32);
  6987  0021BC  50D6               	movf	4054,w,c	;volatile
  6988  0021BE  6E4B               	movwf	??_wait_in_ms& (0+255),c
  6989  0021C0  6A4C               	clrf	(??_wait_in_ms+1)& (0+255),c
  6990  0021C2  1E4B               	comf	??_wait_in_ms,f,c
  6991  0021C4  1E4C               	comf	??_wait_in_ms+1,f,c
  6992  0021C6  4A4B               	infsnz	??_wait_in_ms,f,c
  6993  0021C8  2A4C               	incf	??_wait_in_ms+1,f,c
  6994  0021CA  0E05               	movlw	5
  6995  0021CC                     u2095:
  6996  0021CC  90D8               	bcf	status,0,c
  6997  0021CE  364B               	rlcf	??_wait_in_ms,f,c
  6998  0021D0  364C               	rlcf	??_wait_in_ms+1,f,c
  6999  0021D2  2EE8               	decfsz	wreg,f,c
  7000  0021D4  D7FB               	goto	u2095
  7001  0021D6  0E00               	movlw	0
  7002  0021D8  244B               	addwf	??_wait_in_ms,w,c
  7003  0021DA  6E1B               	movwf	___awtoft@c,c
  7004  0021DC  0E20               	movlw	32
  7005  0021DE  204C               	addwfc	??_wait_in_ms+1,w,c
  7006  0021E0  6E1C               	movwf	___awtoft@c+1,c
  7007  0021E2  EC65  F014         	call	___awtoft	;wreg free
  7008  0021E6  C01B  F039         	movff	?___awtoft,___ftdiv@f2
  7009  0021EA  C01C  F03A         	movff	?___awtoft+1,___ftdiv@f2+1
  7010  0021EE  C01D  F03B         	movff	?___awtoft+2,___ftdiv@f2+2
  7011  0021F2  0E00               	movlw	0
  7012  0021F4  6E36               	movwf	___ftdiv@f1,c
  7013  0021F6  0EFA               	movlw	250
  7014  0021F8  6E37               	movwf	___ftdiv@f1+1,c
  7015  0021FA  0E45               	movlw	69
  7016  0021FC  6E38               	movwf	___ftdiv@f1+2,c
  7017  0021FE  ECF1  F00F         	call	___ftdiv	;wreg free
  7018  002202  C036  F045         	movff	?___ftdiv,___fttol@f1
  7019  002206  C037  F046         	movff	?___ftdiv+1,___fttol@f1+1
  7020  00220A  C038  F047         	movff	?___ftdiv+2,___fttol@f1+2
  7021  00220E  ECFB  F00E         	call	___fttol	;wreg free
  7022  002212  C045  F06F         	movff	?___fttol,wait_in_ms@count_ms
  7023  002216  C046  F070         	movff	?___fttol+1,wait_in_ms@count_ms+1
  7024                           
  7025                           ;config.c: 101: TMR0ON = 1;
  7026  00221A  8ED5               	bsf	4053,7,c	;volatile
  7027                           
  7028                           ;config.c: 103: while (count < count_ms){
  7029  00221C  D020               	goto	l93
  7030  00221E                     l89:
  7031                           
  7032                           ; BSR set to: 0
  7033                           ;config.c: 104: if(TMR0IF == 1){
  7034  00221E  A4F2               	btfss	intcon,2,c	;volatile
  7035  002220  D01E               	goto	l93
  7036                           
  7037                           ; BSR set to: 0
  7038                           ;config.c: 105: TMR0IF = 0;
  7039  002222  94F2               	bcf	intcon,2,c	;volatile
  7040                           
  7041                           ; BSR set to: 0
  7042                           ;config.c: 106: TMR0L = 131;
  7043  002224  0E83               	movlw	131
  7044  002226  6ED6               	movwf	4054,c	;volatile
  7045                           
  7046                           ; BSR set to: 0
  7047                           ;config.c: 107: count ++;
  7048  002228  4B6D               	infsnz	wait_in_ms@count& (0+255),f,b
  7049  00222A  2B6E               	incf	(wait_in_ms@count+1)& (0+255),f,b
  7050                           
  7051                           ; BSR set to: 0
  7052                           ;config.c: 108: if (count == count_ms){
  7053  00222C  516F               	movf	wait_in_ms@count_ms& (0+255),w,b
  7054  00222E  196D               	xorwf	wait_in_ms@count& (0+255),w,b
  7055  002230  E116               	bnz	l2439
  7056  002232  5170               	movf	(wait_in_ms@count_ms+1)& (0+255),w,b
  7057  002234  196E               	xorwf	(wait_in_ms@count+1)& (0+255),w,b
  7058  002236  A4D8               	btfss	status,2,c
  7059  002238  D012               	goto	l93
  7060                           
  7061                           ; BSR set to: 0
  7062                           ;config.c: 109: flag++;
  7063  00223A  4B6B               	infsnz	wait_in_ms@flag& (0+255),f,b
  7064  00223C  2B6C               	incf	(wait_in_ms@flag+1)& (0+255),f,b
  7065                           
  7066                           ; BSR set to: 0
  7067                           ;config.c: 110: if (flag != time_in_ms){
  7068  00223E  516B               	movf	wait_in_ms@flag& (0+255),w,b
  7069  002240  1849               	xorwf	wait_in_ms@time_in_ms,w,c
  7070  002242  E104               	bnz	u2120
  7071  002244  516C               	movf	(wait_in_ms@flag+1)& (0+255),w,b
  7072  002246  184A               	xorwf	wait_in_ms@time_in_ms+1,w,c
  7073  002248  B4D8               	btfsc	status,2,c
  7074  00224A  D005               	goto	l92
  7075  00224C                     u2120:
  7076                           
  7077                           ; BSR set to: 0
  7078                           ;config.c: 111: count = 0;
  7079  00224C  0E00               	movlw	0
  7080  00224E  6F6E               	movwf	(wait_in_ms@count+1)& (0+255),b
  7081  002250  0E00               	movlw	0
  7082  002252  6F6D               	movwf	wait_in_ms@count& (0+255),b
  7083                           
  7084                           ;config.c: 112: }
  7085  002254  D004               	goto	l93
  7086  002256                     l92:
  7087                           
  7088                           ; BSR set to: 0
  7089                           ;config.c: 113: else{
  7090                           ;config.c: 114: count = count_ms;
  7091  002256  C06F  F06D         	movff	wait_in_ms@count_ms,wait_in_ms@count
  7092  00225A  C070  F06E         	movff	wait_in_ms@count_ms+1,wait_in_ms@count+1
  7093  00225E                     l93:
  7094  00225E                     l2439:
  7095  00225E  0100               	movlb	0	; () banked
  7096  002260  516F               	movf	wait_in_ms@count_ms& (0+255),w,b
  7097  002262  5D6D               	subwf	wait_in_ms@count& (0+255),w,b
  7098  002264  5170               	movf	(wait_in_ms@count_ms+1)& (0+255),w,b
  7099  002266  596E               	subwfb	(wait_in_ms@count+1)& (0+255),w,b
  7100  002268  B0D8               	btfsc	status,0,c
  7101  00226A  0012               	return	
  7102  00226C  D7D8               	goto	l89
  7103  00226E                     __end_of_wait_in_ms:
  7104                           	opt stack 0
  7105                           tblptru	equ	0xFF8
  7106                           tblptrh	equ	0xFF7
  7107                           tblptrl	equ	0xFF6
  7108                           tablat	equ	0xFF5
  7109                           prodh	equ	0xFF4
  7110                           prodl	equ	0xFF3
  7111                           intcon	equ	0xFF2
  7112                           wreg	equ	0xFE8
  7113                           indf2	equ	0xFDF
  7114                           postinc2	equ	0xFDE
  7115                           postdec2	equ	0xFDD
  7116                           fsr2h	equ	0xFDA
  7117                           fsr2l	equ	0xFD9
  7118                           status	equ	0xFD8
  7119                           
  7120 ;; *************** function ___fttol *****************
  7121 ;; Defined at:
  7122 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  7123 ;; Parameters:    Size  Location     Type
  7124 ;;  f1              3   68[COMRAM] float 
  7125 ;; Auto vars:     Size  Location     Type
  7126 ;;  lval            4    6[BANK0 ] unsigned long 
  7127 ;;  exp1            1   10[BANK0 ] unsigned char 
  7128 ;;  sign1           1    5[BANK0 ] unsigned char 
  7129 ;; Return value:  Size  Location     Type
  7130 ;;                  4   68[COMRAM] long 
  7131 ;; Registers used:
  7132 ;;		wreg, status,2, status,0
  7133 ;; Tracked objects:
  7134 ;;		On entry : 0/0
  7135 ;;		On exit  : 0/0
  7136 ;;		Unchanged: 0/0
  7137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7138 ;;      Params:         4       0       0       0       0       0       0       0       0
  7139 ;;      Locals:         0       6       0       0       0       0       0       0       0
  7140 ;;      Temps:          0       5       0       0       0       0       0       0       0
  7141 ;;      Totals:         4      11       0       0       0       0       0       0       0
  7142 ;;Total ram usage:       15 bytes
  7143 ;; Hardware stack levels used:    1
  7144 ;; Hardware stack levels required when called:    1
  7145 ;; This function calls:
  7146 ;;		Nothing
  7147 ;; This function is called by:
  7148 ;;		_wait_in_ms
  7149 ;;		_USART_Init
  7150 ;;		_sprintf
  7151 ;; This function uses a non-reentrant model
  7152 ;;
  7153                           
  7154                           	psect	text32
  7155  001DF6                     __ptext32:
  7156                           	opt stack 0
  7157  001DF6                     ___fttol:
  7158                           	opt stack 28
  7159                           
  7160                           ; BSR set to: 0
  7161                           ;incstack = 0
  7162  001DF6  C047  F060         	movff	___fttol@f1+2,??___fttol
  7163  001DFA  0100               	movlb	0	; () banked
  7164  001DFC  6B61               	clrf	(??___fttol+1)& (0+255),b
  7165  001DFE  6B62               	clrf	(??___fttol+2)& (0+255),b
  7166  001E00  3446               	rlcf	___fttol@f1+1,w,c
  7167  001E02  3760               	rlcf	??___fttol& (0+255),f,b
  7168  001E04  E301               	bnc	u2011
  7169  001E06  8161               	bsf	(??___fttol+1)& (0+255),0,b
  7170  001E08                     u2011:
  7171  001E08  5160               	movf	??___fttol& (0+255),w,b
  7172  001E0A  6F6A               	movwf	___fttol@exp1& (0+255),b
  7173  001E0C  516A               	movf	___fttol@exp1& (0+255),w,b
  7174  001E0E  A4D8               	btfss	status,2,c
  7175  001E10  D009               	goto	l709
  7176                           
  7177                           ; BSR set to: 0
  7178  001E12  0E00               	movlw	0
  7179  001E14  6E45               	movwf	?___fttol,c
  7180  001E16  0E00               	movlw	0
  7181  001E18  6E46               	movwf	?___fttol+1,c
  7182  001E1A  0E00               	movlw	0
  7183  001E1C  6E47               	movwf	?___fttol+2,c
  7184  001E1E  0E00               	movlw	0
  7185  001E20  6E48               	movwf	?___fttol+3,c
  7186                           
  7187                           ; BSR set to: 0
  7188  001E22  0012               	return	
  7189  001E24                     l709:
  7190                           
  7191                           ; BSR set to: 0
  7192                           
  7193                           ; BSR set to: 0
  7194  001E24  0E17               	movlw	23
  7195  001E26  6F60               	movwf	??___fttol& (0+255),b
  7196  001E28  C045  F061         	movff	___fttol@f1,??___fttol+1
  7197  001E2C  C046  F062         	movff	___fttol@f1+1,??___fttol+2
  7198  001E30  C047  F063         	movff	___fttol@f1+2,??___fttol+3
  7199  001E34  2960               	incf	??___fttol& (0+255),w,b
  7200  001E36  6F64               	movwf	(??___fttol+4)& (0+255),b
  7201  001E38  D004               	goto	u2030
  7202  001E3A                     u2035:
  7203  001E3A  90D8               	bcf	status,0,c
  7204  001E3C  3363               	rrcf	(??___fttol+3)& (0+255),f,b
  7205  001E3E  3362               	rrcf	(??___fttol+2)& (0+255),f,b
  7206  001E40  3361               	rrcf	(??___fttol+1)& (0+255),f,b
  7207  001E42                     u2030:
  7208  001E42  2F64               	decfsz	(??___fttol+4)& (0+255),f,b
  7209  001E44  D7FA               	goto	u2035
  7210  001E46  0100               	movlb	0	; () banked
  7211  001E48  5161               	movf	(??___fttol+1)& (0+255),w,b
  7212  001E4A  6F65               	movwf	___fttol@sign1& (0+255),b
  7213                           
  7214                           ; BSR set to: 0
  7215  001E4C  8E46               	bsf	___fttol@f1+1,7,c
  7216                           
  7217                           ; BSR set to: 0
  7218  001E4E  0EFF               	movlw	255
  7219  001E50  1645               	andwf	___fttol@f1,f,c
  7220  001E52  0EFF               	movlw	255
  7221  001E54  1646               	andwf	___fttol@f1+1,f,c
  7222  001E56  0E00               	movlw	0
  7223  001E58  1647               	andwf	___fttol@f1+2,f,c
  7224                           
  7225                           ; BSR set to: 0
  7226  001E5A  5045               	movf	___fttol@f1,w,c
  7227  001E5C  6F66               	movwf	___fttol@lval& (0+255),b
  7228  001E5E  5046               	movf	___fttol@f1+1,w,c
  7229  001E60  6F67               	movwf	(___fttol@lval+1)& (0+255),b
  7230  001E62  5047               	movf	___fttol@f1+2,w,c
  7231  001E64  6F68               	movwf	(___fttol@lval+2)& (0+255),b
  7232  001E66  6B69               	clrf	(___fttol@lval+3)& (0+255),b
  7233                           
  7234                           ; BSR set to: 0
  7235  001E68  0E8E               	movlw	142
  7236  001E6A  5F6A               	subwf	___fttol@exp1& (0+255),f,b
  7237                           
  7238                           ; BSR set to: 0
  7239  001E6C  AF6A               	btfss	___fttol@exp1& (0+255),7,b
  7240  001E6E  D016               	goto	l711
  7241                           
  7242                           ; BSR set to: 0
  7243  001E70  516A               	movf	___fttol@exp1& (0+255),w,b
  7244  001E72  0A80               	xorlw	128
  7245  001E74  0F8F               	addlw	143
  7246  001E76  B0D8               	btfsc	status,0,c
  7247  001E78  D009               	goto	l712
  7248                           
  7249                           ; BSR set to: 0
  7250  001E7A  0E00               	movlw	0
  7251  001E7C  6E45               	movwf	?___fttol,c
  7252  001E7E  0E00               	movlw	0
  7253  001E80  6E46               	movwf	?___fttol+1,c
  7254  001E82  0E00               	movlw	0
  7255  001E84  6E47               	movwf	?___fttol+2,c
  7256  001E86  0E00               	movlw	0
  7257  001E88  6E48               	movwf	?___fttol+3,c
  7258                           
  7259                           ; BSR set to: 0
  7260  001E8A  0012               	return	
  7261  001E8C                     l712:
  7262                           
  7263                           ; BSR set to: 0
  7264                           
  7265                           ; BSR set to: 0
  7266                           
  7267                           ; BSR set to: 0
  7268  001E8C  90D8               	bcf	status,0,c
  7269  001E8E  3369               	rrcf	(___fttol@lval+3)& (0+255),f,b
  7270  001E90  3368               	rrcf	(___fttol@lval+2)& (0+255),f,b
  7271  001E92  3367               	rrcf	(___fttol@lval+1)& (0+255),f,b
  7272  001E94  3366               	rrcf	___fttol@lval& (0+255),f,b
  7273                           
  7274                           ; BSR set to: 0
  7275  001E96  3F6A               	incfsz	___fttol@exp1& (0+255),f,b
  7276  001E98  D7F9               	goto	l712
  7277                           
  7278                           ; BSR set to: 0
  7279  001E9A  D015               	goto	u2070
  7280  001E9C                     l711:
  7281                           
  7282                           ; BSR set to: 0
  7283                           
  7284                           ; BSR set to: 0
  7285  001E9C  0E17               	movlw	23
  7286  001E9E  656A               	cpfsgt	___fttol@exp1& (0+255),b
  7287  001EA0  D00F               	goto	l717
  7288                           
  7289                           ; BSR set to: 0
  7290  001EA2  0E00               	movlw	0
  7291  001EA4  6E45               	movwf	?___fttol,c
  7292  001EA6  0E00               	movlw	0
  7293  001EA8  6E46               	movwf	?___fttol+1,c
  7294  001EAA  0E00               	movlw	0
  7295  001EAC  6E47               	movwf	?___fttol+2,c
  7296  001EAE  0E00               	movlw	0
  7297  001EB0  6E48               	movwf	?___fttol+3,c
  7298                           
  7299                           ; BSR set to: 0
  7300  001EB2  0012               	return	
  7301  001EB4                     
  7302                           ; BSR set to: 0
  7303                           
  7304                           ; BSR set to: 0
  7305  001EB4  90D8               	bcf	status,0,c
  7306  001EB6  3766               	rlcf	___fttol@lval& (0+255),f,b
  7307  001EB8  3767               	rlcf	(___fttol@lval+1)& (0+255),f,b
  7308  001EBA  3768               	rlcf	(___fttol@lval+2)& (0+255),f,b
  7309  001EBC  3769               	rlcf	(___fttol@lval+3)& (0+255),f,b
  7310  001EBE  076A               	decf	___fttol@exp1& (0+255),f,b
  7311  001EC0                     l717:
  7312                           
  7313                           ; BSR set to: 0
  7314                           
  7315                           ; BSR set to: 0
  7316  001EC0  516A               	movf	___fttol@exp1& (0+255),w,b
  7317  001EC2  A4D8               	btfss	status,2,c
  7318  001EC4  D7F7               	goto	l718
  7319  001EC6                     u2070:
  7320                           
  7321                           ; BSR set to: 0
  7322                           
  7323                           ; BSR set to: 0
  7324                           
  7325                           ; BSR set to: 0
  7326  001EC6  5165               	movf	___fttol@sign1& (0+255),w,b
  7327  001EC8  B4D8               	btfsc	status,2,c
  7328  001ECA  D008               	goto	l720
  7329                           
  7330                           ; BSR set to: 0
  7331  001ECC  1F69               	comf	(___fttol@lval+3)& (0+255),f,b
  7332  001ECE  1F68               	comf	(___fttol@lval+2)& (0+255),f,b
  7333  001ED0  1F67               	comf	(___fttol@lval+1)& (0+255),f,b
  7334  001ED2  6D66               	negf	___fttol@lval& (0+255),b
  7335  001ED4  0E00               	movlw	0
  7336  001ED6  2367               	addwfc	(___fttol@lval+1)& (0+255),f,b
  7337  001ED8  2368               	addwfc	(___fttol@lval+2)& (0+255),f,b
  7338  001EDA  2369               	addwfc	(___fttol@lval+3)& (0+255),f,b
  7339  001EDC                     l720:
  7340                           
  7341                           ; BSR set to: 0
  7342                           
  7343                           ; BSR set to: 0
  7344  001EDC  C066  F045         	movff	___fttol@lval,?___fttol
  7345  001EE0  C067  F046         	movff	___fttol@lval+1,?___fttol+1
  7346  001EE4  C068  F047         	movff	___fttol@lval+2,?___fttol+2
  7347  001EE8  C069  F048         	movff	___fttol@lval+3,?___fttol+3
  7348  001EEC  0012               	return	
  7349  001EEE                     __end_of___fttol:
  7350                           	opt stack 0
  7351                           tblptru	equ	0xFF8
  7352                           tblptrh	equ	0xFF7
  7353                           tblptrl	equ	0xFF6
  7354                           tablat	equ	0xFF5
  7355                           prodh	equ	0xFF4
  7356                           prodl	equ	0xFF3
  7357                           intcon	equ	0xFF2
  7358                           wreg	equ	0xFE8
  7359                           indf2	equ	0xFDF
  7360                           postinc2	equ	0xFDE
  7361                           postdec2	equ	0xFDD
  7362                           fsr2h	equ	0xFDA
  7363                           fsr2l	equ	0xFD9
  7364                           status	equ	0xFD8
  7365                           
  7366 ;; *************** function ___ftdiv *****************
  7367 ;; Defined at:
  7368 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  7369 ;; Parameters:    Size  Location     Type
  7370 ;;  f1              3   53[COMRAM] float 
  7371 ;;  f2              3   56[COMRAM] float 
  7372 ;; Auto vars:     Size  Location     Type
  7373 ;;  f3              3   63[COMRAM] float 
  7374 ;;  sign            1   67[COMRAM] unsigned char 
  7375 ;;  exp             1   66[COMRAM] unsigned char 
  7376 ;;  cntr            1   62[COMRAM] unsigned char 
  7377 ;; Return value:  Size  Location     Type
  7378 ;;                  3   53[COMRAM] float 
  7379 ;; Registers used:
  7380 ;;		wreg, status,2, status,0, cstack
  7381 ;; Tracked objects:
  7382 ;;		On entry : 0/0
  7383 ;;		On exit  : 0/0
  7384 ;;		Unchanged: 0/0
  7385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7386 ;;      Params:         6       0       0       0       0       0       0       0       0
  7387 ;;      Locals:         6       0       0       0       0       0       0       0       0
  7388 ;;      Temps:          3       0       0       0       0       0       0       0       0
  7389 ;;      Totals:        15       0       0       0       0       0       0       0       0
  7390 ;;Total ram usage:       15 bytes
  7391 ;; Hardware stack levels used:    1
  7392 ;; Hardware stack levels required when called:    2
  7393 ;; This function calls:
  7394 ;;		___ftpack
  7395 ;; This function is called by:
  7396 ;;		_main
  7397 ;;		_wait_in_ms
  7398 ;;		_USART_Init
  7399 ;; This function uses a non-reentrant model
  7400 ;;
  7401                           
  7402                           	psect	text33
  7403  001FE2                     __ptext33:
  7404                           	opt stack 0
  7405  001FE2                     ___ftdiv:
  7406                           	opt stack 27
  7407                           
  7408                           ; BSR set to: 0
  7409                           ;incstack = 0
  7410  001FE2  C038  F03C         	movff	___ftdiv@f1+2,??___ftdiv
  7411  001FE6  6A3D               	clrf	(??___ftdiv+1)& (0+255),c
  7412  001FE8  6A3E               	clrf	(??___ftdiv+2)& (0+255),c
  7413  001FEA  3437               	rlcf	___ftdiv@f1+1,w,c
  7414  001FEC  363C               	rlcf	??___ftdiv& (0+255),f,c
  7415  001FEE  E301               	bnc	u1951
  7416  001FF0  803D               	bsf	(??___ftdiv+1)& (0+255),0,c
  7417  001FF2                     u1951:
  7418  001FF2  503C               	movf	??___ftdiv,w,c
  7419  001FF4  6E43               	movwf	___ftdiv@exp,c
  7420  001FF6  5043               	movf	___ftdiv@exp,w,c
  7421  001FF8  A4D8               	btfss	status,2,c
  7422  001FFA  D007               	goto	l656
  7423  001FFC  0E00               	movlw	0
  7424  001FFE  6E36               	movwf	?___ftdiv,c
  7425  002000  0E00               	movlw	0
  7426  002002  6E37               	movwf	?___ftdiv+1,c
  7427  002004  0E00               	movlw	0
  7428  002006  6E38               	movwf	?___ftdiv+2,c
  7429  002008  0012               	return	
  7430  00200A                     l656:
  7431  00200A  C03B  F03C         	movff	___ftdiv@f2+2,??___ftdiv
  7432  00200E  6A3D               	clrf	(??___ftdiv+1)& (0+255),c
  7433  002010  6A3E               	clrf	(??___ftdiv+2)& (0+255),c
  7434  002012  343A               	rlcf	___ftdiv@f2+1,w,c
  7435  002014  363C               	rlcf	??___ftdiv& (0+255),f,c
  7436  002016  E301               	bnc	u1971
  7437  002018  803D               	bsf	(??___ftdiv+1)& (0+255),0,c
  7438  00201A                     u1971:
  7439  00201A  503C               	movf	??___ftdiv,w,c
  7440  00201C  6E44               	movwf	___ftdiv@sign,c
  7441  00201E  5044               	movf	___ftdiv@sign,w,c
  7442  002020  A4D8               	btfss	status,2,c
  7443  002022  D007               	goto	l658
  7444  002024  0E00               	movlw	0
  7445  002026  6E36               	movwf	?___ftdiv,c
  7446  002028  0E00               	movlw	0
  7447  00202A  6E37               	movwf	?___ftdiv+1,c
  7448  00202C  0E00               	movlw	0
  7449  00202E  6E38               	movwf	?___ftdiv+2,c
  7450  002030  0012               	return	
  7451  002032                     l658:
  7452  002032  0E00               	movlw	0
  7453  002034  6E40               	movwf	___ftdiv@f3,c
  7454  002036  0E00               	movlw	0
  7455  002038  6E41               	movwf	___ftdiv@f3+1,c
  7456  00203A  0E00               	movlw	0
  7457  00203C  6E42               	movwf	___ftdiv@f3+2,c
  7458  00203E  5044               	movf	___ftdiv@sign,w,c
  7459  002040  0F89               	addlw	137
  7460  002042  5E43               	subwf	___ftdiv@exp,f,c
  7461  002044  C038  F044         	movff	___ftdiv@f1+2,___ftdiv@sign
  7462  002048  503B               	movf	___ftdiv@f2+2,w,c
  7463  00204A  1A44               	xorwf	___ftdiv@sign,f,c
  7464  00204C  0E80               	movlw	128
  7465  00204E  1644               	andwf	___ftdiv@sign,f,c
  7466  002050  8E37               	bsf	___ftdiv@f1+1,7,c
  7467  002052  0EFF               	movlw	255
  7468  002054  1636               	andwf	___ftdiv@f1,f,c
  7469  002056  0EFF               	movlw	255
  7470  002058  1637               	andwf	___ftdiv@f1+1,f,c
  7471  00205A  0E00               	movlw	0
  7472  00205C  1638               	andwf	___ftdiv@f1+2,f,c
  7473  00205E  8E3A               	bsf	___ftdiv@f2+1,7,c
  7474  002060  0EFF               	movlw	255
  7475  002062  1639               	andwf	___ftdiv@f2,f,c
  7476  002064  0EFF               	movlw	255
  7477  002066  163A               	andwf	___ftdiv@f2+1,f,c
  7478  002068  0E00               	movlw	0
  7479  00206A  163B               	andwf	___ftdiv@f2+2,f,c
  7480  00206C  0E18               	movlw	24
  7481  00206E  6E3F               	movwf	___ftdiv@cntr,c
  7482  002070  90D8               	bcf	status,0,c
  7483  002072  3640               	rlcf	___ftdiv@f3,f,c
  7484  002074  3641               	rlcf	___ftdiv@f3+1,f,c
  7485  002076  3642               	rlcf	___ftdiv@f3+2,f,c
  7486  002078  5039               	movf	___ftdiv@f2,w,c
  7487  00207A  5C36               	subwf	___ftdiv@f1,w,c
  7488  00207C  503A               	movf	___ftdiv@f2+1,w,c
  7489  00207E  5837               	subwfb	___ftdiv@f1+1,w,c
  7490  002080  503B               	movf	___ftdiv@f2+2,w,c
  7491  002082  5838               	subwfb	___ftdiv@f1+2,w,c
  7492  002084  A0D8               	btfss	status,0,c
  7493  002086  D007               	goto	l660
  7494  002088  5039               	movf	___ftdiv@f2,w,c
  7495  00208A  5E36               	subwf	___ftdiv@f1,f,c
  7496  00208C  503A               	movf	___ftdiv@f2+1,w,c
  7497  00208E  5A37               	subwfb	___ftdiv@f1+1,f,c
  7498  002090  503B               	movf	___ftdiv@f2+2,w,c
  7499  002092  5A38               	subwfb	___ftdiv@f1+2,f,c
  7500  002094  8040               	bsf	___ftdiv@f3,0,c
  7501  002096                     l660:
  7502  002096  90D8               	bcf	status,0,c
  7503  002098  3636               	rlcf	___ftdiv@f1,f,c
  7504  00209A  3637               	rlcf	___ftdiv@f1+1,f,c
  7505  00209C  3638               	rlcf	___ftdiv@f1+2,f,c
  7506  00209E  2E3F               	decfsz	___ftdiv@cntr,f,c
  7507  0020A0  D7E7               	goto	l659
  7508  0020A2  C040  F013         	movff	___ftdiv@f3,___ftpack@arg
  7509  0020A6  C041  F014         	movff	___ftdiv@f3+1,___ftpack@arg+1
  7510  0020AA  C042  F015         	movff	___ftdiv@f3+2,___ftpack@arg+2
  7511  0020AE  C043  F016         	movff	___ftdiv@exp,___ftpack@exp
  7512  0020B2  C044  F017         	movff	___ftdiv@sign,___ftpack@sign
  7513  0020B6  EC37  F011         	call	___ftpack	;wreg free
  7514  0020BA  C013  F036         	movff	?___ftpack,?___ftdiv
  7515  0020BE  C014  F037         	movff	?___ftpack+1,?___ftdiv+1
  7516  0020C2  C015  F038         	movff	?___ftpack+2,?___ftdiv+2
  7517  0020C6  0012               	return	
  7518  0020C8                     __end_of___ftdiv:
  7519                           	opt stack 0
  7520                           tblptru	equ	0xFF8
  7521                           tblptrh	equ	0xFF7
  7522                           tblptrl	equ	0xFF6
  7523                           tablat	equ	0xFF5
  7524                           prodh	equ	0xFF4
  7525                           prodl	equ	0xFF3
  7526                           intcon	equ	0xFF2
  7527                           wreg	equ	0xFE8
  7528                           indf2	equ	0xFDF
  7529                           postinc2	equ	0xFDE
  7530                           postdec2	equ	0xFDD
  7531                           fsr2h	equ	0xFDA
  7532                           fsr2l	equ	0xFD9
  7533                           status	equ	0xFD8
  7534                           
  7535 ;; *************** function ___awtoft *****************
  7536 ;; Defined at:
  7537 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
  7538 ;; Parameters:    Size  Location     Type
  7539 ;;  c               2   26[COMRAM] int 
  7540 ;; Auto vars:     Size  Location     Type
  7541 ;;  sign            1   29[COMRAM] unsigned char 
  7542 ;; Return value:  Size  Location     Type
  7543 ;;                  3   26[COMRAM] float 
  7544 ;; Registers used:
  7545 ;;		wreg, status,2, status,0, cstack
  7546 ;; Tracked objects:
  7547 ;;		On entry : 0/0
  7548 ;;		On exit  : 0/0
  7549 ;;		Unchanged: 0/0
  7550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7551 ;;      Params:         3       0       0       0       0       0       0       0       0
  7552 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7553 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7554 ;;      Totals:         4       0       0       0       0       0       0       0       0
  7555 ;;Total ram usage:        4 bytes
  7556 ;; Hardware stack levels used:    1
  7557 ;; Hardware stack levels required when called:    2
  7558 ;; This function calls:
  7559 ;;		___ftpack
  7560 ;; This function is called by:
  7561 ;;		_wait_in_ms
  7562 ;; This function uses a non-reentrant model
  7563 ;;
  7564                           
  7565                           	psect	text34
  7566  0028CA                     __ptext34:
  7567                           	opt stack 0
  7568  0028CA                     ___awtoft:
  7569                           	opt stack 27
  7570                           
  7571                           ;incstack = 0
  7572  0028CA  0E00               	movlw	0
  7573  0028CC  6E1E               	movwf	___awtoft@sign,c
  7574  0028CE  AE1C               	btfss	___awtoft@c+1,7,c
  7575  0028D0  D006               	goto	l556
  7576  0028D2  6C1B               	negf	___awtoft@c,c
  7577  0028D4  1E1C               	comf	___awtoft@c+1,f,c
  7578  0028D6  B0D8               	btfsc	status,0,c
  7579  0028D8  2A1C               	incf	___awtoft@c+1,f,c
  7580  0028DA  0E01               	movlw	1
  7581  0028DC  6E1E               	movwf	___awtoft@sign,c
  7582  0028DE                     l556:
  7583  0028DE  C01B  F013         	movff	___awtoft@c,___ftpack@arg
  7584  0028E2  C01C  F014         	movff	___awtoft@c+1,___ftpack@arg+1
  7585  0028E6  6A15               	clrf	___ftpack@arg+2,c
  7586  0028E8  0E8E               	movlw	142
  7587  0028EA  6E16               	movwf	___ftpack@exp,c
  7588  0028EC  C01E  F017         	movff	___awtoft@sign,___ftpack@sign
  7589  0028F0  EC37  F011         	call	___ftpack	;wreg free
  7590  0028F4  C013  F01B         	movff	?___ftpack,?___awtoft
  7591  0028F8  C014  F01C         	movff	?___ftpack+1,?___awtoft+1
  7592  0028FC  C015  F01D         	movff	?___ftpack+2,?___awtoft+2
  7593  002900  0012               	return	
  7594  002902                     __end_of___awtoft:
  7595                           	opt stack 0
  7596                           tblptru	equ	0xFF8
  7597                           tblptrh	equ	0xFF7
  7598                           tblptrl	equ	0xFF6
  7599                           tablat	equ	0xFF5
  7600                           prodh	equ	0xFF4
  7601                           prodl	equ	0xFF3
  7602                           intcon	equ	0xFF2
  7603                           wreg	equ	0xFE8
  7604                           indf2	equ	0xFDF
  7605                           postinc2	equ	0xFDE
  7606                           postdec2	equ	0xFDD
  7607                           fsr2h	equ	0xFDA
  7608                           fsr2l	equ	0xFD9
  7609                           status	equ	0xFD8
  7610                           
  7611 ;; *************** function ___ftpack *****************
  7612 ;; Defined at:
  7613 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  7614 ;; Parameters:    Size  Location     Type
  7615 ;;  arg             3   18[COMRAM] unsigned um
  7616 ;;  exp             1   21[COMRAM] unsigned char 
  7617 ;;  sign            1   22[COMRAM] unsigned char 
  7618 ;; Auto vars:     Size  Location     Type
  7619 ;;		None
  7620 ;; Return value:  Size  Location     Type
  7621 ;;                  3   18[COMRAM] float 
  7622 ;; Registers used:
  7623 ;;		wreg, status,2, status,0
  7624 ;; Tracked objects:
  7625 ;;		On entry : 0/0
  7626 ;;		On exit  : 0/0
  7627 ;;		Unchanged: 0/0
  7628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7629 ;;      Params:         5       0       0       0       0       0       0       0       0
  7630 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7631 ;;      Temps:          3       0       0       0       0       0       0       0       0
  7632 ;;      Totals:         8       0       0       0       0       0       0       0       0
  7633 ;;Total ram usage:        8 bytes
  7634 ;; Hardware stack levels used:    1
  7635 ;; Hardware stack levels required when called:    1
  7636 ;; This function calls:
  7637 ;;		Nothing
  7638 ;; This function is called by:
  7639 ;;		___altoft
  7640 ;;		___awtoft
  7641 ;;		___ftadd
  7642 ;;		___ftdiv
  7643 ;;		___ftmul
  7644 ;;		___lltoft
  7645 ;;		___lwtoft
  7646 ;; This function uses a non-reentrant model
  7647 ;;
  7648                           
  7649                           	psect	text35
  7650  00226E                     __ptext35:
  7651                           	opt stack 0
  7652  00226E                     ___ftpack:
  7653                           	opt stack 27
  7654                           
  7655                           ;incstack = 0
  7656  00226E  5016               	movf	___ftpack@exp,w,c
  7657  002270  B4D8               	btfsc	status,2,c
  7658  002272  D005               	goto	u1880
  7659  002274  5013               	movf	___ftpack@arg,w,c
  7660  002276  1014               	iorwf	___ftpack@arg+1,w,c
  7661  002278  1015               	iorwf	___ftpack@arg+2,w,c
  7662  00227A  A4D8               	btfss	status,2,c
  7663  00227C  D00C               	goto	l592
  7664  00227E                     u1880:
  7665  00227E  0E00               	movlw	0
  7666  002280  6E13               	movwf	?___ftpack,c
  7667  002282  0E00               	movlw	0
  7668  002284  6E14               	movwf	?___ftpack+1,c
  7669  002286  0E00               	movlw	0
  7670  002288  6E15               	movwf	?___ftpack+2,c
  7671  00228A  0012               	return	
  7672  00228C  2A16               	incf	___ftpack@exp,f,c
  7673  00228E  90D8               	bcf	status,0,c
  7674  002290  3215               	rrcf	___ftpack@arg+2,f,c
  7675  002292  3214               	rrcf	___ftpack@arg+1,f,c
  7676  002294  3213               	rrcf	___ftpack@arg,f,c
  7677  002296                     l592:
  7678  002296  0E00               	movlw	0
  7679  002298  1413               	andwf	___ftpack@arg,w,c
  7680  00229A  6E18               	movwf	??___ftpack& (0+255),c
  7681  00229C  0E00               	movlw	0
  7682  00229E  1414               	andwf	___ftpack@arg+1,w,c
  7683  0022A0  6E19               	movwf	(??___ftpack+1)& (0+255),c
  7684  0022A2  0EFE               	movlw	254
  7685  0022A4  1415               	andwf	___ftpack@arg+2,w,c
  7686  0022A6  6E1A               	movwf	(??___ftpack+2)& (0+255),c
  7687  0022A8  5018               	movf	??___ftpack,w,c
  7688  0022AA  1019               	iorwf	??___ftpack+1,w,c
  7689  0022AC  101A               	iorwf	??___ftpack+2,w,c
  7690  0022AE  B4D8               	btfsc	status,2,c
  7691  0022B0  D00C               	goto	l595
  7692  0022B2  D7EC               	goto	l593
  7693  0022B4  2A16               	incf	___ftpack@exp,f,c
  7694  0022B6  0E01               	movlw	1
  7695  0022B8  2613               	addwf	___ftpack@arg,f,c
  7696  0022BA  0E00               	movlw	0
  7697  0022BC  2214               	addwfc	___ftpack@arg+1,f,c
  7698  0022BE  0E00               	movlw	0
  7699  0022C0  2215               	addwfc	___ftpack@arg+2,f,c
  7700  0022C2  90D8               	bcf	status,0,c
  7701  0022C4  3215               	rrcf	___ftpack@arg+2,f,c
  7702  0022C6  3214               	rrcf	___ftpack@arg+1,f,c
  7703  0022C8  3213               	rrcf	___ftpack@arg,f,c
  7704  0022CA                     l595:
  7705  0022CA  0E00               	movlw	0
  7706  0022CC  1413               	andwf	___ftpack@arg,w,c
  7707  0022CE  6E18               	movwf	??___ftpack& (0+255),c
  7708  0022D0  0E00               	movlw	0
  7709  0022D2  1414               	andwf	___ftpack@arg+1,w,c
  7710  0022D4  6E19               	movwf	(??___ftpack+1)& (0+255),c
  7711  0022D6  0EFF               	movlw	255
  7712  0022D8  1415               	andwf	___ftpack@arg+2,w,c
  7713  0022DA  6E1A               	movwf	(??___ftpack+2)& (0+255),c
  7714  0022DC  5018               	movf	??___ftpack,w,c
  7715  0022DE  1019               	iorwf	??___ftpack+1,w,c
  7716  0022E0  101A               	iorwf	??___ftpack+2,w,c
  7717  0022E2  B4D8               	btfsc	status,2,c
  7718  0022E4  D006               	goto	l598
  7719  0022E6  D7E6               	goto	l596
  7720  0022E8  0616               	decf	___ftpack@exp,f,c
  7721  0022EA  90D8               	bcf	status,0,c
  7722  0022EC  3613               	rlcf	___ftpack@arg,f,c
  7723  0022EE  3614               	rlcf	___ftpack@arg+1,f,c
  7724  0022F0  3615               	rlcf	___ftpack@arg+2,f,c
  7725  0022F2                     l598:
  7726  0022F2  BE14               	btfsc	___ftpack@arg+1,7,c
  7727  0022F4  D003               	goto	u1920
  7728  0022F6  0E02               	movlw	2
  7729  0022F8  6016               	cpfslt	___ftpack@exp,c
  7730  0022FA  D7F6               	goto	l599
  7731  0022FC                     u1920:
  7732  0022FC  A016               	btfss	___ftpack@exp,0,c
  7733  0022FE  9E14               	bcf	___ftpack@arg+1,7,c
  7734  002300  90D8               	bcf	status,0,c
  7735  002302  3216               	rrcf	___ftpack@exp,f,c
  7736  002304  5016               	movf	___ftpack@exp,w,c
  7737  002306  1215               	iorwf	___ftpack@arg+2,f,c
  7738  002308  5017               	movf	___ftpack@sign,w,c
  7739  00230A  A4D8               	btfss	status,2,c
  7740  00230C  8E15               	bsf	___ftpack@arg+2,7,c
  7741  00230E  C013  F013         	movff	___ftpack@arg,?___ftpack
  7742  002312  C014  F014         	movff	___ftpack@arg+1,?___ftpack+1
  7743  002316  C015  F015         	movff	___ftpack@arg+2,?___ftpack+2
  7744  00231A  0012               	return	
  7745  00231C                     __end_of___ftpack:
  7746                           	opt stack 0
  7747                           tblptru	equ	0xFF8
  7748                           tblptrh	equ	0xFF7
  7749                           tblptrl	equ	0xFF6
  7750                           tablat	equ	0xFF5
  7751                           prodh	equ	0xFF4
  7752                           prodl	equ	0xFF3
  7753                           intcon	equ	0xFF2
  7754                           wreg	equ	0xFE8
  7755                           indf2	equ	0xFDF
  7756                           postinc2	equ	0xFDE
  7757                           postdec2	equ	0xFDD
  7758                           fsr2h	equ	0xFDA
  7759                           fsr2l	equ	0xFD9
  7760                           status	equ	0xFD8
  7761                           
  7762 ;; *************** function _ADCint *****************
  7763 ;; Defined at:
  7764 ;;		line 16 in file "funciones.c"
  7765 ;; Parameters:    Size  Location     Type
  7766 ;;		None
  7767 ;; Auto vars:     Size  Location     Type
  7768 ;;		None
  7769 ;; Return value:  Size  Location     Type
  7770 ;;                  1    wreg      void 
  7771 ;; Registers used:
  7772 ;;		None
  7773 ;; Tracked objects:
  7774 ;;		On entry : 0/0
  7775 ;;		On exit  : 0/0
  7776 ;;		Unchanged: 0/0
  7777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7778 ;;      Params:         0       0       0       0       0       0       0       0       0
  7779 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7780 ;;      Temps:         18       0       0       0       0       0       0       0       0
  7781 ;;      Totals:        18       0       0       0       0       0       0       0       0
  7782 ;;Total ram usage:       18 bytes
  7783 ;; Hardware stack levels used:    1
  7784 ;; This function calls:
  7785 ;;		Nothing
  7786 ;; This function is called by:
  7787 ;;		Interrupt level 2
  7788 ;; This function uses a non-reentrant model
  7789 ;;
  7790                           
  7791                           	psect	intcode
  7792  000008                     __pintcode:
  7793                           	opt stack 0
  7794  000008                     _ADCint:
  7795                           	opt stack 24
  7796                           
  7797                           ;incstack = 0
  7798  000008  824D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7799  00000A  ED8E  F011         	call	int_func,f	;refresh shadow registers
  7800                           tblptru	equ	0xFF8
  7801                           tblptrh	equ	0xFF7
  7802                           tblptrl	equ	0xFF6
  7803                           tablat	equ	0xFF5
  7804                           prodh	equ	0xFF4
  7805                           prodl	equ	0xFF3
  7806                           intcon	equ	0xFF2
  7807                           wreg	equ	0xFE8
  7808                           indf2	equ	0xFDF
  7809                           postinc2	equ	0xFDE
  7810                           postdec2	equ	0xFDD
  7811                           fsr2h	equ	0xFDA
  7812                           fsr2l	equ	0xFD9
  7813                           status	equ	0xFD8
  7814                           
  7815                           	psect	intcode_body
  7816  00231C                     __pintcode_body:
  7817                           	opt stack 24
  7818  00231C                     int_func:
  7819                           	opt stack 24
  7820  00231C  0006               	pop		; remove dummy address from shadow register refresh
  7821  00231E  CFFA F001          	movff	pclath,??_ADCint
  7822  002322  CFFB F002          	movff	pclatu,??_ADCint+1
  7823  002326  CFE9 F003          	movff	fsr0l,??_ADCint+2
  7824  00232A  CFEA F004          	movff	fsr0h,??_ADCint+3
  7825  00232E  CFE1 F005          	movff	fsr1l,??_ADCint+4
  7826  002332  CFE2 F006          	movff	fsr1h,??_ADCint+5
  7827  002336  CFD9 F007          	movff	fsr2l,??_ADCint+6
  7828  00233A  CFDA F008          	movff	fsr2h,??_ADCint+7
  7829  00233E  CFF3 F009          	movff	prodl,??_ADCint+8
  7830  002342  CFF4 F00A          	movff	prodh,??_ADCint+9
  7831  002346  CFF6 F00B          	movff	tblptrl,??_ADCint+10
  7832  00234A  CFF7 F00C          	movff	tblptrh,??_ADCint+11
  7833  00234E  CFF8 F00D          	movff	tblptru,??_ADCint+12
  7834  002352  CFF5 F00E          	movff	tablat,??_ADCint+13
  7835  002356  C04D  F00F         	movff	btemp,??_ADCint+14
  7836  00235A  C04E  F010         	movff	btemp+1,??_ADCint+15
  7837  00235E  C04F  F011         	movff	btemp+2,??_ADCint+16
  7838  002362  C050  F012         	movff	btemp+3,??_ADCint+17
  7839                           
  7840                           ;funciones.c: 18: if(PIR1bits.ADIF == 1)
  7841  002366  BC9E               	btfsc	3998,6,c	;volatile
  7842                           
  7843                           ;funciones.c: 19: {
  7844                           ;funciones.c: 20: PIR1bits.ADIF = 0;
  7845  002368  9C9E               	bcf	3998,6,c	;volatile
  7846  00236A  C012  F050         	movff	??_ADCint+17,btemp+3
  7847  00236E  C011  F04F         	movff	??_ADCint+16,btemp+2
  7848  002372  C010  F04E         	movff	??_ADCint+15,btemp+1
  7849  002376  C00F  F04D         	movff	??_ADCint+14,btemp
  7850  00237A  C00E  FFF5         	movff	??_ADCint+13,tablat
  7851  00237E  C00D  FFF8         	movff	??_ADCint+12,tblptru
  7852  002382  C00C  FFF7         	movff	??_ADCint+11,tblptrh
  7853  002386  C00B  FFF6         	movff	??_ADCint+10,tblptrl
  7854  00238A  C00A  FFF4         	movff	??_ADCint+9,prodh
  7855  00238E  C009  FFF3         	movff	??_ADCint+8,prodl
  7856  002392  C008  FFDA         	movff	??_ADCint+7,fsr2h
  7857  002396  C007  FFD9         	movff	??_ADCint+6,fsr2l
  7858  00239A  C006  FFE2         	movff	??_ADCint+5,fsr1h
  7859  00239E  C005  FFE1         	movff	??_ADCint+4,fsr1l
  7860  0023A2  C004  FFEA         	movff	??_ADCint+3,fsr0h
  7861  0023A6  C003  FFE9         	movff	??_ADCint+2,fsr0l
  7862  0023AA  C002  FFFB         	movff	??_ADCint+1,pclatu
  7863  0023AE  C001  FFFA         	movff	??_ADCint,pclath
  7864  0023B2  924D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7865  0023B4  0011               	retfie		f
  7866  0023B6                     __end_of_ADCint:
  7867                           	opt stack 0
  7868                           pclatu	equ	0xFFB
  7869                           pclath	equ	0xFFA
  7870                           tblptru	equ	0xFF8
  7871                           tblptrh	equ	0xFF7
  7872                           tblptrl	equ	0xFF6
  7873                           tablat	equ	0xFF5
  7874                           prodh	equ	0xFF4
  7875                           prodl	equ	0xFF3
  7876                           intcon	equ	0xFF2
  7877                           fsr0h	equ	0xFEA
  7878                           fsr0l	equ	0xFE9
  7879                           wreg	equ	0xFE8
  7880                           fsr1h	equ	0xFE2
  7881                           fsr1l	equ	0xFE1
  7882                           indf2	equ	0xFDF
  7883                           postinc2	equ	0xFDE
  7884                           postdec2	equ	0xFDD
  7885                           fsr2h	equ	0xFDA
  7886                           fsr2l	equ	0xFD9
  7887                           status	equ	0xFD8
  7888                           pclatu	equ	0xFFB
  7889                           pclath	equ	0xFFA
  7890                           tblptru	equ	0xFF8
  7891                           tblptrh	equ	0xFF7
  7892                           tblptrl	equ	0xFF6
  7893                           tablat	equ	0xFF5
  7894                           prodh	equ	0xFF4
  7895                           prodl	equ	0xFF3
  7896                           intcon	equ	0xFF2
  7897                           fsr0h	equ	0xFEA
  7898                           fsr0l	equ	0xFE9
  7899                           wreg	equ	0xFE8
  7900                           fsr1h	equ	0xFE2
  7901                           fsr1l	equ	0xFE1
  7902                           indf2	equ	0xFDF
  7903                           postinc2	equ	0xFDE
  7904                           postdec2	equ	0xFDD
  7905                           fsr2h	equ	0xFDA
  7906                           fsr2l	equ	0xFD9
  7907                           status	equ	0xFD8
  7908                           
  7909                           	psect	rparam
  7910  0000                     pclatu	equ	0xFFB
  7911                           pclath	equ	0xFFA
  7912                           tblptru	equ	0xFF8
  7913                           tblptrh	equ	0xFF7
  7914                           tblptrl	equ	0xFF6
  7915                           tablat	equ	0xFF5
  7916                           prodh	equ	0xFF4
  7917                           prodl	equ	0xFF3
  7918                           intcon	equ	0xFF2
  7919                           fsr0h	equ	0xFEA
  7920                           fsr0l	equ	0xFE9
  7921                           wreg	equ	0xFE8
  7922                           fsr1h	equ	0xFE2
  7923                           fsr1l	equ	0xFE1
  7924                           indf2	equ	0xFDF
  7925                           postinc2	equ	0xFDE
  7926                           postdec2	equ	0xFDD
  7927                           fsr2h	equ	0xFDA
  7928                           fsr2l	equ	0xFD9
  7929                           status	equ	0xFD8
  7930                           
  7931                           	psect	temp
  7932  00004D                     btemp:
  7933                           	opt stack 0
  7934  00004D                     	ds	1
  7935  0000                     int$flags	set	btemp
  7936  0000                     wtemp6	set	btemp+1
  7937                           pclatu	equ	0xFFB
  7938                           pclath	equ	0xFFA
  7939                           tblptru	equ	0xFF8
  7940                           tblptrh	equ	0xFF7
  7941                           tblptrl	equ	0xFF6
  7942                           tablat	equ	0xFF5
  7943                           prodh	equ	0xFF4
  7944                           prodl	equ	0xFF3
  7945                           intcon	equ	0xFF2
  7946                           fsr0h	equ	0xFEA
  7947                           fsr0l	equ	0xFE9
  7948                           wreg	equ	0xFE8
  7949                           fsr1h	equ	0xFE2
  7950                           fsr1l	equ	0xFE1
  7951                           indf2	equ	0xFDF
  7952                           postinc2	equ	0xFDE
  7953                           postdec2	equ	0xFDD
  7954                           fsr2h	equ	0xFDA
  7955                           fsr2l	equ	0xFD9
  7956                           status	equ	0xFD8


Data Sizes:
    Strings     7
    Constant    118
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     76      76
    BANK0           160     64      64
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_1(CODE[7]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 3
		 -> main@str(BANK0[3]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    USART_SendString@out	PTR const unsigned char  size(2) Largest target is 3
		 -> main@str(BANK0[3]), 


Critical Paths under _main in COMRAM

    _main->_wait_in_ms
    _sprintf->___ftadd
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___ftsub->___ftadd
    _pacienteMuerto->___lwtoft
    _lcd_origen->_wait_in_ms
    _lcd_iniciar->_wait_in_ms
    _lcd_pulso->_wait_in_ms
    ___lwtoft->___ftpack
    _USART_SendString->_USART_TransmitChar
    _USART_Init->___ftadd
    ___ftadd->___ftdiv
    ___altoft->___ftpack
    _ADC_Read->_wait_in_ms
    _wait_in_ms->___fttol
    ___fttol->___ftdiv
    ___ftdiv->___ftmul
    ___awtoft->___ftpack

Critical Paths under _ADCint in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___ftsub
    ___ftsub->___ftadd
    _lcd_origen->_lcd_orden
    _lcd_iniciar->_lcd_orden
    _lcd_pulso->_wait_in_ms
    _USART_Init->___fttol
    _ADC_Read->_wait_in_ms
    _wait_in_ms->___fttol

Critical Paths under _ADCint in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ADCint in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ADCint in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ADCint in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ADCint in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ADCint in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ADCint in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ADCint in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                15    15      0  136670
                                             50 BANK0     14    14      0
                           _ADC_Read
                            _MSdelay
                         _USART_Init
                   _USART_SendString
                            ___ftdiv
                             ___ftge
                            ___ftmul
                           ___lwtoft
                        _configBoard
                        _lcd_iniciar
                         _lcd_origen
                     _pacienteMuerto
                            _sprintf
                         _wait_in_ms
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             44    37      7   51755
                                             12 BANK0     38    31      7
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                7     4      3   12137
                                             53 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             18 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              10     7      3   11939
                                             53 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2895
                                             32 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    5315
                                             38 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1664
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1820
                                             24 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     455
                                             18 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     598
                                             18 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2728
                                             26 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     615
                                             18 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     466
                                             18 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4350
                                              6 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     121
                                             18 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _pacienteMuerto                                       3     0      3    1168
                                             29 COMRAM     3     0      3
                             ___ftge
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6    1048
                                             18 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _lcd_origen                                           0     0      0   17214
                          _lcd_orden
                         _wait_in_ms
 ---------------------------------------------------------------------------------
 (1) _lcd_iniciar                                          0     0      0   25495
                          _lcd_orden
                          _lcd_pulso
                         _wait_in_ms
 ---------------------------------------------------------------------------------
 (2) _lcd_orden                                            7     5      2    8933
                                             17 BANK0      7     5      2
                          _lcd_pulso
 ---------------------------------------------------------------------------------
 (3) _lcd_pulso                                            0     0      0    8281
                         _wait_in_ms
 ---------------------------------------------------------------------------------
 (1) _configBoard                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             3     0      3    2757
                                             26 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _USART_SendString                                     2     0      2     143
                                             19 COMRAM     2     0      2
                 _USART_TransmitChar
 ---------------------------------------------------------------------------------
 (2) _USART_TransmitChar                                   1     1      0      22
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _USART_Init                                           7     3      4   11000
                                             11 BANK0      7     3      4
                           ___altoft
                            ___ftadd
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    4005
                                             68 COMRAM     6     0      6
                                              0 BANK0      6     6      0
                           ___altoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___altoft                                            10     6      4    2797
                                             26 COMRAM    10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _MSdelay                                              6     4      2     244
                                             18 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             4     2      2    8643
                                             17 BANK0      4     2      2
                         _wait_in_ms
 ---------------------------------------------------------------------------------
 (1) _wait_in_ms                                          10     8      2    8281
                                             72 COMRAM     4     2      2
                                             11 BANK0      6     6      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     632
                                             68 COMRAM     4     0      4
                                              0 BANK0     11    11      0
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3445
                                             53 COMRAM    15     9      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    2750
                                             26 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2583
                                             18 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ADCint                                              18    18      0       0
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Read
     _wait_in_ms
       ___awtoft
         ___ftpack
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _MSdelay
   _USART_Init
     ___altoft
       ___ftpack
     ___ftadd
       ___altoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _USART_SendString
     _USART_TransmitChar
   ___ftdiv
     ___altoft (ARG)
       ___ftpack
     ___awtoft (ARG)
       ___ftpack
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
   ___ftge
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___lwtoft
     ___ftpack
   _configBoard
   _lcd_iniciar
     _lcd_orden
       _lcd_pulso
         _wait_in_ms
           ___awtoft
             ___ftpack
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
     _lcd_pulso
       _wait_in_ms
         ___awtoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
     _wait_in_ms
       ___awtoft
         ___ftpack
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _lcd_origen
     _lcd_orden
       _lcd_pulso
         _wait_in_ms
           ___awtoft
             ___ftpack
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
     _wait_in_ms
       ___awtoft
         ___ftpack
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _pacienteMuerto
     ___ftge
     ___lwtoft (ARG)
       ___ftpack
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___altoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _wait_in_ms
     ___awtoft
       ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)

 _ADCint (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5E     4C      4C       1       80.9%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     40      40       5       40.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Mar 07 19:07:00 2018

               ___altoft@exp 0023                ___altoft@sign 0024                           l42 2884  
                         l35 1980                           l36 1A6E                           l92 2256  
                         l93 225E                           l89 221E                 ___awdiv@sign 001E  
                __CFG_BOR$ON 000000          ___wmul@multiplicand 0023                  __CFG_BORV$3 000000  
               __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000  
               __CFG_CP3$OFF 000000                 ___ftadd@exp1 0065                 ___ftadd@exp2 0064  
               ___ftadd@sign 0063                          l120 1CF8                          l121 1D08  
                        l130 1DAA                          l122 1D1A                          l131 1DBC  
                        l123 1D2C                          l132 1DCE                          l124 1D3E  
                        l300 09DA                          l125 1D50                          l134 1DDC  
                        l126 1D62                          l302 0FDE                          l310 0B8E  
                        l127 1D74                          l311 0C56                          l303 09EE  
                        l128 1D86                          l240 29A8                          l320 0CBC  
                        l304 0A30                          l129 1D98                          l330 0E16  
                        l314 0BFE                          l306 0AC2                          l331 0D82  
                        l307 0B28                          l340 0ED0                          l324 0D28  
                        l245 292A                          l333 0E36                          l309 0B4E  
                        l246 290C                          l342 0FD4                          l334 0E20  
                        l326 0D54                          l239 29BA                          l351 1076  
                        l343 0FBE                          l327 0D3E                          l272 1736  
                        l280 1450                          l352 107E                          l336 0E5A  
                        l353 10A2                          l345 0FF6                          l337 0E5E  
                        l282 1500                          l354 10AA                          l346 1012  
                        l338 0E80                          l531 2488                          l275 1324  
                        l339 0FB2                          l291 09A4                          l532 2480  
                        l276 1250                          l348 1032                          l292 098E  
                        l445 25F4                          l541 2652                          l269 166A  
                        l349 1054                          l293 0956                          l446 25E8  
                        l550 26A4                          l542 265E                          l358 10F4  
                        l286 088E                          l711 1E9C                          l623 17CA  
                        l535 24A8                          l279 1300                          l287 08A6  
                        l720 1EDC                          l712 1E8C                          l632 185A  
                        l560 1BDC                          l536 24B2                          l528 245A  
                        l544 2674                          l296 09B6                          l705 28A0  
                        l537 24C0                          l529 246A                          l545 266C  
                        l289 08D4                          l650 18CE                          l562 1BFA  
                        l651 18FE                          l627 17F4                          l563 1C3C  
                        l299 09B2                          l556 28DE                          l660 2096  
                        l572 1CCE                          l564 1C6C                          l548 268C  
                        l724 29E0                          l717 1EC0                          l709 1E24  
                        l637 1850                          l573 1CC2                          l549 2696  
                        l718 1EB4                          l646 188E                          l638 1846  
                        l750 24F8                          l566 1CAA                          l670 1B82  
                        l647 1884                          l751 24EC                          l567 1C9A  
                        l671 1B72                          l592 2296                          l656 200A  
                        l760 2736                          l664 1AB8                          l593 228C  
                        l649 18B2                          l681 23E6                          l761 272A  
                        l658 2032                          l682 2416                          l754 252C  
                        l666 1AE4                          l690 1F3E                          l595 22CA  
                        l659 2070                          l755 253A                          l771 27F6  
                        l667 1B1E                          l691 1F70                          l596 22B4  
                        l764 275E                          l772 27EA                          l676 1BA6  
                        l668 1B46                          l692 1F80                          l765 276C  
                        l677 1B9A                          l598 22F2                          l694 1F98  
                        l599 22E8                          l695 1FA8                          l688 1F16  
                        l699 2974                 __CFG_CPB$OFF 000000                 __CFG_CPD$OFF 000000  
               ___awmod@sign 0018                          wreg 000FE8                 __CFG_LVP$OFF 000000  
               ___ftdiv@cntr 003F                 ___ftdiv@sign 0044                 __CFG_WDT$OFF 000000  
                       l3043 2926                         l3035 2914                         l3207 0BD8  
                       l2275 2442                         l3251 0D4E                         l3227 0CC0  
                       l2439 225E                         l3271 0E20                         l3247 0D3E  
                       l3361 10F0                         l3199 0B8E                         l2659 2A32  
                       STR_1 0877                         u2011 1E08                         u2030 1E42  
                       u2120 224C                         u2210 17E6                         u2035 1E3A  
                       u2141 1788                         u2070 1EC6                         u2310 1896  
                       u2151 179C                         u2240 1824                         u3200 0A68  
                       u3130 0932                         u2180 17BC                         u2500 2678  
                       u3205 0A5E                         u2095 21CC                         u2351 1EFE  
                       u2280 1862                         u2440 248C                         u3320 0CF8  
                       u3240 0B60                         u3250 0BA0                         u2371 1F26  
                       u3350 0D62                         u2535 26C6                         u1920 22FC  
                       u2720 1BAC                         u3520 10B2                         u3280 0BD8  
                       u2641 1A9C                         u3530 10D0                         u3380 0E44  
                       u2661 1AC8                         u2910 273A                         u3550 110E  
                       u3390 0E54                         u1951 1FF2                         u1880 227E  
                       u1971 201A                         u2950 2926                         u2790 1CD4  
                       u2880 24FC                         _RCIF 007CF5                         _TXIF 007CF4  
                       _main 1924                 ___ftpack@arg 0013                 ___ftpack@exp 0016  
                       fsr0h 000FEA                         fsr1h 000FE2                         fsr2h 000FDA  
                       fsr0l 000FE9                         indf2 000FDF                         fsr1l 000FE1  
                       fsr2l 000FD9                         btemp 004D     __end_of_USART_SendString 29CA  
           __end_of_ADC_Read 1DF6                         prodh 000FF4                         prodl 000FF3  
                       start 000E              __end_of_MSdelay 2938                __CFG_IESO$OFF 000000  
               _sprintf$1619 0079                __CFG_MCLRE$ON 000000                 ___ftmul@cntr 0034  
               ___param_bank 000000                 ___ftmul@sign 0035                 ___fttol@exp1 006A  
               ___fttol@lval 0066                __CFG_PLLDIV$2 000000               __CFG_CCP2MX$ON 000000  
                      ?_main 0001              __end_of___awdiv 24CA              __end_of___ftadd 1924  
            __end_of___awmod 26AE              __end_of___ftdiv 20C8              __end_of___ftneg 2982  
            __end_of___lldiv 254C              __end_of___ftmul 1FE2              ___awdiv@divisor 001B  
            __end_of___llmod 277E              __end_of___ftsub 28CA              __end_of___fttol 1EEE  
            ___awdiv@counter 001D                        _RCREG 000FAE                        _RCSTA 000FAB  
                      _TMR0L 000FD6                        _SPBRG 000FAF                        _PORTA 000F80  
                      _PORTD 000F83                __CFG_USBDIV$1 000000                        _TRISA 000F92  
                      _TRISB 000F93                        _TRISD 000F95                        _TXREG 000FAD  
                      _TXSTA 000FAC                __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000  
              __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000  
               ___lltoft@exp 0023               __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000  
             __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000  
              __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000  
             __CFG_EBTRB$OFF 000000                ___awtoft@sign 001E              __end_of_dpowers 0829  
                      _scale 111C              __end_of_isdigit 29E8                ___ftpack@sign 0017  
                      pclath 000FFA                        tablat 000FF5                        status 000FD8  
                      wtemp6 004E              __end_of_sprintf 111C               __CFG_ICPRT$OFF 000000  
                ?_USART_Init 006B              __initialization 2A22                 __end_of_main 1A8C  
                     ??_main 004D                ___fttol@sign1 0065                __activetblptr 000002  
       __size_of__tdiv_to_l_ 0132      __size_of_pacienteMuerto 0048                       _ADCON0 000FC2  
           __end_of___altoft 263E             ___llmod@dividend 0013                       ?_scale 0036  
                     _ADRESH 000FC4                       _ADRESL 000FC3                       _T08BIT 007EAE  
           ___awdiv@dividend 0019                       _ADCint 0008             __end_of___awtoft 2902  
           __end_of___ftpack 231C             __end_of___lltoft 2840                    ??_MSdelay 0015  
           __end_of___lwtoft 29A6                       _OSCCON 000FD3                       _TMR0IF 007F92  
                     _TMR0ON 007EAF                       _TRISC6 007CA6                       _TRISC7 007CA7  
             __CFG_XINST$OFF 000000         __size_of_configBoard 0066             __end_of__powers_ 0850  
                     ___ftge 23B6         __size_of_lcd_iniciar 00D6                       ___wmul 2938  
                  ??___awdiv 001D                    ??___ftadd 0060               __CFG_STVREN$ON 000000  
                  ??___awmod 0017                    ??___ftdiv 003C                    ??___ftneg 0016  
                  ??___lldiv 001B                    ??___ftmul 002D                    ??___llmod 001B  
                  ??___ftsub 004B                    ??___fttol 0060              ADC_Read@channel 0071  
                     _fround 1524             ___awdiv@quotient 001F              ___awmod@divisor 0015  
            ___awmod@counter 0017        ___ftmul@f3_as_product 0031                    ??_isdigit 0013  
                  ?_ADC_Read 0071   __end_of_USART_TransmitChar 2A3C                 __mediumconst 0000  
                     tblptrh 000FF7                       tblptrl 000FF6                       tblptru 000FF8  
        __size_of_USART_Init 007A                    ??_sprintf 0073                   __accesstop 0060  
    __end_of__initialization 2A22                   ___altoft@c 001B              __CFG_PBADEN$OFF 000000  
                 ___ftadd@f1 0045                   ___ftadd@f2 0048                   ___ftge@ff1 0013  
                 ___ftge@ff2 0016                ___rparam_used 000001                   ___ftdiv@f1 0036  
                 ___ftdiv@f2 0039                   ___ftdiv@f3 0040                   ___ftneg@f1 0013  
                 ___awtoft@c 001B                   ___ftmul@f1 0027                   ___ftmul@f2 002A  
                 ___ftsub@f1 0066                   ___ftsub@f2 0069                   ___fttol@f1 0045  
             __pcstackCOMRAM 0001                   ___lltoft@c 001B                __end_of_scale 1524  
                 ___lwtoft@c 001B                   __div_to_l_ 1BBE                   ??_ADC_Read 0073  
         __size_of_lcd_orden 006A           __size_of_lcd_pulso 001E              __div_to_l_@exp1 001E  
            __div_to_l_@cntr 001D                      ??_scale 0039              __div_to_l_@quot 0019  
               sprintf@width 0084                      ?_ADCint 0001            ?_USART_SendString 0014  
              __div_to_l_@f1 0013                __div_to_l_@f2 0016           ??_USART_SendString 0016  
             lcd_orden@orden 0071                      ?___ftge 0013                      ?___wmul 0021  
                  ?___altoft 001B                      ?_fround 0036                    ?___awtoft 001B  
                  ?___ftpack 0013                    ?___lltoft 001B                    ?___lwtoft 001B  
             _pacienteMuerto 2840                   _lcd_origen 2A06              __size_of_ADCint 23AE  
                    _MSdelay 2902              __CFG_VREGEN$OFF 000000                 ??_USART_Init 004B  
          __end_of__npowers_ 0877                      __Hparam 0000                   _scale$1618 0039  
                    __Lparam 0000            __end_of_lcd_orden 2718              __size_of___ftge 0090  
          __end_of_lcd_pulso 2A06                      ___awdiv 2446                      ___ftadd 1776  
                    ___awmod 263E                      ___ftdiv 1FE2                      ___ftneg 295E  
                    ___lldiv 24CA              __size_of___wmul 0026                      ___ftmul 1EEE  
                    ___llmod 2718                      ___ftsub 2888                      ___fttol 1DF6  
               __psmallconst 0800                   ??___altoft 001F                      __pcinit 2A22  
                 ??___awtoft 001E                   ??___ftpack 0018              __size_of_fround 0252  
                    __ramtop 0800                   ??___lltoft 001F                      __ptext0 1924  
                    __ptext1 0880                      __ptext2 111C                      __ptext3 29CA  
                    __ptext4 1524                      __ptext5 2938                      __ptext6 1EEE  
                    __ptext7 263E                      __ptext8 2446                      __ptext9 1A8C  
        USART_SendString@out 0014                   ??___lwtoft 001E                    _T0CONbits 000FD5  
                ?__div_to_l_ 0013               USART_Init@temp 006F       __end_of_pacienteMuerto 2888  
                    _dpowers 0801                      _isdigit 29CA             ___awmod@dividend 0013  
         __end_of_USART_Init 25C6                      main@an1 0098                      _sprintf 0880  
                    main@str 009D               __pintcode_body 231C         end_of_initialization 2A22  
              __Lmediumconst 0000         wait_in_ms@time_in_ms 0049                      int_func 231C  
            ___lldiv@divisor 0017              ___lldiv@counter 001F                      postdec2 000FDD  
                    postinc2 000FDE                   _wait_in_ms 219E               __tdiv_to_l_@f1 0013  
             __tdiv_to_l_@f2 0016                ??__tdiv_to_l_ 0019                    _PORTBbits 000F81  
                  _PORTCbits 000F82                    _PORTDbits 000F83              ?_pacienteMuerto 001E  
                  _TRISAbits 000F92                    _TRISBbits 000F93                    _TRISCbits 000F94  
                  _TRISDbits 000F95                  ?_lcd_origen 0001            __size_of_ADC_Read 0110  
        USART_Init@baud_rate 006B        USART_TransmitChar@out 0013               __end_of_ADCint 23B6  
                ___ftdiv@exp 0043                ??_configBoard 0013           _USART_TransmitChar 2A30  
              ??_lcd_iniciar 004D          __size_of__div_to_l_ 0128                  ___ftmul@exp 0030  
        ?_USART_TransmitChar 0001               __end_of___ftge 2446               __end_of___wmul 295E  
             __end_of_fround 1776          start_initialization 2A22          __end_of__tdiv_to_l_ 1BBE  
       ??_USART_TransmitChar 0013              wait_in_ms@count 006D                     ??_ADCint 0001  
            ___llmod@divisor 0017              ___llmod@counter 001B           wait_in_ms@count_ms 006F  
                   ??___ftge 0019                     ??___wmul 0025          __end_of_configBoard 27E4  
        __size_of_lcd_origen 001C                  ?_wait_in_ms 0049             __CFG_LPT1OSC$OFF 000000  
        __end_of_lcd_iniciar 219E                     ??_fround 0039                sprintf@tmpval 0086  
  __size_of_USART_SendString 0024            __size_of___altoft 0078                   fround@prec 003F  
          __size_of___awtoft 0038            __size_of___ftpack 00AE            __size_of___lltoft 005C  
          __size_of___lwtoft 0024                __pcstackBANK0 0060                 _isdigit$1257 0014  
                   ?_MSdelay 0013                  sprintf@flag 0082                  sprintf@fval 008C  
                sprintf@prec 008F                    __pintcode 0008                     ?___awdiv 0019  
                   ?___ftadd 0045                     ?___awmod 0013                     ?___ftdiv 0036  
                   ?___ftneg 0013                     ?___lldiv 0013                     ?___ftmul 0027  
                   ?___llmod 0013                     ?___ftsub 0066                    __npowers_ 0850  
                   ?___fttol 0045                    _lcd_orden 26AE                  __tdiv_to_l_ 1A8C  
                  _lcd_pulso 29E8                 ??__div_to_l_ 0019                  __smallconst 0800  
                   ?_isdigit 0001                     _ADC_Read 1CE6                     ?_sprintf 006C  
             __size_of_scale 0408          __size_of_wait_in_ms 00D0                     MSdelay@i 0015  
                   MSdelay@j 0017               ___wmul@product 0025                  _configBoard 277E  
                   _PIE1bits 000F9D                  _lcd_iniciar 20C8          pacienteMuerto@testv 001E  
                   _PIR1bits 000F9E           __end_of__div_to_l_ 1CE6             __CFG_WDTPS$32768 000000  
           ??_pacienteMuerto 0021                   ?_lcd_orden 0071                   ?_lcd_pulso 0001  
                 _ADCON0bits 000FC2                   _ADCON1bits 000FC1                   _ADCON2bits 000FC0  
          ___wmul@multiplier 0021                 ??_lcd_origen 004D             __size_of_MSdelay 0036  
             wait_in_ms@flag 006B            main@pulsoCorazonX 0092            main@pulsoCorazonY 0096  
                   __Hrparam 0000                     __Lrparam 0000           __end_of_lcd_origen 2A22  
           __size_of___awdiv 0084             __size_of___ftadd 01AE             __size_of___awmod 0070  
           __size_of___ftdiv 00E6             __size_of___ftneg 0024             __size_of___lldiv 0082  
                   ___altoft 25C6             __size_of___ftmul 00F4             __size_of___llmod 0066  
           __size_of___ftsub 0042             __size_of___fttol 00F8                     ___awtoft 28CA  
                   ___ftpack 226E                  _fround$1616 003C                  _fround$1617 0039  
                   ___lltoft 27E4             _USART_SendString 29A6                     ___lwtoft 2982  
                 sprintf@exp 008A                   sprintf@val 007E             __size_of_isdigit 001E  
                   __ptext10 1BBE                     __ptext11 27E4                     __ptext20 26AE  
                   __ptext12 2718                     __ptext21 29E8                     __ptext13 24CA  
                   __ptext30 1CE6                     __ptext22 277E                     __ptext14 2888  
                   __ptext31 219E                     __ptext23 2982                     __ptext15 295E  
                   __ptext32 1DF6                     __ptext24 29A6                     __ptext16 2840  
                   __ptext33 1FE2                     __ptext25 2A30                     __ptext17 23B6  
                   __ptext34 28CA                     __ptext26 254C                     __ptext18 2A06  
                   __ptext35 226E                     __ptext27 1776                     __ptext19 20C8  
                   __ptext28 25C6                     __ptext29 2902                     __powers_ 0829  
           __size_of_sprintf 089C                __size_of_main 0168                   MSdelay@val 0013  
                   int$flags 004D                 ??_wait_in_ms 004B                  ??_lcd_orden 0073  
                ??_lcd_pulso 004D        __CFG_CPUDIV$OSC1_PLL2 000000                   _INTCONbits 000FF2  
                   isdigit@c 0015                     scale@scl 003C  __size_of_USART_TransmitChar 000C  
                   intlevel2 0000                    sprintf@ap 007C             __tdiv_to_l_@exp1 0021  
           __tdiv_to_l_@cntr 0020                    sprintf@sp 006C             __tdiv_to_l_@quot 001C  
         __end_of_wait_in_ms 226E             ___lldiv@dividend 0013                 ?__tdiv_to_l_ 0013  
                   sprintf@c 0091                     sprintf@f 006E             ___lldiv@quotient 001B  
            main@pulsos_test 0094           __CFG_FOSC$HSPLL_HS 000000                 ?_configBoard 0001  
               ?_lcd_iniciar 0001                   _USART_Init 254C              main@voltaje_an1 009A  
