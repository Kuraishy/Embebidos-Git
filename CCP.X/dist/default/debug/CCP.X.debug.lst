

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Mar 23 18:29:02 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    44                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    45  0000                     
    46                           ; Version 1.45
    47                           ; Generated 16/11/2017 GMT
    48                           ; 
    49                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    50                           ; All rights reserved.
    51                           ; 
    52                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    53                           ; 
    54                           ; Redistribution and use in source and binary forms, with or without modification, are
    55                           ; permitted provided that the following conditions are met:
    56                           ; 
    57                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    58                           ;        conditions and the following disclaimer.
    59                           ; 
    60                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    61                           ;        of conditions and the following disclaimer in the documentation and/or other
    62                           ;        materials provided with the distribution.
    63                           ; 
    64                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    65                           ;        software without specific prior written permission.
    66                           ; 
    67                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    68                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    69                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    70                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    71                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    72                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    73                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    74                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    75                           ; 
    76                           ; 
    77                           ; Code-generator required, PIC18F4550 Definitions
    78                           ; 
    79                           ; SFR Addresses
    80  0000                     
    81                           	psect	smallconst
    82  000800                     __psmallconst:
    83                           	opt stack 0
    84  000800  00                 	db	0
    85  000801                     _octpowers:
    86                           	opt stack 0
    87  000801  0001               	dw	1
    88  000803  0000               	dw	0
    89  000805  0008               	dw	8
    90  000807  0000               	dw	0
    91  000809  0040               	dw	64
    92  00080B  0000               	dw	0
    93  00080D  0200               	dw	512
    94  00080F  0000               	dw	0
    95  000811  1000               	dw	4096
    96  000813  0000               	dw	0
    97  000815  8000               	dw	32768
    98  000817  0000               	dw	0
    99  000819  0000               	dw	0
   100  00081B  0004               	dw	4
   101  00081D  0000               	dw	0
   102  00081F  0020               	dw	32
   103  000821  0000               	dw	0
   104  000823  0100               	dw	256
   105  000825  0000               	dw	0
   106  000827  0800               	dw	2048
   107  000829  0000               	dw	0
   108  00082B  4000               	dw	16384
   109  00082D  0000               	dw	0
   110  00082F  0000               	dw	0
   111  000831                     __end_of_octpowers:
   112                           	opt stack 0
   113  000831                     _dpowers:
   114                           	opt stack 0
   115  000831  0001               	dw	1
   116  000833  0000               	dw	0
   117  000835  000A               	dw	10
   118  000837  0000               	dw	0
   119  000839  0064               	dw	100
   120  00083B  0000               	dw	0
   121  00083D  03E8               	dw	1000
   122  00083F  0000               	dw	0
   123  000841  2710               	dw	10000
   124  000843  0000               	dw	0
   125  000845  86A0               	dw	34464
   126  000847  0001               	dw	1
   127  000849  4240               	dw	16960
   128  00084B  000F               	dw	15
   129  00084D  9680               	dw	38528
   130  00084F  0098               	dw	152
   131  000851  E100               	dw	57600
   132  000853  05F5               	dw	1525
   133  000855  CA00               	dw	51712
   134  000857  3B9A               	dw	15258
   135  000859                     __end_of_dpowers:
   136                           	opt stack 0
   137  000859                     __powers_:
   138                           	opt stack 0
   139  000859  00                 	db	0
   140  00085A  80                 	db	128
   141  00085B  3F                 	db	63
   142  00085C  00                 	db	0
   143  00085D  20                 	db	32
   144  00085E  41                 	db	65
   145  00085F  00                 	db	0
   146  000860  C8                 	db	200
   147  000861  42                 	db	66
   148  000862  00                 	db	0
   149  000863  7A                 	db	122
   150  000864  44                 	db	68
   151  000865  40                 	db	64
   152  000866  1C                 	db	28
   153  000867  46                 	db	70
   154  000868  50                 	db	80
   155  000869  C3                 	db	195
   156  00086A  47                 	db	71
   157  00086B  24                 	db	36
   158  00086C  74                 	db	116
   159  00086D  49                 	db	73
   160  00086E  97                 	db	151
   161  00086F  18                 	db	24
   162  000870  4B                 	db	75
   163  000871  BC                 	db	188
   164  000872  BE                 	db	190
   165  000873  4C                 	db	76
   166  000874  6B                 	db	107
   167  000875  6E                 	db	110
   168  000876  4E                 	db	78
   169  000877  03                 	db	3
   170  000878  15                 	db	21
   171  000879  50                 	db	80
   172  00087A  79                 	db	121
   173  00087B  AD                 	db	173
   174  00087C  60                 	db	96
   175  00087D  F3                 	db	243
   176  00087E  49                 	db	73
   177  00087F  71                 	db	113
   178  000880                     __end_of__powers_:
   179                           	opt stack 0
   180  000880                     __npowers_:
   181                           	opt stack 0
   182  000880  00                 	db	0
   183  000881  80                 	db	128
   184  000882  3F                 	db	63
   185  000883  CD                 	db	205
   186  000884  CC                 	db	204
   187  000885  3D                 	db	61
   188  000886  D7                 	db	215
   189  000887  23                 	db	35
   190  000888  3C                 	db	60
   191  000889  12                 	db	18
   192  00088A  83                 	db	131
   193  00088B  3A                 	db	58
   194  00088C  B7                 	db	183
   195  00088D  D1                 	db	209
   196  00088E  38                 	db	56
   197  00088F  C6                 	db	198
   198  000890  27                 	db	39
   199  000891  37                 	db	55
   200  000892  38                 	db	56
   201  000893  86                 	db	134
   202  000894  35                 	db	53
   203  000895  C0                 	db	192
   204  000896  D6                 	db	214
   205  000897  33                 	db	51
   206  000898  CC                 	db	204
   207  000899  2B                 	db	43
   208  00089A  32                 	db	50
   209  00089B  70                 	db	112
   210  00089C  89                 	db	137
   211  00089D  30                 	db	48
   212  00089E  E7                 	db	231
   213  00089F  DB                 	db	219
   214  0008A0  2E                 	db	46
   215  0008A1  E5                 	db	229
   216  0008A2  3C                 	db	60
   217  0008A3  1E                 	db	30
   218  0008A4  42                 	db	66
   219  0008A5  A2                 	db	162
   220  0008A6  0D                 	db	13
   221  0008A7                     __end_of__npowers_:
   222                           	opt stack 0
   223  0008A7                     _hexpowers:
   224                           	opt stack 0
   225  0008A7  0001               	dw	1
   226  0008A9  0000               	dw	0
   227  0008AB  0010               	dw	16
   228  0008AD  0000               	dw	0
   229  0008AF  0100               	dw	256
   230  0008B1  0000               	dw	0
   231  0008B3  1000               	dw	4096
   232  0008B5  0000               	dw	0
   233  0008B7  0000               	dw	0
   234  0008B9  0001               	dw	1
   235  0008BB  0000               	dw	0
   236  0008BD  0010               	dw	16
   237  0008BF  0000               	dw	0
   238  0008C1  0100               	dw	256
   239  0008C3  0000               	dw	0
   240  0008C5  1000               	dw	4096
   241  0008C7                     __end_of_hexpowers:
   242                           	opt stack 0
   243  0000                     _PORTA	set	3968
   244  0000                     _TRISD	set	3989
   245  0000                     _TRISAbits	set	3986
   246  0000                     _TRISB	set	3987
   247  0000                     _TRISA	set	3986
   248  0000                     _PORTD	set	3971
   249  0000                     _PORTDbits	set	3971
   250  0000                     _TRISDbits	set	3989
   251  0000                     _TRISC2	set	31906
   252  0000                     _TMR1	set	4046
   253  0000                     _CCPR1	set	4030
   254  0000                     _T1CON	set	4045
   255  0000                     _CCP1CON	set	4029
   256  0000                     _OSCCON	set	4051
   257  0000                     _PIR1bits	set	3998
   258  0000                     _PIE1bits	set	3997
   259  0000                     _ADCON2bits	set	4032
   260  0000                     _ADCON0bits	set	4034
   261  0000                     _ADCON0	set	4034
   262  0000                     _ADCON1bits	set	4033
   263  0000                     _TMR1ON	set	32360
   264  0000                     _TMR1IF	set	31984
   265  0000                     _RCIF	set	31989
   266  0000                     _T0CONbits	set	4053
   267  0000                     _TMR0L	set	4054
   268  0000                     _TMR0ON	set	32431
   269  0000                     _T08BIT	set	32430
   270  0000                     _INTCONbits	set	4082
   271  0000                     _TMR0IF	set	32658
   272  0008C7                     STR_3:
   273  0008C7  30                 	db	48	;'0'
   274  0008C8  31                 	db	49	;'1'
   275  0008C9  32                 	db	50	;'2'
   276  0008CA  33                 	db	51	;'3'
   277  0008CB  34                 	db	52	;'4'
   278  0008CC  35                 	db	53	;'5'
   279  0008CD  36                 	db	54	;'6'
   280  0008CE  37                 	db	55	;'7'
   281  0008CF  38                 	db	56	;'8'
   282  0008D0  39                 	db	57	;'9'
   283  0008D1  41                 	db	65	;'A'
   284  0008D2  42                 	db	66	;'B'
   285  0008D3  43                 	db	67	;'C'
   286  0008D4  44                 	db	68	;'D'
   287  0008D5  45                 	db	69	;'E'
   288  0008D6  46                 	db	70	;'F'
   289  0008D7  00                 	db	0
   290  0008D8                     STR_4:
   291  0008D8  30                 	db	48	;'0'
   292  0008D9  31                 	db	49	;'1'
   293  0008DA  32                 	db	50	;'2'
   294  0008DB  33                 	db	51	;'3'
   295  0008DC  34                 	db	52	;'4'
   296  0008DD  35                 	db	53	;'5'
   297  0008DE  36                 	db	54	;'6'
   298  0008DF  37                 	db	55	;'7'
   299  0008E0  38                 	db	56	;'8'
   300  0008E1  39                 	db	57	;'9'
   301  0008E2  61                 	db	97	;'a'
   302  0008E3  62                 	db	98	;'b'
   303  0008E4  63                 	db	99	;'c'
   304  0008E5  64                 	db	100	;'d'
   305  0008E6  65                 	db	101	;'e'
   306  0008E7  66                 	db	102	;'f'
   307  0008E8  00                 	db	0
   308  0008E9                     STR_1:
   309  0008E9  25                 	db	37
   310  0008EA  2E                 	db	46
   311  0008EB  31                 	db	49	;'1'
   312  0008EC  66                 	db	102	;'f'
   313  0008ED  20                 	db	32
   314  0008EE  48                 	db	72	;'H'
   315  0008EF  7A                 	db	122	;'z'
   316  0008F0  20                 	db	32
   317  0008F1  00                 	db	0
   318  0008F2                     STR_2:
   319  0008F2  25                 	db	37
   320  0008F3  20                 	db	32
   321  0008F4  25                 	db	37
   322  0008F5  20                 	db	32
   323  0008F6  64                 	db	100	;'d'
   324  0008F7  75                 	db	117	;'u'
   325  0008F8  74                 	db	116	;'t'
   326  0008F9  79                 	db	121	;'y'
   327  0008FA  00                 	db	0
   328                           
   329                           ; #config settings
   330  0008FB  00                 	db	0	; dummy byte at the end
   331  0000                     
   332                           	psect	cinit
   333  002FAC                     __pcinit:
   334                           	opt stack 0
   335  002FAC                     start_initialization:
   336                           	opt stack 0
   337  002FAC                     __initialization:
   338                           	opt stack 0
   339                           
   340                           ; Clear objects allocated to COMRAM (1 bytes)
   341  002FAC  6A52               	clrf	__pbssCOMRAM& (0+255),c
   342  002FAE                     end_of_initialization:
   343                           	opt stack 0
   344  002FAE                     __end_of__initialization:
   345                           	opt stack 0
   346  002FAE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   347  002FB0  6EF8               	movwf	tblptru,c
   348  002FB2  0100               	movlb	0
   349  002FB4  EF9D  F00F         	goto	_main	;jump to C main() function
   350                           tblptru	equ	0xFF8
   351                           
   352                           	psect	bssCOMRAM
   353  000052                     __pbssCOMRAM:
   354                           	opt stack 0
   355  000052                     _turno:
   356                           	opt stack 0
   357  000052                     	ds	1
   358                           tblptru	equ	0xFF8
   359                           
   360                           	psect	cstackBANK1
   361  000100                     __pcstackBANK1:
   362                           	opt stack 0
   363  000100                     main@frecuencia:
   364                           	opt stack 0
   365                           
   366                           ; 120 bytes @ 0x0
   367  000100                     	ds	120
   368  000178                     main@UwU:
   369                           	opt stack 0
   370                           
   371                           ; 80 bytes @ 0x78
   372  000178                     	ds	80
   373  0001C8                     main@periodo:
   374                           	opt stack 0
   375                           
   376                           ; 4 bytes @ 0xC8
   377  0001C8                     	ds	4
   378  0001CC                     main@dt:
   379                           	opt stack 0
   380                           
   381                           ; 4 bytes @ 0xCC
   382  0001CC                     	ds	4
   383  0001D0                     main@freq:
   384                           	opt stack 0
   385                           
   386                           ; 3 bytes @ 0xD0
   387  0001D0                     	ds	3
   388  0001D3                     main@dato2:
   389                           	opt stack 0
   390                           
   391                           ; 4 bytes @ 0xD3
   392  0001D3                     	ds	4
   393  0001D7                     main@dato1:
   394                           	opt stack 0
   395                           
   396                           ; 4 bytes @ 0xD7
   397  0001D7                     	ds	4
   398                           tblptru	equ	0xFF8
   399                           
   400                           	psect	cstackBANK0
   401  000060                     __pcstackBANK0:
   402                           	opt stack 0
   403  000060                     _sprintf$1299:
   404                           	opt stack 0
   405                           
   406                           ; 3 bytes @ 0x0
   407  000060                     	ds	3
   408  000063                     sprintf@cp:
   409                           	opt stack 0
   410                           
   411                           ; 2 bytes @ 0x3
   412  000063                     	ds	2
   413  000065                     _sprintf$701:
   414                           	opt stack 0
   415                           
   416                           ; 2 bytes @ 0x5
   417  000065                     	ds	2
   418  000067                     _sprintf$702:
   419                           	opt stack 0
   420                           
   421                           ; 2 bytes @ 0x7
   422  000067                     	ds	2
   423  000069                     _sprintf$703:
   424                           	opt stack 0
   425                           
   426                           ; 2 bytes @ 0x9
   427  000069                     	ds	2
   428  00006B                     _sprintf$704:
   429                           	opt stack 0
   430                           
   431                           ; 2 bytes @ 0xB
   432  00006B                     	ds	2
   433  00006D                     _sprintf$710:
   434                           	opt stack 0
   435                           
   436                           ; 2 bytes @ 0xD
   437  00006D                     	ds	2
   438  00006F                     sprintf@idx:
   439                           	opt stack 0
   440                           
   441                           ; 1 bytes @ 0xF
   442  00006F                     	ds	1
   443  000070                     sprintf@len:
   444                           	opt stack 0
   445                           
   446                           ; 2 bytes @ 0x10
   447  000070                     	ds	2
   448  000072                     sprintf@ap:
   449                           	opt stack 0
   450                           
   451                           ; 2 bytes @ 0x12
   452  000072                     	ds	2
   453  000074                     sprintf@tmpval:
   454                           	opt stack 0
   455                           
   456                           ; 4 bytes @ 0x14
   457  000074                     	ds	4
   458  000078                     sprintf@exp:
   459                           	opt stack 0
   460                           
   461                           ; 2 bytes @ 0x18
   462  000078                     	ds	2
   463  00007A                     sprintf@fval:
   464                           	opt stack 0
   465                           
   466                           ; 3 bytes @ 0x1A
   467  00007A                     	ds	3
   468  00007D                     sprintf@val:
   469                           	opt stack 0
   470                           
   471                           ; 4 bytes @ 0x1D
   472  00007D                     	ds	4
   473  000081                     sprintf@prec:
   474                           	opt stack 0
   475                           
   476                           ; 2 bytes @ 0x21
   477  000081                     	ds	2
   478  000083                     sprintf@width:
   479                           	opt stack 0
   480                           
   481                           ; 2 bytes @ 0x23
   482  000083                     	ds	2
   483  000085                     sprintf@c:
   484                           	opt stack 0
   485                           
   486                           ; 1 bytes @ 0x25
   487  000085                     	ds	1
   488  000086                     sprintf@flag:
   489                           	opt stack 0
   490                           
   491                           ; 2 bytes @ 0x26
   492  000086                     	ds	2
   493                           tblptru	equ	0xFF8
   494                           
   495                           	psect	cstackCOMRAM
   496  000001                     __pcstackCOMRAM:
   497                           	opt stack 0
   498  000001                     ??_isdigit:
   499  000001                     ?___awmod:
   500                           	opt stack 0
   501  000001                     ?___ftpack:
   502                           	opt stack 0
   503  000001                     ?___ftneg:
   504                           	opt stack 0
   505  000001                     ?__tdiv_to_l_:
   506                           	opt stack 0
   507  000001                     ?__div_to_l_:
   508                           	opt stack 0
   509  000001                     ?___lldiv:
   510                           	opt stack 0
   511  000001                     ___awmod@dividend:
   512                           	opt stack 0
   513  000001                     memset@p1:
   514                           	opt stack 0
   515  000001                     __div_to_l_@f1:
   516                           	opt stack 0
   517  000001                     ___ftpack@arg:
   518                           	opt stack 0
   519  000001                     __tdiv_to_l_@f1:
   520                           	opt stack 0
   521  000001                     ___ftge@ff1:
   522                           	opt stack 0
   523  000001                     ___ftneg@f1:
   524                           	opt stack 0
   525  000001                     ___lldiv@dividend:
   526                           	opt stack 0
   527                           
   528                           ; 4 bytes @ 0x0
   529  000001                     	ds	1
   530  000002                     _isdigit$936:
   531                           	opt stack 0
   532                           
   533                           ; 1 bytes @ 0x1
   534  000002                     	ds	1
   535  000003                     isdigit@c:
   536                           	opt stack 0
   537  000003                     ___awmod@divisor:
   538                           	opt stack 0
   539  000003                     memset@c:
   540                           	opt stack 0
   541                           
   542                           ; 2 bytes @ 0x2
   543  000003                     	ds	1
   544  000004                     ___ftpack@exp:
   545                           	opt stack 0
   546  000004                     __div_to_l_@f2:
   547                           	opt stack 0
   548  000004                     __tdiv_to_l_@f2:
   549                           	opt stack 0
   550  000004                     ___ftge@ff2:
   551                           	opt stack 0
   552                           
   553                           ; 3 bytes @ 0x3
   554  000004                     	ds	1
   555  000005                     ___awmod@counter:
   556                           	opt stack 0
   557  000005                     ___ftpack@sign:
   558                           	opt stack 0
   559  000005                     memset@n:
   560                           	opt stack 0
   561  000005                     ___lldiv@divisor:
   562                           	opt stack 0
   563                           
   564                           ; 4 bytes @ 0x4
   565  000005                     	ds	1
   566  000006                     ??___ftpack:
   567  000006                     ___awmod@sign:
   568                           	opt stack 0
   569                           
   570                           ; 1 bytes @ 0x5
   571  000006                     	ds	1
   572  000007                     ??__tdiv_to_l_:
   573  000007                     ??___ftge:
   574  000007                     ?___awdiv:
   575                           	opt stack 0
   576  000007                     ___awdiv@dividend:
   577                           	opt stack 0
   578  000007                     memset@p:
   579                           	opt stack 0
   580  000007                     __div_to_l_@quot:
   581                           	opt stack 0
   582                           
   583                           ; 4 bytes @ 0x6
   584  000007                     	ds	2
   585  000009                     ?___awtoft:
   586                           	opt stack 0
   587  000009                     ?___lltoft:
   588                           	opt stack 0
   589  000009                     ___awdiv@divisor:
   590                           	opt stack 0
   591  000009                     ___awtoft@c:
   592                           	opt stack 0
   593  000009                     ___lldiv@quotient:
   594                           	opt stack 0
   595  000009                     ___lltoft@c:
   596                           	opt stack 0
   597                           
   598                           ; 4 bytes @ 0x8
   599  000009                     	ds	1
   600  00000A                     __tdiv_to_l_@quot:
   601                           	opt stack 0
   602                           
   603                           ; 4 bytes @ 0x9
   604  00000A                     	ds	1
   605  00000B                     ___awdiv@counter:
   606                           	opt stack 0
   607  00000B                     __div_to_l_@cntr:
   608                           	opt stack 0
   609                           
   610                           ; 1 bytes @ 0xA
   611  00000B                     	ds	1
   612  00000C                     ___awdiv@sign:
   613                           	opt stack 0
   614  00000C                     ___awtoft@sign:
   615                           	opt stack 0
   616  00000C                     __div_to_l_@exp1:
   617                           	opt stack 0
   618                           
   619                           ; 1 bytes @ 0xB
   620  00000C                     	ds	1
   621  00000D                     ??___lltoft:
   622  00000D                     ___lldiv@counter:
   623                           	opt stack 0
   624  00000D                     ___awdiv@quotient:
   625                           	opt stack 0
   626                           
   627                           ; 2 bytes @ 0xC
   628  00000D                     	ds	1
   629  00000E                     ?___llmod:
   630                           	opt stack 0
   631  00000E                     __tdiv_to_l_@cntr:
   632                           	opt stack 0
   633  00000E                     ___llmod@dividend:
   634                           	opt stack 0
   635                           
   636                           ; 4 bytes @ 0xD
   637  00000E                     	ds	1
   638  00000F                     ?___wmul:
   639                           	opt stack 0
   640  00000F                     __tdiv_to_l_@exp1:
   641                           	opt stack 0
   642  00000F                     ___wmul@multiplier:
   643                           	opt stack 0
   644                           
   645                           ; 2 bytes @ 0xE
   646  00000F                     	ds	2
   647  000011                     ___lltoft@exp:
   648                           	opt stack 0
   649  000011                     ___wmul@multiplicand:
   650                           	opt stack 0
   651                           
   652                           ; 2 bytes @ 0x10
   653  000011                     	ds	1
   654  000012                     ?___ftdiv:
   655                           	opt stack 0
   656  000012                     ___ftdiv@f1:
   657                           	opt stack 0
   658  000012                     ___llmod@divisor:
   659                           	opt stack 0
   660                           
   661                           ; 4 bytes @ 0x11
   662  000012                     	ds	1
   663  000013                     ___wmul@product:
   664                           	opt stack 0
   665                           
   666                           ; 2 bytes @ 0x12
   667  000013                     	ds	2
   668  000015                     ?___ftmul:
   669                           	opt stack 0
   670  000015                     ___ftdiv@f2:
   671                           	opt stack 0
   672  000015                     ___ftmul@f1:
   673                           	opt stack 0
   674                           
   675                           ; 3 bytes @ 0x14
   676  000015                     	ds	1
   677  000016                     ___llmod@counter:
   678                           	opt stack 0
   679                           
   680                           ; 1 bytes @ 0x15
   681  000016                     	ds	2
   682  000018                     ??___ftdiv:
   683  000018                     ___ftmul@f2:
   684                           	opt stack 0
   685                           
   686                           ; 3 bytes @ 0x17
   687  000018                     	ds	3
   688  00001B                     ??___ftmul:
   689  00001B                     ___ftdiv@cntr:
   690                           	opt stack 0
   691                           
   692                           ; 1 bytes @ 0x1A
   693  00001B                     	ds	1
   694  00001C                     ___ftdiv@f3:
   695                           	opt stack 0
   696                           
   697                           ; 3 bytes @ 0x1B
   698  00001C                     	ds	2
   699  00001E                     ___ftmul@exp:
   700                           	opt stack 0
   701                           
   702                           ; 1 bytes @ 0x1D
   703  00001E                     	ds	1
   704  00001F                     ___ftdiv@exp:
   705                           	opt stack 0
   706  00001F                     ___ftmul@f3_as_product:
   707                           	opt stack 0
   708                           
   709                           ; 3 bytes @ 0x1E
   710  00001F                     	ds	1
   711  000020                     ___ftdiv@sign:
   712                           	opt stack 0
   713                           
   714                           ; 1 bytes @ 0x1F
   715  000020                     	ds	2
   716  000022                     ___ftmul@cntr:
   717                           	opt stack 0
   718                           
   719                           ; 1 bytes @ 0x21
   720  000022                     	ds	1
   721  000023                     ___ftmul@sign:
   722                           	opt stack 0
   723                           
   724                           ; 1 bytes @ 0x22
   725  000023                     	ds	1
   726  000024                     ?_fround:
   727                           	opt stack 0
   728  000024                     ?_scale:
   729                           	opt stack 0
   730                           
   731                           ; 3 bytes @ 0x23
   732  000024                     	ds	3
   733  000027                     _fround$1297:
   734                           	opt stack 0
   735  000027                     _scale$1298:
   736                           	opt stack 0
   737                           
   738                           ; 3 bytes @ 0x26
   739  000027                     	ds	3
   740  00002A                     scale@scl:
   741                           	opt stack 0
   742  00002A                     _fround$1296:
   743                           	opt stack 0
   744                           
   745                           ; 3 bytes @ 0x29
   746  00002A                     	ds	1
   747  00002B                     ?___fttol:
   748                           	opt stack 0
   749  00002B                     ___fttol@f1:
   750                           	opt stack 0
   751                           
   752                           ; 3 bytes @ 0x2A
   753  00002B                     	ds	2
   754  00002D                     fround@prec:
   755                           	opt stack 0
   756                           
   757                           ; 1 bytes @ 0x2C
   758  00002D                     	ds	1
   759  00002E                     ?___ftadd:
   760                           	opt stack 0
   761  00002E                     ___ftadd@f1:
   762                           	opt stack 0
   763                           
   764                           ; 3 bytes @ 0x2D
   765  00002E                     	ds	1
   766  00002F                     ??___fttol:
   767                           
   768                           ; 1 bytes @ 0x2E
   769  00002F                     	ds	2
   770  000031                     ___ftadd@f2:
   771                           	opt stack 0
   772                           
   773                           ; 3 bytes @ 0x30
   774  000031                     	ds	3
   775  000034                     ??___ftadd:
   776  000034                     ___fttol@sign1:
   777                           	opt stack 0
   778                           
   779                           ; 1 bytes @ 0x33
   780  000034                     	ds	1
   781  000035                     ___fttol@lval:
   782                           	opt stack 0
   783                           
   784                           ; 4 bytes @ 0x34
   785  000035                     	ds	2
   786  000037                     ___ftadd@sign:
   787                           	opt stack 0
   788                           
   789                           ; 1 bytes @ 0x36
   790  000037                     	ds	1
   791  000038                     ___ftadd@exp2:
   792                           	opt stack 0
   793                           
   794                           ; 1 bytes @ 0x37
   795  000038                     	ds	1
   796  000039                     ___ftadd@exp1:
   797                           	opt stack 0
   798  000039                     ___fttol@exp1:
   799                           	opt stack 0
   800                           
   801                           ; 1 bytes @ 0x38
   802  000039                     	ds	1
   803  00003A                     ?___ftsub:
   804                           	opt stack 0
   805  00003A                     wait_in_ms@time_in_ms:
   806                           	opt stack 0
   807  00003A                     ___ftsub@f1:
   808                           	opt stack 0
   809                           
   810                           ; 3 bytes @ 0x39
   811  00003A                     	ds	2
   812  00003C                     ??_wait_in_ms:
   813                           
   814                           ; 1 bytes @ 0x3B
   815  00003C                     	ds	1
   816  00003D                     ___ftsub@f2:
   817                           	opt stack 0
   818                           
   819                           ; 3 bytes @ 0x3C
   820  00003D                     	ds	1
   821  00003E                     wait_in_ms@flag:
   822                           	opt stack 0
   823                           
   824                           ; 2 bytes @ 0x3D
   825  00003E                     	ds	2
   826  000040                     ?_sprintf:
   827                           	opt stack 0
   828  000040                     wait_in_ms@count:
   829                           	opt stack 0
   830  000040                     sprintf@sp:
   831                           	opt stack 0
   832                           
   833                           ; 2 bytes @ 0x3F
   834  000040                     	ds	2
   835  000042                     wait_in_ms@count_ms:
   836                           	opt stack 0
   837  000042                     sprintf@f:
   838                           	opt stack 0
   839                           
   840                           ; 2 bytes @ 0x41
   841  000042                     	ds	2
   842  000044                     lcd_orden@orden:
   843                           	opt stack 0
   844  000044                     lcd_caracter@caracter:
   845                           	opt stack 0
   846                           
   847                           ; 2 bytes @ 0x43
   848  000044                     	ds	2
   849  000046                     ??_lcd_orden:
   850  000046                     ??_lcd_caracter:
   851                           
   852                           ; 1 bytes @ 0x45
   853  000046                     	ds	2
   854  000048                     ??_sprintf:
   855                           
   856                           ; 1 bytes @ 0x47
   857  000048                     	ds	3
   858  00004B                     lcd_texto@cadena:
   859                           	opt stack 0
   860                           
   861                           ; 2 bytes @ 0x4A
   862  00004B                     	ds	2
   863  00004D                     ??_lcd_texto:
   864                           
   865                           ; 1 bytes @ 0x4C
   866  00004D                     	ds	1
   867  00004E                     ??_main:
   868                           
   869                           ; 1 bytes @ 0x4D
   870  00004E                     	ds	4
   871                           tblptru	equ	0xFF8
   872                           
   873 ;;
   874 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   875 ;;
   876 ;; *************** function _main *****************
   877 ;; Defined at:
   878 ;;		line 24 in file "comuni.c"
   879 ;; Parameters:    Size  Location     Type
   880 ;;		None
   881 ;; Auto vars:     Size  Location     Type
   882 ;;  frecuencia    120    0[BANK1 ] unsigned long [30]
   883 ;;  UwU            80  120[BANK1 ] unsigned long [20]
   884 ;;  dato1           4  215[BANK1 ] unsigned long 
   885 ;;  dato2           4  211[BANK1 ] unsigned long 
   886 ;;  dt              4  204[BANK1 ] unsigned long 
   887 ;;  periodo         4  200[BANK1 ] unsigned long 
   888 ;;  freq            3  208[BANK1 ] float 
   889 ;; Return value:  Size  Location     Type
   890 ;;                  1    wreg      void 
   891 ;; Registers used:
   892 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   893 ;; Tracked objects:
   894 ;;		On entry : 0/0
   895 ;;		On exit  : 0/0
   896 ;;		Unchanged: 0/0
   897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   898 ;;      Params:         0       0       0       0       0       0       0       0       0
   899 ;;      Locals:         0       0     219       0       0       0       0       0       0
   900 ;;      Temps:          4       0       0       0       0       0       0       0       0
   901 ;;      Totals:         4       0     219       0       0       0       0       0       0
   902 ;;Total ram usage:      223 bytes
   903 ;; Hardware stack levels required when called:    6
   904 ;; This function calls:
   905 ;;		___ftdiv
   906 ;;		___lltoft
   907 ;;		_configBoard
   908 ;;		_lcd_iniciar
   909 ;;		_lcd_limpiar
   910 ;;		_lcd_origen
   911 ;;		_lcd_texto
   912 ;;		_memset
   913 ;;		_sprintf
   914 ;; This function is called by:
   915 ;;		Startup code after reset
   916 ;; This function uses a non-reentrant model
   917 ;;
   918                           
   919                           	psect	text0
   920  001F3A                     __ptext0:
   921                           	opt stack 0
   922  001F3A                     _main:
   923                           	opt stack 25
   924                           
   925                           ;comuni.c: 26: OSCCON=0x72;
   926                           
   927                           ;incstack = 0
   928  001F3A  0E72               	movlw	114
   929  001F3C  6ED3               	movwf	4051,c	;volatile
   930                           
   931                           ;comuni.c: 28: configBoard();
   932  001F3E  EC11  F016         	call	_configBoard	;wreg free
   933                           
   934                           ;comuni.c: 29: lcd_iniciar();
   935  001F42  ECEA  F013         	call	_lcd_iniciar	;wreg free
   936                           
   937                           ;comuni.c: 31: unsigned long periodo;
   938                           ;comuni.c: 32: unsigned long dato1;
   939                           ;comuni.c: 33: unsigned long dato2;
   940                           ;comuni.c: 34: unsigned long dt;
   941                           ;comuni.c: 35: unsigned long frecuencia[30];
   942                           ;comuni.c: 36: unsigned long UwU[20];
   943                           ;comuni.c: 38: float freq;
   944                           ;comuni.c: 39: TRISC2=1;
   945  001F46  8494               	bsf	3988,2,c	;volatile
   946                           
   947                           ;comuni.c: 41: memset(frecuencia,0,30);
   948  001F48  0E00               	movlw	low main@frecuencia
   949  001F4A  6E01               	movwf	memset@p1,c
   950  001F4C  0E01               	movlw	high main@frecuencia
   951  001F4E  6E02               	movwf	memset@p1+1,c
   952  001F50  0E00               	movlw	0
   953  001F52  6E04               	movwf	memset@c+1,c
   954  001F54  0E00               	movlw	0
   955  001F56  6E03               	movwf	memset@c,c
   956  001F58  0E00               	movlw	0
   957  001F5A  6E06               	movwf	memset@n+1,c
   958  001F5C  0E1E               	movlw	30
   959  001F5E  6E05               	movwf	memset@n,c
   960  001F60  EC4D  F017         	call	_memset	;wreg free
   961                           
   962                           ;comuni.c: 44: PIE1bits.CCP1IE=1;
   963  001F64  849D               	bsf	3997,2,c	;volatile
   964                           
   965                           ;comuni.c: 45: PIR1bits.CCP1IF=0;
   966  001F66  949E               	bcf	3998,2,c	;volatile
   967                           
   968                           ;comuni.c: 46: CCP1CON=0x05;
   969  001F68  0E05               	movlw	5
   970  001F6A  6EBD               	movwf	4029,c	;volatile
   971                           
   972                           ;comuni.c: 47: CCPR1=0x00;
   973  001F6C  0E00               	movlw	0
   974  001F6E  6EBF               	movwf	4031,c	;volatile
   975  001F70  0E00               	movlw	0
   976  001F72  6EBE               	movwf	4030,c	;volatile
   977                           
   978                           ;comuni.c: 48: TMR1IF=0;
   979  001F74  909E               	bcf	3998,0,c	;volatile
   980                           
   981                           ;comuni.c: 49: T1CON=0x80;
   982  001F76  0E80               	movlw	128
   983  001F78  6ECD               	movwf	4045,c	;volatile
   984                           
   985                           ;comuni.c: 50: TMR1ON=1;
   986  001F7A  80CD               	bsf	4045,0,c	;volatile
   987  001F7C                     
   988                           ;comuni.c: 52: lcd_origen();
   989  001F7C  ECBC  F017         	call	_lcd_origen	;wreg free
   990  001F80  A49E               	btfss	3998,2,c	;volatile
   991  001F82  D7FE               	goto	l167
   992                           
   993                           ;comuni.c: 55: PIR1bits.CCP1IF=0;
   994  001F84  949E               	bcf	3998,2,c	;volatile
   995                           
   996                           ;comuni.c: 56: dato1 = CCPR1;
   997  001F86  CFBE F1D7          	movff	4030,main@dato1	;volatile
   998  001F8A  CFBF F1D8          	movff	4031,main@dato1+1	;volatile
   999  001F8E  0101               	movlb	1	; () banked
  1000  001F90  6BD9               	clrf	(main@dato1+2)& (0+255),b
  1001  001F92  6BDA               	clrf	(main@dato1+3)& (0+255),b
  1002                           
  1003                           ; BSR set to: 1
  1004                           ;comuni.c: 58: CCP1CON=0x04;
  1005  001F94  0E04               	movlw	4
  1006  001F96  6EBD               	movwf	4029,c	;volatile
  1007  001F98                     
  1008                           ; BSR set to: 1
  1009  001F98  A49E               	btfss	3998,2,c	;volatile
  1010  001F9A  D7FE               	goto	l170
  1011                           
  1012                           ;comuni.c: 60: PIR1bits.CCP1IF=0;
  1013  001F9C  949E               	bcf	3998,2,c	;volatile
  1014                           
  1015                           ;comuni.c: 61: dt = CCPR1;
  1016  001F9E  CFBE F1CC          	movff	4030,main@dt	;volatile
  1017  001FA2  CFBF F1CD          	movff	4031,main@dt+1	;volatile
  1018  001FA6  0101               	movlb	1	; () banked
  1019  001FA8  6BCE               	clrf	(main@dt+2)& (0+255),b
  1020  001FAA  6BCF               	clrf	(main@dt+3)& (0+255),b
  1021                           
  1022                           ; BSR set to: 1
  1023                           ;comuni.c: 63: CCP1CON=0x05;
  1024  001FAC  0E05               	movlw	5
  1025  001FAE  6EBD               	movwf	4029,c	;volatile
  1026  001FB0                     
  1027                           ; BSR set to: 1
  1028  001FB0  A49E               	btfss	3998,2,c	;volatile
  1029  001FB2  D7FE               	goto	l173
  1030                           
  1031                           ;comuni.c: 65: PIR1bits.CCP1IF=0;
  1032  001FB4  949E               	bcf	3998,2,c	;volatile
  1033                           
  1034                           ;comuni.c: 66: dato2 = CCPR1;
  1035  001FB6  CFBE F1D3          	movff	4030,main@dato2	;volatile
  1036  001FBA  CFBF F1D4          	movff	4031,main@dato2+1	;volatile
  1037  001FBE  0101               	movlb	1	; () banked
  1038  001FC0  6BD5               	clrf	(main@dato2+2)& (0+255),b
  1039  001FC2  6BD6               	clrf	(main@dato2+3)& (0+255),b
  1040                           
  1041                           ; BSR set to: 1
  1042                           ;comuni.c: 68: if(dato1 < dato2)
  1043  001FC4  51D3               	movf	main@dato2& (0+255),w,b
  1044  001FC6  5DD7               	subwf	main@dato1& (0+255),w,b
  1045  001FC8  51D4               	movf	(main@dato2+1)& (0+255),w,b
  1046  001FCA  59D8               	subwfb	(main@dato1+1)& (0+255),w,b
  1047  001FCC  51D5               	movf	(main@dato2+2)& (0+255),w,b
  1048  001FCE  59D9               	subwfb	(main@dato1+2)& (0+255),w,b
  1049  001FD0  51D6               	movf	(main@dato2+3)& (0+255),w,b
  1050  001FD2  59DA               	subwfb	(main@dato1+3)& (0+255),w,b
  1051  001FD4  B0D8               	btfsc	status,0,c
  1052  001FD6  D081               	goto	l175
  1053                           
  1054                           ; BSR set to: 1
  1055                           ;comuni.c: 69: {
  1056                           ;comuni.c: 72: periodo = dato2 - dato1;
  1057  001FD8  C1D7  F04E         	movff	main@dato1,??_main
  1058  001FDC  C1D8  F04F         	movff	main@dato1+1,??_main+1
  1059  001FE0  C1D9  F050         	movff	main@dato1+2,??_main+2
  1060  001FE4  C1DA  F051         	movff	main@dato1+3,??_main+3
  1061  001FE8  1E4E               	comf	??_main,f,c
  1062  001FEA  1E4F               	comf	??_main+1,f,c
  1063  001FEC  1E50               	comf	??_main+2,f,c
  1064  001FEE  1E51               	comf	??_main+3,f,c
  1065  001FF0  2A4E               	incf	??_main,f,c
  1066  001FF2  0E00               	movlw	0
  1067  001FF4  224F               	addwfc	??_main+1,f,c
  1068  001FF6  2250               	addwfc	??_main+2,f,c
  1069  001FF8  2251               	addwfc	??_main+3,f,c
  1070  001FFA  51D3               	movf	main@dato2& (0+255),w,b
  1071  001FFC  244E               	addwf	??_main,w,c
  1072  001FFE  6FC8               	movwf	main@periodo& (0+255),b
  1073  002000  51D4               	movf	(main@dato2+1)& (0+255),w,b
  1074  002002  204F               	addwfc	??_main+1,w,c
  1075  002004  6FC9               	movwf	(main@periodo+1)& (0+255),b
  1076  002006  51D5               	movf	(main@dato2+2)& (0+255),w,b
  1077  002008  2050               	addwfc	??_main+2,w,c
  1078  00200A  6FCA               	movwf	(main@periodo+2)& (0+255),b
  1079  00200C  51D6               	movf	(main@dato2+3)& (0+255),w,b
  1080  00200E  2051               	addwfc	??_main+3,w,c
  1081  002010  6FCB               	movwf	(main@periodo+3)& (0+255),b
  1082                           
  1083                           ; BSR set to: 1
  1084                           ;comuni.c: 73: freq = ((float)2000000 / (float)periodo);
  1085  002012  0E24               	movlw	36
  1086  002014  6E12               	movwf	___ftdiv@f1,c
  1087  002016  0EF4               	movlw	244
  1088  002018  6E13               	movwf	___ftdiv@f1+1,c
  1089  00201A  0E49               	movlw	73
  1090  00201C  6E14               	movwf	___ftdiv@f1+2,c
  1091  00201E  C1C8  F009         	movff	main@periodo,___lltoft@c
  1092  002022  C1C9  F00A         	movff	main@periodo+1,___lltoft@c+1
  1093  002026  C1CA  F00B         	movff	main@periodo+2,___lltoft@c+2
  1094  00202A  C1CB  F00C         	movff	main@periodo+3,___lltoft@c+3
  1095  00202E  ECE3  F016         	call	___lltoft	;wreg free
  1096  002032  C009  F015         	movff	?___lltoft,___ftdiv@f2
  1097  002036  C00A  F016         	movff	?___lltoft+1,___ftdiv@f2+1
  1098  00203A  C00B  F017         	movff	?___lltoft+2,___ftdiv@f2+2
  1099  00203E  EC77  F013         	call	___ftdiv	;wreg free
  1100  002042  C012  F1D0         	movff	?___ftdiv,main@freq
  1101  002046  C013  F1D1         	movff	?___ftdiv+1,main@freq+1
  1102  00204A  C014  F1D2         	movff	?___ftdiv+2,main@freq+2
  1103                           
  1104                           ;comuni.c: 74: sprintf(frecuencia,"%.1f Hz ",freq);
  1105  00204E  0E00               	movlw	low main@frecuencia
  1106  002050  6E40               	movwf	sprintf@sp,c
  1107  002052  0E01               	movlw	high main@frecuencia
  1108  002054  6E41               	movwf	sprintf@sp+1,c
  1109  002056  0EE9               	movlw	low STR_1
  1110  002058  6E42               	movwf	sprintf@f,c
  1111  00205A  0E08               	movlw	high STR_1
  1112  00205C  6E43               	movwf	sprintf@f+1,c
  1113  00205E  C1D0  F044         	movff	main@freq,?_sprintf+4
  1114  002062  C1D1  F045         	movff	main@freq+1,?_sprintf+5
  1115  002066  C1D2  F046         	movff	main@freq+2,?_sprintf+6
  1116  00206A  EC7E  F004         	call	_sprintf	;wreg free
  1117                           
  1118                           ;comuni.c: 75: lcd_limpiar();
  1119  00206E  ECC9  F017         	call	_lcd_limpiar	;wreg free
  1120                           
  1121                           ;comuni.c: 76: lcd_texto(frecuencia);
  1122  002072  0E00               	movlw	low main@frecuencia
  1123  002074  6E4B               	movwf	lcd_texto@cadena,c
  1124  002076  0E01               	movlw	high main@frecuencia
  1125  002078  6E4C               	movwf	lcd_texto@cadena+1,c
  1126  00207A  EC63  F017         	call	_lcd_texto	;wreg free
  1127                           
  1128                           ;comuni.c: 78: sprintf(UwU, "% % duty",dt-dato1);
  1129  00207E  0E78               	movlw	low main@UwU
  1130  002080  6E40               	movwf	sprintf@sp,c
  1131  002082  0E01               	movlw	high main@UwU
  1132  002084  6E41               	movwf	sprintf@sp+1,c
  1133  002086  0EF2               	movlw	low STR_2
  1134  002088  6E42               	movwf	sprintf@f,c
  1135  00208A  0E08               	movlw	high STR_2
  1136  00208C  6E43               	movwf	sprintf@f+1,c
  1137  00208E  C1D7  F04E         	movff	main@dato1,??_main
  1138  002092  C1D8  F04F         	movff	main@dato1+1,??_main+1
  1139  002096  C1D9  F050         	movff	main@dato1+2,??_main+2
  1140  00209A  C1DA  F051         	movff	main@dato1+3,??_main+3
  1141  00209E  1E4E               	comf	??_main,f,c
  1142  0020A0  1E4F               	comf	??_main+1,f,c
  1143  0020A2  1E50               	comf	??_main+2,f,c
  1144  0020A4  1E51               	comf	??_main+3,f,c
  1145  0020A6  2A4E               	incf	??_main,f,c
  1146  0020A8  0E00               	movlw	0
  1147  0020AA  224F               	addwfc	??_main+1,f,c
  1148  0020AC  2250               	addwfc	??_main+2,f,c
  1149  0020AE  2251               	addwfc	??_main+3,f,c
  1150  0020B0  0101               	movlb	1	; () banked
  1151  0020B2  51CC               	movf	main@dt& (0+255),w,b
  1152  0020B4  244E               	addwf	??_main,w,c
  1153  0020B6  6E44               	movwf	?_sprintf+4,c
  1154  0020B8  51CD               	movf	(main@dt+1)& (0+255),w,b
  1155  0020BA  204F               	addwfc	??_main+1,w,c
  1156  0020BC  6E45               	movwf	?_sprintf+5,c
  1157  0020BE  51CE               	movf	(main@dt+2)& (0+255),w,b
  1158  0020C0  2050               	addwfc	??_main+2,w,c
  1159  0020C2  6E46               	movwf	?_sprintf+6,c
  1160  0020C4  51CF               	movf	(main@dt+3)& (0+255),w,b
  1161  0020C6  2051               	addwfc	??_main+3,w,c
  1162  0020C8  6E47               	movwf	?_sprintf+7,c
  1163  0020CA  EC7E  F004         	call	_sprintf	;wreg free
  1164                           
  1165                           ;comuni.c: 80: lcd_texto(UwU);
  1166  0020CE  0E78               	movlw	low main@UwU
  1167  0020D0  6E4B               	movwf	lcd_texto@cadena,c
  1168  0020D2  0E01               	movlw	high main@UwU
  1169  0020D4  6E4C               	movwf	lcd_texto@cadena+1,c
  1170  0020D6  EC63  F017         	call	_lcd_texto	;wreg free
  1171  0020DA                     l175:
  1172                           
  1173                           ;comuni.c: 83: }
  1174                           ;comuni.c: 84: TMR1=0;
  1175  0020DA  0E00               	movlw	0
  1176  0020DC  6ECF               	movwf	4047,c	;volatile
  1177  0020DE  0E00               	movlw	0
  1178  0020E0  6ECE               	movwf	4046,c	;volatile
  1179                           
  1180                           ;comuni.c: 85: memset(frecuencia,0,30);
  1181  0020E2  0E00               	movlw	low main@frecuencia
  1182  0020E4  6E01               	movwf	memset@p1,c
  1183  0020E6  0E01               	movlw	high main@frecuencia
  1184  0020E8  6E02               	movwf	memset@p1+1,c
  1185  0020EA  0E00               	movlw	0
  1186  0020EC  6E04               	movwf	memset@c+1,c
  1187  0020EE  0E00               	movlw	0
  1188  0020F0  6E03               	movwf	memset@c,c
  1189  0020F2  0E00               	movlw	0
  1190  0020F4  6E06               	movwf	memset@n+1,c
  1191  0020F6  0E1E               	movlw	30
  1192  0020F8  6E05               	movwf	memset@n,c
  1193  0020FA  EC4D  F017         	call	_memset	;wreg free
  1194  0020FE  D73E               	goto	l165
  1195  002100                     __end_of_main:
  1196                           	opt stack 0
  1197                           tblptru	equ	0xFF8
  1198                           status	equ	0xFD8
  1199                           
  1200 ;; *************** function _sprintf *****************
  1201 ;; Defined at:
  1202 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  1203 ;; Parameters:    Size  Location     Type
  1204 ;;  sp              2   63[COMRAM] PTR unsigned char 
  1205 ;;		 -> main@UwU(80), main@frecuencia(120), 
  1206 ;;  f               2   65[COMRAM] PTR const unsigned char 
  1207 ;;		 -> STR_2(9), STR_1(9), 
  1208 ;; Auto vars:     Size  Location     Type
  1209 ;;  idx             1   15[BANK0 ] unsigned char 
  1210 ;;  val             4   29[BANK0 ] unsigned long 
  1211 ;;  tmpval          4   20[BANK0 ] struct .
  1212 ;;  fval            3   26[BANK0 ] struct .
  1213 ;;  flag            2   38[BANK0 ] unsigned short 
  1214 ;;  width           2   35[BANK0 ] int 
  1215 ;;  prec            2   33[BANK0 ] int 
  1216 ;;  exp             2   24[BANK0 ] int 
  1217 ;;  ap              2   18[BANK0 ] PTR void [1]
  1218 ;;		 -> ?_sprintf(2), 
  1219 ;;  len             2   16[BANK0 ] unsigned int 
  1220 ;;  cp              2    3[BANK0 ] PTR const unsigned char 
  1221 ;;		 -> sprintf@c(1), 
  1222 ;;  c               1   37[BANK0 ] char 
  1223 ;;  d               1    0        unsigned char 
  1224 ;; Return value:  Size  Location     Type
  1225 ;;                  2   63[COMRAM] int 
  1226 ;; Registers used:
  1227 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1228 ;; Tracked objects:
  1229 ;;		On entry : 0/0
  1230 ;;		On exit  : 0/0
  1231 ;;		Unchanged: 0/0
  1232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1233 ;;      Params:         8       0       0       0       0       0       0       0       0
  1234 ;;      Locals:         0      40       0       0       0       0       0       0       0
  1235 ;;      Temps:          6       0       0       0       0       0       0       0       0
  1236 ;;      Totals:        14      40       0       0       0       0       0       0       0
  1237 ;;Total ram usage:       54 bytes
  1238 ;; Hardware stack levels used:    1
  1239 ;; Hardware stack levels required when called:    3
  1240 ;; This function calls:
  1241 ;;		___awdiv
  1242 ;;		___ftadd
  1243 ;;		___ftge
  1244 ;;		___ftmul
  1245 ;;		___ftneg
  1246 ;;		___ftsub
  1247 ;;		___fttol
  1248 ;;		___lldiv
  1249 ;;		___llmod
  1250 ;;		___lltoft
  1251 ;;		___wmul
  1252 ;;		__div_to_l_
  1253 ;;		__tdiv_to_l_
  1254 ;;		_fround
  1255 ;;		_isdigit
  1256 ;;		_scale
  1257 ;; This function is called by:
  1258 ;;		_main
  1259 ;; This function uses a non-reentrant model
  1260 ;;
  1261                           
  1262                           	psect	text1
  1263  0008FC                     __ptext1:
  1264                           	opt stack 0
  1265  0008FC                     _sprintf:
  1266                           	opt stack 27
  1267                           
  1268                           ;doprnt.c: 494: va_list ap;
  1269                           ;doprnt.c: 499: signed char c;
  1270                           ;doprnt.c: 501: int width;
  1271                           ;doprnt.c: 504: int prec;
  1272                           ;doprnt.c: 508: unsigned short flag;
  1273                           ;doprnt.c: 515: char d;
  1274                           ;doprnt.c: 516: double fval;
  1275                           ;doprnt.c: 517: int exp;
  1276                           ;doprnt.c: 523: union {
  1277                           ;doprnt.c: 524: unsigned long vd;
  1278                           ;doprnt.c: 525: double integ;
  1279                           ;doprnt.c: 526: } tmpval;
  1280                           ;doprnt.c: 528: unsigned long val;
  1281                           ;doprnt.c: 529: unsigned len;
  1282                           ;doprnt.c: 530: const char * cp;
  1283                           ;doprnt.c: 533: *ap = __va_start();
  1284                           
  1285                           ;incstack = 0
  1286  0008FC  0E44               	movlw	low (?_sprintf+4)
  1287  0008FE  0100               	movlb	0	; () banked
  1288  000900  6F72               	movwf	sprintf@ap& (0+255),b
  1289  000902  0E00               	movlw	high (?_sprintf+4)
  1290  000904  6F73               	movwf	(sprintf@ap+1)& (0+255),b
  1291                           
  1292                           ;doprnt.c: 536: while(c = *f++) {
  1293  000906  EF5C  F00C         	goto	u4280
  1294  00090A                     
  1295                           ; BSR set to: 0
  1296                           ;doprnt.c: 538: if(c != '%')
  1297                           
  1298                           ; BSR set to: 0
  1299  00090A  0E25               	movlw	37
  1300  00090C  1985               	xorwf	sprintf@c& (0+255),w,b
  1301  00090E  B4D8               	btfsc	status,2,c
  1302  000910  D00A               	goto	l219
  1303                           
  1304                           ; BSR set to: 0
  1305                           ;doprnt.c: 540: {
  1306                           ;doprnt.c: 541: ((*sp++ = (c)));
  1307  000912  C040  FFD9         	movff	sprintf@sp,fsr2l
  1308  000916  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1309  00091A  C085  FFDF         	movff	sprintf@c,indf2
  1310                           
  1311                           ; BSR set to: 0
  1312  00091E  4A40               	infsnz	sprintf@sp,f,c
  1313  000920  2A41               	incf	sprintf@sp+1,f,c
  1314                           
  1315                           ;doprnt.c: 542: continue;
  1316  000922  EF5C  F00C         	goto	u4280
  1317  000926                     l219:
  1318                           
  1319                           ; BSR set to: 0
  1320                           ;doprnt.c: 543: }
  1321                           ;doprnt.c: 546: width = 0;
  1322                           
  1323                           ; BSR set to: 0
  1324  000926  0E00               	movlw	0
  1325  000928  6F84               	movwf	(sprintf@width+1)& (0+255),b
  1326  00092A  0E00               	movlw	0
  1327  00092C  6F83               	movwf	sprintf@width& (0+255),b
  1328                           
  1329                           ;doprnt.c: 548: flag = 0;
  1330  00092E  0E00               	movlw	0
  1331  000930  6F87               	movwf	(sprintf@flag+1)& (0+255),b
  1332  000932  0E00               	movlw	0
  1333  000934  6F86               	movwf	sprintf@flag& (0+255),b
  1334                           
  1335                           ; BSR set to: 0
  1336                           ;doprnt.c: 551: switch(*f) {
  1337                           
  1338                           ;doprnt.c: 550: for(;;) {
  1339  000936  D00D               	goto	l221
  1340  000938                     
  1341                           ;doprnt.c: 554: flag |= 0x08;
  1342                           
  1343                           ; BSR set to: 0
  1344  000938  0100               	movlb	0	; () banked
  1345  00093A  8786               	bsf	sprintf@flag& (0+255),3,b
  1346  00093C  D008               	goto	L3
  1347  00093E                     
  1348                           ;doprnt.c: 561: flag |= 0x01;
  1349                           
  1350                           ; BSR set to: 0
  1351  00093E  0100               	movlb	0	; () banked
  1352  000940  8186               	bsf	sprintf@flag& (0+255),0,b
  1353  000942  D005               	goto	L3
  1354  000944                     
  1355                           ;doprnt.c: 574: flag |= 0x800;
  1356                           
  1357                           ; BSR set to: 0
  1358  000944  0100               	movlb	0	; () banked
  1359  000946  8787               	bsf	(sprintf@flag+1)& (0+255),3,b
  1360  000948  D002               	goto	L3
  1361  00094A                     
  1362                           ;doprnt.c: 580: flag |= 0x04;
  1363                           
  1364                           ; BSR set to: 0
  1365  00094A  0100               	movlb	0	; () banked
  1366  00094C  8586               	bsf	sprintf@flag& (0+255),2,b
  1367  00094E                     L3:
  1368                           
  1369                           ;doprnt.c: 581: f++;
  1370  00094E  4A42               	infsnz	sprintf@f,f,c
  1371  000950  2A43               	incf	sprintf@f+1,f,c
  1372  000952                     l221:
  1373                           
  1374                           ; BSR set to: 0
  1375  000952  C042  FFF6         	movff	sprintf@f,tblptrl
  1376  000956  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1377  00095A                     	if	0	;tblptru may be non-zero
  1378  00095A                     	endif
  1379  00095A                     	if	0	;tblptru may be non-zero
  1380  00095A                     	endif
  1381  00095A  0008               	tblrd		*
  1382  00095C  50F5               	movf	tablat,w,c
  1383                           
  1384                           ; Switch size 1, requested type "space"
  1385                           ; Number of cases is 4, Range of values is 32 to 48
  1386                           ; switch strategies available:
  1387                           ; Name         Instructions Cycles
  1388                           ; simple_byte           13     7 (average)
  1389                           ;	Chosen strategy is simple_byte
  1390  00095E  0A20               	xorlw	32	; case 32
  1391  000960  B4D8               	btfsc	status,2,c
  1392  000962  D7ED               	goto	l224
  1393  000964  0A03               	xorlw	3	; case 35
  1394  000966  B4D8               	btfsc	status,2,c
  1395  000968  D7ED               	goto	l225
  1396  00096A  0A0E               	xorlw	14	; case 45
  1397  00096C  B4D8               	btfsc	status,2,c
  1398  00096E  D7E4               	goto	l222
  1399  000970  0A1D               	xorlw	29	; case 48
  1400  000972  B4D8               	btfsc	status,2,c
  1401  000974  D7EA               	goto	l226
  1402                           
  1403                           ;doprnt.c: 593: if(flag & 0x08)
  1404                           
  1405                           ;doprnt.c: 586: }
  1406                           
  1407                           ;doprnt.c: 585: break;
  1408  000976  0100               	movlb	0	; () banked
  1409  000978  B786               	btfsc	sprintf@flag& (0+255),3,b
  1410                           
  1411                           ; BSR set to: 0
  1412                           ;doprnt.c: 594: flag &= ~0x04;
  1413  00097A  9586               	bcf	sprintf@flag& (0+255),2,b
  1414                           
  1415                           ; BSR set to: 0
  1416                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1417                           
  1418                           ; BSR set to: 0
  1419  00097C  C042  FFF6         	movff	sprintf@f,tblptrl
  1420  000980  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1421  000984                     	if	0	;tblptru may be non-zero
  1422  000984                     	endif
  1423  000984                     	if	0	;tblptru may be non-zero
  1424  000984                     	endif
  1425  000984  0008               	tblrd		*
  1426  000986  50F5               	movf	tablat,w,c
  1427  000988  EC9E  F017         	call	_isdigit
  1428  00098C  A0D8               	btfss	status,0,c
  1429  00098E  D034               	goto	u3320
  1430                           
  1431                           ;doprnt.c: 598: width = 0;
  1432  000990  0E00               	movlw	0
  1433  000992  0100               	movlb	0	; () banked
  1434  000994  6F84               	movwf	(sprintf@width+1)& (0+255),b
  1435  000996  0E00               	movlw	0
  1436  000998  6F83               	movwf	sprintf@width& (0+255),b
  1437  00099A                     
  1438                           ;doprnt.c: 600: width *= 10;
  1439                           
  1440                           ; BSR set to: 0
  1441  00099A  C083  F00F         	movff	sprintf@width,___wmul@multiplier
  1442  00099E  C084  F010         	movff	sprintf@width+1,___wmul@multiplier+1
  1443  0009A2  0E00               	movlw	0
  1444  0009A4  6E12               	movwf	___wmul@multiplicand+1,c
  1445  0009A6  0E0A               	movlw	10
  1446  0009A8  6E11               	movwf	___wmul@multiplicand,c
  1447  0009AA  EC79  F017         	call	___wmul	;wreg free
  1448  0009AE  C00F  F083         	movff	?___wmul,sprintf@width
  1449  0009B2  C010  F084         	movff	?___wmul+1,sprintf@width+1
  1450                           
  1451                           ;doprnt.c: 601: width += *f++ - '0';
  1452  0009B6  0ED0               	movlw	208
  1453  0009B8  6E48               	movwf	??_sprintf& (0+255),c
  1454  0009BA  0EFF               	movlw	255
  1455  0009BC  6E49               	movwf	(??_sprintf+1)& (0+255),c
  1456  0009BE  C042  FFF6         	movff	sprintf@f,tblptrl
  1457  0009C2  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1458  0009C6                     	if	0	;tblptru may be non-zero
  1459  0009C6                     	endif
  1460  0009C6                     	if	0	;tblptru may be non-zero
  1461  0009C6                     	endif
  1462  0009C6  0008               	tblrd		*
  1463  0009C8  50F5               	movf	tablat,w,c
  1464  0009CA  6E4A               	movwf	(??_sprintf+2)& (0+255),c
  1465  0009CC  6A4B               	clrf	(??_sprintf+3)& (0+255),c
  1466  0009CE  5048               	movf	??_sprintf,w,c
  1467  0009D0  264A               	addwf	??_sprintf+2,f,c
  1468  0009D2  5049               	movf	??_sprintf+1,w,c
  1469  0009D4  224B               	addwfc	??_sprintf+3,f,c
  1470  0009D6  504A               	movf	??_sprintf+2,w,c
  1471  0009D8  0100               	movlb	0	; () banked
  1472  0009DA  2783               	addwf	sprintf@width& (0+255),f,b
  1473  0009DC  504B               	movf	??_sprintf+3,w,c
  1474  0009DE  2384               	addwfc	(sprintf@width+1)& (0+255),f,b
  1475                           
  1476                           ; BSR set to: 0
  1477  0009E0  4A42               	infsnz	sprintf@f,f,c
  1478  0009E2  2A43               	incf	sprintf@f+1,f,c
  1479                           
  1480                           ; BSR set to: 0
  1481                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1482  0009E4  C042  FFF6         	movff	sprintf@f,tblptrl
  1483  0009E8  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1484  0009EC                     	if	0	;tblptru may be non-zero
  1485  0009EC                     	endif
  1486  0009EC                     	if	0	;tblptru may be non-zero
  1487  0009EC                     	endif
  1488  0009EC  0008               	tblrd		*
  1489  0009EE  50F5               	movf	tablat,w,c
  1490  0009F0  EC9E  F017         	call	_isdigit
  1491  0009F4  B0D8               	btfsc	status,0,c
  1492  0009F6  D7D1               	goto	l231
  1493  0009F8                     u3320:
  1494                           
  1495                           ;doprnt.c: 608: }
  1496                           ;doprnt.c: 611: if(*f == '.') {
  1497  0009F8  C042  FFF6         	movff	sprintf@f,tblptrl
  1498  0009FC  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1499  000A00                     	if	0	;tblptru may be non-zero
  1500  000A00                     	endif
  1501  000A00                     	if	0	;tblptru may be non-zero
  1502  000A00                     	endif
  1503  000A00  0008               	tblrd		*
  1504  000A02  50F5               	movf	tablat,w,c
  1505  000A04  0A2E               	xorlw	46
  1506  000A06  A4D8               	btfss	status,2,c
  1507  000A08  D030               	goto	l233
  1508                           
  1509                           ;doprnt.c: 612: flag |= 0x4000;
  1510  000A0A  0100               	movlb	0	; () banked
  1511  000A0C  8D87               	bsf	(sprintf@flag+1)& (0+255),6,b
  1512                           
  1513                           ;doprnt.c: 613: f++;
  1514  000A0E  4A42               	infsnz	sprintf@f,f,c
  1515  000A10  2A43               	incf	sprintf@f+1,f,c
  1516                           
  1517                           ; BSR set to: 0
  1518                           ;doprnt.c: 620: {
  1519                           ;doprnt.c: 621: prec = 0;
  1520  000A12  0E00               	movlw	0
  1521  000A14  6F82               	movwf	(sprintf@prec+1)& (0+255),b
  1522  000A16  0E00               	movlw	0
  1523  000A18  6F81               	movwf	sprintf@prec& (0+255),b
  1524                           
  1525                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1526  000A1A  D01C               	goto	l234
  1527  000A1C                     
  1528                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1529                           
  1530                           ; BSR set to: 0
  1531  000A1C  C081  F00F         	movff	sprintf@prec,___wmul@multiplier
  1532  000A20  C082  F010         	movff	sprintf@prec+1,___wmul@multiplier+1
  1533  000A24  0E00               	movlw	0
  1534  000A26  6E12               	movwf	___wmul@multiplicand+1,c
  1535  000A28  0E0A               	movlw	10
  1536  000A2A  6E11               	movwf	___wmul@multiplicand,c
  1537  000A2C  EC79  F017         	call	___wmul	;wreg free
  1538  000A30  C042  FFF6         	movff	sprintf@f,tblptrl
  1539  000A34  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1540  000A38                     	if	0	;tblptru may be non-zero
  1541  000A38                     	endif
  1542  000A38                     	if	0	;tblptru may be non-zero
  1543  000A38                     	endif
  1544  000A38  0008               	tblrd		*
  1545  000A3A  50F5               	movf	tablat,w,c
  1546  000A3C  260F               	addwf	?___wmul,f,c
  1547  000A3E  0E00               	movlw	0
  1548  000A40  2210               	addwfc	?___wmul+1,f,c
  1549  000A42  0ED0               	movlw	208
  1550  000A44  240F               	addwf	?___wmul,w,c
  1551  000A46  0100               	movlb	0	; () banked
  1552  000A48  6F81               	movwf	sprintf@prec& (0+255),b
  1553  000A4A  0EFF               	movlw	255
  1554  000A4C  2010               	addwfc	?___wmul+1,w,c
  1555  000A4E  6F82               	movwf	(sprintf@prec+1)& (0+255),b
  1556                           
  1557                           ; BSR set to: 0
  1558  000A50  4A42               	infsnz	sprintf@f,f,c
  1559  000A52  2A43               	incf	sprintf@f+1,f,c
  1560  000A54                     l234:
  1561                           
  1562                           ; BSR set to: 0
  1563                           
  1564                           ; BSR set to: 0
  1565  000A54  C042  FFF6         	movff	sprintf@f,tblptrl
  1566  000A58  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1567  000A5C                     	if	0	;tblptru may be non-zero
  1568  000A5C                     	endif
  1569  000A5C                     	if	0	;tblptru may be non-zero
  1570  000A5C                     	endif
  1571  000A5C  0008               	tblrd		*
  1572  000A5E  50F5               	movf	tablat,w,c
  1573  000A60  EC9E  F017         	call	_isdigit
  1574  000A64  A0D8               	btfss	status,0,c
  1575  000A66  D07A               	goto	l239
  1576  000A68  D7D9               	goto	l235
  1577  000A6A                     l233:
  1578                           
  1579                           ;doprnt.c: 626: prec = 0;
  1580  000A6A  0E00               	movlw	0
  1581  000A6C  0100               	movlb	0	; () banked
  1582  000A6E  6F82               	movwf	(sprintf@prec+1)& (0+255),b
  1583  000A70  0E00               	movlw	0
  1584  000A72  6F81               	movwf	sprintf@prec& (0+255),b
  1585                           
  1586                           ; BSR set to: 0
  1587                           ;doprnt.c: 628: flag |= 0x1000;
  1588  000A74  8987               	bsf	(sprintf@flag+1)& (0+255),4,b
  1589                           
  1590                           ; BSR set to: 0
  1591                           ;doprnt.c: 635: switch(c = *f++) {
  1592                           
  1593                           ;doprnt.c: 630: }
  1594                           ;doprnt.c: 633: loop:
  1595                           
  1596                           ; BSR set to: 0
  1597  000A76  D072               	goto	l239
  1598  000A78                     
  1599                           ; BSR set to: 0
  1600                           ;doprnt.c: 643: flag |= 0x10;
  1601                           
  1602                           ; BSR set to: 0
  1603  000A78  8986               	bsf	sprintf@flag& (0+255),4,b
  1604                           
  1605                           ;doprnt.c: 644: goto loop;
  1606  000A7A  D070               	goto	l239
  1607  000A7C                     
  1608                           ; BSR set to: 0
  1609                           ;doprnt.c: 663: flag |= 0x400;
  1610                           
  1611                           ; BSR set to: 0
  1612  000A7C  8587               	bsf	(sprintf@flag+1)& (0+255),2,b
  1613                           
  1614                           ;doprnt.c: 664: break;
  1615  000A7E  D096               	goto	l244
  1616  000A80                     
  1617                           ; BSR set to: 0
  1618                           ;doprnt.c: 691: flag |= 0x40;
  1619                           
  1620                           ; BSR set to: 0
  1621  000A80  8D86               	bsf	sprintf@flag& (0+255),6,b
  1622                           
  1623                           ; BSR set to: 0
  1624                           ;doprnt.c: 698: case 'i':
  1625                           ;doprnt.c: 699: break;
  1626                           
  1627                           ; BSR set to: 0
  1628                           
  1629                           ;doprnt.c: 697: case 'd':
  1630                           
  1631                           ;doprnt.c: 693: break;
  1632  000A82  D094               	goto	l244
  1633  000A84                     
  1634                           ; BSR set to: 0
  1635                           ;doprnt.c: 714: flag |= 0x20;
  1636                           
  1637                           ; BSR set to: 0
  1638  000A84  8B86               	bsf	sprintf@flag& (0+255),5,b
  1639  000A86                     l249:
  1640                           
  1641                           ; BSR set to: 0
  1642                           ;doprnt.c: 721: flag |= 0x80;
  1643  000A86  8F86               	bsf	sprintf@flag& (0+255),7,b
  1644                           
  1645                           ;doprnt.c: 723: break;
  1646  000A88  D091               	goto	l244
  1647  000A8A                     
  1648                           ; BSR set to: 0
  1649                           ;doprnt.c: 753: if(prec && prec < len)
  1650                           
  1651                           ; BSR set to: 0
  1652  000A8A  5181               	movf	sprintf@prec& (0+255),w,b
  1653  000A8C  1182               	iorwf	(sprintf@prec+1)& (0+255),w,b
  1654  000A8E  B4D8               	btfsc	status,2,c
  1655  000A90  D00A               	goto	l251
  1656                           
  1657                           ; BSR set to: 0
  1658  000A92  5170               	movf	sprintf@len& (0+255),w,b
  1659  000A94  5D81               	subwf	sprintf@prec& (0+255),w,b
  1660  000A96  5171               	movf	(sprintf@len+1)& (0+255),w,b
  1661  000A98  5982               	subwfb	(sprintf@prec+1)& (0+255),w,b
  1662  000A9A  B0D8               	btfsc	status,0,c
  1663  000A9C  D004               	goto	l251
  1664                           
  1665                           ; BSR set to: 0
  1666                           ;doprnt.c: 754: len = prec;
  1667  000A9E  C081  F070         	movff	sprintf@prec,sprintf@len
  1668  000AA2  C082  F071         	movff	sprintf@prec+1,sprintf@len+1
  1669  000AA6                     l251:
  1670                           
  1671                           ; BSR set to: 0
  1672                           ;doprnt.c: 757: if(width > len)
  1673                           
  1674                           ; BSR set to: 0
  1675  000AA6  5183               	movf	sprintf@width& (0+255),w,b
  1676  000AA8  5D70               	subwf	sprintf@len& (0+255),w,b
  1677  000AAA  5184               	movf	(sprintf@width+1)& (0+255),w,b
  1678  000AAC  5971               	subwfb	(sprintf@len+1)& (0+255),w,b
  1679  000AAE  B0D8               	btfsc	status,0,c
  1680  000AB0  D005               	goto	l252
  1681                           
  1682                           ; BSR set to: 0
  1683                           ;doprnt.c: 758: width -= len;
  1684  000AB2  5170               	movf	sprintf@len& (0+255),w,b
  1685  000AB4  5F83               	subwf	sprintf@width& (0+255),f,b
  1686  000AB6  5171               	movf	(sprintf@len+1)& (0+255),w,b
  1687  000AB8  5B84               	subwfb	(sprintf@width+1)& (0+255),f,b
  1688  000ABA  D004               	goto	l253
  1689  000ABC                     l252:
  1690                           
  1691                           ; BSR set to: 0
  1692                           ;doprnt.c: 759: else
  1693                           ;doprnt.c: 760: width = 0;
  1694                           
  1695                           ; BSR set to: 0
  1696  000ABC  0E00               	movlw	0
  1697  000ABE  6F84               	movwf	(sprintf@width+1)& (0+255),b
  1698  000AC0  0E00               	movlw	0
  1699  000AC2  6F83               	movwf	sprintf@width& (0+255),b
  1700  000AC4                     l253:
  1701                           
  1702                           ; BSR set to: 0
  1703                           ;doprnt.c: 762: if(!(flag & 0x08))
  1704                           
  1705                           ; BSR set to: 0
  1706  000AC4  A786               	btfss	sprintf@flag& (0+255),3,b
  1707  000AC6  D009               	goto	l255
  1708  000AC8  D01F               	goto	l258
  1709  000ACA                     l3322:
  1710                           
  1711                           ; BSR set to: 0
  1712                           ;doprnt.c: 765: ((*sp++ = (' ')));
  1713  000ACA  C040  FFD9         	movff	sprintf@sp,fsr2l
  1714  000ACE  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1715  000AD2  0E20               	movlw	32
  1716  000AD4  6EDF               	movwf	indf2,c
  1717                           
  1718                           ; BSR set to: 0
  1719  000AD6  4A40               	infsnz	sprintf@sp,f,c
  1720  000AD8  2A41               	incf	sprintf@sp+1,f,c
  1721  000ADA                     l255:
  1722                           
  1723                           ; BSR set to: 0
  1724                           
  1725                           ; BSR set to: 0
  1726  000ADA  0783               	decf	sprintf@width& (0+255),f,b
  1727  000ADC  A0D8               	btfss	status,0,c
  1728  000ADE  0784               	decf	(sprintf@width+1)& (0+255),f,b
  1729  000AE0  2983               	incf	sprintf@width& (0+255),w,b
  1730  000AE2  E1F3               	bnz	l3322
  1731  000AE4  2984               	incf	(sprintf@width+1)& (0+255),w,b
  1732  000AE6  B4D8               	btfsc	status,2,c
  1733  000AE8  D00F               	goto	l258
  1734  000AEA  D7EF               	goto	l256
  1735  000AEC                     l3328:
  1736                           
  1737                           ; BSR set to: 0
  1738                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  1739  000AEC  C063  FFD9         	movff	sprintf@cp,fsr2l
  1740  000AF0  C064  FFDA         	movff	sprintf@cp+1,fsr2h
  1741  000AF4  C040  FFE1         	movff	sprintf@sp,fsr1l
  1742  000AF8  C041  FFE2         	movff	sprintf@sp+1,fsr1h
  1743  000AFC  CFDF FFE7          	movff	indf2,indf1
  1744                           
  1745                           ; BSR set to: 0
  1746  000B00  4B63               	infsnz	sprintf@cp& (0+255),f,b
  1747  000B02  2B64               	incf	(sprintf@cp+1)& (0+255),f,b
  1748                           
  1749                           ; BSR set to: 0
  1750  000B04  4A40               	infsnz	sprintf@sp,f,c
  1751  000B06  2A41               	incf	sprintf@sp+1,f,c
  1752  000B08                     l258:
  1753                           
  1754                           ; BSR set to: 0
  1755                           
  1756                           ; BSR set to: 0
  1757  000B08  0770               	decf	sprintf@len& (0+255),f,b
  1758  000B0A  A0D8               	btfss	status,0,c
  1759  000B0C  0771               	decf	(sprintf@len+1)& (0+255),f,b
  1760  000B0E  2970               	incf	sprintf@len& (0+255),w,b
  1761  000B10  E1ED               	bnz	l3328
  1762  000B12  2971               	incf	(sprintf@len+1)& (0+255),w,b
  1763  000B14  A4D8               	btfss	status,2,c
  1764  000B16  D7EA               	goto	l259
  1765                           
  1766                           ; BSR set to: 0
  1767                           ;doprnt.c: 770: if(flag & 0x08)
  1768  000B18  B786               	btfsc	sprintf@flag& (0+255),3,b
  1769  000B1A  D00A               	goto	l262
  1770  000B1C  EF5C  F00C         	goto	u4280
  1771  000B20                     l3338:
  1772                           
  1773                           ; BSR set to: 0
  1774                           ;doprnt.c: 772: ((*sp++ = (' ')));
  1775  000B20  C040  FFD9         	movff	sprintf@sp,fsr2l
  1776  000B24  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1777  000B28  0E20               	movlw	32
  1778  000B2A  6EDF               	movwf	indf2,c
  1779                           
  1780                           ; BSR set to: 0
  1781  000B2C  4A40               	infsnz	sprintf@sp,f,c
  1782  000B2E  2A41               	incf	sprintf@sp+1,f,c
  1783  000B30                     l262:
  1784                           
  1785                           ; BSR set to: 0
  1786                           
  1787                           ; BSR set to: 0
  1788  000B30  0783               	decf	sprintf@width& (0+255),f,b
  1789  000B32  A0D8               	btfss	status,0,c
  1790  000B34  0784               	decf	(sprintf@width+1)& (0+255),f,b
  1791  000B36  2983               	incf	sprintf@width& (0+255),w,b
  1792  000B38  E1F3               	bnz	l3338
  1793  000B3A  2984               	incf	(sprintf@width+1)& (0+255),w,b
  1794  000B3C  B4D8               	btfsc	status,2,c
  1795  000B3E  EF5C  F00C         	goto	u4280
  1796  000B42  D7EE               	goto	l263
  1797  000B44                     
  1798                           ; BSR set to: 0
  1799                           ;doprnt.c: 805: cp = (char *)&c;
  1800                           
  1801                           ; BSR set to: 0
  1802  000B44  0E85               	movlw	low sprintf@c
  1803  000B46  6F63               	movwf	sprintf@cp& (0+255),b
  1804  000B48  0E00               	movlw	high sprintf@c
  1805  000B4A  6F64               	movwf	(sprintf@cp+1)& (0+255),b
  1806                           
  1807                           ; BSR set to: 0
  1808                           ;doprnt.c: 806: len = 1;
  1809  000B4C  0E00               	movlw	0
  1810  000B4E  6F71               	movwf	(sprintf@len+1)& (0+255),b
  1811  000B50  0E01               	movlw	1
  1812  000B52  6F70               	movwf	sprintf@len& (0+255),b
  1813                           
  1814                           ;doprnt.c: 807: goto dostring;
  1815  000B54  D79A               	goto	l250
  1816  000B56                     
  1817                           ; BSR set to: 0
  1818                           ;doprnt.c: 818: flag |= 0xC0;
  1819                           
  1820                           ; BSR set to: 0
  1821  000B56  0EC0               	movlw	192
  1822  000B58  1386               	iorwf	sprintf@flag& (0+255),f,b
  1823                           
  1824                           ; BSR set to: 0
  1825                           ;doprnt.c: 822: }
  1826                           
  1827                           ;doprnt.c: 819: break;
  1828  000B5A  D028               	goto	l244
  1829  000B5C                     l239:
  1830                           
  1831                           ; BSR set to: 0
  1832  000B5C  C042  FFF6         	movff	sprintf@f,tblptrl
  1833  000B60  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1834  000B64  4A42               	infsnz	sprintf@f,f,c
  1835  000B66  2A43               	incf	sprintf@f+1,f,c
  1836  000B68                     	if	0	;tblptru may be non-zero
  1837  000B68                     	endif
  1838  000B68                     	if	0	;tblptru may be non-zero
  1839  000B68                     	endif
  1840  000B68  0008               	tblrd		*
  1841  000B6A  CFF5 F085          	movff	tablat,sprintf@c
  1842  000B6E  0100               	movlb	0	; () banked
  1843  000B70  5185               	movf	sprintf@c& (0+255),w,b
  1844                           
  1845                           ; Switch size 1, requested type "space"
  1846                           ; Number of cases is 9, Range of values is 0 to 120
  1847                           ; switch strategies available:
  1848                           ; Name         Instructions Cycles
  1849                           ; simple_byte           28    15 (average)
  1850                           ;	Chosen strategy is simple_byte
  1851  000B72  0A00               	xorlw	0	; case 0
  1852  000B74  B4D8               	btfsc	status,2,c
  1853  000B76  EF69  F00C         	goto	u4290
  1854  000B7A  0A58               	xorlw	88	; case 88
  1855  000B7C  B4D8               	btfsc	status,2,c
  1856  000B7E  D782               	goto	l248
  1857  000B80  0A3C               	xorlw	60	; case 100
  1858  000B82  B4D8               	btfsc	status,2,c
  1859  000B84  D013               	goto	l244
  1860  000B86  0A02               	xorlw	2	; case 102
  1861  000B88  B4D8               	btfsc	status,2,c
  1862  000B8A  D778               	goto	l243
  1863  000B8C  0A0F               	xorlw	15	; case 105
  1864  000B8E  B4D8               	btfsc	status,2,c
  1865  000B90  D00D               	goto	l244
  1866  000B92  0A05               	xorlw	5	; case 108
  1867  000B94  B4D8               	btfsc	status,2,c
  1868  000B96  D770               	goto	l242
  1869  000B98  0A03               	xorlw	3	; case 111
  1870  000B9A  B4D8               	btfsc	status,2,c
  1871  000B9C  D771               	goto	l245
  1872  000B9E  0A1A               	xorlw	26	; case 117
  1873  000BA0  B4D8               	btfsc	status,2,c
  1874  000BA2  D7D9               	goto	l266
  1875  000BA4  0A0D               	xorlw	13	; case 120
  1876  000BA6  B4D8               	btfsc	status,2,c
  1877  000BA8  D76E               	goto	l249
  1878  000BAA  D7CC               	goto	l265
  1879  000BAC                     l244:
  1880                           
  1881                           ; BSR set to: 0
  1882                           ;doprnt.c: 825: if(flag & (0x700)) {
  1883                           
  1884                           ; BSR set to: 0
  1885  000BAC  0E07               	movlw	7
  1886  000BAE  1587               	andwf	(sprintf@flag+1)& (0+255),w,b
  1887  000BB0  B4D8               	btfsc	status,2,c
  1888  000BB2  D36D               	goto	l267
  1889                           
  1890                           ; BSR set to: 0
  1891                           ;doprnt.c: 827: if(flag & 0x1000)
  1892  000BB4  A987               	btfss	(sprintf@flag+1)& (0+255),4,b
  1893  000BB6  D004               	goto	l268
  1894                           
  1895                           ; BSR set to: 0
  1896                           ;doprnt.c: 829: prec = 6;
  1897  000BB8  0E00               	movlw	0
  1898  000BBA  6F82               	movwf	(sprintf@prec+1)& (0+255),b
  1899  000BBC  0E06               	movlw	6
  1900  000BBE  6F81               	movwf	sprintf@prec& (0+255),b
  1901  000BC0                     l268:
  1902                           
  1903                           ; BSR set to: 0
  1904                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1905                           
  1906                           ; BSR set to: 0
  1907  000BC0  C072  FFD9         	movff	sprintf@ap,fsr2l
  1908  000BC4  C073  FFDA         	movff	sprintf@ap+1,fsr2h
  1909  000BC8  CFDE F07A          	movff	postinc2,sprintf@fval
  1910  000BCC  CFDE F07B          	movff	postinc2,sprintf@fval+1
  1911  000BD0  CFDD F07C          	movff	postdec2,sprintf@fval+2
  1912                           
  1913                           ; BSR set to: 0
  1914  000BD4  0E03               	movlw	3
  1915  000BD6  2772               	addwf	sprintf@ap& (0+255),f,b
  1916  000BD8  0E00               	movlw	0
  1917  000BDA  2373               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1918                           
  1919                           ; BSR set to: 0
  1920                           ;doprnt.c: 831: if(fval < 0.0) {
  1921  000BDC  AF7C               	btfss	(sprintf@fval+2)& (0+255),7,b
  1922  000BDE  D011               	goto	l269
  1923                           
  1924                           ; BSR set to: 0
  1925                           ;doprnt.c: 832: fval = -fval;
  1926  000BE0  C07A  F001         	movff	sprintf@fval,___ftneg@f1
  1927  000BE4  C07B  F002         	movff	sprintf@fval+1,___ftneg@f1+1
  1928  000BE8  C07C  F003         	movff	sprintf@fval+2,___ftneg@f1+2
  1929  000BEC  EC8C  F017         	call	___ftneg	;wreg free
  1930  000BF0  C001  F07A         	movff	?___ftneg,sprintf@fval
  1931  000BF4  C002  F07B         	movff	?___ftneg+1,sprintf@fval+1
  1932  000BF8  C003  F07C         	movff	?___ftneg+2,sprintf@fval+2
  1933                           
  1934                           ;doprnt.c: 833: flag |= 0x03;
  1935  000BFC  0E03               	movlw	3
  1936  000BFE  0100               	movlb	0	; () banked
  1937  000C00  1386               	iorwf	sprintf@flag& (0+255),f,b
  1938  000C02                     l269:
  1939                           
  1940                           ; BSR set to: 0
  1941                           ;doprnt.c: 834: }
  1942                           ;doprnt.c: 835: exp = 0;
  1943                           
  1944                           ; BSR set to: 0
  1945  000C02  0E00               	movlw	0
  1946  000C04  6F79               	movwf	(sprintf@exp+1)& (0+255),b
  1947  000C06  0E00               	movlw	0
  1948  000C08  6F78               	movwf	sprintf@exp& (0+255),b
  1949                           
  1950                           ; BSR set to: 0
  1951                           ;doprnt.c: 836: if( fval!=0) {
  1952  000C0A  517A               	movf	sprintf@fval& (0+255),w,b
  1953  000C0C  117B               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1954  000C0E  117C               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1955  000C10  B4D8               	btfsc	status,2,c
  1956  000C12  D086               	goto	l274
  1957                           
  1958                           ; BSR set to: 0
  1959                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1960  000C14  0E82               	movlw	130
  1961  000C16  6E48               	movwf	??_sprintf& (0+255),c
  1962  000C18  0EFF               	movlw	255
  1963  000C1A  6E49               	movwf	(??_sprintf+1)& (0+255),c
  1964  000C1C  C07A  F04A         	movff	sprintf@fval,??_sprintf+2
  1965  000C20  C07B  F04B         	movff	sprintf@fval+1,??_sprintf+3
  1966  000C24  C07C  F04C         	movff	sprintf@fval+2,??_sprintf+4
  1967  000C28  C07D  F04D         	movff	sprintf@fval+3,??_sprintf+5
  1968  000C2C  0E10               	movlw	16
  1969  000C2E  D005               	goto	u3470
  1970  000C30                     u3475:
  1971  000C30  90D8               	bcf	status,0,c
  1972  000C32  324D               	rrcf	??_sprintf+5,f,c
  1973  000C34  324C               	rrcf	??_sprintf+4,f,c
  1974  000C36  324B               	rrcf	??_sprintf+3,f,c
  1975  000C38  324A               	rrcf	??_sprintf+2,f,c
  1976  000C3A                     u3470:
  1977  000C3A  2EE8               	decfsz	wreg,f,c
  1978  000C3C  D7F9               	goto	u3475
  1979  000C3E  504A               	movf	??_sprintf+2,w,c
  1980  000C40  2448               	addwf	??_sprintf,w,c
  1981  000C42  6F78               	movwf	sprintf@exp& (0+255),b
  1982  000C44  0E00               	movlw	0
  1983  000C46  2049               	addwfc	??_sprintf+1,w,c
  1984  000C48  6F79               	movwf	(sprintf@exp+1)& (0+255),b
  1985                           
  1986                           ; BSR set to: 0
  1987                           ;doprnt.c: 838: exp--;
  1988  000C4A  0778               	decf	sprintf@exp& (0+255),f,b
  1989  000C4C  A0D8               	btfss	status,0,c
  1990  000C4E  0779               	decf	(sprintf@exp+1)& (0+255),f,b
  1991                           
  1992                           ; BSR set to: 0
  1993                           ;doprnt.c: 839: exp *= 3;
  1994  000C50  C078  F00F         	movff	sprintf@exp,___wmul@multiplier
  1995  000C54  C079  F010         	movff	sprintf@exp+1,___wmul@multiplier+1
  1996  000C58  0E00               	movlw	0
  1997  000C5A  6E12               	movwf	___wmul@multiplicand+1,c
  1998  000C5C  0E03               	movlw	3
  1999  000C5E  6E11               	movwf	___wmul@multiplicand,c
  2000  000C60  EC79  F017         	call	___wmul	;wreg free
  2001  000C64  C00F  F078         	movff	?___wmul,sprintf@exp
  2002  000C68  C010  F079         	movff	?___wmul+1,sprintf@exp+1
  2003                           
  2004                           ;doprnt.c: 840: exp /= 10;
  2005  000C6C  C078  F007         	movff	sprintf@exp,___awdiv@dividend
  2006  000C70  C079  F008         	movff	sprintf@exp+1,___awdiv@dividend+1
  2007  000C74  0E00               	movlw	0
  2008  000C76  6E0A               	movwf	___awdiv@divisor+1,c
  2009  000C78  0E0A               	movlw	10
  2010  000C7A  6E09               	movwf	___awdiv@divisor,c
  2011  000C7C  EC56  F015         	call	___awdiv	;wreg free
  2012  000C80  C007  F078         	movff	?___awdiv,sprintf@exp
  2013  000C84  C008  F079         	movff	?___awdiv+1,sprintf@exp+1
  2014                           
  2015                           ;doprnt.c: 841: if(exp < 0)
  2016  000C88  0100               	movlb	0	; () banked
  2017  000C8A  AF79               	btfss	(sprintf@exp+1)& (0+255),7,b
  2018  000C8C  D003               	goto	l271
  2019                           
  2020                           ; BSR set to: 0
  2021                           ;doprnt.c: 842: exp--;
  2022  000C8E  0778               	decf	sprintf@exp& (0+255),f,b
  2023  000C90  A0D8               	btfss	status,0,c
  2024  000C92  0779               	decf	(sprintf@exp+1)& (0+255),f,b
  2025  000C94                     l271:
  2026                           
  2027                           ; BSR set to: 0
  2028                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  2029                           
  2030                           ; BSR set to: 0
  2031  000C94  5178               	movf	sprintf@exp& (0+255),w,b
  2032  000C96  0800               	sublw	0
  2033  000C98  EC70  F00C         	call	_scale
  2034  000C9C  C024  F074         	movff	?_scale,sprintf@tmpval
  2035  000CA0  C025  F075         	movff	?_scale+1,sprintf@tmpval+1
  2036  000CA4  C026  F076         	movff	?_scale+2,sprintf@tmpval+2
  2037                           
  2038                           ;doprnt.c: 847: tmpval.integ *= fval;
  2039  000CA8  C074  F015         	movff	sprintf@tmpval,___ftmul@f1
  2040  000CAC  C075  F016         	movff	sprintf@tmpval+1,___ftmul@f1+1
  2041  000CB0  C076  F017         	movff	sprintf@tmpval+2,___ftmul@f1+2
  2042  000CB4  C07A  F018         	movff	sprintf@fval,___ftmul@f2
  2043  000CB8  C07B  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  2044  000CBC  C07C  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  2045  000CC0  EC83  F012         	call	___ftmul	;wreg free
  2046  000CC4  C015  F074         	movff	?___ftmul,sprintf@tmpval
  2047  000CC8  C016  F075         	movff	?___ftmul+1,sprintf@tmpval+1
  2048  000CCC  C017  F076         	movff	?___ftmul+2,sprintf@tmpval+2
  2049                           
  2050                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  2051  000CD0  C074  F001         	movff	sprintf@tmpval,___ftge@ff1
  2052  000CD4  C075  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2053  000CD8  C076  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2054  000CDC  0E00               	movlw	0
  2055  000CDE  6E04               	movwf	___ftge@ff2,c
  2056  000CE0  0E80               	movlw	128
  2057  000CE2  6E05               	movwf	___ftge@ff2+1,c
  2058  000CE4  0E3F               	movlw	63
  2059  000CE6  6E06               	movwf	___ftge@ff2+2,c
  2060  000CE8  EC0E  F015         	call	___ftge	;wreg free
  2061  000CEC  B0D8               	btfsc	status,0,c
  2062  000CEE  D005               	goto	l272
  2063                           
  2064                           ;doprnt.c: 849: exp--;
  2065  000CF0  0100               	movlb	0	; () banked
  2066  000CF2  0778               	decf	sprintf@exp& (0+255),f,b
  2067  000CF4  A0D8               	btfss	status,0,c
  2068  000CF6  0779               	decf	(sprintf@exp+1)& (0+255),f,b
  2069  000CF8  D013               	goto	l274
  2070  000CFA                     l272:
  2071                           
  2072                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  2073                           
  2074                           ; BSR set to: 0
  2075  000CFA  C074  F001         	movff	sprintf@tmpval,___ftge@ff1
  2076  000CFE  C075  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2077  000D02  C076  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2078  000D06  0E00               	movlw	0
  2079  000D08  6E04               	movwf	___ftge@ff2,c
  2080  000D0A  0E20               	movlw	32
  2081  000D0C  6E05               	movwf	___ftge@ff2+1,c
  2082  000D0E  0E41               	movlw	65
  2083  000D10  6E06               	movwf	___ftge@ff2+2,c
  2084  000D12  EC0E  F015         	call	___ftge	;wreg free
  2085  000D16  A0D8               	btfss	status,0,c
  2086  000D18  D003               	goto	l274
  2087                           
  2088                           ;doprnt.c: 851: exp++;
  2089  000D1A  0100               	movlb	0	; () banked
  2090  000D1C  4B78               	infsnz	sprintf@exp& (0+255),f,b
  2091  000D1E  2B79               	incf	(sprintf@exp+1)& (0+255),f,b
  2092  000D20                     l274:
  2093                           
  2094                           ;doprnt.c: 852: }
  2095                           ;doprnt.c: 1112: if(prec <= 12)
  2096                           
  2097                           ; BSR set to: 0
  2098                           
  2099                           ; BSR set to: 0
  2100                           
  2101                           ; BSR set to: 0
  2102  000D20  0100               	movlb	0	; () banked
  2103  000D22  BF82               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2104  000D24  D006               	goto	u3510
  2105  000D26  5182               	movf	(sprintf@prec+1)& (0+255),w,b
  2106  000D28  E11B               	bnz	l3402
  2107  000D2A  0E0D               	movlw	13
  2108  000D2C  5D81               	subwf	sprintf@prec& (0+255),w,b
  2109  000D2E  B0D8               	btfsc	status,0,c
  2110  000D30  D017               	goto	l275
  2111  000D32                     u3510:
  2112                           
  2113                           ; BSR set to: 0
  2114                           ;doprnt.c: 1113: fval += fround(prec);
  2115  000D32  C07A  F02E         	movff	sprintf@fval,___ftadd@f1
  2116  000D36  C07B  F02F         	movff	sprintf@fval+1,___ftadd@f1+1
  2117  000D3A  C07C  F030         	movff	sprintf@fval+2,___ftadd@f1+2
  2118  000D3E  5181               	movf	sprintf@prec& (0+255),w,b
  2119  000D40  EC74  F00E         	call	_fround
  2120  000D44  C024  F031         	movff	?_fround,___ftadd@f2
  2121  000D48  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  2122  000D4C  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  2123  000D50  EC80  F010         	call	___ftadd	;wreg free
  2124  000D54  C02E  F07A         	movff	?___ftadd,sprintf@fval
  2125  000D58  C02F  F07B         	movff	?___ftadd+1,sprintf@fval+1
  2126  000D5C  C030  F07C         	movff	?___ftadd+2,sprintf@fval+2
  2127  000D60                     l275:
  2128  000D60                     l3402:
  2129                           
  2130                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2131  000D60  0100               	movlb	0	; () banked
  2132  000D62  BF79               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2133  000D64  D006               	goto	u3520
  2134  000D66  5179               	movf	(sprintf@exp+1)& (0+255),w,b
  2135  000D68  E120               	bnz	l3410
  2136  000D6A  0E0A               	movlw	10
  2137  000D6C  5D78               	subwf	sprintf@exp& (0+255),w,b
  2138  000D6E  B0D8               	btfsc	status,0,c
  2139  000D70  D01C               	goto	u3550
  2140  000D72                     u3520:
  2141                           
  2142                           ; BSR set to: 0
  2143  000D72  517A               	movf	sprintf@fval& (0+255),w,b
  2144  000D74  117B               	iorwf	(sprintf@fval+1)& (0+255),w,b
  2145  000D76  117C               	iorwf	(sprintf@fval+2)& (0+255),w,b
  2146  000D78  B4D8               	btfsc	status,2,c
  2147  000D7A  D056               	goto	l276
  2148                           
  2149                           ; BSR set to: 0
  2150  000D7C  C07A  F02B         	movff	sprintf@fval,___fttol@f1
  2151  000D80  C07B  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  2152  000D84  C07C  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  2153  000D88  ECFD  F012         	call	___fttol	;wreg free
  2154  000D8C  502B               	movf	?___fttol,w,c
  2155  000D8E  102C               	iorwf	?___fttol+1,w,c
  2156  000D90  102D               	iorwf	?___fttol+2,w,c
  2157  000D92  102E               	iorwf	?___fttol+3,w,c
  2158  000D94  A4D8               	btfss	status,2,c
  2159  000D96  D048               	goto	l276
  2160  000D98  0100               	movlb	0	; () banked
  2161  000D9A  BF79               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2162  000D9C  D045               	goto	l276
  2163  000D9E  5179               	movf	(sprintf@exp+1)& (0+255),w,b
  2164  000DA0  E104               	bnz	l3410
  2165  000DA2  0E02               	movlw	2
  2166  000DA4  5D78               	subwf	sprintf@exp& (0+255),w,b
  2167  000DA6  A0D8               	btfss	status,0,c
  2168  000DA8  D03F               	goto	l276
  2169  000DAA                     u3550:
  2170  000DAA                     l3410:
  2171                           
  2172                           ; BSR set to: 0
  2173                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2174  000DAA  C074  F001         	movff	sprintf@tmpval,___ftge@ff1
  2175  000DAE  C075  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2176  000DB2  C076  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2177  000DB6  0E70               	movlw	112
  2178  000DB8  6E04               	movwf	___ftge@ff2,c
  2179  000DBA  0E89               	movlw	137
  2180  000DBC  6E05               	movwf	___ftge@ff2+1,c
  2181  000DBE  0E40               	movlw	64
  2182  000DC0  6E06               	movwf	___ftge@ff2+2,c
  2183  000DC2  EC0E  F015         	call	___ftge	;wreg free
  2184  000DC6  B0D8               	btfsc	status,0,c
  2185  000DC8  D003               	goto	l279
  2186                           
  2187                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2188  000DCA  0100               	movlb	0	; () banked
  2189  000DCC  0EF7               	movlw	247
  2190  000DCE  D002               	goto	L4
  2191  000DD0                     l279:
  2192                           
  2193                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2194                           
  2195                           ; BSR set to: 0
  2196  000DD0  0100               	movlb	0	; () banked
  2197  000DD2  0EF8               	movlw	248
  2198  000DD4                     L4:
  2199  000DD4  2778               	addwf	sprintf@exp& (0+255),f,b
  2200  000DD6  0EFF               	movlw	255
  2201  000DD8  2379               	addwfc	(sprintf@exp+1)& (0+255),f,b
  2202                           
  2203                           ; BSR set to: 0
  2204                           ;doprnt.c: 1124: }
  2205                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  2206                           
  2207                           ; BSR set to: 0
  2208  000DDA  5178               	movf	sprintf@exp& (0+255),w,b
  2209  000DDC  EC70  F00C         	call	_scale
  2210  000DE0  C024  F074         	movff	?_scale,sprintf@tmpval
  2211  000DE4  C025  F075         	movff	?_scale+1,sprintf@tmpval+1
  2212  000DE8  C026  F076         	movff	?_scale+2,sprintf@tmpval+2
  2213                           
  2214                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2215  000DEC  C07A  F001         	movff	sprintf@fval,__tdiv_to_l_@f1
  2216  000DF0  C07B  F002         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  2217  000DF4  C07C  F003         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  2218  000DF8  C074  F004         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  2219  000DFC  C075  F005         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  2220  000E00  C076  F006         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  2221  000E04  EC56  F011         	call	__tdiv_to_l_	;wreg free
  2222  000E08  C001  F07D         	movff	?__tdiv_to_l_,sprintf@val
  2223  000E0C  C002  F07E         	movff	?__tdiv_to_l_+1,sprintf@val+1
  2224  000E10  C003  F07F         	movff	?__tdiv_to_l_+2,sprintf@val+2
  2225  000E14  C004  F080         	movff	?__tdiv_to_l_+3,sprintf@val+3
  2226                           
  2227                           ;doprnt.c: 1129: fval = 0.0;
  2228  000E18  0E00               	movlw	0
  2229  000E1A  0100               	movlb	0	; () banked
  2230  000E1C  6F7A               	movwf	sprintf@fval& (0+255),b
  2231  000E1E  0E00               	movlw	0
  2232  000E20  6F7B               	movwf	(sprintf@fval+1)& (0+255),b
  2233  000E22  0E00               	movlw	0
  2234  000E24  6F7C               	movwf	(sprintf@fval+2)& (0+255),b
  2235                           
  2236                           ;doprnt.c: 1130: } else {
  2237  000E26  D033               	goto	l285
  2238  000E28                     l276:
  2239                           
  2240                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2241                           
  2242                           ; BSR set to: 0
  2243  000E28  C07A  F02B         	movff	sprintf@fval,___fttol@f1
  2244  000E2C  C07B  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  2245  000E30  C07C  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  2246  000E34  ECFD  F012         	call	___fttol	;wreg free
  2247  000E38  C02B  F07D         	movff	?___fttol,sprintf@val
  2248  000E3C  C02C  F07E         	movff	?___fttol+1,sprintf@val+1
  2249  000E40  C02D  F07F         	movff	?___fttol+2,sprintf@val+2
  2250  000E44  C02E  F080         	movff	?___fttol+3,sprintf@val+3
  2251                           
  2252                           ;doprnt.c: 1132: fval -= (double)val;
  2253  000E48  C07A  F03A         	movff	sprintf@fval,___ftsub@f1
  2254  000E4C  C07B  F03B         	movff	sprintf@fval+1,___ftsub@f1+1
  2255  000E50  C07C  F03C         	movff	sprintf@fval+2,___ftsub@f1+2
  2256  000E54  C07D  F009         	movff	sprintf@val,___lltoft@c
  2257  000E58  C07E  F00A         	movff	sprintf@val+1,___lltoft@c+1
  2258  000E5C  C07F  F00B         	movff	sprintf@val+2,___lltoft@c+2
  2259  000E60  C080  F00C         	movff	sprintf@val+3,___lltoft@c+3
  2260  000E64  ECE3  F016         	call	___lltoft	;wreg free
  2261  000E68  C009  F03D         	movff	?___lltoft,___ftsub@f2
  2262  000E6C  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  2263  000E70  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  2264  000E74  EC11  F017         	call	___ftsub	;wreg free
  2265  000E78  C03A  F07A         	movff	?___ftsub,sprintf@fval
  2266  000E7C  C03B  F07B         	movff	?___ftsub+1,sprintf@fval+1
  2267  000E80  C03C  F07C         	movff	?___ftsub+2,sprintf@fval+2
  2268                           
  2269                           ;doprnt.c: 1133: exp = 0;
  2270  000E84  0E00               	movlw	0
  2271  000E86  0100               	movlb	0	; () banked
  2272  000E88  6F79               	movwf	(sprintf@exp+1)& (0+255),b
  2273  000E8A  0E00               	movlw	0
  2274  000E8C  6F78               	movwf	sprintf@exp& (0+255),b
  2275  000E8E                     l285:
  2276                           
  2277                           ; BSR set to: 0
  2278                           ;doprnt.c: 1134: }
  2279                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2280                           
  2281                           ; BSR set to: 0
  2282  000E8E  0E01               	movlw	1
  2283  000E90  6F85               	movwf	sprintf@c& (0+255),b
  2284  000E92                     l3430:
  2285                           
  2286                           ; BSR set to: 0
  2287  000E92  0E0A               	movlw	10
  2288  000E94  1985               	xorwf	sprintf@c& (0+255),w,b
  2289  000E96  B4D8               	btfsc	status,2,c
  2290  000E98  D018               	goto	u3590
  2291                           
  2292                           ; BSR set to: 0
  2293                           ;doprnt.c: 1137: if(val < dpowers[c])
  2294                           
  2295                           ; BSR set to: 0
  2296                           
  2297                           ; BSR set to: 0
  2298  000E9A  5185               	movf	sprintf@c& (0+255),w,b
  2299  000E9C  0D04               	mullw	4
  2300  000E9E  0E31               	movlw	low _dpowers
  2301  000EA0  24F3               	addwf	prodl,w,c
  2302  000EA2  6EF6               	movwf	tblptrl,c
  2303  000EA4  0E08               	movlw	high _dpowers
  2304  000EA6  20F4               	addwfc	prodh,w,c
  2305  000EA8  6EF7               	movwf	tblptrh,c
  2306  000EAA                     	if	0	;There are less than 3 active tblptr bytes
  2307  000EAA                     	endif
  2308  000EAA  0009               	tblrd		*+
  2309  000EAC  50F5               	movf	tablat,w,c
  2310  000EAE  5D7D               	subwf	sprintf@val& (0+255),w,b
  2311  000EB0  0009               	tblrd		*+
  2312  000EB2  50F5               	movf	tablat,w,c
  2313  000EB4  597E               	subwfb	(sprintf@val+1)& (0+255),w,b
  2314  000EB6  0009               	tblrd		*+
  2315  000EB8  50F5               	movf	tablat,w,c
  2316  000EBA  597F               	subwfb	(sprintf@val+2)& (0+255),w,b
  2317  000EBC  0009               	tblrd		*+
  2318  000EBE  50F5               	movf	tablat,w,c
  2319  000EC0  5980               	subwfb	(sprintf@val+3)& (0+255),w,b
  2320  000EC2  A0D8               	btfss	status,0,c
  2321  000EC4  D002               	goto	u3590
  2322                           
  2323                           ; BSR set to: 0
  2324                           
  2325                           ; BSR set to: 0
  2326                           
  2327                           ; BSR set to: 0
  2328                           ;doprnt.c: 1138: break;
  2329  000EC6  2B85               	incf	sprintf@c& (0+255),f,b
  2330  000EC8  D7E4               	goto	l3430
  2331  000ECA                     u3590:
  2332                           
  2333                           ; BSR set to: 0
  2334                           ;doprnt.c: 1142: width -= prec + c + exp;
  2335                           
  2336                           ; BSR set to: 0
  2337  000ECA  C085  F048         	movff	sprintf@c,??_sprintf
  2338  000ECE  6A49               	clrf	(??_sprintf+1)& (0+255),c
  2339  000ED0  BE48               	btfsc	??_sprintf& (0+255),7,c
  2340  000ED2  0649               	decf	(??_sprintf+1)& (0+255),f,c
  2341  000ED4  5181               	movf	sprintf@prec& (0+255),w,b
  2342  000ED6  2648               	addwf	??_sprintf,f,c
  2343  000ED8  5182               	movf	(sprintf@prec+1)& (0+255),w,b
  2344  000EDA  2249               	addwfc	??_sprintf+1,f,c
  2345  000EDC  5178               	movf	sprintf@exp& (0+255),w,b
  2346  000EDE  2648               	addwf	??_sprintf,f,c
  2347  000EE0  5179               	movf	(sprintf@exp+1)& (0+255),w,b
  2348  000EE2  2249               	addwfc	??_sprintf+1,f,c
  2349  000EE4  5048               	movf	??_sprintf,w,c
  2350  000EE6  5F83               	subwf	sprintf@width& (0+255),f,b
  2351  000EE8  5049               	movf	??_sprintf+1,w,c
  2352  000EEA  5B84               	subwfb	(sprintf@width+1)& (0+255),f,b
  2353                           
  2354                           ; BSR set to: 0
  2355                           ;doprnt.c: 1143: if(
  2356                           ;doprnt.c: 1145: flag & 0x800 ||
  2357                           ;doprnt.c: 1147: prec)
  2358  000EEC  B787               	btfsc	(sprintf@flag+1)& (0+255),3,b
  2359  000EEE  D004               	goto	u3610
  2360                           
  2361                           ; BSR set to: 0
  2362  000EF0  5181               	movf	sprintf@prec& (0+255),w,b
  2363  000EF2  1182               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2364  000EF4  B4D8               	btfsc	status,2,c
  2365  000EF6  D003               	goto	l289
  2366  000EF8                     u3610:
  2367                           
  2368                           ; BSR set to: 0
  2369                           ;doprnt.c: 1148: width--;
  2370                           
  2371                           ; BSR set to: 0
  2372  000EF8  0783               	decf	sprintf@width& (0+255),f,b
  2373  000EFA  A0D8               	btfss	status,0,c
  2374  000EFC  0784               	decf	(sprintf@width+1)& (0+255),f,b
  2375  000EFE                     l289:
  2376                           
  2377                           ; BSR set to: 0
  2378                           ;doprnt.c: 1149: if(flag & 0x03)
  2379                           
  2380                           ; BSR set to: 0
  2381  000EFE  0E03               	movlw	3
  2382  000F00  1586               	andwf	sprintf@flag& (0+255),w,b
  2383  000F02  6E48               	movwf	??_sprintf& (0+255),c
  2384  000F04  0E00               	movlw	0
  2385  000F06  1587               	andwf	(sprintf@flag+1)& (0+255),w,b
  2386  000F08  6E49               	movwf	(??_sprintf+1)& (0+255),c
  2387  000F0A  5048               	movf	??_sprintf,w,c
  2388  000F0C  1049               	iorwf	??_sprintf+1,w,c
  2389  000F0E  B4D8               	btfsc	status,2,c
  2390  000F10  D003               	goto	l292
  2391                           
  2392                           ; BSR set to: 0
  2393                           ;doprnt.c: 1150: width--;
  2394  000F12  0783               	decf	sprintf@width& (0+255),f,b
  2395  000F14  A0D8               	btfss	status,0,c
  2396  000F16  0784               	decf	(sprintf@width+1)& (0+255),f,b
  2397  000F18                     l292:
  2398                           
  2399                           ; BSR set to: 0
  2400                           ;doprnt.c: 1153: if(flag & 0x04) {
  2401                           
  2402                           ; BSR set to: 0
  2403  000F18  A586               	btfss	sprintf@flag& (0+255),2,b
  2404  000F1A  D03A               	goto	l293
  2405                           
  2406                           ; BSR set to: 0
  2407                           ;doprnt.c: 1157: if(flag & 0x03)
  2408  000F1C  0E03               	movlw	3
  2409  000F1E  1586               	andwf	sprintf@flag& (0+255),w,b
  2410  000F20  6E48               	movwf	??_sprintf& (0+255),c
  2411  000F22  0E00               	movlw	0
  2412  000F24  1587               	andwf	(sprintf@flag+1)& (0+255),w,b
  2413  000F26  6E49               	movwf	(??_sprintf+1)& (0+255),c
  2414  000F28  5048               	movf	??_sprintf,w,c
  2415  000F2A  1049               	iorwf	??_sprintf+1,w,c
  2416  000F2C  B4D8               	btfsc	status,2,c
  2417  000F2E  D012               	goto	l294
  2418                           
  2419                           ; BSR set to: 0
  2420                           ;doprnt.c: 1159: ((*sp++ = (flag & 0x01 ? '-' : '+')));
  2421  000F30  B186               	btfsc	sprintf@flag& (0+255),0,b
  2422  000F32  D004               	goto	l296
  2423                           
  2424                           ; BSR set to: 0
  2425  000F34  0E00               	movlw	0
  2426  000F36  6F66               	movwf	(_sprintf$701+1)& (0+255),b
  2427  000F38  0E2B               	movlw	43
  2428  000F3A  D003               	goto	L5
  2429  000F3C                     l296:
  2430                           
  2431                           ; BSR set to: 0
  2432                           
  2433                           ; BSR set to: 0
  2434  000F3C  0E00               	movlw	0
  2435  000F3E  6F66               	movwf	(_sprintf$701+1)& (0+255),b
  2436  000F40  0E2D               	movlw	45
  2437  000F42                     L5:
  2438  000F42  6F65               	movwf	_sprintf$701& (0+255),b
  2439                           
  2440                           ; BSR set to: 0
  2441                           
  2442                           ; BSR set to: 0
  2443  000F44  C040  FFD9         	movff	sprintf@sp,fsr2l
  2444  000F48  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2445  000F4C  C065  FFDF         	movff	_sprintf$701,indf2
  2446                           
  2447                           ; BSR set to: 0
  2448  000F50  4A40               	infsnz	sprintf@sp,f,c
  2449  000F52  2A41               	incf	sprintf@sp+1,f,c
  2450  000F54                     l294:
  2451                           
  2452                           ; BSR set to: 0
  2453                           ;doprnt.c: 1164: if(flag & 0x01)
  2454                           
  2455                           ; BSR set to: 0
  2456  000F54  A186               	btfss	sprintf@flag& (0+255),0,b
  2457  000F56  D014               	goto	l300
  2458                           
  2459                           ; BSR set to: 0
  2460                           ;doprnt.c: 1165: ((*sp++ = (' ')));
  2461  000F58  C040  FFD9         	movff	sprintf@sp,fsr2l
  2462  000F5C  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2463  000F60  0E20               	movlw	32
  2464  000F62  6EDF               	movwf	indf2,c
  2465                           
  2466                           ; BSR set to: 0
  2467  000F64  4A40               	infsnz	sprintf@sp,f,c
  2468  000F66  2A41               	incf	sprintf@sp+1,f,c
  2469                           
  2470                           ; BSR set to: 0
  2471                           ;doprnt.c: 1168: while(width > 0) {
  2472  000F68  D00B               	goto	l300
  2473  000F6A                     l3474:
  2474                           
  2475                           ; BSR set to: 0
  2476                           ;doprnt.c: 1169: ((*sp++ = ('0')));
  2477  000F6A  C040  FFD9         	movff	sprintf@sp,fsr2l
  2478  000F6E  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2479  000F72  0E30               	movlw	48
  2480  000F74  6EDF               	movwf	indf2,c
  2481                           
  2482                           ; BSR set to: 0
  2483  000F76  4A40               	infsnz	sprintf@sp,f,c
  2484  000F78  2A41               	incf	sprintf@sp+1,f,c
  2485                           
  2486                           ; BSR set to: 0
  2487                           ;doprnt.c: 1170: width--;
  2488  000F7A  0783               	decf	sprintf@width& (0+255),f,b
  2489  000F7C  A0D8               	btfss	status,0,c
  2490  000F7E  0784               	decf	(sprintf@width+1)& (0+255),f,b
  2491  000F80                     l300:
  2492                           
  2493                           ; BSR set to: 0
  2494                           
  2495                           ; BSR set to: 0
  2496  000F80  BF84               	btfsc	(sprintf@width+1)& (0+255),7,b
  2497  000F82  D088               	goto	l315
  2498  000F84  5184               	movf	(sprintf@width+1)& (0+255),w,b
  2499  000F86  E1F1               	bnz	l3474
  2500  000F88  0583               	decf	sprintf@width& (0+255),w,b
  2501  000F8A  A0D8               	btfss	status,0,c
  2502  000F8C  D083               	goto	l315
  2503  000F8E  D7ED               	goto	l301
  2504  000F90                     l293:
  2505                           
  2506                           ; BSR set to: 0
  2507                           ;doprnt.c: 1175: {
  2508                           ;doprnt.c: 1177: if(!(flag & 0x08))
  2509  000F90  A786               	btfss	sprintf@flag& (0+255),3,b
  2510  000F92  D00C               	goto	l305
  2511  000F94  D012               	goto	u3690
  2512  000F96                     l3484:
  2513                           
  2514                           ; BSR set to: 0
  2515                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  2516  000F96  C040  FFD9         	movff	sprintf@sp,fsr2l
  2517  000F9A  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2518  000F9E  0E20               	movlw	32
  2519  000FA0  6EDF               	movwf	indf2,c
  2520                           
  2521                           ; BSR set to: 0
  2522  000FA2  4A40               	infsnz	sprintf@sp,f,c
  2523  000FA4  2A41               	incf	sprintf@sp+1,f,c
  2524                           
  2525                           ; BSR set to: 0
  2526                           ;doprnt.c: 1182: width--;
  2527  000FA6  0783               	decf	sprintf@width& (0+255),f,b
  2528  000FA8  A0D8               	btfss	status,0,c
  2529  000FAA  0784               	decf	(sprintf@width+1)& (0+255),f,b
  2530  000FAC                     l305:
  2531                           
  2532                           ; BSR set to: 0
  2533                           
  2534                           ; BSR set to: 0
  2535  000FAC  BF84               	btfsc	(sprintf@width+1)& (0+255),7,b
  2536  000FAE  D005               	goto	u3690
  2537  000FB0  5184               	movf	(sprintf@width+1)& (0+255),w,b
  2538  000FB2  E1F1               	bnz	l3484
  2539  000FB4  0583               	decf	sprintf@width& (0+255),w,b
  2540  000FB6  B0D8               	btfsc	status,0,c
  2541  000FB8  D7EE               	goto	l306
  2542  000FBA                     u3690:
  2543                           
  2544                           ; BSR set to: 0
  2545                           ;doprnt.c: 1183: }
  2546                           ;doprnt.c: 1188: if(flag & 0x03)
  2547                           
  2548                           ; BSR set to: 0
  2549                           
  2550                           ; BSR set to: 0
  2551  000FBA  0E03               	movlw	3
  2552  000FBC  1586               	andwf	sprintf@flag& (0+255),w,b
  2553  000FBE  6E48               	movwf	??_sprintf& (0+255),c
  2554  000FC0  0E00               	movlw	0
  2555  000FC2  1587               	andwf	(sprintf@flag+1)& (0+255),w,b
  2556  000FC4  6E49               	movwf	(??_sprintf+1)& (0+255),c
  2557  000FC6  5048               	movf	??_sprintf,w,c
  2558  000FC8  1049               	iorwf	??_sprintf+1,w,c
  2559  000FCA  B4D8               	btfsc	status,2,c
  2560  000FCC  D011               	goto	l308
  2561                           
  2562                           ; BSR set to: 0
  2563                           ;doprnt.c: 1190: ((*sp++ = (flag & 0x01 ? '-' : '+')));
  2564  000FCE  B186               	btfsc	sprintf@flag& (0+255),0,b
  2565  000FD0  D004               	goto	l310
  2566                           
  2567                           ; BSR set to: 0
  2568  000FD2  0E00               	movlw	0
  2569  000FD4  6F68               	movwf	(_sprintf$702+1)& (0+255),b
  2570  000FD6  0E2B               	movlw	43
  2571  000FD8  D003               	goto	L6
  2572  000FDA                     l310:
  2573                           
  2574                           ; BSR set to: 0
  2575                           
  2576                           ; BSR set to: 0
  2577  000FDA  0E00               	movlw	0
  2578  000FDC  6F68               	movwf	(_sprintf$702+1)& (0+255),b
  2579  000FDE  0E2D               	movlw	45
  2580  000FE0                     L6:
  2581  000FE0  6F67               	movwf	_sprintf$702& (0+255),b
  2582                           
  2583                           ; BSR set to: 0
  2584                           
  2585                           ; BSR set to: 0
  2586  000FE2  C040  FFD9         	movff	sprintf@sp,fsr2l
  2587  000FE6  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2588  000FEA  C067  FFDF         	movff	_sprintf$702,indf2
  2589  000FEE  D050               	goto	L16
  2590  000FF0                     l308:
  2591                           
  2592                           ; BSR set to: 0
  2593                           ;doprnt.c: 1192: else if(flag & 0x01)
  2594  000FF0  A186               	btfss	sprintf@flag& (0+255),0,b
  2595  000FF2  D050               	goto	l315
  2596                           
  2597                           ; BSR set to: 0
  2598                           ;doprnt.c: 1193: ((*sp++ = (' ')));
  2599  000FF4  C040  FFD9         	movff	sprintf@sp,fsr2l
  2600  000FF8  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2601  000FFC  0E20               	movlw	32
  2602  000FFE  D047               	goto	L7
  2603  001000                     
  2604                           ; BSR set to: 0
  2605                           ;doprnt.c: 1200: {
  2606                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2607                           
  2608                           ; BSR set to: 0
  2609  001000  C07D  F001         	movff	sprintf@val,___lldiv@dividend
  2610  001004  C07E  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2611  001008  C07F  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2612  00100C  C080  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2613  001010  5185               	movf	sprintf@c& (0+255),w,b
  2614  001012  0D04               	mullw	4
  2615  001014  0E31               	movlw	low _dpowers
  2616  001016  24F3               	addwf	prodl,w,c
  2617  001018  6EF6               	movwf	tblptrl,c
  2618  00101A  0E08               	movlw	high _dpowers
  2619  00101C  20F4               	addwfc	prodh,w,c
  2620  00101E  6EF7               	movwf	tblptrh,c
  2621  001020                     	if	0	;There are less than 3 active tblptr bytes
  2622  001020                     	endif
  2623  001020  0009               	tblrd		*+
  2624  001022  CFF5 F005          	movff	tablat,___lldiv@divisor
  2625  001026  0009               	tblrd		*+
  2626  001028  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2627  00102C  0009               	tblrd		*+
  2628  00102E  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2629  001032  000A               	tblrd		*-
  2630  001034  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2631  001038  EC98  F015         	call	___lldiv	;wreg free
  2632  00103C  C001  F074         	movff	?___lldiv,sprintf@tmpval
  2633  001040  C002  F075         	movff	?___lldiv+1,sprintf@tmpval+1
  2634  001044  C003  F076         	movff	?___lldiv+2,sprintf@tmpval+2
  2635  001048  C004  F077         	movff	?___lldiv+3,sprintf@tmpval+3
  2636                           
  2637                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2638  00104C  C074  F00E         	movff	sprintf@tmpval,___llmod@dividend
  2639  001050  C075  F00F         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2640  001054  C076  F010         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2641  001058  C077  F011         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2642  00105C  0E0A               	movlw	10
  2643  00105E  6E12               	movwf	___llmod@divisor,c
  2644  001060  0E00               	movlw	0
  2645  001062  6E13               	movwf	___llmod@divisor+1,c
  2646  001064  0E00               	movlw	0
  2647  001066  6E14               	movwf	___llmod@divisor+2,c
  2648  001068  0E00               	movlw	0
  2649  00106A  6E15               	movwf	___llmod@divisor+3,c
  2650  00106C  EC7D  F016         	call	___llmod	;wreg free
  2651  001070  C00E  F074         	movff	?___llmod,sprintf@tmpval
  2652  001074  C00F  F075         	movff	?___llmod+1,sprintf@tmpval+1
  2653  001078  C010  F076         	movff	?___llmod+2,sprintf@tmpval+2
  2654  00107C  C011  F077         	movff	?___llmod+3,sprintf@tmpval+3
  2655                           
  2656                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  2657  001080  0100               	movlb	0	; () banked
  2658  001082  5174               	movf	sprintf@tmpval& (0+255),w,b
  2659  001084  0F30               	addlw	48
  2660  001086  C040  FFD9         	movff	sprintf@sp,fsr2l
  2661  00108A  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2662  00108E                     L7:
  2663  00108E  6EDF               	movwf	indf2,c
  2664  001090                     L16:
  2665                           
  2666                           ; BSR set to: 0
  2667  001090  4A40               	infsnz	sprintf@sp,f,c
  2668  001092  2A41               	incf	sprintf@sp+1,f,c
  2669  001094                     l315:
  2670                           
  2671                           ; BSR set to: 0
  2672                           
  2673                           ; BSR set to: 0
  2674  001094  0785               	decf	sprintf@c& (0+255),f,b
  2675  001096  2985               	incf	sprintf@c& (0+255),w,b
  2676  001098  B4D8               	btfsc	status,2,c
  2677  00109A  D00C               	goto	l318
  2678  00109C  D7B1               	goto	l316
  2679  00109E                     l3518:
  2680                           
  2681                           ; BSR set to: 0
  2682                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  2683  00109E  C040  FFD9         	movff	sprintf@sp,fsr2l
  2684  0010A2  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2685  0010A6  0E30               	movlw	48
  2686  0010A8  6EDF               	movwf	indf2,c
  2687                           
  2688                           ; BSR set to: 0
  2689  0010AA  4A40               	infsnz	sprintf@sp,f,c
  2690  0010AC  2A41               	incf	sprintf@sp+1,f,c
  2691                           
  2692                           ; BSR set to: 0
  2693                           ;doprnt.c: 1209: exp--;
  2694  0010AE  0778               	decf	sprintf@exp& (0+255),f,b
  2695  0010B0  A0D8               	btfss	status,0,c
  2696  0010B2  0779               	decf	(sprintf@exp+1)& (0+255),f,b
  2697  0010B4                     l318:
  2698                           
  2699                           ; BSR set to: 0
  2700                           
  2701                           ; BSR set to: 0
  2702  0010B4  BF79               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2703  0010B6  D005               	goto	u3740
  2704  0010B8  5179               	movf	(sprintf@exp+1)& (0+255),w,b
  2705  0010BA  E1F1               	bnz	l3518
  2706  0010BC  0578               	decf	sprintf@exp& (0+255),w,b
  2707  0010BE  B0D8               	btfsc	status,0,c
  2708  0010C0  D7EE               	goto	l319
  2709  0010C2                     u3740:
  2710                           
  2711                           ; BSR set to: 0
  2712                           ;doprnt.c: 1210: }
  2713                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2714                           
  2715                           ; BSR set to: 0
  2716  0010C2  BF82               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2717  0010C4  D009               	goto	l321
  2718  0010C6  5182               	movf	(sprintf@prec+1)& (0+255),w,b
  2719  0010C8  E104               	bnz	u3750
  2720  0010CA  0E09               	movlw	9
  2721  0010CC  5D81               	subwf	sprintf@prec& (0+255),w,b
  2722  0010CE  A0D8               	btfss	status,0,c
  2723  0010D0  D003               	goto	l321
  2724  0010D2                     u3750:
  2725                           
  2726                           ; BSR set to: 0
  2727                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2728  0010D2  0E08               	movlw	8
  2729  0010D4  6F85               	movwf	sprintf@c& (0+255),b
  2730  0010D6  D002               	goto	l322
  2731  0010D8                     l321:
  2732                           
  2733                           ; BSR set to: 0
  2734                           ;doprnt.c: 1213: else
  2735                           ;doprnt.c: 1214: c = prec;
  2736  0010D8  C081  F085         	movff	sprintf@prec,sprintf@c
  2737  0010DC                     l322:
  2738                           
  2739                           ; BSR set to: 0
  2740                           ;doprnt.c: 1215: prec -= c;
  2741                           
  2742                           ; BSR set to: 0
  2743  0010DC  5185               	movf	sprintf@c& (0+255),w,b
  2744  0010DE  5F81               	subwf	sprintf@prec& (0+255),f,b
  2745  0010E0  0E00               	movlw	0
  2746  0010E2  BF85               	btfsc	sprintf@c& (0+255),7,b
  2747  0010E4  0EFF               	movlw	255
  2748  0010E6  5B82               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2749                           
  2750                           ; BSR set to: 0
  2751                           ;doprnt.c: 1217: if(c || flag & 0x800)
  2752  0010E8  5185               	movf	sprintf@c& (0+255),w,b
  2753  0010EA  A4D8               	btfss	status,2,c
  2754  0010EC  D002               	goto	u3770
  2755                           
  2756                           ; BSR set to: 0
  2757  0010EE  A787               	btfss	(sprintf@flag+1)& (0+255),3,b
  2758  0010F0  D008               	goto	l323
  2759  0010F2                     u3770:
  2760                           
  2761                           ; BSR set to: 0
  2762                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  2763                           
  2764                           ; BSR set to: 0
  2765  0010F2  C040  FFD9         	movff	sprintf@sp,fsr2l
  2766  0010F6  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2767  0010FA  0E2E               	movlw	46
  2768  0010FC  6EDF               	movwf	indf2,c
  2769                           
  2770                           ; BSR set to: 0
  2771  0010FE  4A40               	infsnz	sprintf@sp,f,c
  2772  001100  2A41               	incf	sprintf@sp+1,f,c
  2773  001102                     l323:
  2774                           
  2775                           ; BSR set to: 0
  2776                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2777                           
  2778                           ; BSR set to: 0
  2779  001102  5185               	movf	sprintf@c& (0+255),w,b
  2780  001104  EC70  F00C         	call	_scale
  2781  001108  C024  F060         	movff	?_scale,_sprintf$1299
  2782  00110C  C025  F061         	movff	?_scale+1,_sprintf$1299+1
  2783  001110  C026  F062         	movff	?_scale+2,_sprintf$1299+2
  2784                           
  2785                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2786  001114  C07A  F018         	movff	sprintf@fval,___ftmul@f2
  2787  001118  C07B  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  2788  00111C  C07C  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  2789  001120  C060  F015         	movff	_sprintf$1299,___ftmul@f1
  2790  001124  C061  F016         	movff	_sprintf$1299+1,___ftmul@f1+1
  2791  001128  C062  F017         	movff	_sprintf$1299+2,___ftmul@f1+2
  2792  00112C  EC83  F012         	call	___ftmul	;wreg free
  2793  001130  C015  F02B         	movff	?___ftmul,___fttol@f1
  2794  001134  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  2795  001138  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  2796  00113C  ECFD  F012         	call	___fttol	;wreg free
  2797  001140  C02B  F07D         	movff	?___fttol,sprintf@val
  2798  001144  C02C  F07E         	movff	?___fttol+1,sprintf@val+1
  2799  001148  C02D  F07F         	movff	?___fttol+2,sprintf@val+2
  2800  00114C  C02E  F080         	movff	?___fttol+3,sprintf@val+3
  2801                           
  2802                           ;doprnt.c: 1228: while(c--) {
  2803  001150  D071               	goto	l326
  2804  001152                     
  2805                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2806  001152  C07D  F001         	movff	sprintf@val,___lldiv@dividend
  2807  001156  C07E  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2808  00115A  C07F  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2809  00115E  C080  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2810  001162  0100               	movlb	0	; () banked
  2811  001164  5185               	movf	sprintf@c& (0+255),w,b
  2812  001166  0D04               	mullw	4
  2813  001168  0E31               	movlw	low _dpowers
  2814  00116A  24F3               	addwf	prodl,w,c
  2815  00116C  6EF6               	movwf	tblptrl,c
  2816  00116E  0E08               	movlw	high _dpowers
  2817  001170  20F4               	addwfc	prodh,w,c
  2818  001172  6EF7               	movwf	tblptrh,c
  2819  001174                     	if	0	;There are less than 3 active tblptr bytes
  2820  001174                     	endif
  2821  001174  0009               	tblrd		*+
  2822  001176  CFF5 F005          	movff	tablat,___lldiv@divisor
  2823  00117A  0009               	tblrd		*+
  2824  00117C  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2825  001180  0009               	tblrd		*+
  2826  001182  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2827  001186  000A               	tblrd		*-
  2828  001188  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2829  00118C  EC98  F015         	call	___lldiv	;wreg free
  2830  001190  C001  F074         	movff	?___lldiv,sprintf@tmpval
  2831  001194  C002  F075         	movff	?___lldiv+1,sprintf@tmpval+1
  2832  001198  C003  F076         	movff	?___lldiv+2,sprintf@tmpval+2
  2833  00119C  C004  F077         	movff	?___lldiv+3,sprintf@tmpval+3
  2834                           
  2835                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2836  0011A0  C074  F00E         	movff	sprintf@tmpval,___llmod@dividend
  2837  0011A4  C075  F00F         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2838  0011A8  C076  F010         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2839  0011AC  C077  F011         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2840  0011B0  0E0A               	movlw	10
  2841  0011B2  6E12               	movwf	___llmod@divisor,c
  2842  0011B4  0E00               	movlw	0
  2843  0011B6  6E13               	movwf	___llmod@divisor+1,c
  2844  0011B8  0E00               	movlw	0
  2845  0011BA  6E14               	movwf	___llmod@divisor+2,c
  2846  0011BC  0E00               	movlw	0
  2847  0011BE  6E15               	movwf	___llmod@divisor+3,c
  2848  0011C0  EC7D  F016         	call	___llmod	;wreg free
  2849  0011C4  C00E  F074         	movff	?___llmod,sprintf@tmpval
  2850  0011C8  C00F  F075         	movff	?___llmod+1,sprintf@tmpval+1
  2851  0011CC  C010  F076         	movff	?___llmod+2,sprintf@tmpval+2
  2852  0011D0  C011  F077         	movff	?___llmod+3,sprintf@tmpval+3
  2853                           
  2854                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  2855  0011D4  0100               	movlb	0	; () banked
  2856  0011D6  5174               	movf	sprintf@tmpval& (0+255),w,b
  2857  0011D8  0F30               	addlw	48
  2858  0011DA  C040  FFD9         	movff	sprintf@sp,fsr2l
  2859  0011DE  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2860  0011E2  6EDF               	movwf	indf2,c
  2861                           
  2862                           ; BSR set to: 0
  2863  0011E4  4A40               	infsnz	sprintf@sp,f,c
  2864  0011E6  2A41               	incf	sprintf@sp+1,f,c
  2865                           
  2866                           ; BSR set to: 0
  2867                           ;doprnt.c: 1232: val %= dpowers[c];
  2868  0011E8  C07D  F00E         	movff	sprintf@val,___llmod@dividend
  2869  0011EC  C07E  F00F         	movff	sprintf@val+1,___llmod@dividend+1
  2870  0011F0  C07F  F010         	movff	sprintf@val+2,___llmod@dividend+2
  2871  0011F4  C080  F011         	movff	sprintf@val+3,___llmod@dividend+3
  2872  0011F8  5185               	movf	sprintf@c& (0+255),w,b
  2873  0011FA  0D04               	mullw	4
  2874  0011FC  0E31               	movlw	low _dpowers
  2875  0011FE  24F3               	addwf	prodl,w,c
  2876  001200  6EF6               	movwf	tblptrl,c
  2877  001202  0E08               	movlw	high _dpowers
  2878  001204  20F4               	addwfc	prodh,w,c
  2879  001206  6EF7               	movwf	tblptrh,c
  2880  001208                     	if	0	;There are less than 3 active tblptr bytes
  2881  001208                     	endif
  2882  001208  0009               	tblrd		*+
  2883  00120A  CFF5 F012          	movff	tablat,___llmod@divisor
  2884  00120E  0009               	tblrd		*+
  2885  001210  CFF5 F013          	movff	tablat,___llmod@divisor+1
  2886  001214  0009               	tblrd		*+
  2887  001216  CFF5 F014          	movff	tablat,___llmod@divisor+2
  2888  00121A  000A               	tblrd		*-
  2889  00121C  CFF5 F015          	movff	tablat,___llmod@divisor+3
  2890  001220  EC7D  F016         	call	___llmod	;wreg free
  2891  001224  C00E  F07D         	movff	?___llmod,sprintf@val
  2892  001228  C00F  F07E         	movff	?___llmod+1,sprintf@val+1
  2893  00122C  C010  F07F         	movff	?___llmod+2,sprintf@val+2
  2894  001230  C011  F080         	movff	?___llmod+3,sprintf@val+3
  2895  001234                     l326:
  2896  001234  0100               	movlb	0	; () banked
  2897  001236  0785               	decf	sprintf@c& (0+255),f,b
  2898  001238  2985               	incf	sprintf@c& (0+255),w,b
  2899  00123A  B4D8               	btfsc	status,2,c
  2900  00123C  D00C               	goto	l329
  2901  00123E  D789               	goto	l327
  2902  001240                     
  2903                           ; BSR set to: 0
  2904                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  2905                           
  2906                           ; BSR set to: 0
  2907  001240  C040  FFD9         	movff	sprintf@sp,fsr2l
  2908  001244  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2909  001248  0E30               	movlw	48
  2910  00124A  6EDF               	movwf	indf2,c
  2911                           
  2912                           ; BSR set to: 0
  2913  00124C  4A40               	infsnz	sprintf@sp,f,c
  2914  00124E  2A41               	incf	sprintf@sp+1,f,c
  2915                           
  2916                           ; BSR set to: 0
  2917                           ;doprnt.c: 1237: prec--;
  2918  001250  0781               	decf	sprintf@prec& (0+255),f,b
  2919  001252  A0D8               	btfss	status,0,c
  2920  001254  0782               	decf	(sprintf@prec+1)& (0+255),f,b
  2921  001256                     l329:
  2922                           
  2923                           ; BSR set to: 0
  2924                           
  2925                           ; BSR set to: 0
  2926  001256  5181               	movf	sprintf@prec& (0+255),w,b
  2927  001258  1182               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2928  00125A  A4D8               	btfss	status,2,c
  2929  00125C  D7F1               	goto	l330
  2930                           
  2931                           ; BSR set to: 0
  2932                           ;doprnt.c: 1238: }
  2933                           ;doprnt.c: 1240: if((flag & 0x08) && width > 0)
  2934  00125E  B786               	btfsc	sprintf@flag& (0+255),3,b
  2935                           
  2936                           ; BSR set to: 0
  2937  001260  BF84               	btfsc	(sprintf@width+1)& (0+255),7,b
  2938  001262  D32A               	goto	u4280
  2939  001264  5184               	movf	(sprintf@width+1)& (0+255),w,b
  2940  001266  E103               	bnz	l3566
  2941  001268  0583               	decf	sprintf@width& (0+255),w,b
  2942  00126A  A0D8               	btfss	status,0,c
  2943  00126C  D325               	goto	u4280
  2944  00126E                     u3810:
  2945  00126E                     l3566:
  2946                           
  2947                           ; BSR set to: 0
  2948                           ;doprnt.c: 1242: ((*sp++ = (' ')));
  2949  00126E  C040  FFD9         	movff	sprintf@sp,fsr2l
  2950  001272  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2951  001276  0E20               	movlw	32
  2952  001278  6EDF               	movwf	indf2,c
  2953                           
  2954                           ; BSR set to: 0
  2955  00127A  4A40               	infsnz	sprintf@sp,f,c
  2956  00127C  2A41               	incf	sprintf@sp+1,f,c
  2957                           
  2958                           ; BSR set to: 0
  2959                           ;doprnt.c: 1243: while(--width);
  2960  00127E  0783               	decf	sprintf@width& (0+255),f,b
  2961  001280  A0D8               	btfss	status,0,c
  2962  001282  0784               	decf	(sprintf@width+1)& (0+255),f,b
  2963  001284  5183               	movf	sprintf@width& (0+255),w,b
  2964  001286  1184               	iorwf	(sprintf@width+1)& (0+255),w,b
  2965  001288  B4D8               	btfsc	status,2,c
  2966  00128A  D316               	goto	u4280
  2967  00128C  D7F0               	goto	u3810
  2968  00128E                     l267:
  2969                           
  2970                           ; BSR set to: 0
  2971                           ;doprnt.c: 1246: }
  2972                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  2973                           
  2974                           ; BSR set to: 0
  2975  00128E  0EC0               	movlw	192
  2976  001290  1586               	andwf	sprintf@flag& (0+255),w,b
  2977  001292  6E48               	movwf	??_sprintf& (0+255),c
  2978  001294  0E00               	movlw	0
  2979  001296  1587               	andwf	(sprintf@flag+1)& (0+255),w,b
  2980  001298  6E49               	movwf	(??_sprintf+1)& (0+255),c
  2981  00129A  5048               	movf	??_sprintf,w,c
  2982  00129C  1049               	iorwf	??_sprintf+1,w,c
  2983  00129E  A4D8               	btfss	status,2,c
  2984  0012A0  D02E               	goto	l335
  2985                           
  2986                           ; BSR set to: 0
  2987                           ;doprnt.c: 1253: {
  2988                           ;doprnt.c: 1255: if(flag & 0x10)
  2989  0012A2  A986               	btfss	sprintf@flag& (0+255),4,b
  2990  0012A4  D00E               	goto	l336
  2991                           
  2992                           ; BSR set to: 0
  2993                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  2994  0012A6  C072  FFD9         	movff	sprintf@ap,fsr2l
  2995  0012AA  C073  FFDA         	movff	sprintf@ap+1,fsr2h
  2996  0012AE  CFDE F07D          	movff	postinc2,sprintf@val
  2997  0012B2  CFDE F07E          	movff	postinc2,sprintf@val+1
  2998  0012B6  CFDE F07F          	movff	postinc2,sprintf@val+2
  2999  0012BA  CFDE F080          	movff	postinc2,sprintf@val+3
  3000                           
  3001                           ; BSR set to: 0
  3002  0012BE  0E04               	movlw	4
  3003  0012C0  D00E               	goto	L8
  3004  0012C2                     l336:
  3005                           
  3006                           ; BSR set to: 0
  3007                           ;doprnt.c: 1257: else
  3008                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  3009                           
  3010                           ; BSR set to: 0
  3011  0012C2  C072  FFD9         	movff	sprintf@ap,fsr2l
  3012  0012C6  C073  FFDA         	movff	sprintf@ap+1,fsr2h
  3013  0012CA  CFDE F07D          	movff	postinc2,sprintf@val
  3014  0012CE  CFDD F07E          	movff	postdec2,sprintf@val+1
  3015  0012D2  0E00               	movlw	0
  3016  0012D4  BF7E               	btfsc	(sprintf@val+1)& (0+255),7,b
  3017  0012D6  0EFF               	movlw	-1
  3018  0012D8  6F7F               	movwf	(sprintf@val+2)& (0+255),b
  3019  0012DA  6F80               	movwf	(sprintf@val+3)& (0+255),b
  3020                           
  3021                           ; BSR set to: 0
  3022  0012DC  0E02               	movlw	2
  3023  0012DE                     L8:
  3024  0012DE  2772               	addwf	sprintf@ap& (0+255),f,b
  3025  0012E0  0E00               	movlw	0
  3026  0012E2  2373               	addwfc	(sprintf@ap+1)& (0+255),f,b
  3027                           
  3028                           ; BSR set to: 0
  3029                           ;doprnt.c: 1261: if((long)val < 0) {
  3030                           
  3031                           ; BSR set to: 0
  3032  0012E4  AF80               	btfss	(sprintf@val+3)& (0+255),7,b
  3033  0012E6  D02D               	goto	l341
  3034                           
  3035                           ; BSR set to: 0
  3036                           ;doprnt.c: 1262: flag |= 0x03;
  3037  0012E8  0E03               	movlw	3
  3038  0012EA  1386               	iorwf	sprintf@flag& (0+255),f,b
  3039                           
  3040                           ; BSR set to: 0
  3041                           ;doprnt.c: 1263: val = -val;
  3042  0012EC  1F80               	comf	(sprintf@val+3)& (0+255),f,b
  3043  0012EE  1F7F               	comf	(sprintf@val+2)& (0+255),f,b
  3044  0012F0  1F7E               	comf	(sprintf@val+1)& (0+255),f,b
  3045  0012F2  6D7D               	negf	sprintf@val& (0+255),b
  3046  0012F4  0E00               	movlw	0
  3047  0012F6  237E               	addwfc	(sprintf@val+1)& (0+255),f,b
  3048  0012F8  237F               	addwfc	(sprintf@val+2)& (0+255),f,b
  3049  0012FA  2380               	addwfc	(sprintf@val+3)& (0+255),f,b
  3050                           
  3051                           ; BSR set to: 0
  3052                           ;doprnt.c: 1264: }
  3053                           ;doprnt.c: 1266: }
  3054  0012FC  D022               	goto	l341
  3055  0012FE                     l335:
  3056                           
  3057                           ; BSR set to: 0
  3058                           ;doprnt.c: 1268: else
  3059                           ;doprnt.c: 1273: {
  3060                           ;doprnt.c: 1281: if(flag & 0x10)
  3061  0012FE  A986               	btfss	sprintf@flag& (0+255),4,b
  3062  001300  D00E               	goto	l340
  3063                           
  3064                           ; BSR set to: 0
  3065                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  3066  001302  C072  FFD9         	movff	sprintf@ap,fsr2l
  3067  001306  C073  FFDA         	movff	sprintf@ap+1,fsr2h
  3068  00130A  CFDE F07D          	movff	postinc2,sprintf@val
  3069  00130E  CFDE F07E          	movff	postinc2,sprintf@val+1
  3070  001312  CFDE F07F          	movff	postinc2,sprintf@val+2
  3071  001316  CFDE F080          	movff	postinc2,sprintf@val+3
  3072                           
  3073                           ; BSR set to: 0
  3074  00131A  0E04               	movlw	4
  3075  00131C  D00F               	goto	L9
  3076  00131E                     l340:
  3077                           
  3078                           ; BSR set to: 0
  3079                           ;doprnt.c: 1283: else
  3080                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3081                           
  3082                           ; BSR set to: 0
  3083  00131E  C072  FFD9         	movff	sprintf@ap,fsr2l
  3084  001322  C073  FFDA         	movff	sprintf@ap+1,fsr2h
  3085  001326  CFDE F048          	movff	postinc2,??_sprintf
  3086  00132A  CFDD F049          	movff	postdec2,??_sprintf+1
  3087  00132E  C048  F07D         	movff	??_sprintf,sprintf@val
  3088  001332  C049  F07E         	movff	??_sprintf+1,sprintf@val+1
  3089  001336  6B7F               	clrf	(sprintf@val+2)& (0+255),b
  3090  001338  6B80               	clrf	(sprintf@val+3)& (0+255),b
  3091                           
  3092                           ; BSR set to: 0
  3093  00133A  0E02               	movlw	2
  3094  00133C                     L9:
  3095  00133C  2772               	addwf	sprintf@ap& (0+255),f,b
  3096  00133E  0E00               	movlw	0
  3097  001340  2373               	addwfc	(sprintf@ap+1)& (0+255),f,b
  3098  001342                     l341:
  3099                           
  3100                           ; BSR set to: 0
  3101                           ;doprnt.c: 1287: }
  3102                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  3103                           
  3104                           ; BSR set to: 0
  3105                           
  3106                           ; BSR set to: 0
  3107  001342  5181               	movf	sprintf@prec& (0+255),w,b
  3108  001344  1182               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3109  001346  A4D8               	btfss	status,2,c
  3110  001348  D063               	goto	l343
  3111                           
  3112                           ; BSR set to: 0
  3113  00134A  517D               	movf	sprintf@val& (0+255),w,b
  3114  00134C  117E               	iorwf	(sprintf@val+1)& (0+255),w,b
  3115  00134E  117F               	iorwf	(sprintf@val+2)& (0+255),w,b
  3116  001350  1180               	iorwf	(sprintf@val+3)& (0+255),w,b
  3117  001352  A4D8               	btfss	status,2,c
  3118  001354  D05D               	goto	l343
  3119                           
  3120                           ; BSR set to: 0
  3121                           ;doprnt.c: 1291: prec++;
  3122  001356  4B81               	infsnz	sprintf@prec& (0+255),f,b
  3123  001358  2B82               	incf	(sprintf@prec+1)& (0+255),f,b
  3124                           
  3125                           ; BSR set to: 0
  3126                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  3127  00135A  D05A               	goto	l343
  3128  00135C                     
  3129                           ; BSR set to: 0
  3130                           ;doprnt.c: 1302: case 0xC0:
  3131                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3132                           
  3133                           ; BSR set to: 0
  3134                           
  3135                           ; BSR set to: 0
  3136  00135C  0E01               	movlw	1
  3137  00135E  6F85               	movwf	sprintf@c& (0+255),b
  3138  001360                     l3606:
  3139                           
  3140                           ; BSR set to: 0
  3141  001360  0E0A               	movlw	10
  3142  001362  1985               	xorwf	sprintf@c& (0+255),w,b
  3143  001364  B4D8               	btfsc	status,2,c
  3144  001366  D062               	goto	l349
  3145                           
  3146                           ; BSR set to: 0
  3147                           ;doprnt.c: 1306: if(val < dpowers[c])
  3148                           
  3149                           ; BSR set to: 0
  3150                           
  3151                           ; BSR set to: 0
  3152  001368  5185               	movf	sprintf@c& (0+255),w,b
  3153  00136A  0D04               	mullw	4
  3154  00136C  0E31               	movlw	low _dpowers
  3155  00136E  24F3               	addwf	prodl,w,c
  3156  001370  6EF6               	movwf	tblptrl,c
  3157  001372  0E08               	movlw	high _dpowers
  3158  001374  20F4               	addwfc	prodh,w,c
  3159  001376  6EF7               	movwf	tblptrh,c
  3160  001378                     	if	0	;There are less than 3 active tblptr bytes
  3161  001378                     	endif
  3162  001378  0009               	tblrd		*+
  3163  00137A  50F5               	movf	tablat,w,c
  3164  00137C  5D7D               	subwf	sprintf@val& (0+255),w,b
  3165  00137E  0009               	tblrd		*+
  3166  001380  50F5               	movf	tablat,w,c
  3167  001382  597E               	subwfb	(sprintf@val+1)& (0+255),w,b
  3168  001384  0009               	tblrd		*+
  3169  001386  50F5               	movf	tablat,w,c
  3170  001388  597F               	subwfb	(sprintf@val+2)& (0+255),w,b
  3171  00138A  0009               	tblrd		*+
  3172  00138C  50F5               	movf	tablat,w,c
  3173  00138E  5980               	subwfb	(sprintf@val+3)& (0+255),w,b
  3174  001390  A0D8               	btfss	status,0,c
  3175  001392  D04C               	goto	l349
  3176                           
  3177                           ; BSR set to: 0
  3178                           
  3179                           ; BSR set to: 0
  3180                           
  3181                           ; BSR set to: 0
  3182                           ;doprnt.c: 1307: break;
  3183  001394  2B85               	incf	sprintf@c& (0+255),f,b
  3184  001396  D7E4               	goto	l3606
  3185  001398                     
  3186                           ; BSR set to: 0
  3187                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3188                           
  3189                           ; BSR set to: 0
  3190  001398  0E01               	movlw	1
  3191  00139A  6F85               	movwf	sprintf@c& (0+255),b
  3192  00139C                     l3620:
  3193                           
  3194                           ; BSR set to: 0
  3195  00139C  0E08               	movlw	8
  3196  00139E  1985               	xorwf	sprintf@c& (0+255),w,b
  3197  0013A0  B4D8               	btfsc	status,2,c
  3198  0013A2  D044               	goto	l349
  3199                           
  3200                           ; BSR set to: 0
  3201                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3202                           
  3203                           ; BSR set to: 0
  3204                           
  3205                           ; BSR set to: 0
  3206  0013A4  5185               	movf	sprintf@c& (0+255),w,b
  3207  0013A6  0D04               	mullw	4
  3208  0013A8  0EA7               	movlw	low _hexpowers
  3209  0013AA  24F3               	addwf	prodl,w,c
  3210  0013AC  6EF6               	movwf	tblptrl,c
  3211  0013AE  0E08               	movlw	high _hexpowers
  3212  0013B0  20F4               	addwfc	prodh,w,c
  3213  0013B2  6EF7               	movwf	tblptrh,c
  3214  0013B4                     	if	0	;There are less than 3 active tblptr bytes
  3215  0013B4                     	endif
  3216  0013B4  0009               	tblrd		*+
  3217  0013B6  50F5               	movf	tablat,w,c
  3218  0013B8  5D7D               	subwf	sprintf@val& (0+255),w,b
  3219  0013BA  0009               	tblrd		*+
  3220  0013BC  50F5               	movf	tablat,w,c
  3221  0013BE  597E               	subwfb	(sprintf@val+1)& (0+255),w,b
  3222  0013C0  0009               	tblrd		*+
  3223  0013C2  50F5               	movf	tablat,w,c
  3224  0013C4  597F               	subwfb	(sprintf@val+2)& (0+255),w,b
  3225  0013C6  0009               	tblrd		*+
  3226  0013C8  50F5               	movf	tablat,w,c
  3227  0013CA  5980               	subwfb	(sprintf@val+3)& (0+255),w,b
  3228  0013CC  A0D8               	btfss	status,0,c
  3229  0013CE  D02E               	goto	l349
  3230                           
  3231                           ; BSR set to: 0
  3232                           
  3233                           ; BSR set to: 0
  3234                           
  3235                           ; BSR set to: 0
  3236                           ;doprnt.c: 1318: break;
  3237  0013D0  2B85               	incf	sprintf@c& (0+255),f,b
  3238  0013D2  D7E4               	goto	l3620
  3239  0013D4                     
  3240                           ; BSR set to: 0
  3241                           ;doprnt.c: 1328: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
  3242                           
  3243                           ; BSR set to: 0
  3244  0013D4  0E01               	movlw	1
  3245  0013D6  6F85               	movwf	sprintf@c& (0+255),b
  3246  0013D8                     l3634:
  3247                           
  3248                           ; BSR set to: 0
  3249  0013D8  0E0C               	movlw	12
  3250  0013DA  1985               	xorwf	sprintf@c& (0+255),w,b
  3251  0013DC  B4D8               	btfsc	status,2,c
  3252  0013DE  D026               	goto	l349
  3253                           
  3254                           ; BSR set to: 0
  3255                           ;doprnt.c: 1329: if(val < octpowers[c])
  3256                           
  3257                           ; BSR set to: 0
  3258                           
  3259                           ; BSR set to: 0
  3260  0013E0  5185               	movf	sprintf@c& (0+255),w,b
  3261  0013E2  0D04               	mullw	4
  3262  0013E4  0E01               	movlw	low _octpowers
  3263  0013E6  24F3               	addwf	prodl,w,c
  3264  0013E8  6EF6               	movwf	tblptrl,c
  3265  0013EA  0E08               	movlw	high _octpowers
  3266  0013EC  20F4               	addwfc	prodh,w,c
  3267  0013EE  6EF7               	movwf	tblptrh,c
  3268  0013F0                     	if	0	;There are less than 3 active tblptr bytes
  3269  0013F0                     	endif
  3270  0013F0  0009               	tblrd		*+
  3271  0013F2  50F5               	movf	tablat,w,c
  3272  0013F4  5D7D               	subwf	sprintf@val& (0+255),w,b
  3273  0013F6  0009               	tblrd		*+
  3274  0013F8  50F5               	movf	tablat,w,c
  3275  0013FA  597E               	subwfb	(sprintf@val+1)& (0+255),w,b
  3276  0013FC  0009               	tblrd		*+
  3277  0013FE  50F5               	movf	tablat,w,c
  3278  001400  597F               	subwfb	(sprintf@val+2)& (0+255),w,b
  3279  001402  0009               	tblrd		*+
  3280  001404  50F5               	movf	tablat,w,c
  3281  001406  5980               	subwfb	(sprintf@val+3)& (0+255),w,b
  3282  001408  A0D8               	btfss	status,0,c
  3283  00140A  D010               	goto	l349
  3284                           
  3285                           ; BSR set to: 0
  3286                           
  3287                           ; BSR set to: 0
  3288                           
  3289                           ; BSR set to: 0
  3290                           ;doprnt.c: 1330: break;
  3291  00140C  2B85               	incf	sprintf@c& (0+255),f,b
  3292  00140E  D7E4               	goto	l3634
  3293  001410                     l343:
  3294                           
  3295                           ; BSR set to: 0
  3296                           
  3297                           ; BSR set to: 0
  3298  001410  5186               	movf	sprintf@flag& (0+255),w,b
  3299  001412  0BC0               	andlw	192
  3300                           
  3301                           ; Switch size 1, requested type "space"
  3302                           ; Number of cases is 4, Range of values is 0 to 192
  3303                           ; switch strategies available:
  3304                           ; Name         Instructions Cycles
  3305                           ; simple_byte           13     7 (average)
  3306                           ;	Chosen strategy is simple_byte
  3307  001414  0A00               	xorlw	0	; case 0
  3308  001416  B4D8               	btfsc	status,2,c
  3309  001418  D7A1               	goto	l344
  3310  00141A  0A40               	xorlw	64	; case 64
  3311  00141C  B4D8               	btfsc	status,2,c
  3312  00141E  D7DA               	goto	l354
  3313  001420  0AC0               	xorlw	192	; case 128
  3314  001422  B4D8               	btfsc	status,2,c
  3315  001424  D7B9               	goto	l350
  3316  001426  0A40               	xorlw	64	; case 192
  3317  001428  B4D8               	btfsc	status,2,c
  3318  00142A  D798               	goto	l344
  3319  00142C                     l349:
  3320                           
  3321                           ; BSR set to: 0
  3322                           ;doprnt.c: 1339: if(c < prec)
  3323                           
  3324                           ; BSR set to: 0
  3325  00142C  0E80               	movlw	128
  3326  00142E  BF85               	btfsc	sprintf@c& (0+255),7,b
  3327  001430  0E7F               	movlw	127
  3328  001432  6E48               	movwf	??_sprintf& (0+255),c
  3329  001434  5181               	movf	sprintf@prec& (0+255),w,b
  3330  001436  5D85               	subwf	sprintf@c& (0+255),w,b
  3331  001438  5182               	movf	(sprintf@prec+1)& (0+255),w,b
  3332  00143A  0A80               	xorlw	128
  3333  00143C  5848               	subwfb	??_sprintf& (0+255),w,c
  3334  00143E  B0D8               	btfsc	status,0,c
  3335  001440  D003               	goto	l358
  3336                           
  3337                           ; BSR set to: 0
  3338                           ;doprnt.c: 1340: c = prec;
  3339  001442  C081  F085         	movff	sprintf@prec,sprintf@c
  3340  001446  D010               	goto	l360
  3341  001448                     l358:
  3342                           
  3343                           ; BSR set to: 0
  3344                           ;doprnt.c: 1341: else if(prec < c)
  3345                           
  3346                           ; BSR set to: 0
  3347  001448  5182               	movf	(sprintf@prec+1)& (0+255),w,b
  3348  00144A  0A80               	xorlw	128
  3349  00144C  6E48               	movwf	??_sprintf& (0+255),c
  3350  00144E  5185               	movf	sprintf@c& (0+255),w,b
  3351  001450  5D81               	subwf	sprintf@prec& (0+255),w,b
  3352  001452  0E80               	movlw	128
  3353  001454  BF85               	btfsc	sprintf@c& (0+255),7,b
  3354  001456  0E7F               	movlw	127
  3355  001458  5848               	subwfb	??_sprintf& (0+255),w,c
  3356  00145A  B0D8               	btfsc	status,0,c
  3357  00145C  D005               	goto	l360
  3358                           
  3359                           ; BSR set to: 0
  3360                           ;doprnt.c: 1342: prec = c;
  3361  00145E  5185               	movf	sprintf@c& (0+255),w,b
  3362  001460  6F81               	movwf	sprintf@prec& (0+255),b
  3363  001462  6B82               	clrf	(sprintf@prec+1)& (0+255),b
  3364  001464  BF81               	btfsc	sprintf@prec& (0+255),7,b
  3365  001466  0782               	decf	(sprintf@prec+1)& (0+255),f,b
  3366  001468                     l360:
  3367                           
  3368                           ; BSR set to: 0
  3369                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3370                           
  3371                           ; BSR set to: 0
  3372                           
  3373                           ; BSR set to: 0
  3374  001468  5183               	movf	sprintf@width& (0+255),w,b
  3375  00146A  1184               	iorwf	(sprintf@width+1)& (0+255),w,b
  3376  00146C  B4D8               	btfsc	status,2,c
  3377  00146E  D00D               	goto	l361
  3378                           
  3379                           ; BSR set to: 0
  3380  001470  0E03               	movlw	3
  3381  001472  1586               	andwf	sprintf@flag& (0+255),w,b
  3382  001474  6E48               	movwf	??_sprintf& (0+255),c
  3383  001476  0E00               	movlw	0
  3384  001478  1587               	andwf	(sprintf@flag+1)& (0+255),w,b
  3385  00147A  6E49               	movwf	(??_sprintf+1)& (0+255),c
  3386  00147C  5048               	movf	??_sprintf,w,c
  3387  00147E  1049               	iorwf	??_sprintf+1,w,c
  3388  001480  B4D8               	btfsc	status,2,c
  3389  001482  D003               	goto	l361
  3390                           
  3391                           ; BSR set to: 0
  3392                           ;doprnt.c: 1346: width--;
  3393  001484  0783               	decf	sprintf@width& (0+255),f,b
  3394  001486  A0D8               	btfss	status,0,c
  3395  001488  0784               	decf	(sprintf@width+1)& (0+255),f,b
  3396  00148A                     l361:
  3397                           
  3398                           ; BSR set to: 0
  3399                           ;doprnt.c: 1348: if(flag & 0x4000) {
  3400                           
  3401                           ; BSR set to: 0
  3402  00148A  AD87               	btfss	(sprintf@flag+1)& (0+255),6,b
  3403  00148C  D013               	goto	l364
  3404                           
  3405                           ; BSR set to: 0
  3406                           ;doprnt.c: 1349: if(width > prec)
  3407  00148E  5183               	movf	sprintf@width& (0+255),w,b
  3408  001490  5D81               	subwf	sprintf@prec& (0+255),w,b
  3409  001492  5182               	movf	(sprintf@prec+1)& (0+255),w,b
  3410  001494  0A80               	xorlw	128
  3411  001496  6E48               	movwf	??_sprintf& (0+255),c
  3412  001498  5184               	movf	(sprintf@width+1)& (0+255),w,b
  3413  00149A  0A80               	xorlw	128
  3414  00149C  5848               	subwfb	??_sprintf& (0+255),w,c
  3415  00149E  B0D8               	btfsc	status,0,c
  3416  0014A0  D005               	goto	l363
  3417                           
  3418                           ; BSR set to: 0
  3419                           ;doprnt.c: 1350: width -= prec;
  3420  0014A2  5181               	movf	sprintf@prec& (0+255),w,b
  3421  0014A4  5F83               	subwf	sprintf@width& (0+255),f,b
  3422  0014A6  5182               	movf	(sprintf@prec+1)& (0+255),w,b
  3423  0014A8  5B84               	subwfb	(sprintf@width+1)& (0+255),f,b
  3424  0014AA  D004               	goto	l364
  3425  0014AC                     l363:
  3426                           
  3427                           ; BSR set to: 0
  3428                           ;doprnt.c: 1351: else
  3429                           ;doprnt.c: 1352: width = 0;
  3430                           
  3431                           ; BSR set to: 0
  3432  0014AC  0E00               	movlw	0
  3433  0014AE  6F84               	movwf	(sprintf@width+1)& (0+255),b
  3434  0014B0  0E00               	movlw	0
  3435  0014B2  6F83               	movwf	sprintf@width& (0+255),b
  3436  0014B4                     l364:
  3437                           
  3438                           ; BSR set to: 0
  3439                           ;doprnt.c: 1353: }
  3440                           ;doprnt.c: 1357: if((flag & (
  3441                           ;doprnt.c: 1359: 0x04|
  3442                           ;doprnt.c: 1361: (0xC0)|0x800)) == (0x40|0x800)) {
  3443                           
  3444                           ; BSR set to: 0
  3445                           
  3446                           ; BSR set to: 0
  3447  0014B4  0EC4               	movlw	196
  3448  0014B6  6E48               	movwf	??_sprintf& (0+255),c
  3449  0014B8  0E08               	movlw	8
  3450  0014BA  6E49               	movwf	(??_sprintf+1)& (0+255),c
  3451  0014BC  C086  F04A         	movff	sprintf@flag,??_sprintf+2
  3452  0014C0  C087  F04B         	movff	sprintf@flag+1,??_sprintf+3
  3453  0014C4  5048               	movf	??_sprintf,w,c
  3454  0014C6  164A               	andwf	??_sprintf+2,f,c
  3455  0014C8  5049               	movf	??_sprintf+1,w,c
  3456  0014CA  164B               	andwf	??_sprintf+3,f,c
  3457  0014CC  0E40               	movlw	64
  3458  0014CE  184A               	xorwf	??_sprintf+2,w,c
  3459  0014D0  E10C               	bnz	l3678
  3460  0014D2  0E08               	movlw	8
  3461  0014D4  184B               	xorwf	??_sprintf+3,w,c
  3462  0014D6  A4D8               	btfss	status,2,c
  3463  0014D8  D008               	goto	l365
  3464                           
  3465                           ; BSR set to: 0
  3466                           ;doprnt.c: 1362: if(width)
  3467  0014DA  5183               	movf	sprintf@width& (0+255),w,b
  3468  0014DC  1184               	iorwf	(sprintf@width+1)& (0+255),w,b
  3469  0014DE  B4D8               	btfsc	status,2,c
  3470  0014E0  D028               	goto	l370
  3471                           
  3472                           ; BSR set to: 0
  3473                           ;doprnt.c: 1363: width--;
  3474  0014E2  0783               	decf	sprintf@width& (0+255),f,b
  3475  0014E4  A0D8               	btfss	status,0,c
  3476  0014E6  0784               	decf	(sprintf@width+1)& (0+255),f,b
  3477                           
  3478                           ; BSR set to: 0
  3479                           ;doprnt.c: 1364: } else
  3480  0014E8  D024               	goto	l370
  3481  0014EA                     l365:
  3482  0014EA                     l3678:
  3483                           
  3484                           ; BSR set to: 0
  3485                           ;doprnt.c: 1368: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  3486  0014EA  0EC0               	movlw	192
  3487  0014EC  6E48               	movwf	??_sprintf& (0+255),c
  3488  0014EE  0E08               	movlw	8
  3489  0014F0  6E49               	movwf	(??_sprintf+1)& (0+255),c
  3490  0014F2  C086  F04A         	movff	sprintf@flag,??_sprintf+2
  3491  0014F6  C087  F04B         	movff	sprintf@flag+1,??_sprintf+3
  3492  0014FA  5048               	movf	??_sprintf,w,c
  3493  0014FC  164A               	andwf	??_sprintf+2,f,c
  3494  0014FE  5049               	movf	??_sprintf+1,w,c
  3495  001500  164B               	andwf	??_sprintf+3,f,c
  3496  001502  0E80               	movlw	128
  3497  001504  184A               	xorwf	??_sprintf+2,w,c
  3498  001506  E115               	bnz	l3686
  3499  001508  0E08               	movlw	8
  3500  00150A  184B               	xorwf	??_sprintf+3,w,c
  3501  00150C  A4D8               	btfss	status,2,c
  3502  00150E  D011               	goto	l370
  3503                           
  3504                           ; BSR set to: 0
  3505                           ;doprnt.c: 1372: if(width > 2)
  3506  001510  BF84               	btfsc	(sprintf@width+1)& (0+255),7,b
  3507  001512  D00B               	goto	l369
  3508  001514  5184               	movf	(sprintf@width+1)& (0+255),w,b
  3509  001516  E104               	bnz	u4070
  3510  001518  0E03               	movlw	3
  3511  00151A  5D83               	subwf	sprintf@width& (0+255),w,b
  3512  00151C  A0D8               	btfss	status,0,c
  3513  00151E  D005               	goto	l369
  3514  001520                     u4070:
  3515                           
  3516                           ; BSR set to: 0
  3517                           ;doprnt.c: 1373: width -= 2;
  3518  001520  0EFE               	movlw	254
  3519  001522  2783               	addwf	sprintf@width& (0+255),f,b
  3520  001524  0EFF               	movlw	255
  3521  001526  2384               	addwfc	(sprintf@width+1)& (0+255),f,b
  3522  001528  D004               	goto	l370
  3523  00152A                     l369:
  3524                           
  3525                           ; BSR set to: 0
  3526                           ;doprnt.c: 1374: else
  3527                           ;doprnt.c: 1375: width = 0;
  3528                           
  3529                           ; BSR set to: 0
  3530  00152A  0E00               	movlw	0
  3531  00152C  6F84               	movwf	(sprintf@width+1)& (0+255),b
  3532  00152E  0E00               	movlw	0
  3533  001530  6F83               	movwf	sprintf@width& (0+255),b
  3534  001532                     l370:
  3535  001532                     l3686:
  3536                           
  3537                           ; BSR set to: 0
  3538                           ;doprnt.c: 1376: }
  3539                           ;doprnt.c: 1381: if(width > c)
  3540  001532  0E80               	movlw	128
  3541  001534  BF85               	btfsc	sprintf@c& (0+255),7,b
  3542  001536  0E7F               	movlw	127
  3543  001538  6E48               	movwf	??_sprintf& (0+255),c
  3544  00153A  5183               	movf	sprintf@width& (0+255),w,b
  3545  00153C  5D85               	subwf	sprintf@c& (0+255),w,b
  3546  00153E  5184               	movf	(sprintf@width+1)& (0+255),w,b
  3547  001540  0A80               	xorlw	128
  3548  001542  5848               	subwfb	??_sprintf& (0+255),w,c
  3549  001544  B0D8               	btfsc	status,0,c
  3550  001546  D007               	goto	l371
  3551                           
  3552                           ; BSR set to: 0
  3553                           ;doprnt.c: 1382: width -= c;
  3554  001548  5185               	movf	sprintf@c& (0+255),w,b
  3555  00154A  5F83               	subwf	sprintf@width& (0+255),f,b
  3556  00154C  0E00               	movlw	0
  3557  00154E  BF85               	btfsc	sprintf@c& (0+255),7,b
  3558  001550  0EFF               	movlw	255
  3559  001552  5B84               	subwfb	(sprintf@width+1)& (0+255),f,b
  3560  001554  D004               	goto	l372
  3561  001556                     l371:
  3562                           
  3563                           ; BSR set to: 0
  3564                           ;doprnt.c: 1383: else
  3565                           ;doprnt.c: 1384: width = 0;
  3566                           
  3567                           ; BSR set to: 0
  3568  001556  0E00               	movlw	0
  3569  001558  6F84               	movwf	(sprintf@width+1)& (0+255),b
  3570  00155A  0E00               	movlw	0
  3571  00155C  6F83               	movwf	sprintf@width& (0+255),b
  3572  00155E                     l372:
  3573                           
  3574                           ; BSR set to: 0
  3575                           ;doprnt.c: 1387: if(flag & 0x04) {
  3576                           
  3577                           ; BSR set to: 0
  3578  00155E  A586               	btfss	sprintf@flag& (0+255),2,b
  3579  001560  D056               	goto	l373
  3580                           
  3581                           ; BSR set to: 0
  3582                           ;doprnt.c: 1392: if(flag & 0x03)
  3583  001562  0E03               	movlw	3
  3584  001564  1586               	andwf	sprintf@flag& (0+255),w,b
  3585  001566  6E48               	movwf	??_sprintf& (0+255),c
  3586  001568  0E00               	movlw	0
  3587  00156A  1587               	andwf	(sprintf@flag+1)& (0+255),w,b
  3588  00156C  6E49               	movwf	(??_sprintf+1)& (0+255),c
  3589  00156E  5048               	movf	??_sprintf,w,c
  3590  001570  1049               	iorwf	??_sprintf+1,w,c
  3591  001572  B4D8               	btfsc	status,2,c
  3592  001574  D006               	goto	l374
  3593                           
  3594                           ; BSR set to: 0
  3595                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  3596  001576  C040  FFD9         	movff	sprintf@sp,fsr2l
  3597  00157A  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  3598  00157E  0E2D               	movlw	45
  3599  001580  D007               	goto	L10
  3600  001582                     l374:
  3601                           
  3602                           ; BSR set to: 0
  3603                           ;doprnt.c: 1396: else
  3604                           ;doprnt.c: 1399: if(flag & 0x01)
  3605  001582  A186               	btfss	sprintf@flag& (0+255),0,b
  3606  001584  D007               	goto	l376
  3607                           
  3608                           ; BSR set to: 0
  3609                           ;doprnt.c: 1400: ((*sp++ = (' ')));
  3610  001586  C040  FFD9         	movff	sprintf@sp,fsr2l
  3611  00158A  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  3612  00158E  0E20               	movlw	32
  3613  001590                     L10:
  3614  001590  6EDF               	movwf	indf2,c
  3615  001592  D02B               	goto	l3718
  3616  001594                     l376:
  3617                           
  3618                           ; BSR set to: 0
  3619                           ;doprnt.c: 1403: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  3620                           
  3621                           ; BSR set to: 0
  3622  001594  0EC0               	movlw	192
  3623  001596  6E48               	movwf	??_sprintf& (0+255),c
  3624  001598  0E08               	movlw	8
  3625  00159A  6E49               	movwf	(??_sprintf+1)& (0+255),c
  3626  00159C  C086  F04A         	movff	sprintf@flag,??_sprintf+2
  3627  0015A0  C087  F04B         	movff	sprintf@flag+1,??_sprintf+3
  3628  0015A4  5048               	movf	??_sprintf,w,c
  3629  0015A6  164A               	andwf	??_sprintf+2,f,c
  3630  0015A8  5049               	movf	??_sprintf+1,w,c
  3631  0015AA  164B               	andwf	??_sprintf+3,f,c
  3632  0015AC  0E80               	movlw	128
  3633  0015AE  184A               	xorwf	??_sprintf+2,w,c
  3634  0015B0  E11E               	bnz	l3720
  3635  0015B2  0E08               	movlw	8
  3636  0015B4  184B               	xorwf	??_sprintf+3,w,c
  3637  0015B6  A4D8               	btfss	status,2,c
  3638  0015B8  D01A               	goto	l378
  3639                           
  3640                           ; BSR set to: 0
  3641                           ;doprnt.c: 1404: ((*sp++ = ('0')));
  3642  0015BA  C040  FFD9         	movff	sprintf@sp,fsr2l
  3643  0015BE  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  3644  0015C2  0E30               	movlw	48
  3645  0015C4  6EDF               	movwf	indf2,c
  3646                           
  3647                           ; BSR set to: 0
  3648  0015C6  4A40               	infsnz	sprintf@sp,f,c
  3649  0015C8  2A41               	incf	sprintf@sp+1,f,c
  3650                           
  3651                           ; BSR set to: 0
  3652                           ;doprnt.c: 1406: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
  3653  0015CA  BB86               	btfsc	sprintf@flag& (0+255),5,b
  3654  0015CC  D004               	goto	l380
  3655                           
  3656                           ; BSR set to: 0
  3657  0015CE  0E00               	movlw	0
  3658  0015D0  6F6A               	movwf	(_sprintf$703+1)& (0+255),b
  3659  0015D2  0E78               	movlw	120
  3660  0015D4  D003               	goto	L11
  3661  0015D6                     l380:
  3662                           
  3663                           ; BSR set to: 0
  3664                           
  3665                           ; BSR set to: 0
  3666  0015D6  0E00               	movlw	0
  3667  0015D8  6F6A               	movwf	(_sprintf$703+1)& (0+255),b
  3668  0015DA  0E58               	movlw	88
  3669  0015DC                     L11:
  3670  0015DC  6F69               	movwf	_sprintf$703& (0+255),b
  3671                           
  3672                           ; BSR set to: 0
  3673                           
  3674                           ; BSR set to: 0
  3675  0015DE  C040  FFD9         	movff	sprintf@sp,fsr2l
  3676  0015E2  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  3677  0015E6  C069  FFDF         	movff	_sprintf$703,indf2
  3678  0015EA                     l3718:
  3679                           
  3680                           ; BSR set to: 0
  3681  0015EA  4A40               	infsnz	sprintf@sp,f,c
  3682  0015EC  2A41               	incf	sprintf@sp+1,f,c
  3683  0015EE                     l378:
  3684  0015EE                     l3720:
  3685                           
  3686                           ; BSR set to: 0
  3687                           ;doprnt.c: 1412: }
  3688                           ;doprnt.c: 1415: if(width)
  3689  0015EE  5183               	movf	sprintf@width& (0+255),w,b
  3690  0015F0  1184               	iorwf	(sprintf@width+1)& (0+255),w,b
  3691  0015F2  B4D8               	btfsc	status,2,c
  3692  0015F4  D142               	goto	l400
  3693                           
  3694                           ; BSR set to: 0
  3695                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  3696                           
  3697                           ; BSR set to: 0
  3698                           
  3699                           ;doprnt.c: 1416: do
  3700  0015F6  C040  FFD9         	movff	sprintf@sp,fsr2l
  3701  0015FA  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  3702  0015FE  0E30               	movlw	48
  3703  001600  6EDF               	movwf	indf2,c
  3704                           
  3705                           ; BSR set to: 0
  3706  001602  4A40               	infsnz	sprintf@sp,f,c
  3707  001604  2A41               	incf	sprintf@sp+1,f,c
  3708                           
  3709                           ; BSR set to: 0
  3710                           ;doprnt.c: 1418: while(--width);
  3711  001606  0783               	decf	sprintf@width& (0+255),f,b
  3712  001608  A0D8               	btfss	status,0,c
  3713  00160A  0784               	decf	(sprintf@width+1)& (0+255),f,b
  3714  00160C  D7F0               	goto	l378
  3715  00160E                     l373:
  3716                           
  3717                           ; BSR set to: 0
  3718                           ;doprnt.c: 1422: {
  3719                           ;doprnt.c: 1424: if(width
  3720                           ;doprnt.c: 1426: && !(flag & 0x08)
  3721                           ;doprnt.c: 1428: )
  3722                           
  3723                           ; BSR set to: 0
  3724  00160E  5183               	movf	sprintf@width& (0+255),w,b
  3725  001610  1184               	iorwf	(sprintf@width+1)& (0+255),w,b
  3726  001612  A4D8               	btfss	status,2,c
  3727                           
  3728                           ; BSR set to: 0
  3729  001614  B786               	btfsc	sprintf@flag& (0+255),3,b
  3730  001616  D00F               	goto	u4180
  3731  001618                     u4170:
  3732                           
  3733                           ; BSR set to: 0
  3734                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  3735                           
  3736                           ; BSR set to: 0
  3737                           
  3738                           ;doprnt.c: 1429: do
  3739  001618  C040  FFD9         	movff	sprintf@sp,fsr2l
  3740  00161C  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  3741  001620  0E20               	movlw	32
  3742  001622  6EDF               	movwf	indf2,c
  3743                           
  3744                           ; BSR set to: 0
  3745  001624  4A40               	infsnz	sprintf@sp,f,c
  3746  001626  2A41               	incf	sprintf@sp+1,f,c
  3747                           
  3748                           ; BSR set to: 0
  3749                           ;doprnt.c: 1431: while(--width);
  3750  001628  0783               	decf	sprintf@width& (0+255),f,b
  3751  00162A  A0D8               	btfss	status,0,c
  3752  00162C  0784               	decf	(sprintf@width+1)& (0+255),f,b
  3753  00162E  5183               	movf	sprintf@width& (0+255),w,b
  3754  001630  1184               	iorwf	(sprintf@width+1)& (0+255),w,b
  3755  001632  A4D8               	btfss	status,2,c
  3756  001634  D7F1               	goto	u4170
  3757  001636                     u4180:
  3758                           
  3759                           ; BSR set to: 0
  3760                           ;doprnt.c: 1438: if(flag & 0x03)
  3761                           
  3762                           ; BSR set to: 0
  3763                           
  3764                           ; BSR set to: 0
  3765  001636  0E03               	movlw	3
  3766  001638  1586               	andwf	sprintf@flag& (0+255),w,b
  3767  00163A  6E48               	movwf	??_sprintf& (0+255),c
  3768  00163C  0E00               	movlw	0
  3769  00163E  1587               	andwf	(sprintf@flag+1)& (0+255),w,b
  3770  001640  6E49               	movwf	(??_sprintf+1)& (0+255),c
  3771  001642  5048               	movf	??_sprintf,w,c
  3772  001644  1049               	iorwf	??_sprintf+1,w,c
  3773  001646  B4D8               	btfsc	status,2,c
  3774  001648  D006               	goto	l390
  3775                           
  3776                           ; BSR set to: 0
  3777                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  3778  00164A  C040  FFD9         	movff	sprintf@sp,fsr2l
  3779  00164E  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  3780  001652  0E2D               	movlw	45
  3781  001654  D007               	goto	L12
  3782  001656                     l390:
  3783                           
  3784                           ; BSR set to: 0
  3785                           ;doprnt.c: 1443: else if(flag & 0x01)
  3786  001656  A186               	btfss	sprintf@flag& (0+255),0,b
  3787  001658  D008               	goto	l392
  3788                           
  3789                           ; BSR set to: 0
  3790                           ;doprnt.c: 1444: ((*sp++ = (' ')));
  3791  00165A  C040  FFD9         	movff	sprintf@sp,fsr2l
  3792  00165E  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  3793  001662  0E20               	movlw	32
  3794  001664                     L12:
  3795  001664  6EDF               	movwf	indf2,c
  3796                           
  3797                           ; BSR set to: 0
  3798  001666  4A40               	infsnz	sprintf@sp,f,c
  3799  001668  2A41               	incf	sprintf@sp+1,f,c
  3800  00166A                     l392:
  3801                           
  3802                           ; BSR set to: 0
  3803                           ;doprnt.c: 1448: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
  3804                           
  3805                           ; BSR set to: 0
  3806                           
  3807                           ; BSR set to: 0
  3808  00166A  0EC0               	movlw	192
  3809  00166C  6E48               	movwf	??_sprintf& (0+255),c
  3810  00166E  0E08               	movlw	8
  3811  001670  6E49               	movwf	(??_sprintf+1)& (0+255),c
  3812  001672  C086  F04A         	movff	sprintf@flag,??_sprintf+2
  3813  001676  C087  F04B         	movff	sprintf@flag+1,??_sprintf+3
  3814  00167A  5048               	movf	??_sprintf,w,c
  3815  00167C  164A               	andwf	??_sprintf+2,f,c
  3816  00167E  5049               	movf	??_sprintf+1,w,c
  3817  001680  164B               	andwf	??_sprintf+3,f,c
  3818  001682  0E40               	movlw	64
  3819  001684  184A               	xorwf	??_sprintf+2,w,c
  3820  001686  E10B               	bnz	l3754
  3821  001688  0E08               	movlw	8
  3822  00168A  184B               	xorwf	??_sprintf+3,w,c
  3823  00168C  A4D8               	btfss	status,2,c
  3824  00168E  D007               	goto	l393
  3825                           
  3826                           ; BSR set to: 0
  3827                           ;doprnt.c: 1449: ((*sp++ = ('0')));
  3828  001690  C040  FFD9         	movff	sprintf@sp,fsr2l
  3829  001694  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  3830  001698  0E30               	movlw	48
  3831  00169A  6EDF               	movwf	indf2,c
  3832  00169C  D0EC               	goto	l3790
  3833  00169E                     l393:
  3834  00169E                     l3754:
  3835                           
  3836                           ; BSR set to: 0
  3837                           ;doprnt.c: 1450: else
  3838                           ;doprnt.c: 1454: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  3839  00169E  0EC0               	movlw	192
  3840  0016A0  6E48               	movwf	??_sprintf& (0+255),c
  3841  0016A2  0E08               	movlw	8
  3842  0016A4  6E49               	movwf	(??_sprintf+1)& (0+255),c
  3843  0016A6  C086  F04A         	movff	sprintf@flag,??_sprintf+2
  3844  0016AA  C087  F04B         	movff	sprintf@flag+1,??_sprintf+3
  3845  0016AE  5048               	movf	??_sprintf,w,c
  3846  0016B0  164A               	andwf	??_sprintf+2,f,c
  3847  0016B2  5049               	movf	??_sprintf+1,w,c
  3848  0016B4  164B               	andwf	??_sprintf+3,f,c
  3849  0016B6  0E80               	movlw	128
  3850  0016B8  184A               	xorwf	??_sprintf+2,w,c
  3851  0016BA  E103               	bnz	u4221
  3852  0016BC  0E08               	movlw	8
  3853  0016BE  184B               	xorwf	??_sprintf+3,w,c
  3854  0016C0  A4D8               	btfss	status,2,c
  3855  0016C2                     u4221:
  3856  0016C2  D0DB               	goto	l400
  3857                           
  3858                           ; BSR set to: 0
  3859                           ;doprnt.c: 1458: ((*sp++ = ('0')));
  3860  0016C4  C040  FFD9         	movff	sprintf@sp,fsr2l
  3861  0016C8  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  3862  0016CC  0E30               	movlw	48
  3863  0016CE  6EDF               	movwf	indf2,c
  3864                           
  3865                           ; BSR set to: 0
  3866  0016D0  4A40               	infsnz	sprintf@sp,f,c
  3867  0016D2  2A41               	incf	sprintf@sp+1,f,c
  3868                           
  3869                           ; BSR set to: 0
  3870                           ;doprnt.c: 1460: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
  3871  0016D4  BB86               	btfsc	sprintf@flag& (0+255),5,b
  3872  0016D6  D004               	goto	l397
  3873                           
  3874                           ; BSR set to: 0
  3875  0016D8  0E00               	movlw	0
  3876  0016DA  6F6C               	movwf	(_sprintf$704+1)& (0+255),b
  3877  0016DC  0E78               	movlw	120
  3878  0016DE  D003               	goto	L13
  3879  0016E0                     l397:
  3880                           
  3881                           ; BSR set to: 0
  3882                           
  3883                           ; BSR set to: 0
  3884  0016E0  0E00               	movlw	0
  3885  0016E2  6F6C               	movwf	(_sprintf$704+1)& (0+255),b
  3886  0016E4  0E58               	movlw	88
  3887  0016E6                     L13:
  3888  0016E6  6F6B               	movwf	_sprintf$704& (0+255),b
  3889                           
  3890                           ; BSR set to: 0
  3891                           
  3892                           ; BSR set to: 0
  3893  0016E8  C040  FFD9         	movff	sprintf@sp,fsr2l
  3894  0016EC  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  3895  0016F0  C06B  FFDF         	movff	_sprintf$704,indf2
  3896  0016F4  D0C0               	goto	l3790
  3897  0016F6                     
  3898                           ; BSR set to: 0
  3899                           ;doprnt.c: 1486: case 0xC0:
  3900                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3901                           
  3902                           ; BSR set to: 0
  3903                           
  3904                           ; BSR set to: 0
  3905  0016F6  C081  F048         	movff	sprintf@prec,??_sprintf
  3906  0016FA  C082  F049         	movff	sprintf@prec+1,??_sprintf+1
  3907  0016FE  90D8               	bcf	status,0,c
  3908  001700  3648               	rlcf	??_sprintf,f,c
  3909  001702  3649               	rlcf	??_sprintf+1,f,c
  3910  001704  90D8               	bcf	status,0,c
  3911  001706  3648               	rlcf	??_sprintf,f,c
  3912  001708  3649               	rlcf	??_sprintf+1,f,c
  3913  00170A  0E31               	movlw	low _dpowers
  3914  00170C  2448               	addwf	??_sprintf,w,c
  3915  00170E  6EF6               	movwf	tblptrl,c
  3916  001710  0E08               	movlw	high _dpowers
  3917  001712  2049               	addwfc	??_sprintf+1,w,c
  3918  001714  6EF7               	movwf	tblptrh,c
  3919  001716                     	if	0	;There are less than 3 active tblptr bytes
  3920  001716                     	endif
  3921  001716  0009               	tblrd		*+
  3922  001718  CFF5 F005          	movff	tablat,___lldiv@divisor
  3923  00171C  0009               	tblrd		*+
  3924  00171E  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  3925  001722  0009               	tblrd		*+
  3926  001724  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  3927  001728  000A               	tblrd		*-
  3928  00172A  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  3929  00172E  C07D  F001         	movff	sprintf@val,___lldiv@dividend
  3930  001732  C07E  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  3931  001736  C07F  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  3932  00173A  C080  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  3933  00173E  EC98  F015         	call	___lldiv	;wreg free
  3934  001742  C001  F00E         	movff	?___lldiv,___llmod@dividend
  3935  001746  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  3936  00174A  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  3937  00174E  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  3938  001752  0E0A               	movlw	10
  3939  001754  6E12               	movwf	___llmod@divisor,c
  3940  001756  0E00               	movlw	0
  3941  001758  6E13               	movwf	___llmod@divisor+1,c
  3942  00175A  0E00               	movlw	0
  3943  00175C  6E14               	movwf	___llmod@divisor+2,c
  3944  00175E  0E00               	movlw	0
  3945  001760  6E15               	movwf	___llmod@divisor+3,c
  3946  001762  EC7D  F016         	call	___llmod	;wreg free
  3947  001766  500E               	movf	?___llmod,w,c
  3948  001768  D06E               	goto	L14
  3949  00176A                     
  3950                           ; BSR set to: 0
  3951                           ;doprnt.c: 1499: {
  3952                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3953                           
  3954                           ; BSR set to: 0
  3955  00176A  C07D  F001         	movff	sprintf@val,___lldiv@dividend
  3956  00176E  C07E  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  3957  001772  C07F  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  3958  001776  C080  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  3959  00177A  C081  F048         	movff	sprintf@prec,??_sprintf
  3960  00177E  C082  F049         	movff	sprintf@prec+1,??_sprintf+1
  3961  001782  90D8               	bcf	status,0,c
  3962  001784  3648               	rlcf	??_sprintf,f,c
  3963  001786  3649               	rlcf	??_sprintf+1,f,c
  3964  001788  90D8               	bcf	status,0,c
  3965  00178A  3648               	rlcf	??_sprintf,f,c
  3966  00178C  3649               	rlcf	??_sprintf+1,f,c
  3967  00178E  0EA7               	movlw	low _hexpowers
  3968  001790  2448               	addwf	??_sprintf,w,c
  3969  001792  6EF6               	movwf	tblptrl,c
  3970  001794  0E08               	movlw	high _hexpowers
  3971  001796  2049               	addwfc	??_sprintf+1,w,c
  3972  001798  6EF7               	movwf	tblptrh,c
  3973  00179A                     	if	0	;There are less than 3 active tblptr bytes
  3974  00179A                     	endif
  3975  00179A  0009               	tblrd		*+
  3976  00179C  CFF5 F005          	movff	tablat,___lldiv@divisor
  3977  0017A0  0009               	tblrd		*+
  3978  0017A2  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  3979  0017A6  0009               	tblrd		*+
  3980  0017A8  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  3981  0017AC  000A               	tblrd		*-
  3982  0017AE  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  3983  0017B2  EC98  F015         	call	___lldiv	;wreg free
  3984  0017B6  5001               	movf	?___lldiv,w,c
  3985  0017B8  0B0F               	andlw	15
  3986  0017BA  0100               	movlb	0	; () banked
  3987  0017BC  6F6F               	movwf	sprintf@idx& (0+255),b
  3988                           
  3989                           ; BSR set to: 0
  3990                           ;doprnt.c: 1502: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
  3991  0017BE  BB86               	btfsc	sprintf@flag& (0+255),5,b
  3992  0017C0  D004               	goto	l408
  3993                           
  3994                           ; BSR set to: 0
  3995  0017C2  0ED8               	movlw	low STR_4
  3996  0017C4  6F6D               	movwf	_sprintf$710& (0+255),b
  3997  0017C6  0E08               	movlw	high STR_4
  3998  0017C8  D003               	goto	L15
  3999  0017CA                     l408:
  4000                           
  4001                           ; BSR set to: 0
  4002                           
  4003                           ; BSR set to: 0
  4004  0017CA  0EC7               	movlw	low STR_3
  4005  0017CC  6F6D               	movwf	_sprintf$710& (0+255),b
  4006  0017CE  0E08               	movlw	high STR_3
  4007  0017D0                     L15:
  4008  0017D0  6F6E               	movwf	(_sprintf$710+1)& (0+255),b
  4009                           
  4010                           ; BSR set to: 0
  4011                           
  4012                           ; BSR set to: 0
  4013  0017D2  516F               	movf	sprintf@idx& (0+255),w,b
  4014  0017D4  0D01               	mullw	1
  4015  0017D6  C06D  F048         	movff	_sprintf$710,??_sprintf
  4016  0017DA  C06E  F049         	movff	_sprintf$710+1,??_sprintf+1
  4017  0017DE  50F3               	movf	prodl,w,c
  4018  0017E0  2648               	addwf	??_sprintf,f,c
  4019  0017E2  50F4               	movf	prodh,w,c
  4020  0017E4  2249               	addwfc	??_sprintf+1,f,c
  4021  0017E6  C048  FFF6         	movff	??_sprintf,tblptrl
  4022  0017EA  C049  FFF7         	movff	??_sprintf+1,tblptrh
  4023  0017EE                     	if	0	;tblptru may be non-zero
  4024  0017EE                     	endif
  4025  0017EE                     	if	0	;tblptru may be non-zero
  4026  0017EE                     	endif
  4027  0017EE  0008               	tblrd		*
  4028  0017F0  CFF5 F085          	movff	tablat,sprintf@c
  4029                           
  4030                           ;doprnt.c: 1508: }
  4031                           ;doprnt.c: 1510: break;
  4032  0017F4  D03A               	goto	l405
  4033  0017F6                     
  4034                           ; BSR set to: 0
  4035                           ;doprnt.c: 1518: c = ((val / octpowers[prec]) & 07) + '0';
  4036                           
  4037                           ; BSR set to: 0
  4038  0017F6  C07D  F001         	movff	sprintf@val,___lldiv@dividend
  4039  0017FA  C07E  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  4040  0017FE  C07F  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  4041  001802  C080  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  4042  001806  C081  F048         	movff	sprintf@prec,??_sprintf
  4043  00180A  C082  F049         	movff	sprintf@prec+1,??_sprintf+1
  4044  00180E  90D8               	bcf	status,0,c
  4045  001810  3648               	rlcf	??_sprintf,f,c
  4046  001812  3649               	rlcf	??_sprintf+1,f,c
  4047  001814  90D8               	bcf	status,0,c
  4048  001816  3648               	rlcf	??_sprintf,f,c
  4049  001818  3649               	rlcf	??_sprintf+1,f,c
  4050  00181A  0E01               	movlw	low _octpowers
  4051  00181C  2448               	addwf	??_sprintf,w,c
  4052  00181E  6EF6               	movwf	tblptrl,c
  4053  001820  0E08               	movlw	high _octpowers
  4054  001822  2049               	addwfc	??_sprintf+1,w,c
  4055  001824  6EF7               	movwf	tblptrh,c
  4056  001826                     	if	0	;There are less than 3 active tblptr bytes
  4057  001826                     	endif
  4058  001826  0009               	tblrd		*+
  4059  001828  CFF5 F005          	movff	tablat,___lldiv@divisor
  4060  00182C  0009               	tblrd		*+
  4061  00182E  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  4062  001832  0009               	tblrd		*+
  4063  001834  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  4064  001838  000A               	tblrd		*-
  4065  00183A  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  4066  00183E  EC98  F015         	call	___lldiv	;wreg free
  4067  001842  5001               	movf	?___lldiv,w,c
  4068  001844  0B07               	andlw	7
  4069  001846                     L14:
  4070  001846  0F30               	addlw	48
  4071  001848  0100               	movlb	0	; () banked
  4072  00184A  6F85               	movwf	sprintf@c& (0+255),b
  4073                           
  4074                           ; BSR set to: 0
  4075                           ;doprnt.c: 1523: }
  4076                           
  4077                           ;doprnt.c: 1520: break;
  4078  00184C  D00E               	goto	l405
  4079  00184E                     l3786:
  4080                           
  4081                           ; BSR set to: 0
  4082  00184E  5186               	movf	sprintf@flag& (0+255),w,b
  4083  001850  0BC0               	andlw	192
  4084                           
  4085                           ; Switch size 1, requested type "space"
  4086                           ; Number of cases is 4, Range of values is 0 to 192
  4087                           ; switch strategies available:
  4088                           ; Name         Instructions Cycles
  4089                           ; simple_byte           13     7 (average)
  4090                           ;	Chosen strategy is simple_byte
  4091  001852  0A00               	xorlw	0	; case 0
  4092  001854  B4D8               	btfsc	status,2,c
  4093  001856  D74F               	goto	l403
  4094  001858  0A40               	xorlw	64	; case 64
  4095  00185A  B4D8               	btfsc	status,2,c
  4096  00185C  D7CC               	goto	l411
  4097  00185E  0AC0               	xorlw	192	; case 128
  4098  001860  B4D8               	btfsc	status,2,c
  4099  001862  D783               	goto	l406
  4100  001864  0A40               	xorlw	64	; case 192
  4101  001866  B4D8               	btfsc	status,2,c
  4102  001868  D746               	goto	l403
  4103  00186A                     l405:
  4104                           
  4105                           ; BSR set to: 0
  4106                           ;doprnt.c: 1524: ((*sp++ = (c)));
  4107                           
  4108                           ; BSR set to: 0
  4109  00186A  C040  FFD9         	movff	sprintf@sp,fsr2l
  4110  00186E  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  4111  001872  C085  FFDF         	movff	sprintf@c,indf2
  4112  001876                     l3790:
  4113                           
  4114                           ; BSR set to: 0
  4115  001876  4A40               	infsnz	sprintf@sp,f,c
  4116  001878  2A41               	incf	sprintf@sp+1,f,c
  4117  00187A                     l400:
  4118                           
  4119                           ; BSR set to: 0
  4120                           
  4121                           ; BSR set to: 0
  4122  00187A  0781               	decf	sprintf@prec& (0+255),f,b
  4123  00187C  A0D8               	btfss	status,0,c
  4124  00187E  0782               	decf	(sprintf@prec+1)& (0+255),f,b
  4125  001880  2981               	incf	sprintf@prec& (0+255),w,b
  4126  001882  E1E5               	bnz	l3786
  4127  001884  2982               	incf	(sprintf@prec+1)& (0+255),w,b
  4128  001886  A4D8               	btfss	status,2,c
  4129  001888  D7E2               	goto	l402
  4130                           
  4131                           ; BSR set to: 0
  4132                           ;doprnt.c: 1525: }
  4133                           ;doprnt.c: 1528: if((flag & 0x08) && width > 0)
  4134  00188A  B786               	btfsc	sprintf@flag& (0+255),3,b
  4135                           
  4136                           ; BSR set to: 0
  4137  00188C  BF84               	btfsc	(sprintf@width+1)& (0+255),7,b
  4138  00188E  D014               	goto	u4280
  4139  001890  5184               	movf	(sprintf@width+1)& (0+255),w,b
  4140  001892  E103               	bnz	l3796
  4141  001894  0583               	decf	sprintf@width& (0+255),w,b
  4142  001896  A0D8               	btfss	status,0,c
  4143  001898  D00F               	goto	u4280
  4144  00189A                     u4270:
  4145  00189A                     l3796:
  4146                           
  4147                           ; BSR set to: 0
  4148                           ;doprnt.c: 1530: ((*sp++ = (' ')));
  4149  00189A  C040  FFD9         	movff	sprintf@sp,fsr2l
  4150  00189E  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  4151  0018A2  0E20               	movlw	32
  4152  0018A4  6EDF               	movwf	indf2,c
  4153                           
  4154                           ; BSR set to: 0
  4155  0018A6  4A40               	infsnz	sprintf@sp,f,c
  4156  0018A8  2A41               	incf	sprintf@sp+1,f,c
  4157                           
  4158                           ; BSR set to: 0
  4159                           ;doprnt.c: 1531: while(--width);
  4160  0018AA  0783               	decf	sprintf@width& (0+255),f,b
  4161  0018AC  A0D8               	btfss	status,0,c
  4162  0018AE  0784               	decf	(sprintf@width+1)& (0+255),f,b
  4163  0018B0  5183               	movf	sprintf@width& (0+255),w,b
  4164  0018B2  1184               	iorwf	(sprintf@width+1)& (0+255),w,b
  4165  0018B4  A4D8               	btfss	status,2,c
  4166  0018B6  D7F1               	goto	u4270
  4167  0018B8                     u4280:
  4168                           
  4169                           ; BSR set to: 0
  4170                           
  4171                           ; BSR set to: 0
  4172                           
  4173                           ; BSR set to: 0
  4174                           
  4175                           ; BSR set to: 0
  4176  0018B8  C042  FFF6         	movff	sprintf@f,tblptrl
  4177  0018BC  C043  FFF7         	movff	sprintf@f+1,tblptrh
  4178  0018C0  4A42               	infsnz	sprintf@f,f,c
  4179  0018C2  2A43               	incf	sprintf@f+1,f,c
  4180  0018C4                     	if	0	;tblptru may be non-zero
  4181  0018C4                     	endif
  4182  0018C4                     	if	0	;tblptru may be non-zero
  4183  0018C4                     	endif
  4184  0018C4  0008               	tblrd		*
  4185  0018C6  CFF5 F085          	movff	tablat,sprintf@c
  4186  0018CA  5185               	movf	sprintf@c& (0+255),w,b
  4187  0018CC  A4D8               	btfss	status,2,c
  4188  0018CE  EF85  F004         	goto	l218
  4189  0018D2                     u4290:
  4190                           
  4191                           ; BSR set to: 0
  4192                           ;doprnt.c: 1538: *sp = 0;
  4193                           
  4194                           ; BSR set to: 0
  4195                           
  4196                           ;doprnt.c: 1533: }
  4197                           ;doprnt.c: 1535: alldone:
  4198                           
  4199                           ; BSR set to: 0
  4200  0018D2  C040  FFD9         	movff	sprintf@sp,fsr2l
  4201  0018D6  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  4202  0018DA  0E00               	movlw	0
  4203  0018DC  6EDF               	movwf	indf2,c
  4204  0018DE  0012               	return	
  4205  0018E0                     __end_of_sprintf:
  4206                           	opt stack 0
  4207                           tblptru	equ	0xFF8
  4208                           tblptrh	equ	0xFF7
  4209                           tblptrl	equ	0xFF6
  4210                           tablat	equ	0xFF5
  4211                           prodh	equ	0xFF4
  4212                           prodl	equ	0xFF3
  4213                           wreg	equ	0xFE8
  4214                           indf1	equ	0xFE7
  4215                           fsr1h	equ	0xFE2
  4216                           fsr1l	equ	0xFE1
  4217                           indf2	equ	0xFDF
  4218                           postinc2	equ	0xFDE
  4219                           postdec2	equ	0xFDD
  4220                           fsr2h	equ	0xFDA
  4221                           fsr2l	equ	0xFD9
  4222                           status	equ	0xFD8
  4223                           
  4224 ;; *************** function _scale *****************
  4225 ;; Defined at:
  4226 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  4227 ;; Parameters:    Size  Location     Type
  4228 ;;  scl             1    wreg     char 
  4229 ;; Auto vars:     Size  Location     Type
  4230 ;;  scl             1   41[COMRAM] char 
  4231 ;; Return value:  Size  Location     Type
  4232 ;;                  3   35[COMRAM] char 
  4233 ;; Registers used:
  4234 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4235 ;; Tracked objects:
  4236 ;;		On entry : 0/0
  4237 ;;		On exit  : 0/0
  4238 ;;		Unchanged: 0/0
  4239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4240 ;;      Params:         3       0       0       0       0       0       0       0       0
  4241 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4242 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4243 ;;      Totals:         7       0       0       0       0       0       0       0       0
  4244 ;;Total ram usage:        7 bytes
  4245 ;; Hardware stack levels used:    1
  4246 ;; Hardware stack levels required when called:    2
  4247 ;; This function calls:
  4248 ;;		___awdiv
  4249 ;;		___awmod
  4250 ;;		___ftmul
  4251 ;;		___wmul
  4252 ;; This function is called by:
  4253 ;;		_sprintf
  4254 ;; This function uses a non-reentrant model
  4255 ;;
  4256                           
  4257                           	psect	text2
  4258  0018E0                     __ptext2:
  4259                           	opt stack 0
  4260  0018E0                     _scale:
  4261                           	opt stack 27
  4262                           
  4263                           ; BSR set to: 0
  4264                           ;incstack = 0
  4265                           ;scale@scl stored from wreg
  4266  0018E0  6E2A               	movwf	scale@scl,c
  4267                           
  4268                           ;doprnt.c: 428: if(scl < 0) {
  4269  0018E2  AE2A               	btfss	scale@scl,7,c
  4270  0018E4  D101               	goto	l207
  4271                           
  4272                           ;doprnt.c: 429: scl = -scl;
  4273  0018E6  6C2A               	negf	scale@scl,c
  4274                           
  4275                           ;doprnt.c: 430: if(scl>=110)
  4276  0018E8  502A               	movf	scale@scl,w,c
  4277  0018EA  0A80               	xorlw	128
  4278  0018EC  0F12               	addlw	-238
  4279  0018EE  A0D8               	btfss	status,0,c
  4280  0018F0  D091               	goto	l208
  4281                           
  4282                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4283  0018F2  0E00               	movlw	0
  4284  0018F4  6E12               	movwf	___wmul@multiplicand+1,c
  4285  0018F6  0E03               	movlw	3
  4286  0018F8  6E11               	movwf	___wmul@multiplicand,c
  4287  0018FA  0E00               	movlw	0
  4288  0018FC  6E0A               	movwf	___awdiv@divisor+1,c
  4289  0018FE  0E0A               	movlw	10
  4290  001900  6E09               	movwf	___awdiv@divisor,c
  4291  001902  0E00               	movlw	0
  4292  001904  6E04               	movwf	___awmod@divisor+1,c
  4293  001906  0E64               	movlw	100
  4294  001908  6E03               	movwf	___awmod@divisor,c
  4295  00190A  502A               	movf	scale@scl,w,c
  4296  00190C  6E01               	movwf	___awmod@dividend,c
  4297  00190E  6A02               	clrf	___awmod@dividend+1,c
  4298  001910  BE01               	btfsc	___awmod@dividend,7,c
  4299  001912  0602               	decf	___awmod@dividend+1,f,c
  4300  001914  ECD9  F015         	call	___awmod	;wreg free
  4301  001918  C001  F007         	movff	?___awmod,___awdiv@dividend
  4302  00191C  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  4303  001920  EC56  F015         	call	___awdiv	;wreg free
  4304  001924  0E09               	movlw	9
  4305  001926  2407               	addwf	?___awdiv,w,c
  4306  001928  6E0F               	movwf	___wmul@multiplier,c
  4307  00192A  0E00               	movlw	0
  4308  00192C  2008               	addwfc	?___awdiv+1,w,c
  4309  00192E  6E10               	movwf	___wmul@multiplier+1,c
  4310  001930  EC79  F017         	call	___wmul	;wreg free
  4311  001934  0E80               	movlw	low __npowers_
  4312  001936  240F               	addwf	?___wmul,w,c
  4313  001938  6EF6               	movwf	tblptrl,c
  4314  00193A  0E08               	movlw	high __npowers_
  4315  00193C  2010               	addwfc	?___wmul+1,w,c
  4316  00193E  6EF7               	movwf	tblptrh,c
  4317  001940                     	if	0	;There are less than 3 active tblptr bytes
  4318  001940                     	endif
  4319  001940  0009               	tblrd		*+
  4320  001942  CFF5 F018          	movff	tablat,___ftmul@f2
  4321  001946  0009               	tblrd		*+
  4322  001948  CFF5 F019          	movff	tablat,___ftmul@f2+1
  4323  00194C  000A               	tblrd		*-
  4324  00194E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  4325  001952  0E00               	movlw	0
  4326  001954  6E0A               	movwf	___awdiv@divisor+1,c
  4327  001956  0E64               	movlw	100
  4328  001958  6E09               	movwf	___awdiv@divisor,c
  4329  00195A  502A               	movf	scale@scl,w,c
  4330  00195C  6E07               	movwf	___awdiv@dividend,c
  4331  00195E  6A08               	clrf	___awdiv@dividend+1,c
  4332  001960  BE07               	btfsc	___awdiv@dividend,7,c
  4333  001962  0608               	decf	___awdiv@dividend+1,f,c
  4334  001964  EC56  F015         	call	___awdiv	;wreg free
  4335  001968  0E12               	movlw	18
  4336  00196A  2407               	addwf	?___awdiv,w,c
  4337  00196C  6E0F               	movwf	___wmul@multiplier,c
  4338  00196E  0E00               	movlw	0
  4339  001970  2008               	addwfc	?___awdiv+1,w,c
  4340  001972  6E10               	movwf	___wmul@multiplier+1,c
  4341  001974  0E00               	movlw	0
  4342  001976  6E12               	movwf	___wmul@multiplicand+1,c
  4343  001978  0E03               	movlw	3
  4344  00197A  6E11               	movwf	___wmul@multiplicand,c
  4345  00197C  EC79  F017         	call	___wmul	;wreg free
  4346  001980  0E80               	movlw	low __npowers_
  4347  001982  240F               	addwf	?___wmul,w,c
  4348  001984  6EF6               	movwf	tblptrl,c
  4349  001986  0E08               	movlw	high __npowers_
  4350  001988  2010               	addwfc	?___wmul+1,w,c
  4351  00198A  6EF7               	movwf	tblptrh,c
  4352  00198C                     	if	0	;There are less than 3 active tblptr bytes
  4353  00198C                     	endif
  4354  00198C  0009               	tblrd		*+
  4355  00198E  CFF5 F015          	movff	tablat,___ftmul@f1
  4356  001992  0009               	tblrd		*+
  4357  001994  CFF5 F016          	movff	tablat,___ftmul@f1+1
  4358  001998  000A               	tblrd		*-
  4359  00199A  CFF5 F017          	movff	tablat,___ftmul@f1+2
  4360  00199E  EC83  F012         	call	___ftmul	;wreg free
  4361  0019A2  C015  F027         	movff	?___ftmul,_scale$1298
  4362  0019A6  C016  F028         	movff	?___ftmul+1,_scale$1298+1
  4363  0019AA  C017  F029         	movff	?___ftmul+2,_scale$1298+2
  4364                           
  4365                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4366  0019AE  C027  F015         	movff	_scale$1298,___ftmul@f1
  4367  0019B2  C028  F016         	movff	_scale$1298+1,___ftmul@f1+1
  4368  0019B6  C029  F017         	movff	_scale$1298+2,___ftmul@f1+2
  4369  0019BA  0E00               	movlw	0
  4370  0019BC  6E12               	movwf	___wmul@multiplicand+1,c
  4371  0019BE  0E03               	movlw	3
  4372  0019C0  6E11               	movwf	___wmul@multiplicand,c
  4373  0019C2  0E00               	movlw	0
  4374  0019C4  6E04               	movwf	___awmod@divisor+1,c
  4375  0019C6  0E0A               	movlw	10
  4376  0019C8  6E03               	movwf	___awmod@divisor,c
  4377  0019CA  502A               	movf	scale@scl,w,c
  4378  0019CC  6E01               	movwf	___awmod@dividend,c
  4379  0019CE  6A02               	clrf	___awmod@dividend+1,c
  4380  0019D0  BE01               	btfsc	___awmod@dividend,7,c
  4381  0019D2  0602               	decf	___awmod@dividend+1,f,c
  4382  0019D4  ECD9  F015         	call	___awmod	;wreg free
  4383  0019D8  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4384  0019DC  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4385  0019E0  EC79  F017         	call	___wmul	;wreg free
  4386  0019E4  0E80               	movlw	low __npowers_
  4387  0019E6  240F               	addwf	?___wmul,w,c
  4388  0019E8  6EF6               	movwf	tblptrl,c
  4389  0019EA  0E08               	movlw	high __npowers_
  4390  0019EC  2010               	addwfc	?___wmul+1,w,c
  4391  0019EE  6EF7               	movwf	tblptrh,c
  4392  0019F0                     	if	0	;There are less than 3 active tblptr bytes
  4393  0019F0                     	endif
  4394  0019F0  0009               	tblrd		*+
  4395  0019F2  CFF5 F018          	movff	tablat,___ftmul@f2
  4396  0019F6  0009               	tblrd		*+
  4397  0019F8  CFF5 F019          	movff	tablat,___ftmul@f2+1
  4398  0019FC  000A               	tblrd		*-
  4399  0019FE  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  4400  001A02  EC83  F012         	call	___ftmul	;wreg free
  4401  001A06  C015  F024         	movff	?___ftmul,?_scale
  4402  001A0A  C016  F025         	movff	?___ftmul+1,?_scale+1
  4403  001A0E  C017  F026         	movff	?___ftmul+2,?_scale+2
  4404  001A12  0012               	return	
  4405  001A14                     l208:
  4406                           
  4407                           ;doprnt.c: 432: else if(scl > 10)
  4408  001A14  502A               	movf	scale@scl,w,c
  4409  001A16  0A80               	xorlw	128
  4410  001A18  0F75               	addlw	-139
  4411  001A1A  A0D8               	btfss	status,0,c
  4412  001A1C  D053               	goto	l211
  4413                           
  4414                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  4415  001A1E  0E00               	movlw	0
  4416  001A20  6E0A               	movwf	___awdiv@divisor+1,c
  4417  001A22  0E0A               	movlw	10
  4418  001A24  6E09               	movwf	___awdiv@divisor,c
  4419  001A26  502A               	movf	scale@scl,w,c
  4420  001A28  6E07               	movwf	___awdiv@dividend,c
  4421  001A2A  6A08               	clrf	___awdiv@dividend+1,c
  4422  001A2C  BE07               	btfsc	___awdiv@dividend,7,c
  4423  001A2E  0608               	decf	___awdiv@dividend+1,f,c
  4424  001A30  EC56  F015         	call	___awdiv	;wreg free
  4425  001A34  0E09               	movlw	9
  4426  001A36  2407               	addwf	?___awdiv,w,c
  4427  001A38  6E0F               	movwf	___wmul@multiplier,c
  4428  001A3A  0E00               	movlw	0
  4429  001A3C  2008               	addwfc	?___awdiv+1,w,c
  4430  001A3E  6E10               	movwf	___wmul@multiplier+1,c
  4431  001A40  0E00               	movlw	0
  4432  001A42  6E12               	movwf	___wmul@multiplicand+1,c
  4433  001A44  0E03               	movlw	3
  4434  001A46  6E11               	movwf	___wmul@multiplicand,c
  4435  001A48  EC79  F017         	call	___wmul	;wreg free
  4436  001A4C  0E80               	movlw	low __npowers_
  4437  001A4E  240F               	addwf	?___wmul,w,c
  4438  001A50  6EF6               	movwf	tblptrl,c
  4439  001A52  0E08               	movlw	high __npowers_
  4440  001A54  2010               	addwfc	?___wmul+1,w,c
  4441  001A56  6EF7               	movwf	tblptrh,c
  4442  001A58                     	if	0	;There are less than 3 active tblptr bytes
  4443  001A58                     	endif
  4444  001A58  0009               	tblrd		*+
  4445  001A5A  CFF5 F015          	movff	tablat,___ftmul@f1
  4446  001A5E  0009               	tblrd		*+
  4447  001A60  CFF5 F016          	movff	tablat,___ftmul@f1+1
  4448  001A64  000A               	tblrd		*-
  4449  001A66  CFF5 F017          	movff	tablat,___ftmul@f1+2
  4450  001A6A  0E00               	movlw	0
  4451  001A6C  6E12               	movwf	___wmul@multiplicand+1,c
  4452  001A6E  0E03               	movlw	3
  4453  001A70  6E11               	movwf	___wmul@multiplicand,c
  4454  001A72  0E00               	movlw	0
  4455  001A74  6E04               	movwf	___awmod@divisor+1,c
  4456  001A76  0E0A               	movlw	10
  4457  001A78  6E03               	movwf	___awmod@divisor,c
  4458  001A7A  502A               	movf	scale@scl,w,c
  4459  001A7C  6E01               	movwf	___awmod@dividend,c
  4460  001A7E  6A02               	clrf	___awmod@dividend+1,c
  4461  001A80  BE01               	btfsc	___awmod@dividend,7,c
  4462  001A82  0602               	decf	___awmod@dividend+1,f,c
  4463  001A84  ECD9  F015         	call	___awmod	;wreg free
  4464  001A88  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4465  001A8C  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4466  001A90  EC79  F017         	call	___wmul	;wreg free
  4467  001A94  0E80               	movlw	low __npowers_
  4468  001A96  240F               	addwf	?___wmul,w,c
  4469  001A98  6EF6               	movwf	tblptrl,c
  4470  001A9A  0E08               	movlw	high __npowers_
  4471  001A9C  2010               	addwfc	?___wmul+1,w,c
  4472  001A9E  6EF7               	movwf	tblptrh,c
  4473  001AA0                     	if	0	;There are less than 3 active tblptr bytes
  4474  001AA0                     	endif
  4475  001AA0  0009               	tblrd		*+
  4476  001AA2  CFF5 F018          	movff	tablat,___ftmul@f2
  4477  001AA6  0009               	tblrd		*+
  4478  001AA8  CFF5 F019          	movff	tablat,___ftmul@f2+1
  4479  001AAC  000A               	tblrd		*-
  4480  001AAE  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  4481  001AB2  EC83  F012         	call	___ftmul	;wreg free
  4482  001AB6  C015  F024         	movff	?___ftmul,?_scale
  4483  001ABA  C016  F025         	movff	?___ftmul+1,?_scale+1
  4484  001ABE  C017  F026         	movff	?___ftmul+2,?_scale+2
  4485  001AC2  0012               	return	
  4486  001AC4                     l211:
  4487                           
  4488                           ;doprnt.c: 434: return _npowers_[scl];
  4489  001AC4  502A               	movf	scale@scl,w,c
  4490  001AC6  0D03               	mullw	3
  4491  001AC8  0E80               	movlw	low __npowers_
  4492  001ACA  24F3               	addwf	prodl,w,c
  4493  001ACC  6EF6               	movwf	tblptrl,c
  4494  001ACE  0E08               	movlw	high __npowers_
  4495  001AD0  20F4               	addwfc	prodh,w,c
  4496  001AD2  6EF7               	movwf	tblptrh,c
  4497  001AD4                     	if	0	;There are less than 3 active tblptr bytes
  4498  001AD4                     	endif
  4499  001AD4  0009               	tblrd		*+
  4500  001AD6  CFF5 F024          	movff	tablat,?_scale
  4501  001ADA  0009               	tblrd		*+
  4502  001ADC  CFF5 F025          	movff	tablat,?_scale+1
  4503  001AE0  000A               	tblrd		*-
  4504  001AE2  CFF5 F026          	movff	tablat,?_scale+2
  4505  001AE6  0012               	return	
  4506  001AE8                     l207:
  4507                           
  4508                           ;doprnt.c: 435: }
  4509                           ;doprnt.c: 436: if(scl>=110)
  4510  001AE8  502A               	movf	scale@scl,w,c
  4511  001AEA  0A80               	xorlw	128
  4512  001AEC  0F12               	addlw	-238
  4513  001AEE  A0D8               	btfss	status,0,c
  4514  001AF0  D091               	goto	l212
  4515                           
  4516                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4517  001AF2  0E00               	movlw	0
  4518  001AF4  6E12               	movwf	___wmul@multiplicand+1,c
  4519  001AF6  0E03               	movlw	3
  4520  001AF8  6E11               	movwf	___wmul@multiplicand,c
  4521  001AFA  0E00               	movlw	0
  4522  001AFC  6E0A               	movwf	___awdiv@divisor+1,c
  4523  001AFE  0E0A               	movlw	10
  4524  001B00  6E09               	movwf	___awdiv@divisor,c
  4525  001B02  0E00               	movlw	0
  4526  001B04  6E04               	movwf	___awmod@divisor+1,c
  4527  001B06  0E64               	movlw	100
  4528  001B08  6E03               	movwf	___awmod@divisor,c
  4529  001B0A  502A               	movf	scale@scl,w,c
  4530  001B0C  6E01               	movwf	___awmod@dividend,c
  4531  001B0E  6A02               	clrf	___awmod@dividend+1,c
  4532  001B10  BE01               	btfsc	___awmod@dividend,7,c
  4533  001B12  0602               	decf	___awmod@dividend+1,f,c
  4534  001B14  ECD9  F015         	call	___awmod	;wreg free
  4535  001B18  C001  F007         	movff	?___awmod,___awdiv@dividend
  4536  001B1C  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  4537  001B20  EC56  F015         	call	___awdiv	;wreg free
  4538  001B24  0E09               	movlw	9
  4539  001B26  2407               	addwf	?___awdiv,w,c
  4540  001B28  6E0F               	movwf	___wmul@multiplier,c
  4541  001B2A  0E00               	movlw	0
  4542  001B2C  2008               	addwfc	?___awdiv+1,w,c
  4543  001B2E  6E10               	movwf	___wmul@multiplier+1,c
  4544  001B30  EC79  F017         	call	___wmul	;wreg free
  4545  001B34  0E59               	movlw	low __powers_
  4546  001B36  240F               	addwf	?___wmul,w,c
  4547  001B38  6EF6               	movwf	tblptrl,c
  4548  001B3A  0E08               	movlw	high __powers_
  4549  001B3C  2010               	addwfc	?___wmul+1,w,c
  4550  001B3E  6EF7               	movwf	tblptrh,c
  4551  001B40                     	if	0	;There are less than 3 active tblptr bytes
  4552  001B40                     	endif
  4553  001B40  0009               	tblrd		*+
  4554  001B42  CFF5 F018          	movff	tablat,___ftmul@f2
  4555  001B46  0009               	tblrd		*+
  4556  001B48  CFF5 F019          	movff	tablat,___ftmul@f2+1
  4557  001B4C  000A               	tblrd		*-
  4558  001B4E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  4559  001B52  0E00               	movlw	0
  4560  001B54  6E0A               	movwf	___awdiv@divisor+1,c
  4561  001B56  0E64               	movlw	100
  4562  001B58  6E09               	movwf	___awdiv@divisor,c
  4563  001B5A  502A               	movf	scale@scl,w,c
  4564  001B5C  6E07               	movwf	___awdiv@dividend,c
  4565  001B5E  6A08               	clrf	___awdiv@dividend+1,c
  4566  001B60  BE07               	btfsc	___awdiv@dividend,7,c
  4567  001B62  0608               	decf	___awdiv@dividend+1,f,c
  4568  001B64  EC56  F015         	call	___awdiv	;wreg free
  4569  001B68  0E12               	movlw	18
  4570  001B6A  2407               	addwf	?___awdiv,w,c
  4571  001B6C  6E0F               	movwf	___wmul@multiplier,c
  4572  001B6E  0E00               	movlw	0
  4573  001B70  2008               	addwfc	?___awdiv+1,w,c
  4574  001B72  6E10               	movwf	___wmul@multiplier+1,c
  4575  001B74  0E00               	movlw	0
  4576  001B76  6E12               	movwf	___wmul@multiplicand+1,c
  4577  001B78  0E03               	movlw	3
  4578  001B7A  6E11               	movwf	___wmul@multiplicand,c
  4579  001B7C  EC79  F017         	call	___wmul	;wreg free
  4580  001B80  0E59               	movlw	low __powers_
  4581  001B82  240F               	addwf	?___wmul,w,c
  4582  001B84  6EF6               	movwf	tblptrl,c
  4583  001B86  0E08               	movlw	high __powers_
  4584  001B88  2010               	addwfc	?___wmul+1,w,c
  4585  001B8A  6EF7               	movwf	tblptrh,c
  4586  001B8C                     	if	0	;There are less than 3 active tblptr bytes
  4587  001B8C                     	endif
  4588  001B8C  0009               	tblrd		*+
  4589  001B8E  CFF5 F015          	movff	tablat,___ftmul@f1
  4590  001B92  0009               	tblrd		*+
  4591  001B94  CFF5 F016          	movff	tablat,___ftmul@f1+1
  4592  001B98  000A               	tblrd		*-
  4593  001B9A  CFF5 F017          	movff	tablat,___ftmul@f1+2
  4594  001B9E  EC83  F012         	call	___ftmul	;wreg free
  4595  001BA2  C015  F027         	movff	?___ftmul,_scale$1298
  4596  001BA6  C016  F028         	movff	?___ftmul+1,_scale$1298+1
  4597  001BAA  C017  F029         	movff	?___ftmul+2,_scale$1298+2
  4598                           
  4599                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4600  001BAE  C027  F015         	movff	_scale$1298,___ftmul@f1
  4601  001BB2  C028  F016         	movff	_scale$1298+1,___ftmul@f1+1
  4602  001BB6  C029  F017         	movff	_scale$1298+2,___ftmul@f1+2
  4603  001BBA  0E00               	movlw	0
  4604  001BBC  6E12               	movwf	___wmul@multiplicand+1,c
  4605  001BBE  0E03               	movlw	3
  4606  001BC0  6E11               	movwf	___wmul@multiplicand,c
  4607  001BC2  0E00               	movlw	0
  4608  001BC4  6E04               	movwf	___awmod@divisor+1,c
  4609  001BC6  0E0A               	movlw	10
  4610  001BC8  6E03               	movwf	___awmod@divisor,c
  4611  001BCA  502A               	movf	scale@scl,w,c
  4612  001BCC  6E01               	movwf	___awmod@dividend,c
  4613  001BCE  6A02               	clrf	___awmod@dividend+1,c
  4614  001BD0  BE01               	btfsc	___awmod@dividend,7,c
  4615  001BD2  0602               	decf	___awmod@dividend+1,f,c
  4616  001BD4  ECD9  F015         	call	___awmod	;wreg free
  4617  001BD8  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4618  001BDC  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4619  001BE0  EC79  F017         	call	___wmul	;wreg free
  4620  001BE4  0E59               	movlw	low __powers_
  4621  001BE6  240F               	addwf	?___wmul,w,c
  4622  001BE8  6EF6               	movwf	tblptrl,c
  4623  001BEA  0E08               	movlw	high __powers_
  4624  001BEC  2010               	addwfc	?___wmul+1,w,c
  4625  001BEE  6EF7               	movwf	tblptrh,c
  4626  001BF0                     	if	0	;There are less than 3 active tblptr bytes
  4627  001BF0                     	endif
  4628  001BF0  0009               	tblrd		*+
  4629  001BF2  CFF5 F018          	movff	tablat,___ftmul@f2
  4630  001BF6  0009               	tblrd		*+
  4631  001BF8  CFF5 F019          	movff	tablat,___ftmul@f2+1
  4632  001BFC  000A               	tblrd		*-
  4633  001BFE  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  4634  001C02  EC83  F012         	call	___ftmul	;wreg free
  4635  001C06  C015  F024         	movff	?___ftmul,?_scale
  4636  001C0A  C016  F025         	movff	?___ftmul+1,?_scale+1
  4637  001C0E  C017  F026         	movff	?___ftmul+2,?_scale+2
  4638  001C12  0012               	return	
  4639  001C14                     l212:
  4640                           
  4641                           ;doprnt.c: 438: else if(scl > 10)
  4642  001C14  502A               	movf	scale@scl,w,c
  4643  001C16  0A80               	xorlw	128
  4644  001C18  0F75               	addlw	-139
  4645  001C1A  A0D8               	btfss	status,0,c
  4646  001C1C  D053               	goto	l214
  4647                           
  4648                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  4649  001C1E  0E00               	movlw	0
  4650  001C20  6E0A               	movwf	___awdiv@divisor+1,c
  4651  001C22  0E0A               	movlw	10
  4652  001C24  6E09               	movwf	___awdiv@divisor,c
  4653  001C26  502A               	movf	scale@scl,w,c
  4654  001C28  6E07               	movwf	___awdiv@dividend,c
  4655  001C2A  6A08               	clrf	___awdiv@dividend+1,c
  4656  001C2C  BE07               	btfsc	___awdiv@dividend,7,c
  4657  001C2E  0608               	decf	___awdiv@dividend+1,f,c
  4658  001C30  EC56  F015         	call	___awdiv	;wreg free
  4659  001C34  0E09               	movlw	9
  4660  001C36  2407               	addwf	?___awdiv,w,c
  4661  001C38  6E0F               	movwf	___wmul@multiplier,c
  4662  001C3A  0E00               	movlw	0
  4663  001C3C  2008               	addwfc	?___awdiv+1,w,c
  4664  001C3E  6E10               	movwf	___wmul@multiplier+1,c
  4665  001C40  0E00               	movlw	0
  4666  001C42  6E12               	movwf	___wmul@multiplicand+1,c
  4667  001C44  0E03               	movlw	3
  4668  001C46  6E11               	movwf	___wmul@multiplicand,c
  4669  001C48  EC79  F017         	call	___wmul	;wreg free
  4670  001C4C  0E59               	movlw	low __powers_
  4671  001C4E  240F               	addwf	?___wmul,w,c
  4672  001C50  6EF6               	movwf	tblptrl,c
  4673  001C52  0E08               	movlw	high __powers_
  4674  001C54  2010               	addwfc	?___wmul+1,w,c
  4675  001C56  6EF7               	movwf	tblptrh,c
  4676  001C58                     	if	0	;There are less than 3 active tblptr bytes
  4677  001C58                     	endif
  4678  001C58  0009               	tblrd		*+
  4679  001C5A  CFF5 F015          	movff	tablat,___ftmul@f1
  4680  001C5E  0009               	tblrd		*+
  4681  001C60  CFF5 F016          	movff	tablat,___ftmul@f1+1
  4682  001C64  000A               	tblrd		*-
  4683  001C66  CFF5 F017          	movff	tablat,___ftmul@f1+2
  4684  001C6A  0E00               	movlw	0
  4685  001C6C  6E12               	movwf	___wmul@multiplicand+1,c
  4686  001C6E  0E03               	movlw	3
  4687  001C70  6E11               	movwf	___wmul@multiplicand,c
  4688  001C72  0E00               	movlw	0
  4689  001C74  6E04               	movwf	___awmod@divisor+1,c
  4690  001C76  0E0A               	movlw	10
  4691  001C78  6E03               	movwf	___awmod@divisor,c
  4692  001C7A  502A               	movf	scale@scl,w,c
  4693  001C7C  6E01               	movwf	___awmod@dividend,c
  4694  001C7E  6A02               	clrf	___awmod@dividend+1,c
  4695  001C80  BE01               	btfsc	___awmod@dividend,7,c
  4696  001C82  0602               	decf	___awmod@dividend+1,f,c
  4697  001C84  ECD9  F015         	call	___awmod	;wreg free
  4698  001C88  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4699  001C8C  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4700  001C90  EC79  F017         	call	___wmul	;wreg free
  4701  001C94  0E59               	movlw	low __powers_
  4702  001C96  240F               	addwf	?___wmul,w,c
  4703  001C98  6EF6               	movwf	tblptrl,c
  4704  001C9A  0E08               	movlw	high __powers_
  4705  001C9C  2010               	addwfc	?___wmul+1,w,c
  4706  001C9E  6EF7               	movwf	tblptrh,c
  4707  001CA0                     	if	0	;There are less than 3 active tblptr bytes
  4708  001CA0                     	endif
  4709  001CA0  0009               	tblrd		*+
  4710  001CA2  CFF5 F018          	movff	tablat,___ftmul@f2
  4711  001CA6  0009               	tblrd		*+
  4712  001CA8  CFF5 F019          	movff	tablat,___ftmul@f2+1
  4713  001CAC  000A               	tblrd		*-
  4714  001CAE  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  4715  001CB2  EC83  F012         	call	___ftmul	;wreg free
  4716  001CB6  C015  F024         	movff	?___ftmul,?_scale
  4717  001CBA  C016  F025         	movff	?___ftmul+1,?_scale+1
  4718  001CBE  C017  F026         	movff	?___ftmul+2,?_scale+2
  4719  001CC2  0012               	return	
  4720  001CC4                     l214:
  4721                           
  4722                           ;doprnt.c: 440: return _powers_[scl];
  4723  001CC4  502A               	movf	scale@scl,w,c
  4724  001CC6  0D03               	mullw	3
  4725  001CC8  0E59               	movlw	low __powers_
  4726  001CCA  24F3               	addwf	prodl,w,c
  4727  001CCC  6EF6               	movwf	tblptrl,c
  4728  001CCE  0E08               	movlw	high __powers_
  4729  001CD0  20F4               	addwfc	prodh,w,c
  4730  001CD2  6EF7               	movwf	tblptrh,c
  4731  001CD4                     	if	0	;There are less than 3 active tblptr bytes
  4732  001CD4                     	endif
  4733  001CD4  0009               	tblrd		*+
  4734  001CD6  CFF5 F024          	movff	tablat,?_scale
  4735  001CDA  0009               	tblrd		*+
  4736  001CDC  CFF5 F025          	movff	tablat,?_scale+1
  4737  001CE0  000A               	tblrd		*-
  4738  001CE2  CFF5 F026          	movff	tablat,?_scale+2
  4739  001CE6  0012               	return	
  4740  001CE8                     __end_of_scale:
  4741                           	opt stack 0
  4742                           tblptru	equ	0xFF8
  4743                           tblptrh	equ	0xFF7
  4744                           tblptrl	equ	0xFF6
  4745                           tablat	equ	0xFF5
  4746                           prodh	equ	0xFF4
  4747                           prodl	equ	0xFF3
  4748                           wreg	equ	0xFE8
  4749                           indf1	equ	0xFE7
  4750                           fsr1h	equ	0xFE2
  4751                           fsr1l	equ	0xFE1
  4752                           indf2	equ	0xFDF
  4753                           postinc2	equ	0xFDE
  4754                           postdec2	equ	0xFDD
  4755                           fsr2h	equ	0xFDA
  4756                           fsr2l	equ	0xFD9
  4757                           status	equ	0xFD8
  4758                           
  4759 ;; *************** function _isdigit *****************
  4760 ;; Defined at:
  4761 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  4762 ;; Parameters:    Size  Location     Type
  4763 ;;  c               1    wreg     unsigned char 
  4764 ;; Auto vars:     Size  Location     Type
  4765 ;;  c               1    2[COMRAM] unsigned char 
  4766 ;; Return value:  Size  Location     Type
  4767 ;;		None               void
  4768 ;; Registers used:
  4769 ;;		wreg, status,2, status,0
  4770 ;; Tracked objects:
  4771 ;;		On entry : 0/0
  4772 ;;		On exit  : 0/0
  4773 ;;		Unchanged: 0/0
  4774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4775 ;;      Params:         0       0       0       0       0       0       0       0       0
  4776 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4777 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4778 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4779 ;;Total ram usage:        3 bytes
  4780 ;; Hardware stack levels used:    1
  4781 ;; This function calls:
  4782 ;;		Nothing
  4783 ;; This function is called by:
  4784 ;;		_sprintf
  4785 ;; This function uses a non-reentrant model
  4786 ;;
  4787                           
  4788                           	psect	text3
  4789  002F3C                     __ptext3:
  4790                           	opt stack 0
  4791  002F3C                     _isdigit:
  4792                           	opt stack 29
  4793                           
  4794                           ;incstack = 0
  4795                           ;isdigit@c stored from wreg
  4796  002F3C  6E03               	movwf	isdigit@c,c
  4797  002F3E  0E00               	movlw	0
  4798  002F40  6E02               	movwf	_isdigit$936,c
  4799  002F42  0E3A               	movlw	58
  4800  002F44  6003               	cpfslt	isdigit@c,c
  4801  002F46  D005               	goto	l781
  4802  002F48  0E2F               	movlw	47
  4803  002F4A  6403               	cpfsgt	isdigit@c,c
  4804  002F4C  D002               	goto	l781
  4805  002F4E  0E01               	movlw	1
  4806  002F50  6E02               	movwf	_isdigit$936,c
  4807  002F52                     l781:
  4808  002F52  C002  F001         	movff	_isdigit$936,??_isdigit
  4809  002F56  3001               	rrcf	??_isdigit,w,c
  4810  002F58  0012               	return	
  4811  002F5A                     __end_of_isdigit:
  4812                           	opt stack 0
  4813                           tblptru	equ	0xFF8
  4814                           tblptrh	equ	0xFF7
  4815                           tblptrl	equ	0xFF6
  4816                           tablat	equ	0xFF5
  4817                           prodh	equ	0xFF4
  4818                           prodl	equ	0xFF3
  4819                           wreg	equ	0xFE8
  4820                           indf1	equ	0xFE7
  4821                           fsr1h	equ	0xFE2
  4822                           fsr1l	equ	0xFE1
  4823                           indf2	equ	0xFDF
  4824                           postinc2	equ	0xFDE
  4825                           postdec2	equ	0xFDD
  4826                           fsr2h	equ	0xFDA
  4827                           fsr2l	equ	0xFD9
  4828                           status	equ	0xFD8
  4829                           
  4830 ;; *************** function _fround *****************
  4831 ;; Defined at:
  4832 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  4833 ;; Parameters:    Size  Location     Type
  4834 ;;  prec            1    wreg     unsigned char 
  4835 ;; Auto vars:     Size  Location     Type
  4836 ;;  prec            1   44[COMRAM] unsigned char 
  4837 ;; Return value:  Size  Location     Type
  4838 ;;                  3   35[COMRAM] unsigned char 
  4839 ;; Registers used:
  4840 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4841 ;; Tracked objects:
  4842 ;;		On entry : 0/0
  4843 ;;		On exit  : 0/0
  4844 ;;		Unchanged: 0/0
  4845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4846 ;;      Params:         3       0       0       0       0       0       0       0       0
  4847 ;;      Locals:         7       0       0       0       0       0       0       0       0
  4848 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4849 ;;      Totals:        10       0       0       0       0       0       0       0       0
  4850 ;;Total ram usage:       10 bytes
  4851 ;; Hardware stack levels used:    1
  4852 ;; Hardware stack levels required when called:    2
  4853 ;; This function calls:
  4854 ;;		___awdiv
  4855 ;;		___awmod
  4856 ;;		___ftmul
  4857 ;;		___wmul
  4858 ;; This function is called by:
  4859 ;;		_sprintf
  4860 ;; This function uses a non-reentrant model
  4861 ;;
  4862                           
  4863                           	psect	text4
  4864  001CE8                     __ptext4:
  4865                           	opt stack 0
  4866  001CE8                     _fround:
  4867                           	opt stack 27
  4868                           
  4869                           ;incstack = 0
  4870                           ;fround@prec stored from wreg
  4871  001CE8  6E2D               	movwf	fround@prec,c
  4872                           
  4873                           ;doprnt.c: 413: if(prec>=110)
  4874  001CEA  0E6D               	movlw	109
  4875  001CEC  642D               	cpfsgt	fround@prec,c
  4876  001CEE  D09F               	goto	l201
  4877                           
  4878                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4879  001CF0  0E00               	movlw	0
  4880  001CF2  6E12               	movwf	___wmul@multiplicand+1,c
  4881  001CF4  0E03               	movlw	3
  4882  001CF6  6E11               	movwf	___wmul@multiplicand,c
  4883  001CF8  0E00               	movlw	0
  4884  001CFA  6E0A               	movwf	___awdiv@divisor+1,c
  4885  001CFC  0E0A               	movlw	10
  4886  001CFE  6E09               	movwf	___awdiv@divisor,c
  4887  001D00  0E00               	movlw	0
  4888  001D02  6E04               	movwf	___awmod@divisor+1,c
  4889  001D04  0E64               	movlw	100
  4890  001D06  6E03               	movwf	___awmod@divisor,c
  4891  001D08  C02D  F001         	movff	fround@prec,___awmod@dividend
  4892  001D0C  6A02               	clrf	___awmod@dividend+1,c
  4893  001D0E  ECD9  F015         	call	___awmod	;wreg free
  4894  001D12  C001  F007         	movff	?___awmod,___awdiv@dividend
  4895  001D16  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  4896  001D1A  EC56  F015         	call	___awdiv	;wreg free
  4897  001D1E  0E09               	movlw	9
  4898  001D20  2407               	addwf	?___awdiv,w,c
  4899  001D22  6E0F               	movwf	___wmul@multiplier,c
  4900  001D24  0E00               	movlw	0
  4901  001D26  2008               	addwfc	?___awdiv+1,w,c
  4902  001D28  6E10               	movwf	___wmul@multiplier+1,c
  4903  001D2A  EC79  F017         	call	___wmul	;wreg free
  4904  001D2E  0E80               	movlw	low __npowers_
  4905  001D30  240F               	addwf	?___wmul,w,c
  4906  001D32  6EF6               	movwf	tblptrl,c
  4907  001D34  0E08               	movlw	high __npowers_
  4908  001D36  2010               	addwfc	?___wmul+1,w,c
  4909  001D38  6EF7               	movwf	tblptrh,c
  4910  001D3A                     	if	0	;There are less than 3 active tblptr bytes
  4911  001D3A                     	endif
  4912  001D3A  0009               	tblrd		*+
  4913  001D3C  CFF5 F018          	movff	tablat,___ftmul@f2
  4914  001D40  0009               	tblrd		*+
  4915  001D42  CFF5 F019          	movff	tablat,___ftmul@f2+1
  4916  001D46  000A               	tblrd		*-
  4917  001D48  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  4918  001D4C  0E00               	movlw	0
  4919  001D4E  6E0A               	movwf	___awdiv@divisor+1,c
  4920  001D50  0E64               	movlw	100
  4921  001D52  6E09               	movwf	___awdiv@divisor,c
  4922  001D54  C02D  F007         	movff	fround@prec,___awdiv@dividend
  4923  001D58  6A08               	clrf	___awdiv@dividend+1,c
  4924  001D5A  EC56  F015         	call	___awdiv	;wreg free
  4925  001D5E  0E12               	movlw	18
  4926  001D60  2407               	addwf	?___awdiv,w,c
  4927  001D62  6E0F               	movwf	___wmul@multiplier,c
  4928  001D64  0E00               	movlw	0
  4929  001D66  2008               	addwfc	?___awdiv+1,w,c
  4930  001D68  6E10               	movwf	___wmul@multiplier+1,c
  4931  001D6A  0E00               	movlw	0
  4932  001D6C  6E12               	movwf	___wmul@multiplicand+1,c
  4933  001D6E  0E03               	movlw	3
  4934  001D70  6E11               	movwf	___wmul@multiplicand,c
  4935  001D72  EC79  F017         	call	___wmul	;wreg free
  4936  001D76  0E80               	movlw	low __npowers_
  4937  001D78  240F               	addwf	?___wmul,w,c
  4938  001D7A  6EF6               	movwf	tblptrl,c
  4939  001D7C  0E08               	movlw	high __npowers_
  4940  001D7E  2010               	addwfc	?___wmul+1,w,c
  4941  001D80  6EF7               	movwf	tblptrh,c
  4942  001D82                     	if	0	;There are less than 3 active tblptr bytes
  4943  001D82                     	endif
  4944  001D82  0009               	tblrd		*+
  4945  001D84  CFF5 F015          	movff	tablat,___ftmul@f1
  4946  001D88  0009               	tblrd		*+
  4947  001D8A  CFF5 F016          	movff	tablat,___ftmul@f1+1
  4948  001D8E  000A               	tblrd		*-
  4949  001D90  CFF5 F017          	movff	tablat,___ftmul@f1+2
  4950  001D94  EC83  F012         	call	___ftmul	;wreg free
  4951  001D98  C015  F02A         	movff	?___ftmul,_fround$1296
  4952  001D9C  C016  F02B         	movff	?___ftmul+1,_fround$1296+1
  4953  001DA0  C017  F02C         	movff	?___ftmul+2,_fround$1296+2
  4954                           
  4955                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4956  001DA4  0E00               	movlw	0
  4957  001DA6  6E12               	movwf	___wmul@multiplicand+1,c
  4958  001DA8  0E03               	movlw	3
  4959  001DAA  6E11               	movwf	___wmul@multiplicand,c
  4960  001DAC  0E00               	movlw	0
  4961  001DAE  6E04               	movwf	___awmod@divisor+1,c
  4962  001DB0  0E0A               	movlw	10
  4963  001DB2  6E03               	movwf	___awmod@divisor,c
  4964  001DB4  C02D  F001         	movff	fround@prec,___awmod@dividend
  4965  001DB8  6A02               	clrf	___awmod@dividend+1,c
  4966  001DBA  ECD9  F015         	call	___awmod	;wreg free
  4967  001DBE  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4968  001DC2  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4969  001DC6  EC79  F017         	call	___wmul	;wreg free
  4970  001DCA  0E80               	movlw	low __npowers_
  4971  001DCC  240F               	addwf	?___wmul,w,c
  4972  001DCE  6EF6               	movwf	tblptrl,c
  4973  001DD0  0E08               	movlw	high __npowers_
  4974  001DD2  2010               	addwfc	?___wmul+1,w,c
  4975  001DD4  6EF7               	movwf	tblptrh,c
  4976  001DD6                     	if	0	;There are less than 3 active tblptr bytes
  4977  001DD6                     	endif
  4978  001DD6  0009               	tblrd		*+
  4979  001DD8  CFF5 F018          	movff	tablat,___ftmul@f2
  4980  001DDC  0009               	tblrd		*+
  4981  001DDE  CFF5 F019          	movff	tablat,___ftmul@f2+1
  4982  001DE2  000A               	tblrd		*-
  4983  001DE4  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  4984  001DE8  C02A  F015         	movff	_fround$1296,___ftmul@f1
  4985  001DEC  C02B  F016         	movff	_fround$1296+1,___ftmul@f1+1
  4986  001DF0  C02C  F017         	movff	_fround$1296+2,___ftmul@f1+2
  4987  001DF4  EC83  F012         	call	___ftmul	;wreg free
  4988  001DF8  C015  F027         	movff	?___ftmul,_fround$1297
  4989  001DFC  C016  F028         	movff	?___ftmul+1,_fround$1297+1
  4990  001E00  C017  F029         	movff	?___ftmul+2,_fround$1297+2
  4991                           
  4992                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4993  001E04  C027  F015         	movff	_fround$1297,___ftmul@f1
  4994  001E08  C028  F016         	movff	_fround$1297+1,___ftmul@f1+1
  4995  001E0C  C029  F017         	movff	_fround$1297+2,___ftmul@f1+2
  4996  001E10  0E00               	movlw	0
  4997  001E12  6E18               	movwf	___ftmul@f2,c
  4998  001E14  0E00               	movlw	0
  4999  001E16  6E19               	movwf	___ftmul@f2+1,c
  5000  001E18  0E3F               	movlw	63
  5001  001E1A  6E1A               	movwf	___ftmul@f2+2,c
  5002  001E1C  EC83  F012         	call	___ftmul	;wreg free
  5003  001E20  C015  F024         	movff	?___ftmul,?_fround
  5004  001E24  C016  F025         	movff	?___ftmul+1,?_fround+1
  5005  001E28  C017  F026         	movff	?___ftmul+2,?_fround+2
  5006  001E2C  0012               	return	
  5007  001E2E                     l201:
  5008                           
  5009                           ;doprnt.c: 415: else if(prec > 10)
  5010  001E2E  0E0A               	movlw	10
  5011  001E30  642D               	cpfsgt	fround@prec,c
  5012  001E32  D063               	goto	l204
  5013                           
  5014                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5015  001E34  0E00               	movlw	0
  5016  001E36  6E12               	movwf	___wmul@multiplicand+1,c
  5017  001E38  0E03               	movlw	3
  5018  001E3A  6E11               	movwf	___wmul@multiplicand,c
  5019  001E3C  0E00               	movlw	0
  5020  001E3E  6E04               	movwf	___awmod@divisor+1,c
  5021  001E40  0E0A               	movlw	10
  5022  001E42  6E03               	movwf	___awmod@divisor,c
  5023  001E44  C02D  F001         	movff	fround@prec,___awmod@dividend
  5024  001E48  6A02               	clrf	___awmod@dividend+1,c
  5025  001E4A  ECD9  F015         	call	___awmod	;wreg free
  5026  001E4E  C001  F00F         	movff	?___awmod,___wmul@multiplier
  5027  001E52  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  5028  001E56  EC79  F017         	call	___wmul	;wreg free
  5029  001E5A  0E80               	movlw	low __npowers_
  5030  001E5C  240F               	addwf	?___wmul,w,c
  5031  001E5E  6EF6               	movwf	tblptrl,c
  5032  001E60  0E08               	movlw	high __npowers_
  5033  001E62  2010               	addwfc	?___wmul+1,w,c
  5034  001E64  6EF7               	movwf	tblptrh,c
  5035  001E66                     	if	0	;There are less than 3 active tblptr bytes
  5036  001E66                     	endif
  5037  001E66  0009               	tblrd		*+
  5038  001E68  CFF5 F018          	movff	tablat,___ftmul@f2
  5039  001E6C  0009               	tblrd		*+
  5040  001E6E  CFF5 F019          	movff	tablat,___ftmul@f2+1
  5041  001E72  000A               	tblrd		*-
  5042  001E74  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  5043  001E78  0E00               	movlw	0
  5044  001E7A  6E0A               	movwf	___awdiv@divisor+1,c
  5045  001E7C  0E0A               	movlw	10
  5046  001E7E  6E09               	movwf	___awdiv@divisor,c
  5047  001E80  C02D  F007         	movff	fround@prec,___awdiv@dividend
  5048  001E84  6A08               	clrf	___awdiv@dividend+1,c
  5049  001E86  EC56  F015         	call	___awdiv	;wreg free
  5050  001E8A  0E09               	movlw	9
  5051  001E8C  2407               	addwf	?___awdiv,w,c
  5052  001E8E  6E0F               	movwf	___wmul@multiplier,c
  5053  001E90  0E00               	movlw	0
  5054  001E92  2008               	addwfc	?___awdiv+1,w,c
  5055  001E94  6E10               	movwf	___wmul@multiplier+1,c
  5056  001E96  0E00               	movlw	0
  5057  001E98  6E12               	movwf	___wmul@multiplicand+1,c
  5058  001E9A  0E03               	movlw	3
  5059  001E9C  6E11               	movwf	___wmul@multiplicand,c
  5060  001E9E  EC79  F017         	call	___wmul	;wreg free
  5061  001EA2  0E80               	movlw	low __npowers_
  5062  001EA4  240F               	addwf	?___wmul,w,c
  5063  001EA6  6EF6               	movwf	tblptrl,c
  5064  001EA8  0E08               	movlw	high __npowers_
  5065  001EAA  2010               	addwfc	?___wmul+1,w,c
  5066  001EAC  6EF7               	movwf	tblptrh,c
  5067  001EAE                     	if	0	;There are less than 3 active tblptr bytes
  5068  001EAE                     	endif
  5069  001EAE  0009               	tblrd		*+
  5070  001EB0  CFF5 F015          	movff	tablat,___ftmul@f1
  5071  001EB4  0009               	tblrd		*+
  5072  001EB6  CFF5 F016          	movff	tablat,___ftmul@f1+1
  5073  001EBA  000A               	tblrd		*-
  5074  001EBC  CFF5 F017          	movff	tablat,___ftmul@f1+2
  5075  001EC0  EC83  F012         	call	___ftmul	;wreg free
  5076  001EC4  C015  F02A         	movff	?___ftmul,_fround$1296
  5077  001EC8  C016  F02B         	movff	?___ftmul+1,_fround$1296+1
  5078  001ECC  C017  F02C         	movff	?___ftmul+2,_fround$1296+2
  5079                           
  5080                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5081  001ED0  C02A  F015         	movff	_fround$1296,___ftmul@f1
  5082  001ED4  C02B  F016         	movff	_fround$1296+1,___ftmul@f1+1
  5083  001ED8  C02C  F017         	movff	_fround$1296+2,___ftmul@f1+2
  5084  001EDC  0E00               	movlw	0
  5085  001EDE  6E18               	movwf	___ftmul@f2,c
  5086  001EE0  0E00               	movlw	0
  5087  001EE2  6E19               	movwf	___ftmul@f2+1,c
  5088  001EE4  0E3F               	movlw	63
  5089  001EE6  6E1A               	movwf	___ftmul@f2+2,c
  5090  001EE8  EC83  F012         	call	___ftmul	;wreg free
  5091  001EEC  C015  F024         	movff	?___ftmul,?_fround
  5092  001EF0  C016  F025         	movff	?___ftmul+1,?_fround+1
  5093  001EF4  C017  F026         	movff	?___ftmul+2,?_fround+2
  5094  001EF8  0012               	return	
  5095  001EFA                     l204:
  5096                           
  5097                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  5098  001EFA  502D               	movf	fround@prec,w,c
  5099  001EFC  0D03               	mullw	3
  5100  001EFE  0E80               	movlw	low __npowers_
  5101  001F00  24F3               	addwf	prodl,w,c
  5102  001F02  6EF6               	movwf	tblptrl,c
  5103  001F04  0E08               	movlw	high __npowers_
  5104  001F06  20F4               	addwfc	prodh,w,c
  5105  001F08  6EF7               	movwf	tblptrh,c
  5106  001F0A                     	if	0	;There are less than 3 active tblptr bytes
  5107  001F0A                     	endif
  5108  001F0A  0009               	tblrd		*+
  5109  001F0C  CFF5 F015          	movff	tablat,___ftmul@f1
  5110  001F10  0009               	tblrd		*+
  5111  001F12  CFF5 F016          	movff	tablat,___ftmul@f1+1
  5112  001F16  000A               	tblrd		*-
  5113  001F18  CFF5 F017          	movff	tablat,___ftmul@f1+2
  5114  001F1C  0E00               	movlw	0
  5115  001F1E  6E18               	movwf	___ftmul@f2,c
  5116  001F20  0E00               	movlw	0
  5117  001F22  6E19               	movwf	___ftmul@f2+1,c
  5118  001F24  0E3F               	movlw	63
  5119  001F26  6E1A               	movwf	___ftmul@f2+2,c
  5120  001F28  EC83  F012         	call	___ftmul	;wreg free
  5121  001F2C  C015  F024         	movff	?___ftmul,?_fround
  5122  001F30  C016  F025         	movff	?___ftmul+1,?_fround+1
  5123  001F34  C017  F026         	movff	?___ftmul+2,?_fround+2
  5124  001F38  0012               	return	
  5125  001F3A                     __end_of_fround:
  5126                           	opt stack 0
  5127                           tblptru	equ	0xFF8
  5128                           tblptrh	equ	0xFF7
  5129                           tblptrl	equ	0xFF6
  5130                           tablat	equ	0xFF5
  5131                           prodh	equ	0xFF4
  5132                           prodl	equ	0xFF3
  5133                           wreg	equ	0xFE8
  5134                           indf1	equ	0xFE7
  5135                           fsr1h	equ	0xFE2
  5136                           fsr1l	equ	0xFE1
  5137                           indf2	equ	0xFDF
  5138                           postinc2	equ	0xFDE
  5139                           postdec2	equ	0xFDD
  5140                           fsr2h	equ	0xFDA
  5141                           fsr2l	equ	0xFD9
  5142                           status	equ	0xFD8
  5143                           
  5144 ;; *************** function ___wmul *****************
  5145 ;; Defined at:
  5146 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  5147 ;; Parameters:    Size  Location     Type
  5148 ;;  multiplier      2   14[COMRAM] unsigned int 
  5149 ;;  multiplicand    2   16[COMRAM] unsigned int 
  5150 ;; Auto vars:     Size  Location     Type
  5151 ;;  product         2   18[COMRAM] unsigned int 
  5152 ;; Return value:  Size  Location     Type
  5153 ;;                  2   14[COMRAM] unsigned int 
  5154 ;; Registers used:
  5155 ;;		wreg, status,2, status,0, prodl, prodh
  5156 ;; Tracked objects:
  5157 ;;		On entry : 0/0
  5158 ;;		On exit  : 0/0
  5159 ;;		Unchanged: 0/0
  5160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5161 ;;      Params:         4       0       0       0       0       0       0       0       0
  5162 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5163 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5164 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5165 ;;Total ram usage:        6 bytes
  5166 ;; Hardware stack levels used:    1
  5167 ;; This function calls:
  5168 ;;		Nothing
  5169 ;; This function is called by:
  5170 ;;		_fround
  5171 ;;		_scale
  5172 ;;		_sprintf
  5173 ;; This function uses a non-reentrant model
  5174 ;;
  5175                           
  5176                           	psect	text5
  5177  002EF2                     __ptext5:
  5178                           	opt stack 0
  5179  002EF2                     ___wmul:
  5180                           	opt stack 28
  5181                           
  5182                           ;incstack = 0
  5183  002EF2  500F               	movf	___wmul@multiplier,w,c
  5184  002EF4  0211               	mulwf	___wmul@multiplicand,c
  5185  002EF6  CFF3 F013          	movff	prodl,___wmul@product
  5186  002EFA  CFF4 F014          	movff	prodh,___wmul@product+1
  5187  002EFE  500F               	movf	___wmul@multiplier,w,c
  5188  002F00  0212               	mulwf	___wmul@multiplicand+1,c
  5189  002F02  50F3               	movf	prodl,w,c
  5190  002F04  2614               	addwf	___wmul@product+1,f,c
  5191  002F06  5010               	movf	___wmul@multiplier+1,w,c
  5192  002F08  0211               	mulwf	___wmul@multiplicand,c
  5193  002F0A  50F3               	movf	prodl,w,c
  5194  002F0C  2614               	addwf	___wmul@product+1,f,c
  5195  002F0E  C013  F00F         	movff	___wmul@product,?___wmul
  5196  002F12  C014  F010         	movff	___wmul@product+1,?___wmul+1
  5197  002F16  0012               	return	
  5198  002F18                     __end_of___wmul:
  5199                           	opt stack 0
  5200                           tblptru	equ	0xFF8
  5201                           tblptrh	equ	0xFF7
  5202                           tblptrl	equ	0xFF6
  5203                           tablat	equ	0xFF5
  5204                           prodh	equ	0xFF4
  5205                           prodl	equ	0xFF3
  5206                           wreg	equ	0xFE8
  5207                           indf1	equ	0xFE7
  5208                           fsr1h	equ	0xFE2
  5209                           fsr1l	equ	0xFE1
  5210                           indf2	equ	0xFDF
  5211                           postinc2	equ	0xFDE
  5212                           postdec2	equ	0xFDD
  5213                           fsr2h	equ	0xFDA
  5214                           fsr2l	equ	0xFD9
  5215                           status	equ	0xFD8
  5216                           
  5217 ;; *************** function ___ftmul *****************
  5218 ;; Defined at:
  5219 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  5220 ;; Parameters:    Size  Location     Type
  5221 ;;  f1              3   20[COMRAM] float 
  5222 ;;  f2              3   23[COMRAM] float 
  5223 ;; Auto vars:     Size  Location     Type
  5224 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  5225 ;;  sign            1   34[COMRAM] unsigned char 
  5226 ;;  cntr            1   33[COMRAM] unsigned char 
  5227 ;;  exp             1   29[COMRAM] unsigned char 
  5228 ;; Return value:  Size  Location     Type
  5229 ;;                  3   20[COMRAM] float 
  5230 ;; Registers used:
  5231 ;;		wreg, status,2, status,0, cstack
  5232 ;; Tracked objects:
  5233 ;;		On entry : 0/0
  5234 ;;		On exit  : 0/0
  5235 ;;		Unchanged: 0/0
  5236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5237 ;;      Params:         6       0       0       0       0       0       0       0       0
  5238 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5239 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5240 ;;      Totals:        15       0       0       0       0       0       0       0       0
  5241 ;;Total ram usage:       15 bytes
  5242 ;; Hardware stack levels used:    1
  5243 ;; Hardware stack levels required when called:    1
  5244 ;; This function calls:
  5245 ;;		___ftpack
  5246 ;; This function is called by:
  5247 ;;		_fround
  5248 ;;		_scale
  5249 ;;		_sprintf
  5250 ;; This function uses a non-reentrant model
  5251 ;;
  5252                           
  5253                           	psect	text6
  5254  002506                     __ptext6:
  5255                           	opt stack 0
  5256  002506                     ___ftmul:
  5257                           	opt stack 27
  5258                           
  5259                           ;incstack = 0
  5260  002506  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  5261  00250A  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  5262  00250C  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  5263  00250E  3416               	rlcf	___ftmul@f1+1,w,c
  5264  002510  361B               	rlcf	??___ftmul& (0+255),f,c
  5265  002512  E301               	bnc	u2701
  5266  002514  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  5267  002516                     u2701:
  5268  002516  501B               	movf	??___ftmul,w,c
  5269  002518  6E1E               	movwf	___ftmul@exp,c
  5270  00251A  501E               	movf	___ftmul@exp,w,c
  5271  00251C  A4D8               	btfss	status,2,c
  5272  00251E  D007               	goto	l745
  5273  002520  0E00               	movlw	0
  5274  002522  6E15               	movwf	?___ftmul,c
  5275  002524  0E00               	movlw	0
  5276  002526  6E16               	movwf	?___ftmul+1,c
  5277  002528  0E00               	movlw	0
  5278  00252A  6E17               	movwf	?___ftmul+2,c
  5279  00252C  0012               	return	
  5280  00252E                     l745:
  5281  00252E  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  5282  002532  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  5283  002534  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  5284  002536  3419               	rlcf	___ftmul@f2+1,w,c
  5285  002538  361B               	rlcf	??___ftmul& (0+255),f,c
  5286  00253A  E301               	bnc	u2721
  5287  00253C  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  5288  00253E                     u2721:
  5289  00253E  501B               	movf	??___ftmul,w,c
  5290  002540  6E23               	movwf	___ftmul@sign,c
  5291  002542  5023               	movf	___ftmul@sign,w,c
  5292  002544  A4D8               	btfss	status,2,c
  5293  002546  D007               	goto	l747
  5294  002548  0E00               	movlw	0
  5295  00254A  6E15               	movwf	?___ftmul,c
  5296  00254C  0E00               	movlw	0
  5297  00254E  6E16               	movwf	?___ftmul+1,c
  5298  002550  0E00               	movlw	0
  5299  002552  6E17               	movwf	?___ftmul+2,c
  5300  002554  0012               	return	
  5301  002556                     l747:
  5302  002556  5023               	movf	___ftmul@sign,w,c
  5303  002558  0F7B               	addlw	123
  5304  00255A  261E               	addwf	___ftmul@exp,f,c
  5305  00255C  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  5306  002560  501A               	movf	___ftmul@f2+2,w,c
  5307  002562  1A23               	xorwf	___ftmul@sign,f,c
  5308  002564  0E80               	movlw	128
  5309  002566  1623               	andwf	___ftmul@sign,f,c
  5310  002568  8E16               	bsf	___ftmul@f1+1,7,c
  5311  00256A  8E19               	bsf	___ftmul@f2+1,7,c
  5312  00256C  0EFF               	movlw	255
  5313  00256E  1618               	andwf	___ftmul@f2,f,c
  5314  002570  0EFF               	movlw	255
  5315  002572  1619               	andwf	___ftmul@f2+1,f,c
  5316  002574  0E00               	movlw	0
  5317  002576  161A               	andwf	___ftmul@f2+2,f,c
  5318  002578  0E00               	movlw	0
  5319  00257A  6E1F               	movwf	___ftmul@f3_as_product,c
  5320  00257C  0E00               	movlw	0
  5321  00257E  6E20               	movwf	___ftmul@f3_as_product+1,c
  5322  002580  0E00               	movlw	0
  5323  002582  6E21               	movwf	___ftmul@f3_as_product+2,c
  5324  002584  0E07               	movlw	7
  5325  002586  6E22               	movwf	___ftmul@cntr,c
  5326  002588  A015               	btfss	___ftmul@f1,0,c
  5327  00258A  D006               	goto	l749
  5328  00258C  5018               	movf	___ftmul@f2,w,c
  5329  00258E  261F               	addwf	___ftmul@f3_as_product,f,c
  5330  002590  5019               	movf	___ftmul@f2+1,w,c
  5331  002592  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  5332  002594  501A               	movf	___ftmul@f2+2,w,c
  5333  002596  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  5334  002598                     l749:
  5335  002598  90D8               	bcf	status,0,c
  5336  00259A  3217               	rrcf	___ftmul@f1+2,f,c
  5337  00259C  3216               	rrcf	___ftmul@f1+1,f,c
  5338  00259E  3215               	rrcf	___ftmul@f1,f,c
  5339  0025A0  90D8               	bcf	status,0,c
  5340  0025A2  3618               	rlcf	___ftmul@f2,f,c
  5341  0025A4  3619               	rlcf	___ftmul@f2+1,f,c
  5342  0025A6  361A               	rlcf	___ftmul@f2+2,f,c
  5343  0025A8  2E22               	decfsz	___ftmul@cntr,f,c
  5344  0025AA  D7EE               	goto	l748
  5345  0025AC  0E09               	movlw	9
  5346  0025AE  6E22               	movwf	___ftmul@cntr,c
  5347  0025B0  A015               	btfss	___ftmul@f1,0,c
  5348  0025B2  D006               	goto	l752
  5349  0025B4  5018               	movf	___ftmul@f2,w,c
  5350  0025B6  261F               	addwf	___ftmul@f3_as_product,f,c
  5351  0025B8  5019               	movf	___ftmul@f2+1,w,c
  5352  0025BA  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  5353  0025BC  501A               	movf	___ftmul@f2+2,w,c
  5354  0025BE  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  5355  0025C0                     l752:
  5356  0025C0  90D8               	bcf	status,0,c
  5357  0025C2  3217               	rrcf	___ftmul@f1+2,f,c
  5358  0025C4  3216               	rrcf	___ftmul@f1+1,f,c
  5359  0025C6  3215               	rrcf	___ftmul@f1,f,c
  5360  0025C8  90D8               	bcf	status,0,c
  5361  0025CA  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  5362  0025CC  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  5363  0025CE  321F               	rrcf	___ftmul@f3_as_product,f,c
  5364  0025D0  2E22               	decfsz	___ftmul@cntr,f,c
  5365  0025D2  D7EE               	goto	l751
  5366  0025D4  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  5367  0025D8  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5368  0025DC  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5369  0025E0  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  5370  0025E4  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  5371  0025E8  ECB7  F014         	call	___ftpack	;wreg free
  5372  0025EC  C001  F015         	movff	?___ftpack,?___ftmul
  5373  0025F0  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  5374  0025F4  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  5375  0025F8  0012               	return	
  5376  0025FA                     __end_of___ftmul:
  5377                           	opt stack 0
  5378                           tblptru	equ	0xFF8
  5379                           tblptrh	equ	0xFF7
  5380                           tblptrl	equ	0xFF6
  5381                           tablat	equ	0xFF5
  5382                           prodh	equ	0xFF4
  5383                           prodl	equ	0xFF3
  5384                           wreg	equ	0xFE8
  5385                           indf1	equ	0xFE7
  5386                           fsr1h	equ	0xFE2
  5387                           fsr1l	equ	0xFE1
  5388                           indf2	equ	0xFDF
  5389                           postinc2	equ	0xFDE
  5390                           postdec2	equ	0xFDD
  5391                           fsr2h	equ	0xFDA
  5392                           fsr2l	equ	0xFD9
  5393                           status	equ	0xFD8
  5394                           
  5395 ;; *************** function ___awmod *****************
  5396 ;; Defined at:
  5397 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  5398 ;; Parameters:    Size  Location     Type
  5399 ;;  dividend        2    0[COMRAM] int 
  5400 ;;  divisor         2    2[COMRAM] int 
  5401 ;; Auto vars:     Size  Location     Type
  5402 ;;  sign            1    5[COMRAM] unsigned char 
  5403 ;;  counter         1    4[COMRAM] unsigned char 
  5404 ;; Return value:  Size  Location     Type
  5405 ;;                  2    0[COMRAM] int 
  5406 ;; Registers used:
  5407 ;;		wreg, status,2, status,0
  5408 ;; Tracked objects:
  5409 ;;		On entry : 0/0
  5410 ;;		On exit  : 0/0
  5411 ;;		Unchanged: 0/0
  5412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5413 ;;      Params:         4       0       0       0       0       0       0       0       0
  5414 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5415 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5416 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5417 ;;Total ram usage:        6 bytes
  5418 ;; Hardware stack levels used:    1
  5419 ;; This function calls:
  5420 ;;		Nothing
  5421 ;; This function is called by:
  5422 ;;		_fround
  5423 ;;		_scale
  5424 ;; This function uses a non-reentrant model
  5425 ;;
  5426                           
  5427                           	psect	text7
  5428  002BB2                     __ptext7:
  5429                           	opt stack 0
  5430  002BB2                     ___awmod:
  5431                           	opt stack 28
  5432                           
  5433                           ;incstack = 0
  5434  002BB2  0E00               	movlw	0
  5435  002BB4  6E06               	movwf	___awmod@sign,c
  5436  002BB6  AE02               	btfss	___awmod@dividend+1,7,c
  5437  002BB8  D006               	goto	l598
  5438  002BBA  6C01               	negf	___awmod@dividend,c
  5439  002BBC  1E02               	comf	___awmod@dividend+1,f,c
  5440  002BBE  B0D8               	btfsc	status,0,c
  5441  002BC0  2A02               	incf	___awmod@dividend+1,f,c
  5442  002BC2  0E01               	movlw	1
  5443  002BC4  6E06               	movwf	___awmod@sign,c
  5444  002BC6                     l598:
  5445  002BC6  AE04               	btfss	___awmod@divisor+1,7,c
  5446  002BC8  D004               	goto	l599
  5447  002BCA  6C03               	negf	___awmod@divisor,c
  5448  002BCC  1E04               	comf	___awmod@divisor+1,f,c
  5449  002BCE  B0D8               	btfsc	status,0,c
  5450  002BD0  2A04               	incf	___awmod@divisor+1,f,c
  5451  002BD2                     l599:
  5452  002BD2  5003               	movf	___awmod@divisor,w,c
  5453  002BD4  1004               	iorwf	___awmod@divisor+1,w,c
  5454  002BD6  B4D8               	btfsc	status,2,c
  5455  002BD8  D018               	goto	l606
  5456  002BDA  0E01               	movlw	1
  5457  002BDC  6E05               	movwf	___awmod@counter,c
  5458  002BDE  D004               	goto	l601
  5459  002BE0  90D8               	bcf	status,0,c
  5460  002BE2  3603               	rlcf	___awmod@divisor,f,c
  5461  002BE4  3604               	rlcf	___awmod@divisor+1,f,c
  5462  002BE6  2A05               	incf	___awmod@counter,f,c
  5463  002BE8                     l601:
  5464  002BE8  AE04               	btfss	___awmod@divisor+1,7,c
  5465  002BEA  D7FA               	goto	l602
  5466  002BEC                     u2850:
  5467  002BEC  5003               	movf	___awmod@divisor,w,c
  5468  002BEE  5C01               	subwf	___awmod@dividend,w,c
  5469  002BF0  5004               	movf	___awmod@divisor+1,w,c
  5470  002BF2  5802               	subwfb	___awmod@dividend+1,w,c
  5471  002BF4  A0D8               	btfss	status,0,c
  5472  002BF6  D004               	goto	l605
  5473  002BF8  5003               	movf	___awmod@divisor,w,c
  5474  002BFA  5E01               	subwf	___awmod@dividend,f,c
  5475  002BFC  5004               	movf	___awmod@divisor+1,w,c
  5476  002BFE  5A02               	subwfb	___awmod@dividend+1,f,c
  5477  002C00                     l605:
  5478  002C00  90D8               	bcf	status,0,c
  5479  002C02  3204               	rrcf	___awmod@divisor+1,f,c
  5480  002C04  3203               	rrcf	___awmod@divisor,f,c
  5481  002C06  2E05               	decfsz	___awmod@counter,f,c
  5482  002C08  D7F1               	goto	u2850
  5483  002C0A                     l606:
  5484  002C0A  5006               	movf	___awmod@sign,w,c
  5485  002C0C  B4D8               	btfsc	status,2,c
  5486  002C0E  D004               	goto	l607
  5487  002C10  6C01               	negf	___awmod@dividend,c
  5488  002C12  1E02               	comf	___awmod@dividend+1,f,c
  5489  002C14  B0D8               	btfsc	status,0,c
  5490  002C16  2A02               	incf	___awmod@dividend+1,f,c
  5491  002C18                     l607:
  5492  002C18  C001  F001         	movff	___awmod@dividend,?___awmod
  5493  002C1C  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  5494  002C20  0012               	return	
  5495  002C22                     __end_of___awmod:
  5496                           	opt stack 0
  5497                           tblptru	equ	0xFF8
  5498                           tblptrh	equ	0xFF7
  5499                           tblptrl	equ	0xFF6
  5500                           tablat	equ	0xFF5
  5501                           prodh	equ	0xFF4
  5502                           prodl	equ	0xFF3
  5503                           wreg	equ	0xFE8
  5504                           indf1	equ	0xFE7
  5505                           fsr1h	equ	0xFE2
  5506                           fsr1l	equ	0xFE1
  5507                           indf2	equ	0xFDF
  5508                           postinc2	equ	0xFDE
  5509                           postdec2	equ	0xFDD
  5510                           fsr2h	equ	0xFDA
  5511                           fsr2l	equ	0xFD9
  5512                           status	equ	0xFD8
  5513                           
  5514 ;; *************** function ___awdiv *****************
  5515 ;; Defined at:
  5516 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  5517 ;; Parameters:    Size  Location     Type
  5518 ;;  dividend        2    6[COMRAM] int 
  5519 ;;  divisor         2    8[COMRAM] int 
  5520 ;; Auto vars:     Size  Location     Type
  5521 ;;  quotient        2   12[COMRAM] int 
  5522 ;;  sign            1   11[COMRAM] unsigned char 
  5523 ;;  counter         1   10[COMRAM] unsigned char 
  5524 ;; Return value:  Size  Location     Type
  5525 ;;                  2    6[COMRAM] int 
  5526 ;; Registers used:
  5527 ;;		wreg, status,2, status,0
  5528 ;; Tracked objects:
  5529 ;;		On entry : 0/0
  5530 ;;		On exit  : 0/0
  5531 ;;		Unchanged: 0/0
  5532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5533 ;;      Params:         4       0       0       0       0       0       0       0       0
  5534 ;;      Locals:         4       0       0       0       0       0       0       0       0
  5535 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5536 ;;      Totals:         8       0       0       0       0       0       0       0       0
  5537 ;;Total ram usage:        8 bytes
  5538 ;; Hardware stack levels used:    1
  5539 ;; This function calls:
  5540 ;;		Nothing
  5541 ;; This function is called by:
  5542 ;;		_fround
  5543 ;;		_scale
  5544 ;;		_sprintf
  5545 ;; This function uses a non-reentrant model
  5546 ;;
  5547                           
  5548                           	psect	text8
  5549  002AAC                     __ptext8:
  5550                           	opt stack 0
  5551  002AAC                     ___awdiv:
  5552                           	opt stack 28
  5553                           
  5554                           ;incstack = 0
  5555  002AAC  0E00               	movlw	0
  5556  002AAE  6E0C               	movwf	___awdiv@sign,c
  5557  002AB0  AE0A               	btfss	___awdiv@divisor+1,7,c
  5558  002AB2  D006               	goto	l585
  5559  002AB4  6C09               	negf	___awdiv@divisor,c
  5560  002AB6  1E0A               	comf	___awdiv@divisor+1,f,c
  5561  002AB8  B0D8               	btfsc	status,0,c
  5562  002ABA  2A0A               	incf	___awdiv@divisor+1,f,c
  5563  002ABC  0E01               	movlw	1
  5564  002ABE  6E0C               	movwf	___awdiv@sign,c
  5565  002AC0                     l585:
  5566  002AC0  AE08               	btfss	___awdiv@dividend+1,7,c
  5567  002AC2  D006               	goto	l586
  5568  002AC4  6C07               	negf	___awdiv@dividend,c
  5569  002AC6  1E08               	comf	___awdiv@dividend+1,f,c
  5570  002AC8  B0D8               	btfsc	status,0,c
  5571  002ACA  2A08               	incf	___awdiv@dividend+1,f,c
  5572  002ACC  0E01               	movlw	1
  5573  002ACE  1A0C               	xorwf	___awdiv@sign,f,c
  5574  002AD0                     l586:
  5575  002AD0  0E00               	movlw	0
  5576  002AD2  6E0E               	movwf	___awdiv@quotient+1,c
  5577  002AD4  0E00               	movlw	0
  5578  002AD6  6E0D               	movwf	___awdiv@quotient,c
  5579  002AD8  5009               	movf	___awdiv@divisor,w,c
  5580  002ADA  100A               	iorwf	___awdiv@divisor+1,w,c
  5581  002ADC  B4D8               	btfsc	status,2,c
  5582  002ADE  D01C               	goto	l593
  5583  002AE0  0E01               	movlw	1
  5584  002AE2  6E0B               	movwf	___awdiv@counter,c
  5585  002AE4  D004               	goto	l588
  5586  002AE6  90D8               	bcf	status,0,c
  5587  002AE8  3609               	rlcf	___awdiv@divisor,f,c
  5588  002AEA  360A               	rlcf	___awdiv@divisor+1,f,c
  5589  002AEC  2A0B               	incf	___awdiv@counter,f,c
  5590  002AEE                     l588:
  5591  002AEE  AE0A               	btfss	___awdiv@divisor+1,7,c
  5592  002AF0  D7FA               	goto	l589
  5593  002AF2                     u2790:
  5594  002AF2  90D8               	bcf	status,0,c
  5595  002AF4  360D               	rlcf	___awdiv@quotient,f,c
  5596  002AF6  360E               	rlcf	___awdiv@quotient+1,f,c
  5597  002AF8  5009               	movf	___awdiv@divisor,w,c
  5598  002AFA  5C07               	subwf	___awdiv@dividend,w,c
  5599  002AFC  500A               	movf	___awdiv@divisor+1,w,c
  5600  002AFE  5808               	subwfb	___awdiv@dividend+1,w,c
  5601  002B00  A0D8               	btfss	status,0,c
  5602  002B02  D005               	goto	l592
  5603  002B04  5009               	movf	___awdiv@divisor,w,c
  5604  002B06  5E07               	subwf	___awdiv@dividend,f,c
  5605  002B08  500A               	movf	___awdiv@divisor+1,w,c
  5606  002B0A  5A08               	subwfb	___awdiv@dividend+1,f,c
  5607  002B0C  800D               	bsf	___awdiv@quotient,0,c
  5608  002B0E                     l592:
  5609  002B0E  90D8               	bcf	status,0,c
  5610  002B10  320A               	rrcf	___awdiv@divisor+1,f,c
  5611  002B12  3209               	rrcf	___awdiv@divisor,f,c
  5612  002B14  2E0B               	decfsz	___awdiv@counter,f,c
  5613  002B16  D7ED               	goto	u2790
  5614  002B18                     l593:
  5615  002B18  500C               	movf	___awdiv@sign,w,c
  5616  002B1A  B4D8               	btfsc	status,2,c
  5617  002B1C  D004               	goto	l594
  5618  002B1E  6C0D               	negf	___awdiv@quotient,c
  5619  002B20  1E0E               	comf	___awdiv@quotient+1,f,c
  5620  002B22  B0D8               	btfsc	status,0,c
  5621  002B24  2A0E               	incf	___awdiv@quotient+1,f,c
  5622  002B26                     l594:
  5623  002B26  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  5624  002B2A  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  5625  002B2E  0012               	return	
  5626  002B30                     __end_of___awdiv:
  5627                           	opt stack 0
  5628                           tblptru	equ	0xFF8
  5629                           tblptrh	equ	0xFF7
  5630                           tblptrl	equ	0xFF6
  5631                           tablat	equ	0xFF5
  5632                           prodh	equ	0xFF4
  5633                           prodl	equ	0xFF3
  5634                           wreg	equ	0xFE8
  5635                           indf1	equ	0xFE7
  5636                           fsr1h	equ	0xFE2
  5637                           fsr1l	equ	0xFE1
  5638                           indf2	equ	0xFDF
  5639                           postinc2	equ	0xFDE
  5640                           postdec2	equ	0xFDD
  5641                           fsr2h	equ	0xFDA
  5642                           fsr2l	equ	0xFD9
  5643                           status	equ	0xFD8
  5644                           
  5645 ;; *************** function __tdiv_to_l_ *****************
  5646 ;; Defined at:
  5647 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdivl.c"
  5648 ;; Parameters:    Size  Location     Type
  5649 ;;  f1              3    0[COMRAM] float 
  5650 ;;  f2              3    3[COMRAM] float 
  5651 ;; Auto vars:     Size  Location     Type
  5652 ;;  quot            4    9[COMRAM] unsigned long 
  5653 ;;  exp1            1   14[COMRAM] unsigned char 
  5654 ;;  cntr            1   13[COMRAM] unsigned char 
  5655 ;; Return value:  Size  Location     Type
  5656 ;;                  4    0[COMRAM] unsigned long 
  5657 ;; Registers used:
  5658 ;;		wreg, status,2, status,0
  5659 ;; Tracked objects:
  5660 ;;		On entry : 0/0
  5661 ;;		On exit  : 0/0
  5662 ;;		Unchanged: 0/0
  5663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5664 ;;      Params:         6       0       0       0       0       0       0       0       0
  5665 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5666 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5667 ;;      Totals:        15       0       0       0       0       0       0       0       0
  5668 ;;Total ram usage:       15 bytes
  5669 ;; Hardware stack levels used:    1
  5670 ;; This function calls:
  5671 ;;		Nothing
  5672 ;; This function is called by:
  5673 ;;		_sprintf
  5674 ;; This function uses a non-reentrant model
  5675 ;;
  5676                           
  5677                           	psect	text9
  5678  0022AC                     __ptext9:
  5679                           	opt stack 0
  5680  0022AC                     __tdiv_to_l_:
  5681                           	opt stack 29
  5682                           
  5683                           ;incstack = 0
  5684  0022AC  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  5685  0022B0  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  5686  0022B2  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  5687  0022B4  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  5688  0022B6  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  5689  0022B8  E301               	bnc	u2991
  5690  0022BA  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  5691  0022BC                     u2991:
  5692  0022BC  5007               	movf	??__tdiv_to_l_,w,c
  5693  0022BE  6E0F               	movwf	__tdiv_to_l_@exp1,c
  5694  0022C0  500F               	movf	__tdiv_to_l_@exp1,w,c
  5695  0022C2  A4D8               	btfss	status,2,c
  5696  0022C4  D009               	goto	l721
  5697  0022C6  0E00               	movlw	0
  5698  0022C8  6E01               	movwf	?__tdiv_to_l_,c
  5699  0022CA  0E00               	movlw	0
  5700  0022CC  6E02               	movwf	?__tdiv_to_l_+1,c
  5701  0022CE  0E00               	movlw	0
  5702  0022D0  6E03               	movwf	?__tdiv_to_l_+2,c
  5703  0022D2  0E00               	movlw	0
  5704  0022D4  6E04               	movwf	?__tdiv_to_l_+3,c
  5705  0022D6  0012               	return	
  5706  0022D8                     l721:
  5707  0022D8  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  5708  0022DC  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  5709  0022DE  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  5710  0022E0  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  5711  0022E2  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  5712  0022E4  E301               	bnc	u3011
  5713  0022E6  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  5714  0022E8                     u3011:
  5715  0022E8  5007               	movf	??__tdiv_to_l_,w,c
  5716  0022EA  6E0E               	movwf	__tdiv_to_l_@cntr,c
  5717  0022EC  500E               	movf	__tdiv_to_l_@cntr,w,c
  5718  0022EE  A4D8               	btfss	status,2,c
  5719  0022F0  D009               	goto	l723
  5720  0022F2  0E00               	movlw	0
  5721  0022F4  6E01               	movwf	?__tdiv_to_l_,c
  5722  0022F6  0E00               	movlw	0
  5723  0022F8  6E02               	movwf	?__tdiv_to_l_+1,c
  5724  0022FA  0E00               	movlw	0
  5725  0022FC  6E03               	movwf	?__tdiv_to_l_+2,c
  5726  0022FE  0E00               	movlw	0
  5727  002300  6E04               	movwf	?__tdiv_to_l_+3,c
  5728  002302  0012               	return	
  5729  002304                     l723:
  5730  002304  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  5731  002306  0EFF               	movlw	255
  5732  002308  1601               	andwf	__tdiv_to_l_@f1,f,c
  5733  00230A  0EFF               	movlw	255
  5734  00230C  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  5735  00230E  0E00               	movlw	0
  5736  002310  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  5737  002312  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  5738  002314  0EFF               	movlw	255
  5739  002316  1604               	andwf	__tdiv_to_l_@f2,f,c
  5740  002318  0EFF               	movlw	255
  5741  00231A  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  5742  00231C  0E00               	movlw	0
  5743  00231E  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  5744  002320  0E00               	movlw	0
  5745  002322  6E0A               	movwf	__tdiv_to_l_@quot,c
  5746  002324  0E00               	movlw	0
  5747  002326  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  5748  002328  0E00               	movlw	0
  5749  00232A  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  5750  00232C  0E00               	movlw	0
  5751  00232E  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  5752  002330  0E7F               	movlw	127
  5753  002332  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  5754  002334  500E               	movf	__tdiv_to_l_@cntr,w,c
  5755  002336  0F98               	addlw	152
  5756  002338  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  5757  00233A  0E18               	movlw	24
  5758  00233C  6E0E               	movwf	__tdiv_to_l_@cntr,c
  5759  00233E                     l724:
  5760  00233E  90D8               	bcf	status,0,c
  5761  002340  360A               	rlcf	__tdiv_to_l_@quot,f,c
  5762  002342  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  5763  002344  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  5764  002346  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  5765  002348  5004               	movf	__tdiv_to_l_@f2,w,c
  5766  00234A  5C01               	subwf	__tdiv_to_l_@f1,w,c
  5767  00234C  5005               	movf	__tdiv_to_l_@f2+1,w,c
  5768  00234E  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  5769  002350  5006               	movf	__tdiv_to_l_@f2+2,w,c
  5770  002352  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  5771  002354  A0D8               	btfss	status,0,c
  5772  002356  D007               	goto	l725
  5773  002358  5004               	movf	__tdiv_to_l_@f2,w,c
  5774  00235A  5E01               	subwf	__tdiv_to_l_@f1,f,c
  5775  00235C  5005               	movf	__tdiv_to_l_@f2+1,w,c
  5776  00235E  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  5777  002360  5006               	movf	__tdiv_to_l_@f2+2,w,c
  5778  002362  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  5779  002364  800A               	bsf	__tdiv_to_l_@quot,0,c
  5780  002366                     l725:
  5781  002366  90D8               	bcf	status,0,c
  5782  002368  3601               	rlcf	__tdiv_to_l_@f1,f,c
  5783  00236A  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  5784  00236C  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  5785  00236E  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  5786  002370  D7E6               	goto	l724
  5787  002372  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  5788  002374  D016               	goto	l727
  5789  002376  500F               	movf	__tdiv_to_l_@exp1,w,c
  5790  002378  0A80               	xorlw	128
  5791  00237A  0F97               	addlw	151
  5792  00237C  B0D8               	btfsc	status,0,c
  5793  00237E  D009               	goto	l728
  5794  002380  0E00               	movlw	0
  5795  002382  6E01               	movwf	?__tdiv_to_l_,c
  5796  002384  0E00               	movlw	0
  5797  002386  6E02               	movwf	?__tdiv_to_l_+1,c
  5798  002388  0E00               	movlw	0
  5799  00238A  6E03               	movwf	?__tdiv_to_l_+2,c
  5800  00238C  0E00               	movlw	0
  5801  00238E  6E04               	movwf	?__tdiv_to_l_+3,c
  5802  002390  0012               	return	
  5803  002392                     l728:
  5804  002392  90D8               	bcf	status,0,c
  5805  002394  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  5806  002396  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  5807  002398  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  5808  00239A  320A               	rrcf	__tdiv_to_l_@quot,f,c
  5809  00239C  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  5810  00239E  D7F9               	goto	l728
  5811  0023A0  D015               	goto	u3070
  5812  0023A2                     l727:
  5813  0023A2  0E17               	movlw	23
  5814  0023A4  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  5815  0023A6  D00F               	goto	l733
  5816  0023A8  0E00               	movlw	0
  5817  0023AA  6E01               	movwf	?__tdiv_to_l_,c
  5818  0023AC  0E00               	movlw	0
  5819  0023AE  6E02               	movwf	?__tdiv_to_l_+1,c
  5820  0023B0  0E00               	movlw	0
  5821  0023B2  6E03               	movwf	?__tdiv_to_l_+2,c
  5822  0023B4  0E00               	movlw	0
  5823  0023B6  6E04               	movwf	?__tdiv_to_l_+3,c
  5824  0023B8  0012               	return	
  5825  0023BA  90D8               	bcf	status,0,c
  5826  0023BC  360A               	rlcf	__tdiv_to_l_@quot,f,c
  5827  0023BE  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  5828  0023C0  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  5829  0023C2  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  5830  0023C4  060F               	decf	__tdiv_to_l_@exp1,f,c
  5831  0023C6                     l733:
  5832  0023C6  500F               	movf	__tdiv_to_l_@exp1,w,c
  5833  0023C8  A4D8               	btfss	status,2,c
  5834  0023CA  D7F7               	goto	l734
  5835  0023CC                     u3070:
  5836  0023CC  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  5837  0023D0  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  5838  0023D4  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  5839  0023D8  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  5840  0023DC  0012               	return		;funcret
  5841  0023DE                     __end_of__tdiv_to_l_:
  5842                           	opt stack 0
  5843                           tblptru	equ	0xFF8
  5844                           tblptrh	equ	0xFF7
  5845                           tblptrl	equ	0xFF6
  5846                           tablat	equ	0xFF5
  5847                           prodh	equ	0xFF4
  5848                           prodl	equ	0xFF3
  5849                           wreg	equ	0xFE8
  5850                           indf1	equ	0xFE7
  5851                           fsr1h	equ	0xFE2
  5852                           fsr1l	equ	0xFE1
  5853                           indf2	equ	0xFDF
  5854                           postinc2	equ	0xFDE
  5855                           postdec2	equ	0xFDD
  5856                           fsr2h	equ	0xFDA
  5857                           fsr2l	equ	0xFD9
  5858                           status	equ	0xFD8
  5859                           
  5860 ;; *************** function __div_to_l_ *****************
  5861 ;; Defined at:
  5862 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fldivl.c"
  5863 ;; Parameters:    Size  Location     Type
  5864 ;;  f1              3    0[COMRAM] unsigned long 
  5865 ;;  f2              3    3[COMRAM] unsigned long 
  5866 ;; Auto vars:     Size  Location     Type
  5867 ;;  quot            4    6[COMRAM] unsigned long 
  5868 ;;  exp1            1   11[COMRAM] unsigned char 
  5869 ;;  cntr            1   10[COMRAM] unsigned char 
  5870 ;; Return value:  Size  Location     Type
  5871 ;;                  4    0[COMRAM] unsigned long 
  5872 ;; Registers used:
  5873 ;;		wreg, status,2, status,0
  5874 ;; Tracked objects:
  5875 ;;		On entry : 0/0
  5876 ;;		On exit  : 0/0
  5877 ;;		Unchanged: 0/0
  5878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5879 ;;      Params:         6       0       0       0       0       0       0       0       0
  5880 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5881 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5882 ;;      Totals:        12       0       0       0       0       0       0       0       0
  5883 ;;Total ram usage:       12 bytes
  5884 ;; Hardware stack levels used:    1
  5885 ;; This function calls:
  5886 ;;		Nothing
  5887 ;; This function is called by:
  5888 ;;		_sprintf
  5889 ;; This function uses a non-reentrant model
  5890 ;;
  5891                           
  5892                           	psect	text10
  5893  0023DE                     __ptext10:
  5894                           	opt stack 0
  5895  0023DE                     __div_to_l_:
  5896                           	opt stack 29
  5897                           
  5898                           ;incstack = 0
  5899  0023DE  3403               	rlcf	__div_to_l_@f1+2,w,c
  5900  0023E0  3404               	rlcf	__div_to_l_@f1+3,w,c
  5901  0023E2  6E0C               	movwf	__div_to_l_@exp1,c
  5902  0023E4  500C               	movf	__div_to_l_@exp1,w,c
  5903  0023E6  A4D8               	btfss	status,2,c
  5904  0023E8  D009               	goto	l617
  5905  0023EA  0E00               	movlw	0
  5906  0023EC  6E01               	movwf	?__div_to_l_,c
  5907  0023EE  0E00               	movlw	0
  5908  0023F0  6E02               	movwf	?__div_to_l_+1,c
  5909  0023F2  0E00               	movlw	0
  5910  0023F4  6E03               	movwf	?__div_to_l_+2,c
  5911  0023F6  0E00               	movlw	0
  5912  0023F8  6E04               	movwf	?__div_to_l_+3,c
  5913  0023FA  0012               	return	
  5914  0023FC                     l617:
  5915  0023FC  3406               	rlcf	__div_to_l_@f2+2,w,c
  5916  0023FE  3407               	rlcf	__div_to_l_@f2+3,w,c
  5917  002400  6E0B               	movwf	__div_to_l_@cntr,c
  5918  002402  500B               	movf	__div_to_l_@cntr,w,c
  5919  002404  A4D8               	btfss	status,2,c
  5920  002406  D009               	goto	l619
  5921  002408  0E00               	movlw	0
  5922  00240A  6E01               	movwf	?__div_to_l_,c
  5923  00240C  0E00               	movlw	0
  5924  00240E  6E02               	movwf	?__div_to_l_+1,c
  5925  002410  0E00               	movlw	0
  5926  002412  6E03               	movwf	?__div_to_l_+2,c
  5927  002414  0E00               	movlw	0
  5928  002416  6E04               	movwf	?__div_to_l_+3,c
  5929  002418  0012               	return	
  5930  00241A                     l619:
  5931  00241A  8E03               	bsf	__div_to_l_@f1+2,7,c
  5932  00241C  0EFF               	movlw	255
  5933  00241E  1601               	andwf	__div_to_l_@f1,f,c
  5934  002420  0EFF               	movlw	255
  5935  002422  1602               	andwf	__div_to_l_@f1+1,f,c
  5936  002424  0EFF               	movlw	255
  5937  002426  1603               	andwf	__div_to_l_@f1+2,f,c
  5938  002428  0E00               	movlw	0
  5939  00242A  1604               	andwf	__div_to_l_@f1+3,f,c
  5940  00242C  8E06               	bsf	__div_to_l_@f2+2,7,c
  5941  00242E  0EFF               	movlw	255
  5942  002430  1604               	andwf	__div_to_l_@f2,f,c
  5943  002432  0EFF               	movlw	255
  5944  002434  1605               	andwf	__div_to_l_@f2+1,f,c
  5945  002436  0EFF               	movlw	255
  5946  002438  1606               	andwf	__div_to_l_@f2+2,f,c
  5947  00243A  0E00               	movlw	0
  5948  00243C  1607               	andwf	__div_to_l_@f2+3,f,c
  5949  00243E  0E00               	movlw	0
  5950  002440  6E07               	movwf	__div_to_l_@quot,c
  5951  002442  0E00               	movlw	0
  5952  002444  6E08               	movwf	__div_to_l_@quot+1,c
  5953  002446  0E00               	movlw	0
  5954  002448  6E09               	movwf	__div_to_l_@quot+2,c
  5955  00244A  0E00               	movlw	0
  5956  00244C  6E0A               	movwf	__div_to_l_@quot+3,c
  5957  00244E  0E7F               	movlw	127
  5958  002450  5E0C               	subwf	__div_to_l_@exp1,f,c
  5959  002452  500B               	movf	__div_to_l_@cntr,w,c
  5960  002454  0FA0               	addlw	160
  5961  002456  5E0C               	subwf	__div_to_l_@exp1,f,c
  5962  002458  0E20               	movlw	32
  5963  00245A  6E0B               	movwf	__div_to_l_@cntr,c
  5964  00245C  90D8               	bcf	status,0,c
  5965  00245E  3607               	rlcf	__div_to_l_@quot,f,c
  5966  002460  3608               	rlcf	__div_to_l_@quot+1,f,c
  5967  002462  3609               	rlcf	__div_to_l_@quot+2,f,c
  5968  002464  360A               	rlcf	__div_to_l_@quot+3,f,c
  5969  002466  5004               	movf	__div_to_l_@f2,w,c
  5970  002468  5C01               	subwf	__div_to_l_@f1,w,c
  5971  00246A  5005               	movf	__div_to_l_@f2+1,w,c
  5972  00246C  5802               	subwfb	__div_to_l_@f1+1,w,c
  5973  00246E  5006               	movf	__div_to_l_@f2+2,w,c
  5974  002470  5803               	subwfb	__div_to_l_@f1+2,w,c
  5975  002472  5007               	movf	__div_to_l_@f2+3,w,c
  5976  002474  5804               	subwfb	__div_to_l_@f1+3,w,c
  5977  002476  A0D8               	btfss	status,0,c
  5978  002478  D009               	goto	l621
  5979  00247A  5004               	movf	__div_to_l_@f2,w,c
  5980  00247C  5E01               	subwf	__div_to_l_@f1,f,c
  5981  00247E  5005               	movf	__div_to_l_@f2+1,w,c
  5982  002480  5A02               	subwfb	__div_to_l_@f1+1,f,c
  5983  002482  5006               	movf	__div_to_l_@f2+2,w,c
  5984  002484  5A03               	subwfb	__div_to_l_@f1+2,f,c
  5985  002486  5007               	movf	__div_to_l_@f2+3,w,c
  5986  002488  5A04               	subwfb	__div_to_l_@f1+3,f,c
  5987  00248A  8007               	bsf	__div_to_l_@quot,0,c
  5988  00248C                     l621:
  5989  00248C  90D8               	bcf	status,0,c
  5990  00248E  3601               	rlcf	__div_to_l_@f1,f,c
  5991  002490  3602               	rlcf	__div_to_l_@f1+1,f,c
  5992  002492  3603               	rlcf	__div_to_l_@f1+2,f,c
  5993  002494  3604               	rlcf	__div_to_l_@f1+3,f,c
  5994  002496  2E0B               	decfsz	__div_to_l_@cntr,f,c
  5995  002498  D7E1               	goto	l620
  5996  00249A  AE0C               	btfss	__div_to_l_@exp1,7,c
  5997  00249C  D016               	goto	l623
  5998  00249E  500C               	movf	__div_to_l_@exp1,w,c
  5999  0024A0  0A80               	xorlw	128
  6000  0024A2  0F9F               	addlw	159
  6001  0024A4  B0D8               	btfsc	status,0,c
  6002  0024A6  D009               	goto	l624
  6003  0024A8  0E00               	movlw	0
  6004  0024AA  6E01               	movwf	?__div_to_l_,c
  6005  0024AC  0E00               	movlw	0
  6006  0024AE  6E02               	movwf	?__div_to_l_+1,c
  6007  0024B0  0E00               	movlw	0
  6008  0024B2  6E03               	movwf	?__div_to_l_+2,c
  6009  0024B4  0E00               	movlw	0
  6010  0024B6  6E04               	movwf	?__div_to_l_+3,c
  6011  0024B8  0012               	return	
  6012  0024BA                     l624:
  6013  0024BA  90D8               	bcf	status,0,c
  6014  0024BC  320A               	rrcf	__div_to_l_@quot+3,f,c
  6015  0024BE  3209               	rrcf	__div_to_l_@quot+2,f,c
  6016  0024C0  3208               	rrcf	__div_to_l_@quot+1,f,c
  6017  0024C2  3207               	rrcf	__div_to_l_@quot,f,c
  6018  0024C4  3E0C               	incfsz	__div_to_l_@exp1,f,c
  6019  0024C6  D7F9               	goto	l624
  6020  0024C8  D015               	goto	u3140
  6021  0024CA                     l623:
  6022  0024CA  0E1F               	movlw	31
  6023  0024CC  640C               	cpfsgt	__div_to_l_@exp1,c
  6024  0024CE  D00F               	goto	l629
  6025  0024D0  0E00               	movlw	0
  6026  0024D2  6E01               	movwf	?__div_to_l_,c
  6027  0024D4  0E00               	movlw	0
  6028  0024D6  6E02               	movwf	?__div_to_l_+1,c
  6029  0024D8  0E00               	movlw	0
  6030  0024DA  6E03               	movwf	?__div_to_l_+2,c
  6031  0024DC  0E00               	movlw	0
  6032  0024DE  6E04               	movwf	?__div_to_l_+3,c
  6033  0024E0  0012               	return	
  6034  0024E2  90D8               	bcf	status,0,c
  6035  0024E4  3607               	rlcf	__div_to_l_@quot,f,c
  6036  0024E6  3608               	rlcf	__div_to_l_@quot+1,f,c
  6037  0024E8  3609               	rlcf	__div_to_l_@quot+2,f,c
  6038  0024EA  360A               	rlcf	__div_to_l_@quot+3,f,c
  6039  0024EC  060C               	decf	__div_to_l_@exp1,f,c
  6040  0024EE                     l629:
  6041  0024EE  500C               	movf	__div_to_l_@exp1,w,c
  6042  0024F0  A4D8               	btfss	status,2,c
  6043  0024F2  D7F7               	goto	l630
  6044  0024F4                     u3140:
  6045  0024F4  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  6046  0024F8  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  6047  0024FC  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  6048  002500  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  6049  002504  0012               	return		;funcret
  6050  002506                     __end_of__div_to_l_:
  6051                           	opt stack 0
  6052                           tblptru	equ	0xFF8
  6053                           tblptrh	equ	0xFF7
  6054                           tblptrl	equ	0xFF6
  6055                           tablat	equ	0xFF5
  6056                           prodh	equ	0xFF4
  6057                           prodl	equ	0xFF3
  6058                           wreg	equ	0xFE8
  6059                           indf1	equ	0xFE7
  6060                           fsr1h	equ	0xFE2
  6061                           fsr1l	equ	0xFE1
  6062                           indf2	equ	0xFDF
  6063                           postinc2	equ	0xFDE
  6064                           postdec2	equ	0xFDD
  6065                           fsr2h	equ	0xFDA
  6066                           fsr2l	equ	0xFD9
  6067                           status	equ	0xFD8
  6068                           
  6069 ;; *************** function ___lltoft *****************
  6070 ;; Defined at:
  6071 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
  6072 ;; Parameters:    Size  Location     Type
  6073 ;;  c               4    8[COMRAM] unsigned long 
  6074 ;; Auto vars:     Size  Location     Type
  6075 ;;  exp             1   16[COMRAM] unsigned char 
  6076 ;; Return value:  Size  Location     Type
  6077 ;;                  3    8[COMRAM] float 
  6078 ;; Registers used:
  6079 ;;		wreg, status,2, status,0, cstack
  6080 ;; Tracked objects:
  6081 ;;		On entry : 0/0
  6082 ;;		On exit  : 0/0
  6083 ;;		Unchanged: 0/0
  6084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6085 ;;      Params:         4       0       0       0       0       0       0       0       0
  6086 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6087 ;;      Temps:          4       0       0       0       0       0       0       0       0
  6088 ;;      Totals:         9       0       0       0       0       0       0       0       0
  6089 ;;Total ram usage:        9 bytes
  6090 ;; Hardware stack levels used:    1
  6091 ;; Hardware stack levels required when called:    1
  6092 ;; This function calls:
  6093 ;;		___ftpack
  6094 ;; This function is called by:
  6095 ;;		_main
  6096 ;;		_sprintf
  6097 ;; This function uses a non-reentrant model
  6098 ;;
  6099                           
  6100                           	psect	text11
  6101  002DC6                     __ptext11:
  6102                           	opt stack 0
  6103  002DC6                     ___lltoft:
  6104                           	opt stack 28
  6105                           
  6106                           ;incstack = 0
  6107  002DC6  0E8E               	movlw	142
  6108  002DC8  6E11               	movwf	___lltoft@exp,c
  6109  002DCA  D006               	goto	l828
  6110  002DCC  90D8               	bcf	status,0,c
  6111  002DCE  320C               	rrcf	___lltoft@c+3,f,c
  6112  002DD0  320B               	rrcf	___lltoft@c+2,f,c
  6113  002DD2  320A               	rrcf	___lltoft@c+1,f,c
  6114  002DD4  3209               	rrcf	___lltoft@c,f,c
  6115  002DD6  2A11               	incf	___lltoft@exp,f,c
  6116  002DD8                     l828:
  6117  002DD8  0E00               	movlw	0
  6118  002DDA  1409               	andwf	___lltoft@c,w,c
  6119  002DDC  6E0D               	movwf	??___lltoft& (0+255),c
  6120  002DDE  0E00               	movlw	0
  6121  002DE0  140A               	andwf	___lltoft@c+1,w,c
  6122  002DE2  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  6123  002DE4  0E00               	movlw	0
  6124  002DE6  140B               	andwf	___lltoft@c+2,w,c
  6125  002DE8  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  6126  002DEA  0EFF               	movlw	255
  6127  002DEC  140C               	andwf	___lltoft@c+3,w,c
  6128  002DEE  6E10               	movwf	(??___lltoft+3)& (0+255),c
  6129  002DF0  500D               	movf	??___lltoft,w,c
  6130  002DF2  100E               	iorwf	??___lltoft+1,w,c
  6131  002DF4  100F               	iorwf	??___lltoft+2,w,c
  6132  002DF6  1010               	iorwf	??___lltoft+3,w,c
  6133  002DF8  A4D8               	btfss	status,2,c
  6134  002DFA  D7E8               	goto	l829
  6135  002DFC  C009  F001         	movff	___lltoft@c,___ftpack@arg
  6136  002E00  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  6137  002E04  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  6138  002E08  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  6139  002E0C  0E00               	movlw	0
  6140  002E0E  6E05               	movwf	___ftpack@sign,c
  6141  002E10  ECB7  F014         	call	___ftpack	;wreg free
  6142  002E14  C001  F009         	movff	?___ftpack,?___lltoft
  6143  002E18  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  6144  002E1C  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  6145  002E20  0012               	return	
  6146  002E22                     __end_of___lltoft:
  6147                           	opt stack 0
  6148                           tblptru	equ	0xFF8
  6149                           tblptrh	equ	0xFF7
  6150                           tblptrl	equ	0xFF6
  6151                           tablat	equ	0xFF5
  6152                           prodh	equ	0xFF4
  6153                           prodl	equ	0xFF3
  6154                           wreg	equ	0xFE8
  6155                           indf1	equ	0xFE7
  6156                           fsr1h	equ	0xFE2
  6157                           fsr1l	equ	0xFE1
  6158                           indf2	equ	0xFDF
  6159                           postinc2	equ	0xFDE
  6160                           postdec2	equ	0xFDD
  6161                           fsr2h	equ	0xFDA
  6162                           fsr2l	equ	0xFD9
  6163                           status	equ	0xFD8
  6164                           
  6165 ;; *************** function ___llmod *****************
  6166 ;; Defined at:
  6167 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  6168 ;; Parameters:    Size  Location     Type
  6169 ;;  dividend        4   13[COMRAM] unsigned long 
  6170 ;;  divisor         4   17[COMRAM] unsigned long 
  6171 ;; Auto vars:     Size  Location     Type
  6172 ;;  counter         1   21[COMRAM] unsigned char 
  6173 ;; Return value:  Size  Location     Type
  6174 ;;                  4   13[COMRAM] unsigned long 
  6175 ;; Registers used:
  6176 ;;		wreg, status,2, status,0
  6177 ;; Tracked objects:
  6178 ;;		On entry : 0/0
  6179 ;;		On exit  : 0/0
  6180 ;;		Unchanged: 0/0
  6181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6182 ;;      Params:         8       0       0       0       0       0       0       0       0
  6183 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6184 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6185 ;;      Totals:         9       0       0       0       0       0       0       0       0
  6186 ;;Total ram usage:        9 bytes
  6187 ;; Hardware stack levels used:    1
  6188 ;; This function calls:
  6189 ;;		Nothing
  6190 ;; This function is called by:
  6191 ;;		_sprintf
  6192 ;; This function uses a non-reentrant model
  6193 ;;
  6194                           
  6195                           	psect	text12
  6196  002CFA                     __ptext12:
  6197                           	opt stack 0
  6198  002CFA                     ___llmod:
  6199                           	opt stack 29
  6200                           
  6201                           ;incstack = 0
  6202  002CFA  5012               	movf	___llmod@divisor,w,c
  6203  002CFC  1013               	iorwf	___llmod@divisor+1,w,c
  6204  002CFE  1014               	iorwf	___llmod@divisor+2,w,c
  6205  002D00  1015               	iorwf	___llmod@divisor+3,w,c
  6206  002D02  B4D8               	btfsc	status,2,c
  6207  002D04  D024               	goto	l822
  6208  002D06  0E01               	movlw	1
  6209  002D08  6E16               	movwf	___llmod@counter,c
  6210  002D0A  D006               	goto	l817
  6211  002D0C  90D8               	bcf	status,0,c
  6212  002D0E  3612               	rlcf	___llmod@divisor,f,c
  6213  002D10  3613               	rlcf	___llmod@divisor+1,f,c
  6214  002D12  3614               	rlcf	___llmod@divisor+2,f,c
  6215  002D14  3615               	rlcf	___llmod@divisor+3,f,c
  6216  002D16  2A16               	incf	___llmod@counter,f,c
  6217  002D18                     l817:
  6218  002D18  AE15               	btfss	___llmod@divisor+3,7,c
  6219  002D1A  D7F8               	goto	l818
  6220  002D1C                     u3240:
  6221  002D1C  5012               	movf	___llmod@divisor,w,c
  6222  002D1E  5C0E               	subwf	___llmod@dividend,w,c
  6223  002D20  5013               	movf	___llmod@divisor+1,w,c
  6224  002D22  580F               	subwfb	___llmod@dividend+1,w,c
  6225  002D24  5014               	movf	___llmod@divisor+2,w,c
  6226  002D26  5810               	subwfb	___llmod@dividend+2,w,c
  6227  002D28  5015               	movf	___llmod@divisor+3,w,c
  6228  002D2A  5811               	subwfb	___llmod@dividend+3,w,c
  6229  002D2C  A0D8               	btfss	status,0,c
  6230  002D2E  D008               	goto	l821
  6231  002D30  5012               	movf	___llmod@divisor,w,c
  6232  002D32  5E0E               	subwf	___llmod@dividend,f,c
  6233  002D34  5013               	movf	___llmod@divisor+1,w,c
  6234  002D36  5A0F               	subwfb	___llmod@dividend+1,f,c
  6235  002D38  5014               	movf	___llmod@divisor+2,w,c
  6236  002D3A  5A10               	subwfb	___llmod@dividend+2,f,c
  6237  002D3C  5015               	movf	___llmod@divisor+3,w,c
  6238  002D3E  5A11               	subwfb	___llmod@dividend+3,f,c
  6239  002D40                     l821:
  6240  002D40  90D8               	bcf	status,0,c
  6241  002D42  3215               	rrcf	___llmod@divisor+3,f,c
  6242  002D44  3214               	rrcf	___llmod@divisor+2,f,c
  6243  002D46  3213               	rrcf	___llmod@divisor+1,f,c
  6244  002D48  3212               	rrcf	___llmod@divisor,f,c
  6245  002D4A  2E16               	decfsz	___llmod@counter,f,c
  6246  002D4C  D7E7               	goto	u3240
  6247  002D4E                     l822:
  6248  002D4E  C00E  F00E         	movff	___llmod@dividend,?___llmod
  6249  002D52  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
  6250  002D56  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
  6251  002D5A  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
  6252  002D5E  0012               	return		;funcret
  6253  002D60                     __end_of___llmod:
  6254                           	opt stack 0
  6255                           tblptru	equ	0xFF8
  6256                           tblptrh	equ	0xFF7
  6257                           tblptrl	equ	0xFF6
  6258                           tablat	equ	0xFF5
  6259                           prodh	equ	0xFF4
  6260                           prodl	equ	0xFF3
  6261                           wreg	equ	0xFE8
  6262                           indf1	equ	0xFE7
  6263                           fsr1h	equ	0xFE2
  6264                           fsr1l	equ	0xFE1
  6265                           indf2	equ	0xFDF
  6266                           postinc2	equ	0xFDE
  6267                           postdec2	equ	0xFDD
  6268                           fsr2h	equ	0xFDA
  6269                           fsr2l	equ	0xFD9
  6270                           status	equ	0xFD8
  6271                           
  6272 ;; *************** function ___lldiv *****************
  6273 ;; Defined at:
  6274 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  6275 ;; Parameters:    Size  Location     Type
  6276 ;;  dividend        4    0[COMRAM] unsigned long 
  6277 ;;  divisor         4    4[COMRAM] unsigned long 
  6278 ;; Auto vars:     Size  Location     Type
  6279 ;;  quotient        4    8[COMRAM] unsigned long 
  6280 ;;  counter         1   12[COMRAM] unsigned char 
  6281 ;; Return value:  Size  Location     Type
  6282 ;;                  4    0[COMRAM] unsigned long 
  6283 ;; Registers used:
  6284 ;;		wreg, status,2, status,0
  6285 ;; Tracked objects:
  6286 ;;		On entry : 0/0
  6287 ;;		On exit  : 0/0
  6288 ;;		Unchanged: 0/0
  6289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6290 ;;      Params:         8       0       0       0       0       0       0       0       0
  6291 ;;      Locals:         5       0       0       0       0       0       0       0       0
  6292 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6293 ;;      Totals:        13       0       0       0       0       0       0       0       0
  6294 ;;Total ram usage:       13 bytes
  6295 ;; Hardware stack levels used:    1
  6296 ;; This function calls:
  6297 ;;		Nothing
  6298 ;; This function is called by:
  6299 ;;		_sprintf
  6300 ;; This function uses a non-reentrant model
  6301 ;;
  6302                           
  6303                           	psect	text13
  6304  002B30                     __ptext13:
  6305                           	opt stack 0
  6306  002B30                     ___lldiv:
  6307                           	opt stack 29
  6308                           
  6309                           ;incstack = 0
  6310  002B30  0E00               	movlw	0
  6311  002B32  6E09               	movwf	___lldiv@quotient,c
  6312  002B34  0E00               	movlw	0
  6313  002B36  6E0A               	movwf	___lldiv@quotient+1,c
  6314  002B38  0E00               	movlw	0
  6315  002B3A  6E0B               	movwf	___lldiv@quotient+2,c
  6316  002B3C  0E00               	movlw	0
  6317  002B3E  6E0C               	movwf	___lldiv@quotient+3,c
  6318  002B40  5005               	movf	___lldiv@divisor,w,c
  6319  002B42  1006               	iorwf	___lldiv@divisor+1,w,c
  6320  002B44  1007               	iorwf	___lldiv@divisor+2,w,c
  6321  002B46  1008               	iorwf	___lldiv@divisor+3,w,c
  6322  002B48  B4D8               	btfsc	status,2,c
  6323  002B4A  D02A               	goto	l812
  6324  002B4C  0E01               	movlw	1
  6325  002B4E  6E0D               	movwf	___lldiv@counter,c
  6326  002B50  D006               	goto	l807
  6327  002B52  90D8               	bcf	status,0,c
  6328  002B54  3605               	rlcf	___lldiv@divisor,f,c
  6329  002B56  3606               	rlcf	___lldiv@divisor+1,f,c
  6330  002B58  3607               	rlcf	___lldiv@divisor+2,f,c
  6331  002B5A  3608               	rlcf	___lldiv@divisor+3,f,c
  6332  002B5C  2A0D               	incf	___lldiv@counter,f,c
  6333  002B5E                     l807:
  6334  002B5E  AE08               	btfss	___lldiv@divisor+3,7,c
  6335  002B60  D7F8               	goto	l808
  6336  002B62                     u3210:
  6337  002B62  90D8               	bcf	status,0,c
  6338  002B64  3609               	rlcf	___lldiv@quotient,f,c
  6339  002B66  360A               	rlcf	___lldiv@quotient+1,f,c
  6340  002B68  360B               	rlcf	___lldiv@quotient+2,f,c
  6341  002B6A  360C               	rlcf	___lldiv@quotient+3,f,c
  6342  002B6C  5005               	movf	___lldiv@divisor,w,c
  6343  002B6E  5C01               	subwf	___lldiv@dividend,w,c
  6344  002B70  5006               	movf	___lldiv@divisor+1,w,c
  6345  002B72  5802               	subwfb	___lldiv@dividend+1,w,c
  6346  002B74  5007               	movf	___lldiv@divisor+2,w,c
  6347  002B76  5803               	subwfb	___lldiv@dividend+2,w,c
  6348  002B78  5008               	movf	___lldiv@divisor+3,w,c
  6349  002B7A  5804               	subwfb	___lldiv@dividend+3,w,c
  6350  002B7C  A0D8               	btfss	status,0,c
  6351  002B7E  D009               	goto	l811
  6352  002B80  5005               	movf	___lldiv@divisor,w,c
  6353  002B82  5E01               	subwf	___lldiv@dividend,f,c
  6354  002B84  5006               	movf	___lldiv@divisor+1,w,c
  6355  002B86  5A02               	subwfb	___lldiv@dividend+1,f,c
  6356  002B88  5007               	movf	___lldiv@divisor+2,w,c
  6357  002B8A  5A03               	subwfb	___lldiv@dividend+2,f,c
  6358  002B8C  5008               	movf	___lldiv@divisor+3,w,c
  6359  002B8E  5A04               	subwfb	___lldiv@dividend+3,f,c
  6360  002B90  8009               	bsf	___lldiv@quotient,0,c
  6361  002B92                     l811:
  6362  002B92  90D8               	bcf	status,0,c
  6363  002B94  3208               	rrcf	___lldiv@divisor+3,f,c
  6364  002B96  3207               	rrcf	___lldiv@divisor+2,f,c
  6365  002B98  3206               	rrcf	___lldiv@divisor+1,f,c
  6366  002B9A  3205               	rrcf	___lldiv@divisor,f,c
  6367  002B9C  2E0D               	decfsz	___lldiv@counter,f,c
  6368  002B9E  D7E1               	goto	u3210
  6369  002BA0                     l812:
  6370  002BA0  C009  F001         	movff	___lldiv@quotient,?___lldiv
  6371  002BA4  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  6372  002BA8  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  6373  002BAC  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  6374  002BB0  0012               	return		;funcret
  6375  002BB2                     __end_of___lldiv:
  6376                           	opt stack 0
  6377                           tblptru	equ	0xFF8
  6378                           tblptrh	equ	0xFF7
  6379                           tblptrl	equ	0xFF6
  6380                           tablat	equ	0xFF5
  6381                           prodh	equ	0xFF4
  6382                           prodl	equ	0xFF3
  6383                           wreg	equ	0xFE8
  6384                           indf1	equ	0xFE7
  6385                           fsr1h	equ	0xFE2
  6386                           fsr1l	equ	0xFE1
  6387                           indf2	equ	0xFDF
  6388                           postinc2	equ	0xFDE
  6389                           postdec2	equ	0xFDD
  6390                           fsr2h	equ	0xFDA
  6391                           fsr2l	equ	0xFD9
  6392                           status	equ	0xFD8
  6393                           
  6394 ;; *************** function ___ftsub *****************
  6395 ;; Defined at:
  6396 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  6397 ;; Parameters:    Size  Location     Type
  6398 ;;  f1              3   57[COMRAM] float 
  6399 ;;  f2              3   60[COMRAM] float 
  6400 ;; Auto vars:     Size  Location     Type
  6401 ;;		None
  6402 ;; Return value:  Size  Location     Type
  6403 ;;                  3   57[COMRAM] float 
  6404 ;; Registers used:
  6405 ;;		wreg, status,2, status,0, cstack
  6406 ;; Tracked objects:
  6407 ;;		On entry : 0/0
  6408 ;;		On exit  : 0/0
  6409 ;;		Unchanged: 0/0
  6410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6411 ;;      Params:         6       0       0       0       0       0       0       0       0
  6412 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6413 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6414 ;;      Totals:         6       0       0       0       0       0       0       0       0
  6415 ;;Total ram usage:        6 bytes
  6416 ;; Hardware stack levels used:    1
  6417 ;; Hardware stack levels required when called:    2
  6418 ;; This function calls:
  6419 ;;		___ftadd
  6420 ;; This function is called by:
  6421 ;;		_sprintf
  6422 ;; This function uses a non-reentrant model
  6423 ;;
  6424                           
  6425                           	psect	text14
  6426  002E22                     __ptext14:
  6427                           	opt stack 0
  6428  002E22                     ___ftsub:
  6429                           	opt stack 27
  6430                           
  6431                           ;incstack = 0
  6432  002E22  503D               	movf	___ftsub@f2,w,c
  6433  002E24  103E               	iorwf	___ftsub@f2+1,w,c
  6434  002E26  103F               	iorwf	___ftsub@f2+2,w,c
  6435  002E28  B4D8               	btfsc	status,2,c
  6436  002E2A  D006               	goto	l762
  6437  002E2C  0E00               	movlw	0
  6438  002E2E  1A3D               	xorwf	___ftsub@f2,f,c
  6439  002E30  0E00               	movlw	0
  6440  002E32  1A3E               	xorwf	___ftsub@f2+1,f,c
  6441  002E34  0E80               	movlw	128
  6442  002E36  1A3F               	xorwf	___ftsub@f2+2,f,c
  6443  002E38                     l762:
  6444  002E38  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  6445  002E3C  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  6446  002E40  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  6447  002E44  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  6448  002E48  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  6449  002E4C  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  6450  002E50  EC80  F010         	call	___ftadd	;wreg free
  6451  002E54  C02E  F03A         	movff	?___ftadd,?___ftsub
  6452  002E58  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  6453  002E5C  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  6454  002E60  0012               	return	
  6455  002E62                     __end_of___ftsub:
  6456                           	opt stack 0
  6457                           tblptru	equ	0xFF8
  6458                           tblptrh	equ	0xFF7
  6459                           tblptrl	equ	0xFF6
  6460                           tablat	equ	0xFF5
  6461                           prodh	equ	0xFF4
  6462                           prodl	equ	0xFF3
  6463                           wreg	equ	0xFE8
  6464                           indf1	equ	0xFE7
  6465                           fsr1h	equ	0xFE2
  6466                           fsr1l	equ	0xFE1
  6467                           indf2	equ	0xFDF
  6468                           postinc2	equ	0xFDE
  6469                           postdec2	equ	0xFDD
  6470                           fsr2h	equ	0xFDA
  6471                           fsr2l	equ	0xFD9
  6472                           status	equ	0xFD8
  6473                           
  6474 ;; *************** function ___ftadd *****************
  6475 ;; Defined at:
  6476 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  6477 ;; Parameters:    Size  Location     Type
  6478 ;;  f1              3   45[COMRAM] float 
  6479 ;;  f2              3   48[COMRAM] float 
  6480 ;; Auto vars:     Size  Location     Type
  6481 ;;  exp1            1   56[COMRAM] unsigned char 
  6482 ;;  exp2            1   55[COMRAM] unsigned char 
  6483 ;;  sign            1   54[COMRAM] unsigned char 
  6484 ;; Return value:  Size  Location     Type
  6485 ;;                  3   45[COMRAM] float 
  6486 ;; Registers used:
  6487 ;;		wreg, status,2, status,0, cstack
  6488 ;; Tracked objects:
  6489 ;;		On entry : 0/0
  6490 ;;		On exit  : 0/0
  6491 ;;		Unchanged: 0/0
  6492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6493 ;;      Params:         6       0       0       0       0       0       0       0       0
  6494 ;;      Locals:         3       0       0       0       0       0       0       0       0
  6495 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6496 ;;      Totals:        12       0       0       0       0       0       0       0       0
  6497 ;;Total ram usage:       12 bytes
  6498 ;; Hardware stack levels used:    1
  6499 ;; Hardware stack levels required when called:    1
  6500 ;; This function calls:
  6501 ;;		___ftpack
  6502 ;; This function is called by:
  6503 ;;		_sprintf
  6504 ;;		___ftsub
  6505 ;; This function uses a non-reentrant model
  6506 ;;
  6507                           
  6508                           	psect	text15
  6509  002100                     __ptext15:
  6510                           	opt stack 0
  6511  002100                     ___ftadd:
  6512                           	opt stack 27
  6513                           
  6514                           ;incstack = 0
  6515  002100  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  6516  002104  6A35               	clrf	(??___ftadd+1)& (0+255),c
  6517  002106  6A36               	clrf	(??___ftadd+2)& (0+255),c
  6518  002108  342F               	rlcf	___ftadd@f1+1,w,c
  6519  00210A  3634               	rlcf	??___ftadd& (0+255),f,c
  6520  00210C  E301               	bnc	u2491
  6521  00210E  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  6522  002110                     u2491:
  6523  002110  5034               	movf	??___ftadd,w,c
  6524  002112  6E39               	movwf	___ftadd@exp1,c
  6525  002114  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  6526  002118  6A35               	clrf	(??___ftadd+1)& (0+255),c
  6527  00211A  6A36               	clrf	(??___ftadd+2)& (0+255),c
  6528  00211C  3432               	rlcf	___ftadd@f2+1,w,c
  6529  00211E  3634               	rlcf	??___ftadd& (0+255),f,c
  6530  002120  E301               	bnc	u2501
  6531  002122  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  6532  002124                     u2501:
  6533  002124  5034               	movf	??___ftadd,w,c
  6534  002126  6E38               	movwf	___ftadd@exp2,c
  6535  002128  5039               	movf	___ftadd@exp1,w,c
  6536  00212A  B4D8               	btfsc	status,2,c
  6537  00212C  D00B               	goto	u2530
  6538  00212E  5038               	movf	___ftadd@exp2,w,c
  6539  002130  5C39               	subwf	___ftadd@exp1,w,c
  6540  002132  B0D8               	btfsc	status,0,c
  6541  002134  D00E               	goto	l680
  6542  002136  5039               	movf	___ftadd@exp1,w,c
  6543  002138  0800               	sublw	0
  6544  00213A  2438               	addwf	___ftadd@exp2,w,c
  6545  00213C  6E34               	movwf	??___ftadd& (0+255),c
  6546  00213E  0E18               	movlw	24
  6547  002140  6434               	cpfsgt	??___ftadd,c
  6548  002142  D007               	goto	l680
  6549  002144                     u2530:
  6550  002144  C031  F02E         	movff	___ftadd@f2,?___ftadd
  6551  002148  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  6552  00214C  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  6553  002150  0012               	return	
  6554  002152                     l680:
  6555  002152  5038               	movf	___ftadd@exp2,w,c
  6556  002154  B4D8               	btfsc	status,2,c
  6557  002156  D00B               	goto	u2560
  6558  002158  5039               	movf	___ftadd@exp1,w,c
  6559  00215A  5C38               	subwf	___ftadd@exp2,w,c
  6560  00215C  B0D8               	btfsc	status,0,c
  6561  00215E  D00E               	goto	l684
  6562  002160  5038               	movf	___ftadd@exp2,w,c
  6563  002162  0800               	sublw	0
  6564  002164  2439               	addwf	___ftadd@exp1,w,c
  6565  002166  6E34               	movwf	??___ftadd& (0+255),c
  6566  002168  0E18               	movlw	24
  6567  00216A  6434               	cpfsgt	??___ftadd,c
  6568  00216C  D007               	goto	l684
  6569  00216E                     u2560:
  6570  00216E  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  6571  002172  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  6572  002176  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  6573  00217A  0012               	return	
  6574  00217C                     l684:
  6575  00217C  0E06               	movlw	6
  6576  00217E  6E37               	movwf	___ftadd@sign,c
  6577  002180  BE30               	btfsc	___ftadd@f1+2,7,c
  6578  002182  8E37               	bsf	___ftadd@sign,7,c
  6579  002184  BE33               	btfsc	___ftadd@f2+2,7,c
  6580  002186  8C37               	bsf	___ftadd@sign,6,c
  6581  002188  8E2F               	bsf	___ftadd@f1+1,7,c
  6582  00218A  0EFF               	movlw	255
  6583  00218C  162E               	andwf	___ftadd@f1,f,c
  6584  00218E  0EFF               	movlw	255
  6585  002190  162F               	andwf	___ftadd@f1+1,f,c
  6586  002192  0E00               	movlw	0
  6587  002194  1630               	andwf	___ftadd@f1+2,f,c
  6588  002196  8E32               	bsf	___ftadd@f2+1,7,c
  6589  002198  0EFF               	movlw	255
  6590  00219A  1631               	andwf	___ftadd@f2,f,c
  6591  00219C  0EFF               	movlw	255
  6592  00219E  1632               	andwf	___ftadd@f2+1,f,c
  6593  0021A0  0E00               	movlw	0
  6594  0021A2  1633               	andwf	___ftadd@f2+2,f,c
  6595  0021A4  5038               	movf	___ftadd@exp2,w,c
  6596  0021A6  5C39               	subwf	___ftadd@exp1,w,c
  6597  0021A8  B0D8               	btfsc	status,0,c
  6598  0021AA  D01B               	goto	l689
  6599  0021AC                     u2590:
  6600  0021AC  90D8               	bcf	status,0,c
  6601  0021AE  3631               	rlcf	___ftadd@f2,f,c
  6602  0021B0  3632               	rlcf	___ftadd@f2+1,f,c
  6603  0021B2  3633               	rlcf	___ftadd@f2+2,f,c
  6604  0021B4  0638               	decf	___ftadd@exp2,f,c
  6605  0021B6  5039               	movf	___ftadd@exp1,w,c
  6606  0021B8  1838               	xorwf	___ftadd@exp2,w,c
  6607  0021BA  B4D8               	btfsc	status,2,c
  6608  0021BC  D00D               	goto	l694
  6609  0021BE  0637               	decf	___ftadd@sign,f,c
  6610  0021C0  C037  F034         	movff	___ftadd@sign,??___ftadd
  6611  0021C4  0E07               	movlw	7
  6612  0021C6  1634               	andwf	??___ftadd,f,c
  6613  0021C8  B4D8               	btfsc	status,2,c
  6614  0021CA  D006               	goto	l694
  6615  0021CC  D7EF               	goto	u2590
  6616  0021CE  90D8               	bcf	status,0,c
  6617  0021D0  3230               	rrcf	___ftadd@f1+2,f,c
  6618  0021D2  322F               	rrcf	___ftadd@f1+1,f,c
  6619  0021D4  322E               	rrcf	___ftadd@f1,f,c
  6620  0021D6  2A39               	incf	___ftadd@exp1,f,c
  6621  0021D8                     l694:
  6622  0021D8  5038               	movf	___ftadd@exp2,w,c
  6623  0021DA  1839               	xorwf	___ftadd@exp1,w,c
  6624  0021DC  B4D8               	btfsc	status,2,c
  6625  0021DE  D01F               	goto	u2660
  6626  0021E0  D7F6               	goto	l695
  6627  0021E2                     l689:
  6628  0021E2  5039               	movf	___ftadd@exp1,w,c
  6629  0021E4  5C38               	subwf	___ftadd@exp2,w,c
  6630  0021E6  B0D8               	btfsc	status,0,c
  6631  0021E8  D01A               	goto	u2660
  6632  0021EA                     u2630:
  6633  0021EA  90D8               	bcf	status,0,c
  6634  0021EC  362E               	rlcf	___ftadd@f1,f,c
  6635  0021EE  362F               	rlcf	___ftadd@f1+1,f,c
  6636  0021F0  3630               	rlcf	___ftadd@f1+2,f,c
  6637  0021F2  0639               	decf	___ftadd@exp1,f,c
  6638  0021F4  5039               	movf	___ftadd@exp1,w,c
  6639  0021F6  1838               	xorwf	___ftadd@exp2,w,c
  6640  0021F8  B4D8               	btfsc	status,2,c
  6641  0021FA  D00D               	goto	l703
  6642  0021FC  0637               	decf	___ftadd@sign,f,c
  6643  0021FE  C037  F034         	movff	___ftadd@sign,??___ftadd
  6644  002202  0E07               	movlw	7
  6645  002204  1634               	andwf	??___ftadd,f,c
  6646  002206  B4D8               	btfsc	status,2,c
  6647  002208  D006               	goto	l703
  6648  00220A  D7EF               	goto	u2630
  6649  00220C  90D8               	bcf	status,0,c
  6650  00220E  3233               	rrcf	___ftadd@f2+2,f,c
  6651  002210  3232               	rrcf	___ftadd@f2+1,f,c
  6652  002212  3231               	rrcf	___ftadd@f2,f,c
  6653  002214  2A38               	incf	___ftadd@exp2,f,c
  6654  002216                     l703:
  6655  002216  5038               	movf	___ftadd@exp2,w,c
  6656  002218  1839               	xorwf	___ftadd@exp1,w,c
  6657  00221A  A4D8               	btfss	status,2,c
  6658  00221C  D7F7               	goto	l704
  6659  00221E                     u2660:
  6660  00221E  AE37               	btfss	___ftadd@sign,7,c
  6661  002220  D00C               	goto	l706
  6662  002222  0EFF               	movlw	255
  6663  002224  1A2E               	xorwf	___ftadd@f1,f,c
  6664  002226  0EFF               	movlw	255
  6665  002228  1A2F               	xorwf	___ftadd@f1+1,f,c
  6666  00222A  0EFF               	movlw	255
  6667  00222C  1A30               	xorwf	___ftadd@f1+2,f,c
  6668  00222E  0E01               	movlw	1
  6669  002230  262E               	addwf	___ftadd@f1,f,c
  6670  002232  0E00               	movlw	0
  6671  002234  222F               	addwfc	___ftadd@f1+1,f,c
  6672  002236  0E00               	movlw	0
  6673  002238  2230               	addwfc	___ftadd@f1+2,f,c
  6674  00223A                     l706:
  6675  00223A  AC37               	btfss	___ftadd@sign,6,c
  6676  00223C  D00C               	goto	l707
  6677  00223E  0EFF               	movlw	255
  6678  002240  1A31               	xorwf	___ftadd@f2,f,c
  6679  002242  0EFF               	movlw	255
  6680  002244  1A32               	xorwf	___ftadd@f2+1,f,c
  6681  002246  0EFF               	movlw	255
  6682  002248  1A33               	xorwf	___ftadd@f2+2,f,c
  6683  00224A  0E01               	movlw	1
  6684  00224C  2631               	addwf	___ftadd@f2,f,c
  6685  00224E  0E00               	movlw	0
  6686  002250  2232               	addwfc	___ftadd@f2+1,f,c
  6687  002252  0E00               	movlw	0
  6688  002254  2233               	addwfc	___ftadd@f2+2,f,c
  6689  002256                     l707:
  6690  002256  0E00               	movlw	0
  6691  002258  6E37               	movwf	___ftadd@sign,c
  6692  00225A  502E               	movf	___ftadd@f1,w,c
  6693  00225C  2631               	addwf	___ftadd@f2,f,c
  6694  00225E  502F               	movf	___ftadd@f1+1,w,c
  6695  002260  2232               	addwfc	___ftadd@f2+1,f,c
  6696  002262  5030               	movf	___ftadd@f1+2,w,c
  6697  002264  2233               	addwfc	___ftadd@f2+2,f,c
  6698  002266  AE33               	btfss	___ftadd@f2+2,7,c
  6699  002268  D00E               	goto	l708
  6700  00226A  0EFF               	movlw	255
  6701  00226C  1A31               	xorwf	___ftadd@f2,f,c
  6702  00226E  0EFF               	movlw	255
  6703  002270  1A32               	xorwf	___ftadd@f2+1,f,c
  6704  002272  0EFF               	movlw	255
  6705  002274  1A33               	xorwf	___ftadd@f2+2,f,c
  6706  002276  0E01               	movlw	1
  6707  002278  2631               	addwf	___ftadd@f2,f,c
  6708  00227A  0E00               	movlw	0
  6709  00227C  2232               	addwfc	___ftadd@f2+1,f,c
  6710  00227E  0E00               	movlw	0
  6711  002280  2233               	addwfc	___ftadd@f2+2,f,c
  6712  002282  0E01               	movlw	1
  6713  002284  6E37               	movwf	___ftadd@sign,c
  6714  002286                     l708:
  6715  002286  C031  F001         	movff	___ftadd@f2,___ftpack@arg
  6716  00228A  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  6717  00228E  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  6718  002292  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
  6719  002296  C037  F005         	movff	___ftadd@sign,___ftpack@sign
  6720  00229A  ECB7  F014         	call	___ftpack	;wreg free
  6721  00229E  C001  F02E         	movff	?___ftpack,?___ftadd
  6722  0022A2  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  6723  0022A6  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  6724  0022AA  0012               	return	
  6725  0022AC                     __end_of___ftadd:
  6726                           	opt stack 0
  6727                           tblptru	equ	0xFF8
  6728                           tblptrh	equ	0xFF7
  6729                           tblptrl	equ	0xFF6
  6730                           tablat	equ	0xFF5
  6731                           prodh	equ	0xFF4
  6732                           prodl	equ	0xFF3
  6733                           wreg	equ	0xFE8
  6734                           indf1	equ	0xFE7
  6735                           fsr1h	equ	0xFE2
  6736                           fsr1l	equ	0xFE1
  6737                           indf2	equ	0xFDF
  6738                           postinc2	equ	0xFDE
  6739                           postdec2	equ	0xFDD
  6740                           fsr2h	equ	0xFDA
  6741                           fsr2l	equ	0xFD9
  6742                           status	equ	0xFD8
  6743                           
  6744 ;; *************** function ___ftneg *****************
  6745 ;; Defined at:
  6746 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
  6747 ;; Parameters:    Size  Location     Type
  6748 ;;  f1              3    0[COMRAM] float 
  6749 ;; Auto vars:     Size  Location     Type
  6750 ;;		None
  6751 ;; Return value:  Size  Location     Type
  6752 ;;                  3    0[COMRAM] float 
  6753 ;; Registers used:
  6754 ;;		wreg, status,2, status,0
  6755 ;; Tracked objects:
  6756 ;;		On entry : 0/0
  6757 ;;		On exit  : 0/0
  6758 ;;		Unchanged: 0/0
  6759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6760 ;;      Params:         3       0       0       0       0       0       0       0       0
  6761 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6762 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6763 ;;      Totals:         3       0       0       0       0       0       0       0       0
  6764 ;;Total ram usage:        3 bytes
  6765 ;; Hardware stack levels used:    1
  6766 ;; This function calls:
  6767 ;;		Nothing
  6768 ;; This function is called by:
  6769 ;;		_sprintf
  6770 ;; This function uses a non-reentrant model
  6771 ;;
  6772                           
  6773                           	psect	text16
  6774  002F18                     __ptext16:
  6775                           	opt stack 0
  6776  002F18                     ___ftneg:
  6777                           	opt stack 29
  6778                           
  6779                           ;incstack = 0
  6780  002F18  5001               	movf	___ftneg@f1,w,c
  6781  002F1A  1002               	iorwf	___ftneg@f1+1,w,c
  6782  002F1C  1003               	iorwf	___ftneg@f1+2,w,c
  6783  002F1E  B4D8               	btfsc	status,2,c
  6784  002F20  D006               	goto	l756
  6785  002F22  0E00               	movlw	0
  6786  002F24  1A01               	xorwf	___ftneg@f1,f,c
  6787  002F26  0E00               	movlw	0
  6788  002F28  1A02               	xorwf	___ftneg@f1+1,f,c
  6789  002F2A  0E80               	movlw	128
  6790  002F2C  1A03               	xorwf	___ftneg@f1+2,f,c
  6791  002F2E                     l756:
  6792  002F2E  C001  F001         	movff	___ftneg@f1,?___ftneg
  6793  002F32  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  6794  002F36  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  6795  002F3A  0012               	return		;funcret
  6796  002F3C                     __end_of___ftneg:
  6797                           	opt stack 0
  6798                           tblptru	equ	0xFF8
  6799                           tblptrh	equ	0xFF7
  6800                           tblptrl	equ	0xFF6
  6801                           tablat	equ	0xFF5
  6802                           prodh	equ	0xFF4
  6803                           prodl	equ	0xFF3
  6804                           wreg	equ	0xFE8
  6805                           indf1	equ	0xFE7
  6806                           fsr1h	equ	0xFE2
  6807                           fsr1l	equ	0xFE1
  6808                           indf2	equ	0xFDF
  6809                           postinc2	equ	0xFDE
  6810                           postdec2	equ	0xFDD
  6811                           fsr2h	equ	0xFDA
  6812                           fsr2l	equ	0xFD9
  6813                           status	equ	0xFD8
  6814                           
  6815 ;; *************** function ___ftge *****************
  6816 ;; Defined at:
  6817 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  6818 ;; Parameters:    Size  Location     Type
  6819 ;;  ff1             3    0[COMRAM] float 
  6820 ;;  ff2             3    3[COMRAM] float 
  6821 ;; Auto vars:     Size  Location     Type
  6822 ;;		None
  6823 ;; Return value:  Size  Location     Type
  6824 ;;		None               void
  6825 ;; Registers used:
  6826 ;;		wreg, status,2, status,0
  6827 ;; Tracked objects:
  6828 ;;		On entry : 0/0
  6829 ;;		On exit  : 0/0
  6830 ;;		Unchanged: 0/0
  6831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6832 ;;      Params:         6       0       0       0       0       0       0       0       0
  6833 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6834 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6835 ;;      Totals:         9       0       0       0       0       0       0       0       0
  6836 ;;Total ram usage:        9 bytes
  6837 ;; Hardware stack levels used:    1
  6838 ;; This function calls:
  6839 ;;		Nothing
  6840 ;; This function is called by:
  6841 ;;		_sprintf
  6842 ;; This function uses a non-reentrant model
  6843 ;;
  6844                           
  6845                           	psect	text17
  6846  002A1C                     __ptext17:
  6847                           	opt stack 0
  6848  002A1C                     ___ftge:
  6849                           	opt stack 29
  6850                           
  6851                           ;incstack = 0
  6852  002A1C  AE03               	btfss	___ftge@ff1+2,7,c
  6853  002A1E  D016               	goto	l738
  6854  002A20  C001  F007         	movff	___ftge@ff1,??___ftge
  6855  002A24  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  6856  002A28  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  6857  002A2C  1E07               	comf	??___ftge,f,c
  6858  002A2E  1E08               	comf	??___ftge+1,f,c
  6859  002A30  1E09               	comf	??___ftge+2,f,c
  6860  002A32  2A07               	incf	??___ftge,f,c
  6861  002A34  0E00               	movlw	0
  6862  002A36  2208               	addwfc	??___ftge+1,f,c
  6863  002A38  2209               	addwfc	??___ftge+2,f,c
  6864  002A3A  0E00               	movlw	0
  6865  002A3C  2407               	addwf	??___ftge,w,c
  6866  002A3E  6E01               	movwf	___ftge@ff1,c
  6867  002A40  0E00               	movlw	0
  6868  002A42  2008               	addwfc	??___ftge+1,w,c
  6869  002A44  6E02               	movwf	___ftge@ff1+1,c
  6870  002A46  0E80               	movlw	128
  6871  002A48  2009               	addwfc	??___ftge+2,w,c
  6872  002A4A  6E03               	movwf	___ftge@ff1+2,c
  6873  002A4C                     l738:
  6874  002A4C  AE06               	btfss	___ftge@ff2+2,7,c
  6875  002A4E  D016               	goto	l739
  6876  002A50  C004  F007         	movff	___ftge@ff2,??___ftge
  6877  002A54  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  6878  002A58  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  6879  002A5C  1E07               	comf	??___ftge,f,c
  6880  002A5E  1E08               	comf	??___ftge+1,f,c
  6881  002A60  1E09               	comf	??___ftge+2,f,c
  6882  002A62  2A07               	incf	??___ftge,f,c
  6883  002A64  0E00               	movlw	0
  6884  002A66  2208               	addwfc	??___ftge+1,f,c
  6885  002A68  2209               	addwfc	??___ftge+2,f,c
  6886  002A6A  0E00               	movlw	0
  6887  002A6C  2407               	addwf	??___ftge,w,c
  6888  002A6E  6E04               	movwf	___ftge@ff2,c
  6889  002A70  0E00               	movlw	0
  6890  002A72  2008               	addwfc	??___ftge+1,w,c
  6891  002A74  6E05               	movwf	___ftge@ff2+1,c
  6892  002A76  0E80               	movlw	128
  6893  002A78  2009               	addwfc	??___ftge+2,w,c
  6894  002A7A  6E06               	movwf	___ftge@ff2+2,c
  6895  002A7C                     l739:
  6896  002A7C  0E00               	movlw	0
  6897  002A7E  1A01               	xorwf	___ftge@ff1,f,c
  6898  002A80  0E00               	movlw	0
  6899  002A82  1A02               	xorwf	___ftge@ff1+1,f,c
  6900  002A84  0E80               	movlw	128
  6901  002A86  1A03               	xorwf	___ftge@ff1+2,f,c
  6902  002A88  0E00               	movlw	0
  6903  002A8A  1A04               	xorwf	___ftge@ff2,f,c
  6904  002A8C  0E00               	movlw	0
  6905  002A8E  1A05               	xorwf	___ftge@ff2+1,f,c
  6906  002A90  0E80               	movlw	128
  6907  002A92  1A06               	xorwf	___ftge@ff2+2,f,c
  6908  002A94  5004               	movf	___ftge@ff2,w,c
  6909  002A96  5C01               	subwf	___ftge@ff1,w,c
  6910  002A98  5005               	movf	___ftge@ff2+1,w,c
  6911  002A9A  5802               	subwfb	___ftge@ff1+1,w,c
  6912  002A9C  5006               	movf	___ftge@ff2+2,w,c
  6913  002A9E  5803               	subwfb	___ftge@ff1+2,w,c
  6914  002AA0  B0D8               	btfsc	status,0,c
  6915  002AA2  D002               	goto	l2504
  6916  002AA4  90D8               	bcf	status,0,c
  6917  002AA6  0012               	return	
  6918  002AA8                     l2504:
  6919  002AA8  80D8               	bsf	status,0,c
  6920  002AAA  0012               	return	
  6921  002AAC                     __end_of___ftge:
  6922                           	opt stack 0
  6923                           tblptru	equ	0xFF8
  6924                           tblptrh	equ	0xFF7
  6925                           tblptrl	equ	0xFF6
  6926                           tablat	equ	0xFF5
  6927                           prodh	equ	0xFF4
  6928                           prodl	equ	0xFF3
  6929                           wreg	equ	0xFE8
  6930                           indf1	equ	0xFE7
  6931                           fsr1h	equ	0xFE2
  6932                           fsr1l	equ	0xFE1
  6933                           indf2	equ	0xFDF
  6934                           postinc2	equ	0xFDE
  6935                           postdec2	equ	0xFDD
  6936                           fsr2h	equ	0xFDA
  6937                           fsr2l	equ	0xFD9
  6938                           status	equ	0xFD8
  6939                           
  6940 ;; *************** function _memset *****************
  6941 ;; Defined at:
  6942 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
  6943 ;; Parameters:    Size  Location     Type
  6944 ;;  p1              2    0[COMRAM] PTR void 
  6945 ;;		 -> main@frecuencia(120), 
  6946 ;;  c               2    2[COMRAM] int 
  6947 ;;  n               2    4[COMRAM] unsigned int 
  6948 ;; Auto vars:     Size  Location     Type
  6949 ;;  p               2    6[COMRAM] PTR unsigned char 
  6950 ;;		 -> main@frecuencia(120), 
  6951 ;; Return value:  Size  Location     Type
  6952 ;;                  2    0[COMRAM] PTR void 
  6953 ;; Registers used:
  6954 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6955 ;; Tracked objects:
  6956 ;;		On entry : 0/0
  6957 ;;		On exit  : 0/0
  6958 ;;		Unchanged: 0/0
  6959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6960 ;;      Params:         6       0       0       0       0       0       0       0       0
  6961 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6962 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6963 ;;      Totals:         8       0       0       0       0       0       0       0       0
  6964 ;;Total ram usage:        8 bytes
  6965 ;; Hardware stack levels used:    1
  6966 ;; This function calls:
  6967 ;;		Nothing
  6968 ;; This function is called by:
  6969 ;;		_main
  6970 ;; This function uses a non-reentrant model
  6971 ;;
  6972                           
  6973                           	psect	text18
  6974  002E9A                     __ptext18:
  6975                           	opt stack 0
  6976  002E9A                     _memset:
  6977                           	opt stack 30
  6978                           
  6979                           ;incstack = 0
  6980  002E9A  C001  F007         	movff	memset@p1,memset@p
  6981  002E9E  C002  F008         	movff	memset@p1+1,memset@p+1
  6982  002EA2  D008               	goto	l884
  6983  002EA4                     l3240:
  6984  002EA4  C007  FFD9         	movff	memset@p,fsr2l
  6985  002EA8  C008  FFDA         	movff	memset@p+1,fsr2h
  6986  002EAC  C003  FFDF         	movff	memset@c,indf2
  6987  002EB0  4A07               	infsnz	memset@p,f,c
  6988  002EB2  2A08               	incf	memset@p+1,f,c
  6989  002EB4                     l884:
  6990  002EB4  0605               	decf	memset@n,f,c
  6991  002EB6  A0D8               	btfss	status,0,c
  6992  002EB8  0606               	decf	memset@n+1,f,c
  6993  002EBA  2805               	incf	memset@n,w,c
  6994  002EBC  E1F3               	bnz	l3240
  6995  002EBE  2806               	incf	memset@n+1,w,c
  6996  002EC0  B4D8               	btfsc	status,2,c
  6997  002EC2  0012               	return	
  6998  002EC4  D7EF               	goto	l885
  6999  002EC6                     __end_of_memset:
  7000                           	opt stack 0
  7001                           tblptru	equ	0xFF8
  7002                           tblptrh	equ	0xFF7
  7003                           tblptrl	equ	0xFF6
  7004                           tablat	equ	0xFF5
  7005                           prodh	equ	0xFF4
  7006                           prodl	equ	0xFF3
  7007                           wreg	equ	0xFE8
  7008                           indf1	equ	0xFE7
  7009                           fsr1h	equ	0xFE2
  7010                           fsr1l	equ	0xFE1
  7011                           indf2	equ	0xFDF
  7012                           postinc2	equ	0xFDE
  7013                           postdec2	equ	0xFDD
  7014                           fsr2h	equ	0xFDA
  7015                           fsr2l	equ	0xFD9
  7016                           status	equ	0xFD8
  7017                           
  7018 ;; *************** function _lcd_texto *****************
  7019 ;; Defined at:
  7020 ;;		line 296 in file "lcd.c"
  7021 ;; Parameters:    Size  Location     Type
  7022 ;;  cadena          2   74[COMRAM] PTR unsigned char 
  7023 ;;		 -> main@UwU(80), main@frecuencia(120), 
  7024 ;; Auto vars:     Size  Location     Type
  7025 ;;		None
  7026 ;; Return value:  Size  Location     Type
  7027 ;;                  1    wreg      void 
  7028 ;; Registers used:
  7029 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7030 ;; Tracked objects:
  7031 ;;		On entry : 0/0
  7032 ;;		On exit  : 0/0
  7033 ;;		Unchanged: 0/0
  7034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7035 ;;      Params:         2       0       0       0       0       0       0       0       0
  7036 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7037 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7038 ;;      Totals:         3       0       0       0       0       0       0       0       0
  7039 ;;Total ram usage:        3 bytes
  7040 ;; Hardware stack levels used:    1
  7041 ;; Hardware stack levels required when called:    5
  7042 ;; This function calls:
  7043 ;;		_lcd_caracter
  7044 ;; This function is called by:
  7045 ;;		_main
  7046 ;; This function uses a non-reentrant model
  7047 ;;
  7048                           
  7049                           	psect	text19
  7050  002EC6                     __ptext19:
  7051                           	opt stack 0
  7052  002EC6                     _lcd_texto:
  7053                           	opt stack 25
  7054                           
  7055                           ;lcd.c: 297: while(*cadena != 0x00){
  7056                           
  7057                           ;incstack = 0
  7058  002EC6  D00D               	goto	l27
  7059  002EC8                     
  7060                           ;lcd.c: 298: lcd_caracter(*cadena);
  7061  002EC8  C04B  FFD9         	movff	lcd_texto@cadena,fsr2l
  7062  002ECC  C04C  FFDA         	movff	lcd_texto@cadena+1,fsr2h
  7063  002ED0  50DF               	movf	indf2,w,c
  7064  002ED2  6E4D               	movwf	??_lcd_texto& (0+255),c
  7065  002ED4  504D               	movf	??_lcd_texto,w,c
  7066  002ED6  6E44               	movwf	lcd_caracter@caracter,c
  7067  002ED8  6A45               	clrf	lcd_caracter@caracter+1,c
  7068  002EDA  EC49  F016         	call	_lcd_caracter	;wreg free
  7069                           
  7070                           ;lcd.c: 299: cadena++;
  7071  002EDE  4A4B               	infsnz	lcd_texto@cadena,f,c
  7072  002EE0  2A4C               	incf	lcd_texto@cadena+1,f,c
  7073  002EE2                     l27:
  7074  002EE2  C04B  FFD9         	movff	lcd_texto@cadena,fsr2l
  7075  002EE6  C04C  FFDA         	movff	lcd_texto@cadena+1,fsr2h
  7076  002EEA  50DF               	movf	indf2,w,c
  7077  002EEC  B4D8               	btfsc	status,2,c
  7078  002EEE  0012               	return	
  7079  002EF0  D7EB               	goto	l28
  7080  002EF2                     __end_of_lcd_texto:
  7081                           	opt stack 0
  7082                           tblptru	equ	0xFF8
  7083                           tblptrh	equ	0xFF7
  7084                           tblptrl	equ	0xFF6
  7085                           tablat	equ	0xFF5
  7086                           prodh	equ	0xFF4
  7087                           prodl	equ	0xFF3
  7088                           wreg	equ	0xFE8
  7089                           indf1	equ	0xFE7
  7090                           fsr1h	equ	0xFE2
  7091                           fsr1l	equ	0xFE1
  7092                           indf2	equ	0xFDF
  7093                           postinc2	equ	0xFDE
  7094                           postdec2	equ	0xFDD
  7095                           fsr2h	equ	0xFDA
  7096                           fsr2l	equ	0xFD9
  7097                           status	equ	0xFD8
  7098                           
  7099 ;; *************** function _lcd_caracter *****************
  7100 ;; Defined at:
  7101 ;;		line 286 in file "lcd.c"
  7102 ;; Parameters:    Size  Location     Type
  7103 ;;  caracter        2   67[COMRAM] unsigned int 
  7104 ;; Auto vars:     Size  Location     Type
  7105 ;;		None
  7106 ;; Return value:  Size  Location     Type
  7107 ;;                  1    wreg      void 
  7108 ;; Registers used:
  7109 ;;		wreg, status,2, status,0, cstack
  7110 ;; Tracked objects:
  7111 ;;		On entry : 0/0
  7112 ;;		On exit  : 0/0
  7113 ;;		Unchanged: 0/0
  7114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7115 ;;      Params:         2       0       0       0       0       0       0       0       0
  7116 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7117 ;;      Temps:          5       0       0       0       0       0       0       0       0
  7118 ;;      Totals:         7       0       0       0       0       0       0       0       0
  7119 ;;Total ram usage:        7 bytes
  7120 ;; Hardware stack levels used:    1
  7121 ;; Hardware stack levels required when called:    4
  7122 ;; This function calls:
  7123 ;;		_lcd_pulso
  7124 ;; This function is called by:
  7125 ;;		_lcd_texto
  7126 ;; This function uses a non-reentrant model
  7127 ;;
  7128                           
  7129                           	psect	text20
  7130  002C92                     __ptext20:
  7131                           	opt stack 0
  7132  002C92                     _lcd_caracter:
  7133                           	opt stack 25
  7134                           
  7135                           ;lcd.c: 287: PORTDbits.RD1=1;
  7136                           
  7137                           ;incstack = 0
  7138  002C92  8283               	bsf	3971,1,c	;volatile
  7139                           
  7140                           ;lcd.c: 289: PORTD=(((((PORTD>>4&0x0f)|0x0f)&(caracter>>4&0x0f))<<4)|(PORTD&0x0f));
  7141  002C94  CF83 F046          	movff	3971,??_lcd_caracter	;volatile
  7142  002C98  0E0F               	movlw	15
  7143  002C9A  1646               	andwf	??_lcd_caracter,f,c
  7144  002C9C  C044  F047         	movff	lcd_caracter@caracter,??_lcd_caracter+1
  7145  002CA0  C045  F048         	movff	lcd_caracter@caracter+1,??_lcd_caracter+2
  7146  002CA4  0E04               	movlw	4
  7147  002CA6  6E49               	movwf	(??_lcd_caracter+3)& (0+255),c
  7148  002CA8                     u2895:
  7149  002CA8  90D8               	bcf	status,0,c
  7150  002CAA  3248               	rrcf	??_lcd_caracter+2,f,c
  7151  002CAC  3247               	rrcf	??_lcd_caracter+1,f,c
  7152  002CAE  2E49               	decfsz	(??_lcd_caracter+3)& (0+255),f,c
  7153  002CB0  D7FB               	goto	u2895
  7154  002CB2  0E0F               	movlw	15
  7155  002CB4  1647               	andwf	??_lcd_caracter+1,f,c
  7156  002CB6  3883               	swapf	3971,w,c	;volatile
  7157  002CB8  0B0F               	andlw	15
  7158  002CBA  0B0F               	andlw	15
  7159  002CBC  090F               	iorlw	15
  7160  002CBE  1447               	andwf	??_lcd_caracter+1,w,c
  7161  002CC0  6E4A               	movwf	(??_lcd_caracter+4)& (0+255),c
  7162  002CC2  384A               	swapf	??_lcd_caracter+4,w,c
  7163  002CC4  0BF0               	andlw	240
  7164  002CC6  1046               	iorwf	??_lcd_caracter,w,c
  7165  002CC8  6E83               	movwf	3971,c	;volatile
  7166                           
  7167                           ;lcd.c: 290: lcd_pulso();
  7168  002CCA  ECAD  F017         	call	_lcd_pulso	;wreg free
  7169                           
  7170                           ;lcd.c: 291: PORTD=(((((PORTD>>4&0x0f)|0x0f)&(caracter&0x0f))<<4)|(PORTD&0x0f));
  7171  002CCE  CF83 F046          	movff	3971,??_lcd_caracter	;volatile
  7172  002CD2  0E0F               	movlw	15
  7173  002CD4  1646               	andwf	??_lcd_caracter,f,c
  7174  002CD6  C044  F047         	movff	lcd_caracter@caracter,??_lcd_caracter+1
  7175  002CDA  0E0F               	movlw	15
  7176  002CDC  1647               	andwf	??_lcd_caracter+1,f,c
  7177  002CDE  3883               	swapf	3971,w,c	;volatile
  7178  002CE0  0B0F               	andlw	15
  7179  002CE2  0B0F               	andlw	15
  7180  002CE4  090F               	iorlw	15
  7181  002CE6  1447               	andwf	??_lcd_caracter+1,w,c
  7182  002CE8  6E48               	movwf	(??_lcd_caracter+2)& (0+255),c
  7183  002CEA  3848               	swapf	??_lcd_caracter+2,w,c
  7184  002CEC  0BF0               	andlw	240
  7185  002CEE  1046               	iorwf	??_lcd_caracter,w,c
  7186  002CF0  6E83               	movwf	3971,c	;volatile
  7187                           
  7188                           ;lcd.c: 292: lcd_pulso();
  7189  002CF2  ECAD  F017         	call	_lcd_pulso	;wreg free
  7190                           
  7191                           ;lcd.c: 293: PORTDbits.RD1=0;
  7192  002CF6  9283               	bcf	3971,1,c	;volatile
  7193  002CF8  0012               	return		;funcret
  7194  002CFA                     __end_of_lcd_caracter:
  7195                           	opt stack 0
  7196                           tblptru	equ	0xFF8
  7197                           tblptrh	equ	0xFF7
  7198                           tblptrl	equ	0xFF6
  7199                           tablat	equ	0xFF5
  7200                           prodh	equ	0xFF4
  7201                           prodl	equ	0xFF3
  7202                           wreg	equ	0xFE8
  7203                           indf1	equ	0xFE7
  7204                           fsr1h	equ	0xFE2
  7205                           fsr1l	equ	0xFE1
  7206                           indf2	equ	0xFDF
  7207                           postinc2	equ	0xFDE
  7208                           postdec2	equ	0xFDD
  7209                           fsr2h	equ	0xFDA
  7210                           fsr2l	equ	0xFD9
  7211                           status	equ	0xFD8
  7212                           
  7213 ;; *************** function _lcd_origen *****************
  7214 ;; Defined at:
  7215 ;;		line 308 in file "lcd.c"
  7216 ;; Parameters:    Size  Location     Type
  7217 ;;		None
  7218 ;; Auto vars:     Size  Location     Type
  7219 ;;		None
  7220 ;; Return value:  Size  Location     Type
  7221 ;;                  1    wreg      void 
  7222 ;; Registers used:
  7223 ;;		wreg, status,2, status,0, cstack
  7224 ;; Tracked objects:
  7225 ;;		On entry : 0/0
  7226 ;;		On exit  : 0/0
  7227 ;;		Unchanged: 0/0
  7228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7229 ;;      Params:         0       0       0       0       0       0       0       0       0
  7230 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7231 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7232 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7233 ;;Total ram usage:        0 bytes
  7234 ;; Hardware stack levels used:    1
  7235 ;; Hardware stack levels required when called:    5
  7236 ;; This function calls:
  7237 ;;		_lcd_orden
  7238 ;;		_wait_in_ms
  7239 ;; This function is called by:
  7240 ;;		_main
  7241 ;;		_lcd_ubicarXY
  7242 ;; This function uses a non-reentrant model
  7243 ;;
  7244                           
  7245                           	psect	text21
  7246  002F78                     __ptext21:
  7247                           	opt stack 0
  7248  002F78                     _lcd_origen:
  7249                           	opt stack 25
  7250                           
  7251                           ;lcd.c: 309: lcd_orden(0x02);
  7252                           
  7253                           ;incstack = 0
  7254  002F78  0E00               	movlw	0
  7255  002F7A  6E45               	movwf	lcd_orden@orden+1,c
  7256  002F7C  0E02               	movlw	2
  7257  002F7E  6E44               	movwf	lcd_orden@orden,c
  7258  002F80  ECB0  F016         	call	_lcd_orden	;wreg free
  7259                           
  7260                           ;lcd.c: 310: wait_in_ms(4);
  7261  002F84  0E00               	movlw	0
  7262  002F86  6E3B               	movwf	wait_in_ms@time_in_ms+1,c
  7263  002F88  0E04               	movlw	4
  7264  002F8A  6E3A               	movwf	wait_in_ms@time_in_ms,c
  7265  002F8C  EC51  F014         	call	_wait_in_ms	;wreg free
  7266  002F90  0012               	return		;funcret
  7267  002F92                     __end_of_lcd_origen:
  7268                           	opt stack 0
  7269                           tblptru	equ	0xFF8
  7270                           tblptrh	equ	0xFF7
  7271                           tblptrl	equ	0xFF6
  7272                           tablat	equ	0xFF5
  7273                           prodh	equ	0xFF4
  7274                           prodl	equ	0xFF3
  7275                           wreg	equ	0xFE8
  7276                           indf1	equ	0xFE7
  7277                           fsr1h	equ	0xFE2
  7278                           fsr1l	equ	0xFE1
  7279                           indf2	equ	0xFDF
  7280                           postinc2	equ	0xFDE
  7281                           postdec2	equ	0xFDD
  7282                           fsr2h	equ	0xFDA
  7283                           fsr2l	equ	0xFD9
  7284                           status	equ	0xFD8
  7285                           
  7286 ;; *************** function _lcd_limpiar *****************
  7287 ;; Defined at:
  7288 ;;		line 303 in file "lcd.c"
  7289 ;; Parameters:    Size  Location     Type
  7290 ;;		None
  7291 ;; Auto vars:     Size  Location     Type
  7292 ;;		None
  7293 ;; Return value:  Size  Location     Type
  7294 ;;                  1    wreg      void 
  7295 ;; Registers used:
  7296 ;;		wreg, status,2, status,0, cstack
  7297 ;; Tracked objects:
  7298 ;;		On entry : 0/0
  7299 ;;		On exit  : 0/0
  7300 ;;		Unchanged: 0/0
  7301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7302 ;;      Params:         0       0       0       0       0       0       0       0       0
  7303 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7304 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7305 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7306 ;;Total ram usage:        0 bytes
  7307 ;; Hardware stack levels used:    1
  7308 ;; Hardware stack levels required when called:    5
  7309 ;; This function calls:
  7310 ;;		_lcd_orden
  7311 ;;		_wait_in_ms
  7312 ;; This function is called by:
  7313 ;;		_main
  7314 ;; This function uses a non-reentrant model
  7315 ;;
  7316                           
  7317                           	psect	text22
  7318  002F92                     __ptext22:
  7319                           	opt stack 0
  7320  002F92                     _lcd_limpiar:
  7321                           	opt stack 25
  7322                           
  7323                           ;lcd.c: 304: lcd_orden(0x01);
  7324                           
  7325                           ;incstack = 0
  7326  002F92  0E00               	movlw	0
  7327  002F94  6E45               	movwf	lcd_orden@orden+1,c
  7328  002F96  0E01               	movlw	1
  7329  002F98  6E44               	movwf	lcd_orden@orden,c
  7330  002F9A  ECB0  F016         	call	_lcd_orden	;wreg free
  7331                           
  7332                           ;lcd.c: 305: wait_in_ms(2);
  7333  002F9E  0E00               	movlw	0
  7334  002FA0  6E3B               	movwf	wait_in_ms@time_in_ms+1,c
  7335  002FA2  0E02               	movlw	2
  7336  002FA4  6E3A               	movwf	wait_in_ms@time_in_ms,c
  7337  002FA6  EC51  F014         	call	_wait_in_ms	;wreg free
  7338  002FAA  0012               	return		;funcret
  7339  002FAC                     __end_of_lcd_limpiar:
  7340                           	opt stack 0
  7341                           tblptru	equ	0xFF8
  7342                           tblptrh	equ	0xFF7
  7343                           tblptrl	equ	0xFF6
  7344                           tablat	equ	0xFF5
  7345                           prodh	equ	0xFF4
  7346                           prodl	equ	0xFF3
  7347                           wreg	equ	0xFE8
  7348                           indf1	equ	0xFE7
  7349                           fsr1h	equ	0xFE2
  7350                           fsr1l	equ	0xFE1
  7351                           indf2	equ	0xFDF
  7352                           postinc2	equ	0xFDE
  7353                           postdec2	equ	0xFDD
  7354                           fsr2h	equ	0xFDA
  7355                           fsr2l	equ	0xFD9
  7356                           status	equ	0xFD8
  7357                           
  7358 ;; *************** function _lcd_iniciar *****************
  7359 ;; Defined at:
  7360 ;;		line 224 in file "lcd.c"
  7361 ;; Parameters:    Size  Location     Type
  7362 ;;		None
  7363 ;; Auto vars:     Size  Location     Type
  7364 ;;		None
  7365 ;; Return value:  Size  Location     Type
  7366 ;;                  1    wreg      void 
  7367 ;; Registers used:
  7368 ;;		wreg, status,2, status,0, cstack
  7369 ;; Tracked objects:
  7370 ;;		On entry : 0/0
  7371 ;;		On exit  : 0/0
  7372 ;;		Unchanged: 0/0
  7373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7374 ;;      Params:         0       0       0       0       0       0       0       0       0
  7375 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7376 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7377 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7378 ;;Total ram usage:        0 bytes
  7379 ;; Hardware stack levels used:    1
  7380 ;; Hardware stack levels required when called:    5
  7381 ;; This function calls:
  7382 ;;		_lcd_orden
  7383 ;;		_lcd_pulso
  7384 ;;		_wait_in_ms
  7385 ;; This function is called by:
  7386 ;;		_main
  7387 ;; This function uses a non-reentrant model
  7388 ;;
  7389                           
  7390                           	psect	text23
  7391  0027D4                     __ptext23:
  7392                           	opt stack 0
  7393  0027D4                     _lcd_iniciar:
  7394                           	opt stack 25
  7395                           
  7396                           ;lcd.c: 225: TRISDbits.TRISD1=0;
  7397                           
  7398                           ;incstack = 0
  7399  0027D4  9295               	bcf	3989,1,c	;volatile
  7400                           
  7401                           ;lcd.c: 226: TRISDbits.TRISD2=0;
  7402  0027D6  9495               	bcf	3989,2,c	;volatile
  7403                           
  7404                           ;lcd.c: 227: TRISDbits.TRISD3=0;
  7405  0027D8  9695               	bcf	3989,3,c	;volatile
  7406                           
  7407                           ;lcd.c: 228: TRISDbits.TRISD4=0;
  7408  0027DA  9895               	bcf	3989,4,c	;volatile
  7409                           
  7410                           ;lcd.c: 229: TRISDbits.TRISD5=0;
  7411  0027DC  9A95               	bcf	3989,5,c	;volatile
  7412                           
  7413                           ;lcd.c: 230: TRISDbits.TRISD6=0;
  7414  0027DE  9C95               	bcf	3989,6,c	;volatile
  7415                           
  7416                           ;lcd.c: 231: TRISDbits.TRISD7=0;
  7417  0027E0  9E95               	bcf	3989,7,c	;volatile
  7418                           
  7419                           ;lcd.c: 233: PORTDbits.RD1=0;
  7420  0027E2  9283               	bcf	3971,1,c	;volatile
  7421                           
  7422                           ;lcd.c: 234: PORTDbits.RD2=0;
  7423  0027E4  9483               	bcf	3971,2,c	;volatile
  7424                           
  7425                           ;lcd.c: 235: PORTDbits.RD3=0;
  7426  0027E6  9683               	bcf	3971,3,c	;volatile
  7427                           
  7428                           ;lcd.c: 236: PORTDbits.RD4=0;
  7429  0027E8  9883               	bcf	3971,4,c	;volatile
  7430                           
  7431                           ;lcd.c: 237: PORTDbits.RD5=0;
  7432  0027EA  9A83               	bcf	3971,5,c	;volatile
  7433                           
  7434                           ;lcd.c: 238: PORTDbits.RD6=0;
  7435  0027EC  9C83               	bcf	3971,6,c	;volatile
  7436                           
  7437                           ;lcd.c: 239: PORTDbits.RD7=0;
  7438  0027EE  9E83               	bcf	3971,7,c	;volatile
  7439                           
  7440                           ;lcd.c: 241: wait_in_ms(20);
  7441  0027F0  0E00               	movlw	0
  7442  0027F2  6E3B               	movwf	wait_in_ms@time_in_ms+1,c
  7443  0027F4  0E14               	movlw	20
  7444  0027F6  6E3A               	movwf	wait_in_ms@time_in_ms,c
  7445  0027F8  EC51  F014         	call	_wait_in_ms	;wreg free
  7446                           
  7447                           ;lcd.c: 242: PORTD=0X03<<4;
  7448  0027FC  0E30               	movlw	48
  7449  0027FE  6E83               	movwf	3971,c	;volatile
  7450                           
  7451                           ;lcd.c: 243: lcd_pulso();
  7452  002800  ECAD  F017         	call	_lcd_pulso	;wreg free
  7453                           
  7454                           ;lcd.c: 244: wait_in_ms(4);
  7455  002804  0E00               	movlw	0
  7456  002806  6E3B               	movwf	wait_in_ms@time_in_ms+1,c
  7457  002808  0E04               	movlw	4
  7458  00280A  6E3A               	movwf	wait_in_ms@time_in_ms,c
  7459  00280C  EC51  F014         	call	_wait_in_ms	;wreg free
  7460                           
  7461                           ;lcd.c: 246: PORTD=0X03<<4;
  7462  002810  0E30               	movlw	48
  7463  002812  6E83               	movwf	3971,c	;volatile
  7464                           
  7465                           ;lcd.c: 247: lcd_pulso();
  7466  002814  ECAD  F017         	call	_lcd_pulso	;wreg free
  7467                           
  7468                           ;lcd.c: 248: wait_in_ms(4);
  7469  002818  0E00               	movlw	0
  7470  00281A  6E3B               	movwf	wait_in_ms@time_in_ms+1,c
  7471  00281C  0E04               	movlw	4
  7472  00281E  6E3A               	movwf	wait_in_ms@time_in_ms,c
  7473  002820  EC51  F014         	call	_wait_in_ms	;wreg free
  7474                           
  7475                           ;lcd.c: 250: PORTD=0X03<<4;
  7476  002824  0E30               	movlw	48
  7477  002826  6E83               	movwf	3971,c	;volatile
  7478                           
  7479                           ;lcd.c: 251: lcd_pulso();
  7480  002828  ECAD  F017         	call	_lcd_pulso	;wreg free
  7481                           
  7482                           ;lcd.c: 252: wait_in_ms(1);
  7483  00282C  0E00               	movlw	0
  7484  00282E  6E3B               	movwf	wait_in_ms@time_in_ms+1,c
  7485  002830  0E01               	movlw	1
  7486  002832  6E3A               	movwf	wait_in_ms@time_in_ms,c
  7487  002834  EC51  F014         	call	_wait_in_ms	;wreg free
  7488                           
  7489                           ;lcd.c: 254: PORTD=0X02<<4;
  7490  002838  0E20               	movlw	32
  7491  00283A  6E83               	movwf	3971,c	;volatile
  7492                           
  7493                           ;lcd.c: 255: lcd_pulso();
  7494  00283C  ECAD  F017         	call	_lcd_pulso	;wreg free
  7495                           
  7496                           ;lcd.c: 257: lcd_orden(0x28);
  7497  002840  0E00               	movlw	0
  7498  002842  6E45               	movwf	lcd_orden@orden+1,c
  7499  002844  0E28               	movlw	40
  7500  002846  6E44               	movwf	lcd_orden@orden,c
  7501  002848  ECB0  F016         	call	_lcd_orden	;wreg free
  7502                           
  7503                           ;lcd.c: 258: wait_in_ms(8);
  7504  00284C  0E00               	movlw	0
  7505  00284E  6E3B               	movwf	wait_in_ms@time_in_ms+1,c
  7506  002850  0E08               	movlw	8
  7507  002852  6E3A               	movwf	wait_in_ms@time_in_ms,c
  7508  002854  EC51  F014         	call	_wait_in_ms	;wreg free
  7509                           
  7510                           ;lcd.c: 260: lcd_orden(0x0c);
  7511  002858  0E00               	movlw	0
  7512  00285A  6E45               	movwf	lcd_orden@orden+1,c
  7513  00285C  0E0C               	movlw	12
  7514  00285E  6E44               	movwf	lcd_orden@orden,c
  7515  002860  ECB0  F016         	call	_lcd_orden	;wreg free
  7516                           
  7517                           ;lcd.c: 261: wait_in_ms(8);
  7518  002864  0E00               	movlw	0
  7519  002866  6E3B               	movwf	wait_in_ms@time_in_ms+1,c
  7520  002868  0E08               	movlw	8
  7521  00286A  6E3A               	movwf	wait_in_ms@time_in_ms,c
  7522  00286C  EC51  F014         	call	_wait_in_ms	;wreg free
  7523                           
  7524                           ;lcd.c: 263: lcd_orden(0x01);
  7525  002870  0E00               	movlw	0
  7526  002872  6E45               	movwf	lcd_orden@orden+1,c
  7527  002874  0E01               	movlw	1
  7528  002876  6E44               	movwf	lcd_orden@orden,c
  7529  002878  ECB0  F016         	call	_lcd_orden	;wreg free
  7530                           
  7531                           ;lcd.c: 264: wait_in_ms(2);
  7532  00287C  0E00               	movlw	0
  7533  00287E  6E3B               	movwf	wait_in_ms@time_in_ms+1,c
  7534  002880  0E02               	movlw	2
  7535  002882  6E3A               	movwf	wait_in_ms@time_in_ms,c
  7536  002884  EC51  F014         	call	_wait_in_ms	;wreg free
  7537                           
  7538                           ;lcd.c: 266: lcd_orden(0x06);
  7539  002888  0E00               	movlw	0
  7540  00288A  6E45               	movwf	lcd_orden@orden+1,c
  7541  00288C  0E06               	movlw	6
  7542  00288E  6E44               	movwf	lcd_orden@orden,c
  7543  002890  ECB0  F016         	call	_lcd_orden	;wreg free
  7544                           
  7545                           ;lcd.c: 267: wait_in_ms(8);
  7546  002894  0E00               	movlw	0
  7547  002896  6E3B               	movwf	wait_in_ms@time_in_ms+1,c
  7548  002898  0E08               	movlw	8
  7549  00289A  6E3A               	movwf	wait_in_ms@time_in_ms,c
  7550  00289C  EC51  F014         	call	_wait_in_ms	;wreg free
  7551  0028A0  0012               	return		;funcret
  7552  0028A2                     __end_of_lcd_iniciar:
  7553                           	opt stack 0
  7554                           tblptru	equ	0xFF8
  7555                           tblptrh	equ	0xFF7
  7556                           tblptrl	equ	0xFF6
  7557                           tablat	equ	0xFF5
  7558                           prodh	equ	0xFF4
  7559                           prodl	equ	0xFF3
  7560                           wreg	equ	0xFE8
  7561                           indf1	equ	0xFE7
  7562                           fsr1h	equ	0xFE2
  7563                           fsr1l	equ	0xFE1
  7564                           indf2	equ	0xFDF
  7565                           postinc2	equ	0xFDE
  7566                           postdec2	equ	0xFDD
  7567                           fsr2h	equ	0xFDA
  7568                           fsr2l	equ	0xFD9
  7569                           status	equ	0xFD8
  7570                           
  7571 ;; *************** function _lcd_orden *****************
  7572 ;; Defined at:
  7573 ;;		line 277 in file "lcd.c"
  7574 ;; Parameters:    Size  Location     Type
  7575 ;;  orden           2   67[COMRAM] unsigned int 
  7576 ;; Auto vars:     Size  Location     Type
  7577 ;;		None
  7578 ;; Return value:  Size  Location     Type
  7579 ;;                  1    wreg      void 
  7580 ;; Registers used:
  7581 ;;		wreg, status,2, status,0, cstack
  7582 ;; Tracked objects:
  7583 ;;		On entry : 0/0
  7584 ;;		On exit  : 0/0
  7585 ;;		Unchanged: 0/0
  7586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7587 ;;      Params:         2       0       0       0       0       0       0       0       0
  7588 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7589 ;;      Temps:          5       0       0       0       0       0       0       0       0
  7590 ;;      Totals:         7       0       0       0       0       0       0       0       0
  7591 ;;Total ram usage:        7 bytes
  7592 ;; Hardware stack levels used:    1
  7593 ;; Hardware stack levels required when called:    4
  7594 ;; This function calls:
  7595 ;;		_lcd_pulso
  7596 ;; This function is called by:
  7597 ;;		_lcd_iniciar
  7598 ;;		_lcd_limpiar
  7599 ;;		_lcd_origen
  7600 ;;		_lcd_ubicarXY
  7601 ;; This function uses a non-reentrant model
  7602 ;;
  7603                           
  7604                           	psect	text24
  7605  002D60                     __ptext24:
  7606                           	opt stack 0
  7607  002D60                     _lcd_orden:
  7608                           	opt stack 25
  7609                           
  7610                           ;lcd.c: 278: PORTDbits.RD1=0;
  7611                           
  7612                           ;incstack = 0
  7613  002D60  9283               	bcf	3971,1,c	;volatile
  7614                           
  7615                           ;lcd.c: 280: PORTD=(((((PORTD>>4&0x0f)|0x0f)&(orden>>4&0x0f))<<4)|(PORTD&0x0f));
  7616  002D62  CF83 F046          	movff	3971,??_lcd_orden	;volatile
  7617  002D66  0E0F               	movlw	15
  7618  002D68  1646               	andwf	??_lcd_orden,f,c
  7619  002D6A  C044  F047         	movff	lcd_orden@orden,??_lcd_orden+1
  7620  002D6E  C045  F048         	movff	lcd_orden@orden+1,??_lcd_orden+2
  7621  002D72  0E04               	movlw	4
  7622  002D74  6E49               	movwf	(??_lcd_orden+3)& (0+255),c
  7623  002D76                     u2885:
  7624  002D76  90D8               	bcf	status,0,c
  7625  002D78  3248               	rrcf	??_lcd_orden+2,f,c
  7626  002D7A  3247               	rrcf	??_lcd_orden+1,f,c
  7627  002D7C  2E49               	decfsz	(??_lcd_orden+3)& (0+255),f,c
  7628  002D7E  D7FB               	goto	u2885
  7629  002D80  0E0F               	movlw	15
  7630  002D82  1647               	andwf	??_lcd_orden+1,f,c
  7631  002D84  3883               	swapf	3971,w,c	;volatile
  7632  002D86  0B0F               	andlw	15
  7633  002D88  0B0F               	andlw	15
  7634  002D8A  090F               	iorlw	15
  7635  002D8C  1447               	andwf	??_lcd_orden+1,w,c
  7636  002D8E  6E4A               	movwf	(??_lcd_orden+4)& (0+255),c
  7637  002D90  384A               	swapf	??_lcd_orden+4,w,c
  7638  002D92  0BF0               	andlw	240
  7639  002D94  1046               	iorwf	??_lcd_orden,w,c
  7640  002D96  6E83               	movwf	3971,c	;volatile
  7641                           
  7642                           ;lcd.c: 281: lcd_pulso();
  7643  002D98  ECAD  F017         	call	_lcd_pulso	;wreg free
  7644                           
  7645                           ;lcd.c: 282: PORTD=(((((PORTD>>4&0x0f)|0x0f)&(orden&0x0f))<<4)|(PORTD&0x0f));
  7646  002D9C  CF83 F046          	movff	3971,??_lcd_orden	;volatile
  7647  002DA0  0E0F               	movlw	15
  7648  002DA2  1646               	andwf	??_lcd_orden,f,c
  7649  002DA4  C044  F047         	movff	lcd_orden@orden,??_lcd_orden+1
  7650  002DA8  0E0F               	movlw	15
  7651  002DAA  1647               	andwf	??_lcd_orden+1,f,c
  7652  002DAC  3883               	swapf	3971,w,c	;volatile
  7653  002DAE  0B0F               	andlw	15
  7654  002DB0  0B0F               	andlw	15
  7655  002DB2  090F               	iorlw	15
  7656  002DB4  1447               	andwf	??_lcd_orden+1,w,c
  7657  002DB6  6E48               	movwf	(??_lcd_orden+2)& (0+255),c
  7658  002DB8  3848               	swapf	??_lcd_orden+2,w,c
  7659  002DBA  0BF0               	andlw	240
  7660  002DBC  1046               	iorwf	??_lcd_orden,w,c
  7661  002DBE  6E83               	movwf	3971,c	;volatile
  7662                           
  7663                           ;lcd.c: 283: lcd_pulso();
  7664  002DC0  ECAD  F017         	call	_lcd_pulso	;wreg free
  7665  002DC4  0012               	return		;funcret
  7666  002DC6                     __end_of_lcd_orden:
  7667                           	opt stack 0
  7668                           tblptru	equ	0xFF8
  7669                           tblptrh	equ	0xFF7
  7670                           tblptrl	equ	0xFF6
  7671                           tablat	equ	0xFF5
  7672                           prodh	equ	0xFF4
  7673                           prodl	equ	0xFF3
  7674                           wreg	equ	0xFE8
  7675                           indf1	equ	0xFE7
  7676                           fsr1h	equ	0xFE2
  7677                           fsr1l	equ	0xFE1
  7678                           indf2	equ	0xFDF
  7679                           postinc2	equ	0xFDE
  7680                           postdec2	equ	0xFDD
  7681                           fsr2h	equ	0xFDA
  7682                           fsr2l	equ	0xFD9
  7683                           status	equ	0xFD8
  7684                           
  7685 ;; *************** function _lcd_pulso *****************
  7686 ;; Defined at:
  7687 ;;		line 270 in file "lcd.c"
  7688 ;; Parameters:    Size  Location     Type
  7689 ;;		None
  7690 ;; Auto vars:     Size  Location     Type
  7691 ;;		None
  7692 ;; Return value:  Size  Location     Type
  7693 ;;                  1    wreg      void 
  7694 ;; Registers used:
  7695 ;;		wreg, status,2, status,0, cstack
  7696 ;; Tracked objects:
  7697 ;;		On entry : 0/0
  7698 ;;		On exit  : 0/0
  7699 ;;		Unchanged: 0/0
  7700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7701 ;;      Params:         0       0       0       0       0       0       0       0       0
  7702 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7703 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7704 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7705 ;;Total ram usage:        0 bytes
  7706 ;; Hardware stack levels used:    1
  7707 ;; Hardware stack levels required when called:    3
  7708 ;; This function calls:
  7709 ;;		_wait_in_ms
  7710 ;; This function is called by:
  7711 ;;		_lcd_iniciar
  7712 ;;		_lcd_orden
  7713 ;;		_lcd_caracter
  7714 ;; This function uses a non-reentrant model
  7715 ;;
  7716                           
  7717                           	psect	text25
  7718  002F5A                     __ptext25:
  7719                           	opt stack 0
  7720  002F5A                     _lcd_pulso:
  7721                           	opt stack 25
  7722                           
  7723                           ;lcd.c: 271: PORTDbits.RD3=1;
  7724                           
  7725                           ;incstack = 0
  7726  002F5A  8683               	bsf	3971,3,c	;volatile
  7727                           
  7728                           ;lcd.c: 272: wait_in_ms(2);
  7729  002F5C  0E00               	movlw	0
  7730  002F5E  6E3B               	movwf	wait_in_ms@time_in_ms+1,c
  7731  002F60  0E02               	movlw	2
  7732  002F62  6E3A               	movwf	wait_in_ms@time_in_ms,c
  7733  002F64  EC51  F014         	call	_wait_in_ms	;wreg free
  7734                           
  7735                           ;lcd.c: 273: PORTDbits.RD3=0;
  7736  002F68  9683               	bcf	3971,3,c	;volatile
  7737                           
  7738                           ;lcd.c: 274: wait_in_ms(2);
  7739  002F6A  0E00               	movlw	0
  7740  002F6C  6E3B               	movwf	wait_in_ms@time_in_ms+1,c
  7741  002F6E  0E02               	movlw	2
  7742  002F70  6E3A               	movwf	wait_in_ms@time_in_ms,c
  7743  002F72  EC51  F014         	call	_wait_in_ms	;wreg free
  7744  002F76  0012               	return		;funcret
  7745  002F78                     __end_of_lcd_pulso:
  7746                           	opt stack 0
  7747                           tblptru	equ	0xFF8
  7748                           tblptrh	equ	0xFF7
  7749                           tblptrl	equ	0xFF6
  7750                           tablat	equ	0xFF5
  7751                           prodh	equ	0xFF4
  7752                           prodl	equ	0xFF3
  7753                           wreg	equ	0xFE8
  7754                           indf1	equ	0xFE7
  7755                           fsr1h	equ	0xFE2
  7756                           fsr1l	equ	0xFE1
  7757                           indf2	equ	0xFDF
  7758                           postinc2	equ	0xFDE
  7759                           postdec2	equ	0xFDD
  7760                           fsr2h	equ	0xFDA
  7761                           fsr2l	equ	0xFD9
  7762                           status	equ	0xFD8
  7763                           
  7764 ;; *************** function _wait_in_ms *****************
  7765 ;; Defined at:
  7766 ;;		line 80 in file "config.c"
  7767 ;; Parameters:    Size  Location     Type
  7768 ;;  time_in_ms      2   57[COMRAM] int 
  7769 ;; Auto vars:     Size  Location     Type
  7770 ;;  count_ms        2   65[COMRAM] unsigned int 
  7771 ;;  count           2   63[COMRAM] unsigned int 
  7772 ;;  flag            2   61[COMRAM] unsigned int 
  7773 ;; Return value:  Size  Location     Type
  7774 ;;                  1    wreg      void 
  7775 ;; Registers used:
  7776 ;;		wreg, status,2, status,0, cstack
  7777 ;; Tracked objects:
  7778 ;;		On entry : 0/0
  7779 ;;		On exit  : 0/0
  7780 ;;		Unchanged: 0/0
  7781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7782 ;;      Params:         2       0       0       0       0       0       0       0       0
  7783 ;;      Locals:         6       0       0       0       0       0       0       0       0
  7784 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7785 ;;      Totals:        10       0       0       0       0       0       0       0       0
  7786 ;;Total ram usage:       10 bytes
  7787 ;; Hardware stack levels used:    1
  7788 ;; Hardware stack levels required when called:    2
  7789 ;; This function calls:
  7790 ;;		___awtoft
  7791 ;;		___ftdiv
  7792 ;;		___fttol
  7793 ;; This function is called by:
  7794 ;;		_lcd_iniciar
  7795 ;;		_lcd_pulso
  7796 ;;		_lcd_limpiar
  7797 ;;		_lcd_origen
  7798 ;;		_Lcd_Cmd
  7799 ;; This function uses a non-reentrant model
  7800 ;;
  7801                           
  7802                           	psect	text26
  7803  0028A2                     __ptext26:
  7804                           	opt stack 0
  7805  0028A2                     _wait_in_ms:
  7806                           	opt stack 25
  7807                           
  7808                           ;config.c: 81: unsigned int count = 0;
  7809                           
  7810                           ;incstack = 0
  7811  0028A2  0E00               	movlw	0
  7812  0028A4  6E41               	movwf	wait_in_ms@count+1,c
  7813  0028A6  0E00               	movlw	0
  7814  0028A8  6E40               	movwf	wait_in_ms@count,c
  7815                           
  7816                           ;config.c: 82: unsigned int count_ms = 0;
  7817  0028AA  0E00               	movlw	0
  7818  0028AC  6E43               	movwf	wait_in_ms@count_ms+1,c
  7819  0028AE  0E00               	movlw	0
  7820  0028B0  6E42               	movwf	wait_in_ms@count_ms,c
  7821                           
  7822                           ;config.c: 83: unsigned int flag = 0;
  7823  0028B2  0E00               	movlw	0
  7824  0028B4  6E3F               	movwf	wait_in_ms@flag+1,c
  7825  0028B6  0E00               	movlw	0
  7826  0028B8  6E3E               	movwf	wait_in_ms@flag,c
  7827                           
  7828                           ;config.c: 85: TMR0L = 131;
  7829  0028BA  0E83               	movlw	131
  7830  0028BC  6ED6               	movwf	4054,c	;volatile
  7831                           
  7832                           ;config.c: 88: count_ms = ((8000000)*0.001)/((256-TMR0L)*32);
  7833  0028BE  50D6               	movf	4054,w,c	;volatile
  7834  0028C0  6E3C               	movwf	??_wait_in_ms& (0+255),c
  7835  0028C2  6A3D               	clrf	(??_wait_in_ms+1)& (0+255),c
  7836  0028C4  1E3C               	comf	??_wait_in_ms,f,c
  7837  0028C6  1E3D               	comf	??_wait_in_ms+1,f,c
  7838  0028C8  4A3C               	infsnz	??_wait_in_ms,f,c
  7839  0028CA  2A3D               	incf	??_wait_in_ms+1,f,c
  7840  0028CC  0E05               	movlw	5
  7841  0028CE                     u2445:
  7842  0028CE  90D8               	bcf	status,0,c
  7843  0028D0  363C               	rlcf	??_wait_in_ms,f,c
  7844  0028D2  363D               	rlcf	??_wait_in_ms+1,f,c
  7845  0028D4  2EE8               	decfsz	wreg,f,c
  7846  0028D6  D7FB               	goto	u2445
  7847  0028D8  0E00               	movlw	0
  7848  0028DA  243C               	addwf	??_wait_in_ms,w,c
  7849  0028DC  6E09               	movwf	___awtoft@c,c
  7850  0028DE  0E20               	movlw	32
  7851  0028E0  203D               	addwfc	??_wait_in_ms+1,w,c
  7852  0028E2  6E0A               	movwf	___awtoft@c+1,c
  7853  0028E4  EC31  F017         	call	___awtoft	;wreg free
  7854  0028E8  C009  F015         	movff	?___awtoft,___ftdiv@f2
  7855  0028EC  C00A  F016         	movff	?___awtoft+1,___ftdiv@f2+1
  7856  0028F0  C00B  F017         	movff	?___awtoft+2,___ftdiv@f2+2
  7857  0028F4  0E00               	movlw	0
  7858  0028F6  6E12               	movwf	___ftdiv@f1,c
  7859  0028F8  0EFA               	movlw	250
  7860  0028FA  6E13               	movwf	___ftdiv@f1+1,c
  7861  0028FC  0E45               	movlw	69
  7862  0028FE  6E14               	movwf	___ftdiv@f1+2,c
  7863  002900  EC77  F013         	call	___ftdiv	;wreg free
  7864  002904  C012  F02B         	movff	?___ftdiv,___fttol@f1
  7865  002908  C013  F02C         	movff	?___ftdiv+1,___fttol@f1+1
  7866  00290C  C014  F02D         	movff	?___ftdiv+2,___fttol@f1+2
  7867  002910  ECFD  F012         	call	___fttol	;wreg free
  7868  002914  C02B  F042         	movff	?___fttol,wait_in_ms@count_ms
  7869  002918  C02C  F043         	movff	?___fttol+1,wait_in_ms@count_ms+1
  7870                           
  7871                           ;config.c: 90: TMR0ON = 1;
  7872  00291C  8ED5               	bsf	4053,7,c	;volatile
  7873                           
  7874                           ;config.c: 92: while (count < count_ms){
  7875  00291E  D020               	goto	l116
  7876  002920                     l112:
  7877                           
  7878                           ;config.c: 93: if(TMR0IF == 1){
  7879  002920  A4F2               	btfss	intcon,2,c	;volatile
  7880  002922  D01E               	goto	l116
  7881                           
  7882                           ;config.c: 94: TMR0IF = 0;
  7883  002924  94F2               	bcf	intcon,2,c	;volatile
  7884                           
  7885                           ;config.c: 95: TMR0L = 131;
  7886  002926  0E83               	movlw	131
  7887  002928  6ED6               	movwf	4054,c	;volatile
  7888                           
  7889                           ;config.c: 96: count ++;
  7890  00292A  4A40               	infsnz	wait_in_ms@count,f,c
  7891  00292C  2A41               	incf	wait_in_ms@count+1,f,c
  7892                           
  7893                           ;config.c: 97: if (count == count_ms){
  7894  00292E  5042               	movf	wait_in_ms@count_ms,w,c
  7895  002930  1840               	xorwf	wait_in_ms@count,w,c
  7896  002932  E116               	bnz	l2668
  7897  002934  5043               	movf	wait_in_ms@count_ms+1,w,c
  7898  002936  1841               	xorwf	wait_in_ms@count+1,w,c
  7899  002938  A4D8               	btfss	status,2,c
  7900  00293A  D012               	goto	l116
  7901                           
  7902                           ;config.c: 98: flag++;
  7903  00293C  4A3E               	infsnz	wait_in_ms@flag,f,c
  7904  00293E  2A3F               	incf	wait_in_ms@flag+1,f,c
  7905                           
  7906                           ;config.c: 99: if (flag != time_in_ms){
  7907  002940  503E               	movf	wait_in_ms@flag,w,c
  7908  002942  183A               	xorwf	wait_in_ms@time_in_ms,w,c
  7909  002944  E104               	bnz	u2470
  7910  002946  503F               	movf	wait_in_ms@flag+1,w,c
  7911  002948  183B               	xorwf	wait_in_ms@time_in_ms+1,w,c
  7912  00294A  B4D8               	btfsc	status,2,c
  7913  00294C  D005               	goto	l115
  7914  00294E                     u2470:
  7915                           
  7916                           ;config.c: 100: count = 0;
  7917  00294E  0E00               	movlw	0
  7918  002950  6E41               	movwf	wait_in_ms@count+1,c
  7919  002952  0E00               	movlw	0
  7920  002954  6E40               	movwf	wait_in_ms@count,c
  7921                           
  7922                           ;config.c: 101: }
  7923  002956  D004               	goto	l116
  7924  002958                     l115:
  7925                           
  7926                           ;config.c: 102: else{
  7927                           ;config.c: 103: count = count_ms;
  7928  002958  C042  F040         	movff	wait_in_ms@count_ms,wait_in_ms@count
  7929  00295C  C043  F041         	movff	wait_in_ms@count_ms+1,wait_in_ms@count+1
  7930  002960                     l116:
  7931  002960                     l2668:
  7932  002960  5042               	movf	wait_in_ms@count_ms,w,c
  7933  002962  5C40               	subwf	wait_in_ms@count,w,c
  7934  002964  5043               	movf	wait_in_ms@count_ms+1,w,c
  7935  002966  5841               	subwfb	wait_in_ms@count+1,w,c
  7936  002968  B0D8               	btfsc	status,0,c
  7937  00296A  0012               	return	
  7938  00296C  D7D9               	goto	l112
  7939  00296E                     __end_of_wait_in_ms:
  7940                           	opt stack 0
  7941                           tblptru	equ	0xFF8
  7942                           tblptrh	equ	0xFF7
  7943                           tblptrl	equ	0xFF6
  7944                           tablat	equ	0xFF5
  7945                           prodh	equ	0xFF4
  7946                           prodl	equ	0xFF3
  7947                           intcon	equ	0xFF2
  7948                           wreg	equ	0xFE8
  7949                           indf1	equ	0xFE7
  7950                           fsr1h	equ	0xFE2
  7951                           fsr1l	equ	0xFE1
  7952                           indf2	equ	0xFDF
  7953                           postinc2	equ	0xFDE
  7954                           postdec2	equ	0xFDD
  7955                           fsr2h	equ	0xFDA
  7956                           fsr2l	equ	0xFD9
  7957                           status	equ	0xFD8
  7958                           
  7959 ;; *************** function ___fttol *****************
  7960 ;; Defined at:
  7961 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  7962 ;; Parameters:    Size  Location     Type
  7963 ;;  f1              3   42[COMRAM] float 
  7964 ;; Auto vars:     Size  Location     Type
  7965 ;;  lval            4   52[COMRAM] unsigned long 
  7966 ;;  exp1            1   56[COMRAM] unsigned char 
  7967 ;;  sign1           1   51[COMRAM] unsigned char 
  7968 ;; Return value:  Size  Location     Type
  7969 ;;                  4   42[COMRAM] long 
  7970 ;; Registers used:
  7971 ;;		wreg, status,2, status,0
  7972 ;; Tracked objects:
  7973 ;;		On entry : 0/0
  7974 ;;		On exit  : 0/0
  7975 ;;		Unchanged: 0/0
  7976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7977 ;;      Params:         4       0       0       0       0       0       0       0       0
  7978 ;;      Locals:         6       0       0       0       0       0       0       0       0
  7979 ;;      Temps:          5       0       0       0       0       0       0       0       0
  7980 ;;      Totals:        15       0       0       0       0       0       0       0       0
  7981 ;;Total ram usage:       15 bytes
  7982 ;; Hardware stack levels used:    1
  7983 ;; This function calls:
  7984 ;;		Nothing
  7985 ;; This function is called by:
  7986 ;;		_wait_in_ms
  7987 ;;		_sprintf
  7988 ;; This function uses a non-reentrant model
  7989 ;;
  7990                           
  7991                           	psect	text27
  7992  0025FA                     __ptext27:
  7993                           	opt stack 0
  7994  0025FA                     ___fttol:
  7995                           	opt stack 29
  7996                           
  7997                           ;incstack = 0
  7998  0025FA  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  7999  0025FE  6A30               	clrf	(??___fttol+1)& (0+255),c
  8000  002600  6A31               	clrf	(??___fttol+2)& (0+255),c
  8001  002602  342C               	rlcf	___fttol@f1+1,w,c
  8002  002604  362F               	rlcf	??___fttol& (0+255),f,c
  8003  002606  E301               	bnc	u2361
  8004  002608  8030               	bsf	(??___fttol+1)& (0+255),0,c
  8005  00260A                     u2361:
  8006  00260A  502F               	movf	??___fttol,w,c
  8007  00260C  6E39               	movwf	___fttol@exp1,c
  8008  00260E  5039               	movf	___fttol@exp1,w,c
  8009  002610  A4D8               	btfss	status,2,c
  8010  002612  D009               	goto	l766
  8011  002614  0E00               	movlw	0
  8012  002616  6E2B               	movwf	?___fttol,c
  8013  002618  0E00               	movlw	0
  8014  00261A  6E2C               	movwf	?___fttol+1,c
  8015  00261C  0E00               	movlw	0
  8016  00261E  6E2D               	movwf	?___fttol+2,c
  8017  002620  0E00               	movlw	0
  8018  002622  6E2E               	movwf	?___fttol+3,c
  8019  002624  0012               	return	
  8020  002626                     l766:
  8021  002626  0E17               	movlw	23
  8022  002628  6E2F               	movwf	??___fttol& (0+255),c
  8023  00262A  C02B  F030         	movff	___fttol@f1,??___fttol+1
  8024  00262E  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  8025  002632  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  8026  002636  282F               	incf	??___fttol,w,c
  8027  002638  6E33               	movwf	(??___fttol+4)& (0+255),c
  8028  00263A  D004               	goto	u2380
  8029  00263C                     u2385:
  8030  00263C  90D8               	bcf	status,0,c
  8031  00263E  3232               	rrcf	??___fttol+3,f,c
  8032  002640  3231               	rrcf	??___fttol+2,f,c
  8033  002642  3230               	rrcf	??___fttol+1,f,c
  8034  002644                     u2380:
  8035  002644  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
  8036  002646  D7FA               	goto	u2385
  8037  002648  5030               	movf	??___fttol+1,w,c
  8038  00264A  6E34               	movwf	___fttol@sign1,c
  8039  00264C  8E2C               	bsf	___fttol@f1+1,7,c
  8040  00264E  0EFF               	movlw	255
  8041  002650  162B               	andwf	___fttol@f1,f,c
  8042  002652  0EFF               	movlw	255
  8043  002654  162C               	andwf	___fttol@f1+1,f,c
  8044  002656  0E00               	movlw	0
  8045  002658  162D               	andwf	___fttol@f1+2,f,c
  8046  00265A  502B               	movf	___fttol@f1,w,c
  8047  00265C  6E35               	movwf	___fttol@lval,c
  8048  00265E  502C               	movf	___fttol@f1+1,w,c
  8049  002660  6E36               	movwf	___fttol@lval+1,c
  8050  002662  502D               	movf	___fttol@f1+2,w,c
  8051  002664  6E37               	movwf	___fttol@lval+2,c
  8052  002666  6A38               	clrf	___fttol@lval+3,c
  8053  002668  0E8E               	movlw	142
  8054  00266A  5E39               	subwf	___fttol@exp1,f,c
  8055  00266C  AE39               	btfss	___fttol@exp1,7,c
  8056  00266E  D016               	goto	l768
  8057  002670  5039               	movf	___fttol@exp1,w,c
  8058  002672  0A80               	xorlw	128
  8059  002674  0F8F               	addlw	143
  8060  002676  B0D8               	btfsc	status,0,c
  8061  002678  D009               	goto	l769
  8062  00267A  0E00               	movlw	0
  8063  00267C  6E2B               	movwf	?___fttol,c
  8064  00267E  0E00               	movlw	0
  8065  002680  6E2C               	movwf	?___fttol+1,c
  8066  002682  0E00               	movlw	0
  8067  002684  6E2D               	movwf	?___fttol+2,c
  8068  002686  0E00               	movlw	0
  8069  002688  6E2E               	movwf	?___fttol+3,c
  8070  00268A  0012               	return	
  8071  00268C                     l769:
  8072  00268C  90D8               	bcf	status,0,c
  8073  00268E  3238               	rrcf	___fttol@lval+3,f,c
  8074  002690  3237               	rrcf	___fttol@lval+2,f,c
  8075  002692  3236               	rrcf	___fttol@lval+1,f,c
  8076  002694  3235               	rrcf	___fttol@lval,f,c
  8077  002696  3E39               	incfsz	___fttol@exp1,f,c
  8078  002698  D7F9               	goto	l769
  8079  00269A  D015               	goto	u2420
  8080  00269C                     l768:
  8081  00269C  0E17               	movlw	23
  8082  00269E  6439               	cpfsgt	___fttol@exp1,c
  8083  0026A0  D00F               	goto	l774
  8084  0026A2  0E00               	movlw	0
  8085  0026A4  6E2B               	movwf	?___fttol,c
  8086  0026A6  0E00               	movlw	0
  8087  0026A8  6E2C               	movwf	?___fttol+1,c
  8088  0026AA  0E00               	movlw	0
  8089  0026AC  6E2D               	movwf	?___fttol+2,c
  8090  0026AE  0E00               	movlw	0
  8091  0026B0  6E2E               	movwf	?___fttol+3,c
  8092  0026B2  0012               	return	
  8093  0026B4  90D8               	bcf	status,0,c
  8094  0026B6  3635               	rlcf	___fttol@lval,f,c
  8095  0026B8  3636               	rlcf	___fttol@lval+1,f,c
  8096  0026BA  3637               	rlcf	___fttol@lval+2,f,c
  8097  0026BC  3638               	rlcf	___fttol@lval+3,f,c
  8098  0026BE  0639               	decf	___fttol@exp1,f,c
  8099  0026C0                     l774:
  8100  0026C0  5039               	movf	___fttol@exp1,w,c
  8101  0026C2  A4D8               	btfss	status,2,c
  8102  0026C4  D7F7               	goto	l775
  8103  0026C6                     u2420:
  8104  0026C6  5034               	movf	___fttol@sign1,w,c
  8105  0026C8  B4D8               	btfsc	status,2,c
  8106  0026CA  D008               	goto	l777
  8107  0026CC  1E38               	comf	___fttol@lval+3,f,c
  8108  0026CE  1E37               	comf	___fttol@lval+2,f,c
  8109  0026D0  1E36               	comf	___fttol@lval+1,f,c
  8110  0026D2  6C35               	negf	___fttol@lval,c
  8111  0026D4  0E00               	movlw	0
  8112  0026D6  2236               	addwfc	___fttol@lval+1,f,c
  8113  0026D8  2237               	addwfc	___fttol@lval+2,f,c
  8114  0026DA  2238               	addwfc	___fttol@lval+3,f,c
  8115  0026DC                     l777:
  8116  0026DC  C035  F02B         	movff	___fttol@lval,?___fttol
  8117  0026E0  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  8118  0026E4  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  8119  0026E8  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  8120  0026EC  0012               	return	
  8121  0026EE                     __end_of___fttol:
  8122                           	opt stack 0
  8123                           tblptru	equ	0xFF8
  8124                           tblptrh	equ	0xFF7
  8125                           tblptrl	equ	0xFF6
  8126                           tablat	equ	0xFF5
  8127                           prodh	equ	0xFF4
  8128                           prodl	equ	0xFF3
  8129                           intcon	equ	0xFF2
  8130                           wreg	equ	0xFE8
  8131                           indf1	equ	0xFE7
  8132                           fsr1h	equ	0xFE2
  8133                           fsr1l	equ	0xFE1
  8134                           indf2	equ	0xFDF
  8135                           postinc2	equ	0xFDE
  8136                           postdec2	equ	0xFDD
  8137                           fsr2h	equ	0xFDA
  8138                           fsr2l	equ	0xFD9
  8139                           status	equ	0xFD8
  8140                           
  8141 ;; *************** function ___ftdiv *****************
  8142 ;; Defined at:
  8143 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  8144 ;; Parameters:    Size  Location     Type
  8145 ;;  f1              3   17[COMRAM] float 
  8146 ;;  f2              3   20[COMRAM] float 
  8147 ;; Auto vars:     Size  Location     Type
  8148 ;;  f3              3   27[COMRAM] float 
  8149 ;;  sign            1   31[COMRAM] unsigned char 
  8150 ;;  exp             1   30[COMRAM] unsigned char 
  8151 ;;  cntr            1   26[COMRAM] unsigned char 
  8152 ;; Return value:  Size  Location     Type
  8153 ;;                  3   17[COMRAM] float 
  8154 ;; Registers used:
  8155 ;;		wreg, status,2, status,0, cstack
  8156 ;; Tracked objects:
  8157 ;;		On entry : 0/0
  8158 ;;		On exit  : 0/0
  8159 ;;		Unchanged: 0/0
  8160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8161 ;;      Params:         6       0       0       0       0       0       0       0       0
  8162 ;;      Locals:         6       0       0       0       0       0       0       0       0
  8163 ;;      Temps:          3       0       0       0       0       0       0       0       0
  8164 ;;      Totals:        15       0       0       0       0       0       0       0       0
  8165 ;;Total ram usage:       15 bytes
  8166 ;; Hardware stack levels used:    1
  8167 ;; Hardware stack levels required when called:    1
  8168 ;; This function calls:
  8169 ;;		___ftpack
  8170 ;; This function is called by:
  8171 ;;		_wait_in_ms
  8172 ;;		_main
  8173 ;; This function uses a non-reentrant model
  8174 ;;
  8175                           
  8176                           	psect	text28
  8177  0026EE                     __ptext28:
  8178                           	opt stack 0
  8179  0026EE                     ___ftdiv:
  8180                           	opt stack 25
  8181                           
  8182                           ;incstack = 0
  8183  0026EE  C014  F018         	movff	___ftdiv@f1+2,??___ftdiv
  8184  0026F2  6A19               	clrf	(??___ftdiv+1)& (0+255),c
  8185  0026F4  6A1A               	clrf	(??___ftdiv+2)& (0+255),c
  8186  0026F6  3413               	rlcf	___ftdiv@f1+1,w,c
  8187  0026F8  3618               	rlcf	??___ftdiv& (0+255),f,c
  8188  0026FA  E301               	bnc	u2301
  8189  0026FC  8019               	bsf	(??___ftdiv+1)& (0+255),0,c
  8190  0026FE                     u2301:
  8191  0026FE  5018               	movf	??___ftdiv,w,c
  8192  002700  6E1F               	movwf	___ftdiv@exp,c
  8193  002702  501F               	movf	___ftdiv@exp,w,c
  8194  002704  A4D8               	btfss	status,2,c
  8195  002706  D007               	goto	l713
  8196  002708  0E00               	movlw	0
  8197  00270A  6E12               	movwf	?___ftdiv,c
  8198  00270C  0E00               	movlw	0
  8199  00270E  6E13               	movwf	?___ftdiv+1,c
  8200  002710  0E00               	movlw	0
  8201  002712  6E14               	movwf	?___ftdiv+2,c
  8202  002714  0012               	return	
  8203  002716                     l713:
  8204  002716  C017  F018         	movff	___ftdiv@f2+2,??___ftdiv
  8205  00271A  6A19               	clrf	(??___ftdiv+1)& (0+255),c
  8206  00271C  6A1A               	clrf	(??___ftdiv+2)& (0+255),c
  8207  00271E  3416               	rlcf	___ftdiv@f2+1,w,c
  8208  002720  3618               	rlcf	??___ftdiv& (0+255),f,c
  8209  002722  E301               	bnc	u2321
  8210  002724  8019               	bsf	(??___ftdiv+1)& (0+255),0,c
  8211  002726                     u2321:
  8212  002726  5018               	movf	??___ftdiv,w,c
  8213  002728  6E20               	movwf	___ftdiv@sign,c
  8214  00272A  5020               	movf	___ftdiv@sign,w,c
  8215  00272C  A4D8               	btfss	status,2,c
  8216  00272E  D007               	goto	l715
  8217  002730  0E00               	movlw	0
  8218  002732  6E12               	movwf	?___ftdiv,c
  8219  002734  0E00               	movlw	0
  8220  002736  6E13               	movwf	?___ftdiv+1,c
  8221  002738  0E00               	movlw	0
  8222  00273A  6E14               	movwf	?___ftdiv+2,c
  8223  00273C  0012               	return	
  8224  00273E                     l715:
  8225  00273E  0E00               	movlw	0
  8226  002740  6E1C               	movwf	___ftdiv@f3,c
  8227  002742  0E00               	movlw	0
  8228  002744  6E1D               	movwf	___ftdiv@f3+1,c
  8229  002746  0E00               	movlw	0
  8230  002748  6E1E               	movwf	___ftdiv@f3+2,c
  8231  00274A  5020               	movf	___ftdiv@sign,w,c
  8232  00274C  0F89               	addlw	137
  8233  00274E  5E1F               	subwf	___ftdiv@exp,f,c
  8234  002750  C014  F020         	movff	___ftdiv@f1+2,___ftdiv@sign
  8235  002754  5017               	movf	___ftdiv@f2+2,w,c
  8236  002756  1A20               	xorwf	___ftdiv@sign,f,c
  8237  002758  0E80               	movlw	128
  8238  00275A  1620               	andwf	___ftdiv@sign,f,c
  8239  00275C  8E13               	bsf	___ftdiv@f1+1,7,c
  8240  00275E  0EFF               	movlw	255
  8241  002760  1612               	andwf	___ftdiv@f1,f,c
  8242  002762  0EFF               	movlw	255
  8243  002764  1613               	andwf	___ftdiv@f1+1,f,c
  8244  002766  0E00               	movlw	0
  8245  002768  1614               	andwf	___ftdiv@f1+2,f,c
  8246  00276A  8E16               	bsf	___ftdiv@f2+1,7,c
  8247  00276C  0EFF               	movlw	255
  8248  00276E  1615               	andwf	___ftdiv@f2,f,c
  8249  002770  0EFF               	movlw	255
  8250  002772  1616               	andwf	___ftdiv@f2+1,f,c
  8251  002774  0E00               	movlw	0
  8252  002776  1617               	andwf	___ftdiv@f2+2,f,c
  8253  002778  0E18               	movlw	24
  8254  00277A  6E1B               	movwf	___ftdiv@cntr,c
  8255  00277C  90D8               	bcf	status,0,c
  8256  00277E  361C               	rlcf	___ftdiv@f3,f,c
  8257  002780  361D               	rlcf	___ftdiv@f3+1,f,c
  8258  002782  361E               	rlcf	___ftdiv@f3+2,f,c
  8259  002784  5015               	movf	___ftdiv@f2,w,c
  8260  002786  5C12               	subwf	___ftdiv@f1,w,c
  8261  002788  5016               	movf	___ftdiv@f2+1,w,c
  8262  00278A  5813               	subwfb	___ftdiv@f1+1,w,c
  8263  00278C  5017               	movf	___ftdiv@f2+2,w,c
  8264  00278E  5814               	subwfb	___ftdiv@f1+2,w,c
  8265  002790  A0D8               	btfss	status,0,c
  8266  002792  D007               	goto	l717
  8267  002794  5015               	movf	___ftdiv@f2,w,c
  8268  002796  5E12               	subwf	___ftdiv@f1,f,c
  8269  002798  5016               	movf	___ftdiv@f2+1,w,c
  8270  00279A  5A13               	subwfb	___ftdiv@f1+1,f,c
  8271  00279C  5017               	movf	___ftdiv@f2+2,w,c
  8272  00279E  5A14               	subwfb	___ftdiv@f1+2,f,c
  8273  0027A0  801C               	bsf	___ftdiv@f3,0,c
  8274  0027A2                     l717:
  8275  0027A2  90D8               	bcf	status,0,c
  8276  0027A4  3612               	rlcf	___ftdiv@f1,f,c
  8277  0027A6  3613               	rlcf	___ftdiv@f1+1,f,c
  8278  0027A8  3614               	rlcf	___ftdiv@f1+2,f,c
  8279  0027AA  2E1B               	decfsz	___ftdiv@cntr,f,c
  8280  0027AC  D7E7               	goto	l716
  8281  0027AE  C01C  F001         	movff	___ftdiv@f3,___ftpack@arg
  8282  0027B2  C01D  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  8283  0027B6  C01E  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  8284  0027BA  C01F  F004         	movff	___ftdiv@exp,___ftpack@exp
  8285  0027BE  C020  F005         	movff	___ftdiv@sign,___ftpack@sign
  8286  0027C2  ECB7  F014         	call	___ftpack	;wreg free
  8287  0027C6  C001  F012         	movff	?___ftpack,?___ftdiv
  8288  0027CA  C002  F013         	movff	?___ftpack+1,?___ftdiv+1
  8289  0027CE  C003  F014         	movff	?___ftpack+2,?___ftdiv+2
  8290  0027D2  0012               	return	
  8291  0027D4                     __end_of___ftdiv:
  8292                           	opt stack 0
  8293                           tblptru	equ	0xFF8
  8294                           tblptrh	equ	0xFF7
  8295                           tblptrl	equ	0xFF6
  8296                           tablat	equ	0xFF5
  8297                           prodh	equ	0xFF4
  8298                           prodl	equ	0xFF3
  8299                           intcon	equ	0xFF2
  8300                           wreg	equ	0xFE8
  8301                           indf1	equ	0xFE7
  8302                           fsr1h	equ	0xFE2
  8303                           fsr1l	equ	0xFE1
  8304                           indf2	equ	0xFDF
  8305                           postinc2	equ	0xFDE
  8306                           postdec2	equ	0xFDD
  8307                           fsr2h	equ	0xFDA
  8308                           fsr2l	equ	0xFD9
  8309                           status	equ	0xFD8
  8310                           
  8311 ;; *************** function ___awtoft *****************
  8312 ;; Defined at:
  8313 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
  8314 ;; Parameters:    Size  Location     Type
  8315 ;;  c               2    8[COMRAM] int 
  8316 ;; Auto vars:     Size  Location     Type
  8317 ;;  sign            1   11[COMRAM] unsigned char 
  8318 ;; Return value:  Size  Location     Type
  8319 ;;                  3    8[COMRAM] float 
  8320 ;; Registers used:
  8321 ;;		wreg, status,2, status,0, cstack
  8322 ;; Tracked objects:
  8323 ;;		On entry : 0/0
  8324 ;;		On exit  : 0/0
  8325 ;;		Unchanged: 0/0
  8326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8327 ;;      Params:         3       0       0       0       0       0       0       0       0
  8328 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8329 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8330 ;;      Totals:         4       0       0       0       0       0       0       0       0
  8331 ;;Total ram usage:        4 bytes
  8332 ;; Hardware stack levels used:    1
  8333 ;; Hardware stack levels required when called:    1
  8334 ;; This function calls:
  8335 ;;		___ftpack
  8336 ;; This function is called by:
  8337 ;;		_wait_in_ms
  8338 ;; This function uses a non-reentrant model
  8339 ;;
  8340                           
  8341                           	psect	text29
  8342  002E62                     __ptext29:
  8343                           	opt stack 0
  8344  002E62                     ___awtoft:
  8345                           	opt stack 25
  8346                           
  8347                           ;incstack = 0
  8348  002E62  0E00               	movlw	0
  8349  002E64  6E0C               	movwf	___awtoft@sign,c
  8350  002E66  AE0A               	btfss	___awtoft@c+1,7,c
  8351  002E68  D006               	goto	l613
  8352  002E6A  6C09               	negf	___awtoft@c,c
  8353  002E6C  1E0A               	comf	___awtoft@c+1,f,c
  8354  002E6E  B0D8               	btfsc	status,0,c
  8355  002E70  2A0A               	incf	___awtoft@c+1,f,c
  8356  002E72  0E01               	movlw	1
  8357  002E74  6E0C               	movwf	___awtoft@sign,c
  8358  002E76                     l613:
  8359  002E76  C009  F001         	movff	___awtoft@c,___ftpack@arg
  8360  002E7A  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  8361  002E7E  6A03               	clrf	___ftpack@arg+2,c
  8362  002E80  0E8E               	movlw	142
  8363  002E82  6E04               	movwf	___ftpack@exp,c
  8364  002E84  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  8365  002E88  ECB7  F014         	call	___ftpack	;wreg free
  8366  002E8C  C001  F009         	movff	?___ftpack,?___awtoft
  8367  002E90  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  8368  002E94  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  8369  002E98  0012               	return	
  8370  002E9A                     __end_of___awtoft:
  8371                           	opt stack 0
  8372                           tblptru	equ	0xFF8
  8373                           tblptrh	equ	0xFF7
  8374                           tblptrl	equ	0xFF6
  8375                           tablat	equ	0xFF5
  8376                           prodh	equ	0xFF4
  8377                           prodl	equ	0xFF3
  8378                           intcon	equ	0xFF2
  8379                           wreg	equ	0xFE8
  8380                           indf1	equ	0xFE7
  8381                           fsr1h	equ	0xFE2
  8382                           fsr1l	equ	0xFE1
  8383                           indf2	equ	0xFDF
  8384                           postinc2	equ	0xFDE
  8385                           postdec2	equ	0xFDD
  8386                           fsr2h	equ	0xFDA
  8387                           fsr2l	equ	0xFD9
  8388                           status	equ	0xFD8
  8389                           
  8390 ;; *************** function ___ftpack *****************
  8391 ;; Defined at:
  8392 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  8393 ;; Parameters:    Size  Location     Type
  8394 ;;  arg             3    0[COMRAM] unsigned um
  8395 ;;  exp             1    3[COMRAM] unsigned char 
  8396 ;;  sign            1    4[COMRAM] unsigned char 
  8397 ;; Auto vars:     Size  Location     Type
  8398 ;;		None
  8399 ;; Return value:  Size  Location     Type
  8400 ;;                  3    0[COMRAM] float 
  8401 ;; Registers used:
  8402 ;;		wreg, status,2, status,0
  8403 ;; Tracked objects:
  8404 ;;		On entry : 0/0
  8405 ;;		On exit  : 0/0
  8406 ;;		Unchanged: 0/0
  8407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8408 ;;      Params:         5       0       0       0       0       0       0       0       0
  8409 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8410 ;;      Temps:          3       0       0       0       0       0       0       0       0
  8411 ;;      Totals:         8       0       0       0       0       0       0       0       0
  8412 ;;Total ram usage:        8 bytes
  8413 ;; Hardware stack levels used:    1
  8414 ;; This function calls:
  8415 ;;		Nothing
  8416 ;; This function is called by:
  8417 ;;		___awtoft
  8418 ;;		___ftadd
  8419 ;;		___ftdiv
  8420 ;;		___ftmul
  8421 ;;		___lltoft
  8422 ;; This function uses a non-reentrant model
  8423 ;;
  8424                           
  8425                           	psect	text30
  8426  00296E                     __ptext30:
  8427                           	opt stack 0
  8428  00296E                     ___ftpack:
  8429                           	opt stack 27
  8430                           
  8431                           ;incstack = 0
  8432  00296E  5004               	movf	___ftpack@exp,w,c
  8433  002970  B4D8               	btfsc	status,2,c
  8434  002972  D005               	goto	u2230
  8435  002974  5001               	movf	___ftpack@arg,w,c
  8436  002976  1002               	iorwf	___ftpack@arg+1,w,c
  8437  002978  1003               	iorwf	___ftpack@arg+2,w,c
  8438  00297A  A4D8               	btfss	status,2,c
  8439  00297C  D00C               	goto	l649
  8440  00297E                     u2230:
  8441  00297E  0E00               	movlw	0
  8442  002980  6E01               	movwf	?___ftpack,c
  8443  002982  0E00               	movlw	0
  8444  002984  6E02               	movwf	?___ftpack+1,c
  8445  002986  0E00               	movlw	0
  8446  002988  6E03               	movwf	?___ftpack+2,c
  8447  00298A  0012               	return	
  8448  00298C  2A04               	incf	___ftpack@exp,f,c
  8449  00298E  90D8               	bcf	status,0,c
  8450  002990  3203               	rrcf	___ftpack@arg+2,f,c
  8451  002992  3202               	rrcf	___ftpack@arg+1,f,c
  8452  002994  3201               	rrcf	___ftpack@arg,f,c
  8453  002996                     l649:
  8454  002996  0E00               	movlw	0
  8455  002998  1401               	andwf	___ftpack@arg,w,c
  8456  00299A  6E06               	movwf	??___ftpack& (0+255),c
  8457  00299C  0E00               	movlw	0
  8458  00299E  1402               	andwf	___ftpack@arg+1,w,c
  8459  0029A0  6E07               	movwf	(??___ftpack+1)& (0+255),c
  8460  0029A2  0EFE               	movlw	254
  8461  0029A4  1403               	andwf	___ftpack@arg+2,w,c
  8462  0029A6  6E08               	movwf	(??___ftpack+2)& (0+255),c
  8463  0029A8  5006               	movf	??___ftpack,w,c
  8464  0029AA  1007               	iorwf	??___ftpack+1,w,c
  8465  0029AC  1008               	iorwf	??___ftpack+2,w,c
  8466  0029AE  B4D8               	btfsc	status,2,c
  8467  0029B0  D00C               	goto	l652
  8468  0029B2  D7EC               	goto	l650
  8469  0029B4  2A04               	incf	___ftpack@exp,f,c
  8470  0029B6  0E01               	movlw	1
  8471  0029B8  2601               	addwf	___ftpack@arg,f,c
  8472  0029BA  0E00               	movlw	0
  8473  0029BC  2202               	addwfc	___ftpack@arg+1,f,c
  8474  0029BE  0E00               	movlw	0
  8475  0029C0  2203               	addwfc	___ftpack@arg+2,f,c
  8476  0029C2  90D8               	bcf	status,0,c
  8477  0029C4  3203               	rrcf	___ftpack@arg+2,f,c
  8478  0029C6  3202               	rrcf	___ftpack@arg+1,f,c
  8479  0029C8  3201               	rrcf	___ftpack@arg,f,c
  8480  0029CA                     l652:
  8481  0029CA  0E00               	movlw	0
  8482  0029CC  1401               	andwf	___ftpack@arg,w,c
  8483  0029CE  6E06               	movwf	??___ftpack& (0+255),c
  8484  0029D0  0E00               	movlw	0
  8485  0029D2  1402               	andwf	___ftpack@arg+1,w,c
  8486  0029D4  6E07               	movwf	(??___ftpack+1)& (0+255),c
  8487  0029D6  0EFF               	movlw	255
  8488  0029D8  1403               	andwf	___ftpack@arg+2,w,c
  8489  0029DA  6E08               	movwf	(??___ftpack+2)& (0+255),c
  8490  0029DC  5006               	movf	??___ftpack,w,c
  8491  0029DE  1007               	iorwf	??___ftpack+1,w,c
  8492  0029E0  1008               	iorwf	??___ftpack+2,w,c
  8493  0029E2  B4D8               	btfsc	status,2,c
  8494  0029E4  D006               	goto	l655
  8495  0029E6  D7E6               	goto	l653
  8496  0029E8  0604               	decf	___ftpack@exp,f,c
  8497  0029EA  90D8               	bcf	status,0,c
  8498  0029EC  3601               	rlcf	___ftpack@arg,f,c
  8499  0029EE  3602               	rlcf	___ftpack@arg+1,f,c
  8500  0029F0  3603               	rlcf	___ftpack@arg+2,f,c
  8501  0029F2                     l655:
  8502  0029F2  BE02               	btfsc	___ftpack@arg+1,7,c
  8503  0029F4  D003               	goto	u2270
  8504  0029F6  0E02               	movlw	2
  8505  0029F8  6004               	cpfslt	___ftpack@exp,c
  8506  0029FA  D7F6               	goto	l656
  8507  0029FC                     u2270:
  8508  0029FC  A004               	btfss	___ftpack@exp,0,c
  8509  0029FE  9E02               	bcf	___ftpack@arg+1,7,c
  8510  002A00  90D8               	bcf	status,0,c
  8511  002A02  3204               	rrcf	___ftpack@exp,f,c
  8512  002A04  5004               	movf	___ftpack@exp,w,c
  8513  002A06  1203               	iorwf	___ftpack@arg+2,f,c
  8514  002A08  5005               	movf	___ftpack@sign,w,c
  8515  002A0A  A4D8               	btfss	status,2,c
  8516  002A0C  8E03               	bsf	___ftpack@arg+2,7,c
  8517  002A0E  C001  F001         	movff	___ftpack@arg,?___ftpack
  8518  002A12  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  8519  002A16  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  8520  002A1A  0012               	return	
  8521  002A1C                     __end_of___ftpack:
  8522                           	opt stack 0
  8523                           tblptru	equ	0xFF8
  8524                           tblptrh	equ	0xFF7
  8525                           tblptrl	equ	0xFF6
  8526                           tablat	equ	0xFF5
  8527                           prodh	equ	0xFF4
  8528                           prodl	equ	0xFF3
  8529                           intcon	equ	0xFF2
  8530                           wreg	equ	0xFE8
  8531                           indf1	equ	0xFE7
  8532                           fsr1h	equ	0xFE2
  8533                           fsr1l	equ	0xFE1
  8534                           indf2	equ	0xFDF
  8535                           postinc2	equ	0xFDE
  8536                           postdec2	equ	0xFDD
  8537                           fsr2h	equ	0xFDA
  8538                           fsr2l	equ	0xFD9
  8539                           status	equ	0xFD8
  8540                           
  8541 ;; *************** function _configBoard *****************
  8542 ;; Defined at:
  8543 ;;		line 11 in file "config.c"
  8544 ;; Parameters:    Size  Location     Type
  8545 ;;		None
  8546 ;; Auto vars:     Size  Location     Type
  8547 ;;		None
  8548 ;; Return value:  Size  Location     Type
  8549 ;;                  1    wreg      void 
  8550 ;; Registers used:
  8551 ;;		wreg, status,2
  8552 ;; Tracked objects:
  8553 ;;		On entry : 0/0
  8554 ;;		On exit  : 0/0
  8555 ;;		Unchanged: 0/0
  8556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8557 ;;      Params:         0       0       0       0       0       0       0       0       0
  8558 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8559 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8560 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8561 ;;Total ram usage:        0 bytes
  8562 ;; Hardware stack levels used:    1
  8563 ;; This function calls:
  8564 ;;		Nothing
  8565 ;; This function is called by:
  8566 ;;		_main
  8567 ;; This function uses a non-reentrant model
  8568 ;;
  8569                           
  8570                           	psect	text31
  8571  002C22                     __ptext31:
  8572                           	opt stack 0
  8573  002C22                     _configBoard:
  8574                           	opt stack 30
  8575                           
  8576                           ;config.c: 15: INTCONbits.GIE = 1;
  8577                           
  8578                           ;incstack = 0
  8579  002C22  8EF2               	bsf	intcon,7,c	;volatile
  8580                           
  8581                           ;config.c: 16: INTCONbits.PEIE = 1;
  8582  002C24  8CF2               	bsf	intcon,6,c	;volatile
  8583                           
  8584                           ;config.c: 25: T0CONbits.TMR0ON = 1;
  8585  002C26  8ED5               	bsf	4053,7,c	;volatile
  8586                           
  8587                           ;config.c: 26: T08BIT = 1;
  8588  002C28  8CD5               	bsf	4053,6,c	;volatile
  8589                           
  8590                           ;config.c: 27: T0CONbits.T0CS = 0;
  8591  002C2A  9AD5               	bcf	4053,5,c	;volatile
  8592                           
  8593                           ;config.c: 29: T0CONbits.PSA = 0;
  8594  002C2C  96D5               	bcf	4053,3,c	;volatile
  8595                           
  8596                           ;config.c: 30: T0CONbits.T0PS = 100;
  8597  002C2E  50D5               	movf	4053,w,c	;volatile
  8598  002C30  0BF8               	andlw	-8
  8599  002C32  0904               	iorlw	4
  8600  002C34  6ED5               	movwf	4053,c	;volatile
  8601                           
  8602                           ;config.c: 31: INTCONbits.TMR0IF = 0;
  8603  002C36  94F2               	bcf	intcon,2,c	;volatile
  8604                           
  8605                           ;config.c: 33: ADCON1bits.PCFG = 0b1111;
  8606  002C38  80C1               	bsf	4033,0,c	;volatile
  8607  002C3A  82C1               	bsf	4033,1,c	;volatile
  8608  002C3C  84C1               	bsf	4033,2,c	;volatile
  8609  002C3E  86C1               	bsf	4033,3,c	;volatile
  8610                           
  8611                           ;config.c: 36: TRISA=0b00000000;
  8612  002C40  0E00               	movlw	0
  8613  002C42  6E92               	movwf	3986,c	;volatile
  8614                           
  8615                           ;config.c: 37: TRISB=0b00000000;
  8616  002C44  0E00               	movlw	0
  8617  002C46  6E93               	movwf	3987,c	;volatile
  8618                           
  8619                           ;config.c: 44: ADCON0 = 0b00000111;
  8620  002C48  0E07               	movlw	7
  8621  002C4A  6EC2               	movwf	4034,c	;volatile
  8622                           
  8623                           ;config.c: 47: ADCON0bits.ADON = 0;
  8624  002C4C  90C2               	bcf	4034,0,c	;volatile
  8625                           
  8626                           ;config.c: 51: ADCON2bits.ADFM = 1;
  8627  002C4E  8EC0               	bsf	4032,7,c	;volatile
  8628                           
  8629                           ;config.c: 52: ADCON2bits.ADCS = 0b110;
  8630  002C50  50C0               	movf	4032,w,c	;volatile
  8631  002C52  0BF8               	andlw	-8
  8632  002C54  0906               	iorlw	6
  8633  002C56  6EC0               	movwf	4032,c	;volatile
  8634                           
  8635                           ;config.c: 53: ADCON2bits.ACQT = 0b101;
  8636  002C58  50C0               	movf	4032,w,c	;volatile
  8637  002C5A  0BC7               	andlw	-57
  8638  002C5C  0928               	iorlw	40
  8639  002C5E  6EC0               	movwf	4032,c	;volatile
  8640                           
  8641                           ;config.c: 54: ADCON1bits.PCFG=0b1101;
  8642  002C60  50C1               	movf	4033,w,c	;volatile
  8643  002C62  0BF0               	andlw	-16
  8644  002C64  090D               	iorlw	13
  8645  002C66  6EC1               	movwf	4033,c	;volatile
  8646                           
  8647                           ;config.c: 55: TRISAbits.RA1=1;
  8648  002C68  8292               	bsf	3986,1,c	;volatile
  8649                           
  8650                           ;config.c: 56: ADCON2bits.ADCS=0b110;
  8651  002C6A  50C0               	movf	4032,w,c	;volatile
  8652  002C6C  0BF8               	andlw	-8
  8653  002C6E  0906               	iorlw	6
  8654  002C70  6EC0               	movwf	4032,c	;volatile
  8655                           
  8656                           ;config.c: 57: ADCON1bits.VCFG1=0;
  8657  002C72  9AC1               	bcf	4033,5,c	;volatile
  8658                           
  8659                           ;config.c: 58: ADCON1bits.VCFG0=0;
  8660  002C74  98C1               	bcf	4033,4,c	;volatile
  8661                           
  8662                           ;config.c: 60: ADCON2bits.ADFM=1;
  8663  002C76  8EC0               	bsf	4032,7,c	;volatile
  8664                           
  8665                           ;config.c: 64: ADCON0bits.ADON=0;
  8666  002C78  90C2               	bcf	4034,0,c	;volatile
  8667                           
  8668                           ;config.c: 66: PIE1bits.ADIE=0;
  8669  002C7A  9C9D               	bcf	3997,6,c	;volatile
  8670                           
  8671                           ;config.c: 67: PIR1bits.ADIF=0;
  8672  002C7C  9C9E               	bcf	3998,6,c	;volatile
  8673                           
  8674                           ;config.c: 69: ADCON2bits.ACQT=0b111;
  8675  002C7E  86C0               	bsf	4032,3,c	;volatile
  8676  002C80  88C0               	bsf	4032,4,c	;volatile
  8677  002C82  8AC0               	bsf	4032,5,c	;volatile
  8678                           
  8679                           ;config.c: 70: ADCON0bits.GO=1;
  8680  002C84  82C2               	bsf	4034,1,c	;volatile
  8681                           
  8682                           ;config.c: 72: RCIF=0;
  8683  002C86  9A9E               	bcf	3998,5,c	;volatile
  8684                           
  8685                           ;config.c: 75: TRISD=0;
  8686  002C88  0E00               	movlw	0
  8687  002C8A  6E95               	movwf	3989,c	;volatile
  8688                           
  8689                           ;config.c: 76: PORTA=0;
  8690  002C8C  0E00               	movlw	0
  8691  002C8E  6E80               	movwf	3968,c	;volatile
  8692  002C90  0012               	return		;funcret
  8693  002C92                     __end_of_configBoard:
  8694                           	opt stack 0
  8695                           tblptru	equ	0xFF8
  8696                           tblptrh	equ	0xFF7
  8697                           tblptrl	equ	0xFF6
  8698                           tablat	equ	0xFF5
  8699                           prodh	equ	0xFF4
  8700                           prodl	equ	0xFF3
  8701                           intcon	equ	0xFF2
  8702                           wreg	equ	0xFE8
  8703                           indf1	equ	0xFE7
  8704                           fsr1h	equ	0xFE2
  8705                           fsr1l	equ	0xFE1
  8706                           indf2	equ	0xFDF
  8707                           postinc2	equ	0xFDE
  8708                           postdec2	equ	0xFDD
  8709                           fsr2h	equ	0xFDA
  8710                           fsr2l	equ	0xFD9
  8711                           status	equ	0xFD8
  8712                           tblptru	equ	0xFF8
  8713                           tblptrh	equ	0xFF7
  8714                           tblptrl	equ	0xFF6
  8715                           tablat	equ	0xFF5
  8716                           prodh	equ	0xFF4
  8717                           prodl	equ	0xFF3
  8718                           intcon	equ	0xFF2
  8719                           wreg	equ	0xFE8
  8720                           indf1	equ	0xFE7
  8721                           fsr1h	equ	0xFE2
  8722                           fsr1l	equ	0xFE1
  8723                           indf2	equ	0xFDF
  8724                           postinc2	equ	0xFDE
  8725                           postdec2	equ	0xFDD
  8726                           fsr2h	equ	0xFDA
  8727                           fsr2l	equ	0xFD9
  8728                           status	equ	0xFD8
  8729                           
  8730                           	psect	rparam
  8731  0000                     tblptru	equ	0xFF8
  8732                           tblptrh	equ	0xFF7
  8733                           tblptrl	equ	0xFF6
  8734                           tablat	equ	0xFF5
  8735                           prodh	equ	0xFF4
  8736                           prodl	equ	0xFF3
  8737                           intcon	equ	0xFF2
  8738                           wreg	equ	0xFE8
  8739                           indf1	equ	0xFE7
  8740                           fsr1h	equ	0xFE2
  8741                           fsr1l	equ	0xFE1
  8742                           indf2	equ	0xFDF
  8743                           postinc2	equ	0xFDE
  8744                           postdec2	equ	0xFDD
  8745                           fsr2h	equ	0xFDA
  8746                           fsr2l	equ	0xFD9
  8747                           status	equ	0xFD8


Data Sizes:
    Strings     52
    Constant    198
    Data        0
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     81      82
    BANK0           160     40      40
    BANK1           256    219     219
    BANK2           256      0       0
    BANK3           239      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(2) Largest target is 120
		 -> main@frecuencia(BANK1[120]), 

    memset@p	PTR unsigned char  size(2) Largest target is 120
		 -> main@frecuencia(BANK1[120]), 

    sprintf$710	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_4(CODE[17]), STR_3(CODE[17]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_2(CODE[9]), STR_1(CODE[9]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 120
		 -> main@UwU(BANK1[80]), main@frecuencia(BANK1[120]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sp__memset	PTR void  size(2) Largest target is 120
		 -> main@frecuencia(BANK1[120]), 

    lcd_texto@cadena	PTR unsigned char  size(2) Largest target is 120
		 -> main@UwU(BANK1[80]), main@frecuencia(BANK1[120]), 


Critical Paths under _main in COMRAM

    _main->_lcd_texto
    _main->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___ftsub->___ftadd
    ___ftadd->_fround
    _lcd_texto->_lcd_caracter
    _lcd_origen->_lcd_orden
    _lcd_limpiar->_lcd_orden
    _lcd_iniciar->_lcd_orden
    _lcd_pulso->_wait_in_ms
    _wait_in_ms->___fttol
    ___fttol->_scale
    ___ftdiv->___lltoft
    ___awtoft->___ftpack

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               223   223      0  123164
                                             77 COMRAM     4     4      0
                                              0 BANK1    219   219      0
                            ___ftdiv
                           ___lltoft
                        _configBoard
                        _lcd_iniciar
                        _lcd_limpiar
                         _lcd_origen
                          _lcd_texto
                             _memset
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             55    47      8   53215
                                             63 COMRAM    14     6      8
                                              0 BANK0     40    40      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                7     4      3   11907
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              10     7      3   11709
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2895
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    5085
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1664
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1820
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     455
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     598
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2726
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     767
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     922
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4120
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3775
                                             45 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     121
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     592
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _memset                                               8     2      6     552
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (1) _lcd_texto                                            3     1      2    7910
                                             74 COMRAM     3     1      2
                       _lcd_caracter
 ---------------------------------------------------------------------------------
 (2) _lcd_caracter                                         7     5      2    7713
                                             67 COMRAM     7     5      2
                          _lcd_pulso
 ---------------------------------------------------------------------------------
 (1) _lcd_origen                                           0     0      0   15838
                          _lcd_orden
                         _wait_in_ms
 ---------------------------------------------------------------------------------
 (1) _lcd_limpiar                                          0     0      0   15838
                          _lcd_orden
                         _wait_in_ms
 ---------------------------------------------------------------------------------
 (1) _lcd_iniciar                                          0     0      0   23431
                          _lcd_orden
                          _lcd_pulso
                         _wait_in_ms
 ---------------------------------------------------------------------------------
 (2) _lcd_orden                                            7     5      2    8245
                                             67 COMRAM     7     5      2
                          _lcd_pulso
 ---------------------------------------------------------------------------------
 (3) _lcd_pulso                                            0     0      0    7593
                         _wait_in_ms
 ---------------------------------------------------------------------------------
 (4) _wait_in_ms                                          10     8      2    7593
                                             57 COMRAM    10     8      2
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     556
                                             42 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftdiv                                             15     9      6    3215
                                             17 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awtoft                                             4     1      3    2672
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2505
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _configBoard                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
     ___lltoft (ARG)
       ___ftpack
   ___lltoft
     ___ftpack
   _configBoard
   _lcd_iniciar
     _lcd_orden
       _lcd_pulso
         _wait_in_ms
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
     _lcd_pulso
       _wait_in_ms
         ___awtoft
           ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
     _wait_in_ms
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _lcd_limpiar
     _lcd_orden
       _lcd_pulso
         _wait_in_ms
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
     _wait_in_ms
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _lcd_origen
     _lcd_orden
       _lcd_pulso
         _wait_in_ms
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
     _wait_in_ms
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _lcd_texto
     _lcd_caracter
       _lcd_pulso
         _wait_in_ms
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
   _memset
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM_1           400      0       0      21        0.0%
BIGRAM             3EE      0       0      22        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     DB      DB       7       85.5%
BITBANK3            EF      0       0      12        0.0%
BANK3               EF      0       0      10        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     28      28       5       25.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     51      52       1       86.3%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     155      11        0.0%
DATA                 0      0     155       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Mar 23 18:29:02 2018

                     l27 2EE2                       l28 2EC8             ___awdiv@sign 000C  
    ___wmul@multiplicand 0011              __CFG_BORV$3 000000             ___ftadd@exp1 0039  
           ___ftadd@exp2 0038             ___ftadd@sign 0037                      l112 2920  
                    l201 1E2E                      l115 2958                      l211 1AC4  
                    l116 2960                      l204 1EFA                      l212 1C14  
                    l300 0F80                      l301 0F6A                      l221 0952  
                    l214 1CC4                      l310 0FDA                      l222 0938  
                    l207 1AE8                      l231 099A                      l208 1A14  
                    l400 187A                      l224 093E                      l321 10D8  
                    l305 0FAC                      l233 0A6A                      l225 0944  
                    l402 184E                      l330 1240                      l322 10DC  
                    l306 0F96                      l250 0A8A                      l242 0A78  
                    l234 0A54                      l226 094A                      l218 090A  
                    l170 1F98                      l411 17F6                      l403 16F6  
                    l323 1102                      l315 1094                      l251 0AA6  
                    l243 0A7C                      l235 0A1C                      l219 0926  
                    l340 131E                      l316 1000                      l308 0FF0  
                    l244 0BAC                      l252 0ABC                      l405 186A  
                    l341 1342                      l253 0AC4                      l245 0A80  
                    l173 1FB0                      l165 1F7C                      l406 176A  
                    l350 1398                      l326 1234                      l318 10B4  
                    l262 0B30                      l343 1410                      l335 12FE  
                    l327 1152                      l319 109E                      l271 0C94  
                    l239 0B5C                      l263 0B20                      l255 0ADA  
                    l175 20DA                      l167 1F80                      l408 17CA  
                    l360 1468                      l344 135C                      l336 12C2  
                    l272 0CFA                      l256 0ACA                      l248 0A84  
                    l601 2BE8                      l361 148A                      l329 1256  
                    l265 0B44                      l249 0A86                      l602 2BE0  
                    l370 1532                      l354 13D4                      l274 0D20  
                    l266 0B56                      l258 0B08                      l371 1556  
                    l363 14AC                      l267 128E                      l275 0D60  
                    l259 0AEC                      l620 245C                      l380 15D6  
                    l372 155E                      l364 14B4                      l292 0F18  
                    l276 0E28                      l268 0BC0                      l613 2E76  
                    l621 248C                      l605 2C00                      l373 160E  
                    l365 14EA                      l349 142C                      l293 0F90  
                    l285 0E8E                      l269 0C02                      l630 24E2  
                    l606 2C0A                      l390 1656                      l374 1582  
                    l358 1448                      l294 0F54                      l703 2216  
                    l623 24CA                      l607 2C18                      l279 0DD0  
                    l704 220C                      l624 24BA                      l392 166A  
                    l376 1594                      l296 0F3C                      l713 2716  
                    l617 23FC                      l721 22D8                      l393 169E  
                    l369 152A                      l289 0EFE                      l650 298C  
                    l706 223A                      l378 15EE                      l715 273E  
                    l707 2256                      l811 2B92                      l619 241A  
                    l723 2304                      l652 29CA                      l716 277C  
                    l708 2286                      l812 2BA0                      l724 233E  
                    l653 29B4                      l717 27A2                      l821 2D40  
                    l629 24EE                      l733 23C6                      l725 2366  
                    l397 16E0                      l822 2D4E                      l734 23BA  
                    l655 29F2                      l807 2B5E                      l727 23A2  
                    l751 25B0                      l656 29E8                      l680 2152  
                    l808 2B52                      l728 2392                      l592 2B0E  
                    l752 25C0                      l649 2996                      l817 2D18  
                    l593 2B18                      l585 2AC0                      l745 252E  
                    l738 2A4C                      l762 2E38                      l818 2D0C  
                    l594 2B26                      l586 2AD0                      l739 2A7C  
                    l747 2556                      l756 2F2E                      l684 217C  
                    l828 2DD8                      l588 2AEE                      l748 2588  
                    l829 2DCC                      l589 2AE6                      l749 2598  
                    l781 2F52                      l774 26C0                      l766 2626  
                    l694 21D8                      l598 2BC6                      l775 26B4  
                    l695 21CE                      l599 2BD2                      l768 269C  
                    l777 26DC                      l769 268C                      l689 21E2  
                    l884 2EB4                      l885 2EA4             ___awmod@sign 0006  
                    wreg 000FE8              _sprintf$701 0065              _sprintf$710 006D  
            _sprintf$702 0067              _sprintf$703 0069              _sprintf$704 006B  
         ??_lcd_caracter 0046             __CFG_LVP$OFF 000000             ___ftdiv@cntr 001B  
           ___ftdiv@sign 0020             __CFG_WDT$OFF 000000                     l3240 2EA4  
                   l2504 2AA8                     l3410 0DAA                     l3402 0D60  
                   l3322 0ACA                     l3430 0E92                     l3328 0AEC  
                   l3338 0B20                     l3620 139C                     l3606 1360  
                   l3518 109E                     l3720 15EE                     l3634 13D8  
                   l3474 0F6A                     l2668 2960                     l3484 0F96  
                   l3718 15EA                     l3566 126E                     l3754 169E  
                   l3790 1876                     l3686 1532                     l3678 14EA  
                   l3786 184E                     l3796 189A                     STR_1 08E9  
                   STR_2 08F2                     STR_3 08C7                     STR_4 08D8  
                   u3011 22E8                     u2301 26FE                     u2230 297E  
                   u2321 2726                     u3210 2B62                     u2420 26C6  
                   u3140 24F4                     u2501 2124                     u2270 29FC  
                   u3070 23CC                     u3240 2D1C                     u3320 09F8  
                   u2361 260A                     u2530 2144                     u2380 2644  
                   u2445 28CE                     u2701 2516                     u4221 16C2  
                   u2470 294E                     u2630 21EA                     u4070 1520  
                   u3510 0D32                     u2560 216E                     u3520 0D72  
                   u2385 263C                     u2721 253E                     u4170 1618  
                   u3610 0EF8                     u2491 2110                     u2660 221E  
                   u4180 1636                     u2590 21AC                     u4270 189A  
                   u3550 0DAA                     u3470 0C3A                     u4280 18B8  
                   u2850 2BEC                     u4290 18D2                     u3810 126E  
                   u3475 0C30                     u3740 10C2                     u2790 2AF2  
                   u3750 10D2                     u3590 0ECA                     u3770 10F2  
                   u3690 0FBA                     _RCIF 007CF5                     u2885 2D76  
                   u2895 2CA8                     u2991 22BC                     _TMR1 000FCE  
            main@periodo 01C8                     _main 1F3A             ___ftpack@arg 0001  
           ___ftpack@exp 0004                     fsr1h 000FE2                     fsr2h 000FDA  
                   indf1 000FE7                     indf2 000FDF                     fsr1l 000FE1  
                   fsr2l 000FD9                     prodh 000FF4                     prodl 000FF3  
                   start 0002             _sprintf$1299 0060            __CFG_MCLRE$ON 000000  
           ___ftmul@cntr 0022             ___param_bank 000000             ___ftmul@sign 0023  
   lcd_caracter@caracter 0044             ___fttol@exp1 0039             ___fttol@lval 0035  
          __CFG_PLLDIV$2 000000                    ?_main 0001          __end_of___awdiv 2B30  
        __end_of___ftadd 22AC                    _CCPR1 000FBE          __end_of___awmod 2C22  
        __end_of___ftdiv 27D4          __end_of___ftneg 2F3C          __end_of___lldiv 2BB2  
        __end_of___ftmul 25FA          ___awdiv@divisor 0009                    _T1CON 000FCD  
        __end_of___llmod 2D60          __end_of___ftsub 2E62          __end_of___fttol 26EE  
        ___awdiv@counter 000B                    _TMR0L 000FD6                    _PORTA 000F80  
                  _PORTD 000F83                    _TRISA 000F92                    _TRISB 000F93  
                  _TRISD 000F95             ___lltoft@exp 0011           __CFG_FCMEN$OFF 000000  
          ___awtoft@sign 000C          __end_of_dpowers 0859                    _scale 18E0  
        __end_of_isdigit 2F5A            ___ftpack@sign 0005                    _turno 0052  
                  tablat 000FF5                    status 000FD8          __end_of_sprintf 18E0  
        __initialization 2FAC             __end_of_main 2100                   ??_main 004E  
          ___fttol@sign1 0034            __activetblptr 000002     __size_of__tdiv_to_l_ 0132  
                 _ADCON0 000FC2         ___llmod@dividend 000E                   ?_scale 0024  
                 _T08BIT 007EAE         ___awdiv@dividend 0007         __end_of___awtoft 2E9A  
       __end_of___ftpack 2A1C         __end_of___lltoft 2E22                   _OSCCON 000FD3  
                 _TMR0IF 007F92                   _TMR1IF 007CF0                   _TMR0ON 007EAF  
                 _TMR1ON 007E68                   _TRISC2 007CA2     __size_of_configBoard 0070  
       __end_of__powers_ 0880     __end_of_lcd_caracter 2CFA                   ___ftge 2A1C  
   __size_of_lcd_iniciar 00CE                   ___wmul 2EF2                ??___awdiv 000B  
              ??___ftadd 0034                ??___awmod 0005                ??___ftdiv 0018  
              ??___ftneg 0004                ??___lldiv 0009                ??___ftmul 001B  
              ??___llmod 0016                ??___ftsub 0040                ??___fttol 002F  
   __size_of_lcd_limpiar 001A                   _memset 2E9A                   _fround 1CE8  
       ___awdiv@quotient 000D          ___awmod@divisor 0003          ___awmod@counter 0005  
                 main@dt 01CC    ___ftmul@f3_as_product 001F                ??_isdigit 0001  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8                ??_sprintf 0048               __accesstop 0060  
__end_of__initialization 2FAE               ___ftadd@f1 002E               ___ftadd@f2 0031  
             ___ftge@ff1 0001               ___ftge@ff2 0004            ___rparam_used 000001  
             ___ftdiv@f1 0012               ___ftdiv@f2 0015               ___ftdiv@f3 001C  
             ___ftneg@f1 0001               ___awtoft@c 0009               ___ftmul@f1 0015  
             ___ftmul@f2 0018               ___ftsub@f1 003A               ___ftsub@f2 003D  
             ___fttol@f1 002B           __pcstackCOMRAM 0001               ___lltoft@c 0009  
          __end_of_scale 1CE8               __div_to_l_ 23DE       __size_of_lcd_orden 0066  
     __size_of_lcd_texto 002C       __size_of_lcd_pulso 001E          __div_to_l_@exp1 000C  
        __div_to_l_@cntr 000B                  ??_scale 0027          __div_to_l_@quot 0007  
           sprintf@width 0083            __div_to_l_@f1 0001            __div_to_l_@f2 0004  
         lcd_orden@orden 0044                  ?___ftge 0001                  ?___wmul 000F  
                _CCP1CON 000FBD                  ?_memset 0001                  ?_fround 0024  
              ?___awtoft 0009                ?___ftpack 0001                ?___lltoft 0009  
         main@frecuencia 0100               _lcd_origen 2F78    __size_of_lcd_caracter 0068  
      __end_of__npowers_ 08A7                  __Hparam 0000               _scale$1298 0027  
                __Lparam 0000        __end_of_lcd_orden 2DC6          __size_of___ftge 0090  
      __end_of_lcd_texto 2EF2        __end_of_lcd_pulso 2F78                  ___awdiv 2AAC  
                ___ftadd 2100                  ___awmod 2BB2                  ___ftdiv 26EE  
                ___ftneg 2F18                  ___lldiv 2B30          __size_of___wmul 0026  
                ___ftmul 2506                  ___llmod 2CFA                  ___ftsub 2E22  
                ___fttol 25FA             __psmallconst 0800                  __pcinit 2FAC  
             ??___awtoft 000C               ??___ftpack 0006          __size_of_memset 002C  
        __size_of_fround 0252                  __ramtop 0800               ??___lltoft 000D  
                __ptext0 1F3A                  __ptext1 08FC                  __ptext2 18E0  
                __ptext3 2F3C                  __ptext4 1CE8                  __ptext5 2EF2  
                __ptext6 2506                  __ptext7 2BB2                  __ptext8 2AAC  
                __ptext9 22AC                _T0CONbits 000FD5        __end_of_hexpowers 08C7  
            ?__div_to_l_ 0001                  _dpowers 0831                  _isdigit 2F3C  
       ___awmod@dividend 0001             _lcd_caracter 2C92                  main@UwU 0178  
                _sprintf 08FC     end_of_initialization 2FAE        __end_of_octpowers 0831  
                memset@c 0003                  memset@n 0005                  memset@p 0007  
          __Lmediumconst 0000     wait_in_ms@time_in_ms 003A          ___lldiv@divisor 0005  
        ___lldiv@counter 000D                  postdec2 000FDD                  postinc2 000FDE  
             _wait_in_ms 28A2           __tdiv_to_l_@f1 0001           __tdiv_to_l_@f2 0004  
          ??__tdiv_to_l_ 0007                _PORTDbits 000F83                _TRISAbits 000F92  
              _TRISDbits 000F95              ?_lcd_origen 0001              ___ftdiv@exp 001F  
          ??_configBoard 0001            ??_lcd_iniciar 004B      __size_of__div_to_l_ 0128  
          ??_lcd_limpiar 004B              ___ftmul@exp 001E           __end_of___ftge 2AAC  
         __end_of___wmul 2F18           __end_of_memset 2EC6           __end_of_fround 1F3A  
    start_initialization 2FAC      __end_of__tdiv_to_l_ 23DE          wait_in_ms@count 0040  
        ___llmod@divisor 0012          ___llmod@counter 0016       wait_in_ms@count_ms 0042  
               ??___ftge 0007                 ??___wmul 0013      __end_of_configBoard 2C92  
    __size_of_lcd_origen 001A              ?_wait_in_ms 003A      __end_of_lcd_iniciar 28A2  
               ??_memset 0007                 ??_fround 0027      __end_of_lcd_limpiar 2FAC  
          sprintf@tmpval 0074               fround@prec 002D        __size_of___awtoft 0038  
      __size_of___ftpack 00AE        __size_of___lltoft 005C              __pbssCOMRAM 0052  
          __pcstackBANK0 0060            __pcstackBANK1 0100              sprintf@flag 0086  
            sprintf@fval 007A              sprintf@prec 0081                 ?___awdiv 0007  
               ?___ftadd 002E                 ?___awmod 0001                 ?___ftdiv 0012  
               ?___ftneg 0001                 ?___lldiv 0001                 ?___ftmul 0015  
               ?___llmod 000E                 ?___ftsub 003A                __npowers_ 0880  
               ?___fttol 002B                _lcd_orden 2D60              __tdiv_to_l_ 22AC  
              _lcd_texto 2EC6                _lcd_pulso 2F5A             ??__div_to_l_ 0007  
            __smallconst 0800                 ?_isdigit 0001                _hexpowers 08A7  
               ?_sprintf 0040           __size_of_scale 0408      __size_of_wait_in_ms 00CC  
         ___wmul@product 0013              _configBoard 2C22                _octpowers 0801  
               _PIE1bits 000F9D              _lcd_iniciar 27D4                 _PIR1bits 000F9E  
     __end_of__div_to_l_ 2506              _lcd_limpiar 2F92               ?_lcd_orden 0044  
             ?_lcd_texto 004B               ?_lcd_pulso 0001               _ADCON0bits 000FC2  
             _ADCON1bits 000FC1               _ADCON2bits 000FC0        ___wmul@multiplier 000F  
              main@dato1 01D7                main@dato2 01D3             ??_lcd_origen 004B  
         wait_in_ms@flag 003E                 __Hrparam 0000                 __Lrparam 0000  
     __end_of_lcd_origen 2F92         __size_of___awdiv 0084         __size_of___ftadd 01AC  
       __size_of___awmod 0070         __size_of___ftdiv 00E6         __size_of___ftneg 0024  
       __size_of___lldiv 0082         __size_of___ftmul 00F4         __size_of___llmod 0066  
       __size_of___ftsub 0040         __size_of___fttol 00F4                 ___awtoft 2E62  
               ___ftpack 296E              _fround$1296 002A              _fround$1297 0027  
               ___lltoft 2DC6              _isdigit$936 0002               sprintf@idx 006F  
             sprintf@len 0070               sprintf@exp 0078               sprintf@val 007D  
       __size_of_isdigit 001E                 __ptext10 23DE                 __ptext11 2DC6  
               __ptext20 2C92                 __ptext12 2CFA                 __ptext21 2F78  
               __ptext13 2B30                 __ptext30 296E                 __ptext22 2F92  
               __ptext14 2E22                 __ptext31 2C22                 __ptext23 27D4  
               __ptext15 2100                 __ptext24 2D60                 __ptext16 2F18  
               __ptext25 2F5A                 __ptext17 2A1C                 __ptext26 28A2  
               __ptext18 2E9A                 __ptext27 25FA                 __ptext19 2EC6  
               __ptext28 26EE                 __ptext29 2E62                 __powers_ 0859  
        lcd_texto@cadena 004B         __size_of_sprintf 0FE4            __size_of_main 01C6  
           ??_wait_in_ms 003C                 main@freq 01D0              ??_lcd_orden 0046  
            ??_lcd_texto 004D              ??_lcd_pulso 0044    __CFG_CPUDIV$OSC1_PLL2 000000  
             _INTCONbits 000FF2                 isdigit@c 0003                 memset@p1 0001  
               scale@scl 002A                sprintf@ap 0072                sprintf@cp 0063  
       __tdiv_to_l_@exp1 000F                sprintf@sp 0040         __tdiv_to_l_@cntr 000E  
       __tdiv_to_l_@quot 000A       __end_of_wait_in_ms 296E         ___lldiv@dividend 0001  
           ?__tdiv_to_l_ 0001                 sprintf@c 0085                 sprintf@f 0042  
       ___lldiv@quotient 0009            ?_lcd_caracter 0044       __CFG_FOSC$HSPLL_HS 000000  
           ?_configBoard 0001             ?_lcd_iniciar 0001             ?_lcd_limpiar 0001  
