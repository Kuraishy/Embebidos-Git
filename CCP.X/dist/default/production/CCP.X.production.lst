

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Mar 23 19:59:46 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    44                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    45  0000                     
    46                           ; Version 1.45
    47                           ; Generated 16/11/2017 GMT
    48                           ; 
    49                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    50                           ; All rights reserved.
    51                           ; 
    52                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    53                           ; 
    54                           ; Redistribution and use in source and binary forms, with or without modification, are
    55                           ; permitted provided that the following conditions are met:
    56                           ; 
    57                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    58                           ;        conditions and the following disclaimer.
    59                           ; 
    60                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    61                           ;        of conditions and the following disclaimer in the documentation and/or other
    62                           ;        materials provided with the distribution.
    63                           ; 
    64                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    65                           ;        software without specific prior written permission.
    66                           ; 
    67                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    68                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    69                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    70                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    71                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    72                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    73                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    74                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    75                           ; 
    76                           ; 
    77                           ; Code-generator required, PIC18F4550 Definitions
    78                           ; 
    79                           ; SFR Addresses
    80  0000                     
    81                           	psect	smallconst
    82  000800                     __psmallconst:
    83                           	opt stack 0
    84  000800  00                 	db	0
    85  000801                     _dpowers:
    86                           	opt stack 0
    87  000801  0001               	dw	1
    88  000803  0000               	dw	0
    89  000805  000A               	dw	10
    90  000807  0000               	dw	0
    91  000809  0064               	dw	100
    92  00080B  0000               	dw	0
    93  00080D  03E8               	dw	1000
    94  00080F  0000               	dw	0
    95  000811  2710               	dw	10000
    96  000813  0000               	dw	0
    97  000815  86A0               	dw	34464
    98  000817  0001               	dw	1
    99  000819  4240               	dw	16960
   100  00081B  000F               	dw	15
   101  00081D  9680               	dw	38528
   102  00081F  0098               	dw	152
   103  000821  E100               	dw	57600
   104  000823  05F5               	dw	1525
   105  000825  CA00               	dw	51712
   106  000827  3B9A               	dw	15258
   107  000829                     __end_of_dpowers:
   108                           	opt stack 0
   109  000829                     __powers_:
   110                           	opt stack 0
   111  000829  00                 	db	0
   112  00082A  80                 	db	128
   113  00082B  3F                 	db	63
   114  00082C  00                 	db	0
   115  00082D  20                 	db	32
   116  00082E  41                 	db	65
   117  00082F  00                 	db	0
   118  000830  C8                 	db	200
   119  000831  42                 	db	66
   120  000832  00                 	db	0
   121  000833  7A                 	db	122
   122  000834  44                 	db	68
   123  000835  40                 	db	64
   124  000836  1C                 	db	28
   125  000837  46                 	db	70
   126  000838  50                 	db	80
   127  000839  C3                 	db	195
   128  00083A  47                 	db	71
   129  00083B  24                 	db	36
   130  00083C  74                 	db	116
   131  00083D  49                 	db	73
   132  00083E  97                 	db	151
   133  00083F  18                 	db	24
   134  000840  4B                 	db	75
   135  000841  BC                 	db	188
   136  000842  BE                 	db	190
   137  000843  4C                 	db	76
   138  000844  6B                 	db	107
   139  000845  6E                 	db	110
   140  000846  4E                 	db	78
   141  000847  03                 	db	3
   142  000848  15                 	db	21
   143  000849  50                 	db	80
   144  00084A  79                 	db	121
   145  00084B  AD                 	db	173
   146  00084C  60                 	db	96
   147  00084D  F3                 	db	243
   148  00084E  49                 	db	73
   149  00084F  71                 	db	113
   150  000850                     __end_of__powers_:
   151                           	opt stack 0
   152  000850                     __npowers_:
   153                           	opt stack 0
   154  000850  00                 	db	0
   155  000851  80                 	db	128
   156  000852  3F                 	db	63
   157  000853  CD                 	db	205
   158  000854  CC                 	db	204
   159  000855  3D                 	db	61
   160  000856  D7                 	db	215
   161  000857  23                 	db	35
   162  000858  3C                 	db	60
   163  000859  12                 	db	18
   164  00085A  83                 	db	131
   165  00085B  3A                 	db	58
   166  00085C  B7                 	db	183
   167  00085D  D1                 	db	209
   168  00085E  38                 	db	56
   169  00085F  C6                 	db	198
   170  000860  27                 	db	39
   171  000861  37                 	db	55
   172  000862  38                 	db	56
   173  000863  86                 	db	134
   174  000864  35                 	db	53
   175  000865  C0                 	db	192
   176  000866  D6                 	db	214
   177  000867  33                 	db	51
   178  000868  CC                 	db	204
   179  000869  2B                 	db	43
   180  00086A  32                 	db	50
   181  00086B  70                 	db	112
   182  00086C  89                 	db	137
   183  00086D  30                 	db	48
   184  00086E  E7                 	db	231
   185  00086F  DB                 	db	219
   186  000870  2E                 	db	46
   187  000871  E5                 	db	229
   188  000872  3C                 	db	60
   189  000873  1E                 	db	30
   190  000874  42                 	db	66
   191  000875  A2                 	db	162
   192  000876  0D                 	db	13
   193  000877                     __end_of__npowers_:
   194                           	opt stack 0
   195  0000                     _TMR1	set	4046
   196  0000                     _CCPR1	set	4030
   197  0000                     _T1CON	set	4045
   198  0000                     _CCP1CON	set	4029
   199  0000                     _OSCCON	set	4051
   200  0000                     _PORTA	set	3968
   201  0000                     _TRISD	set	3989
   202  0000                     _PIR1bits	set	3998
   203  0000                     _PIE1bits	set	3997
   204  0000                     _TRISAbits	set	3986
   205  0000                     _ADCON2bits	set	4032
   206  0000                     _ADCON0bits	set	4034
   207  0000                     _ADCON0	set	4034
   208  0000                     _TRISB	set	3987
   209  0000                     _TRISA	set	3986
   210  0000                     _ADCON1bits	set	4033
   211  0000                     _T0CONbits	set	4053
   212  0000                     _INTCONbits	set	4082
   213  0000                     _PORTD	set	3971
   214  0000                     _PORTDbits	set	3971
   215  0000                     _TRISDbits	set	3989
   216  0000                     _TMR0L	set	4054
   217  0000                     _TMR1ON	set	32360
   218  0000                     _TMR1IF	set	31984
   219  0000                     _TRISC2	set	31906
   220  0000                     _TMR0IF	set	32658
   221  0000                     _TMR0ON	set	32431
   222  0000                     _RCIF	set	31989
   223  0000                     _T08BIT	set	32430
   224  000877                     STR_2:
   225  000877  25                 	db	37
   226  000878  2E                 	db	46
   227  000879  32                 	db	50	;'2'
   228  00087A  66                 	db	102	;'f'
   229  00087B  20                 	db	32
   230  00087C  20                 	db	32
   231  00087D  64                 	db	100	;'d'
   232  00087E  75                 	db	117	;'u'
   233  00087F  74                 	db	116	;'t'
   234  000880  79                 	db	121	;'y'
   235  000881  00                 	db	0
   236  000882                     STR_1:
   237  000882  25                 	db	37
   238  000883  2E                 	db	46
   239  000884  31                 	db	49	;'1'
   240  000885  66                 	db	102	;'f'
   241  000886  20                 	db	32
   242  000887  48                 	db	72	;'H'
   243  000888  7A                 	db	122	;'z'
   244  000889  20                 	db	32
   245  00088A  00                 	db	0
   246                           
   247                           ; #config settings
   248  00088B  00                 	db	0	; dummy byte at the end
   249  0000                     
   250                           	psect	cinit
   251  00278A                     __pcinit:
   252                           	opt stack 0
   253  00278A                     start_initialization:
   254                           	opt stack 0
   255  00278A                     __initialization:
   256                           	opt stack 0
   257                           
   258                           ; Clear objects allocated to BANK0 (1 bytes)
   259  00278A  0100               	movlb	0
   260  00278C  6B7B               	clrf	__pbssBANK0& (0+255),b
   261  00278E                     end_of_initialization:
   262                           	opt stack 0
   263  00278E                     __end_of__initialization:
   264                           	opt stack 0
   265  00278E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   266  002790  6EF8               	movwf	tblptru,c
   267  002792  0100               	movlb	0
   268  002794  EFCE  F009         	goto	_main	;jump to C main() function
   269                           tblptru	equ	0xFF8
   270                           
   271                           	psect	bssBANK0
   272  00007B                     __pbssBANK0:
   273                           	opt stack 0
   274  00007B                     _turno:
   275                           	opt stack 0
   276  00007B                     	ds	1
   277                           tblptru	equ	0xFF8
   278                           
   279                           	psect	cstackBANK1
   280  000100                     __pcstackBANK1:
   281                           	opt stack 0
   282  000100                     main@frecuencia:
   283                           	opt stack 0
   284                           
   285                           ; 120 bytes @ 0x0
   286  000100                     	ds	120
   287  000178                     main@UwU:
   288                           	opt stack 0
   289                           
   290                           ; 80 bytes @ 0x78
   291  000178                     	ds	80
   292  0001C8                     main@dt:
   293                           	opt stack 0
   294                           
   295                           ; 4 bytes @ 0xC8
   296  0001C8                     	ds	4
   297  0001CC                     main@freq:
   298                           	opt stack 0
   299                           
   300                           ; 3 bytes @ 0xCC
   301  0001CC                     	ds	3
   302  0001CF                     main@temp:
   303                           	opt stack 0
   304                           
   305                           ; 3 bytes @ 0xCF
   306  0001CF                     	ds	3
   307  0001D2                     main@temp2:
   308                           	opt stack 0
   309                           
   310                           ; 3 bytes @ 0xD2
   311  0001D2                     	ds	3
   312  0001D5                     main@periodo:
   313                           	opt stack 0
   314                           
   315                           ; 4 bytes @ 0xD5
   316  0001D5                     	ds	4
   317  0001D9                     main@dato2:
   318                           	opt stack 0
   319                           
   320                           ; 4 bytes @ 0xD9
   321  0001D9                     	ds	4
   322  0001DD                     main@dato1:
   323                           	opt stack 0
   324                           
   325                           ; 4 bytes @ 0xDD
   326  0001DD                     	ds	4
   327                           tblptru	equ	0xFF8
   328                           
   329                           	psect	cstackBANK0
   330  000060                     __pcstackBANK0:
   331                           	opt stack 0
   332  000060                     _sprintf$1289:
   333                           	opt stack 0
   334                           
   335                           ; 3 bytes @ 0x0
   336  000060                     	ds	3
   337  000063                     sprintf@ap:
   338                           	opt stack 0
   339                           
   340                           ; 2 bytes @ 0x3
   341  000063                     	ds	2
   342  000065                     sprintf@flag:
   343                           	opt stack 0
   344                           
   345                           ; 2 bytes @ 0x5
   346  000065                     	ds	2
   347  000067                     sprintf@val:
   348                           	opt stack 0
   349                           
   350                           ; 4 bytes @ 0x7
   351  000067                     	ds	4
   352  00006B                     sprintf@exp:
   353                           	opt stack 0
   354                           
   355                           ; 2 bytes @ 0xB
   356  00006B                     	ds	2
   357  00006D                     sprintf@tmpval:
   358                           	opt stack 0
   359                           
   360                           ; 4 bytes @ 0xD
   361  00006D                     	ds	4
   362  000071                     sprintf@prec:
   363                           	opt stack 0
   364                           
   365                           ; 2 bytes @ 0x11
   366  000071                     	ds	2
   367  000073                     sprintf@fval:
   368                           	opt stack 0
   369                           
   370                           ; 3 bytes @ 0x13
   371  000073                     	ds	3
   372  000076                     sprintf@c:
   373                           	opt stack 0
   374                           
   375                           ; 1 bytes @ 0x16
   376  000076                     	ds	1
   377  000077                     ??_main:
   378                           
   379                           ; 1 bytes @ 0x17
   380  000077                     	ds	4
   381                           tblptru	equ	0xFF8
   382                           
   383                           	psect	cstackCOMRAM
   384  000001                     __pcstackCOMRAM:
   385                           	opt stack 0
   386  000001                     ??_isdigit:
   387  000001                     ?___awmod:
   388                           	opt stack 0
   389  000001                     ?___ftpack:
   390                           	opt stack 0
   391  000001                     ?___ftneg:
   392                           	opt stack 0
   393  000001                     ?__tdiv_to_l_:
   394                           	opt stack 0
   395  000001                     ?__div_to_l_:
   396                           	opt stack 0
   397  000001                     ?___lldiv:
   398                           	opt stack 0
   399  000001                     ?___llmod:
   400                           	opt stack 0
   401  000001                     ___awmod@dividend:
   402                           	opt stack 0
   403  000001                     memset@p1:
   404                           	opt stack 0
   405  000001                     __div_to_l_@f1:
   406                           	opt stack 0
   407  000001                     ___ftpack@arg:
   408                           	opt stack 0
   409  000001                     __tdiv_to_l_@f1:
   410                           	opt stack 0
   411  000001                     ___ftge@ff1:
   412                           	opt stack 0
   413  000001                     ___ftneg@f1:
   414                           	opt stack 0
   415  000001                     ___lldiv@dividend:
   416                           	opt stack 0
   417  000001                     ___llmod@dividend:
   418                           	opt stack 0
   419                           
   420                           ; 4 bytes @ 0x0
   421  000001                     	ds	1
   422  000002                     _isdigit$926:
   423                           	opt stack 0
   424                           
   425                           ; 1 bytes @ 0x1
   426  000002                     	ds	1
   427  000003                     isdigit@c:
   428                           	opt stack 0
   429  000003                     ___awmod@divisor:
   430                           	opt stack 0
   431  000003                     memset@c:
   432                           	opt stack 0
   433                           
   434                           ; 2 bytes @ 0x2
   435  000003                     	ds	1
   436  000004                     ___ftpack@exp:
   437                           	opt stack 0
   438  000004                     __div_to_l_@f2:
   439                           	opt stack 0
   440  000004                     __tdiv_to_l_@f2:
   441                           	opt stack 0
   442  000004                     ___ftge@ff2:
   443                           	opt stack 0
   444                           
   445                           ; 3 bytes @ 0x3
   446  000004                     	ds	1
   447  000005                     ___awmod@counter:
   448                           	opt stack 0
   449  000005                     ___ftpack@sign:
   450                           	opt stack 0
   451  000005                     memset@n:
   452                           	opt stack 0
   453  000005                     ___lldiv@divisor:
   454                           	opt stack 0
   455  000005                     ___llmod@divisor:
   456                           	opt stack 0
   457                           
   458                           ; 4 bytes @ 0x4
   459  000005                     	ds	1
   460  000006                     ??___ftpack:
   461  000006                     ___awmod@sign:
   462                           	opt stack 0
   463                           
   464                           ; 1 bytes @ 0x5
   465  000006                     	ds	1
   466  000007                     ??__tdiv_to_l_:
   467  000007                     ??___ftge:
   468  000007                     ?___awdiv:
   469                           	opt stack 0
   470  000007                     ___awdiv@dividend:
   471                           	opt stack 0
   472  000007                     memset@p:
   473                           	opt stack 0
   474  000007                     __div_to_l_@quot:
   475                           	opt stack 0
   476                           
   477                           ; 4 bytes @ 0x6
   478  000007                     	ds	2
   479  000009                     ?___awtoft:
   480                           	opt stack 0
   481  000009                     ?___lltoft:
   482                           	opt stack 0
   483  000009                     ___llmod@counter:
   484                           	opt stack 0
   485  000009                     ___awdiv@divisor:
   486                           	opt stack 0
   487  000009                     ___awtoft@c:
   488                           	opt stack 0
   489  000009                     ___lldiv@quotient:
   490                           	opt stack 0
   491  000009                     ___lltoft@c:
   492                           	opt stack 0
   493                           
   494                           ; 4 bytes @ 0x8
   495  000009                     	ds	1
   496  00000A                     __tdiv_to_l_@quot:
   497                           	opt stack 0
   498                           
   499                           ; 4 bytes @ 0x9
   500  00000A                     	ds	1
   501  00000B                     ___awdiv@counter:
   502                           	opt stack 0
   503  00000B                     __div_to_l_@cntr:
   504                           	opt stack 0
   505                           
   506                           ; 1 bytes @ 0xA
   507  00000B                     	ds	1
   508  00000C                     ___awdiv@sign:
   509                           	opt stack 0
   510  00000C                     ___awtoft@sign:
   511                           	opt stack 0
   512  00000C                     __div_to_l_@exp1:
   513                           	opt stack 0
   514                           
   515                           ; 1 bytes @ 0xB
   516  00000C                     	ds	1
   517  00000D                     ??___lltoft:
   518  00000D                     ___lldiv@counter:
   519                           	opt stack 0
   520  00000D                     ___awdiv@quotient:
   521                           	opt stack 0
   522                           
   523                           ; 2 bytes @ 0xC
   524  00000D                     	ds	1
   525  00000E                     __tdiv_to_l_@cntr:
   526                           	opt stack 0
   527                           
   528                           ; 1 bytes @ 0xD
   529  00000E                     	ds	1
   530  00000F                     ?___wmul:
   531                           	opt stack 0
   532  00000F                     __tdiv_to_l_@exp1:
   533                           	opt stack 0
   534  00000F                     ___wmul@multiplier:
   535                           	opt stack 0
   536                           
   537                           ; 2 bytes @ 0xE
   538  00000F                     	ds	2
   539  000011                     ___lltoft@exp:
   540                           	opt stack 0
   541  000011                     ___wmul@multiplicand:
   542                           	opt stack 0
   543                           
   544                           ; 2 bytes @ 0x10
   545  000011                     	ds	1
   546  000012                     ?___ftdiv:
   547                           	opt stack 0
   548  000012                     ___ftdiv@f1:
   549                           	opt stack 0
   550                           
   551                           ; 3 bytes @ 0x11
   552  000012                     	ds	1
   553  000013                     ___wmul@product:
   554                           	opt stack 0
   555                           
   556                           ; 2 bytes @ 0x12
   557  000013                     	ds	2
   558  000015                     ___ftdiv@f2:
   559                           	opt stack 0
   560                           
   561                           ; 3 bytes @ 0x14
   562  000015                     	ds	3
   563  000018                     ??___ftdiv:
   564                           
   565                           ; 1 bytes @ 0x17
   566  000018                     	ds	3
   567  00001B                     ___ftdiv@cntr:
   568                           	opt stack 0
   569                           
   570                           ; 1 bytes @ 0x1A
   571  00001B                     	ds	1
   572  00001C                     ___ftdiv@f3:
   573                           	opt stack 0
   574                           
   575                           ; 3 bytes @ 0x1B
   576  00001C                     	ds	3
   577  00001F                     ___ftdiv@exp:
   578                           	opt stack 0
   579                           
   580                           ; 1 bytes @ 0x1E
   581  00001F                     	ds	1
   582  000020                     ___ftdiv@sign:
   583                           	opt stack 0
   584                           
   585                           ; 1 bytes @ 0x1F
   586  000020                     	ds	1
   587  000021                     ?___ftmul:
   588                           	opt stack 0
   589  000021                     ___ftmul@f1:
   590                           	opt stack 0
   591                           
   592                           ; 3 bytes @ 0x20
   593  000021                     	ds	3
   594  000024                     ___ftmul@f2:
   595                           	opt stack 0
   596                           
   597                           ; 3 bytes @ 0x23
   598  000024                     	ds	3
   599  000027                     ??___ftmul:
   600                           
   601                           ; 1 bytes @ 0x26
   602  000027                     	ds	3
   603  00002A                     ___ftmul@exp:
   604                           	opt stack 0
   605                           
   606                           ; 1 bytes @ 0x29
   607  00002A                     	ds	1
   608  00002B                     ___ftmul@f3_as_product:
   609                           	opt stack 0
   610                           
   611                           ; 3 bytes @ 0x2A
   612  00002B                     	ds	3
   613  00002E                     ___ftmul@cntr:
   614                           	opt stack 0
   615                           
   616                           ; 1 bytes @ 0x2D
   617  00002E                     	ds	1
   618  00002F                     ___ftmul@sign:
   619                           	opt stack 0
   620                           
   621                           ; 1 bytes @ 0x2E
   622  00002F                     	ds	1
   623  000030                     ?_fround:
   624                           	opt stack 0
   625  000030                     ?_scale:
   626                           	opt stack 0
   627                           
   628                           ; 3 bytes @ 0x2F
   629  000030                     	ds	3
   630  000033                     _fround$1287:
   631                           	opt stack 0
   632  000033                     _scale$1288:
   633                           	opt stack 0
   634                           
   635                           ; 3 bytes @ 0x32
   636  000033                     	ds	3
   637  000036                     scale@scl:
   638                           	opt stack 0
   639  000036                     _fround$1286:
   640                           	opt stack 0
   641                           
   642                           ; 3 bytes @ 0x35
   643  000036                     	ds	1
   644  000037                     ?___fttol:
   645                           	opt stack 0
   646  000037                     ___fttol@f1:
   647                           	opt stack 0
   648                           
   649                           ; 3 bytes @ 0x36
   650  000037                     	ds	2
   651  000039                     fround@prec:
   652                           	opt stack 0
   653                           
   654                           ; 1 bytes @ 0x38
   655  000039                     	ds	1
   656  00003A                     ?___ftadd:
   657                           	opt stack 0
   658  00003A                     ___ftadd@f1:
   659                           	opt stack 0
   660                           
   661                           ; 3 bytes @ 0x39
   662  00003A                     	ds	1
   663  00003B                     ??___fttol:
   664                           
   665                           ; 1 bytes @ 0x3A
   666  00003B                     	ds	2
   667  00003D                     ___ftadd@f2:
   668                           	opt stack 0
   669                           
   670                           ; 3 bytes @ 0x3C
   671  00003D                     	ds	3
   672  000040                     ??___ftadd:
   673  000040                     ___fttol@sign1:
   674                           	opt stack 0
   675                           
   676                           ; 1 bytes @ 0x3F
   677  000040                     	ds	1
   678  000041                     ___fttol@lval:
   679                           	opt stack 0
   680                           
   681                           ; 4 bytes @ 0x40
   682  000041                     	ds	2
   683  000043                     ___ftadd@sign:
   684                           	opt stack 0
   685                           
   686                           ; 1 bytes @ 0x42
   687  000043                     	ds	1
   688  000044                     ___ftadd@exp2:
   689                           	opt stack 0
   690                           
   691                           ; 1 bytes @ 0x43
   692  000044                     	ds	1
   693  000045                     ___ftadd@exp1:
   694                           	opt stack 0
   695  000045                     ___fttol@exp1:
   696                           	opt stack 0
   697                           
   698                           ; 1 bytes @ 0x44
   699  000045                     	ds	1
   700  000046                     ?___ftsub:
   701                           	opt stack 0
   702  000046                     wait_in_ms@time_in_ms:
   703                           	opt stack 0
   704  000046                     ___ftsub@f1:
   705                           	opt stack 0
   706                           
   707                           ; 3 bytes @ 0x45
   708  000046                     	ds	2
   709  000048                     ??_wait_in_ms:
   710                           
   711                           ; 1 bytes @ 0x47
   712  000048                     	ds	1
   713  000049                     ___ftsub@f2:
   714                           	opt stack 0
   715                           
   716                           ; 3 bytes @ 0x48
   717  000049                     	ds	1
   718  00004A                     wait_in_ms@flag:
   719                           	opt stack 0
   720                           
   721                           ; 2 bytes @ 0x49
   722  00004A                     	ds	2
   723  00004C                     ?_sprintf:
   724                           	opt stack 0
   725  00004C                     wait_in_ms@count:
   726                           	opt stack 0
   727  00004C                     sprintf@sp:
   728                           	opt stack 0
   729                           
   730                           ; 2 bytes @ 0x4B
   731  00004C                     	ds	2
   732  00004E                     wait_in_ms@count_ms:
   733                           	opt stack 0
   734  00004E                     sprintf@f:
   735                           	opt stack 0
   736                           
   737                           ; 2 bytes @ 0x4D
   738  00004E                     	ds	2
   739  000050                     lcd_orden@orden:
   740                           	opt stack 0
   741  000050                     lcd_caracter@caracter:
   742                           	opt stack 0
   743                           
   744                           ; 2 bytes @ 0x4F
   745  000050                     	ds	2
   746  000052                     ??_lcd_orden:
   747  000052                     ??_lcd_caracter:
   748                           
   749                           ; 1 bytes @ 0x51
   750  000052                     	ds	1
   751  000053                     ??_sprintf:
   752                           
   753                           ; 1 bytes @ 0x52
   754  000053                     	ds	4
   755  000057                     lcd_ubicarXY@columna:
   756                           	opt stack 0
   757  000057                     lcd_texto@cadena:
   758                           	opt stack 0
   759                           
   760                           ; 2 bytes @ 0x56
   761  000057                     	ds	1
   762  000058                     ??_lcd_ubicarXY:
   763                           
   764                           ; 1 bytes @ 0x57
   765  000058                     	ds	1
   766  000059                     ??_lcd_texto:
   767                           
   768                           ; 1 bytes @ 0x58
   769  000059                     	ds	4
   770  00005D                     lcd_ubicarXY@i:
   771                           	opt stack 0
   772                           
   773                           ; 1 bytes @ 0x5C
   774  00005D                     	ds	1
   775  00005E                     lcd_ubicarXY@i_155:
   776                           	opt stack 0
   777                           
   778                           ; 1 bytes @ 0x5D
   779  00005E                     	ds	1
   780  00005F                     lcd_ubicarXY@linea:
   781                           	opt stack 0
   782                           
   783                           ; 1 bytes @ 0x5E
   784  00005F                     	ds	1
   785                           tblptru	equ	0xFF8
   786                           
   787 ;;
   788 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   789 ;;
   790 ;; *************** function _main *****************
   791 ;; Defined at:
   792 ;;		line 24 in file "comuni.c"
   793 ;; Parameters:    Size  Location     Type
   794 ;;		None
   795 ;; Auto vars:     Size  Location     Type
   796 ;;  temp2           3  210[BANK1 ] float 
   797 ;;  temp            3  207[BANK1 ] float 
   798 ;;  frecuencia    120    0[BANK1 ] unsigned long [30]
   799 ;;  UwU            80  120[BANK1 ] unsigned long [20]
   800 ;;  dato1           4  221[BANK1 ] unsigned long 
   801 ;;  dato2           4  217[BANK1 ] unsigned long 
   802 ;;  periodo         4  213[BANK1 ] unsigned long 
   803 ;;  dt              4  200[BANK1 ] unsigned long 
   804 ;;  freq            3  204[BANK1 ] float 
   805 ;; Return value:  Size  Location     Type
   806 ;;                  1    wreg      void 
   807 ;; Registers used:
   808 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   809 ;; Tracked objects:
   810 ;;		On entry : 0/0
   811 ;;		On exit  : 0/0
   812 ;;		Unchanged: 0/0
   813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   814 ;;      Params:         0       0       0       0       0       0       0       0       0
   815 ;;      Locals:         0       0     225       0       0       0       0       0       0
   816 ;;      Temps:          0       4       0       0       0       0       0       0       0
   817 ;;      Totals:         0       4     225       0       0       0       0       0       0
   818 ;;Total ram usage:      229 bytes
   819 ;; Hardware stack levels required when called:    7
   820 ;; This function calls:
   821 ;;		___ftdiv
   822 ;;		___ftmul
   823 ;;		___lltoft
   824 ;;		_configBoard
   825 ;;		_lcd_iniciar
   826 ;;		_lcd_origen
   827 ;;		_lcd_texto
   828 ;;		_lcd_ubicarXY
   829 ;;		_memset
   830 ;;		_sprintf
   831 ;; This function is called by:
   832 ;;		Startup code after reset
   833 ;; This function uses a non-reentrant model
   834 ;;
   835                           
   836                           	psect	text0
   837  00139C                     __ptext0:
   838                           	opt stack 0
   839  00139C                     _main:
   840                           	opt stack 24
   841                           
   842                           ;comuni.c: 26: OSCCON=0x72;
   843                           
   844                           ;incstack = 0
   845  00139C  0E72               	movlw	114
   846  00139E  6ED3               	movwf	4051,c	;volatile
   847                           
   848                           ;comuni.c: 28: configBoard();
   849  0013A0  ECD6  F011         	call	_configBoard	;wreg free
   850                           
   851                           ;comuni.c: 29: lcd_iniciar();
   852  0013A4  ECAF  F00F         	call	_lcd_iniciar	;wreg free
   853                           
   854                           ;comuni.c: 31: unsigned long periodo;
   855                           ;comuni.c: 32: unsigned long dato1;
   856                           ;comuni.c: 33: unsigned long dato2;
   857                           ;comuni.c: 34: unsigned long dt;
   858                           ;comuni.c: 35: unsigned long frecuencia[30];
   859                           ;comuni.c: 36: unsigned long UwU[20];
   860                           ;comuni.c: 38: float freq;
   861                           ;comuni.c: 39: TRISC2=1;
   862  0013A8  8494               	bsf	3988,2,c	;volatile
   863                           
   864                           ;comuni.c: 41: memset(frecuencia,0,30);
   865  0013AA  0E00               	movlw	low main@frecuencia
   866  0013AC  6E01               	movwf	memset@p1,c
   867  0013AE  0E01               	movlw	high main@frecuencia
   868  0013B0  6E02               	movwf	memset@p1+1,c
   869  0013B2  0E00               	movlw	0
   870  0013B4  6E04               	movwf	memset@c+1,c
   871  0013B6  0E00               	movlw	0
   872  0013B8  6E03               	movwf	memset@c,c
   873  0013BA  0E00               	movlw	0
   874  0013BC  6E06               	movwf	memset@n+1,c
   875  0013BE  0E1E               	movlw	30
   876  0013C0  6E05               	movwf	memset@n,c
   877  0013C2  EC49  F013         	call	_memset	;wreg free
   878                           
   879                           ;comuni.c: 42: memset(UwU,0,20);
   880  0013C6  0E78               	movlw	low main@UwU
   881  0013C8  6E01               	movwf	memset@p1,c
   882  0013CA  0E01               	movlw	high main@UwU
   883  0013CC  6E02               	movwf	memset@p1+1,c
   884  0013CE  0E00               	movlw	0
   885  0013D0  6E04               	movwf	memset@c+1,c
   886  0013D2  0E00               	movlw	0
   887  0013D4  6E03               	movwf	memset@c,c
   888  0013D6  0E00               	movlw	0
   889  0013D8  6E06               	movwf	memset@n+1,c
   890  0013DA  0E14               	movlw	20
   891  0013DC  6E05               	movwf	memset@n,c
   892  0013DE  EC49  F013         	call	_memset	;wreg free
   893                           
   894                           ;comuni.c: 45: PIE1bits.CCP1IE=1;
   895  0013E2  849D               	bsf	3997,2,c	;volatile
   896                           
   897                           ;comuni.c: 46: PIR1bits.CCP1IF=0;
   898  0013E4  949E               	bcf	3998,2,c	;volatile
   899                           
   900                           ;comuni.c: 47: CCP1CON=0x05;
   901  0013E6  0E05               	movlw	5
   902  0013E8  6EBD               	movwf	4029,c	;volatile
   903                           
   904                           ;comuni.c: 48: CCPR1=0x00;
   905  0013EA  0E00               	movlw	0
   906  0013EC  6EBF               	movwf	4031,c	;volatile
   907  0013EE  0E00               	movlw	0
   908  0013F0  6EBE               	movwf	4030,c	;volatile
   909                           
   910                           ;comuni.c: 49: TMR1IF=0;
   911  0013F2  909E               	bcf	3998,0,c	;volatile
   912                           
   913                           ;comuni.c: 50: T1CON=0x80;
   914  0013F4  0E80               	movlw	128
   915  0013F6  6ECD               	movwf	4045,c	;volatile
   916                           
   917                           ;comuni.c: 51: TMR1ON=1;
   918  0013F8  80CD               	bsf	4045,0,c	;volatile
   919  0013FA                     
   920                           ;comuni.c: 53: lcd_origen();
   921  0013FA  ECB8  F013         	call	_lcd_origen	;wreg free
   922  0013FE  A49E               	btfss	3998,2,c	;volatile
   923  001400  D7FE               	goto	l167
   924                           
   925                           ;comuni.c: 56: PIR1bits.CCP1IF=0;
   926  001402  949E               	bcf	3998,2,c	;volatile
   927                           
   928                           ;comuni.c: 57: dato1 = CCPR1;
   929  001404  CFBE F1DD          	movff	4030,main@dato1	;volatile
   930  001408  CFBF F1DE          	movff	4031,main@dato1+1	;volatile
   931  00140C  0101               	movlb	1	; () banked
   932  00140E  6BDF               	clrf	(main@dato1+2)& (0+255),b
   933  001410  6BE0               	clrf	(main@dato1+3)& (0+255),b
   934                           
   935                           ; BSR set to: 1
   936                           ;comuni.c: 59: CCP1CON=0x04;
   937  001412  0E04               	movlw	4
   938  001414  6EBD               	movwf	4029,c	;volatile
   939  001416                     
   940                           ; BSR set to: 1
   941  001416  A49E               	btfss	3998,2,c	;volatile
   942  001418  D7FE               	goto	l170
   943                           
   944                           ;comuni.c: 61: PIR1bits.CCP1IF=0;
   945  00141A  949E               	bcf	3998,2,c	;volatile
   946                           
   947                           ;comuni.c: 62: dt = CCPR1;
   948  00141C  CFBE F1C8          	movff	4030,main@dt	;volatile
   949  001420  CFBF F1C9          	movff	4031,main@dt+1	;volatile
   950  001424  0101               	movlb	1	; () banked
   951  001426  6BCA               	clrf	(main@dt+2)& (0+255),b
   952  001428  6BCB               	clrf	(main@dt+3)& (0+255),b
   953                           
   954                           ; BSR set to: 1
   955                           ;comuni.c: 65: CCP1CON=0x05;
   956  00142A  0E05               	movlw	5
   957  00142C  6EBD               	movwf	4029,c	;volatile
   958  00142E                     
   959                           ; BSR set to: 1
   960  00142E  A49E               	btfss	3998,2,c	;volatile
   961  001430  D7FE               	goto	l173
   962                           
   963                           ;comuni.c: 67: PIR1bits.CCP1IF=0;
   964  001432  949E               	bcf	3998,2,c	;volatile
   965                           
   966                           ;comuni.c: 68: dato2 = CCPR1;
   967  001434  CFBE F1D9          	movff	4030,main@dato2	;volatile
   968  001438  CFBF F1DA          	movff	4031,main@dato2+1	;volatile
   969  00143C  0101               	movlb	1	; () banked
   970  00143E  6BDB               	clrf	(main@dato2+2)& (0+255),b
   971  001440  6BDC               	clrf	(main@dato2+3)& (0+255),b
   972                           
   973                           ; BSR set to: 1
   974                           ;comuni.c: 70: if(dato1 < dato2)
   975  001442  51D9               	movf	main@dato2& (0+255),w,b
   976  001444  5DDD               	subwf	main@dato1& (0+255),w,b
   977  001446  51DA               	movf	(main@dato2+1)& (0+255),w,b
   978  001448  59DE               	subwfb	(main@dato1+1)& (0+255),w,b
   979  00144A  51DB               	movf	(main@dato2+2)& (0+255),w,b
   980  00144C  59DF               	subwfb	(main@dato1+2)& (0+255),w,b
   981  00144E  51DC               	movf	(main@dato2+3)& (0+255),w,b
   982  001450  59E0               	subwfb	(main@dato1+3)& (0+255),w,b
   983  001452  B0D8               	btfsc	status,0,c
   984  001454  D0D0               	goto	l175
   985                           
   986                           ; BSR set to: 1
   987                           ;comuni.c: 71: {
   988                           ;comuni.c: 74: periodo = dato2 - dato1;
   989  001456  C1DD  F077         	movff	main@dato1,??_main
   990  00145A  C1DE  F078         	movff	main@dato1+1,??_main+1
   991  00145E  C1DF  F079         	movff	main@dato1+2,??_main+2
   992  001462  C1E0  F07A         	movff	main@dato1+3,??_main+3
   993  001466  0100               	movlb	0	; () banked
   994  001468  1F77               	comf	??_main& (0+255),f,b
   995  00146A  1F78               	comf	(??_main+1)& (0+255),f,b
   996  00146C  1F79               	comf	(??_main+2)& (0+255),f,b
   997  00146E  1F7A               	comf	(??_main+3)& (0+255),f,b
   998  001470  2B77               	incf	??_main& (0+255),f,b
   999  001472  0E00               	movlw	0
  1000  001474  2378               	addwfc	(??_main+1)& (0+255),f,b
  1001  001476  2379               	addwfc	(??_main+2)& (0+255),f,b
  1002  001478  237A               	addwfc	(??_main+3)& (0+255),f,b
  1003  00147A  0101               	movlb	1	; () banked
  1004  00147C  51D9               	movf	main@dato2& (0+255),w,b
  1005  00147E  0100               	movlb	0	; () banked
  1006  001480  2577               	addwf	??_main& (0+255),w,b
  1007  001482  0101               	movlb	1	; () banked
  1008  001484  6FD5               	movwf	main@periodo& (0+255),b
  1009  001486  51DA               	movf	(main@dato2+1)& (0+255),w,b
  1010  001488  0100               	movlb	0	; () banked
  1011  00148A  2178               	addwfc	(??_main+1)& (0+255),w,b
  1012  00148C  0101               	movlb	1	; () banked
  1013  00148E  6FD6               	movwf	(main@periodo+1)& (0+255),b
  1014  001490  51DB               	movf	(main@dato2+2)& (0+255),w,b
  1015  001492  0100               	movlb	0	; () banked
  1016  001494  2179               	addwfc	(??_main+2)& (0+255),w,b
  1017  001496  0101               	movlb	1	; () banked
  1018  001498  6FD7               	movwf	(main@periodo+2)& (0+255),b
  1019  00149A  51DC               	movf	(main@dato2+3)& (0+255),w,b
  1020  00149C  0100               	movlb	0	; () banked
  1021  00149E  217A               	addwfc	(??_main+3)& (0+255),w,b
  1022  0014A0  0101               	movlb	1	; () banked
  1023  0014A2  6FD8               	movwf	(main@periodo+3)& (0+255),b
  1024                           
  1025                           ; BSR set to: 1
  1026                           ;comuni.c: 75: freq = ((float)2000000 / (float)periodo);
  1027  0014A4  0E24               	movlw	36
  1028  0014A6  6E12               	movwf	___ftdiv@f1,c
  1029  0014A8  0EF4               	movlw	244
  1030  0014AA  6E13               	movwf	___ftdiv@f1+1,c
  1031  0014AC  0E49               	movlw	73
  1032  0014AE  6E14               	movwf	___ftdiv@f1+2,c
  1033  0014B0  C1D5  F009         	movff	main@periodo,___lltoft@c
  1034  0014B4  C1D6  F00A         	movff	main@periodo+1,___lltoft@c+1
  1035  0014B8  C1D7  F00B         	movff	main@periodo+2,___lltoft@c+2
  1036  0014BC  C1D8  F00C         	movff	main@periodo+3,___lltoft@c+3
  1037  0014C0  ECDF  F012         	call	___lltoft	;wreg free
  1038  0014C4  C009  F015         	movff	?___lltoft,___ftdiv@f2
  1039  0014C8  C00A  F016         	movff	?___lltoft+1,___ftdiv@f2+1
  1040  0014CC  C00B  F017         	movff	?___lltoft+2,___ftdiv@f2+2
  1041  0014D0  EC3C  F00F         	call	___ftdiv	;wreg free
  1042  0014D4  C012  F1CC         	movff	?___ftdiv,main@freq
  1043  0014D8  C013  F1CD         	movff	?___ftdiv+1,main@freq+1
  1044  0014DC  C014  F1CE         	movff	?___ftdiv+2,main@freq+2
  1045                           
  1046                           ;comuni.c: 76: sprintf(frecuencia,"%.1f Hz ",freq);
  1047  0014E0  0E00               	movlw	low main@frecuencia
  1048  0014E2  6E4C               	movwf	sprintf@sp,c
  1049  0014E4  0E01               	movlw	high main@frecuencia
  1050  0014E6  6E4D               	movwf	sprintf@sp+1,c
  1051  0014E8  0E82               	movlw	low STR_1
  1052  0014EA  6E4E               	movwf	sprintf@f,c
  1053  0014EC  0E08               	movlw	high STR_1
  1054  0014EE  6E4F               	movwf	sprintf@f+1,c
  1055  0014F0  C1CC  F050         	movff	main@freq,?_sprintf+4
  1056  0014F4  C1CD  F051         	movff	main@freq+1,?_sprintf+5
  1057  0014F8  C1CE  F052         	movff	main@freq+2,?_sprintf+6
  1058  0014FC  EC46  F004         	call	_sprintf	;wreg free
  1059                           
  1060                           ;comuni.c: 78: lcd_texto(frecuencia);
  1061  001500  0E00               	movlw	low main@frecuencia
  1062  001502  6E57               	movwf	lcd_texto@cadena,c
  1063  001504  0E01               	movlw	high main@frecuencia
  1064  001506  6E58               	movwf	lcd_texto@cadena+1,c
  1065  001508  EC5F  F013         	call	_lcd_texto	;wreg free
  1066                           
  1067                           ;comuni.c: 80: float temp=dt-dato1;
  1068  00150C  C1DD  F077         	movff	main@dato1,??_main
  1069  001510  C1DE  F078         	movff	main@dato1+1,??_main+1
  1070  001514  C1DF  F079         	movff	main@dato1+2,??_main+2
  1071  001518  C1E0  F07A         	movff	main@dato1+3,??_main+3
  1072  00151C  0100               	movlb	0	; () banked
  1073  00151E  1F77               	comf	??_main& (0+255),f,b
  1074  001520  1F78               	comf	(??_main+1)& (0+255),f,b
  1075  001522  1F79               	comf	(??_main+2)& (0+255),f,b
  1076  001524  1F7A               	comf	(??_main+3)& (0+255),f,b
  1077  001526  2B77               	incf	??_main& (0+255),f,b
  1078  001528  0E00               	movlw	0
  1079  00152A  2378               	addwfc	(??_main+1)& (0+255),f,b
  1080  00152C  2379               	addwfc	(??_main+2)& (0+255),f,b
  1081  00152E  237A               	addwfc	(??_main+3)& (0+255),f,b
  1082  001530  0101               	movlb	1	; () banked
  1083  001532  51C8               	movf	main@dt& (0+255),w,b
  1084  001534  0100               	movlb	0	; () banked
  1085  001536  2577               	addwf	??_main& (0+255),w,b
  1086  001538  6E09               	movwf	___lltoft@c,c
  1087  00153A  0101               	movlb	1	; () banked
  1088  00153C  51C9               	movf	(main@dt+1)& (0+255),w,b
  1089  00153E  0100               	movlb	0	; () banked
  1090  001540  2178               	addwfc	(??_main+1)& (0+255),w,b
  1091  001542  6E0A               	movwf	___lltoft@c+1,c
  1092  001544  0101               	movlb	1	; () banked
  1093  001546  51CA               	movf	(main@dt+2)& (0+255),w,b
  1094  001548  0100               	movlb	0	; () banked
  1095  00154A  2179               	addwfc	(??_main+2)& (0+255),w,b
  1096  00154C  6E0B               	movwf	___lltoft@c+2,c
  1097  00154E  0101               	movlb	1	; () banked
  1098  001550  51CB               	movf	(main@dt+3)& (0+255),w,b
  1099  001552  0100               	movlb	0	; () banked
  1100  001554  217A               	addwfc	(??_main+3)& (0+255),w,b
  1101  001556  6E0C               	movwf	___lltoft@c+3,c
  1102  001558  ECDF  F012         	call	___lltoft	;wreg free
  1103  00155C  C009  F1CF         	movff	?___lltoft,main@temp
  1104  001560  C00A  F1D0         	movff	?___lltoft+1,main@temp+1
  1105  001564  C00B  F1D1         	movff	?___lltoft+2,main@temp+2
  1106                           
  1107                           ;comuni.c: 81: float temp2=(temp/periodo)*100;
  1108  001568  C1D5  F009         	movff	main@periodo,___lltoft@c
  1109  00156C  C1D6  F00A         	movff	main@periodo+1,___lltoft@c+1
  1110  001570  C1D7  F00B         	movff	main@periodo+2,___lltoft@c+2
  1111  001574  C1D8  F00C         	movff	main@periodo+3,___lltoft@c+3
  1112  001578  ECDF  F012         	call	___lltoft	;wreg free
  1113  00157C  C009  F015         	movff	?___lltoft,___ftdiv@f2
  1114  001580  C00A  F016         	movff	?___lltoft+1,___ftdiv@f2+1
  1115  001584  C00B  F017         	movff	?___lltoft+2,___ftdiv@f2+2
  1116  001588  C1CF  F012         	movff	main@temp,___ftdiv@f1
  1117  00158C  C1D0  F013         	movff	main@temp+1,___ftdiv@f1+1
  1118  001590  C1D1  F014         	movff	main@temp+2,___ftdiv@f1+2
  1119  001594  EC3C  F00F         	call	___ftdiv	;wreg free
  1120  001598  C012  F021         	movff	?___ftdiv,___ftmul@f1
  1121  00159C  C013  F022         	movff	?___ftdiv+1,___ftmul@f1+1
  1122  0015A0  C014  F023         	movff	?___ftdiv+2,___ftmul@f1+2
  1123  0015A4  0E00               	movlw	0
  1124  0015A6  6E24               	movwf	___ftmul@f2,c
  1125  0015A8  0EC8               	movlw	200
  1126  0015AA  6E25               	movwf	___ftmul@f2+1,c
  1127  0015AC  0E42               	movlw	66
  1128  0015AE  6E26               	movwf	___ftmul@f2+2,c
  1129  0015B0  EC48  F00E         	call	___ftmul	;wreg free
  1130  0015B4  C021  F1D2         	movff	?___ftmul,main@temp2
  1131  0015B8  C022  F1D3         	movff	?___ftmul+1,main@temp2+1
  1132  0015BC  C023  F1D4         	movff	?___ftmul+2,main@temp2+2
  1133                           
  1134                           ;comuni.c: 82: sprintf(UwU, "%.2f  duty",temp2);
  1135  0015C0  0E78               	movlw	low main@UwU
  1136  0015C2  6E4C               	movwf	sprintf@sp,c
  1137  0015C4  0E01               	movlw	high main@UwU
  1138  0015C6  6E4D               	movwf	sprintf@sp+1,c
  1139  0015C8  0E77               	movlw	low STR_2
  1140  0015CA  6E4E               	movwf	sprintf@f,c
  1141  0015CC  0E08               	movlw	high STR_2
  1142  0015CE  6E4F               	movwf	sprintf@f+1,c
  1143  0015D0  C1D2  F050         	movff	main@temp2,?_sprintf+4
  1144  0015D4  C1D3  F051         	movff	main@temp2+1,?_sprintf+5
  1145  0015D8  C1D4  F052         	movff	main@temp2+2,?_sprintf+6
  1146  0015DC  EC46  F004         	call	_sprintf	;wreg free
  1147                           
  1148                           ;comuni.c: 86: lcd_ubicarXY(2,1);
  1149  0015E0  0E01               	movlw	1
  1150  0015E2  6E57               	movwf	lcd_ubicarXY@columna,c
  1151  0015E4  0E02               	movlw	2
  1152  0015E6  EC0E  F012         	call	_lcd_ubicarXY
  1153                           
  1154                           ;comuni.c: 87: lcd_texto(UwU);
  1155  0015EA  0E78               	movlw	low main@UwU
  1156  0015EC  6E57               	movwf	lcd_texto@cadena,c
  1157  0015EE  0E01               	movlw	high main@UwU
  1158  0015F0  6E58               	movwf	lcd_texto@cadena+1,c
  1159  0015F2  EC5F  F013         	call	_lcd_texto	;wreg free
  1160  0015F6                     l175:
  1161                           
  1162                           ;comuni.c: 92: }
  1163                           ;comuni.c: 93: TMR1=0;
  1164  0015F6  0E00               	movlw	0
  1165  0015F8  6ECF               	movwf	4047,c	;volatile
  1166  0015FA  0E00               	movlw	0
  1167  0015FC  6ECE               	movwf	4046,c	;volatile
  1168                           
  1169                           ;comuni.c: 94: memset(frecuencia,0,30);
  1170  0015FE  0E00               	movlw	low main@frecuencia
  1171  001600  6E01               	movwf	memset@p1,c
  1172  001602  0E01               	movlw	high main@frecuencia
  1173  001604  6E02               	movwf	memset@p1+1,c
  1174  001606  0E00               	movlw	0
  1175  001608  6E04               	movwf	memset@c+1,c
  1176  00160A  0E00               	movlw	0
  1177  00160C  6E03               	movwf	memset@c,c
  1178  00160E  0E00               	movlw	0
  1179  001610  6E06               	movwf	memset@n+1,c
  1180  001612  0E1E               	movlw	30
  1181  001614  6E05               	movwf	memset@n,c
  1182  001616  EC49  F013         	call	_memset	;wreg free
  1183                           
  1184                           ;comuni.c: 95: memset(UwU,0,20);
  1185  00161A  0E78               	movlw	low main@UwU
  1186  00161C  6E01               	movwf	memset@p1,c
  1187  00161E  0E01               	movlw	high main@UwU
  1188  001620  6E02               	movwf	memset@p1+1,c
  1189  001622  0E00               	movlw	0
  1190  001624  6E04               	movwf	memset@c+1,c
  1191  001626  0E00               	movlw	0
  1192  001628  6E03               	movwf	memset@c,c
  1193  00162A  0E00               	movlw	0
  1194  00162C  6E06               	movwf	memset@n+1,c
  1195  00162E  0E14               	movlw	20
  1196  001630  6E05               	movwf	memset@n,c
  1197  001632  EC49  F013         	call	_memset	;wreg free
  1198  001636  D6E1               	goto	l165
  1199  001638                     __end_of_main:
  1200                           	opt stack 0
  1201                           tblptru	equ	0xFF8
  1202                           status	equ	0xFD8
  1203                           
  1204 ;; *************** function _sprintf *****************
  1205 ;; Defined at:
  1206 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  1207 ;; Parameters:    Size  Location     Type
  1208 ;;  sp              2   75[COMRAM] PTR unsigned char 
  1209 ;;		 -> main@UwU(80), main@frecuencia(120), 
  1210 ;;  f               2   77[COMRAM] PTR const unsigned char 
  1211 ;;		 -> STR_2(11), STR_1(9), 
  1212 ;; Auto vars:     Size  Location     Type
  1213 ;;  tmpval          4   13[BANK0 ] struct .
  1214 ;;  val             4    7[BANK0 ] unsigned long 
  1215 ;;  fval            3   19[BANK0 ] unsigned long 
  1216 ;;  cp              3    0        PTR const unsigned char 
  1217 ;;  prec            2   17[BANK0 ] int 
  1218 ;;  exp             2   11[BANK0 ] int 
  1219 ;;  flag            2    5[BANK0 ] unsigned short 
  1220 ;;  ap              2    3[BANK0 ] PTR void [1]
  1221 ;;		 -> ?_sprintf(2), 
  1222 ;;  len             2    0        unsigned int 
  1223 ;;  width           2    0        int 
  1224 ;;  c               1   22[BANK0 ] char 
  1225 ;;  d               1    0        unsigned char 
  1226 ;; Return value:  Size  Location     Type
  1227 ;;                  2   75[COMRAM] int 
  1228 ;; Registers used:
  1229 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1230 ;; Tracked objects:
  1231 ;;		On entry : 0/0
  1232 ;;		On exit  : 0/0
  1233 ;;		Unchanged: 0/0
  1234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1235 ;;      Params:         7       0       0       0       0       0       0       0       0
  1236 ;;      Locals:         0      23       0       0       0       0       0       0       0
  1237 ;;      Temps:          6       0       0       0       0       0       0       0       0
  1238 ;;      Totals:        13      23       0       0       0       0       0       0       0
  1239 ;;Total ram usage:       36 bytes
  1240 ;; Hardware stack levels used:    1
  1241 ;; Hardware stack levels required when called:    3
  1242 ;; This function calls:
  1243 ;;		___awdiv
  1244 ;;		___ftadd
  1245 ;;		___ftge
  1246 ;;		___ftmul
  1247 ;;		___ftneg
  1248 ;;		___ftsub
  1249 ;;		___fttol
  1250 ;;		___lldiv
  1251 ;;		___llmod
  1252 ;;		___lltoft
  1253 ;;		___wmul
  1254 ;;		__div_to_l_
  1255 ;;		__tdiv_to_l_
  1256 ;;		_fround
  1257 ;;		_isdigit
  1258 ;;		_scale
  1259 ;; This function is called by:
  1260 ;;		_main
  1261 ;; This function uses a non-reentrant model
  1262 ;;
  1263                           
  1264                           	psect	text1
  1265  00088C                     __ptext1:
  1266                           	opt stack 0
  1267  00088C                     _sprintf:
  1268                           	opt stack 27
  1269                           
  1270                           ;doprnt.c: 494: va_list ap;
  1271                           ;doprnt.c: 499: signed char c;
  1272                           ;doprnt.c: 501: int width;
  1273                           ;doprnt.c: 504: int prec;
  1274                           ;doprnt.c: 508: unsigned short flag;
  1275                           ;doprnt.c: 515: char d;
  1276                           ;doprnt.c: 516: double fval;
  1277                           ;doprnt.c: 517: int exp;
  1278                           ;doprnt.c: 523: union {
  1279                           ;doprnt.c: 524: unsigned long vd;
  1280                           ;doprnt.c: 525: double integ;
  1281                           ;doprnt.c: 526: } tmpval;
  1282                           ;doprnt.c: 528: unsigned long val;
  1283                           ;doprnt.c: 529: unsigned len;
  1284                           ;doprnt.c: 530: const char * cp;
  1285                           ;doprnt.c: 533: *ap = __va_start();
  1286                           
  1287                           ;incstack = 0
  1288  00088C  0E50               	movlw	low (?_sprintf+4)
  1289  00088E  0100               	movlb	0	; () banked
  1290  000890  6F63               	movwf	sprintf@ap& (0+255),b
  1291  000892  0E00               	movlw	high (?_sprintf+4)
  1292  000894  6F64               	movwf	(sprintf@ap+1)& (0+255),b
  1293                           
  1294                           ;doprnt.c: 536: while(c = *f++) {
  1295  000896  D36B               	goto	l269
  1296  000898                     
  1297                           ; BSR set to: 0
  1298                           ;doprnt.c: 538: if(c != '%')
  1299                           
  1300                           ; BSR set to: 0
  1301  000898  0E25               	movlw	37
  1302  00089A  1976               	xorwf	sprintf@c& (0+255),w,b
  1303  00089C  B4D8               	btfsc	status,2,c
  1304  00089E  D007               	goto	l215
  1305                           
  1306                           ; BSR set to: 0
  1307                           ;doprnt.c: 540: {
  1308                           ;doprnt.c: 541: ((*sp++ = (c)));
  1309  0008A0  C04C  FFD9         	movff	sprintf@sp,fsr2l
  1310  0008A4  C04D  FFDA         	movff	sprintf@sp+1,fsr2h
  1311  0008A8  C076  FFDF         	movff	sprintf@c,indf2
  1312  0008AC  D35E               	goto	l2970
  1313  0008AE                     l215:
  1314                           
  1315                           ; BSR set to: 0
  1316                           ;doprnt.c: 543: }
  1317                           ;doprnt.c: 548: flag = 0;
  1318                           
  1319                           ; BSR set to: 0
  1320  0008AE  0E00               	movlw	0
  1321  0008B0  6F66               	movwf	(sprintf@flag+1)& (0+255),b
  1322  0008B2  0E00               	movlw	0
  1323  0008B4  6F65               	movwf	sprintf@flag& (0+255),b
  1324                           
  1325                           ; BSR set to: 0
  1326                           ;doprnt.c: 611: if(*f == '.') {
  1327  0008B6  C04E  FFF6         	movff	sprintf@f,tblptrl
  1328  0008BA  C04F  FFF7         	movff	sprintf@f+1,tblptrh
  1329  0008BE                     	if	0	;tblptru may be non-zero
  1330  0008BE                     	endif
  1331  0008BE                     	if	0	;tblptru may be non-zero
  1332  0008BE                     	endif
  1333  0008BE  0008               	tblrd		*
  1334  0008C0  50F5               	movf	tablat,w,c
  1335  0008C2  0A2E               	xorlw	46
  1336  0008C4  A4D8               	btfss	status,2,c
  1337  0008C6  D02F               	goto	l216
  1338                           
  1339                           ; BSR set to: 0
  1340                           ;doprnt.c: 612: flag |= 0x4000;
  1341  0008C8  8D66               	bsf	(sprintf@flag+1)& (0+255),6,b
  1342                           
  1343                           ;doprnt.c: 613: f++;
  1344  0008CA  4A4E               	infsnz	sprintf@f,f,c
  1345  0008CC  2A4F               	incf	sprintf@f+1,f,c
  1346                           
  1347                           ; BSR set to: 0
  1348                           ;doprnt.c: 620: {
  1349                           ;doprnt.c: 621: prec = 0;
  1350  0008CE  0E00               	movlw	0
  1351  0008D0  6F72               	movwf	(sprintf@prec+1)& (0+255),b
  1352  0008D2  0E00               	movlw	0
  1353  0008D4  6F71               	movwf	sprintf@prec& (0+255),b
  1354                           
  1355                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1356  0008D6  D01C               	goto	l217
  1357  0008D8                     
  1358                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1359                           
  1360                           ; BSR set to: 0
  1361  0008D8  C071  F00F         	movff	sprintf@prec,___wmul@multiplier
  1362  0008DC  C072  F010         	movff	sprintf@prec+1,___wmul@multiplier+1
  1363  0008E0  0E00               	movlw	0
  1364  0008E2  6E12               	movwf	___wmul@multiplicand+1,c
  1365  0008E4  0E0A               	movlw	10
  1366  0008E6  6E11               	movwf	___wmul@multiplicand,c
  1367  0008E8  EC75  F013         	call	___wmul	;wreg free
  1368  0008EC  C04E  FFF6         	movff	sprintf@f,tblptrl
  1369  0008F0  C04F  FFF7         	movff	sprintf@f+1,tblptrh
  1370  0008F4                     	if	0	;tblptru may be non-zero
  1371  0008F4                     	endif
  1372  0008F4                     	if	0	;tblptru may be non-zero
  1373  0008F4                     	endif
  1374  0008F4  0008               	tblrd		*
  1375  0008F6  50F5               	movf	tablat,w,c
  1376  0008F8  260F               	addwf	?___wmul,f,c
  1377  0008FA  0E00               	movlw	0
  1378  0008FC  2210               	addwfc	?___wmul+1,f,c
  1379  0008FE  0ED0               	movlw	208
  1380  000900  240F               	addwf	?___wmul,w,c
  1381  000902  0100               	movlb	0	; () banked
  1382  000904  6F71               	movwf	sprintf@prec& (0+255),b
  1383  000906  0EFF               	movlw	255
  1384  000908  2010               	addwfc	?___wmul+1,w,c
  1385  00090A  6F72               	movwf	(sprintf@prec+1)& (0+255),b
  1386                           
  1387                           ; BSR set to: 0
  1388  00090C  4A4E               	infsnz	sprintf@f,f,c
  1389  00090E  2A4F               	incf	sprintf@f+1,f,c
  1390  000910                     l217:
  1391                           
  1392                           ; BSR set to: 0
  1393                           
  1394                           ; BSR set to: 0
  1395  000910  C04E  FFF6         	movff	sprintf@f,tblptrl
  1396  000914  C04F  FFF7         	movff	sprintf@f+1,tblptrh
  1397  000918                     	if	0	;tblptru may be non-zero
  1398  000918                     	endif
  1399  000918                     	if	0	;tblptru may be non-zero
  1400  000918                     	endif
  1401  000918  0008               	tblrd		*
  1402  00091A  50F5               	movf	tablat,w,c
  1403  00091C  EC9A  F013         	call	_isdigit
  1404  000920  A0D8               	btfss	status,0,c
  1405  000922  D00A               	goto	l221
  1406  000924  D7D9               	goto	l218
  1407  000926                     l216:
  1408                           
  1409                           ;doprnt.c: 626: prec = 0;
  1410  000926  0E00               	movlw	0
  1411  000928  0100               	movlb	0	; () banked
  1412  00092A  6F72               	movwf	(sprintf@prec+1)& (0+255),b
  1413  00092C  0E00               	movlw	0
  1414  00092E  6F71               	movwf	sprintf@prec& (0+255),b
  1415                           
  1416                           ; BSR set to: 0
  1417                           ;doprnt.c: 628: flag |= 0x1000;
  1418  000930  8966               	bsf	(sprintf@flag+1)& (0+255),4,b
  1419                           
  1420                           ; BSR set to: 0
  1421                           ;doprnt.c: 630: }
  1422                           ;doprnt.c: 635: switch(c = *f++) {
  1423  000932  D002               	goto	l221
  1424  000934                     
  1425                           ; BSR set to: 0
  1426                           ;doprnt.c: 663: flag |= 0x400;
  1427                           
  1428                           ; BSR set to: 0
  1429  000934  8566               	bsf	(sprintf@flag+1)& (0+255),2,b
  1430                           
  1431                           ;doprnt.c: 664: break;
  1432  000936  D012               	goto	l225
  1433  000938                     l221:
  1434                           
  1435                           ; BSR set to: 0
  1436  000938  C04E  FFF6         	movff	sprintf@f,tblptrl
  1437  00093C  C04F  FFF7         	movff	sprintf@f+1,tblptrh
  1438  000940  4A4E               	infsnz	sprintf@f,f,c
  1439  000942  2A4F               	incf	sprintf@f+1,f,c
  1440  000944                     	if	0	;tblptru may be non-zero
  1441  000944                     	endif
  1442  000944                     	if	0	;tblptru may be non-zero
  1443  000944                     	endif
  1444  000944  0008               	tblrd		*
  1445  000946  CFF5 F076          	movff	tablat,sprintf@c
  1446  00094A  0100               	movlb	0	; () banked
  1447  00094C  5176               	movf	sprintf@c& (0+255),w,b
  1448                           
  1449                           ; Switch size 1, requested type "space"
  1450                           ; Number of cases is 2, Range of values is 0 to 102
  1451                           ; switch strategies available:
  1452                           ; Name         Instructions Cycles
  1453                           ; simple_byte            7     4 (average)
  1454                           ;	Chosen strategy is simple_byte
  1455  00094E  0A00               	xorlw	0	; case 0
  1456  000950  B4D8               	btfsc	status,2,c
  1457  000952  D319               	goto	u2970
  1458  000954  0A66               	xorlw	102	; case 102
  1459  000956  B4D8               	btfsc	status,2,c
  1460  000958  D7ED               	goto	l224
  1461  00095A  D309               	goto	l269
  1462  00095C                     l225:
  1463                           
  1464                           ; BSR set to: 0
  1465                           ;doprnt.c: 825: if(flag & (0x700)) {
  1466                           
  1467                           ; BSR set to: 0
  1468  00095C  0E07               	movlw	7
  1469  00095E  1566               	andwf	(sprintf@flag+1)& (0+255),w,b
  1470  000960  B4D8               	btfsc	status,2,c
  1471  000962  D2C9               	goto	l227
  1472                           
  1473                           ; BSR set to: 0
  1474                           ;doprnt.c: 827: if(flag & 0x1000)
  1475  000964  A966               	btfss	(sprintf@flag+1)& (0+255),4,b
  1476  000966  D004               	goto	l228
  1477                           
  1478                           ; BSR set to: 0
  1479                           ;doprnt.c: 829: prec = 6;
  1480  000968  0E00               	movlw	0
  1481  00096A  6F72               	movwf	(sprintf@prec+1)& (0+255),b
  1482  00096C  0E06               	movlw	6
  1483  00096E  6F71               	movwf	sprintf@prec& (0+255),b
  1484  000970                     l228:
  1485                           
  1486                           ; BSR set to: 0
  1487                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1488                           
  1489                           ; BSR set to: 0
  1490  000970  C063  FFD9         	movff	sprintf@ap,fsr2l
  1491  000974  C064  FFDA         	movff	sprintf@ap+1,fsr2h
  1492  000978  CFDE F073          	movff	postinc2,sprintf@fval
  1493  00097C  CFDE F074          	movff	postinc2,sprintf@fval+1
  1494  000980  CFDD F075          	movff	postdec2,sprintf@fval+2
  1495                           
  1496                           ; BSR set to: 0
  1497  000984  0E03               	movlw	3
  1498  000986  2763               	addwf	sprintf@ap& (0+255),f,b
  1499  000988  0E00               	movlw	0
  1500  00098A  2364               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1501                           
  1502                           ; BSR set to: 0
  1503                           ;doprnt.c: 831: if(fval < 0.0) {
  1504  00098C  AF75               	btfss	(sprintf@fval+2)& (0+255),7,b
  1505  00098E  D011               	goto	l229
  1506                           
  1507                           ; BSR set to: 0
  1508                           ;doprnt.c: 832: fval = -fval;
  1509  000990  C073  F001         	movff	sprintf@fval,___ftneg@f1
  1510  000994  C074  F002         	movff	sprintf@fval+1,___ftneg@f1+1
  1511  000998  C075  F003         	movff	sprintf@fval+2,___ftneg@f1+2
  1512  00099C  EC88  F013         	call	___ftneg	;wreg free
  1513  0009A0  C001  F073         	movff	?___ftneg,sprintf@fval
  1514  0009A4  C002  F074         	movff	?___ftneg+1,sprintf@fval+1
  1515  0009A8  C003  F075         	movff	?___ftneg+2,sprintf@fval+2
  1516                           
  1517                           ;doprnt.c: 833: flag |= 0x03;
  1518  0009AC  0E03               	movlw	3
  1519  0009AE  0100               	movlb	0	; () banked
  1520  0009B0  1365               	iorwf	sprintf@flag& (0+255),f,b
  1521  0009B2                     l229:
  1522                           
  1523                           ; BSR set to: 0
  1524                           ;doprnt.c: 834: }
  1525                           ;doprnt.c: 835: exp = 0;
  1526                           
  1527                           ; BSR set to: 0
  1528  0009B2  0E00               	movlw	0
  1529  0009B4  6F6C               	movwf	(sprintf@exp+1)& (0+255),b
  1530  0009B6  0E00               	movlw	0
  1531  0009B8  6F6B               	movwf	sprintf@exp& (0+255),b
  1532                           
  1533                           ; BSR set to: 0
  1534                           ;doprnt.c: 836: if( fval!=0) {
  1535  0009BA  5173               	movf	sprintf@fval& (0+255),w,b
  1536  0009BC  1174               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1537  0009BE  1175               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1538  0009C0  B4D8               	btfsc	status,2,c
  1539  0009C2  D086               	goto	l234
  1540                           
  1541                           ; BSR set to: 0
  1542                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1543  0009C4  0E82               	movlw	130
  1544  0009C6  6E53               	movwf	??_sprintf& (0+255),c
  1545  0009C8  0EFF               	movlw	255
  1546  0009CA  6E54               	movwf	(??_sprintf+1)& (0+255),c
  1547  0009CC  C073  F055         	movff	sprintf@fval,??_sprintf+2
  1548  0009D0  C074  F056         	movff	sprintf@fval+1,??_sprintf+3
  1549  0009D4  C075  F057         	movff	sprintf@fval+2,??_sprintf+4
  1550  0009D8  C076  F058         	movff	sprintf@fval+3,??_sprintf+5
  1551  0009DC  0E10               	movlw	16
  1552  0009DE  D005               	goto	u2720
  1553  0009E0                     u2725:
  1554  0009E0  90D8               	bcf	status,0,c
  1555  0009E2  3258               	rrcf	??_sprintf+5,f,c
  1556  0009E4  3257               	rrcf	??_sprintf+4,f,c
  1557  0009E6  3256               	rrcf	??_sprintf+3,f,c
  1558  0009E8  3255               	rrcf	??_sprintf+2,f,c
  1559  0009EA                     u2720:
  1560  0009EA  2EE8               	decfsz	wreg,f,c
  1561  0009EC  D7F9               	goto	u2725
  1562  0009EE  5055               	movf	??_sprintf+2,w,c
  1563  0009F0  2453               	addwf	??_sprintf,w,c
  1564  0009F2  6F6B               	movwf	sprintf@exp& (0+255),b
  1565  0009F4  0E00               	movlw	0
  1566  0009F6  2054               	addwfc	??_sprintf+1,w,c
  1567  0009F8  6F6C               	movwf	(sprintf@exp+1)& (0+255),b
  1568                           
  1569                           ; BSR set to: 0
  1570                           ;doprnt.c: 838: exp--;
  1571  0009FA  076B               	decf	sprintf@exp& (0+255),f,b
  1572  0009FC  A0D8               	btfss	status,0,c
  1573  0009FE  076C               	decf	(sprintf@exp+1)& (0+255),f,b
  1574                           
  1575                           ; BSR set to: 0
  1576                           ;doprnt.c: 839: exp *= 3;
  1577  000A00  C06B  F00F         	movff	sprintf@exp,___wmul@multiplier
  1578  000A04  C06C  F010         	movff	sprintf@exp+1,___wmul@multiplier+1
  1579  000A08  0E00               	movlw	0
  1580  000A0A  6E12               	movwf	___wmul@multiplicand+1,c
  1581  000A0C  0E03               	movlw	3
  1582  000A0E  6E11               	movwf	___wmul@multiplicand,c
  1583  000A10  EC75  F013         	call	___wmul	;wreg free
  1584  000A14  C00F  F06B         	movff	?___wmul,sprintf@exp
  1585  000A18  C010  F06C         	movff	?___wmul+1,sprintf@exp+1
  1586                           
  1587                           ;doprnt.c: 840: exp /= 10;
  1588  000A1C  C06B  F007         	movff	sprintf@exp,___awdiv@dividend
  1589  000A20  C06C  F008         	movff	sprintf@exp+1,___awdiv@dividend+1
  1590  000A24  0E00               	movlw	0
  1591  000A26  6E0A               	movwf	___awdiv@divisor+1,c
  1592  000A28  0E0A               	movlw	10
  1593  000A2A  6E09               	movwf	___awdiv@divisor,c
  1594  000A2C  EC1B  F011         	call	___awdiv	;wreg free
  1595  000A30  C007  F06B         	movff	?___awdiv,sprintf@exp
  1596  000A34  C008  F06C         	movff	?___awdiv+1,sprintf@exp+1
  1597                           
  1598                           ;doprnt.c: 841: if(exp < 0)
  1599  000A38  0100               	movlb	0	; () banked
  1600  000A3A  AF6C               	btfss	(sprintf@exp+1)& (0+255),7,b
  1601  000A3C  D003               	goto	l231
  1602                           
  1603                           ; BSR set to: 0
  1604                           ;doprnt.c: 842: exp--;
  1605  000A3E  076B               	decf	sprintf@exp& (0+255),f,b
  1606  000A40  A0D8               	btfss	status,0,c
  1607  000A42  076C               	decf	(sprintf@exp+1)& (0+255),f,b
  1608  000A44                     l231:
  1609                           
  1610                           ; BSR set to: 0
  1611                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1612                           
  1613                           ; BSR set to: 0
  1614  000A44  516B               	movf	sprintf@exp& (0+255),w,b
  1615  000A46  0800               	sublw	0
  1616  000A48  ECCA  F007         	call	_scale
  1617  000A4C  C030  F06D         	movff	?_scale,sprintf@tmpval
  1618  000A50  C031  F06E         	movff	?_scale+1,sprintf@tmpval+1
  1619  000A54  C032  F06F         	movff	?_scale+2,sprintf@tmpval+2
  1620                           
  1621                           ;doprnt.c: 847: tmpval.integ *= fval;
  1622  000A58  C06D  F021         	movff	sprintf@tmpval,___ftmul@f1
  1623  000A5C  C06E  F022         	movff	sprintf@tmpval+1,___ftmul@f1+1
  1624  000A60  C06F  F023         	movff	sprintf@tmpval+2,___ftmul@f1+2
  1625  000A64  C073  F024         	movff	sprintf@fval,___ftmul@f2
  1626  000A68  C074  F025         	movff	sprintf@fval+1,___ftmul@f2+1
  1627  000A6C  C075  F026         	movff	sprintf@fval+2,___ftmul@f2+2
  1628  000A70  EC48  F00E         	call	___ftmul	;wreg free
  1629  000A74  C021  F06D         	movff	?___ftmul,sprintf@tmpval
  1630  000A78  C022  F06E         	movff	?___ftmul+1,sprintf@tmpval+1
  1631  000A7C  C023  F06F         	movff	?___ftmul+2,sprintf@tmpval+2
  1632                           
  1633                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1634  000A80  C06D  F001         	movff	sprintf@tmpval,___ftge@ff1
  1635  000A84  C06E  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1636  000A88  C06F  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1637  000A8C  0E00               	movlw	0
  1638  000A8E  6E04               	movwf	___ftge@ff2,c
  1639  000A90  0E80               	movlw	128
  1640  000A92  6E05               	movwf	___ftge@ff2+1,c
  1641  000A94  0E3F               	movlw	63
  1642  000A96  6E06               	movwf	___ftge@ff2+2,c
  1643  000A98  ECD3  F010         	call	___ftge	;wreg free
  1644  000A9C  B0D8               	btfsc	status,0,c
  1645  000A9E  D005               	goto	l232
  1646                           
  1647                           ;doprnt.c: 849: exp--;
  1648  000AA0  0100               	movlb	0	; () banked
  1649  000AA2  076B               	decf	sprintf@exp& (0+255),f,b
  1650  000AA4  A0D8               	btfss	status,0,c
  1651  000AA6  076C               	decf	(sprintf@exp+1)& (0+255),f,b
  1652  000AA8  D013               	goto	l234
  1653  000AAA                     l232:
  1654                           
  1655                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1656                           
  1657                           ; BSR set to: 0
  1658  000AAA  C06D  F001         	movff	sprintf@tmpval,___ftge@ff1
  1659  000AAE  C06E  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1660  000AB2  C06F  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1661  000AB6  0E00               	movlw	0
  1662  000AB8  6E04               	movwf	___ftge@ff2,c
  1663  000ABA  0E20               	movlw	32
  1664  000ABC  6E05               	movwf	___ftge@ff2+1,c
  1665  000ABE  0E41               	movlw	65
  1666  000AC0  6E06               	movwf	___ftge@ff2+2,c
  1667  000AC2  ECD3  F010         	call	___ftge	;wreg free
  1668  000AC6  A0D8               	btfss	status,0,c
  1669  000AC8  D003               	goto	l234
  1670                           
  1671                           ;doprnt.c: 851: exp++;
  1672  000ACA  0100               	movlb	0	; () banked
  1673  000ACC  4B6B               	infsnz	sprintf@exp& (0+255),f,b
  1674  000ACE  2B6C               	incf	(sprintf@exp+1)& (0+255),f,b
  1675  000AD0                     l234:
  1676                           
  1677                           ;doprnt.c: 852: }
  1678                           ;doprnt.c: 1112: if(prec <= 12)
  1679                           
  1680                           ; BSR set to: 0
  1681                           
  1682                           ; BSR set to: 0
  1683                           
  1684                           ; BSR set to: 0
  1685  000AD0  0100               	movlb	0	; () banked
  1686  000AD2  BF72               	btfsc	(sprintf@prec+1)& (0+255),7,b
  1687  000AD4  D006               	goto	u2760
  1688  000AD6  5172               	movf	(sprintf@prec+1)& (0+255),w,b
  1689  000AD8  E11B               	bnz	l2852
  1690  000ADA  0E0D               	movlw	13
  1691  000ADC  5D71               	subwf	sprintf@prec& (0+255),w,b
  1692  000ADE  B0D8               	btfsc	status,0,c
  1693  000AE0  D017               	goto	l235
  1694  000AE2                     u2760:
  1695                           
  1696                           ; BSR set to: 0
  1697                           ;doprnt.c: 1113: fval += fround(prec);
  1698  000AE2  C073  F03A         	movff	sprintf@fval,___ftadd@f1
  1699  000AE6  C074  F03B         	movff	sprintf@fval+1,___ftadd@f1+1
  1700  000AEA  C075  F03C         	movff	sprintf@fval+2,___ftadd@f1+2
  1701  000AEE  5171               	movf	sprintf@prec& (0+255),w,b
  1702  000AF0  EC1C  F00B         	call	_fround
  1703  000AF4  C030  F03D         	movff	?_fround,___ftadd@f2
  1704  000AF8  C031  F03E         	movff	?_fround+1,___ftadd@f2+1
  1705  000AFC  C032  F03F         	movff	?_fround+2,___ftadd@f2+2
  1706  000B00  EC45  F00C         	call	___ftadd	;wreg free
  1707  000B04  C03A  F073         	movff	?___ftadd,sprintf@fval
  1708  000B08  C03B  F074         	movff	?___ftadd+1,sprintf@fval+1
  1709  000B0C  C03C  F075         	movff	?___ftadd+2,sprintf@fval+2
  1710  000B10                     l235:
  1711  000B10                     l2852:
  1712                           
  1713                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1714  000B10  0100               	movlb	0	; () banked
  1715  000B12  BF6C               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1716  000B14  D006               	goto	u2770
  1717  000B16  516C               	movf	(sprintf@exp+1)& (0+255),w,b
  1718  000B18  E120               	bnz	l2860
  1719  000B1A  0E0A               	movlw	10
  1720  000B1C  5D6B               	subwf	sprintf@exp& (0+255),w,b
  1721  000B1E  B0D8               	btfsc	status,0,c
  1722  000B20  D01C               	goto	u2800
  1723  000B22                     u2770:
  1724                           
  1725                           ; BSR set to: 0
  1726  000B22  5173               	movf	sprintf@fval& (0+255),w,b
  1727  000B24  1174               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1728  000B26  1175               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1729  000B28  B4D8               	btfsc	status,2,c
  1730  000B2A  D056               	goto	l236
  1731                           
  1732                           ; BSR set to: 0
  1733  000B2C  C073  F037         	movff	sprintf@fval,___fttol@f1
  1734  000B30  C074  F038         	movff	sprintf@fval+1,___fttol@f1+1
  1735  000B34  C075  F039         	movff	sprintf@fval+2,___fttol@f1+2
  1736  000B38  ECC2  F00E         	call	___fttol	;wreg free
  1737  000B3C  5037               	movf	?___fttol,w,c
  1738  000B3E  1038               	iorwf	?___fttol+1,w,c
  1739  000B40  1039               	iorwf	?___fttol+2,w,c
  1740  000B42  103A               	iorwf	?___fttol+3,w,c
  1741  000B44  A4D8               	btfss	status,2,c
  1742  000B46  D048               	goto	l236
  1743  000B48  0100               	movlb	0	; () banked
  1744  000B4A  BF6C               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1745  000B4C  D045               	goto	l236
  1746  000B4E  516C               	movf	(sprintf@exp+1)& (0+255),w,b
  1747  000B50  E104               	bnz	l2860
  1748  000B52  0E02               	movlw	2
  1749  000B54  5D6B               	subwf	sprintf@exp& (0+255),w,b
  1750  000B56  A0D8               	btfss	status,0,c
  1751  000B58  D03F               	goto	l236
  1752  000B5A                     u2800:
  1753  000B5A                     l2860:
  1754                           
  1755                           ; BSR set to: 0
  1756                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  1757  000B5A  C06D  F001         	movff	sprintf@tmpval,___ftge@ff1
  1758  000B5E  C06E  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1759  000B62  C06F  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1760  000B66  0E70               	movlw	112
  1761  000B68  6E04               	movwf	___ftge@ff2,c
  1762  000B6A  0E89               	movlw	137
  1763  000B6C  6E05               	movwf	___ftge@ff2+1,c
  1764  000B6E  0E40               	movlw	64
  1765  000B70  6E06               	movwf	___ftge@ff2+2,c
  1766  000B72  ECD3  F010         	call	___ftge	;wreg free
  1767  000B76  B0D8               	btfsc	status,0,c
  1768  000B78  D003               	goto	l239
  1769                           
  1770                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1771  000B7A  0100               	movlb	0	; () banked
  1772  000B7C  0EF7               	movlw	247
  1773  000B7E  D002               	goto	L1
  1774  000B80                     l239:
  1775                           
  1776                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1777                           
  1778                           ; BSR set to: 0
  1779  000B80  0100               	movlb	0	; () banked
  1780  000B82  0EF8               	movlw	248
  1781  000B84                     L1:
  1782  000B84  276B               	addwf	sprintf@exp& (0+255),f,b
  1783  000B86  0EFF               	movlw	255
  1784  000B88  236C               	addwfc	(sprintf@exp+1)& (0+255),f,b
  1785                           
  1786                           ; BSR set to: 0
  1787                           ;doprnt.c: 1124: }
  1788                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  1789                           
  1790                           ; BSR set to: 0
  1791  000B8A  516B               	movf	sprintf@exp& (0+255),w,b
  1792  000B8C  ECCA  F007         	call	_scale
  1793  000B90  C030  F06D         	movff	?_scale,sprintf@tmpval
  1794  000B94  C031  F06E         	movff	?_scale+1,sprintf@tmpval+1
  1795  000B98  C032  F06F         	movff	?_scale+2,sprintf@tmpval+2
  1796                           
  1797                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  1798  000B9C  C073  F001         	movff	sprintf@fval,__tdiv_to_l_@f1
  1799  000BA0  C074  F002         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  1800  000BA4  C075  F003         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  1801  000BA8  C06D  F004         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  1802  000BAC  C06E  F005         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  1803  000BB0  C06F  F006         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  1804  000BB4  EC1B  F00D         	call	__tdiv_to_l_	;wreg free
  1805  000BB8  C001  F067         	movff	?__tdiv_to_l_,sprintf@val
  1806  000BBC  C002  F068         	movff	?__tdiv_to_l_+1,sprintf@val+1
  1807  000BC0  C003  F069         	movff	?__tdiv_to_l_+2,sprintf@val+2
  1808  000BC4  C004  F06A         	movff	?__tdiv_to_l_+3,sprintf@val+3
  1809                           
  1810                           ;doprnt.c: 1129: fval = 0.0;
  1811  000BC8  0E00               	movlw	0
  1812  000BCA  0100               	movlb	0	; () banked
  1813  000BCC  6F73               	movwf	sprintf@fval& (0+255),b
  1814  000BCE  0E00               	movlw	0
  1815  000BD0  6F74               	movwf	(sprintf@fval+1)& (0+255),b
  1816  000BD2  0E00               	movlw	0
  1817  000BD4  6F75               	movwf	(sprintf@fval+2)& (0+255),b
  1818                           
  1819                           ;doprnt.c: 1130: } else {
  1820  000BD6  D033               	goto	l245
  1821  000BD8                     l236:
  1822                           
  1823                           ;doprnt.c: 1131: val = (unsigned long)fval;
  1824                           
  1825                           ; BSR set to: 0
  1826  000BD8  C073  F037         	movff	sprintf@fval,___fttol@f1
  1827  000BDC  C074  F038         	movff	sprintf@fval+1,___fttol@f1+1
  1828  000BE0  C075  F039         	movff	sprintf@fval+2,___fttol@f1+2
  1829  000BE4  ECC2  F00E         	call	___fttol	;wreg free
  1830  000BE8  C037  F067         	movff	?___fttol,sprintf@val
  1831  000BEC  C038  F068         	movff	?___fttol+1,sprintf@val+1
  1832  000BF0  C039  F069         	movff	?___fttol+2,sprintf@val+2
  1833  000BF4  C03A  F06A         	movff	?___fttol+3,sprintf@val+3
  1834                           
  1835                           ;doprnt.c: 1132: fval -= (double)val;
  1836  000BF8  C073  F046         	movff	sprintf@fval,___ftsub@f1
  1837  000BFC  C074  F047         	movff	sprintf@fval+1,___ftsub@f1+1
  1838  000C00  C075  F048         	movff	sprintf@fval+2,___ftsub@f1+2
  1839  000C04  C067  F009         	movff	sprintf@val,___lltoft@c
  1840  000C08  C068  F00A         	movff	sprintf@val+1,___lltoft@c+1
  1841  000C0C  C069  F00B         	movff	sprintf@val+2,___lltoft@c+2
  1842  000C10  C06A  F00C         	movff	sprintf@val+3,___lltoft@c+3
  1843  000C14  ECDF  F012         	call	___lltoft	;wreg free
  1844  000C18  C009  F049         	movff	?___lltoft,___ftsub@f2
  1845  000C1C  C00A  F04A         	movff	?___lltoft+1,___ftsub@f2+1
  1846  000C20  C00B  F04B         	movff	?___lltoft+2,___ftsub@f2+2
  1847  000C24  EC0D  F013         	call	___ftsub	;wreg free
  1848  000C28  C046  F073         	movff	?___ftsub,sprintf@fval
  1849  000C2C  C047  F074         	movff	?___ftsub+1,sprintf@fval+1
  1850  000C30  C048  F075         	movff	?___ftsub+2,sprintf@fval+2
  1851                           
  1852                           ;doprnt.c: 1133: exp = 0;
  1853  000C34  0E00               	movlw	0
  1854  000C36  0100               	movlb	0	; () banked
  1855  000C38  6F6C               	movwf	(sprintf@exp+1)& (0+255),b
  1856  000C3A  0E00               	movlw	0
  1857  000C3C  6F6B               	movwf	sprintf@exp& (0+255),b
  1858  000C3E                     l245:
  1859                           
  1860                           ; BSR set to: 0
  1861                           ;doprnt.c: 1134: }
  1862                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  1863                           
  1864                           ; BSR set to: 0
  1865  000C3E  0E01               	movlw	1
  1866  000C40  6F76               	movwf	sprintf@c& (0+255),b
  1867  000C42                     l2880:
  1868                           
  1869                           ; BSR set to: 0
  1870  000C42  0E0A               	movlw	10
  1871  000C44  1976               	xorwf	sprintf@c& (0+255),w,b
  1872  000C46  B4D8               	btfsc	status,2,c
  1873  000C48  D018               	goto	u2840
  1874                           
  1875                           ; BSR set to: 0
  1876                           ;doprnt.c: 1137: if(val < dpowers[c])
  1877                           
  1878                           ; BSR set to: 0
  1879                           
  1880                           ; BSR set to: 0
  1881  000C4A  5176               	movf	sprintf@c& (0+255),w,b
  1882  000C4C  0D04               	mullw	4
  1883  000C4E  0E01               	movlw	low _dpowers
  1884  000C50  24F3               	addwf	prodl,w,c
  1885  000C52  6EF6               	movwf	tblptrl,c
  1886  000C54  0E08               	movlw	high _dpowers
  1887  000C56  20F4               	addwfc	prodh,w,c
  1888  000C58  6EF7               	movwf	tblptrh,c
  1889  000C5A                     	if	0	;There are less than 3 active tblptr bytes
  1890  000C5A                     	endif
  1891  000C5A  0009               	tblrd		*+
  1892  000C5C  50F5               	movf	tablat,w,c
  1893  000C5E  5D67               	subwf	sprintf@val& (0+255),w,b
  1894  000C60  0009               	tblrd		*+
  1895  000C62  50F5               	movf	tablat,w,c
  1896  000C64  5968               	subwfb	(sprintf@val+1)& (0+255),w,b
  1897  000C66  0009               	tblrd		*+
  1898  000C68  50F5               	movf	tablat,w,c
  1899  000C6A  5969               	subwfb	(sprintf@val+2)& (0+255),w,b
  1900  000C6C  0009               	tblrd		*+
  1901  000C6E  50F5               	movf	tablat,w,c
  1902  000C70  596A               	subwfb	(sprintf@val+3)& (0+255),w,b
  1903  000C72  A0D8               	btfss	status,0,c
  1904  000C74  D002               	goto	u2840
  1905                           
  1906                           ; BSR set to: 0
  1907                           
  1908                           ; BSR set to: 0
  1909                           
  1910                           ; BSR set to: 0
  1911                           ;doprnt.c: 1138: break;
  1912  000C76  2B76               	incf	sprintf@c& (0+255),f,b
  1913  000C78  D7E4               	goto	l2880
  1914  000C7A                     u2840:
  1915                           
  1916                           ; BSR set to: 0
  1917                           ;doprnt.c: 1175: {
  1918                           ;doprnt.c: 1188: if(flag & 0x03)
  1919                           
  1920                           ; BSR set to: 0
  1921  000C7A  0E03               	movlw	3
  1922  000C7C  1565               	andwf	sprintf@flag& (0+255),w,b
  1923  000C7E  6E53               	movwf	??_sprintf& (0+255),c
  1924  000C80  0E00               	movlw	0
  1925  000C82  1566               	andwf	(sprintf@flag+1)& (0+255),w,b
  1926  000C84  6E54               	movwf	(??_sprintf+1)& (0+255),c
  1927  000C86  5053               	movf	??_sprintf,w,c
  1928  000C88  1054               	iorwf	??_sprintf+1,w,c
  1929  000C8A  B4D8               	btfsc	status,2,c
  1930  000C8C  D050               	goto	l250
  1931                           
  1932                           ; BSR set to: 0
  1933                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  1934  000C8E  C04C  FFD9         	movff	sprintf@sp,fsr2l
  1935  000C92  C04D  FFDA         	movff	sprintf@sp+1,fsr2h
  1936  000C96  0E2D               	movlw	45
  1937  000C98  D047               	goto	L2
  1938  000C9A                     
  1939                           ; BSR set to: 0
  1940                           ;doprnt.c: 1200: {
  1941                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  1942                           
  1943                           ; BSR set to: 0
  1944  000C9A  C067  F001         	movff	sprintf@val,___lldiv@dividend
  1945  000C9E  C068  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  1946  000CA2  C069  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  1947  000CA6  C06A  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  1948  000CAA  5176               	movf	sprintf@c& (0+255),w,b
  1949  000CAC  0D04               	mullw	4
  1950  000CAE  0E01               	movlw	low _dpowers
  1951  000CB0  24F3               	addwf	prodl,w,c
  1952  000CB2  6EF6               	movwf	tblptrl,c
  1953  000CB4  0E08               	movlw	high _dpowers
  1954  000CB6  20F4               	addwfc	prodh,w,c
  1955  000CB8  6EF7               	movwf	tblptrh,c
  1956  000CBA                     	if	0	;There are less than 3 active tblptr bytes
  1957  000CBA                     	endif
  1958  000CBA  0009               	tblrd		*+
  1959  000CBC  CFF5 F005          	movff	tablat,___lldiv@divisor
  1960  000CC0  0009               	tblrd		*+
  1961  000CC2  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1962  000CC6  0009               	tblrd		*+
  1963  000CC8  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1964  000CCC  000A               	tblrd		*-
  1965  000CCE  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1966  000CD2  EC5D  F011         	call	___lldiv	;wreg free
  1967  000CD6  C001  F06D         	movff	?___lldiv,sprintf@tmpval
  1968  000CDA  C002  F06E         	movff	?___lldiv+1,sprintf@tmpval+1
  1969  000CDE  C003  F06F         	movff	?___lldiv+2,sprintf@tmpval+2
  1970  000CE2  C004  F070         	movff	?___lldiv+3,sprintf@tmpval+3
  1971                           
  1972                           ;doprnt.c: 1202: tmpval.vd %= 10;
  1973  000CE6  C06D  F001         	movff	sprintf@tmpval,___llmod@dividend
  1974  000CEA  C06E  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  1975  000CEE  C06F  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  1976  000CF2  C070  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  1977  000CF6  0E0A               	movlw	10
  1978  000CF8  6E05               	movwf	___llmod@divisor,c
  1979  000CFA  0E00               	movlw	0
  1980  000CFC  6E06               	movwf	___llmod@divisor+1,c
  1981  000CFE  0E00               	movlw	0
  1982  000D00  6E07               	movwf	___llmod@divisor+2,c
  1983  000D02  0E00               	movlw	0
  1984  000D04  6E08               	movwf	___llmod@divisor+3,c
  1985  000D06  EC79  F012         	call	___llmod	;wreg free
  1986  000D0A  C001  F06D         	movff	?___llmod,sprintf@tmpval
  1987  000D0E  C002  F06E         	movff	?___llmod+1,sprintf@tmpval+1
  1988  000D12  C003  F06F         	movff	?___llmod+2,sprintf@tmpval+2
  1989  000D16  C004  F070         	movff	?___llmod+3,sprintf@tmpval+3
  1990                           
  1991                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  1992  000D1A  0100               	movlb	0	; () banked
  1993  000D1C  516D               	movf	sprintf@tmpval& (0+255),w,b
  1994  000D1E  0F30               	addlw	48
  1995  000D20  C04C  FFD9         	movff	sprintf@sp,fsr2l
  1996  000D24  C04D  FFDA         	movff	sprintf@sp+1,fsr2h
  1997  000D28                     L2:
  1998  000D28  6EDF               	movwf	indf2,c
  1999                           
  2000                           ; BSR set to: 0
  2001  000D2A  4A4C               	infsnz	sprintf@sp,f,c
  2002  000D2C  2A4D               	incf	sprintf@sp+1,f,c
  2003  000D2E                     l250:
  2004                           
  2005                           ; BSR set to: 0
  2006                           
  2007                           ; BSR set to: 0
  2008  000D2E  0776               	decf	sprintf@c& (0+255),f,b
  2009  000D30  2976               	incf	sprintf@c& (0+255),w,b
  2010  000D32  B4D8               	btfsc	status,2,c
  2011  000D34  D00C               	goto	l253
  2012  000D36  D7B1               	goto	l251
  2013  000D38                     l2908:
  2014                           
  2015                           ; BSR set to: 0
  2016                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  2017  000D38  C04C  FFD9         	movff	sprintf@sp,fsr2l
  2018  000D3C  C04D  FFDA         	movff	sprintf@sp+1,fsr2h
  2019  000D40  0E30               	movlw	48
  2020  000D42  6EDF               	movwf	indf2,c
  2021                           
  2022                           ; BSR set to: 0
  2023  000D44  4A4C               	infsnz	sprintf@sp,f,c
  2024  000D46  2A4D               	incf	sprintf@sp+1,f,c
  2025                           
  2026                           ; BSR set to: 0
  2027                           ;doprnt.c: 1209: exp--;
  2028  000D48  076B               	decf	sprintf@exp& (0+255),f,b
  2029  000D4A  A0D8               	btfss	status,0,c
  2030  000D4C  076C               	decf	(sprintf@exp+1)& (0+255),f,b
  2031  000D4E                     l253:
  2032                           
  2033                           ; BSR set to: 0
  2034                           
  2035                           ; BSR set to: 0
  2036  000D4E  BF6C               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2037  000D50  D005               	goto	u2870
  2038  000D52  516C               	movf	(sprintf@exp+1)& (0+255),w,b
  2039  000D54  E1F1               	bnz	l2908
  2040  000D56  056B               	decf	sprintf@exp& (0+255),w,b
  2041  000D58  B0D8               	btfsc	status,0,c
  2042  000D5A  D7EE               	goto	l254
  2043  000D5C                     u2870:
  2044                           
  2045                           ; BSR set to: 0
  2046                           ;doprnt.c: 1210: }
  2047                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2048                           
  2049                           ; BSR set to: 0
  2050  000D5C  BF72               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2051  000D5E  D009               	goto	l256
  2052  000D60  5172               	movf	(sprintf@prec+1)& (0+255),w,b
  2053  000D62  E104               	bnz	u2880
  2054  000D64  0E09               	movlw	9
  2055  000D66  5D71               	subwf	sprintf@prec& (0+255),w,b
  2056  000D68  A0D8               	btfss	status,0,c
  2057  000D6A  D003               	goto	l256
  2058  000D6C                     u2880:
  2059                           
  2060                           ; BSR set to: 0
  2061                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2062  000D6C  0E08               	movlw	8
  2063  000D6E  6F76               	movwf	sprintf@c& (0+255),b
  2064  000D70  D002               	goto	l257
  2065  000D72                     l256:
  2066                           
  2067                           ; BSR set to: 0
  2068                           ;doprnt.c: 1213: else
  2069                           ;doprnt.c: 1214: c = prec;
  2070  000D72  C071  F076         	movff	sprintf@prec,sprintf@c
  2071  000D76                     l257:
  2072                           
  2073                           ; BSR set to: 0
  2074                           ;doprnt.c: 1215: prec -= c;
  2075                           
  2076                           ; BSR set to: 0
  2077  000D76  5176               	movf	sprintf@c& (0+255),w,b
  2078  000D78  5F71               	subwf	sprintf@prec& (0+255),f,b
  2079  000D7A  0E00               	movlw	0
  2080  000D7C  BF76               	btfsc	sprintf@c& (0+255),7,b
  2081  000D7E  0EFF               	movlw	255
  2082  000D80  5B72               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2083                           
  2084                           ; BSR set to: 0
  2085                           ;doprnt.c: 1219: if(c)
  2086  000D82  5176               	movf	sprintf@c& (0+255),w,b
  2087  000D84  B4D8               	btfsc	status,2,c
  2088  000D86  D008               	goto	l258
  2089                           
  2090                           ; BSR set to: 0
  2091                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  2092  000D88  C04C  FFD9         	movff	sprintf@sp,fsr2l
  2093  000D8C  C04D  FFDA         	movff	sprintf@sp+1,fsr2h
  2094  000D90  0E2E               	movlw	46
  2095  000D92  6EDF               	movwf	indf2,c
  2096                           
  2097                           ; BSR set to: 0
  2098  000D94  4A4C               	infsnz	sprintf@sp,f,c
  2099  000D96  2A4D               	incf	sprintf@sp+1,f,c
  2100  000D98                     l258:
  2101                           
  2102                           ; BSR set to: 0
  2103                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2104                           
  2105                           ; BSR set to: 0
  2106  000D98  5176               	movf	sprintf@c& (0+255),w,b
  2107  000D9A  ECCA  F007         	call	_scale
  2108  000D9E  C030  F060         	movff	?_scale,_sprintf$1289
  2109  000DA2  C031  F061         	movff	?_scale+1,_sprintf$1289+1
  2110  000DA6  C032  F062         	movff	?_scale+2,_sprintf$1289+2
  2111                           
  2112                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2113  000DAA  C073  F024         	movff	sprintf@fval,___ftmul@f2
  2114  000DAE  C074  F025         	movff	sprintf@fval+1,___ftmul@f2+1
  2115  000DB2  C075  F026         	movff	sprintf@fval+2,___ftmul@f2+2
  2116  000DB6  C060  F021         	movff	_sprintf$1289,___ftmul@f1
  2117  000DBA  C061  F022         	movff	_sprintf$1289+1,___ftmul@f1+1
  2118  000DBE  C062  F023         	movff	_sprintf$1289+2,___ftmul@f1+2
  2119  000DC2  EC48  F00E         	call	___ftmul	;wreg free
  2120  000DC6  C021  F037         	movff	?___ftmul,___fttol@f1
  2121  000DCA  C022  F038         	movff	?___ftmul+1,___fttol@f1+1
  2122  000DCE  C023  F039         	movff	?___ftmul+2,___fttol@f1+2
  2123  000DD2  ECC2  F00E         	call	___fttol	;wreg free
  2124  000DD6  C037  F067         	movff	?___fttol,sprintf@val
  2125  000DDA  C038  F068         	movff	?___fttol+1,sprintf@val+1
  2126  000DDE  C039  F069         	movff	?___fttol+2,sprintf@val+2
  2127  000DE2  C03A  F06A         	movff	?___fttol+3,sprintf@val+3
  2128                           
  2129                           ;doprnt.c: 1228: while(c--) {
  2130  000DE6  D071               	goto	l259
  2131  000DE8                     
  2132                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2133  000DE8  C067  F001         	movff	sprintf@val,___lldiv@dividend
  2134  000DEC  C068  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2135  000DF0  C069  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2136  000DF4  C06A  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2137  000DF8  0100               	movlb	0	; () banked
  2138  000DFA  5176               	movf	sprintf@c& (0+255),w,b
  2139  000DFC  0D04               	mullw	4
  2140  000DFE  0E01               	movlw	low _dpowers
  2141  000E00  24F3               	addwf	prodl,w,c
  2142  000E02  6EF6               	movwf	tblptrl,c
  2143  000E04  0E08               	movlw	high _dpowers
  2144  000E06  20F4               	addwfc	prodh,w,c
  2145  000E08  6EF7               	movwf	tblptrh,c
  2146  000E0A                     	if	0	;There are less than 3 active tblptr bytes
  2147  000E0A                     	endif
  2148  000E0A  0009               	tblrd		*+
  2149  000E0C  CFF5 F005          	movff	tablat,___lldiv@divisor
  2150  000E10  0009               	tblrd		*+
  2151  000E12  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2152  000E16  0009               	tblrd		*+
  2153  000E18  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2154  000E1C  000A               	tblrd		*-
  2155  000E1E  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2156  000E22  EC5D  F011         	call	___lldiv	;wreg free
  2157  000E26  C001  F06D         	movff	?___lldiv,sprintf@tmpval
  2158  000E2A  C002  F06E         	movff	?___lldiv+1,sprintf@tmpval+1
  2159  000E2E  C003  F06F         	movff	?___lldiv+2,sprintf@tmpval+2
  2160  000E32  C004  F070         	movff	?___lldiv+3,sprintf@tmpval+3
  2161                           
  2162                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2163  000E36  C06D  F001         	movff	sprintf@tmpval,___llmod@dividend
  2164  000E3A  C06E  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2165  000E3E  C06F  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2166  000E42  C070  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2167  000E46  0E0A               	movlw	10
  2168  000E48  6E05               	movwf	___llmod@divisor,c
  2169  000E4A  0E00               	movlw	0
  2170  000E4C  6E06               	movwf	___llmod@divisor+1,c
  2171  000E4E  0E00               	movlw	0
  2172  000E50  6E07               	movwf	___llmod@divisor+2,c
  2173  000E52  0E00               	movlw	0
  2174  000E54  6E08               	movwf	___llmod@divisor+3,c
  2175  000E56  EC79  F012         	call	___llmod	;wreg free
  2176  000E5A  C001  F06D         	movff	?___llmod,sprintf@tmpval
  2177  000E5E  C002  F06E         	movff	?___llmod+1,sprintf@tmpval+1
  2178  000E62  C003  F06F         	movff	?___llmod+2,sprintf@tmpval+2
  2179  000E66  C004  F070         	movff	?___llmod+3,sprintf@tmpval+3
  2180                           
  2181                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  2182  000E6A  0100               	movlb	0	; () banked
  2183  000E6C  516D               	movf	sprintf@tmpval& (0+255),w,b
  2184  000E6E  0F30               	addlw	48
  2185  000E70  C04C  FFD9         	movff	sprintf@sp,fsr2l
  2186  000E74  C04D  FFDA         	movff	sprintf@sp+1,fsr2h
  2187  000E78  6EDF               	movwf	indf2,c
  2188                           
  2189                           ; BSR set to: 0
  2190  000E7A  4A4C               	infsnz	sprintf@sp,f,c
  2191  000E7C  2A4D               	incf	sprintf@sp+1,f,c
  2192                           
  2193                           ; BSR set to: 0
  2194                           ;doprnt.c: 1232: val %= dpowers[c];
  2195  000E7E  C067  F001         	movff	sprintf@val,___llmod@dividend
  2196  000E82  C068  F002         	movff	sprintf@val+1,___llmod@dividend+1
  2197  000E86  C069  F003         	movff	sprintf@val+2,___llmod@dividend+2
  2198  000E8A  C06A  F004         	movff	sprintf@val+3,___llmod@dividend+3
  2199  000E8E  5176               	movf	sprintf@c& (0+255),w,b
  2200  000E90  0D04               	mullw	4
  2201  000E92  0E01               	movlw	low _dpowers
  2202  000E94  24F3               	addwf	prodl,w,c
  2203  000E96  6EF6               	movwf	tblptrl,c
  2204  000E98  0E08               	movlw	high _dpowers
  2205  000E9A  20F4               	addwfc	prodh,w,c
  2206  000E9C  6EF7               	movwf	tblptrh,c
  2207  000E9E                     	if	0	;There are less than 3 active tblptr bytes
  2208  000E9E                     	endif
  2209  000E9E  0009               	tblrd		*+
  2210  000EA0  CFF5 F005          	movff	tablat,___llmod@divisor
  2211  000EA4  0009               	tblrd		*+
  2212  000EA6  CFF5 F006          	movff	tablat,___llmod@divisor+1
  2213  000EAA  0009               	tblrd		*+
  2214  000EAC  CFF5 F007          	movff	tablat,___llmod@divisor+2
  2215  000EB0  000A               	tblrd		*-
  2216  000EB2  CFF5 F008          	movff	tablat,___llmod@divisor+3
  2217  000EB6  EC79  F012         	call	___llmod	;wreg free
  2218  000EBA  C001  F067         	movff	?___llmod,sprintf@val
  2219  000EBE  C002  F068         	movff	?___llmod+1,sprintf@val+1
  2220  000EC2  C003  F069         	movff	?___llmod+2,sprintf@val+2
  2221  000EC6  C004  F06A         	movff	?___llmod+3,sprintf@val+3
  2222  000ECA                     l259:
  2223  000ECA  0100               	movlb	0	; () banked
  2224  000ECC  0776               	decf	sprintf@c& (0+255),f,b
  2225  000ECE  2976               	incf	sprintf@c& (0+255),w,b
  2226  000ED0  B4D8               	btfsc	status,2,c
  2227  000ED2  D00C               	goto	l262
  2228  000ED4  D789               	goto	l260
  2229  000ED6                     
  2230                           ; BSR set to: 0
  2231                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  2232                           
  2233                           ; BSR set to: 0
  2234  000ED6  C04C  FFD9         	movff	sprintf@sp,fsr2l
  2235  000EDA  C04D  FFDA         	movff	sprintf@sp+1,fsr2h
  2236  000EDE  0E30               	movlw	48
  2237  000EE0  6EDF               	movwf	indf2,c
  2238                           
  2239                           ; BSR set to: 0
  2240  000EE2  4A4C               	infsnz	sprintf@sp,f,c
  2241  000EE4  2A4D               	incf	sprintf@sp+1,f,c
  2242                           
  2243                           ; BSR set to: 0
  2244                           ;doprnt.c: 1237: prec--;
  2245  000EE6  0771               	decf	sprintf@prec& (0+255),f,b
  2246  000EE8  A0D8               	btfss	status,0,c
  2247  000EEA  0772               	decf	(sprintf@prec+1)& (0+255),f,b
  2248  000EEC                     l262:
  2249                           
  2250                           ; BSR set to: 0
  2251                           
  2252                           ; BSR set to: 0
  2253  000EEC  5171               	movf	sprintf@prec& (0+255),w,b
  2254  000EEE  1172               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2255  000EF0  B4D8               	btfsc	status,2,c
  2256  000EF2  D03D               	goto	l269
  2257  000EF4  D7F0               	goto	l263
  2258  000EF6                     l227:
  2259                           
  2260                           ; BSR set to: 0
  2261                           ;doprnt.c: 1246: }
  2262                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2263                           
  2264                           ; BSR set to: 0
  2265  000EF6  5171               	movf	sprintf@prec& (0+255),w,b
  2266  000EF8  1172               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2267  000EFA  A4D8               	btfss	status,2,c
  2268  000EFC  D008               	goto	l265
  2269                           
  2270                           ; BSR set to: 0
  2271  000EFE  5167               	movf	sprintf@val& (0+255),w,b
  2272  000F00  1168               	iorwf	(sprintf@val+1)& (0+255),w,b
  2273  000F02  1169               	iorwf	(sprintf@val+2)& (0+255),w,b
  2274  000F04  116A               	iorwf	(sprintf@val+3)& (0+255),w,b
  2275  000F06  A4D8               	btfss	status,2,c
  2276  000F08  D002               	goto	l265
  2277                           
  2278                           ; BSR set to: 0
  2279                           ;doprnt.c: 1291: prec++;
  2280  000F0A  4B71               	infsnz	sprintf@prec& (0+255),f,b
  2281  000F0C  2B72               	incf	(sprintf@prec+1)& (0+255),f,b
  2282  000F0E                     l265:
  2283                           
  2284                           ; BSR set to: 0
  2285                           ;doprnt.c: 1339: if(c < prec)
  2286                           
  2287                           ; BSR set to: 0
  2288  000F0E  0E80               	movlw	128
  2289  000F10  BF76               	btfsc	sprintf@c& (0+255),7,b
  2290  000F12  0E7F               	movlw	127
  2291  000F14  6E53               	movwf	??_sprintf& (0+255),c
  2292  000F16  5171               	movf	sprintf@prec& (0+255),w,b
  2293  000F18  5D76               	subwf	sprintf@c& (0+255),w,b
  2294  000F1A  5172               	movf	(sprintf@prec+1)& (0+255),w,b
  2295  000F1C  0A80               	xorlw	128
  2296  000F1E  5853               	subwfb	??_sprintf& (0+255),w,c
  2297  000F20  B0D8               	btfsc	status,0,c
  2298  000F22  D003               	goto	l266
  2299                           
  2300                           ; BSR set to: 0
  2301                           ;doprnt.c: 1340: c = prec;
  2302  000F24  C071  F076         	movff	sprintf@prec,sprintf@c
  2303  000F28  D010               	goto	l268
  2304  000F2A                     l266:
  2305                           
  2306                           ; BSR set to: 0
  2307                           ;doprnt.c: 1341: else if(prec < c)
  2308                           
  2309                           ; BSR set to: 0
  2310  000F2A  5172               	movf	(sprintf@prec+1)& (0+255),w,b
  2311  000F2C  0A80               	xorlw	128
  2312  000F2E  6E53               	movwf	??_sprintf& (0+255),c
  2313  000F30  5176               	movf	sprintf@c& (0+255),w,b
  2314  000F32  5D71               	subwf	sprintf@prec& (0+255),w,b
  2315  000F34  0E80               	movlw	128
  2316  000F36  BF76               	btfsc	sprintf@c& (0+255),7,b
  2317  000F38  0E7F               	movlw	127
  2318  000F3A  5853               	subwfb	??_sprintf& (0+255),w,c
  2319  000F3C  B0D8               	btfsc	status,0,c
  2320  000F3E  D005               	goto	l268
  2321                           
  2322                           ; BSR set to: 0
  2323                           ;doprnt.c: 1342: prec = c;
  2324  000F40  5176               	movf	sprintf@c& (0+255),w,b
  2325  000F42  6F71               	movwf	sprintf@prec& (0+255),b
  2326  000F44  6B72               	clrf	(sprintf@prec+1)& (0+255),b
  2327  000F46  BF71               	btfsc	sprintf@prec& (0+255),7,b
  2328  000F48  0772               	decf	(sprintf@prec+1)& (0+255),f,b
  2329  000F4A                     l268:
  2330                           
  2331                           ; BSR set to: 0
  2332                           ;doprnt.c: 1422: {
  2333                           ;doprnt.c: 1438: if(flag & 0x03)
  2334                           
  2335                           ; BSR set to: 0
  2336                           
  2337                           ; BSR set to: 0
  2338  000F4A  0E03               	movlw	3
  2339  000F4C  1565               	andwf	sprintf@flag& (0+255),w,b
  2340  000F4E  6E53               	movwf	??_sprintf& (0+255),c
  2341  000F50  0E00               	movlw	0
  2342  000F52  1566               	andwf	(sprintf@flag+1)& (0+255),w,b
  2343  000F54  6E54               	movwf	(??_sprintf+1)& (0+255),c
  2344  000F56  5053               	movf	??_sprintf,w,c
  2345  000F58  1054               	iorwf	??_sprintf+1,w,c
  2346  000F5A  B4D8               	btfsc	status,2,c
  2347  000F5C  D008               	goto	l269
  2348                           
  2349                           ; BSR set to: 0
  2350                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2351  000F5E  C04C  FFD9         	movff	sprintf@sp,fsr2l
  2352  000F62  C04D  FFDA         	movff	sprintf@sp+1,fsr2h
  2353  000F66  0E2D               	movlw	45
  2354  000F68  6EDF               	movwf	indf2,c
  2355  000F6A                     l2970:
  2356                           
  2357                           ; BSR set to: 0
  2358  000F6A  4A4C               	infsnz	sprintf@sp,f,c
  2359  000F6C  2A4D               	incf	sprintf@sp+1,f,c
  2360  000F6E                     l269:
  2361                           
  2362                           ; BSR set to: 0
  2363                           
  2364                           ; BSR set to: 0
  2365                           
  2366                           ; BSR set to: 0
  2367  000F6E  C04E  FFF6         	movff	sprintf@f,tblptrl
  2368  000F72  C04F  FFF7         	movff	sprintf@f+1,tblptrh
  2369  000F76  4A4E               	infsnz	sprintf@f,f,c
  2370  000F78  2A4F               	incf	sprintf@f+1,f,c
  2371  000F7A                     	if	0	;tblptru may be non-zero
  2372  000F7A                     	endif
  2373  000F7A                     	if	0	;tblptru may be non-zero
  2374  000F7A                     	endif
  2375  000F7A  0008               	tblrd		*
  2376  000F7C  CFF5 F076          	movff	tablat,sprintf@c
  2377  000F80  5176               	movf	sprintf@c& (0+255),w,b
  2378  000F82  A4D8               	btfss	status,2,c
  2379  000F84  D489               	goto	l214
  2380  000F86                     u2970:
  2381                           
  2382                           ; BSR set to: 0
  2383                           ;doprnt.c: 1538: *sp = 0;
  2384                           
  2385                           ; BSR set to: 0
  2386                           
  2387                           ;doprnt.c: 1469: }
  2388                           ;doprnt.c: 1533: }
  2389                           ;doprnt.c: 1535: alldone:
  2390                           
  2391                           ; BSR set to: 0
  2392  000F86  C04C  FFD9         	movff	sprintf@sp,fsr2l
  2393  000F8A  C04D  FFDA         	movff	sprintf@sp+1,fsr2h
  2394  000F8E  0E00               	movlw	0
  2395  000F90  6EDF               	movwf	indf2,c
  2396  000F92  0012               	return	
  2397  000F94                     __end_of_sprintf:
  2398                           	opt stack 0
  2399                           tblptru	equ	0xFF8
  2400                           tblptrh	equ	0xFF7
  2401                           tblptrl	equ	0xFF6
  2402                           tablat	equ	0xFF5
  2403                           prodh	equ	0xFF4
  2404                           prodl	equ	0xFF3
  2405                           wreg	equ	0xFE8
  2406                           indf2	equ	0xFDF
  2407                           postinc2	equ	0xFDE
  2408                           postdec2	equ	0xFDD
  2409                           fsr2h	equ	0xFDA
  2410                           fsr2l	equ	0xFD9
  2411                           status	equ	0xFD8
  2412                           
  2413 ;; *************** function _scale *****************
  2414 ;; Defined at:
  2415 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  2416 ;; Parameters:    Size  Location     Type
  2417 ;;  scl             1    wreg     char 
  2418 ;; Auto vars:     Size  Location     Type
  2419 ;;  scl             1   53[COMRAM] char 
  2420 ;; Return value:  Size  Location     Type
  2421 ;;                  3   47[COMRAM] char 
  2422 ;; Registers used:
  2423 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2424 ;; Tracked objects:
  2425 ;;		On entry : 0/0
  2426 ;;		On exit  : 0/0
  2427 ;;		Unchanged: 0/0
  2428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2429 ;;      Params:         3       0       0       0       0       0       0       0       0
  2430 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2431 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2432 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2433 ;;Total ram usage:        7 bytes
  2434 ;; Hardware stack levels used:    1
  2435 ;; Hardware stack levels required when called:    2
  2436 ;; This function calls:
  2437 ;;		___awdiv
  2438 ;;		___awmod
  2439 ;;		___ftmul
  2440 ;;		___wmul
  2441 ;; This function is called by:
  2442 ;;		_sprintf
  2443 ;; This function uses a non-reentrant model
  2444 ;;
  2445                           
  2446                           	psect	text2
  2447  000F94                     __ptext2:
  2448                           	opt stack 0
  2449  000F94                     _scale:
  2450                           	opt stack 27
  2451                           
  2452                           ; BSR set to: 0
  2453                           ;incstack = 0
  2454                           ;scale@scl stored from wreg
  2455  000F94  6E36               	movwf	scale@scl,c
  2456                           
  2457                           ;doprnt.c: 428: if(scl < 0) {
  2458  000F96  AE36               	btfss	scale@scl,7,c
  2459  000F98  D101               	goto	l203
  2460                           
  2461                           ;doprnt.c: 429: scl = -scl;
  2462  000F9A  6C36               	negf	scale@scl,c
  2463                           
  2464                           ;doprnt.c: 430: if(scl>=110)
  2465  000F9C  5036               	movf	scale@scl,w,c
  2466  000F9E  0A80               	xorlw	128
  2467  000FA0  0F12               	addlw	-238
  2468  000FA2  A0D8               	btfss	status,0,c
  2469  000FA4  D091               	goto	l204
  2470                           
  2471                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2472  000FA6  0E00               	movlw	0
  2473  000FA8  6E12               	movwf	___wmul@multiplicand+1,c
  2474  000FAA  0E03               	movlw	3
  2475  000FAC  6E11               	movwf	___wmul@multiplicand,c
  2476  000FAE  0E00               	movlw	0
  2477  000FB0  6E0A               	movwf	___awdiv@divisor+1,c
  2478  000FB2  0E0A               	movlw	10
  2479  000FB4  6E09               	movwf	___awdiv@divisor,c
  2480  000FB6  0E00               	movlw	0
  2481  000FB8  6E04               	movwf	___awmod@divisor+1,c
  2482  000FBA  0E64               	movlw	100
  2483  000FBC  6E03               	movwf	___awmod@divisor,c
  2484  000FBE  5036               	movf	scale@scl,w,c
  2485  000FC0  6E01               	movwf	___awmod@dividend,c
  2486  000FC2  6A02               	clrf	___awmod@dividend+1,c
  2487  000FC4  BE01               	btfsc	___awmod@dividend,7,c
  2488  000FC6  0602               	decf	___awmod@dividend+1,f,c
  2489  000FC8  EC9E  F011         	call	___awmod	;wreg free
  2490  000FCC  C001  F007         	movff	?___awmod,___awdiv@dividend
  2491  000FD0  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2492  000FD4  EC1B  F011         	call	___awdiv	;wreg free
  2493  000FD8  0E09               	movlw	9
  2494  000FDA  2407               	addwf	?___awdiv,w,c
  2495  000FDC  6E0F               	movwf	___wmul@multiplier,c
  2496  000FDE  0E00               	movlw	0
  2497  000FE0  2008               	addwfc	?___awdiv+1,w,c
  2498  000FE2  6E10               	movwf	___wmul@multiplier+1,c
  2499  000FE4  EC75  F013         	call	___wmul	;wreg free
  2500  000FE8  0E50               	movlw	low __npowers_
  2501  000FEA  240F               	addwf	?___wmul,w,c
  2502  000FEC  6EF6               	movwf	tblptrl,c
  2503  000FEE  0E08               	movlw	high __npowers_
  2504  000FF0  2010               	addwfc	?___wmul+1,w,c
  2505  000FF2  6EF7               	movwf	tblptrh,c
  2506  000FF4                     	if	0	;There are less than 3 active tblptr bytes
  2507  000FF4                     	endif
  2508  000FF4  0009               	tblrd		*+
  2509  000FF6  CFF5 F024          	movff	tablat,___ftmul@f2
  2510  000FFA  0009               	tblrd		*+
  2511  000FFC  CFF5 F025          	movff	tablat,___ftmul@f2+1
  2512  001000  000A               	tblrd		*-
  2513  001002  CFF5 F026          	movff	tablat,___ftmul@f2+2
  2514  001006  0E00               	movlw	0
  2515  001008  6E0A               	movwf	___awdiv@divisor+1,c
  2516  00100A  0E64               	movlw	100
  2517  00100C  6E09               	movwf	___awdiv@divisor,c
  2518  00100E  5036               	movf	scale@scl,w,c
  2519  001010  6E07               	movwf	___awdiv@dividend,c
  2520  001012  6A08               	clrf	___awdiv@dividend+1,c
  2521  001014  BE07               	btfsc	___awdiv@dividend,7,c
  2522  001016  0608               	decf	___awdiv@dividend+1,f,c
  2523  001018  EC1B  F011         	call	___awdiv	;wreg free
  2524  00101C  0E12               	movlw	18
  2525  00101E  2407               	addwf	?___awdiv,w,c
  2526  001020  6E0F               	movwf	___wmul@multiplier,c
  2527  001022  0E00               	movlw	0
  2528  001024  2008               	addwfc	?___awdiv+1,w,c
  2529  001026  6E10               	movwf	___wmul@multiplier+1,c
  2530  001028  0E00               	movlw	0
  2531  00102A  6E12               	movwf	___wmul@multiplicand+1,c
  2532  00102C  0E03               	movlw	3
  2533  00102E  6E11               	movwf	___wmul@multiplicand,c
  2534  001030  EC75  F013         	call	___wmul	;wreg free
  2535  001034  0E50               	movlw	low __npowers_
  2536  001036  240F               	addwf	?___wmul,w,c
  2537  001038  6EF6               	movwf	tblptrl,c
  2538  00103A  0E08               	movlw	high __npowers_
  2539  00103C  2010               	addwfc	?___wmul+1,w,c
  2540  00103E  6EF7               	movwf	tblptrh,c
  2541  001040                     	if	0	;There are less than 3 active tblptr bytes
  2542  001040                     	endif
  2543  001040  0009               	tblrd		*+
  2544  001042  CFF5 F021          	movff	tablat,___ftmul@f1
  2545  001046  0009               	tblrd		*+
  2546  001048  CFF5 F022          	movff	tablat,___ftmul@f1+1
  2547  00104C  000A               	tblrd		*-
  2548  00104E  CFF5 F023          	movff	tablat,___ftmul@f1+2
  2549  001052  EC48  F00E         	call	___ftmul	;wreg free
  2550  001056  C021  F033         	movff	?___ftmul,_scale$1288
  2551  00105A  C022  F034         	movff	?___ftmul+1,_scale$1288+1
  2552  00105E  C023  F035         	movff	?___ftmul+2,_scale$1288+2
  2553                           
  2554                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2555  001062  C033  F021         	movff	_scale$1288,___ftmul@f1
  2556  001066  C034  F022         	movff	_scale$1288+1,___ftmul@f1+1
  2557  00106A  C035  F023         	movff	_scale$1288+2,___ftmul@f1+2
  2558  00106E  0E00               	movlw	0
  2559  001070  6E12               	movwf	___wmul@multiplicand+1,c
  2560  001072  0E03               	movlw	3
  2561  001074  6E11               	movwf	___wmul@multiplicand,c
  2562  001076  0E00               	movlw	0
  2563  001078  6E04               	movwf	___awmod@divisor+1,c
  2564  00107A  0E0A               	movlw	10
  2565  00107C  6E03               	movwf	___awmod@divisor,c
  2566  00107E  5036               	movf	scale@scl,w,c
  2567  001080  6E01               	movwf	___awmod@dividend,c
  2568  001082  6A02               	clrf	___awmod@dividend+1,c
  2569  001084  BE01               	btfsc	___awmod@dividend,7,c
  2570  001086  0602               	decf	___awmod@dividend+1,f,c
  2571  001088  EC9E  F011         	call	___awmod	;wreg free
  2572  00108C  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2573  001090  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2574  001094  EC75  F013         	call	___wmul	;wreg free
  2575  001098  0E50               	movlw	low __npowers_
  2576  00109A  240F               	addwf	?___wmul,w,c
  2577  00109C  6EF6               	movwf	tblptrl,c
  2578  00109E  0E08               	movlw	high __npowers_
  2579  0010A0  2010               	addwfc	?___wmul+1,w,c
  2580  0010A2  6EF7               	movwf	tblptrh,c
  2581  0010A4                     	if	0	;There are less than 3 active tblptr bytes
  2582  0010A4                     	endif
  2583  0010A4  0009               	tblrd		*+
  2584  0010A6  CFF5 F024          	movff	tablat,___ftmul@f2
  2585  0010AA  0009               	tblrd		*+
  2586  0010AC  CFF5 F025          	movff	tablat,___ftmul@f2+1
  2587  0010B0  000A               	tblrd		*-
  2588  0010B2  CFF5 F026          	movff	tablat,___ftmul@f2+2
  2589  0010B6  EC48  F00E         	call	___ftmul	;wreg free
  2590  0010BA  C021  F030         	movff	?___ftmul,?_scale
  2591  0010BE  C022  F031         	movff	?___ftmul+1,?_scale+1
  2592  0010C2  C023  F032         	movff	?___ftmul+2,?_scale+2
  2593  0010C6  0012               	return	
  2594  0010C8                     l204:
  2595                           
  2596                           ;doprnt.c: 432: else if(scl > 10)
  2597  0010C8  5036               	movf	scale@scl,w,c
  2598  0010CA  0A80               	xorlw	128
  2599  0010CC  0F75               	addlw	-139
  2600  0010CE  A0D8               	btfss	status,0,c
  2601  0010D0  D053               	goto	l207
  2602                           
  2603                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  2604  0010D2  0E00               	movlw	0
  2605  0010D4  6E0A               	movwf	___awdiv@divisor+1,c
  2606  0010D6  0E0A               	movlw	10
  2607  0010D8  6E09               	movwf	___awdiv@divisor,c
  2608  0010DA  5036               	movf	scale@scl,w,c
  2609  0010DC  6E07               	movwf	___awdiv@dividend,c
  2610  0010DE  6A08               	clrf	___awdiv@dividend+1,c
  2611  0010E0  BE07               	btfsc	___awdiv@dividend,7,c
  2612  0010E2  0608               	decf	___awdiv@dividend+1,f,c
  2613  0010E4  EC1B  F011         	call	___awdiv	;wreg free
  2614  0010E8  0E09               	movlw	9
  2615  0010EA  2407               	addwf	?___awdiv,w,c
  2616  0010EC  6E0F               	movwf	___wmul@multiplier,c
  2617  0010EE  0E00               	movlw	0
  2618  0010F0  2008               	addwfc	?___awdiv+1,w,c
  2619  0010F2  6E10               	movwf	___wmul@multiplier+1,c
  2620  0010F4  0E00               	movlw	0
  2621  0010F6  6E12               	movwf	___wmul@multiplicand+1,c
  2622  0010F8  0E03               	movlw	3
  2623  0010FA  6E11               	movwf	___wmul@multiplicand,c
  2624  0010FC  EC75  F013         	call	___wmul	;wreg free
  2625  001100  0E50               	movlw	low __npowers_
  2626  001102  240F               	addwf	?___wmul,w,c
  2627  001104  6EF6               	movwf	tblptrl,c
  2628  001106  0E08               	movlw	high __npowers_
  2629  001108  2010               	addwfc	?___wmul+1,w,c
  2630  00110A  6EF7               	movwf	tblptrh,c
  2631  00110C                     	if	0	;There are less than 3 active tblptr bytes
  2632  00110C                     	endif
  2633  00110C  0009               	tblrd		*+
  2634  00110E  CFF5 F021          	movff	tablat,___ftmul@f1
  2635  001112  0009               	tblrd		*+
  2636  001114  CFF5 F022          	movff	tablat,___ftmul@f1+1
  2637  001118  000A               	tblrd		*-
  2638  00111A  CFF5 F023          	movff	tablat,___ftmul@f1+2
  2639  00111E  0E00               	movlw	0
  2640  001120  6E12               	movwf	___wmul@multiplicand+1,c
  2641  001122  0E03               	movlw	3
  2642  001124  6E11               	movwf	___wmul@multiplicand,c
  2643  001126  0E00               	movlw	0
  2644  001128  6E04               	movwf	___awmod@divisor+1,c
  2645  00112A  0E0A               	movlw	10
  2646  00112C  6E03               	movwf	___awmod@divisor,c
  2647  00112E  5036               	movf	scale@scl,w,c
  2648  001130  6E01               	movwf	___awmod@dividend,c
  2649  001132  6A02               	clrf	___awmod@dividend+1,c
  2650  001134  BE01               	btfsc	___awmod@dividend,7,c
  2651  001136  0602               	decf	___awmod@dividend+1,f,c
  2652  001138  EC9E  F011         	call	___awmod	;wreg free
  2653  00113C  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2654  001140  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2655  001144  EC75  F013         	call	___wmul	;wreg free
  2656  001148  0E50               	movlw	low __npowers_
  2657  00114A  240F               	addwf	?___wmul,w,c
  2658  00114C  6EF6               	movwf	tblptrl,c
  2659  00114E  0E08               	movlw	high __npowers_
  2660  001150  2010               	addwfc	?___wmul+1,w,c
  2661  001152  6EF7               	movwf	tblptrh,c
  2662  001154                     	if	0	;There are less than 3 active tblptr bytes
  2663  001154                     	endif
  2664  001154  0009               	tblrd		*+
  2665  001156  CFF5 F024          	movff	tablat,___ftmul@f2
  2666  00115A  0009               	tblrd		*+
  2667  00115C  CFF5 F025          	movff	tablat,___ftmul@f2+1
  2668  001160  000A               	tblrd		*-
  2669  001162  CFF5 F026          	movff	tablat,___ftmul@f2+2
  2670  001166  EC48  F00E         	call	___ftmul	;wreg free
  2671  00116A  C021  F030         	movff	?___ftmul,?_scale
  2672  00116E  C022  F031         	movff	?___ftmul+1,?_scale+1
  2673  001172  C023  F032         	movff	?___ftmul+2,?_scale+2
  2674  001176  0012               	return	
  2675  001178                     l207:
  2676                           
  2677                           ;doprnt.c: 434: return _npowers_[scl];
  2678  001178  5036               	movf	scale@scl,w,c
  2679  00117A  0D03               	mullw	3
  2680  00117C  0E50               	movlw	low __npowers_
  2681  00117E  24F3               	addwf	prodl,w,c
  2682  001180  6EF6               	movwf	tblptrl,c
  2683  001182  0E08               	movlw	high __npowers_
  2684  001184  20F4               	addwfc	prodh,w,c
  2685  001186  6EF7               	movwf	tblptrh,c
  2686  001188                     	if	0	;There are less than 3 active tblptr bytes
  2687  001188                     	endif
  2688  001188  0009               	tblrd		*+
  2689  00118A  CFF5 F030          	movff	tablat,?_scale
  2690  00118E  0009               	tblrd		*+
  2691  001190  CFF5 F031          	movff	tablat,?_scale+1
  2692  001194  000A               	tblrd		*-
  2693  001196  CFF5 F032          	movff	tablat,?_scale+2
  2694  00119A  0012               	return	
  2695  00119C                     l203:
  2696                           
  2697                           ;doprnt.c: 435: }
  2698                           ;doprnt.c: 436: if(scl>=110)
  2699  00119C  5036               	movf	scale@scl,w,c
  2700  00119E  0A80               	xorlw	128
  2701  0011A0  0F12               	addlw	-238
  2702  0011A2  A0D8               	btfss	status,0,c
  2703  0011A4  D091               	goto	l208
  2704                           
  2705                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2706  0011A6  0E00               	movlw	0
  2707  0011A8  6E12               	movwf	___wmul@multiplicand+1,c
  2708  0011AA  0E03               	movlw	3
  2709  0011AC  6E11               	movwf	___wmul@multiplicand,c
  2710  0011AE  0E00               	movlw	0
  2711  0011B0  6E0A               	movwf	___awdiv@divisor+1,c
  2712  0011B2  0E0A               	movlw	10
  2713  0011B4  6E09               	movwf	___awdiv@divisor,c
  2714  0011B6  0E00               	movlw	0
  2715  0011B8  6E04               	movwf	___awmod@divisor+1,c
  2716  0011BA  0E64               	movlw	100
  2717  0011BC  6E03               	movwf	___awmod@divisor,c
  2718  0011BE  5036               	movf	scale@scl,w,c
  2719  0011C0  6E01               	movwf	___awmod@dividend,c
  2720  0011C2  6A02               	clrf	___awmod@dividend+1,c
  2721  0011C4  BE01               	btfsc	___awmod@dividend,7,c
  2722  0011C6  0602               	decf	___awmod@dividend+1,f,c
  2723  0011C8  EC9E  F011         	call	___awmod	;wreg free
  2724  0011CC  C001  F007         	movff	?___awmod,___awdiv@dividend
  2725  0011D0  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2726  0011D4  EC1B  F011         	call	___awdiv	;wreg free
  2727  0011D8  0E09               	movlw	9
  2728  0011DA  2407               	addwf	?___awdiv,w,c
  2729  0011DC  6E0F               	movwf	___wmul@multiplier,c
  2730  0011DE  0E00               	movlw	0
  2731  0011E0  2008               	addwfc	?___awdiv+1,w,c
  2732  0011E2  6E10               	movwf	___wmul@multiplier+1,c
  2733  0011E4  EC75  F013         	call	___wmul	;wreg free
  2734  0011E8  0E29               	movlw	low __powers_
  2735  0011EA  240F               	addwf	?___wmul,w,c
  2736  0011EC  6EF6               	movwf	tblptrl,c
  2737  0011EE  0E08               	movlw	high __powers_
  2738  0011F0  2010               	addwfc	?___wmul+1,w,c
  2739  0011F2  6EF7               	movwf	tblptrh,c
  2740  0011F4                     	if	0	;There are less than 3 active tblptr bytes
  2741  0011F4                     	endif
  2742  0011F4  0009               	tblrd		*+
  2743  0011F6  CFF5 F024          	movff	tablat,___ftmul@f2
  2744  0011FA  0009               	tblrd		*+
  2745  0011FC  CFF5 F025          	movff	tablat,___ftmul@f2+1
  2746  001200  000A               	tblrd		*-
  2747  001202  CFF5 F026          	movff	tablat,___ftmul@f2+2
  2748  001206  0E00               	movlw	0
  2749  001208  6E0A               	movwf	___awdiv@divisor+1,c
  2750  00120A  0E64               	movlw	100
  2751  00120C  6E09               	movwf	___awdiv@divisor,c
  2752  00120E  5036               	movf	scale@scl,w,c
  2753  001210  6E07               	movwf	___awdiv@dividend,c
  2754  001212  6A08               	clrf	___awdiv@dividend+1,c
  2755  001214  BE07               	btfsc	___awdiv@dividend,7,c
  2756  001216  0608               	decf	___awdiv@dividend+1,f,c
  2757  001218  EC1B  F011         	call	___awdiv	;wreg free
  2758  00121C  0E12               	movlw	18
  2759  00121E  2407               	addwf	?___awdiv,w,c
  2760  001220  6E0F               	movwf	___wmul@multiplier,c
  2761  001222  0E00               	movlw	0
  2762  001224  2008               	addwfc	?___awdiv+1,w,c
  2763  001226  6E10               	movwf	___wmul@multiplier+1,c
  2764  001228  0E00               	movlw	0
  2765  00122A  6E12               	movwf	___wmul@multiplicand+1,c
  2766  00122C  0E03               	movlw	3
  2767  00122E  6E11               	movwf	___wmul@multiplicand,c
  2768  001230  EC75  F013         	call	___wmul	;wreg free
  2769  001234  0E29               	movlw	low __powers_
  2770  001236  240F               	addwf	?___wmul,w,c
  2771  001238  6EF6               	movwf	tblptrl,c
  2772  00123A  0E08               	movlw	high __powers_
  2773  00123C  2010               	addwfc	?___wmul+1,w,c
  2774  00123E  6EF7               	movwf	tblptrh,c
  2775  001240                     	if	0	;There are less than 3 active tblptr bytes
  2776  001240                     	endif
  2777  001240  0009               	tblrd		*+
  2778  001242  CFF5 F021          	movff	tablat,___ftmul@f1
  2779  001246  0009               	tblrd		*+
  2780  001248  CFF5 F022          	movff	tablat,___ftmul@f1+1
  2781  00124C  000A               	tblrd		*-
  2782  00124E  CFF5 F023          	movff	tablat,___ftmul@f1+2
  2783  001252  EC48  F00E         	call	___ftmul	;wreg free
  2784  001256  C021  F033         	movff	?___ftmul,_scale$1288
  2785  00125A  C022  F034         	movff	?___ftmul+1,_scale$1288+1
  2786  00125E  C023  F035         	movff	?___ftmul+2,_scale$1288+2
  2787                           
  2788                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2789  001262  C033  F021         	movff	_scale$1288,___ftmul@f1
  2790  001266  C034  F022         	movff	_scale$1288+1,___ftmul@f1+1
  2791  00126A  C035  F023         	movff	_scale$1288+2,___ftmul@f1+2
  2792  00126E  0E00               	movlw	0
  2793  001270  6E12               	movwf	___wmul@multiplicand+1,c
  2794  001272  0E03               	movlw	3
  2795  001274  6E11               	movwf	___wmul@multiplicand,c
  2796  001276  0E00               	movlw	0
  2797  001278  6E04               	movwf	___awmod@divisor+1,c
  2798  00127A  0E0A               	movlw	10
  2799  00127C  6E03               	movwf	___awmod@divisor,c
  2800  00127E  5036               	movf	scale@scl,w,c
  2801  001280  6E01               	movwf	___awmod@dividend,c
  2802  001282  6A02               	clrf	___awmod@dividend+1,c
  2803  001284  BE01               	btfsc	___awmod@dividend,7,c
  2804  001286  0602               	decf	___awmod@dividend+1,f,c
  2805  001288  EC9E  F011         	call	___awmod	;wreg free
  2806  00128C  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2807  001290  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2808  001294  EC75  F013         	call	___wmul	;wreg free
  2809  001298  0E29               	movlw	low __powers_
  2810  00129A  240F               	addwf	?___wmul,w,c
  2811  00129C  6EF6               	movwf	tblptrl,c
  2812  00129E  0E08               	movlw	high __powers_
  2813  0012A0  2010               	addwfc	?___wmul+1,w,c
  2814  0012A2  6EF7               	movwf	tblptrh,c
  2815  0012A4                     	if	0	;There are less than 3 active tblptr bytes
  2816  0012A4                     	endif
  2817  0012A4  0009               	tblrd		*+
  2818  0012A6  CFF5 F024          	movff	tablat,___ftmul@f2
  2819  0012AA  0009               	tblrd		*+
  2820  0012AC  CFF5 F025          	movff	tablat,___ftmul@f2+1
  2821  0012B0  000A               	tblrd		*-
  2822  0012B2  CFF5 F026          	movff	tablat,___ftmul@f2+2
  2823  0012B6  EC48  F00E         	call	___ftmul	;wreg free
  2824  0012BA  C021  F030         	movff	?___ftmul,?_scale
  2825  0012BE  C022  F031         	movff	?___ftmul+1,?_scale+1
  2826  0012C2  C023  F032         	movff	?___ftmul+2,?_scale+2
  2827  0012C6  0012               	return	
  2828  0012C8                     l208:
  2829                           
  2830                           ;doprnt.c: 438: else if(scl > 10)
  2831  0012C8  5036               	movf	scale@scl,w,c
  2832  0012CA  0A80               	xorlw	128
  2833  0012CC  0F75               	addlw	-139
  2834  0012CE  A0D8               	btfss	status,0,c
  2835  0012D0  D053               	goto	l210
  2836                           
  2837                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  2838  0012D2  0E00               	movlw	0
  2839  0012D4  6E0A               	movwf	___awdiv@divisor+1,c
  2840  0012D6  0E0A               	movlw	10
  2841  0012D8  6E09               	movwf	___awdiv@divisor,c
  2842  0012DA  5036               	movf	scale@scl,w,c
  2843  0012DC  6E07               	movwf	___awdiv@dividend,c
  2844  0012DE  6A08               	clrf	___awdiv@dividend+1,c
  2845  0012E0  BE07               	btfsc	___awdiv@dividend,7,c
  2846  0012E2  0608               	decf	___awdiv@dividend+1,f,c
  2847  0012E4  EC1B  F011         	call	___awdiv	;wreg free
  2848  0012E8  0E09               	movlw	9
  2849  0012EA  2407               	addwf	?___awdiv,w,c
  2850  0012EC  6E0F               	movwf	___wmul@multiplier,c
  2851  0012EE  0E00               	movlw	0
  2852  0012F0  2008               	addwfc	?___awdiv+1,w,c
  2853  0012F2  6E10               	movwf	___wmul@multiplier+1,c
  2854  0012F4  0E00               	movlw	0
  2855  0012F6  6E12               	movwf	___wmul@multiplicand+1,c
  2856  0012F8  0E03               	movlw	3
  2857  0012FA  6E11               	movwf	___wmul@multiplicand,c
  2858  0012FC  EC75  F013         	call	___wmul	;wreg free
  2859  001300  0E29               	movlw	low __powers_
  2860  001302  240F               	addwf	?___wmul,w,c
  2861  001304  6EF6               	movwf	tblptrl,c
  2862  001306  0E08               	movlw	high __powers_
  2863  001308  2010               	addwfc	?___wmul+1,w,c
  2864  00130A  6EF7               	movwf	tblptrh,c
  2865  00130C                     	if	0	;There are less than 3 active tblptr bytes
  2866  00130C                     	endif
  2867  00130C  0009               	tblrd		*+
  2868  00130E  CFF5 F021          	movff	tablat,___ftmul@f1
  2869  001312  0009               	tblrd		*+
  2870  001314  CFF5 F022          	movff	tablat,___ftmul@f1+1
  2871  001318  000A               	tblrd		*-
  2872  00131A  CFF5 F023          	movff	tablat,___ftmul@f1+2
  2873  00131E  0E00               	movlw	0
  2874  001320  6E12               	movwf	___wmul@multiplicand+1,c
  2875  001322  0E03               	movlw	3
  2876  001324  6E11               	movwf	___wmul@multiplicand,c
  2877  001326  0E00               	movlw	0
  2878  001328  6E04               	movwf	___awmod@divisor+1,c
  2879  00132A  0E0A               	movlw	10
  2880  00132C  6E03               	movwf	___awmod@divisor,c
  2881  00132E  5036               	movf	scale@scl,w,c
  2882  001330  6E01               	movwf	___awmod@dividend,c
  2883  001332  6A02               	clrf	___awmod@dividend+1,c
  2884  001334  BE01               	btfsc	___awmod@dividend,7,c
  2885  001336  0602               	decf	___awmod@dividend+1,f,c
  2886  001338  EC9E  F011         	call	___awmod	;wreg free
  2887  00133C  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2888  001340  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2889  001344  EC75  F013         	call	___wmul	;wreg free
  2890  001348  0E29               	movlw	low __powers_
  2891  00134A  240F               	addwf	?___wmul,w,c
  2892  00134C  6EF6               	movwf	tblptrl,c
  2893  00134E  0E08               	movlw	high __powers_
  2894  001350  2010               	addwfc	?___wmul+1,w,c
  2895  001352  6EF7               	movwf	tblptrh,c
  2896  001354                     	if	0	;There are less than 3 active tblptr bytes
  2897  001354                     	endif
  2898  001354  0009               	tblrd		*+
  2899  001356  CFF5 F024          	movff	tablat,___ftmul@f2
  2900  00135A  0009               	tblrd		*+
  2901  00135C  CFF5 F025          	movff	tablat,___ftmul@f2+1
  2902  001360  000A               	tblrd		*-
  2903  001362  CFF5 F026          	movff	tablat,___ftmul@f2+2
  2904  001366  EC48  F00E         	call	___ftmul	;wreg free
  2905  00136A  C021  F030         	movff	?___ftmul,?_scale
  2906  00136E  C022  F031         	movff	?___ftmul+1,?_scale+1
  2907  001372  C023  F032         	movff	?___ftmul+2,?_scale+2
  2908  001376  0012               	return	
  2909  001378                     l210:
  2910                           
  2911                           ;doprnt.c: 440: return _powers_[scl];
  2912  001378  5036               	movf	scale@scl,w,c
  2913  00137A  0D03               	mullw	3
  2914  00137C  0E29               	movlw	low __powers_
  2915  00137E  24F3               	addwf	prodl,w,c
  2916  001380  6EF6               	movwf	tblptrl,c
  2917  001382  0E08               	movlw	high __powers_
  2918  001384  20F4               	addwfc	prodh,w,c
  2919  001386  6EF7               	movwf	tblptrh,c
  2920  001388                     	if	0	;There are less than 3 active tblptr bytes
  2921  001388                     	endif
  2922  001388  0009               	tblrd		*+
  2923  00138A  CFF5 F030          	movff	tablat,?_scale
  2924  00138E  0009               	tblrd		*+
  2925  001390  CFF5 F031          	movff	tablat,?_scale+1
  2926  001394  000A               	tblrd		*-
  2927  001396  CFF5 F032          	movff	tablat,?_scale+2
  2928  00139A  0012               	return	
  2929  00139C                     __end_of_scale:
  2930                           	opt stack 0
  2931                           tblptru	equ	0xFF8
  2932                           tblptrh	equ	0xFF7
  2933                           tblptrl	equ	0xFF6
  2934                           tablat	equ	0xFF5
  2935                           prodh	equ	0xFF4
  2936                           prodl	equ	0xFF3
  2937                           wreg	equ	0xFE8
  2938                           indf2	equ	0xFDF
  2939                           postinc2	equ	0xFDE
  2940                           postdec2	equ	0xFDD
  2941                           fsr2h	equ	0xFDA
  2942                           fsr2l	equ	0xFD9
  2943                           status	equ	0xFD8
  2944                           
  2945 ;; *************** function _isdigit *****************
  2946 ;; Defined at:
  2947 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  2948 ;; Parameters:    Size  Location     Type
  2949 ;;  c               1    wreg     unsigned char 
  2950 ;; Auto vars:     Size  Location     Type
  2951 ;;  c               1    2[COMRAM] unsigned char 
  2952 ;; Return value:  Size  Location     Type
  2953 ;;		None               void
  2954 ;; Registers used:
  2955 ;;		wreg, status,2, status,0
  2956 ;; Tracked objects:
  2957 ;;		On entry : 0/0
  2958 ;;		On exit  : 0/0
  2959 ;;		Unchanged: 0/0
  2960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2961 ;;      Params:         0       0       0       0       0       0       0       0       0
  2962 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2963 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2964 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2965 ;;Total ram usage:        3 bytes
  2966 ;; Hardware stack levels used:    1
  2967 ;; This function calls:
  2968 ;;		Nothing
  2969 ;; This function is called by:
  2970 ;;		_sprintf
  2971 ;; This function uses a non-reentrant model
  2972 ;;
  2973                           
  2974                           	psect	text3
  2975  002734                     __ptext3:
  2976                           	opt stack 0
  2977  002734                     _isdigit:
  2978                           	opt stack 29
  2979                           
  2980                           ;incstack = 0
  2981                           ;isdigit@c stored from wreg
  2982  002734  6E03               	movwf	isdigit@c,c
  2983  002736  0E00               	movlw	0
  2984  002738  6E02               	movwf	_isdigit$926,c
  2985  00273A  0E3A               	movlw	58
  2986  00273C  6003               	cpfslt	isdigit@c,c
  2987  00273E  D005               	goto	l635
  2988  002740  0E2F               	movlw	47
  2989  002742  6403               	cpfsgt	isdigit@c,c
  2990  002744  D002               	goto	l635
  2991  002746  0E01               	movlw	1
  2992  002748  6E02               	movwf	_isdigit$926,c
  2993  00274A                     l635:
  2994  00274A  C002  F001         	movff	_isdigit$926,??_isdigit
  2995  00274E  3001               	rrcf	??_isdigit,w,c
  2996  002750  0012               	return	
  2997  002752                     __end_of_isdigit:
  2998                           	opt stack 0
  2999                           tblptru	equ	0xFF8
  3000                           tblptrh	equ	0xFF7
  3001                           tblptrl	equ	0xFF6
  3002                           tablat	equ	0xFF5
  3003                           prodh	equ	0xFF4
  3004                           prodl	equ	0xFF3
  3005                           wreg	equ	0xFE8
  3006                           indf2	equ	0xFDF
  3007                           postinc2	equ	0xFDE
  3008                           postdec2	equ	0xFDD
  3009                           fsr2h	equ	0xFDA
  3010                           fsr2l	equ	0xFD9
  3011                           status	equ	0xFD8
  3012                           
  3013 ;; *************** function _fround *****************
  3014 ;; Defined at:
  3015 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  3016 ;; Parameters:    Size  Location     Type
  3017 ;;  prec            1    wreg     unsigned char 
  3018 ;; Auto vars:     Size  Location     Type
  3019 ;;  prec            1   56[COMRAM] unsigned char 
  3020 ;; Return value:  Size  Location     Type
  3021 ;;                  3   47[COMRAM] unsigned char 
  3022 ;; Registers used:
  3023 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3024 ;; Tracked objects:
  3025 ;;		On entry : 0/0
  3026 ;;		On exit  : 0/0
  3027 ;;		Unchanged: 0/0
  3028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3029 ;;      Params:         3       0       0       0       0       0       0       0       0
  3030 ;;      Locals:         7       0       0       0       0       0       0       0       0
  3031 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3032 ;;      Totals:        10       0       0       0       0       0       0       0       0
  3033 ;;Total ram usage:       10 bytes
  3034 ;; Hardware stack levels used:    1
  3035 ;; Hardware stack levels required when called:    2
  3036 ;; This function calls:
  3037 ;;		___awdiv
  3038 ;;		___awmod
  3039 ;;		___ftmul
  3040 ;;		___wmul
  3041 ;; This function is called by:
  3042 ;;		_sprintf
  3043 ;; This function uses a non-reentrant model
  3044 ;;
  3045                           
  3046                           	psect	text4
  3047  001638                     __ptext4:
  3048                           	opt stack 0
  3049  001638                     _fround:
  3050                           	opt stack 27
  3051                           
  3052                           ;incstack = 0
  3053                           ;fround@prec stored from wreg
  3054  001638  6E39               	movwf	fround@prec,c
  3055                           
  3056                           ;doprnt.c: 413: if(prec>=110)
  3057  00163A  0E6D               	movlw	109
  3058  00163C  6439               	cpfsgt	fround@prec,c
  3059  00163E  D09F               	goto	l197
  3060                           
  3061                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3062  001640  0E00               	movlw	0
  3063  001642  6E12               	movwf	___wmul@multiplicand+1,c
  3064  001644  0E03               	movlw	3
  3065  001646  6E11               	movwf	___wmul@multiplicand,c
  3066  001648  0E00               	movlw	0
  3067  00164A  6E0A               	movwf	___awdiv@divisor+1,c
  3068  00164C  0E0A               	movlw	10
  3069  00164E  6E09               	movwf	___awdiv@divisor,c
  3070  001650  0E00               	movlw	0
  3071  001652  6E04               	movwf	___awmod@divisor+1,c
  3072  001654  0E64               	movlw	100
  3073  001656  6E03               	movwf	___awmod@divisor,c
  3074  001658  C039  F001         	movff	fround@prec,___awmod@dividend
  3075  00165C  6A02               	clrf	___awmod@dividend+1,c
  3076  00165E  EC9E  F011         	call	___awmod	;wreg free
  3077  001662  C001  F007         	movff	?___awmod,___awdiv@dividend
  3078  001666  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3079  00166A  EC1B  F011         	call	___awdiv	;wreg free
  3080  00166E  0E09               	movlw	9
  3081  001670  2407               	addwf	?___awdiv,w,c
  3082  001672  6E0F               	movwf	___wmul@multiplier,c
  3083  001674  0E00               	movlw	0
  3084  001676  2008               	addwfc	?___awdiv+1,w,c
  3085  001678  6E10               	movwf	___wmul@multiplier+1,c
  3086  00167A  EC75  F013         	call	___wmul	;wreg free
  3087  00167E  0E50               	movlw	low __npowers_
  3088  001680  240F               	addwf	?___wmul,w,c
  3089  001682  6EF6               	movwf	tblptrl,c
  3090  001684  0E08               	movlw	high __npowers_
  3091  001686  2010               	addwfc	?___wmul+1,w,c
  3092  001688  6EF7               	movwf	tblptrh,c
  3093  00168A                     	if	0	;There are less than 3 active tblptr bytes
  3094  00168A                     	endif
  3095  00168A  0009               	tblrd		*+
  3096  00168C  CFF5 F024          	movff	tablat,___ftmul@f2
  3097  001690  0009               	tblrd		*+
  3098  001692  CFF5 F025          	movff	tablat,___ftmul@f2+1
  3099  001696  000A               	tblrd		*-
  3100  001698  CFF5 F026          	movff	tablat,___ftmul@f2+2
  3101  00169C  0E00               	movlw	0
  3102  00169E  6E0A               	movwf	___awdiv@divisor+1,c
  3103  0016A0  0E64               	movlw	100
  3104  0016A2  6E09               	movwf	___awdiv@divisor,c
  3105  0016A4  C039  F007         	movff	fround@prec,___awdiv@dividend
  3106  0016A8  6A08               	clrf	___awdiv@dividend+1,c
  3107  0016AA  EC1B  F011         	call	___awdiv	;wreg free
  3108  0016AE  0E12               	movlw	18
  3109  0016B0  2407               	addwf	?___awdiv,w,c
  3110  0016B2  6E0F               	movwf	___wmul@multiplier,c
  3111  0016B4  0E00               	movlw	0
  3112  0016B6  2008               	addwfc	?___awdiv+1,w,c
  3113  0016B8  6E10               	movwf	___wmul@multiplier+1,c
  3114  0016BA  0E00               	movlw	0
  3115  0016BC  6E12               	movwf	___wmul@multiplicand+1,c
  3116  0016BE  0E03               	movlw	3
  3117  0016C0  6E11               	movwf	___wmul@multiplicand,c
  3118  0016C2  EC75  F013         	call	___wmul	;wreg free
  3119  0016C6  0E50               	movlw	low __npowers_
  3120  0016C8  240F               	addwf	?___wmul,w,c
  3121  0016CA  6EF6               	movwf	tblptrl,c
  3122  0016CC  0E08               	movlw	high __npowers_
  3123  0016CE  2010               	addwfc	?___wmul+1,w,c
  3124  0016D0  6EF7               	movwf	tblptrh,c
  3125  0016D2                     	if	0	;There are less than 3 active tblptr bytes
  3126  0016D2                     	endif
  3127  0016D2  0009               	tblrd		*+
  3128  0016D4  CFF5 F021          	movff	tablat,___ftmul@f1
  3129  0016D8  0009               	tblrd		*+
  3130  0016DA  CFF5 F022          	movff	tablat,___ftmul@f1+1
  3131  0016DE  000A               	tblrd		*-
  3132  0016E0  CFF5 F023          	movff	tablat,___ftmul@f1+2
  3133  0016E4  EC48  F00E         	call	___ftmul	;wreg free
  3134  0016E8  C021  F036         	movff	?___ftmul,_fround$1286
  3135  0016EC  C022  F037         	movff	?___ftmul+1,_fround$1286+1
  3136  0016F0  C023  F038         	movff	?___ftmul+2,_fround$1286+2
  3137                           
  3138                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3139  0016F4  0E00               	movlw	0
  3140  0016F6  6E12               	movwf	___wmul@multiplicand+1,c
  3141  0016F8  0E03               	movlw	3
  3142  0016FA  6E11               	movwf	___wmul@multiplicand,c
  3143  0016FC  0E00               	movlw	0
  3144  0016FE  6E04               	movwf	___awmod@divisor+1,c
  3145  001700  0E0A               	movlw	10
  3146  001702  6E03               	movwf	___awmod@divisor,c
  3147  001704  C039  F001         	movff	fround@prec,___awmod@dividend
  3148  001708  6A02               	clrf	___awmod@dividend+1,c
  3149  00170A  EC9E  F011         	call	___awmod	;wreg free
  3150  00170E  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3151  001712  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3152  001716  EC75  F013         	call	___wmul	;wreg free
  3153  00171A  0E50               	movlw	low __npowers_
  3154  00171C  240F               	addwf	?___wmul,w,c
  3155  00171E  6EF6               	movwf	tblptrl,c
  3156  001720  0E08               	movlw	high __npowers_
  3157  001722  2010               	addwfc	?___wmul+1,w,c
  3158  001724  6EF7               	movwf	tblptrh,c
  3159  001726                     	if	0	;There are less than 3 active tblptr bytes
  3160  001726                     	endif
  3161  001726  0009               	tblrd		*+
  3162  001728  CFF5 F024          	movff	tablat,___ftmul@f2
  3163  00172C  0009               	tblrd		*+
  3164  00172E  CFF5 F025          	movff	tablat,___ftmul@f2+1
  3165  001732  000A               	tblrd		*-
  3166  001734  CFF5 F026          	movff	tablat,___ftmul@f2+2
  3167  001738  C036  F021         	movff	_fround$1286,___ftmul@f1
  3168  00173C  C037  F022         	movff	_fround$1286+1,___ftmul@f1+1
  3169  001740  C038  F023         	movff	_fround$1286+2,___ftmul@f1+2
  3170  001744  EC48  F00E         	call	___ftmul	;wreg free
  3171  001748  C021  F033         	movff	?___ftmul,_fround$1287
  3172  00174C  C022  F034         	movff	?___ftmul+1,_fround$1287+1
  3173  001750  C023  F035         	movff	?___ftmul+2,_fround$1287+2
  3174                           
  3175                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3176  001754  C033  F021         	movff	_fround$1287,___ftmul@f1
  3177  001758  C034  F022         	movff	_fround$1287+1,___ftmul@f1+1
  3178  00175C  C035  F023         	movff	_fround$1287+2,___ftmul@f1+2
  3179  001760  0E00               	movlw	0
  3180  001762  6E24               	movwf	___ftmul@f2,c
  3181  001764  0E00               	movlw	0
  3182  001766  6E25               	movwf	___ftmul@f2+1,c
  3183  001768  0E3F               	movlw	63
  3184  00176A  6E26               	movwf	___ftmul@f2+2,c
  3185  00176C  EC48  F00E         	call	___ftmul	;wreg free
  3186  001770  C021  F030         	movff	?___ftmul,?_fround
  3187  001774  C022  F031         	movff	?___ftmul+1,?_fround+1
  3188  001778  C023  F032         	movff	?___ftmul+2,?_fround+2
  3189  00177C  0012               	return	
  3190  00177E                     l197:
  3191                           
  3192                           ;doprnt.c: 415: else if(prec > 10)
  3193  00177E  0E0A               	movlw	10
  3194  001780  6439               	cpfsgt	fround@prec,c
  3195  001782  D063               	goto	l200
  3196                           
  3197                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3198  001784  0E00               	movlw	0
  3199  001786  6E12               	movwf	___wmul@multiplicand+1,c
  3200  001788  0E03               	movlw	3
  3201  00178A  6E11               	movwf	___wmul@multiplicand,c
  3202  00178C  0E00               	movlw	0
  3203  00178E  6E04               	movwf	___awmod@divisor+1,c
  3204  001790  0E0A               	movlw	10
  3205  001792  6E03               	movwf	___awmod@divisor,c
  3206  001794  C039  F001         	movff	fround@prec,___awmod@dividend
  3207  001798  6A02               	clrf	___awmod@dividend+1,c
  3208  00179A  EC9E  F011         	call	___awmod	;wreg free
  3209  00179E  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3210  0017A2  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3211  0017A6  EC75  F013         	call	___wmul	;wreg free
  3212  0017AA  0E50               	movlw	low __npowers_
  3213  0017AC  240F               	addwf	?___wmul,w,c
  3214  0017AE  6EF6               	movwf	tblptrl,c
  3215  0017B0  0E08               	movlw	high __npowers_
  3216  0017B2  2010               	addwfc	?___wmul+1,w,c
  3217  0017B4  6EF7               	movwf	tblptrh,c
  3218  0017B6                     	if	0	;There are less than 3 active tblptr bytes
  3219  0017B6                     	endif
  3220  0017B6  0009               	tblrd		*+
  3221  0017B8  CFF5 F024          	movff	tablat,___ftmul@f2
  3222  0017BC  0009               	tblrd		*+
  3223  0017BE  CFF5 F025          	movff	tablat,___ftmul@f2+1
  3224  0017C2  000A               	tblrd		*-
  3225  0017C4  CFF5 F026          	movff	tablat,___ftmul@f2+2
  3226  0017C8  0E00               	movlw	0
  3227  0017CA  6E0A               	movwf	___awdiv@divisor+1,c
  3228  0017CC  0E0A               	movlw	10
  3229  0017CE  6E09               	movwf	___awdiv@divisor,c
  3230  0017D0  C039  F007         	movff	fround@prec,___awdiv@dividend
  3231  0017D4  6A08               	clrf	___awdiv@dividend+1,c
  3232  0017D6  EC1B  F011         	call	___awdiv	;wreg free
  3233  0017DA  0E09               	movlw	9
  3234  0017DC  2407               	addwf	?___awdiv,w,c
  3235  0017DE  6E0F               	movwf	___wmul@multiplier,c
  3236  0017E0  0E00               	movlw	0
  3237  0017E2  2008               	addwfc	?___awdiv+1,w,c
  3238  0017E4  6E10               	movwf	___wmul@multiplier+1,c
  3239  0017E6  0E00               	movlw	0
  3240  0017E8  6E12               	movwf	___wmul@multiplicand+1,c
  3241  0017EA  0E03               	movlw	3
  3242  0017EC  6E11               	movwf	___wmul@multiplicand,c
  3243  0017EE  EC75  F013         	call	___wmul	;wreg free
  3244  0017F2  0E50               	movlw	low __npowers_
  3245  0017F4  240F               	addwf	?___wmul,w,c
  3246  0017F6  6EF6               	movwf	tblptrl,c
  3247  0017F8  0E08               	movlw	high __npowers_
  3248  0017FA  2010               	addwfc	?___wmul+1,w,c
  3249  0017FC  6EF7               	movwf	tblptrh,c
  3250  0017FE                     	if	0	;There are less than 3 active tblptr bytes
  3251  0017FE                     	endif
  3252  0017FE  0009               	tblrd		*+
  3253  001800  CFF5 F021          	movff	tablat,___ftmul@f1
  3254  001804  0009               	tblrd		*+
  3255  001806  CFF5 F022          	movff	tablat,___ftmul@f1+1
  3256  00180A  000A               	tblrd		*-
  3257  00180C  CFF5 F023          	movff	tablat,___ftmul@f1+2
  3258  001810  EC48  F00E         	call	___ftmul	;wreg free
  3259  001814  C021  F036         	movff	?___ftmul,_fround$1286
  3260  001818  C022  F037         	movff	?___ftmul+1,_fround$1286+1
  3261  00181C  C023  F038         	movff	?___ftmul+2,_fround$1286+2
  3262                           
  3263                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3264  001820  C036  F021         	movff	_fround$1286,___ftmul@f1
  3265  001824  C037  F022         	movff	_fround$1286+1,___ftmul@f1+1
  3266  001828  C038  F023         	movff	_fround$1286+2,___ftmul@f1+2
  3267  00182C  0E00               	movlw	0
  3268  00182E  6E24               	movwf	___ftmul@f2,c
  3269  001830  0E00               	movlw	0
  3270  001832  6E25               	movwf	___ftmul@f2+1,c
  3271  001834  0E3F               	movlw	63
  3272  001836  6E26               	movwf	___ftmul@f2+2,c
  3273  001838  EC48  F00E         	call	___ftmul	;wreg free
  3274  00183C  C021  F030         	movff	?___ftmul,?_fround
  3275  001840  C022  F031         	movff	?___ftmul+1,?_fround+1
  3276  001844  C023  F032         	movff	?___ftmul+2,?_fround+2
  3277  001848  0012               	return	
  3278  00184A                     l200:
  3279                           
  3280                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3281  00184A  5039               	movf	fround@prec,w,c
  3282  00184C  0D03               	mullw	3
  3283  00184E  0E50               	movlw	low __npowers_
  3284  001850  24F3               	addwf	prodl,w,c
  3285  001852  6EF6               	movwf	tblptrl,c
  3286  001854  0E08               	movlw	high __npowers_
  3287  001856  20F4               	addwfc	prodh,w,c
  3288  001858  6EF7               	movwf	tblptrh,c
  3289  00185A                     	if	0	;There are less than 3 active tblptr bytes
  3290  00185A                     	endif
  3291  00185A  0009               	tblrd		*+
  3292  00185C  CFF5 F021          	movff	tablat,___ftmul@f1
  3293  001860  0009               	tblrd		*+
  3294  001862  CFF5 F022          	movff	tablat,___ftmul@f1+1
  3295  001866  000A               	tblrd		*-
  3296  001868  CFF5 F023          	movff	tablat,___ftmul@f1+2
  3297  00186C  0E00               	movlw	0
  3298  00186E  6E24               	movwf	___ftmul@f2,c
  3299  001870  0E00               	movlw	0
  3300  001872  6E25               	movwf	___ftmul@f2+1,c
  3301  001874  0E3F               	movlw	63
  3302  001876  6E26               	movwf	___ftmul@f2+2,c
  3303  001878  EC48  F00E         	call	___ftmul	;wreg free
  3304  00187C  C021  F030         	movff	?___ftmul,?_fround
  3305  001880  C022  F031         	movff	?___ftmul+1,?_fround+1
  3306  001884  C023  F032         	movff	?___ftmul+2,?_fround+2
  3307  001888  0012               	return	
  3308  00188A                     __end_of_fround:
  3309                           	opt stack 0
  3310                           tblptru	equ	0xFF8
  3311                           tblptrh	equ	0xFF7
  3312                           tblptrl	equ	0xFF6
  3313                           tablat	equ	0xFF5
  3314                           prodh	equ	0xFF4
  3315                           prodl	equ	0xFF3
  3316                           wreg	equ	0xFE8
  3317                           indf2	equ	0xFDF
  3318                           postinc2	equ	0xFDE
  3319                           postdec2	equ	0xFDD
  3320                           fsr2h	equ	0xFDA
  3321                           fsr2l	equ	0xFD9
  3322                           status	equ	0xFD8
  3323                           
  3324 ;; *************** function ___wmul *****************
  3325 ;; Defined at:
  3326 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  3327 ;; Parameters:    Size  Location     Type
  3328 ;;  multiplier      2   14[COMRAM] unsigned int 
  3329 ;;  multiplicand    2   16[COMRAM] unsigned int 
  3330 ;; Auto vars:     Size  Location     Type
  3331 ;;  product         2   18[COMRAM] unsigned int 
  3332 ;; Return value:  Size  Location     Type
  3333 ;;                  2   14[COMRAM] unsigned int 
  3334 ;; Registers used:
  3335 ;;		wreg, status,2, status,0, prodl, prodh
  3336 ;; Tracked objects:
  3337 ;;		On entry : 0/0
  3338 ;;		On exit  : 0/0
  3339 ;;		Unchanged: 0/0
  3340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3341 ;;      Params:         4       0       0       0       0       0       0       0       0
  3342 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3343 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3344 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3345 ;;Total ram usage:        6 bytes
  3346 ;; Hardware stack levels used:    1
  3347 ;; This function calls:
  3348 ;;		Nothing
  3349 ;; This function is called by:
  3350 ;;		_fround
  3351 ;;		_scale
  3352 ;;		_sprintf
  3353 ;; This function uses a non-reentrant model
  3354 ;;
  3355                           
  3356                           	psect	text5
  3357  0026EA                     __ptext5:
  3358                           	opt stack 0
  3359  0026EA                     ___wmul:
  3360                           	opt stack 28
  3361                           
  3362                           ;incstack = 0
  3363  0026EA  500F               	movf	___wmul@multiplier,w,c
  3364  0026EC  0211               	mulwf	___wmul@multiplicand,c
  3365  0026EE  CFF3 F013          	movff	prodl,___wmul@product
  3366  0026F2  CFF4 F014          	movff	prodh,___wmul@product+1
  3367  0026F6  500F               	movf	___wmul@multiplier,w,c
  3368  0026F8  0212               	mulwf	___wmul@multiplicand+1,c
  3369  0026FA  50F3               	movf	prodl,w,c
  3370  0026FC  2614               	addwf	___wmul@product+1,f,c
  3371  0026FE  5010               	movf	___wmul@multiplier+1,w,c
  3372  002700  0211               	mulwf	___wmul@multiplicand,c
  3373  002702  50F3               	movf	prodl,w,c
  3374  002704  2614               	addwf	___wmul@product+1,f,c
  3375  002706  C013  F00F         	movff	___wmul@product,?___wmul
  3376  00270A  C014  F010         	movff	___wmul@product+1,?___wmul+1
  3377  00270E  0012               	return	
  3378  002710                     __end_of___wmul:
  3379                           	opt stack 0
  3380                           tblptru	equ	0xFF8
  3381                           tblptrh	equ	0xFF7
  3382                           tblptrl	equ	0xFF6
  3383                           tablat	equ	0xFF5
  3384                           prodh	equ	0xFF4
  3385                           prodl	equ	0xFF3
  3386                           wreg	equ	0xFE8
  3387                           indf2	equ	0xFDF
  3388                           postinc2	equ	0xFDE
  3389                           postdec2	equ	0xFDD
  3390                           fsr2h	equ	0xFDA
  3391                           fsr2l	equ	0xFD9
  3392                           status	equ	0xFD8
  3393                           
  3394 ;; *************** function ___ftmul *****************
  3395 ;; Defined at:
  3396 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  3397 ;; Parameters:    Size  Location     Type
  3398 ;;  f1              3   32[COMRAM] float 
  3399 ;;  f2              3   35[COMRAM] float 
  3400 ;; Auto vars:     Size  Location     Type
  3401 ;;  f3_as_produc    3   42[COMRAM] unsigned um
  3402 ;;  sign            1   46[COMRAM] unsigned char 
  3403 ;;  cntr            1   45[COMRAM] unsigned char 
  3404 ;;  exp             1   41[COMRAM] unsigned char 
  3405 ;; Return value:  Size  Location     Type
  3406 ;;                  3   32[COMRAM] float 
  3407 ;; Registers used:
  3408 ;;		wreg, status,2, status,0, cstack
  3409 ;; Tracked objects:
  3410 ;;		On entry : 0/0
  3411 ;;		On exit  : 0/0
  3412 ;;		Unchanged: 0/0
  3413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3414 ;;      Params:         6       0       0       0       0       0       0       0       0
  3415 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3416 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3417 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3418 ;;Total ram usage:       15 bytes
  3419 ;; Hardware stack levels used:    1
  3420 ;; Hardware stack levels required when called:    1
  3421 ;; This function calls:
  3422 ;;		___ftpack
  3423 ;; This function is called by:
  3424 ;;		_main
  3425 ;;		_fround
  3426 ;;		_scale
  3427 ;;		_sprintf
  3428 ;; This function uses a non-reentrant model
  3429 ;;
  3430                           
  3431                           	psect	text6
  3432  001C90                     __ptext6:
  3433                           	opt stack 0
  3434  001C90                     ___ftmul:
  3435                           	opt stack 27
  3436                           
  3437                           ;incstack = 0
  3438  001C90  C023  F027         	movff	___ftmul@f1+2,??___ftmul
  3439  001C94  6A28               	clrf	(??___ftmul+1)& (0+255),c
  3440  001C96  6A29               	clrf	(??___ftmul+2)& (0+255),c
  3441  001C98  3422               	rlcf	___ftmul@f1+1,w,c
  3442  001C9A  3627               	rlcf	??___ftmul& (0+255),f,c
  3443  001C9C  E301               	bnc	u2031
  3444  001C9E  8028               	bsf	(??___ftmul+1)& (0+255),0,c
  3445  001CA0                     u2031:
  3446  001CA0  5027               	movf	??___ftmul,w,c
  3447  001CA2  6E2A               	movwf	___ftmul@exp,c
  3448  001CA4  502A               	movf	___ftmul@exp,w,c
  3449  001CA6  A4D8               	btfss	status,2,c
  3450  001CA8  D007               	goto	l599
  3451  001CAA  0E00               	movlw	0
  3452  001CAC  6E21               	movwf	?___ftmul,c
  3453  001CAE  0E00               	movlw	0
  3454  001CB0  6E22               	movwf	?___ftmul+1,c
  3455  001CB2  0E00               	movlw	0
  3456  001CB4  6E23               	movwf	?___ftmul+2,c
  3457  001CB6  0012               	return	
  3458  001CB8                     l599:
  3459  001CB8  C026  F027         	movff	___ftmul@f2+2,??___ftmul
  3460  001CBC  6A28               	clrf	(??___ftmul+1)& (0+255),c
  3461  001CBE  6A29               	clrf	(??___ftmul+2)& (0+255),c
  3462  001CC0  3425               	rlcf	___ftmul@f2+1,w,c
  3463  001CC2  3627               	rlcf	??___ftmul& (0+255),f,c
  3464  001CC4  E301               	bnc	u2051
  3465  001CC6  8028               	bsf	(??___ftmul+1)& (0+255),0,c
  3466  001CC8                     u2051:
  3467  001CC8  5027               	movf	??___ftmul,w,c
  3468  001CCA  6E2F               	movwf	___ftmul@sign,c
  3469  001CCC  502F               	movf	___ftmul@sign,w,c
  3470  001CCE  A4D8               	btfss	status,2,c
  3471  001CD0  D007               	goto	l601
  3472  001CD2  0E00               	movlw	0
  3473  001CD4  6E21               	movwf	?___ftmul,c
  3474  001CD6  0E00               	movlw	0
  3475  001CD8  6E22               	movwf	?___ftmul+1,c
  3476  001CDA  0E00               	movlw	0
  3477  001CDC  6E23               	movwf	?___ftmul+2,c
  3478  001CDE  0012               	return	
  3479  001CE0                     l601:
  3480  001CE0  502F               	movf	___ftmul@sign,w,c
  3481  001CE2  0F7B               	addlw	123
  3482  001CE4  262A               	addwf	___ftmul@exp,f,c
  3483  001CE6  C023  F02F         	movff	___ftmul@f1+2,___ftmul@sign
  3484  001CEA  5026               	movf	___ftmul@f2+2,w,c
  3485  001CEC  1A2F               	xorwf	___ftmul@sign,f,c
  3486  001CEE  0E80               	movlw	128
  3487  001CF0  162F               	andwf	___ftmul@sign,f,c
  3488  001CF2  8E22               	bsf	___ftmul@f1+1,7,c
  3489  001CF4  8E25               	bsf	___ftmul@f2+1,7,c
  3490  001CF6  0EFF               	movlw	255
  3491  001CF8  1624               	andwf	___ftmul@f2,f,c
  3492  001CFA  0EFF               	movlw	255
  3493  001CFC  1625               	andwf	___ftmul@f2+1,f,c
  3494  001CFE  0E00               	movlw	0
  3495  001D00  1626               	andwf	___ftmul@f2+2,f,c
  3496  001D02  0E00               	movlw	0
  3497  001D04  6E2B               	movwf	___ftmul@f3_as_product,c
  3498  001D06  0E00               	movlw	0
  3499  001D08  6E2C               	movwf	___ftmul@f3_as_product+1,c
  3500  001D0A  0E00               	movlw	0
  3501  001D0C  6E2D               	movwf	___ftmul@f3_as_product+2,c
  3502  001D0E  0E07               	movlw	7
  3503  001D10  6E2E               	movwf	___ftmul@cntr,c
  3504  001D12  A021               	btfss	___ftmul@f1,0,c
  3505  001D14  D006               	goto	l603
  3506  001D16  5024               	movf	___ftmul@f2,w,c
  3507  001D18  262B               	addwf	___ftmul@f3_as_product,f,c
  3508  001D1A  5025               	movf	___ftmul@f2+1,w,c
  3509  001D1C  222C               	addwfc	___ftmul@f3_as_product+1,f,c
  3510  001D1E  5026               	movf	___ftmul@f2+2,w,c
  3511  001D20  222D               	addwfc	___ftmul@f3_as_product+2,f,c
  3512  001D22                     l603:
  3513  001D22  90D8               	bcf	status,0,c
  3514  001D24  3223               	rrcf	___ftmul@f1+2,f,c
  3515  001D26  3222               	rrcf	___ftmul@f1+1,f,c
  3516  001D28  3221               	rrcf	___ftmul@f1,f,c
  3517  001D2A  90D8               	bcf	status,0,c
  3518  001D2C  3624               	rlcf	___ftmul@f2,f,c
  3519  001D2E  3625               	rlcf	___ftmul@f2+1,f,c
  3520  001D30  3626               	rlcf	___ftmul@f2+2,f,c
  3521  001D32  2E2E               	decfsz	___ftmul@cntr,f,c
  3522  001D34  D7EE               	goto	l602
  3523  001D36  0E09               	movlw	9
  3524  001D38  6E2E               	movwf	___ftmul@cntr,c
  3525  001D3A  A021               	btfss	___ftmul@f1,0,c
  3526  001D3C  D006               	goto	l606
  3527  001D3E  5024               	movf	___ftmul@f2,w,c
  3528  001D40  262B               	addwf	___ftmul@f3_as_product,f,c
  3529  001D42  5025               	movf	___ftmul@f2+1,w,c
  3530  001D44  222C               	addwfc	___ftmul@f3_as_product+1,f,c
  3531  001D46  5026               	movf	___ftmul@f2+2,w,c
  3532  001D48  222D               	addwfc	___ftmul@f3_as_product+2,f,c
  3533  001D4A                     l606:
  3534  001D4A  90D8               	bcf	status,0,c
  3535  001D4C  3223               	rrcf	___ftmul@f1+2,f,c
  3536  001D4E  3222               	rrcf	___ftmul@f1+1,f,c
  3537  001D50  3221               	rrcf	___ftmul@f1,f,c
  3538  001D52  90D8               	bcf	status,0,c
  3539  001D54  322D               	rrcf	___ftmul@f3_as_product+2,f,c
  3540  001D56  322C               	rrcf	___ftmul@f3_as_product+1,f,c
  3541  001D58  322B               	rrcf	___ftmul@f3_as_product,f,c
  3542  001D5A  2E2E               	decfsz	___ftmul@cntr,f,c
  3543  001D5C  D7EE               	goto	l605
  3544  001D5E  C02B  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  3545  001D62  C02C  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3546  001D66  C02D  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3547  001D6A  C02A  F004         	movff	___ftmul@exp,___ftpack@exp
  3548  001D6E  C02F  F005         	movff	___ftmul@sign,___ftpack@sign
  3549  001D72  EC7C  F010         	call	___ftpack	;wreg free
  3550  001D76  C001  F021         	movff	?___ftpack,?___ftmul
  3551  001D7A  C002  F022         	movff	?___ftpack+1,?___ftmul+1
  3552  001D7E  C003  F023         	movff	?___ftpack+2,?___ftmul+2
  3553  001D82  0012               	return	
  3554  001D84                     __end_of___ftmul:
  3555                           	opt stack 0
  3556                           tblptru	equ	0xFF8
  3557                           tblptrh	equ	0xFF7
  3558                           tblptrl	equ	0xFF6
  3559                           tablat	equ	0xFF5
  3560                           prodh	equ	0xFF4
  3561                           prodl	equ	0xFF3
  3562                           wreg	equ	0xFE8
  3563                           indf2	equ	0xFDF
  3564                           postinc2	equ	0xFDE
  3565                           postdec2	equ	0xFDD
  3566                           fsr2h	equ	0xFDA
  3567                           fsr2l	equ	0xFD9
  3568                           status	equ	0xFD8
  3569                           
  3570 ;; *************** function ___awmod *****************
  3571 ;; Defined at:
  3572 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  3573 ;; Parameters:    Size  Location     Type
  3574 ;;  dividend        2    0[COMRAM] int 
  3575 ;;  divisor         2    2[COMRAM] int 
  3576 ;; Auto vars:     Size  Location     Type
  3577 ;;  sign            1    5[COMRAM] unsigned char 
  3578 ;;  counter         1    4[COMRAM] unsigned char 
  3579 ;; Return value:  Size  Location     Type
  3580 ;;                  2    0[COMRAM] int 
  3581 ;; Registers used:
  3582 ;;		wreg, status,2, status,0
  3583 ;; Tracked objects:
  3584 ;;		On entry : 0/0
  3585 ;;		On exit  : 0/0
  3586 ;;		Unchanged: 0/0
  3587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3588 ;;      Params:         4       0       0       0       0       0       0       0       0
  3589 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3590 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3591 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3592 ;;Total ram usage:        6 bytes
  3593 ;; Hardware stack levels used:    1
  3594 ;; This function calls:
  3595 ;;		Nothing
  3596 ;; This function is called by:
  3597 ;;		_fround
  3598 ;;		_scale
  3599 ;; This function uses a non-reentrant model
  3600 ;;
  3601                           
  3602                           	psect	text7
  3603  00233C                     __ptext7:
  3604                           	opt stack 0
  3605  00233C                     ___awmod:
  3606                           	opt stack 28
  3607                           
  3608                           ;incstack = 0
  3609  00233C  0E00               	movlw	0
  3610  00233E  6E06               	movwf	___awmod@sign,c
  3611  002340  AE02               	btfss	___awmod@dividend+1,7,c
  3612  002342  D006               	goto	l452
  3613  002344  6C01               	negf	___awmod@dividend,c
  3614  002346  1E02               	comf	___awmod@dividend+1,f,c
  3615  002348  B0D8               	btfsc	status,0,c
  3616  00234A  2A02               	incf	___awmod@dividend+1,f,c
  3617  00234C  0E01               	movlw	1
  3618  00234E  6E06               	movwf	___awmod@sign,c
  3619  002350                     l452:
  3620  002350  AE04               	btfss	___awmod@divisor+1,7,c
  3621  002352  D004               	goto	l453
  3622  002354  6C03               	negf	___awmod@divisor,c
  3623  002356  1E04               	comf	___awmod@divisor+1,f,c
  3624  002358  B0D8               	btfsc	status,0,c
  3625  00235A  2A04               	incf	___awmod@divisor+1,f,c
  3626  00235C                     l453:
  3627  00235C  5003               	movf	___awmod@divisor,w,c
  3628  00235E  1004               	iorwf	___awmod@divisor+1,w,c
  3629  002360  B4D8               	btfsc	status,2,c
  3630  002362  D018               	goto	l460
  3631  002364  0E01               	movlw	1
  3632  002366  6E05               	movwf	___awmod@counter,c
  3633  002368  D004               	goto	l455
  3634  00236A  90D8               	bcf	status,0,c
  3635  00236C  3603               	rlcf	___awmod@divisor,f,c
  3636  00236E  3604               	rlcf	___awmod@divisor+1,f,c
  3637  002370  2A05               	incf	___awmod@counter,f,c
  3638  002372                     l455:
  3639  002372  AE04               	btfss	___awmod@divisor+1,7,c
  3640  002374  D7FA               	goto	l456
  3641  002376                     u2180:
  3642  002376  5003               	movf	___awmod@divisor,w,c
  3643  002378  5C01               	subwf	___awmod@dividend,w,c
  3644  00237A  5004               	movf	___awmod@divisor+1,w,c
  3645  00237C  5802               	subwfb	___awmod@dividend+1,w,c
  3646  00237E  A0D8               	btfss	status,0,c
  3647  002380  D004               	goto	l459
  3648  002382  5003               	movf	___awmod@divisor,w,c
  3649  002384  5E01               	subwf	___awmod@dividend,f,c
  3650  002386  5004               	movf	___awmod@divisor+1,w,c
  3651  002388  5A02               	subwfb	___awmod@dividend+1,f,c
  3652  00238A                     l459:
  3653  00238A  90D8               	bcf	status,0,c
  3654  00238C  3204               	rrcf	___awmod@divisor+1,f,c
  3655  00238E  3203               	rrcf	___awmod@divisor,f,c
  3656  002390  2E05               	decfsz	___awmod@counter,f,c
  3657  002392  D7F1               	goto	u2180
  3658  002394                     l460:
  3659  002394  5006               	movf	___awmod@sign,w,c
  3660  002396  B4D8               	btfsc	status,2,c
  3661  002398  D004               	goto	l461
  3662  00239A  6C01               	negf	___awmod@dividend,c
  3663  00239C  1E02               	comf	___awmod@dividend+1,f,c
  3664  00239E  B0D8               	btfsc	status,0,c
  3665  0023A0  2A02               	incf	___awmod@dividend+1,f,c
  3666  0023A2                     l461:
  3667  0023A2  C001  F001         	movff	___awmod@dividend,?___awmod
  3668  0023A6  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  3669  0023AA  0012               	return	
  3670  0023AC                     __end_of___awmod:
  3671                           	opt stack 0
  3672                           tblptru	equ	0xFF8
  3673                           tblptrh	equ	0xFF7
  3674                           tblptrl	equ	0xFF6
  3675                           tablat	equ	0xFF5
  3676                           prodh	equ	0xFF4
  3677                           prodl	equ	0xFF3
  3678                           wreg	equ	0xFE8
  3679                           indf2	equ	0xFDF
  3680                           postinc2	equ	0xFDE
  3681                           postdec2	equ	0xFDD
  3682                           fsr2h	equ	0xFDA
  3683                           fsr2l	equ	0xFD9
  3684                           status	equ	0xFD8
  3685                           
  3686 ;; *************** function ___awdiv *****************
  3687 ;; Defined at:
  3688 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  3689 ;; Parameters:    Size  Location     Type
  3690 ;;  dividend        2    6[COMRAM] int 
  3691 ;;  divisor         2    8[COMRAM] int 
  3692 ;; Auto vars:     Size  Location     Type
  3693 ;;  quotient        2   12[COMRAM] int 
  3694 ;;  sign            1   11[COMRAM] unsigned char 
  3695 ;;  counter         1   10[COMRAM] unsigned char 
  3696 ;; Return value:  Size  Location     Type
  3697 ;;                  2    6[COMRAM] int 
  3698 ;; Registers used:
  3699 ;;		wreg, status,2, status,0
  3700 ;; Tracked objects:
  3701 ;;		On entry : 0/0
  3702 ;;		On exit  : 0/0
  3703 ;;		Unchanged: 0/0
  3704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3705 ;;      Params:         4       0       0       0       0       0       0       0       0
  3706 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3707 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3708 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3709 ;;Total ram usage:        8 bytes
  3710 ;; Hardware stack levels used:    1
  3711 ;; This function calls:
  3712 ;;		Nothing
  3713 ;; This function is called by:
  3714 ;;		_fround
  3715 ;;		_scale
  3716 ;;		_sprintf
  3717 ;; This function uses a non-reentrant model
  3718 ;;
  3719                           
  3720                           	psect	text8
  3721  002236                     __ptext8:
  3722                           	opt stack 0
  3723  002236                     ___awdiv:
  3724                           	opt stack 28
  3725                           
  3726                           ;incstack = 0
  3727  002236  0E00               	movlw	0
  3728  002238  6E0C               	movwf	___awdiv@sign,c
  3729  00223A  AE0A               	btfss	___awdiv@divisor+1,7,c
  3730  00223C  D006               	goto	l439
  3731  00223E  6C09               	negf	___awdiv@divisor,c
  3732  002240  1E0A               	comf	___awdiv@divisor+1,f,c
  3733  002242  B0D8               	btfsc	status,0,c
  3734  002244  2A0A               	incf	___awdiv@divisor+1,f,c
  3735  002246  0E01               	movlw	1
  3736  002248  6E0C               	movwf	___awdiv@sign,c
  3737  00224A                     l439:
  3738  00224A  AE08               	btfss	___awdiv@dividend+1,7,c
  3739  00224C  D006               	goto	l440
  3740  00224E  6C07               	negf	___awdiv@dividend,c
  3741  002250  1E08               	comf	___awdiv@dividend+1,f,c
  3742  002252  B0D8               	btfsc	status,0,c
  3743  002254  2A08               	incf	___awdiv@dividend+1,f,c
  3744  002256  0E01               	movlw	1
  3745  002258  1A0C               	xorwf	___awdiv@sign,f,c
  3746  00225A                     l440:
  3747  00225A  0E00               	movlw	0
  3748  00225C  6E0E               	movwf	___awdiv@quotient+1,c
  3749  00225E  0E00               	movlw	0
  3750  002260  6E0D               	movwf	___awdiv@quotient,c
  3751  002262  5009               	movf	___awdiv@divisor,w,c
  3752  002264  100A               	iorwf	___awdiv@divisor+1,w,c
  3753  002266  B4D8               	btfsc	status,2,c
  3754  002268  D01C               	goto	l447
  3755  00226A  0E01               	movlw	1
  3756  00226C  6E0B               	movwf	___awdiv@counter,c
  3757  00226E  D004               	goto	l442
  3758  002270  90D8               	bcf	status,0,c
  3759  002272  3609               	rlcf	___awdiv@divisor,f,c
  3760  002274  360A               	rlcf	___awdiv@divisor+1,f,c
  3761  002276  2A0B               	incf	___awdiv@counter,f,c
  3762  002278                     l442:
  3763  002278  AE0A               	btfss	___awdiv@divisor+1,7,c
  3764  00227A  D7FA               	goto	l443
  3765  00227C                     u2120:
  3766  00227C  90D8               	bcf	status,0,c
  3767  00227E  360D               	rlcf	___awdiv@quotient,f,c
  3768  002280  360E               	rlcf	___awdiv@quotient+1,f,c
  3769  002282  5009               	movf	___awdiv@divisor,w,c
  3770  002284  5C07               	subwf	___awdiv@dividend,w,c
  3771  002286  500A               	movf	___awdiv@divisor+1,w,c
  3772  002288  5808               	subwfb	___awdiv@dividend+1,w,c
  3773  00228A  A0D8               	btfss	status,0,c
  3774  00228C  D005               	goto	l446
  3775  00228E  5009               	movf	___awdiv@divisor,w,c
  3776  002290  5E07               	subwf	___awdiv@dividend,f,c
  3777  002292  500A               	movf	___awdiv@divisor+1,w,c
  3778  002294  5A08               	subwfb	___awdiv@dividend+1,f,c
  3779  002296  800D               	bsf	___awdiv@quotient,0,c
  3780  002298                     l446:
  3781  002298  90D8               	bcf	status,0,c
  3782  00229A  320A               	rrcf	___awdiv@divisor+1,f,c
  3783  00229C  3209               	rrcf	___awdiv@divisor,f,c
  3784  00229E  2E0B               	decfsz	___awdiv@counter,f,c
  3785  0022A0  D7ED               	goto	u2120
  3786  0022A2                     l447:
  3787  0022A2  500C               	movf	___awdiv@sign,w,c
  3788  0022A4  B4D8               	btfsc	status,2,c
  3789  0022A6  D004               	goto	l448
  3790  0022A8  6C0D               	negf	___awdiv@quotient,c
  3791  0022AA  1E0E               	comf	___awdiv@quotient+1,f,c
  3792  0022AC  B0D8               	btfsc	status,0,c
  3793  0022AE  2A0E               	incf	___awdiv@quotient+1,f,c
  3794  0022B0                     l448:
  3795  0022B0  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  3796  0022B4  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  3797  0022B8  0012               	return	
  3798  0022BA                     __end_of___awdiv:
  3799                           	opt stack 0
  3800                           tblptru	equ	0xFF8
  3801                           tblptrh	equ	0xFF7
  3802                           tblptrl	equ	0xFF6
  3803                           tablat	equ	0xFF5
  3804                           prodh	equ	0xFF4
  3805                           prodl	equ	0xFF3
  3806                           wreg	equ	0xFE8
  3807                           indf2	equ	0xFDF
  3808                           postinc2	equ	0xFDE
  3809                           postdec2	equ	0xFDD
  3810                           fsr2h	equ	0xFDA
  3811                           fsr2l	equ	0xFD9
  3812                           status	equ	0xFD8
  3813                           
  3814 ;; *************** function __tdiv_to_l_ *****************
  3815 ;; Defined at:
  3816 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdivl.c"
  3817 ;; Parameters:    Size  Location     Type
  3818 ;;  f1              3    0[COMRAM] float 
  3819 ;;  f2              3    3[COMRAM] float 
  3820 ;; Auto vars:     Size  Location     Type
  3821 ;;  quot            4    9[COMRAM] unsigned long 
  3822 ;;  exp1            1   14[COMRAM] unsigned char 
  3823 ;;  cntr            1   13[COMRAM] unsigned char 
  3824 ;; Return value:  Size  Location     Type
  3825 ;;                  4    0[COMRAM] unsigned long 
  3826 ;; Registers used:
  3827 ;;		wreg, status,2, status,0
  3828 ;; Tracked objects:
  3829 ;;		On entry : 0/0
  3830 ;;		On exit  : 0/0
  3831 ;;		Unchanged: 0/0
  3832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3833 ;;      Params:         6       0       0       0       0       0       0       0       0
  3834 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3835 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3836 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3837 ;;Total ram usage:       15 bytes
  3838 ;; Hardware stack levels used:    1
  3839 ;; This function calls:
  3840 ;;		Nothing
  3841 ;; This function is called by:
  3842 ;;		_sprintf
  3843 ;; This function uses a non-reentrant model
  3844 ;;
  3845                           
  3846                           	psect	text9
  3847  001A36                     __ptext9:
  3848                           	opt stack 0
  3849  001A36                     __tdiv_to_l_:
  3850                           	opt stack 29
  3851                           
  3852                           ;incstack = 0
  3853  001A36  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  3854  001A3A  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3855  001A3C  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3856  001A3E  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  3857  001A40  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3858  001A42  E301               	bnc	u2311
  3859  001A44  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3860  001A46                     u2311:
  3861  001A46  5007               	movf	??__tdiv_to_l_,w,c
  3862  001A48  6E0F               	movwf	__tdiv_to_l_@exp1,c
  3863  001A4A  500F               	movf	__tdiv_to_l_@exp1,w,c
  3864  001A4C  A4D8               	btfss	status,2,c
  3865  001A4E  D009               	goto	l575
  3866  001A50  0E00               	movlw	0
  3867  001A52  6E01               	movwf	?__tdiv_to_l_,c
  3868  001A54  0E00               	movlw	0
  3869  001A56  6E02               	movwf	?__tdiv_to_l_+1,c
  3870  001A58  0E00               	movlw	0
  3871  001A5A  6E03               	movwf	?__tdiv_to_l_+2,c
  3872  001A5C  0E00               	movlw	0
  3873  001A5E  6E04               	movwf	?__tdiv_to_l_+3,c
  3874  001A60  0012               	return	
  3875  001A62                     l575:
  3876  001A62  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  3877  001A66  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3878  001A68  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3879  001A6A  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  3880  001A6C  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3881  001A6E  E301               	bnc	u2331
  3882  001A70  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3883  001A72                     u2331:
  3884  001A72  5007               	movf	??__tdiv_to_l_,w,c
  3885  001A74  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3886  001A76  500E               	movf	__tdiv_to_l_@cntr,w,c
  3887  001A78  A4D8               	btfss	status,2,c
  3888  001A7A  D009               	goto	l577
  3889  001A7C  0E00               	movlw	0
  3890  001A7E  6E01               	movwf	?__tdiv_to_l_,c
  3891  001A80  0E00               	movlw	0
  3892  001A82  6E02               	movwf	?__tdiv_to_l_+1,c
  3893  001A84  0E00               	movlw	0
  3894  001A86  6E03               	movwf	?__tdiv_to_l_+2,c
  3895  001A88  0E00               	movlw	0
  3896  001A8A  6E04               	movwf	?__tdiv_to_l_+3,c
  3897  001A8C  0012               	return	
  3898  001A8E                     l577:
  3899  001A8E  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  3900  001A90  0EFF               	movlw	255
  3901  001A92  1601               	andwf	__tdiv_to_l_@f1,f,c
  3902  001A94  0EFF               	movlw	255
  3903  001A96  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  3904  001A98  0E00               	movlw	0
  3905  001A9A  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  3906  001A9C  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  3907  001A9E  0EFF               	movlw	255
  3908  001AA0  1604               	andwf	__tdiv_to_l_@f2,f,c
  3909  001AA2  0EFF               	movlw	255
  3910  001AA4  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  3911  001AA6  0E00               	movlw	0
  3912  001AA8  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  3913  001AAA  0E00               	movlw	0
  3914  001AAC  6E0A               	movwf	__tdiv_to_l_@quot,c
  3915  001AAE  0E00               	movlw	0
  3916  001AB0  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  3917  001AB2  0E00               	movlw	0
  3918  001AB4  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  3919  001AB6  0E00               	movlw	0
  3920  001AB8  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  3921  001ABA  0E7F               	movlw	127
  3922  001ABC  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  3923  001ABE  500E               	movf	__tdiv_to_l_@cntr,w,c
  3924  001AC0  0F98               	addlw	152
  3925  001AC2  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  3926  001AC4  0E18               	movlw	24
  3927  001AC6  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3928  001AC8                     l578:
  3929  001AC8  90D8               	bcf	status,0,c
  3930  001ACA  360A               	rlcf	__tdiv_to_l_@quot,f,c
  3931  001ACC  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  3932  001ACE  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  3933  001AD0  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  3934  001AD2  5004               	movf	__tdiv_to_l_@f2,w,c
  3935  001AD4  5C01               	subwf	__tdiv_to_l_@f1,w,c
  3936  001AD6  5005               	movf	__tdiv_to_l_@f2+1,w,c
  3937  001AD8  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  3938  001ADA  5006               	movf	__tdiv_to_l_@f2+2,w,c
  3939  001ADC  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  3940  001ADE  A0D8               	btfss	status,0,c
  3941  001AE0  D007               	goto	l579
  3942  001AE2  5004               	movf	__tdiv_to_l_@f2,w,c
  3943  001AE4  5E01               	subwf	__tdiv_to_l_@f1,f,c
  3944  001AE6  5005               	movf	__tdiv_to_l_@f2+1,w,c
  3945  001AE8  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  3946  001AEA  5006               	movf	__tdiv_to_l_@f2+2,w,c
  3947  001AEC  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  3948  001AEE  800A               	bsf	__tdiv_to_l_@quot,0,c
  3949  001AF0                     l579:
  3950  001AF0  90D8               	bcf	status,0,c
  3951  001AF2  3601               	rlcf	__tdiv_to_l_@f1,f,c
  3952  001AF4  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  3953  001AF6  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  3954  001AF8  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  3955  001AFA  D7E6               	goto	l578
  3956  001AFC  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  3957  001AFE  D016               	goto	l581
  3958  001B00  500F               	movf	__tdiv_to_l_@exp1,w,c
  3959  001B02  0A80               	xorlw	128
  3960  001B04  0F97               	addlw	151
  3961  001B06  B0D8               	btfsc	status,0,c
  3962  001B08  D009               	goto	l582
  3963  001B0A  0E00               	movlw	0
  3964  001B0C  6E01               	movwf	?__tdiv_to_l_,c
  3965  001B0E  0E00               	movlw	0
  3966  001B10  6E02               	movwf	?__tdiv_to_l_+1,c
  3967  001B12  0E00               	movlw	0
  3968  001B14  6E03               	movwf	?__tdiv_to_l_+2,c
  3969  001B16  0E00               	movlw	0
  3970  001B18  6E04               	movwf	?__tdiv_to_l_+3,c
  3971  001B1A  0012               	return	
  3972  001B1C                     l582:
  3973  001B1C  90D8               	bcf	status,0,c
  3974  001B1E  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  3975  001B20  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  3976  001B22  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  3977  001B24  320A               	rrcf	__tdiv_to_l_@quot,f,c
  3978  001B26  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  3979  001B28  D7F9               	goto	l582
  3980  001B2A  D015               	goto	u2390
  3981  001B2C                     l581:
  3982  001B2C  0E17               	movlw	23
  3983  001B2E  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  3984  001B30  D00F               	goto	l587
  3985  001B32  0E00               	movlw	0
  3986  001B34  6E01               	movwf	?__tdiv_to_l_,c
  3987  001B36  0E00               	movlw	0
  3988  001B38  6E02               	movwf	?__tdiv_to_l_+1,c
  3989  001B3A  0E00               	movlw	0
  3990  001B3C  6E03               	movwf	?__tdiv_to_l_+2,c
  3991  001B3E  0E00               	movlw	0
  3992  001B40  6E04               	movwf	?__tdiv_to_l_+3,c
  3993  001B42  0012               	return	
  3994  001B44  90D8               	bcf	status,0,c
  3995  001B46  360A               	rlcf	__tdiv_to_l_@quot,f,c
  3996  001B48  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  3997  001B4A  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  3998  001B4C  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  3999  001B4E  060F               	decf	__tdiv_to_l_@exp1,f,c
  4000  001B50                     l587:
  4001  001B50  500F               	movf	__tdiv_to_l_@exp1,w,c
  4002  001B52  A4D8               	btfss	status,2,c
  4003  001B54  D7F7               	goto	l588
  4004  001B56                     u2390:
  4005  001B56  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4006  001B5A  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4007  001B5E  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4008  001B62  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4009  001B66  0012               	return		;funcret
  4010  001B68                     __end_of__tdiv_to_l_:
  4011                           	opt stack 0
  4012                           tblptru	equ	0xFF8
  4013                           tblptrh	equ	0xFF7
  4014                           tblptrl	equ	0xFF6
  4015                           tablat	equ	0xFF5
  4016                           prodh	equ	0xFF4
  4017                           prodl	equ	0xFF3
  4018                           wreg	equ	0xFE8
  4019                           indf2	equ	0xFDF
  4020                           postinc2	equ	0xFDE
  4021                           postdec2	equ	0xFDD
  4022                           fsr2h	equ	0xFDA
  4023                           fsr2l	equ	0xFD9
  4024                           status	equ	0xFD8
  4025                           
  4026 ;; *************** function __div_to_l_ *****************
  4027 ;; Defined at:
  4028 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fldivl.c"
  4029 ;; Parameters:    Size  Location     Type
  4030 ;;  f1              3    0[COMRAM] unsigned long 
  4031 ;;  f2              3    3[COMRAM] unsigned long 
  4032 ;; Auto vars:     Size  Location     Type
  4033 ;;  quot            4    6[COMRAM] unsigned long 
  4034 ;;  exp1            1   11[COMRAM] unsigned char 
  4035 ;;  cntr            1   10[COMRAM] unsigned char 
  4036 ;; Return value:  Size  Location     Type
  4037 ;;                  4    0[COMRAM] unsigned long 
  4038 ;; Registers used:
  4039 ;;		wreg, status,2, status,0
  4040 ;; Tracked objects:
  4041 ;;		On entry : 0/0
  4042 ;;		On exit  : 0/0
  4043 ;;		Unchanged: 0/0
  4044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4045 ;;      Params:         6       0       0       0       0       0       0       0       0
  4046 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4047 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4048 ;;      Totals:        12       0       0       0       0       0       0       0       0
  4049 ;;Total ram usage:       12 bytes
  4050 ;; Hardware stack levels used:    1
  4051 ;; This function calls:
  4052 ;;		Nothing
  4053 ;; This function is called by:
  4054 ;;		_sprintf
  4055 ;; This function uses a non-reentrant model
  4056 ;;
  4057                           
  4058                           	psect	text10
  4059  001B68                     __ptext10:
  4060                           	opt stack 0
  4061  001B68                     __div_to_l_:
  4062                           	opt stack 29
  4063                           
  4064                           ;incstack = 0
  4065  001B68  3403               	rlcf	__div_to_l_@f1+2,w,c
  4066  001B6A  3404               	rlcf	__div_to_l_@f1+3,w,c
  4067  001B6C  6E0C               	movwf	__div_to_l_@exp1,c
  4068  001B6E  500C               	movf	__div_to_l_@exp1,w,c
  4069  001B70  A4D8               	btfss	status,2,c
  4070  001B72  D009               	goto	l471
  4071  001B74  0E00               	movlw	0
  4072  001B76  6E01               	movwf	?__div_to_l_,c
  4073  001B78  0E00               	movlw	0
  4074  001B7A  6E02               	movwf	?__div_to_l_+1,c
  4075  001B7C  0E00               	movlw	0
  4076  001B7E  6E03               	movwf	?__div_to_l_+2,c
  4077  001B80  0E00               	movlw	0
  4078  001B82  6E04               	movwf	?__div_to_l_+3,c
  4079  001B84  0012               	return	
  4080  001B86                     l471:
  4081  001B86  3406               	rlcf	__div_to_l_@f2+2,w,c
  4082  001B88  3407               	rlcf	__div_to_l_@f2+3,w,c
  4083  001B8A  6E0B               	movwf	__div_to_l_@cntr,c
  4084  001B8C  500B               	movf	__div_to_l_@cntr,w,c
  4085  001B8E  A4D8               	btfss	status,2,c
  4086  001B90  D009               	goto	l473
  4087  001B92  0E00               	movlw	0
  4088  001B94  6E01               	movwf	?__div_to_l_,c
  4089  001B96  0E00               	movlw	0
  4090  001B98  6E02               	movwf	?__div_to_l_+1,c
  4091  001B9A  0E00               	movlw	0
  4092  001B9C  6E03               	movwf	?__div_to_l_+2,c
  4093  001B9E  0E00               	movlw	0
  4094  001BA0  6E04               	movwf	?__div_to_l_+3,c
  4095  001BA2  0012               	return	
  4096  001BA4                     l473:
  4097  001BA4  8E03               	bsf	__div_to_l_@f1+2,7,c
  4098  001BA6  0EFF               	movlw	255
  4099  001BA8  1601               	andwf	__div_to_l_@f1,f,c
  4100  001BAA  0EFF               	movlw	255
  4101  001BAC  1602               	andwf	__div_to_l_@f1+1,f,c
  4102  001BAE  0EFF               	movlw	255
  4103  001BB0  1603               	andwf	__div_to_l_@f1+2,f,c
  4104  001BB2  0E00               	movlw	0
  4105  001BB4  1604               	andwf	__div_to_l_@f1+3,f,c
  4106  001BB6  8E06               	bsf	__div_to_l_@f2+2,7,c
  4107  001BB8  0EFF               	movlw	255
  4108  001BBA  1604               	andwf	__div_to_l_@f2,f,c
  4109  001BBC  0EFF               	movlw	255
  4110  001BBE  1605               	andwf	__div_to_l_@f2+1,f,c
  4111  001BC0  0EFF               	movlw	255
  4112  001BC2  1606               	andwf	__div_to_l_@f2+2,f,c
  4113  001BC4  0E00               	movlw	0
  4114  001BC6  1607               	andwf	__div_to_l_@f2+3,f,c
  4115  001BC8  0E00               	movlw	0
  4116  001BCA  6E07               	movwf	__div_to_l_@quot,c
  4117  001BCC  0E00               	movlw	0
  4118  001BCE  6E08               	movwf	__div_to_l_@quot+1,c
  4119  001BD0  0E00               	movlw	0
  4120  001BD2  6E09               	movwf	__div_to_l_@quot+2,c
  4121  001BD4  0E00               	movlw	0
  4122  001BD6  6E0A               	movwf	__div_to_l_@quot+3,c
  4123  001BD8  0E7F               	movlw	127
  4124  001BDA  5E0C               	subwf	__div_to_l_@exp1,f,c
  4125  001BDC  500B               	movf	__div_to_l_@cntr,w,c
  4126  001BDE  0FA0               	addlw	160
  4127  001BE0  5E0C               	subwf	__div_to_l_@exp1,f,c
  4128  001BE2  0E20               	movlw	32
  4129  001BE4  6E0B               	movwf	__div_to_l_@cntr,c
  4130  001BE6  90D8               	bcf	status,0,c
  4131  001BE8  3607               	rlcf	__div_to_l_@quot,f,c
  4132  001BEA  3608               	rlcf	__div_to_l_@quot+1,f,c
  4133  001BEC  3609               	rlcf	__div_to_l_@quot+2,f,c
  4134  001BEE  360A               	rlcf	__div_to_l_@quot+3,f,c
  4135  001BF0  5004               	movf	__div_to_l_@f2,w,c
  4136  001BF2  5C01               	subwf	__div_to_l_@f1,w,c
  4137  001BF4  5005               	movf	__div_to_l_@f2+1,w,c
  4138  001BF6  5802               	subwfb	__div_to_l_@f1+1,w,c
  4139  001BF8  5006               	movf	__div_to_l_@f2+2,w,c
  4140  001BFA  5803               	subwfb	__div_to_l_@f1+2,w,c
  4141  001BFC  5007               	movf	__div_to_l_@f2+3,w,c
  4142  001BFE  5804               	subwfb	__div_to_l_@f1+3,w,c
  4143  001C00  A0D8               	btfss	status,0,c
  4144  001C02  D009               	goto	l475
  4145  001C04  5004               	movf	__div_to_l_@f2,w,c
  4146  001C06  5E01               	subwf	__div_to_l_@f1,f,c
  4147  001C08  5005               	movf	__div_to_l_@f2+1,w,c
  4148  001C0A  5A02               	subwfb	__div_to_l_@f1+1,f,c
  4149  001C0C  5006               	movf	__div_to_l_@f2+2,w,c
  4150  001C0E  5A03               	subwfb	__div_to_l_@f1+2,f,c
  4151  001C10  5007               	movf	__div_to_l_@f2+3,w,c
  4152  001C12  5A04               	subwfb	__div_to_l_@f1+3,f,c
  4153  001C14  8007               	bsf	__div_to_l_@quot,0,c
  4154  001C16                     l475:
  4155  001C16  90D8               	bcf	status,0,c
  4156  001C18  3601               	rlcf	__div_to_l_@f1,f,c
  4157  001C1A  3602               	rlcf	__div_to_l_@f1+1,f,c
  4158  001C1C  3603               	rlcf	__div_to_l_@f1+2,f,c
  4159  001C1E  3604               	rlcf	__div_to_l_@f1+3,f,c
  4160  001C20  2E0B               	decfsz	__div_to_l_@cntr,f,c
  4161  001C22  D7E1               	goto	l474
  4162  001C24  AE0C               	btfss	__div_to_l_@exp1,7,c
  4163  001C26  D016               	goto	l477
  4164  001C28  500C               	movf	__div_to_l_@exp1,w,c
  4165  001C2A  0A80               	xorlw	128
  4166  001C2C  0F9F               	addlw	159
  4167  001C2E  B0D8               	btfsc	status,0,c
  4168  001C30  D009               	goto	l478
  4169  001C32  0E00               	movlw	0
  4170  001C34  6E01               	movwf	?__div_to_l_,c
  4171  001C36  0E00               	movlw	0
  4172  001C38  6E02               	movwf	?__div_to_l_+1,c
  4173  001C3A  0E00               	movlw	0
  4174  001C3C  6E03               	movwf	?__div_to_l_+2,c
  4175  001C3E  0E00               	movlw	0
  4176  001C40  6E04               	movwf	?__div_to_l_+3,c
  4177  001C42  0012               	return	
  4178  001C44                     l478:
  4179  001C44  90D8               	bcf	status,0,c
  4180  001C46  320A               	rrcf	__div_to_l_@quot+3,f,c
  4181  001C48  3209               	rrcf	__div_to_l_@quot+2,f,c
  4182  001C4A  3208               	rrcf	__div_to_l_@quot+1,f,c
  4183  001C4C  3207               	rrcf	__div_to_l_@quot,f,c
  4184  001C4E  3E0C               	incfsz	__div_to_l_@exp1,f,c
  4185  001C50  D7F9               	goto	l478
  4186  001C52  D015               	goto	u2460
  4187  001C54                     l477:
  4188  001C54  0E1F               	movlw	31
  4189  001C56  640C               	cpfsgt	__div_to_l_@exp1,c
  4190  001C58  D00F               	goto	l483
  4191  001C5A  0E00               	movlw	0
  4192  001C5C  6E01               	movwf	?__div_to_l_,c
  4193  001C5E  0E00               	movlw	0
  4194  001C60  6E02               	movwf	?__div_to_l_+1,c
  4195  001C62  0E00               	movlw	0
  4196  001C64  6E03               	movwf	?__div_to_l_+2,c
  4197  001C66  0E00               	movlw	0
  4198  001C68  6E04               	movwf	?__div_to_l_+3,c
  4199  001C6A  0012               	return	
  4200  001C6C  90D8               	bcf	status,0,c
  4201  001C6E  3607               	rlcf	__div_to_l_@quot,f,c
  4202  001C70  3608               	rlcf	__div_to_l_@quot+1,f,c
  4203  001C72  3609               	rlcf	__div_to_l_@quot+2,f,c
  4204  001C74  360A               	rlcf	__div_to_l_@quot+3,f,c
  4205  001C76  060C               	decf	__div_to_l_@exp1,f,c
  4206  001C78                     l483:
  4207  001C78  500C               	movf	__div_to_l_@exp1,w,c
  4208  001C7A  A4D8               	btfss	status,2,c
  4209  001C7C  D7F7               	goto	l484
  4210  001C7E                     u2460:
  4211  001C7E  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  4212  001C82  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4213  001C86  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4214  001C8A  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4215  001C8E  0012               	return		;funcret
  4216  001C90                     __end_of__div_to_l_:
  4217                           	opt stack 0
  4218                           tblptru	equ	0xFF8
  4219                           tblptrh	equ	0xFF7
  4220                           tblptrl	equ	0xFF6
  4221                           tablat	equ	0xFF5
  4222                           prodh	equ	0xFF4
  4223                           prodl	equ	0xFF3
  4224                           wreg	equ	0xFE8
  4225                           indf2	equ	0xFDF
  4226                           postinc2	equ	0xFDE
  4227                           postdec2	equ	0xFDD
  4228                           fsr2h	equ	0xFDA
  4229                           fsr2l	equ	0xFD9
  4230                           status	equ	0xFD8
  4231                           
  4232 ;; *************** function ___lltoft *****************
  4233 ;; Defined at:
  4234 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
  4235 ;; Parameters:    Size  Location     Type
  4236 ;;  c               4    8[COMRAM] unsigned long 
  4237 ;; Auto vars:     Size  Location     Type
  4238 ;;  exp             1   16[COMRAM] unsigned char 
  4239 ;; Return value:  Size  Location     Type
  4240 ;;                  3    8[COMRAM] float 
  4241 ;; Registers used:
  4242 ;;		wreg, status,2, status,0, cstack
  4243 ;; Tracked objects:
  4244 ;;		On entry : 0/0
  4245 ;;		On exit  : 0/0
  4246 ;;		Unchanged: 0/0
  4247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4248 ;;      Params:         4       0       0       0       0       0       0       0       0
  4249 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4250 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4251 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4252 ;;Total ram usage:        9 bytes
  4253 ;; Hardware stack levels used:    1
  4254 ;; Hardware stack levels required when called:    1
  4255 ;; This function calls:
  4256 ;;		___ftpack
  4257 ;; This function is called by:
  4258 ;;		_main
  4259 ;;		_sprintf
  4260 ;; This function uses a non-reentrant model
  4261 ;;
  4262                           
  4263                           	psect	text11
  4264  0025BE                     __ptext11:
  4265                           	opt stack 0
  4266  0025BE                     ___lltoft:
  4267                           	opt stack 28
  4268                           
  4269                           ;incstack = 0
  4270  0025BE  0E8E               	movlw	142
  4271  0025C0  6E11               	movwf	___lltoft@exp,c
  4272  0025C2  D006               	goto	l682
  4273  0025C4  90D8               	bcf	status,0,c
  4274  0025C6  320C               	rrcf	___lltoft@c+3,f,c
  4275  0025C8  320B               	rrcf	___lltoft@c+2,f,c
  4276  0025CA  320A               	rrcf	___lltoft@c+1,f,c
  4277  0025CC  3209               	rrcf	___lltoft@c,f,c
  4278  0025CE  2A11               	incf	___lltoft@exp,f,c
  4279  0025D0                     l682:
  4280  0025D0  0E00               	movlw	0
  4281  0025D2  1409               	andwf	___lltoft@c,w,c
  4282  0025D4  6E0D               	movwf	??___lltoft& (0+255),c
  4283  0025D6  0E00               	movlw	0
  4284  0025D8  140A               	andwf	___lltoft@c+1,w,c
  4285  0025DA  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  4286  0025DC  0E00               	movlw	0
  4287  0025DE  140B               	andwf	___lltoft@c+2,w,c
  4288  0025E0  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  4289  0025E2  0EFF               	movlw	255
  4290  0025E4  140C               	andwf	___lltoft@c+3,w,c
  4291  0025E6  6E10               	movwf	(??___lltoft+3)& (0+255),c
  4292  0025E8  500D               	movf	??___lltoft,w,c
  4293  0025EA  100E               	iorwf	??___lltoft+1,w,c
  4294  0025EC  100F               	iorwf	??___lltoft+2,w,c
  4295  0025EE  1010               	iorwf	??___lltoft+3,w,c
  4296  0025F0  A4D8               	btfss	status,2,c
  4297  0025F2  D7E8               	goto	l683
  4298  0025F4  C009  F001         	movff	___lltoft@c,___ftpack@arg
  4299  0025F8  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  4300  0025FC  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  4301  002600  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  4302  002604  0E00               	movlw	0
  4303  002606  6E05               	movwf	___ftpack@sign,c
  4304  002608  EC7C  F010         	call	___ftpack	;wreg free
  4305  00260C  C001  F009         	movff	?___ftpack,?___lltoft
  4306  002610  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  4307  002614  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  4308  002618  0012               	return	
  4309  00261A                     __end_of___lltoft:
  4310                           	opt stack 0
  4311                           tblptru	equ	0xFF8
  4312                           tblptrh	equ	0xFF7
  4313                           tblptrl	equ	0xFF6
  4314                           tablat	equ	0xFF5
  4315                           prodh	equ	0xFF4
  4316                           prodl	equ	0xFF3
  4317                           wreg	equ	0xFE8
  4318                           indf2	equ	0xFDF
  4319                           postinc2	equ	0xFDE
  4320                           postdec2	equ	0xFDD
  4321                           fsr2h	equ	0xFDA
  4322                           fsr2l	equ	0xFD9
  4323                           status	equ	0xFD8
  4324                           
  4325 ;; *************** function ___llmod *****************
  4326 ;; Defined at:
  4327 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  4328 ;; Parameters:    Size  Location     Type
  4329 ;;  dividend        4    0[COMRAM] unsigned long 
  4330 ;;  divisor         4    4[COMRAM] unsigned long 
  4331 ;; Auto vars:     Size  Location     Type
  4332 ;;  counter         1    8[COMRAM] unsigned char 
  4333 ;; Return value:  Size  Location     Type
  4334 ;;                  4    0[COMRAM] unsigned long 
  4335 ;; Registers used:
  4336 ;;		wreg, status,2, status,0
  4337 ;; Tracked objects:
  4338 ;;		On entry : 0/0
  4339 ;;		On exit  : 0/0
  4340 ;;		Unchanged: 0/0
  4341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4342 ;;      Params:         8       0       0       0       0       0       0       0       0
  4343 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4344 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4345 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4346 ;;Total ram usage:        9 bytes
  4347 ;; Hardware stack levels used:    1
  4348 ;; This function calls:
  4349 ;;		Nothing
  4350 ;; This function is called by:
  4351 ;;		_sprintf
  4352 ;; This function uses a non-reentrant model
  4353 ;;
  4354                           
  4355                           	psect	text12
  4356  0024F2                     __ptext12:
  4357                           	opt stack 0
  4358  0024F2                     ___llmod:
  4359                           	opt stack 29
  4360                           
  4361                           ;incstack = 0
  4362  0024F2  5005               	movf	___llmod@divisor,w,c
  4363  0024F4  1006               	iorwf	___llmod@divisor+1,w,c
  4364  0024F6  1007               	iorwf	___llmod@divisor+2,w,c
  4365  0024F8  1008               	iorwf	___llmod@divisor+3,w,c
  4366  0024FA  B4D8               	btfsc	status,2,c
  4367  0024FC  D024               	goto	l676
  4368  0024FE  0E01               	movlw	1
  4369  002500  6E09               	movwf	___llmod@counter,c
  4370  002502  D006               	goto	l671
  4371  002504  90D8               	bcf	status,0,c
  4372  002506  3605               	rlcf	___llmod@divisor,f,c
  4373  002508  3606               	rlcf	___llmod@divisor+1,f,c
  4374  00250A  3607               	rlcf	___llmod@divisor+2,f,c
  4375  00250C  3608               	rlcf	___llmod@divisor+3,f,c
  4376  00250E  2A09               	incf	___llmod@counter,f,c
  4377  002510                     l671:
  4378  002510  AE08               	btfss	___llmod@divisor+3,7,c
  4379  002512  D7F8               	goto	l672
  4380  002514                     u2560:
  4381  002514  5005               	movf	___llmod@divisor,w,c
  4382  002516  5C01               	subwf	___llmod@dividend,w,c
  4383  002518  5006               	movf	___llmod@divisor+1,w,c
  4384  00251A  5802               	subwfb	___llmod@dividend+1,w,c
  4385  00251C  5007               	movf	___llmod@divisor+2,w,c
  4386  00251E  5803               	subwfb	___llmod@dividend+2,w,c
  4387  002520  5008               	movf	___llmod@divisor+3,w,c
  4388  002522  5804               	subwfb	___llmod@dividend+3,w,c
  4389  002524  A0D8               	btfss	status,0,c
  4390  002526  D008               	goto	l675
  4391  002528  5005               	movf	___llmod@divisor,w,c
  4392  00252A  5E01               	subwf	___llmod@dividend,f,c
  4393  00252C  5006               	movf	___llmod@divisor+1,w,c
  4394  00252E  5A02               	subwfb	___llmod@dividend+1,f,c
  4395  002530  5007               	movf	___llmod@divisor+2,w,c
  4396  002532  5A03               	subwfb	___llmod@dividend+2,f,c
  4397  002534  5008               	movf	___llmod@divisor+3,w,c
  4398  002536  5A04               	subwfb	___llmod@dividend+3,f,c
  4399  002538                     l675:
  4400  002538  90D8               	bcf	status,0,c
  4401  00253A  3208               	rrcf	___llmod@divisor+3,f,c
  4402  00253C  3207               	rrcf	___llmod@divisor+2,f,c
  4403  00253E  3206               	rrcf	___llmod@divisor+1,f,c
  4404  002540  3205               	rrcf	___llmod@divisor,f,c
  4405  002542  2E09               	decfsz	___llmod@counter,f,c
  4406  002544  D7E7               	goto	u2560
  4407  002546                     l676:
  4408  002546  C001  F001         	movff	___llmod@dividend,?___llmod
  4409  00254A  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  4410  00254E  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  4411  002552  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  4412  002556  0012               	return		;funcret
  4413  002558                     __end_of___llmod:
  4414                           	opt stack 0
  4415                           tblptru	equ	0xFF8
  4416                           tblptrh	equ	0xFF7
  4417                           tblptrl	equ	0xFF6
  4418                           tablat	equ	0xFF5
  4419                           prodh	equ	0xFF4
  4420                           prodl	equ	0xFF3
  4421                           wreg	equ	0xFE8
  4422                           indf2	equ	0xFDF
  4423                           postinc2	equ	0xFDE
  4424                           postdec2	equ	0xFDD
  4425                           fsr2h	equ	0xFDA
  4426                           fsr2l	equ	0xFD9
  4427                           status	equ	0xFD8
  4428                           
  4429 ;; *************** function ___lldiv *****************
  4430 ;; Defined at:
  4431 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  4432 ;; Parameters:    Size  Location     Type
  4433 ;;  dividend        4    0[COMRAM] unsigned long 
  4434 ;;  divisor         4    4[COMRAM] unsigned long 
  4435 ;; Auto vars:     Size  Location     Type
  4436 ;;  quotient        4    8[COMRAM] unsigned long 
  4437 ;;  counter         1   12[COMRAM] unsigned char 
  4438 ;; Return value:  Size  Location     Type
  4439 ;;                  4    0[COMRAM] unsigned long 
  4440 ;; Registers used:
  4441 ;;		wreg, status,2, status,0
  4442 ;; Tracked objects:
  4443 ;;		On entry : 0/0
  4444 ;;		On exit  : 0/0
  4445 ;;		Unchanged: 0/0
  4446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4447 ;;      Params:         8       0       0       0       0       0       0       0       0
  4448 ;;      Locals:         5       0       0       0       0       0       0       0       0
  4449 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4450 ;;      Totals:        13       0       0       0       0       0       0       0       0
  4451 ;;Total ram usage:       13 bytes
  4452 ;; Hardware stack levels used:    1
  4453 ;; This function calls:
  4454 ;;		Nothing
  4455 ;; This function is called by:
  4456 ;;		_sprintf
  4457 ;; This function uses a non-reentrant model
  4458 ;;
  4459                           
  4460                           	psect	text13
  4461  0022BA                     __ptext13:
  4462                           	opt stack 0
  4463  0022BA                     ___lldiv:
  4464                           	opt stack 29
  4465                           
  4466                           ;incstack = 0
  4467  0022BA  0E00               	movlw	0
  4468  0022BC  6E09               	movwf	___lldiv@quotient,c
  4469  0022BE  0E00               	movlw	0
  4470  0022C0  6E0A               	movwf	___lldiv@quotient+1,c
  4471  0022C2  0E00               	movlw	0
  4472  0022C4  6E0B               	movwf	___lldiv@quotient+2,c
  4473  0022C6  0E00               	movlw	0
  4474  0022C8  6E0C               	movwf	___lldiv@quotient+3,c
  4475  0022CA  5005               	movf	___lldiv@divisor,w,c
  4476  0022CC  1006               	iorwf	___lldiv@divisor+1,w,c
  4477  0022CE  1007               	iorwf	___lldiv@divisor+2,w,c
  4478  0022D0  1008               	iorwf	___lldiv@divisor+3,w,c
  4479  0022D2  B4D8               	btfsc	status,2,c
  4480  0022D4  D02A               	goto	l666
  4481  0022D6  0E01               	movlw	1
  4482  0022D8  6E0D               	movwf	___lldiv@counter,c
  4483  0022DA  D006               	goto	l661
  4484  0022DC  90D8               	bcf	status,0,c
  4485  0022DE  3605               	rlcf	___lldiv@divisor,f,c
  4486  0022E0  3606               	rlcf	___lldiv@divisor+1,f,c
  4487  0022E2  3607               	rlcf	___lldiv@divisor+2,f,c
  4488  0022E4  3608               	rlcf	___lldiv@divisor+3,f,c
  4489  0022E6  2A0D               	incf	___lldiv@counter,f,c
  4490  0022E8                     l661:
  4491  0022E8  AE08               	btfss	___lldiv@divisor+3,7,c
  4492  0022EA  D7F8               	goto	l662
  4493  0022EC                     u2530:
  4494  0022EC  90D8               	bcf	status,0,c
  4495  0022EE  3609               	rlcf	___lldiv@quotient,f,c
  4496  0022F0  360A               	rlcf	___lldiv@quotient+1,f,c
  4497  0022F2  360B               	rlcf	___lldiv@quotient+2,f,c
  4498  0022F4  360C               	rlcf	___lldiv@quotient+3,f,c
  4499  0022F6  5005               	movf	___lldiv@divisor,w,c
  4500  0022F8  5C01               	subwf	___lldiv@dividend,w,c
  4501  0022FA  5006               	movf	___lldiv@divisor+1,w,c
  4502  0022FC  5802               	subwfb	___lldiv@dividend+1,w,c
  4503  0022FE  5007               	movf	___lldiv@divisor+2,w,c
  4504  002300  5803               	subwfb	___lldiv@dividend+2,w,c
  4505  002302  5008               	movf	___lldiv@divisor+3,w,c
  4506  002304  5804               	subwfb	___lldiv@dividend+3,w,c
  4507  002306  A0D8               	btfss	status,0,c
  4508  002308  D009               	goto	l665
  4509  00230A  5005               	movf	___lldiv@divisor,w,c
  4510  00230C  5E01               	subwf	___lldiv@dividend,f,c
  4511  00230E  5006               	movf	___lldiv@divisor+1,w,c
  4512  002310  5A02               	subwfb	___lldiv@dividend+1,f,c
  4513  002312  5007               	movf	___lldiv@divisor+2,w,c
  4514  002314  5A03               	subwfb	___lldiv@dividend+2,f,c
  4515  002316  5008               	movf	___lldiv@divisor+3,w,c
  4516  002318  5A04               	subwfb	___lldiv@dividend+3,f,c
  4517  00231A  8009               	bsf	___lldiv@quotient,0,c
  4518  00231C                     l665:
  4519  00231C  90D8               	bcf	status,0,c
  4520  00231E  3208               	rrcf	___lldiv@divisor+3,f,c
  4521  002320  3207               	rrcf	___lldiv@divisor+2,f,c
  4522  002322  3206               	rrcf	___lldiv@divisor+1,f,c
  4523  002324  3205               	rrcf	___lldiv@divisor,f,c
  4524  002326  2E0D               	decfsz	___lldiv@counter,f,c
  4525  002328  D7E1               	goto	u2530
  4526  00232A                     l666:
  4527  00232A  C009  F001         	movff	___lldiv@quotient,?___lldiv
  4528  00232E  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  4529  002332  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  4530  002336  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  4531  00233A  0012               	return		;funcret
  4532  00233C                     __end_of___lldiv:
  4533                           	opt stack 0
  4534                           tblptru	equ	0xFF8
  4535                           tblptrh	equ	0xFF7
  4536                           tblptrl	equ	0xFF6
  4537                           tablat	equ	0xFF5
  4538                           prodh	equ	0xFF4
  4539                           prodl	equ	0xFF3
  4540                           wreg	equ	0xFE8
  4541                           indf2	equ	0xFDF
  4542                           postinc2	equ	0xFDE
  4543                           postdec2	equ	0xFDD
  4544                           fsr2h	equ	0xFDA
  4545                           fsr2l	equ	0xFD9
  4546                           status	equ	0xFD8
  4547                           
  4548 ;; *************** function ___ftsub *****************
  4549 ;; Defined at:
  4550 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  4551 ;; Parameters:    Size  Location     Type
  4552 ;;  f1              3   69[COMRAM] float 
  4553 ;;  f2              3   72[COMRAM] float 
  4554 ;; Auto vars:     Size  Location     Type
  4555 ;;		None
  4556 ;; Return value:  Size  Location     Type
  4557 ;;                  3   69[COMRAM] float 
  4558 ;; Registers used:
  4559 ;;		wreg, status,2, status,0, cstack
  4560 ;; Tracked objects:
  4561 ;;		On entry : 0/0
  4562 ;;		On exit  : 0/0
  4563 ;;		Unchanged: 0/0
  4564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4565 ;;      Params:         6       0       0       0       0       0       0       0       0
  4566 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4567 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4568 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4569 ;;Total ram usage:        6 bytes
  4570 ;; Hardware stack levels used:    1
  4571 ;; Hardware stack levels required when called:    2
  4572 ;; This function calls:
  4573 ;;		___ftadd
  4574 ;; This function is called by:
  4575 ;;		_sprintf
  4576 ;; This function uses a non-reentrant model
  4577 ;;
  4578                           
  4579                           	psect	text14
  4580  00261A                     __ptext14:
  4581                           	opt stack 0
  4582  00261A                     ___ftsub:
  4583                           	opt stack 27
  4584                           
  4585                           ;incstack = 0
  4586  00261A  5049               	movf	___ftsub@f2,w,c
  4587  00261C  104A               	iorwf	___ftsub@f2+1,w,c
  4588  00261E  104B               	iorwf	___ftsub@f2+2,w,c
  4589  002620  B4D8               	btfsc	status,2,c
  4590  002622  D006               	goto	l616
  4591  002624  0E00               	movlw	0
  4592  002626  1A49               	xorwf	___ftsub@f2,f,c
  4593  002628  0E00               	movlw	0
  4594  00262A  1A4A               	xorwf	___ftsub@f2+1,f,c
  4595  00262C  0E80               	movlw	128
  4596  00262E  1A4B               	xorwf	___ftsub@f2+2,f,c
  4597  002630                     l616:
  4598  002630  C046  F03A         	movff	___ftsub@f1,___ftadd@f1
  4599  002634  C047  F03B         	movff	___ftsub@f1+1,___ftadd@f1+1
  4600  002638  C048  F03C         	movff	___ftsub@f1+2,___ftadd@f1+2
  4601  00263C  C049  F03D         	movff	___ftsub@f2,___ftadd@f2
  4602  002640  C04A  F03E         	movff	___ftsub@f2+1,___ftadd@f2+1
  4603  002644  C04B  F03F         	movff	___ftsub@f2+2,___ftadd@f2+2
  4604  002648  EC45  F00C         	call	___ftadd	;wreg free
  4605  00264C  C03A  F046         	movff	?___ftadd,?___ftsub
  4606  002650  C03B  F047         	movff	?___ftadd+1,?___ftsub+1
  4607  002654  C03C  F048         	movff	?___ftadd+2,?___ftsub+2
  4608  002658  0012               	return	
  4609  00265A                     __end_of___ftsub:
  4610                           	opt stack 0
  4611                           tblptru	equ	0xFF8
  4612                           tblptrh	equ	0xFF7
  4613                           tblptrl	equ	0xFF6
  4614                           tablat	equ	0xFF5
  4615                           prodh	equ	0xFF4
  4616                           prodl	equ	0xFF3
  4617                           wreg	equ	0xFE8
  4618                           indf2	equ	0xFDF
  4619                           postinc2	equ	0xFDE
  4620                           postdec2	equ	0xFDD
  4621                           fsr2h	equ	0xFDA
  4622                           fsr2l	equ	0xFD9
  4623                           status	equ	0xFD8
  4624                           
  4625 ;; *************** function ___ftadd *****************
  4626 ;; Defined at:
  4627 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  4628 ;; Parameters:    Size  Location     Type
  4629 ;;  f1              3   57[COMRAM] float 
  4630 ;;  f2              3   60[COMRAM] float 
  4631 ;; Auto vars:     Size  Location     Type
  4632 ;;  exp1            1   68[COMRAM] unsigned char 
  4633 ;;  exp2            1   67[COMRAM] unsigned char 
  4634 ;;  sign            1   66[COMRAM] unsigned char 
  4635 ;; Return value:  Size  Location     Type
  4636 ;;                  3   57[COMRAM] float 
  4637 ;; Registers used:
  4638 ;;		wreg, status,2, status,0, cstack
  4639 ;; Tracked objects:
  4640 ;;		On entry : 0/0
  4641 ;;		On exit  : 0/0
  4642 ;;		Unchanged: 0/0
  4643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4644 ;;      Params:         6       0       0       0       0       0       0       0       0
  4645 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4646 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4647 ;;      Totals:        12       0       0       0       0       0       0       0       0
  4648 ;;Total ram usage:       12 bytes
  4649 ;; Hardware stack levels used:    1
  4650 ;; Hardware stack levels required when called:    1
  4651 ;; This function calls:
  4652 ;;		___ftpack
  4653 ;; This function is called by:
  4654 ;;		_sprintf
  4655 ;;		___ftsub
  4656 ;; This function uses a non-reentrant model
  4657 ;;
  4658                           
  4659                           	psect	text15
  4660  00188A                     __ptext15:
  4661                           	opt stack 0
  4662  00188A                     ___ftadd:
  4663                           	opt stack 27
  4664                           
  4665                           ;incstack = 0
  4666  00188A  C03C  F040         	movff	___ftadd@f1+2,??___ftadd
  4667  00188E  6A41               	clrf	(??___ftadd+1)& (0+255),c
  4668  001890  6A42               	clrf	(??___ftadd+2)& (0+255),c
  4669  001892  343B               	rlcf	___ftadd@f1+1,w,c
  4670  001894  3640               	rlcf	??___ftadd& (0+255),f,c
  4671  001896  E301               	bnc	u1821
  4672  001898  8041               	bsf	(??___ftadd+1)& (0+255),0,c
  4673  00189A                     u1821:
  4674  00189A  5040               	movf	??___ftadd,w,c
  4675  00189C  6E45               	movwf	___ftadd@exp1,c
  4676  00189E  C03F  F040         	movff	___ftadd@f2+2,??___ftadd
  4677  0018A2  6A41               	clrf	(??___ftadd+1)& (0+255),c
  4678  0018A4  6A42               	clrf	(??___ftadd+2)& (0+255),c
  4679  0018A6  343E               	rlcf	___ftadd@f2+1,w,c
  4680  0018A8  3640               	rlcf	??___ftadd& (0+255),f,c
  4681  0018AA  E301               	bnc	u1831
  4682  0018AC  8041               	bsf	(??___ftadd+1)& (0+255),0,c
  4683  0018AE                     u1831:
  4684  0018AE  5040               	movf	??___ftadd,w,c
  4685  0018B0  6E44               	movwf	___ftadd@exp2,c
  4686  0018B2  5045               	movf	___ftadd@exp1,w,c
  4687  0018B4  B4D8               	btfsc	status,2,c
  4688  0018B6  D00B               	goto	u1860
  4689  0018B8  5044               	movf	___ftadd@exp2,w,c
  4690  0018BA  5C45               	subwf	___ftadd@exp1,w,c
  4691  0018BC  B0D8               	btfsc	status,0,c
  4692  0018BE  D00E               	goto	l534
  4693  0018C0  5045               	movf	___ftadd@exp1,w,c
  4694  0018C2  0800               	sublw	0
  4695  0018C4  2444               	addwf	___ftadd@exp2,w,c
  4696  0018C6  6E40               	movwf	??___ftadd& (0+255),c
  4697  0018C8  0E18               	movlw	24
  4698  0018CA  6440               	cpfsgt	??___ftadd,c
  4699  0018CC  D007               	goto	l534
  4700  0018CE                     u1860:
  4701  0018CE  C03D  F03A         	movff	___ftadd@f2,?___ftadd
  4702  0018D2  C03E  F03B         	movff	___ftadd@f2+1,?___ftadd+1
  4703  0018D6  C03F  F03C         	movff	___ftadd@f2+2,?___ftadd+2
  4704  0018DA  0012               	return	
  4705  0018DC                     l534:
  4706  0018DC  5044               	movf	___ftadd@exp2,w,c
  4707  0018DE  B4D8               	btfsc	status,2,c
  4708  0018E0  D00B               	goto	u1890
  4709  0018E2  5045               	movf	___ftadd@exp1,w,c
  4710  0018E4  5C44               	subwf	___ftadd@exp2,w,c
  4711  0018E6  B0D8               	btfsc	status,0,c
  4712  0018E8  D00E               	goto	l538
  4713  0018EA  5044               	movf	___ftadd@exp2,w,c
  4714  0018EC  0800               	sublw	0
  4715  0018EE  2445               	addwf	___ftadd@exp1,w,c
  4716  0018F0  6E40               	movwf	??___ftadd& (0+255),c
  4717  0018F2  0E18               	movlw	24
  4718  0018F4  6440               	cpfsgt	??___ftadd,c
  4719  0018F6  D007               	goto	l538
  4720  0018F8                     u1890:
  4721  0018F8  C03A  F03A         	movff	___ftadd@f1,?___ftadd
  4722  0018FC  C03B  F03B         	movff	___ftadd@f1+1,?___ftadd+1
  4723  001900  C03C  F03C         	movff	___ftadd@f1+2,?___ftadd+2
  4724  001904  0012               	return	
  4725  001906                     l538:
  4726  001906  0E06               	movlw	6
  4727  001908  6E43               	movwf	___ftadd@sign,c
  4728  00190A  BE3C               	btfsc	___ftadd@f1+2,7,c
  4729  00190C  8E43               	bsf	___ftadd@sign,7,c
  4730  00190E  BE3F               	btfsc	___ftadd@f2+2,7,c
  4731  001910  8C43               	bsf	___ftadd@sign,6,c
  4732  001912  8E3B               	bsf	___ftadd@f1+1,7,c
  4733  001914  0EFF               	movlw	255
  4734  001916  163A               	andwf	___ftadd@f1,f,c
  4735  001918  0EFF               	movlw	255
  4736  00191A  163B               	andwf	___ftadd@f1+1,f,c
  4737  00191C  0E00               	movlw	0
  4738  00191E  163C               	andwf	___ftadd@f1+2,f,c
  4739  001920  8E3E               	bsf	___ftadd@f2+1,7,c
  4740  001922  0EFF               	movlw	255
  4741  001924  163D               	andwf	___ftadd@f2,f,c
  4742  001926  0EFF               	movlw	255
  4743  001928  163E               	andwf	___ftadd@f2+1,f,c
  4744  00192A  0E00               	movlw	0
  4745  00192C  163F               	andwf	___ftadd@f2+2,f,c
  4746  00192E  5044               	movf	___ftadd@exp2,w,c
  4747  001930  5C45               	subwf	___ftadd@exp1,w,c
  4748  001932  B0D8               	btfsc	status,0,c
  4749  001934  D01B               	goto	l543
  4750  001936                     u1920:
  4751  001936  90D8               	bcf	status,0,c
  4752  001938  363D               	rlcf	___ftadd@f2,f,c
  4753  00193A  363E               	rlcf	___ftadd@f2+1,f,c
  4754  00193C  363F               	rlcf	___ftadd@f2+2,f,c
  4755  00193E  0644               	decf	___ftadd@exp2,f,c
  4756  001940  5045               	movf	___ftadd@exp1,w,c
  4757  001942  1844               	xorwf	___ftadd@exp2,w,c
  4758  001944  B4D8               	btfsc	status,2,c
  4759  001946  D00D               	goto	l548
  4760  001948  0643               	decf	___ftadd@sign,f,c
  4761  00194A  C043  F040         	movff	___ftadd@sign,??___ftadd
  4762  00194E  0E07               	movlw	7
  4763  001950  1640               	andwf	??___ftadd,f,c
  4764  001952  B4D8               	btfsc	status,2,c
  4765  001954  D006               	goto	l548
  4766  001956  D7EF               	goto	u1920
  4767  001958  90D8               	bcf	status,0,c
  4768  00195A  323C               	rrcf	___ftadd@f1+2,f,c
  4769  00195C  323B               	rrcf	___ftadd@f1+1,f,c
  4770  00195E  323A               	rrcf	___ftadd@f1,f,c
  4771  001960  2A45               	incf	___ftadd@exp1,f,c
  4772  001962                     l548:
  4773  001962  5044               	movf	___ftadd@exp2,w,c
  4774  001964  1845               	xorwf	___ftadd@exp1,w,c
  4775  001966  B4D8               	btfsc	status,2,c
  4776  001968  D01F               	goto	u1990
  4777  00196A  D7F6               	goto	l549
  4778  00196C                     l543:
  4779  00196C  5045               	movf	___ftadd@exp1,w,c
  4780  00196E  5C44               	subwf	___ftadd@exp2,w,c
  4781  001970  B0D8               	btfsc	status,0,c
  4782  001972  D01A               	goto	u1990
  4783  001974                     u1960:
  4784  001974  90D8               	bcf	status,0,c
  4785  001976  363A               	rlcf	___ftadd@f1,f,c
  4786  001978  363B               	rlcf	___ftadd@f1+1,f,c
  4787  00197A  363C               	rlcf	___ftadd@f1+2,f,c
  4788  00197C  0645               	decf	___ftadd@exp1,f,c
  4789  00197E  5045               	movf	___ftadd@exp1,w,c
  4790  001980  1844               	xorwf	___ftadd@exp2,w,c
  4791  001982  B4D8               	btfsc	status,2,c
  4792  001984  D00D               	goto	l557
  4793  001986  0643               	decf	___ftadd@sign,f,c
  4794  001988  C043  F040         	movff	___ftadd@sign,??___ftadd
  4795  00198C  0E07               	movlw	7
  4796  00198E  1640               	andwf	??___ftadd,f,c
  4797  001990  B4D8               	btfsc	status,2,c
  4798  001992  D006               	goto	l557
  4799  001994  D7EF               	goto	u1960
  4800  001996  90D8               	bcf	status,0,c
  4801  001998  323F               	rrcf	___ftadd@f2+2,f,c
  4802  00199A  323E               	rrcf	___ftadd@f2+1,f,c
  4803  00199C  323D               	rrcf	___ftadd@f2,f,c
  4804  00199E  2A44               	incf	___ftadd@exp2,f,c
  4805  0019A0                     l557:
  4806  0019A0  5044               	movf	___ftadd@exp2,w,c
  4807  0019A2  1845               	xorwf	___ftadd@exp1,w,c
  4808  0019A4  A4D8               	btfss	status,2,c
  4809  0019A6  D7F7               	goto	l558
  4810  0019A8                     u1990:
  4811  0019A8  AE43               	btfss	___ftadd@sign,7,c
  4812  0019AA  D00C               	goto	l560
  4813  0019AC  0EFF               	movlw	255
  4814  0019AE  1A3A               	xorwf	___ftadd@f1,f,c
  4815  0019B0  0EFF               	movlw	255
  4816  0019B2  1A3B               	xorwf	___ftadd@f1+1,f,c
  4817  0019B4  0EFF               	movlw	255
  4818  0019B6  1A3C               	xorwf	___ftadd@f1+2,f,c
  4819  0019B8  0E01               	movlw	1
  4820  0019BA  263A               	addwf	___ftadd@f1,f,c
  4821  0019BC  0E00               	movlw	0
  4822  0019BE  223B               	addwfc	___ftadd@f1+1,f,c
  4823  0019C0  0E00               	movlw	0
  4824  0019C2  223C               	addwfc	___ftadd@f1+2,f,c
  4825  0019C4                     l560:
  4826  0019C4  AC43               	btfss	___ftadd@sign,6,c
  4827  0019C6  D00C               	goto	l561
  4828  0019C8  0EFF               	movlw	255
  4829  0019CA  1A3D               	xorwf	___ftadd@f2,f,c
  4830  0019CC  0EFF               	movlw	255
  4831  0019CE  1A3E               	xorwf	___ftadd@f2+1,f,c
  4832  0019D0  0EFF               	movlw	255
  4833  0019D2  1A3F               	xorwf	___ftadd@f2+2,f,c
  4834  0019D4  0E01               	movlw	1
  4835  0019D6  263D               	addwf	___ftadd@f2,f,c
  4836  0019D8  0E00               	movlw	0
  4837  0019DA  223E               	addwfc	___ftadd@f2+1,f,c
  4838  0019DC  0E00               	movlw	0
  4839  0019DE  223F               	addwfc	___ftadd@f2+2,f,c
  4840  0019E0                     l561:
  4841  0019E0  0E00               	movlw	0
  4842  0019E2  6E43               	movwf	___ftadd@sign,c
  4843  0019E4  503A               	movf	___ftadd@f1,w,c
  4844  0019E6  263D               	addwf	___ftadd@f2,f,c
  4845  0019E8  503B               	movf	___ftadd@f1+1,w,c
  4846  0019EA  223E               	addwfc	___ftadd@f2+1,f,c
  4847  0019EC  503C               	movf	___ftadd@f1+2,w,c
  4848  0019EE  223F               	addwfc	___ftadd@f2+2,f,c
  4849  0019F0  AE3F               	btfss	___ftadd@f2+2,7,c
  4850  0019F2  D00E               	goto	l562
  4851  0019F4  0EFF               	movlw	255
  4852  0019F6  1A3D               	xorwf	___ftadd@f2,f,c
  4853  0019F8  0EFF               	movlw	255
  4854  0019FA  1A3E               	xorwf	___ftadd@f2+1,f,c
  4855  0019FC  0EFF               	movlw	255
  4856  0019FE  1A3F               	xorwf	___ftadd@f2+2,f,c
  4857  001A00  0E01               	movlw	1
  4858  001A02  263D               	addwf	___ftadd@f2,f,c
  4859  001A04  0E00               	movlw	0
  4860  001A06  223E               	addwfc	___ftadd@f2+1,f,c
  4861  001A08  0E00               	movlw	0
  4862  001A0A  223F               	addwfc	___ftadd@f2+2,f,c
  4863  001A0C  0E01               	movlw	1
  4864  001A0E  6E43               	movwf	___ftadd@sign,c
  4865  001A10                     l562:
  4866  001A10  C03D  F001         	movff	___ftadd@f2,___ftpack@arg
  4867  001A14  C03E  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  4868  001A18  C03F  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  4869  001A1C  C045  F004         	movff	___ftadd@exp1,___ftpack@exp
  4870  001A20  C043  F005         	movff	___ftadd@sign,___ftpack@sign
  4871  001A24  EC7C  F010         	call	___ftpack	;wreg free
  4872  001A28  C001  F03A         	movff	?___ftpack,?___ftadd
  4873  001A2C  C002  F03B         	movff	?___ftpack+1,?___ftadd+1
  4874  001A30  C003  F03C         	movff	?___ftpack+2,?___ftadd+2
  4875  001A34  0012               	return	
  4876  001A36                     __end_of___ftadd:
  4877                           	opt stack 0
  4878                           tblptru	equ	0xFF8
  4879                           tblptrh	equ	0xFF7
  4880                           tblptrl	equ	0xFF6
  4881                           tablat	equ	0xFF5
  4882                           prodh	equ	0xFF4
  4883                           prodl	equ	0xFF3
  4884                           wreg	equ	0xFE8
  4885                           indf2	equ	0xFDF
  4886                           postinc2	equ	0xFDE
  4887                           postdec2	equ	0xFDD
  4888                           fsr2h	equ	0xFDA
  4889                           fsr2l	equ	0xFD9
  4890                           status	equ	0xFD8
  4891                           
  4892 ;; *************** function ___ftneg *****************
  4893 ;; Defined at:
  4894 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
  4895 ;; Parameters:    Size  Location     Type
  4896 ;;  f1              3    0[COMRAM] float 
  4897 ;; Auto vars:     Size  Location     Type
  4898 ;;		None
  4899 ;; Return value:  Size  Location     Type
  4900 ;;                  3    0[COMRAM] float 
  4901 ;; Registers used:
  4902 ;;		wreg, status,2, status,0
  4903 ;; Tracked objects:
  4904 ;;		On entry : 0/0
  4905 ;;		On exit  : 0/0
  4906 ;;		Unchanged: 0/0
  4907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4908 ;;      Params:         3       0       0       0       0       0       0       0       0
  4909 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4910 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4911 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4912 ;;Total ram usage:        3 bytes
  4913 ;; Hardware stack levels used:    1
  4914 ;; This function calls:
  4915 ;;		Nothing
  4916 ;; This function is called by:
  4917 ;;		_sprintf
  4918 ;; This function uses a non-reentrant model
  4919 ;;
  4920                           
  4921                           	psect	text16
  4922  002710                     __ptext16:
  4923                           	opt stack 0
  4924  002710                     ___ftneg:
  4925                           	opt stack 29
  4926                           
  4927                           ;incstack = 0
  4928  002710  5001               	movf	___ftneg@f1,w,c
  4929  002712  1002               	iorwf	___ftneg@f1+1,w,c
  4930  002714  1003               	iorwf	___ftneg@f1+2,w,c
  4931  002716  B4D8               	btfsc	status,2,c
  4932  002718  D006               	goto	l610
  4933  00271A  0E00               	movlw	0
  4934  00271C  1A01               	xorwf	___ftneg@f1,f,c
  4935  00271E  0E00               	movlw	0
  4936  002720  1A02               	xorwf	___ftneg@f1+1,f,c
  4937  002722  0E80               	movlw	128
  4938  002724  1A03               	xorwf	___ftneg@f1+2,f,c
  4939  002726                     l610:
  4940  002726  C001  F001         	movff	___ftneg@f1,?___ftneg
  4941  00272A  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  4942  00272E  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  4943  002732  0012               	return		;funcret
  4944  002734                     __end_of___ftneg:
  4945                           	opt stack 0
  4946                           tblptru	equ	0xFF8
  4947                           tblptrh	equ	0xFF7
  4948                           tblptrl	equ	0xFF6
  4949                           tablat	equ	0xFF5
  4950                           prodh	equ	0xFF4
  4951                           prodl	equ	0xFF3
  4952                           wreg	equ	0xFE8
  4953                           indf2	equ	0xFDF
  4954                           postinc2	equ	0xFDE
  4955                           postdec2	equ	0xFDD
  4956                           fsr2h	equ	0xFDA
  4957                           fsr2l	equ	0xFD9
  4958                           status	equ	0xFD8
  4959                           
  4960 ;; *************** function ___ftge *****************
  4961 ;; Defined at:
  4962 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  4963 ;; Parameters:    Size  Location     Type
  4964 ;;  ff1             3    0[COMRAM] float 
  4965 ;;  ff2             3    3[COMRAM] float 
  4966 ;; Auto vars:     Size  Location     Type
  4967 ;;		None
  4968 ;; Return value:  Size  Location     Type
  4969 ;;		None               void
  4970 ;; Registers used:
  4971 ;;		wreg, status,2, status,0
  4972 ;; Tracked objects:
  4973 ;;		On entry : 0/0
  4974 ;;		On exit  : 0/0
  4975 ;;		Unchanged: 0/0
  4976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4977 ;;      Params:         6       0       0       0       0       0       0       0       0
  4978 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4979 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4980 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4981 ;;Total ram usage:        9 bytes
  4982 ;; Hardware stack levels used:    1
  4983 ;; This function calls:
  4984 ;;		Nothing
  4985 ;; This function is called by:
  4986 ;;		_sprintf
  4987 ;; This function uses a non-reentrant model
  4988 ;;
  4989                           
  4990                           	psect	text17
  4991  0021A6                     __ptext17:
  4992                           	opt stack 0
  4993  0021A6                     ___ftge:
  4994                           	opt stack 29
  4995                           
  4996                           ;incstack = 0
  4997  0021A6  AE03               	btfss	___ftge@ff1+2,7,c
  4998  0021A8  D016               	goto	l592
  4999  0021AA  C001  F007         	movff	___ftge@ff1,??___ftge
  5000  0021AE  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  5001  0021B2  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  5002  0021B6  1E07               	comf	??___ftge,f,c
  5003  0021B8  1E08               	comf	??___ftge+1,f,c
  5004  0021BA  1E09               	comf	??___ftge+2,f,c
  5005  0021BC  2A07               	incf	??___ftge,f,c
  5006  0021BE  0E00               	movlw	0
  5007  0021C0  2208               	addwfc	??___ftge+1,f,c
  5008  0021C2  2209               	addwfc	??___ftge+2,f,c
  5009  0021C4  0E00               	movlw	0
  5010  0021C6  2407               	addwf	??___ftge,w,c
  5011  0021C8  6E01               	movwf	___ftge@ff1,c
  5012  0021CA  0E00               	movlw	0
  5013  0021CC  2008               	addwfc	??___ftge+1,w,c
  5014  0021CE  6E02               	movwf	___ftge@ff1+1,c
  5015  0021D0  0E80               	movlw	128
  5016  0021D2  2009               	addwfc	??___ftge+2,w,c
  5017  0021D4  6E03               	movwf	___ftge@ff1+2,c
  5018  0021D6                     l592:
  5019  0021D6  AE06               	btfss	___ftge@ff2+2,7,c
  5020  0021D8  D016               	goto	l593
  5021  0021DA  C004  F007         	movff	___ftge@ff2,??___ftge
  5022  0021DE  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  5023  0021E2  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  5024  0021E6  1E07               	comf	??___ftge,f,c
  5025  0021E8  1E08               	comf	??___ftge+1,f,c
  5026  0021EA  1E09               	comf	??___ftge+2,f,c
  5027  0021EC  2A07               	incf	??___ftge,f,c
  5028  0021EE  0E00               	movlw	0
  5029  0021F0  2208               	addwfc	??___ftge+1,f,c
  5030  0021F2  2209               	addwfc	??___ftge+2,f,c
  5031  0021F4  0E00               	movlw	0
  5032  0021F6  2407               	addwf	??___ftge,w,c
  5033  0021F8  6E04               	movwf	___ftge@ff2,c
  5034  0021FA  0E00               	movlw	0
  5035  0021FC  2008               	addwfc	??___ftge+1,w,c
  5036  0021FE  6E05               	movwf	___ftge@ff2+1,c
  5037  002200  0E80               	movlw	128
  5038  002202  2009               	addwfc	??___ftge+2,w,c
  5039  002204  6E06               	movwf	___ftge@ff2+2,c
  5040  002206                     l593:
  5041  002206  0E00               	movlw	0
  5042  002208  1A01               	xorwf	___ftge@ff1,f,c
  5043  00220A  0E00               	movlw	0
  5044  00220C  1A02               	xorwf	___ftge@ff1+1,f,c
  5045  00220E  0E80               	movlw	128
  5046  002210  1A03               	xorwf	___ftge@ff1+2,f,c
  5047  002212  0E00               	movlw	0
  5048  002214  1A04               	xorwf	___ftge@ff2,f,c
  5049  002216  0E00               	movlw	0
  5050  002218  1A05               	xorwf	___ftge@ff2+1,f,c
  5051  00221A  0E80               	movlw	128
  5052  00221C  1A06               	xorwf	___ftge@ff2+2,f,c
  5053  00221E  5004               	movf	___ftge@ff2,w,c
  5054  002220  5C01               	subwf	___ftge@ff1,w,c
  5055  002222  5005               	movf	___ftge@ff2+1,w,c
  5056  002224  5802               	subwfb	___ftge@ff1+1,w,c
  5057  002226  5006               	movf	___ftge@ff2+2,w,c
  5058  002228  5803               	subwfb	___ftge@ff1+2,w,c
  5059  00222A  B0D8               	btfsc	status,0,c
  5060  00222C  D002               	goto	l2010
  5061  00222E  90D8               	bcf	status,0,c
  5062  002230  0012               	return	
  5063  002232                     l2010:
  5064  002232  80D8               	bsf	status,0,c
  5065  002234  0012               	return	
  5066  002236                     __end_of___ftge:
  5067                           	opt stack 0
  5068                           tblptru	equ	0xFF8
  5069                           tblptrh	equ	0xFF7
  5070                           tblptrl	equ	0xFF6
  5071                           tablat	equ	0xFF5
  5072                           prodh	equ	0xFF4
  5073                           prodl	equ	0xFF3
  5074                           wreg	equ	0xFE8
  5075                           indf2	equ	0xFDF
  5076                           postinc2	equ	0xFDE
  5077                           postdec2	equ	0xFDD
  5078                           fsr2h	equ	0xFDA
  5079                           fsr2l	equ	0xFD9
  5080                           status	equ	0xFD8
  5081                           
  5082 ;; *************** function _memset *****************
  5083 ;; Defined at:
  5084 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
  5085 ;; Parameters:    Size  Location     Type
  5086 ;;  p1              2    0[COMRAM] PTR void 
  5087 ;;		 -> main@UwU(80), main@frecuencia(120), 
  5088 ;;  c               2    2[COMRAM] int 
  5089 ;;  n               2    4[COMRAM] unsigned int 
  5090 ;; Auto vars:     Size  Location     Type
  5091 ;;  p               2    6[COMRAM] PTR unsigned char 
  5092 ;;		 -> main@UwU(80), main@frecuencia(120), 
  5093 ;; Return value:  Size  Location     Type
  5094 ;;                  2    0[COMRAM] PTR void 
  5095 ;; Registers used:
  5096 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5097 ;; Tracked objects:
  5098 ;;		On entry : 0/0
  5099 ;;		On exit  : 0/0
  5100 ;;		Unchanged: 0/0
  5101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5102 ;;      Params:         6       0       0       0       0       0       0       0       0
  5103 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5104 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5105 ;;      Totals:         8       0       0       0       0       0       0       0       0
  5106 ;;Total ram usage:        8 bytes
  5107 ;; Hardware stack levels used:    1
  5108 ;; This function calls:
  5109 ;;		Nothing
  5110 ;; This function is called by:
  5111 ;;		_main
  5112 ;; This function uses a non-reentrant model
  5113 ;;
  5114                           
  5115                           	psect	text18
  5116  002692                     __ptext18:
  5117                           	opt stack 0
  5118  002692                     _memset:
  5119                           	opt stack 30
  5120                           
  5121                           ;incstack = 0
  5122  002692  C001  F007         	movff	memset@p1,memset@p
  5123  002696  C002  F008         	movff	memset@p1+1,memset@p+1
  5124  00269A  D008               	goto	l738
  5125  00269C                     l2766:
  5126  00269C  C007  FFD9         	movff	memset@p,fsr2l
  5127  0026A0  C008  FFDA         	movff	memset@p+1,fsr2h
  5128  0026A4  C003  FFDF         	movff	memset@c,indf2
  5129  0026A8  4A07               	infsnz	memset@p,f,c
  5130  0026AA  2A08               	incf	memset@p+1,f,c
  5131  0026AC                     l738:
  5132  0026AC  0605               	decf	memset@n,f,c
  5133  0026AE  A0D8               	btfss	status,0,c
  5134  0026B0  0606               	decf	memset@n+1,f,c
  5135  0026B2  2805               	incf	memset@n,w,c
  5136  0026B4  E1F3               	bnz	l2766
  5137  0026B6  2806               	incf	memset@n+1,w,c
  5138  0026B8  B4D8               	btfsc	status,2,c
  5139  0026BA  0012               	return	
  5140  0026BC  D7EF               	goto	l739
  5141  0026BE                     __end_of_memset:
  5142                           	opt stack 0
  5143                           tblptru	equ	0xFF8
  5144                           tblptrh	equ	0xFF7
  5145                           tblptrl	equ	0xFF6
  5146                           tablat	equ	0xFF5
  5147                           prodh	equ	0xFF4
  5148                           prodl	equ	0xFF3
  5149                           wreg	equ	0xFE8
  5150                           indf2	equ	0xFDF
  5151                           postinc2	equ	0xFDE
  5152                           postdec2	equ	0xFDD
  5153                           fsr2h	equ	0xFDA
  5154                           fsr2l	equ	0xFD9
  5155                           status	equ	0xFD8
  5156                           
  5157 ;; *************** function _lcd_ubicarXY *****************
  5158 ;; Defined at:
  5159 ;;		line 313 in file "lcd.c"
  5160 ;; Parameters:    Size  Location     Type
  5161 ;;  linea           1    wreg     unsigned char 
  5162 ;;  columna         1   86[COMRAM] unsigned char 
  5163 ;; Auto vars:     Size  Location     Type
  5164 ;;  linea           1   94[COMRAM] unsigned char 
  5165 ;;  i               1   93[COMRAM] unsigned char 
  5166 ;;  i               1   92[COMRAM] unsigned char 
  5167 ;; Return value:  Size  Location     Type
  5168 ;;                  1    wreg      void 
  5169 ;; Registers used:
  5170 ;;		wreg, status,2, status,0, cstack
  5171 ;; Tracked objects:
  5172 ;;		On entry : 0/0
  5173 ;;		On exit  : 0/0
  5174 ;;		Unchanged: 0/0
  5175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5176 ;;      Params:         1       0       0       0       0       0       0       0       0
  5177 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5178 ;;      Temps:          5       0       0       0       0       0       0       0       0
  5179 ;;      Totals:         9       0       0       0       0       0       0       0       0
  5180 ;;Total ram usage:        9 bytes
  5181 ;; Hardware stack levels used:    1
  5182 ;; Hardware stack levels required when called:    6
  5183 ;; This function calls:
  5184 ;;		_lcd_orden
  5185 ;;		_lcd_origen
  5186 ;; This function is called by:
  5187 ;;		_main
  5188 ;; This function uses a non-reentrant model
  5189 ;;
  5190                           
  5191                           	psect	text19
  5192  00241C                     __ptext19:
  5193                           	opt stack 0
  5194  00241C                     _lcd_ubicarXY:
  5195                           	opt stack 24
  5196                           
  5197                           ;incstack = 0
  5198                           ;lcd_ubicarXY@linea stored from wreg
  5199  00241C  6E5F               	movwf	lcd_ubicarXY@linea,c
  5200                           
  5201                           ;lcd.c: 314: lcd_origen();
  5202  00241E  ECB8  F013         	call	_lcd_origen	;wreg free
  5203                           
  5204                           ;lcd.c: 315: if (linea==1){
  5205  002422  045F               	decf	lcd_ubicarXY@linea,w,c
  5206  002424  A4D8               	btfss	status,2,c
  5207  002426  D00E               	goto	u2610
  5208                           
  5209                           ;lcd.c: 316: for(char i=1; i<columna; i++){
  5210  002428  0E01               	movlw	1
  5211  00242A  6E5D               	movwf	lcd_ubicarXY@i,c
  5212  00242C  D007               	goto	l40
  5213  00242E                     
  5214                           ;lcd.c: 317: lcd_orden(0x14);
  5215  00242E  0E00               	movlw	0
  5216  002430  6E51               	movwf	lcd_orden@orden+1,c
  5217  002432  0E14               	movlw	20
  5218  002434  6E50               	movwf	lcd_orden@orden,c
  5219  002436  ECAC  F012         	call	_lcd_orden	;wreg free
  5220  00243A  2A5D               	incf	lcd_ubicarXY@i,f,c
  5221  00243C                     l40:
  5222  00243C  5057               	movf	lcd_ubicarXY@columna,w,c
  5223  00243E  5C5D               	subwf	lcd_ubicarXY@i,w,c
  5224  002440  A0D8               	btfss	status,0,c
  5225  002442  D7F5               	goto	l41
  5226  002444                     u2610:
  5227                           
  5228                           ;lcd.c: 318: }
  5229                           ;lcd.c: 319: }
  5230                           ;lcd.c: 320: if(linea==2){
  5231  002444  0E02               	movlw	2
  5232  002446  185F               	xorwf	lcd_ubicarXY@linea,w,c
  5233  002448  A4D8               	btfss	status,2,c
  5234  00244A  0012               	return	
  5235                           
  5236                           ;lcd.c: 321: for (char i=1;i<(columna+40);i++){
  5237  00244C  0E01               	movlw	1
  5238  00244E  6E5E               	movwf	lcd_ubicarXY@i_155,c
  5239  002450  D007               	goto	l44
  5240  002452                     
  5241                           ;lcd.c: 322: lcd_orden(0x14);
  5242  002452  0E00               	movlw	0
  5243  002454  6E51               	movwf	lcd_orden@orden+1,c
  5244  002456  0E14               	movlw	20
  5245  002458  6E50               	movwf	lcd_orden@orden,c
  5246  00245A  ECAC  F012         	call	_lcd_orden	;wreg free
  5247  00245E  2A5E               	incf	lcd_ubicarXY@i_155,f,c
  5248  002460                     l44:
  5249  002460  5057               	movf	lcd_ubicarXY@columna,w,c
  5250  002462  6E58               	movwf	??_lcd_ubicarXY& (0+255),c
  5251  002464  6A59               	clrf	(??_lcd_ubicarXY+1)& (0+255),c
  5252  002466  0E28               	movlw	40
  5253  002468  2658               	addwf	??_lcd_ubicarXY,f,c
  5254  00246A  0E00               	movlw	0
  5255  00246C  2259               	addwfc	??_lcd_ubicarXY+1,f,c
  5256  00246E  505E               	movf	lcd_ubicarXY@i_155,w,c
  5257  002470  6E5A               	movwf	(??_lcd_ubicarXY+2)& (0+255),c
  5258  002472  6A5B               	clrf	(??_lcd_ubicarXY+3)& (0+255),c
  5259  002474  5058               	movf	??_lcd_ubicarXY,w,c
  5260  002476  5C5A               	subwf	??_lcd_ubicarXY+2,w,c
  5261  002478  505B               	movf	??_lcd_ubicarXY+3,w,c
  5262  00247A  0A80               	xorlw	128
  5263  00247C  6E5C               	movwf	(??_lcd_ubicarXY+4)& (0+255),c
  5264  00247E  5059               	movf	??_lcd_ubicarXY+1,w,c
  5265  002480  0A80               	xorlw	128
  5266  002482  585C               	subwfb	(??_lcd_ubicarXY+4)& (0+255),w,c
  5267  002484  B0D8               	btfsc	status,0,c
  5268  002486  0012               	return	
  5269  002488  D7E4               	goto	l45
  5270  00248A                     __end_of_lcd_ubicarXY:
  5271                           	opt stack 0
  5272                           tblptru	equ	0xFF8
  5273                           tblptrh	equ	0xFF7
  5274                           tblptrl	equ	0xFF6
  5275                           tablat	equ	0xFF5
  5276                           prodh	equ	0xFF4
  5277                           prodl	equ	0xFF3
  5278                           wreg	equ	0xFE8
  5279                           indf2	equ	0xFDF
  5280                           postinc2	equ	0xFDE
  5281                           postdec2	equ	0xFDD
  5282                           fsr2h	equ	0xFDA
  5283                           fsr2l	equ	0xFD9
  5284                           status	equ	0xFD8
  5285                           
  5286 ;; *************** function _lcd_origen *****************
  5287 ;; Defined at:
  5288 ;;		line 308 in file "lcd.c"
  5289 ;; Parameters:    Size  Location     Type
  5290 ;;		None
  5291 ;; Auto vars:     Size  Location     Type
  5292 ;;		None
  5293 ;; Return value:  Size  Location     Type
  5294 ;;                  1    wreg      void 
  5295 ;; Registers used:
  5296 ;;		wreg, status,2, status,0, cstack
  5297 ;; Tracked objects:
  5298 ;;		On entry : 0/0
  5299 ;;		On exit  : 0/0
  5300 ;;		Unchanged: 0/0
  5301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5302 ;;      Params:         0       0       0       0       0       0       0       0       0
  5303 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5304 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5305 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5306 ;;Total ram usage:        0 bytes
  5307 ;; Hardware stack levels used:    1
  5308 ;; Hardware stack levels required when called:    5
  5309 ;; This function calls:
  5310 ;;		_lcd_orden
  5311 ;;		_wait_in_ms
  5312 ;; This function is called by:
  5313 ;;		_lcd_ubicarXY
  5314 ;;		_main
  5315 ;; This function uses a non-reentrant model
  5316 ;;
  5317                           
  5318                           	psect	text20
  5319  002770                     __ptext20:
  5320                           	opt stack 0
  5321  002770                     _lcd_origen:
  5322                           	opt stack 24
  5323                           
  5324                           ;lcd.c: 309: lcd_orden(0x02);
  5325                           
  5326                           ;incstack = 0
  5327  002770  0E00               	movlw	0
  5328  002772  6E51               	movwf	lcd_orden@orden+1,c
  5329  002774  0E02               	movlw	2
  5330  002776  6E50               	movwf	lcd_orden@orden,c
  5331  002778  ECAC  F012         	call	_lcd_orden	;wreg free
  5332                           
  5333                           ;lcd.c: 310: wait_in_ms(4);
  5334  00277C  0E00               	movlw	0
  5335  00277E  6E47               	movwf	wait_in_ms@time_in_ms+1,c
  5336  002780  0E04               	movlw	4
  5337  002782  6E46               	movwf	wait_in_ms@time_in_ms,c
  5338  002784  EC16  F010         	call	_wait_in_ms	;wreg free
  5339  002788  0012               	return		;funcret
  5340  00278A                     __end_of_lcd_origen:
  5341                           	opt stack 0
  5342                           tblptru	equ	0xFF8
  5343                           tblptrh	equ	0xFF7
  5344                           tblptrl	equ	0xFF6
  5345                           tablat	equ	0xFF5
  5346                           prodh	equ	0xFF4
  5347                           prodl	equ	0xFF3
  5348                           wreg	equ	0xFE8
  5349                           indf2	equ	0xFDF
  5350                           postinc2	equ	0xFDE
  5351                           postdec2	equ	0xFDD
  5352                           fsr2h	equ	0xFDA
  5353                           fsr2l	equ	0xFD9
  5354                           status	equ	0xFD8
  5355                           
  5356 ;; *************** function _lcd_texto *****************
  5357 ;; Defined at:
  5358 ;;		line 296 in file "lcd.c"
  5359 ;; Parameters:    Size  Location     Type
  5360 ;;  cadena          2   86[COMRAM] PTR unsigned char 
  5361 ;;		 -> main@UwU(80), main@frecuencia(120), 
  5362 ;; Auto vars:     Size  Location     Type
  5363 ;;		None
  5364 ;; Return value:  Size  Location     Type
  5365 ;;                  1    wreg      void 
  5366 ;; Registers used:
  5367 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5368 ;; Tracked objects:
  5369 ;;		On entry : 0/0
  5370 ;;		On exit  : 0/0
  5371 ;;		Unchanged: 0/0
  5372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5373 ;;      Params:         2       0       0       0       0       0       0       0       0
  5374 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5375 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5376 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5377 ;;Total ram usage:        3 bytes
  5378 ;; Hardware stack levels used:    1
  5379 ;; Hardware stack levels required when called:    5
  5380 ;; This function calls:
  5381 ;;		_lcd_caracter
  5382 ;; This function is called by:
  5383 ;;		_main
  5384 ;; This function uses a non-reentrant model
  5385 ;;
  5386                           
  5387                           	psect	text21
  5388  0026BE                     __ptext21:
  5389                           	opt stack 0
  5390  0026BE                     _lcd_texto:
  5391                           	opt stack 25
  5392                           
  5393                           ;lcd.c: 297: while(*cadena != 0x00){
  5394                           
  5395                           ;incstack = 0
  5396  0026BE  D00D               	goto	l27
  5397  0026C0                     
  5398                           ;lcd.c: 298: lcd_caracter(*cadena);
  5399  0026C0  C057  FFD9         	movff	lcd_texto@cadena,fsr2l
  5400  0026C4  C058  FFDA         	movff	lcd_texto@cadena+1,fsr2h
  5401  0026C8  50DF               	movf	indf2,w,c
  5402  0026CA  6E59               	movwf	??_lcd_texto& (0+255),c
  5403  0026CC  5059               	movf	??_lcd_texto,w,c
  5404  0026CE  6E50               	movwf	lcd_caracter@caracter,c
  5405  0026D0  6A51               	clrf	lcd_caracter@caracter+1,c
  5406  0026D2  EC45  F012         	call	_lcd_caracter	;wreg free
  5407                           
  5408                           ;lcd.c: 299: cadena++;
  5409  0026D6  4A57               	infsnz	lcd_texto@cadena,f,c
  5410  0026D8  2A58               	incf	lcd_texto@cadena+1,f,c
  5411  0026DA                     l27:
  5412  0026DA  C057  FFD9         	movff	lcd_texto@cadena,fsr2l
  5413  0026DE  C058  FFDA         	movff	lcd_texto@cadena+1,fsr2h
  5414  0026E2  50DF               	movf	indf2,w,c
  5415  0026E4  B4D8               	btfsc	status,2,c
  5416  0026E6  0012               	return	
  5417  0026E8  D7EB               	goto	l28
  5418  0026EA                     __end_of_lcd_texto:
  5419                           	opt stack 0
  5420                           tblptru	equ	0xFF8
  5421                           tblptrh	equ	0xFF7
  5422                           tblptrl	equ	0xFF6
  5423                           tablat	equ	0xFF5
  5424                           prodh	equ	0xFF4
  5425                           prodl	equ	0xFF3
  5426                           wreg	equ	0xFE8
  5427                           indf2	equ	0xFDF
  5428                           postinc2	equ	0xFDE
  5429                           postdec2	equ	0xFDD
  5430                           fsr2h	equ	0xFDA
  5431                           fsr2l	equ	0xFD9
  5432                           status	equ	0xFD8
  5433                           
  5434 ;; *************** function _lcd_caracter *****************
  5435 ;; Defined at:
  5436 ;;		line 286 in file "lcd.c"
  5437 ;; Parameters:    Size  Location     Type
  5438 ;;  caracter        2   79[COMRAM] unsigned int 
  5439 ;; Auto vars:     Size  Location     Type
  5440 ;;		None
  5441 ;; Return value:  Size  Location     Type
  5442 ;;                  1    wreg      void 
  5443 ;; Registers used:
  5444 ;;		wreg, status,2, status,0, cstack
  5445 ;; Tracked objects:
  5446 ;;		On entry : 0/0
  5447 ;;		On exit  : 0/0
  5448 ;;		Unchanged: 0/0
  5449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5450 ;;      Params:         2       0       0       0       0       0       0       0       0
  5451 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5452 ;;      Temps:          5       0       0       0       0       0       0       0       0
  5453 ;;      Totals:         7       0       0       0       0       0       0       0       0
  5454 ;;Total ram usage:        7 bytes
  5455 ;; Hardware stack levels used:    1
  5456 ;; Hardware stack levels required when called:    4
  5457 ;; This function calls:
  5458 ;;		_lcd_pulso
  5459 ;; This function is called by:
  5460 ;;		_lcd_texto
  5461 ;; This function uses a non-reentrant model
  5462 ;;
  5463                           
  5464                           	psect	text22
  5465  00248A                     __ptext22:
  5466                           	opt stack 0
  5467  00248A                     _lcd_caracter:
  5468                           	opt stack 25
  5469                           
  5470                           ;lcd.c: 287: PORTDbits.RD1=1;
  5471                           
  5472                           ;incstack = 0
  5473  00248A  8283               	bsf	3971,1,c	;volatile
  5474                           
  5475                           ;lcd.c: 289: PORTD=(((((PORTD>>4&0x0f)|0x0f)&(caracter>>4&0x0f))<<4)|(PORTD&0x0f));
  5476  00248C  CF83 F052          	movff	3971,??_lcd_caracter	;volatile
  5477  002490  0E0F               	movlw	15
  5478  002492  1652               	andwf	??_lcd_caracter,f,c
  5479  002494  C050  F053         	movff	lcd_caracter@caracter,??_lcd_caracter+1
  5480  002498  C051  F054         	movff	lcd_caracter@caracter+1,??_lcd_caracter+2
  5481  00249C  0E04               	movlw	4
  5482  00249E  6E55               	movwf	(??_lcd_caracter+3)& (0+255),c
  5483  0024A0                     u2215:
  5484  0024A0  90D8               	bcf	status,0,c
  5485  0024A2  3254               	rrcf	??_lcd_caracter+2,f,c
  5486  0024A4  3253               	rrcf	??_lcd_caracter+1,f,c
  5487  0024A6  2E55               	decfsz	(??_lcd_caracter+3)& (0+255),f,c
  5488  0024A8  D7FB               	goto	u2215
  5489  0024AA  0E0F               	movlw	15
  5490  0024AC  1653               	andwf	??_lcd_caracter+1,f,c
  5491  0024AE  3883               	swapf	3971,w,c	;volatile
  5492  0024B0  0B0F               	andlw	15
  5493  0024B2  0B0F               	andlw	15
  5494  0024B4  090F               	iorlw	15
  5495  0024B6  1453               	andwf	??_lcd_caracter+1,w,c
  5496  0024B8  6E56               	movwf	(??_lcd_caracter+4)& (0+255),c
  5497  0024BA  3856               	swapf	??_lcd_caracter+4,w,c
  5498  0024BC  0BF0               	andlw	240
  5499  0024BE  1052               	iorwf	??_lcd_caracter,w,c
  5500  0024C0  6E83               	movwf	3971,c	;volatile
  5501                           
  5502                           ;lcd.c: 290: lcd_pulso();
  5503  0024C2  ECA9  F013         	call	_lcd_pulso	;wreg free
  5504                           
  5505                           ;lcd.c: 291: PORTD=(((((PORTD>>4&0x0f)|0x0f)&(caracter&0x0f))<<4)|(PORTD&0x0f));
  5506  0024C6  CF83 F052          	movff	3971,??_lcd_caracter	;volatile
  5507  0024CA  0E0F               	movlw	15
  5508  0024CC  1652               	andwf	??_lcd_caracter,f,c
  5509  0024CE  C050  F053         	movff	lcd_caracter@caracter,??_lcd_caracter+1
  5510  0024D2  0E0F               	movlw	15
  5511  0024D4  1653               	andwf	??_lcd_caracter+1,f,c
  5512  0024D6  3883               	swapf	3971,w,c	;volatile
  5513  0024D8  0B0F               	andlw	15
  5514  0024DA  0B0F               	andlw	15
  5515  0024DC  090F               	iorlw	15
  5516  0024DE  1453               	andwf	??_lcd_caracter+1,w,c
  5517  0024E0  6E54               	movwf	(??_lcd_caracter+2)& (0+255),c
  5518  0024E2  3854               	swapf	??_lcd_caracter+2,w,c
  5519  0024E4  0BF0               	andlw	240
  5520  0024E6  1052               	iorwf	??_lcd_caracter,w,c
  5521  0024E8  6E83               	movwf	3971,c	;volatile
  5522                           
  5523                           ;lcd.c: 292: lcd_pulso();
  5524  0024EA  ECA9  F013         	call	_lcd_pulso	;wreg free
  5525                           
  5526                           ;lcd.c: 293: PORTDbits.RD1=0;
  5527  0024EE  9283               	bcf	3971,1,c	;volatile
  5528  0024F0  0012               	return		;funcret
  5529  0024F2                     __end_of_lcd_caracter:
  5530                           	opt stack 0
  5531                           tblptru	equ	0xFF8
  5532                           tblptrh	equ	0xFF7
  5533                           tblptrl	equ	0xFF6
  5534                           tablat	equ	0xFF5
  5535                           prodh	equ	0xFF4
  5536                           prodl	equ	0xFF3
  5537                           wreg	equ	0xFE8
  5538                           indf2	equ	0xFDF
  5539                           postinc2	equ	0xFDE
  5540                           postdec2	equ	0xFDD
  5541                           fsr2h	equ	0xFDA
  5542                           fsr2l	equ	0xFD9
  5543                           status	equ	0xFD8
  5544                           
  5545 ;; *************** function _lcd_iniciar *****************
  5546 ;; Defined at:
  5547 ;;		line 224 in file "lcd.c"
  5548 ;; Parameters:    Size  Location     Type
  5549 ;;		None
  5550 ;; Auto vars:     Size  Location     Type
  5551 ;;		None
  5552 ;; Return value:  Size  Location     Type
  5553 ;;                  1    wreg      void 
  5554 ;; Registers used:
  5555 ;;		wreg, status,2, status,0, cstack
  5556 ;; Tracked objects:
  5557 ;;		On entry : 0/0
  5558 ;;		On exit  : 0/0
  5559 ;;		Unchanged: 0/0
  5560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5561 ;;      Params:         0       0       0       0       0       0       0       0       0
  5562 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5563 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5564 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5565 ;;Total ram usage:        0 bytes
  5566 ;; Hardware stack levels used:    1
  5567 ;; Hardware stack levels required when called:    5
  5568 ;; This function calls:
  5569 ;;		_lcd_orden
  5570 ;;		_lcd_pulso
  5571 ;;		_wait_in_ms
  5572 ;; This function is called by:
  5573 ;;		_main
  5574 ;; This function uses a non-reentrant model
  5575 ;;
  5576                           
  5577                           	psect	text23
  5578  001F5E                     __ptext23:
  5579                           	opt stack 0
  5580  001F5E                     _lcd_iniciar:
  5581                           	opt stack 25
  5582                           
  5583                           ;lcd.c: 225: TRISDbits.TRISD1=0;
  5584                           
  5585                           ;incstack = 0
  5586  001F5E  9295               	bcf	3989,1,c	;volatile
  5587                           
  5588                           ;lcd.c: 226: TRISDbits.TRISD2=0;
  5589  001F60  9495               	bcf	3989,2,c	;volatile
  5590                           
  5591                           ;lcd.c: 227: TRISDbits.TRISD3=0;
  5592  001F62  9695               	bcf	3989,3,c	;volatile
  5593                           
  5594                           ;lcd.c: 228: TRISDbits.TRISD4=0;
  5595  001F64  9895               	bcf	3989,4,c	;volatile
  5596                           
  5597                           ;lcd.c: 229: TRISDbits.TRISD5=0;
  5598  001F66  9A95               	bcf	3989,5,c	;volatile
  5599                           
  5600                           ;lcd.c: 230: TRISDbits.TRISD6=0;
  5601  001F68  9C95               	bcf	3989,6,c	;volatile
  5602                           
  5603                           ;lcd.c: 231: TRISDbits.TRISD7=0;
  5604  001F6A  9E95               	bcf	3989,7,c	;volatile
  5605                           
  5606                           ;lcd.c: 233: PORTDbits.RD1=0;
  5607  001F6C  9283               	bcf	3971,1,c	;volatile
  5608                           
  5609                           ;lcd.c: 234: PORTDbits.RD2=0;
  5610  001F6E  9483               	bcf	3971,2,c	;volatile
  5611                           
  5612                           ;lcd.c: 235: PORTDbits.RD3=0;
  5613  001F70  9683               	bcf	3971,3,c	;volatile
  5614                           
  5615                           ;lcd.c: 236: PORTDbits.RD4=0;
  5616  001F72  9883               	bcf	3971,4,c	;volatile
  5617                           
  5618                           ;lcd.c: 237: PORTDbits.RD5=0;
  5619  001F74  9A83               	bcf	3971,5,c	;volatile
  5620                           
  5621                           ;lcd.c: 238: PORTDbits.RD6=0;
  5622  001F76  9C83               	bcf	3971,6,c	;volatile
  5623                           
  5624                           ;lcd.c: 239: PORTDbits.RD7=0;
  5625  001F78  9E83               	bcf	3971,7,c	;volatile
  5626                           
  5627                           ;lcd.c: 241: wait_in_ms(20);
  5628  001F7A  0E00               	movlw	0
  5629  001F7C  6E47               	movwf	wait_in_ms@time_in_ms+1,c
  5630  001F7E  0E14               	movlw	20
  5631  001F80  6E46               	movwf	wait_in_ms@time_in_ms,c
  5632  001F82  EC16  F010         	call	_wait_in_ms	;wreg free
  5633                           
  5634                           ;lcd.c: 242: PORTD=0X03<<4;
  5635  001F86  0E30               	movlw	48
  5636  001F88  6E83               	movwf	3971,c	;volatile
  5637                           
  5638                           ;lcd.c: 243: lcd_pulso();
  5639  001F8A  ECA9  F013         	call	_lcd_pulso	;wreg free
  5640                           
  5641                           ;lcd.c: 244: wait_in_ms(4);
  5642  001F8E  0E00               	movlw	0
  5643  001F90  6E47               	movwf	wait_in_ms@time_in_ms+1,c
  5644  001F92  0E04               	movlw	4
  5645  001F94  6E46               	movwf	wait_in_ms@time_in_ms,c
  5646  001F96  EC16  F010         	call	_wait_in_ms	;wreg free
  5647                           
  5648                           ;lcd.c: 246: PORTD=0X03<<4;
  5649  001F9A  0E30               	movlw	48
  5650  001F9C  6E83               	movwf	3971,c	;volatile
  5651                           
  5652                           ;lcd.c: 247: lcd_pulso();
  5653  001F9E  ECA9  F013         	call	_lcd_pulso	;wreg free
  5654                           
  5655                           ;lcd.c: 248: wait_in_ms(4);
  5656  001FA2  0E00               	movlw	0
  5657  001FA4  6E47               	movwf	wait_in_ms@time_in_ms+1,c
  5658  001FA6  0E04               	movlw	4
  5659  001FA8  6E46               	movwf	wait_in_ms@time_in_ms,c
  5660  001FAA  EC16  F010         	call	_wait_in_ms	;wreg free
  5661                           
  5662                           ;lcd.c: 250: PORTD=0X03<<4;
  5663  001FAE  0E30               	movlw	48
  5664  001FB0  6E83               	movwf	3971,c	;volatile
  5665                           
  5666                           ;lcd.c: 251: lcd_pulso();
  5667  001FB2  ECA9  F013         	call	_lcd_pulso	;wreg free
  5668                           
  5669                           ;lcd.c: 252: wait_in_ms(1);
  5670  001FB6  0E00               	movlw	0
  5671  001FB8  6E47               	movwf	wait_in_ms@time_in_ms+1,c
  5672  001FBA  0E01               	movlw	1
  5673  001FBC  6E46               	movwf	wait_in_ms@time_in_ms,c
  5674  001FBE  EC16  F010         	call	_wait_in_ms	;wreg free
  5675                           
  5676                           ;lcd.c: 254: PORTD=0X02<<4;
  5677  001FC2  0E20               	movlw	32
  5678  001FC4  6E83               	movwf	3971,c	;volatile
  5679                           
  5680                           ;lcd.c: 255: lcd_pulso();
  5681  001FC6  ECA9  F013         	call	_lcd_pulso	;wreg free
  5682                           
  5683                           ;lcd.c: 257: lcd_orden(0x28);
  5684  001FCA  0E00               	movlw	0
  5685  001FCC  6E51               	movwf	lcd_orden@orden+1,c
  5686  001FCE  0E28               	movlw	40
  5687  001FD0  6E50               	movwf	lcd_orden@orden,c
  5688  001FD2  ECAC  F012         	call	_lcd_orden	;wreg free
  5689                           
  5690                           ;lcd.c: 258: wait_in_ms(8);
  5691  001FD6  0E00               	movlw	0
  5692  001FD8  6E47               	movwf	wait_in_ms@time_in_ms+1,c
  5693  001FDA  0E08               	movlw	8
  5694  001FDC  6E46               	movwf	wait_in_ms@time_in_ms,c
  5695  001FDE  EC16  F010         	call	_wait_in_ms	;wreg free
  5696                           
  5697                           ;lcd.c: 260: lcd_orden(0x0c);
  5698  001FE2  0E00               	movlw	0
  5699  001FE4  6E51               	movwf	lcd_orden@orden+1,c
  5700  001FE6  0E0C               	movlw	12
  5701  001FE8  6E50               	movwf	lcd_orden@orden,c
  5702  001FEA  ECAC  F012         	call	_lcd_orden	;wreg free
  5703                           
  5704                           ;lcd.c: 261: wait_in_ms(8);
  5705  001FEE  0E00               	movlw	0
  5706  001FF0  6E47               	movwf	wait_in_ms@time_in_ms+1,c
  5707  001FF2  0E08               	movlw	8
  5708  001FF4  6E46               	movwf	wait_in_ms@time_in_ms,c
  5709  001FF6  EC16  F010         	call	_wait_in_ms	;wreg free
  5710                           
  5711                           ;lcd.c: 263: lcd_orden(0x01);
  5712  001FFA  0E00               	movlw	0
  5713  001FFC  6E51               	movwf	lcd_orden@orden+1,c
  5714  001FFE  0E01               	movlw	1
  5715  002000  6E50               	movwf	lcd_orden@orden,c
  5716  002002  ECAC  F012         	call	_lcd_orden	;wreg free
  5717                           
  5718                           ;lcd.c: 264: wait_in_ms(2);
  5719  002006  0E00               	movlw	0
  5720  002008  6E47               	movwf	wait_in_ms@time_in_ms+1,c
  5721  00200A  0E02               	movlw	2
  5722  00200C  6E46               	movwf	wait_in_ms@time_in_ms,c
  5723  00200E  EC16  F010         	call	_wait_in_ms	;wreg free
  5724                           
  5725                           ;lcd.c: 266: lcd_orden(0x06);
  5726  002012  0E00               	movlw	0
  5727  002014  6E51               	movwf	lcd_orden@orden+1,c
  5728  002016  0E06               	movlw	6
  5729  002018  6E50               	movwf	lcd_orden@orden,c
  5730  00201A  ECAC  F012         	call	_lcd_orden	;wreg free
  5731                           
  5732                           ;lcd.c: 267: wait_in_ms(8);
  5733  00201E  0E00               	movlw	0
  5734  002020  6E47               	movwf	wait_in_ms@time_in_ms+1,c
  5735  002022  0E08               	movlw	8
  5736  002024  6E46               	movwf	wait_in_ms@time_in_ms,c
  5737  002026  EC16  F010         	call	_wait_in_ms	;wreg free
  5738  00202A  0012               	return		;funcret
  5739  00202C                     __end_of_lcd_iniciar:
  5740                           	opt stack 0
  5741                           tblptru	equ	0xFF8
  5742                           tblptrh	equ	0xFF7
  5743                           tblptrl	equ	0xFF6
  5744                           tablat	equ	0xFF5
  5745                           prodh	equ	0xFF4
  5746                           prodl	equ	0xFF3
  5747                           wreg	equ	0xFE8
  5748                           indf2	equ	0xFDF
  5749                           postinc2	equ	0xFDE
  5750                           postdec2	equ	0xFDD
  5751                           fsr2h	equ	0xFDA
  5752                           fsr2l	equ	0xFD9
  5753                           status	equ	0xFD8
  5754                           
  5755 ;; *************** function _lcd_orden *****************
  5756 ;; Defined at:
  5757 ;;		line 277 in file "lcd.c"
  5758 ;; Parameters:    Size  Location     Type
  5759 ;;  orden           2   79[COMRAM] unsigned int 
  5760 ;; Auto vars:     Size  Location     Type
  5761 ;;		None
  5762 ;; Return value:  Size  Location     Type
  5763 ;;                  1    wreg      void 
  5764 ;; Registers used:
  5765 ;;		wreg, status,2, status,0, cstack
  5766 ;; Tracked objects:
  5767 ;;		On entry : 0/0
  5768 ;;		On exit  : 0/0
  5769 ;;		Unchanged: 0/0
  5770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5771 ;;      Params:         2       0       0       0       0       0       0       0       0
  5772 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5773 ;;      Temps:          5       0       0       0       0       0       0       0       0
  5774 ;;      Totals:         7       0       0       0       0       0       0       0       0
  5775 ;;Total ram usage:        7 bytes
  5776 ;; Hardware stack levels used:    1
  5777 ;; Hardware stack levels required when called:    4
  5778 ;; This function calls:
  5779 ;;		_lcd_pulso
  5780 ;; This function is called by:
  5781 ;;		_lcd_iniciar
  5782 ;;		_lcd_origen
  5783 ;;		_lcd_ubicarXY
  5784 ;;		_lcd_limpiar
  5785 ;; This function uses a non-reentrant model
  5786 ;;
  5787                           
  5788                           	psect	text24
  5789  002558                     __ptext24:
  5790                           	opt stack 0
  5791  002558                     _lcd_orden:
  5792                           	opt stack 24
  5793                           
  5794                           ;lcd.c: 278: PORTDbits.RD1=0;
  5795                           
  5796                           ;incstack = 0
  5797  002558  9283               	bcf	3971,1,c	;volatile
  5798                           
  5799                           ;lcd.c: 280: PORTD=(((((PORTD>>4&0x0f)|0x0f)&(orden>>4&0x0f))<<4)|(PORTD&0x0f));
  5800  00255A  CF83 F052          	movff	3971,??_lcd_orden	;volatile
  5801  00255E  0E0F               	movlw	15
  5802  002560  1652               	andwf	??_lcd_orden,f,c
  5803  002562  C050  F053         	movff	lcd_orden@orden,??_lcd_orden+1
  5804  002566  C051  F054         	movff	lcd_orden@orden+1,??_lcd_orden+2
  5805  00256A  0E04               	movlw	4
  5806  00256C  6E55               	movwf	(??_lcd_orden+3)& (0+255),c
  5807  00256E                     u1815:
  5808  00256E  90D8               	bcf	status,0,c
  5809  002570  3254               	rrcf	??_lcd_orden+2,f,c
  5810  002572  3253               	rrcf	??_lcd_orden+1,f,c
  5811  002574  2E55               	decfsz	(??_lcd_orden+3)& (0+255),f,c
  5812  002576  D7FB               	goto	u1815
  5813  002578  0E0F               	movlw	15
  5814  00257A  1653               	andwf	??_lcd_orden+1,f,c
  5815  00257C  3883               	swapf	3971,w,c	;volatile
  5816  00257E  0B0F               	andlw	15
  5817  002580  0B0F               	andlw	15
  5818  002582  090F               	iorlw	15
  5819  002584  1453               	andwf	??_lcd_orden+1,w,c
  5820  002586  6E56               	movwf	(??_lcd_orden+4)& (0+255),c
  5821  002588  3856               	swapf	??_lcd_orden+4,w,c
  5822  00258A  0BF0               	andlw	240
  5823  00258C  1052               	iorwf	??_lcd_orden,w,c
  5824  00258E  6E83               	movwf	3971,c	;volatile
  5825                           
  5826                           ;lcd.c: 281: lcd_pulso();
  5827  002590  ECA9  F013         	call	_lcd_pulso	;wreg free
  5828                           
  5829                           ;lcd.c: 282: PORTD=(((((PORTD>>4&0x0f)|0x0f)&(orden&0x0f))<<4)|(PORTD&0x0f));
  5830  002594  CF83 F052          	movff	3971,??_lcd_orden	;volatile
  5831  002598  0E0F               	movlw	15
  5832  00259A  1652               	andwf	??_lcd_orden,f,c
  5833  00259C  C050  F053         	movff	lcd_orden@orden,??_lcd_orden+1
  5834  0025A0  0E0F               	movlw	15
  5835  0025A2  1653               	andwf	??_lcd_orden+1,f,c
  5836  0025A4  3883               	swapf	3971,w,c	;volatile
  5837  0025A6  0B0F               	andlw	15
  5838  0025A8  0B0F               	andlw	15
  5839  0025AA  090F               	iorlw	15
  5840  0025AC  1453               	andwf	??_lcd_orden+1,w,c
  5841  0025AE  6E54               	movwf	(??_lcd_orden+2)& (0+255),c
  5842  0025B0  3854               	swapf	??_lcd_orden+2,w,c
  5843  0025B2  0BF0               	andlw	240
  5844  0025B4  1052               	iorwf	??_lcd_orden,w,c
  5845  0025B6  6E83               	movwf	3971,c	;volatile
  5846                           
  5847                           ;lcd.c: 283: lcd_pulso();
  5848  0025B8  ECA9  F013         	call	_lcd_pulso	;wreg free
  5849  0025BC  0012               	return		;funcret
  5850  0025BE                     __end_of_lcd_orden:
  5851                           	opt stack 0
  5852                           tblptru	equ	0xFF8
  5853                           tblptrh	equ	0xFF7
  5854                           tblptrl	equ	0xFF6
  5855                           tablat	equ	0xFF5
  5856                           prodh	equ	0xFF4
  5857                           prodl	equ	0xFF3
  5858                           wreg	equ	0xFE8
  5859                           indf2	equ	0xFDF
  5860                           postinc2	equ	0xFDE
  5861                           postdec2	equ	0xFDD
  5862                           fsr2h	equ	0xFDA
  5863                           fsr2l	equ	0xFD9
  5864                           status	equ	0xFD8
  5865                           
  5866 ;; *************** function _lcd_pulso *****************
  5867 ;; Defined at:
  5868 ;;		line 270 in file "lcd.c"
  5869 ;; Parameters:    Size  Location     Type
  5870 ;;		None
  5871 ;; Auto vars:     Size  Location     Type
  5872 ;;		None
  5873 ;; Return value:  Size  Location     Type
  5874 ;;                  1    wreg      void 
  5875 ;; Registers used:
  5876 ;;		wreg, status,2, status,0, cstack
  5877 ;; Tracked objects:
  5878 ;;		On entry : 0/0
  5879 ;;		On exit  : 0/0
  5880 ;;		Unchanged: 0/0
  5881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5882 ;;      Params:         0       0       0       0       0       0       0       0       0
  5883 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5884 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5885 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5886 ;;Total ram usage:        0 bytes
  5887 ;; Hardware stack levels used:    1
  5888 ;; Hardware stack levels required when called:    3
  5889 ;; This function calls:
  5890 ;;		_wait_in_ms
  5891 ;; This function is called by:
  5892 ;;		_lcd_iniciar
  5893 ;;		_lcd_orden
  5894 ;;		_lcd_caracter
  5895 ;; This function uses a non-reentrant model
  5896 ;;
  5897                           
  5898                           	psect	text25
  5899  002752                     __ptext25:
  5900                           	opt stack 0
  5901  002752                     _lcd_pulso:
  5902                           	opt stack 24
  5903                           
  5904                           ;lcd.c: 271: PORTDbits.RD3=1;
  5905                           
  5906                           ;incstack = 0
  5907  002752  8683               	bsf	3971,3,c	;volatile
  5908                           
  5909                           ;lcd.c: 272: wait_in_ms(2);
  5910  002754  0E00               	movlw	0
  5911  002756  6E47               	movwf	wait_in_ms@time_in_ms+1,c
  5912  002758  0E02               	movlw	2
  5913  00275A  6E46               	movwf	wait_in_ms@time_in_ms,c
  5914  00275C  EC16  F010         	call	_wait_in_ms	;wreg free
  5915                           
  5916                           ;lcd.c: 273: PORTDbits.RD3=0;
  5917  002760  9683               	bcf	3971,3,c	;volatile
  5918                           
  5919                           ;lcd.c: 274: wait_in_ms(2);
  5920  002762  0E00               	movlw	0
  5921  002764  6E47               	movwf	wait_in_ms@time_in_ms+1,c
  5922  002766  0E02               	movlw	2
  5923  002768  6E46               	movwf	wait_in_ms@time_in_ms,c
  5924  00276A  EC16  F010         	call	_wait_in_ms	;wreg free
  5925  00276E  0012               	return		;funcret
  5926  002770                     __end_of_lcd_pulso:
  5927                           	opt stack 0
  5928                           tblptru	equ	0xFF8
  5929                           tblptrh	equ	0xFF7
  5930                           tblptrl	equ	0xFF6
  5931                           tablat	equ	0xFF5
  5932                           prodh	equ	0xFF4
  5933                           prodl	equ	0xFF3
  5934                           wreg	equ	0xFE8
  5935                           indf2	equ	0xFDF
  5936                           postinc2	equ	0xFDE
  5937                           postdec2	equ	0xFDD
  5938                           fsr2h	equ	0xFDA
  5939                           fsr2l	equ	0xFD9
  5940                           status	equ	0xFD8
  5941                           
  5942 ;; *************** function _wait_in_ms *****************
  5943 ;; Defined at:
  5944 ;;		line 80 in file "config.c"
  5945 ;; Parameters:    Size  Location     Type
  5946 ;;  time_in_ms      2   69[COMRAM] int 
  5947 ;; Auto vars:     Size  Location     Type
  5948 ;;  count_ms        2   77[COMRAM] unsigned int 
  5949 ;;  count           2   75[COMRAM] unsigned int 
  5950 ;;  flag            2   73[COMRAM] unsigned int 
  5951 ;; Return value:  Size  Location     Type
  5952 ;;                  1    wreg      void 
  5953 ;; Registers used:
  5954 ;;		wreg, status,2, status,0, cstack
  5955 ;; Tracked objects:
  5956 ;;		On entry : 0/0
  5957 ;;		On exit  : 0/0
  5958 ;;		Unchanged: 0/0
  5959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5960 ;;      Params:         2       0       0       0       0       0       0       0       0
  5961 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5962 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5963 ;;      Totals:        10       0       0       0       0       0       0       0       0
  5964 ;;Total ram usage:       10 bytes
  5965 ;; Hardware stack levels used:    1
  5966 ;; Hardware stack levels required when called:    2
  5967 ;; This function calls:
  5968 ;;		___awtoft
  5969 ;;		___ftdiv
  5970 ;;		___fttol
  5971 ;; This function is called by:
  5972 ;;		_lcd_iniciar
  5973 ;;		_lcd_pulso
  5974 ;;		_lcd_origen
  5975 ;;		_lcd_limpiar
  5976 ;;		_Lcd_Cmd
  5977 ;; This function uses a non-reentrant model
  5978 ;;
  5979                           
  5980                           	psect	text26
  5981  00202C                     __ptext26:
  5982                           	opt stack 0
  5983  00202C                     _wait_in_ms:
  5984                           	opt stack 26
  5985                           
  5986                           ;config.c: 81: unsigned int count = 0;
  5987                           
  5988                           ;incstack = 0
  5989  00202C  0E00               	movlw	0
  5990  00202E  6E4D               	movwf	wait_in_ms@count+1,c
  5991  002030  0E00               	movlw	0
  5992  002032  6E4C               	movwf	wait_in_ms@count,c
  5993                           
  5994                           ;config.c: 82: unsigned int count_ms = 0;
  5995  002034  0E00               	movlw	0
  5996  002036  6E4F               	movwf	wait_in_ms@count_ms+1,c
  5997  002038  0E00               	movlw	0
  5998  00203A  6E4E               	movwf	wait_in_ms@count_ms,c
  5999                           
  6000                           ;config.c: 83: unsigned int flag = 0;
  6001  00203C  0E00               	movlw	0
  6002  00203E  6E4B               	movwf	wait_in_ms@flag+1,c
  6003  002040  0E00               	movlw	0
  6004  002042  6E4A               	movwf	wait_in_ms@flag,c
  6005                           
  6006                           ;config.c: 85: TMR0L = 131;
  6007  002044  0E83               	movlw	131
  6008  002046  6ED6               	movwf	4054,c	;volatile
  6009                           
  6010                           ;config.c: 88: count_ms = ((8000000)*0.001)/((256-TMR0L)*32);
  6011  002048  50D6               	movf	4054,w,c	;volatile
  6012  00204A  6E48               	movwf	??_wait_in_ms& (0+255),c
  6013  00204C  6A49               	clrf	(??_wait_in_ms+1)& (0+255),c
  6014  00204E  1E48               	comf	??_wait_in_ms,f,c
  6015  002050  1E49               	comf	??_wait_in_ms+1,f,c
  6016  002052  4A48               	infsnz	??_wait_in_ms,f,c
  6017  002054  2A49               	incf	??_wait_in_ms+1,f,c
  6018  002056  0E05               	movlw	5
  6019  002058                     u1765:
  6020  002058  90D8               	bcf	status,0,c
  6021  00205A  3648               	rlcf	??_wait_in_ms,f,c
  6022  00205C  3649               	rlcf	??_wait_in_ms+1,f,c
  6023  00205E  2EE8               	decfsz	wreg,f,c
  6024  002060  D7FB               	goto	u1765
  6025  002062  0E00               	movlw	0
  6026  002064  2448               	addwf	??_wait_in_ms,w,c
  6027  002066  6E09               	movwf	___awtoft@c,c
  6028  002068  0E20               	movlw	32
  6029  00206A  2049               	addwfc	??_wait_in_ms+1,w,c
  6030  00206C  6E0A               	movwf	___awtoft@c+1,c
  6031  00206E  EC2D  F013         	call	___awtoft	;wreg free
  6032  002072  C009  F015         	movff	?___awtoft,___ftdiv@f2
  6033  002076  C00A  F016         	movff	?___awtoft+1,___ftdiv@f2+1
  6034  00207A  C00B  F017         	movff	?___awtoft+2,___ftdiv@f2+2
  6035  00207E  0E00               	movlw	0
  6036  002080  6E12               	movwf	___ftdiv@f1,c
  6037  002082  0EFA               	movlw	250
  6038  002084  6E13               	movwf	___ftdiv@f1+1,c
  6039  002086  0E45               	movlw	69
  6040  002088  6E14               	movwf	___ftdiv@f1+2,c
  6041  00208A  EC3C  F00F         	call	___ftdiv	;wreg free
  6042  00208E  C012  F037         	movff	?___ftdiv,___fttol@f1
  6043  002092  C013  F038         	movff	?___ftdiv+1,___fttol@f1+1
  6044  002096  C014  F039         	movff	?___ftdiv+2,___fttol@f1+2
  6045  00209A  ECC2  F00E         	call	___fttol	;wreg free
  6046  00209E  C037  F04E         	movff	?___fttol,wait_in_ms@count_ms
  6047  0020A2  C038  F04F         	movff	?___fttol+1,wait_in_ms@count_ms+1
  6048                           
  6049                           ;config.c: 90: TMR0ON = 1;
  6050  0020A6  8ED5               	bsf	4053,7,c	;volatile
  6051                           
  6052                           ;config.c: 92: while (count < count_ms){
  6053  0020A8  D020               	goto	l116
  6054  0020AA                     l112:
  6055                           
  6056                           ;config.c: 93: if(TMR0IF == 1){
  6057  0020AA  A4F2               	btfss	intcon,2,c	;volatile
  6058  0020AC  D01E               	goto	l116
  6059                           
  6060                           ;config.c: 94: TMR0IF = 0;
  6061  0020AE  94F2               	bcf	intcon,2,c	;volatile
  6062                           
  6063                           ;config.c: 95: TMR0L = 131;
  6064  0020B0  0E83               	movlw	131
  6065  0020B2  6ED6               	movwf	4054,c	;volatile
  6066                           
  6067                           ;config.c: 96: count ++;
  6068  0020B4  4A4C               	infsnz	wait_in_ms@count,f,c
  6069  0020B6  2A4D               	incf	wait_in_ms@count+1,f,c
  6070                           
  6071                           ;config.c: 97: if (count == count_ms){
  6072  0020B8  504E               	movf	wait_in_ms@count_ms,w,c
  6073  0020BA  184C               	xorwf	wait_in_ms@count,w,c
  6074  0020BC  E116               	bnz	l2174
  6075  0020BE  504F               	movf	wait_in_ms@count_ms+1,w,c
  6076  0020C0  184D               	xorwf	wait_in_ms@count+1,w,c
  6077  0020C2  A4D8               	btfss	status,2,c
  6078  0020C4  D012               	goto	l116
  6079                           
  6080                           ;config.c: 98: flag++;
  6081  0020C6  4A4A               	infsnz	wait_in_ms@flag,f,c
  6082  0020C8  2A4B               	incf	wait_in_ms@flag+1,f,c
  6083                           
  6084                           ;config.c: 99: if (flag != time_in_ms){
  6085  0020CA  504A               	movf	wait_in_ms@flag,w,c
  6086  0020CC  1846               	xorwf	wait_in_ms@time_in_ms,w,c
  6087  0020CE  E104               	bnz	u1790
  6088  0020D0  504B               	movf	wait_in_ms@flag+1,w,c
  6089  0020D2  1847               	xorwf	wait_in_ms@time_in_ms+1,w,c
  6090  0020D4  B4D8               	btfsc	status,2,c
  6091  0020D6  D005               	goto	l115
  6092  0020D8                     u1790:
  6093                           
  6094                           ;config.c: 100: count = 0;
  6095  0020D8  0E00               	movlw	0
  6096  0020DA  6E4D               	movwf	wait_in_ms@count+1,c
  6097  0020DC  0E00               	movlw	0
  6098  0020DE  6E4C               	movwf	wait_in_ms@count,c
  6099                           
  6100                           ;config.c: 101: }
  6101  0020E0  D004               	goto	l116
  6102  0020E2                     l115:
  6103                           
  6104                           ;config.c: 102: else{
  6105                           ;config.c: 103: count = count_ms;
  6106  0020E2  C04E  F04C         	movff	wait_in_ms@count_ms,wait_in_ms@count
  6107  0020E6  C04F  F04D         	movff	wait_in_ms@count_ms+1,wait_in_ms@count+1
  6108  0020EA                     l116:
  6109  0020EA                     l2174:
  6110  0020EA  504E               	movf	wait_in_ms@count_ms,w,c
  6111  0020EC  5C4C               	subwf	wait_in_ms@count,w,c
  6112  0020EE  504F               	movf	wait_in_ms@count_ms+1,w,c
  6113  0020F0  584D               	subwfb	wait_in_ms@count+1,w,c
  6114  0020F2  B0D8               	btfsc	status,0,c
  6115  0020F4  0012               	return	
  6116  0020F6  D7D9               	goto	l112
  6117  0020F8                     __end_of_wait_in_ms:
  6118                           	opt stack 0
  6119                           tblptru	equ	0xFF8
  6120                           tblptrh	equ	0xFF7
  6121                           tblptrl	equ	0xFF6
  6122                           tablat	equ	0xFF5
  6123                           prodh	equ	0xFF4
  6124                           prodl	equ	0xFF3
  6125                           intcon	equ	0xFF2
  6126                           wreg	equ	0xFE8
  6127                           indf2	equ	0xFDF
  6128                           postinc2	equ	0xFDE
  6129                           postdec2	equ	0xFDD
  6130                           fsr2h	equ	0xFDA
  6131                           fsr2l	equ	0xFD9
  6132                           status	equ	0xFD8
  6133                           
  6134 ;; *************** function ___fttol *****************
  6135 ;; Defined at:
  6136 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  6137 ;; Parameters:    Size  Location     Type
  6138 ;;  f1              3   54[COMRAM] float 
  6139 ;; Auto vars:     Size  Location     Type
  6140 ;;  lval            4   64[COMRAM] unsigned long 
  6141 ;;  exp1            1   68[COMRAM] unsigned char 
  6142 ;;  sign1           1   63[COMRAM] unsigned char 
  6143 ;; Return value:  Size  Location     Type
  6144 ;;                  4   54[COMRAM] long 
  6145 ;; Registers used:
  6146 ;;		wreg, status,2, status,0
  6147 ;; Tracked objects:
  6148 ;;		On entry : 0/0
  6149 ;;		On exit  : 0/0
  6150 ;;		Unchanged: 0/0
  6151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6152 ;;      Params:         4       0       0       0       0       0       0       0       0
  6153 ;;      Locals:         6       0       0       0       0       0       0       0       0
  6154 ;;      Temps:          5       0       0       0       0       0       0       0       0
  6155 ;;      Totals:        15       0       0       0       0       0       0       0       0
  6156 ;;Total ram usage:       15 bytes
  6157 ;; Hardware stack levels used:    1
  6158 ;; This function calls:
  6159 ;;		Nothing
  6160 ;; This function is called by:
  6161 ;;		_wait_in_ms
  6162 ;;		_sprintf
  6163 ;; This function uses a non-reentrant model
  6164 ;;
  6165                           
  6166                           	psect	text27
  6167  001D84                     __ptext27:
  6168                           	opt stack 0
  6169  001D84                     ___fttol:
  6170                           	opt stack 29
  6171                           
  6172                           ;incstack = 0
  6173  001D84  C039  F03B         	movff	___fttol@f1+2,??___fttol
  6174  001D88  6A3C               	clrf	(??___fttol+1)& (0+255),c
  6175  001D8A  6A3D               	clrf	(??___fttol+2)& (0+255),c
  6176  001D8C  3438               	rlcf	___fttol@f1+1,w,c
  6177  001D8E  363B               	rlcf	??___fttol& (0+255),f,c
  6178  001D90  E301               	bnc	u1681
  6179  001D92  803C               	bsf	(??___fttol+1)& (0+255),0,c
  6180  001D94                     u1681:
  6181  001D94  503B               	movf	??___fttol,w,c
  6182  001D96  6E45               	movwf	___fttol@exp1,c
  6183  001D98  5045               	movf	___fttol@exp1,w,c
  6184  001D9A  A4D8               	btfss	status,2,c
  6185  001D9C  D009               	goto	l620
  6186  001D9E  0E00               	movlw	0
  6187  001DA0  6E37               	movwf	?___fttol,c
  6188  001DA2  0E00               	movlw	0
  6189  001DA4  6E38               	movwf	?___fttol+1,c
  6190  001DA6  0E00               	movlw	0
  6191  001DA8  6E39               	movwf	?___fttol+2,c
  6192  001DAA  0E00               	movlw	0
  6193  001DAC  6E3A               	movwf	?___fttol+3,c
  6194  001DAE  0012               	return	
  6195  001DB0                     l620:
  6196  001DB0  0E17               	movlw	23
  6197  001DB2  6E3B               	movwf	??___fttol& (0+255),c
  6198  001DB4  C037  F03C         	movff	___fttol@f1,??___fttol+1
  6199  001DB8  C038  F03D         	movff	___fttol@f1+1,??___fttol+2
  6200  001DBC  C039  F03E         	movff	___fttol@f1+2,??___fttol+3
  6201  001DC0  283B               	incf	??___fttol,w,c
  6202  001DC2  6E3F               	movwf	(??___fttol+4)& (0+255),c
  6203  001DC4  D004               	goto	u1700
  6204  001DC6                     u1705:
  6205  001DC6  90D8               	bcf	status,0,c
  6206  001DC8  323E               	rrcf	??___fttol+3,f,c
  6207  001DCA  323D               	rrcf	??___fttol+2,f,c
  6208  001DCC  323C               	rrcf	??___fttol+1,f,c
  6209  001DCE                     u1700:
  6210  001DCE  2E3F               	decfsz	(??___fttol+4)& (0+255),f,c
  6211  001DD0  D7FA               	goto	u1705
  6212  001DD2  503C               	movf	??___fttol+1,w,c
  6213  001DD4  6E40               	movwf	___fttol@sign1,c
  6214  001DD6  8E38               	bsf	___fttol@f1+1,7,c
  6215  001DD8  0EFF               	movlw	255
  6216  001DDA  1637               	andwf	___fttol@f1,f,c
  6217  001DDC  0EFF               	movlw	255
  6218  001DDE  1638               	andwf	___fttol@f1+1,f,c
  6219  001DE0  0E00               	movlw	0
  6220  001DE2  1639               	andwf	___fttol@f1+2,f,c
  6221  001DE4  5037               	movf	___fttol@f1,w,c
  6222  001DE6  6E41               	movwf	___fttol@lval,c
  6223  001DE8  5038               	movf	___fttol@f1+1,w,c
  6224  001DEA  6E42               	movwf	___fttol@lval+1,c
  6225  001DEC  5039               	movf	___fttol@f1+2,w,c
  6226  001DEE  6E43               	movwf	___fttol@lval+2,c
  6227  001DF0  6A44               	clrf	___fttol@lval+3,c
  6228  001DF2  0E8E               	movlw	142
  6229  001DF4  5E45               	subwf	___fttol@exp1,f,c
  6230  001DF6  AE45               	btfss	___fttol@exp1,7,c
  6231  001DF8  D016               	goto	l622
  6232  001DFA  5045               	movf	___fttol@exp1,w,c
  6233  001DFC  0A80               	xorlw	128
  6234  001DFE  0F8F               	addlw	143
  6235  001E00  B0D8               	btfsc	status,0,c
  6236  001E02  D009               	goto	l623
  6237  001E04  0E00               	movlw	0
  6238  001E06  6E37               	movwf	?___fttol,c
  6239  001E08  0E00               	movlw	0
  6240  001E0A  6E38               	movwf	?___fttol+1,c
  6241  001E0C  0E00               	movlw	0
  6242  001E0E  6E39               	movwf	?___fttol+2,c
  6243  001E10  0E00               	movlw	0
  6244  001E12  6E3A               	movwf	?___fttol+3,c
  6245  001E14  0012               	return	
  6246  001E16                     l623:
  6247  001E16  90D8               	bcf	status,0,c
  6248  001E18  3244               	rrcf	___fttol@lval+3,f,c
  6249  001E1A  3243               	rrcf	___fttol@lval+2,f,c
  6250  001E1C  3242               	rrcf	___fttol@lval+1,f,c
  6251  001E1E  3241               	rrcf	___fttol@lval,f,c
  6252  001E20  3E45               	incfsz	___fttol@exp1,f,c
  6253  001E22  D7F9               	goto	l623
  6254  001E24  D015               	goto	u1740
  6255  001E26                     l622:
  6256  001E26  0E17               	movlw	23
  6257  001E28  6445               	cpfsgt	___fttol@exp1,c
  6258  001E2A  D00F               	goto	l628
  6259  001E2C  0E00               	movlw	0
  6260  001E2E  6E37               	movwf	?___fttol,c
  6261  001E30  0E00               	movlw	0
  6262  001E32  6E38               	movwf	?___fttol+1,c
  6263  001E34  0E00               	movlw	0
  6264  001E36  6E39               	movwf	?___fttol+2,c
  6265  001E38  0E00               	movlw	0
  6266  001E3A  6E3A               	movwf	?___fttol+3,c
  6267  001E3C  0012               	return	
  6268  001E3E  90D8               	bcf	status,0,c
  6269  001E40  3641               	rlcf	___fttol@lval,f,c
  6270  001E42  3642               	rlcf	___fttol@lval+1,f,c
  6271  001E44  3643               	rlcf	___fttol@lval+2,f,c
  6272  001E46  3644               	rlcf	___fttol@lval+3,f,c
  6273  001E48  0645               	decf	___fttol@exp1,f,c
  6274  001E4A                     l628:
  6275  001E4A  5045               	movf	___fttol@exp1,w,c
  6276  001E4C  A4D8               	btfss	status,2,c
  6277  001E4E  D7F7               	goto	l629
  6278  001E50                     u1740:
  6279  001E50  5040               	movf	___fttol@sign1,w,c
  6280  001E52  B4D8               	btfsc	status,2,c
  6281  001E54  D008               	goto	l631
  6282  001E56  1E44               	comf	___fttol@lval+3,f,c
  6283  001E58  1E43               	comf	___fttol@lval+2,f,c
  6284  001E5A  1E42               	comf	___fttol@lval+1,f,c
  6285  001E5C  6C41               	negf	___fttol@lval,c
  6286  001E5E  0E00               	movlw	0
  6287  001E60  2242               	addwfc	___fttol@lval+1,f,c
  6288  001E62  2243               	addwfc	___fttol@lval+2,f,c
  6289  001E64  2244               	addwfc	___fttol@lval+3,f,c
  6290  001E66                     l631:
  6291  001E66  C041  F037         	movff	___fttol@lval,?___fttol
  6292  001E6A  C042  F038         	movff	___fttol@lval+1,?___fttol+1
  6293  001E6E  C043  F039         	movff	___fttol@lval+2,?___fttol+2
  6294  001E72  C044  F03A         	movff	___fttol@lval+3,?___fttol+3
  6295  001E76  0012               	return	
  6296  001E78                     __end_of___fttol:
  6297                           	opt stack 0
  6298                           tblptru	equ	0xFF8
  6299                           tblptrh	equ	0xFF7
  6300                           tblptrl	equ	0xFF6
  6301                           tablat	equ	0xFF5
  6302                           prodh	equ	0xFF4
  6303                           prodl	equ	0xFF3
  6304                           intcon	equ	0xFF2
  6305                           wreg	equ	0xFE8
  6306                           indf2	equ	0xFDF
  6307                           postinc2	equ	0xFDE
  6308                           postdec2	equ	0xFDD
  6309                           fsr2h	equ	0xFDA
  6310                           fsr2l	equ	0xFD9
  6311                           status	equ	0xFD8
  6312                           
  6313 ;; *************** function ___ftdiv *****************
  6314 ;; Defined at:
  6315 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  6316 ;; Parameters:    Size  Location     Type
  6317 ;;  f1              3   17[COMRAM] float 
  6318 ;;  f2              3   20[COMRAM] float 
  6319 ;; Auto vars:     Size  Location     Type
  6320 ;;  f3              3   27[COMRAM] float 
  6321 ;;  sign            1   31[COMRAM] unsigned char 
  6322 ;;  exp             1   30[COMRAM] unsigned char 
  6323 ;;  cntr            1   26[COMRAM] unsigned char 
  6324 ;; Return value:  Size  Location     Type
  6325 ;;                  3   17[COMRAM] float 
  6326 ;; Registers used:
  6327 ;;		wreg, status,2, status,0, cstack
  6328 ;; Tracked objects:
  6329 ;;		On entry : 0/0
  6330 ;;		On exit  : 0/0
  6331 ;;		Unchanged: 0/0
  6332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6333 ;;      Params:         6       0       0       0       0       0       0       0       0
  6334 ;;      Locals:         6       0       0       0       0       0       0       0       0
  6335 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6336 ;;      Totals:        15       0       0       0       0       0       0       0       0
  6337 ;;Total ram usage:       15 bytes
  6338 ;; Hardware stack levels used:    1
  6339 ;; Hardware stack levels required when called:    1
  6340 ;; This function calls:
  6341 ;;		___ftpack
  6342 ;; This function is called by:
  6343 ;;		_wait_in_ms
  6344 ;;		_main
  6345 ;; This function uses a non-reentrant model
  6346 ;;
  6347                           
  6348                           	psect	text28
  6349  001E78                     __ptext28:
  6350                           	opt stack 0
  6351  001E78                     ___ftdiv:
  6352                           	opt stack 26
  6353                           
  6354                           ;incstack = 0
  6355  001E78  C014  F018         	movff	___ftdiv@f1+2,??___ftdiv
  6356  001E7C  6A19               	clrf	(??___ftdiv+1)& (0+255),c
  6357  001E7E  6A1A               	clrf	(??___ftdiv+2)& (0+255),c
  6358  001E80  3413               	rlcf	___ftdiv@f1+1,w,c
  6359  001E82  3618               	rlcf	??___ftdiv& (0+255),f,c
  6360  001E84  E301               	bnc	u1621
  6361  001E86  8019               	bsf	(??___ftdiv+1)& (0+255),0,c
  6362  001E88                     u1621:
  6363  001E88  5018               	movf	??___ftdiv,w,c
  6364  001E8A  6E1F               	movwf	___ftdiv@exp,c
  6365  001E8C  501F               	movf	___ftdiv@exp,w,c
  6366  001E8E  A4D8               	btfss	status,2,c
  6367  001E90  D007               	goto	l567
  6368  001E92  0E00               	movlw	0
  6369  001E94  6E12               	movwf	?___ftdiv,c
  6370  001E96  0E00               	movlw	0
  6371  001E98  6E13               	movwf	?___ftdiv+1,c
  6372  001E9A  0E00               	movlw	0
  6373  001E9C  6E14               	movwf	?___ftdiv+2,c
  6374  001E9E  0012               	return	
  6375  001EA0                     l567:
  6376  001EA0  C017  F018         	movff	___ftdiv@f2+2,??___ftdiv
  6377  001EA4  6A19               	clrf	(??___ftdiv+1)& (0+255),c
  6378  001EA6  6A1A               	clrf	(??___ftdiv+2)& (0+255),c
  6379  001EA8  3416               	rlcf	___ftdiv@f2+1,w,c
  6380  001EAA  3618               	rlcf	??___ftdiv& (0+255),f,c
  6381  001EAC  E301               	bnc	u1641
  6382  001EAE  8019               	bsf	(??___ftdiv+1)& (0+255),0,c
  6383  001EB0                     u1641:
  6384  001EB0  5018               	movf	??___ftdiv,w,c
  6385  001EB2  6E20               	movwf	___ftdiv@sign,c
  6386  001EB4  5020               	movf	___ftdiv@sign,w,c
  6387  001EB6  A4D8               	btfss	status,2,c
  6388  001EB8  D007               	goto	l569
  6389  001EBA  0E00               	movlw	0
  6390  001EBC  6E12               	movwf	?___ftdiv,c
  6391  001EBE  0E00               	movlw	0
  6392  001EC0  6E13               	movwf	?___ftdiv+1,c
  6393  001EC2  0E00               	movlw	0
  6394  001EC4  6E14               	movwf	?___ftdiv+2,c
  6395  001EC6  0012               	return	
  6396  001EC8                     l569:
  6397  001EC8  0E00               	movlw	0
  6398  001ECA  6E1C               	movwf	___ftdiv@f3,c
  6399  001ECC  0E00               	movlw	0
  6400  001ECE  6E1D               	movwf	___ftdiv@f3+1,c
  6401  001ED0  0E00               	movlw	0
  6402  001ED2  6E1E               	movwf	___ftdiv@f3+2,c
  6403  001ED4  5020               	movf	___ftdiv@sign,w,c
  6404  001ED6  0F89               	addlw	137
  6405  001ED8  5E1F               	subwf	___ftdiv@exp,f,c
  6406  001EDA  C014  F020         	movff	___ftdiv@f1+2,___ftdiv@sign
  6407  001EDE  5017               	movf	___ftdiv@f2+2,w,c
  6408  001EE0  1A20               	xorwf	___ftdiv@sign,f,c
  6409  001EE2  0E80               	movlw	128
  6410  001EE4  1620               	andwf	___ftdiv@sign,f,c
  6411  001EE6  8E13               	bsf	___ftdiv@f1+1,7,c
  6412  001EE8  0EFF               	movlw	255
  6413  001EEA  1612               	andwf	___ftdiv@f1,f,c
  6414  001EEC  0EFF               	movlw	255
  6415  001EEE  1613               	andwf	___ftdiv@f1+1,f,c
  6416  001EF0  0E00               	movlw	0
  6417  001EF2  1614               	andwf	___ftdiv@f1+2,f,c
  6418  001EF4  8E16               	bsf	___ftdiv@f2+1,7,c
  6419  001EF6  0EFF               	movlw	255
  6420  001EF8  1615               	andwf	___ftdiv@f2,f,c
  6421  001EFA  0EFF               	movlw	255
  6422  001EFC  1616               	andwf	___ftdiv@f2+1,f,c
  6423  001EFE  0E00               	movlw	0
  6424  001F00  1617               	andwf	___ftdiv@f2+2,f,c
  6425  001F02  0E18               	movlw	24
  6426  001F04  6E1B               	movwf	___ftdiv@cntr,c
  6427  001F06  90D8               	bcf	status,0,c
  6428  001F08  361C               	rlcf	___ftdiv@f3,f,c
  6429  001F0A  361D               	rlcf	___ftdiv@f3+1,f,c
  6430  001F0C  361E               	rlcf	___ftdiv@f3+2,f,c
  6431  001F0E  5015               	movf	___ftdiv@f2,w,c
  6432  001F10  5C12               	subwf	___ftdiv@f1,w,c
  6433  001F12  5016               	movf	___ftdiv@f2+1,w,c
  6434  001F14  5813               	subwfb	___ftdiv@f1+1,w,c
  6435  001F16  5017               	movf	___ftdiv@f2+2,w,c
  6436  001F18  5814               	subwfb	___ftdiv@f1+2,w,c
  6437  001F1A  A0D8               	btfss	status,0,c
  6438  001F1C  D007               	goto	l571
  6439  001F1E  5015               	movf	___ftdiv@f2,w,c
  6440  001F20  5E12               	subwf	___ftdiv@f1,f,c
  6441  001F22  5016               	movf	___ftdiv@f2+1,w,c
  6442  001F24  5A13               	subwfb	___ftdiv@f1+1,f,c
  6443  001F26  5017               	movf	___ftdiv@f2+2,w,c
  6444  001F28  5A14               	subwfb	___ftdiv@f1+2,f,c
  6445  001F2A  801C               	bsf	___ftdiv@f3,0,c
  6446  001F2C                     l571:
  6447  001F2C  90D8               	bcf	status,0,c
  6448  001F2E  3612               	rlcf	___ftdiv@f1,f,c
  6449  001F30  3613               	rlcf	___ftdiv@f1+1,f,c
  6450  001F32  3614               	rlcf	___ftdiv@f1+2,f,c
  6451  001F34  2E1B               	decfsz	___ftdiv@cntr,f,c
  6452  001F36  D7E7               	goto	l570
  6453  001F38  C01C  F001         	movff	___ftdiv@f3,___ftpack@arg
  6454  001F3C  C01D  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  6455  001F40  C01E  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  6456  001F44  C01F  F004         	movff	___ftdiv@exp,___ftpack@exp
  6457  001F48  C020  F005         	movff	___ftdiv@sign,___ftpack@sign
  6458  001F4C  EC7C  F010         	call	___ftpack	;wreg free
  6459  001F50  C001  F012         	movff	?___ftpack,?___ftdiv
  6460  001F54  C002  F013         	movff	?___ftpack+1,?___ftdiv+1
  6461  001F58  C003  F014         	movff	?___ftpack+2,?___ftdiv+2
  6462  001F5C  0012               	return	
  6463  001F5E                     __end_of___ftdiv:
  6464                           	opt stack 0
  6465                           tblptru	equ	0xFF8
  6466                           tblptrh	equ	0xFF7
  6467                           tblptrl	equ	0xFF6
  6468                           tablat	equ	0xFF5
  6469                           prodh	equ	0xFF4
  6470                           prodl	equ	0xFF3
  6471                           intcon	equ	0xFF2
  6472                           wreg	equ	0xFE8
  6473                           indf2	equ	0xFDF
  6474                           postinc2	equ	0xFDE
  6475                           postdec2	equ	0xFDD
  6476                           fsr2h	equ	0xFDA
  6477                           fsr2l	equ	0xFD9
  6478                           status	equ	0xFD8
  6479                           
  6480 ;; *************** function ___awtoft *****************
  6481 ;; Defined at:
  6482 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
  6483 ;; Parameters:    Size  Location     Type
  6484 ;;  c               2    8[COMRAM] int 
  6485 ;; Auto vars:     Size  Location     Type
  6486 ;;  sign            1   11[COMRAM] unsigned char 
  6487 ;; Return value:  Size  Location     Type
  6488 ;;                  3    8[COMRAM] float 
  6489 ;; Registers used:
  6490 ;;		wreg, status,2, status,0, cstack
  6491 ;; Tracked objects:
  6492 ;;		On entry : 0/0
  6493 ;;		On exit  : 0/0
  6494 ;;		Unchanged: 0/0
  6495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6496 ;;      Params:         3       0       0       0       0       0       0       0       0
  6497 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6498 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6499 ;;      Totals:         4       0       0       0       0       0       0       0       0
  6500 ;;Total ram usage:        4 bytes
  6501 ;; Hardware stack levels used:    1
  6502 ;; Hardware stack levels required when called:    1
  6503 ;; This function calls:
  6504 ;;		___ftpack
  6505 ;; This function is called by:
  6506 ;;		_wait_in_ms
  6507 ;; This function uses a non-reentrant model
  6508 ;;
  6509                           
  6510                           	psect	text29
  6511  00265A                     __ptext29:
  6512                           	opt stack 0
  6513  00265A                     ___awtoft:
  6514                           	opt stack 26
  6515                           
  6516                           ;incstack = 0
  6517  00265A  0E00               	movlw	0
  6518  00265C  6E0C               	movwf	___awtoft@sign,c
  6519  00265E  AE0A               	btfss	___awtoft@c+1,7,c
  6520  002660  D006               	goto	l467
  6521  002662  6C09               	negf	___awtoft@c,c
  6522  002664  1E0A               	comf	___awtoft@c+1,f,c
  6523  002666  B0D8               	btfsc	status,0,c
  6524  002668  2A0A               	incf	___awtoft@c+1,f,c
  6525  00266A  0E01               	movlw	1
  6526  00266C  6E0C               	movwf	___awtoft@sign,c
  6527  00266E                     l467:
  6528  00266E  C009  F001         	movff	___awtoft@c,___ftpack@arg
  6529  002672  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  6530  002676  6A03               	clrf	___ftpack@arg+2,c
  6531  002678  0E8E               	movlw	142
  6532  00267A  6E04               	movwf	___ftpack@exp,c
  6533  00267C  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  6534  002680  EC7C  F010         	call	___ftpack	;wreg free
  6535  002684  C001  F009         	movff	?___ftpack,?___awtoft
  6536  002688  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  6537  00268C  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  6538  002690  0012               	return	
  6539  002692                     __end_of___awtoft:
  6540                           	opt stack 0
  6541                           tblptru	equ	0xFF8
  6542                           tblptrh	equ	0xFF7
  6543                           tblptrl	equ	0xFF6
  6544                           tablat	equ	0xFF5
  6545                           prodh	equ	0xFF4
  6546                           prodl	equ	0xFF3
  6547                           intcon	equ	0xFF2
  6548                           wreg	equ	0xFE8
  6549                           indf2	equ	0xFDF
  6550                           postinc2	equ	0xFDE
  6551                           postdec2	equ	0xFDD
  6552                           fsr2h	equ	0xFDA
  6553                           fsr2l	equ	0xFD9
  6554                           status	equ	0xFD8
  6555                           
  6556 ;; *************** function ___ftpack *****************
  6557 ;; Defined at:
  6558 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  6559 ;; Parameters:    Size  Location     Type
  6560 ;;  arg             3    0[COMRAM] unsigned um
  6561 ;;  exp             1    3[COMRAM] unsigned char 
  6562 ;;  sign            1    4[COMRAM] unsigned char 
  6563 ;; Auto vars:     Size  Location     Type
  6564 ;;		None
  6565 ;; Return value:  Size  Location     Type
  6566 ;;                  3    0[COMRAM] float 
  6567 ;; Registers used:
  6568 ;;		wreg, status,2, status,0
  6569 ;; Tracked objects:
  6570 ;;		On entry : 0/0
  6571 ;;		On exit  : 0/0
  6572 ;;		Unchanged: 0/0
  6573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6574 ;;      Params:         5       0       0       0       0       0       0       0       0
  6575 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6576 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6577 ;;      Totals:         8       0       0       0       0       0       0       0       0
  6578 ;;Total ram usage:        8 bytes
  6579 ;; Hardware stack levels used:    1
  6580 ;; This function calls:
  6581 ;;		Nothing
  6582 ;; This function is called by:
  6583 ;;		___awtoft
  6584 ;;		___ftadd
  6585 ;;		___ftdiv
  6586 ;;		___ftmul
  6587 ;;		___lltoft
  6588 ;; This function uses a non-reentrant model
  6589 ;;
  6590                           
  6591                           	psect	text30
  6592  0020F8                     __ptext30:
  6593                           	opt stack 0
  6594  0020F8                     ___ftpack:
  6595                           	opt stack 27
  6596                           
  6597                           ;incstack = 0
  6598  0020F8  5004               	movf	___ftpack@exp,w,c
  6599  0020FA  B4D8               	btfsc	status,2,c
  6600  0020FC  D005               	goto	u1550
  6601  0020FE  5001               	movf	___ftpack@arg,w,c
  6602  002100  1002               	iorwf	___ftpack@arg+1,w,c
  6603  002102  1003               	iorwf	___ftpack@arg+2,w,c
  6604  002104  A4D8               	btfss	status,2,c
  6605  002106  D00C               	goto	l503
  6606  002108                     u1550:
  6607  002108  0E00               	movlw	0
  6608  00210A  6E01               	movwf	?___ftpack,c
  6609  00210C  0E00               	movlw	0
  6610  00210E  6E02               	movwf	?___ftpack+1,c
  6611  002110  0E00               	movlw	0
  6612  002112  6E03               	movwf	?___ftpack+2,c
  6613  002114  0012               	return	
  6614  002116  2A04               	incf	___ftpack@exp,f,c
  6615  002118  90D8               	bcf	status,0,c
  6616  00211A  3203               	rrcf	___ftpack@arg+2,f,c
  6617  00211C  3202               	rrcf	___ftpack@arg+1,f,c
  6618  00211E  3201               	rrcf	___ftpack@arg,f,c
  6619  002120                     l503:
  6620  002120  0E00               	movlw	0
  6621  002122  1401               	andwf	___ftpack@arg,w,c
  6622  002124  6E06               	movwf	??___ftpack& (0+255),c
  6623  002126  0E00               	movlw	0
  6624  002128  1402               	andwf	___ftpack@arg+1,w,c
  6625  00212A  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6626  00212C  0EFE               	movlw	254
  6627  00212E  1403               	andwf	___ftpack@arg+2,w,c
  6628  002130  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6629  002132  5006               	movf	??___ftpack,w,c
  6630  002134  1007               	iorwf	??___ftpack+1,w,c
  6631  002136  1008               	iorwf	??___ftpack+2,w,c
  6632  002138  B4D8               	btfsc	status,2,c
  6633  00213A  D00C               	goto	l506
  6634  00213C  D7EC               	goto	l504
  6635  00213E  2A04               	incf	___ftpack@exp,f,c
  6636  002140  0E01               	movlw	1
  6637  002142  2601               	addwf	___ftpack@arg,f,c
  6638  002144  0E00               	movlw	0
  6639  002146  2202               	addwfc	___ftpack@arg+1,f,c
  6640  002148  0E00               	movlw	0
  6641  00214A  2203               	addwfc	___ftpack@arg+2,f,c
  6642  00214C  90D8               	bcf	status,0,c
  6643  00214E  3203               	rrcf	___ftpack@arg+2,f,c
  6644  002150  3202               	rrcf	___ftpack@arg+1,f,c
  6645  002152  3201               	rrcf	___ftpack@arg,f,c
  6646  002154                     l506:
  6647  002154  0E00               	movlw	0
  6648  002156  1401               	andwf	___ftpack@arg,w,c
  6649  002158  6E06               	movwf	??___ftpack& (0+255),c
  6650  00215A  0E00               	movlw	0
  6651  00215C  1402               	andwf	___ftpack@arg+1,w,c
  6652  00215E  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6653  002160  0EFF               	movlw	255
  6654  002162  1403               	andwf	___ftpack@arg+2,w,c
  6655  002164  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6656  002166  5006               	movf	??___ftpack,w,c
  6657  002168  1007               	iorwf	??___ftpack+1,w,c
  6658  00216A  1008               	iorwf	??___ftpack+2,w,c
  6659  00216C  B4D8               	btfsc	status,2,c
  6660  00216E  D006               	goto	l509
  6661  002170  D7E6               	goto	l507
  6662  002172  0604               	decf	___ftpack@exp,f,c
  6663  002174  90D8               	bcf	status,0,c
  6664  002176  3601               	rlcf	___ftpack@arg,f,c
  6665  002178  3602               	rlcf	___ftpack@arg+1,f,c
  6666  00217A  3603               	rlcf	___ftpack@arg+2,f,c
  6667  00217C                     l509:
  6668  00217C  BE02               	btfsc	___ftpack@arg+1,7,c
  6669  00217E  D003               	goto	u1590
  6670  002180  0E02               	movlw	2
  6671  002182  6004               	cpfslt	___ftpack@exp,c
  6672  002184  D7F6               	goto	l510
  6673  002186                     u1590:
  6674  002186  A004               	btfss	___ftpack@exp,0,c
  6675  002188  9E02               	bcf	___ftpack@arg+1,7,c
  6676  00218A  90D8               	bcf	status,0,c
  6677  00218C  3204               	rrcf	___ftpack@exp,f,c
  6678  00218E  5004               	movf	___ftpack@exp,w,c
  6679  002190  1203               	iorwf	___ftpack@arg+2,f,c
  6680  002192  5005               	movf	___ftpack@sign,w,c
  6681  002194  A4D8               	btfss	status,2,c
  6682  002196  8E03               	bsf	___ftpack@arg+2,7,c
  6683  002198  C001  F001         	movff	___ftpack@arg,?___ftpack
  6684  00219C  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  6685  0021A0  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  6686  0021A4  0012               	return	
  6687  0021A6                     __end_of___ftpack:
  6688                           	opt stack 0
  6689                           tblptru	equ	0xFF8
  6690                           tblptrh	equ	0xFF7
  6691                           tblptrl	equ	0xFF6
  6692                           tablat	equ	0xFF5
  6693                           prodh	equ	0xFF4
  6694                           prodl	equ	0xFF3
  6695                           intcon	equ	0xFF2
  6696                           wreg	equ	0xFE8
  6697                           indf2	equ	0xFDF
  6698                           postinc2	equ	0xFDE
  6699                           postdec2	equ	0xFDD
  6700                           fsr2h	equ	0xFDA
  6701                           fsr2l	equ	0xFD9
  6702                           status	equ	0xFD8
  6703                           
  6704 ;; *************** function _configBoard *****************
  6705 ;; Defined at:
  6706 ;;		line 11 in file "config.c"
  6707 ;; Parameters:    Size  Location     Type
  6708 ;;		None
  6709 ;; Auto vars:     Size  Location     Type
  6710 ;;		None
  6711 ;; Return value:  Size  Location     Type
  6712 ;;                  1    wreg      void 
  6713 ;; Registers used:
  6714 ;;		wreg, status,2
  6715 ;; Tracked objects:
  6716 ;;		On entry : 0/0
  6717 ;;		On exit  : 0/0
  6718 ;;		Unchanged: 0/0
  6719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6720 ;;      Params:         0       0       0       0       0       0       0       0       0
  6721 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6722 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6723 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6724 ;;Total ram usage:        0 bytes
  6725 ;; Hardware stack levels used:    1
  6726 ;; This function calls:
  6727 ;;		Nothing
  6728 ;; This function is called by:
  6729 ;;		_main
  6730 ;; This function uses a non-reentrant model
  6731 ;;
  6732                           
  6733                           	psect	text31
  6734  0023AC                     __ptext31:
  6735                           	opt stack 0
  6736  0023AC                     _configBoard:
  6737                           	opt stack 30
  6738                           
  6739                           ;config.c: 15: INTCONbits.GIE = 1;
  6740                           
  6741                           ;incstack = 0
  6742  0023AC  8EF2               	bsf	intcon,7,c	;volatile
  6743                           
  6744                           ;config.c: 16: INTCONbits.PEIE = 1;
  6745  0023AE  8CF2               	bsf	intcon,6,c	;volatile
  6746                           
  6747                           ;config.c: 25: T0CONbits.TMR0ON = 1;
  6748  0023B0  8ED5               	bsf	4053,7,c	;volatile
  6749                           
  6750                           ;config.c: 26: T08BIT = 1;
  6751  0023B2  8CD5               	bsf	4053,6,c	;volatile
  6752                           
  6753                           ;config.c: 27: T0CONbits.T0CS = 0;
  6754  0023B4  9AD5               	bcf	4053,5,c	;volatile
  6755                           
  6756                           ;config.c: 29: T0CONbits.PSA = 0;
  6757  0023B6  96D5               	bcf	4053,3,c	;volatile
  6758                           
  6759                           ;config.c: 30: T0CONbits.T0PS = 100;
  6760  0023B8  50D5               	movf	4053,w,c	;volatile
  6761  0023BA  0BF8               	andlw	-8
  6762  0023BC  0904               	iorlw	4
  6763  0023BE  6ED5               	movwf	4053,c	;volatile
  6764                           
  6765                           ;config.c: 31: INTCONbits.TMR0IF = 0;
  6766  0023C0  94F2               	bcf	intcon,2,c	;volatile
  6767                           
  6768                           ;config.c: 33: ADCON1bits.PCFG = 0b1111;
  6769  0023C2  80C1               	bsf	4033,0,c	;volatile
  6770  0023C4  82C1               	bsf	4033,1,c	;volatile
  6771  0023C6  84C1               	bsf	4033,2,c	;volatile
  6772  0023C8  86C1               	bsf	4033,3,c	;volatile
  6773                           
  6774                           ;config.c: 36: TRISA=0b00000000;
  6775  0023CA  0E00               	movlw	0
  6776  0023CC  6E92               	movwf	3986,c	;volatile
  6777                           
  6778                           ;config.c: 37: TRISB=0b00000000;
  6779  0023CE  0E00               	movlw	0
  6780  0023D0  6E93               	movwf	3987,c	;volatile
  6781                           
  6782                           ;config.c: 44: ADCON0 = 0b00000111;
  6783  0023D2  0E07               	movlw	7
  6784  0023D4  6EC2               	movwf	4034,c	;volatile
  6785                           
  6786                           ;config.c: 47: ADCON0bits.ADON = 0;
  6787  0023D6  90C2               	bcf	4034,0,c	;volatile
  6788                           
  6789                           ;config.c: 51: ADCON2bits.ADFM = 1;
  6790  0023D8  8EC0               	bsf	4032,7,c	;volatile
  6791                           
  6792                           ;config.c: 52: ADCON2bits.ADCS = 0b110;
  6793  0023DA  50C0               	movf	4032,w,c	;volatile
  6794  0023DC  0BF8               	andlw	-8
  6795  0023DE  0906               	iorlw	6
  6796  0023E0  6EC0               	movwf	4032,c	;volatile
  6797                           
  6798                           ;config.c: 53: ADCON2bits.ACQT = 0b101;
  6799  0023E2  50C0               	movf	4032,w,c	;volatile
  6800  0023E4  0BC7               	andlw	-57
  6801  0023E6  0928               	iorlw	40
  6802  0023E8  6EC0               	movwf	4032,c	;volatile
  6803                           
  6804                           ;config.c: 54: ADCON1bits.PCFG=0b1101;
  6805  0023EA  50C1               	movf	4033,w,c	;volatile
  6806  0023EC  0BF0               	andlw	-16
  6807  0023EE  090D               	iorlw	13
  6808  0023F0  6EC1               	movwf	4033,c	;volatile
  6809                           
  6810                           ;config.c: 55: TRISAbits.RA1=1;
  6811  0023F2  8292               	bsf	3986,1,c	;volatile
  6812                           
  6813                           ;config.c: 56: ADCON2bits.ADCS=0b110;
  6814  0023F4  50C0               	movf	4032,w,c	;volatile
  6815  0023F6  0BF8               	andlw	-8
  6816  0023F8  0906               	iorlw	6
  6817  0023FA  6EC0               	movwf	4032,c	;volatile
  6818                           
  6819                           ;config.c: 57: ADCON1bits.VCFG1=0;
  6820  0023FC  9AC1               	bcf	4033,5,c	;volatile
  6821                           
  6822                           ;config.c: 58: ADCON1bits.VCFG0=0;
  6823  0023FE  98C1               	bcf	4033,4,c	;volatile
  6824                           
  6825                           ;config.c: 60: ADCON2bits.ADFM=1;
  6826  002400  8EC0               	bsf	4032,7,c	;volatile
  6827                           
  6828                           ;config.c: 64: ADCON0bits.ADON=0;
  6829  002402  90C2               	bcf	4034,0,c	;volatile
  6830                           
  6831                           ;config.c: 66: PIE1bits.ADIE=0;
  6832  002404  9C9D               	bcf	3997,6,c	;volatile
  6833                           
  6834                           ;config.c: 67: PIR1bits.ADIF=0;
  6835  002406  9C9E               	bcf	3998,6,c	;volatile
  6836                           
  6837                           ;config.c: 69: ADCON2bits.ACQT=0b111;
  6838  002408  86C0               	bsf	4032,3,c	;volatile
  6839  00240A  88C0               	bsf	4032,4,c	;volatile
  6840  00240C  8AC0               	bsf	4032,5,c	;volatile
  6841                           
  6842                           ;config.c: 70: ADCON0bits.GO=1;
  6843  00240E  82C2               	bsf	4034,1,c	;volatile
  6844                           
  6845                           ;config.c: 72: RCIF=0;
  6846  002410  9A9E               	bcf	3998,5,c	;volatile
  6847                           
  6848                           ;config.c: 75: TRISD=0;
  6849  002412  0E00               	movlw	0
  6850  002414  6E95               	movwf	3989,c	;volatile
  6851                           
  6852                           ;config.c: 76: PORTA=0;
  6853  002416  0E00               	movlw	0
  6854  002418  6E80               	movwf	3968,c	;volatile
  6855  00241A  0012               	return		;funcret
  6856  00241C                     __end_of_configBoard:
  6857                           	opt stack 0
  6858                           tblptru	equ	0xFF8
  6859                           tblptrh	equ	0xFF7
  6860                           tblptrl	equ	0xFF6
  6861                           tablat	equ	0xFF5
  6862                           prodh	equ	0xFF4
  6863                           prodl	equ	0xFF3
  6864                           intcon	equ	0xFF2
  6865                           wreg	equ	0xFE8
  6866                           indf2	equ	0xFDF
  6867                           postinc2	equ	0xFDE
  6868                           postdec2	equ	0xFDD
  6869                           fsr2h	equ	0xFDA
  6870                           fsr2l	equ	0xFD9
  6871                           status	equ	0xFD8
  6872                           tblptru	equ	0xFF8
  6873                           tblptrh	equ	0xFF7
  6874                           tblptrl	equ	0xFF6
  6875                           tablat	equ	0xFF5
  6876                           prodh	equ	0xFF4
  6877                           prodl	equ	0xFF3
  6878                           intcon	equ	0xFF2
  6879                           wreg	equ	0xFE8
  6880                           indf2	equ	0xFDF
  6881                           postinc2	equ	0xFDE
  6882                           postdec2	equ	0xFDD
  6883                           fsr2h	equ	0xFDA
  6884                           fsr2l	equ	0xFD9
  6885                           status	equ	0xFD8
  6886                           
  6887                           	psect	rparam
  6888  0000                     tblptru	equ	0xFF8
  6889                           tblptrh	equ	0xFF7
  6890                           tblptrl	equ	0xFF6
  6891                           tablat	equ	0xFF5
  6892                           prodh	equ	0xFF4
  6893                           prodl	equ	0xFF3
  6894                           intcon	equ	0xFF2
  6895                           wreg	equ	0xFE8
  6896                           indf2	equ	0xFDF
  6897                           postinc2	equ	0xFDE
  6898                           postdec2	equ	0xFDD
  6899                           fsr2h	equ	0xFDA
  6900                           fsr2l	equ	0xFD9
  6901                           status	equ	0xFD8


Data Sizes:
    Strings     20
    Constant    118
    Data        0
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160     27      28
    BANK1           256    225     225
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(2) Largest target is 120
		 -> main@UwU(BANK1[80]), main@frecuencia(BANK1[120]), 

    memset@p	PTR unsigned char  size(2) Largest target is 120
		 -> main@UwU(BANK1[80]), main@frecuencia(BANK1[120]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_2(CODE[11]), STR_1(CODE[9]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 120
		 -> main@UwU(BANK1[80]), main@frecuencia(BANK1[120]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sp__memset	PTR void  size(2) Largest target is 120
		 -> main@UwU(BANK1[80]), main@frecuencia(BANK1[120]), 

    lcd_texto@cadena	PTR unsigned char  size(2) Largest target is 120
		 -> main@UwU(BANK1[80]), main@frecuencia(BANK1[120]), 


Critical Paths under _main in COMRAM

    _main->_lcd_ubicarXY
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___ftdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___ftsub->___ftadd
    ___ftadd->_fround
    _lcd_ubicarXY->_lcd_orden
    _lcd_origen->_lcd_orden
    _lcd_texto->_lcd_caracter
    _lcd_iniciar->_lcd_orden
    _lcd_pulso->_wait_in_ms
    _wait_in_ms->___fttol
    ___fttol->_scale
    ___ftdiv->___lltoft
    ___awtoft->___ftpack

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               229   229      0  135654
                                             23 BANK0      4     4      0
                                              0 BANK1    225   225      0
                            ___ftdiv
                            ___ftmul
                           ___lltoft
                        _configBoard
                        _lcd_iniciar
                         _lcd_origen
                          _lcd_texto
                       _lcd_ubicarXY
                             _memset
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             44    37      7   49853
                                             75 COMRAM    13     6      7
                                              0 BANK0     23    23      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                7     4      3   11907
                                             47 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              10     7      3   11709
                                             47 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2743
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    5237
                                             32 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1664
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1820
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     455
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     598
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2878
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     615
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     466
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4120
                                             69 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3775
                                             57 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     121
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     592
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _memset                                               8     2      6    1008
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (1) _lcd_ubicarXY                                         9     8      1   24751
                                             86 COMRAM     9     8      1
                          _lcd_orden
                         _lcd_origen
 ---------------------------------------------------------------------------------
 (2) _lcd_origen                                           0     0      0   16142
                          _lcd_orden
                         _wait_in_ms
 ---------------------------------------------------------------------------------
 (1) _lcd_texto                                            3     1      2    8062
                                             86 COMRAM     3     1      2
                       _lcd_caracter
 ---------------------------------------------------------------------------------
 (2) _lcd_caracter                                         7     5      2    7865
                                             79 COMRAM     7     5      2
                          _lcd_pulso
 ---------------------------------------------------------------------------------
 (1) _lcd_iniciar                                          0     0      0   23887
                          _lcd_orden
                          _lcd_pulso
                         _wait_in_ms
 ---------------------------------------------------------------------------------
 (3) _lcd_orden                                            7     5      2    8397
                                             79 COMRAM     7     5      2
                          _lcd_pulso
 ---------------------------------------------------------------------------------
 (4) _lcd_pulso                                            0     0      0    7745
                         _wait_in_ms
 ---------------------------------------------------------------------------------
 (3) _wait_in_ms                                          10     8      2    7745
                                             69 COMRAM    10     8      2
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     556
                                             54 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    3367
                                             17 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    2672
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2505
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _configBoard                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
     ___lltoft (ARG)
       ___ftpack
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___ftpack (ARG)
     ___lltoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___lltoft
     ___ftpack
   _configBoard
   _lcd_iniciar
     _lcd_orden
       _lcd_pulso
         _wait_in_ms
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
     _lcd_pulso
       _wait_in_ms
         ___awtoft
           ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
     _wait_in_ms
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _lcd_origen
     _lcd_orden
       _lcd_pulso
         _wait_in_ms
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
     _wait_in_ms
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _lcd_texto
     _lcd_caracter
       _lcd_pulso
         _wait_in_ms
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
   _lcd_ubicarXY
     _lcd_orden
       _lcd_pulso
         _wait_in_ms
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
     _lcd_origen
       _lcd_orden
         _lcd_pulso
           _wait_in_ms
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
       _wait_in_ms
         ___awtoft
           ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
   _memset
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     E1      E1       7       87.9%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     1B      1C       5       17.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     15C      20        0.0%
DATA                 0      0     15C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Mar 23 19:59:46 2018

          ?_lcd_ubicarXY 0057                       l40 243C                       l41 242E  
                     l27 26DA                       l28 26C0                       l44 2460  
                     l45 2452             ___awdiv@sign 000C      ___wmul@multiplicand 0011  
            __CFG_BORV$3 000000             ___ftadd@exp1 0045             ___ftadd@exp2 0044  
           ___ftadd@sign 0043                      l112 20AA                      l200 184A  
                    l210 1378                      l115 20E2                      l203 119C  
                    l116 20EA                      l204 10C8                      l221 0938  
                    l214 0898                      l207 1178                      l231 0A44  
                    l215 08AE                      l208 12C8                      l232 0AAA  
                    l224 0934                      l216 0926                      l225 095C  
                    l217 0910                      l250 0D2E                      l234 0AD0  
                    l218 08D8                      l170 1416                      l227 0EF6  
                    l251 0C9A                      l235 0B10                      l260 0DE8  
                    l236 0BD8                      l228 0970                      l253 0D4E  
                    l245 0C3E                      l229 09B2                      l173 142E  
                    l165 13FA                      l510 2172                      l262 0EEC  
                    l254 0D38                      l503 2120                      l263 0ED6  
                    l239 0B80                      l175 15F6                      l167 13FE  
                    l504 2116                      l440 225A                      l256 0D72  
                    l601 1CE0                      l265 0F0E                      l257 0D76  
                    l506 2154                      l610 2726                      l442 2278  
                    l602 1D12                      l266 0F2A                      l258 0D98  
                    l507 213E                      l443 2270                      l603 1D22  
                    l259 0ECA                      l620 1DB0                      l460 2394  
                    l452 2350                      l268 0F4A                      l509 217C  
                    l461 23A2                      l453 235C                      l605 1D3A  
                    l197 177E                      l269 0F6E                      l622 1E26  
                    l534 18DC                      l446 2298                      l606 1D4A  
                    l631 1E66                      l623 1E16                      l543 196C  
                    l471 1B86                      l447 22A2                      l439 224A  
                    l455 2372                      l560 19C4                      l616 2630  
                    l448 22B0                      l456 236A                      l561 19E0  
                    l473 1BA4                      l570 1F06                      l562 1A10  
                    l538 1906                      l474 1BE6                      l467 266E  
                    l571 1F2C                      l483 1C78                      l475 1C16  
                    l459 238A                      l635 274A                      l628 1E4A  
                    l548 1962                      l484 1C6C                      l629 1E3E  
                    l557 19A0                      l549 1958                      l661 22E8  
                    l477 1C54                      l581 1B2C                      l558 1996  
                    l662 22DC                      l478 1C44                      l582 1B1C  
                    l567 1EA0                      l671 2510                      l575 1A62  
                    l592 21D6                      l672 2504                      l569 1EC8  
                    l593 2206                      l665 231C                      l577 1A8E  
                    l738 26AC                      l666 232A                      l682 25D0  
                    l578 1AC8                      l739 269C                      l675 2538  
                    l683 25C4                      l587 1B50                      l579 1AF0  
                    l676 2546                      l588 1B44                      l599 1CB8  
           ___awmod@sign 0006                      wreg 000FE8           ??_lcd_caracter 0052  
           __CFG_LVP$OFF 000000             ___ftdiv@cntr 001B             ___ftdiv@sign 0020  
           __CFG_WDT$OFF 000000                     l2010 2232                     l2174 20EA  
                   l2908 0D38                     l2860 0B5A                     l2852 0B10  
                   l2766 269C                     l2880 0C42                     l2970 0F6A  
                   STR_1 0882                     STR_2 0877                     u2031 1CA0  
                   u2120 227C                     u2051 1CC8                     u2215 24A0  
                   u2311 1A46                     u2331 1A72                     u1700 1DCE  
                   u2180 2376                     u1621 1E88                     u1550 2108  
                   u1641 1EB0                     u1705 1DC6                     u2610 2444  
                   u2530 22EC                     u1740 1E50                     u2460 1C7E  
                   u1821 189A                     u1590 2186                     u2390 1B56  
                   u1815 256E                     u1831 18AE                     u1920 1936  
                   u2560 2514                     u2800 0B5A                     u2720 09EA  
                   u1681 1D94                     u1860 18CE                     u1765 2058  
                   u2725 09E0                     u1790 20D8                     u1960 1974  
                   u2840 0C7A                     u2760 0AE2                     u1890 18F8  
                   u2770 0B22                     u1990 19A8                     u2870 0D5C  
                   u2880 0D6C                     u2970 0F86                     _RCIF 007CF5  
                   _TMR1 000FCE              main@periodo 01D5                     _main 139C  
           ___ftpack@arg 0001             ___ftpack@exp 0004                     fsr2h 000FDA  
                   indf2 000FDF                     fsr2l 000FD9                     prodh 000FF4  
                   prodl 000FF3                     start 0000             _sprintf$1289 0060  
          __CFG_MCLRE$ON 000000           ??_lcd_ubicarXY 0058             ___ftmul@cntr 002E  
           ___param_bank 000000             ___ftmul@sign 002F     lcd_caracter@caracter 0050  
           ___fttol@exp1 0045             ___fttol@lval 0041            __CFG_PLLDIV$2 000000  
                  ?_main 0001          __end_of___awdiv 22BA          __end_of___ftadd 1A36  
                  _CCPR1 000FBE          __end_of___awmod 23AC          __end_of___ftdiv 1F5E  
        __end_of___ftneg 2734          __end_of___lldiv 233C          __end_of___ftmul 1D84  
        ___awdiv@divisor 0009                    _T1CON 000FCD          __end_of___llmod 2558  
        __end_of___ftsub 265A          __end_of___fttol 1E78          ___awdiv@counter 000B  
                  _TMR0L 000FD6                    _PORTA 000F80                    _PORTD 000F83  
                  _TRISA 000F92                    _TRISB 000F93                    _TRISD 000F95  
           ___lltoft@exp 0011           __CFG_FCMEN$OFF 000000            ___awtoft@sign 000C  
        __end_of_dpowers 0829                    _scale 0F94          __end_of_isdigit 2752  
          ___ftpack@sign 0005                    _turno 007B                    tablat 000FF5  
                  status 000FD8          __end_of_sprintf 0F94          __initialization 278A  
           __end_of_main 1638                   ??_main 0077            ___fttol@sign1 0040  
          __activetblptr 000002            lcd_ubicarXY@i 005D     __size_of__tdiv_to_l_ 0132  
    lcd_ubicarXY@columna 0057                   _ADCON0 000FC2         ___llmod@dividend 0001  
                 ?_scale 0030                   _T08BIT 007EAE         ___awdiv@dividend 0007  
       __end_of___awtoft 2692         __end_of___ftpack 21A6         __end_of___lltoft 261A  
                 _OSCCON 000FD3                   _TMR0IF 007F92                   _TMR1IF 007CF0  
                 _TMR0ON 007EAF                   _TMR1ON 007E68                   _TRISC2 007CA2  
   __size_of_configBoard 0070         __end_of__powers_ 0850     __end_of_lcd_caracter 24F2  
                 ___ftge 21A6     __size_of_lcd_iniciar 00CE                   ___wmul 26EA  
              ??___awdiv 000B                ??___ftadd 0040                ??___awmod 0005  
              ??___ftdiv 0018                ??___ftneg 0004                ??___lldiv 0009  
              ??___ftmul 0027                ??___llmod 0009                ??___ftsub 004C  
              ??___fttol 003B                   _memset 2692                   _fround 1638  
       ___awdiv@quotient 000D          ___awmod@divisor 0003          ___awmod@counter 0005  
                 main@dt 01C8    ___ftmul@f3_as_product 002B                ??_isdigit 0001  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8     __end_of_lcd_ubicarXY 248A                ??_sprintf 0053  
             __accesstop 0060  __end_of__initialization 278E               ___ftadd@f1 003A  
             ___ftadd@f2 003D               ___ftge@ff1 0001               ___ftge@ff2 0004  
          ___rparam_used 000001               ___ftdiv@f1 0012               ___ftdiv@f2 0015  
             ___ftdiv@f3 001C               ___ftneg@f1 0001               ___awtoft@c 0009  
             ___ftmul@f1 0021               ___ftmul@f2 0024               ___ftsub@f1 0046  
             ___ftsub@f2 0049               ___fttol@f1 0037           __pcstackCOMRAM 0001  
             ___lltoft@c 0009            __end_of_scale 139C               __div_to_l_ 1B68  
     __size_of_lcd_orden 0066       __size_of_lcd_texto 002C       __size_of_lcd_pulso 001E  
        __div_to_l_@exp1 000C          __div_to_l_@cntr 000B                  ??_scale 0033  
        __div_to_l_@quot 0007               __pbssBANK0 007B            __div_to_l_@f1 0001  
          __div_to_l_@f2 0004           lcd_orden@orden 0050                  ?___ftge 0001  
                ?___wmul 000F                  _CCP1CON 000FBD                  ?_memset 0001  
                ?_fround 0030                ?___awtoft 0009                ?___ftpack 0001  
              ?___lltoft 0009           main@frecuencia 0100               _lcd_origen 2770  
  __size_of_lcd_caracter 0068        __end_of__npowers_ 0877                  __Hparam 0000  
             _scale$1288 0033                  __Lparam 0000        __end_of_lcd_orden 25BE  
        __size_of___ftge 0090        __end_of_lcd_texto 26EA        __end_of_lcd_pulso 2770  
                ___awdiv 2236                  ___ftadd 188A                  ___awmod 233C  
                ___ftdiv 1E78                  ___ftneg 2710                  ___lldiv 22BA  
        __size_of___wmul 0026                  ___ftmul 1C90                  ___llmod 24F2  
                ___ftsub 261A                  ___fttol 1D84             __psmallconst 0800  
                __pcinit 278A               ??___awtoft 000C               ??___ftpack 0006  
        __size_of_memset 002C          __size_of_fround 0252                  __ramtop 0800  
             ??___lltoft 000D                  __ptext0 139C                  __ptext1 088C  
                __ptext2 0F94                  __ptext3 2734                  __ptext4 1638  
                __ptext5 26EA                  __ptext6 1C90                  __ptext7 233C  
                __ptext8 2236                  __ptext9 1A36                _T0CONbits 000FD5  
  __size_of_lcd_ubicarXY 006E              ?__div_to_l_ 0001                  _dpowers 0801  
                _isdigit 2734         ___awmod@dividend 0001             _lcd_caracter 248A  
                main@UwU 0178                  _sprintf 088C     end_of_initialization 278E  
                memset@c 0003                  memset@n 0005                  memset@p 0007  
          __Lmediumconst 0000     wait_in_ms@time_in_ms 0046          ___lldiv@divisor 0005  
        ___lldiv@counter 000D                  postdec2 000FDD             _lcd_ubicarXY 241C  
                postinc2 000FDE               _wait_in_ms 202C           __tdiv_to_l_@f1 0001  
         __tdiv_to_l_@f2 0004            ??__tdiv_to_l_ 0007                _PORTDbits 000F83  
              _TRISAbits 000F92                _TRISDbits 000F95              ?_lcd_origen 0001  
            ___ftdiv@exp 001F            ??_configBoard 0001            ??_lcd_iniciar 0057  
    __size_of__div_to_l_ 0128              ___ftmul@exp 002A        lcd_ubicarXY@i_155 005E  
      lcd_ubicarXY@linea 005F           __end_of___ftge 2236           __end_of___wmul 2710  
         __end_of_memset 26BE           __end_of_fround 188A      start_initialization 278A  
    __end_of__tdiv_to_l_ 1B68          wait_in_ms@count 004C          ___llmod@divisor 0005  
        ___llmod@counter 0009       wait_in_ms@count_ms 004E                 ??___ftge 0007  
               ??___wmul 0013      __end_of_configBoard 241C      __size_of_lcd_origen 001A  
            ?_wait_in_ms 0046      __end_of_lcd_iniciar 202C                 ??_memset 0007  
               ??_fround 0033            sprintf@tmpval 006D               fround@prec 0039  
      __size_of___awtoft 0038        __size_of___ftpack 00AE        __size_of___lltoft 005C  
          __pcstackBANK0 0060            __pcstackBANK1 0100              sprintf@flag 0065  
            sprintf@fval 0073              sprintf@prec 0071                 ?___awdiv 0007  
               ?___ftadd 003A                 ?___awmod 0001                 ?___ftdiv 0012  
               ?___ftneg 0001                 ?___lldiv 0001                 ?___ftmul 0021  
               ?___llmod 0001                 ?___ftsub 0046                __npowers_ 0850  
               ?___fttol 0037                _lcd_orden 2558              __tdiv_to_l_ 1A36  
              _lcd_texto 26BE                _lcd_pulso 2752             ??__div_to_l_ 0007  
            __smallconst 0800                 ?_isdigit 0001                 ?_sprintf 004C  
         __size_of_scale 0408      __size_of_wait_in_ms 00CC           ___wmul@product 0013  
            _configBoard 23AC                 _PIE1bits 000F9D              _lcd_iniciar 1F5E  
               _PIR1bits 000F9E       __end_of__div_to_l_ 1C90               ?_lcd_orden 0050  
             ?_lcd_texto 0057               ?_lcd_pulso 0001               _ADCON0bits 000FC2  
             _ADCON1bits 000FC1               _ADCON2bits 000FC0        ___wmul@multiplier 000F  
              main@dato1 01DD                main@dato2 01D9                main@temp2 01D2  
           ??_lcd_origen 0057           wait_in_ms@flag 004A                 __Hrparam 0000  
               __Lrparam 0000       __end_of_lcd_origen 278A         __size_of___awdiv 0084  
       __size_of___ftadd 01AC         __size_of___awmod 0070         __size_of___ftdiv 00E6  
       __size_of___ftneg 0024         __size_of___lldiv 0082         __size_of___ftmul 00F4  
       __size_of___llmod 0066         __size_of___ftsub 0040         __size_of___fttol 00F4  
               ___awtoft 265A                 ___ftpack 20F8              _fround$1286 0036  
            _fround$1287 0033                 ___lltoft 25BE              _isdigit$926 0002  
             sprintf@exp 006B               sprintf@val 0067         __size_of_isdigit 001E  
               __ptext10 1B68                 __ptext11 25BE                 __ptext20 2770  
               __ptext12 24F2                 __ptext21 26BE                 __ptext13 22BA  
               __ptext30 20F8                 __ptext22 248A                 __ptext14 261A  
               __ptext31 23AC                 __ptext23 1F5E                 __ptext15 188A  
               __ptext24 2558                 __ptext16 2710                 __ptext25 2752  
               __ptext17 21A6                 __ptext26 202C                 __ptext18 2692  
               __ptext27 1D84                 __ptext19 241C                 __ptext28 1E78  
               __ptext29 265A                 __powers_ 0829          lcd_texto@cadena 0057  
       __size_of_sprintf 0708            __size_of_main 029C             ??_wait_in_ms 0048  
               main@freq 01CC                 main@temp 01CF              ??_lcd_orden 0052  
            ??_lcd_texto 0059              ??_lcd_pulso 0050    __CFG_CPUDIV$OSC1_PLL2 000000  
             _INTCONbits 000FF2                 isdigit@c 0003                 memset@p1 0001  
               scale@scl 0036                sprintf@ap 0063         __tdiv_to_l_@exp1 000F  
              sprintf@sp 004C         __tdiv_to_l_@cntr 000E         __tdiv_to_l_@quot 000A  
     __end_of_wait_in_ms 20F8         ___lldiv@dividend 0001             ?__tdiv_to_l_ 0001  
               sprintf@c 0076                 sprintf@f 004E         ___lldiv@quotient 0009  
          ?_lcd_caracter 0050       __CFG_FOSC$HSPLL_HS 000000             ?_configBoard 0001  
           ?_lcd_iniciar 0001  
