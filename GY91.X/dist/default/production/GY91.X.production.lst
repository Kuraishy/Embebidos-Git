

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri May 04 20:18:09 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text23,global,reloc=2,class=CODE,delta=1
    33                           	psect	text24,global,reloc=2,class=CODE,delta=1
    34                           	psect	text25,global,reloc=2,class=CODE,delta=1
    35                           	psect	text26,global,reloc=2,class=CODE,delta=1
    36                           	psect	text27,global,reloc=2,class=CODE,delta=1
    37                           	psect	text28,global,reloc=2,class=CODE,delta=1
    38                           	psect	text29,global,reloc=2,class=CODE,delta=1
    39                           	psect	text30,global,reloc=2,class=CODE,delta=1
    40                           	psect	text31,global,reloc=2,class=CODE,delta=1
    41                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    42                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    43  0000                     
    44                           ; Version 1.45
    45                           ; Generated 16/11/2017 GMT
    46                           ; 
    47                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    48                           ; All rights reserved.
    49                           ; 
    50                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    51                           ; 
    52                           ; Redistribution and use in source and binary forms, with or without modification, are
    53                           ; permitted provided that the following conditions are met:
    54                           ; 
    55                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    56                           ;        conditions and the following disclaimer.
    57                           ; 
    58                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    59                           ;        of conditions and the following disclaimer in the documentation and/or other
    60                           ;        materials provided with the distribution.
    61                           ; 
    62                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    63                           ;        software without specific prior written permission.
    64                           ; 
    65                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    66                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    67                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    68                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    69                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    70                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    71                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    72                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    73                           ; 
    74                           ; 
    75                           ; Code-generator required, PIC18F4550 Definitions
    76                           ; 
    77                           ; SFR Addresses
    78  0000                     
    79                           	psect	smallconst
    80  0000'                    __psmallconst:
    81                           	opt stack 0
    82  0000' 00                 	db	0
    83  0001'                    _dpowers:
    84                           	opt stack 0
    85  0001' 0001               	dw	1
    86  0003' 0000               	dw	0
    87  0005' 000A               	dw	10
    88  0007' 0000               	dw	0
    89  0009' 0064               	dw	100
    90  000B' 0000               	dw	0
    91  000D' 03E8               	dw	1000
    92  000F' 0000               	dw	0
    93  0011' 2710               	dw	10000
    94  0013' 0000               	dw	0
    95  0015' 86A0               	dw	34464
    96  0017' 0001               	dw	1
    97  0019' 4240               	dw	16960
    98  001B' 000F               	dw	15
    99  001D' 9680               	dw	38528
   100  001F' 0098               	dw	152
   101  0021' E100               	dw	57600
   102  0023' 05F5               	dw	1525
   103  0025' CA00               	dw	51712
   104  0027' 3B9A               	dw	15258
   105  0029'                    __end_of_dpowers:
   106                           	opt stack 0
   107  0029'                    __powers_:
   108                           	opt stack 0
   109  0029' 00                 	db	0
   110  002A' 80                 	db	128
   111  002B' 3F                 	db	63
   112  002C' 00                 	db	0
   113  002D' 20                 	db	32
   114  002E' 41                 	db	65
   115  002F' 00                 	db	0
   116  0030' C8                 	db	200
   117  0031' 42                 	db	66
   118  0032' 00                 	db	0
   119  0033' 7A                 	db	122
   120  0034' 44                 	db	68
   121  0035' 40                 	db	64
   122  0036' 1C                 	db	28
   123  0037' 46                 	db	70
   124  0038' 50                 	db	80
   125  0039' C3                 	db	195
   126  003A' 47                 	db	71
   127  003B' 24                 	db	36
   128  003C' 74                 	db	116
   129  003D' 49                 	db	73
   130  003E' 97                 	db	151
   131  003F' 18                 	db	24
   132  0040' 4B                 	db	75
   133  0041' BC                 	db	188
   134  0042' BE                 	db	190
   135  0043' 4C                 	db	76
   136  0044' 6B                 	db	107
   137  0045' 6E                 	db	110
   138  0046' 4E                 	db	78
   139  0047' 03                 	db	3
   140  0048' 15                 	db	21
   141  0049' 50                 	db	80
   142  004A' 79                 	db	121
   143  004B' AD                 	db	173
   144  004C' 60                 	db	96
   145  004D' F3                 	db	243
   146  004E' 49                 	db	73
   147  004F' 71                 	db	113
   148  0050'                    __end_of__powers_:
   149                           	opt stack 0
   150  0050'                    __npowers_:
   151                           	opt stack 0
   152  0050' 00                 	db	0
   153  0051' 80                 	db	128
   154  0052' 3F                 	db	63
   155  0053' CD                 	db	205
   156  0054' CC                 	db	204
   157  0055' 3D                 	db	61
   158  0056' D7                 	db	215
   159  0057' 23                 	db	35
   160  0058' 3C                 	db	60
   161  0059' 12                 	db	18
   162  005A' 83                 	db	131
   163  005B' 3A                 	db	58
   164  005C' B7                 	db	183
   165  005D' D1                 	db	209
   166  005E' 38                 	db	56
   167  005F' C6                 	db	198
   168  0060' 27                 	db	39
   169  0061' 37                 	db	55
   170  0062' 38                 	db	56
   171  0063' 86                 	db	134
   172  0064' 35                 	db	53
   173  0065' C0                 	db	192
   174  0066' D6                 	db	214
   175  0067' 33                 	db	51
   176  0068' CC                 	db	204
   177  0069' 2B                 	db	43
   178  006A' 32                 	db	50
   179  006B' 70                 	db	112
   180  006C' 89                 	db	137
   181  006D' 30                 	db	48
   182  006E' E7                 	db	231
   183  006F' DB                 	db	219
   184  0070' 2E                 	db	46
   185  0071' E5                 	db	229
   186  0072' 3C                 	db	60
   187  0073' 1E                 	db	30
   188  0074' 42                 	db	66
   189  0075' A2                 	db	162
   190  0076' 0D                 	db	13
   191  0077'                    __end_of__npowers_:
   192                           	opt stack 0
   193  0000                     _PORTD	set	3971
   194  0000                     _PORTDbits	set	3971
   195  0000                     _TRISDbits	set	3989
   196  0000                     _PORTA	set	3968
   197  0000                     _TRISD	set	3989
   198  0000                     _PIR1bits	set	3998
   199  0000                     _PIE1bits	set	3997
   200  0000                     _TRISAbits	set	3986
   201  0000                     _ADCON2bits	set	4032
   202  0000                     _ADCON0bits	set	4034
   203  0000                     _ADCON0	set	4034
   204  0000                     _ADCON1bits	set	4033
   205  0000                     _T0CONbits	set	4053
   206  0000                     _INTCONbits	set	4082
   207  0000                     _OSCCON	set	4051
   208  0000                     _SSPBUF	set	4041
   209  0000                     _SSPSTATbits	set	4039
   210  0000                     _SSPCON2bits	set	4037
   211  0000                     _SSPADD	set	4040
   212  0000                     _SSPCON2	set	4037
   213  0000                     _SSPCON1	set	4038
   214  0000                     _SSPSTAT	set	4039
   215  0000                     _TMR0L	set	4054
   216  0000                     _TMR0IF	set	32658
   217  0000                     _TMR0ON	set	32431
   218  0000                     _RCIF	set	31989
   219  0000                     _T08BIT	set	32430
   220  0000                     _PEN	set	32298
   221  0000                     _RSEN	set	32297
   222  0000                     _ACKSTAT	set	32302
   223  0000                     _RCEN	set	32299
   224  0000                     _ACKEN	set	32300
   225  0000                     _ACKDT	set	32301
   226  0000                     _SSPIF	set	31987
   227  0000                     _SSPIE	set	31979
   228  0000                     _TRISB1	set	31897
   229  0000                     _TRISB0	set	31896
   230  0077'                    STR_3:
   231  0077' 20                 	db	32
   232  0078' 41                 	db	65	;'A'
   233  0079' 7A                 	db	122	;'z'
   234  007A' 20                 	db	32
   235  007B' 3D                 	db	61	;'='
   236  007C' 20                 	db	32
   237  007D' 25                 	db	37
   238  007E' 2E                 	db	46
   239  007F' 32                 	db	50	;'2'
   240  0080' 66                 	db	102	;'f'
   241  0081' 20                 	db	32
   242  0082' 67                 	db	103	;'g'
   243  0083' 20                 	db	32
   244  0084' 0A                 	db	10
   245  0085' 00                 	db	0
   246  0086'                    STR_1:
   247  0086' 20                 	db	32
   248  0087' 41                 	db	65	;'A'
   249  0088' 78                 	db	120	;'x'
   250  0089' 20                 	db	32
   251  008A' 3D                 	db	61	;'='
   252  008B' 20                 	db	32
   253  008C' 25                 	db	37
   254  008D' 2E                 	db	46
   255  008E' 32                 	db	50	;'2'
   256  008F' 66                 	db	102	;'f'
   257  0090' 20                 	db	32
   258  0091' 67                 	db	103	;'g'
   259  0092' 09                 	db	9
   260  0093' 00                 	db	0
   261  0094'                    STR_2:
   262  0094' 20                 	db	32
   263  0095' 41                 	db	65	;'A'
   264  0096' 79                 	db	121	;'y'
   265  0097' 20                 	db	32
   266  0098' 3D                 	db	61	;'='
   267  0099' 20                 	db	32
   268  009A' 25                 	db	37
   269  009B' 2E                 	db	46
   270  009C' 32                 	db	50	;'2'
   271  009D' 66                 	db	102	;'f'
   272  009E' 20                 	db	32
   273  009F' 67                 	db	103	;'g'
   274  00A0' 09                 	db	9
   275  00A1' 00                 	db	0
   276                           
   277                           ; #config settings
   278  00A2' 00                 	db	0	; dummy byte at the end
   279  0000                     
   280                           	psect	cinit
   281  0000'                    __pcinit:
   282                           	opt stack 0
   283  0000'                    start_initialization:
   284                           	opt stack 0
   285  0000'                    __initialization:
   286                           	opt stack 0
   287  0000'                    end_of_initialization:
   288                           	opt stack 0
   289  0000'                    __end_of__initialization:
   290                           	opt stack 0
   291  0000' 0E00'              	movlw	low (__Lmediumconst shr (0+16))
   292  0002' 6EF8               	movwf	tblptru,c
   293  0004' 0100               	movlb	0
   294  0006' EF00' F000'        	goto	_main	;jump to C main() function
   295                           tblptru	equ	0xFF8
   296                           
   297                           	psect	cstackBANK0
   298  0000'                    __pcstackBANK0:
   299                           	opt stack 0
   300  0000'                    _sprintf$1497:
   301                           	opt stack 0
   302                           
   303                           ; 3 bytes @ 0x0
   304  0000'                    	ds	3
   305  0003'                    sprintf@ap:
   306                           	opt stack 0
   307                           
   308                           ; 2 bytes @ 0x3
   309  0003'                    	ds	2
   310  0005'                    sprintf@flag:
   311                           	opt stack 0
   312                           
   313                           ; 2 bytes @ 0x5
   314  0005'                    	ds	2
   315  0007'                    sprintf@val:
   316                           	opt stack 0
   317                           
   318                           ; 4 bytes @ 0x7
   319  0007'                    	ds	4
   320  000B'                    sprintf@exp:
   321                           	opt stack 0
   322                           
   323                           ; 2 bytes @ 0xB
   324  000B'                    	ds	2
   325  000D'                    sprintf@tmpval:
   326                           	opt stack 0
   327                           
   328                           ; 4 bytes @ 0xD
   329  000D'                    	ds	4
   330  0011'                    sprintf@prec:
   331                           	opt stack 0
   332                           
   333                           ; 2 bytes @ 0x11
   334  0011'                    	ds	2
   335  0013'                    sprintf@fval:
   336                           	opt stack 0
   337                           
   338                           ; 3 bytes @ 0x13
   339  0013'                    	ds	3
   340  0016'                    sprintf@c:
   341                           	opt stack 0
   342                           
   343                           ; 1 bytes @ 0x16
   344  0016'                    	ds	1
   345  0017'                    main@buffer:
   346                           	opt stack 0
   347                           
   348                           ; 20 bytes @ 0x17
   349  0017'                    	ds	20
   350  002B'                    main@buffer2:
   351                           	opt stack 0
   352                           
   353                           ; 20 bytes @ 0x2B
   354  002B'                    	ds	20
   355  003F'                    main@buffer3:
   356                           	opt stack 0
   357                           
   358                           ; 20 bytes @ 0x3F
   359  003F'                    	ds	20
   360  0053'                    main@t:
   361                           	opt stack 0
   362                           
   363                           ; 3 bytes @ 0x53
   364  0053'                    	ds	3
   365  0056'                    main@Xg:
   366                           	opt stack 0
   367                           
   368                           ; 3 bytes @ 0x56
   369  0056'                    	ds	3
   370  0059'                    main@Yg:
   371                           	opt stack 0
   372                           
   373                           ; 3 bytes @ 0x59
   374  0059'                    	ds	3
   375  005C'                    main@Zg:
   376                           	opt stack 0
   377                           
   378                           ; 3 bytes @ 0x5C
   379  005C'                    	ds	3
   380  005F'                    main@Xa:
   381                           	opt stack 0
   382                           
   383                           ; 3 bytes @ 0x5F
   384  005F'                    	ds	3
   385  0062'                    main@Ya:
   386                           	opt stack 0
   387                           
   388                           ; 3 bytes @ 0x62
   389  0062'                    	ds	3
   390  0065'                    main@Za:
   391                           	opt stack 0
   392                           
   393                           ; 3 bytes @ 0x65
   394  0065'                    	ds	3
   395  0068'                    main@Ax:
   396                           	opt stack 0
   397                           
   398                           ; 2 bytes @ 0x68
   399  0068'                    	ds	2
   400  006A'                    main@Ay:
   401                           	opt stack 0
   402                           
   403                           ; 2 bytes @ 0x6A
   404  006A'                    	ds	2
   405  006C'                    main@Az:
   406                           	opt stack 0
   407                           
   408                           ; 2 bytes @ 0x6C
   409  006C'                    	ds	2
   410  006E'                    main@T:
   411                           	opt stack 0
   412                           
   413                           ; 2 bytes @ 0x6E
   414  006E'                    	ds	2
   415  0070'                    main@Gx:
   416                           	opt stack 0
   417                           
   418                           ; 2 bytes @ 0x70
   419  0070'                    	ds	2
   420  0072'                    main@Gy:
   421                           	opt stack 0
   422                           
   423                           ; 2 bytes @ 0x72
   424  0072'                    	ds	2
   425  0074'                    main@Gz:
   426                           	opt stack 0
   427                           
   428                           ; 2 bytes @ 0x74
   429  0074'                    	ds	2
   430                           tblptru	equ	0xFF8
   431                           
   432                           	psect	cstackCOMRAM
   433  0000'                    __pcstackCOMRAM:
   434                           	opt stack 0
   435  0000'                    ??_isdigit:
   436  0000'                    ?___awmod:
   437                           	opt stack 0
   438  0000'                    ?___ftpack:
   439                           	opt stack 0
   440  0000'                    ?___ftneg:
   441                           	opt stack 0
   442  0000'                    ?__tdiv_to_l_:
   443                           	opt stack 0
   444  0000'                    ?__div_to_l_:
   445                           	opt stack 0
   446  0000'                    ?___lldiv:
   447                           	opt stack 0
   448  0000'                    ?___llmod:
   449                           	opt stack 0
   450  0000'                    I2C_Read@flag:
   451                           	opt stack 0
   452  0000'                    I2C_Write@data:
   453                           	opt stack 0
   454  0000'                    ___awmod@dividend:
   455                           	opt stack 0
   456  0000'                    __div_to_l_@f1:
   457                           	opt stack 0
   458  0000'                    ___ftpack@arg:
   459                           	opt stack 0
   460  0000'                    __tdiv_to_l_@f1:
   461                           	opt stack 0
   462  0000'                    ___ftge@ff1:
   463                           	opt stack 0
   464  0000'                    ___ftneg@f1:
   465                           	opt stack 0
   466  0000'                    ___lldiv@dividend:
   467                           	opt stack 0
   468  0000'                    ___llmod@dividend:
   469                           	opt stack 0
   470                           
   471                           ; 4 bytes @ 0x0
   472  0000'                    	ds	1
   473  0001'                    I2C_Read@buffer:
   474                           	opt stack 0
   475  0001'                    I2C_Repeated_Start@slave_read_address:
   476                           	opt stack 0
   477  0001'                    I2C_Start_Wait@slave_write_address:
   478                           	opt stack 0
   479  0001'                    _isdigit$1117:
   480                           	opt stack 0
   481                           
   482                           ; 1 bytes @ 0x1
   483  0001'                    	ds	1
   484  0002'                    isdigit@c:
   485                           	opt stack 0
   486  0002'                    ___awmod@divisor:
   487                           	opt stack 0
   488                           
   489                           ; 2 bytes @ 0x2
   490  0002'                    	ds	1
   491  0003'                    ___ftpack@exp:
   492                           	opt stack 0
   493  0003'                    __div_to_l_@f2:
   494                           	opt stack 0
   495  0003'                    __tdiv_to_l_@f2:
   496                           	opt stack 0
   497  0003'                    ___ftge@ff2:
   498                           	opt stack 0
   499                           
   500                           ; 3 bytes @ 0x3
   501  0003'                    	ds	1
   502  0004'                    ___awmod@counter:
   503                           	opt stack 0
   504  0004'                    ___ftpack@sign:
   505                           	opt stack 0
   506  0004'                    ___lldiv@divisor:
   507                           	opt stack 0
   508  0004'                    ___llmod@divisor:
   509                           	opt stack 0
   510                           
   511                           ; 4 bytes @ 0x4
   512  0004'                    	ds	1
   513  0005'                    ??___ftpack:
   514  0005'                    ___awmod@sign:
   515                           	opt stack 0
   516                           
   517                           ; 1 bytes @ 0x5
   518  0005'                    	ds	1
   519  0006'                    ??__tdiv_to_l_:
   520  0006'                    ??___ftge:
   521  0006'                    ?___awdiv:
   522                           	opt stack 0
   523  0006'                    ___awdiv@dividend:
   524                           	opt stack 0
   525  0006'                    __div_to_l_@quot:
   526                           	opt stack 0
   527                           
   528                           ; 4 bytes @ 0x6
   529  0006'                    	ds	2
   530  0008'                    ?___awtoft:
   531                           	opt stack 0
   532  0008'                    ?___lltoft:
   533                           	opt stack 0
   534  0008'                    ___llmod@counter:
   535                           	opt stack 0
   536  0008'                    ___awdiv@divisor:
   537                           	opt stack 0
   538  0008'                    ___awtoft@c:
   539                           	opt stack 0
   540  0008'                    ___lldiv@quotient:
   541                           	opt stack 0
   542  0008'                    ___lltoft@c:
   543                           	opt stack 0
   544                           
   545                           ; 4 bytes @ 0x8
   546  0008'                    	ds	1
   547  0009'                    __tdiv_to_l_@quot:
   548                           	opt stack 0
   549                           
   550                           ; 4 bytes @ 0x9
   551  0009'                    	ds	1
   552  000A'                    ___awdiv@counter:
   553                           	opt stack 0
   554  000A'                    __div_to_l_@cntr:
   555                           	opt stack 0
   556                           
   557                           ; 1 bytes @ 0xA
   558  000A'                    	ds	1
   559  000B'                    ___awdiv@sign:
   560                           	opt stack 0
   561  000B'                    ___awtoft@sign:
   562                           	opt stack 0
   563  000B'                    __div_to_l_@exp1:
   564                           	opt stack 0
   565                           
   566                           ; 1 bytes @ 0xB
   567  000B'                    	ds	1
   568  000C'                    ??___lltoft:
   569  000C'                    ?___ftdiv:
   570                           	opt stack 0
   571  000C'                    ___lldiv@counter:
   572                           	opt stack 0
   573  000C'                    ___awdiv@quotient:
   574                           	opt stack 0
   575  000C'                    ___ftdiv@f1:
   576                           	opt stack 0
   577                           
   578                           ; 3 bytes @ 0xC
   579  000C'                    	ds	1
   580  000D'                    __tdiv_to_l_@cntr:
   581                           	opt stack 0
   582                           
   583                           ; 1 bytes @ 0xD
   584  000D'                    	ds	1
   585  000E'                    ?___wmul:
   586                           	opt stack 0
   587  000E'                    __tdiv_to_l_@exp1:
   588                           	opt stack 0
   589  000E'                    ___wmul@multiplier:
   590                           	opt stack 0
   591                           
   592                           ; 2 bytes @ 0xE
   593  000E'                    	ds	1
   594  000F'                    ___ftdiv@f2:
   595                           	opt stack 0
   596                           
   597                           ; 3 bytes @ 0xF
   598  000F'                    	ds	1
   599  0010'                    ___lltoft@exp:
   600                           	opt stack 0
   601  0010'                    ___wmul@multiplicand:
   602                           	opt stack 0
   603                           
   604                           ; 2 bytes @ 0x10
   605  0010'                    	ds	2
   606  0012'                    ??___ftdiv:
   607  0012'                    ___wmul@product:
   608                           	opt stack 0
   609                           
   610                           ; 2 bytes @ 0x12
   611  0012'                    	ds	2
   612  0014'                    ?___ftmul:
   613                           	opt stack 0
   614  0014'                    ___ftmul@f1:
   615                           	opt stack 0
   616                           
   617                           ; 3 bytes @ 0x14
   618  0014'                    	ds	1
   619  0015'                    ___ftdiv@cntr:
   620                           	opt stack 0
   621                           
   622                           ; 1 bytes @ 0x15
   623  0015'                    	ds	1
   624  0016'                    ___ftdiv@f3:
   625                           	opt stack 0
   626                           
   627                           ; 3 bytes @ 0x16
   628  0016'                    	ds	1
   629  0017'                    ___ftmul@f2:
   630                           	opt stack 0
   631                           
   632                           ; 3 bytes @ 0x17
   633  0017'                    	ds	2
   634  0019'                    ___ftdiv@exp:
   635                           	opt stack 0
   636                           
   637                           ; 1 bytes @ 0x19
   638  0019'                    	ds	1
   639  001A'                    ??___ftmul:
   640  001A'                    ___ftdiv@sign:
   641                           	opt stack 0
   642                           
   643                           ; 1 bytes @ 0x1A
   644  001A'                    	ds	3
   645  001D'                    ___ftmul@exp:
   646                           	opt stack 0
   647                           
   648                           ; 1 bytes @ 0x1D
   649  001D'                    	ds	1
   650  001E'                    ___ftmul@f3_as_product:
   651                           	opt stack 0
   652                           
   653                           ; 3 bytes @ 0x1E
   654  001E'                    	ds	3
   655  0021'                    ___ftmul@cntr:
   656                           	opt stack 0
   657                           
   658                           ; 1 bytes @ 0x21
   659  0021'                    	ds	1
   660  0022'                    ___ftmul@sign:
   661                           	opt stack 0
   662                           
   663                           ; 1 bytes @ 0x22
   664  0022'                    	ds	1
   665  0023'                    ?_fround:
   666                           	opt stack 0
   667  0023'                    ?_scale:
   668                           	opt stack 0
   669                           
   670                           ; 3 bytes @ 0x23
   671  0023'                    	ds	3
   672  0026'                    _fround$1495:
   673                           	opt stack 0
   674  0026'                    _scale$1496:
   675                           	opt stack 0
   676                           
   677                           ; 3 bytes @ 0x26
   678  0026'                    	ds	3
   679  0029'                    scale@scl:
   680                           	opt stack 0
   681  0029'                    _fround$1494:
   682                           	opt stack 0
   683                           
   684                           ; 3 bytes @ 0x29
   685  0029'                    	ds	1
   686  002A'                    ?___fttol:
   687                           	opt stack 0
   688  002A'                    ___fttol@f1:
   689                           	opt stack 0
   690                           
   691                           ; 3 bytes @ 0x2A
   692  002A'                    	ds	2
   693  002C'                    fround@prec:
   694                           	opt stack 0
   695                           
   696                           ; 1 bytes @ 0x2C
   697  002C'                    	ds	1
   698  002D'                    ?___ftadd:
   699                           	opt stack 0
   700  002D'                    ___ftadd@f1:
   701                           	opt stack 0
   702                           
   703                           ; 3 bytes @ 0x2D
   704  002D'                    	ds	1
   705  002E'                    ??___fttol:
   706                           
   707                           ; 1 bytes @ 0x2E
   708  002E'                    	ds	2
   709  0030'                    ___ftadd@f2:
   710                           	opt stack 0
   711                           
   712                           ; 3 bytes @ 0x30
   713  0030'                    	ds	3
   714  0033'                    ??___ftadd:
   715  0033'                    ___fttol@sign1:
   716                           	opt stack 0
   717                           
   718                           ; 1 bytes @ 0x33
   719  0033'                    	ds	1
   720  0034'                    ___fttol@lval:
   721                           	opt stack 0
   722                           
   723                           ; 4 bytes @ 0x34
   724  0034'                    	ds	2
   725  0036'                    ___ftadd@sign:
   726                           	opt stack 0
   727                           
   728                           ; 1 bytes @ 0x36
   729  0036'                    	ds	1
   730  0037'                    ___ftadd@exp2:
   731                           	opt stack 0
   732                           
   733                           ; 1 bytes @ 0x37
   734  0037'                    	ds	1
   735  0038'                    ___ftadd@exp1:
   736                           	opt stack 0
   737  0038'                    ___fttol@exp1:
   738                           	opt stack 0
   739                           
   740                           ; 1 bytes @ 0x38
   741  0038'                    	ds	1
   742  0039'                    ?___ftsub:
   743                           	opt stack 0
   744  0039'                    ___ftsub@f1:
   745                           	opt stack 0
   746                           
   747                           ; 3 bytes @ 0x39
   748  0039'                    	ds	3
   749  003C'                    ___ftsub@f2:
   750                           	opt stack 0
   751                           
   752                           ; 3 bytes @ 0x3C
   753  003C'                    	ds	3
   754  003F'                    ?_sprintf:
   755                           	opt stack 0
   756  003F'                    sprintf@sp:
   757                           	opt stack 0
   758                           
   759                           ; 2 bytes @ 0x3F
   760  003F'                    	ds	2
   761  0041'                    sprintf@f:
   762                           	opt stack 0
   763                           
   764                           ; 2 bytes @ 0x41
   765  0041'                    	ds	5
   766  0046'                    ??_sprintf:
   767                           
   768                           ; 1 bytes @ 0x46
   769  0046'                    	ds	6
   770  004C'                    ??_main:
   771                           
   772                           ; 1 bytes @ 0x4C
   773  004C'                    	ds	4
   774                           tblptru	equ	0xFF8
   775                           
   776 ;;
   777 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   778 ;;
   779 ;; *************** function _main *****************
   780 ;; Defined at:
   781 ;;		line 29 in file "Main.c"
   782 ;; Parameters:    Size  Location     Type
   783 ;;		None
   784 ;; Auto vars:     Size  Location     Type
   785 ;;  buffer3        20   63[BANK0 ] unsigned char [20]
   786 ;;  buffer2        20   43[BANK0 ] unsigned char [20]
   787 ;;  buffer         20   23[BANK0 ] unsigned char [20]
   788 ;;  Za              3  101[BANK0 ] float 
   789 ;;  Ya              3   98[BANK0 ] float 
   790 ;;  Xa              3   95[BANK0 ] float 
   791 ;;  Zg              3   92[BANK0 ] float 
   792 ;;  Yg              3   89[BANK0 ] float 
   793 ;;  Xg              3   86[BANK0 ] float 
   794 ;;  t               3   83[BANK0 ] float 
   795 ;;  Gz              2  116[BANK0 ] int 
   796 ;;  Gy              2  114[BANK0 ] int 
   797 ;;  Gx              2  112[BANK0 ] int 
   798 ;;  T               2  110[BANK0 ] int 
   799 ;;  Az              2  108[BANK0 ] int 
   800 ;;  Ay              2  106[BANK0 ] int 
   801 ;;  Ax              2  104[BANK0 ] int 
   802 ;; Return value:  Size  Location     Type
   803 ;;                  1    wreg      void 
   804 ;; Registers used:
   805 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp, btemp+1, btemp+2, b
      +temp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tbl
      +ptru, prodl, prodh, bsr, cstack
   806 ;; Tracked objects:
   807 ;;		On entry : 0/0
   808 ;;		On exit  : 0/0
   809 ;;		Unchanged: 0/0
   810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   811 ;;      Params:         0       0       0       0       0       0       0       0       0
   812 ;;      Locals:         0      95       0       0       0       0       0       0       0
   813 ;;      Temps:          4       0       0       0       0       0       0       0       0
   814 ;;      Totals:         4      95       0       0       0       0       0       0       0
   815 ;;Total ram usage:       99 bytes
   816 ;; Hardware stack levels required when called:    4
   817 ;; This function calls:
   818 ;;		_Acelerometro_Init
   819 ;;		_Acelerometro_Start
   820 ;;		_I2C_Read
   821 ;;		_I2C_Stop
   822 ;;		___awtoft
   823 ;;		___ftadd
   824 ;;		___ftdiv
   825 ;;		_configBoard
   826 ;;		_lcd_inicializar
   827 ;;		_sprintf
   828 ;; This function is called by:
   829 ;;		Startup code after reset
   830 ;; This function uses a non-reentrant model
   831 ;;
   832                           
   833                           	psect	text0
   834  0000'                    __ptext0:
   835                           	opt stack 0
   836  0000'                    _main:
   837                           	opt stack 27
   838                           
   839                           ;Main.c: 32: configBoard();
   840                           
   841                           ;incstack = 0
   842  0000' EC00' F000'        	call	_configBoard	;wreg free
   843                           
   844                           ;Main.c: 33: lcd_inicializar();
   845  0004' EC00' F000'        	call	_lcd_inicializar	;wreg free
   846                           
   847                           ;Main.c: 34: Acelerometro_Init();
   848  0008' EC00' F000'        	call	_Acelerometro_Init	;wreg free
   849                           
   850                           ;Main.c: 35: char buffer[20];
   851                           ;Main.c: 36: char buffer2[20];
   852                           ;Main.c: 37: char buffer3[20];
   853                           ;Main.c: 38: int Ax,Ay,Az,T,Gx,Gy,Gz;
   854                           ;Main.c: 39: float Xa,Ya,Za,t,Xg,Yg,Zg;
   855                           ;Main.c: 40: OSCCON = 0x72;
   856  000C' 0E72               	movlw	114
   857  000E' 6ED3               	movwf	4051,c	;volatile
   858  0010'                    
   859                           ;Main.c: 47: {
   860                           ;Main.c: 49: Acelerometro_Start();
   861  0010' EC00' F000'        	call	_Acelerometro_Start	;wreg free
   862                           
   863                           ;Main.c: 50: Ax = (((int)I2C_Read(0)<<8) | (int)I2C_Read(0));
   864  0014' 0E00               	movlw	0
   865  0016' EC00' F000'        	call	_I2C_Read
   866  001A' 6E00'              	movwf	??_main& (0+255),c
   867  001C' 504C'              	movf	??_main,w,c
   868  001E' 6E00'              	movwf	(??_main+2)& (0+255),c
   869  0020' 6A00'              	clrf	(??_main+1)& (0+255),c
   870  0022' 0E00               	movlw	0
   871  0024' EC00' F000'        	call	_I2C_Read
   872  0028' 6E00'              	movwf	(??_main+3)& (0+255),c
   873  002A' 504F'              	movf	??_main+3,w,c
   874  002C' 104D'              	iorwf	??_main+1,w,c
   875  002E' 0100               	movlb	0	; () banked
   876  0030' 6F00'              	movwf	main@Ax& (0+255),b
   877  0032' 504E'              	movf	??_main+2,w,c
   878  0034' 6F00'              	movwf	(main@Ax+1)& (0+255),b
   879                           
   880                           ; BSR set to: 0
   881                           ;Main.c: 51: Ay = (((int)I2C_Read(0)<<8) | (int)I2C_Read(0));
   882  0036' 0E00               	movlw	0
   883  0038' EC00' F000'        	call	_I2C_Read
   884  003C' 6E00'              	movwf	??_main& (0+255),c
   885  003E' 504C'              	movf	??_main,w,c
   886  0040' 6E00'              	movwf	(??_main+2)& (0+255),c
   887  0042' 6A00'              	clrf	(??_main+1)& (0+255),c
   888  0044' 0E00               	movlw	0
   889  0046' EC00' F000'        	call	_I2C_Read
   890  004A' 6E00'              	movwf	(??_main+3)& (0+255),c
   891  004C' 504F'              	movf	??_main+3,w,c
   892  004E' 104D'              	iorwf	??_main+1,w,c
   893  0050' 0100               	movlb	0	; () banked
   894  0052' 6F00'              	movwf	main@Ay& (0+255),b
   895  0054' 504E'              	movf	??_main+2,w,c
   896  0056' 6F00'              	movwf	(main@Ay+1)& (0+255),b
   897                           
   898                           ; BSR set to: 0
   899                           ;Main.c: 52: Az = (((int)I2C_Read(0)<<8) | (int)I2C_Read(0));
   900  0058' 0E00               	movlw	0
   901  005A' EC00' F000'        	call	_I2C_Read
   902  005E' 6E00'              	movwf	??_main& (0+255),c
   903  0060' 504C'              	movf	??_main,w,c
   904  0062' 6E00'              	movwf	(??_main+2)& (0+255),c
   905  0064' 6A00'              	clrf	(??_main+1)& (0+255),c
   906  0066' 0E00               	movlw	0
   907  0068' EC00' F000'        	call	_I2C_Read
   908  006C' 6E00'              	movwf	(??_main+3)& (0+255),c
   909  006E' 504F'              	movf	??_main+3,w,c
   910  0070' 104D'              	iorwf	??_main+1,w,c
   911  0072' 0100               	movlb	0	; () banked
   912  0074' 6F00'              	movwf	main@Az& (0+255),b
   913  0076' 504E'              	movf	??_main+2,w,c
   914  0078' 6F00'              	movwf	(main@Az+1)& (0+255),b
   915                           
   916                           ; BSR set to: 0
   917                           ;Main.c: 53: T = (((int)I2C_Read(0)<<8) | (int)I2C_Read(0));
   918  007A' 0E00               	movlw	0
   919  007C' EC00' F000'        	call	_I2C_Read
   920  0080' 6E00'              	movwf	??_main& (0+255),c
   921  0082' 504C'              	movf	??_main,w,c
   922  0084' 6E00'              	movwf	(??_main+2)& (0+255),c
   923  0086' 6A00'              	clrf	(??_main+1)& (0+255),c
   924  0088' 0E00               	movlw	0
   925  008A' EC00' F000'        	call	_I2C_Read
   926  008E' 6E00'              	movwf	(??_main+3)& (0+255),c
   927  0090' 504F'              	movf	??_main+3,w,c
   928  0092' 104D'              	iorwf	??_main+1,w,c
   929  0094' 0100               	movlb	0	; () banked
   930  0096' 6F00'              	movwf	main@T& (0+255),b
   931  0098' 504E'              	movf	??_main+2,w,c
   932  009A' 6F00'              	movwf	(main@T+1)& (0+255),b
   933                           
   934                           ; BSR set to: 0
   935                           ;Main.c: 54: Gx = (((int)I2C_Read(0)<<8) | (int)I2C_Read(0));
   936  009C' 0E00               	movlw	0
   937  009E' EC00' F000'        	call	_I2C_Read
   938  00A2' 6E00'              	movwf	??_main& (0+255),c
   939  00A4' 504C'              	movf	??_main,w,c
   940  00A6' 6E00'              	movwf	(??_main+2)& (0+255),c
   941  00A8' 6A00'              	clrf	(??_main+1)& (0+255),c
   942  00AA' 0E00               	movlw	0
   943  00AC' EC00' F000'        	call	_I2C_Read
   944  00B0' 6E00'              	movwf	(??_main+3)& (0+255),c
   945  00B2' 504F'              	movf	??_main+3,w,c
   946  00B4' 104D'              	iorwf	??_main+1,w,c
   947  00B6' 0100               	movlb	0	; () banked
   948  00B8' 6F00'              	movwf	main@Gx& (0+255),b
   949  00BA' 504E'              	movf	??_main+2,w,c
   950  00BC' 6F00'              	movwf	(main@Gx+1)& (0+255),b
   951                           
   952                           ; BSR set to: 0
   953                           ;Main.c: 55: Gy = (((int)I2C_Read(0)<<8) | (int)I2C_Read(0));
   954  00BE' 0E00               	movlw	0
   955  00C0' EC00' F000'        	call	_I2C_Read
   956  00C4' 6E00'              	movwf	??_main& (0+255),c
   957  00C6' 504C'              	movf	??_main,w,c
   958  00C8' 6E00'              	movwf	(??_main+2)& (0+255),c
   959  00CA' 6A00'              	clrf	(??_main+1)& (0+255),c
   960  00CC' 0E00               	movlw	0
   961  00CE' EC00' F000'        	call	_I2C_Read
   962  00D2' 6E00'              	movwf	(??_main+3)& (0+255),c
   963  00D4' 504F'              	movf	??_main+3,w,c
   964  00D6' 104D'              	iorwf	??_main+1,w,c
   965  00D8' 0100               	movlb	0	; () banked
   966  00DA' 6F00'              	movwf	main@Gy& (0+255),b
   967  00DC' 504E'              	movf	??_main+2,w,c
   968  00DE' 6F00'              	movwf	(main@Gy+1)& (0+255),b
   969                           
   970                           ; BSR set to: 0
   971                           ;Main.c: 56: Gz = (((int)I2C_Read(0)<<8) | (int)I2C_Read(1));
   972  00E0' 0E00               	movlw	0
   973  00E2' EC00' F000'        	call	_I2C_Read
   974  00E6' 6E00'              	movwf	??_main& (0+255),c
   975  00E8' 504C'              	movf	??_main,w,c
   976  00EA' 6E00'              	movwf	(??_main+2)& (0+255),c
   977  00EC' 6A00'              	clrf	(??_main+1)& (0+255),c
   978  00EE' 0E01               	movlw	1
   979  00F0' EC00' F000'        	call	_I2C_Read
   980  00F4' 6E00'              	movwf	(??_main+3)& (0+255),c
   981  00F6' 504F'              	movf	??_main+3,w,c
   982  00F8' 104D'              	iorwf	??_main+1,w,c
   983  00FA' 0100               	movlb	0	; () banked
   984  00FC' 6F00'              	movwf	main@Gz& (0+255),b
   985  00FE' 504E'              	movf	??_main+2,w,c
   986  0100' 6F00'              	movwf	(main@Gz+1)& (0+255),b
   987                           
   988                           ; BSR set to: 0
   989                           ;Main.c: 57: I2C_Stop();
   990  0102' EC00' F000'        	call	_I2C_Stop	;wreg free
   991                           
   992                           ;Main.c: 58: Xa = (float)Ax/16384.0;
   993  0106' C068' F008'        	movff	main@Ax,___awtoft@c
   994  010A' C069' F009'        	movff	main@Ax+1,___awtoft@c+1
   995  010E' EC00' F000'        	call	___awtoft	;wreg free
   996  0112' C008' F00C'        	movff	?___awtoft,___ftdiv@f1
   997  0116' C009' F00D'        	movff	?___awtoft+1,___ftdiv@f1+1
   998  011A' C00A' F00E'        	movff	?___awtoft+2,___ftdiv@f1+2
   999  011E' 0E00               	movlw	0
  1000  0120' 6E0F'              	movwf	___ftdiv@f2,c
  1001  0122' 0E80               	movlw	128
  1002  0124' 6E10'              	movwf	___ftdiv@f2+1,c
  1003  0126' 0E46               	movlw	70
  1004  0128' 6E11'              	movwf	___ftdiv@f2+2,c
  1005  012A' EC00' F000'        	call	___ftdiv	;wreg free
  1006  012E' C00C' F05F'        	movff	?___ftdiv,main@Xa
  1007  0132' C00D' F060'        	movff	?___ftdiv+1,main@Xa+1
  1008  0136' C00E' F061'        	movff	?___ftdiv+2,main@Xa+2
  1009                           
  1010                           ;Main.c: 59: Ya = (float)Ay/16384.0;
  1011  013A' C06A' F008'        	movff	main@Ay,___awtoft@c
  1012  013E' C06B' F009'        	movff	main@Ay+1,___awtoft@c+1
  1013  0142' EC00' F000'        	call	___awtoft	;wreg free
  1014  0146' C008' F00C'        	movff	?___awtoft,___ftdiv@f1
  1015  014A' C009' F00D'        	movff	?___awtoft+1,___ftdiv@f1+1
  1016  014E' C00A' F00E'        	movff	?___awtoft+2,___ftdiv@f1+2
  1017  0152' 0E00               	movlw	0
  1018  0154' 6E0F'              	movwf	___ftdiv@f2,c
  1019  0156' 0E80               	movlw	128
  1020  0158' 6E10'              	movwf	___ftdiv@f2+1,c
  1021  015A' 0E46               	movlw	70
  1022  015C' 6E11'              	movwf	___ftdiv@f2+2,c
  1023  015E' EC00' F000'        	call	___ftdiv	;wreg free
  1024  0162' C00C' F062'        	movff	?___ftdiv,main@Ya
  1025  0166' C00D' F063'        	movff	?___ftdiv+1,main@Ya+1
  1026  016A' C00E' F064'        	movff	?___ftdiv+2,main@Ya+2
  1027                           
  1028                           ;Main.c: 60: Za = (float)Az/16384.0;
  1029  016E' C06C' F008'        	movff	main@Az,___awtoft@c
  1030  0172' C06D' F009'        	movff	main@Az+1,___awtoft@c+1
  1031  0176' EC00' F000'        	call	___awtoft	;wreg free
  1032  017A' C008' F00C'        	movff	?___awtoft,___ftdiv@f1
  1033  017E' C009' F00D'        	movff	?___awtoft+1,___ftdiv@f1+1
  1034  0182' C00A' F00E'        	movff	?___awtoft+2,___ftdiv@f1+2
  1035  0186' 0E00               	movlw	0
  1036  0188' 6E0F'              	movwf	___ftdiv@f2,c
  1037  018A' 0E80               	movlw	128
  1038  018C' 6E10'              	movwf	___ftdiv@f2+1,c
  1039  018E' 0E46               	movlw	70
  1040  0190' 6E11'              	movwf	___ftdiv@f2+2,c
  1041  0192' EC00' F000'        	call	___ftdiv	;wreg free
  1042  0196' C00C' F065'        	movff	?___ftdiv,main@Za
  1043  019A' C00D' F066'        	movff	?___ftdiv+1,main@Za+1
  1044  019E' C00E' F067'        	movff	?___ftdiv+2,main@Za+2
  1045                           
  1046                           ;Main.c: 61: Xg = (float)Gx/131.0;
  1047  01A2' C070' F008'        	movff	main@Gx,___awtoft@c
  1048  01A6' C071' F009'        	movff	main@Gx+1,___awtoft@c+1
  1049  01AA' EC00' F000'        	call	___awtoft	;wreg free
  1050  01AE' C008' F00C'        	movff	?___awtoft,___ftdiv@f1
  1051  01B2' C009' F00D'        	movff	?___awtoft+1,___ftdiv@f1+1
  1052  01B6' C00A' F00E'        	movff	?___awtoft+2,___ftdiv@f1+2
  1053  01BA' 0E00               	movlw	0
  1054  01BC' 6E0F'              	movwf	___ftdiv@f2,c
  1055  01BE' 0E03               	movlw	3
  1056  01C0' 6E10'              	movwf	___ftdiv@f2+1,c
  1057  01C2' 0E43               	movlw	67
  1058  01C4' 6E11'              	movwf	___ftdiv@f2+2,c
  1059  01C6' EC00' F000'        	call	___ftdiv	;wreg free
  1060  01CA' C00C' F056'        	movff	?___ftdiv,main@Xg
  1061  01CE' C00D' F057'        	movff	?___ftdiv+1,main@Xg+1
  1062  01D2' C00E' F058'        	movff	?___ftdiv+2,main@Xg+2
  1063                           
  1064                           ;Main.c: 62: Yg = (float)Gy/131.0;
  1065  01D6' C072' F008'        	movff	main@Gy,___awtoft@c
  1066  01DA' C073' F009'        	movff	main@Gy+1,___awtoft@c+1
  1067  01DE' EC00' F000'        	call	___awtoft	;wreg free
  1068  01E2' C008' F00C'        	movff	?___awtoft,___ftdiv@f1
  1069  01E6' C009' F00D'        	movff	?___awtoft+1,___ftdiv@f1+1
  1070  01EA' C00A' F00E'        	movff	?___awtoft+2,___ftdiv@f1+2
  1071  01EE' 0E00               	movlw	0
  1072  01F0' 6E0F'              	movwf	___ftdiv@f2,c
  1073  01F2' 0E03               	movlw	3
  1074  01F4' 6E10'              	movwf	___ftdiv@f2+1,c
  1075  01F6' 0E43               	movlw	67
  1076  01F8' 6E11'              	movwf	___ftdiv@f2+2,c
  1077  01FA' EC00' F000'        	call	___ftdiv	;wreg free
  1078  01FE' C00C' F059'        	movff	?___ftdiv,main@Yg
  1079  0202' C00D' F05A'        	movff	?___ftdiv+1,main@Yg+1
  1080  0206' C00E' F05B'        	movff	?___ftdiv+2,main@Yg+2
  1081                           
  1082                           ;Main.c: 63: Zg = (float)Gz/131.0;
  1083  020A' C074' F008'        	movff	main@Gz,___awtoft@c
  1084  020E' C075' F009'        	movff	main@Gz+1,___awtoft@c+1
  1085  0212' EC00' F000'        	call	___awtoft	;wreg free
  1086  0216' C008' F00C'        	movff	?___awtoft,___ftdiv@f1
  1087  021A' C009' F00D'        	movff	?___awtoft+1,___ftdiv@f1+1
  1088  021E' C00A' F00E'        	movff	?___awtoft+2,___ftdiv@f1+2
  1089  0222' 0E00               	movlw	0
  1090  0224' 6E0F'              	movwf	___ftdiv@f2,c
  1091  0226' 0E03               	movlw	3
  1092  0228' 6E10'              	movwf	___ftdiv@f2+1,c
  1093  022A' 0E43               	movlw	67
  1094  022C' 6E11'              	movwf	___ftdiv@f2+2,c
  1095  022E' EC00' F000'        	call	___ftdiv	;wreg free
  1096  0232' C00C' F05C'        	movff	?___ftdiv,main@Zg
  1097  0236' C00D' F05D'        	movff	?___ftdiv+1,main@Zg+1
  1098  023A' C00E' F05E'        	movff	?___ftdiv+2,main@Zg+2
  1099                           
  1100                           ;Main.c: 64: t = ((float)T/340.00)+36.53;
  1101  023E' 0E00               	movlw	0
  1102  0240' 6E0F'              	movwf	___ftdiv@f2,c
  1103  0242' 0EAA               	movlw	170
  1104  0244' 6E10'              	movwf	___ftdiv@f2+1,c
  1105  0246' 0E43               	movlw	67
  1106  0248' 6E11'              	movwf	___ftdiv@f2+2,c
  1107  024A' C06E' F008'        	movff	main@T,___awtoft@c
  1108  024E' C06F' F009'        	movff	main@T+1,___awtoft@c+1
  1109  0252' EC00' F000'        	call	___awtoft	;wreg free
  1110  0256' C008' F00C'        	movff	?___awtoft,___ftdiv@f1
  1111  025A' C009' F00D'        	movff	?___awtoft+1,___ftdiv@f1+1
  1112  025E' C00A' F00E'        	movff	?___awtoft+2,___ftdiv@f1+2
  1113  0262' EC00' F000'        	call	___ftdiv	;wreg free
  1114  0266' C00C' F02D'        	movff	?___ftdiv,___ftadd@f1
  1115  026A' C00D' F02E'        	movff	?___ftdiv+1,___ftadd@f1+1
  1116  026E' C00E' F02F'        	movff	?___ftdiv+2,___ftadd@f1+2
  1117  0272' 0E1F               	movlw	31
  1118  0274' 6E30'              	movwf	___ftadd@f2,c
  1119  0276' 0E12               	movlw	18
  1120  0278' 6E31'              	movwf	___ftadd@f2+1,c
  1121  027A' 0E42               	movlw	66
  1122  027C' 6E32'              	movwf	___ftadd@f2+2,c
  1123  027E' EC00' F000'        	call	___ftadd	;wreg free
  1124  0282' C02D' F053'        	movff	?___ftadd,main@t
  1125  0286' C02E' F054'        	movff	?___ftadd+1,main@t+1
  1126  028A' C02F' F055'        	movff	?___ftadd+2,main@t+2
  1127                           
  1128                           ;Main.c: 65: sprintf(buffer," Ax = %.2f g\t",Xa);
  1129  028E' 0E00'              	movlw	low main@buffer
  1130  0290' 6E3F'              	movwf	sprintf@sp,c
  1131  0292' 0E00'              	movlw	high main@buffer
  1132  0294' 6E40'              	movwf	sprintf@sp+1,c
  1133  0296' 0E00'              	movlw	low STR_1
  1134  0298' 6E41'              	movwf	sprintf@f,c
  1135  029A' 0E00'              	movlw	high STR_1
  1136  029C' 6E42'              	movwf	sprintf@f+1,c
  1137  029E' C05F' F043'        	movff	main@Xa,?_sprintf+4
  1138  02A2' C060' F044'        	movff	main@Xa+1,?_sprintf+5
  1139  02A6' C061' F045'        	movff	main@Xa+2,?_sprintf+6
  1140  02AA' EC00' F000'        	call	_sprintf	;wreg free
  1141                           
  1142                           ;Main.c: 69: sprintf(buffer2," Ay = %.2f g\t",Ya);
  1143  02AE' 0E00'              	movlw	low main@buffer2
  1144  02B0' 6E3F'              	movwf	sprintf@sp,c
  1145  02B2' 0E00'              	movlw	high main@buffer2
  1146  02B4' 6E40'              	movwf	sprintf@sp+1,c
  1147  02B6' 0E00'              	movlw	low STR_2
  1148  02B8' 6E41'              	movwf	sprintf@f,c
  1149  02BA' 0E00'              	movlw	high STR_2
  1150  02BC' 6E42'              	movwf	sprintf@f+1,c
  1151  02BE' C062' F043'        	movff	main@Ya,?_sprintf+4
  1152  02C2' C063' F044'        	movff	main@Ya+1,?_sprintf+5
  1153  02C6' C064' F045'        	movff	main@Ya+2,?_sprintf+6
  1154  02CA' EC00' F000'        	call	_sprintf	;wreg free
  1155                           
  1156                           ;Main.c: 73: sprintf(buffer3," Az = %.2f g \n",Za);
  1157  02CE' 0E00'              	movlw	low main@buffer3
  1158  02D0' 6E3F'              	movwf	sprintf@sp,c
  1159  02D2' 0E00'              	movlw	high main@buffer3
  1160  02D4' 6E40'              	movwf	sprintf@sp+1,c
  1161  02D6' 0E00'              	movlw	low STR_3
  1162  02D8' 6E41'              	movwf	sprintf@f,c
  1163  02DA' 0E00'              	movlw	high STR_3
  1164  02DC' 6E42'              	movwf	sprintf@f+1,c
  1165  02DE' C065' F043'        	movff	main@Za,?_sprintf+4
  1166  02E2' C066' F044'        	movff	main@Za+1,?_sprintf+5
  1167  02E6' C067' F045'        	movff	main@Za+2,?_sprintf+6
  1168  02EA' EC00' F000'        	call	_sprintf	;wreg free
  1169  02EE' D690               	goto	l137
  1170  02F0'                    __end_of_main:
  1171                           	opt stack 0
  1172                           tblptru	equ	0xFF8
  1173                           
  1174 ;; *************** function _sprintf *****************
  1175 ;; Defined at:
  1176 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  1177 ;; Parameters:    Size  Location     Type
  1178 ;;  sp              2   63[COMRAM] PTR unsigned char 
  1179 ;;		 -> main@buffer3(20), main@buffer2(20), main@buffer(20), 
  1180 ;;  f               2   65[COMRAM] PTR const unsigned char 
  1181 ;;		 -> STR_3(15), STR_2(14), STR_1(14), 
  1182 ;; Auto vars:     Size  Location     Type
  1183 ;;  tmpval          4   13[BANK0 ] struct .
  1184 ;;  val             4    7[BANK0 ] unsigned long 
  1185 ;;  fval            3   19[BANK0 ] unsigned long 
  1186 ;;  cp              3    0        PTR const unsigned char 
  1187 ;;  prec            2   17[BANK0 ] int 
  1188 ;;  exp             2   11[BANK0 ] int 
  1189 ;;  flag            2    5[BANK0 ] unsigned short 
  1190 ;;  ap              2    3[BANK0 ] PTR void [1]
  1191 ;;		 -> ?_sprintf(2), 
  1192 ;;  len             2    0        unsigned int 
  1193 ;;  width           2    0        int 
  1194 ;;  c               1   22[BANK0 ] char 
  1195 ;;  d               1    0        unsigned char 
  1196 ;; Return value:  Size  Location     Type
  1197 ;;                  2   63[COMRAM] int 
  1198 ;; Registers used:
  1199 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1200 ;; Tracked objects:
  1201 ;;		On entry : 0/0
  1202 ;;		On exit  : 0/0
  1203 ;;		Unchanged: 0/0
  1204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1205 ;;      Params:         7       0       0       0       0       0       0       0       0
  1206 ;;      Locals:         0      23       0       0       0       0       0       0       0
  1207 ;;      Temps:          6       0       0       0       0       0       0       0       0
  1208 ;;      Totals:        13      23       0       0       0       0       0       0       0
  1209 ;;Total ram usage:       36 bytes
  1210 ;; Hardware stack levels used:    1
  1211 ;; Hardware stack levels required when called:    3
  1212 ;; This function calls:
  1213 ;;		___awdiv
  1214 ;;		___ftadd
  1215 ;;		___ftge
  1216 ;;		___ftmul
  1217 ;;		___ftneg
  1218 ;;		___ftsub
  1219 ;;		___fttol
  1220 ;;		___lldiv
  1221 ;;		___llmod
  1222 ;;		___lltoft
  1223 ;;		___wmul
  1224 ;;		__div_to_l_
  1225 ;;		__tdiv_to_l_
  1226 ;;		_fround
  1227 ;;		_isdigit
  1228 ;;		_scale
  1229 ;; This function is called by:
  1230 ;;		_main
  1231 ;; This function uses a non-reentrant model
  1232 ;;
  1233                           
  1234                           	psect	text1
  1235  0000'                    __ptext1:
  1236                           	opt stack 0
  1237  0000'                    _sprintf:
  1238                           	opt stack 27
  1239                           
  1240                           ;doprnt.c: 494: va_list ap;
  1241                           ;doprnt.c: 499: signed char c;
  1242                           ;doprnt.c: 501: int width;
  1243                           ;doprnt.c: 504: int prec;
  1244                           ;doprnt.c: 508: unsigned short flag;
  1245                           ;doprnt.c: 515: char d;
  1246                           ;doprnt.c: 516: double fval;
  1247                           ;doprnt.c: 517: int exp;
  1248                           ;doprnt.c: 523: union {
  1249                           ;doprnt.c: 524: unsigned long vd;
  1250                           ;doprnt.c: 525: double integ;
  1251                           ;doprnt.c: 526: } tmpval;
  1252                           ;doprnt.c: 528: unsigned long val;
  1253                           ;doprnt.c: 529: unsigned len;
  1254                           ;doprnt.c: 530: const char * cp;
  1255                           ;doprnt.c: 533: *ap = __va_start();
  1256                           
  1257                           ;incstack = 0
  1258  0000' 0E00'              	movlw	low (?_sprintf+4)
  1259  0002' 0100               	movlb	0	; () banked
  1260  0004' 6F00'              	movwf	sprintf@ap& (0+255),b
  1261  0006' 0E00'              	movlw	high (?_sprintf+4)
  1262  0008' 6F00'              	movwf	(sprintf@ap+1)& (0+255),b
  1263                           
  1264                           ;doprnt.c: 536: while(c = *f++) {
  1265  000A' D36B               	goto	l351
  1266  000C'                    
  1267                           ; BSR set to: 0
  1268                           ;doprnt.c: 538: if(c != '%')
  1269                           
  1270                           ; BSR set to: 0
  1271  000C' 0E25               	movlw	37
  1272  000E' 1900'              	xorwf	sprintf@c& (0+255),w,b
  1273  0010' B4D8               	btfsc	status,2,c
  1274  0012' D007               	goto	l297
  1275                           
  1276                           ; BSR set to: 0
  1277                           ;doprnt.c: 540: {
  1278                           ;doprnt.c: 541: ((*sp++ = (c)));
  1279  0014' C03F' FFD9         	movff	sprintf@sp,fsr2l
  1280  0018' C040' FFDA         	movff	sprintf@sp+1,fsr2h
  1281  001C' C016' FFDF         	movff	sprintf@c,indf2
  1282  0020' D35E               	goto	l3064
  1283  0022'                    l297:
  1284                           
  1285                           ; BSR set to: 0
  1286                           ;doprnt.c: 543: }
  1287                           ;doprnt.c: 548: flag = 0;
  1288                           
  1289                           ; BSR set to: 0
  1290  0022' 0E00               	movlw	0
  1291  0024' 6F00'              	movwf	(sprintf@flag+1)& (0+255),b
  1292  0026' 0E00               	movlw	0
  1293  0028' 6F00'              	movwf	sprintf@flag& (0+255),b
  1294                           
  1295                           ; BSR set to: 0
  1296                           ;doprnt.c: 611: if(*f == '.') {
  1297  002A' C041' FFF6         	movff	sprintf@f,tblptrl
  1298  002E' C042' FFF7         	movff	sprintf@f+1,tblptrh
  1299  0032'                    	if	0	;tblptru may be non-zero
  1300  0032'                    	endif
  1301  0032'                    	if	0	;tblptru may be non-zero
  1302  0032'                    	endif
  1303  0032' 0008               	tblrd		*
  1304  0034' 50F5               	movf	tablat,w,c
  1305  0036' 0A2E               	xorlw	46
  1306  0038' A4D8               	btfss	status,2,c
  1307  003A' D02F               	goto	l298
  1308                           
  1309                           ; BSR set to: 0
  1310                           ;doprnt.c: 612: flag |= 0x4000;
  1311  003C' 8D00'              	bsf	(sprintf@flag+1)& (0+255),6,b
  1312                           
  1313                           ;doprnt.c: 613: f++;
  1314  003E' 4A41'              	infsnz	sprintf@f,f,c
  1315  0040' 2A42'              	incf	sprintf@f+1,f,c
  1316                           
  1317                           ; BSR set to: 0
  1318                           ;doprnt.c: 620: {
  1319                           ;doprnt.c: 621: prec = 0;
  1320  0042' 0E00               	movlw	0
  1321  0044' 6F00'              	movwf	(sprintf@prec+1)& (0+255),b
  1322  0046' 0E00               	movlw	0
  1323  0048' 6F00'              	movwf	sprintf@prec& (0+255),b
  1324                           
  1325                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1326  004A' D01C               	goto	l299
  1327  004C'                    
  1328                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1329                           
  1330                           ; BSR set to: 0
  1331  004C' C011' F00E'        	movff	sprintf@prec,___wmul@multiplier
  1332  0050' C012' F00F'        	movff	sprintf@prec+1,___wmul@multiplier+1
  1333  0054' 0E00               	movlw	0
  1334  0056' 6E11'              	movwf	___wmul@multiplicand+1,c
  1335  0058' 0E0A               	movlw	10
  1336  005A' 6E10'              	movwf	___wmul@multiplicand,c
  1337  005C' EC00' F000'        	call	___wmul	;wreg free
  1338  0060' C041' FFF6         	movff	sprintf@f,tblptrl
  1339  0064' C042' FFF7         	movff	sprintf@f+1,tblptrh
  1340  0068'                    	if	0	;tblptru may be non-zero
  1341  0068'                    	endif
  1342  0068'                    	if	0	;tblptru may be non-zero
  1343  0068'                    	endif
  1344  0068' 0008               	tblrd		*
  1345  006A' 50F5               	movf	tablat,w,c
  1346  006C' 260E'              	addwf	?___wmul,f,c
  1347  006E' 0E00               	movlw	0
  1348  0070' 220F'              	addwfc	?___wmul+1,f,c
  1349  0072' 0ED0               	movlw	208
  1350  0074' 240E'              	addwf	?___wmul,w,c
  1351  0076' 0100               	movlb	0	; () banked
  1352  0078' 6F00'              	movwf	sprintf@prec& (0+255),b
  1353  007A' 0EFF               	movlw	255
  1354  007C' 200F'              	addwfc	?___wmul+1,w,c
  1355  007E' 6F00'              	movwf	(sprintf@prec+1)& (0+255),b
  1356                           
  1357                           ; BSR set to: 0
  1358  0080' 4A41'              	infsnz	sprintf@f,f,c
  1359  0082' 2A42'              	incf	sprintf@f+1,f,c
  1360  0084'                    l299:
  1361                           
  1362                           ; BSR set to: 0
  1363                           
  1364                           ; BSR set to: 0
  1365  0084' C041' FFF6         	movff	sprintf@f,tblptrl
  1366  0088' C042' FFF7         	movff	sprintf@f+1,tblptrh
  1367  008C'                    	if	0	;tblptru may be non-zero
  1368  008C'                    	endif
  1369  008C'                    	if	0	;tblptru may be non-zero
  1370  008C'                    	endif
  1371  008C' 0008               	tblrd		*
  1372  008E' 50F5               	movf	tablat,w,c
  1373  0090' EC00' F000'        	call	_isdigit
  1374  0094' A0D8               	btfss	status,0,c
  1375  0096' D00A               	goto	l303
  1376  0098' D7D9               	goto	l300
  1377  009A'                    l298:
  1378                           
  1379                           ;doprnt.c: 626: prec = 0;
  1380  009A' 0E00               	movlw	0
  1381  009C' 0100               	movlb	0	; () banked
  1382  009E' 6F00'              	movwf	(sprintf@prec+1)& (0+255),b
  1383  00A0' 0E00               	movlw	0
  1384  00A2' 6F00'              	movwf	sprintf@prec& (0+255),b
  1385                           
  1386                           ; BSR set to: 0
  1387                           ;doprnt.c: 628: flag |= 0x1000;
  1388  00A4' 8900'              	bsf	(sprintf@flag+1)& (0+255),4,b
  1389                           
  1390                           ; BSR set to: 0
  1391                           ;doprnt.c: 630: }
  1392                           ;doprnt.c: 635: switch(c = *f++) {
  1393  00A6' D002               	goto	l303
  1394  00A8'                    
  1395                           ; BSR set to: 0
  1396                           ;doprnt.c: 663: flag |= 0x400;
  1397                           
  1398                           ; BSR set to: 0
  1399  00A8' 8500'              	bsf	(sprintf@flag+1)& (0+255),2,b
  1400                           
  1401                           ;doprnt.c: 664: break;
  1402  00AA' D012               	goto	l307
  1403  00AC'                    l303:
  1404                           
  1405                           ; BSR set to: 0
  1406  00AC' C041' FFF6         	movff	sprintf@f,tblptrl
  1407  00B0' C042' FFF7         	movff	sprintf@f+1,tblptrh
  1408  00B4' 4A41'              	infsnz	sprintf@f,f,c
  1409  00B6' 2A42'              	incf	sprintf@f+1,f,c
  1410  00B8'                    	if	0	;tblptru may be non-zero
  1411  00B8'                    	endif
  1412  00B8'                    	if	0	;tblptru may be non-zero
  1413  00B8'                    	endif
  1414  00B8' 0008               	tblrd		*
  1415  00BA' CFF5 F016'         	movff	tablat,sprintf@c
  1416  00BE' 0100               	movlb	0	; () banked
  1417  00C0' 5100'              	movf	sprintf@c& (0+255),w,b
  1418                           
  1419                           ; Switch size 1, requested type "space"
  1420                           ; Number of cases is 2, Range of values is 0 to 102
  1421                           ; switch strategies available:
  1422                           ; Name         Instructions Cycles
  1423                           ; simple_byte            7     4 (average)
  1424                           ;	Chosen strategy is simple_byte
  1425  00C2' 0A00               	xorlw	0	; case 0
  1426  00C4' B4D8               	btfsc	status,2,c
  1427  00C6' D319               	goto	u3050
  1428  00C8' 0A66               	xorlw	102	; case 102
  1429  00CA' B4D8               	btfsc	status,2,c
  1430  00CC' D7ED               	goto	l306
  1431  00CE' D309               	goto	l351
  1432  00D0'                    l307:
  1433                           
  1434                           ; BSR set to: 0
  1435                           ;doprnt.c: 825: if(flag & (0x700)) {
  1436                           
  1437                           ; BSR set to: 0
  1438  00D0' 0E07               	movlw	7
  1439  00D2' 1500'              	andwf	(sprintf@flag+1)& (0+255),w,b
  1440  00D4' B4D8               	btfsc	status,2,c
  1441  00D6' D2C9               	goto	l309
  1442                           
  1443                           ; BSR set to: 0
  1444                           ;doprnt.c: 827: if(flag & 0x1000)
  1445  00D8' A900'              	btfss	(sprintf@flag+1)& (0+255),4,b
  1446  00DA' D004               	goto	l310
  1447                           
  1448                           ; BSR set to: 0
  1449                           ;doprnt.c: 829: prec = 6;
  1450  00DC' 0E00               	movlw	0
  1451  00DE' 6F00'              	movwf	(sprintf@prec+1)& (0+255),b
  1452  00E0' 0E06               	movlw	6
  1453  00E2' 6F00'              	movwf	sprintf@prec& (0+255),b
  1454  00E4'                    l310:
  1455                           
  1456                           ; BSR set to: 0
  1457                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1458                           
  1459                           ; BSR set to: 0
  1460  00E4' C003' FFD9         	movff	sprintf@ap,fsr2l
  1461  00E8' C004' FFDA         	movff	sprintf@ap+1,fsr2h
  1462  00EC' CFDE F013'         	movff	postinc2,sprintf@fval
  1463  00F0' CFDE F014'         	movff	postinc2,sprintf@fval+1
  1464  00F4' CFDD F015'         	movff	postdec2,sprintf@fval+2
  1465                           
  1466                           ; BSR set to: 0
  1467  00F8' 0E03               	movlw	3
  1468  00FA' 2700'              	addwf	sprintf@ap& (0+255),f,b
  1469  00FC' 0E00               	movlw	0
  1470  00FE' 2300'              	addwfc	(sprintf@ap+1)& (0+255),f,b
  1471                           
  1472                           ; BSR set to: 0
  1473                           ;doprnt.c: 831: if(fval < 0.0) {
  1474  0100' AF00'              	btfss	(sprintf@fval+2)& (0+255),7,b
  1475  0102' D011               	goto	l311
  1476                           
  1477                           ; BSR set to: 0
  1478                           ;doprnt.c: 832: fval = -fval;
  1479  0104' C013' F000'        	movff	sprintf@fval,___ftneg@f1
  1480  0108' C014' F001'        	movff	sprintf@fval+1,___ftneg@f1+1
  1481  010C' C015' F002'        	movff	sprintf@fval+2,___ftneg@f1+2
  1482  0110' EC00' F000'        	call	___ftneg	;wreg free
  1483  0114' C000' F013'        	movff	?___ftneg,sprintf@fval
  1484  0118' C001' F014'        	movff	?___ftneg+1,sprintf@fval+1
  1485  011C' C002' F015'        	movff	?___ftneg+2,sprintf@fval+2
  1486                           
  1487                           ;doprnt.c: 833: flag |= 0x03;
  1488  0120' 0E03               	movlw	3
  1489  0122' 0100               	movlb	0	; () banked
  1490  0124' 1300'              	iorwf	sprintf@flag& (0+255),f,b
  1491  0126'                    l311:
  1492                           
  1493                           ; BSR set to: 0
  1494                           ;doprnt.c: 834: }
  1495                           ;doprnt.c: 835: exp = 0;
  1496                           
  1497                           ; BSR set to: 0
  1498  0126' 0E00               	movlw	0
  1499  0128' 6F00'              	movwf	(sprintf@exp+1)& (0+255),b
  1500  012A' 0E00               	movlw	0
  1501  012C' 6F00'              	movwf	sprintf@exp& (0+255),b
  1502                           
  1503                           ; BSR set to: 0
  1504                           ;doprnt.c: 836: if( fval!=0) {
  1505  012E' 5100'              	movf	sprintf@fval& (0+255),w,b
  1506  0130' 1100'              	iorwf	(sprintf@fval+1)& (0+255),w,b
  1507  0132' 1100'              	iorwf	(sprintf@fval+2)& (0+255),w,b
  1508  0134' B4D8               	btfsc	status,2,c
  1509  0136' D086               	goto	l316
  1510                           
  1511                           ; BSR set to: 0
  1512                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1513  0138' 0E82               	movlw	130
  1514  013A' 6E00'              	movwf	??_sprintf& (0+255),c
  1515  013C' 0EFF               	movlw	255
  1516  013E' 6E00'              	movwf	(??_sprintf+1)& (0+255),c
  1517  0140' C013' F048'        	movff	sprintf@fval,??_sprintf+2
  1518  0144' C014' F049'        	movff	sprintf@fval+1,??_sprintf+3
  1519  0148' C015' F04A'        	movff	sprintf@fval+2,??_sprintf+4
  1520  014C' C016' F04B'        	movff	sprintf@fval+3,??_sprintf+5
  1521  0150' 0E10               	movlw	16
  1522  0152' D005               	goto	u2800
  1523  0154'                    u2805:
  1524  0154' 90D8               	bcf	status,0,c
  1525  0156' 324B'              	rrcf	??_sprintf+5,f,c
  1526  0158' 324A'              	rrcf	??_sprintf+4,f,c
  1527  015A' 3249'              	rrcf	??_sprintf+3,f,c
  1528  015C' 3248'              	rrcf	??_sprintf+2,f,c
  1529  015E'                    u2800:
  1530  015E' 2EE8               	decfsz	wreg,f,c
  1531  0160' D7F9               	goto	u2805
  1532  0162' 5048'              	movf	??_sprintf+2,w,c
  1533  0164' 2446'              	addwf	??_sprintf,w,c
  1534  0166' 6F00'              	movwf	sprintf@exp& (0+255),b
  1535  0168' 0E00               	movlw	0
  1536  016A' 2047'              	addwfc	??_sprintf+1,w,c
  1537  016C' 6F00'              	movwf	(sprintf@exp+1)& (0+255),b
  1538                           
  1539                           ; BSR set to: 0
  1540                           ;doprnt.c: 838: exp--;
  1541  016E' 0700'              	decf	sprintf@exp& (0+255),f,b
  1542  0170' A0D8               	btfss	status,0,c
  1543  0172' 0700'              	decf	(sprintf@exp+1)& (0+255),f,b
  1544                           
  1545                           ; BSR set to: 0
  1546                           ;doprnt.c: 839: exp *= 3;
  1547  0174' C00B' F00E'        	movff	sprintf@exp,___wmul@multiplier
  1548  0178' C00C' F00F'        	movff	sprintf@exp+1,___wmul@multiplier+1
  1549  017C' 0E00               	movlw	0
  1550  017E' 6E11'              	movwf	___wmul@multiplicand+1,c
  1551  0180' 0E03               	movlw	3
  1552  0182' 6E10'              	movwf	___wmul@multiplicand,c
  1553  0184' EC00' F000'        	call	___wmul	;wreg free
  1554  0188' C00E' F00B'        	movff	?___wmul,sprintf@exp
  1555  018C' C00F' F00C'        	movff	?___wmul+1,sprintf@exp+1
  1556                           
  1557                           ;doprnt.c: 840: exp /= 10;
  1558  0190' C00B' F006'        	movff	sprintf@exp,___awdiv@dividend
  1559  0194' C00C' F007'        	movff	sprintf@exp+1,___awdiv@dividend+1
  1560  0198' 0E00               	movlw	0
  1561  019A' 6E09'              	movwf	___awdiv@divisor+1,c
  1562  019C' 0E0A               	movlw	10
  1563  019E' 6E08'              	movwf	___awdiv@divisor,c
  1564  01A0' EC00' F000'        	call	___awdiv	;wreg free
  1565  01A4' C006' F00B'        	movff	?___awdiv,sprintf@exp
  1566  01A8' C007' F00C'        	movff	?___awdiv+1,sprintf@exp+1
  1567                           
  1568                           ;doprnt.c: 841: if(exp < 0)
  1569  01AC' 0100               	movlb	0	; () banked
  1570  01AE' AF00'              	btfss	(sprintf@exp+1)& (0+255),7,b
  1571  01B0' D003               	goto	l313
  1572                           
  1573                           ; BSR set to: 0
  1574                           ;doprnt.c: 842: exp--;
  1575  01B2' 0700'              	decf	sprintf@exp& (0+255),f,b
  1576  01B4' A0D8               	btfss	status,0,c
  1577  01B6' 0700'              	decf	(sprintf@exp+1)& (0+255),f,b
  1578  01B8'                    l313:
  1579                           
  1580                           ; BSR set to: 0
  1581                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1582                           
  1583                           ; BSR set to: 0
  1584  01B8' 5100'              	movf	sprintf@exp& (0+255),w,b
  1585  01BA' 0800               	sublw	0
  1586  01BC' EC00' F000'        	call	_scale
  1587  01C0' C023' F00D'        	movff	?_scale,sprintf@tmpval
  1588  01C4' C024' F00E'        	movff	?_scale+1,sprintf@tmpval+1
  1589  01C8' C025' F00F'        	movff	?_scale+2,sprintf@tmpval+2
  1590                           
  1591                           ;doprnt.c: 847: tmpval.integ *= fval;
  1592  01CC' C00D' F014'        	movff	sprintf@tmpval,___ftmul@f1
  1593  01D0' C00E' F015'        	movff	sprintf@tmpval+1,___ftmul@f1+1
  1594  01D4' C00F' F016'        	movff	sprintf@tmpval+2,___ftmul@f1+2
  1595  01D8' C013' F017'        	movff	sprintf@fval,___ftmul@f2
  1596  01DC' C014' F018'        	movff	sprintf@fval+1,___ftmul@f2+1
  1597  01E0' C015' F019'        	movff	sprintf@fval+2,___ftmul@f2+2
  1598  01E4' EC00' F000'        	call	___ftmul	;wreg free
  1599  01E8' C014' F00D'        	movff	?___ftmul,sprintf@tmpval
  1600  01EC' C015' F00E'        	movff	?___ftmul+1,sprintf@tmpval+1
  1601  01F0' C016' F00F'        	movff	?___ftmul+2,sprintf@tmpval+2
  1602                           
  1603                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1604  01F4' C00D' F000'        	movff	sprintf@tmpval,___ftge@ff1
  1605  01F8' C00E' F001'        	movff	sprintf@tmpval+1,___ftge@ff1+1
  1606  01FC' C00F' F002'        	movff	sprintf@tmpval+2,___ftge@ff1+2
  1607  0200' 0E00               	movlw	0
  1608  0202' 6E03'              	movwf	___ftge@ff2,c
  1609  0204' 0E80               	movlw	128
  1610  0206' 6E04'              	movwf	___ftge@ff2+1,c
  1611  0208' 0E3F               	movlw	63
  1612  020A' 6E05'              	movwf	___ftge@ff2+2,c
  1613  020C' EC00' F000'        	call	___ftge	;wreg free
  1614  0210' B0D8               	btfsc	status,0,c
  1615  0212' D005               	goto	l314
  1616                           
  1617                           ;doprnt.c: 849: exp--;
  1618  0214' 0100               	movlb	0	; () banked
  1619  0216' 0700'              	decf	sprintf@exp& (0+255),f,b
  1620  0218' A0D8               	btfss	status,0,c
  1621  021A' 0700'              	decf	(sprintf@exp+1)& (0+255),f,b
  1622  021C' D013               	goto	l316
  1623  021E'                    l314:
  1624                           
  1625                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1626                           
  1627                           ; BSR set to: 0
  1628  021E' C00D' F000'        	movff	sprintf@tmpval,___ftge@ff1
  1629  0222' C00E' F001'        	movff	sprintf@tmpval+1,___ftge@ff1+1
  1630  0226' C00F' F002'        	movff	sprintf@tmpval+2,___ftge@ff1+2
  1631  022A' 0E00               	movlw	0
  1632  022C' 6E03'              	movwf	___ftge@ff2,c
  1633  022E' 0E20               	movlw	32
  1634  0230' 6E04'              	movwf	___ftge@ff2+1,c
  1635  0232' 0E41               	movlw	65
  1636  0234' 6E05'              	movwf	___ftge@ff2+2,c
  1637  0236' EC00' F000'        	call	___ftge	;wreg free
  1638  023A' A0D8               	btfss	status,0,c
  1639  023C' D003               	goto	l316
  1640                           
  1641                           ;doprnt.c: 851: exp++;
  1642  023E' 0100               	movlb	0	; () banked
  1643  0240' 4B00'              	infsnz	sprintf@exp& (0+255),f,b
  1644  0242' 2B00'              	incf	(sprintf@exp+1)& (0+255),f,b
  1645  0244'                    l316:
  1646                           
  1647                           ;doprnt.c: 852: }
  1648                           ;doprnt.c: 1112: if(prec <= 12)
  1649                           
  1650                           ; BSR set to: 0
  1651                           
  1652                           ; BSR set to: 0
  1653                           
  1654                           ; BSR set to: 0
  1655  0244' 0100               	movlb	0	; () banked
  1656  0246' BF00'              	btfsc	(sprintf@prec+1)& (0+255),7,b
  1657  0248' D006               	goto	u2840
  1658  024A' 5100'              	movf	(sprintf@prec+1)& (0+255),w,b
  1659  024C' E11B               	bnz	l2946
  1660  024E' 0E0D               	movlw	13
  1661  0250' 5D00'              	subwf	sprintf@prec& (0+255),w,b
  1662  0252' B0D8               	btfsc	status,0,c
  1663  0254' D017               	goto	l317
  1664  0256'                    u2840:
  1665                           
  1666                           ; BSR set to: 0
  1667                           ;doprnt.c: 1113: fval += fround(prec);
  1668  0256' C013' F02D'        	movff	sprintf@fval,___ftadd@f1
  1669  025A' C014' F02E'        	movff	sprintf@fval+1,___ftadd@f1+1
  1670  025E' C015' F02F'        	movff	sprintf@fval+2,___ftadd@f1+2
  1671  0262' 5100'              	movf	sprintf@prec& (0+255),w,b
  1672  0264' EC00' F000'        	call	_fround
  1673  0268' C023' F030'        	movff	?_fround,___ftadd@f2
  1674  026C' C024' F031'        	movff	?_fround+1,___ftadd@f2+1
  1675  0270' C025' F032'        	movff	?_fround+2,___ftadd@f2+2
  1676  0274' EC00' F000'        	call	___ftadd	;wreg free
  1677  0278' C02D' F013'        	movff	?___ftadd,sprintf@fval
  1678  027C' C02E' F014'        	movff	?___ftadd+1,sprintf@fval+1
  1679  0280' C02F' F015'        	movff	?___ftadd+2,sprintf@fval+2
  1680  0284'                    l317:
  1681  0284'                    l2946:
  1682                           
  1683                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1684  0284' 0100               	movlb	0	; () banked
  1685  0286' BF00'              	btfsc	(sprintf@exp+1)& (0+255),7,b
  1686  0288' D006               	goto	u2850
  1687  028A' 5100'              	movf	(sprintf@exp+1)& (0+255),w,b
  1688  028C' E120               	bnz	l2954
  1689  028E' 0E0A               	movlw	10
  1690  0290' 5D00'              	subwf	sprintf@exp& (0+255),w,b
  1691  0292' B0D8               	btfsc	status,0,c
  1692  0294' D01C               	goto	u2880
  1693  0296'                    u2850:
  1694                           
  1695                           ; BSR set to: 0
  1696  0296' 5100'              	movf	sprintf@fval& (0+255),w,b
  1697  0298' 1100'              	iorwf	(sprintf@fval+1)& (0+255),w,b
  1698  029A' 1100'              	iorwf	(sprintf@fval+2)& (0+255),w,b
  1699  029C' B4D8               	btfsc	status,2,c
  1700  029E' D056               	goto	l318
  1701                           
  1702                           ; BSR set to: 0
  1703  02A0' C013' F02A'        	movff	sprintf@fval,___fttol@f1
  1704  02A4' C014' F02B'        	movff	sprintf@fval+1,___fttol@f1+1
  1705  02A8' C015' F02C'        	movff	sprintf@fval+2,___fttol@f1+2
  1706  02AC' EC00' F000'        	call	___fttol	;wreg free
  1707  02B0' 502A'              	movf	?___fttol,w,c
  1708  02B2' 102B'              	iorwf	?___fttol+1,w,c
  1709  02B4' 102C'              	iorwf	?___fttol+2,w,c
  1710  02B6' 102D'              	iorwf	?___fttol+3,w,c
  1711  02B8' A4D8               	btfss	status,2,c
  1712  02BA' D048               	goto	l318
  1713  02BC' 0100               	movlb	0	; () banked
  1714  02BE' BF00'              	btfsc	(sprintf@exp+1)& (0+255),7,b
  1715  02C0' D045               	goto	l318
  1716  02C2' 5100'              	movf	(sprintf@exp+1)& (0+255),w,b
  1717  02C4' E104               	bnz	l2954
  1718  02C6' 0E02               	movlw	2
  1719  02C8' 5D00'              	subwf	sprintf@exp& (0+255),w,b
  1720  02CA' A0D8               	btfss	status,0,c
  1721  02CC' D03F               	goto	l318
  1722  02CE'                    u2880:
  1723  02CE'                    l2954:
  1724                           
  1725                           ; BSR set to: 0
  1726                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  1727  02CE' C00D' F000'        	movff	sprintf@tmpval,___ftge@ff1
  1728  02D2' C00E' F001'        	movff	sprintf@tmpval+1,___ftge@ff1+1
  1729  02D6' C00F' F002'        	movff	sprintf@tmpval+2,___ftge@ff1+2
  1730  02DA' 0E70               	movlw	112
  1731  02DC' 6E03'              	movwf	___ftge@ff2,c
  1732  02DE' 0E89               	movlw	137
  1733  02E0' 6E04'              	movwf	___ftge@ff2+1,c
  1734  02E2' 0E40               	movlw	64
  1735  02E4' 6E05'              	movwf	___ftge@ff2+2,c
  1736  02E6' EC00' F000'        	call	___ftge	;wreg free
  1737  02EA' B0D8               	btfsc	status,0,c
  1738  02EC' D003               	goto	l321
  1739                           
  1740                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1741  02EE' 0100               	movlb	0	; () banked
  1742  02F0' 0EF7               	movlw	247
  1743  02F2' D002               	goto	L1
  1744  02F4'                    l321:
  1745                           
  1746                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1747                           
  1748                           ; BSR set to: 0
  1749  02F4' 0100               	movlb	0	; () banked
  1750  02F6' 0EF8               	movlw	248
  1751  02F8'                    L1:
  1752  02F8' 2700'              	addwf	sprintf@exp& (0+255),f,b
  1753  02FA' 0EFF               	movlw	255
  1754  02FC' 2300'              	addwfc	(sprintf@exp+1)& (0+255),f,b
  1755                           
  1756                           ; BSR set to: 0
  1757                           ;doprnt.c: 1124: }
  1758                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  1759                           
  1760                           ; BSR set to: 0
  1761  02FE' 5100'              	movf	sprintf@exp& (0+255),w,b
  1762  0300' EC00' F000'        	call	_scale
  1763  0304' C023' F00D'        	movff	?_scale,sprintf@tmpval
  1764  0308' C024' F00E'        	movff	?_scale+1,sprintf@tmpval+1
  1765  030C' C025' F00F'        	movff	?_scale+2,sprintf@tmpval+2
  1766                           
  1767                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  1768  0310' C013' F000'        	movff	sprintf@fval,__tdiv_to_l_@f1
  1769  0314' C014' F001'        	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  1770  0318' C015' F002'        	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  1771  031C' C00D' F003'        	movff	sprintf@tmpval,__tdiv_to_l_@f2
  1772  0320' C00E' F004'        	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  1773  0324' C00F' F005'        	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  1774  0328' EC00' F000'        	call	__tdiv_to_l_	;wreg free
  1775  032C' C000' F007'        	movff	?__tdiv_to_l_,sprintf@val
  1776  0330' C001' F008'        	movff	?__tdiv_to_l_+1,sprintf@val+1
  1777  0334' C002' F009'        	movff	?__tdiv_to_l_+2,sprintf@val+2
  1778  0338' C003' F00A'        	movff	?__tdiv_to_l_+3,sprintf@val+3
  1779                           
  1780                           ;doprnt.c: 1129: fval = 0.0;
  1781  033C' 0E00               	movlw	0
  1782  033E' 0100               	movlb	0	; () banked
  1783  0340' 6F00'              	movwf	sprintf@fval& (0+255),b
  1784  0342' 0E00               	movlw	0
  1785  0344' 6F00'              	movwf	(sprintf@fval+1)& (0+255),b
  1786  0346' 0E00               	movlw	0
  1787  0348' 6F00'              	movwf	(sprintf@fval+2)& (0+255),b
  1788                           
  1789                           ;doprnt.c: 1130: } else {
  1790  034A' D033               	goto	l327
  1791  034C'                    l318:
  1792                           
  1793                           ;doprnt.c: 1131: val = (unsigned long)fval;
  1794                           
  1795                           ; BSR set to: 0
  1796  034C' C013' F02A'        	movff	sprintf@fval,___fttol@f1
  1797  0350' C014' F02B'        	movff	sprintf@fval+1,___fttol@f1+1
  1798  0354' C015' F02C'        	movff	sprintf@fval+2,___fttol@f1+2
  1799  0358' EC00' F000'        	call	___fttol	;wreg free
  1800  035C' C02A' F007'        	movff	?___fttol,sprintf@val
  1801  0360' C02B' F008'        	movff	?___fttol+1,sprintf@val+1
  1802  0364' C02C' F009'        	movff	?___fttol+2,sprintf@val+2
  1803  0368' C02D' F00A'        	movff	?___fttol+3,sprintf@val+3
  1804                           
  1805                           ;doprnt.c: 1132: fval -= (double)val;
  1806  036C' C013' F039'        	movff	sprintf@fval,___ftsub@f1
  1807  0370' C014' F03A'        	movff	sprintf@fval+1,___ftsub@f1+1
  1808  0374' C015' F03B'        	movff	sprintf@fval+2,___ftsub@f1+2
  1809  0378' C007' F008'        	movff	sprintf@val,___lltoft@c
  1810  037C' C008' F009'        	movff	sprintf@val+1,___lltoft@c+1
  1811  0380' C009' F00A'        	movff	sprintf@val+2,___lltoft@c+2
  1812  0384' C00A' F00B'        	movff	sprintf@val+3,___lltoft@c+3
  1813  0388' EC00' F000'        	call	___lltoft	;wreg free
  1814  038C' C008' F03C'        	movff	?___lltoft,___ftsub@f2
  1815  0390' C009' F03D'        	movff	?___lltoft+1,___ftsub@f2+1
  1816  0394' C00A' F03E'        	movff	?___lltoft+2,___ftsub@f2+2
  1817  0398' EC00' F000'        	call	___ftsub	;wreg free
  1818  039C' C039' F013'        	movff	?___ftsub,sprintf@fval
  1819  03A0' C03A' F014'        	movff	?___ftsub+1,sprintf@fval+1
  1820  03A4' C03B' F015'        	movff	?___ftsub+2,sprintf@fval+2
  1821                           
  1822                           ;doprnt.c: 1133: exp = 0;
  1823  03A8' 0E00               	movlw	0
  1824  03AA' 0100               	movlb	0	; () banked
  1825  03AC' 6F00'              	movwf	(sprintf@exp+1)& (0+255),b
  1826  03AE' 0E00               	movlw	0
  1827  03B0' 6F00'              	movwf	sprintf@exp& (0+255),b
  1828  03B2'                    l327:
  1829                           
  1830                           ; BSR set to: 0
  1831                           ;doprnt.c: 1134: }
  1832                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  1833                           
  1834                           ; BSR set to: 0
  1835  03B2' 0E01               	movlw	1
  1836  03B4' 6F00'              	movwf	sprintf@c& (0+255),b
  1837  03B6'                    l2974:
  1838                           
  1839                           ; BSR set to: 0
  1840  03B6' 0E0A               	movlw	10
  1841  03B8' 1900'              	xorwf	sprintf@c& (0+255),w,b
  1842  03BA' B4D8               	btfsc	status,2,c
  1843  03BC' D018               	goto	u2920
  1844                           
  1845                           ; BSR set to: 0
  1846                           ;doprnt.c: 1137: if(val < dpowers[c])
  1847                           
  1848                           ; BSR set to: 0
  1849                           
  1850                           ; BSR set to: 0
  1851  03BE' 5100'              	movf	sprintf@c& (0+255),w,b
  1852  03C0' 0D04               	mullw	4
  1853  03C2' 0E00'              	movlw	low _dpowers
  1854  03C4' 24F3               	addwf	prodl,w,c
  1855  03C6' 6EF6               	movwf	tblptrl,c
  1856  03C8' 0E00'              	movlw	high _dpowers
  1857  03CA' 20F4               	addwfc	prodh,w,c
  1858  03CC' 6EF7               	movwf	tblptrh,c
  1859  03CE'                    	if	0	;There are less than 3 active tblptr bytes
  1860  03CE'                    	endif
  1861  03CE' 0009               	tblrd		*+
  1862  03D0' 50F5               	movf	tablat,w,c
  1863  03D2' 5D00'              	subwf	sprintf@val& (0+255),w,b
  1864  03D4' 0009               	tblrd		*+
  1865  03D6' 50F5               	movf	tablat,w,c
  1866  03D8' 5900'              	subwfb	(sprintf@val+1)& (0+255),w,b
  1867  03DA' 0009               	tblrd		*+
  1868  03DC' 50F5               	movf	tablat,w,c
  1869  03DE' 5900'              	subwfb	(sprintf@val+2)& (0+255),w,b
  1870  03E0' 0009               	tblrd		*+
  1871  03E2' 50F5               	movf	tablat,w,c
  1872  03E4' 5900'              	subwfb	(sprintf@val+3)& (0+255),w,b
  1873  03E6' A0D8               	btfss	status,0,c
  1874  03E8' D002               	goto	u2920
  1875                           
  1876                           ; BSR set to: 0
  1877                           
  1878                           ; BSR set to: 0
  1879                           
  1880                           ; BSR set to: 0
  1881                           ;doprnt.c: 1138: break;
  1882  03EA' 2B00'              	incf	sprintf@c& (0+255),f,b
  1883  03EC' D7E4               	goto	l2974
  1884  03EE'                    u2920:
  1885                           
  1886                           ; BSR set to: 0
  1887                           ;doprnt.c: 1175: {
  1888                           ;doprnt.c: 1188: if(flag & 0x03)
  1889                           
  1890                           ; BSR set to: 0
  1891  03EE' 0E03               	movlw	3
  1892  03F0' 1500'              	andwf	sprintf@flag& (0+255),w,b
  1893  03F2' 6E00'              	movwf	??_sprintf& (0+255),c
  1894  03F4' 0E00               	movlw	0
  1895  03F6' 1500'              	andwf	(sprintf@flag+1)& (0+255),w,b
  1896  03F8' 6E00'              	movwf	(??_sprintf+1)& (0+255),c
  1897  03FA' 5046'              	movf	??_sprintf,w,c
  1898  03FC' 1047'              	iorwf	??_sprintf+1,w,c
  1899  03FE' B4D8               	btfsc	status,2,c
  1900  0400' D050               	goto	l332
  1901                           
  1902                           ; BSR set to: 0
  1903                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  1904  0402' C03F' FFD9         	movff	sprintf@sp,fsr2l
  1905  0406' C040' FFDA         	movff	sprintf@sp+1,fsr2h
  1906  040A' 0E2D               	movlw	45
  1907  040C' D047               	goto	L2
  1908  040E'                    
  1909                           ; BSR set to: 0
  1910                           ;doprnt.c: 1200: {
  1911                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  1912                           
  1913                           ; BSR set to: 0
  1914  040E' C007' F000'        	movff	sprintf@val,___lldiv@dividend
  1915  0412' C008' F001'        	movff	sprintf@val+1,___lldiv@dividend+1
  1916  0416' C009' F002'        	movff	sprintf@val+2,___lldiv@dividend+2
  1917  041A' C00A' F003'        	movff	sprintf@val+3,___lldiv@dividend+3
  1918  041E' 5100'              	movf	sprintf@c& (0+255),w,b
  1919  0420' 0D04               	mullw	4
  1920  0422' 0E00'              	movlw	low _dpowers
  1921  0424' 24F3               	addwf	prodl,w,c
  1922  0426' 6EF6               	movwf	tblptrl,c
  1923  0428' 0E00'              	movlw	high _dpowers
  1924  042A' 20F4               	addwfc	prodh,w,c
  1925  042C' 6EF7               	movwf	tblptrh,c
  1926  042E'                    	if	0	;There are less than 3 active tblptr bytes
  1927  042E'                    	endif
  1928  042E' 0009               	tblrd		*+
  1929  0430' CFF5 F004'         	movff	tablat,___lldiv@divisor
  1930  0434' 0009               	tblrd		*+
  1931  0436' CFF5 F005'         	movff	tablat,___lldiv@divisor+1
  1932  043A' 0009               	tblrd		*+
  1933  043C' CFF5 F006'         	movff	tablat,___lldiv@divisor+2
  1934  0440' 000A               	tblrd		*-
  1935  0442' CFF5 F007'         	movff	tablat,___lldiv@divisor+3
  1936  0446' EC00' F000'        	call	___lldiv	;wreg free
  1937  044A' C000' F00D'        	movff	?___lldiv,sprintf@tmpval
  1938  044E' C001' F00E'        	movff	?___lldiv+1,sprintf@tmpval+1
  1939  0452' C002' F00F'        	movff	?___lldiv+2,sprintf@tmpval+2
  1940  0456' C003' F010'        	movff	?___lldiv+3,sprintf@tmpval+3
  1941                           
  1942                           ;doprnt.c: 1202: tmpval.vd %= 10;
  1943  045A' C00D' F000'        	movff	sprintf@tmpval,___llmod@dividend
  1944  045E' C00E' F001'        	movff	sprintf@tmpval+1,___llmod@dividend+1
  1945  0462' C00F' F002'        	movff	sprintf@tmpval+2,___llmod@dividend+2
  1946  0466' C010' F003'        	movff	sprintf@tmpval+3,___llmod@dividend+3
  1947  046A' 0E0A               	movlw	10
  1948  046C' 6E04'              	movwf	___llmod@divisor,c
  1949  046E' 0E00               	movlw	0
  1950  0470' 6E05'              	movwf	___llmod@divisor+1,c
  1951  0472' 0E00               	movlw	0
  1952  0474' 6E06'              	movwf	___llmod@divisor+2,c
  1953  0476' 0E00               	movlw	0
  1954  0478' 6E07'              	movwf	___llmod@divisor+3,c
  1955  047A' EC00' F000'        	call	___llmod	;wreg free
  1956  047E' C000' F00D'        	movff	?___llmod,sprintf@tmpval
  1957  0482' C001' F00E'        	movff	?___llmod+1,sprintf@tmpval+1
  1958  0486' C002' F00F'        	movff	?___llmod+2,sprintf@tmpval+2
  1959  048A' C003' F010'        	movff	?___llmod+3,sprintf@tmpval+3
  1960                           
  1961                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  1962  048E' 0100               	movlb	0	; () banked
  1963  0490' 5100'              	movf	sprintf@tmpval& (0+255),w,b
  1964  0492' 0F30               	addlw	48
  1965  0494' C03F' FFD9         	movff	sprintf@sp,fsr2l
  1966  0498' C040' FFDA         	movff	sprintf@sp+1,fsr2h
  1967  049C'                    L2:
  1968  049C' 6EDF               	movwf	indf2,c
  1969                           
  1970                           ; BSR set to: 0
  1971  049E' 4A3F'              	infsnz	sprintf@sp,f,c
  1972  04A0' 2A40'              	incf	sprintf@sp+1,f,c
  1973  04A2'                    l332:
  1974                           
  1975                           ; BSR set to: 0
  1976                           
  1977                           ; BSR set to: 0
  1978  04A2' 0700'              	decf	sprintf@c& (0+255),f,b
  1979  04A4' 2900'              	incf	sprintf@c& (0+255),w,b
  1980  04A6' B4D8               	btfsc	status,2,c
  1981  04A8' D00C               	goto	l335
  1982  04AA' D7B1               	goto	l333
  1983  04AC'                    l3002:
  1984                           
  1985                           ; BSR set to: 0
  1986                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  1987  04AC' C03F' FFD9         	movff	sprintf@sp,fsr2l
  1988  04B0' C040' FFDA         	movff	sprintf@sp+1,fsr2h
  1989  04B4' 0E30               	movlw	48
  1990  04B6' 6EDF               	movwf	indf2,c
  1991                           
  1992                           ; BSR set to: 0
  1993  04B8' 4A3F'              	infsnz	sprintf@sp,f,c
  1994  04BA' 2A40'              	incf	sprintf@sp+1,f,c
  1995                           
  1996                           ; BSR set to: 0
  1997                           ;doprnt.c: 1209: exp--;
  1998  04BC' 0700'              	decf	sprintf@exp& (0+255),f,b
  1999  04BE' A0D8               	btfss	status,0,c
  2000  04C0' 0700'              	decf	(sprintf@exp+1)& (0+255),f,b
  2001  04C2'                    l335:
  2002                           
  2003                           ; BSR set to: 0
  2004                           
  2005                           ; BSR set to: 0
  2006  04C2' BF00'              	btfsc	(sprintf@exp+1)& (0+255),7,b
  2007  04C4' D005               	goto	u2950
  2008  04C6' 5100'              	movf	(sprintf@exp+1)& (0+255),w,b
  2009  04C8' E1F1               	bnz	l3002
  2010  04CA' 0500'              	decf	sprintf@exp& (0+255),w,b
  2011  04CC' B0D8               	btfsc	status,0,c
  2012  04CE' D7EE               	goto	l336
  2013  04D0'                    u2950:
  2014                           
  2015                           ; BSR set to: 0
  2016                           ;doprnt.c: 1210: }
  2017                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2018                           
  2019                           ; BSR set to: 0
  2020  04D0' BF00'              	btfsc	(sprintf@prec+1)& (0+255),7,b
  2021  04D2' D009               	goto	l338
  2022  04D4' 5100'              	movf	(sprintf@prec+1)& (0+255),w,b
  2023  04D6' E104               	bnz	u2960
  2024  04D8' 0E09               	movlw	9
  2025  04DA' 5D00'              	subwf	sprintf@prec& (0+255),w,b
  2026  04DC' A0D8               	btfss	status,0,c
  2027  04DE' D003               	goto	l338
  2028  04E0'                    u2960:
  2029                           
  2030                           ; BSR set to: 0
  2031                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2032  04E0' 0E08               	movlw	8
  2033  04E2' 6F00'              	movwf	sprintf@c& (0+255),b
  2034  04E4' D002               	goto	l339
  2035  04E6'                    l338:
  2036                           
  2037                           ; BSR set to: 0
  2038                           ;doprnt.c: 1213: else
  2039                           ;doprnt.c: 1214: c = prec;
  2040  04E6' C011' F016'        	movff	sprintf@prec,sprintf@c
  2041  04EA'                    l339:
  2042                           
  2043                           ; BSR set to: 0
  2044                           ;doprnt.c: 1215: prec -= c;
  2045                           
  2046                           ; BSR set to: 0
  2047  04EA' 5100'              	movf	sprintf@c& (0+255),w,b
  2048  04EC' 5F00'              	subwf	sprintf@prec& (0+255),f,b
  2049  04EE' 0E00               	movlw	0
  2050  04F0' BF00'              	btfsc	sprintf@c& (0+255),7,b
  2051  04F2' 0EFF               	movlw	255
  2052  04F4' 5B00'              	subwfb	(sprintf@prec+1)& (0+255),f,b
  2053                           
  2054                           ; BSR set to: 0
  2055                           ;doprnt.c: 1219: if(c)
  2056  04F6' 5100'              	movf	sprintf@c& (0+255),w,b
  2057  04F8' B4D8               	btfsc	status,2,c
  2058  04FA' D008               	goto	l340
  2059                           
  2060                           ; BSR set to: 0
  2061                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  2062  04FC' C03F' FFD9         	movff	sprintf@sp,fsr2l
  2063  0500' C040' FFDA         	movff	sprintf@sp+1,fsr2h
  2064  0504' 0E2E               	movlw	46
  2065  0506' 6EDF               	movwf	indf2,c
  2066                           
  2067                           ; BSR set to: 0
  2068  0508' 4A3F'              	infsnz	sprintf@sp,f,c
  2069  050A' 2A40'              	incf	sprintf@sp+1,f,c
  2070  050C'                    l340:
  2071                           
  2072                           ; BSR set to: 0
  2073                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2074                           
  2075                           ; BSR set to: 0
  2076  050C' 5100'              	movf	sprintf@c& (0+255),w,b
  2077  050E' EC00' F000'        	call	_scale
  2078  0512' C023' F000'        	movff	?_scale,_sprintf$1497
  2079  0516' C024' F001'        	movff	?_scale+1,_sprintf$1497+1
  2080  051A' C025' F002'        	movff	?_scale+2,_sprintf$1497+2
  2081                           
  2082                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2083  051E' C013' F017'        	movff	sprintf@fval,___ftmul@f2
  2084  0522' C014' F018'        	movff	sprintf@fval+1,___ftmul@f2+1
  2085  0526' C015' F019'        	movff	sprintf@fval+2,___ftmul@f2+2
  2086  052A' C000' F014'        	movff	_sprintf$1497,___ftmul@f1
  2087  052E' C001' F015'        	movff	_sprintf$1497+1,___ftmul@f1+1
  2088  0532' C002' F016'        	movff	_sprintf$1497+2,___ftmul@f1+2
  2089  0536' EC00' F000'        	call	___ftmul	;wreg free
  2090  053A' C014' F02A'        	movff	?___ftmul,___fttol@f1
  2091  053E' C015' F02B'        	movff	?___ftmul+1,___fttol@f1+1
  2092  0542' C016' F02C'        	movff	?___ftmul+2,___fttol@f1+2
  2093  0546' EC00' F000'        	call	___fttol	;wreg free
  2094  054A' C02A' F007'        	movff	?___fttol,sprintf@val
  2095  054E' C02B' F008'        	movff	?___fttol+1,sprintf@val+1
  2096  0552' C02C' F009'        	movff	?___fttol+2,sprintf@val+2
  2097  0556' C02D' F00A'        	movff	?___fttol+3,sprintf@val+3
  2098                           
  2099                           ;doprnt.c: 1228: while(c--) {
  2100  055A' D071               	goto	l341
  2101  055C'                    
  2102                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2103  055C' C007' F000'        	movff	sprintf@val,___lldiv@dividend
  2104  0560' C008' F001'        	movff	sprintf@val+1,___lldiv@dividend+1
  2105  0564' C009' F002'        	movff	sprintf@val+2,___lldiv@dividend+2
  2106  0568' C00A' F003'        	movff	sprintf@val+3,___lldiv@dividend+3
  2107  056C' 0100               	movlb	0	; () banked
  2108  056E' 5100'              	movf	sprintf@c& (0+255),w,b
  2109  0570' 0D04               	mullw	4
  2110  0572' 0E00'              	movlw	low _dpowers
  2111  0574' 24F3               	addwf	prodl,w,c
  2112  0576' 6EF6               	movwf	tblptrl,c
  2113  0578' 0E00'              	movlw	high _dpowers
  2114  057A' 20F4               	addwfc	prodh,w,c
  2115  057C' 6EF7               	movwf	tblptrh,c
  2116  057E'                    	if	0	;There are less than 3 active tblptr bytes
  2117  057E'                    	endif
  2118  057E' 0009               	tblrd		*+
  2119  0580' CFF5 F004'         	movff	tablat,___lldiv@divisor
  2120  0584' 0009               	tblrd		*+
  2121  0586' CFF5 F005'         	movff	tablat,___lldiv@divisor+1
  2122  058A' 0009               	tblrd		*+
  2123  058C' CFF5 F006'         	movff	tablat,___lldiv@divisor+2
  2124  0590' 000A               	tblrd		*-
  2125  0592' CFF5 F007'         	movff	tablat,___lldiv@divisor+3
  2126  0596' EC00' F000'        	call	___lldiv	;wreg free
  2127  059A' C000' F00D'        	movff	?___lldiv,sprintf@tmpval
  2128  059E' C001' F00E'        	movff	?___lldiv+1,sprintf@tmpval+1
  2129  05A2' C002' F00F'        	movff	?___lldiv+2,sprintf@tmpval+2
  2130  05A6' C003' F010'        	movff	?___lldiv+3,sprintf@tmpval+3
  2131                           
  2132                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2133  05AA' C00D' F000'        	movff	sprintf@tmpval,___llmod@dividend
  2134  05AE' C00E' F001'        	movff	sprintf@tmpval+1,___llmod@dividend+1
  2135  05B2' C00F' F002'        	movff	sprintf@tmpval+2,___llmod@dividend+2
  2136  05B6' C010' F003'        	movff	sprintf@tmpval+3,___llmod@dividend+3
  2137  05BA' 0E0A               	movlw	10
  2138  05BC' 6E04'              	movwf	___llmod@divisor,c
  2139  05BE' 0E00               	movlw	0
  2140  05C0' 6E05'              	movwf	___llmod@divisor+1,c
  2141  05C2' 0E00               	movlw	0
  2142  05C4' 6E06'              	movwf	___llmod@divisor+2,c
  2143  05C6' 0E00               	movlw	0
  2144  05C8' 6E07'              	movwf	___llmod@divisor+3,c
  2145  05CA' EC00' F000'        	call	___llmod	;wreg free
  2146  05CE' C000' F00D'        	movff	?___llmod,sprintf@tmpval
  2147  05D2' C001' F00E'        	movff	?___llmod+1,sprintf@tmpval+1
  2148  05D6' C002' F00F'        	movff	?___llmod+2,sprintf@tmpval+2
  2149  05DA' C003' F010'        	movff	?___llmod+3,sprintf@tmpval+3
  2150                           
  2151                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  2152  05DE' 0100               	movlb	0	; () banked
  2153  05E0' 5100'              	movf	sprintf@tmpval& (0+255),w,b
  2154  05E2' 0F30               	addlw	48
  2155  05E4' C03F' FFD9         	movff	sprintf@sp,fsr2l
  2156  05E8' C040' FFDA         	movff	sprintf@sp+1,fsr2h
  2157  05EC' 6EDF               	movwf	indf2,c
  2158                           
  2159                           ; BSR set to: 0
  2160  05EE' 4A3F'              	infsnz	sprintf@sp,f,c
  2161  05F0' 2A40'              	incf	sprintf@sp+1,f,c
  2162                           
  2163                           ; BSR set to: 0
  2164                           ;doprnt.c: 1232: val %= dpowers[c];
  2165  05F2' C007' F000'        	movff	sprintf@val,___llmod@dividend
  2166  05F6' C008' F001'        	movff	sprintf@val+1,___llmod@dividend+1
  2167  05FA' C009' F002'        	movff	sprintf@val+2,___llmod@dividend+2
  2168  05FE' C00A' F003'        	movff	sprintf@val+3,___llmod@dividend+3
  2169  0602' 5100'              	movf	sprintf@c& (0+255),w,b
  2170  0604' 0D04               	mullw	4
  2171  0606' 0E00'              	movlw	low _dpowers
  2172  0608' 24F3               	addwf	prodl,w,c
  2173  060A' 6EF6               	movwf	tblptrl,c
  2174  060C' 0E00'              	movlw	high _dpowers
  2175  060E' 20F4               	addwfc	prodh,w,c
  2176  0610' 6EF7               	movwf	tblptrh,c
  2177  0612'                    	if	0	;There are less than 3 active tblptr bytes
  2178  0612'                    	endif
  2179  0612' 0009               	tblrd		*+
  2180  0614' CFF5 F004'         	movff	tablat,___llmod@divisor
  2181  0618' 0009               	tblrd		*+
  2182  061A' CFF5 F005'         	movff	tablat,___llmod@divisor+1
  2183  061E' 0009               	tblrd		*+
  2184  0620' CFF5 F006'         	movff	tablat,___llmod@divisor+2
  2185  0624' 000A               	tblrd		*-
  2186  0626' CFF5 F007'         	movff	tablat,___llmod@divisor+3
  2187  062A' EC00' F000'        	call	___llmod	;wreg free
  2188  062E' C000' F007'        	movff	?___llmod,sprintf@val
  2189  0632' C001' F008'        	movff	?___llmod+1,sprintf@val+1
  2190  0636' C002' F009'        	movff	?___llmod+2,sprintf@val+2
  2191  063A' C003' F00A'        	movff	?___llmod+3,sprintf@val+3
  2192  063E'                    l341:
  2193  063E' 0100               	movlb	0	; () banked
  2194  0640' 0700'              	decf	sprintf@c& (0+255),f,b
  2195  0642' 2900'              	incf	sprintf@c& (0+255),w,b
  2196  0644' B4D8               	btfsc	status,2,c
  2197  0646' D00C               	goto	l344
  2198  0648' D789               	goto	l342
  2199  064A'                    
  2200                           ; BSR set to: 0
  2201                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  2202                           
  2203                           ; BSR set to: 0
  2204  064A' C03F' FFD9         	movff	sprintf@sp,fsr2l
  2205  064E' C040' FFDA         	movff	sprintf@sp+1,fsr2h
  2206  0652' 0E30               	movlw	48
  2207  0654' 6EDF               	movwf	indf2,c
  2208                           
  2209                           ; BSR set to: 0
  2210  0656' 4A3F'              	infsnz	sprintf@sp,f,c
  2211  0658' 2A40'              	incf	sprintf@sp+1,f,c
  2212                           
  2213                           ; BSR set to: 0
  2214                           ;doprnt.c: 1237: prec--;
  2215  065A' 0700'              	decf	sprintf@prec& (0+255),f,b
  2216  065C' A0D8               	btfss	status,0,c
  2217  065E' 0700'              	decf	(sprintf@prec+1)& (0+255),f,b
  2218  0660'                    l344:
  2219                           
  2220                           ; BSR set to: 0
  2221                           
  2222                           ; BSR set to: 0
  2223  0660' 5100'              	movf	sprintf@prec& (0+255),w,b
  2224  0662' 1100'              	iorwf	(sprintf@prec+1)& (0+255),w,b
  2225  0664' B4D8               	btfsc	status,2,c
  2226  0666' D03D               	goto	l351
  2227  0668' D7F0               	goto	l345
  2228  066A'                    l309:
  2229                           
  2230                           ; BSR set to: 0
  2231                           ;doprnt.c: 1246: }
  2232                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2233                           
  2234                           ; BSR set to: 0
  2235  066A' 5100'              	movf	sprintf@prec& (0+255),w,b
  2236  066C' 1100'              	iorwf	(sprintf@prec+1)& (0+255),w,b
  2237  066E' A4D8               	btfss	status,2,c
  2238  0670' D008               	goto	l347
  2239                           
  2240                           ; BSR set to: 0
  2241  0672' 5100'              	movf	sprintf@val& (0+255),w,b
  2242  0674' 1100'              	iorwf	(sprintf@val+1)& (0+255),w,b
  2243  0676' 1100'              	iorwf	(sprintf@val+2)& (0+255),w,b
  2244  0678' 1100'              	iorwf	(sprintf@val+3)& (0+255),w,b
  2245  067A' A4D8               	btfss	status,2,c
  2246  067C' D002               	goto	l347
  2247                           
  2248                           ; BSR set to: 0
  2249                           ;doprnt.c: 1291: prec++;
  2250  067E' 4B00'              	infsnz	sprintf@prec& (0+255),f,b
  2251  0680' 2B00'              	incf	(sprintf@prec+1)& (0+255),f,b
  2252  0682'                    l347:
  2253                           
  2254                           ; BSR set to: 0
  2255                           ;doprnt.c: 1339: if(c < prec)
  2256                           
  2257                           ; BSR set to: 0
  2258  0682' 0E80               	movlw	128
  2259  0684' BF00'              	btfsc	sprintf@c& (0+255),7,b
  2260  0686' 0E7F               	movlw	127
  2261  0688' 6E00'              	movwf	??_sprintf& (0+255),c
  2262  068A' 5100'              	movf	sprintf@prec& (0+255),w,b
  2263  068C' 5D00'              	subwf	sprintf@c& (0+255),w,b
  2264  068E' 5100'              	movf	(sprintf@prec+1)& (0+255),w,b
  2265  0690' 0A80               	xorlw	128
  2266  0692' 5800'              	subwfb	??_sprintf& (0+255),w,c
  2267  0694' B0D8               	btfsc	status,0,c
  2268  0696' D003               	goto	l348
  2269                           
  2270                           ; BSR set to: 0
  2271                           ;doprnt.c: 1340: c = prec;
  2272  0698' C011' F016'        	movff	sprintf@prec,sprintf@c
  2273  069C' D010               	goto	l350
  2274  069E'                    l348:
  2275                           
  2276                           ; BSR set to: 0
  2277                           ;doprnt.c: 1341: else if(prec < c)
  2278                           
  2279                           ; BSR set to: 0
  2280  069E' 5100'              	movf	(sprintf@prec+1)& (0+255),w,b
  2281  06A0' 0A80               	xorlw	128
  2282  06A2' 6E00'              	movwf	??_sprintf& (0+255),c
  2283  06A4' 5100'              	movf	sprintf@c& (0+255),w,b
  2284  06A6' 5D00'              	subwf	sprintf@prec& (0+255),w,b
  2285  06A8' 0E80               	movlw	128
  2286  06AA' BF00'              	btfsc	sprintf@c& (0+255),7,b
  2287  06AC' 0E7F               	movlw	127
  2288  06AE' 5800'              	subwfb	??_sprintf& (0+255),w,c
  2289  06B0' B0D8               	btfsc	status,0,c
  2290  06B2' D005               	goto	l350
  2291                           
  2292                           ; BSR set to: 0
  2293                           ;doprnt.c: 1342: prec = c;
  2294  06B4' 5100'              	movf	sprintf@c& (0+255),w,b
  2295  06B6' 6F00'              	movwf	sprintf@prec& (0+255),b
  2296  06B8' 6B00'              	clrf	(sprintf@prec+1)& (0+255),b
  2297  06BA' BF00'              	btfsc	sprintf@prec& (0+255),7,b
  2298  06BC' 0700'              	decf	(sprintf@prec+1)& (0+255),f,b
  2299  06BE'                    l350:
  2300                           
  2301                           ; BSR set to: 0
  2302                           ;doprnt.c: 1422: {
  2303                           ;doprnt.c: 1438: if(flag & 0x03)
  2304                           
  2305                           ; BSR set to: 0
  2306                           
  2307                           ; BSR set to: 0
  2308  06BE' 0E03               	movlw	3
  2309  06C0' 1500'              	andwf	sprintf@flag& (0+255),w,b
  2310  06C2' 6E00'              	movwf	??_sprintf& (0+255),c
  2311  06C4' 0E00               	movlw	0
  2312  06C6' 1500'              	andwf	(sprintf@flag+1)& (0+255),w,b
  2313  06C8' 6E00'              	movwf	(??_sprintf+1)& (0+255),c
  2314  06CA' 5046'              	movf	??_sprintf,w,c
  2315  06CC' 1047'              	iorwf	??_sprintf+1,w,c
  2316  06CE' B4D8               	btfsc	status,2,c
  2317  06D0' D008               	goto	l351
  2318                           
  2319                           ; BSR set to: 0
  2320                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2321  06D2' C03F' FFD9         	movff	sprintf@sp,fsr2l
  2322  06D6' C040' FFDA         	movff	sprintf@sp+1,fsr2h
  2323  06DA' 0E2D               	movlw	45
  2324  06DC' 6EDF               	movwf	indf2,c
  2325  06DE'                    l3064:
  2326                           
  2327                           ; BSR set to: 0
  2328  06DE' 4A3F'              	infsnz	sprintf@sp,f,c
  2329  06E0' 2A40'              	incf	sprintf@sp+1,f,c
  2330  06E2'                    l351:
  2331                           
  2332                           ; BSR set to: 0
  2333                           
  2334                           ; BSR set to: 0
  2335                           
  2336                           ; BSR set to: 0
  2337  06E2' C041' FFF6         	movff	sprintf@f,tblptrl
  2338  06E6' C042' FFF7         	movff	sprintf@f+1,tblptrh
  2339  06EA' 4A41'              	infsnz	sprintf@f,f,c
  2340  06EC' 2A42'              	incf	sprintf@f+1,f,c
  2341  06EE'                    	if	0	;tblptru may be non-zero
  2342  06EE'                    	endif
  2343  06EE'                    	if	0	;tblptru may be non-zero
  2344  06EE'                    	endif
  2345  06EE' 0008               	tblrd		*
  2346  06F0' CFF5 F016'         	movff	tablat,sprintf@c
  2347  06F4' 5100'              	movf	sprintf@c& (0+255),w,b
  2348  06F6' A4D8               	btfss	status,2,c
  2349  06F8' D489               	goto	l296
  2350  06FA'                    u3050:
  2351                           
  2352                           ; BSR set to: 0
  2353                           ;doprnt.c: 1538: *sp = 0;
  2354                           
  2355                           ; BSR set to: 0
  2356                           
  2357                           ;doprnt.c: 1469: }
  2358                           ;doprnt.c: 1533: }
  2359                           ;doprnt.c: 1535: alldone:
  2360                           
  2361                           ; BSR set to: 0
  2362  06FA' C03F' FFD9         	movff	sprintf@sp,fsr2l
  2363  06FE' C040' FFDA         	movff	sprintf@sp+1,fsr2h
  2364  0702' 0E00               	movlw	0
  2365  0704' 6EDF               	movwf	indf2,c
  2366  0706' 0012               	return	
  2367  0708'                    __end_of_sprintf:
  2368                           	opt stack 0
  2369                           tblptru	equ	0xFF8
  2370                           tblptrh	equ	0xFF7
  2371                           tblptrl	equ	0xFF6
  2372                           tablat	equ	0xFF5
  2373                           prodh	equ	0xFF4
  2374                           prodl	equ	0xFF3
  2375                           wreg	equ	0xFE8
  2376                           indf2	equ	0xFDF
  2377                           postinc2	equ	0xFDE
  2378                           postdec2	equ	0xFDD
  2379                           fsr2h	equ	0xFDA
  2380                           fsr2l	equ	0xFD9
  2381                           status	equ	0xFD8
  2382                           
  2383 ;; *************** function _scale *****************
  2384 ;; Defined at:
  2385 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  2386 ;; Parameters:    Size  Location     Type
  2387 ;;  scl             1    wreg     char 
  2388 ;; Auto vars:     Size  Location     Type
  2389 ;;  scl             1   41[COMRAM] char 
  2390 ;; Return value:  Size  Location     Type
  2391 ;;                  3   35[COMRAM] char 
  2392 ;; Registers used:
  2393 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2394 ;; Tracked objects:
  2395 ;;		On entry : 0/0
  2396 ;;		On exit  : 0/0
  2397 ;;		Unchanged: 0/0
  2398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2399 ;;      Params:         3       0       0       0       0       0       0       0       0
  2400 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2401 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2402 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2403 ;;Total ram usage:        7 bytes
  2404 ;; Hardware stack levels used:    1
  2405 ;; Hardware stack levels required when called:    2
  2406 ;; This function calls:
  2407 ;;		___awdiv
  2408 ;;		___awmod
  2409 ;;		___ftmul
  2410 ;;		___wmul
  2411 ;; This function is called by:
  2412 ;;		_sprintf
  2413 ;; This function uses a non-reentrant model
  2414 ;;
  2415                           
  2416                           	psect	text2
  2417  0000'                    __ptext2:
  2418                           	opt stack 0
  2419  0000'                    _scale:
  2420                           	opt stack 27
  2421                           
  2422                           ; BSR set to: 0
  2423                           ;incstack = 0
  2424                           ;scale@scl stored from wreg
  2425  0000' 6E29'              	movwf	scale@scl,c
  2426                           
  2427                           ;doprnt.c: 428: if(scl < 0) {
  2428  0002' AE29'              	btfss	scale@scl,7,c
  2429  0004' D101               	goto	l285
  2430                           
  2431                           ;doprnt.c: 429: scl = -scl;
  2432  0006' 6C29'              	negf	scale@scl,c
  2433                           
  2434                           ;doprnt.c: 430: if(scl>=110)
  2435  0008' 5029'              	movf	scale@scl,w,c
  2436  000A' 0A80               	xorlw	128
  2437  000C' 0F12               	addlw	-238
  2438  000E' A0D8               	btfss	status,0,c
  2439  0010' D091               	goto	l286
  2440                           
  2441                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2442  0012' 0E00               	movlw	0
  2443  0014' 6E11'              	movwf	___wmul@multiplicand+1,c
  2444  0016' 0E03               	movlw	3
  2445  0018' 6E10'              	movwf	___wmul@multiplicand,c
  2446  001A' 0E00               	movlw	0
  2447  001C' 6E09'              	movwf	___awdiv@divisor+1,c
  2448  001E' 0E0A               	movlw	10
  2449  0020' 6E08'              	movwf	___awdiv@divisor,c
  2450  0022' 0E00               	movlw	0
  2451  0024' 6E03'              	movwf	___awmod@divisor+1,c
  2452  0026' 0E64               	movlw	100
  2453  0028' 6E02'              	movwf	___awmod@divisor,c
  2454  002A' 5029'              	movf	scale@scl,w,c
  2455  002C' 6E00'              	movwf	___awmod@dividend,c
  2456  002E' 6A01'              	clrf	___awmod@dividend+1,c
  2457  0030' BE00'              	btfsc	___awmod@dividend,7,c
  2458  0032' 0601'              	decf	___awmod@dividend+1,f,c
  2459  0034' EC00' F000'        	call	___awmod	;wreg free
  2460  0038' C000' F006'        	movff	?___awmod,___awdiv@dividend
  2461  003C' C001' F007'        	movff	?___awmod+1,___awdiv@dividend+1
  2462  0040' EC00' F000'        	call	___awdiv	;wreg free
  2463  0044' 0E09               	movlw	9
  2464  0046' 2406'              	addwf	?___awdiv,w,c
  2465  0048' 6E0E'              	movwf	___wmul@multiplier,c
  2466  004A' 0E00               	movlw	0
  2467  004C' 2007'              	addwfc	?___awdiv+1,w,c
  2468  004E' 6E0F'              	movwf	___wmul@multiplier+1,c
  2469  0050' EC00' F000'        	call	___wmul	;wreg free
  2470  0054' 0E00'              	movlw	low __npowers_
  2471  0056' 240E'              	addwf	?___wmul,w,c
  2472  0058' 6EF6               	movwf	tblptrl,c
  2473  005A' 0E00'              	movlw	high __npowers_
  2474  005C' 200F'              	addwfc	?___wmul+1,w,c
  2475  005E' 6EF7               	movwf	tblptrh,c
  2476  0060'                    	if	0	;There are less than 3 active tblptr bytes
  2477  0060'                    	endif
  2478  0060' 0009               	tblrd		*+
  2479  0062' CFF5 F017'         	movff	tablat,___ftmul@f2
  2480  0066' 0009               	tblrd		*+
  2481  0068' CFF5 F018'         	movff	tablat,___ftmul@f2+1
  2482  006C' 000A               	tblrd		*-
  2483  006E' CFF5 F019'         	movff	tablat,___ftmul@f2+2
  2484  0072' 0E00               	movlw	0
  2485  0074' 6E09'              	movwf	___awdiv@divisor+1,c
  2486  0076' 0E64               	movlw	100
  2487  0078' 6E08'              	movwf	___awdiv@divisor,c
  2488  007A' 5029'              	movf	scale@scl,w,c
  2489  007C' 6E06'              	movwf	___awdiv@dividend,c
  2490  007E' 6A07'              	clrf	___awdiv@dividend+1,c
  2491  0080' BE06'              	btfsc	___awdiv@dividend,7,c
  2492  0082' 0607'              	decf	___awdiv@dividend+1,f,c
  2493  0084' EC00' F000'        	call	___awdiv	;wreg free
  2494  0088' 0E12               	movlw	18
  2495  008A' 2406'              	addwf	?___awdiv,w,c
  2496  008C' 6E0E'              	movwf	___wmul@multiplier,c
  2497  008E' 0E00               	movlw	0
  2498  0090' 2007'              	addwfc	?___awdiv+1,w,c
  2499  0092' 6E0F'              	movwf	___wmul@multiplier+1,c
  2500  0094' 0E00               	movlw	0
  2501  0096' 6E11'              	movwf	___wmul@multiplicand+1,c
  2502  0098' 0E03               	movlw	3
  2503  009A' 6E10'              	movwf	___wmul@multiplicand,c
  2504  009C' EC00' F000'        	call	___wmul	;wreg free
  2505  00A0' 0E00'              	movlw	low __npowers_
  2506  00A2' 240E'              	addwf	?___wmul,w,c
  2507  00A4' 6EF6               	movwf	tblptrl,c
  2508  00A6' 0E00'              	movlw	high __npowers_
  2509  00A8' 200F'              	addwfc	?___wmul+1,w,c
  2510  00AA' 6EF7               	movwf	tblptrh,c
  2511  00AC'                    	if	0	;There are less than 3 active tblptr bytes
  2512  00AC'                    	endif
  2513  00AC' 0009               	tblrd		*+
  2514  00AE' CFF5 F014'         	movff	tablat,___ftmul@f1
  2515  00B2' 0009               	tblrd		*+
  2516  00B4' CFF5 F015'         	movff	tablat,___ftmul@f1+1
  2517  00B8' 000A               	tblrd		*-
  2518  00BA' CFF5 F016'         	movff	tablat,___ftmul@f1+2
  2519  00BE' EC00' F000'        	call	___ftmul	;wreg free
  2520  00C2' C014' F026'        	movff	?___ftmul,_scale$1496
  2521  00C6' C015' F027'        	movff	?___ftmul+1,_scale$1496+1
  2522  00CA' C016' F028'        	movff	?___ftmul+2,_scale$1496+2
  2523                           
  2524                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2525  00CE' C026' F014'        	movff	_scale$1496,___ftmul@f1
  2526  00D2' C027' F015'        	movff	_scale$1496+1,___ftmul@f1+1
  2527  00D6' C028' F016'        	movff	_scale$1496+2,___ftmul@f1+2
  2528  00DA' 0E00               	movlw	0
  2529  00DC' 6E11'              	movwf	___wmul@multiplicand+1,c
  2530  00DE' 0E03               	movlw	3
  2531  00E0' 6E10'              	movwf	___wmul@multiplicand,c
  2532  00E2' 0E00               	movlw	0
  2533  00E4' 6E03'              	movwf	___awmod@divisor+1,c
  2534  00E6' 0E0A               	movlw	10
  2535  00E8' 6E02'              	movwf	___awmod@divisor,c
  2536  00EA' 5029'              	movf	scale@scl,w,c
  2537  00EC' 6E00'              	movwf	___awmod@dividend,c
  2538  00EE' 6A01'              	clrf	___awmod@dividend+1,c
  2539  00F0' BE00'              	btfsc	___awmod@dividend,7,c
  2540  00F2' 0601'              	decf	___awmod@dividend+1,f,c
  2541  00F4' EC00' F000'        	call	___awmod	;wreg free
  2542  00F8' C000' F00E'        	movff	?___awmod,___wmul@multiplier
  2543  00FC' C001' F00F'        	movff	?___awmod+1,___wmul@multiplier+1
  2544  0100' EC00' F000'        	call	___wmul	;wreg free
  2545  0104' 0E00'              	movlw	low __npowers_
  2546  0106' 240E'              	addwf	?___wmul,w,c
  2547  0108' 6EF6               	movwf	tblptrl,c
  2548  010A' 0E00'              	movlw	high __npowers_
  2549  010C' 200F'              	addwfc	?___wmul+1,w,c
  2550  010E' 6EF7               	movwf	tblptrh,c
  2551  0110'                    	if	0	;There are less than 3 active tblptr bytes
  2552  0110'                    	endif
  2553  0110' 0009               	tblrd		*+
  2554  0112' CFF5 F017'         	movff	tablat,___ftmul@f2
  2555  0116' 0009               	tblrd		*+
  2556  0118' CFF5 F018'         	movff	tablat,___ftmul@f2+1
  2557  011C' 000A               	tblrd		*-
  2558  011E' CFF5 F019'         	movff	tablat,___ftmul@f2+2
  2559  0122' EC00' F000'        	call	___ftmul	;wreg free
  2560  0126' C014' F023'        	movff	?___ftmul,?_scale
  2561  012A' C015' F024'        	movff	?___ftmul+1,?_scale+1
  2562  012E' C016' F025'        	movff	?___ftmul+2,?_scale+2
  2563  0132' 0012               	return	
  2564  0134'                    l286:
  2565                           
  2566                           ;doprnt.c: 432: else if(scl > 10)
  2567  0134' 5029'              	movf	scale@scl,w,c
  2568  0136' 0A80               	xorlw	128
  2569  0138' 0F75               	addlw	-139
  2570  013A' A0D8               	btfss	status,0,c
  2571  013C' D053               	goto	l289
  2572                           
  2573                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  2574  013E' 0E00               	movlw	0
  2575  0140' 6E09'              	movwf	___awdiv@divisor+1,c
  2576  0142' 0E0A               	movlw	10
  2577  0144' 6E08'              	movwf	___awdiv@divisor,c
  2578  0146' 5029'              	movf	scale@scl,w,c
  2579  0148' 6E06'              	movwf	___awdiv@dividend,c
  2580  014A' 6A07'              	clrf	___awdiv@dividend+1,c
  2581  014C' BE06'              	btfsc	___awdiv@dividend,7,c
  2582  014E' 0607'              	decf	___awdiv@dividend+1,f,c
  2583  0150' EC00' F000'        	call	___awdiv	;wreg free
  2584  0154' 0E09               	movlw	9
  2585  0156' 2406'              	addwf	?___awdiv,w,c
  2586  0158' 6E0E'              	movwf	___wmul@multiplier,c
  2587  015A' 0E00               	movlw	0
  2588  015C' 2007'              	addwfc	?___awdiv+1,w,c
  2589  015E' 6E0F'              	movwf	___wmul@multiplier+1,c
  2590  0160' 0E00               	movlw	0
  2591  0162' 6E11'              	movwf	___wmul@multiplicand+1,c
  2592  0164' 0E03               	movlw	3
  2593  0166' 6E10'              	movwf	___wmul@multiplicand,c
  2594  0168' EC00' F000'        	call	___wmul	;wreg free
  2595  016C' 0E00'              	movlw	low __npowers_
  2596  016E' 240E'              	addwf	?___wmul,w,c
  2597  0170' 6EF6               	movwf	tblptrl,c
  2598  0172' 0E00'              	movlw	high __npowers_
  2599  0174' 200F'              	addwfc	?___wmul+1,w,c
  2600  0176' 6EF7               	movwf	tblptrh,c
  2601  0178'                    	if	0	;There are less than 3 active tblptr bytes
  2602  0178'                    	endif
  2603  0178' 0009               	tblrd		*+
  2604  017A' CFF5 F014'         	movff	tablat,___ftmul@f1
  2605  017E' 0009               	tblrd		*+
  2606  0180' CFF5 F015'         	movff	tablat,___ftmul@f1+1
  2607  0184' 000A               	tblrd		*-
  2608  0186' CFF5 F016'         	movff	tablat,___ftmul@f1+2
  2609  018A' 0E00               	movlw	0
  2610  018C' 6E11'              	movwf	___wmul@multiplicand+1,c
  2611  018E' 0E03               	movlw	3
  2612  0190' 6E10'              	movwf	___wmul@multiplicand,c
  2613  0192' 0E00               	movlw	0
  2614  0194' 6E03'              	movwf	___awmod@divisor+1,c
  2615  0196' 0E0A               	movlw	10
  2616  0198' 6E02'              	movwf	___awmod@divisor,c
  2617  019A' 5029'              	movf	scale@scl,w,c
  2618  019C' 6E00'              	movwf	___awmod@dividend,c
  2619  019E' 6A01'              	clrf	___awmod@dividend+1,c
  2620  01A0' BE00'              	btfsc	___awmod@dividend,7,c
  2621  01A2' 0601'              	decf	___awmod@dividend+1,f,c
  2622  01A4' EC00' F000'        	call	___awmod	;wreg free
  2623  01A8' C000' F00E'        	movff	?___awmod,___wmul@multiplier
  2624  01AC' C001' F00F'        	movff	?___awmod+1,___wmul@multiplier+1
  2625  01B0' EC00' F000'        	call	___wmul	;wreg free
  2626  01B4' 0E00'              	movlw	low __npowers_
  2627  01B6' 240E'              	addwf	?___wmul,w,c
  2628  01B8' 6EF6               	movwf	tblptrl,c
  2629  01BA' 0E00'              	movlw	high __npowers_
  2630  01BC' 200F'              	addwfc	?___wmul+1,w,c
  2631  01BE' 6EF7               	movwf	tblptrh,c
  2632  01C0'                    	if	0	;There are less than 3 active tblptr bytes
  2633  01C0'                    	endif
  2634  01C0' 0009               	tblrd		*+
  2635  01C2' CFF5 F017'         	movff	tablat,___ftmul@f2
  2636  01C6' 0009               	tblrd		*+
  2637  01C8' CFF5 F018'         	movff	tablat,___ftmul@f2+1
  2638  01CC' 000A               	tblrd		*-
  2639  01CE' CFF5 F019'         	movff	tablat,___ftmul@f2+2
  2640  01D2' EC00' F000'        	call	___ftmul	;wreg free
  2641  01D6' C014' F023'        	movff	?___ftmul,?_scale
  2642  01DA' C015' F024'        	movff	?___ftmul+1,?_scale+1
  2643  01DE' C016' F025'        	movff	?___ftmul+2,?_scale+2
  2644  01E2' 0012               	return	
  2645  01E4'                    l289:
  2646                           
  2647                           ;doprnt.c: 434: return _npowers_[scl];
  2648  01E4' 5029'              	movf	scale@scl,w,c
  2649  01E6' 0D03               	mullw	3
  2650  01E8' 0E00'              	movlw	low __npowers_
  2651  01EA' 24F3               	addwf	prodl,w,c
  2652  01EC' 6EF6               	movwf	tblptrl,c
  2653  01EE' 0E00'              	movlw	high __npowers_
  2654  01F0' 20F4               	addwfc	prodh,w,c
  2655  01F2' 6EF7               	movwf	tblptrh,c
  2656  01F4'                    	if	0	;There are less than 3 active tblptr bytes
  2657  01F4'                    	endif
  2658  01F4' 0009               	tblrd		*+
  2659  01F6' CFF5 F023'         	movff	tablat,?_scale
  2660  01FA' 0009               	tblrd		*+
  2661  01FC' CFF5 F024'         	movff	tablat,?_scale+1
  2662  0200' 000A               	tblrd		*-
  2663  0202' CFF5 F025'         	movff	tablat,?_scale+2
  2664  0206' 0012               	return	
  2665  0208'                    l285:
  2666                           
  2667                           ;doprnt.c: 435: }
  2668                           ;doprnt.c: 436: if(scl>=110)
  2669  0208' 5029'              	movf	scale@scl,w,c
  2670  020A' 0A80               	xorlw	128
  2671  020C' 0F12               	addlw	-238
  2672  020E' A0D8               	btfss	status,0,c
  2673  0210' D091               	goto	l290
  2674                           
  2675                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2676  0212' 0E00               	movlw	0
  2677  0214' 6E11'              	movwf	___wmul@multiplicand+1,c
  2678  0216' 0E03               	movlw	3
  2679  0218' 6E10'              	movwf	___wmul@multiplicand,c
  2680  021A' 0E00               	movlw	0
  2681  021C' 6E09'              	movwf	___awdiv@divisor+1,c
  2682  021E' 0E0A               	movlw	10
  2683  0220' 6E08'              	movwf	___awdiv@divisor,c
  2684  0222' 0E00               	movlw	0
  2685  0224' 6E03'              	movwf	___awmod@divisor+1,c
  2686  0226' 0E64               	movlw	100
  2687  0228' 6E02'              	movwf	___awmod@divisor,c
  2688  022A' 5029'              	movf	scale@scl,w,c
  2689  022C' 6E00'              	movwf	___awmod@dividend,c
  2690  022E' 6A01'              	clrf	___awmod@dividend+1,c
  2691  0230' BE00'              	btfsc	___awmod@dividend,7,c
  2692  0232' 0601'              	decf	___awmod@dividend+1,f,c
  2693  0234' EC00' F000'        	call	___awmod	;wreg free
  2694  0238' C000' F006'        	movff	?___awmod,___awdiv@dividend
  2695  023C' C001' F007'        	movff	?___awmod+1,___awdiv@dividend+1
  2696  0240' EC00' F000'        	call	___awdiv	;wreg free
  2697  0244' 0E09               	movlw	9
  2698  0246' 2406'              	addwf	?___awdiv,w,c
  2699  0248' 6E0E'              	movwf	___wmul@multiplier,c
  2700  024A' 0E00               	movlw	0
  2701  024C' 2007'              	addwfc	?___awdiv+1,w,c
  2702  024E' 6E0F'              	movwf	___wmul@multiplier+1,c
  2703  0250' EC00' F000'        	call	___wmul	;wreg free
  2704  0254' 0E00'              	movlw	low __powers_
  2705  0256' 240E'              	addwf	?___wmul,w,c
  2706  0258' 6EF6               	movwf	tblptrl,c
  2707  025A' 0E00'              	movlw	high __powers_
  2708  025C' 200F'              	addwfc	?___wmul+1,w,c
  2709  025E' 6EF7               	movwf	tblptrh,c
  2710  0260'                    	if	0	;There are less than 3 active tblptr bytes
  2711  0260'                    	endif
  2712  0260' 0009               	tblrd		*+
  2713  0262' CFF5 F017'         	movff	tablat,___ftmul@f2
  2714  0266' 0009               	tblrd		*+
  2715  0268' CFF5 F018'         	movff	tablat,___ftmul@f2+1
  2716  026C' 000A               	tblrd		*-
  2717  026E' CFF5 F019'         	movff	tablat,___ftmul@f2+2
  2718  0272' 0E00               	movlw	0
  2719  0274' 6E09'              	movwf	___awdiv@divisor+1,c
  2720  0276' 0E64               	movlw	100
  2721  0278' 6E08'              	movwf	___awdiv@divisor,c
  2722  027A' 5029'              	movf	scale@scl,w,c
  2723  027C' 6E06'              	movwf	___awdiv@dividend,c
  2724  027E' 6A07'              	clrf	___awdiv@dividend+1,c
  2725  0280' BE06'              	btfsc	___awdiv@dividend,7,c
  2726  0282' 0607'              	decf	___awdiv@dividend+1,f,c
  2727  0284' EC00' F000'        	call	___awdiv	;wreg free
  2728  0288' 0E12               	movlw	18
  2729  028A' 2406'              	addwf	?___awdiv,w,c
  2730  028C' 6E0E'              	movwf	___wmul@multiplier,c
  2731  028E' 0E00               	movlw	0
  2732  0290' 2007'              	addwfc	?___awdiv+1,w,c
  2733  0292' 6E0F'              	movwf	___wmul@multiplier+1,c
  2734  0294' 0E00               	movlw	0
  2735  0296' 6E11'              	movwf	___wmul@multiplicand+1,c
  2736  0298' 0E03               	movlw	3
  2737  029A' 6E10'              	movwf	___wmul@multiplicand,c
  2738  029C' EC00' F000'        	call	___wmul	;wreg free
  2739  02A0' 0E00'              	movlw	low __powers_
  2740  02A2' 240E'              	addwf	?___wmul,w,c
  2741  02A4' 6EF6               	movwf	tblptrl,c
  2742  02A6' 0E00'              	movlw	high __powers_
  2743  02A8' 200F'              	addwfc	?___wmul+1,w,c
  2744  02AA' 6EF7               	movwf	tblptrh,c
  2745  02AC'                    	if	0	;There are less than 3 active tblptr bytes
  2746  02AC'                    	endif
  2747  02AC' 0009               	tblrd		*+
  2748  02AE' CFF5 F014'         	movff	tablat,___ftmul@f1
  2749  02B2' 0009               	tblrd		*+
  2750  02B4' CFF5 F015'         	movff	tablat,___ftmul@f1+1
  2751  02B8' 000A               	tblrd		*-
  2752  02BA' CFF5 F016'         	movff	tablat,___ftmul@f1+2
  2753  02BE' EC00' F000'        	call	___ftmul	;wreg free
  2754  02C2' C014' F026'        	movff	?___ftmul,_scale$1496
  2755  02C6' C015' F027'        	movff	?___ftmul+1,_scale$1496+1
  2756  02CA' C016' F028'        	movff	?___ftmul+2,_scale$1496+2
  2757                           
  2758                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2759  02CE' C026' F014'        	movff	_scale$1496,___ftmul@f1
  2760  02D2' C027' F015'        	movff	_scale$1496+1,___ftmul@f1+1
  2761  02D6' C028' F016'        	movff	_scale$1496+2,___ftmul@f1+2
  2762  02DA' 0E00               	movlw	0
  2763  02DC' 6E11'              	movwf	___wmul@multiplicand+1,c
  2764  02DE' 0E03               	movlw	3
  2765  02E0' 6E10'              	movwf	___wmul@multiplicand,c
  2766  02E2' 0E00               	movlw	0
  2767  02E4' 6E03'              	movwf	___awmod@divisor+1,c
  2768  02E6' 0E0A               	movlw	10
  2769  02E8' 6E02'              	movwf	___awmod@divisor,c
  2770  02EA' 5029'              	movf	scale@scl,w,c
  2771  02EC' 6E00'              	movwf	___awmod@dividend,c
  2772  02EE' 6A01'              	clrf	___awmod@dividend+1,c
  2773  02F0' BE00'              	btfsc	___awmod@dividend,7,c
  2774  02F2' 0601'              	decf	___awmod@dividend+1,f,c
  2775  02F4' EC00' F000'        	call	___awmod	;wreg free
  2776  02F8' C000' F00E'        	movff	?___awmod,___wmul@multiplier
  2777  02FC' C001' F00F'        	movff	?___awmod+1,___wmul@multiplier+1
  2778  0300' EC00' F000'        	call	___wmul	;wreg free
  2779  0304' 0E00'              	movlw	low __powers_
  2780  0306' 240E'              	addwf	?___wmul,w,c
  2781  0308' 6EF6               	movwf	tblptrl,c
  2782  030A' 0E00'              	movlw	high __powers_
  2783  030C' 200F'              	addwfc	?___wmul+1,w,c
  2784  030E' 6EF7               	movwf	tblptrh,c
  2785  0310'                    	if	0	;There are less than 3 active tblptr bytes
  2786  0310'                    	endif
  2787  0310' 0009               	tblrd		*+
  2788  0312' CFF5 F017'         	movff	tablat,___ftmul@f2
  2789  0316' 0009               	tblrd		*+
  2790  0318' CFF5 F018'         	movff	tablat,___ftmul@f2+1
  2791  031C' 000A               	tblrd		*-
  2792  031E' CFF5 F019'         	movff	tablat,___ftmul@f2+2
  2793  0322' EC00' F000'        	call	___ftmul	;wreg free
  2794  0326' C014' F023'        	movff	?___ftmul,?_scale
  2795  032A' C015' F024'        	movff	?___ftmul+1,?_scale+1
  2796  032E' C016' F025'        	movff	?___ftmul+2,?_scale+2
  2797  0332' 0012               	return	
  2798  0334'                    l290:
  2799                           
  2800                           ;doprnt.c: 438: else if(scl > 10)
  2801  0334' 5029'              	movf	scale@scl,w,c
  2802  0336' 0A80               	xorlw	128
  2803  0338' 0F75               	addlw	-139
  2804  033A' A0D8               	btfss	status,0,c
  2805  033C' D053               	goto	l292
  2806                           
  2807                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  2808  033E' 0E00               	movlw	0
  2809  0340' 6E09'              	movwf	___awdiv@divisor+1,c
  2810  0342' 0E0A               	movlw	10
  2811  0344' 6E08'              	movwf	___awdiv@divisor,c
  2812  0346' 5029'              	movf	scale@scl,w,c
  2813  0348' 6E06'              	movwf	___awdiv@dividend,c
  2814  034A' 6A07'              	clrf	___awdiv@dividend+1,c
  2815  034C' BE06'              	btfsc	___awdiv@dividend,7,c
  2816  034E' 0607'              	decf	___awdiv@dividend+1,f,c
  2817  0350' EC00' F000'        	call	___awdiv	;wreg free
  2818  0354' 0E09               	movlw	9
  2819  0356' 2406'              	addwf	?___awdiv,w,c
  2820  0358' 6E0E'              	movwf	___wmul@multiplier,c
  2821  035A' 0E00               	movlw	0
  2822  035C' 2007'              	addwfc	?___awdiv+1,w,c
  2823  035E' 6E0F'              	movwf	___wmul@multiplier+1,c
  2824  0360' 0E00               	movlw	0
  2825  0362' 6E11'              	movwf	___wmul@multiplicand+1,c
  2826  0364' 0E03               	movlw	3
  2827  0366' 6E10'              	movwf	___wmul@multiplicand,c
  2828  0368' EC00' F000'        	call	___wmul	;wreg free
  2829  036C' 0E00'              	movlw	low __powers_
  2830  036E' 240E'              	addwf	?___wmul,w,c
  2831  0370' 6EF6               	movwf	tblptrl,c
  2832  0372' 0E00'              	movlw	high __powers_
  2833  0374' 200F'              	addwfc	?___wmul+1,w,c
  2834  0376' 6EF7               	movwf	tblptrh,c
  2835  0378'                    	if	0	;There are less than 3 active tblptr bytes
  2836  0378'                    	endif
  2837  0378' 0009               	tblrd		*+
  2838  037A' CFF5 F014'         	movff	tablat,___ftmul@f1
  2839  037E' 0009               	tblrd		*+
  2840  0380' CFF5 F015'         	movff	tablat,___ftmul@f1+1
  2841  0384' 000A               	tblrd		*-
  2842  0386' CFF5 F016'         	movff	tablat,___ftmul@f1+2
  2843  038A' 0E00               	movlw	0
  2844  038C' 6E11'              	movwf	___wmul@multiplicand+1,c
  2845  038E' 0E03               	movlw	3
  2846  0390' 6E10'              	movwf	___wmul@multiplicand,c
  2847  0392' 0E00               	movlw	0
  2848  0394' 6E03'              	movwf	___awmod@divisor+1,c
  2849  0396' 0E0A               	movlw	10
  2850  0398' 6E02'              	movwf	___awmod@divisor,c
  2851  039A' 5029'              	movf	scale@scl,w,c
  2852  039C' 6E00'              	movwf	___awmod@dividend,c
  2853  039E' 6A01'              	clrf	___awmod@dividend+1,c
  2854  03A0' BE00'              	btfsc	___awmod@dividend,7,c
  2855  03A2' 0601'              	decf	___awmod@dividend+1,f,c
  2856  03A4' EC00' F000'        	call	___awmod	;wreg free
  2857  03A8' C000' F00E'        	movff	?___awmod,___wmul@multiplier
  2858  03AC' C001' F00F'        	movff	?___awmod+1,___wmul@multiplier+1
  2859  03B0' EC00' F000'        	call	___wmul	;wreg free
  2860  03B4' 0E00'              	movlw	low __powers_
  2861  03B6' 240E'              	addwf	?___wmul,w,c
  2862  03B8' 6EF6               	movwf	tblptrl,c
  2863  03BA' 0E00'              	movlw	high __powers_
  2864  03BC' 200F'              	addwfc	?___wmul+1,w,c
  2865  03BE' 6EF7               	movwf	tblptrh,c
  2866  03C0'                    	if	0	;There are less than 3 active tblptr bytes
  2867  03C0'                    	endif
  2868  03C0' 0009               	tblrd		*+
  2869  03C2' CFF5 F017'         	movff	tablat,___ftmul@f2
  2870  03C6' 0009               	tblrd		*+
  2871  03C8' CFF5 F018'         	movff	tablat,___ftmul@f2+1
  2872  03CC' 000A               	tblrd		*-
  2873  03CE' CFF5 F019'         	movff	tablat,___ftmul@f2+2
  2874  03D2' EC00' F000'        	call	___ftmul	;wreg free
  2875  03D6' C014' F023'        	movff	?___ftmul,?_scale
  2876  03DA' C015' F024'        	movff	?___ftmul+1,?_scale+1
  2877  03DE' C016' F025'        	movff	?___ftmul+2,?_scale+2
  2878  03E2' 0012               	return	
  2879  03E4'                    l292:
  2880                           
  2881                           ;doprnt.c: 440: return _powers_[scl];
  2882  03E4' 5029'              	movf	scale@scl,w,c
  2883  03E6' 0D03               	mullw	3
  2884  03E8' 0E00'              	movlw	low __powers_
  2885  03EA' 24F3               	addwf	prodl,w,c
  2886  03EC' 6EF6               	movwf	tblptrl,c
  2887  03EE' 0E00'              	movlw	high __powers_
  2888  03F0' 20F4               	addwfc	prodh,w,c
  2889  03F2' 6EF7               	movwf	tblptrh,c
  2890  03F4'                    	if	0	;There are less than 3 active tblptr bytes
  2891  03F4'                    	endif
  2892  03F4' 0009               	tblrd		*+
  2893  03F6' CFF5 F023'         	movff	tablat,?_scale
  2894  03FA' 0009               	tblrd		*+
  2895  03FC' CFF5 F024'         	movff	tablat,?_scale+1
  2896  0400' 000A               	tblrd		*-
  2897  0402' CFF5 F025'         	movff	tablat,?_scale+2
  2898  0406' 0012               	return	
  2899  0408'                    __end_of_scale:
  2900                           	opt stack 0
  2901                           tblptru	equ	0xFF8
  2902                           tblptrh	equ	0xFF7
  2903                           tblptrl	equ	0xFF6
  2904                           tablat	equ	0xFF5
  2905                           prodh	equ	0xFF4
  2906                           prodl	equ	0xFF3
  2907                           wreg	equ	0xFE8
  2908                           indf2	equ	0xFDF
  2909                           postinc2	equ	0xFDE
  2910                           postdec2	equ	0xFDD
  2911                           fsr2h	equ	0xFDA
  2912                           fsr2l	equ	0xFD9
  2913                           status	equ	0xFD8
  2914                           
  2915 ;; *************** function _isdigit *****************
  2916 ;; Defined at:
  2917 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  2918 ;; Parameters:    Size  Location     Type
  2919 ;;  c               1    wreg     unsigned char 
  2920 ;; Auto vars:     Size  Location     Type
  2921 ;;  c               1    2[COMRAM] unsigned char 
  2922 ;; Return value:  Size  Location     Type
  2923 ;;		None               void
  2924 ;; Registers used:
  2925 ;;		wreg, status,2, status,0
  2926 ;; Tracked objects:
  2927 ;;		On entry : 0/0
  2928 ;;		On exit  : 0/0
  2929 ;;		Unchanged: 0/0
  2930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2931 ;;      Params:         0       0       0       0       0       0       0       0       0
  2932 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2933 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2934 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2935 ;;Total ram usage:        3 bytes
  2936 ;; Hardware stack levels used:    1
  2937 ;; This function calls:
  2938 ;;		Nothing
  2939 ;; This function is called by:
  2940 ;;		_sprintf
  2941 ;; This function uses a non-reentrant model
  2942 ;;
  2943                           
  2944                           	psect	text3
  2945  0000'                    __ptext3:
  2946                           	opt stack 0
  2947  0000'                    _isdigit:
  2948                           	opt stack 29
  2949                           
  2950                           ;incstack = 0
  2951                           ;isdigit@c stored from wreg
  2952  0000' 6E02'              	movwf	isdigit@c,c
  2953  0002' 0E00               	movlw	0
  2954  0004' 6E01'              	movwf	_isdigit$1117,c
  2955  0006' 0E3A               	movlw	58
  2956  0008' 6002'              	cpfslt	isdigit@c,c
  2957  000A' D005               	goto	l717
  2958  000C' 0E2F               	movlw	47
  2959  000E' 6402'              	cpfsgt	isdigit@c,c
  2960  0010' D002               	goto	l717
  2961  0012' 0E01               	movlw	1
  2962  0014' 6E01'              	movwf	_isdigit$1117,c
  2963  0016'                    l717:
  2964  0016' C001' F000'        	movff	_isdigit$1117,??_isdigit
  2965  001A' 3000'              	rrcf	??_isdigit,w,c
  2966  001C' 0012               	return	
  2967  001E'                    __end_of_isdigit:
  2968                           	opt stack 0
  2969                           tblptru	equ	0xFF8
  2970                           tblptrh	equ	0xFF7
  2971                           tblptrl	equ	0xFF6
  2972                           tablat	equ	0xFF5
  2973                           prodh	equ	0xFF4
  2974                           prodl	equ	0xFF3
  2975                           wreg	equ	0xFE8
  2976                           indf2	equ	0xFDF
  2977                           postinc2	equ	0xFDE
  2978                           postdec2	equ	0xFDD
  2979                           fsr2h	equ	0xFDA
  2980                           fsr2l	equ	0xFD9
  2981                           status	equ	0xFD8
  2982                           
  2983 ;; *************** function _fround *****************
  2984 ;; Defined at:
  2985 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  2986 ;; Parameters:    Size  Location     Type
  2987 ;;  prec            1    wreg     unsigned char 
  2988 ;; Auto vars:     Size  Location     Type
  2989 ;;  prec            1   44[COMRAM] unsigned char 
  2990 ;; Return value:  Size  Location     Type
  2991 ;;                  3   35[COMRAM] unsigned char 
  2992 ;; Registers used:
  2993 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2994 ;; Tracked objects:
  2995 ;;		On entry : 0/0
  2996 ;;		On exit  : 0/0
  2997 ;;		Unchanged: 0/0
  2998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2999 ;;      Params:         3       0       0       0       0       0       0       0       0
  3000 ;;      Locals:         7       0       0       0       0       0       0       0       0
  3001 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3002 ;;      Totals:        10       0       0       0       0       0       0       0       0
  3003 ;;Total ram usage:       10 bytes
  3004 ;; Hardware stack levels used:    1
  3005 ;; Hardware stack levels required when called:    2
  3006 ;; This function calls:
  3007 ;;		___awdiv
  3008 ;;		___awmod
  3009 ;;		___ftmul
  3010 ;;		___wmul
  3011 ;; This function is called by:
  3012 ;;		_sprintf
  3013 ;; This function uses a non-reentrant model
  3014 ;;
  3015                           
  3016                           	psect	text4
  3017  0000'                    __ptext4:
  3018                           	opt stack 0
  3019  0000'                    _fround:
  3020                           	opt stack 27
  3021                           
  3022                           ;incstack = 0
  3023                           ;fround@prec stored from wreg
  3024  0000' 6E2C'              	movwf	fround@prec,c
  3025                           
  3026                           ;doprnt.c: 413: if(prec>=110)
  3027  0002' 0E6D               	movlw	109
  3028  0004' 642C'              	cpfsgt	fround@prec,c
  3029  0006' D09F               	goto	l279
  3030                           
  3031                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3032  0008' 0E00               	movlw	0
  3033  000A' 6E11'              	movwf	___wmul@multiplicand+1,c
  3034  000C' 0E03               	movlw	3
  3035  000E' 6E10'              	movwf	___wmul@multiplicand,c
  3036  0010' 0E00               	movlw	0
  3037  0012' 6E09'              	movwf	___awdiv@divisor+1,c
  3038  0014' 0E0A               	movlw	10
  3039  0016' 6E08'              	movwf	___awdiv@divisor,c
  3040  0018' 0E00               	movlw	0
  3041  001A' 6E03'              	movwf	___awmod@divisor+1,c
  3042  001C' 0E64               	movlw	100
  3043  001E' 6E02'              	movwf	___awmod@divisor,c
  3044  0020' C02C' F000'        	movff	fround@prec,___awmod@dividend
  3045  0024' 6A01'              	clrf	___awmod@dividend+1,c
  3046  0026' EC00' F000'        	call	___awmod	;wreg free
  3047  002A' C000' F006'        	movff	?___awmod,___awdiv@dividend
  3048  002E' C001' F007'        	movff	?___awmod+1,___awdiv@dividend+1
  3049  0032' EC00' F000'        	call	___awdiv	;wreg free
  3050  0036' 0E09               	movlw	9
  3051  0038' 2406'              	addwf	?___awdiv,w,c
  3052  003A' 6E0E'              	movwf	___wmul@multiplier,c
  3053  003C' 0E00               	movlw	0
  3054  003E' 2007'              	addwfc	?___awdiv+1,w,c
  3055  0040' 6E0F'              	movwf	___wmul@multiplier+1,c
  3056  0042' EC00' F000'        	call	___wmul	;wreg free
  3057  0046' 0E00'              	movlw	low __npowers_
  3058  0048' 240E'              	addwf	?___wmul,w,c
  3059  004A' 6EF6               	movwf	tblptrl,c
  3060  004C' 0E00'              	movlw	high __npowers_
  3061  004E' 200F'              	addwfc	?___wmul+1,w,c
  3062  0050' 6EF7               	movwf	tblptrh,c
  3063  0052'                    	if	0	;There are less than 3 active tblptr bytes
  3064  0052'                    	endif
  3065  0052' 0009               	tblrd		*+
  3066  0054' CFF5 F017'         	movff	tablat,___ftmul@f2
  3067  0058' 0009               	tblrd		*+
  3068  005A' CFF5 F018'         	movff	tablat,___ftmul@f2+1
  3069  005E' 000A               	tblrd		*-
  3070  0060' CFF5 F019'         	movff	tablat,___ftmul@f2+2
  3071  0064' 0E00               	movlw	0
  3072  0066' 6E09'              	movwf	___awdiv@divisor+1,c
  3073  0068' 0E64               	movlw	100
  3074  006A' 6E08'              	movwf	___awdiv@divisor,c
  3075  006C' C02C' F006'        	movff	fround@prec,___awdiv@dividend
  3076  0070' 6A07'              	clrf	___awdiv@dividend+1,c
  3077  0072' EC00' F000'        	call	___awdiv	;wreg free
  3078  0076' 0E12               	movlw	18
  3079  0078' 2406'              	addwf	?___awdiv,w,c
  3080  007A' 6E0E'              	movwf	___wmul@multiplier,c
  3081  007C' 0E00               	movlw	0
  3082  007E' 2007'              	addwfc	?___awdiv+1,w,c
  3083  0080' 6E0F'              	movwf	___wmul@multiplier+1,c
  3084  0082' 0E00               	movlw	0
  3085  0084' 6E11'              	movwf	___wmul@multiplicand+1,c
  3086  0086' 0E03               	movlw	3
  3087  0088' 6E10'              	movwf	___wmul@multiplicand,c
  3088  008A' EC00' F000'        	call	___wmul	;wreg free
  3089  008E' 0E00'              	movlw	low __npowers_
  3090  0090' 240E'              	addwf	?___wmul,w,c
  3091  0092' 6EF6               	movwf	tblptrl,c
  3092  0094' 0E00'              	movlw	high __npowers_
  3093  0096' 200F'              	addwfc	?___wmul+1,w,c
  3094  0098' 6EF7               	movwf	tblptrh,c
  3095  009A'                    	if	0	;There are less than 3 active tblptr bytes
  3096  009A'                    	endif
  3097  009A' 0009               	tblrd		*+
  3098  009C' CFF5 F014'         	movff	tablat,___ftmul@f1
  3099  00A0' 0009               	tblrd		*+
  3100  00A2' CFF5 F015'         	movff	tablat,___ftmul@f1+1
  3101  00A6' 000A               	tblrd		*-
  3102  00A8' CFF5 F016'         	movff	tablat,___ftmul@f1+2
  3103  00AC' EC00' F000'        	call	___ftmul	;wreg free
  3104  00B0' C014' F029'        	movff	?___ftmul,_fround$1494
  3105  00B4' C015' F02A'        	movff	?___ftmul+1,_fround$1494+1
  3106  00B8' C016' F02B'        	movff	?___ftmul+2,_fround$1494+2
  3107                           
  3108                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3109  00BC' 0E00               	movlw	0
  3110  00BE' 6E11'              	movwf	___wmul@multiplicand+1,c
  3111  00C0' 0E03               	movlw	3
  3112  00C2' 6E10'              	movwf	___wmul@multiplicand,c
  3113  00C4' 0E00               	movlw	0
  3114  00C6' 6E03'              	movwf	___awmod@divisor+1,c
  3115  00C8' 0E0A               	movlw	10
  3116  00CA' 6E02'              	movwf	___awmod@divisor,c
  3117  00CC' C02C' F000'        	movff	fround@prec,___awmod@dividend
  3118  00D0' 6A01'              	clrf	___awmod@dividend+1,c
  3119  00D2' EC00' F000'        	call	___awmod	;wreg free
  3120  00D6' C000' F00E'        	movff	?___awmod,___wmul@multiplier
  3121  00DA' C001' F00F'        	movff	?___awmod+1,___wmul@multiplier+1
  3122  00DE' EC00' F000'        	call	___wmul	;wreg free
  3123  00E2' 0E00'              	movlw	low __npowers_
  3124  00E4' 240E'              	addwf	?___wmul,w,c
  3125  00E6' 6EF6               	movwf	tblptrl,c
  3126  00E8' 0E00'              	movlw	high __npowers_
  3127  00EA' 200F'              	addwfc	?___wmul+1,w,c
  3128  00EC' 6EF7               	movwf	tblptrh,c
  3129  00EE'                    	if	0	;There are less than 3 active tblptr bytes
  3130  00EE'                    	endif
  3131  00EE' 0009               	tblrd		*+
  3132  00F0' CFF5 F017'         	movff	tablat,___ftmul@f2
  3133  00F4' 0009               	tblrd		*+
  3134  00F6' CFF5 F018'         	movff	tablat,___ftmul@f2+1
  3135  00FA' 000A               	tblrd		*-
  3136  00FC' CFF5 F019'         	movff	tablat,___ftmul@f2+2
  3137  0100' C029' F014'        	movff	_fround$1494,___ftmul@f1
  3138  0104' C02A' F015'        	movff	_fround$1494+1,___ftmul@f1+1
  3139  0108' C02B' F016'        	movff	_fround$1494+2,___ftmul@f1+2
  3140  010C' EC00' F000'        	call	___ftmul	;wreg free
  3141  0110' C014' F026'        	movff	?___ftmul,_fround$1495
  3142  0114' C015' F027'        	movff	?___ftmul+1,_fround$1495+1
  3143  0118' C016' F028'        	movff	?___ftmul+2,_fround$1495+2
  3144                           
  3145                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3146  011C' C026' F014'        	movff	_fround$1495,___ftmul@f1
  3147  0120' C027' F015'        	movff	_fround$1495+1,___ftmul@f1+1
  3148  0124' C028' F016'        	movff	_fround$1495+2,___ftmul@f1+2
  3149  0128' 0E00               	movlw	0
  3150  012A' 6E17'              	movwf	___ftmul@f2,c
  3151  012C' 0E00               	movlw	0
  3152  012E' 6E18'              	movwf	___ftmul@f2+1,c
  3153  0130' 0E3F               	movlw	63
  3154  0132' 6E19'              	movwf	___ftmul@f2+2,c
  3155  0134' EC00' F000'        	call	___ftmul	;wreg free
  3156  0138' C014' F023'        	movff	?___ftmul,?_fround
  3157  013C' C015' F024'        	movff	?___ftmul+1,?_fround+1
  3158  0140' C016' F025'        	movff	?___ftmul+2,?_fround+2
  3159  0144' 0012               	return	
  3160  0146'                    l279:
  3161                           
  3162                           ;doprnt.c: 415: else if(prec > 10)
  3163  0146' 0E0A               	movlw	10
  3164  0148' 642C'              	cpfsgt	fround@prec,c
  3165  014A' D063               	goto	l282
  3166                           
  3167                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3168  014C' 0E00               	movlw	0
  3169  014E' 6E11'              	movwf	___wmul@multiplicand+1,c
  3170  0150' 0E03               	movlw	3
  3171  0152' 6E10'              	movwf	___wmul@multiplicand,c
  3172  0154' 0E00               	movlw	0
  3173  0156' 6E03'              	movwf	___awmod@divisor+1,c
  3174  0158' 0E0A               	movlw	10
  3175  015A' 6E02'              	movwf	___awmod@divisor,c
  3176  015C' C02C' F000'        	movff	fround@prec,___awmod@dividend
  3177  0160' 6A01'              	clrf	___awmod@dividend+1,c
  3178  0162' EC00' F000'        	call	___awmod	;wreg free
  3179  0166' C000' F00E'        	movff	?___awmod,___wmul@multiplier
  3180  016A' C001' F00F'        	movff	?___awmod+1,___wmul@multiplier+1
  3181  016E' EC00' F000'        	call	___wmul	;wreg free
  3182  0172' 0E00'              	movlw	low __npowers_
  3183  0174' 240E'              	addwf	?___wmul,w,c
  3184  0176' 6EF6               	movwf	tblptrl,c
  3185  0178' 0E00'              	movlw	high __npowers_
  3186  017A' 200F'              	addwfc	?___wmul+1,w,c
  3187  017C' 6EF7               	movwf	tblptrh,c
  3188  017E'                    	if	0	;There are less than 3 active tblptr bytes
  3189  017E'                    	endif
  3190  017E' 0009               	tblrd		*+
  3191  0180' CFF5 F017'         	movff	tablat,___ftmul@f2
  3192  0184' 0009               	tblrd		*+
  3193  0186' CFF5 F018'         	movff	tablat,___ftmul@f2+1
  3194  018A' 000A               	tblrd		*-
  3195  018C' CFF5 F019'         	movff	tablat,___ftmul@f2+2
  3196  0190' 0E00               	movlw	0
  3197  0192' 6E09'              	movwf	___awdiv@divisor+1,c
  3198  0194' 0E0A               	movlw	10
  3199  0196' 6E08'              	movwf	___awdiv@divisor,c
  3200  0198' C02C' F006'        	movff	fround@prec,___awdiv@dividend
  3201  019C' 6A07'              	clrf	___awdiv@dividend+1,c
  3202  019E' EC00' F000'        	call	___awdiv	;wreg free
  3203  01A2' 0E09               	movlw	9
  3204  01A4' 2406'              	addwf	?___awdiv,w,c
  3205  01A6' 6E0E'              	movwf	___wmul@multiplier,c
  3206  01A8' 0E00               	movlw	0
  3207  01AA' 2007'              	addwfc	?___awdiv+1,w,c
  3208  01AC' 6E0F'              	movwf	___wmul@multiplier+1,c
  3209  01AE' 0E00               	movlw	0
  3210  01B0' 6E11'              	movwf	___wmul@multiplicand+1,c
  3211  01B2' 0E03               	movlw	3
  3212  01B4' 6E10'              	movwf	___wmul@multiplicand,c
  3213  01B6' EC00' F000'        	call	___wmul	;wreg free
  3214  01BA' 0E00'              	movlw	low __npowers_
  3215  01BC' 240E'              	addwf	?___wmul,w,c
  3216  01BE' 6EF6               	movwf	tblptrl,c
  3217  01C0' 0E00'              	movlw	high __npowers_
  3218  01C2' 200F'              	addwfc	?___wmul+1,w,c
  3219  01C4' 6EF7               	movwf	tblptrh,c
  3220  01C6'                    	if	0	;There are less than 3 active tblptr bytes
  3221  01C6'                    	endif
  3222  01C6' 0009               	tblrd		*+
  3223  01C8' CFF5 F014'         	movff	tablat,___ftmul@f1
  3224  01CC' 0009               	tblrd		*+
  3225  01CE' CFF5 F015'         	movff	tablat,___ftmul@f1+1
  3226  01D2' 000A               	tblrd		*-
  3227  01D4' CFF5 F016'         	movff	tablat,___ftmul@f1+2
  3228  01D8' EC00' F000'        	call	___ftmul	;wreg free
  3229  01DC' C014' F029'        	movff	?___ftmul,_fround$1494
  3230  01E0' C015' F02A'        	movff	?___ftmul+1,_fround$1494+1
  3231  01E4' C016' F02B'        	movff	?___ftmul+2,_fround$1494+2
  3232                           
  3233                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3234  01E8' C029' F014'        	movff	_fround$1494,___ftmul@f1
  3235  01EC' C02A' F015'        	movff	_fround$1494+1,___ftmul@f1+1
  3236  01F0' C02B' F016'        	movff	_fround$1494+2,___ftmul@f1+2
  3237  01F4' 0E00               	movlw	0
  3238  01F6' 6E17'              	movwf	___ftmul@f2,c
  3239  01F8' 0E00               	movlw	0
  3240  01FA' 6E18'              	movwf	___ftmul@f2+1,c
  3241  01FC' 0E3F               	movlw	63
  3242  01FE' 6E19'              	movwf	___ftmul@f2+2,c
  3243  0200' EC00' F000'        	call	___ftmul	;wreg free
  3244  0204' C014' F023'        	movff	?___ftmul,?_fround
  3245  0208' C015' F024'        	movff	?___ftmul+1,?_fround+1
  3246  020C' C016' F025'        	movff	?___ftmul+2,?_fround+2
  3247  0210' 0012               	return	
  3248  0212'                    l282:
  3249                           
  3250                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3251  0212' 502C'              	movf	fround@prec,w,c
  3252  0214' 0D03               	mullw	3
  3253  0216' 0E00'              	movlw	low __npowers_
  3254  0218' 24F3               	addwf	prodl,w,c
  3255  021A' 6EF6               	movwf	tblptrl,c
  3256  021C' 0E00'              	movlw	high __npowers_
  3257  021E' 20F4               	addwfc	prodh,w,c
  3258  0220' 6EF7               	movwf	tblptrh,c
  3259  0222'                    	if	0	;There are less than 3 active tblptr bytes
  3260  0222'                    	endif
  3261  0222' 0009               	tblrd		*+
  3262  0224' CFF5 F014'         	movff	tablat,___ftmul@f1
  3263  0228' 0009               	tblrd		*+
  3264  022A' CFF5 F015'         	movff	tablat,___ftmul@f1+1
  3265  022E' 000A               	tblrd		*-
  3266  0230' CFF5 F016'         	movff	tablat,___ftmul@f1+2
  3267  0234' 0E00               	movlw	0
  3268  0236' 6E17'              	movwf	___ftmul@f2,c
  3269  0238' 0E00               	movlw	0
  3270  023A' 6E18'              	movwf	___ftmul@f2+1,c
  3271  023C' 0E3F               	movlw	63
  3272  023E' 6E19'              	movwf	___ftmul@f2+2,c
  3273  0240' EC00' F000'        	call	___ftmul	;wreg free
  3274  0244' C014' F023'        	movff	?___ftmul,?_fround
  3275  0248' C015' F024'        	movff	?___ftmul+1,?_fround+1
  3276  024C' C016' F025'        	movff	?___ftmul+2,?_fround+2
  3277  0250' 0012               	return	
  3278  0252'                    __end_of_fround:
  3279                           	opt stack 0
  3280                           tblptru	equ	0xFF8
  3281                           tblptrh	equ	0xFF7
  3282                           tblptrl	equ	0xFF6
  3283                           tablat	equ	0xFF5
  3284                           prodh	equ	0xFF4
  3285                           prodl	equ	0xFF3
  3286                           wreg	equ	0xFE8
  3287                           indf2	equ	0xFDF
  3288                           postinc2	equ	0xFDE
  3289                           postdec2	equ	0xFDD
  3290                           fsr2h	equ	0xFDA
  3291                           fsr2l	equ	0xFD9
  3292                           status	equ	0xFD8
  3293                           
  3294 ;; *************** function ___wmul *****************
  3295 ;; Defined at:
  3296 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  3297 ;; Parameters:    Size  Location     Type
  3298 ;;  multiplier      2   14[COMRAM] unsigned int 
  3299 ;;  multiplicand    2   16[COMRAM] unsigned int 
  3300 ;; Auto vars:     Size  Location     Type
  3301 ;;  product         2   18[COMRAM] unsigned int 
  3302 ;; Return value:  Size  Location     Type
  3303 ;;                  2   14[COMRAM] unsigned int 
  3304 ;; Registers used:
  3305 ;;		wreg, status,2, status,0, prodl, prodh
  3306 ;; Tracked objects:
  3307 ;;		On entry : 0/0
  3308 ;;		On exit  : 0/0
  3309 ;;		Unchanged: 0/0
  3310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3311 ;;      Params:         4       0       0       0       0       0       0       0       0
  3312 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3313 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3314 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3315 ;;Total ram usage:        6 bytes
  3316 ;; Hardware stack levels used:    1
  3317 ;; This function calls:
  3318 ;;		Nothing
  3319 ;; This function is called by:
  3320 ;;		_fround
  3321 ;;		_scale
  3322 ;;		_sprintf
  3323 ;; This function uses a non-reentrant model
  3324 ;;
  3325                           
  3326                           	psect	text5
  3327  0000'                    __ptext5:
  3328                           	opt stack 0
  3329  0000'                    ___wmul:
  3330                           	opt stack 28
  3331                           
  3332                           ;incstack = 0
  3333  0000' 500E'              	movf	___wmul@multiplier,w,c
  3334  0002' 0210'              	mulwf	___wmul@multiplicand,c
  3335  0004' CFF3 F012'         	movff	prodl,___wmul@product
  3336  0008' CFF4 F013'         	movff	prodh,___wmul@product+1
  3337  000C' 500E'              	movf	___wmul@multiplier,w,c
  3338  000E' 0211'              	mulwf	___wmul@multiplicand+1,c
  3339  0010' 50F3               	movf	prodl,w,c
  3340  0012' 2613'              	addwf	___wmul@product+1,f,c
  3341  0014' 500F'              	movf	___wmul@multiplier+1,w,c
  3342  0016' 0210'              	mulwf	___wmul@multiplicand,c
  3343  0018' 50F3               	movf	prodl,w,c
  3344  001A' 2613'              	addwf	___wmul@product+1,f,c
  3345  001C' C012' F00E'        	movff	___wmul@product,?___wmul
  3346  0020' C013' F00F'        	movff	___wmul@product+1,?___wmul+1
  3347  0024' 0012               	return	
  3348  0026'                    __end_of___wmul:
  3349                           	opt stack 0
  3350                           tblptru	equ	0xFF8
  3351                           tblptrh	equ	0xFF7
  3352                           tblptrl	equ	0xFF6
  3353                           tablat	equ	0xFF5
  3354                           prodh	equ	0xFF4
  3355                           prodl	equ	0xFF3
  3356                           wreg	equ	0xFE8
  3357                           indf2	equ	0xFDF
  3358                           postinc2	equ	0xFDE
  3359                           postdec2	equ	0xFDD
  3360                           fsr2h	equ	0xFDA
  3361                           fsr2l	equ	0xFD9
  3362                           status	equ	0xFD8
  3363                           
  3364 ;; *************** function ___ftmul *****************
  3365 ;; Defined at:
  3366 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  3367 ;; Parameters:    Size  Location     Type
  3368 ;;  f1              3   20[COMRAM] float 
  3369 ;;  f2              3   23[COMRAM] float 
  3370 ;; Auto vars:     Size  Location     Type
  3371 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  3372 ;;  sign            1   34[COMRAM] unsigned char 
  3373 ;;  cntr            1   33[COMRAM] unsigned char 
  3374 ;;  exp             1   29[COMRAM] unsigned char 
  3375 ;; Return value:  Size  Location     Type
  3376 ;;                  3   20[COMRAM] float 
  3377 ;; Registers used:
  3378 ;;		wreg, status,2, status,0, cstack
  3379 ;; Tracked objects:
  3380 ;;		On entry : 0/0
  3381 ;;		On exit  : 0/0
  3382 ;;		Unchanged: 0/0
  3383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3384 ;;      Params:         6       0       0       0       0       0       0       0       0
  3385 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3386 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3387 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3388 ;;Total ram usage:       15 bytes
  3389 ;; Hardware stack levels used:    1
  3390 ;; Hardware stack levels required when called:    1
  3391 ;; This function calls:
  3392 ;;		___ftpack
  3393 ;; This function is called by:
  3394 ;;		_fround
  3395 ;;		_scale
  3396 ;;		_sprintf
  3397 ;; This function uses a non-reentrant model
  3398 ;;
  3399                           
  3400                           	psect	text6
  3401  0000'                    __ptext6:
  3402                           	opt stack 0
  3403  0000'                    ___ftmul:
  3404                           	opt stack 27
  3405                           
  3406                           ;incstack = 0
  3407  0000' C016' F01A'        	movff	___ftmul@f1+2,??___ftmul
  3408  0004' 6A00'              	clrf	(??___ftmul+1)& (0+255),c
  3409  0006' 6A00'              	clrf	(??___ftmul+2)& (0+255),c
  3410  0008' 3415'              	rlcf	___ftmul@f1+1,w,c
  3411  000A' 3600'              	rlcf	??___ftmul& (0+255),f,c
  3412  000C' E301               	bnc	u1951
  3413  000E' 8000'              	bsf	(??___ftmul+1)& (0+255),0,c
  3414  0010'                    u1951:
  3415  0010' 501A'              	movf	??___ftmul,w,c
  3416  0012' 6E1D'              	movwf	___ftmul@exp,c
  3417  0014' 501D'              	movf	___ftmul@exp,w,c
  3418  0016' A4D8               	btfss	status,2,c
  3419  0018' D007               	goto	l681
  3420  001A' 0E00               	movlw	0
  3421  001C' 6E14'              	movwf	?___ftmul,c
  3422  001E' 0E00               	movlw	0
  3423  0020' 6E15'              	movwf	?___ftmul+1,c
  3424  0022' 0E00               	movlw	0
  3425  0024' 6E16'              	movwf	?___ftmul+2,c
  3426  0026' 0012               	return	
  3427  0028'                    l681:
  3428  0028' C019' F01A'        	movff	___ftmul@f2+2,??___ftmul
  3429  002C' 6A00'              	clrf	(??___ftmul+1)& (0+255),c
  3430  002E' 6A00'              	clrf	(??___ftmul+2)& (0+255),c
  3431  0030' 3418'              	rlcf	___ftmul@f2+1,w,c
  3432  0032' 3600'              	rlcf	??___ftmul& (0+255),f,c
  3433  0034' E301               	bnc	u1971
  3434  0036' 8000'              	bsf	(??___ftmul+1)& (0+255),0,c
  3435  0038'                    u1971:
  3436  0038' 501A'              	movf	??___ftmul,w,c
  3437  003A' 6E22'              	movwf	___ftmul@sign,c
  3438  003C' 5022'              	movf	___ftmul@sign,w,c
  3439  003E' A4D8               	btfss	status,2,c
  3440  0040' D007               	goto	l683
  3441  0042' 0E00               	movlw	0
  3442  0044' 6E14'              	movwf	?___ftmul,c
  3443  0046' 0E00               	movlw	0
  3444  0048' 6E15'              	movwf	?___ftmul+1,c
  3445  004A' 0E00               	movlw	0
  3446  004C' 6E16'              	movwf	?___ftmul+2,c
  3447  004E' 0012               	return	
  3448  0050'                    l683:
  3449  0050' 5022'              	movf	___ftmul@sign,w,c
  3450  0052' 0F7B               	addlw	123
  3451  0054' 261D'              	addwf	___ftmul@exp,f,c
  3452  0056' C016' F022'        	movff	___ftmul@f1+2,___ftmul@sign
  3453  005A' 5019'              	movf	___ftmul@f2+2,w,c
  3454  005C' 1A22'              	xorwf	___ftmul@sign,f,c
  3455  005E' 0E80               	movlw	128
  3456  0060' 1622'              	andwf	___ftmul@sign,f,c
  3457  0062' 8E15'              	bsf	___ftmul@f1+1,7,c
  3458  0064' 8E18'              	bsf	___ftmul@f2+1,7,c
  3459  0066' 0EFF               	movlw	255
  3460  0068' 1617'              	andwf	___ftmul@f2,f,c
  3461  006A' 0EFF               	movlw	255
  3462  006C' 1618'              	andwf	___ftmul@f2+1,f,c
  3463  006E' 0E00               	movlw	0
  3464  0070' 1619'              	andwf	___ftmul@f2+2,f,c
  3465  0072' 0E00               	movlw	0
  3466  0074' 6E1E'              	movwf	___ftmul@f3_as_product,c
  3467  0076' 0E00               	movlw	0
  3468  0078' 6E1F'              	movwf	___ftmul@f3_as_product+1,c
  3469  007A' 0E00               	movlw	0
  3470  007C' 6E20'              	movwf	___ftmul@f3_as_product+2,c
  3471  007E' 0E07               	movlw	7
  3472  0080' 6E21'              	movwf	___ftmul@cntr,c
  3473  0082' A014'              	btfss	___ftmul@f1,0,c
  3474  0084' D006               	goto	l685
  3475  0086' 5017'              	movf	___ftmul@f2,w,c
  3476  0088' 261E'              	addwf	___ftmul@f3_as_product,f,c
  3477  008A' 5018'              	movf	___ftmul@f2+1,w,c
  3478  008C' 221F'              	addwfc	___ftmul@f3_as_product+1,f,c
  3479  008E' 5019'              	movf	___ftmul@f2+2,w,c
  3480  0090' 2220'              	addwfc	___ftmul@f3_as_product+2,f,c
  3481  0092'                    l685:
  3482  0092' 90D8               	bcf	status,0,c
  3483  0094' 3216'              	rrcf	___ftmul@f1+2,f,c
  3484  0096' 3215'              	rrcf	___ftmul@f1+1,f,c
  3485  0098' 3214'              	rrcf	___ftmul@f1,f,c
  3486  009A' 90D8               	bcf	status,0,c
  3487  009C' 3617'              	rlcf	___ftmul@f2,f,c
  3488  009E' 3618'              	rlcf	___ftmul@f2+1,f,c
  3489  00A0' 3619'              	rlcf	___ftmul@f2+2,f,c
  3490  00A2' 2E21'              	decfsz	___ftmul@cntr,f,c
  3491  00A4' D7EE               	goto	l684
  3492  00A6' 0E09               	movlw	9
  3493  00A8' 6E21'              	movwf	___ftmul@cntr,c
  3494  00AA' A014'              	btfss	___ftmul@f1,0,c
  3495  00AC' D006               	goto	l688
  3496  00AE' 5017'              	movf	___ftmul@f2,w,c
  3497  00B0' 261E'              	addwf	___ftmul@f3_as_product,f,c
  3498  00B2' 5018'              	movf	___ftmul@f2+1,w,c
  3499  00B4' 221F'              	addwfc	___ftmul@f3_as_product+1,f,c
  3500  00B6' 5019'              	movf	___ftmul@f2+2,w,c
  3501  00B8' 2220'              	addwfc	___ftmul@f3_as_product+2,f,c
  3502  00BA'                    l688:
  3503  00BA' 90D8               	bcf	status,0,c
  3504  00BC' 3216'              	rrcf	___ftmul@f1+2,f,c
  3505  00BE' 3215'              	rrcf	___ftmul@f1+1,f,c
  3506  00C0' 3214'              	rrcf	___ftmul@f1,f,c
  3507  00C2' 90D8               	bcf	status,0,c
  3508  00C4' 3220'              	rrcf	___ftmul@f3_as_product+2,f,c
  3509  00C6' 321F'              	rrcf	___ftmul@f3_as_product+1,f,c
  3510  00C8' 321E'              	rrcf	___ftmul@f3_as_product,f,c
  3511  00CA' 2E21'              	decfsz	___ftmul@cntr,f,c
  3512  00CC' D7EE               	goto	l687
  3513  00CE' C01E' F000'        	movff	___ftmul@f3_as_product,___ftpack@arg
  3514  00D2' C01F' F001'        	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3515  00D6' C020' F002'        	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3516  00DA' C01D' F003'        	movff	___ftmul@exp,___ftpack@exp
  3517  00DE' C022' F004'        	movff	___ftmul@sign,___ftpack@sign
  3518  00E2' EC00' F000'        	call	___ftpack	;wreg free
  3519  00E6' C000' F014'        	movff	?___ftpack,?___ftmul
  3520  00EA' C001' F015'        	movff	?___ftpack+1,?___ftmul+1
  3521  00EE' C002' F016'        	movff	?___ftpack+2,?___ftmul+2
  3522  00F2' 0012               	return	
  3523  00F4'                    __end_of___ftmul:
  3524                           	opt stack 0
  3525                           tblptru	equ	0xFF8
  3526                           tblptrh	equ	0xFF7
  3527                           tblptrl	equ	0xFF6
  3528                           tablat	equ	0xFF5
  3529                           prodh	equ	0xFF4
  3530                           prodl	equ	0xFF3
  3531                           wreg	equ	0xFE8
  3532                           indf2	equ	0xFDF
  3533                           postinc2	equ	0xFDE
  3534                           postdec2	equ	0xFDD
  3535                           fsr2h	equ	0xFDA
  3536                           fsr2l	equ	0xFD9
  3537                           status	equ	0xFD8
  3538                           
  3539 ;; *************** function ___awmod *****************
  3540 ;; Defined at:
  3541 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  3542 ;; Parameters:    Size  Location     Type
  3543 ;;  dividend        2    0[COMRAM] int 
  3544 ;;  divisor         2    2[COMRAM] int 
  3545 ;; Auto vars:     Size  Location     Type
  3546 ;;  sign            1    5[COMRAM] unsigned char 
  3547 ;;  counter         1    4[COMRAM] unsigned char 
  3548 ;; Return value:  Size  Location     Type
  3549 ;;                  2    0[COMRAM] int 
  3550 ;; Registers used:
  3551 ;;		wreg, status,2, status,0
  3552 ;; Tracked objects:
  3553 ;;		On entry : 0/0
  3554 ;;		On exit  : 0/0
  3555 ;;		Unchanged: 0/0
  3556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3557 ;;      Params:         4       0       0       0       0       0       0       0       0
  3558 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3559 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3560 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3561 ;;Total ram usage:        6 bytes
  3562 ;; Hardware stack levels used:    1
  3563 ;; This function calls:
  3564 ;;		Nothing
  3565 ;; This function is called by:
  3566 ;;		_fround
  3567 ;;		_scale
  3568 ;; This function uses a non-reentrant model
  3569 ;;
  3570                           
  3571                           	psect	text7
  3572  0000'                    __ptext7:
  3573                           	opt stack 0
  3574  0000'                    ___awmod:
  3575                           	opt stack 28
  3576                           
  3577                           ;incstack = 0
  3578  0000' 0E00               	movlw	0
  3579  0002' 6E05'              	movwf	___awmod@sign,c
  3580  0004' AE01'              	btfss	___awmod@dividend+1,7,c
  3581  0006' D006               	goto	l534
  3582  0008' 6C00'              	negf	___awmod@dividend,c
  3583  000A' 1E01'              	comf	___awmod@dividend+1,f,c
  3584  000C' B0D8               	btfsc	status,0,c
  3585  000E' 2A01'              	incf	___awmod@dividend+1,f,c
  3586  0010' 0E01               	movlw	1
  3587  0012' 6E05'              	movwf	___awmod@sign,c
  3588  0014'                    l534:
  3589  0014' AE03'              	btfss	___awmod@divisor+1,7,c
  3590  0016' D004               	goto	l535
  3591  0018' 6C02'              	negf	___awmod@divisor,c
  3592  001A' 1E03'              	comf	___awmod@divisor+1,f,c
  3593  001C' B0D8               	btfsc	status,0,c
  3594  001E' 2A03'              	incf	___awmod@divisor+1,f,c
  3595  0020'                    l535:
  3596  0020' 5002'              	movf	___awmod@divisor,w,c
  3597  0022' 1003'              	iorwf	___awmod@divisor+1,w,c
  3598  0024' B4D8               	btfsc	status,2,c
  3599  0026' D018               	goto	l542
  3600  0028' 0E01               	movlw	1
  3601  002A' 6E04'              	movwf	___awmod@counter,c
  3602  002C' D004               	goto	l537
  3603  002E' 90D8               	bcf	status,0,c
  3604  0030' 3602'              	rlcf	___awmod@divisor,f,c
  3605  0032' 3603'              	rlcf	___awmod@divisor+1,f,c
  3606  0034' 2A04'              	incf	___awmod@counter,f,c
  3607  0036'                    l537:
  3608  0036' AE03'              	btfss	___awmod@divisor+1,7,c
  3609  0038' D7FA               	goto	l538
  3610  003A'                    u2100:
  3611  003A' 5002'              	movf	___awmod@divisor,w,c
  3612  003C' 5C00'              	subwf	___awmod@dividend,w,c
  3613  003E' 5003'              	movf	___awmod@divisor+1,w,c
  3614  0040' 5801'              	subwfb	___awmod@dividend+1,w,c
  3615  0042' A0D8               	btfss	status,0,c
  3616  0044' D004               	goto	l541
  3617  0046' 5002'              	movf	___awmod@divisor,w,c
  3618  0048' 5E00'              	subwf	___awmod@dividend,f,c
  3619  004A' 5003'              	movf	___awmod@divisor+1,w,c
  3620  004C' 5A01'              	subwfb	___awmod@dividend+1,f,c
  3621  004E'                    l541:
  3622  004E' 90D8               	bcf	status,0,c
  3623  0050' 3203'              	rrcf	___awmod@divisor+1,f,c
  3624  0052' 3202'              	rrcf	___awmod@divisor,f,c
  3625  0054' 2E04'              	decfsz	___awmod@counter,f,c
  3626  0056' D7F1               	goto	u2100
  3627  0058'                    l542:
  3628  0058' 5005'              	movf	___awmod@sign,w,c
  3629  005A' B4D8               	btfsc	status,2,c
  3630  005C' D004               	goto	l543
  3631  005E' 6C00'              	negf	___awmod@dividend,c
  3632  0060' 1E01'              	comf	___awmod@dividend+1,f,c
  3633  0062' B0D8               	btfsc	status,0,c
  3634  0064' 2A01'              	incf	___awmod@dividend+1,f,c
  3635  0066'                    l543:
  3636  0066' C000' F000'        	movff	___awmod@dividend,?___awmod
  3637  006A' C001' F001'        	movff	___awmod@dividend+1,?___awmod+1
  3638  006E' 0012               	return	
  3639  0070'                    __end_of___awmod:
  3640                           	opt stack 0
  3641                           tblptru	equ	0xFF8
  3642                           tblptrh	equ	0xFF7
  3643                           tblptrl	equ	0xFF6
  3644                           tablat	equ	0xFF5
  3645                           prodh	equ	0xFF4
  3646                           prodl	equ	0xFF3
  3647                           wreg	equ	0xFE8
  3648                           indf2	equ	0xFDF
  3649                           postinc2	equ	0xFDE
  3650                           postdec2	equ	0xFDD
  3651                           fsr2h	equ	0xFDA
  3652                           fsr2l	equ	0xFD9
  3653                           status	equ	0xFD8
  3654                           
  3655 ;; *************** function ___awdiv *****************
  3656 ;; Defined at:
  3657 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  3658 ;; Parameters:    Size  Location     Type
  3659 ;;  dividend        2    6[COMRAM] int 
  3660 ;;  divisor         2    8[COMRAM] int 
  3661 ;; Auto vars:     Size  Location     Type
  3662 ;;  quotient        2   12[COMRAM] int 
  3663 ;;  sign            1   11[COMRAM] unsigned char 
  3664 ;;  counter         1   10[COMRAM] unsigned char 
  3665 ;; Return value:  Size  Location     Type
  3666 ;;                  2    6[COMRAM] int 
  3667 ;; Registers used:
  3668 ;;		wreg, status,2, status,0
  3669 ;; Tracked objects:
  3670 ;;		On entry : 0/0
  3671 ;;		On exit  : 0/0
  3672 ;;		Unchanged: 0/0
  3673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3674 ;;      Params:         4       0       0       0       0       0       0       0       0
  3675 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3676 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3677 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3678 ;;Total ram usage:        8 bytes
  3679 ;; Hardware stack levels used:    1
  3680 ;; This function calls:
  3681 ;;		Nothing
  3682 ;; This function is called by:
  3683 ;;		_fround
  3684 ;;		_scale
  3685 ;;		_sprintf
  3686 ;; This function uses a non-reentrant model
  3687 ;;
  3688                           
  3689                           	psect	text8
  3690  0000'                    __ptext8:
  3691                           	opt stack 0
  3692  0000'                    ___awdiv:
  3693                           	opt stack 28
  3694                           
  3695                           ;incstack = 0
  3696  0000' 0E00               	movlw	0
  3697  0002' 6E0B'              	movwf	___awdiv@sign,c
  3698  0004' AE09'              	btfss	___awdiv@divisor+1,7,c
  3699  0006' D006               	goto	l521
  3700  0008' 6C08'              	negf	___awdiv@divisor,c
  3701  000A' 1E09'              	comf	___awdiv@divisor+1,f,c
  3702  000C' B0D8               	btfsc	status,0,c
  3703  000E' 2A09'              	incf	___awdiv@divisor+1,f,c
  3704  0010' 0E01               	movlw	1
  3705  0012' 6E0B'              	movwf	___awdiv@sign,c
  3706  0014'                    l521:
  3707  0014' AE07'              	btfss	___awdiv@dividend+1,7,c
  3708  0016' D006               	goto	l522
  3709  0018' 6C06'              	negf	___awdiv@dividend,c
  3710  001A' 1E07'              	comf	___awdiv@dividend+1,f,c
  3711  001C' B0D8               	btfsc	status,0,c
  3712  001E' 2A07'              	incf	___awdiv@dividend+1,f,c
  3713  0020' 0E01               	movlw	1
  3714  0022' 1A0B'              	xorwf	___awdiv@sign,f,c
  3715  0024'                    l522:
  3716  0024' 0E00               	movlw	0
  3717  0026' 6E0D'              	movwf	___awdiv@quotient+1,c
  3718  0028' 0E00               	movlw	0
  3719  002A' 6E0C'              	movwf	___awdiv@quotient,c
  3720  002C' 5008'              	movf	___awdiv@divisor,w,c
  3721  002E' 1009'              	iorwf	___awdiv@divisor+1,w,c
  3722  0030' B4D8               	btfsc	status,2,c
  3723  0032' D01C               	goto	l529
  3724  0034' 0E01               	movlw	1
  3725  0036' 6E0A'              	movwf	___awdiv@counter,c
  3726  0038' D004               	goto	l524
  3727  003A' 90D8               	bcf	status,0,c
  3728  003C' 3608'              	rlcf	___awdiv@divisor,f,c
  3729  003E' 3609'              	rlcf	___awdiv@divisor+1,f,c
  3730  0040' 2A0A'              	incf	___awdiv@counter,f,c
  3731  0042'                    l524:
  3732  0042' AE09'              	btfss	___awdiv@divisor+1,7,c
  3733  0044' D7FA               	goto	l525
  3734  0046'                    u2040:
  3735  0046' 90D8               	bcf	status,0,c
  3736  0048' 360C'              	rlcf	___awdiv@quotient,f,c
  3737  004A' 360D'              	rlcf	___awdiv@quotient+1,f,c
  3738  004C' 5008'              	movf	___awdiv@divisor,w,c
  3739  004E' 5C06'              	subwf	___awdiv@dividend,w,c
  3740  0050' 5009'              	movf	___awdiv@divisor+1,w,c
  3741  0052' 5807'              	subwfb	___awdiv@dividend+1,w,c
  3742  0054' A0D8               	btfss	status,0,c
  3743  0056' D005               	goto	l528
  3744  0058' 5008'              	movf	___awdiv@divisor,w,c
  3745  005A' 5E06'              	subwf	___awdiv@dividend,f,c
  3746  005C' 5009'              	movf	___awdiv@divisor+1,w,c
  3747  005E' 5A07'              	subwfb	___awdiv@dividend+1,f,c
  3748  0060' 800C'              	bsf	___awdiv@quotient,0,c
  3749  0062'                    l528:
  3750  0062' 90D8               	bcf	status,0,c
  3751  0064' 3209'              	rrcf	___awdiv@divisor+1,f,c
  3752  0066' 3208'              	rrcf	___awdiv@divisor,f,c
  3753  0068' 2E0A'              	decfsz	___awdiv@counter,f,c
  3754  006A' D7ED               	goto	u2040
  3755  006C'                    l529:
  3756  006C' 500B'              	movf	___awdiv@sign,w,c
  3757  006E' B4D8               	btfsc	status,2,c
  3758  0070' D004               	goto	l530
  3759  0072' 6C0C'              	negf	___awdiv@quotient,c
  3760  0074' 1E0D'              	comf	___awdiv@quotient+1,f,c
  3761  0076' B0D8               	btfsc	status,0,c
  3762  0078' 2A0D'              	incf	___awdiv@quotient+1,f,c
  3763  007A'                    l530:
  3764  007A' C00C' F006'        	movff	___awdiv@quotient,?___awdiv
  3765  007E' C00D' F007'        	movff	___awdiv@quotient+1,?___awdiv+1
  3766  0082' 0012               	return	
  3767  0084'                    __end_of___awdiv:
  3768                           	opt stack 0
  3769                           tblptru	equ	0xFF8
  3770                           tblptrh	equ	0xFF7
  3771                           tblptrl	equ	0xFF6
  3772                           tablat	equ	0xFF5
  3773                           prodh	equ	0xFF4
  3774                           prodl	equ	0xFF3
  3775                           wreg	equ	0xFE8
  3776                           indf2	equ	0xFDF
  3777                           postinc2	equ	0xFDE
  3778                           postdec2	equ	0xFDD
  3779                           fsr2h	equ	0xFDA
  3780                           fsr2l	equ	0xFD9
  3781                           status	equ	0xFD8
  3782                           
  3783 ;; *************** function __tdiv_to_l_ *****************
  3784 ;; Defined at:
  3785 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdivl.c"
  3786 ;; Parameters:    Size  Location     Type
  3787 ;;  f1              3    0[COMRAM] float 
  3788 ;;  f2              3    3[COMRAM] float 
  3789 ;; Auto vars:     Size  Location     Type
  3790 ;;  quot            4    9[COMRAM] unsigned long 
  3791 ;;  exp1            1   14[COMRAM] unsigned char 
  3792 ;;  cntr            1   13[COMRAM] unsigned char 
  3793 ;; Return value:  Size  Location     Type
  3794 ;;                  4    0[COMRAM] unsigned long 
  3795 ;; Registers used:
  3796 ;;		wreg, status,2, status,0
  3797 ;; Tracked objects:
  3798 ;;		On entry : 0/0
  3799 ;;		On exit  : 0/0
  3800 ;;		Unchanged: 0/0
  3801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3802 ;;      Params:         6       0       0       0       0       0       0       0       0
  3803 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3804 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3805 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3806 ;;Total ram usage:       15 bytes
  3807 ;; Hardware stack levels used:    1
  3808 ;; This function calls:
  3809 ;;		Nothing
  3810 ;; This function is called by:
  3811 ;;		_sprintf
  3812 ;; This function uses a non-reentrant model
  3813 ;;
  3814                           
  3815                           	psect	text9
  3816  0000'                    __ptext9:
  3817                           	opt stack 0
  3818  0000'                    __tdiv_to_l_:
  3819                           	opt stack 29
  3820                           
  3821                           ;incstack = 0
  3822  0000' C002' F006'        	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  3823  0004' 6A00'              	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3824  0006' 6A00'              	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3825  0008' 3401'              	rlcf	__tdiv_to_l_@f1+1,w,c
  3826  000A' 3600'              	rlcf	??__tdiv_to_l_& (0+255),f,c
  3827  000C' E301               	bnc	u2351
  3828  000E' 8000'              	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3829  0010'                    u2351:
  3830  0010' 5006'              	movf	??__tdiv_to_l_,w,c
  3831  0012' 6E0E'              	movwf	__tdiv_to_l_@exp1,c
  3832  0014' 500E'              	movf	__tdiv_to_l_@exp1,w,c
  3833  0016' A4D8               	btfss	status,2,c
  3834  0018' D009               	goto	l657
  3835  001A' 0E00               	movlw	0
  3836  001C' 6E00'              	movwf	?__tdiv_to_l_,c
  3837  001E' 0E00               	movlw	0
  3838  0020' 6E01'              	movwf	?__tdiv_to_l_+1,c
  3839  0022' 0E00               	movlw	0
  3840  0024' 6E02'              	movwf	?__tdiv_to_l_+2,c
  3841  0026' 0E00               	movlw	0
  3842  0028' 6E03'              	movwf	?__tdiv_to_l_+3,c
  3843  002A' 0012               	return	
  3844  002C'                    l657:
  3845  002C' C005' F006'        	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  3846  0030' 6A00'              	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3847  0032' 6A00'              	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3848  0034' 3404'              	rlcf	__tdiv_to_l_@f2+1,w,c
  3849  0036' 3600'              	rlcf	??__tdiv_to_l_& (0+255),f,c
  3850  0038' E301               	bnc	u2371
  3851  003A' 8000'              	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3852  003C'                    u2371:
  3853  003C' 5006'              	movf	??__tdiv_to_l_,w,c
  3854  003E' 6E0D'              	movwf	__tdiv_to_l_@cntr,c
  3855  0040' 500D'              	movf	__tdiv_to_l_@cntr,w,c
  3856  0042' A4D8               	btfss	status,2,c
  3857  0044' D009               	goto	l659
  3858  0046' 0E00               	movlw	0
  3859  0048' 6E00'              	movwf	?__tdiv_to_l_,c
  3860  004A' 0E00               	movlw	0
  3861  004C' 6E01'              	movwf	?__tdiv_to_l_+1,c
  3862  004E' 0E00               	movlw	0
  3863  0050' 6E02'              	movwf	?__tdiv_to_l_+2,c
  3864  0052' 0E00               	movlw	0
  3865  0054' 6E03'              	movwf	?__tdiv_to_l_+3,c
  3866  0056' 0012               	return	
  3867  0058'                    l659:
  3868  0058' 8E01'              	bsf	__tdiv_to_l_@f1+1,7,c
  3869  005A' 0EFF               	movlw	255
  3870  005C' 1600'              	andwf	__tdiv_to_l_@f1,f,c
  3871  005E' 0EFF               	movlw	255
  3872  0060' 1601'              	andwf	__tdiv_to_l_@f1+1,f,c
  3873  0062' 0E00               	movlw	0
  3874  0064' 1602'              	andwf	__tdiv_to_l_@f1+2,f,c
  3875  0066' 8E04'              	bsf	__tdiv_to_l_@f2+1,7,c
  3876  0068' 0EFF               	movlw	255
  3877  006A' 1603'              	andwf	__tdiv_to_l_@f2,f,c
  3878  006C' 0EFF               	movlw	255
  3879  006E' 1604'              	andwf	__tdiv_to_l_@f2+1,f,c
  3880  0070' 0E00               	movlw	0
  3881  0072' 1605'              	andwf	__tdiv_to_l_@f2+2,f,c
  3882  0074' 0E00               	movlw	0
  3883  0076' 6E09'              	movwf	__tdiv_to_l_@quot,c
  3884  0078' 0E00               	movlw	0
  3885  007A' 6E0A'              	movwf	__tdiv_to_l_@quot+1,c
  3886  007C' 0E00               	movlw	0
  3887  007E' 6E0B'              	movwf	__tdiv_to_l_@quot+2,c
  3888  0080' 0E00               	movlw	0
  3889  0082' 6E0C'              	movwf	__tdiv_to_l_@quot+3,c
  3890  0084' 0E7F               	movlw	127
  3891  0086' 5E0E'              	subwf	__tdiv_to_l_@exp1,f,c
  3892  0088' 500D'              	movf	__tdiv_to_l_@cntr,w,c
  3893  008A' 0F98               	addlw	152
  3894  008C' 5E0E'              	subwf	__tdiv_to_l_@exp1,f,c
  3895  008E' 0E18               	movlw	24
  3896  0090' 6E0D'              	movwf	__tdiv_to_l_@cntr,c
  3897  0092'                    l660:
  3898  0092' 90D8               	bcf	status,0,c
  3899  0094' 3609'              	rlcf	__tdiv_to_l_@quot,f,c
  3900  0096' 360A'              	rlcf	__tdiv_to_l_@quot+1,f,c
  3901  0098' 360B'              	rlcf	__tdiv_to_l_@quot+2,f,c
  3902  009A' 360C'              	rlcf	__tdiv_to_l_@quot+3,f,c
  3903  009C' 5003'              	movf	__tdiv_to_l_@f2,w,c
  3904  009E' 5C00'              	subwf	__tdiv_to_l_@f1,w,c
  3905  00A0' 5004'              	movf	__tdiv_to_l_@f2+1,w,c
  3906  00A2' 5801'              	subwfb	__tdiv_to_l_@f1+1,w,c
  3907  00A4' 5005'              	movf	__tdiv_to_l_@f2+2,w,c
  3908  00A6' 5802'              	subwfb	__tdiv_to_l_@f1+2,w,c
  3909  00A8' A0D8               	btfss	status,0,c
  3910  00AA' D007               	goto	l661
  3911  00AC' 5003'              	movf	__tdiv_to_l_@f2,w,c
  3912  00AE' 5E00'              	subwf	__tdiv_to_l_@f1,f,c
  3913  00B0' 5004'              	movf	__tdiv_to_l_@f2+1,w,c
  3914  00B2' 5A01'              	subwfb	__tdiv_to_l_@f1+1,f,c
  3915  00B4' 5005'              	movf	__tdiv_to_l_@f2+2,w,c
  3916  00B6' 5A02'              	subwfb	__tdiv_to_l_@f1+2,f,c
  3917  00B8' 8009'              	bsf	__tdiv_to_l_@quot,0,c
  3918  00BA'                    l661:
  3919  00BA' 90D8               	bcf	status,0,c
  3920  00BC' 3600'              	rlcf	__tdiv_to_l_@f1,f,c
  3921  00BE' 3601'              	rlcf	__tdiv_to_l_@f1+1,f,c
  3922  00C0' 3602'              	rlcf	__tdiv_to_l_@f1+2,f,c
  3923  00C2' 2E0D'              	decfsz	__tdiv_to_l_@cntr,f,c
  3924  00C4' D7E6               	goto	l660
  3925  00C6' AE0E'              	btfss	__tdiv_to_l_@exp1,7,c
  3926  00C8' D016               	goto	l663
  3927  00CA' 500E'              	movf	__tdiv_to_l_@exp1,w,c
  3928  00CC' 0A80               	xorlw	128
  3929  00CE' 0F97               	addlw	151
  3930  00D0' B0D8               	btfsc	status,0,c
  3931  00D2' D009               	goto	l664
  3932  00D4' 0E00               	movlw	0
  3933  00D6' 6E00'              	movwf	?__tdiv_to_l_,c
  3934  00D8' 0E00               	movlw	0
  3935  00DA' 6E01'              	movwf	?__tdiv_to_l_+1,c
  3936  00DC' 0E00               	movlw	0
  3937  00DE' 6E02'              	movwf	?__tdiv_to_l_+2,c
  3938  00E0' 0E00               	movlw	0
  3939  00E2' 6E03'              	movwf	?__tdiv_to_l_+3,c
  3940  00E4' 0012               	return	
  3941  00E6'                    l664:
  3942  00E6' 90D8               	bcf	status,0,c
  3943  00E8' 320C'              	rrcf	__tdiv_to_l_@quot+3,f,c
  3944  00EA' 320B'              	rrcf	__tdiv_to_l_@quot+2,f,c
  3945  00EC' 320A'              	rrcf	__tdiv_to_l_@quot+1,f,c
  3946  00EE' 3209'              	rrcf	__tdiv_to_l_@quot,f,c
  3947  00F0' 3E0E'              	incfsz	__tdiv_to_l_@exp1,f,c
  3948  00F2' D7F9               	goto	l664
  3949  00F4' D015               	goto	u2430
  3950  00F6'                    l663:
  3951  00F6' 0E17               	movlw	23
  3952  00F8' 640E'              	cpfsgt	__tdiv_to_l_@exp1,c
  3953  00FA' D00F               	goto	l669
  3954  00FC' 0E00               	movlw	0
  3955  00FE' 6E00'              	movwf	?__tdiv_to_l_,c
  3956  0100' 0E00               	movlw	0
  3957  0102' 6E01'              	movwf	?__tdiv_to_l_+1,c
  3958  0104' 0E00               	movlw	0
  3959  0106' 6E02'              	movwf	?__tdiv_to_l_+2,c
  3960  0108' 0E00               	movlw	0
  3961  010A' 6E03'              	movwf	?__tdiv_to_l_+3,c
  3962  010C' 0012               	return	
  3963  010E' 90D8               	bcf	status,0,c
  3964  0110' 3609'              	rlcf	__tdiv_to_l_@quot,f,c
  3965  0112' 360A'              	rlcf	__tdiv_to_l_@quot+1,f,c
  3966  0114' 360B'              	rlcf	__tdiv_to_l_@quot+2,f,c
  3967  0116' 360C'              	rlcf	__tdiv_to_l_@quot+3,f,c
  3968  0118' 060E'              	decf	__tdiv_to_l_@exp1,f,c
  3969  011A'                    l669:
  3970  011A' 500E'              	movf	__tdiv_to_l_@exp1,w,c
  3971  011C' A4D8               	btfss	status,2,c
  3972  011E' D7F7               	goto	l670
  3973  0120'                    u2430:
  3974  0120' C009' F000'        	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  3975  0124' C00A' F001'        	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  3976  0128' C00B' F002'        	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  3977  012C' C00C' F003'        	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  3978  0130' 0012               	return		;funcret
  3979  0132'                    __end_of__tdiv_to_l_:
  3980                           	opt stack 0
  3981                           tblptru	equ	0xFF8
  3982                           tblptrh	equ	0xFF7
  3983                           tblptrl	equ	0xFF6
  3984                           tablat	equ	0xFF5
  3985                           prodh	equ	0xFF4
  3986                           prodl	equ	0xFF3
  3987                           wreg	equ	0xFE8
  3988                           indf2	equ	0xFDF
  3989                           postinc2	equ	0xFDE
  3990                           postdec2	equ	0xFDD
  3991                           fsr2h	equ	0xFDA
  3992                           fsr2l	equ	0xFD9
  3993                           status	equ	0xFD8
  3994                           
  3995 ;; *************** function __div_to_l_ *****************
  3996 ;; Defined at:
  3997 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fldivl.c"
  3998 ;; Parameters:    Size  Location     Type
  3999 ;;  f1              3    0[COMRAM] unsigned long 
  4000 ;;  f2              3    3[COMRAM] unsigned long 
  4001 ;; Auto vars:     Size  Location     Type
  4002 ;;  quot            4    6[COMRAM] unsigned long 
  4003 ;;  exp1            1   11[COMRAM] unsigned char 
  4004 ;;  cntr            1   10[COMRAM] unsigned char 
  4005 ;; Return value:  Size  Location     Type
  4006 ;;                  4    0[COMRAM] unsigned long 
  4007 ;; Registers used:
  4008 ;;		wreg, status,2, status,0
  4009 ;; Tracked objects:
  4010 ;;		On entry : 0/0
  4011 ;;		On exit  : 0/0
  4012 ;;		Unchanged: 0/0
  4013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4014 ;;      Params:         6       0       0       0       0       0       0       0       0
  4015 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4016 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4017 ;;      Totals:        12       0       0       0       0       0       0       0       0
  4018 ;;Total ram usage:       12 bytes
  4019 ;; Hardware stack levels used:    1
  4020 ;; This function calls:
  4021 ;;		Nothing
  4022 ;; This function is called by:
  4023 ;;		_sprintf
  4024 ;; This function uses a non-reentrant model
  4025 ;;
  4026                           
  4027                           	psect	text10
  4028  0000'                    __ptext10:
  4029                           	opt stack 0
  4030  0000'                    __div_to_l_:
  4031                           	opt stack 29
  4032                           
  4033                           ;incstack = 0
  4034  0000' 3402'              	rlcf	__div_to_l_@f1+2,w,c
  4035  0002' 3403'              	rlcf	__div_to_l_@f1+3,w,c
  4036  0004' 6E0B'              	movwf	__div_to_l_@exp1,c
  4037  0006' 500B'              	movf	__div_to_l_@exp1,w,c
  4038  0008' A4D8               	btfss	status,2,c
  4039  000A' D009               	goto	l553
  4040  000C' 0E00               	movlw	0
  4041  000E' 6E00'              	movwf	?__div_to_l_,c
  4042  0010' 0E00               	movlw	0
  4043  0012' 6E01'              	movwf	?__div_to_l_+1,c
  4044  0014' 0E00               	movlw	0
  4045  0016' 6E02'              	movwf	?__div_to_l_+2,c
  4046  0018' 0E00               	movlw	0
  4047  001A' 6E03'              	movwf	?__div_to_l_+3,c
  4048  001C' 0012               	return	
  4049  001E'                    l553:
  4050  001E' 3405'              	rlcf	__div_to_l_@f2+2,w,c
  4051  0020' 3406'              	rlcf	__div_to_l_@f2+3,w,c
  4052  0022' 6E0A'              	movwf	__div_to_l_@cntr,c
  4053  0024' 500A'              	movf	__div_to_l_@cntr,w,c
  4054  0026' A4D8               	btfss	status,2,c
  4055  0028' D009               	goto	l555
  4056  002A' 0E00               	movlw	0
  4057  002C' 6E00'              	movwf	?__div_to_l_,c
  4058  002E' 0E00               	movlw	0
  4059  0030' 6E01'              	movwf	?__div_to_l_+1,c
  4060  0032' 0E00               	movlw	0
  4061  0034' 6E02'              	movwf	?__div_to_l_+2,c
  4062  0036' 0E00               	movlw	0
  4063  0038' 6E03'              	movwf	?__div_to_l_+3,c
  4064  003A' 0012               	return	
  4065  003C'                    l555:
  4066  003C' 8E02'              	bsf	__div_to_l_@f1+2,7,c
  4067  003E' 0EFF               	movlw	255
  4068  0040' 1600'              	andwf	__div_to_l_@f1,f,c
  4069  0042' 0EFF               	movlw	255
  4070  0044' 1601'              	andwf	__div_to_l_@f1+1,f,c
  4071  0046' 0EFF               	movlw	255
  4072  0048' 1602'              	andwf	__div_to_l_@f1+2,f,c
  4073  004A' 0E00               	movlw	0
  4074  004C' 1603'              	andwf	__div_to_l_@f1+3,f,c
  4075  004E' 8E05'              	bsf	__div_to_l_@f2+2,7,c
  4076  0050' 0EFF               	movlw	255
  4077  0052' 1603'              	andwf	__div_to_l_@f2,f,c
  4078  0054' 0EFF               	movlw	255
  4079  0056' 1604'              	andwf	__div_to_l_@f2+1,f,c
  4080  0058' 0EFF               	movlw	255
  4081  005A' 1605'              	andwf	__div_to_l_@f2+2,f,c
  4082  005C' 0E00               	movlw	0
  4083  005E' 1606'              	andwf	__div_to_l_@f2+3,f,c
  4084  0060' 0E00               	movlw	0
  4085  0062' 6E06'              	movwf	__div_to_l_@quot,c
  4086  0064' 0E00               	movlw	0
  4087  0066' 6E07'              	movwf	__div_to_l_@quot+1,c
  4088  0068' 0E00               	movlw	0
  4089  006A' 6E08'              	movwf	__div_to_l_@quot+2,c
  4090  006C' 0E00               	movlw	0
  4091  006E' 6E09'              	movwf	__div_to_l_@quot+3,c
  4092  0070' 0E7F               	movlw	127
  4093  0072' 5E0B'              	subwf	__div_to_l_@exp1,f,c
  4094  0074' 500A'              	movf	__div_to_l_@cntr,w,c
  4095  0076' 0FA0               	addlw	160
  4096  0078' 5E0B'              	subwf	__div_to_l_@exp1,f,c
  4097  007A' 0E20               	movlw	32
  4098  007C' 6E0A'              	movwf	__div_to_l_@cntr,c
  4099  007E' 90D8               	bcf	status,0,c
  4100  0080' 3606'              	rlcf	__div_to_l_@quot,f,c
  4101  0082' 3607'              	rlcf	__div_to_l_@quot+1,f,c
  4102  0084' 3608'              	rlcf	__div_to_l_@quot+2,f,c
  4103  0086' 3609'              	rlcf	__div_to_l_@quot+3,f,c
  4104  0088' 5003'              	movf	__div_to_l_@f2,w,c
  4105  008A' 5C00'              	subwf	__div_to_l_@f1,w,c
  4106  008C' 5004'              	movf	__div_to_l_@f2+1,w,c
  4107  008E' 5801'              	subwfb	__div_to_l_@f1+1,w,c
  4108  0090' 5005'              	movf	__div_to_l_@f2+2,w,c
  4109  0092' 5802'              	subwfb	__div_to_l_@f1+2,w,c
  4110  0094' 5006'              	movf	__div_to_l_@f2+3,w,c
  4111  0096' 5803'              	subwfb	__div_to_l_@f1+3,w,c
  4112  0098' A0D8               	btfss	status,0,c
  4113  009A' D009               	goto	l557
  4114  009C' 5003'              	movf	__div_to_l_@f2,w,c
  4115  009E' 5E00'              	subwf	__div_to_l_@f1,f,c
  4116  00A0' 5004'              	movf	__div_to_l_@f2+1,w,c
  4117  00A2' 5A01'              	subwfb	__div_to_l_@f1+1,f,c
  4118  00A4' 5005'              	movf	__div_to_l_@f2+2,w,c
  4119  00A6' 5A02'              	subwfb	__div_to_l_@f1+2,f,c
  4120  00A8' 5006'              	movf	__div_to_l_@f2+3,w,c
  4121  00AA' 5A03'              	subwfb	__div_to_l_@f1+3,f,c
  4122  00AC' 8006'              	bsf	__div_to_l_@quot,0,c
  4123  00AE'                    l557:
  4124  00AE' 90D8               	bcf	status,0,c
  4125  00B0' 3600'              	rlcf	__div_to_l_@f1,f,c
  4126  00B2' 3601'              	rlcf	__div_to_l_@f1+1,f,c
  4127  00B4' 3602'              	rlcf	__div_to_l_@f1+2,f,c
  4128  00B6' 3603'              	rlcf	__div_to_l_@f1+3,f,c
  4129  00B8' 2E0A'              	decfsz	__div_to_l_@cntr,f,c
  4130  00BA' D7E1               	goto	l556
  4131  00BC' AE0B'              	btfss	__div_to_l_@exp1,7,c
  4132  00BE' D016               	goto	l559
  4133  00C0' 500B'              	movf	__div_to_l_@exp1,w,c
  4134  00C2' 0A80               	xorlw	128
  4135  00C4' 0F9F               	addlw	159
  4136  00C6' B0D8               	btfsc	status,0,c
  4137  00C8' D009               	goto	l560
  4138  00CA' 0E00               	movlw	0
  4139  00CC' 6E00'              	movwf	?__div_to_l_,c
  4140  00CE' 0E00               	movlw	0
  4141  00D0' 6E01'              	movwf	?__div_to_l_+1,c
  4142  00D2' 0E00               	movlw	0
  4143  00D4' 6E02'              	movwf	?__div_to_l_+2,c
  4144  00D6' 0E00               	movlw	0
  4145  00D8' 6E03'              	movwf	?__div_to_l_+3,c
  4146  00DA' 0012               	return	
  4147  00DC'                    l560:
  4148  00DC' 90D8               	bcf	status,0,c
  4149  00DE' 3209'              	rrcf	__div_to_l_@quot+3,f,c
  4150  00E0' 3208'              	rrcf	__div_to_l_@quot+2,f,c
  4151  00E2' 3207'              	rrcf	__div_to_l_@quot+1,f,c
  4152  00E4' 3206'              	rrcf	__div_to_l_@quot,f,c
  4153  00E6' 3E0B'              	incfsz	__div_to_l_@exp1,f,c
  4154  00E8' D7F9               	goto	l560
  4155  00EA' D015               	goto	u2500
  4156  00EC'                    l559:
  4157  00EC' 0E1F               	movlw	31
  4158  00EE' 640B'              	cpfsgt	__div_to_l_@exp1,c
  4159  00F0' D00F               	goto	l565
  4160  00F2' 0E00               	movlw	0
  4161  00F4' 6E00'              	movwf	?__div_to_l_,c
  4162  00F6' 0E00               	movlw	0
  4163  00F8' 6E01'              	movwf	?__div_to_l_+1,c
  4164  00FA' 0E00               	movlw	0
  4165  00FC' 6E02'              	movwf	?__div_to_l_+2,c
  4166  00FE' 0E00               	movlw	0
  4167  0100' 6E03'              	movwf	?__div_to_l_+3,c
  4168  0102' 0012               	return	
  4169  0104' 90D8               	bcf	status,0,c
  4170  0106' 3606'              	rlcf	__div_to_l_@quot,f,c
  4171  0108' 3607'              	rlcf	__div_to_l_@quot+1,f,c
  4172  010A' 3608'              	rlcf	__div_to_l_@quot+2,f,c
  4173  010C' 3609'              	rlcf	__div_to_l_@quot+3,f,c
  4174  010E' 060B'              	decf	__div_to_l_@exp1,f,c
  4175  0110'                    l565:
  4176  0110' 500B'              	movf	__div_to_l_@exp1,w,c
  4177  0112' A4D8               	btfss	status,2,c
  4178  0114' D7F7               	goto	l566
  4179  0116'                    u2500:
  4180  0116' C006' F000'        	movff	__div_to_l_@quot,?__div_to_l_
  4181  011A' C007' F001'        	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4182  011E' C008' F002'        	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4183  0122' C009' F003'        	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4184  0126' 0012               	return		;funcret
  4185  0128'                    __end_of__div_to_l_:
  4186                           	opt stack 0
  4187                           tblptru	equ	0xFF8
  4188                           tblptrh	equ	0xFF7
  4189                           tblptrl	equ	0xFF6
  4190                           tablat	equ	0xFF5
  4191                           prodh	equ	0xFF4
  4192                           prodl	equ	0xFF3
  4193                           wreg	equ	0xFE8
  4194                           indf2	equ	0xFDF
  4195                           postinc2	equ	0xFDE
  4196                           postdec2	equ	0xFDD
  4197                           fsr2h	equ	0xFDA
  4198                           fsr2l	equ	0xFD9
  4199                           status	equ	0xFD8
  4200                           
  4201 ;; *************** function ___lltoft *****************
  4202 ;; Defined at:
  4203 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
  4204 ;; Parameters:    Size  Location     Type
  4205 ;;  c               4    8[COMRAM] unsigned long 
  4206 ;; Auto vars:     Size  Location     Type
  4207 ;;  exp             1   16[COMRAM] unsigned char 
  4208 ;; Return value:  Size  Location     Type
  4209 ;;                  3    8[COMRAM] float 
  4210 ;; Registers used:
  4211 ;;		wreg, status,2, status,0, cstack
  4212 ;; Tracked objects:
  4213 ;;		On entry : 0/0
  4214 ;;		On exit  : 0/0
  4215 ;;		Unchanged: 0/0
  4216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4217 ;;      Params:         4       0       0       0       0       0       0       0       0
  4218 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4219 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4220 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4221 ;;Total ram usage:        9 bytes
  4222 ;; Hardware stack levels used:    1
  4223 ;; Hardware stack levels required when called:    1
  4224 ;; This function calls:
  4225 ;;		___ftpack
  4226 ;; This function is called by:
  4227 ;;		_sprintf
  4228 ;; This function uses a non-reentrant model
  4229 ;;
  4230                           
  4231                           	psect	text11
  4232  0000'                    __ptext11:
  4233                           	opt stack 0
  4234  0000'                    ___lltoft:
  4235                           	opt stack 28
  4236                           
  4237                           ;incstack = 0
  4238  0000' 0E8E               	movlw	142
  4239  0002' 6E10'              	movwf	___lltoft@exp,c
  4240  0004' D006               	goto	l764
  4241  0006' 90D8               	bcf	status,0,c
  4242  0008' 320B'              	rrcf	___lltoft@c+3,f,c
  4243  000A' 320A'              	rrcf	___lltoft@c+2,f,c
  4244  000C' 3209'              	rrcf	___lltoft@c+1,f,c
  4245  000E' 3208'              	rrcf	___lltoft@c,f,c
  4246  0010' 2A10'              	incf	___lltoft@exp,f,c
  4247  0012'                    l764:
  4248  0012' 0E00               	movlw	0
  4249  0014' 1408'              	andwf	___lltoft@c,w,c
  4250  0016' 6E00'              	movwf	??___lltoft& (0+255),c
  4251  0018' 0E00               	movlw	0
  4252  001A' 1409'              	andwf	___lltoft@c+1,w,c
  4253  001C' 6E00'              	movwf	(??___lltoft+1)& (0+255),c
  4254  001E' 0E00               	movlw	0
  4255  0020' 140A'              	andwf	___lltoft@c+2,w,c
  4256  0022' 6E00'              	movwf	(??___lltoft+2)& (0+255),c
  4257  0024' 0EFF               	movlw	255
  4258  0026' 140B'              	andwf	___lltoft@c+3,w,c
  4259  0028' 6E00'              	movwf	(??___lltoft+3)& (0+255),c
  4260  002A' 500C'              	movf	??___lltoft,w,c
  4261  002C' 100D'              	iorwf	??___lltoft+1,w,c
  4262  002E' 100E'              	iorwf	??___lltoft+2,w,c
  4263  0030' 100F'              	iorwf	??___lltoft+3,w,c
  4264  0032' A4D8               	btfss	status,2,c
  4265  0034' D7E8               	goto	l765
  4266  0036' C008' F000'        	movff	___lltoft@c,___ftpack@arg
  4267  003A' C009' F001'        	movff	___lltoft@c+1,___ftpack@arg+1
  4268  003E' C00A' F002'        	movff	___lltoft@c+2,___ftpack@arg+2
  4269  0042' C010' F003'        	movff	___lltoft@exp,___ftpack@exp
  4270  0046' 0E00               	movlw	0
  4271  0048' 6E04'              	movwf	___ftpack@sign,c
  4272  004A' EC00' F000'        	call	___ftpack	;wreg free
  4273  004E' C000' F008'        	movff	?___ftpack,?___lltoft
  4274  0052' C001' F009'        	movff	?___ftpack+1,?___lltoft+1
  4275  0056' C002' F00A'        	movff	?___ftpack+2,?___lltoft+2
  4276  005A' 0012               	return	
  4277  005C'                    __end_of___lltoft:
  4278                           	opt stack 0
  4279                           tblptru	equ	0xFF8
  4280                           tblptrh	equ	0xFF7
  4281                           tblptrl	equ	0xFF6
  4282                           tablat	equ	0xFF5
  4283                           prodh	equ	0xFF4
  4284                           prodl	equ	0xFF3
  4285                           wreg	equ	0xFE8
  4286                           indf2	equ	0xFDF
  4287                           postinc2	equ	0xFDE
  4288                           postdec2	equ	0xFDD
  4289                           fsr2h	equ	0xFDA
  4290                           fsr2l	equ	0xFD9
  4291                           status	equ	0xFD8
  4292                           
  4293 ;; *************** function ___llmod *****************
  4294 ;; Defined at:
  4295 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  4296 ;; Parameters:    Size  Location     Type
  4297 ;;  dividend        4    0[COMRAM] unsigned long 
  4298 ;;  divisor         4    4[COMRAM] unsigned long 
  4299 ;; Auto vars:     Size  Location     Type
  4300 ;;  counter         1    8[COMRAM] unsigned char 
  4301 ;; Return value:  Size  Location     Type
  4302 ;;                  4    0[COMRAM] unsigned long 
  4303 ;; Registers used:
  4304 ;;		wreg, status,2, status,0
  4305 ;; Tracked objects:
  4306 ;;		On entry : 0/0
  4307 ;;		On exit  : 0/0
  4308 ;;		Unchanged: 0/0
  4309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4310 ;;      Params:         8       0       0       0       0       0       0       0       0
  4311 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4312 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4313 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4314 ;;Total ram usage:        9 bytes
  4315 ;; Hardware stack levels used:    1
  4316 ;; This function calls:
  4317 ;;		Nothing
  4318 ;; This function is called by:
  4319 ;;		_sprintf
  4320 ;; This function uses a non-reentrant model
  4321 ;;
  4322                           
  4323                           	psect	text12
  4324  0000'                    __ptext12:
  4325                           	opt stack 0
  4326  0000'                    ___llmod:
  4327                           	opt stack 29
  4328                           
  4329                           ;incstack = 0
  4330  0000' 5004'              	movf	___llmod@divisor,w,c
  4331  0002' 1005'              	iorwf	___llmod@divisor+1,w,c
  4332  0004' 1006'              	iorwf	___llmod@divisor+2,w,c
  4333  0006' 1007'              	iorwf	___llmod@divisor+3,w,c
  4334  0008' B4D8               	btfsc	status,2,c
  4335  000A' D024               	goto	l758
  4336  000C' 0E01               	movlw	1
  4337  000E' 6E08'              	movwf	___llmod@counter,c
  4338  0010' D006               	goto	l753
  4339  0012' 90D8               	bcf	status,0,c
  4340  0014' 3604'              	rlcf	___llmod@divisor,f,c
  4341  0016' 3605'              	rlcf	___llmod@divisor+1,f,c
  4342  0018' 3606'              	rlcf	___llmod@divisor+2,f,c
  4343  001A' 3607'              	rlcf	___llmod@divisor+3,f,c
  4344  001C' 2A08'              	incf	___llmod@counter,f,c
  4345  001E'                    l753:
  4346  001E' AE07'              	btfss	___llmod@divisor+3,7,c
  4347  0020' D7F8               	goto	l754
  4348  0022'                    u2680:
  4349  0022' 5004'              	movf	___llmod@divisor,w,c
  4350  0024' 5C00'              	subwf	___llmod@dividend,w,c
  4351  0026' 5005'              	movf	___llmod@divisor+1,w,c
  4352  0028' 5801'              	subwfb	___llmod@dividend+1,w,c
  4353  002A' 5006'              	movf	___llmod@divisor+2,w,c
  4354  002C' 5802'              	subwfb	___llmod@dividend+2,w,c
  4355  002E' 5007'              	movf	___llmod@divisor+3,w,c
  4356  0030' 5803'              	subwfb	___llmod@dividend+3,w,c
  4357  0032' A0D8               	btfss	status,0,c
  4358  0034' D008               	goto	l757
  4359  0036' 5004'              	movf	___llmod@divisor,w,c
  4360  0038' 5E00'              	subwf	___llmod@dividend,f,c
  4361  003A' 5005'              	movf	___llmod@divisor+1,w,c
  4362  003C' 5A01'              	subwfb	___llmod@dividend+1,f,c
  4363  003E' 5006'              	movf	___llmod@divisor+2,w,c
  4364  0040' 5A02'              	subwfb	___llmod@dividend+2,f,c
  4365  0042' 5007'              	movf	___llmod@divisor+3,w,c
  4366  0044' 5A03'              	subwfb	___llmod@dividend+3,f,c
  4367  0046'                    l757:
  4368  0046' 90D8               	bcf	status,0,c
  4369  0048' 3207'              	rrcf	___llmod@divisor+3,f,c
  4370  004A' 3206'              	rrcf	___llmod@divisor+2,f,c
  4371  004C' 3205'              	rrcf	___llmod@divisor+1,f,c
  4372  004E' 3204'              	rrcf	___llmod@divisor,f,c
  4373  0050' 2E08'              	decfsz	___llmod@counter,f,c
  4374  0052' D7E7               	goto	u2680
  4375  0054'                    l758:
  4376  0054' C000' F000'        	movff	___llmod@dividend,?___llmod
  4377  0058' C001' F001'        	movff	___llmod@dividend+1,?___llmod+1
  4378  005C' C002' F002'        	movff	___llmod@dividend+2,?___llmod+2
  4379  0060' C003' F003'        	movff	___llmod@dividend+3,?___llmod+3
  4380  0064' 0012               	return		;funcret
  4381  0066'                    __end_of___llmod:
  4382                           	opt stack 0
  4383                           tblptru	equ	0xFF8
  4384                           tblptrh	equ	0xFF7
  4385                           tblptrl	equ	0xFF6
  4386                           tablat	equ	0xFF5
  4387                           prodh	equ	0xFF4
  4388                           prodl	equ	0xFF3
  4389                           wreg	equ	0xFE8
  4390                           indf2	equ	0xFDF
  4391                           postinc2	equ	0xFDE
  4392                           postdec2	equ	0xFDD
  4393                           fsr2h	equ	0xFDA
  4394                           fsr2l	equ	0xFD9
  4395                           status	equ	0xFD8
  4396                           
  4397 ;; *************** function ___lldiv *****************
  4398 ;; Defined at:
  4399 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  4400 ;; Parameters:    Size  Location     Type
  4401 ;;  dividend        4    0[COMRAM] unsigned long 
  4402 ;;  divisor         4    4[COMRAM] unsigned long 
  4403 ;; Auto vars:     Size  Location     Type
  4404 ;;  quotient        4    8[COMRAM] unsigned long 
  4405 ;;  counter         1   12[COMRAM] unsigned char 
  4406 ;; Return value:  Size  Location     Type
  4407 ;;                  4    0[COMRAM] unsigned long 
  4408 ;; Registers used:
  4409 ;;		wreg, status,2, status,0
  4410 ;; Tracked objects:
  4411 ;;		On entry : 0/0
  4412 ;;		On exit  : 0/0
  4413 ;;		Unchanged: 0/0
  4414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4415 ;;      Params:         8       0       0       0       0       0       0       0       0
  4416 ;;      Locals:         5       0       0       0       0       0       0       0       0
  4417 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4418 ;;      Totals:        13       0       0       0       0       0       0       0       0
  4419 ;;Total ram usage:       13 bytes
  4420 ;; Hardware stack levels used:    1
  4421 ;; This function calls:
  4422 ;;		Nothing
  4423 ;; This function is called by:
  4424 ;;		_sprintf
  4425 ;; This function uses a non-reentrant model
  4426 ;;
  4427                           
  4428                           	psect	text13
  4429  0000'                    __ptext13:
  4430                           	opt stack 0
  4431  0000'                    ___lldiv:
  4432                           	opt stack 29
  4433                           
  4434                           ;incstack = 0
  4435  0000' 0E00               	movlw	0
  4436  0002' 6E08'              	movwf	___lldiv@quotient,c
  4437  0004' 0E00               	movlw	0
  4438  0006' 6E09'              	movwf	___lldiv@quotient+1,c
  4439  0008' 0E00               	movlw	0
  4440  000A' 6E0A'              	movwf	___lldiv@quotient+2,c
  4441  000C' 0E00               	movlw	0
  4442  000E' 6E0B'              	movwf	___lldiv@quotient+3,c
  4443  0010' 5004'              	movf	___lldiv@divisor,w,c
  4444  0012' 1005'              	iorwf	___lldiv@divisor+1,w,c
  4445  0014' 1006'              	iorwf	___lldiv@divisor+2,w,c
  4446  0016' 1007'              	iorwf	___lldiv@divisor+3,w,c
  4447  0018' B4D8               	btfsc	status,2,c
  4448  001A' D02A               	goto	l748
  4449  001C' 0E01               	movlw	1
  4450  001E' 6E0C'              	movwf	___lldiv@counter,c
  4451  0020' D006               	goto	l743
  4452  0022' 90D8               	bcf	status,0,c
  4453  0024' 3604'              	rlcf	___lldiv@divisor,f,c
  4454  0026' 3605'              	rlcf	___lldiv@divisor+1,f,c
  4455  0028' 3606'              	rlcf	___lldiv@divisor+2,f,c
  4456  002A' 3607'              	rlcf	___lldiv@divisor+3,f,c
  4457  002C' 2A0C'              	incf	___lldiv@counter,f,c
  4458  002E'                    l743:
  4459  002E' AE07'              	btfss	___lldiv@divisor+3,7,c
  4460  0030' D7F8               	goto	l744
  4461  0032'                    u2650:
  4462  0032' 90D8               	bcf	status,0,c
  4463  0034' 3608'              	rlcf	___lldiv@quotient,f,c
  4464  0036' 3609'              	rlcf	___lldiv@quotient+1,f,c
  4465  0038' 360A'              	rlcf	___lldiv@quotient+2,f,c
  4466  003A' 360B'              	rlcf	___lldiv@quotient+3,f,c
  4467  003C' 5004'              	movf	___lldiv@divisor,w,c
  4468  003E' 5C00'              	subwf	___lldiv@dividend,w,c
  4469  0040' 5005'              	movf	___lldiv@divisor+1,w,c
  4470  0042' 5801'              	subwfb	___lldiv@dividend+1,w,c
  4471  0044' 5006'              	movf	___lldiv@divisor+2,w,c
  4472  0046' 5802'              	subwfb	___lldiv@dividend+2,w,c
  4473  0048' 5007'              	movf	___lldiv@divisor+3,w,c
  4474  004A' 5803'              	subwfb	___lldiv@dividend+3,w,c
  4475  004C' A0D8               	btfss	status,0,c
  4476  004E' D009               	goto	l747
  4477  0050' 5004'              	movf	___lldiv@divisor,w,c
  4478  0052' 5E00'              	subwf	___lldiv@dividend,f,c
  4479  0054' 5005'              	movf	___lldiv@divisor+1,w,c
  4480  0056' 5A01'              	subwfb	___lldiv@dividend+1,f,c
  4481  0058' 5006'              	movf	___lldiv@divisor+2,w,c
  4482  005A' 5A02'              	subwfb	___lldiv@dividend+2,f,c
  4483  005C' 5007'              	movf	___lldiv@divisor+3,w,c
  4484  005E' 5A03'              	subwfb	___lldiv@dividend+3,f,c
  4485  0060' 8008'              	bsf	___lldiv@quotient,0,c
  4486  0062'                    l747:
  4487  0062' 90D8               	bcf	status,0,c
  4488  0064' 3207'              	rrcf	___lldiv@divisor+3,f,c
  4489  0066' 3206'              	rrcf	___lldiv@divisor+2,f,c
  4490  0068' 3205'              	rrcf	___lldiv@divisor+1,f,c
  4491  006A' 3204'              	rrcf	___lldiv@divisor,f,c
  4492  006C' 2E0C'              	decfsz	___lldiv@counter,f,c
  4493  006E' D7E1               	goto	u2650
  4494  0070'                    l748:
  4495  0070' C008' F000'        	movff	___lldiv@quotient,?___lldiv
  4496  0074' C009' F001'        	movff	___lldiv@quotient+1,?___lldiv+1
  4497  0078' C00A' F002'        	movff	___lldiv@quotient+2,?___lldiv+2
  4498  007C' C00B' F003'        	movff	___lldiv@quotient+3,?___lldiv+3
  4499  0080' 0012               	return		;funcret
  4500  0082'                    __end_of___lldiv:
  4501                           	opt stack 0
  4502                           tblptru	equ	0xFF8
  4503                           tblptrh	equ	0xFF7
  4504                           tblptrl	equ	0xFF6
  4505                           tablat	equ	0xFF5
  4506                           prodh	equ	0xFF4
  4507                           prodl	equ	0xFF3
  4508                           wreg	equ	0xFE8
  4509                           indf2	equ	0xFDF
  4510                           postinc2	equ	0xFDE
  4511                           postdec2	equ	0xFDD
  4512                           fsr2h	equ	0xFDA
  4513                           fsr2l	equ	0xFD9
  4514                           status	equ	0xFD8
  4515                           
  4516 ;; *************** function ___fttol *****************
  4517 ;; Defined at:
  4518 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  4519 ;; Parameters:    Size  Location     Type
  4520 ;;  f1              3   42[COMRAM] float 
  4521 ;; Auto vars:     Size  Location     Type
  4522 ;;  lval            4   52[COMRAM] unsigned long 
  4523 ;;  exp1            1   56[COMRAM] unsigned char 
  4524 ;;  sign1           1   51[COMRAM] unsigned char 
  4525 ;; Return value:  Size  Location     Type
  4526 ;;                  4   42[COMRAM] long 
  4527 ;; Registers used:
  4528 ;;		wreg, status,2, status,0
  4529 ;; Tracked objects:
  4530 ;;		On entry : 0/0
  4531 ;;		On exit  : 0/0
  4532 ;;		Unchanged: 0/0
  4533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4534 ;;      Params:         4       0       0       0       0       0       0       0       0
  4535 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4536 ;;      Temps:          5       0       0       0       0       0       0       0       0
  4537 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4538 ;;Total ram usage:       15 bytes
  4539 ;; Hardware stack levels used:    1
  4540 ;; This function calls:
  4541 ;;		Nothing
  4542 ;; This function is called by:
  4543 ;;		_sprintf
  4544 ;;		_wait_in_ms
  4545 ;; This function uses a non-reentrant model
  4546 ;;
  4547                           
  4548                           	psect	text14
  4549  0000'                    __ptext14:
  4550                           	opt stack 0
  4551  0000'                    ___fttol:
  4552                           	opt stack 29
  4553                           
  4554                           ;incstack = 0
  4555  0000' C02C' F02E'        	movff	___fttol@f1+2,??___fttol
  4556  0004' 6A00'              	clrf	(??___fttol+1)& (0+255),c
  4557  0006' 6A00'              	clrf	(??___fttol+2)& (0+255),c
  4558  0008' 342B'              	rlcf	___fttol@f1+1,w,c
  4559  000A' 3600'              	rlcf	??___fttol& (0+255),f,c
  4560  000C' E301               	bnc	u2561
  4561  000E' 8000'              	bsf	(??___fttol+1)& (0+255),0,c
  4562  0010'                    u2561:
  4563  0010' 502E'              	movf	??___fttol,w,c
  4564  0012' 6E38'              	movwf	___fttol@exp1,c
  4565  0014' 5038'              	movf	___fttol@exp1,w,c
  4566  0016' A4D8               	btfss	status,2,c
  4567  0018' D009               	goto	l702
  4568  001A' 0E00               	movlw	0
  4569  001C' 6E2A'              	movwf	?___fttol,c
  4570  001E' 0E00               	movlw	0
  4571  0020' 6E2B'              	movwf	?___fttol+1,c
  4572  0022' 0E00               	movlw	0
  4573  0024' 6E2C'              	movwf	?___fttol+2,c
  4574  0026' 0E00               	movlw	0
  4575  0028' 6E2D'              	movwf	?___fttol+3,c
  4576  002A' 0012               	return	
  4577  002C'                    l702:
  4578  002C' 0E17               	movlw	23
  4579  002E' 6E00'              	movwf	??___fttol& (0+255),c
  4580  0030' C02A' F02F'        	movff	___fttol@f1,??___fttol+1
  4581  0034' C02B' F030'        	movff	___fttol@f1+1,??___fttol+2
  4582  0038' C02C' F031'        	movff	___fttol@f1+2,??___fttol+3
  4583  003C' 282E'              	incf	??___fttol,w,c
  4584  003E' 6E00'              	movwf	(??___fttol+4)& (0+255),c
  4585  0040' D004               	goto	u2580
  4586  0042'                    u2585:
  4587  0042' 90D8               	bcf	status,0,c
  4588  0044' 3231'              	rrcf	??___fttol+3,f,c
  4589  0046' 3230'              	rrcf	??___fttol+2,f,c
  4590  0048' 322F'              	rrcf	??___fttol+1,f,c
  4591  004A'                    u2580:
  4592  004A' 2E00'              	decfsz	(??___fttol+4)& (0+255),f,c
  4593  004C' D7FA               	goto	u2585
  4594  004E' 502F'              	movf	??___fttol+1,w,c
  4595  0050' 6E33'              	movwf	___fttol@sign1,c
  4596  0052' 8E2B'              	bsf	___fttol@f1+1,7,c
  4597  0054' 0EFF               	movlw	255
  4598  0056' 162A'              	andwf	___fttol@f1,f,c
  4599  0058' 0EFF               	movlw	255
  4600  005A' 162B'              	andwf	___fttol@f1+1,f,c
  4601  005C' 0E00               	movlw	0
  4602  005E' 162C'              	andwf	___fttol@f1+2,f,c
  4603  0060' 502A'              	movf	___fttol@f1,w,c
  4604  0062' 6E34'              	movwf	___fttol@lval,c
  4605  0064' 502B'              	movf	___fttol@f1+1,w,c
  4606  0066' 6E35'              	movwf	___fttol@lval+1,c
  4607  0068' 502C'              	movf	___fttol@f1+2,w,c
  4608  006A' 6E36'              	movwf	___fttol@lval+2,c
  4609  006C' 6A37'              	clrf	___fttol@lval+3,c
  4610  006E' 0E8E               	movlw	142
  4611  0070' 5E38'              	subwf	___fttol@exp1,f,c
  4612  0072' AE38'              	btfss	___fttol@exp1,7,c
  4613  0074' D016               	goto	l704
  4614  0076' 5038'              	movf	___fttol@exp1,w,c
  4615  0078' 0A80               	xorlw	128
  4616  007A' 0F8F               	addlw	143
  4617  007C' B0D8               	btfsc	status,0,c
  4618  007E' D009               	goto	l705
  4619  0080' 0E00               	movlw	0
  4620  0082' 6E2A'              	movwf	?___fttol,c
  4621  0084' 0E00               	movlw	0
  4622  0086' 6E2B'              	movwf	?___fttol+1,c
  4623  0088' 0E00               	movlw	0
  4624  008A' 6E2C'              	movwf	?___fttol+2,c
  4625  008C' 0E00               	movlw	0
  4626  008E' 6E2D'              	movwf	?___fttol+3,c
  4627  0090' 0012               	return	
  4628  0092'                    l705:
  4629  0092' 90D8               	bcf	status,0,c
  4630  0094' 3237'              	rrcf	___fttol@lval+3,f,c
  4631  0096' 3236'              	rrcf	___fttol@lval+2,f,c
  4632  0098' 3235'              	rrcf	___fttol@lval+1,f,c
  4633  009A' 3234'              	rrcf	___fttol@lval,f,c
  4634  009C' 3E38'              	incfsz	___fttol@exp1,f,c
  4635  009E' D7F9               	goto	l705
  4636  00A0' D015               	goto	u2620
  4637  00A2'                    l704:
  4638  00A2' 0E17               	movlw	23
  4639  00A4' 6438'              	cpfsgt	___fttol@exp1,c
  4640  00A6' D00F               	goto	l710
  4641  00A8' 0E00               	movlw	0
  4642  00AA' 6E2A'              	movwf	?___fttol,c
  4643  00AC' 0E00               	movlw	0
  4644  00AE' 6E2B'              	movwf	?___fttol+1,c
  4645  00B0' 0E00               	movlw	0
  4646  00B2' 6E2C'              	movwf	?___fttol+2,c
  4647  00B4' 0E00               	movlw	0
  4648  00B6' 6E2D'              	movwf	?___fttol+3,c
  4649  00B8' 0012               	return	
  4650  00BA' 90D8               	bcf	status,0,c
  4651  00BC' 3634'              	rlcf	___fttol@lval,f,c
  4652  00BE' 3635'              	rlcf	___fttol@lval+1,f,c
  4653  00C0' 3636'              	rlcf	___fttol@lval+2,f,c
  4654  00C2' 3637'              	rlcf	___fttol@lval+3,f,c
  4655  00C4' 0638'              	decf	___fttol@exp1,f,c
  4656  00C6'                    l710:
  4657  00C6' 5038'              	movf	___fttol@exp1,w,c
  4658  00C8' A4D8               	btfss	status,2,c
  4659  00CA' D7F7               	goto	l711
  4660  00CC'                    u2620:
  4661  00CC' 5033'              	movf	___fttol@sign1,w,c
  4662  00CE' B4D8               	btfsc	status,2,c
  4663  00D0' D008               	goto	l713
  4664  00D2' 1E37'              	comf	___fttol@lval+3,f,c
  4665  00D4' 1E36'              	comf	___fttol@lval+2,f,c
  4666  00D6' 1E35'              	comf	___fttol@lval+1,f,c
  4667  00D8' 6C34'              	negf	___fttol@lval,c
  4668  00DA' 0E00               	movlw	0
  4669  00DC' 2235'              	addwfc	___fttol@lval+1,f,c
  4670  00DE' 2236'              	addwfc	___fttol@lval+2,f,c
  4671  00E0' 2237'              	addwfc	___fttol@lval+3,f,c
  4672  00E2'                    l713:
  4673  00E2' C034' F02A'        	movff	___fttol@lval,?___fttol
  4674  00E6' C035' F02B'        	movff	___fttol@lval+1,?___fttol+1
  4675  00EA' C036' F02C'        	movff	___fttol@lval+2,?___fttol+2
  4676  00EE' C037' F02D'        	movff	___fttol@lval+3,?___fttol+3
  4677  00F2' 0012               	return	
  4678  00F4'                    __end_of___fttol:
  4679                           	opt stack 0
  4680                           tblptru	equ	0xFF8
  4681                           tblptrh	equ	0xFF7
  4682                           tblptrl	equ	0xFF6
  4683                           tablat	equ	0xFF5
  4684                           prodh	equ	0xFF4
  4685                           prodl	equ	0xFF3
  4686                           wreg	equ	0xFE8
  4687                           indf2	equ	0xFDF
  4688                           postinc2	equ	0xFDE
  4689                           postdec2	equ	0xFDD
  4690                           fsr2h	equ	0xFDA
  4691                           fsr2l	equ	0xFD9
  4692                           status	equ	0xFD8
  4693                           
  4694 ;; *************** function ___ftsub *****************
  4695 ;; Defined at:
  4696 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  4697 ;; Parameters:    Size  Location     Type
  4698 ;;  f1              3   57[COMRAM] float 
  4699 ;;  f2              3   60[COMRAM] float 
  4700 ;; Auto vars:     Size  Location     Type
  4701 ;;		None
  4702 ;; Return value:  Size  Location     Type
  4703 ;;                  3   57[COMRAM] float 
  4704 ;; Registers used:
  4705 ;;		wreg, status,2, status,0, cstack
  4706 ;; Tracked objects:
  4707 ;;		On entry : 0/0
  4708 ;;		On exit  : 0/0
  4709 ;;		Unchanged: 0/0
  4710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4711 ;;      Params:         6       0       0       0       0       0       0       0       0
  4712 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4713 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4714 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4715 ;;Total ram usage:        6 bytes
  4716 ;; Hardware stack levels used:    1
  4717 ;; Hardware stack levels required when called:    2
  4718 ;; This function calls:
  4719 ;;		___ftadd
  4720 ;; This function is called by:
  4721 ;;		_sprintf
  4722 ;; This function uses a non-reentrant model
  4723 ;;
  4724                           
  4725                           	psect	text15
  4726  0000'                    __ptext15:
  4727                           	opt stack 0
  4728  0000'                    ___ftsub:
  4729                           	opt stack 27
  4730                           
  4731                           ;incstack = 0
  4732  0000' 503C'              	movf	___ftsub@f2,w,c
  4733  0002' 103D'              	iorwf	___ftsub@f2+1,w,c
  4734  0004' 103E'              	iorwf	___ftsub@f2+2,w,c
  4735  0006' B4D8               	btfsc	status,2,c
  4736  0008' D006               	goto	l698
  4737  000A' 0E00               	movlw	0
  4738  000C' 1A3C'              	xorwf	___ftsub@f2,f,c
  4739  000E' 0E00               	movlw	0
  4740  0010' 1A3D'              	xorwf	___ftsub@f2+1,f,c
  4741  0012' 0E80               	movlw	128
  4742  0014' 1A3E'              	xorwf	___ftsub@f2+2,f,c
  4743  0016'                    l698:
  4744  0016' C039' F02D'        	movff	___ftsub@f1,___ftadd@f1
  4745  001A' C03A' F02E'        	movff	___ftsub@f1+1,___ftadd@f1+1
  4746  001E' C03B' F02F'        	movff	___ftsub@f1+2,___ftadd@f1+2
  4747  0022' C03C' F030'        	movff	___ftsub@f2,___ftadd@f2
  4748  0026' C03D' F031'        	movff	___ftsub@f2+1,___ftadd@f2+1
  4749  002A' C03E' F032'        	movff	___ftsub@f2+2,___ftadd@f2+2
  4750  002E' EC00' F000'        	call	___ftadd	;wreg free
  4751  0032' C02D' F039'        	movff	?___ftadd,?___ftsub
  4752  0036' C02E' F03A'        	movff	?___ftadd+1,?___ftsub+1
  4753  003A' C02F' F03B'        	movff	?___ftadd+2,?___ftsub+2
  4754  003E' 0012               	return	
  4755  0040'                    __end_of___ftsub:
  4756                           	opt stack 0
  4757                           tblptru	equ	0xFF8
  4758                           tblptrh	equ	0xFF7
  4759                           tblptrl	equ	0xFF6
  4760                           tablat	equ	0xFF5
  4761                           prodh	equ	0xFF4
  4762                           prodl	equ	0xFF3
  4763                           wreg	equ	0xFE8
  4764                           indf2	equ	0xFDF
  4765                           postinc2	equ	0xFDE
  4766                           postdec2	equ	0xFDD
  4767                           fsr2h	equ	0xFDA
  4768                           fsr2l	equ	0xFD9
  4769                           status	equ	0xFD8
  4770                           
  4771 ;; *************** function ___ftadd *****************
  4772 ;; Defined at:
  4773 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  4774 ;; Parameters:    Size  Location     Type
  4775 ;;  f1              3   45[COMRAM] float 
  4776 ;;  f2              3   48[COMRAM] float 
  4777 ;; Auto vars:     Size  Location     Type
  4778 ;;  exp1            1   56[COMRAM] unsigned char 
  4779 ;;  exp2            1   55[COMRAM] unsigned char 
  4780 ;;  sign            1   54[COMRAM] unsigned char 
  4781 ;; Return value:  Size  Location     Type
  4782 ;;                  3   45[COMRAM] float 
  4783 ;; Registers used:
  4784 ;;		wreg, status,2, status,0, cstack
  4785 ;; Tracked objects:
  4786 ;;		On entry : 0/0
  4787 ;;		On exit  : 0/0
  4788 ;;		Unchanged: 0/0
  4789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4790 ;;      Params:         6       0       0       0       0       0       0       0       0
  4791 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4792 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4793 ;;      Totals:        12       0       0       0       0       0       0       0       0
  4794 ;;Total ram usage:       12 bytes
  4795 ;; Hardware stack levels used:    1
  4796 ;; Hardware stack levels required when called:    1
  4797 ;; This function calls:
  4798 ;;		___ftpack
  4799 ;; This function is called by:
  4800 ;;		_main
  4801 ;;		_sprintf
  4802 ;;		___ftsub
  4803 ;; This function uses a non-reentrant model
  4804 ;;
  4805                           
  4806                           	psect	text16
  4807  0000'                    __ptext16:
  4808                           	opt stack 0
  4809  0000'                    ___ftadd:
  4810                           	opt stack 27
  4811                           
  4812                           ;incstack = 0
  4813  0000' C02F' F033'        	movff	___ftadd@f1+2,??___ftadd
  4814  0004' 6A00'              	clrf	(??___ftadd+1)& (0+255),c
  4815  0006' 6A00'              	clrf	(??___ftadd+2)& (0+255),c
  4816  0008' 342E'              	rlcf	___ftadd@f1+1,w,c
  4817  000A' 3600'              	rlcf	??___ftadd& (0+255),f,c
  4818  000C' E301               	bnc	u1741
  4819  000E' 8000'              	bsf	(??___ftadd+1)& (0+255),0,c
  4820  0010'                    u1741:
  4821  0010' 5033'              	movf	??___ftadd,w,c
  4822  0012' 6E38'              	movwf	___ftadd@exp1,c
  4823  0014' C032' F033'        	movff	___ftadd@f2+2,??___ftadd
  4824  0018' 6A00'              	clrf	(??___ftadd+1)& (0+255),c
  4825  001A' 6A00'              	clrf	(??___ftadd+2)& (0+255),c
  4826  001C' 3431'              	rlcf	___ftadd@f2+1,w,c
  4827  001E' 3600'              	rlcf	??___ftadd& (0+255),f,c
  4828  0020' E301               	bnc	u1751
  4829  0022' 8000'              	bsf	(??___ftadd+1)& (0+255),0,c
  4830  0024'                    u1751:
  4831  0024' 5033'              	movf	??___ftadd,w,c
  4832  0026' 6E37'              	movwf	___ftadd@exp2,c
  4833  0028' 5038'              	movf	___ftadd@exp1,w,c
  4834  002A' B4D8               	btfsc	status,2,c
  4835  002C' D00B               	goto	u1780
  4836  002E' 5037'              	movf	___ftadd@exp2,w,c
  4837  0030' 5C38'              	subwf	___ftadd@exp1,w,c
  4838  0032' B0D8               	btfsc	status,0,c
  4839  0034' D00E               	goto	l616
  4840  0036' 5038'              	movf	___ftadd@exp1,w,c
  4841  0038' 0800               	sublw	0
  4842  003A' 2437'              	addwf	___ftadd@exp2,w,c
  4843  003C' 6E00'              	movwf	??___ftadd& (0+255),c
  4844  003E' 0E18               	movlw	24
  4845  0040' 6433'              	cpfsgt	??___ftadd,c
  4846  0042' D007               	goto	l616
  4847  0044'                    u1780:
  4848  0044' C030' F02D'        	movff	___ftadd@f2,?___ftadd
  4849  0048' C031' F02E'        	movff	___ftadd@f2+1,?___ftadd+1
  4850  004C' C032' F02F'        	movff	___ftadd@f2+2,?___ftadd+2
  4851  0050' 0012               	return	
  4852  0052'                    l616:
  4853  0052' 5037'              	movf	___ftadd@exp2,w,c
  4854  0054' B4D8               	btfsc	status,2,c
  4855  0056' D00B               	goto	u1810
  4856  0058' 5038'              	movf	___ftadd@exp1,w,c
  4857  005A' 5C37'              	subwf	___ftadd@exp2,w,c
  4858  005C' B0D8               	btfsc	status,0,c
  4859  005E' D00E               	goto	l620
  4860  0060' 5037'              	movf	___ftadd@exp2,w,c
  4861  0062' 0800               	sublw	0
  4862  0064' 2438'              	addwf	___ftadd@exp1,w,c
  4863  0066' 6E00'              	movwf	??___ftadd& (0+255),c
  4864  0068' 0E18               	movlw	24
  4865  006A' 6433'              	cpfsgt	??___ftadd,c
  4866  006C' D007               	goto	l620
  4867  006E'                    u1810:
  4868  006E' C02D' F02D'        	movff	___ftadd@f1,?___ftadd
  4869  0072' C02E' F02E'        	movff	___ftadd@f1+1,?___ftadd+1
  4870  0076' C02F' F02F'        	movff	___ftadd@f1+2,?___ftadd+2
  4871  007A' 0012               	return	
  4872  007C'                    l620:
  4873  007C' 0E06               	movlw	6
  4874  007E' 6E36'              	movwf	___ftadd@sign,c
  4875  0080' BE2F'              	btfsc	___ftadd@f1+2,7,c
  4876  0082' 8E36'              	bsf	___ftadd@sign,7,c
  4877  0084' BE32'              	btfsc	___ftadd@f2+2,7,c
  4878  0086' 8C36'              	bsf	___ftadd@sign,6,c
  4879  0088' 8E2E'              	bsf	___ftadd@f1+1,7,c
  4880  008A' 0EFF               	movlw	255
  4881  008C' 162D'              	andwf	___ftadd@f1,f,c
  4882  008E' 0EFF               	movlw	255
  4883  0090' 162E'              	andwf	___ftadd@f1+1,f,c
  4884  0092' 0E00               	movlw	0
  4885  0094' 162F'              	andwf	___ftadd@f1+2,f,c
  4886  0096' 8E31'              	bsf	___ftadd@f2+1,7,c
  4887  0098' 0EFF               	movlw	255
  4888  009A' 1630'              	andwf	___ftadd@f2,f,c
  4889  009C' 0EFF               	movlw	255
  4890  009E' 1631'              	andwf	___ftadd@f2+1,f,c
  4891  00A0' 0E00               	movlw	0
  4892  00A2' 1632'              	andwf	___ftadd@f2+2,f,c
  4893  00A4' 5037'              	movf	___ftadd@exp2,w,c
  4894  00A6' 5C38'              	subwf	___ftadd@exp1,w,c
  4895  00A8' B0D8               	btfsc	status,0,c
  4896  00AA' D01B               	goto	l625
  4897  00AC'                    u1840:
  4898  00AC' 90D8               	bcf	status,0,c
  4899  00AE' 3630'              	rlcf	___ftadd@f2,f,c
  4900  00B0' 3631'              	rlcf	___ftadd@f2+1,f,c
  4901  00B2' 3632'              	rlcf	___ftadd@f2+2,f,c
  4902  00B4' 0637'              	decf	___ftadd@exp2,f,c
  4903  00B6' 5038'              	movf	___ftadd@exp1,w,c
  4904  00B8' 1837'              	xorwf	___ftadd@exp2,w,c
  4905  00BA' B4D8               	btfsc	status,2,c
  4906  00BC' D00D               	goto	l630
  4907  00BE' 0636'              	decf	___ftadd@sign,f,c
  4908  00C0' C036' F033'        	movff	___ftadd@sign,??___ftadd
  4909  00C4' 0E07               	movlw	7
  4910  00C6' 1633'              	andwf	??___ftadd,f,c
  4911  00C8' B4D8               	btfsc	status,2,c
  4912  00CA' D006               	goto	l630
  4913  00CC' D7EF               	goto	u1840
  4914  00CE' 90D8               	bcf	status,0,c
  4915  00D0' 322F'              	rrcf	___ftadd@f1+2,f,c
  4916  00D2' 322E'              	rrcf	___ftadd@f1+1,f,c
  4917  00D4' 322D'              	rrcf	___ftadd@f1,f,c
  4918  00D6' 2A38'              	incf	___ftadd@exp1,f,c
  4919  00D8'                    l630:
  4920  00D8' 5037'              	movf	___ftadd@exp2,w,c
  4921  00DA' 1838'              	xorwf	___ftadd@exp1,w,c
  4922  00DC' B4D8               	btfsc	status,2,c
  4923  00DE' D01F               	goto	u1910
  4924  00E0' D7F6               	goto	l631
  4925  00E2'                    l625:
  4926  00E2' 5038'              	movf	___ftadd@exp1,w,c
  4927  00E4' 5C37'              	subwf	___ftadd@exp2,w,c
  4928  00E6' B0D8               	btfsc	status,0,c
  4929  00E8' D01A               	goto	u1910
  4930  00EA'                    u1880:
  4931  00EA' 90D8               	bcf	status,0,c
  4932  00EC' 362D'              	rlcf	___ftadd@f1,f,c
  4933  00EE' 362E'              	rlcf	___ftadd@f1+1,f,c
  4934  00F0' 362F'              	rlcf	___ftadd@f1+2,f,c
  4935  00F2' 0638'              	decf	___ftadd@exp1,f,c
  4936  00F4' 5038'              	movf	___ftadd@exp1,w,c
  4937  00F6' 1837'              	xorwf	___ftadd@exp2,w,c
  4938  00F8' B4D8               	btfsc	status,2,c
  4939  00FA' D00D               	goto	l639
  4940  00FC' 0636'              	decf	___ftadd@sign,f,c
  4941  00FE' C036' F033'        	movff	___ftadd@sign,??___ftadd
  4942  0102' 0E07               	movlw	7
  4943  0104' 1633'              	andwf	??___ftadd,f,c
  4944  0106' B4D8               	btfsc	status,2,c
  4945  0108' D006               	goto	l639
  4946  010A' D7EF               	goto	u1880
  4947  010C' 90D8               	bcf	status,0,c
  4948  010E' 3232'              	rrcf	___ftadd@f2+2,f,c
  4949  0110' 3231'              	rrcf	___ftadd@f2+1,f,c
  4950  0112' 3230'              	rrcf	___ftadd@f2,f,c
  4951  0114' 2A37'              	incf	___ftadd@exp2,f,c
  4952  0116'                    l639:
  4953  0116' 5037'              	movf	___ftadd@exp2,w,c
  4954  0118' 1838'              	xorwf	___ftadd@exp1,w,c
  4955  011A' A4D8               	btfss	status,2,c
  4956  011C' D7F7               	goto	l640
  4957  011E'                    u1910:
  4958  011E' AE36'              	btfss	___ftadd@sign,7,c
  4959  0120' D00C               	goto	l642
  4960  0122' 0EFF               	movlw	255
  4961  0124' 1A2D'              	xorwf	___ftadd@f1,f,c
  4962  0126' 0EFF               	movlw	255
  4963  0128' 1A2E'              	xorwf	___ftadd@f1+1,f,c
  4964  012A' 0EFF               	movlw	255
  4965  012C' 1A2F'              	xorwf	___ftadd@f1+2,f,c
  4966  012E' 0E01               	movlw	1
  4967  0130' 262D'              	addwf	___ftadd@f1,f,c
  4968  0132' 0E00               	movlw	0
  4969  0134' 222E'              	addwfc	___ftadd@f1+1,f,c
  4970  0136' 0E00               	movlw	0
  4971  0138' 222F'              	addwfc	___ftadd@f1+2,f,c
  4972  013A'                    l642:
  4973  013A' AC36'              	btfss	___ftadd@sign,6,c
  4974  013C' D00C               	goto	l643
  4975  013E' 0EFF               	movlw	255
  4976  0140' 1A30'              	xorwf	___ftadd@f2,f,c
  4977  0142' 0EFF               	movlw	255
  4978  0144' 1A31'              	xorwf	___ftadd@f2+1,f,c
  4979  0146' 0EFF               	movlw	255
  4980  0148' 1A32'              	xorwf	___ftadd@f2+2,f,c
  4981  014A' 0E01               	movlw	1
  4982  014C' 2630'              	addwf	___ftadd@f2,f,c
  4983  014E' 0E00               	movlw	0
  4984  0150' 2231'              	addwfc	___ftadd@f2+1,f,c
  4985  0152' 0E00               	movlw	0
  4986  0154' 2232'              	addwfc	___ftadd@f2+2,f,c
  4987  0156'                    l643:
  4988  0156' 0E00               	movlw	0
  4989  0158' 6E36'              	movwf	___ftadd@sign,c
  4990  015A' 502D'              	movf	___ftadd@f1,w,c
  4991  015C' 2630'              	addwf	___ftadd@f2,f,c
  4992  015E' 502E'              	movf	___ftadd@f1+1,w,c
  4993  0160' 2231'              	addwfc	___ftadd@f2+1,f,c
  4994  0162' 502F'              	movf	___ftadd@f1+2,w,c
  4995  0164' 2232'              	addwfc	___ftadd@f2+2,f,c
  4996  0166' AE32'              	btfss	___ftadd@f2+2,7,c
  4997  0168' D00E               	goto	l644
  4998  016A' 0EFF               	movlw	255
  4999  016C' 1A30'              	xorwf	___ftadd@f2,f,c
  5000  016E' 0EFF               	movlw	255
  5001  0170' 1A31'              	xorwf	___ftadd@f2+1,f,c
  5002  0172' 0EFF               	movlw	255
  5003  0174' 1A32'              	xorwf	___ftadd@f2+2,f,c
  5004  0176' 0E01               	movlw	1
  5005  0178' 2630'              	addwf	___ftadd@f2,f,c
  5006  017A' 0E00               	movlw	0
  5007  017C' 2231'              	addwfc	___ftadd@f2+1,f,c
  5008  017E' 0E00               	movlw	0
  5009  0180' 2232'              	addwfc	___ftadd@f2+2,f,c
  5010  0182' 0E01               	movlw	1
  5011  0184' 6E36'              	movwf	___ftadd@sign,c
  5012  0186'                    l644:
  5013  0186' C030' F000'        	movff	___ftadd@f2,___ftpack@arg
  5014  018A' C031' F001'        	movff	___ftadd@f2+1,___ftpack@arg+1
  5015  018E' C032' F002'        	movff	___ftadd@f2+2,___ftpack@arg+2
  5016  0192' C038' F003'        	movff	___ftadd@exp1,___ftpack@exp
  5017  0196' C036' F004'        	movff	___ftadd@sign,___ftpack@sign
  5018  019A' EC00' F000'        	call	___ftpack	;wreg free
  5019  019E' C000' F02D'        	movff	?___ftpack,?___ftadd
  5020  01A2' C001' F02E'        	movff	?___ftpack+1,?___ftadd+1
  5021  01A6' C002' F02F'        	movff	?___ftpack+2,?___ftadd+2
  5022  01AA' 0012               	return	
  5023  01AC'                    __end_of___ftadd:
  5024                           	opt stack 0
  5025                           tblptru	equ	0xFF8
  5026                           tblptrh	equ	0xFF7
  5027                           tblptrl	equ	0xFF6
  5028                           tablat	equ	0xFF5
  5029                           prodh	equ	0xFF4
  5030                           prodl	equ	0xFF3
  5031                           wreg	equ	0xFE8
  5032                           indf2	equ	0xFDF
  5033                           postinc2	equ	0xFDE
  5034                           postdec2	equ	0xFDD
  5035                           fsr2h	equ	0xFDA
  5036                           fsr2l	equ	0xFD9
  5037                           status	equ	0xFD8
  5038                           
  5039 ;; *************** function ___ftneg *****************
  5040 ;; Defined at:
  5041 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
  5042 ;; Parameters:    Size  Location     Type
  5043 ;;  f1              3    0[COMRAM] float 
  5044 ;; Auto vars:     Size  Location     Type
  5045 ;;		None
  5046 ;; Return value:  Size  Location     Type
  5047 ;;                  3    0[COMRAM] float 
  5048 ;; Registers used:
  5049 ;;		wreg, status,2, status,0
  5050 ;; Tracked objects:
  5051 ;;		On entry : 0/0
  5052 ;;		On exit  : 0/0
  5053 ;;		Unchanged: 0/0
  5054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5055 ;;      Params:         3       0       0       0       0       0       0       0       0
  5056 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5057 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5058 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5059 ;;Total ram usage:        3 bytes
  5060 ;; Hardware stack levels used:    1
  5061 ;; This function calls:
  5062 ;;		Nothing
  5063 ;; This function is called by:
  5064 ;;		_sprintf
  5065 ;; This function uses a non-reentrant model
  5066 ;;
  5067                           
  5068                           	psect	text17
  5069  0000'                    __ptext17:
  5070                           	opt stack 0
  5071  0000'                    ___ftneg:
  5072                           	opt stack 29
  5073                           
  5074                           ;incstack = 0
  5075  0000' 5000'              	movf	___ftneg@f1,w,c
  5076  0002' 1001'              	iorwf	___ftneg@f1+1,w,c
  5077  0004' 1002'              	iorwf	___ftneg@f1+2,w,c
  5078  0006' B4D8               	btfsc	status,2,c
  5079  0008' D006               	goto	l692
  5080  000A' 0E00               	movlw	0
  5081  000C' 1A00'              	xorwf	___ftneg@f1,f,c
  5082  000E' 0E00               	movlw	0
  5083  0010' 1A01'              	xorwf	___ftneg@f1+1,f,c
  5084  0012' 0E80               	movlw	128
  5085  0014' 1A02'              	xorwf	___ftneg@f1+2,f,c
  5086  0016'                    l692:
  5087  0016' C000' F000'        	movff	___ftneg@f1,?___ftneg
  5088  001A' C001' F001'        	movff	___ftneg@f1+1,?___ftneg+1
  5089  001E' C002' F002'        	movff	___ftneg@f1+2,?___ftneg+2
  5090  0022' 0012               	return		;funcret
  5091  0024'                    __end_of___ftneg:
  5092                           	opt stack 0
  5093                           tblptru	equ	0xFF8
  5094                           tblptrh	equ	0xFF7
  5095                           tblptrl	equ	0xFF6
  5096                           tablat	equ	0xFF5
  5097                           prodh	equ	0xFF4
  5098                           prodl	equ	0xFF3
  5099                           wreg	equ	0xFE8
  5100                           indf2	equ	0xFDF
  5101                           postinc2	equ	0xFDE
  5102                           postdec2	equ	0xFDD
  5103                           fsr2h	equ	0xFDA
  5104                           fsr2l	equ	0xFD9
  5105                           status	equ	0xFD8
  5106                           
  5107 ;; *************** function ___ftge *****************
  5108 ;; Defined at:
  5109 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  5110 ;; Parameters:    Size  Location     Type
  5111 ;;  ff1             3    0[COMRAM] float 
  5112 ;;  ff2             3    3[COMRAM] float 
  5113 ;; Auto vars:     Size  Location     Type
  5114 ;;		None
  5115 ;; Return value:  Size  Location     Type
  5116 ;;		None               void
  5117 ;; Registers used:
  5118 ;;		wreg, status,2, status,0
  5119 ;; Tracked objects:
  5120 ;;		On entry : 0/0
  5121 ;;		On exit  : 0/0
  5122 ;;		Unchanged: 0/0
  5123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5124 ;;      Params:         6       0       0       0       0       0       0       0       0
  5125 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5126 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5127 ;;      Totals:         9       0       0       0       0       0       0       0       0
  5128 ;;Total ram usage:        9 bytes
  5129 ;; Hardware stack levels used:    1
  5130 ;; This function calls:
  5131 ;;		Nothing
  5132 ;; This function is called by:
  5133 ;;		_sprintf
  5134 ;; This function uses a non-reentrant model
  5135 ;;
  5136                           
  5137                           	psect	text18
  5138  0000'                    __ptext18:
  5139                           	opt stack 0
  5140  0000'                    ___ftge:
  5141                           	opt stack 29
  5142                           
  5143                           ;incstack = 0
  5144  0000' AE02'              	btfss	___ftge@ff1+2,7,c
  5145  0002' D016               	goto	l674
  5146  0004' C000' F006'        	movff	___ftge@ff1,??___ftge
  5147  0008' C001' F007'        	movff	___ftge@ff1+1,??___ftge+1
  5148  000C' C002' F008'        	movff	___ftge@ff1+2,??___ftge+2
  5149  0010' 1E06'              	comf	??___ftge,f,c
  5150  0012' 1E07'              	comf	??___ftge+1,f,c
  5151  0014' 1E08'              	comf	??___ftge+2,f,c
  5152  0016' 2A06'              	incf	??___ftge,f,c
  5153  0018' 0E00               	movlw	0
  5154  001A' 2207'              	addwfc	??___ftge+1,f,c
  5155  001C' 2208'              	addwfc	??___ftge+2,f,c
  5156  001E' 0E00               	movlw	0
  5157  0020' 2406'              	addwf	??___ftge,w,c
  5158  0022' 6E00'              	movwf	___ftge@ff1,c
  5159  0024' 0E00               	movlw	0
  5160  0026' 2007'              	addwfc	??___ftge+1,w,c
  5161  0028' 6E01'              	movwf	___ftge@ff1+1,c
  5162  002A' 0E80               	movlw	128
  5163  002C' 2008'              	addwfc	??___ftge+2,w,c
  5164  002E' 6E02'              	movwf	___ftge@ff1+2,c
  5165  0030'                    l674:
  5166  0030' AE05'              	btfss	___ftge@ff2+2,7,c
  5167  0032' D016               	goto	l675
  5168  0034' C003' F006'        	movff	___ftge@ff2,??___ftge
  5169  0038' C004' F007'        	movff	___ftge@ff2+1,??___ftge+1
  5170  003C' C005' F008'        	movff	___ftge@ff2+2,??___ftge+2
  5171  0040' 1E06'              	comf	??___ftge,f,c
  5172  0042' 1E07'              	comf	??___ftge+1,f,c
  5173  0044' 1E08'              	comf	??___ftge+2,f,c
  5174  0046' 2A06'              	incf	??___ftge,f,c
  5175  0048' 0E00               	movlw	0
  5176  004A' 2207'              	addwfc	??___ftge+1,f,c
  5177  004C' 2208'              	addwfc	??___ftge+2,f,c
  5178  004E' 0E00               	movlw	0
  5179  0050' 2406'              	addwf	??___ftge,w,c
  5180  0052' 6E03'              	movwf	___ftge@ff2,c
  5181  0054' 0E00               	movlw	0
  5182  0056' 2007'              	addwfc	??___ftge+1,w,c
  5183  0058' 6E04'              	movwf	___ftge@ff2+1,c
  5184  005A' 0E80               	movlw	128
  5185  005C' 2008'              	addwfc	??___ftge+2,w,c
  5186  005E' 6E05'              	movwf	___ftge@ff2+2,c
  5187  0060'                    l675:
  5188  0060' 0E00               	movlw	0
  5189  0062' 1A00'              	xorwf	___ftge@ff1,f,c
  5190  0064' 0E00               	movlw	0
  5191  0066' 1A01'              	xorwf	___ftge@ff1+1,f,c
  5192  0068' 0E80               	movlw	128
  5193  006A' 1A02'              	xorwf	___ftge@ff1+2,f,c
  5194  006C' 0E00               	movlw	0
  5195  006E' 1A03'              	xorwf	___ftge@ff2,f,c
  5196  0070' 0E00               	movlw	0
  5197  0072' 1A04'              	xorwf	___ftge@ff2+1,f,c
  5198  0074' 0E80               	movlw	128
  5199  0076' 1A05'              	xorwf	___ftge@ff2+2,f,c
  5200  0078' 5003'              	movf	___ftge@ff2,w,c
  5201  007A' 5C00'              	subwf	___ftge@ff1,w,c
  5202  007C' 5004'              	movf	___ftge@ff2+1,w,c
  5203  007E' 5801'              	subwfb	___ftge@ff1+1,w,c
  5204  0080' 5005'              	movf	___ftge@ff2+2,w,c
  5205  0082' 5802'              	subwfb	___ftge@ff1+2,w,c
  5206  0084' B0D8               	btfsc	status,0,c
  5207  0086' D002               	goto	l2180
  5208  0088' 90D8               	bcf	status,0,c
  5209  008A' 0012               	return	
  5210  008C'                    l2180:
  5211  008C' 80D8               	bsf	status,0,c
  5212  008E' 0012               	return	
  5213  0090'                    __end_of___ftge:
  5214                           	opt stack 0
  5215                           tblptru	equ	0xFF8
  5216                           tblptrh	equ	0xFF7
  5217                           tblptrl	equ	0xFF6
  5218                           tablat	equ	0xFF5
  5219                           prodh	equ	0xFF4
  5220                           prodl	equ	0xFF3
  5221                           wreg	equ	0xFE8
  5222                           indf2	equ	0xFDF
  5223                           postinc2	equ	0xFDE
  5224                           postdec2	equ	0xFDD
  5225                           fsr2h	equ	0xFDA
  5226                           fsr2l	equ	0xFD9
  5227                           status	equ	0xFD8
  5228                           
  5229 ;; *************** function _configBoard *****************
  5230 ;; Defined at:
  5231 ;;		line 11 in file "Config.c"
  5232 ;; Parameters:    Size  Location     Type
  5233 ;;		None
  5234 ;; Auto vars:     Size  Location     Type
  5235 ;;		None
  5236 ;; Return value:  Size  Location     Type
  5237 ;;                  1    wreg      void 
  5238 ;; Registers used:
  5239 ;;		wreg, status,2
  5240 ;; Tracked objects:
  5241 ;;		On entry : 0/0
  5242 ;;		On exit  : 0/0
  5243 ;;		Unchanged: 0/0
  5244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5245 ;;      Params:         0       0       0       0       0       0       0       0       0
  5246 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5247 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5248 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5249 ;;Total ram usage:        0 bytes
  5250 ;; Hardware stack levels used:    1
  5251 ;; This function calls:
  5252 ;;		Nothing
  5253 ;; This function is called by:
  5254 ;;		_main
  5255 ;; This function uses a non-reentrant model
  5256 ;;
  5257                           
  5258                           	psect	text19
  5259  0000'                    __ptext19:
  5260                           	opt stack 0
  5261  0000'                    _configBoard:
  5262                           	opt stack 30
  5263                           
  5264                           ;Config.c: 15: INTCONbits.GIE = 0;
  5265                           
  5266                           ;incstack = 0
  5267  0000' 9EF2               	bcf	intcon,7,c	;volatile
  5268                           
  5269                           ;Config.c: 16: INTCONbits.PEIE = 0;
  5270  0002' 9CF2               	bcf	intcon,6,c	;volatile
  5271                           
  5272                           ;Config.c: 25: T0CONbits.TMR0ON = 1;
  5273  0004' 8ED5               	bsf	4053,7,c	;volatile
  5274                           
  5275                           ;Config.c: 26: T08BIT = 1;
  5276  0006' 8CD5               	bsf	4053,6,c	;volatile
  5277                           
  5278                           ;Config.c: 27: T0CONbits.T0CS = 0;
  5279  0008' 9AD5               	bcf	4053,5,c	;volatile
  5280                           
  5281                           ;Config.c: 29: T0CONbits.PSA = 0;
  5282  000A' 96D5               	bcf	4053,3,c	;volatile
  5283                           
  5284                           ;Config.c: 30: T0CONbits.T0PS = 100;
  5285  000C' 50D5               	movf	4053,w,c	;volatile
  5286  000E' 0BF8               	andlw	-8
  5287  0010' 0904               	iorlw	4
  5288  0012' 6ED5               	movwf	4053,c	;volatile
  5289                           
  5290                           ;Config.c: 31: INTCONbits.TMR0IF = 0;
  5291  0014' 94F2               	bcf	intcon,2,c	;volatile
  5292                           
  5293                           ;Config.c: 33: ADCON1bits.PCFG = 0b1111;
  5294  0016' 80C1               	bsf	4033,0,c	;volatile
  5295  0018' 82C1               	bsf	4033,1,c	;volatile
  5296  001A' 84C1               	bsf	4033,2,c	;volatile
  5297  001C' 86C1               	bsf	4033,3,c	;volatile
  5298                           
  5299                           ;Config.c: 44: ADCON0 = 0b00000111;
  5300  001E' 0E07               	movlw	7
  5301  0020' 6EC2               	movwf	4034,c	;volatile
  5302                           
  5303                           ;Config.c: 47: ADCON0bits.ADON = 0;
  5304  0022' 90C2               	bcf	4034,0,c	;volatile
  5305                           
  5306                           ;Config.c: 51: ADCON2bits.ADFM = 1;
  5307  0024' 8EC0               	bsf	4032,7,c	;volatile
  5308                           
  5309                           ;Config.c: 52: ADCON2bits.ADCS = 0b110;
  5310  0026' 50C0               	movf	4032,w,c	;volatile
  5311  0028' 0BF8               	andlw	-8
  5312  002A' 0906               	iorlw	6
  5313  002C' 6EC0               	movwf	4032,c	;volatile
  5314                           
  5315                           ;Config.c: 53: ADCON2bits.ACQT = 0b101;
  5316  002E' 50C0               	movf	4032,w,c	;volatile
  5317  0030' 0BC7               	andlw	-57
  5318  0032' 0928               	iorlw	40
  5319  0034' 6EC0               	movwf	4032,c	;volatile
  5320                           
  5321                           ;Config.c: 55: TRISAbits.RA1=1;
  5322  0036' 8292               	bsf	3986,1,c	;volatile
  5323                           
  5324                           ;Config.c: 56: ADCON2bits.ADCS=0b110;
  5325  0038' 50C0               	movf	4032,w,c	;volatile
  5326  003A' 0BF8               	andlw	-8
  5327  003C' 0906               	iorlw	6
  5328  003E' 6EC0               	movwf	4032,c	;volatile
  5329                           
  5330                           ;Config.c: 57: ADCON1bits.VCFG1=0;
  5331  0040' 9AC1               	bcf	4033,5,c	;volatile
  5332                           
  5333                           ;Config.c: 58: ADCON1bits.VCFG0=0;
  5334  0042' 98C1               	bcf	4033,4,c	;volatile
  5335                           
  5336                           ;Config.c: 60: ADCON2bits.ADFM=1;
  5337  0044' 8EC0               	bsf	4032,7,c	;volatile
  5338                           
  5339                           ;Config.c: 64: ADCON0bits.ADON=0;
  5340  0046' 90C2               	bcf	4034,0,c	;volatile
  5341                           
  5342                           ;Config.c: 66: PIE1bits.ADIE=0;
  5343  0048' 9C9D               	bcf	3997,6,c	;volatile
  5344                           
  5345                           ;Config.c: 67: PIR1bits.ADIF=0;
  5346  004A' 9C9E               	bcf	3998,6,c	;volatile
  5347                           
  5348                           ;Config.c: 69: ADCON2bits.ACQT=0b111;
  5349  004C' 86C0               	bsf	4032,3,c	;volatile
  5350  004E' 88C0               	bsf	4032,4,c	;volatile
  5351  0050' 8AC0               	bsf	4032,5,c	;volatile
  5352                           
  5353                           ;Config.c: 70: ADCON0bits.GO=1;
  5354  0052' 82C2               	bsf	4034,1,c	;volatile
  5355                           
  5356                           ;Config.c: 72: RCIF=0;
  5357  0054' 9A9E               	bcf	3998,5,c	;volatile
  5358                           
  5359                           ;Config.c: 75: TRISD=0;
  5360  0056' 0E00               	movlw	0
  5361  0058' 6E95               	movwf	3989,c	;volatile
  5362                           
  5363                           ;Config.c: 76: PORTA=0;
  5364  005A' 0E00               	movlw	0
  5365  005C' 6E80               	movwf	3968,c	;volatile
  5366  005E' 0012               	return		;funcret
  5367  0060'                    __end_of_configBoard:
  5368                           	opt stack 0
  5369                           tblptru	equ	0xFF8
  5370                           tblptrh	equ	0xFF7
  5371                           tblptrl	equ	0xFF6
  5372                           tablat	equ	0xFF5
  5373                           prodh	equ	0xFF4
  5374                           prodl	equ	0xFF3
  5375                           intcon	equ	0xFF2
  5376                           wreg	equ	0xFE8
  5377                           indf2	equ	0xFDF
  5378                           postinc2	equ	0xFDE
  5379                           postdec2	equ	0xFDD
  5380                           fsr2h	equ	0xFDA
  5381                           fsr2l	equ	0xFD9
  5382                           status	equ	0xFD8
  5383                           
  5384 ;; *************** function ___ftdiv *****************
  5385 ;; Defined at:
  5386 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  5387 ;; Parameters:    Size  Location     Type
  5388 ;;  f1              3   12[COMRAM] float 
  5389 ;;  f2              3   15[COMRAM] float 
  5390 ;; Auto vars:     Size  Location     Type
  5391 ;;  f3              3   22[COMRAM] float 
  5392 ;;  sign            1   26[COMRAM] unsigned char 
  5393 ;;  exp             1   25[COMRAM] unsigned char 
  5394 ;;  cntr            1   21[COMRAM] unsigned char 
  5395 ;; Return value:  Size  Location     Type
  5396 ;;                  3   12[COMRAM] float 
  5397 ;; Registers used:
  5398 ;;		wreg, status,2, status,0, cstack
  5399 ;; Tracked objects:
  5400 ;;		On entry : 0/0
  5401 ;;		On exit  : 0/0
  5402 ;;		Unchanged: 0/0
  5403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5404 ;;      Params:         6       0       0       0       0       0       0       0       0
  5405 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5406 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5407 ;;      Totals:        15       0       0       0       0       0       0       0       0
  5408 ;;Total ram usage:       15 bytes
  5409 ;; Hardware stack levels used:    1
  5410 ;; Hardware stack levels required when called:    1
  5411 ;; This function calls:
  5412 ;;		___ftpack
  5413 ;; This function is called by:
  5414 ;;		_main
  5415 ;;		_wait_in_ms
  5416 ;; This function uses a non-reentrant model
  5417 ;;
  5418                           
  5419                           	psect	text20
  5420  0000'                    __ptext20:
  5421                           	opt stack 0
  5422  0000'                    ___ftdiv:
  5423                           	opt stack 29
  5424                           
  5425                           ;incstack = 0
  5426  0000' C00E' F012'        	movff	___ftdiv@f1+2,??___ftdiv
  5427  0004' 6A00'              	clrf	(??___ftdiv+1)& (0+255),c
  5428  0006' 6A00'              	clrf	(??___ftdiv+2)& (0+255),c
  5429  0008' 340D'              	rlcf	___ftdiv@f1+1,w,c
  5430  000A' 3600'              	rlcf	??___ftdiv& (0+255),f,c
  5431  000C' E301               	bnc	u3071
  5432  000E' 8000'              	bsf	(??___ftdiv+1)& (0+255),0,c
  5433  0010'                    u3071:
  5434  0010' 5012'              	movf	??___ftdiv,w,c
  5435  0012' 6E19'              	movwf	___ftdiv@exp,c
  5436  0014' 5019'              	movf	___ftdiv@exp,w,c
  5437  0016' A4D8               	btfss	status,2,c
  5438  0018' D007               	goto	l649
  5439  001A' 0E00               	movlw	0
  5440  001C' 6E0C'              	movwf	?___ftdiv,c
  5441  001E' 0E00               	movlw	0
  5442  0020' 6E0D'              	movwf	?___ftdiv+1,c
  5443  0022' 0E00               	movlw	0
  5444  0024' 6E0E'              	movwf	?___ftdiv+2,c
  5445  0026' 0012               	return	
  5446  0028'                    l649:
  5447  0028' C011' F012'        	movff	___ftdiv@f2+2,??___ftdiv
  5448  002C' 6A00'              	clrf	(??___ftdiv+1)& (0+255),c
  5449  002E' 6A00'              	clrf	(??___ftdiv+2)& (0+255),c
  5450  0030' 3410'              	rlcf	___ftdiv@f2+1,w,c
  5451  0032' 3600'              	rlcf	??___ftdiv& (0+255),f,c
  5452  0034' E301               	bnc	u3091
  5453  0036' 8000'              	bsf	(??___ftdiv+1)& (0+255),0,c
  5454  0038'                    u3091:
  5455  0038' 5012'              	movf	??___ftdiv,w,c
  5456  003A' 6E1A'              	movwf	___ftdiv@sign,c
  5457  003C' 501A'              	movf	___ftdiv@sign,w,c
  5458  003E' A4D8               	btfss	status,2,c
  5459  0040' D007               	goto	l651
  5460  0042' 0E00               	movlw	0
  5461  0044' 6E0C'              	movwf	?___ftdiv,c
  5462  0046' 0E00               	movlw	0
  5463  0048' 6E0D'              	movwf	?___ftdiv+1,c
  5464  004A' 0E00               	movlw	0
  5465  004C' 6E0E'              	movwf	?___ftdiv+2,c
  5466  004E' 0012               	return	
  5467  0050'                    l651:
  5468  0050' 0E00               	movlw	0
  5469  0052' 6E16'              	movwf	___ftdiv@f3,c
  5470  0054' 0E00               	movlw	0
  5471  0056' 6E17'              	movwf	___ftdiv@f3+1,c
  5472  0058' 0E00               	movlw	0
  5473  005A' 6E18'              	movwf	___ftdiv@f3+2,c
  5474  005C' 501A'              	movf	___ftdiv@sign,w,c
  5475  005E' 0F89               	addlw	137
  5476  0060' 5E19'              	subwf	___ftdiv@exp,f,c
  5477  0062' C00E' F01A'        	movff	___ftdiv@f1+2,___ftdiv@sign
  5478  0066' 5011'              	movf	___ftdiv@f2+2,w,c
  5479  0068' 1A1A'              	xorwf	___ftdiv@sign,f,c
  5480  006A' 0E80               	movlw	128
  5481  006C' 161A'              	andwf	___ftdiv@sign,f,c
  5482  006E' 8E0D'              	bsf	___ftdiv@f1+1,7,c
  5483  0070' 0EFF               	movlw	255
  5484  0072' 160C'              	andwf	___ftdiv@f1,f,c
  5485  0074' 0EFF               	movlw	255
  5486  0076' 160D'              	andwf	___ftdiv@f1+1,f,c
  5487  0078' 0E00               	movlw	0
  5488  007A' 160E'              	andwf	___ftdiv@f1+2,f,c
  5489  007C' 8E10'              	bsf	___ftdiv@f2+1,7,c
  5490  007E' 0EFF               	movlw	255
  5491  0080' 160F'              	andwf	___ftdiv@f2,f,c
  5492  0082' 0EFF               	movlw	255
  5493  0084' 1610'              	andwf	___ftdiv@f2+1,f,c
  5494  0086' 0E00               	movlw	0
  5495  0088' 1611'              	andwf	___ftdiv@f2+2,f,c
  5496  008A' 0E18               	movlw	24
  5497  008C' 6E15'              	movwf	___ftdiv@cntr,c
  5498  008E' 90D8               	bcf	status,0,c
  5499  0090' 3616'              	rlcf	___ftdiv@f3,f,c
  5500  0092' 3617'              	rlcf	___ftdiv@f3+1,f,c
  5501  0094' 3618'              	rlcf	___ftdiv@f3+2,f,c
  5502  0096' 500F'              	movf	___ftdiv@f2,w,c
  5503  0098' 5C0C'              	subwf	___ftdiv@f1,w,c
  5504  009A' 5010'              	movf	___ftdiv@f2+1,w,c
  5505  009C' 580D'              	subwfb	___ftdiv@f1+1,w,c
  5506  009E' 5011'              	movf	___ftdiv@f2+2,w,c
  5507  00A0' 580E'              	subwfb	___ftdiv@f1+2,w,c
  5508  00A2' A0D8               	btfss	status,0,c
  5509  00A4' D007               	goto	l653
  5510  00A6' 500F'              	movf	___ftdiv@f2,w,c
  5511  00A8' 5E0C'              	subwf	___ftdiv@f1,f,c
  5512  00AA' 5010'              	movf	___ftdiv@f2+1,w,c
  5513  00AC' 5A0D'              	subwfb	___ftdiv@f1+1,f,c
  5514  00AE' 5011'              	movf	___ftdiv@f2+2,w,c
  5515  00B0' 5A0E'              	subwfb	___ftdiv@f1+2,f,c
  5516  00B2' 8016'              	bsf	___ftdiv@f3,0,c
  5517  00B4'                    l653:
  5518  00B4' 90D8               	bcf	status,0,c
  5519  00B6' 360C'              	rlcf	___ftdiv@f1,f,c
  5520  00B8' 360D'              	rlcf	___ftdiv@f1+1,f,c
  5521  00BA' 360E'              	rlcf	___ftdiv@f1+2,f,c
  5522  00BC' 2E15'              	decfsz	___ftdiv@cntr,f,c
  5523  00BE' D7E7               	goto	l652
  5524  00C0' C016' F000'        	movff	___ftdiv@f3,___ftpack@arg
  5525  00C4' C017' F001'        	movff	___ftdiv@f3+1,___ftpack@arg+1
  5526  00C8' C018' F002'        	movff	___ftdiv@f3+2,___ftpack@arg+2
  5527  00CC' C019' F003'        	movff	___ftdiv@exp,___ftpack@exp
  5528  00D0' C01A' F004'        	movff	___ftdiv@sign,___ftpack@sign
  5529  00D4' EC00' F000'        	call	___ftpack	;wreg free
  5530  00D8' C000' F00C'        	movff	?___ftpack,?___ftdiv
  5531  00DC' C001' F00D'        	movff	?___ftpack+1,?___ftdiv+1
  5532  00E0' C002' F00E'        	movff	?___ftpack+2,?___ftdiv+2
  5533  00E4' 0012               	return	
  5534  00E6'                    __end_of___ftdiv:
  5535                           	opt stack 0
  5536                           tblptru	equ	0xFF8
  5537                           tblptrh	equ	0xFF7
  5538                           tblptrl	equ	0xFF6
  5539                           tablat	equ	0xFF5
  5540                           prodh	equ	0xFF4
  5541                           prodl	equ	0xFF3
  5542                           intcon	equ	0xFF2
  5543                           wreg	equ	0xFE8
  5544                           indf2	equ	0xFDF
  5545                           postinc2	equ	0xFDE
  5546                           postdec2	equ	0xFDD
  5547                           fsr2h	equ	0xFDA
  5548                           fsr2l	equ	0xFD9
  5549                           status	equ	0xFD8
  5550                           
  5551 ;; *************** function ___awtoft *****************
  5552 ;; Defined at:
  5553 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
  5554 ;; Parameters:    Size  Location     Type
  5555 ;;  c               2    8[COMRAM] int 
  5556 ;; Auto vars:     Size  Location     Type
  5557 ;;  sign            1   11[COMRAM] unsigned char 
  5558 ;; Return value:  Size  Location     Type
  5559 ;;                  3    8[COMRAM] float 
  5560 ;; Registers used:
  5561 ;;		wreg, status,2, status,0, cstack
  5562 ;; Tracked objects:
  5563 ;;		On entry : 0/0
  5564 ;;		On exit  : 0/0
  5565 ;;		Unchanged: 0/0
  5566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5567 ;;      Params:         3       0       0       0       0       0       0       0       0
  5568 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5569 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5570 ;;      Totals:         4       0       0       0       0       0       0       0       0
  5571 ;;Total ram usage:        4 bytes
  5572 ;; Hardware stack levels used:    1
  5573 ;; Hardware stack levels required when called:    1
  5574 ;; This function calls:
  5575 ;;		___ftpack
  5576 ;; This function is called by:
  5577 ;;		_main
  5578 ;;		_wait_in_ms
  5579 ;; This function uses a non-reentrant model
  5580 ;;
  5581                           
  5582                           	psect	text21
  5583  0000'                    __ptext21:
  5584                           	opt stack 0
  5585  0000'                    ___awtoft:
  5586                           	opt stack 29
  5587                           
  5588                           ;incstack = 0
  5589  0000' 0E00               	movlw	0
  5590  0002' 6E0B'              	movwf	___awtoft@sign,c
  5591  0004' AE09'              	btfss	___awtoft@c+1,7,c
  5592  0006' D006               	goto	l549
  5593  0008' 6C08'              	negf	___awtoft@c,c
  5594  000A' 1E09'              	comf	___awtoft@c+1,f,c
  5595  000C' B0D8               	btfsc	status,0,c
  5596  000E' 2A09'              	incf	___awtoft@c+1,f,c
  5597  0010' 0E01               	movlw	1
  5598  0012' 6E0B'              	movwf	___awtoft@sign,c
  5599  0014'                    l549:
  5600  0014' C008' F000'        	movff	___awtoft@c,___ftpack@arg
  5601  0018' C009' F001'        	movff	___awtoft@c+1,___ftpack@arg+1
  5602  001C' 6A02'              	clrf	___ftpack@arg+2,c
  5603  001E' 0E8E               	movlw	142
  5604  0020' 6E03'              	movwf	___ftpack@exp,c
  5605  0022' C00B' F004'        	movff	___awtoft@sign,___ftpack@sign
  5606  0026' EC00' F000'        	call	___ftpack	;wreg free
  5607  002A' C000' F008'        	movff	?___ftpack,?___awtoft
  5608  002E' C001' F009'        	movff	?___ftpack+1,?___awtoft+1
  5609  0032' C002' F00A'        	movff	?___ftpack+2,?___awtoft+2
  5610  0036' 0012               	return	
  5611  0038'                    __end_of___awtoft:
  5612                           	opt stack 0
  5613                           tblptru	equ	0xFF8
  5614                           tblptrh	equ	0xFF7
  5615                           tblptrl	equ	0xFF6
  5616                           tablat	equ	0xFF5
  5617                           prodh	equ	0xFF4
  5618                           prodl	equ	0xFF3
  5619                           intcon	equ	0xFF2
  5620                           wreg	equ	0xFE8
  5621                           indf2	equ	0xFDF
  5622                           postinc2	equ	0xFDE
  5623                           postdec2	equ	0xFDD
  5624                           fsr2h	equ	0xFDA
  5625                           fsr2l	equ	0xFD9
  5626                           status	equ	0xFD8
  5627                           
  5628 ;; *************** function ___ftpack *****************
  5629 ;; Defined at:
  5630 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  5631 ;; Parameters:    Size  Location     Type
  5632 ;;  arg             3    0[COMRAM] unsigned um
  5633 ;;  exp             1    3[COMRAM] unsigned char 
  5634 ;;  sign            1    4[COMRAM] unsigned char 
  5635 ;; Auto vars:     Size  Location     Type
  5636 ;;		None
  5637 ;; Return value:  Size  Location     Type
  5638 ;;                  3    0[COMRAM] float 
  5639 ;; Registers used:
  5640 ;;		wreg, status,2, status,0
  5641 ;; Tracked objects:
  5642 ;;		On entry : 0/0
  5643 ;;		On exit  : 0/0
  5644 ;;		Unchanged: 0/0
  5645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5646 ;;      Params:         5       0       0       0       0       0       0       0       0
  5647 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5648 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5649 ;;      Totals:         8       0       0       0       0       0       0       0       0
  5650 ;;Total ram usage:        8 bytes
  5651 ;; Hardware stack levels used:    1
  5652 ;; This function calls:
  5653 ;;		Nothing
  5654 ;; This function is called by:
  5655 ;;		___awtoft
  5656 ;;		___ftadd
  5657 ;;		___ftdiv
  5658 ;;		___ftmul
  5659 ;;		___lltoft
  5660 ;; This function uses a non-reentrant model
  5661 ;;
  5662                           
  5663                           	psect	text22
  5664  0000'                    __ptext22:
  5665                           	opt stack 0
  5666  0000'                    ___ftpack:
  5667                           	opt stack 27
  5668                           
  5669                           ;incstack = 0
  5670  0000' 5003'              	movf	___ftpack@exp,w,c
  5671  0002' B4D8               	btfsc	status,2,c
  5672  0004' D005               	goto	u1650
  5673  0006' 5000'              	movf	___ftpack@arg,w,c
  5674  0008' 1001'              	iorwf	___ftpack@arg+1,w,c
  5675  000A' 1002'              	iorwf	___ftpack@arg+2,w,c
  5676  000C' A4D8               	btfss	status,2,c
  5677  000E' D00C               	goto	l585
  5678  0010'                    u1650:
  5679  0010' 0E00               	movlw	0
  5680  0012' 6E00'              	movwf	?___ftpack,c
  5681  0014' 0E00               	movlw	0
  5682  0016' 6E01'              	movwf	?___ftpack+1,c
  5683  0018' 0E00               	movlw	0
  5684  001A' 6E02'              	movwf	?___ftpack+2,c
  5685  001C' 0012               	return	
  5686  001E' 2A03'              	incf	___ftpack@exp,f,c
  5687  0020' 90D8               	bcf	status,0,c
  5688  0022' 3202'              	rrcf	___ftpack@arg+2,f,c
  5689  0024' 3201'              	rrcf	___ftpack@arg+1,f,c
  5690  0026' 3200'              	rrcf	___ftpack@arg,f,c
  5691  0028'                    l585:
  5692  0028' 0E00               	movlw	0
  5693  002A' 1400'              	andwf	___ftpack@arg,w,c
  5694  002C' 6E00'              	movwf	??___ftpack& (0+255),c
  5695  002E' 0E00               	movlw	0
  5696  0030' 1401'              	andwf	___ftpack@arg+1,w,c
  5697  0032' 6E00'              	movwf	(??___ftpack+1)& (0+255),c
  5698  0034' 0EFE               	movlw	254
  5699  0036' 1402'              	andwf	___ftpack@arg+2,w,c
  5700  0038' 6E00'              	movwf	(??___ftpack+2)& (0+255),c
  5701  003A' 5005'              	movf	??___ftpack,w,c
  5702  003C' 1006'              	iorwf	??___ftpack+1,w,c
  5703  003E' 1007'              	iorwf	??___ftpack+2,w,c
  5704  0040' B4D8               	btfsc	status,2,c
  5705  0042' D00C               	goto	l588
  5706  0044' D7EC               	goto	l586
  5707  0046' 2A03'              	incf	___ftpack@exp,f,c
  5708  0048' 0E01               	movlw	1
  5709  004A' 2600'              	addwf	___ftpack@arg,f,c
  5710  004C' 0E00               	movlw	0
  5711  004E' 2201'              	addwfc	___ftpack@arg+1,f,c
  5712  0050' 0E00               	movlw	0
  5713  0052' 2202'              	addwfc	___ftpack@arg+2,f,c
  5714  0054' 90D8               	bcf	status,0,c
  5715  0056' 3202'              	rrcf	___ftpack@arg+2,f,c
  5716  0058' 3201'              	rrcf	___ftpack@arg+1,f,c
  5717  005A' 3200'              	rrcf	___ftpack@arg,f,c
  5718  005C'                    l588:
  5719  005C' 0E00               	movlw	0
  5720  005E' 1400'              	andwf	___ftpack@arg,w,c
  5721  0060' 6E00'              	movwf	??___ftpack& (0+255),c
  5722  0062' 0E00               	movlw	0
  5723  0064' 1401'              	andwf	___ftpack@arg+1,w,c
  5724  0066' 6E00'              	movwf	(??___ftpack+1)& (0+255),c
  5725  0068' 0EFF               	movlw	255
  5726  006A' 1402'              	andwf	___ftpack@arg+2,w,c
  5727  006C' 6E00'              	movwf	(??___ftpack+2)& (0+255),c
  5728  006E' 5005'              	movf	??___ftpack,w,c
  5729  0070' 1006'              	iorwf	??___ftpack+1,w,c
  5730  0072' 1007'              	iorwf	??___ftpack+2,w,c
  5731  0074' B4D8               	btfsc	status,2,c
  5732  0076' D006               	goto	l591
  5733  0078' D7E6               	goto	l589
  5734  007A' 0603'              	decf	___ftpack@exp,f,c
  5735  007C' 90D8               	bcf	status,0,c
  5736  007E' 3600'              	rlcf	___ftpack@arg,f,c
  5737  0080' 3601'              	rlcf	___ftpack@arg+1,f,c
  5738  0082' 3602'              	rlcf	___ftpack@arg+2,f,c
  5739  0084'                    l591:
  5740  0084' BE01'              	btfsc	___ftpack@arg+1,7,c
  5741  0086' D003               	goto	u1690
  5742  0088' 0E02               	movlw	2
  5743  008A' 6003'              	cpfslt	___ftpack@exp,c
  5744  008C' D7F6               	goto	l592
  5745  008E'                    u1690:
  5746  008E' A003'              	btfss	___ftpack@exp,0,c
  5747  0090' 9E01'              	bcf	___ftpack@arg+1,7,c
  5748  0092' 90D8               	bcf	status,0,c
  5749  0094' 3203'              	rrcf	___ftpack@exp,f,c
  5750  0096' 5003'              	movf	___ftpack@exp,w,c
  5751  0098' 1202'              	iorwf	___ftpack@arg+2,f,c
  5752  009A' 5004'              	movf	___ftpack@sign,w,c
  5753  009C' A4D8               	btfss	status,2,c
  5754  009E' 8E02'              	bsf	___ftpack@arg+2,7,c
  5755  00A0' C000' F000'        	movff	___ftpack@arg,?___ftpack
  5756  00A4' C001' F001'        	movff	___ftpack@arg+1,?___ftpack+1
  5757  00A8' C002' F002'        	movff	___ftpack@arg+2,?___ftpack+2
  5758  00AC' 0012               	return	
  5759  00AE'                    __end_of___ftpack:
  5760                           	opt stack 0
  5761                           tblptru	equ	0xFF8
  5762                           tblptrh	equ	0xFF7
  5763                           tblptrl	equ	0xFF6
  5764                           tablat	equ	0xFF5
  5765                           prodh	equ	0xFF4
  5766                           prodl	equ	0xFF3
  5767                           intcon	equ	0xFF2
  5768                           wreg	equ	0xFE8
  5769                           indf2	equ	0xFDF
  5770                           postinc2	equ	0xFDE
  5771                           postdec2	equ	0xFDD
  5772                           fsr2h	equ	0xFDA
  5773                           fsr2l	equ	0xFD9
  5774                           status	equ	0xFD8
  5775                           
  5776 ;; *************** function _I2C_Read *****************
  5777 ;; Defined at:
  5778 ;;		line 63 in file "I2C.c"
  5779 ;; Parameters:    Size  Location     Type
  5780 ;;  flag            1    wreg     unsigned char 
  5781 ;; Auto vars:     Size  Location     Type
  5782 ;;  flag            1    0[COMRAM] unsigned char 
  5783 ;;  buffer          1    1[COMRAM] unsigned char 
  5784 ;; Return value:  Size  Location     Type
  5785 ;;                  1    wreg      unsigned char 
  5786 ;; Registers used:
  5787 ;;		wreg, status,2, cstack
  5788 ;; Tracked objects:
  5789 ;;		On entry : 0/0
  5790 ;;		On exit  : 0/0
  5791 ;;		Unchanged: 0/0
  5792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5793 ;;      Params:         0       0       0       0       0       0       0       0       0
  5794 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5795 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5796 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5797 ;;Total ram usage:        2 bytes
  5798 ;; Hardware stack levels used:    1
  5799 ;; Hardware stack levels required when called:    1
  5800 ;; This function calls:
  5801 ;;		_I2C_Ack
  5802 ;;		_I2C_Nack
  5803 ;;		_I2C_Ready
  5804 ;; This function is called by:
  5805 ;;		_main
  5806 ;; This function uses a non-reentrant model
  5807 ;;
  5808                           
  5809                           	psect	text23
  5810  0000'                    __ptext23:
  5811                           	opt stack 0
  5812  0000'                    _I2C_Read:
  5813                           	opt stack 29
  5814                           
  5815                           ;incstack = 0
  5816                           ;I2C_Read@flag stored from wreg
  5817  0000' 6E00'              	movwf	I2C_Read@flag,c
  5818                           
  5819                           ;I2C.c: 65: char buffer;
  5820                           ;I2C.c: 66: RCEN = 1;
  5821  0002' 86C5               	bsf	4037,3,c	;volatile
  5822  0004' A0C7               	btfss	4039,0,c	;volatile
  5823  0006' D7FE               	goto	l68
  5824                           
  5825                           ;I2C.c: 68: buffer = SSPBUF;
  5826  0008' CFC9 F001'         	movff	4041,I2C_Read@buffer	;volatile
  5827                           
  5828                           ;I2C.c: 69: if(flag==0)
  5829  000C' 5000'              	movf	I2C_Read@flag,w,c
  5830  000E' A4D8               	btfss	status,2,c
  5831  0010' D003               	goto	l70
  5832                           
  5833                           ;I2C.c: 70: I2C_Ack();
  5834  0012' EC00' F000'        	call	_I2C_Ack	;wreg free
  5835  0016' D002               	goto	l71
  5836  0018'                    l70:
  5837                           
  5838                           ;I2C.c: 71: else
  5839                           ;I2C.c: 72: I2C_Nack();
  5840  0018' EC00' F000'        	call	_I2C_Nack	;wreg free
  5841  001C'                    l71:
  5842                           
  5843                           ;I2C.c: 73: I2C_Ready();
  5844  001C' EC00' F000'        	call	_I2C_Ready	;wreg free
  5845                           
  5846                           ;I2C.c: 74: return(buffer);
  5847  0020' 5001'              	movf	I2C_Read@buffer,w,c
  5848  0022' 0012               	return	
  5849  0024'                    __end_of_I2C_Read:
  5850                           	opt stack 0
  5851                           tblptru	equ	0xFF8
  5852                           tblptrh	equ	0xFF7
  5853                           tblptrl	equ	0xFF6
  5854                           tablat	equ	0xFF5
  5855                           prodh	equ	0xFF4
  5856                           prodl	equ	0xFF3
  5857                           intcon	equ	0xFF2
  5858                           wreg	equ	0xFE8
  5859                           indf2	equ	0xFDF
  5860                           postinc2	equ	0xFDE
  5861                           postdec2	equ	0xFDD
  5862                           fsr2h	equ	0xFDA
  5863                           fsr2l	equ	0xFD9
  5864                           status	equ	0xFD8
  5865                           
  5866 ;; *************** function _I2C_Nack *****************
  5867 ;; Defined at:
  5868 ;;		line 55 in file "I2C.c"
  5869 ;; Parameters:    Size  Location     Type
  5870 ;;		None
  5871 ;; Auto vars:     Size  Location     Type
  5872 ;;		None
  5873 ;; Return value:  Size  Location     Type
  5874 ;;                  1    wreg      void 
  5875 ;; Registers used:
  5876 ;;		None
  5877 ;; Tracked objects:
  5878 ;;		On entry : 0/0
  5879 ;;		On exit  : 0/0
  5880 ;;		Unchanged: 0/0
  5881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5882 ;;      Params:         0       0       0       0       0       0       0       0       0
  5883 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5884 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5885 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5886 ;;Total ram usage:        0 bytes
  5887 ;; Hardware stack levels used:    1
  5888 ;; This function calls:
  5889 ;;		Nothing
  5890 ;; This function is called by:
  5891 ;;		_I2C_Read
  5892 ;; This function uses a non-reentrant model
  5893 ;;
  5894                           
  5895                           	psect	text24
  5896  0000'                    __ptext24:
  5897                           	opt stack 0
  5898  0000'                    _I2C_Nack:
  5899                           	opt stack 29
  5900                           
  5901                           ;I2C.c: 57: ACKDT = 1;
  5902                           
  5903                           ;incstack = 0
  5904  0000' 8AC5               	bsf	4037,5,c	;volatile
  5905                           
  5906                           ;I2C.c: 58: ACKEN = 1;
  5907  0002' 88C5               	bsf	4037,4,c	;volatile
  5908  0004' A8C5               	btfss	4037,4,c	;volatile
  5909  0006' 0012               	return	
  5910  0008' D7FD               	goto	l62
  5911  000A'                    __end_of_I2C_Nack:
  5912                           	opt stack 0
  5913                           tblptru	equ	0xFF8
  5914                           tblptrh	equ	0xFF7
  5915                           tblptrl	equ	0xFF6
  5916                           tablat	equ	0xFF5
  5917                           prodh	equ	0xFF4
  5918                           prodl	equ	0xFF3
  5919                           intcon	equ	0xFF2
  5920                           wreg	equ	0xFE8
  5921                           indf2	equ	0xFDF
  5922                           postinc2	equ	0xFDE
  5923                           postdec2	equ	0xFDD
  5924                           fsr2h	equ	0xFDA
  5925                           fsr2l	equ	0xFD9
  5926                           status	equ	0xFD8
  5927                           
  5928 ;; *************** function _I2C_Ack *****************
  5929 ;; Defined at:
  5930 ;;		line 48 in file "I2C.c"
  5931 ;; Parameters:    Size  Location     Type
  5932 ;;		None
  5933 ;; Auto vars:     Size  Location     Type
  5934 ;;		None
  5935 ;; Return value:  Size  Location     Type
  5936 ;;                  1    wreg      void 
  5937 ;; Registers used:
  5938 ;;		None
  5939 ;; Tracked objects:
  5940 ;;		On entry : 0/0
  5941 ;;		On exit  : 0/0
  5942 ;;		Unchanged: 0/0
  5943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5944 ;;      Params:         0       0       0       0       0       0       0       0       0
  5945 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5946 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5947 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5948 ;;Total ram usage:        0 bytes
  5949 ;; Hardware stack levels used:    1
  5950 ;; This function calls:
  5951 ;;		Nothing
  5952 ;; This function is called by:
  5953 ;;		_I2C_Read
  5954 ;; This function uses a non-reentrant model
  5955 ;;
  5956                           
  5957                           	psect	text25
  5958  0000'                    __ptext25:
  5959                           	opt stack 0
  5960  0000'                    _I2C_Ack:
  5961                           	opt stack 29
  5962                           
  5963                           ;I2C.c: 49: ACKDT = 0;
  5964                           
  5965                           ;incstack = 0
  5966  0000' 9AC5               	bcf	4037,5,c	;volatile
  5967                           
  5968                           ;I2C.c: 50: ACKEN = 1;
  5969  0002' 88C5               	bsf	4037,4,c	;volatile
  5970  0004' A8C5               	btfss	4037,4,c	;volatile
  5971  0006' 0012               	return	
  5972  0008' D7FD               	goto	l56
  5973  000A'                    __end_of_I2C_Ack:
  5974                           	opt stack 0
  5975                           tblptru	equ	0xFF8
  5976                           tblptrh	equ	0xFF7
  5977                           tblptrl	equ	0xFF6
  5978                           tablat	equ	0xFF5
  5979                           prodh	equ	0xFF4
  5980                           prodl	equ	0xFF3
  5981                           intcon	equ	0xFF2
  5982                           wreg	equ	0xFE8
  5983                           indf2	equ	0xFDF
  5984                           postinc2	equ	0xFDE
  5985                           postdec2	equ	0xFDD
  5986                           fsr2h	equ	0xFDA
  5987                           fsr2l	equ	0xFD9
  5988                           status	equ	0xFD8
  5989                           
  5990 ;; *************** function _Acelerometro_Start *****************
  5991 ;; Defined at:
  5992 ;;		line 157 in file "I2C.c"
  5993 ;; Parameters:    Size  Location     Type
  5994 ;;		None
  5995 ;; Auto vars:     Size  Location     Type
  5996 ;;		None
  5997 ;; Return value:  Size  Location     Type
  5998 ;;                  1    wreg      void 
  5999 ;; Registers used:
  6000 ;;		wreg, status,2, cstack
  6001 ;; Tracked objects:
  6002 ;;		On entry : 0/0
  6003 ;;		On exit  : 0/0
  6004 ;;		Unchanged: 0/0
  6005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6006 ;;      Params:         0       0       0       0       0       0       0       0       0
  6007 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6008 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6009 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6010 ;;Total ram usage:        0 bytes
  6011 ;; Hardware stack levels used:    1
  6012 ;; Hardware stack levels required when called:    3
  6013 ;; This function calls:
  6014 ;;		_I2C_Repeated_Start
  6015 ;;		_I2C_Start_Wait
  6016 ;;		_I2C_Write
  6017 ;; This function is called by:
  6018 ;;		_main
  6019 ;; This function uses a non-reentrant model
  6020 ;;
  6021                           
  6022                           	psect	text26
  6023  0000'                    __ptext26:
  6024                           	opt stack 0
  6025  0000'                    _Acelerometro_Start:
  6026                           	opt stack 27
  6027                           
  6028                           ;I2C.c: 160: I2C_Start_Wait(0xD0);
  6029                           
  6030                           ;incstack = 0
  6031  0000' 0ED0               	movlw	208
  6032  0002' EC00' F000'        	call	_I2C_Start_Wait
  6033                           
  6034                           ;I2C.c: 161: I2C_Write(0x3B);
  6035  0006' 0E3B               	movlw	59
  6036  0008' EC00' F000'        	call	_I2C_Write
  6037                           
  6038                           ;I2C.c: 162: I2C_Repeated_Start(0xD1);
  6039  000C' 0ED1               	movlw	209
  6040  000E' EC00' F000'        	call	_I2C_Repeated_Start
  6041  0012' 0012               	return		;funcret
  6042  0014'                    __end_of_Acelerometro_Start:
  6043                           	opt stack 0
  6044                           tblptru	equ	0xFF8
  6045                           tblptrh	equ	0xFF7
  6046                           tblptrl	equ	0xFF6
  6047                           tablat	equ	0xFF5
  6048                           prodh	equ	0xFF4
  6049                           prodl	equ	0xFF3
  6050                           intcon	equ	0xFF2
  6051                           wreg	equ	0xFE8
  6052                           indf2	equ	0xFDF
  6053                           postinc2	equ	0xFDE
  6054                           postdec2	equ	0xFDD
  6055                           fsr2h	equ	0xFDA
  6056                           fsr2l	equ	0xFD9
  6057                           status	equ	0xFD8
  6058                           
  6059 ;; *************** function _I2C_Start_Wait *****************
  6060 ;; Defined at:
  6061 ;;		line 108 in file "I2C.c"
  6062 ;; Parameters:    Size  Location     Type
  6063 ;;  slave_write_    1    wreg     unsigned char 
  6064 ;; Auto vars:     Size  Location     Type
  6065 ;;  slave_write_    1    1[COMRAM] unsigned char 
  6066 ;; Return value:  Size  Location     Type
  6067 ;;                  1    wreg      void 
  6068 ;; Registers used:
  6069 ;;		wreg, status,2, cstack
  6070 ;; Tracked objects:
  6071 ;;		On entry : 0/0
  6072 ;;		On exit  : 0/0
  6073 ;;		Unchanged: 0/0
  6074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6075 ;;      Params:         0       0       0       0       0       0       0       0       0
  6076 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6077 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6078 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6079 ;;Total ram usage:        1 bytes
  6080 ;; Hardware stack levels used:    1
  6081 ;; Hardware stack levels required when called:    2
  6082 ;; This function calls:
  6083 ;;		_I2C_Stop
  6084 ;;		_I2C_Write
  6085 ;; This function is called by:
  6086 ;;		_Acelerometro_Start
  6087 ;;		_Aceletometro_Init
  6088 ;; This function uses a non-reentrant model
  6089 ;;
  6090                           
  6091                           	psect	text27
  6092  0000'                    __ptext27:
  6093                           	opt stack 0
  6094  0000'                    _I2C_Start_Wait:
  6095                           	opt stack 27
  6096                           
  6097                           ;incstack = 0
  6098                           ;I2C_Start_Wait@slave_write_address stored from wreg
  6099  0000' 6E01'              	movwf	I2C_Start_Wait@slave_write_address,c
  6100  0002'                    l95:
  6101                           
  6102                           ;I2C.c: 111: {
  6103                           ;I2C.c: 112: SSPCON2bits.SEN = 1;
  6104  0002' 80C5               	bsf	4037,0,c	;volatile
  6105  0004' B0C5               	btfsc	4037,0,c	;volatile
  6106  0006' D7FE               	goto	l97
  6107                           
  6108                           ;I2C.c: 114: SSPIF = 0;
  6109  0008' 969E               	bcf	3998,3,c	;volatile
  6110                           
  6111                           ;I2C.c: 115: if(!SSPSTATbits.S)
  6112  000A' A6C7               	btfss	4039,3,c	;volatile
  6113  000C' D7FA               	goto	l95
  6114                           
  6115                           ;I2C.c: 117: I2C_Write(slave_write_address);
  6116                           
  6117                           ;I2C.c: 116: continue;
  6118  000E' 5001'              	movf	I2C_Start_Wait@slave_write_address,w,c
  6119  0010' EC00' F000'        	call	_I2C_Write
  6120                           
  6121                           ;I2C.c: 118: if(ACKSTAT)
  6122  0014' ACC5               	btfss	4037,6,c	;volatile
  6123  0016' 0012               	return	
  6124                           
  6125                           ;I2C.c: 119: {
  6126                           ;I2C.c: 120: I2C_Stop();
  6127  0018' EC00' F000'        	call	_I2C_Stop	;wreg free
  6128                           
  6129                           ;I2C.c: 121: continue;
  6130  001C' D7F2               	goto	l95
  6131  001E'                    __end_of_I2C_Start_Wait:
  6132                           	opt stack 0
  6133                           tblptru	equ	0xFF8
  6134                           tblptrh	equ	0xFF7
  6135                           tblptrl	equ	0xFF6
  6136                           tablat	equ	0xFF5
  6137                           prodh	equ	0xFF4
  6138                           prodl	equ	0xFF3
  6139                           intcon	equ	0xFF2
  6140                           wreg	equ	0xFE8
  6141                           indf2	equ	0xFDF
  6142                           postinc2	equ	0xFDE
  6143                           postdec2	equ	0xFDD
  6144                           fsr2h	equ	0xFDA
  6145                           fsr2l	equ	0xFD9
  6146                           status	equ	0xFD8
  6147                           
  6148 ;; *************** function _I2C_Stop *****************
  6149 ;; Defined at:
  6150 ;;		line 165 in file "I2C.c"
  6151 ;; Parameters:    Size  Location     Type
  6152 ;;		None
  6153 ;; Auto vars:     Size  Location     Type
  6154 ;;		None
  6155 ;; Return value:  Size  Location     Type
  6156 ;;                  1    wreg      unsigned char 
  6157 ;; Registers used:
  6158 ;;		wreg
  6159 ;; Tracked objects:
  6160 ;;		On entry : 0/0
  6161 ;;		On exit  : 0/0
  6162 ;;		Unchanged: 0/0
  6163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6164 ;;      Params:         0       0       0       0       0       0       0       0       0
  6165 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6166 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6167 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6168 ;;Total ram usage:        0 bytes
  6169 ;; Hardware stack levels used:    1
  6170 ;; This function calls:
  6171 ;;		Nothing
  6172 ;; This function is called by:
  6173 ;;		_I2C_Start_Wait
  6174 ;;		_main
  6175 ;;		_Aceletometro_Init
  6176 ;; This function uses a non-reentrant model
  6177 ;;
  6178                           
  6179                           	psect	text28
  6180  0000'                    __ptext28:
  6181                           	opt stack 0
  6182  0000'                    _I2C_Stop:
  6183                           	opt stack 30
  6184                           
  6185                           ;I2C.c: 167: PEN = 1;
  6186                           
  6187                           ;incstack = 0
  6188  0000' 84C5               	bsf	4037,2,c	;volatile
  6189  0002' B4C5               	btfsc	4037,2,c	;volatile
  6190  0004' D7FE               	goto	l113
  6191                           
  6192                           ;I2C.c: 169: SSPIF = 0;
  6193  0006' 969E               	bcf	3998,3,c	;volatile
  6194                           
  6195                           ;I2C.c: 170: if(!SSPSTATbits.P);
  6196  0008' 50C7               	movf	4039,w,c	;volatile
  6197  000A' 0012               	return	
  6198  000C'                    __end_of_I2C_Stop:
  6199                           	opt stack 0
  6200                           tblptru	equ	0xFF8
  6201                           tblptrh	equ	0xFF7
  6202                           tblptrl	equ	0xFF6
  6203                           tablat	equ	0xFF5
  6204                           prodh	equ	0xFF4
  6205                           prodl	equ	0xFF3
  6206                           intcon	equ	0xFF2
  6207                           wreg	equ	0xFE8
  6208                           indf2	equ	0xFDF
  6209                           postinc2	equ	0xFDE
  6210                           postdec2	equ	0xFDD
  6211                           fsr2h	equ	0xFDA
  6212                           fsr2l	equ	0xFD9
  6213                           status	equ	0xFD8
  6214                           
  6215 ;; *************** function _I2C_Repeated_Start *****************
  6216 ;; Defined at:
  6217 ;;		line 93 in file "I2C.c"
  6218 ;; Parameters:    Size  Location     Type
  6219 ;;  slave_read_a    1    wreg     unsigned char 
  6220 ;; Auto vars:     Size  Location     Type
  6221 ;;  slave_read_a    1    1[COMRAM] unsigned char 
  6222 ;; Return value:  Size  Location     Type
  6223 ;;                  1    wreg      unsigned char 
  6224 ;; Registers used:
  6225 ;;		wreg, status,2, cstack
  6226 ;; Tracked objects:
  6227 ;;		On entry : 0/0
  6228 ;;		On exit  : 0/0
  6229 ;;		Unchanged: 0/0
  6230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6231 ;;      Params:         0       0       0       0       0       0       0       0       0
  6232 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6233 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6234 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6235 ;;Total ram usage:        1 bytes
  6236 ;; Hardware stack levels used:    1
  6237 ;; Hardware stack levels required when called:    2
  6238 ;; This function calls:
  6239 ;;		_I2C_Write
  6240 ;; This function is called by:
  6241 ;;		_Acelerometro_Start
  6242 ;; This function uses a non-reentrant model
  6243 ;;
  6244                           
  6245                           	psect	text29
  6246  0000'                    __ptext29:
  6247                           	opt stack 0
  6248  0000'                    _I2C_Repeated_Start:
  6249                           	opt stack 27
  6250                           
  6251                           ;incstack = 0
  6252                           ;I2C_Repeated_Start@slave_read_address stored from wreg
  6253  0000' 6E01'              	movwf	I2C_Repeated_Start@slave_read_address,c
  6254                           
  6255                           ;I2C.c: 95: RSEN = 1;
  6256  0002' 82C5               	bsf	4037,1,c	;volatile
  6257  0004' B2C5               	btfsc	4037,1,c	;volatile
  6258  0006' D7FE               	goto	l87
  6259                           
  6260                           ;I2C.c: 97: SSPIF = 0;
  6261  0008' 969E               	bcf	3998,3,c	;volatile
  6262                           
  6263                           ;I2C.c: 98: if(!SSPSTATbits.S)
  6264  000A' A6C7               	btfss	4039,3,c	;volatile
  6265  000C' 0012               	return	
  6266                           
  6267                           ;I2C.c: 100: I2C_Write(slave_read_address);
  6268                           
  6269                           ;I2C.c: 99: return 0;
  6270                           ;	Return value of _I2C_Repeated_Start is never used
  6271  000E' 5001'              	movf	I2C_Repeated_Start@slave_read_address,w,c
  6272  0010' EC00' F000'        	call	_I2C_Write
  6273                           
  6274                           ;I2C.c: 103: else
  6275                           ;I2C.c: 104: return 2;
  6276                           ;	Return value of _I2C_Repeated_Start is never used
  6277                           
  6278                           ;I2C.c: 102: return 1;
  6279                           ;	Return value of _I2C_Repeated_Start is never used
  6280                           
  6281                           ;I2C.c: 101: if (ACKSTAT)
  6282  0014' 0012               	return	
  6283  0016'                    __end_of_I2C_Repeated_Start:
  6284                           	opt stack 0
  6285                           tblptru	equ	0xFF8
  6286                           tblptrh	equ	0xFF7
  6287                           tblptrl	equ	0xFF6
  6288                           tablat	equ	0xFF5
  6289                           prodh	equ	0xFF4
  6290                           prodl	equ	0xFF3
  6291                           intcon	equ	0xFF2
  6292                           wreg	equ	0xFE8
  6293                           indf2	equ	0xFDF
  6294                           postinc2	equ	0xFDE
  6295                           postdec2	equ	0xFDD
  6296                           fsr2h	equ	0xFDA
  6297                           fsr2l	equ	0xFD9
  6298                           status	equ	0xFD8
  6299                           
  6300 ;; *************** function _I2C_Write *****************
  6301 ;; Defined at:
  6302 ;;		line 83 in file "I2C.c"
  6303 ;; Parameters:    Size  Location     Type
  6304 ;;  data            1    wreg     unsigned char 
  6305 ;; Auto vars:     Size  Location     Type
  6306 ;;  data            1    0[COMRAM] unsigned char 
  6307 ;; Return value:  Size  Location     Type
  6308 ;;                  1    wreg      unsigned char 
  6309 ;; Registers used:
  6310 ;;		wreg, cstack
  6311 ;; Tracked objects:
  6312 ;;		On entry : 0/0
  6313 ;;		On exit  : 0/0
  6314 ;;		Unchanged: 0/0
  6315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6316 ;;      Params:         0       0       0       0       0       0       0       0       0
  6317 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6318 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6319 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6320 ;;Total ram usage:        1 bytes
  6321 ;; Hardware stack levels used:    1
  6322 ;; Hardware stack levels required when called:    1
  6323 ;; This function calls:
  6324 ;;		_I2C_Ready
  6325 ;; This function is called by:
  6326 ;;		_I2C_Repeated_Start
  6327 ;;		_I2C_Start_Wait
  6328 ;;		_Acelerometro_Start
  6329 ;;		_I2C_Start
  6330 ;;		_Aceletometro_Init
  6331 ;; This function uses a non-reentrant model
  6332 ;;
  6333                           
  6334                           	psect	text30
  6335  0000'                    __ptext30:
  6336                           	opt stack 0
  6337  0000'                    _I2C_Write:
  6338                           	opt stack 28
  6339                           
  6340                           ;incstack = 0
  6341                           ;I2C_Write@data stored from wreg
  6342  0000' 6E00'              	movwf	I2C_Write@data,c
  6343                           
  6344                           ;I2C.c: 85: SSPBUF = data;
  6345  0002' C000' FFC9         	movff	I2C_Write@data,4041	;volatile
  6346                           
  6347                           ;I2C.c: 86: I2C_Ready();
  6348  0006' EC00' F000'        	call	_I2C_Ready	;wreg free
  6349                           
  6350                           ;I2C.c: 87: if (ACKSTAT)
  6351  000A' ACC5               	btfss	4037,6,c	;volatile
  6352  000C' D002               	goto	l81
  6353                           
  6354                           ;I2C.c: 88: return 1;
  6355  000E' 0E01               	movlw	1
  6356  0010' 0012               	return	
  6357  0012'                    l81:
  6358                           
  6359                           ;I2C.c: 89: else
  6360                           ;I2C.c: 90: return 2;
  6361  0012' 0E02               	movlw	2
  6362  0014' 0012               	return	
  6363  0016'                    __end_of_I2C_Write:
  6364                           	opt stack 0
  6365                           tblptru	equ	0xFF8
  6366                           tblptrh	equ	0xFF7
  6367                           tblptrl	equ	0xFF6
  6368                           tablat	equ	0xFF5
  6369                           prodh	equ	0xFF4
  6370                           prodl	equ	0xFF3
  6371                           intcon	equ	0xFF2
  6372                           wreg	equ	0xFE8
  6373                           indf2	equ	0xFDF
  6374                           postinc2	equ	0xFDE
  6375                           postdec2	equ	0xFDD
  6376                           fsr2h	equ	0xFDA
  6377                           fsr2l	equ	0xFD9
  6378                           status	equ	0xFD8
  6379                           
  6380 ;; *************** function _I2C_Ready *****************
  6381 ;; Defined at:
  6382 ;;		line 77 in file "I2C.c"
  6383 ;; Parameters:    Size  Location     Type
  6384 ;;		None
  6385 ;; Auto vars:     Size  Location     Type
  6386 ;;		None
  6387 ;; Return value:  Size  Location     Type
  6388 ;;                  1    wreg      void 
  6389 ;; Registers used:
  6390 ;;		None
  6391 ;; Tracked objects:
  6392 ;;		On entry : 0/0
  6393 ;;		On exit  : 0/0
  6394 ;;		Unchanged: 0/0
  6395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6396 ;;      Params:         0       0       0       0       0       0       0       0       0
  6397 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6398 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6399 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6400 ;;Total ram usage:        0 bytes
  6401 ;; Hardware stack levels used:    1
  6402 ;; This function calls:
  6403 ;;		Nothing
  6404 ;; This function is called by:
  6405 ;;		_I2C_Read
  6406 ;;		_I2C_Write
  6407 ;; This function uses a non-reentrant model
  6408 ;;
  6409                           
  6410                           	psect	text31
  6411  0000'                    __ptext31:
  6412                           	opt stack 0
  6413  0000'                    _I2C_Ready:
  6414                           	opt stack 29
  6415                           
  6416                           ;I2C.c: 79: while(!SSPIF);
  6417                           
  6418                           ;incstack = 0
  6419  0000' A69E               	btfss	3998,3,c	;volatile
  6420  0002' D7FE               	goto	_I2C_Ready
  6421                           
  6422                           ;I2C.c: 80: SSPIF=0;
  6423  0004' 969E               	bcf	3998,3,c	;volatile
  6424  0006' 0012               	return		;funcret
  6425  0008'                    __end_of_I2C_Ready:
  6426                           	opt stack 0
  6427                           tblptru	equ	0xFF8
  6428                           tblptrh	equ	0xFF7
  6429                           tblptrl	equ	0xFF6
  6430                           tablat	equ	0xFF5
  6431                           prodh	equ	0xFF4
  6432                           prodl	equ	0xFF3
  6433                           intcon	equ	0xFF2
  6434                           wreg	equ	0xFE8
  6435                           indf2	equ	0xFDF
  6436                           postinc2	equ	0xFDE
  6437                           postdec2	equ	0xFDD
  6438                           fsr2h	equ	0xFDA
  6439                           fsr2l	equ	0xFD9
  6440                           status	equ	0xFD8
  6441                           tblptru	equ	0xFF8
  6442                           tblptrh	equ	0xFF7
  6443                           tblptrl	equ	0xFF6
  6444                           tablat	equ	0xFF5
  6445                           prodh	equ	0xFF4
  6446                           prodl	equ	0xFF3
  6447                           intcon	equ	0xFF2
  6448                           wreg	equ	0xFE8
  6449                           indf2	equ	0xFDF
  6450                           postinc2	equ	0xFDE
  6451                           postdec2	equ	0xFDD
  6452                           fsr2h	equ	0xFDA
  6453                           fsr2l	equ	0xFD9
  6454                           status	equ	0xFD8
  6455                           
  6456                           	psect	rparam
  6457  0000                     tblptru	equ	0xFF8
  6458                           tblptrh	equ	0xFF7
  6459                           tblptrl	equ	0xFF6
  6460                           tablat	equ	0xFF5
  6461                           prodh	equ	0xFF4
  6462                           prodl	equ	0xFF3
  6463                           intcon	equ	0xFF2
  6464                           wreg	equ	0xFE8
  6465                           indf2	equ	0xFDF
  6466                           postinc2	equ	0xFDE
  6467                           postdec2	equ	0xFDD
  6468                           fsr2h	equ	0xFDA
  6469                           fsr2l	equ	0xFD9
  6470                           status	equ	0xFD8


Data Sizes:
    Strings     43
    Constant    118
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     80      80
    BANK0           160    118     118
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_3(CODE[15]), STR_2(CODE[14]), STR_1(CODE[14]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> main@buffer3(BANK0[20]), main@buffer2(BANK0[20]), main@buffer(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _Acelerometro_Start->_I2C_Repeated_Start
    _Acelerometro_Start->_I2C_Start_Wait
    _I2C_Start_Wait->_I2C_Write
    _I2C_Repeated_Start->_I2C_Write

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                99    99      0   61392
                                             76 COMRAM     4     4      0
                                             23 BANK0     95    95      0
                  _Acelerometro_Init
                 _Acelerometro_Start
                           _I2C_Read
                           _I2C_Stop
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                        _configBoard
                    _lcd_inicializar
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             44    37      7   49625
                                             63 COMRAM    13     6      7
                                              0 BANK0     23    23      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                7     4      3   11755
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              10     7      3   11557
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2743
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    5085
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1664
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1820
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     455
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     598
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2650
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     615
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     466
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     556
                                             42 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4272
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3927
                                             45 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     121
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     592
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _lcd_inicializar                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configBoard                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    4127
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             4     1      3    3204
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2505
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _I2C_Read                                             2     2      0      45
                                              0 COMRAM     2     2      0
                            _I2C_Ack
                           _I2C_Nack
                          _I2C_Ready
 ---------------------------------------------------------------------------------
 (2) _I2C_Nack                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Ack                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Acelerometro_Start                                   0     0      0     110
                 _I2C_Repeated_Start
                     _I2C_Start_Wait
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Start_Wait                                       1     1      0      44
                                              1 COMRAM     1     1      0
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _I2C_Stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Repeated_Start                                   1     1      0      44
                                              1 COMRAM     1     1      0
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Write                                            1     1      0      22
                                              0 COMRAM     1     1      0
                          _I2C_Ready
 ---------------------------------------------------------------------------------
 (2) _I2C_Ready                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Acelerometro_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Acelerometro_Init
   _Acelerometro_Start
     _I2C_Repeated_Start
       _I2C_Write
         _I2C_Ready
     _I2C_Start_Wait
       _I2C_Stop
       _I2C_Write
         _I2C_Ready
     _I2C_Write
       _I2C_Ready
   _I2C_Read
     _I2C_Ack
     _I2C_Nack
     _I2C_Ready
   _I2C_Stop
   ___awtoft
     ___ftpack
   ___ftadd
     ___awtoft (ARG)
       ___ftpack
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftpack (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
   _configBoard
   _lcd_inicializar
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     50      50       1       84.2%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     76      76       5       73.8%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri May 04 20:18:09 2018

                  __size_of_I2C_Ready 000000                           _SSPSTATbits 000FC7  
                  __size_of_I2C_Write 000000                                    l62 000004  
                                  l70 000018                                    l71 00001C  
                                  l56 000004                                    l81 000012  
                                  l68 000004                                    l87 000004  
                                  l95 000002                                    l97 000004  
                        ___awdiv@sign 00000B                   ___wmul@multiplicand 000010  
                         __CFG_BORV$3 000000                          ___ftadd@exp1 000038  
                        ___ftadd@exp2 000037                          ___ftadd@sign 000036  
                                 l113 000002                                   l300 00004C  
                                 l310 0000E4                                   l311 000126  
                                 l303 0000AC                                   l321 0002F4  
                                 l313 0001B8                                   l137 000010  
                                 l314 00021E                                   l306 0000A8  
                                 l307 0000D0                                   l340 00050C  
                                 l332 0004A2                                   l316 000244  
                                 l309 00066A                                   l341 00063E  
                                 l333 00040E                                   l317 000284  
                                 l350 0006BE                                   l342 00055C  
                                 l318 00034C                                   l351 0006E2  
                                 l335 0004C2                                   l327 0003B2  
                                 l344 000660                                   l336 0004AC  
                                 l521 000014                                   l345 00064A  
                                 l530 00007A                                   l522 000024  
                                 l282 000212                                   l290 000334  
                                 l338 0004E6                                   l347 000682  
                                 l339 0004EA                                   l620 00007C  
                                 l524 000042                                   l292 0003E4  
                                 l348 00069E                                   l525 00003A  
                                 l541 00004E                                   l285 000208  
                                 l630 0000D8                                   l710 0000C6  
                                 l702 00002C                                   l542 000058  
                                 l534 000014                                   l286 000134  
                                 l631 0000CE                                   l711 0000BA  
                                 l543 000066                                   l535 000020  
                                 l279 000146                                   l640 00010C  
                                 l616 000052                                   l704 0000A2  
                                 l560 0000DC                                   l528 000062  
                                 l296 00000C                                   l625 0000E2  
                                 l713 0000E2                                   l705 000092  
                                 l553 00001E                                   l529 00006C  
                                 l537 000036                                   l289 0001E4  
                                 l297 000022                                   l642 00013A  
                                 l538 00002E                                   l298 00009A  
                                 l651 000050                                   l643 000156  
                                 l555 00003C                                   l299 000084  
                                 l652 00008E                                   l644 000186  
                                 l556 00007E                                   l660 000092  
                                 l549 000014                                   l653 0000B4  
                                 l565 000110                                   l557 0000AE  
                                 l661 0000BA                                   l717 000016  
                                 l566 000104                                   l670 00010E  
                                 l591 000084                                   l639 000116  
                                 l743 00002E                                   l559 0000EC  
                                 l663 0000F6                                   l592 00007A  
                                 l744 000022                                   l664 0000E6  
                                 l585 000028                                   l649 000028  
                                 l753 00001E                                   l657 00002C  
                                 l681 000028                                   l586 00001E  
                                 l674 000030                                   l754 000012  
                                 l675 000060                                   l747 000062  
                                 l659 000058                                   l683 000050  
                                 l588 00005C                                   l692 000016  
                                 l748 000070                                   l764 000012  
                                 l684 000082                                   l589 000046  
                                 l757 000046                                   l765 000006  
                                 l669 00011A                                   l685 000092  
                                 l758 000054                                   l687 0000AA  
                                 l688 0000BA                                   l698 000016  
                                 _PEN 007E2A                       __end_of_I2C_Ack 00000A  
                        ___awmod@sign 000005                                   wreg 000FE8  
                        __CFG_LVP$OFF 000000                           main@buffer2 00002B  
                         main@buffer3 00003F                          ___ftdiv@cntr 000015  
                        ___ftdiv@sign 00001A                          __CFG_WDT$OFF 000000  
                                l3002 0004AC                                  l2180 00008C  
                                l3064 0006DE                                  l2954 0002CE  
                                l2946 000284                                  l2974 0003B6  
                                STR_1 000086                                  STR_2 000094  
                                STR_3 000077                                  u2100 00003A  
                                u2040 000046                                  u3050 0006FA  
                                u2500 000116                                  u2430 000120  
                                u3071 000010                                  u2351 000010  
                                u1650 000010                                  u1810 00006E  
                                u3091 000038                                  u2371 00003C  
                                u2620 0000CC                                  u1741 000010  
                                u1910 00011E                                  u1751 000024  
                                u1840 0000AC                                  u2800 00015E  
                                u2561 000010                                  u1690 00008E  
                                u2650 000032                                  u1780 000044  
                                u2580 00004A                                  u2805 000154  
                                u1951 000010                                  u1880 0000EA  
                                u2680 000022                                  u2920 0003EE  
                                u2840 000256                                  u2585 000042  
                                u2850 000296                                  u1971 000038  
                                u2950 0004D0                                  u2960 0004E0  
                                u2880 0002CE                                  _RCEN 007E2B  
                                _RCIF 007CF5                                  _RSEN 007E29  
                                _main 000000                          ___ftpack@arg 000000  
                    __end_of_I2C_Nack 00000A                          ___ftpack@exp 000003  
                    __end_of_I2C_Read 000024                                  fsr2h 000FDA  
                                indf2 000FDF                                  fsr2l 000FD9  
                    __end_of_I2C_Stop 00000C                                  prodh 000FF4  
                                prodl 000FF3                                  start 000000* 
                        _sprintf$1497 000000                         __CFG_MCLRE$ON 000000  
                        ___ftmul@cntr 000021                          ___param_bank 000000  
                        ___ftmul@sign 000022                          ___fttol@exp1 000038  
                        ___fttol@lval 000034                         __CFG_PLLDIV$2 000000  
                               ?_main 000000                                 _ACKEN 007E2C  
                               _ACKDT 007E2D                       __end_of___awdiv 000084  
                     __end_of___ftadd 0001AC                       __end_of___awmod 000070  
                     __end_of___ftdiv 0000E6                       __end_of___ftneg 000024  
                     __end_of___lldiv 000082                       __end_of___ftmul 0000F4  
                     ___awdiv@divisor 000008                       __end_of___llmod 000066  
                     __end_of___ftsub 000040                       __end_of___fttol 0000F4  
                     ___awdiv@counter 00000A                                 _TMR0L 000FD6  
                               _PORTA 000F80                                 _PORTD 000F83  
                               _TRISD 000F95                                 _SSPIE 007CEB  
                               _SSPIF 007CF3                          ___lltoft@exp 000010  
                      __CFG_FCMEN$OFF 000000                         ___awtoft@sign 00000B  
                     __end_of_dpowers 000029                                 _scale 000000  
                     __end_of_isdigit 00001E                         ___ftpack@sign 000004  
                   __end_of_I2C_Ready 000008                                 main@T 00006E  
                               main@t 000053                     __end_of_I2C_Write 000016  
                               tablat 000FF5                                 status 000FD8  
                     __end_of_sprintf 000708                       __initialization 000000  
                        __end_of_main 0002F0                             ??_I2C_Ack 000000  
                              ??_main 00004C                         ___fttol@sign1 000033  
                       __activetblptr 000002                  __size_of__tdiv_to_l_ 000000  
                              _ADCON0 000FC2                      ___llmod@dividend 000000  
                              ?_scale 000023                                _T08BIT 007EAE  
                    ___awdiv@dividend 000006                      __end_of___awtoft 000038  
                    __end_of___ftpack 0000AE                      __end_of___lltoft 00005C  
                              _OSCCON 000FD3                                _TMR0IF 007F92  
                              _TMR0ON 007EAF                                _SSPADD 000FC8  
                              _TRISB0 007C98                                _TRISB1 007C99  
                              _SSPBUF 000FC9                  __size_of_configBoard 000000  
                    __end_of__powers_ 000050                                ___ftge 000000  
                              ___wmul 000000                             ??___awdiv 00000A  
                           ??___ftadd 000033                             ??___awmod 000004  
                           ??___ftdiv 000012                             ??___ftneg 000003  
                           ??___lldiv 000008                             ??___ftmul 00001A  
                           ??___llmod 000008                             ??___ftsub 00003F  
                           ??___fttol 00002E                                _fround 000000  
                    ___awdiv@quotient 00000C                       ___awmod@divisor 000002  
                     ___awmod@counter 000004                    _I2C_Repeated_Start 000000  
                              main@Ax 000068                                main@Ay 00006A  
                              main@Az 00006C                                main@Gx 000070  
                              main@Gy 000072                                main@Gz 000074  
                              main@Xa 00005F                                main@Ya 000062  
                              main@Za 000065                                main@Xg 000056  
                              main@Yg 000059                                main@Zg 00005C  
               ___ftmul@f3_as_product 00001E                             ?_I2C_Nack 000000  
                           ??_isdigit 000000                             ?_I2C_Read 000000  
                           ?_I2C_Stop 000000                          __mediumconst 000000* 
                              tblptrh 000FF7                                tblptrl 000FF6  
                              tblptru 000FF8                   ?_I2C_Repeated_Start 000000  
                           ??_sprintf 000046            __end_of_Acelerometro_Start 000014  
                          __accesstop 000000*              __end_of__initialization 000000  
                          ___ftadd@f1 00002D                            ___ftadd@f2 000030  
                          ___ftge@ff1 000000                            ___ftge@ff2 000003  
                       ___rparam_used 000001                            ___ftdiv@f1 00000C  
                          ___ftdiv@f2 00000F                            ___ftdiv@f3 000016  
                          ___ftneg@f1 000000                            ___awtoft@c 000008  
                          ___ftmul@f1 000014                            ___ftmul@f2 000017  
                   _Acelerometro_Init 000000*                 ??_I2C_Repeated_Start 000001  
                          ___ftsub@f1 000039                            ___ftsub@f2 00003C  
                          ___fttol@f1 00002A                        __pcstackCOMRAM 000000  
                  ?_Acelerometro_Init 000000                            ___lltoft@c 000008  
                       __end_of_scale 000408                   ??_Acelerometro_Init 000000  
                          __div_to_l_ 000000                            ??_I2C_Nack 000000  
                          ??_I2C_Read 000000                            ??_I2C_Stop 000000  
                     __div_to_l_@exp1 00000B                       __div_to_l_@cntr 00000A  
                             ??_scale 000026                       __div_to_l_@quot 000006  
             __size_of_I2C_Start_Wait 000000                         __div_to_l_@f1 000000  
                       __div_to_l_@f2 000003                          I2C_Read@flag 000000  
                             ?___ftge 000000                        I2C_Read@buffer 000001  
                             ?___wmul 00000E                               _I2C_Ack 000000  
                             _ACKSTAT 007E2E                               ?_fround 000023  
                           ?___awtoft 000008                             ?___ftpack 000000  
                           ?___lltoft 000008                               _SSPCON1 000FC6  
                             _SSPCON2 000FC5                               _SSPSTAT 000FC7  
                           _I2C_Ready 000000                             _I2C_Write 000000  
                   __end_of__npowers_ 000077                               __Hparam 000000  
                          _scale$1496 000026                               __Lparam 000000  
                     __size_of___ftge 000000                               ___awdiv 000000  
                             ___ftadd 000000                               ___awmod 000000  
                             ___ftdiv 000000                               ___ftneg 000000  
                             ___lldiv 000000                       __size_of___wmul 000000  
                             ___ftmul 000000                               ___llmod 000000  
                             ___ftsub 000000                               ___fttol 000000  
                        __psmallconst 000000                               __pcinit 000000  
                          ??___awtoft 00000B                            ??___ftpack 000005  
                     __size_of_fround 000000                               __ramtop 000000* 
                          ??___lltoft 00000C                               __ptext0 000000  
                             __ptext1 000000                               __ptext2 000000  
                             __ptext3 000000                               __ptext4 000000  
                             __ptext5 000000                               __ptext6 000000  
                             __ptext7 000000                               __ptext8 000000  
                             __ptext9 000000     I2C_Start_Wait@slave_write_address 000001  
                           _T0CONbits 000FD5                           ?__div_to_l_ 000000  
                             _dpowers 000001                               _isdigit 000000  
                    ___awmod@dividend 000000                               _sprintf 000000  
                   ??_lcd_inicializar 000000                  end_of_initialization 000000  
                       __Lmediumconst 000000*                           ?_I2C_Ready 000000  
                          ?_I2C_Write 000000                       ___lldiv@divisor 000004  
                     ___lldiv@counter 00000C                               postdec2 000FDD  
                             postinc2 000FDE                        __tdiv_to_l_@f1 000000  
                      __tdiv_to_l_@f2 000003                         ??__tdiv_to_l_ 000006  
                           _PORTDbits 000F83                             _TRISAbits 000F92  
                           _TRISDbits 000F95                     __size_of_I2C_Nack 000000  
                   __size_of_I2C_Read 000000                     __size_of_I2C_Stop 000000  
                      _I2C_Start_Wait 000000                           ___ftdiv@exp 000019  
                          main@buffer 000017                         ??_configBoard 000000  
                 __size_of__div_to_l_ 000000                           ___ftmul@exp 00001D  
                  _Acelerometro_Start 000000                        __end_of___ftge 000090  
                      __end_of___wmul 000026                   ?_Acelerometro_Start 000000  
                      __end_of_fround 000252                   start_initialization 000000  
              __end_of_I2C_Start_Wait 00001E                   __end_of__tdiv_to_l_ 000132  
I2C_Repeated_Start@slave_read_address 000001                  ??_Acelerometro_Start 000002  
                         ??_I2C_Ready 000000                       ___llmod@divisor 000004  
                     ___llmod@counter 000008                           ??_I2C_Write 000000  
         __size_of_I2C_Repeated_Start 000000                              ??___ftge 000006  
                            ??___wmul 000012                   __end_of_configBoard 000060  
                            ?_I2C_Ack 000000                              ??_fround 000026  
                       sprintf@tmpval 00000D                            fround@prec 00002C  
                   __size_of___awtoft 000000                     __size_of___ftpack 000000  
                   __size_of___lltoft 000000                         __pcstackBANK0 000000  
                     ?_I2C_Start_Wait 000000                          _isdigit$1117 000001  
                         sprintf@flag 000005                           sprintf@fval 000013  
                         sprintf@prec 000011                              ?___awdiv 000006  
                            ?___ftadd 00002D                              ?___awmod 000000  
                            ?___ftdiv 00000C                              ?___ftneg 000000  
                            ?___lldiv 000000                              ?___ftmul 000014  
                            ?___llmod 000000                              ?___ftsub 000039  
                           __npowers_ 000050                              ?___fttol 00002A  
                         __tdiv_to_l_ 000000                       _lcd_inicializar 000000* 
                        ??__div_to_l_ 000006                           __smallconst 000000* 
                            _I2C_Nack 000000                              ?_isdigit 000000  
                            _I2C_Read 000000                              _I2C_Stop 000000  
                            ?_sprintf 00003F                        __size_of_scale 000000  
                      ___wmul@product 000012                           _configBoard 000000  
                            _PIE1bits 000F9D                              _PIR1bits 000F9E  
                  __end_of__div_to_l_ 000128                      __size_of_I2C_Ack 000000  
                          _ADCON0bits 000FC2                            _ADCON1bits 000FC1  
                          _ADCON2bits 000FC0                     ___wmul@multiplier 00000E  
                            __Hrparam 000000*                             __Lrparam 000000* 
                       I2C_Write@data 000000                      __size_of___awdiv 000000  
                    __size_of___ftadd 000000                      __size_of___awmod 000000  
                    __size_of___ftdiv 000000                      __size_of___ftneg 000000  
                    __size_of___lldiv 000000                      __size_of___ftmul 000000  
                    __size_of___llmod 000000                      __size_of___ftsub 000000  
                    __size_of___fttol 000000                              ___awtoft 000000  
                            ___ftpack 000000                           _fround$1494 000029  
                         _fround$1495 000026                              ___lltoft 000000  
                          sprintf@exp 00000B                            sprintf@val 000007  
                    __size_of_isdigit 000000                              __ptext10 000000  
                            __ptext11 000000                              __ptext20 000000  
                            __ptext12 000000                              __ptext21 000000  
                            __ptext13 000000                              __ptext30 000000  
                            __ptext22 000000                              __ptext14 000000  
                            __ptext31 000000                              __ptext23 000000  
                            __ptext15 000000                              __ptext24 000000  
                            __ptext16 000000                              __ptext25 000000  
                            __ptext17 000000                              __ptext26 000000  
                            __ptext18 000000                              __ptext27 000000  
                            __ptext19 000000                              __ptext28 000000  
                            __ptext29 000000                              __powers_ 000029  
                    __size_of_sprintf 000000                         __size_of_main 000000  
                    ??_I2C_Start_Wait 000001                 __CFG_CPUDIV$OSC1_PLL2 000000  
                          _INTCONbits 000FF2                              isdigit@c 000002  
                            scale@scl 000029                             sprintf@ap 000003  
                    __tdiv_to_l_@exp1 00000E                             sprintf@sp 00003F  
                    __tdiv_to_l_@cntr 00000D                      __tdiv_to_l_@quot 000009  
         __size_of_Acelerometro_Start 000000                      ___lldiv@dividend 000000  
          __end_of_I2C_Repeated_Start 000016                      ?_lcd_inicializar 000000  
                        ?__tdiv_to_l_ 000000                              sprintf@c 000016  
                            sprintf@f 000041                      ___lldiv@quotient 000008  
                         _SSPCON2bits 000FC5                    __CFG_FOSC$HSPLL_HS 000000  
                        ?_configBoard 000000  
