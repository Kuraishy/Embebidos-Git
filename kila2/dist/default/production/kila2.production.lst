

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri May 18 05:11:44 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    41                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    47                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    48                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    49  0000                     
    50                           ; Version 1.45
    51                           ; Generated 16/11/2017 GMT
    52                           ; 
    53                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    54                           ; All rights reserved.
    55                           ; 
    56                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    57                           ; 
    58                           ; Redistribution and use in source and binary forms, with or without modification, are
    59                           ; permitted provided that the following conditions are met:
    60                           ; 
    61                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    62                           ;        conditions and the following disclaimer.
    63                           ; 
    64                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    65                           ;        of conditions and the following disclaimer in the documentation and/or other
    66                           ;        materials provided with the distribution.
    67                           ; 
    68                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    69                           ;        software without specific prior written permission.
    70                           ; 
    71                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    72                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    73                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    74                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    75                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    76                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    77                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    78                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    79                           ; 
    80                           ; 
    81                           ; Code-generator required, PIC18F4550 Definitions
    82                           ; 
    83                           ; SFR Addresses
    84  0000                     
    85                           	psect	smallconst
    86  000800                     __psmallconst:
    87                           	opt stack 0
    88  000800  00                 	db	0
    89  000801                     _dpowers:
    90                           	opt stack 0
    91  000801  0001               	dw	1
    92  000803  0000               	dw	0
    93  000805  000A               	dw	10
    94  000807  0000               	dw	0
    95  000809  0064               	dw	100
    96  00080B  0000               	dw	0
    97  00080D  03E8               	dw	1000
    98  00080F  0000               	dw	0
    99  000811  2710               	dw	10000
   100  000813  0000               	dw	0
   101  000815  86A0               	dw	34464
   102  000817  0001               	dw	1
   103  000819  4240               	dw	16960
   104  00081B  000F               	dw	15
   105  00081D  9680               	dw	38528
   106  00081F  0098               	dw	152
   107  000821  E100               	dw	57600
   108  000823  05F5               	dw	1525
   109  000825  CA00               	dw	51712
   110  000827  3B9A               	dw	15258
   111  000829                     __end_of_dpowers:
   112                           	opt stack 0
   113  000829                     __powers_:
   114                           	opt stack 0
   115  000829  00                 	db	0
   116  00082A  80                 	db	128
   117  00082B  3F                 	db	63
   118  00082C  00                 	db	0
   119  00082D  20                 	db	32
   120  00082E  41                 	db	65
   121  00082F  00                 	db	0
   122  000830  C8                 	db	200
   123  000831  42                 	db	66
   124  000832  00                 	db	0
   125  000833  7A                 	db	122
   126  000834  44                 	db	68
   127  000835  40                 	db	64
   128  000836  1C                 	db	28
   129  000837  46                 	db	70
   130  000838  50                 	db	80
   131  000839  C3                 	db	195
   132  00083A  47                 	db	71
   133  00083B  24                 	db	36
   134  00083C  74                 	db	116
   135  00083D  49                 	db	73
   136  00083E  97                 	db	151
   137  00083F  18                 	db	24
   138  000840  4B                 	db	75
   139  000841  BC                 	db	188
   140  000842  BE                 	db	190
   141  000843  4C                 	db	76
   142  000844  6B                 	db	107
   143  000845  6E                 	db	110
   144  000846  4E                 	db	78
   145  000847  03                 	db	3
   146  000848  15                 	db	21
   147  000849  50                 	db	80
   148  00084A  79                 	db	121
   149  00084B  AD                 	db	173
   150  00084C  60                 	db	96
   151  00084D  F3                 	db	243
   152  00084E  49                 	db	73
   153  00084F  71                 	db	113
   154  000850                     __end_of__powers_:
   155                           	opt stack 0
   156  000850                     __npowers_:
   157                           	opt stack 0
   158  000850  00                 	db	0
   159  000851  80                 	db	128
   160  000852  3F                 	db	63
   161  000853  CD                 	db	205
   162  000854  CC                 	db	204
   163  000855  3D                 	db	61
   164  000856  D7                 	db	215
   165  000857  23                 	db	35
   166  000858  3C                 	db	60
   167  000859  12                 	db	18
   168  00085A  83                 	db	131
   169  00085B  3A                 	db	58
   170  00085C  B7                 	db	183
   171  00085D  D1                 	db	209
   172  00085E  38                 	db	56
   173  00085F  C6                 	db	198
   174  000860  27                 	db	39
   175  000861  37                 	db	55
   176  000862  38                 	db	56
   177  000863  86                 	db	134
   178  000864  35                 	db	53
   179  000865  C0                 	db	192
   180  000866  D6                 	db	214
   181  000867  33                 	db	51
   182  000868  CC                 	db	204
   183  000869  2B                 	db	43
   184  00086A  32                 	db	50
   185  00086B  70                 	db	112
   186  00086C  89                 	db	137
   187  00086D  30                 	db	48
   188  00086E  E7                 	db	231
   189  00086F  DB                 	db	219
   190  000870  2E                 	db	46
   191  000871  E5                 	db	229
   192  000872  3C                 	db	60
   193  000873  1E                 	db	30
   194  000874  42                 	db	66
   195  000875  A2                 	db	162
   196  000876  0D                 	db	13
   197  000877                     __end_of__npowers_:
   198                           	opt stack 0
   199  0000                     _CCPR1	set	4030
   200  0000                     _TMR1	set	4046
   201  0000                     _TRISAbits	set	3986
   202  0000                     _PORTDbits	set	3971
   203  0000                     _TRISDbits	set	3989
   204  0000                     _CCP1CONbits	set	4029
   205  0000                     _T1CONbits	set	4045
   206  0000                     _PIR1bits	set	3998
   207  0000                     _PIE1bits	set	3997
   208  0000                     _INTCONbits	set	4082
   209  0000                     _ADRESL	set	4035
   210  0000                     _ADRESH	set	4036
   211  0000                     _ADCON2bits	set	4032
   212  0000                     _ADCON1	set	4033
   213  0000                     _ADCON0bits	set	4034
   214  0000                     _CCP1IF	set	31986
   215  000877                     STR_1:
   216  000877  56                 	db	86	;'V'
   217  000878  6F                 	db	111	;'o'
   218  000879  6C                 	db	108	;'l'
   219  00087A  74                 	db	116	;'t'
   220  00087B  61                 	db	97	;'a'
   221  00087C  67                 	db	103	;'g'
   222  00087D  65                 	db	101	;'e'
   223  00087E  20                 	db	32
   224  00087F  25                 	db	37
   225  000880  33                 	db	51	;'3'
   226  000881  64                 	db	100	;'d'
   227  000882  00                 	db	0
   228  000883                     STR_4:
   229  000883  50                 	db	80	;'P'
   230  000884  52                 	db	82	;'R'
   231  000885  65                 	db	101	;'e'
   232  000886  61                 	db	97	;'a'
   233  000887  6C                 	db	108	;'l'
   234  000888  20                 	db	32
   235  000889  25                 	db	37
   236  00088A  30                 	db	48	;'0'
   237  00088B  2E                 	db	46
   238  00088C  32                 	db	50	;'2'
   239  00088D  66                 	db	102	;'f'
   240  00088E  00                 	db	0
   241  00088F                     STR_3:
   242  00088F  49                 	db	73	;'I'
   243  000890  52                 	db	82	;'R'
   244  000891  4D                 	db	77	;'M'
   245  000892  53                 	db	83	;'S'
   246  000893  20                 	db	32
   247  000894  25                 	db	37
   248  000895  30                 	db	48	;'0'
   249  000896  2E                 	db	46
   250  000897  32                 	db	50	;'2'
   251  000898  66                 	db	102	;'f'
   252  000899  00                 	db	0
   253  00089A                     STR_2:
   254  00089A  61                 	db	97	;'a'
   255  00089B  6D                 	db	109	;'m'
   256  00089C  70                 	db	112	;'p'
   257  00089D  73                 	db	115	;'s'
   258  00089E  20                 	db	32
   259  00089F  25                 	db	37
   260  0008A0  30                 	db	48	;'0'
   261  0008A1  2E                 	db	46
   262  0008A2  32                 	db	50	;'2'
   263  0008A3  66                 	db	102	;'f'
   264  0008A4  00                 	db	0
   265                           
   266                           ; #config settings
   267  0008A5  00                 	db	0	; dummy byte at the end
   268  0000                     
   269                           	psect	cinit
   270  0030F2                     __pcinit:
   271                           	opt stack 0
   272  0030F2                     start_initialization:
   273                           	opt stack 0
   274  0030F2                     __initialization:
   275                           	opt stack 0
   276                           
   277                           ; Clear objects allocated to BANK1 (20 bytes)
   278  0030F2  EE01  F000         	lfsr	0,__pbssBANK1
   279  0030F6  0E14               	movlw	20
   280  0030F8                     clear_0:
   281  0030F8  6AEE               	clrf	postinc0,c
   282  0030FA  06E8               	decf	wreg,f,c
   283  0030FC  E1FD               	bnz	clear_0
   284                           
   285                           ; Clear objects allocated to BANK0 (2 bytes)
   286  0030FE  0100               	movlb	0
   287  003100  6BEF               	clrf	(__pbssBANK0+1)& (0+255),b
   288  003102  6BEE               	clrf	__pbssBANK0& (0+255),b
   289                           
   290                           ; Clear objects allocated to COMRAM (25 bytes)
   291  003104  EE00  F03C         	lfsr	0,__pbssCOMRAM
   292  003108  0E19               	movlw	25
   293  00310A                     clear_1:
   294  00310A  6AEE               	clrf	postinc0,c
   295  00310C  06E8               	decf	wreg,f,c
   296  00310E  E1FD               	bnz	clear_1
   297  003110                     end_of_initialization:
   298                           	opt stack 0
   299  003110                     __end_of__initialization:
   300                           	opt stack 0
   301  003110  9055               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   302  003112  9255               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   303  003114  0E00               	movlw	low (__Lmediumconst shr (0+16))
   304  003116  6EF8               	movwf	tblptru,c
   305  003118  0100               	movlb	0
   306  00311A  EFAC  F00B         	goto	_main	;jump to C main() function
   307                           tblptru	equ	0xFF8
   308                           postinc0	equ	0xFEE
   309                           wreg	equ	0xFE8
   310                           
   311                           	psect	bssCOMRAM
   312  00003C                     __pbssCOMRAM:
   313                           	opt stack 0
   314  00003C                     _voltaje:
   315                           	opt stack 0
   316  00003C                     	ds	3
   317  00003F                     _adc1:
   318                           	opt stack 0
   319  00003F                     	ds	2
   320  000041                     _buffer2:
   321                           	opt stack 0
   322  000041                     	ds	20
   323                           tblptru	equ	0xFF8
   324                           postinc0	equ	0xFEE
   325                           wreg	equ	0xFE8
   326                           
   327                           	psect	bssBANK0
   328  0000EE                     __pbssBANK0:
   329                           	opt stack 0
   330  0000EE                     _errno:
   331                           	opt stack 0
   332  0000EE                     	ds	2
   333                           tblptru	equ	0xFF8
   334                           postinc0	equ	0xFEE
   335                           wreg	equ	0xFE8
   336                           
   337                           	psect	bssBANK1
   338  000100                     __pbssBANK1:
   339                           	opt stack 0
   340  000100                     _buffer1:
   341                           	opt stack 0
   342  000100                     	ds	20
   343                           tblptru	equ	0xFF8
   344                           postinc0	equ	0xFEE
   345                           wreg	equ	0xFE8
   346                           
   347                           	psect	cstackBANK0
   348  000060                     __pcstackBANK0:
   349                           	opt stack 0
   350  000060                     ??_Lcd_Cmd:
   351  000060                     ??_Lcd_Chr_CP:
   352  000060                     ??_isdigit:
   353  000060                     ?___awmod:
   354                           	opt stack 0
   355  000060                     ?___ftpack:
   356                           	opt stack 0
   357  000060                     ?___ftneg:
   358                           	opt stack 0
   359  000060                     ?__tdiv_to_l_:
   360                           	opt stack 0
   361  000060                     ?__div_to_l_:
   362                           	opt stack 0
   363  000060                     ?___lldiv:
   364                           	opt stack 0
   365  000060                     ___awmod@dividend:
   366                           	opt stack 0
   367  000060                     __div_to_l_@f1:
   368                           	opt stack 0
   369  000060                     ___ftpack@arg:
   370                           	opt stack 0
   371  000060                     __tdiv_to_l_@f1:
   372                           	opt stack 0
   373  000060                     ___ftge@ff1:
   374                           	opt stack 0
   375  000060                     ___ftneg@f1:
   376                           	opt stack 0
   377  000060                     ___lldiv@dividend:
   378                           	opt stack 0
   379                           
   380                           ; 4 bytes @ 0x0
   381  000060                     	ds	1
   382  000061                     _isdigit$1004:
   383                           	opt stack 0
   384                           
   385                           ; 1 bytes @ 0x1
   386  000061                     	ds	1
   387  000062                     Lcd_Chr_CP@data:
   388                           	opt stack 0
   389  000062                     Lcd_Cmd@data:
   390                           	opt stack 0
   391  000062                     isdigit@c:
   392                           	opt stack 0
   393  000062                     ___awmod@divisor:
   394                           	opt stack 0
   395                           
   396                           ; 2 bytes @ 0x2
   397  000062                     	ds	1
   398  000063                     ??_Lcd_Init:
   399  000063                     Lcd_Out2@x:
   400                           	opt stack 0
   401  000063                     ___ftpack@exp:
   402                           	opt stack 0
   403  000063                     __div_to_l_@f2:
   404                           	opt stack 0
   405  000063                     __tdiv_to_l_@f2:
   406                           	opt stack 0
   407  000063                     ___ftge@ff2:
   408                           	opt stack 0
   409                           
   410                           ; 3 bytes @ 0x3
   411  000063                     	ds	1
   412  000064                     Lcd_Init@data:
   413                           	opt stack 0
   414  000064                     ___awmod@counter:
   415                           	opt stack 0
   416  000064                     ___ftpack@sign:
   417                           	opt stack 0
   418  000064                     Lcd_Out2@buffer:
   419                           	opt stack 0
   420  000064                     ___lldiv@divisor:
   421                           	opt stack 0
   422                           
   423                           ; 4 bytes @ 0x4
   424  000064                     	ds	1
   425  000065                     ??___ftpack:
   426  000065                     ___awmod@sign:
   427                           	opt stack 0
   428                           
   429                           ; 1 bytes @ 0x5
   430  000065                     	ds	1
   431  000066                     ??__tdiv_to_l_:
   432  000066                     ??___ftge:
   433  000066                     ?___awdiv:
   434                           	opt stack 0
   435  000066                     Lcd_Out2@y:
   436                           	opt stack 0
   437  000066                     ___awdiv@dividend:
   438                           	opt stack 0
   439  000066                     __div_to_l_@quot:
   440                           	opt stack 0
   441                           
   442                           ; 4 bytes @ 0x6
   443  000066                     	ds	1
   444  000067                     Lcd_Out2@data:
   445                           	opt stack 0
   446                           
   447                           ; 1 bytes @ 0x7
   448  000067                     	ds	1
   449  000068                     ?___lltoft:
   450                           	opt stack 0
   451  000068                     ?___lwtoft:
   452                           	opt stack 0
   453  000068                     ___awdiv@divisor:
   454                           	opt stack 0
   455  000068                     ___lwtoft@c:
   456                           	opt stack 0
   457  000068                     ___lldiv@quotient:
   458                           	opt stack 0
   459  000068                     ___lltoft@c:
   460                           	opt stack 0
   461                           
   462                           ; 4 bytes @ 0x8
   463  000068                     	ds	1
   464  000069                     __tdiv_to_l_@quot:
   465                           	opt stack 0
   466                           
   467                           ; 4 bytes @ 0x9
   468  000069                     	ds	1
   469  00006A                     ___awdiv@counter:
   470                           	opt stack 0
   471  00006A                     __div_to_l_@cntr:
   472                           	opt stack 0
   473                           
   474                           ; 1 bytes @ 0xA
   475  00006A                     	ds	1
   476  00006B                     ___awdiv@sign:
   477                           	opt stack 0
   478  00006B                     __div_to_l_@exp1:
   479                           	opt stack 0
   480                           
   481                           ; 1 bytes @ 0xB
   482  00006B                     	ds	1
   483  00006C                     ??___lltoft:
   484  00006C                     ___lldiv@counter:
   485                           	opt stack 0
   486  00006C                     ___awdiv@quotient:
   487                           	opt stack 0
   488                           
   489                           ; 2 bytes @ 0xC
   490  00006C                     	ds	1
   491  00006D                     ?___llmod:
   492                           	opt stack 0
   493  00006D                     __tdiv_to_l_@cntr:
   494                           	opt stack 0
   495  00006D                     ___llmod@dividend:
   496                           	opt stack 0
   497                           
   498                           ; 4 bytes @ 0xD
   499  00006D                     	ds	1
   500  00006E                     ?___wmul:
   501                           	opt stack 0
   502  00006E                     __tdiv_to_l_@exp1:
   503                           	opt stack 0
   504  00006E                     ___wmul@multiplier:
   505                           	opt stack 0
   506                           
   507                           ; 2 bytes @ 0xE
   508  00006E                     	ds	2
   509  000070                     ___lltoft@exp:
   510                           	opt stack 0
   511  000070                     ___wmul@multiplicand:
   512                           	opt stack 0
   513                           
   514                           ; 2 bytes @ 0x10
   515  000070                     	ds	1
   516  000071                     ___llmod@divisor:
   517                           	opt stack 0
   518                           
   519                           ; 4 bytes @ 0x11
   520  000071                     	ds	1
   521  000072                     ___wmul@product:
   522                           	opt stack 0
   523                           
   524                           ; 2 bytes @ 0x12
   525  000072                     	ds	2
   526  000074                     ?___ftmul:
   527                           	opt stack 0
   528  000074                     ___ftmul@f1:
   529                           	opt stack 0
   530                           
   531                           ; 3 bytes @ 0x14
   532  000074                     	ds	1
   533  000075                     ___llmod@counter:
   534                           	opt stack 0
   535                           
   536                           ; 1 bytes @ 0x15
   537  000075                     	ds	2
   538  000077                     ___ftmul@f2:
   539                           	opt stack 0
   540                           
   541                           ; 3 bytes @ 0x17
   542  000077                     	ds	3
   543  00007A                     ??___ftmul:
   544                           
   545                           ; 1 bytes @ 0x1A
   546  00007A                     	ds	3
   547  00007D                     ___ftmul@exp:
   548                           	opt stack 0
   549                           
   550                           ; 1 bytes @ 0x1D
   551  00007D                     	ds	1
   552  00007E                     ___ftmul@f3_as_product:
   553                           	opt stack 0
   554                           
   555                           ; 3 bytes @ 0x1E
   556  00007E                     	ds	3
   557  000081                     ___ftmul@cntr:
   558                           	opt stack 0
   559                           
   560                           ; 1 bytes @ 0x21
   561  000081                     	ds	1
   562  000082                     ___ftmul@sign:
   563                           	opt stack 0
   564                           
   565                           ; 1 bytes @ 0x22
   566  000082                     	ds	1
   567  000083                     ?_fround:
   568                           	opt stack 0
   569  000083                     ?_scale:
   570                           	opt stack 0
   571                           
   572                           ; 3 bytes @ 0x23
   573  000083                     	ds	3
   574  000086                     _fround$1355:
   575                           	opt stack 0
   576  000086                     _scale$1356:
   577                           	opt stack 0
   578                           
   579                           ; 3 bytes @ 0x26
   580  000086                     	ds	3
   581  000089                     scale@scl:
   582                           	opt stack 0
   583  000089                     _fround$1354:
   584                           	opt stack 0
   585                           
   586                           ; 3 bytes @ 0x29
   587  000089                     	ds	1
   588  00008A                     ?___fttol:
   589                           	opt stack 0
   590  00008A                     ___fttol@f1:
   591                           	opt stack 0
   592                           
   593                           ; 3 bytes @ 0x2A
   594  00008A                     	ds	2
   595  00008C                     fround@prec:
   596                           	opt stack 0
   597                           
   598                           ; 1 bytes @ 0x2C
   599  00008C                     	ds	1
   600  00008D                     ?___ftadd:
   601                           	opt stack 0
   602  00008D                     ___ftadd@f1:
   603                           	opt stack 0
   604                           
   605                           ; 3 bytes @ 0x2D
   606  00008D                     	ds	1
   607  00008E                     ??___fttol:
   608                           
   609                           ; 1 bytes @ 0x2E
   610  00008E                     	ds	2
   611  000090                     ___ftadd@f2:
   612                           	opt stack 0
   613                           
   614                           ; 3 bytes @ 0x30
   615  000090                     	ds	3
   616  000093                     ??___ftadd:
   617  000093                     ___fttol@sign1:
   618                           	opt stack 0
   619                           
   620                           ; 1 bytes @ 0x33
   621  000093                     	ds	1
   622  000094                     ___fttol@lval:
   623                           	opt stack 0
   624                           
   625                           ; 4 bytes @ 0x34
   626  000094                     	ds	2
   627  000096                     ___ftadd@sign:
   628                           	opt stack 0
   629                           
   630                           ; 1 bytes @ 0x36
   631  000096                     	ds	1
   632  000097                     ___ftadd@exp2:
   633                           	opt stack 0
   634                           
   635                           ; 1 bytes @ 0x37
   636  000097                     	ds	1
   637  000098                     ___ftadd@exp1:
   638                           	opt stack 0
   639  000098                     ___fttol@exp1:
   640                           	opt stack 0
   641                           
   642                           ; 1 bytes @ 0x38
   643  000098                     	ds	1
   644  000099                     ?___ftsub:
   645                           	opt stack 0
   646  000099                     ___ftsub@f1:
   647                           	opt stack 0
   648                           
   649                           ; 3 bytes @ 0x39
   650  000099                     	ds	3
   651  00009C                     ___ftsub@f2:
   652                           	opt stack 0
   653                           
   654                           ; 3 bytes @ 0x3C
   655  00009C                     	ds	3
   656  00009F                     ?_sprintf:
   657                           	opt stack 0
   658  00009F                     ?___ftdiv:
   659                           	opt stack 0
   660  00009F                     sprintf@sp:
   661                           	opt stack 0
   662  00009F                     ___ftdiv@f1:
   663                           	opt stack 0
   664                           
   665                           ; 3 bytes @ 0x3F
   666  00009F                     	ds	2
   667  0000A1                     sprintf@f:
   668                           	opt stack 0
   669                           
   670                           ; 2 bytes @ 0x41
   671  0000A1                     	ds	1
   672  0000A2                     ___ftdiv@f2:
   673                           	opt stack 0
   674                           
   675                           ; 3 bytes @ 0x42
   676  0000A2                     	ds	3
   677  0000A5                     ??___ftdiv:
   678                           
   679                           ; 1 bytes @ 0x45
   680  0000A5                     	ds	1
   681  0000A6                     ??_sprintf:
   682                           
   683                           ; 1 bytes @ 0x46
   684  0000A6                     	ds	2
   685  0000A8                     ___ftdiv@cntr:
   686                           	opt stack 0
   687                           
   688                           ; 1 bytes @ 0x48
   689  0000A8                     	ds	1
   690  0000A9                     ___ftdiv@f3:
   691                           	opt stack 0
   692                           
   693                           ; 3 bytes @ 0x49
   694  0000A9                     	ds	3
   695  0000AC                     ___ftdiv@exp:
   696                           	opt stack 0
   697  0000AC                     _sprintf$1357:
   698                           	opt stack 0
   699                           
   700                           ; 3 bytes @ 0x4C
   701  0000AC                     	ds	1
   702  0000AD                     ___ftdiv@sign:
   703                           	opt stack 0
   704                           
   705                           ; 1 bytes @ 0x4D
   706  0000AD                     	ds	1
   707  0000AE                     ?_sqrt:
   708                           	opt stack 0
   709  0000AE                     sqrt@a:
   710                           	opt stack 0
   711                           
   712                           ; 3 bytes @ 0x4E
   713  0000AE                     	ds	1
   714  0000AF                     sprintf@ap:
   715                           	opt stack 0
   716                           
   717                           ; 2 bytes @ 0x4F
   718  0000AF                     	ds	2
   719  0000B1                     ??_sqrt:
   720  0000B1                     sprintf@tmpval:
   721                           	opt stack 0
   722                           
   723                           ; 4 bytes @ 0x51
   724  0000B1                     	ds	3
   725  0000B4                     sqrt@og:
   726                           	opt stack 0
   727                           
   728                           ; 3 bytes @ 0x54
   729  0000B4                     	ds	1
   730  0000B5                     sprintf@val:
   731                           	opt stack 0
   732                           
   733                           ; 4 bytes @ 0x55
   734  0000B5                     	ds	2
   735  0000B7                     sqrt@z:
   736                           	opt stack 0
   737                           
   738                           ; 3 bytes @ 0x57
   739  0000B7                     	ds	2
   740  0000B9                     sprintf@exp:
   741                           	opt stack 0
   742                           
   743                           ; 2 bytes @ 0x59
   744  0000B9                     	ds	1
   745  0000BA                     sqrt@i:
   746                           	opt stack 0
   747                           
   748                           ; 1 bytes @ 0x5A
   749  0000BA                     	ds	1
   750  0000BB                     sprintf@flag:
   751                           	opt stack 0
   752  0000BB                     sqrt@q:
   753                           	opt stack 0
   754                           
   755                           ; 3 bytes @ 0x5B
   756  0000BB                     	ds	2
   757  0000BD                     sprintf@width:
   758                           	opt stack 0
   759                           
   760                           ; 2 bytes @ 0x5D
   761  0000BD                     	ds	1
   762  0000BE                     sqrt@x:
   763                           	opt stack 0
   764                           
   765                           ; 3 bytes @ 0x5E
   766  0000BE                     	ds	1
   767  0000BF                     sprintf@fval:
   768                           	opt stack 0
   769                           
   770                           ; 3 bytes @ 0x5F
   771  0000BF                     	ds	3
   772  0000C2                     sprintf@prec:
   773                           	opt stack 0
   774                           
   775                           ; 2 bytes @ 0x62
   776  0000C2                     	ds	2
   777  0000C4                     sprintf@c:
   778                           	opt stack 0
   779                           
   780                           ; 1 bytes @ 0x64
   781  0000C4                     	ds	1
   782  0000C5                     ??_main:
   783                           
   784                           ; 1 bytes @ 0x65
   785  0000C5                     	ds	2
   786  0000C7                     main@PotenciaReal:
   787                           	opt stack 0
   788                           
   789                           ; 3 bytes @ 0x67
   790  0000C7                     	ds	3
   791  0000CA                     main@buffer1:
   792                           	opt stack 0
   793                           
   794                           ; 16 bytes @ 0x6A
   795  0000CA                     	ds	16
   796  0000DA                     _main$1352:
   797                           	opt stack 0
   798                           
   799                           ; 3 bytes @ 0x7A
   800  0000DA                     	ds	3
   801  0000DD                     _main$1353:
   802                           	opt stack 0
   803                           
   804                           ; 3 bytes @ 0x7D
   805  0000DD                     	ds	3
   806  0000E0                     main@Voltage:
   807                           	opt stack 0
   808                           
   809                           ; 3 bytes @ 0x80
   810  0000E0                     	ds	3
   811  0000E3                     main@sumIns:
   812                           	opt stack 0
   813                           
   814                           ; 3 bytes @ 0x83
   815  0000E3                     	ds	3
   816  0000E6                     main@Irms:
   817                           	opt stack 0
   818                           
   819                           ; 3 bytes @ 0x86
   820  0000E6                     	ds	3
   821  0000E9                     main@numCiclosMuestro:
   822                           	opt stack 0
   823                           
   824                           ; 2 bytes @ 0x89
   825  0000E9                     	ds	2
   826  0000EB                     main@Amps:
   827                           	opt stack 0
   828                           
   829                           ; 3 bytes @ 0x8B
   830  0000EB                     	ds	3
   831                           tblptru	equ	0xFF8
   832                           postinc0	equ	0xFEE
   833                           wreg	equ	0xFE8
   834                           
   835                           	psect	cstackCOMRAM
   836  000001                     __pcstackCOMRAM:
   837                           	opt stack 0
   838  000001                     ?i2___ftpack:
   839                           	opt stack 0
   840  000001                     i2___ftpack@arg:
   841                           	opt stack 0
   842                           
   843                           ; 3 bytes @ 0x0
   844  000001                     	ds	3
   845  000004                     i2___ftpack@exp:
   846                           	opt stack 0
   847                           
   848                           ; 1 bytes @ 0x3
   849  000004                     	ds	1
   850  000005                     i2___ftpack@sign:
   851                           	opt stack 0
   852                           
   853                           ; 1 bytes @ 0x4
   854  000005                     	ds	1
   855  000006                     ??i2___ftpack:
   856                           
   857                           ; 1 bytes @ 0x5
   858  000006                     	ds	3
   859  000009                     ?i2___lwtoft:
   860                           	opt stack 0
   861  000009                     i2___lwtoft@c:
   862                           	opt stack 0
   863                           
   864                           ; 2 bytes @ 0x8
   865  000009                     	ds	3
   866  00000C                     ?i2___ftmul:
   867                           	opt stack 0
   868  00000C                     i2___ftmul@f1:
   869                           	opt stack 0
   870                           
   871                           ; 3 bytes @ 0xB
   872  00000C                     	ds	3
   873  00000F                     i2___ftmul@f2:
   874                           	opt stack 0
   875                           
   876                           ; 3 bytes @ 0xE
   877  00000F                     	ds	3
   878  000012                     ??i2___ftmul:
   879                           
   880                           ; 1 bytes @ 0x11
   881  000012                     	ds	3
   882  000015                     i2___ftmul@exp:
   883                           	opt stack 0
   884                           
   885                           ; 1 bytes @ 0x14
   886  000015                     	ds	1
   887  000016                     i2___ftmul@f3_as_product:
   888                           	opt stack 0
   889                           
   890                           ; 3 bytes @ 0x15
   891  000016                     	ds	3
   892  000019                     i2___ftmul@cntr:
   893                           	opt stack 0
   894                           
   895                           ; 1 bytes @ 0x18
   896  000019                     	ds	1
   897  00001A                     i2___ftmul@sign:
   898                           	opt stack 0
   899                           
   900                           ; 1 bytes @ 0x19
   901  00001A                     	ds	1
   902  00001B                     ?i2___ftdiv:
   903                           	opt stack 0
   904  00001B                     i2___ftdiv@f1:
   905                           	opt stack 0
   906                           
   907                           ; 3 bytes @ 0x1A
   908  00001B                     	ds	3
   909  00001E                     i2___ftdiv@f2:
   910                           	opt stack 0
   911                           
   912                           ; 3 bytes @ 0x1D
   913  00001E                     	ds	3
   914  000021                     ??i2___ftdiv:
   915                           
   916                           ; 1 bytes @ 0x20
   917  000021                     	ds	3
   918  000024                     i2___ftdiv@cntr:
   919                           	opt stack 0
   920                           
   921                           ; 1 bytes @ 0x23
   922  000024                     	ds	1
   923  000025                     i2___ftdiv@f3:
   924                           	opt stack 0
   925                           
   926                           ; 3 bytes @ 0x24
   927  000025                     	ds	3
   928  000028                     i2___ftdiv@exp:
   929                           	opt stack 0
   930                           
   931                           ; 1 bytes @ 0x27
   932  000028                     	ds	1
   933  000029                     i2___ftdiv@sign:
   934                           	opt stack 0
   935                           
   936                           ; 1 bytes @ 0x28
   937  000029                     	ds	1
   938  00002A                     ??_comparar:
   939                           
   940                           ; 1 bytes @ 0x29
   941  00002A                     	ds	18
   942                           tblptru	equ	0xFF8
   943                           postinc0	equ	0xFEE
   944                           wreg	equ	0xFE8
   945                           
   946 ;;
   947 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   948 ;;
   949 ;; *************** function _main *****************
   950 ;; Defined at:
   951 ;;		line 117 in file "main_014_Practice_CCP Comparacion_ADC.c"
   952 ;; Parameters:    Size  Location     Type
   953 ;;		None
   954 ;; Auto vars:     Size  Location     Type
   955 ;;  Amps            3  139[BANK0 ] float 
   956 ;;  Voltage         3  128[BANK0 ] float 
   957 ;;  buffer1        16  106[BANK0 ] unsigned char [16]
   958 ;;  Irms            3  134[BANK0 ] float 
   959 ;;  sumIns          3  131[BANK0 ] float 
   960 ;;  PotenciaReal    3  103[BANK0 ] float 
   961 ;;  numCiclosMue    2  137[BANK0 ] unsigned int 
   962 ;; Return value:  Size  Location     Type
   963 ;;                  1    wreg      void 
   964 ;; Registers used:
   965 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   966 ;; Tracked objects:
   967 ;;		On entry : 0/0
   968 ;;		On exit  : 0/0
   969 ;;		Unchanged: 0/0
   970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   971 ;;      Params:         0       0       0       0       0       0       0       0       0
   972 ;;      Locals:         0      39       0       0       0       0       0       0       0
   973 ;;      Temps:          0       2       0       0       0       0       0       0       0
   974 ;;      Totals:         0      41       0       0       0       0       0       0       0
   975 ;;Total ram usage:       41 bytes
   976 ;; Hardware stack levels required when called:    7
   977 ;; This function calls:
   978 ;;		_Lcd_Cmd
   979 ;;		_Lcd_Init
   980 ;;		_Lcd_Out2
   981 ;;		___ftadd
   982 ;;		___ftdiv
   983 ;;		___ftmul
   984 ;;		___lwtoft
   985 ;;		_configstandard
   986 ;;		_sprintf
   987 ;;		_sqrt
   988 ;; This function is called by:
   989 ;;		Startup code after reset
   990 ;; This function uses a non-reentrant model
   991 ;;
   992                           
   993                           	psect	text0
   994  001758                     __ptext0:
   995                           	opt stack 0
   996  001758                     _main:
   997                           	opt stack 24
   998                           
   999                           ;main_014_Practice_CCP Comparacion_ADC.c: 119: configstandard();
  1000                           
  1001                           ;incstack = 0
  1002  001758  EC29  F018         	call	_configstandard	;wreg free
  1003                           
  1004                           ;main_014_Practice_CCP Comparacion_ADC.c: 122: TRISAbits.RA0 = 1;
  1005  00175C  8092               	bsf	3986,0,c	;volatile
  1006                           
  1007                           ;main_014_Practice_CCP Comparacion_ADC.c: 127: unsigned char buffer1[16];
  1008                           ;main_014_Practice_CCP Comparacion_ADC.c: 130: Lcd_Init();
  1009  00175E  ECFF  F00F         	call	_Lcd_Init	;wreg free
  1010                           
  1011                           ;main_014_Practice_CCP Comparacion_ADC.c: 131: Lcd_Cmd(1);
  1012  001762  0E01               	movlw	1
  1013  001764  ECD3  F011         	call	_Lcd_Cmd
  1014                           
  1015                           ;main_014_Practice_CCP Comparacion_ADC.c: 132: Lcd_Cmd(12);
  1016  001768  0E0C               	movlw	12
  1017  00176A  ECD3  F011         	call	_Lcd_Cmd
  1018                           
  1019                           ;main_014_Practice_CCP Comparacion_ADC.c: 133: _delay((unsigned long)((100)*(48000000/40
      +                          00.0)));
  1020  00176E  0E07               	movlw	7
  1021  001770  0100               	movlb	0	; () banked
  1022  001772  6FC6               	movwf	(??_main+1)& (0+255),b
  1023  001774  0E17               	movlw	23
  1024  001776  6FC5               	movwf	??_main& (0+255),b
  1025  001778  0E6A               	movlw	106
  1026  00177A                     u3757:
  1027  00177A  2EE8               	decfsz	wreg,f,c
  1028  00177C  D7FE               	bra	u3757
  1029  00177E  2FC5               	decfsz	??_main& (0+255),f,b
  1030  001780  D7FC               	bra	u3757
  1031  001782  2FC6               	decfsz	(??_main+1)& (0+255),f,b
  1032  001784  D7FA               	bra	u3757
  1033  001786  F000               	nop	
  1034                           
  1035                           ;main_014_Practice_CCP Comparacion_ADC.c: 135: ADCON2bits.ADCS=110;
  1036  001788  50C0               	movf	4032,w,c	;volatile
  1037  00178A  0BF8               	andlw	-8
  1038  00178C  0906               	iorlw	6
  1039  00178E  6EC0               	movwf	4032,c	;volatile
  1040                           
  1041                           ;main_014_Practice_CCP Comparacion_ADC.c: 136: ADCON2bits.ACQT=010;
  1042  001790  96C0               	bcf	4032,3,c	;volatile
  1043  001792  98C0               	bcf	4032,4,c	;volatile
  1044  001794  9AC0               	bcf	4032,5,c	;volatile
  1045                           
  1046                           ;main_014_Practice_CCP Comparacion_ADC.c: 138: float sumIns=0;
  1047  001796  0E00               	movlw	0
  1048  001798  0100               	movlb	0	; () banked
  1049  00179A  6FE3               	movwf	main@sumIns& (0+255),b
  1050  00179C  0E00               	movlw	0
  1051  00179E  6FE4               	movwf	(main@sumIns+1)& (0+255),b
  1052  0017A0  0E00               	movlw	0
  1053  0017A2  6FE5               	movwf	(main@sumIns+2)& (0+255),b
  1054                           
  1055                           ; BSR set to: 0
  1056                           ;main_014_Practice_CCP Comparacion_ADC.c: 139: float Irms=0;
  1057  0017A4  0E00               	movlw	0
  1058  0017A6  6FE6               	movwf	main@Irms& (0+255),b
  1059  0017A8  0E00               	movlw	0
  1060  0017AA  6FE7               	movwf	(main@Irms+1)& (0+255),b
  1061  0017AC  0E00               	movlw	0
  1062  0017AE  6FE8               	movwf	(main@Irms+2)& (0+255),b
  1063                           
  1064                           ; BSR set to: 0
  1065                           ;main_014_Practice_CCP Comparacion_ADC.c: 140: unsigned int numCiclosMuestro=0;
  1066  0017B0  0E00               	movlw	0
  1067  0017B2  6FEA               	movwf	(main@numCiclosMuestro+1)& (0+255),b
  1068  0017B4  0E00               	movlw	0
  1069  0017B6  6FE9               	movwf	main@numCiclosMuestro& (0+255),b
  1070                           
  1071                           ; BSR set to: 0
  1072                           ;main_014_Practice_CCP Comparacion_ADC.c: 141: float PotenciaReal=0;
  1073  0017B8  0E00               	movlw	0
  1074  0017BA  6FC7               	movwf	main@PotenciaReal& (0+255),b
  1075  0017BC  0E00               	movlw	0
  1076  0017BE  6FC8               	movwf	(main@PotenciaReal+1)& (0+255),b
  1077  0017C0  0E00               	movlw	0
  1078  0017C2  6FC9               	movwf	(main@PotenciaReal+2)& (0+255),b
  1079                           
  1080                           ; BSR set to: 0
  1081                           ;main_014_Practice_CCP Comparacion_ADC.c: 143: {
  1082                           ;main_014_Practice_CCP Comparacion_ADC.c: 145: while(numCiclosMuestro<200){
  1083                           
  1084                           ;main_014_Practice_CCP Comparacion_ADC.c: 142: while(1)
  1085  0017C4  D0BF               	goto	l118
  1086  0017C6                     l119:
  1087                           
  1088                           ; BSR set to: 0
  1089                           ;main_014_Practice_CCP Comparacion_ADC.c: 146: ADCON0bits.GO_DONE = 1;
  1090  0017C6  82C2               	bsf	4034,1,c	;volatile
  1091                           
  1092                           ; BSR set to: 0
  1093                           ;main_014_Practice_CCP Comparacion_ADC.c: 147: adc1 = (ADRESH<<8)+ADRESL;
  1094  0017C8  50C4               	movf	4036,w,c	;volatile
  1095  0017CA  6FC6               	movwf	(??_main+1)& (0+255),b
  1096  0017CC  6BC5               	clrf	??_main& (0+255),b
  1097  0017CE  50C3               	movf	4035,w,c	;volatile
  1098  0017D0  25C5               	addwf	??_main& (0+255),w,b
  1099  0017D2  6E3F               	movwf	_adc1,c
  1100  0017D4  0E00               	movlw	0
  1101  0017D6  21C6               	addwfc	(??_main+1)& (0+255),w,b
  1102  0017D8  6E40               	movwf	_adc1+1,c
  1103                           
  1104                           ; BSR set to: 0
  1105                           ;main_014_Practice_CCP Comparacion_ADC.c: 148: float Voltage=0;
  1106  0017DA  0E00               	movlw	0
  1107  0017DC  6FE0               	movwf	main@Voltage& (0+255),b
  1108  0017DE  0E00               	movlw	0
  1109  0017E0  6FE1               	movwf	(main@Voltage+1)& (0+255),b
  1110  0017E2  0E00               	movlw	0
  1111  0017E4  6FE2               	movwf	(main@Voltage+2)& (0+255),b
  1112                           
  1113                           ; BSR set to: 0
  1114                           ;main_014_Practice_CCP Comparacion_ADC.c: 149: float Amps=0;
  1115  0017E6  0E00               	movlw	0
  1116  0017E8  6FEB               	movwf	main@Amps& (0+255),b
  1117  0017EA  0E00               	movlw	0
  1118  0017EC  6FEC               	movwf	(main@Amps+1)& (0+255),b
  1119  0017EE  0E00               	movlw	0
  1120  0017F0  6FED               	movwf	(main@Amps+2)& (0+255),b
  1121                           
  1122                           ; BSR set to: 0
  1123                           ;main_014_Practice_CCP Comparacion_ADC.c: 150: Voltage=(float)(adc1*5.0/1024.0);
  1124  0017F2  0E00               	movlw	0
  1125  0017F4  6F77               	movwf	___ftmul@f2& (0+255),b
  1126  0017F6  0EA0               	movlw	160
  1127  0017F8  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  1128  0017FA  0E40               	movlw	64
  1129  0017FC  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  1130  0017FE  C03F  F068         	movff	_adc1,___lwtoft@c
  1131  001802  C040  F069         	movff	_adc1+1,___lwtoft@c+1
  1132  001806  ECB6  F018         	call	___lwtoft	;wreg free
  1133  00180A  C068  F074         	movff	?___lwtoft,___ftmul@f1
  1134  00180E  C069  F075         	movff	?___lwtoft+1,___ftmul@f1+1
  1135  001812  C06A  F076         	movff	?___lwtoft+2,___ftmul@f1+2
  1136  001816  ECFF  F013         	call	___ftmul	;wreg free
  1137  00181A  C074  F09F         	movff	?___ftmul,___ftdiv@f1
  1138  00181E  C075  F0A0         	movff	?___ftmul+1,___ftdiv@f1+1
  1139  001822  C076  F0A1         	movff	?___ftmul+2,___ftdiv@f1+2
  1140  001826  0E00               	movlw	0
  1141  001828  0100               	movlb	0	; () banked
  1142  00182A  6FA2               	movwf	___ftdiv@f2& (0+255),b
  1143  00182C  0E80               	movlw	128
  1144  00182E  6FA3               	movwf	(___ftdiv@f2+1)& (0+255),b
  1145  001830  0E44               	movlw	68
  1146  001832  6FA4               	movwf	(___ftdiv@f2+2)& (0+255),b
  1147  001834  ECF4  F014         	call	___ftdiv	;wreg free
  1148  001838  C09F  F0E0         	movff	?___ftdiv,main@Voltage
  1149  00183C  C0A0  F0E1         	movff	?___ftdiv+1,main@Voltage+1
  1150  001840  C0A1  F0E2         	movff	?___ftdiv+2,main@Voltage+2
  1151                           
  1152                           ;main_014_Practice_CCP Comparacion_ADC.c: 151: Amps=((Voltage-2.5)/0.185);
  1153  001844  0E00               	movlw	0
  1154  001846  0100               	movlb	0	; () banked
  1155  001848  6F90               	movwf	___ftadd@f2& (0+255),b
  1156  00184A  0E20               	movlw	32
  1157  00184C  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
  1158  00184E  0EC0               	movlw	192
  1159  001850  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
  1160  001852  C0E0  F08D         	movff	main@Voltage,___ftadd@f1
  1161  001856  C0E1  F08E         	movff	main@Voltage+1,___ftadd@f1+1
  1162  00185A  C0E2  F08F         	movff	main@Voltage+2,___ftadd@f1+2
  1163  00185E  EC5E  F00E         	call	___ftadd	;wreg free
  1164  001862  C08D  F09F         	movff	?___ftadd,___ftdiv@f1
  1165  001866  C08E  F0A0         	movff	?___ftadd+1,___ftdiv@f1+1
  1166  00186A  C08F  F0A1         	movff	?___ftadd+2,___ftdiv@f1+2
  1167  00186E  0E71               	movlw	113
  1168  001870  0100               	movlb	0	; () banked
  1169  001872  6FA2               	movwf	___ftdiv@f2& (0+255),b
  1170  001874  0E3D               	movlw	61
  1171  001876  6FA3               	movwf	(___ftdiv@f2+1)& (0+255),b
  1172  001878  0E3E               	movlw	62
  1173  00187A  6FA4               	movwf	(___ftdiv@f2+2)& (0+255),b
  1174  00187C  ECF4  F014         	call	___ftdiv	;wreg free
  1175  001880  C09F  F0EB         	movff	?___ftdiv,main@Amps
  1176  001884  C0A0  F0EC         	movff	?___ftdiv+1,main@Amps+1
  1177  001888  C0A1  F0ED         	movff	?___ftdiv+2,main@Amps+2
  1178                           
  1179                           ;main_014_Practice_CCP Comparacion_ADC.c: 153: sprintf(buffer1,"Voltage %3d", numCiclosM
      +                          uestro);
  1180  00188C  0ECA               	movlw	low main@buffer1
  1181  00188E  0100               	movlb	0	; () banked
  1182  001890  6F9F               	movwf	sprintf@sp& (0+255),b
  1183  001892  0E00               	movlw	high main@buffer1
  1184  001894  6FA0               	movwf	(sprintf@sp+1)& (0+255),b
  1185  001896  0E77               	movlw	low STR_1
  1186  001898  6FA1               	movwf	sprintf@f& (0+255),b
  1187  00189A  0E08               	movlw	high STR_1
  1188  00189C  6FA2               	movwf	(sprintf@f+1)& (0+255),b
  1189  00189E  C0E9  F0A3         	movff	main@numCiclosMuestro,?_sprintf+4
  1190  0018A2  C0EA  F0A4         	movff	main@numCiclosMuestro+1,?_sprintf+5
  1191  0018A6  EC53  F004         	call	_sprintf	;wreg free
  1192                           
  1193                           ;main_014_Practice_CCP Comparacion_ADC.c: 154: sprintf(buffer2,"amps %0.2f", Amps);
  1194  0018AA  0E41               	movlw	low _buffer2
  1195  0018AC  0100               	movlb	0	; () banked
  1196  0018AE  6F9F               	movwf	sprintf@sp& (0+255),b
  1197  0018B0  0E00               	movlw	high _buffer2
  1198  0018B2  6FA0               	movwf	(sprintf@sp+1)& (0+255),b
  1199  0018B4  0E9A               	movlw	low STR_2
  1200  0018B6  6FA1               	movwf	sprintf@f& (0+255),b
  1201  0018B8  0E08               	movlw	high STR_2
  1202  0018BA  6FA2               	movwf	(sprintf@f+1)& (0+255),b
  1203  0018BC  C0EB  F0A3         	movff	main@Amps,?_sprintf+4
  1204  0018C0  C0EC  F0A4         	movff	main@Amps+1,?_sprintf+5
  1205  0018C4  C0ED  F0A5         	movff	main@Amps+2,?_sprintf+6
  1206  0018C8  EC53  F004         	call	_sprintf	;wreg free
  1207                           
  1208                           ;main_014_Practice_CCP Comparacion_ADC.c: 155: Lcd_Out2(1, 0, buffer1);
  1209  0018CC  0E00               	movlw	0
  1210  0018CE  0100               	movlb	0	; () banked
  1211  0018D0  6F63               	movwf	Lcd_Out2@x& (0+255),b
  1212  0018D2  0ECA               	movlw	low main@buffer1
  1213  0018D4  6F64               	movwf	Lcd_Out2@buffer& (0+255),b
  1214  0018D6  0E00               	movlw	high main@buffer1
  1215  0018D8  6F65               	movwf	(Lcd_Out2@buffer+1)& (0+255),b
  1216  0018DA  0E01               	movlw	1
  1217  0018DC  EC91  F017         	call	_Lcd_Out2
  1218                           
  1219                           ;main_014_Practice_CCP Comparacion_ADC.c: 156: Lcd_Out2(2, 0, buffer2);
  1220  0018E0  0E00               	movlw	0
  1221  0018E2  0100               	movlb	0	; () banked
  1222  0018E4  6F63               	movwf	Lcd_Out2@x& (0+255),b
  1223  0018E6  0E41               	movlw	low _buffer2
  1224  0018E8  6F64               	movwf	Lcd_Out2@buffer& (0+255),b
  1225  0018EA  0E00               	movlw	high _buffer2
  1226  0018EC  6F65               	movwf	(Lcd_Out2@buffer+1)& (0+255),b
  1227  0018EE  0E02               	movlw	2
  1228  0018F0  EC91  F017         	call	_Lcd_Out2
  1229                           
  1230                           ;main_014_Practice_CCP Comparacion_ADC.c: 158: _delay((unsigned long)((50)*(48000000/400
      +                          0000.0)));
  1231  0018F4  0EC8               	movlw	200
  1232  0018F6                     u3767:
  1233  0018F6  2EE8               	decfsz	wreg,f,c
  1234  0018F8  D7FE               	bra	u3767
  1235                           
  1236                           ;main_014_Practice_CCP Comparacion_ADC.c: 160: sumIns+=Amps*Amps;
  1237  0018FA  C0E3  F08D         	movff	main@sumIns,___ftadd@f1
  1238  0018FE  C0E4  F08E         	movff	main@sumIns+1,___ftadd@f1+1
  1239  001902  C0E5  F08F         	movff	main@sumIns+2,___ftadd@f1+2
  1240  001906  C0EB  F077         	movff	main@Amps,___ftmul@f2
  1241  00190A  C0EC  F078         	movff	main@Amps+1,___ftmul@f2+1
  1242  00190E  C0ED  F079         	movff	main@Amps+2,___ftmul@f2+2
  1243  001912  C0EB  F074         	movff	main@Amps,___ftmul@f1
  1244  001916  C0EC  F075         	movff	main@Amps+1,___ftmul@f1+1
  1245  00191A  C0ED  F076         	movff	main@Amps+2,___ftmul@f1+2
  1246  00191E  ECFF  F013         	call	___ftmul	;wreg free
  1247  001922  C074  F090         	movff	?___ftmul,___ftadd@f2
  1248  001926  C075  F091         	movff	?___ftmul+1,___ftadd@f2+1
  1249  00192A  C076  F092         	movff	?___ftmul+2,___ftadd@f2+2
  1250  00192E  EC5E  F00E         	call	___ftadd	;wreg free
  1251  001932  C08D  F0E3         	movff	?___ftadd,main@sumIns
  1252  001936  C08E  F0E4         	movff	?___ftadd+1,main@sumIns+1
  1253  00193A  C08F  F0E5         	movff	?___ftadd+2,main@sumIns+2
  1254                           
  1255                           ;main_014_Practice_CCP Comparacion_ADC.c: 161: numCiclosMuestro+=1;
  1256  00193E  0100               	movlb	0	; () banked
  1257  001940  4BE9               	infsnz	main@numCiclosMuestro& (0+255),f,b
  1258  001942  2BEA               	incf	(main@numCiclosMuestro+1)& (0+255),f,b
  1259  001944                     l118:
  1260                           
  1261                           ; BSR set to: 0
  1262  001944  0100               	movlb	0	; () banked
  1263  001946  51EA               	movf	(main@numCiclosMuestro+1)& (0+255),w,b
  1264  001948  E104               	bnz	l3648
  1265  00194A  0EC8               	movlw	200
  1266  00194C  5DE9               	subwf	main@numCiclosMuestro& (0+255),w,b
  1267  00194E  A0D8               	btfss	status,0,c
  1268  001950  D73A               	goto	l119
  1269  001952                     l3648:
  1270                           
  1271                           ; BSR set to: 0
  1272                           ;main_014_Practice_CCP Comparacion_ADC.c: 163: }
  1273                           ;main_014_Practice_CCP Comparacion_ADC.c: 165: Irms=sqrt(sumIns/201)/2;
  1274  001952  0E00               	movlw	0
  1275  001954  6FA2               	movwf	___ftdiv@f2& (0+255),b
  1276  001956  0E49               	movlw	73
  1277  001958  6FA3               	movwf	(___ftdiv@f2+1)& (0+255),b
  1278  00195A  0E43               	movlw	67
  1279  00195C  6FA4               	movwf	(___ftdiv@f2+2)& (0+255),b
  1280  00195E  C0E3  F09F         	movff	main@sumIns,___ftdiv@f1
  1281  001962  C0E4  F0A0         	movff	main@sumIns+1,___ftdiv@f1+1
  1282  001966  C0E5  F0A1         	movff	main@sumIns+2,___ftdiv@f1+2
  1283  00196A  ECF4  F014         	call	___ftdiv	;wreg free
  1284  00196E  C09F  F0AE         	movff	?___ftdiv,sqrt@a
  1285  001972  C0A0  F0AF         	movff	?___ftdiv+1,sqrt@a+1
  1286  001976  C0A1  F0B0         	movff	?___ftdiv+2,sqrt@a+2
  1287  00197A  EC35  F00F         	call	_sqrt	;wreg free
  1288  00197E  C0AE  F0DA         	movff	?_sqrt,_main$1352
  1289  001982  C0AF  F0DB         	movff	?_sqrt+1,_main$1352+1
  1290  001986  C0B0  F0DC         	movff	?_sqrt+2,_main$1352+2
  1291                           
  1292                           ;main_014_Practice_CCP Comparacion_ADC.c: 163: }
  1293                           ;main_014_Practice_CCP Comparacion_ADC.c: 165: Irms=sqrt(sumIns/201)/2;
  1294  00198A  C0DA  F09F         	movff	_main$1352,___ftdiv@f1
  1295  00198E  C0DB  F0A0         	movff	_main$1352+1,___ftdiv@f1+1
  1296  001992  C0DC  F0A1         	movff	_main$1352+2,___ftdiv@f1+2
  1297  001996  0E00               	movlw	0
  1298  001998  0100               	movlb	0	; () banked
  1299  00199A  6FA2               	movwf	___ftdiv@f2& (0+255),b
  1300  00199C  0E00               	movlw	0
  1301  00199E  6FA3               	movwf	(___ftdiv@f2+1)& (0+255),b
  1302  0019A0  0E40               	movlw	64
  1303  0019A2  6FA4               	movwf	(___ftdiv@f2+2)& (0+255),b
  1304  0019A4  ECF4  F014         	call	___ftdiv	;wreg free
  1305  0019A8  C09F  F0E6         	movff	?___ftdiv,main@Irms
  1306  0019AC  C0A0  F0E7         	movff	?___ftdiv+1,main@Irms+1
  1307  0019B0  C0A1  F0E8         	movff	?___ftdiv+2,main@Irms+2
  1308                           
  1309                           ;main_014_Practice_CCP Comparacion_ADC.c: 166: sprintf(buffer2,"IRMS %0.2f", Irms);
  1310  0019B4  0E41               	movlw	low _buffer2
  1311  0019B6  0100               	movlb	0	; () banked
  1312  0019B8  6F9F               	movwf	sprintf@sp& (0+255),b
  1313  0019BA  0E00               	movlw	high _buffer2
  1314  0019BC  6FA0               	movwf	(sprintf@sp+1)& (0+255),b
  1315  0019BE  0E8F               	movlw	low STR_3
  1316  0019C0  6FA1               	movwf	sprintf@f& (0+255),b
  1317  0019C2  0E08               	movlw	high STR_3
  1318  0019C4  6FA2               	movwf	(sprintf@f+1)& (0+255),b
  1319  0019C6  C0E6  F0A3         	movff	main@Irms,?_sprintf+4
  1320  0019CA  C0E7  F0A4         	movff	main@Irms+1,?_sprintf+5
  1321  0019CE  C0E8  F0A5         	movff	main@Irms+2,?_sprintf+6
  1322  0019D2  EC53  F004         	call	_sprintf	;wreg free
  1323                           
  1324                           ;main_014_Practice_CCP Comparacion_ADC.c: 167: Lcd_Out2(2, 0, buffer2);
  1325  0019D6  0E00               	movlw	0
  1326  0019D8  0100               	movlb	0	; () banked
  1327  0019DA  6F63               	movwf	Lcd_Out2@x& (0+255),b
  1328  0019DC  0E41               	movlw	low _buffer2
  1329  0019DE  6F64               	movwf	Lcd_Out2@buffer& (0+255),b
  1330  0019E0  0E00               	movlw	high _buffer2
  1331  0019E2  6F65               	movwf	(Lcd_Out2@buffer+1)& (0+255),b
  1332  0019E4  0E02               	movlw	2
  1333  0019E6  EC91  F017         	call	_Lcd_Out2
  1334                           
  1335                           ;main_014_Practice_CCP Comparacion_ADC.c: 170: sprintf(buffer1,"PReal %0.2f", Irms*128);
  1336  0019EA  C0E6  F074         	movff	main@Irms,___ftmul@f1
  1337  0019EE  C0E7  F075         	movff	main@Irms+1,___ftmul@f1+1
  1338  0019F2  C0E8  F076         	movff	main@Irms+2,___ftmul@f1+2
  1339  0019F6  0E00               	movlw	0
  1340  0019F8  0100               	movlb	0	; () banked
  1341  0019FA  6F77               	movwf	___ftmul@f2& (0+255),b
  1342  0019FC  0E00               	movlw	0
  1343  0019FE  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  1344  001A00  0E43               	movlw	67
  1345  001A02  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  1346  001A04  ECFF  F013         	call	___ftmul	;wreg free
  1347  001A08  C074  F0DD         	movff	?___ftmul,_main$1353
  1348  001A0C  C075  F0DE         	movff	?___ftmul+1,_main$1353+1
  1349  001A10  C076  F0DF         	movff	?___ftmul+2,_main$1353+2
  1350                           
  1351                           ;main_014_Practice_CCP Comparacion_ADC.c: 170: sprintf(buffer1,"PReal %0.2f", Irms*128);
  1352  001A14  0ECA               	movlw	low main@buffer1
  1353  001A16  0100               	movlb	0	; () banked
  1354  001A18  6F9F               	movwf	sprintf@sp& (0+255),b
  1355  001A1A  0E00               	movlw	high main@buffer1
  1356  001A1C  6FA0               	movwf	(sprintf@sp+1)& (0+255),b
  1357  001A1E  0E83               	movlw	low STR_4
  1358  001A20  6FA1               	movwf	sprintf@f& (0+255),b
  1359  001A22  0E08               	movlw	high STR_4
  1360  001A24  6FA2               	movwf	(sprintf@f+1)& (0+255),b
  1361  001A26  C0DD  F0A3         	movff	_main$1353,?_sprintf+4
  1362  001A2A  C0DE  F0A4         	movff	_main$1353+1,?_sprintf+5
  1363  001A2E  C0DF  F0A5         	movff	_main$1353+2,?_sprintf+6
  1364  001A32  EC53  F004         	call	_sprintf	;wreg free
  1365                           
  1366                           ;main_014_Practice_CCP Comparacion_ADC.c: 171: Lcd_Out2(1, 0, buffer1);
  1367  001A36  0E00               	movlw	0
  1368  001A38  0100               	movlb	0	; () banked
  1369  001A3A  6F63               	movwf	Lcd_Out2@x& (0+255),b
  1370  001A3C  0ECA               	movlw	low main@buffer1
  1371  001A3E  6F64               	movwf	Lcd_Out2@buffer& (0+255),b
  1372  001A40  0E00               	movlw	high main@buffer1
  1373  001A42  6F65               	movwf	(Lcd_Out2@buffer+1)& (0+255),b
  1374  001A44  0E01               	movlw	1
  1375  001A46  EC91  F017         	call	_Lcd_Out2
  1376  001A4A  D77C               	goto	l118
  1377  001A4C                     __end_of_main:
  1378                           	opt stack 0
  1379                           tblptru	equ	0xFF8
  1380                           postinc0	equ	0xFEE
  1381                           wreg	equ	0xFE8
  1382                           status	equ	0xFD8
  1383                           
  1384 ;; *************** function _sqrt *****************
  1385 ;; Defined at:
  1386 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcsqrt.c"
  1387 ;; Parameters:    Size  Location     Type
  1388 ;;  a               3   78[BANK0 ] void 
  1389 ;; Auto vars:     Size  Location     Type
  1390 ;;  x               3   94[BANK0 ] void 
  1391 ;;  q               3   91[BANK0 ] void 
  1392 ;;  z               3   87[BANK0 ] void 
  1393 ;;  og              3   84[BANK0 ] void 
  1394 ;;  i               1   90[BANK0 ] unsigned char 
  1395 ;; Return value:  Size  Location     Type
  1396 ;;                  3   78[BANK0 ] unsigned char 
  1397 ;; Registers used:
  1398 ;;		wreg, status,2, status,0, cstack
  1399 ;; Tracked objects:
  1400 ;;		On entry : 0/0
  1401 ;;		On exit  : 0/0
  1402 ;;		Unchanged: 0/0
  1403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1404 ;;      Params:         0       3       0       0       0       0       0       0       0
  1405 ;;      Locals:         0      13       0       0       0       0       0       0       0
  1406 ;;      Temps:          0       3       0       0       0       0       0       0       0
  1407 ;;      Totals:         0      19       0       0       0       0       0       0       0
  1408 ;;Total ram usage:       19 bytes
  1409 ;; Hardware stack levels used:    1
  1410 ;; Hardware stack levels required when called:    6
  1411 ;; This function calls:
  1412 ;;		___ftge
  1413 ;;		___ftmul
  1414 ;;		___ftsub
  1415 ;; This function is called by:
  1416 ;;		_main
  1417 ;; This function uses a non-reentrant model
  1418 ;;
  1419                           
  1420                           	psect	text1
  1421  001E6A                     __ptext1:
  1422                           	opt stack 0
  1423  001E6A                     _sqrt:
  1424                           	opt stack 24
  1425                           
  1426                           ;incstack = 0
  1427  001E6A  0E00               	movlw	0
  1428  001E6C  0100               	movlb	0	; () banked
  1429  001E6E  6F60               	movwf	___ftge@ff1& (0+255),b
  1430  001E70  0E00               	movlw	0
  1431  001E72  6F61               	movwf	(___ftge@ff1+1)& (0+255),b
  1432  001E74  0E00               	movlw	0
  1433  001E76  6F62               	movwf	(___ftge@ff1+2)& (0+255),b
  1434  001E78  C0AE  F063         	movff	sqrt@a,___ftge@ff2
  1435  001E7C  C0AF  F064         	movff	sqrt@a+1,___ftge@ff2+1
  1436  001E80  C0B0  F065         	movff	sqrt@a+2,___ftge@ff2+2
  1437  001E84  EC8A  F016         	call	___ftge	;wreg free
  1438  001E88  0100               	movlb	0	; () banked
  1439  001E8A  A0D8               	btfss	status,0,c
  1440  001E8C  D00D               	goto	l853
  1441                           
  1442                           ; BSR set to: 0
  1443  001E8E  AFB0               	btfss	(sqrt@a+2)& (0+255),7,b
  1444  001E90  D004               	goto	l854
  1445                           
  1446                           ; BSR set to: 0
  1447  001E92  0E00               	movlw	0
  1448  001E94  6FEF               	movwf	(_errno+1)& (0+255),b
  1449  001E96  0E21               	movlw	33
  1450  001E98  6FEE               	movwf	_errno& (0+255),b
  1451  001E9A                     l854:
  1452                           
  1453                           ; BSR set to: 0
  1454  001E9A  0E00               	movlw	0
  1455  001E9C  6FAE               	movwf	?_sqrt& (0+255),b
  1456  001E9E  0E00               	movlw	0
  1457  001EA0  6FAF               	movwf	(?_sqrt+1)& (0+255),b
  1458  001EA2  0E00               	movlw	0
  1459  001EA4  6FB0               	movwf	(?_sqrt+2)& (0+255),b
  1460                           
  1461                           ; BSR set to: 0
  1462  001EA6  0012               	return	
  1463  001EA8                     l853:
  1464                           
  1465                           ; BSR set to: 0
  1466  001EA8  C0AE  F0B7         	movff	sqrt@a,sqrt@z
  1467  001EAC  C0AF  F0B8         	movff	sqrt@a+1,sqrt@z+1
  1468  001EB0  C0B0  F0B9         	movff	sqrt@a+2,sqrt@z+2
  1469                           
  1470                           ; BSR set to: 0
  1471  001EB4  C0AE  F0B1         	movff	sqrt@a,??_sqrt
  1472  001EB8  C0AF  F0B2         	movff	sqrt@a+1,??_sqrt+1
  1473  001EBC  C0B0  F0B3         	movff	sqrt@a+2,??_sqrt+2
  1474  001EC0  1FB1               	comf	??_sqrt& (0+255),f,b
  1475  001EC2  1FB2               	comf	(??_sqrt+1)& (0+255),f,b
  1476  001EC4  1FB3               	comf	(??_sqrt+2)& (0+255),f,b
  1477  001EC6  2BB1               	incf	??_sqrt& (0+255),f,b
  1478  001EC8  0E00               	movlw	0
  1479  001ECA  23B2               	addwfc	(??_sqrt+1)& (0+255),f,b
  1480  001ECC  23B3               	addwfc	(??_sqrt+2)& (0+255),f,b
  1481  001ECE  0EC8               	movlw	200
  1482  001ED0  25B1               	addwf	??_sqrt& (0+255),w,b
  1483  001ED2  6FBE               	movwf	sqrt@x& (0+255),b
  1484  001ED4  0E6E               	movlw	110
  1485  001ED6  21B2               	addwfc	(??_sqrt+1)& (0+255),w,b
  1486  001ED8  6FBF               	movwf	(sqrt@x+1)& (0+255),b
  1487  001EDA  0EBE               	movlw	190
  1488  001EDC  21B3               	addwfc	(??_sqrt+2)& (0+255),w,b
  1489  001EDE  6FC0               	movwf	(sqrt@x+2)& (0+255),b
  1490                           
  1491                           ; BSR set to: 0
  1492  001EE0  90D8               	bcf	status,0,c
  1493  001EE2  33C0               	rrcf	(sqrt@x+2)& (0+255),f,b
  1494  001EE4  33BF               	rrcf	(sqrt@x+1)& (0+255),f,b
  1495  001EE6  33BE               	rrcf	sqrt@x& (0+255),f,b
  1496                           
  1497                           ; BSR set to: 0
  1498  001EE8  0E00               	movlw	0
  1499  001EEA  5FB7               	subwf	sqrt@z& (0+255),f,b
  1500  001EEC  0E80               	movlw	128
  1501  001EEE  5BB8               	subwfb	(sqrt@z+1)& (0+255),f,b
  1502  001EF0  0E00               	movlw	0
  1503  001EF2  5BB9               	subwfb	(sqrt@z+2)& (0+255),f,b
  1504                           
  1505                           ; BSR set to: 0
  1506  001EF4  0E04               	movlw	4
  1507  001EF6  6FBA               	movwf	sqrt@i& (0+255),b
  1508  001EF8                     
  1509                           ; BSR set to: 0
  1510                           
  1511                           ; BSR set to: 0
  1512  001EF8  C0BE  F0B4         	movff	sqrt@x,sqrt@og
  1513  001EFC  C0BF  F0B5         	movff	sqrt@x+1,sqrt@og+1
  1514  001F00  C0C0  F0B6         	movff	sqrt@x+2,sqrt@og+2
  1515                           
  1516                           ; BSR set to: 0
  1517  001F04  C0BE  F074         	movff	sqrt@x,___ftmul@f1
  1518  001F08  C0BF  F075         	movff	sqrt@x+1,___ftmul@f1+1
  1519  001F0C  C0C0  F076         	movff	sqrt@x+2,___ftmul@f1+2
  1520  001F10  C0B7  F077         	movff	sqrt@z,___ftmul@f2
  1521  001F14  C0B8  F078         	movff	sqrt@z+1,___ftmul@f2+1
  1522  001F18  C0B9  F079         	movff	sqrt@z+2,___ftmul@f2+2
  1523  001F1C  ECFF  F013         	call	___ftmul	;wreg free
  1524  001F20  C074  F0BB         	movff	?___ftmul,sqrt@q
  1525  001F24  C075  F0BC         	movff	?___ftmul+1,sqrt@q+1
  1526  001F28  C076  F0BD         	movff	?___ftmul+2,sqrt@q+2
  1527  001F2C  C0BB  F074         	movff	sqrt@q,___ftmul@f1
  1528  001F30  C0BC  F075         	movff	sqrt@q+1,___ftmul@f1+1
  1529  001F34  C0BD  F076         	movff	sqrt@q+2,___ftmul@f1+2
  1530  001F38  C0BE  F077         	movff	sqrt@x,___ftmul@f2
  1531  001F3C  C0BF  F078         	movff	sqrt@x+1,___ftmul@f2+1
  1532  001F40  C0C0  F079         	movff	sqrt@x+2,___ftmul@f2+2
  1533  001F44  ECFF  F013         	call	___ftmul	;wreg free
  1534  001F48  C074  F0BB         	movff	?___ftmul,sqrt@q
  1535  001F4C  C075  F0BC         	movff	?___ftmul+1,sqrt@q+1
  1536  001F50  C076  F0BD         	movff	?___ftmul+2,sqrt@q+2
  1537  001F54  C0BB  F074         	movff	sqrt@q,___ftmul@f1
  1538  001F58  C0BC  F075         	movff	sqrt@q+1,___ftmul@f1+1
  1539  001F5C  C0BD  F076         	movff	sqrt@q+2,___ftmul@f1+2
  1540  001F60  C0BE  F077         	movff	sqrt@x,___ftmul@f2
  1541  001F64  C0BF  F078         	movff	sqrt@x+1,___ftmul@f2+1
  1542  001F68  C0C0  F079         	movff	sqrt@x+2,___ftmul@f2+2
  1543  001F6C  ECFF  F013         	call	___ftmul	;wreg free
  1544  001F70  C074  F0BB         	movff	?___ftmul,sqrt@q
  1545  001F74  C075  F0BC         	movff	?___ftmul+1,sqrt@q+1
  1546  001F78  C076  F0BD         	movff	?___ftmul+2,sqrt@q+2
  1547  001F7C  C0BE  F074         	movff	sqrt@x,___ftmul@f1
  1548  001F80  C0BF  F075         	movff	sqrt@x+1,___ftmul@f1+1
  1549  001F84  C0C0  F076         	movff	sqrt@x+2,___ftmul@f1+2
  1550  001F88  0E00               	movlw	0
  1551  001F8A  0100               	movlb	0	; () banked
  1552  001F8C  6F77               	movwf	___ftmul@f2& (0+255),b
  1553  001F8E  0EC0               	movlw	192
  1554  001F90  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  1555  001F92  0E3F               	movlw	63
  1556  001F94  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  1557  001F96  ECFF  F013         	call	___ftmul	;wreg free
  1558  001F9A  C074  F0BE         	movff	?___ftmul,sqrt@x
  1559  001F9E  C075  F0BF         	movff	?___ftmul+1,sqrt@x+1
  1560  001FA2  C076  F0C0         	movff	?___ftmul+2,sqrt@x+2
  1561  001FA6  C0BE  F099         	movff	sqrt@x,___ftsub@f1
  1562  001FAA  C0BF  F09A         	movff	sqrt@x+1,___ftsub@f1+1
  1563  001FAE  C0C0  F09B         	movff	sqrt@x+2,___ftsub@f1+2
  1564  001FB2  C0BB  F09C         	movff	sqrt@q,___ftsub@f2
  1565  001FB6  C0BC  F09D         	movff	sqrt@q+1,___ftsub@f2+1
  1566  001FBA  C0BD  F09E         	movff	sqrt@q+2,___ftsub@f2+2
  1567  001FBE  EC58  F018         	call	___ftsub	;wreg free
  1568  001FC2  C099  F0BE         	movff	?___ftsub,sqrt@x
  1569  001FC6  C09A  F0BF         	movff	?___ftsub+1,sqrt@x+1
  1570  001FCA  C09B  F0C0         	movff	?___ftsub+2,sqrt@x+2
  1571  001FCE  0100               	movlb	0	; () banked
  1572  001FD0  2FBA               	decfsz	sqrt@i& (0+255),f,b
  1573  001FD2  D792               	goto	l856
  1574                           
  1575                           ; BSR set to: 0
  1576                           
  1577                           ; BSR set to: 0
  1578  001FD4  C0BE  F074         	movff	sqrt@x,___ftmul@f1
  1579  001FD8  C0BF  F075         	movff	sqrt@x+1,___ftmul@f1+1
  1580  001FDC  C0C0  F076         	movff	sqrt@x+2,___ftmul@f1+2
  1581  001FE0  C0AE  F077         	movff	sqrt@a,___ftmul@f2
  1582  001FE4  C0AF  F078         	movff	sqrt@a+1,___ftmul@f2+1
  1583  001FE8  C0B0  F079         	movff	sqrt@a+2,___ftmul@f2+2
  1584  001FEC  ECFF  F013         	call	___ftmul	;wreg free
  1585  001FF0  C074  F0AE         	movff	?___ftmul,?_sqrt
  1586  001FF4  C075  F0AF         	movff	?___ftmul+1,?_sqrt+1
  1587  001FF8  C076  F0B0         	movff	?___ftmul+2,?_sqrt+2
  1588  001FFC  0012               	return	
  1589  001FFE                     __end_of_sqrt:
  1590                           	opt stack 0
  1591                           tblptru	equ	0xFF8
  1592                           postinc0	equ	0xFEE
  1593                           wreg	equ	0xFE8
  1594                           status	equ	0xFD8
  1595                           
  1596 ;; *************** function _sprintf *****************
  1597 ;; Defined at:
  1598 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  1599 ;; Parameters:    Size  Location     Type
  1600 ;;  sp              2   63[BANK0 ] PTR unsigned char 
  1601 ;;		 -> buffer2(20), main@buffer1(16), 
  1602 ;;  f               2   65[BANK0 ] PTR const unsigned char 
  1603 ;;		 -> STR_4(12), STR_3(11), STR_2(11), STR_1(12), 
  1604 ;; Auto vars:     Size  Location     Type
  1605 ;;  val             4   85[BANK0 ] unsigned long 
  1606 ;;  tmpval          4   81[BANK0 ] struct .
  1607 ;;  fval            3   95[BANK0 ] struct .
  1608 ;;  cp              3    0        PTR const unsigned char 
  1609 ;;  prec            2   98[BANK0 ] int 
  1610 ;;  width           2   93[BANK0 ] int 
  1611 ;;  flag            2   91[BANK0 ] unsigned short 
  1612 ;;  exp             2   89[BANK0 ] int 
  1613 ;;  ap              2   79[BANK0 ] PTR void [1]
  1614 ;;		 -> ?_sprintf(2), 
  1615 ;;  len             2    0        unsigned int 
  1616 ;;  c               1  100[BANK0 ] char 
  1617 ;;  d               1    0        unsigned char 
  1618 ;; Return value:  Size  Location     Type
  1619 ;;                  2   63[BANK0 ] int 
  1620 ;; Registers used:
  1621 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1622 ;; Tracked objects:
  1623 ;;		On entry : 0/0
  1624 ;;		On exit  : 0/0
  1625 ;;		Unchanged: 0/0
  1626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1627 ;;      Params:         0       7       0       0       0       0       0       0       0
  1628 ;;      Locals:         0      25       0       0       0       0       0       0       0
  1629 ;;      Temps:          0       6       0       0       0       0       0       0       0
  1630 ;;      Totals:         0      38       0       0       0       0       0       0       0
  1631 ;;Total ram usage:       38 bytes
  1632 ;; Hardware stack levels used:    1
  1633 ;; Hardware stack levels required when called:    6
  1634 ;; This function calls:
  1635 ;;		___awdiv
  1636 ;;		___ftadd
  1637 ;;		___ftge
  1638 ;;		___ftmul
  1639 ;;		___ftneg
  1640 ;;		___ftsub
  1641 ;;		___fttol
  1642 ;;		___lldiv
  1643 ;;		___llmod
  1644 ;;		___lltoft
  1645 ;;		___wmul
  1646 ;;		__div_to_l_
  1647 ;;		__tdiv_to_l_
  1648 ;;		_fround
  1649 ;;		_isdigit
  1650 ;;		_scale
  1651 ;; This function is called by:
  1652 ;;		_main
  1653 ;; This function uses a non-reentrant model
  1654 ;;
  1655                           
  1656                           	psect	text2
  1657  0008A6                     __ptext2:
  1658                           	opt stack 0
  1659  0008A6                     _sprintf:
  1660                           	opt stack 24
  1661                           
  1662                           ;doprnt.c: 494: va_list ap;
  1663                           ;doprnt.c: 499: signed char c;
  1664                           ;doprnt.c: 501: int width;
  1665                           ;doprnt.c: 504: int prec;
  1666                           ;doprnt.c: 508: unsigned short flag;
  1667                           ;doprnt.c: 515: char d;
  1668                           ;doprnt.c: 516: double fval;
  1669                           ;doprnt.c: 517: int exp;
  1670                           ;doprnt.c: 523: union {
  1671                           ;doprnt.c: 524: unsigned long vd;
  1672                           ;doprnt.c: 525: double integ;
  1673                           ;doprnt.c: 526: } tmpval;
  1674                           ;doprnt.c: 528: unsigned long val;
  1675                           ;doprnt.c: 529: unsigned len;
  1676                           ;doprnt.c: 530: const char * cp;
  1677                           ;doprnt.c: 533: *ap = __va_start();
  1678                           
  1679                           ;incstack = 0
  1680  0008A6  0EA3               	movlw	low (?_sprintf+4)
  1681  0008A8  0100               	movlb	0	; () banked
  1682  0008AA  6FAF               	movwf	sprintf@ap& (0+255),b
  1683  0008AC  0E00               	movlw	high (?_sprintf+4)
  1684  0008AE  6FB0               	movwf	(sprintf@ap+1)& (0+255),b
  1685                           
  1686                           ;doprnt.c: 536: while(c = *f++) {
  1687  0008B0  EF7C  F009         	goto	u3520
  1688  0008B4                     
  1689                           ; BSR set to: 0
  1690                           ;doprnt.c: 538: if(c != '%')
  1691                           
  1692                           ; BSR set to: 0
  1693  0008B4  0E25               	movlw	37
  1694  0008B6  19C4               	xorwf	sprintf@c& (0+255),w,b
  1695  0008B8  B4D8               	btfsc	status,2,c
  1696  0008BA  D00A               	goto	l160
  1697                           
  1698                           ; BSR set to: 0
  1699                           ;doprnt.c: 540: {
  1700                           ;doprnt.c: 541: ((*sp++ = (c)));
  1701  0008BC  C09F  FFD9         	movff	sprintf@sp,fsr2l
  1702  0008C0  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  1703  0008C4  C0C4  FFDF         	movff	sprintf@c,indf2
  1704                           
  1705                           ; BSR set to: 0
  1706  0008C8  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  1707  0008CA  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  1708                           
  1709                           ;doprnt.c: 542: continue;
  1710  0008CC  EF7C  F009         	goto	u3520
  1711  0008D0                     l160:
  1712                           
  1713                           ; BSR set to: 0
  1714                           ;doprnt.c: 543: }
  1715                           ;doprnt.c: 546: width = 0;
  1716                           
  1717                           ; BSR set to: 0
  1718  0008D0  0E00               	movlw	0
  1719  0008D2  6FBE               	movwf	(sprintf@width+1)& (0+255),b
  1720  0008D4  0E00               	movlw	0
  1721  0008D6  6FBD               	movwf	sprintf@width& (0+255),b
  1722                           
  1723                           ;doprnt.c: 548: flag = 0;
  1724  0008D8  0E00               	movlw	0
  1725  0008DA  6FBC               	movwf	(sprintf@flag+1)& (0+255),b
  1726  0008DC  0E00               	movlw	0
  1727  0008DE  6FBB               	movwf	sprintf@flag& (0+255),b
  1728                           
  1729                           ; BSR set to: 0
  1730                           ;doprnt.c: 551: switch(*f) {
  1731                           
  1732                           ;doprnt.c: 550: for(;;) {
  1733  0008E0  D004               	goto	l162
  1734  0008E2                     
  1735                           ;doprnt.c: 580: flag |= 0x04;
  1736                           
  1737                           ; BSR set to: 0
  1738  0008E2  0100               	movlb	0	; () banked
  1739  0008E4  85BB               	bsf	sprintf@flag& (0+255),2,b
  1740                           
  1741                           ;doprnt.c: 581: f++;
  1742  0008E6  4BA1               	infsnz	sprintf@f& (0+255),f,b
  1743  0008E8  2BA2               	incf	(sprintf@f+1)& (0+255),f,b
  1744  0008EA                     l162:
  1745                           
  1746                           ; BSR set to: 0
  1747  0008EA  C0A1  FFF6         	movff	sprintf@f,tblptrl
  1748  0008EE  C0A2  FFF7         	movff	sprintf@f+1,tblptrh
  1749  0008F2                     	if	0	;tblptru may be non-zero
  1750  0008F2                     	endif
  1751  0008F2                     	if	0	;tblptru may be non-zero
  1752  0008F2                     	endif
  1753  0008F2  0008               	tblrd		*
  1754  0008F4  50F5               	movf	tablat,w,c
  1755                           
  1756                           ; Switch size 1, requested type "space"
  1757                           ; Number of cases is 1, Range of values is 48 to 48
  1758                           ; switch strategies available:
  1759                           ; Name         Instructions Cycles
  1760                           ; simple_byte            4     3 (average)
  1761                           ;	Chosen strategy is simple_byte
  1762  0008F6  0A30               	xorlw	48	; case 48
  1763  0008F8  B4D8               	btfsc	status,2,c
  1764  0008FA  D7F3               	goto	l163
  1765                           
  1766                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1767                           
  1768                           ;doprnt.c: 586: }
  1769                           
  1770                           ;doprnt.c: 585: break;
  1771  0008FC  C0A1  FFF6         	movff	sprintf@f,tblptrl
  1772  000900  C0A2  FFF7         	movff	sprintf@f+1,tblptrh
  1773  000904                     	if	0	;tblptru may be non-zero
  1774  000904                     	endif
  1775  000904                     	if	0	;tblptru may be non-zero
  1776  000904                     	endif
  1777  000904  0008               	tblrd		*
  1778  000906  50F5               	movf	tablat,w,c
  1779  000908  ECDB  F018         	call	_isdigit
  1780  00090C  A0D8               	btfss	status,0,c
  1781  00090E  D035               	goto	u2990
  1782                           
  1783                           ;doprnt.c: 598: width = 0;
  1784  000910  0E00               	movlw	0
  1785  000912  0100               	movlb	0	; () banked
  1786  000914  6FBE               	movwf	(sprintf@width+1)& (0+255),b
  1787  000916  0E00               	movlw	0
  1788  000918  6FBD               	movwf	sprintf@width& (0+255),b
  1789  00091A                     
  1790                           ;doprnt.c: 600: width *= 10;
  1791                           
  1792                           ; BSR set to: 0
  1793  00091A  C0BD  F06E         	movff	sprintf@width,___wmul@multiplier
  1794  00091E  C0BE  F06F         	movff	sprintf@width+1,___wmul@multiplier+1
  1795  000922  0E00               	movlw	0
  1796  000924  0100               	movlb	0	; () banked
  1797  000926  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1798  000928  0E0A               	movlw	10
  1799  00092A  6F70               	movwf	___wmul@multiplicand& (0+255),b
  1800  00092C  EC8F  F018         	call	___wmul	;wreg free
  1801  000930  C06E  F0BD         	movff	?___wmul,sprintf@width
  1802  000934  C06F  F0BE         	movff	?___wmul+1,sprintf@width+1
  1803                           
  1804                           ;doprnt.c: 601: width += *f++ - '0';
  1805  000938  0ED0               	movlw	208
  1806  00093A  0100               	movlb	0	; () banked
  1807  00093C  6FA6               	movwf	??_sprintf& (0+255),b
  1808  00093E  0EFF               	movlw	255
  1809  000940  6FA7               	movwf	(??_sprintf+1)& (0+255),b
  1810  000942  C0A1  FFF6         	movff	sprintf@f,tblptrl
  1811  000946  C0A2  FFF7         	movff	sprintf@f+1,tblptrh
  1812  00094A                     	if	0	;tblptru may be non-zero
  1813  00094A                     	endif
  1814  00094A                     	if	0	;tblptru may be non-zero
  1815  00094A                     	endif
  1816  00094A  0008               	tblrd		*
  1817  00094C  50F5               	movf	tablat,w,c
  1818  00094E  6FA8               	movwf	(??_sprintf+2)& (0+255),b
  1819  000950  6BA9               	clrf	(??_sprintf+3)& (0+255),b
  1820  000952  51A6               	movf	??_sprintf& (0+255),w,b
  1821  000954  27A8               	addwf	(??_sprintf+2)& (0+255),f,b
  1822  000956  51A7               	movf	(??_sprintf+1)& (0+255),w,b
  1823  000958  23A9               	addwfc	(??_sprintf+3)& (0+255),f,b
  1824  00095A  51A8               	movf	(??_sprintf+2)& (0+255),w,b
  1825  00095C  27BD               	addwf	sprintf@width& (0+255),f,b
  1826  00095E  51A9               	movf	(??_sprintf+3)& (0+255),w,b
  1827  000960  23BE               	addwfc	(sprintf@width+1)& (0+255),f,b
  1828                           
  1829                           ; BSR set to: 0
  1830  000962  4BA1               	infsnz	sprintf@f& (0+255),f,b
  1831  000964  2BA2               	incf	(sprintf@f+1)& (0+255),f,b
  1832                           
  1833                           ; BSR set to: 0
  1834                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1835  000966  C0A1  FFF6         	movff	sprintf@f,tblptrl
  1836  00096A  C0A2  FFF7         	movff	sprintf@f+1,tblptrh
  1837  00096E                     	if	0	;tblptru may be non-zero
  1838  00096E                     	endif
  1839  00096E                     	if	0	;tblptru may be non-zero
  1840  00096E                     	endif
  1841  00096E  0008               	tblrd		*
  1842  000970  50F5               	movf	tablat,w,c
  1843  000972  ECDB  F018         	call	_isdigit
  1844  000976  B0D8               	btfsc	status,0,c
  1845  000978  D7D0               	goto	l168
  1846  00097A                     u2990:
  1847                           
  1848                           ;doprnt.c: 608: }
  1849                           ;doprnt.c: 611: if(*f == '.') {
  1850  00097A  C0A1  FFF6         	movff	sprintf@f,tblptrl
  1851  00097E  C0A2  FFF7         	movff	sprintf@f+1,tblptrh
  1852  000982                     	if	0	;tblptru may be non-zero
  1853  000982                     	endif
  1854  000982                     	if	0	;tblptru may be non-zero
  1855  000982                     	endif
  1856  000982  0008               	tblrd		*
  1857  000984  50F5               	movf	tablat,w,c
  1858  000986  0A2E               	xorlw	46
  1859  000988  A4D8               	btfss	status,2,c
  1860  00098A  D031               	goto	l170
  1861                           
  1862                           ;doprnt.c: 612: flag |= 0x4000;
  1863  00098C  0100               	movlb	0	; () banked
  1864  00098E  8DBC               	bsf	(sprintf@flag+1)& (0+255),6,b
  1865                           
  1866                           ;doprnt.c: 613: f++;
  1867  000990  4BA1               	infsnz	sprintf@f& (0+255),f,b
  1868  000992  2BA2               	incf	(sprintf@f+1)& (0+255),f,b
  1869                           
  1870                           ; BSR set to: 0
  1871                           ;doprnt.c: 620: {
  1872                           ;doprnt.c: 621: prec = 0;
  1873  000994  0E00               	movlw	0
  1874  000996  6FC3               	movwf	(sprintf@prec+1)& (0+255),b
  1875  000998  0E00               	movlw	0
  1876  00099A  6FC2               	movwf	sprintf@prec& (0+255),b
  1877                           
  1878                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1879  00099C  D01D               	goto	l171
  1880  00099E                     
  1881                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1882                           
  1883                           ; BSR set to: 0
  1884  00099E  C0C2  F06E         	movff	sprintf@prec,___wmul@multiplier
  1885  0009A2  C0C3  F06F         	movff	sprintf@prec+1,___wmul@multiplier+1
  1886  0009A6  0E00               	movlw	0
  1887  0009A8  0100               	movlb	0	; () banked
  1888  0009AA  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1889  0009AC  0E0A               	movlw	10
  1890  0009AE  6F70               	movwf	___wmul@multiplicand& (0+255),b
  1891  0009B0  EC8F  F018         	call	___wmul	;wreg free
  1892  0009B4  C0A1  FFF6         	movff	sprintf@f,tblptrl
  1893  0009B8  C0A2  FFF7         	movff	sprintf@f+1,tblptrh
  1894  0009BC                     	if	0	;tblptru may be non-zero
  1895  0009BC                     	endif
  1896  0009BC                     	if	0	;tblptru may be non-zero
  1897  0009BC                     	endif
  1898  0009BC  0008               	tblrd		*
  1899  0009BE  50F5               	movf	tablat,w,c
  1900  0009C0  0100               	movlb	0	; () banked
  1901  0009C2  276E               	addwf	?___wmul& (0+255),f,b
  1902  0009C4  0E00               	movlw	0
  1903  0009C6  236F               	addwfc	(?___wmul+1)& (0+255),f,b
  1904  0009C8  0ED0               	movlw	208
  1905  0009CA  256E               	addwf	?___wmul& (0+255),w,b
  1906  0009CC  6FC2               	movwf	sprintf@prec& (0+255),b
  1907  0009CE  0EFF               	movlw	255
  1908  0009D0  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  1909  0009D2  6FC3               	movwf	(sprintf@prec+1)& (0+255),b
  1910                           
  1911                           ; BSR set to: 0
  1912  0009D4  4BA1               	infsnz	sprintf@f& (0+255),f,b
  1913  0009D6  2BA2               	incf	(sprintf@f+1)& (0+255),f,b
  1914  0009D8                     l171:
  1915                           
  1916                           ; BSR set to: 0
  1917                           
  1918                           ; BSR set to: 0
  1919  0009D8  C0A1  FFF6         	movff	sprintf@f,tblptrl
  1920  0009DC  C0A2  FFF7         	movff	sprintf@f+1,tblptrh
  1921  0009E0                     	if	0	;tblptru may be non-zero
  1922  0009E0                     	endif
  1923  0009E0                     	if	0	;tblptru may be non-zero
  1924  0009E0                     	endif
  1925  0009E0  0008               	tblrd		*
  1926  0009E2  50F5               	movf	tablat,w,c
  1927  0009E4  ECDB  F018         	call	_isdigit
  1928  0009E8  A0D8               	btfss	status,0,c
  1929  0009EA  D00A               	goto	l175
  1930  0009EC  D7D8               	goto	l172
  1931  0009EE                     l170:
  1932                           
  1933                           ;doprnt.c: 626: prec = 0;
  1934  0009EE  0E00               	movlw	0
  1935  0009F0  0100               	movlb	0	; () banked
  1936  0009F2  6FC3               	movwf	(sprintf@prec+1)& (0+255),b
  1937  0009F4  0E00               	movlw	0
  1938  0009F6  6FC2               	movwf	sprintf@prec& (0+255),b
  1939                           
  1940                           ; BSR set to: 0
  1941                           ;doprnt.c: 628: flag |= 0x1000;
  1942  0009F8  89BC               	bsf	(sprintf@flag+1)& (0+255),4,b
  1943                           
  1944                           ; BSR set to: 0
  1945                           ;doprnt.c: 630: }
  1946                           ;doprnt.c: 635: switch(c = *f++) {
  1947  0009FA  D002               	goto	l175
  1948  0009FC                     
  1949                           ; BSR set to: 0
  1950                           ;doprnt.c: 663: flag |= 0x400;
  1951                           
  1952                           ; BSR set to: 0
  1953  0009FC  85BC               	bsf	(sprintf@flag+1)& (0+255),2,b
  1954                           
  1955                           ; BSR set to: 0
  1956                           ;doprnt.c: 698: case 'i':
  1957                           ;doprnt.c: 699: break;
  1958                           
  1959                           ; BSR set to: 0
  1960                           
  1961                           ;doprnt.c: 697: case 'd':
  1962                           
  1963                           ;doprnt.c: 664: break;
  1964  0009FE  D019               	goto	l179
  1965  000A00                     l175:
  1966                           
  1967                           ; BSR set to: 0
  1968  000A00  C0A1  FFF6         	movff	sprintf@f,tblptrl
  1969  000A04  C0A2  FFF7         	movff	sprintf@f+1,tblptrh
  1970  000A08  0100               	movlb	0	; () banked
  1971  000A0A  4BA1               	infsnz	sprintf@f& (0+255),f,b
  1972  000A0C  2BA2               	incf	(sprintf@f+1)& (0+255),f,b
  1973  000A0E                     	if	0	;tblptru may be non-zero
  1974  000A0E                     	endif
  1975  000A0E                     	if	0	;tblptru may be non-zero
  1976  000A0E                     	endif
  1977  000A0E  0008               	tblrd		*
  1978  000A10  CFF5 F0C4          	movff	tablat,sprintf@c
  1979  000A14  51C4               	movf	sprintf@c& (0+255),w,b
  1980                           
  1981                           ; Switch size 1, requested type "space"
  1982                           ; Number of cases is 4, Range of values is 0 to 105
  1983                           ; switch strategies available:
  1984                           ; Name         Instructions Cycles
  1985                           ; simple_byte           13     7 (average)
  1986                           ;	Chosen strategy is simple_byte
  1987  000A16  0A00               	xorlw	0	; case 0
  1988  000A18  B4D8               	btfsc	status,2,c
  1989  000A1A  EF89  F009         	goto	u3530
  1990  000A1E  0A64               	xorlw	100	; case 100
  1991  000A20  B4D8               	btfsc	status,2,c
  1992  000A22  D007               	goto	l179
  1993  000A24  0A02               	xorlw	2	; case 102
  1994  000A26  B4D8               	btfsc	status,2,c
  1995  000A28  D7E9               	goto	l178
  1996  000A2A  0A0F               	xorlw	15	; case 105
  1997  000A2C  A4D8               	btfss	status,2,c
  1998  000A2E  EF7C  F009         	goto	u3520
  1999  000A32                     l179:
  2000                           
  2001                           ; BSR set to: 0
  2002                           ;doprnt.c: 825: if(flag & (0x700)) {
  2003                           
  2004                           ; BSR set to: 0
  2005  000A32  0E07               	movlw	7
  2006  000A34  15BC               	andwf	(sprintf@flag+1)& (0+255),w,b
  2007  000A36  B4D8               	btfsc	status,2,c
  2008  000A38  D329               	goto	l183
  2009                           
  2010                           ; BSR set to: 0
  2011                           ;doprnt.c: 827: if(flag & 0x1000)
  2012  000A3A  A9BC               	btfss	(sprintf@flag+1)& (0+255),4,b
  2013  000A3C  D004               	goto	l184
  2014                           
  2015                           ; BSR set to: 0
  2016                           ;doprnt.c: 829: prec = 6;
  2017  000A3E  0E00               	movlw	0
  2018  000A40  6FC3               	movwf	(sprintf@prec+1)& (0+255),b
  2019  000A42  0E06               	movlw	6
  2020  000A44  6FC2               	movwf	sprintf@prec& (0+255),b
  2021  000A46                     l184:
  2022                           
  2023                           ; BSR set to: 0
  2024                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  2025                           
  2026                           ; BSR set to: 0
  2027  000A46  C0AF  FFD9         	movff	sprintf@ap,fsr2l
  2028  000A4A  C0B0  FFDA         	movff	sprintf@ap+1,fsr2h
  2029  000A4E  CFDE F0BF          	movff	postinc2,sprintf@fval
  2030  000A52  CFDE F0C0          	movff	postinc2,sprintf@fval+1
  2031  000A56  CFDD F0C1          	movff	postdec2,sprintf@fval+2
  2032                           
  2033                           ; BSR set to: 0
  2034  000A5A  0E03               	movlw	3
  2035  000A5C  27AF               	addwf	sprintf@ap& (0+255),f,b
  2036  000A5E  0E00               	movlw	0
  2037  000A60  23B0               	addwfc	(sprintf@ap+1)& (0+255),f,b
  2038                           
  2039                           ; BSR set to: 0
  2040                           ;doprnt.c: 831: if(fval < 0.0) {
  2041  000A62  AFC1               	btfss	(sprintf@fval+2)& (0+255),7,b
  2042  000A64  D011               	goto	l185
  2043                           
  2044                           ; BSR set to: 0
  2045                           ;doprnt.c: 832: fval = -fval;
  2046  000A66  C0BF  F060         	movff	sprintf@fval,___ftneg@f1
  2047  000A6A  C0C0  F061         	movff	sprintf@fval+1,___ftneg@f1+1
  2048  000A6E  C0C1  F062         	movff	sprintf@fval+2,___ftneg@f1+2
  2049  000A72  ECA3  F018         	call	___ftneg	;wreg free
  2050  000A76  C060  F0BF         	movff	?___ftneg,sprintf@fval
  2051  000A7A  C061  F0C0         	movff	?___ftneg+1,sprintf@fval+1
  2052  000A7E  C062  F0C1         	movff	?___ftneg+2,sprintf@fval+2
  2053                           
  2054                           ;doprnt.c: 833: flag |= 0x03;
  2055  000A82  0E03               	movlw	3
  2056  000A84  0100               	movlb	0	; () banked
  2057  000A86  13BB               	iorwf	sprintf@flag& (0+255),f,b
  2058  000A88                     l185:
  2059                           
  2060                           ; BSR set to: 0
  2061                           ;doprnt.c: 834: }
  2062                           ;doprnt.c: 835: exp = 0;
  2063                           
  2064                           ; BSR set to: 0
  2065  000A88  0E00               	movlw	0
  2066  000A8A  6FBA               	movwf	(sprintf@exp+1)& (0+255),b
  2067  000A8C  0E00               	movlw	0
  2068  000A8E  6FB9               	movwf	sprintf@exp& (0+255),b
  2069                           
  2070                           ; BSR set to: 0
  2071                           ;doprnt.c: 836: if( fval!=0) {
  2072  000A90  51BF               	movf	sprintf@fval& (0+255),w,b
  2073  000A92  11C0               	iorwf	(sprintf@fval+1)& (0+255),w,b
  2074  000A94  11C1               	iorwf	(sprintf@fval+2)& (0+255),w,b
  2075  000A96  B4D8               	btfsc	status,2,c
  2076  000A98  D088               	goto	l190
  2077                           
  2078                           ; BSR set to: 0
  2079                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  2080  000A9A  0E82               	movlw	130
  2081  000A9C  6FA6               	movwf	??_sprintf& (0+255),b
  2082  000A9E  0EFF               	movlw	255
  2083  000AA0  6FA7               	movwf	(??_sprintf+1)& (0+255),b
  2084  000AA2  C0BF  F0A8         	movff	sprintf@fval,??_sprintf+2
  2085  000AA6  C0C0  F0A9         	movff	sprintf@fval+1,??_sprintf+3
  2086  000AAA  C0C1  F0AA         	movff	sprintf@fval+2,??_sprintf+4
  2087  000AAE  C0C2  F0AB         	movff	sprintf@fval+3,??_sprintf+5
  2088  000AB2  0E10               	movlw	16
  2089  000AB4  D005               	goto	u3060
  2090  000AB6                     u3065:
  2091  000AB6  90D8               	bcf	status,0,c
  2092  000AB8  33AB               	rrcf	(??_sprintf+5)& (0+255),f,b
  2093  000ABA  33AA               	rrcf	(??_sprintf+4)& (0+255),f,b
  2094  000ABC  33A9               	rrcf	(??_sprintf+3)& (0+255),f,b
  2095  000ABE  33A8               	rrcf	(??_sprintf+2)& (0+255),f,b
  2096  000AC0                     u3060:
  2097  000AC0  2EE8               	decfsz	wreg,f,c
  2098  000AC2  D7F9               	goto	u3065
  2099  000AC4  51A8               	movf	(??_sprintf+2)& (0+255),w,b
  2100  000AC6  25A6               	addwf	??_sprintf& (0+255),w,b
  2101  000AC8  6FB9               	movwf	sprintf@exp& (0+255),b
  2102  000ACA  0E00               	movlw	0
  2103  000ACC  21A7               	addwfc	(??_sprintf+1)& (0+255),w,b
  2104  000ACE  6FBA               	movwf	(sprintf@exp+1)& (0+255),b
  2105                           
  2106                           ; BSR set to: 0
  2107                           ;doprnt.c: 838: exp--;
  2108  000AD0  07B9               	decf	sprintf@exp& (0+255),f,b
  2109  000AD2  A0D8               	btfss	status,0,c
  2110  000AD4  07BA               	decf	(sprintf@exp+1)& (0+255),f,b
  2111                           
  2112                           ; BSR set to: 0
  2113                           ;doprnt.c: 839: exp *= 3;
  2114  000AD6  C0B9  F06E         	movff	sprintf@exp,___wmul@multiplier
  2115  000ADA  C0BA  F06F         	movff	sprintf@exp+1,___wmul@multiplier+1
  2116  000ADE  0E00               	movlw	0
  2117  000AE0  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2118  000AE2  0E03               	movlw	3
  2119  000AE4  6F70               	movwf	___wmul@multiplicand& (0+255),b
  2120  000AE6  EC8F  F018         	call	___wmul	;wreg free
  2121  000AEA  C06E  F0B9         	movff	?___wmul,sprintf@exp
  2122  000AEE  C06F  F0BA         	movff	?___wmul+1,sprintf@exp+1
  2123                           
  2124                           ;doprnt.c: 840: exp /= 10;
  2125  000AF2  C0B9  F066         	movff	sprintf@exp,___awdiv@dividend
  2126  000AF6  C0BA  F067         	movff	sprintf@exp+1,___awdiv@dividend+1
  2127  000AFA  0E00               	movlw	0
  2128  000AFC  0100               	movlb	0	; () banked
  2129  000AFE  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  2130  000B00  0E0A               	movlw	10
  2131  000B02  6F68               	movwf	___awdiv@divisor& (0+255),b
  2132  000B04  ECD3  F016         	call	___awdiv	;wreg free
  2133  000B08  C066  F0B9         	movff	?___awdiv,sprintf@exp
  2134  000B0C  C067  F0BA         	movff	?___awdiv+1,sprintf@exp+1
  2135                           
  2136                           ;doprnt.c: 841: if(exp < 0)
  2137  000B10  0100               	movlb	0	; () banked
  2138  000B12  AFBA               	btfss	(sprintf@exp+1)& (0+255),7,b
  2139  000B14  D003               	goto	l187
  2140                           
  2141                           ; BSR set to: 0
  2142                           ;doprnt.c: 842: exp--;
  2143  000B16  07B9               	decf	sprintf@exp& (0+255),f,b
  2144  000B18  A0D8               	btfss	status,0,c
  2145  000B1A  07BA               	decf	(sprintf@exp+1)& (0+255),f,b
  2146  000B1C                     l187:
  2147                           
  2148                           ; BSR set to: 0
  2149                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  2150                           
  2151                           ; BSR set to: 0
  2152  000B1C  51B9               	movf	sprintf@exp& (0+255),w,b
  2153  000B1E  0800               	sublw	0
  2154  000B20  EC90  F009         	call	_scale
  2155  000B24  C083  F0B1         	movff	?_scale,sprintf@tmpval
  2156  000B28  C084  F0B2         	movff	?_scale+1,sprintf@tmpval+1
  2157  000B2C  C085  F0B3         	movff	?_scale+2,sprintf@tmpval+2
  2158                           
  2159                           ;doprnt.c: 847: tmpval.integ *= fval;
  2160  000B30  C0B1  F074         	movff	sprintf@tmpval,___ftmul@f1
  2161  000B34  C0B2  F075         	movff	sprintf@tmpval+1,___ftmul@f1+1
  2162  000B38  C0B3  F076         	movff	sprintf@tmpval+2,___ftmul@f1+2
  2163  000B3C  C0BF  F077         	movff	sprintf@fval,___ftmul@f2
  2164  000B40  C0C0  F078         	movff	sprintf@fval+1,___ftmul@f2+1
  2165  000B44  C0C1  F079         	movff	sprintf@fval+2,___ftmul@f2+2
  2166  000B48  ECFF  F013         	call	___ftmul	;wreg free
  2167  000B4C  C074  F0B1         	movff	?___ftmul,sprintf@tmpval
  2168  000B50  C075  F0B2         	movff	?___ftmul+1,sprintf@tmpval+1
  2169  000B54  C076  F0B3         	movff	?___ftmul+2,sprintf@tmpval+2
  2170                           
  2171                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  2172  000B58  C0B1  F060         	movff	sprintf@tmpval,___ftge@ff1
  2173  000B5C  C0B2  F061         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2174  000B60  C0B3  F062         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2175  000B64  0E00               	movlw	0
  2176  000B66  0100               	movlb	0	; () banked
  2177  000B68  6F63               	movwf	___ftge@ff2& (0+255),b
  2178  000B6A  0E80               	movlw	128
  2179  000B6C  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  2180  000B6E  0E3F               	movlw	63
  2181  000B70  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  2182  000B72  EC8A  F016         	call	___ftge	;wreg free
  2183  000B76  0100               	movlb	0	; () banked
  2184  000B78  B0D8               	btfsc	status,0,c
  2185  000B7A  D004               	goto	l188
  2186                           
  2187                           ; BSR set to: 0
  2188                           ;doprnt.c: 849: exp--;
  2189  000B7C  07B9               	decf	sprintf@exp& (0+255),f,b
  2190  000B7E  A0D8               	btfss	status,0,c
  2191  000B80  07BA               	decf	(sprintf@exp+1)& (0+255),f,b
  2192  000B82  D013               	goto	l190
  2193  000B84                     l188:
  2194                           
  2195                           ; BSR set to: 0
  2196                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  2197                           
  2198                           ; BSR set to: 0
  2199  000B84  C0B1  F060         	movff	sprintf@tmpval,___ftge@ff1
  2200  000B88  C0B2  F061         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2201  000B8C  C0B3  F062         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2202  000B90  0E00               	movlw	0
  2203  000B92  6F63               	movwf	___ftge@ff2& (0+255),b
  2204  000B94  0E20               	movlw	32
  2205  000B96  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  2206  000B98  0E41               	movlw	65
  2207  000B9A  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  2208  000B9C  EC8A  F016         	call	___ftge	;wreg free
  2209  000BA0  0100               	movlb	0	; () banked
  2210  000BA2  A0D8               	btfss	status,0,c
  2211  000BA4  D002               	goto	l190
  2212                           
  2213                           ; BSR set to: 0
  2214                           ;doprnt.c: 851: exp++;
  2215  000BA6  4BB9               	infsnz	sprintf@exp& (0+255),f,b
  2216  000BA8  2BBA               	incf	(sprintf@exp+1)& (0+255),f,b
  2217  000BAA                     l190:
  2218                           
  2219                           ; BSR set to: 0
  2220                           ;doprnt.c: 852: }
  2221                           ;doprnt.c: 1112: if(prec <= 12)
  2222                           
  2223                           ; BSR set to: 0
  2224                           
  2225                           ; BSR set to: 0
  2226                           
  2227                           ; BSR set to: 0
  2228  000BAA  BFC3               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2229  000BAC  D006               	goto	u3100
  2230  000BAE  51C3               	movf	(sprintf@prec+1)& (0+255),w,b
  2231  000BB0  E11B               	bnz	l3150
  2232  000BB2  0E0D               	movlw	13
  2233  000BB4  5DC2               	subwf	sprintf@prec& (0+255),w,b
  2234  000BB6  B0D8               	btfsc	status,0,c
  2235  000BB8  D017               	goto	l191
  2236  000BBA                     u3100:
  2237                           
  2238                           ; BSR set to: 0
  2239                           ;doprnt.c: 1113: fval += fround(prec);
  2240  000BBA  C0BF  F08D         	movff	sprintf@fval,___ftadd@f1
  2241  000BBE  C0C0  F08E         	movff	sprintf@fval+1,___ftadd@f1+1
  2242  000BC2  C0C1  F08F         	movff	sprintf@fval+2,___ftadd@f1+2
  2243  000BC6  51C2               	movf	sprintf@prec& (0+255),w,b
  2244  000BC8  EC26  F00D         	call	_fround
  2245  000BCC  C083  F090         	movff	?_fround,___ftadd@f2
  2246  000BD0  C084  F091         	movff	?_fround+1,___ftadd@f2+1
  2247  000BD4  C085  F092         	movff	?_fround+2,___ftadd@f2+2
  2248  000BD8  EC5E  F00E         	call	___ftadd	;wreg free
  2249  000BDC  C08D  F0BF         	movff	?___ftadd,sprintf@fval
  2250  000BE0  C08E  F0C0         	movff	?___ftadd+1,sprintf@fval+1
  2251  000BE4  C08F  F0C1         	movff	?___ftadd+2,sprintf@fval+2
  2252  000BE8                     l191:
  2253  000BE8                     l3150:
  2254                           
  2255                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2256  000BE8  0100               	movlb	0	; () banked
  2257  000BEA  BFBA               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2258  000BEC  D006               	goto	u3110
  2259  000BEE  51BA               	movf	(sprintf@exp+1)& (0+255),w,b
  2260  000BF0  E11F               	bnz	l3158
  2261  000BF2  0E0A               	movlw	10
  2262  000BF4  5DB9               	subwf	sprintf@exp& (0+255),w,b
  2263  000BF6  B0D8               	btfsc	status,0,c
  2264  000BF8  D01B               	goto	u3140
  2265  000BFA                     u3110:
  2266                           
  2267                           ; BSR set to: 0
  2268  000BFA  51BF               	movf	sprintf@fval& (0+255),w,b
  2269  000BFC  11C0               	iorwf	(sprintf@fval+1)& (0+255),w,b
  2270  000BFE  11C1               	iorwf	(sprintf@fval+2)& (0+255),w,b
  2271  000C00  B4D8               	btfsc	status,2,c
  2272  000C02  D054               	goto	l192
  2273                           
  2274                           ; BSR set to: 0
  2275  000C04  C0BF  F08A         	movff	sprintf@fval,___fttol@f1
  2276  000C08  C0C0  F08B         	movff	sprintf@fval+1,___fttol@f1+1
  2277  000C0C  C0C1  F08C         	movff	sprintf@fval+2,___fttol@f1+2
  2278  000C10  EC83  F013         	call	___fttol	;wreg free
  2279  000C14  0100               	movlb	0	; () banked
  2280  000C16  518A               	movf	?___fttol& (0+255),w,b
  2281  000C18  118B               	iorwf	(?___fttol+1)& (0+255),w,b
  2282  000C1A  118C               	iorwf	(?___fttol+2)& (0+255),w,b
  2283  000C1C  118D               	iorwf	(?___fttol+3)& (0+255),w,b
  2284  000C1E  B4D8               	btfsc	status,2,c
  2285                           
  2286                           ; BSR set to: 0
  2287  000C20  BFBA               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2288  000C22  D044               	goto	l192
  2289  000C24  51BA               	movf	(sprintf@exp+1)& (0+255),w,b
  2290  000C26  E104               	bnz	l3158
  2291  000C28  0E02               	movlw	2
  2292  000C2A  5DB9               	subwf	sprintf@exp& (0+255),w,b
  2293  000C2C  A0D8               	btfss	status,0,c
  2294  000C2E  D03E               	goto	l192
  2295  000C30                     u3140:
  2296  000C30                     l3158:
  2297                           
  2298                           ; BSR set to: 0
  2299                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2300  000C30  C0B1  F060         	movff	sprintf@tmpval,___ftge@ff1
  2301  000C34  C0B2  F061         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2302  000C38  C0B3  F062         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2303  000C3C  0E70               	movlw	112
  2304  000C3E  6F63               	movwf	___ftge@ff2& (0+255),b
  2305  000C40  0E89               	movlw	137
  2306  000C42  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  2307  000C44  0E40               	movlw	64
  2308  000C46  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  2309  000C48  EC8A  F016         	call	___ftge	;wreg free
  2310  000C4C  0100               	movlb	0	; () banked
  2311  000C4E  B0D8               	btfsc	status,0,c
  2312  000C50  D002               	goto	l195
  2313                           
  2314                           ; BSR set to: 0
  2315                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2316  000C52  0EF7               	movlw	247
  2317  000C54  D001               	goto	L1
  2318  000C56                     l195:
  2319                           
  2320                           ; BSR set to: 0
  2321                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2322                           
  2323                           ; BSR set to: 0
  2324  000C56  0EF8               	movlw	248
  2325  000C58                     L1:
  2326  000C58  27B9               	addwf	sprintf@exp& (0+255),f,b
  2327  000C5A  0EFF               	movlw	255
  2328  000C5C  23BA               	addwfc	(sprintf@exp+1)& (0+255),f,b
  2329                           
  2330                           ; BSR set to: 0
  2331                           ;doprnt.c: 1124: }
  2332                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  2333                           
  2334                           ; BSR set to: 0
  2335  000C5E  51B9               	movf	sprintf@exp& (0+255),w,b
  2336  000C60  EC90  F009         	call	_scale
  2337  000C64  C083  F0B1         	movff	?_scale,sprintf@tmpval
  2338  000C68  C084  F0B2         	movff	?_scale+1,sprintf@tmpval+1
  2339  000C6C  C085  F0B3         	movff	?_scale+2,sprintf@tmpval+2
  2340                           
  2341                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2342  000C70  C0BF  F060         	movff	sprintf@fval,__tdiv_to_l_@f1
  2343  000C74  C0C0  F061         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  2344  000C78  C0C1  F062         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  2345  000C7C  C0B1  F063         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  2346  000C80  C0B2  F064         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  2347  000C84  C0B3  F065         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  2348  000C88  EC9F  F010         	call	__tdiv_to_l_	;wreg free
  2349  000C8C  C060  F0B5         	movff	?__tdiv_to_l_,sprintf@val
  2350  000C90  C061  F0B6         	movff	?__tdiv_to_l_+1,sprintf@val+1
  2351  000C94  C062  F0B7         	movff	?__tdiv_to_l_+2,sprintf@val+2
  2352  000C98  C063  F0B8         	movff	?__tdiv_to_l_+3,sprintf@val+3
  2353                           
  2354                           ;doprnt.c: 1129: fval = 0.0;
  2355  000C9C  0E00               	movlw	0
  2356  000C9E  0100               	movlb	0	; () banked
  2357  000CA0  6FBF               	movwf	sprintf@fval& (0+255),b
  2358  000CA2  0E00               	movlw	0
  2359  000CA4  6FC0               	movwf	(sprintf@fval+1)& (0+255),b
  2360  000CA6  0E00               	movlw	0
  2361  000CA8  6FC1               	movwf	(sprintf@fval+2)& (0+255),b
  2362                           
  2363                           ;doprnt.c: 1130: } else {
  2364  000CAA  D033               	goto	l201
  2365  000CAC                     l192:
  2366                           
  2367                           ; BSR set to: 0
  2368                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2369                           
  2370                           ; BSR set to: 0
  2371  000CAC  C0BF  F08A         	movff	sprintf@fval,___fttol@f1
  2372  000CB0  C0C0  F08B         	movff	sprintf@fval+1,___fttol@f1+1
  2373  000CB4  C0C1  F08C         	movff	sprintf@fval+2,___fttol@f1+2
  2374  000CB8  EC83  F013         	call	___fttol	;wreg free
  2375  000CBC  C08A  F0B5         	movff	?___fttol,sprintf@val
  2376  000CC0  C08B  F0B6         	movff	?___fttol+1,sprintf@val+1
  2377  000CC4  C08C  F0B7         	movff	?___fttol+2,sprintf@val+2
  2378  000CC8  C08D  F0B8         	movff	?___fttol+3,sprintf@val+3
  2379                           
  2380                           ;doprnt.c: 1132: fval -= (double)val;
  2381  000CCC  C0BF  F099         	movff	sprintf@fval,___ftsub@f1
  2382  000CD0  C0C0  F09A         	movff	sprintf@fval+1,___ftsub@f1+1
  2383  000CD4  C0C1  F09B         	movff	sprintf@fval+2,___ftsub@f1+2
  2384  000CD8  C0B5  F068         	movff	sprintf@val,___lltoft@c
  2385  000CDC  C0B6  F069         	movff	sprintf@val+1,___lltoft@c+1
  2386  000CE0  C0B7  F06A         	movff	sprintf@val+2,___lltoft@c+2
  2387  000CE4  C0B8  F06B         	movff	sprintf@val+3,___lltoft@c+3
  2388  000CE8  ECFA  F017         	call	___lltoft	;wreg free
  2389  000CEC  C068  F09C         	movff	?___lltoft,___ftsub@f2
  2390  000CF0  C069  F09D         	movff	?___lltoft+1,___ftsub@f2+1
  2391  000CF4  C06A  F09E         	movff	?___lltoft+2,___ftsub@f2+2
  2392  000CF8  EC58  F018         	call	___ftsub	;wreg free
  2393  000CFC  C099  F0BF         	movff	?___ftsub,sprintf@fval
  2394  000D00  C09A  F0C0         	movff	?___ftsub+1,sprintf@fval+1
  2395  000D04  C09B  F0C1         	movff	?___ftsub+2,sprintf@fval+2
  2396                           
  2397                           ;doprnt.c: 1133: exp = 0;
  2398  000D08  0E00               	movlw	0
  2399  000D0A  0100               	movlb	0	; () banked
  2400  000D0C  6FBA               	movwf	(sprintf@exp+1)& (0+255),b
  2401  000D0E  0E00               	movlw	0
  2402  000D10  6FB9               	movwf	sprintf@exp& (0+255),b
  2403  000D12                     l201:
  2404                           
  2405                           ; BSR set to: 0
  2406                           ;doprnt.c: 1134: }
  2407                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2408                           
  2409                           ; BSR set to: 0
  2410  000D12  0E01               	movlw	1
  2411  000D14  6FC4               	movwf	sprintf@c& (0+255),b
  2412  000D16                     l3178:
  2413                           
  2414                           ; BSR set to: 0
  2415  000D16  0E0A               	movlw	10
  2416  000D18  19C4               	xorwf	sprintf@c& (0+255),w,b
  2417  000D1A  B4D8               	btfsc	status,2,c
  2418  000D1C  D018               	goto	u3180
  2419                           
  2420                           ; BSR set to: 0
  2421                           ;doprnt.c: 1137: if(val < dpowers[c])
  2422                           
  2423                           ; BSR set to: 0
  2424                           
  2425                           ; BSR set to: 0
  2426  000D1E  51C4               	movf	sprintf@c& (0+255),w,b
  2427  000D20  0D04               	mullw	4
  2428  000D22  0E01               	movlw	low _dpowers
  2429  000D24  24F3               	addwf	prodl,w,c
  2430  000D26  6EF6               	movwf	tblptrl,c
  2431  000D28  0E08               	movlw	high _dpowers
  2432  000D2A  20F4               	addwfc	prodh,w,c
  2433  000D2C  6EF7               	movwf	tblptrh,c
  2434  000D2E                     	if	0	;There are less than 3 active tblptr bytes
  2435  000D2E                     	endif
  2436  000D2E  0009               	tblrd		*+
  2437  000D30  50F5               	movf	tablat,w,c
  2438  000D32  5DB5               	subwf	sprintf@val& (0+255),w,b
  2439  000D34  0009               	tblrd		*+
  2440  000D36  50F5               	movf	tablat,w,c
  2441  000D38  59B6               	subwfb	(sprintf@val+1)& (0+255),w,b
  2442  000D3A  0009               	tblrd		*+
  2443  000D3C  50F5               	movf	tablat,w,c
  2444  000D3E  59B7               	subwfb	(sprintf@val+2)& (0+255),w,b
  2445  000D40  0009               	tblrd		*+
  2446  000D42  50F5               	movf	tablat,w,c
  2447  000D44  59B8               	subwfb	(sprintf@val+3)& (0+255),w,b
  2448  000D46  A0D8               	btfss	status,0,c
  2449  000D48  D002               	goto	u3180
  2450                           
  2451                           ; BSR set to: 0
  2452                           
  2453                           ; BSR set to: 0
  2454                           
  2455                           ; BSR set to: 0
  2456                           ;doprnt.c: 1138: break;
  2457  000D4A  2BC4               	incf	sprintf@c& (0+255),f,b
  2458  000D4C  D7E4               	goto	l3178
  2459  000D4E                     u3180:
  2460                           
  2461                           ; BSR set to: 0
  2462                           ;doprnt.c: 1142: width -= prec + c + exp;
  2463                           
  2464                           ; BSR set to: 0
  2465  000D4E  C0C4  F0A6         	movff	sprintf@c,??_sprintf
  2466  000D52  6BA7               	clrf	(??_sprintf+1)& (0+255),b
  2467  000D54  BFA6               	btfsc	??_sprintf& (0+255),7,b
  2468  000D56  07A7               	decf	(??_sprintf+1)& (0+255),f,b
  2469  000D58  51C2               	movf	sprintf@prec& (0+255),w,b
  2470  000D5A  27A6               	addwf	??_sprintf& (0+255),f,b
  2471  000D5C  51C3               	movf	(sprintf@prec+1)& (0+255),w,b
  2472  000D5E  23A7               	addwfc	(??_sprintf+1)& (0+255),f,b
  2473  000D60  51B9               	movf	sprintf@exp& (0+255),w,b
  2474  000D62  27A6               	addwf	??_sprintf& (0+255),f,b
  2475  000D64  51BA               	movf	(sprintf@exp+1)& (0+255),w,b
  2476  000D66  23A7               	addwfc	(??_sprintf+1)& (0+255),f,b
  2477  000D68  51A6               	movf	??_sprintf& (0+255),w,b
  2478  000D6A  5FBD               	subwf	sprintf@width& (0+255),f,b
  2479  000D6C  51A7               	movf	(??_sprintf+1)& (0+255),w,b
  2480  000D6E  5BBE               	subwfb	(sprintf@width+1)& (0+255),f,b
  2481                           
  2482                           ;doprnt.c: 1143: if(
  2483                           ;doprnt.c: 1147: prec)
  2484  000D70  51C2               	movf	sprintf@prec& (0+255),w,b
  2485  000D72  11C3               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2486  000D74  B4D8               	btfsc	status,2,c
  2487  000D76  D003               	goto	l205
  2488                           
  2489                           ; BSR set to: 0
  2490                           ;doprnt.c: 1148: width--;
  2491  000D78  07BD               	decf	sprintf@width& (0+255),f,b
  2492  000D7A  A0D8               	btfss	status,0,c
  2493  000D7C  07BE               	decf	(sprintf@width+1)& (0+255),f,b
  2494  000D7E                     l205:
  2495                           
  2496                           ; BSR set to: 0
  2497                           ;doprnt.c: 1149: if(flag & 0x03)
  2498                           
  2499                           ; BSR set to: 0
  2500  000D7E  0E03               	movlw	3
  2501  000D80  15BB               	andwf	sprintf@flag& (0+255),w,b
  2502  000D82  6FA6               	movwf	??_sprintf& (0+255),b
  2503  000D84  0E00               	movlw	0
  2504  000D86  15BC               	andwf	(sprintf@flag+1)& (0+255),w,b
  2505  000D88  6FA7               	movwf	(??_sprintf+1)& (0+255),b
  2506  000D8A  51A6               	movf	??_sprintf& (0+255),w,b
  2507  000D8C  11A7               	iorwf	(??_sprintf+1)& (0+255),w,b
  2508  000D8E  B4D8               	btfsc	status,2,c
  2509  000D90  D003               	goto	l206
  2510                           
  2511                           ; BSR set to: 0
  2512                           ;doprnt.c: 1150: width--;
  2513  000D92  07BD               	decf	sprintf@width& (0+255),f,b
  2514  000D94  A0D8               	btfss	status,0,c
  2515  000D96  07BE               	decf	(sprintf@width+1)& (0+255),f,b
  2516  000D98                     l206:
  2517                           
  2518                           ; BSR set to: 0
  2519                           ;doprnt.c: 1153: if(flag & 0x04) {
  2520                           
  2521                           ; BSR set to: 0
  2522  000D98  A5BB               	btfss	sprintf@flag& (0+255),2,b
  2523  000D9A  D031               	goto	l213
  2524                           
  2525                           ; BSR set to: 0
  2526                           ;doprnt.c: 1157: if(flag & 0x03)
  2527  000D9C  0E03               	movlw	3
  2528  000D9E  15BB               	andwf	sprintf@flag& (0+255),w,b
  2529  000DA0  6FA6               	movwf	??_sprintf& (0+255),b
  2530  000DA2  0E00               	movlw	0
  2531  000DA4  15BC               	andwf	(sprintf@flag+1)& (0+255),w,b
  2532  000DA6  6FA7               	movwf	(??_sprintf+1)& (0+255),b
  2533  000DA8  51A6               	movf	??_sprintf& (0+255),w,b
  2534  000DAA  11A7               	iorwf	(??_sprintf+1)& (0+255),w,b
  2535  000DAC  B4D8               	btfsc	status,2,c
  2536  000DAE  D014               	goto	l209
  2537                           
  2538                           ; BSR set to: 0
  2539                           ;doprnt.c: 1159: ((*sp++ = ('-')));
  2540  000DB0  C09F  FFD9         	movff	sprintf@sp,fsr2l
  2541  000DB4  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  2542  000DB8  0E2D               	movlw	45
  2543  000DBA  6EDF               	movwf	indf2,c
  2544                           
  2545                           ; BSR set to: 0
  2546  000DBC  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  2547  000DBE  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  2548                           
  2549                           ; BSR set to: 0
  2550                           ;doprnt.c: 1168: while(width > 0) {
  2551  000DC0  D00B               	goto	l209
  2552  000DC2                     l3206:
  2553                           
  2554                           ; BSR set to: 0
  2555                           ;doprnt.c: 1169: ((*sp++ = ('0')));
  2556  000DC2  C09F  FFD9         	movff	sprintf@sp,fsr2l
  2557  000DC6  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  2558  000DCA  0E30               	movlw	48
  2559  000DCC  6EDF               	movwf	indf2,c
  2560                           
  2561                           ; BSR set to: 0
  2562  000DCE  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  2563  000DD0  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  2564                           
  2565                           ; BSR set to: 0
  2566                           ;doprnt.c: 1170: width--;
  2567  000DD2  07BD               	decf	sprintf@width& (0+255),f,b
  2568  000DD4  A0D8               	btfss	status,0,c
  2569  000DD6  07BE               	decf	(sprintf@width+1)& (0+255),f,b
  2570  000DD8                     l209:
  2571                           
  2572                           ; BSR set to: 0
  2573                           
  2574                           ; BSR set to: 0
  2575  000DD8  BFBE               	btfsc	(sprintf@width+1)& (0+255),7,b
  2576  000DDA  D073               	goto	l217
  2577  000DDC  51BE               	movf	(sprintf@width+1)& (0+255),w,b
  2578  000DDE  E1F1               	bnz	l3206
  2579  000DE0  05BD               	decf	sprintf@width& (0+255),w,b
  2580  000DE2  A0D8               	btfss	status,0,c
  2581  000DE4  D06E               	goto	l217
  2582  000DE6  D7ED               	goto	l210
  2583  000DE8                     l3214:
  2584                           
  2585                           ; BSR set to: 0
  2586                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  2587  000DE8  C09F  FFD9         	movff	sprintf@sp,fsr2l
  2588  000DEC  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  2589  000DF0  0E20               	movlw	32
  2590  000DF2  6EDF               	movwf	indf2,c
  2591                           
  2592                           ; BSR set to: 0
  2593  000DF4  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  2594  000DF6  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  2595                           
  2596                           ; BSR set to: 0
  2597                           ;doprnt.c: 1182: width--;
  2598  000DF8  07BD               	decf	sprintf@width& (0+255),f,b
  2599  000DFA  A0D8               	btfss	status,0,c
  2600  000DFC  07BE               	decf	(sprintf@width+1)& (0+255),f,b
  2601  000DFE                     l213:
  2602                           
  2603                           ; BSR set to: 0
  2604                           
  2605                           ; BSR set to: 0
  2606  000DFE  BFBE               	btfsc	(sprintf@width+1)& (0+255),7,b
  2607  000E00  D005               	goto	u3240
  2608  000E02  51BE               	movf	(sprintf@width+1)& (0+255),w,b
  2609  000E04  E1F1               	bnz	l3214
  2610  000E06  05BD               	decf	sprintf@width& (0+255),w,b
  2611  000E08  B0D8               	btfsc	status,0,c
  2612  000E0A  D7EE               	goto	l214
  2613  000E0C                     u3240:
  2614                           
  2615                           ; BSR set to: 0
  2616                           ;doprnt.c: 1183: }
  2617                           ;doprnt.c: 1188: if(flag & 0x03)
  2618                           
  2619                           ; BSR set to: 0
  2620  000E0C  0E03               	movlw	3
  2621  000E0E  15BB               	andwf	sprintf@flag& (0+255),w,b
  2622  000E10  6FA6               	movwf	??_sprintf& (0+255),b
  2623  000E12  0E00               	movlw	0
  2624  000E14  15BC               	andwf	(sprintf@flag+1)& (0+255),w,b
  2625  000E16  6FA7               	movwf	(??_sprintf+1)& (0+255),b
  2626  000E18  51A6               	movf	??_sprintf& (0+255),w,b
  2627  000E1A  11A7               	iorwf	(??_sprintf+1)& (0+255),w,b
  2628  000E1C  B4D8               	btfsc	status,2,c
  2629  000E1E  D051               	goto	l217
  2630                           
  2631                           ; BSR set to: 0
  2632                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  2633  000E20  C09F  FFD9         	movff	sprintf@sp,fsr2l
  2634  000E24  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  2635  000E28  0E2D               	movlw	45
  2636  000E2A  D048               	goto	L2
  2637  000E2C                     
  2638                           ; BSR set to: 0
  2639                           ;doprnt.c: 1200: {
  2640                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2641                           
  2642                           ; BSR set to: 0
  2643  000E2C  C0B5  F060         	movff	sprintf@val,___lldiv@dividend
  2644  000E30  C0B6  F061         	movff	sprintf@val+1,___lldiv@dividend+1
  2645  000E34  C0B7  F062         	movff	sprintf@val+2,___lldiv@dividend+2
  2646  000E38  C0B8  F063         	movff	sprintf@val+3,___lldiv@dividend+3
  2647  000E3C  51C4               	movf	sprintf@c& (0+255),w,b
  2648  000E3E  0D04               	mullw	4
  2649  000E40  0E01               	movlw	low _dpowers
  2650  000E42  24F3               	addwf	prodl,w,c
  2651  000E44  6EF6               	movwf	tblptrl,c
  2652  000E46  0E08               	movlw	high _dpowers
  2653  000E48  20F4               	addwfc	prodh,w,c
  2654  000E4A  6EF7               	movwf	tblptrh,c
  2655  000E4C                     	if	0	;There are less than 3 active tblptr bytes
  2656  000E4C                     	endif
  2657  000E4C  0009               	tblrd		*+
  2658  000E4E  CFF5 F064          	movff	tablat,___lldiv@divisor
  2659  000E52  0009               	tblrd		*+
  2660  000E54  CFF5 F065          	movff	tablat,___lldiv@divisor+1
  2661  000E58  0009               	tblrd		*+
  2662  000E5A  CFF5 F066          	movff	tablat,___lldiv@divisor+2
  2663  000E5E  000A               	tblrd		*-
  2664  000E60  CFF5 F067          	movff	tablat,___lldiv@divisor+3
  2665  000E64  EC16  F017         	call	___lldiv	;wreg free
  2666  000E68  C060  F0B1         	movff	?___lldiv,sprintf@tmpval
  2667  000E6C  C061  F0B2         	movff	?___lldiv+1,sprintf@tmpval+1
  2668  000E70  C062  F0B3         	movff	?___lldiv+2,sprintf@tmpval+2
  2669  000E74  C063  F0B4         	movff	?___lldiv+3,sprintf@tmpval+3
  2670                           
  2671                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2672  000E78  C0B1  F06D         	movff	sprintf@tmpval,___llmod@dividend
  2673  000E7C  C0B2  F06E         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2674  000E80  C0B3  F06F         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2675  000E84  C0B4  F070         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2676  000E88  0E0A               	movlw	10
  2677  000E8A  0100               	movlb	0	; () banked
  2678  000E8C  6F71               	movwf	___llmod@divisor& (0+255),b
  2679  000E8E  0E00               	movlw	0
  2680  000E90  6F72               	movwf	(___llmod@divisor+1)& (0+255),b
  2681  000E92  0E00               	movlw	0
  2682  000E94  6F73               	movwf	(___llmod@divisor+2)& (0+255),b
  2683  000E96  0E00               	movlw	0
  2684  000E98  6F74               	movwf	(___llmod@divisor+3)& (0+255),b
  2685  000E9A  ECC6  F017         	call	___llmod	;wreg free
  2686  000E9E  C06D  F0B1         	movff	?___llmod,sprintf@tmpval
  2687  000EA2  C06E  F0B2         	movff	?___llmod+1,sprintf@tmpval+1
  2688  000EA6  C06F  F0B3         	movff	?___llmod+2,sprintf@tmpval+2
  2689  000EAA  C070  F0B4         	movff	?___llmod+3,sprintf@tmpval+3
  2690                           
  2691                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  2692  000EAE  0100               	movlb	0	; () banked
  2693  000EB0  51B1               	movf	sprintf@tmpval& (0+255),w,b
  2694  000EB2  0F30               	addlw	48
  2695  000EB4  C09F  FFD9         	movff	sprintf@sp,fsr2l
  2696  000EB8  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  2697  000EBC                     L2:
  2698  000EBC  6EDF               	movwf	indf2,c
  2699                           
  2700                           ; BSR set to: 0
  2701  000EBE  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  2702  000EC0  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  2703  000EC2                     l217:
  2704                           
  2705                           ; BSR set to: 0
  2706                           
  2707                           ; BSR set to: 0
  2708  000EC2  07C4               	decf	sprintf@c& (0+255),f,b
  2709  000EC4  29C4               	incf	sprintf@c& (0+255),w,b
  2710  000EC6  B4D8               	btfsc	status,2,c
  2711  000EC8  D00C               	goto	l220
  2712  000ECA  D7B0               	goto	l218
  2713  000ECC                     l3238:
  2714                           
  2715                           ; BSR set to: 0
  2716                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  2717  000ECC  C09F  FFD9         	movff	sprintf@sp,fsr2l
  2718  000ED0  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  2719  000ED4  0E30               	movlw	48
  2720  000ED6  6EDF               	movwf	indf2,c
  2721                           
  2722                           ; BSR set to: 0
  2723  000ED8  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  2724  000EDA  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  2725                           
  2726                           ; BSR set to: 0
  2727                           ;doprnt.c: 1209: exp--;
  2728  000EDC  07B9               	decf	sprintf@exp& (0+255),f,b
  2729  000EDE  A0D8               	btfss	status,0,c
  2730  000EE0  07BA               	decf	(sprintf@exp+1)& (0+255),f,b
  2731  000EE2                     l220:
  2732                           
  2733                           ; BSR set to: 0
  2734                           
  2735                           ; BSR set to: 0
  2736  000EE2  BFBA               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2737  000EE4  D005               	goto	u3270
  2738  000EE6  51BA               	movf	(sprintf@exp+1)& (0+255),w,b
  2739  000EE8  E1F1               	bnz	l3238
  2740  000EEA  05B9               	decf	sprintf@exp& (0+255),w,b
  2741  000EEC  B0D8               	btfsc	status,0,c
  2742  000EEE  D7EE               	goto	l221
  2743  000EF0                     u3270:
  2744                           
  2745                           ; BSR set to: 0
  2746                           ;doprnt.c: 1210: }
  2747                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2748                           
  2749                           ; BSR set to: 0
  2750  000EF0  BFC3               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2751  000EF2  D009               	goto	l223
  2752  000EF4  51C3               	movf	(sprintf@prec+1)& (0+255),w,b
  2753  000EF6  E104               	bnz	u3280
  2754  000EF8  0E09               	movlw	9
  2755  000EFA  5DC2               	subwf	sprintf@prec& (0+255),w,b
  2756  000EFC  A0D8               	btfss	status,0,c
  2757  000EFE  D003               	goto	l223
  2758  000F00                     u3280:
  2759                           
  2760                           ; BSR set to: 0
  2761                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2762  000F00  0E08               	movlw	8
  2763  000F02  6FC4               	movwf	sprintf@c& (0+255),b
  2764  000F04  D002               	goto	l224
  2765  000F06                     l223:
  2766                           
  2767                           ; BSR set to: 0
  2768                           ;doprnt.c: 1213: else
  2769                           ;doprnt.c: 1214: c = prec;
  2770  000F06  C0C2  F0C4         	movff	sprintf@prec,sprintf@c
  2771  000F0A                     l224:
  2772                           
  2773                           ; BSR set to: 0
  2774                           ;doprnt.c: 1215: prec -= c;
  2775                           
  2776                           ; BSR set to: 0
  2777  000F0A  51C4               	movf	sprintf@c& (0+255),w,b
  2778  000F0C  5FC2               	subwf	sprintf@prec& (0+255),f,b
  2779  000F0E  0E00               	movlw	0
  2780  000F10  BFC4               	btfsc	sprintf@c& (0+255),7,b
  2781  000F12  0EFF               	movlw	255
  2782  000F14  5BC3               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2783                           
  2784                           ; BSR set to: 0
  2785                           ;doprnt.c: 1219: if(c)
  2786  000F16  51C4               	movf	sprintf@c& (0+255),w,b
  2787  000F18  B4D8               	btfsc	status,2,c
  2788  000F1A  D008               	goto	l225
  2789                           
  2790                           ; BSR set to: 0
  2791                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  2792  000F1C  C09F  FFD9         	movff	sprintf@sp,fsr2l
  2793  000F20  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  2794  000F24  0E2E               	movlw	46
  2795  000F26  6EDF               	movwf	indf2,c
  2796                           
  2797                           ; BSR set to: 0
  2798  000F28  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  2799  000F2A  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  2800  000F2C                     l225:
  2801                           
  2802                           ; BSR set to: 0
  2803                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2804                           
  2805                           ; BSR set to: 0
  2806  000F2C  51C4               	movf	sprintf@c& (0+255),w,b
  2807  000F2E  EC90  F009         	call	_scale
  2808  000F32  C083  F0AC         	movff	?_scale,_sprintf$1357
  2809  000F36  C084  F0AD         	movff	?_scale+1,_sprintf$1357+1
  2810  000F3A  C085  F0AE         	movff	?_scale+2,_sprintf$1357+2
  2811                           
  2812                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2813  000F3E  C0BF  F077         	movff	sprintf@fval,___ftmul@f2
  2814  000F42  C0C0  F078         	movff	sprintf@fval+1,___ftmul@f2+1
  2815  000F46  C0C1  F079         	movff	sprintf@fval+2,___ftmul@f2+2
  2816  000F4A  C0AC  F074         	movff	_sprintf$1357,___ftmul@f1
  2817  000F4E  C0AD  F075         	movff	_sprintf$1357+1,___ftmul@f1+1
  2818  000F52  C0AE  F076         	movff	_sprintf$1357+2,___ftmul@f1+2
  2819  000F56  ECFF  F013         	call	___ftmul	;wreg free
  2820  000F5A  C074  F08A         	movff	?___ftmul,___fttol@f1
  2821  000F5E  C075  F08B         	movff	?___ftmul+1,___fttol@f1+1
  2822  000F62  C076  F08C         	movff	?___ftmul+2,___fttol@f1+2
  2823  000F66  EC83  F013         	call	___fttol	;wreg free
  2824  000F6A  C08A  F0B5         	movff	?___fttol,sprintf@val
  2825  000F6E  C08B  F0B6         	movff	?___fttol+1,sprintf@val+1
  2826  000F72  C08C  F0B7         	movff	?___fttol+2,sprintf@val+2
  2827  000F76  C08D  F0B8         	movff	?___fttol+3,sprintf@val+3
  2828                           
  2829                           ;doprnt.c: 1228: while(c--) {
  2830  000F7A  D072               	goto	l226
  2831  000F7C                     
  2832                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2833  000F7C  C0B5  F060         	movff	sprintf@val,___lldiv@dividend
  2834  000F80  C0B6  F061         	movff	sprintf@val+1,___lldiv@dividend+1
  2835  000F84  C0B7  F062         	movff	sprintf@val+2,___lldiv@dividend+2
  2836  000F88  C0B8  F063         	movff	sprintf@val+3,___lldiv@dividend+3
  2837  000F8C  0100               	movlb	0	; () banked
  2838  000F8E  51C4               	movf	sprintf@c& (0+255),w,b
  2839  000F90  0D04               	mullw	4
  2840  000F92  0E01               	movlw	low _dpowers
  2841  000F94  24F3               	addwf	prodl,w,c
  2842  000F96  6EF6               	movwf	tblptrl,c
  2843  000F98  0E08               	movlw	high _dpowers
  2844  000F9A  20F4               	addwfc	prodh,w,c
  2845  000F9C  6EF7               	movwf	tblptrh,c
  2846  000F9E                     	if	0	;There are less than 3 active tblptr bytes
  2847  000F9E                     	endif
  2848  000F9E  0009               	tblrd		*+
  2849  000FA0  CFF5 F064          	movff	tablat,___lldiv@divisor
  2850  000FA4  0009               	tblrd		*+
  2851  000FA6  CFF5 F065          	movff	tablat,___lldiv@divisor+1
  2852  000FAA  0009               	tblrd		*+
  2853  000FAC  CFF5 F066          	movff	tablat,___lldiv@divisor+2
  2854  000FB0  000A               	tblrd		*-
  2855  000FB2  CFF5 F067          	movff	tablat,___lldiv@divisor+3
  2856  000FB6  EC16  F017         	call	___lldiv	;wreg free
  2857  000FBA  C060  F0B1         	movff	?___lldiv,sprintf@tmpval
  2858  000FBE  C061  F0B2         	movff	?___lldiv+1,sprintf@tmpval+1
  2859  000FC2  C062  F0B3         	movff	?___lldiv+2,sprintf@tmpval+2
  2860  000FC6  C063  F0B4         	movff	?___lldiv+3,sprintf@tmpval+3
  2861                           
  2862                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2863  000FCA  C0B1  F06D         	movff	sprintf@tmpval,___llmod@dividend
  2864  000FCE  C0B2  F06E         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2865  000FD2  C0B3  F06F         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2866  000FD6  C0B4  F070         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2867  000FDA  0E0A               	movlw	10
  2868  000FDC  0100               	movlb	0	; () banked
  2869  000FDE  6F71               	movwf	___llmod@divisor& (0+255),b
  2870  000FE0  0E00               	movlw	0
  2871  000FE2  6F72               	movwf	(___llmod@divisor+1)& (0+255),b
  2872  000FE4  0E00               	movlw	0
  2873  000FE6  6F73               	movwf	(___llmod@divisor+2)& (0+255),b
  2874  000FE8  0E00               	movlw	0
  2875  000FEA  6F74               	movwf	(___llmod@divisor+3)& (0+255),b
  2876  000FEC  ECC6  F017         	call	___llmod	;wreg free
  2877  000FF0  C06D  F0B1         	movff	?___llmod,sprintf@tmpval
  2878  000FF4  C06E  F0B2         	movff	?___llmod+1,sprintf@tmpval+1
  2879  000FF8  C06F  F0B3         	movff	?___llmod+2,sprintf@tmpval+2
  2880  000FFC  C070  F0B4         	movff	?___llmod+3,sprintf@tmpval+3
  2881                           
  2882                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  2883  001000  0100               	movlb	0	; () banked
  2884  001002  51B1               	movf	sprintf@tmpval& (0+255),w,b
  2885  001004  0F30               	addlw	48
  2886  001006  C09F  FFD9         	movff	sprintf@sp,fsr2l
  2887  00100A  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  2888  00100E  6EDF               	movwf	indf2,c
  2889                           
  2890                           ; BSR set to: 0
  2891  001010  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  2892  001012  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  2893                           
  2894                           ; BSR set to: 0
  2895                           ;doprnt.c: 1232: val %= dpowers[c];
  2896  001014  C0B5  F06D         	movff	sprintf@val,___llmod@dividend
  2897  001018  C0B6  F06E         	movff	sprintf@val+1,___llmod@dividend+1
  2898  00101C  C0B7  F06F         	movff	sprintf@val+2,___llmod@dividend+2
  2899  001020  C0B8  F070         	movff	sprintf@val+3,___llmod@dividend+3
  2900  001024  51C4               	movf	sprintf@c& (0+255),w,b
  2901  001026  0D04               	mullw	4
  2902  001028  0E01               	movlw	low _dpowers
  2903  00102A  24F3               	addwf	prodl,w,c
  2904  00102C  6EF6               	movwf	tblptrl,c
  2905  00102E  0E08               	movlw	high _dpowers
  2906  001030  20F4               	addwfc	prodh,w,c
  2907  001032  6EF7               	movwf	tblptrh,c
  2908  001034                     	if	0	;There are less than 3 active tblptr bytes
  2909  001034                     	endif
  2910  001034  0009               	tblrd		*+
  2911  001036  CFF5 F071          	movff	tablat,___llmod@divisor
  2912  00103A  0009               	tblrd		*+
  2913  00103C  CFF5 F072          	movff	tablat,___llmod@divisor+1
  2914  001040  0009               	tblrd		*+
  2915  001042  CFF5 F073          	movff	tablat,___llmod@divisor+2
  2916  001046  000A               	tblrd		*-
  2917  001048  CFF5 F074          	movff	tablat,___llmod@divisor+3
  2918  00104C  ECC6  F017         	call	___llmod	;wreg free
  2919  001050  C06D  F0B5         	movff	?___llmod,sprintf@val
  2920  001054  C06E  F0B6         	movff	?___llmod+1,sprintf@val+1
  2921  001058  C06F  F0B7         	movff	?___llmod+2,sprintf@val+2
  2922  00105C  C070  F0B8         	movff	?___llmod+3,sprintf@val+3
  2923  001060                     l226:
  2924  001060  0100               	movlb	0	; () banked
  2925  001062  07C4               	decf	sprintf@c& (0+255),f,b
  2926  001064  29C4               	incf	sprintf@c& (0+255),w,b
  2927  001066  B4D8               	btfsc	status,2,c
  2928  001068  D00C               	goto	l229
  2929  00106A  D788               	goto	l227
  2930  00106C                     
  2931                           ; BSR set to: 0
  2932                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  2933                           
  2934                           ; BSR set to: 0
  2935  00106C  C09F  FFD9         	movff	sprintf@sp,fsr2l
  2936  001070  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  2937  001074  0E30               	movlw	48
  2938  001076  6EDF               	movwf	indf2,c
  2939                           
  2940                           ; BSR set to: 0
  2941  001078  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  2942  00107A  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  2943                           
  2944                           ; BSR set to: 0
  2945                           ;doprnt.c: 1237: prec--;
  2946  00107C  07C2               	decf	sprintf@prec& (0+255),f,b
  2947  00107E  A0D8               	btfss	status,0,c
  2948  001080  07C3               	decf	(sprintf@prec+1)& (0+255),f,b
  2949  001082                     l229:
  2950                           
  2951                           ; BSR set to: 0
  2952                           
  2953                           ; BSR set to: 0
  2954  001082  51C2               	movf	sprintf@prec& (0+255),w,b
  2955  001084  11C3               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2956  001086  B4D8               	btfsc	status,2,c
  2957  001088  D137               	goto	u3520
  2958  00108A  D7F0               	goto	l230
  2959  00108C                     l183:
  2960                           
  2961                           ; BSR set to: 0
  2962                           ;doprnt.c: 1246: }
  2963                           ;doprnt.c: 1253: {
  2964                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  2965                           
  2966                           ; BSR set to: 0
  2967  00108C  C0AF  FFD9         	movff	sprintf@ap,fsr2l
  2968  001090  C0B0  FFDA         	movff	sprintf@ap+1,fsr2h
  2969  001094  CFDE F0B5          	movff	postinc2,sprintf@val
  2970  001098  CFDD F0B6          	movff	postdec2,sprintf@val+1
  2971  00109C  0E00               	movlw	0
  2972  00109E  BFB6               	btfsc	(sprintf@val+1)& (0+255),7,b
  2973  0010A0  0EFF               	movlw	-1
  2974  0010A2  6FB7               	movwf	(sprintf@val+2)& (0+255),b
  2975  0010A4  6FB8               	movwf	(sprintf@val+3)& (0+255),b
  2976                           
  2977                           ; BSR set to: 0
  2978  0010A6  0E02               	movlw	2
  2979  0010A8  27AF               	addwf	sprintf@ap& (0+255),f,b
  2980  0010AA  0E00               	movlw	0
  2981  0010AC  23B0               	addwfc	(sprintf@ap+1)& (0+255),f,b
  2982                           
  2983                           ; BSR set to: 0
  2984                           ;doprnt.c: 1261: if((long)val < 0) {
  2985  0010AE  AFB8               	btfss	(sprintf@val+3)& (0+255),7,b
  2986  0010B0  D00A               	goto	l232
  2987                           
  2988                           ; BSR set to: 0
  2989                           ;doprnt.c: 1262: flag |= 0x03;
  2990  0010B2  0E03               	movlw	3
  2991  0010B4  13BB               	iorwf	sprintf@flag& (0+255),f,b
  2992                           
  2993                           ; BSR set to: 0
  2994                           ;doprnt.c: 1263: val = -val;
  2995  0010B6  1FB8               	comf	(sprintf@val+3)& (0+255),f,b
  2996  0010B8  1FB7               	comf	(sprintf@val+2)& (0+255),f,b
  2997  0010BA  1FB6               	comf	(sprintf@val+1)& (0+255),f,b
  2998  0010BC  6DB5               	negf	sprintf@val& (0+255),b
  2999  0010BE  0E00               	movlw	0
  3000  0010C0  23B6               	addwfc	(sprintf@val+1)& (0+255),f,b
  3001  0010C2  23B7               	addwfc	(sprintf@val+2)& (0+255),f,b
  3002  0010C4  23B8               	addwfc	(sprintf@val+3)& (0+255),f,b
  3003  0010C6                     l232:
  3004                           
  3005                           ; BSR set to: 0
  3006                           ;doprnt.c: 1264: }
  3007                           ;doprnt.c: 1266: }
  3008                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  3009                           
  3010                           ; BSR set to: 0
  3011  0010C6  51C2               	movf	sprintf@prec& (0+255),w,b
  3012  0010C8  11C3               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3013  0010CA  A4D8               	btfss	status,2,c
  3014  0010CC  D008               	goto	l233
  3015                           
  3016                           ; BSR set to: 0
  3017  0010CE  51B5               	movf	sprintf@val& (0+255),w,b
  3018  0010D0  11B6               	iorwf	(sprintf@val+1)& (0+255),w,b
  3019  0010D2  11B7               	iorwf	(sprintf@val+2)& (0+255),w,b
  3020  0010D4  11B8               	iorwf	(sprintf@val+3)& (0+255),w,b
  3021  0010D6  A4D8               	btfss	status,2,c
  3022  0010D8  D002               	goto	l233
  3023                           
  3024                           ; BSR set to: 0
  3025                           ;doprnt.c: 1291: prec++;
  3026  0010DA  4BC2               	infsnz	sprintf@prec& (0+255),f,b
  3027  0010DC  2BC3               	incf	(sprintf@prec+1)& (0+255),f,b
  3028  0010DE                     l233:
  3029                           
  3030                           ; BSR set to: 0
  3031                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3032                           
  3033                           ; BSR set to: 0
  3034  0010DE  0E01               	movlw	1
  3035  0010E0  6FC4               	movwf	sprintf@c& (0+255),b
  3036  0010E2                     l3300:
  3037                           
  3038                           ; BSR set to: 0
  3039  0010E2  0E0A               	movlw	10
  3040  0010E4  19C4               	xorwf	sprintf@c& (0+255),w,b
  3041  0010E6  B4D8               	btfsc	status,2,c
  3042  0010E8  D018               	goto	u3370
  3043                           
  3044                           ; BSR set to: 0
  3045                           ;doprnt.c: 1306: if(val < dpowers[c])
  3046                           
  3047                           ; BSR set to: 0
  3048                           
  3049                           ; BSR set to: 0
  3050  0010EA  51C4               	movf	sprintf@c& (0+255),w,b
  3051  0010EC  0D04               	mullw	4
  3052  0010EE  0E01               	movlw	low _dpowers
  3053  0010F0  24F3               	addwf	prodl,w,c
  3054  0010F2  6EF6               	movwf	tblptrl,c
  3055  0010F4  0E08               	movlw	high _dpowers
  3056  0010F6  20F4               	addwfc	prodh,w,c
  3057  0010F8  6EF7               	movwf	tblptrh,c
  3058  0010FA                     	if	0	;There are less than 3 active tblptr bytes
  3059  0010FA                     	endif
  3060  0010FA  0009               	tblrd		*+
  3061  0010FC  50F5               	movf	tablat,w,c
  3062  0010FE  5DB5               	subwf	sprintf@val& (0+255),w,b
  3063  001100  0009               	tblrd		*+
  3064  001102  50F5               	movf	tablat,w,c
  3065  001104  59B6               	subwfb	(sprintf@val+1)& (0+255),w,b
  3066  001106  0009               	tblrd		*+
  3067  001108  50F5               	movf	tablat,w,c
  3068  00110A  59B7               	subwfb	(sprintf@val+2)& (0+255),w,b
  3069  00110C  0009               	tblrd		*+
  3070  00110E  50F5               	movf	tablat,w,c
  3071  001110  59B8               	subwfb	(sprintf@val+3)& (0+255),w,b
  3072  001112  A0D8               	btfss	status,0,c
  3073  001114  D002               	goto	u3370
  3074                           
  3075                           ; BSR set to: 0
  3076                           
  3077                           ; BSR set to: 0
  3078                           
  3079                           ; BSR set to: 0
  3080                           ;doprnt.c: 1307: break;
  3081  001116  2BC4               	incf	sprintf@c& (0+255),f,b
  3082  001118  D7E4               	goto	l3300
  3083  00111A                     u3370:
  3084                           
  3085                           ; BSR set to: 0
  3086                           ;doprnt.c: 1339: if(c < prec)
  3087                           
  3088                           ; BSR set to: 0
  3089  00111A  0E80               	movlw	128
  3090  00111C  BFC4               	btfsc	sprintf@c& (0+255),7,b
  3091  00111E  0E7F               	movlw	127
  3092  001120  6FA6               	movwf	??_sprintf& (0+255),b
  3093  001122  51C2               	movf	sprintf@prec& (0+255),w,b
  3094  001124  5DC4               	subwf	sprintf@c& (0+255),w,b
  3095  001126  51C3               	movf	(sprintf@prec+1)& (0+255),w,b
  3096  001128  0A80               	xorlw	128
  3097  00112A  59A6               	subwfb	??_sprintf& (0+255),w,b
  3098  00112C  B0D8               	btfsc	status,0,c
  3099  00112E  D003               	goto	l237
  3100                           
  3101                           ; BSR set to: 0
  3102                           ;doprnt.c: 1340: c = prec;
  3103  001130  C0C2  F0C4         	movff	sprintf@prec,sprintf@c
  3104  001134  D010               	goto	l239
  3105  001136                     l237:
  3106                           
  3107                           ; BSR set to: 0
  3108                           ;doprnt.c: 1341: else if(prec < c)
  3109                           
  3110                           ; BSR set to: 0
  3111  001136  51C3               	movf	(sprintf@prec+1)& (0+255),w,b
  3112  001138  0A80               	xorlw	128
  3113  00113A  6FA6               	movwf	??_sprintf& (0+255),b
  3114  00113C  51C4               	movf	sprintf@c& (0+255),w,b
  3115  00113E  5DC2               	subwf	sprintf@prec& (0+255),w,b
  3116  001140  0E80               	movlw	128
  3117  001142  BFC4               	btfsc	sprintf@c& (0+255),7,b
  3118  001144  0E7F               	movlw	127
  3119  001146  59A6               	subwfb	??_sprintf& (0+255),w,b
  3120  001148  B0D8               	btfsc	status,0,c
  3121  00114A  D005               	goto	l239
  3122                           
  3123                           ; BSR set to: 0
  3124                           ;doprnt.c: 1342: prec = c;
  3125  00114C  51C4               	movf	sprintf@c& (0+255),w,b
  3126  00114E  6FC2               	movwf	sprintf@prec& (0+255),b
  3127  001150  6BC3               	clrf	(sprintf@prec+1)& (0+255),b
  3128  001152  BFC2               	btfsc	sprintf@prec& (0+255),7,b
  3129  001154  07C3               	decf	(sprintf@prec+1)& (0+255),f,b
  3130  001156                     l239:
  3131                           
  3132                           ; BSR set to: 0
  3133                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3134                           
  3135                           ; BSR set to: 0
  3136                           
  3137                           ; BSR set to: 0
  3138  001156  51BD               	movf	sprintf@width& (0+255),w,b
  3139  001158  11BE               	iorwf	(sprintf@width+1)& (0+255),w,b
  3140  00115A  B4D8               	btfsc	status,2,c
  3141  00115C  D00D               	goto	l240
  3142                           
  3143                           ; BSR set to: 0
  3144  00115E  0E03               	movlw	3
  3145  001160  15BB               	andwf	sprintf@flag& (0+255),w,b
  3146  001162  6FA6               	movwf	??_sprintf& (0+255),b
  3147  001164  0E00               	movlw	0
  3148  001166  15BC               	andwf	(sprintf@flag+1)& (0+255),w,b
  3149  001168  6FA7               	movwf	(??_sprintf+1)& (0+255),b
  3150  00116A  51A6               	movf	??_sprintf& (0+255),w,b
  3151  00116C  11A7               	iorwf	(??_sprintf+1)& (0+255),w,b
  3152  00116E  B4D8               	btfsc	status,2,c
  3153  001170  D003               	goto	l240
  3154                           
  3155                           ; BSR set to: 0
  3156                           ;doprnt.c: 1346: width--;
  3157  001172  07BD               	decf	sprintf@width& (0+255),f,b
  3158  001174  A0D8               	btfss	status,0,c
  3159  001176  07BE               	decf	(sprintf@width+1)& (0+255),f,b
  3160  001178                     l240:
  3161                           
  3162                           ; BSR set to: 0
  3163                           ;doprnt.c: 1348: if(flag & 0x4000) {
  3164                           
  3165                           ; BSR set to: 0
  3166  001178  ADBC               	btfss	(sprintf@flag+1)& (0+255),6,b
  3167  00117A  D013               	goto	l243
  3168                           
  3169                           ; BSR set to: 0
  3170                           ;doprnt.c: 1349: if(width > prec)
  3171  00117C  51BD               	movf	sprintf@width& (0+255),w,b
  3172  00117E  5DC2               	subwf	sprintf@prec& (0+255),w,b
  3173  001180  51C3               	movf	(sprintf@prec+1)& (0+255),w,b
  3174  001182  0A80               	xorlw	128
  3175  001184  6FA6               	movwf	??_sprintf& (0+255),b
  3176  001186  51BE               	movf	(sprintf@width+1)& (0+255),w,b
  3177  001188  0A80               	xorlw	128
  3178  00118A  59A6               	subwfb	??_sprintf& (0+255),w,b
  3179  00118C  B0D8               	btfsc	status,0,c
  3180  00118E  D005               	goto	l242
  3181                           
  3182                           ; BSR set to: 0
  3183                           ;doprnt.c: 1350: width -= prec;
  3184  001190  51C2               	movf	sprintf@prec& (0+255),w,b
  3185  001192  5FBD               	subwf	sprintf@width& (0+255),f,b
  3186  001194  51C3               	movf	(sprintf@prec+1)& (0+255),w,b
  3187  001196  5BBE               	subwfb	(sprintf@width+1)& (0+255),f,b
  3188  001198  D004               	goto	l243
  3189  00119A                     l242:
  3190                           
  3191                           ; BSR set to: 0
  3192                           ;doprnt.c: 1351: else
  3193                           ;doprnt.c: 1352: width = 0;
  3194                           
  3195                           ; BSR set to: 0
  3196  00119A  0E00               	movlw	0
  3197  00119C  6FBE               	movwf	(sprintf@width+1)& (0+255),b
  3198  00119E  0E00               	movlw	0
  3199  0011A0  6FBD               	movwf	sprintf@width& (0+255),b
  3200  0011A2                     l243:
  3201                           
  3202                           ; BSR set to: 0
  3203                           ;doprnt.c: 1353: }
  3204                           ;doprnt.c: 1381: if(width > c)
  3205                           
  3206                           ; BSR set to: 0
  3207                           
  3208                           ; BSR set to: 0
  3209  0011A2  0E80               	movlw	128
  3210  0011A4  BFC4               	btfsc	sprintf@c& (0+255),7,b
  3211  0011A6  0E7F               	movlw	127
  3212  0011A8  6FA6               	movwf	??_sprintf& (0+255),b
  3213  0011AA  51BD               	movf	sprintf@width& (0+255),w,b
  3214  0011AC  5DC4               	subwf	sprintf@c& (0+255),w,b
  3215  0011AE  51BE               	movf	(sprintf@width+1)& (0+255),w,b
  3216  0011B0  0A80               	xorlw	128
  3217  0011B2  59A6               	subwfb	??_sprintf& (0+255),w,b
  3218  0011B4  B0D8               	btfsc	status,0,c
  3219  0011B6  D007               	goto	l244
  3220                           
  3221                           ; BSR set to: 0
  3222                           ;doprnt.c: 1382: width -= c;
  3223  0011B8  51C4               	movf	sprintf@c& (0+255),w,b
  3224  0011BA  5FBD               	subwf	sprintf@width& (0+255),f,b
  3225  0011BC  0E00               	movlw	0
  3226  0011BE  BFC4               	btfsc	sprintf@c& (0+255),7,b
  3227  0011C0  0EFF               	movlw	255
  3228  0011C2  5BBE               	subwfb	(sprintf@width+1)& (0+255),f,b
  3229  0011C4  D004               	goto	l245
  3230  0011C6                     l244:
  3231                           
  3232                           ; BSR set to: 0
  3233                           ;doprnt.c: 1383: else
  3234                           ;doprnt.c: 1384: width = 0;
  3235                           
  3236                           ; BSR set to: 0
  3237  0011C6  0E00               	movlw	0
  3238  0011C8  6FBE               	movwf	(sprintf@width+1)& (0+255),b
  3239  0011CA  0E00               	movlw	0
  3240  0011CC  6FBD               	movwf	sprintf@width& (0+255),b
  3241  0011CE                     l245:
  3242                           
  3243                           ; BSR set to: 0
  3244                           ;doprnt.c: 1387: if(flag & 0x04) {
  3245                           
  3246                           ; BSR set to: 0
  3247  0011CE  A5BB               	btfss	sprintf@flag& (0+255),2,b
  3248  0011D0  D022               	goto	l246
  3249                           
  3250                           ; BSR set to: 0
  3251                           ;doprnt.c: 1392: if(flag & 0x03)
  3252  0011D2  0E03               	movlw	3
  3253  0011D4  15BB               	andwf	sprintf@flag& (0+255),w,b
  3254  0011D6  6FA6               	movwf	??_sprintf& (0+255),b
  3255  0011D8  0E00               	movlw	0
  3256  0011DA  15BC               	andwf	(sprintf@flag+1)& (0+255),w,b
  3257  0011DC  6FA7               	movwf	(??_sprintf+1)& (0+255),b
  3258  0011DE  51A6               	movf	??_sprintf& (0+255),w,b
  3259  0011E0  11A7               	iorwf	(??_sprintf+1)& (0+255),w,b
  3260  0011E2  B4D8               	btfsc	status,2,c
  3261  0011E4  D008               	goto	l247
  3262                           
  3263                           ; BSR set to: 0
  3264                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  3265  0011E6  C09F  FFD9         	movff	sprintf@sp,fsr2l
  3266  0011EA  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  3267  0011EE  0E2D               	movlw	45
  3268  0011F0  6EDF               	movwf	indf2,c
  3269                           
  3270                           ; BSR set to: 0
  3271  0011F2  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  3272  0011F4  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  3273  0011F6                     l247:
  3274                           
  3275                           ; BSR set to: 0
  3276                           ;doprnt.c: 1415: if(width)
  3277                           
  3278                           ; BSR set to: 0
  3279  0011F6  51BD               	movf	sprintf@width& (0+255),w,b
  3280  0011F8  11BE               	iorwf	(sprintf@width+1)& (0+255),w,b
  3281  0011FA  B4D8               	btfsc	status,2,c
  3282  0011FC  D075               	goto	l256
  3283                           
  3284                           ; BSR set to: 0
  3285                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  3286                           
  3287                           ; BSR set to: 0
  3288                           
  3289                           ;doprnt.c: 1416: do
  3290  0011FE  C09F  FFD9         	movff	sprintf@sp,fsr2l
  3291  001202  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  3292  001206  0E30               	movlw	48
  3293  001208  6EDF               	movwf	indf2,c
  3294                           
  3295                           ; BSR set to: 0
  3296  00120A  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  3297  00120C  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  3298                           
  3299                           ; BSR set to: 0
  3300                           ;doprnt.c: 1418: while(--width);
  3301  00120E  07BD               	decf	sprintf@width& (0+255),f,b
  3302  001210  A0D8               	btfss	status,0,c
  3303  001212  07BE               	decf	(sprintf@width+1)& (0+255),f,b
  3304  001214  D7F0               	goto	l247
  3305  001216                     l246:
  3306                           
  3307                           ; BSR set to: 0
  3308                           ;doprnt.c: 1422: {
  3309                           ;doprnt.c: 1424: if(width
  3310                           ;doprnt.c: 1428: )
  3311                           
  3312                           ; BSR set to: 0
  3313  001216  51BD               	movf	sprintf@width& (0+255),w,b
  3314  001218  11BE               	iorwf	(sprintf@width+1)& (0+255),w,b
  3315  00121A  B4D8               	btfsc	status,2,c
  3316  00121C  D00F               	goto	u3500
  3317  00121E                     u3490:
  3318                           
  3319                           ; BSR set to: 0
  3320                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  3321                           
  3322                           ; BSR set to: 0
  3323                           
  3324                           ;doprnt.c: 1429: do
  3325  00121E  C09F  FFD9         	movff	sprintf@sp,fsr2l
  3326  001222  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  3327  001226  0E20               	movlw	32
  3328  001228  6EDF               	movwf	indf2,c
  3329                           
  3330                           ; BSR set to: 0
  3331  00122A  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  3332  00122C  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  3333                           
  3334                           ; BSR set to: 0
  3335                           ;doprnt.c: 1431: while(--width);
  3336  00122E  07BD               	decf	sprintf@width& (0+255),f,b
  3337  001230  A0D8               	btfss	status,0,c
  3338  001232  07BE               	decf	(sprintf@width+1)& (0+255),f,b
  3339  001234  51BD               	movf	sprintf@width& (0+255),w,b
  3340  001236  11BE               	iorwf	(sprintf@width+1)& (0+255),w,b
  3341  001238  A4D8               	btfss	status,2,c
  3342  00123A  D7F1               	goto	u3490
  3343  00123C                     u3500:
  3344                           
  3345                           ; BSR set to: 0
  3346                           ;doprnt.c: 1438: if(flag & 0x03)
  3347                           
  3348                           ; BSR set to: 0
  3349                           
  3350                           ; BSR set to: 0
  3351  00123C  0E03               	movlw	3
  3352  00123E  15BB               	andwf	sprintf@flag& (0+255),w,b
  3353  001240  6FA6               	movwf	??_sprintf& (0+255),b
  3354  001242  0E00               	movlw	0
  3355  001244  15BC               	andwf	(sprintf@flag+1)& (0+255),w,b
  3356  001246  6FA7               	movwf	(??_sprintf+1)& (0+255),b
  3357  001248  51A6               	movf	??_sprintf& (0+255),w,b
  3358  00124A  11A7               	iorwf	(??_sprintf+1)& (0+255),w,b
  3359  00124C  B4D8               	btfsc	status,2,c
  3360  00124E  D04C               	goto	l256
  3361                           
  3362                           ; BSR set to: 0
  3363                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  3364  001250  C09F  FFD9         	movff	sprintf@sp,fsr2l
  3365  001254  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  3366  001258  0E2D               	movlw	45
  3367  00125A  6EDF               	movwf	indf2,c
  3368  00125C  D043               	goto	l3374
  3369  00125E                     l3370:
  3370                           
  3371                           ; BSR set to: 0
  3372                           ;doprnt.c: 1478: {
  3373                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3374  00125E  C0C2  F0A6         	movff	sprintf@prec,??_sprintf
  3375  001262  C0C3  F0A7         	movff	sprintf@prec+1,??_sprintf+1
  3376  001266  90D8               	bcf	status,0,c
  3377  001268  37A6               	rlcf	??_sprintf& (0+255),f,b
  3378  00126A  37A7               	rlcf	(??_sprintf+1)& (0+255),f,b
  3379  00126C  90D8               	bcf	status,0,c
  3380  00126E  37A6               	rlcf	??_sprintf& (0+255),f,b
  3381  001270  37A7               	rlcf	(??_sprintf+1)& (0+255),f,b
  3382  001272  0E01               	movlw	low _dpowers
  3383  001274  25A6               	addwf	??_sprintf& (0+255),w,b
  3384  001276  6EF6               	movwf	tblptrl,c
  3385  001278  0E08               	movlw	high _dpowers
  3386  00127A  21A7               	addwfc	(??_sprintf+1)& (0+255),w,b
  3387  00127C  6EF7               	movwf	tblptrh,c
  3388  00127E                     	if	0	;There are less than 3 active tblptr bytes
  3389  00127E                     	endif
  3390  00127E  0009               	tblrd		*+
  3391  001280  CFF5 F064          	movff	tablat,___lldiv@divisor
  3392  001284  0009               	tblrd		*+
  3393  001286  CFF5 F065          	movff	tablat,___lldiv@divisor+1
  3394  00128A  0009               	tblrd		*+
  3395  00128C  CFF5 F066          	movff	tablat,___lldiv@divisor+2
  3396  001290  000A               	tblrd		*-
  3397  001292  CFF5 F067          	movff	tablat,___lldiv@divisor+3
  3398  001296  C0B5  F060         	movff	sprintf@val,___lldiv@dividend
  3399  00129A  C0B6  F061         	movff	sprintf@val+1,___lldiv@dividend+1
  3400  00129E  C0B7  F062         	movff	sprintf@val+2,___lldiv@dividend+2
  3401  0012A2  C0B8  F063         	movff	sprintf@val+3,___lldiv@dividend+3
  3402  0012A6  EC16  F017         	call	___lldiv	;wreg free
  3403  0012AA  C060  F06D         	movff	?___lldiv,___llmod@dividend
  3404  0012AE  C061  F06E         	movff	?___lldiv+1,___llmod@dividend+1
  3405  0012B2  C062  F06F         	movff	?___lldiv+2,___llmod@dividend+2
  3406  0012B6  C063  F070         	movff	?___lldiv+3,___llmod@dividend+3
  3407  0012BA  0E0A               	movlw	10
  3408  0012BC  0100               	movlb	0	; () banked
  3409  0012BE  6F71               	movwf	___llmod@divisor& (0+255),b
  3410  0012C0  0E00               	movlw	0
  3411  0012C2  6F72               	movwf	(___llmod@divisor+1)& (0+255),b
  3412  0012C4  0E00               	movlw	0
  3413  0012C6  6F73               	movwf	(___llmod@divisor+2)& (0+255),b
  3414  0012C8  0E00               	movlw	0
  3415  0012CA  6F74               	movwf	(___llmod@divisor+3)& (0+255),b
  3416  0012CC  ECC6  F017         	call	___llmod	;wreg free
  3417  0012D0  0100               	movlb	0	; () banked
  3418  0012D2  516D               	movf	?___llmod& (0+255),w,b
  3419  0012D4  0F30               	addlw	48
  3420  0012D6  6FC4               	movwf	sprintf@c& (0+255),b
  3421                           
  3422                           ; BSR set to: 0
  3423                           ;doprnt.c: 1523: }
  3424                           ;doprnt.c: 1524: ((*sp++ = (c)));
  3425  0012D8  C09F  FFD9         	movff	sprintf@sp,fsr2l
  3426  0012DC  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  3427  0012E0  C0C4  FFDF         	movff	sprintf@c,indf2
  3428  0012E4                     l3374:
  3429                           
  3430                           ; BSR set to: 0
  3431  0012E4  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  3432  0012E6  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  3433  0012E8                     l256:
  3434                           
  3435                           ; BSR set to: 0
  3436                           
  3437                           ; BSR set to: 0
  3438  0012E8  07C2               	decf	sprintf@prec& (0+255),f,b
  3439  0012EA  A0D8               	btfss	status,0,c
  3440  0012EC  07C3               	decf	(sprintf@prec+1)& (0+255),f,b
  3441  0012EE  29C2               	incf	sprintf@prec& (0+255),w,b
  3442  0012F0  E1B6               	bnz	l3370
  3443  0012F2  29C3               	incf	(sprintf@prec+1)& (0+255),w,b
  3444  0012F4  A4D8               	btfss	status,2,c
  3445  0012F6  D7B3               	goto	l257
  3446  0012F8                     u3520:
  3447                           
  3448                           ; BSR set to: 0
  3449                           
  3450                           ; BSR set to: 0
  3451                           
  3452                           ; BSR set to: 0
  3453  0012F8  C0A1  FFF6         	movff	sprintf@f,tblptrl
  3454  0012FC  C0A2  FFF7         	movff	sprintf@f+1,tblptrh
  3455  001300  4BA1               	infsnz	sprintf@f& (0+255),f,b
  3456  001302  2BA2               	incf	(sprintf@f+1)& (0+255),f,b
  3457  001304                     	if	0	;tblptru may be non-zero
  3458  001304                     	endif
  3459  001304                     	if	0	;tblptru may be non-zero
  3460  001304                     	endif
  3461  001304  0008               	tblrd		*
  3462  001306  CFF5 F0C4          	movff	tablat,sprintf@c
  3463  00130A  51C4               	movf	sprintf@c& (0+255),w,b
  3464  00130C  A4D8               	btfss	status,2,c
  3465  00130E  EF5A  F004         	goto	l159
  3466  001312                     u3530:
  3467                           
  3468                           ; BSR set to: 0
  3469                           ;doprnt.c: 1538: *sp = 0;
  3470                           
  3471                           ; BSR set to: 0
  3472                           
  3473                           ;doprnt.c: 1525: }
  3474                           ;doprnt.c: 1533: }
  3475                           ;doprnt.c: 1535: alldone:
  3476                           
  3477                           ; BSR set to: 0
  3478  001312  C09F  FFD9         	movff	sprintf@sp,fsr2l
  3479  001316  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  3480  00131A  0E00               	movlw	0
  3481  00131C  6EDF               	movwf	indf2,c
  3482  00131E  0012               	return	
  3483  001320                     __end_of_sprintf:
  3484                           	opt stack 0
  3485                           tblptru	equ	0xFF8
  3486                           tblptrh	equ	0xFF7
  3487                           tblptrl	equ	0xFF6
  3488                           tablat	equ	0xFF5
  3489                           prodh	equ	0xFF4
  3490                           prodl	equ	0xFF3
  3491                           postinc0	equ	0xFEE
  3492                           wreg	equ	0xFE8
  3493                           indf2	equ	0xFDF
  3494                           postinc2	equ	0xFDE
  3495                           postdec2	equ	0xFDD
  3496                           fsr2h	equ	0xFDA
  3497                           fsr2l	equ	0xFD9
  3498                           status	equ	0xFD8
  3499                           
  3500 ;; *************** function _scale *****************
  3501 ;; Defined at:
  3502 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  3503 ;; Parameters:    Size  Location     Type
  3504 ;;  scl             1    wreg     char 
  3505 ;; Auto vars:     Size  Location     Type
  3506 ;;  scl             1   41[BANK0 ] char 
  3507 ;; Return value:  Size  Location     Type
  3508 ;;                  3   35[BANK0 ] char 
  3509 ;; Registers used:
  3510 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3511 ;; Tracked objects:
  3512 ;;		On entry : 0/0
  3513 ;;		On exit  : 0/0
  3514 ;;		Unchanged: 0/0
  3515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3516 ;;      Params:         0       3       0       0       0       0       0       0       0
  3517 ;;      Locals:         0       4       0       0       0       0       0       0       0
  3518 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3519 ;;      Totals:         0       7       0       0       0       0       0       0       0
  3520 ;;Total ram usage:        7 bytes
  3521 ;; Hardware stack levels used:    1
  3522 ;; Hardware stack levels required when called:    5
  3523 ;; This function calls:
  3524 ;;		___awdiv
  3525 ;;		___awmod
  3526 ;;		___ftmul
  3527 ;;		___wmul
  3528 ;; This function is called by:
  3529 ;;		_sprintf
  3530 ;; This function uses a non-reentrant model
  3531 ;;
  3532                           
  3533                           	psect	text3
  3534  001320                     __ptext3:
  3535                           	opt stack 0
  3536  001320                     _scale:
  3537                           	opt stack 24
  3538                           
  3539                           ; BSR set to: 0
  3540                           ;incstack = 0
  3541                           ;scale@scl stored from wreg
  3542  001320  0100               	movlb	0	; () banked
  3543  001322  6F89               	movwf	scale@scl& (0+255),b
  3544                           
  3545                           ;doprnt.c: 428: if(scl < 0) {
  3546  001324  0100               	movlb	0	; () banked
  3547  001326  AF89               	btfss	scale@scl& (0+255),7,b
  3548  001328  D10C               	goto	l148
  3549                           
  3550                           ; BSR set to: 0
  3551                           ;doprnt.c: 429: scl = -scl;
  3552  00132A  6D89               	negf	scale@scl& (0+255),b
  3553                           
  3554                           ;doprnt.c: 430: if(scl>=110)
  3555  00132C  5189               	movf	scale@scl& (0+255),w,b
  3556  00132E  0A80               	xorlw	128
  3557  001330  0F12               	addlw	-238
  3558  001332  A0D8               	btfss	status,0,c
  3559  001334  D097               	goto	l149
  3560                           
  3561                           ; BSR set to: 0
  3562                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3563  001336  0E00               	movlw	0
  3564  001338  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3565  00133A  0E03               	movlw	3
  3566  00133C  6F70               	movwf	___wmul@multiplicand& (0+255),b
  3567  00133E  0E00               	movlw	0
  3568  001340  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  3569  001342  0E0A               	movlw	10
  3570  001344  6F68               	movwf	___awdiv@divisor& (0+255),b
  3571  001346  0E00               	movlw	0
  3572  001348  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  3573  00134A  0E64               	movlw	100
  3574  00134C  6F62               	movwf	___awmod@divisor& (0+255),b
  3575  00134E  5189               	movf	scale@scl& (0+255),w,b
  3576  001350  6F60               	movwf	___awmod@dividend& (0+255),b
  3577  001352  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  3578  001354  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  3579  001356  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  3580  001358  EC58  F017         	call	___awmod	;wreg free
  3581  00135C  C060  F066         	movff	?___awmod,___awdiv@dividend
  3582  001360  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
  3583  001364  ECD3  F016         	call	___awdiv	;wreg free
  3584  001368  0E09               	movlw	9
  3585  00136A  0100               	movlb	0	; () banked
  3586  00136C  2566               	addwf	?___awdiv& (0+255),w,b
  3587  00136E  6F6E               	movwf	___wmul@multiplier& (0+255),b
  3588  001370  0E00               	movlw	0
  3589  001372  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  3590  001374  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  3591  001376  EC8F  F018         	call	___wmul	;wreg free
  3592  00137A  0E50               	movlw	low __npowers_
  3593  00137C  0100               	movlb	0	; () banked
  3594  00137E  256E               	addwf	?___wmul& (0+255),w,b
  3595  001380  6EF6               	movwf	tblptrl,c
  3596  001382  0E08               	movlw	high __npowers_
  3597  001384  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  3598  001386  6EF7               	movwf	tblptrh,c
  3599  001388                     	if	0	;There are less than 3 active tblptr bytes
  3600  001388                     	endif
  3601  001388  0009               	tblrd		*+
  3602  00138A  CFF5 F077          	movff	tablat,___ftmul@f2
  3603  00138E  0009               	tblrd		*+
  3604  001390  CFF5 F078          	movff	tablat,___ftmul@f2+1
  3605  001394  000A               	tblrd		*-
  3606  001396  CFF5 F079          	movff	tablat,___ftmul@f2+2
  3607  00139A  0E00               	movlw	0
  3608  00139C  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  3609  00139E  0E64               	movlw	100
  3610  0013A0  6F68               	movwf	___awdiv@divisor& (0+255),b
  3611  0013A2  5189               	movf	scale@scl& (0+255),w,b
  3612  0013A4  6F66               	movwf	___awdiv@dividend& (0+255),b
  3613  0013A6  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  3614  0013A8  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  3615  0013AA  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  3616  0013AC  ECD3  F016         	call	___awdiv	;wreg free
  3617  0013B0  0E12               	movlw	18
  3618  0013B2  0100               	movlb	0	; () banked
  3619  0013B4  2566               	addwf	?___awdiv& (0+255),w,b
  3620  0013B6  6F6E               	movwf	___wmul@multiplier& (0+255),b
  3621  0013B8  0E00               	movlw	0
  3622  0013BA  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  3623  0013BC  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  3624  0013BE  0E00               	movlw	0
  3625  0013C0  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3626  0013C2  0E03               	movlw	3
  3627  0013C4  6F70               	movwf	___wmul@multiplicand& (0+255),b
  3628  0013C6  EC8F  F018         	call	___wmul	;wreg free
  3629  0013CA  0E50               	movlw	low __npowers_
  3630  0013CC  0100               	movlb	0	; () banked
  3631  0013CE  256E               	addwf	?___wmul& (0+255),w,b
  3632  0013D0  6EF6               	movwf	tblptrl,c
  3633  0013D2  0E08               	movlw	high __npowers_
  3634  0013D4  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  3635  0013D6  6EF7               	movwf	tblptrh,c
  3636  0013D8                     	if	0	;There are less than 3 active tblptr bytes
  3637  0013D8                     	endif
  3638  0013D8  0009               	tblrd		*+
  3639  0013DA  CFF5 F074          	movff	tablat,___ftmul@f1
  3640  0013DE  0009               	tblrd		*+
  3641  0013E0  CFF5 F075          	movff	tablat,___ftmul@f1+1
  3642  0013E4  000A               	tblrd		*-
  3643  0013E6  CFF5 F076          	movff	tablat,___ftmul@f1+2
  3644  0013EA  ECFF  F013         	call	___ftmul	;wreg free
  3645  0013EE  C074  F086         	movff	?___ftmul,_scale$1356
  3646  0013F2  C075  F087         	movff	?___ftmul+1,_scale$1356+1
  3647  0013F6  C076  F088         	movff	?___ftmul+2,_scale$1356+2
  3648                           
  3649                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3650  0013FA  C086  F074         	movff	_scale$1356,___ftmul@f1
  3651  0013FE  C087  F075         	movff	_scale$1356+1,___ftmul@f1+1
  3652  001402  C088  F076         	movff	_scale$1356+2,___ftmul@f1+2
  3653  001406  0E00               	movlw	0
  3654  001408  0100               	movlb	0	; () banked
  3655  00140A  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3656  00140C  0E03               	movlw	3
  3657  00140E  6F70               	movwf	___wmul@multiplicand& (0+255),b
  3658  001410  0E00               	movlw	0
  3659  001412  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  3660  001414  0E0A               	movlw	10
  3661  001416  6F62               	movwf	___awmod@divisor& (0+255),b
  3662  001418  5189               	movf	scale@scl& (0+255),w,b
  3663  00141A  6F60               	movwf	___awmod@dividend& (0+255),b
  3664  00141C  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  3665  00141E  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  3666  001420  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  3667  001422  EC58  F017         	call	___awmod	;wreg free
  3668  001426  C060  F06E         	movff	?___awmod,___wmul@multiplier
  3669  00142A  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  3670  00142E  EC8F  F018         	call	___wmul	;wreg free
  3671  001432  0E50               	movlw	low __npowers_
  3672  001434  0100               	movlb	0	; () banked
  3673  001436  256E               	addwf	?___wmul& (0+255),w,b
  3674  001438  6EF6               	movwf	tblptrl,c
  3675  00143A  0E08               	movlw	high __npowers_
  3676  00143C  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  3677  00143E  6EF7               	movwf	tblptrh,c
  3678  001440                     	if	0	;There are less than 3 active tblptr bytes
  3679  001440                     	endif
  3680  001440  0009               	tblrd		*+
  3681  001442  CFF5 F077          	movff	tablat,___ftmul@f2
  3682  001446  0009               	tblrd		*+
  3683  001448  CFF5 F078          	movff	tablat,___ftmul@f2+1
  3684  00144C  000A               	tblrd		*-
  3685  00144E  CFF5 F079          	movff	tablat,___ftmul@f2+2
  3686  001452  ECFF  F013         	call	___ftmul	;wreg free
  3687  001456  C074  F083         	movff	?___ftmul,?_scale
  3688  00145A  C075  F084         	movff	?___ftmul+1,?_scale+1
  3689  00145E  C076  F085         	movff	?___ftmul+2,?_scale+2
  3690  001462  0012               	return	
  3691  001464                     l149:
  3692                           
  3693                           ;doprnt.c: 432: else if(scl > 10)
  3694  001464  0100               	movlb	0	; () banked
  3695  001466  5189               	movf	scale@scl& (0+255),w,b
  3696  001468  0A80               	xorlw	128
  3697  00146A  0F75               	addlw	-139
  3698  00146C  A0D8               	btfss	status,0,c
  3699  00146E  D056               	goto	l152
  3700                           
  3701                           ; BSR set to: 0
  3702                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3703  001470  0E00               	movlw	0
  3704  001472  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  3705  001474  0E0A               	movlw	10
  3706  001476  6F68               	movwf	___awdiv@divisor& (0+255),b
  3707  001478  5189               	movf	scale@scl& (0+255),w,b
  3708  00147A  6F66               	movwf	___awdiv@dividend& (0+255),b
  3709  00147C  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  3710  00147E  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  3711  001480  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  3712  001482  ECD3  F016         	call	___awdiv	;wreg free
  3713  001486  0E09               	movlw	9
  3714  001488  0100               	movlb	0	; () banked
  3715  00148A  2566               	addwf	?___awdiv& (0+255),w,b
  3716  00148C  6F6E               	movwf	___wmul@multiplier& (0+255),b
  3717  00148E  0E00               	movlw	0
  3718  001490  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  3719  001492  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  3720  001494  0E00               	movlw	0
  3721  001496  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3722  001498  0E03               	movlw	3
  3723  00149A  6F70               	movwf	___wmul@multiplicand& (0+255),b
  3724  00149C  EC8F  F018         	call	___wmul	;wreg free
  3725  0014A0  0E50               	movlw	low __npowers_
  3726  0014A2  0100               	movlb	0	; () banked
  3727  0014A4  256E               	addwf	?___wmul& (0+255),w,b
  3728  0014A6  6EF6               	movwf	tblptrl,c
  3729  0014A8  0E08               	movlw	high __npowers_
  3730  0014AA  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  3731  0014AC  6EF7               	movwf	tblptrh,c
  3732  0014AE                     	if	0	;There are less than 3 active tblptr bytes
  3733  0014AE                     	endif
  3734  0014AE  0009               	tblrd		*+
  3735  0014B0  CFF5 F074          	movff	tablat,___ftmul@f1
  3736  0014B4  0009               	tblrd		*+
  3737  0014B6  CFF5 F075          	movff	tablat,___ftmul@f1+1
  3738  0014BA  000A               	tblrd		*-
  3739  0014BC  CFF5 F076          	movff	tablat,___ftmul@f1+2
  3740  0014C0  0E00               	movlw	0
  3741  0014C2  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3742  0014C4  0E03               	movlw	3
  3743  0014C6  6F70               	movwf	___wmul@multiplicand& (0+255),b
  3744  0014C8  0E00               	movlw	0
  3745  0014CA  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  3746  0014CC  0E0A               	movlw	10
  3747  0014CE  6F62               	movwf	___awmod@divisor& (0+255),b
  3748  0014D0  5189               	movf	scale@scl& (0+255),w,b
  3749  0014D2  6F60               	movwf	___awmod@dividend& (0+255),b
  3750  0014D4  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  3751  0014D6  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  3752  0014D8  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  3753  0014DA  EC58  F017         	call	___awmod	;wreg free
  3754  0014DE  C060  F06E         	movff	?___awmod,___wmul@multiplier
  3755  0014E2  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  3756  0014E6  EC8F  F018         	call	___wmul	;wreg free
  3757  0014EA  0E50               	movlw	low __npowers_
  3758  0014EC  0100               	movlb	0	; () banked
  3759  0014EE  256E               	addwf	?___wmul& (0+255),w,b
  3760  0014F0  6EF6               	movwf	tblptrl,c
  3761  0014F2  0E08               	movlw	high __npowers_
  3762  0014F4  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  3763  0014F6  6EF7               	movwf	tblptrh,c
  3764  0014F8                     	if	0	;There are less than 3 active tblptr bytes
  3765  0014F8                     	endif
  3766  0014F8  0009               	tblrd		*+
  3767  0014FA  CFF5 F077          	movff	tablat,___ftmul@f2
  3768  0014FE  0009               	tblrd		*+
  3769  001500  CFF5 F078          	movff	tablat,___ftmul@f2+1
  3770  001504  000A               	tblrd		*-
  3771  001506  CFF5 F079          	movff	tablat,___ftmul@f2+2
  3772  00150A  ECFF  F013         	call	___ftmul	;wreg free
  3773  00150E  C074  F083         	movff	?___ftmul,?_scale
  3774  001512  C075  F084         	movff	?___ftmul+1,?_scale+1
  3775  001516  C076  F085         	movff	?___ftmul+2,?_scale+2
  3776  00151A  0012               	return	
  3777  00151C                     l152:
  3778                           
  3779                           ;doprnt.c: 434: return _npowers_[scl];
  3780  00151C  0100               	movlb	0	; () banked
  3781  00151E  5189               	movf	scale@scl& (0+255),w,b
  3782  001520  0D03               	mullw	3
  3783  001522  0E50               	movlw	low __npowers_
  3784  001524  24F3               	addwf	prodl,w,c
  3785  001526  6EF6               	movwf	tblptrl,c
  3786  001528  0E08               	movlw	high __npowers_
  3787  00152A  20F4               	addwfc	prodh,w,c
  3788  00152C  6EF7               	movwf	tblptrh,c
  3789  00152E                     	if	0	;There are less than 3 active tblptr bytes
  3790  00152E                     	endif
  3791  00152E  0009               	tblrd		*+
  3792  001530  CFF5 F083          	movff	tablat,?_scale
  3793  001534  0009               	tblrd		*+
  3794  001536  CFF5 F084          	movff	tablat,?_scale+1
  3795  00153A  000A               	tblrd		*-
  3796  00153C  CFF5 F085          	movff	tablat,?_scale+2
  3797                           
  3798                           ; BSR set to: 0
  3799  001540  0012               	return	
  3800  001542                     l148:
  3801                           
  3802                           ; BSR set to: 0
  3803                           ;doprnt.c: 435: }
  3804                           ;doprnt.c: 436: if(scl>=110)
  3805                           
  3806                           ; BSR set to: 0
  3807  001542  5189               	movf	scale@scl& (0+255),w,b
  3808  001544  0A80               	xorlw	128
  3809  001546  0F12               	addlw	-238
  3810  001548  A0D8               	btfss	status,0,c
  3811  00154A  D097               	goto	l153
  3812                           
  3813                           ; BSR set to: 0
  3814                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3815  00154C  0E00               	movlw	0
  3816  00154E  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3817  001550  0E03               	movlw	3
  3818  001552  6F70               	movwf	___wmul@multiplicand& (0+255),b
  3819  001554  0E00               	movlw	0
  3820  001556  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  3821  001558  0E0A               	movlw	10
  3822  00155A  6F68               	movwf	___awdiv@divisor& (0+255),b
  3823  00155C  0E00               	movlw	0
  3824  00155E  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  3825  001560  0E64               	movlw	100
  3826  001562  6F62               	movwf	___awmod@divisor& (0+255),b
  3827  001564  5189               	movf	scale@scl& (0+255),w,b
  3828  001566  6F60               	movwf	___awmod@dividend& (0+255),b
  3829  001568  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  3830  00156A  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  3831  00156C  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  3832  00156E  EC58  F017         	call	___awmod	;wreg free
  3833  001572  C060  F066         	movff	?___awmod,___awdiv@dividend
  3834  001576  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
  3835  00157A  ECD3  F016         	call	___awdiv	;wreg free
  3836  00157E  0E09               	movlw	9
  3837  001580  0100               	movlb	0	; () banked
  3838  001582  2566               	addwf	?___awdiv& (0+255),w,b
  3839  001584  6F6E               	movwf	___wmul@multiplier& (0+255),b
  3840  001586  0E00               	movlw	0
  3841  001588  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  3842  00158A  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  3843  00158C  EC8F  F018         	call	___wmul	;wreg free
  3844  001590  0E29               	movlw	low __powers_
  3845  001592  0100               	movlb	0	; () banked
  3846  001594  256E               	addwf	?___wmul& (0+255),w,b
  3847  001596  6EF6               	movwf	tblptrl,c
  3848  001598  0E08               	movlw	high __powers_
  3849  00159A  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  3850  00159C  6EF7               	movwf	tblptrh,c
  3851  00159E                     	if	0	;There are less than 3 active tblptr bytes
  3852  00159E                     	endif
  3853  00159E  0009               	tblrd		*+
  3854  0015A0  CFF5 F077          	movff	tablat,___ftmul@f2
  3855  0015A4  0009               	tblrd		*+
  3856  0015A6  CFF5 F078          	movff	tablat,___ftmul@f2+1
  3857  0015AA  000A               	tblrd		*-
  3858  0015AC  CFF5 F079          	movff	tablat,___ftmul@f2+2
  3859  0015B0  0E00               	movlw	0
  3860  0015B2  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  3861  0015B4  0E64               	movlw	100
  3862  0015B6  6F68               	movwf	___awdiv@divisor& (0+255),b
  3863  0015B8  5189               	movf	scale@scl& (0+255),w,b
  3864  0015BA  6F66               	movwf	___awdiv@dividend& (0+255),b
  3865  0015BC  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  3866  0015BE  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  3867  0015C0  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  3868  0015C2  ECD3  F016         	call	___awdiv	;wreg free
  3869  0015C6  0E12               	movlw	18
  3870  0015C8  0100               	movlb	0	; () banked
  3871  0015CA  2566               	addwf	?___awdiv& (0+255),w,b
  3872  0015CC  6F6E               	movwf	___wmul@multiplier& (0+255),b
  3873  0015CE  0E00               	movlw	0
  3874  0015D0  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  3875  0015D2  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  3876  0015D4  0E00               	movlw	0
  3877  0015D6  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3878  0015D8  0E03               	movlw	3
  3879  0015DA  6F70               	movwf	___wmul@multiplicand& (0+255),b
  3880  0015DC  EC8F  F018         	call	___wmul	;wreg free
  3881  0015E0  0E29               	movlw	low __powers_
  3882  0015E2  0100               	movlb	0	; () banked
  3883  0015E4  256E               	addwf	?___wmul& (0+255),w,b
  3884  0015E6  6EF6               	movwf	tblptrl,c
  3885  0015E8  0E08               	movlw	high __powers_
  3886  0015EA  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  3887  0015EC  6EF7               	movwf	tblptrh,c
  3888  0015EE                     	if	0	;There are less than 3 active tblptr bytes
  3889  0015EE                     	endif
  3890  0015EE  0009               	tblrd		*+
  3891  0015F0  CFF5 F074          	movff	tablat,___ftmul@f1
  3892  0015F4  0009               	tblrd		*+
  3893  0015F6  CFF5 F075          	movff	tablat,___ftmul@f1+1
  3894  0015FA  000A               	tblrd		*-
  3895  0015FC  CFF5 F076          	movff	tablat,___ftmul@f1+2
  3896  001600  ECFF  F013         	call	___ftmul	;wreg free
  3897  001604  C074  F086         	movff	?___ftmul,_scale$1356
  3898  001608  C075  F087         	movff	?___ftmul+1,_scale$1356+1
  3899  00160C  C076  F088         	movff	?___ftmul+2,_scale$1356+2
  3900                           
  3901                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3902  001610  C086  F074         	movff	_scale$1356,___ftmul@f1
  3903  001614  C087  F075         	movff	_scale$1356+1,___ftmul@f1+1
  3904  001618  C088  F076         	movff	_scale$1356+2,___ftmul@f1+2
  3905  00161C  0E00               	movlw	0
  3906  00161E  0100               	movlb	0	; () banked
  3907  001620  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3908  001622  0E03               	movlw	3
  3909  001624  6F70               	movwf	___wmul@multiplicand& (0+255),b
  3910  001626  0E00               	movlw	0
  3911  001628  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  3912  00162A  0E0A               	movlw	10
  3913  00162C  6F62               	movwf	___awmod@divisor& (0+255),b
  3914  00162E  5189               	movf	scale@scl& (0+255),w,b
  3915  001630  6F60               	movwf	___awmod@dividend& (0+255),b
  3916  001632  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  3917  001634  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  3918  001636  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  3919  001638  EC58  F017         	call	___awmod	;wreg free
  3920  00163C  C060  F06E         	movff	?___awmod,___wmul@multiplier
  3921  001640  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  3922  001644  EC8F  F018         	call	___wmul	;wreg free
  3923  001648  0E29               	movlw	low __powers_
  3924  00164A  0100               	movlb	0	; () banked
  3925  00164C  256E               	addwf	?___wmul& (0+255),w,b
  3926  00164E  6EF6               	movwf	tblptrl,c
  3927  001650  0E08               	movlw	high __powers_
  3928  001652  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  3929  001654  6EF7               	movwf	tblptrh,c
  3930  001656                     	if	0	;There are less than 3 active tblptr bytes
  3931  001656                     	endif
  3932  001656  0009               	tblrd		*+
  3933  001658  CFF5 F077          	movff	tablat,___ftmul@f2
  3934  00165C  0009               	tblrd		*+
  3935  00165E  CFF5 F078          	movff	tablat,___ftmul@f2+1
  3936  001662  000A               	tblrd		*-
  3937  001664  CFF5 F079          	movff	tablat,___ftmul@f2+2
  3938  001668  ECFF  F013         	call	___ftmul	;wreg free
  3939  00166C  C074  F083         	movff	?___ftmul,?_scale
  3940  001670  C075  F084         	movff	?___ftmul+1,?_scale+1
  3941  001674  C076  F085         	movff	?___ftmul+2,?_scale+2
  3942  001678  0012               	return	
  3943  00167A                     l153:
  3944                           
  3945                           ;doprnt.c: 438: else if(scl > 10)
  3946  00167A  0100               	movlb	0	; () banked
  3947  00167C  5189               	movf	scale@scl& (0+255),w,b
  3948  00167E  0A80               	xorlw	128
  3949  001680  0F75               	addlw	-139
  3950  001682  A0D8               	btfss	status,0,c
  3951  001684  D056               	goto	l155
  3952                           
  3953                           ; BSR set to: 0
  3954                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3955  001686  0E00               	movlw	0
  3956  001688  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  3957  00168A  0E0A               	movlw	10
  3958  00168C  6F68               	movwf	___awdiv@divisor& (0+255),b
  3959  00168E  5189               	movf	scale@scl& (0+255),w,b
  3960  001690  6F66               	movwf	___awdiv@dividend& (0+255),b
  3961  001692  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  3962  001694  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  3963  001696  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  3964  001698  ECD3  F016         	call	___awdiv	;wreg free
  3965  00169C  0E09               	movlw	9
  3966  00169E  0100               	movlb	0	; () banked
  3967  0016A0  2566               	addwf	?___awdiv& (0+255),w,b
  3968  0016A2  6F6E               	movwf	___wmul@multiplier& (0+255),b
  3969  0016A4  0E00               	movlw	0
  3970  0016A6  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  3971  0016A8  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  3972  0016AA  0E00               	movlw	0
  3973  0016AC  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3974  0016AE  0E03               	movlw	3
  3975  0016B0  6F70               	movwf	___wmul@multiplicand& (0+255),b
  3976  0016B2  EC8F  F018         	call	___wmul	;wreg free
  3977  0016B6  0E29               	movlw	low __powers_
  3978  0016B8  0100               	movlb	0	; () banked
  3979  0016BA  256E               	addwf	?___wmul& (0+255),w,b
  3980  0016BC  6EF6               	movwf	tblptrl,c
  3981  0016BE  0E08               	movlw	high __powers_
  3982  0016C0  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  3983  0016C2  6EF7               	movwf	tblptrh,c
  3984  0016C4                     	if	0	;There are less than 3 active tblptr bytes
  3985  0016C4                     	endif
  3986  0016C4  0009               	tblrd		*+
  3987  0016C6  CFF5 F074          	movff	tablat,___ftmul@f1
  3988  0016CA  0009               	tblrd		*+
  3989  0016CC  CFF5 F075          	movff	tablat,___ftmul@f1+1
  3990  0016D0  000A               	tblrd		*-
  3991  0016D2  CFF5 F076          	movff	tablat,___ftmul@f1+2
  3992  0016D6  0E00               	movlw	0
  3993  0016D8  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3994  0016DA  0E03               	movlw	3
  3995  0016DC  6F70               	movwf	___wmul@multiplicand& (0+255),b
  3996  0016DE  0E00               	movlw	0
  3997  0016E0  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  3998  0016E2  0E0A               	movlw	10
  3999  0016E4  6F62               	movwf	___awmod@divisor& (0+255),b
  4000  0016E6  5189               	movf	scale@scl& (0+255),w,b
  4001  0016E8  6F60               	movwf	___awmod@dividend& (0+255),b
  4002  0016EA  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4003  0016EC  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  4004  0016EE  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  4005  0016F0  EC58  F017         	call	___awmod	;wreg free
  4006  0016F4  C060  F06E         	movff	?___awmod,___wmul@multiplier
  4007  0016F8  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  4008  0016FC  EC8F  F018         	call	___wmul	;wreg free
  4009  001700  0E29               	movlw	low __powers_
  4010  001702  0100               	movlb	0	; () banked
  4011  001704  256E               	addwf	?___wmul& (0+255),w,b
  4012  001706  6EF6               	movwf	tblptrl,c
  4013  001708  0E08               	movlw	high __powers_
  4014  00170A  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4015  00170C  6EF7               	movwf	tblptrh,c
  4016  00170E                     	if	0	;There are less than 3 active tblptr bytes
  4017  00170E                     	endif
  4018  00170E  0009               	tblrd		*+
  4019  001710  CFF5 F077          	movff	tablat,___ftmul@f2
  4020  001714  0009               	tblrd		*+
  4021  001716  CFF5 F078          	movff	tablat,___ftmul@f2+1
  4022  00171A  000A               	tblrd		*-
  4023  00171C  CFF5 F079          	movff	tablat,___ftmul@f2+2
  4024  001720  ECFF  F013         	call	___ftmul	;wreg free
  4025  001724  C074  F083         	movff	?___ftmul,?_scale
  4026  001728  C075  F084         	movff	?___ftmul+1,?_scale+1
  4027  00172C  C076  F085         	movff	?___ftmul+2,?_scale+2
  4028  001730  0012               	return	
  4029  001732                     l155:
  4030                           
  4031                           ;doprnt.c: 440: return _powers_[scl];
  4032  001732  0100               	movlb	0	; () banked
  4033  001734  5189               	movf	scale@scl& (0+255),w,b
  4034  001736  0D03               	mullw	3
  4035  001738  0E29               	movlw	low __powers_
  4036  00173A  24F3               	addwf	prodl,w,c
  4037  00173C  6EF6               	movwf	tblptrl,c
  4038  00173E  0E08               	movlw	high __powers_
  4039  001740  20F4               	addwfc	prodh,w,c
  4040  001742  6EF7               	movwf	tblptrh,c
  4041  001744                     	if	0	;There are less than 3 active tblptr bytes
  4042  001744                     	endif
  4043  001744  0009               	tblrd		*+
  4044  001746  CFF5 F083          	movff	tablat,?_scale
  4045  00174A  0009               	tblrd		*+
  4046  00174C  CFF5 F084          	movff	tablat,?_scale+1
  4047  001750  000A               	tblrd		*-
  4048  001752  CFF5 F085          	movff	tablat,?_scale+2
  4049  001756  0012               	return	
  4050  001758                     __end_of_scale:
  4051                           	opt stack 0
  4052                           tblptru	equ	0xFF8
  4053                           tblptrh	equ	0xFF7
  4054                           tblptrl	equ	0xFF6
  4055                           tablat	equ	0xFF5
  4056                           prodh	equ	0xFF4
  4057                           prodl	equ	0xFF3
  4058                           postinc0	equ	0xFEE
  4059                           wreg	equ	0xFE8
  4060                           indf2	equ	0xFDF
  4061                           postinc2	equ	0xFDE
  4062                           postdec2	equ	0xFDD
  4063                           fsr2h	equ	0xFDA
  4064                           fsr2l	equ	0xFD9
  4065                           status	equ	0xFD8
  4066                           
  4067 ;; *************** function _isdigit *****************
  4068 ;; Defined at:
  4069 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  4070 ;; Parameters:    Size  Location     Type
  4071 ;;  c               1    wreg     unsigned char 
  4072 ;; Auto vars:     Size  Location     Type
  4073 ;;  c               1    2[BANK0 ] unsigned char 
  4074 ;; Return value:  Size  Location     Type
  4075 ;;		None               void
  4076 ;; Registers used:
  4077 ;;		wreg, status,2, status,0
  4078 ;; Tracked objects:
  4079 ;;		On entry : 0/0
  4080 ;;		On exit  : 0/0
  4081 ;;		Unchanged: 0/0
  4082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4083 ;;      Params:         0       0       0       0       0       0       0       0       0
  4084 ;;      Locals:         0       2       0       0       0       0       0       0       0
  4085 ;;      Temps:          0       1       0       0       0       0       0       0       0
  4086 ;;      Totals:         0       3       0       0       0       0       0       0       0
  4087 ;;Total ram usage:        3 bytes
  4088 ;; Hardware stack levels used:    1
  4089 ;; Hardware stack levels required when called:    3
  4090 ;; This function calls:
  4091 ;;		Nothing
  4092 ;; This function is called by:
  4093 ;;		_sprintf
  4094 ;; This function uses a non-reentrant model
  4095 ;;
  4096                           
  4097                           	psect	text4
  4098  0031B6                     __ptext4:
  4099                           	opt stack 0
  4100  0031B6                     _isdigit:
  4101                           	opt stack 26
  4102                           
  4103                           ;incstack = 0
  4104                           ;isdigit@c stored from wreg
  4105  0031B6  0100               	movlb	0	; () banked
  4106  0031B8  6F62               	movwf	isdigit@c& (0+255),b
  4107  0031BA  0E00               	movlw	0
  4108  0031BC  0100               	movlb	0	; () banked
  4109  0031BE  6F61               	movwf	_isdigit$1004& (0+255),b
  4110                           
  4111                           ; BSR set to: 0
  4112  0031C0  0E3A               	movlw	58
  4113  0031C2  6162               	cpfslt	isdigit@c& (0+255),b
  4114  0031C4  D005               	goto	l624
  4115                           
  4116                           ; BSR set to: 0
  4117  0031C6  0E2F               	movlw	47
  4118  0031C8  6562               	cpfsgt	isdigit@c& (0+255),b
  4119  0031CA  D002               	goto	l624
  4120                           
  4121                           ; BSR set to: 0
  4122  0031CC  0E01               	movlw	1
  4123  0031CE  6F61               	movwf	_isdigit$1004& (0+255),b
  4124  0031D0                     l624:
  4125                           
  4126                           ; BSR set to: 0
  4127                           
  4128                           ; BSR set to: 0
  4129  0031D0  C061  F060         	movff	_isdigit$1004,??_isdigit
  4130  0031D4  3160               	rrcf	??_isdigit& (0+255),w,b
  4131  0031D6  0012               	return	
  4132  0031D8                     __end_of_isdigit:
  4133                           	opt stack 0
  4134                           tblptru	equ	0xFF8
  4135                           tblptrh	equ	0xFF7
  4136                           tblptrl	equ	0xFF6
  4137                           tablat	equ	0xFF5
  4138                           prodh	equ	0xFF4
  4139                           prodl	equ	0xFF3
  4140                           postinc0	equ	0xFEE
  4141                           wreg	equ	0xFE8
  4142                           indf2	equ	0xFDF
  4143                           postinc2	equ	0xFDE
  4144                           postdec2	equ	0xFDD
  4145                           fsr2h	equ	0xFDA
  4146                           fsr2l	equ	0xFD9
  4147                           status	equ	0xFD8
  4148                           
  4149 ;; *************** function _fround *****************
  4150 ;; Defined at:
  4151 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  4152 ;; Parameters:    Size  Location     Type
  4153 ;;  prec            1    wreg     unsigned char 
  4154 ;; Auto vars:     Size  Location     Type
  4155 ;;  prec            1   44[BANK0 ] unsigned char 
  4156 ;; Return value:  Size  Location     Type
  4157 ;;                  3   35[BANK0 ] unsigned char 
  4158 ;; Registers used:
  4159 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4160 ;; Tracked objects:
  4161 ;;		On entry : 0/0
  4162 ;;		On exit  : 0/0
  4163 ;;		Unchanged: 0/0
  4164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4165 ;;      Params:         0       3       0       0       0       0       0       0       0
  4166 ;;      Locals:         0       7       0       0       0       0       0       0       0
  4167 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4168 ;;      Totals:         0      10       0       0       0       0       0       0       0
  4169 ;;Total ram usage:       10 bytes
  4170 ;; Hardware stack levels used:    1
  4171 ;; Hardware stack levels required when called:    5
  4172 ;; This function calls:
  4173 ;;		___awdiv
  4174 ;;		___awmod
  4175 ;;		___ftmul
  4176 ;;		___wmul
  4177 ;; This function is called by:
  4178 ;;		_sprintf
  4179 ;; This function uses a non-reentrant model
  4180 ;;
  4181                           
  4182                           	psect	text5
  4183  001A4C                     __ptext5:
  4184                           	opt stack 0
  4185  001A4C                     _fround:
  4186                           	opt stack 24
  4187                           
  4188                           ; BSR set to: 0
  4189                           ;incstack = 0
  4190                           ;fround@prec stored from wreg
  4191  001A4C  0100               	movlb	0	; () banked
  4192  001A4E  6F8C               	movwf	fround@prec& (0+255),b
  4193                           
  4194                           ;doprnt.c: 413: if(prec>=110)
  4195  001A50  0E6D               	movlw	109
  4196  001A52  0100               	movlb	0	; () banked
  4197  001A54  658C               	cpfsgt	fround@prec& (0+255),b
  4198  001A56  D0A6               	goto	l142
  4199                           
  4200                           ; BSR set to: 0
  4201                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4202  001A58  0E00               	movlw	0
  4203  001A5A  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4204  001A5C  0E03               	movlw	3
  4205  001A5E  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4206  001A60  0E00               	movlw	0
  4207  001A62  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  4208  001A64  0E0A               	movlw	10
  4209  001A66  6F68               	movwf	___awdiv@divisor& (0+255),b
  4210  001A68  0E00               	movlw	0
  4211  001A6A  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4212  001A6C  0E64               	movlw	100
  4213  001A6E  6F62               	movwf	___awmod@divisor& (0+255),b
  4214  001A70  C08C  F060         	movff	fround@prec,___awmod@dividend
  4215  001A74  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4216  001A76  EC58  F017         	call	___awmod	;wreg free
  4217  001A7A  C060  F066         	movff	?___awmod,___awdiv@dividend
  4218  001A7E  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
  4219  001A82  ECD3  F016         	call	___awdiv	;wreg free
  4220  001A86  0E09               	movlw	9
  4221  001A88  0100               	movlb	0	; () banked
  4222  001A8A  2566               	addwf	?___awdiv& (0+255),w,b
  4223  001A8C  6F6E               	movwf	___wmul@multiplier& (0+255),b
  4224  001A8E  0E00               	movlw	0
  4225  001A90  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  4226  001A92  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4227  001A94  EC8F  F018         	call	___wmul	;wreg free
  4228  001A98  0E50               	movlw	low __npowers_
  4229  001A9A  0100               	movlb	0	; () banked
  4230  001A9C  256E               	addwf	?___wmul& (0+255),w,b
  4231  001A9E  6EF6               	movwf	tblptrl,c
  4232  001AA0  0E08               	movlw	high __npowers_
  4233  001AA2  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4234  001AA4  6EF7               	movwf	tblptrh,c
  4235  001AA6                     	if	0	;There are less than 3 active tblptr bytes
  4236  001AA6                     	endif
  4237  001AA6  0009               	tblrd		*+
  4238  001AA8  CFF5 F077          	movff	tablat,___ftmul@f2
  4239  001AAC  0009               	tblrd		*+
  4240  001AAE  CFF5 F078          	movff	tablat,___ftmul@f2+1
  4241  001AB2  000A               	tblrd		*-
  4242  001AB4  CFF5 F079          	movff	tablat,___ftmul@f2+2
  4243  001AB8  0E00               	movlw	0
  4244  001ABA  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  4245  001ABC  0E64               	movlw	100
  4246  001ABE  6F68               	movwf	___awdiv@divisor& (0+255),b
  4247  001AC0  C08C  F066         	movff	fround@prec,___awdiv@dividend
  4248  001AC4  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  4249  001AC6  ECD3  F016         	call	___awdiv	;wreg free
  4250  001ACA  0E12               	movlw	18
  4251  001ACC  0100               	movlb	0	; () banked
  4252  001ACE  2566               	addwf	?___awdiv& (0+255),w,b
  4253  001AD0  6F6E               	movwf	___wmul@multiplier& (0+255),b
  4254  001AD2  0E00               	movlw	0
  4255  001AD4  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  4256  001AD6  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4257  001AD8  0E00               	movlw	0
  4258  001ADA  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4259  001ADC  0E03               	movlw	3
  4260  001ADE  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4261  001AE0  EC8F  F018         	call	___wmul	;wreg free
  4262  001AE4  0E50               	movlw	low __npowers_
  4263  001AE6  0100               	movlb	0	; () banked
  4264  001AE8  256E               	addwf	?___wmul& (0+255),w,b
  4265  001AEA  6EF6               	movwf	tblptrl,c
  4266  001AEC  0E08               	movlw	high __npowers_
  4267  001AEE  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4268  001AF0  6EF7               	movwf	tblptrh,c
  4269  001AF2                     	if	0	;There are less than 3 active tblptr bytes
  4270  001AF2                     	endif
  4271  001AF2  0009               	tblrd		*+
  4272  001AF4  CFF5 F074          	movff	tablat,___ftmul@f1
  4273  001AF8  0009               	tblrd		*+
  4274  001AFA  CFF5 F075          	movff	tablat,___ftmul@f1+1
  4275  001AFE  000A               	tblrd		*-
  4276  001B00  CFF5 F076          	movff	tablat,___ftmul@f1+2
  4277  001B04  ECFF  F013         	call	___ftmul	;wreg free
  4278  001B08  C074  F089         	movff	?___ftmul,_fround$1354
  4279  001B0C  C075  F08A         	movff	?___ftmul+1,_fround$1354+1
  4280  001B10  C076  F08B         	movff	?___ftmul+2,_fround$1354+2
  4281                           
  4282                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4283  001B14  0E00               	movlw	0
  4284  001B16  0100               	movlb	0	; () banked
  4285  001B18  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4286  001B1A  0E03               	movlw	3
  4287  001B1C  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4288  001B1E  0E00               	movlw	0
  4289  001B20  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4290  001B22  0E0A               	movlw	10
  4291  001B24  6F62               	movwf	___awmod@divisor& (0+255),b
  4292  001B26  C08C  F060         	movff	fround@prec,___awmod@dividend
  4293  001B2A  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4294  001B2C  EC58  F017         	call	___awmod	;wreg free
  4295  001B30  C060  F06E         	movff	?___awmod,___wmul@multiplier
  4296  001B34  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  4297  001B38  EC8F  F018         	call	___wmul	;wreg free
  4298  001B3C  0E50               	movlw	low __npowers_
  4299  001B3E  0100               	movlb	0	; () banked
  4300  001B40  256E               	addwf	?___wmul& (0+255),w,b
  4301  001B42  6EF6               	movwf	tblptrl,c
  4302  001B44  0E08               	movlw	high __npowers_
  4303  001B46  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4304  001B48  6EF7               	movwf	tblptrh,c
  4305  001B4A                     	if	0	;There are less than 3 active tblptr bytes
  4306  001B4A                     	endif
  4307  001B4A  0009               	tblrd		*+
  4308  001B4C  CFF5 F077          	movff	tablat,___ftmul@f2
  4309  001B50  0009               	tblrd		*+
  4310  001B52  CFF5 F078          	movff	tablat,___ftmul@f2+1
  4311  001B56  000A               	tblrd		*-
  4312  001B58  CFF5 F079          	movff	tablat,___ftmul@f2+2
  4313  001B5C  C089  F074         	movff	_fround$1354,___ftmul@f1
  4314  001B60  C08A  F075         	movff	_fround$1354+1,___ftmul@f1+1
  4315  001B64  C08B  F076         	movff	_fround$1354+2,___ftmul@f1+2
  4316  001B68  ECFF  F013         	call	___ftmul	;wreg free
  4317  001B6C  C074  F086         	movff	?___ftmul,_fround$1355
  4318  001B70  C075  F087         	movff	?___ftmul+1,_fround$1355+1
  4319  001B74  C076  F088         	movff	?___ftmul+2,_fround$1355+2
  4320                           
  4321                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4322  001B78  C086  F074         	movff	_fround$1355,___ftmul@f1
  4323  001B7C  C087  F075         	movff	_fround$1355+1,___ftmul@f1+1
  4324  001B80  C088  F076         	movff	_fround$1355+2,___ftmul@f1+2
  4325  001B84  0E00               	movlw	0
  4326  001B86  0100               	movlb	0	; () banked
  4327  001B88  6F77               	movwf	___ftmul@f2& (0+255),b
  4328  001B8A  0E00               	movlw	0
  4329  001B8C  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  4330  001B8E  0E3F               	movlw	63
  4331  001B90  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  4332  001B92  ECFF  F013         	call	___ftmul	;wreg free
  4333  001B96  C074  F083         	movff	?___ftmul,?_fround
  4334  001B9A  C075  F084         	movff	?___ftmul+1,?_fround+1
  4335  001B9E  C076  F085         	movff	?___ftmul+2,?_fround+2
  4336  001BA2  0012               	return	
  4337  001BA4                     l142:
  4338                           
  4339                           ;doprnt.c: 415: else if(prec > 10)
  4340  001BA4  0E0A               	movlw	10
  4341  001BA6  0100               	movlb	0	; () banked
  4342  001BA8  658C               	cpfsgt	fround@prec& (0+255),b
  4343  001BAA  D067               	goto	l145
  4344                           
  4345                           ; BSR set to: 0
  4346                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4347  001BAC  0E00               	movlw	0
  4348  001BAE  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4349  001BB0  0E03               	movlw	3
  4350  001BB2  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4351  001BB4  0E00               	movlw	0
  4352  001BB6  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4353  001BB8  0E0A               	movlw	10
  4354  001BBA  6F62               	movwf	___awmod@divisor& (0+255),b
  4355  001BBC  C08C  F060         	movff	fround@prec,___awmod@dividend
  4356  001BC0  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4357  001BC2  EC58  F017         	call	___awmod	;wreg free
  4358  001BC6  C060  F06E         	movff	?___awmod,___wmul@multiplier
  4359  001BCA  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  4360  001BCE  EC8F  F018         	call	___wmul	;wreg free
  4361  001BD2  0E50               	movlw	low __npowers_
  4362  001BD4  0100               	movlb	0	; () banked
  4363  001BD6  256E               	addwf	?___wmul& (0+255),w,b
  4364  001BD8  6EF6               	movwf	tblptrl,c
  4365  001BDA  0E08               	movlw	high __npowers_
  4366  001BDC  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4367  001BDE  6EF7               	movwf	tblptrh,c
  4368  001BE0                     	if	0	;There are less than 3 active tblptr bytes
  4369  001BE0                     	endif
  4370  001BE0  0009               	tblrd		*+
  4371  001BE2  CFF5 F077          	movff	tablat,___ftmul@f2
  4372  001BE6  0009               	tblrd		*+
  4373  001BE8  CFF5 F078          	movff	tablat,___ftmul@f2+1
  4374  001BEC  000A               	tblrd		*-
  4375  001BEE  CFF5 F079          	movff	tablat,___ftmul@f2+2
  4376  001BF2  0E00               	movlw	0
  4377  001BF4  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  4378  001BF6  0E0A               	movlw	10
  4379  001BF8  6F68               	movwf	___awdiv@divisor& (0+255),b
  4380  001BFA  C08C  F066         	movff	fround@prec,___awdiv@dividend
  4381  001BFE  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  4382  001C00  ECD3  F016         	call	___awdiv	;wreg free
  4383  001C04  0E09               	movlw	9
  4384  001C06  0100               	movlb	0	; () banked
  4385  001C08  2566               	addwf	?___awdiv& (0+255),w,b
  4386  001C0A  6F6E               	movwf	___wmul@multiplier& (0+255),b
  4387  001C0C  0E00               	movlw	0
  4388  001C0E  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  4389  001C10  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4390  001C12  0E00               	movlw	0
  4391  001C14  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4392  001C16  0E03               	movlw	3
  4393  001C18  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4394  001C1A  EC8F  F018         	call	___wmul	;wreg free
  4395  001C1E  0E50               	movlw	low __npowers_
  4396  001C20  0100               	movlb	0	; () banked
  4397  001C22  256E               	addwf	?___wmul& (0+255),w,b
  4398  001C24  6EF6               	movwf	tblptrl,c
  4399  001C26  0E08               	movlw	high __npowers_
  4400  001C28  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4401  001C2A  6EF7               	movwf	tblptrh,c
  4402  001C2C                     	if	0	;There are less than 3 active tblptr bytes
  4403  001C2C                     	endif
  4404  001C2C  0009               	tblrd		*+
  4405  001C2E  CFF5 F074          	movff	tablat,___ftmul@f1
  4406  001C32  0009               	tblrd		*+
  4407  001C34  CFF5 F075          	movff	tablat,___ftmul@f1+1
  4408  001C38  000A               	tblrd		*-
  4409  001C3A  CFF5 F076          	movff	tablat,___ftmul@f1+2
  4410  001C3E  ECFF  F013         	call	___ftmul	;wreg free
  4411  001C42  C074  F089         	movff	?___ftmul,_fround$1354
  4412  001C46  C075  F08A         	movff	?___ftmul+1,_fround$1354+1
  4413  001C4A  C076  F08B         	movff	?___ftmul+2,_fround$1354+2
  4414                           
  4415                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4416  001C4E  C089  F074         	movff	_fround$1354,___ftmul@f1
  4417  001C52  C08A  F075         	movff	_fround$1354+1,___ftmul@f1+1
  4418  001C56  C08B  F076         	movff	_fround$1354+2,___ftmul@f1+2
  4419  001C5A  0E00               	movlw	0
  4420  001C5C  0100               	movlb	0	; () banked
  4421  001C5E  6F77               	movwf	___ftmul@f2& (0+255),b
  4422  001C60  0E00               	movlw	0
  4423  001C62  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  4424  001C64  0E3F               	movlw	63
  4425  001C66  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  4426  001C68  ECFF  F013         	call	___ftmul	;wreg free
  4427  001C6C  C074  F083         	movff	?___ftmul,?_fround
  4428  001C70  C075  F084         	movff	?___ftmul+1,?_fround+1
  4429  001C74  C076  F085         	movff	?___ftmul+2,?_fround+2
  4430  001C78  0012               	return	
  4431  001C7A                     l145:
  4432                           
  4433                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  4434  001C7A  0100               	movlb	0	; () banked
  4435  001C7C  518C               	movf	fround@prec& (0+255),w,b
  4436  001C7E  0D03               	mullw	3
  4437  001C80  0E50               	movlw	low __npowers_
  4438  001C82  24F3               	addwf	prodl,w,c
  4439  001C84  6EF6               	movwf	tblptrl,c
  4440  001C86  0E08               	movlw	high __npowers_
  4441  001C88  20F4               	addwfc	prodh,w,c
  4442  001C8A  6EF7               	movwf	tblptrh,c
  4443  001C8C                     	if	0	;There are less than 3 active tblptr bytes
  4444  001C8C                     	endif
  4445  001C8C  0009               	tblrd		*+
  4446  001C8E  CFF5 F074          	movff	tablat,___ftmul@f1
  4447  001C92  0009               	tblrd		*+
  4448  001C94  CFF5 F075          	movff	tablat,___ftmul@f1+1
  4449  001C98  000A               	tblrd		*-
  4450  001C9A  CFF5 F076          	movff	tablat,___ftmul@f1+2
  4451  001C9E  0E00               	movlw	0
  4452  001CA0  6F77               	movwf	___ftmul@f2& (0+255),b
  4453  001CA2  0E00               	movlw	0
  4454  001CA4  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  4455  001CA6  0E3F               	movlw	63
  4456  001CA8  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  4457  001CAA  ECFF  F013         	call	___ftmul	;wreg free
  4458  001CAE  C074  F083         	movff	?___ftmul,?_fround
  4459  001CB2  C075  F084         	movff	?___ftmul+1,?_fround+1
  4460  001CB6  C076  F085         	movff	?___ftmul+2,?_fround+2
  4461  001CBA  0012               	return	
  4462  001CBC                     __end_of_fround:
  4463                           	opt stack 0
  4464                           tblptru	equ	0xFF8
  4465                           tblptrh	equ	0xFF7
  4466                           tblptrl	equ	0xFF6
  4467                           tablat	equ	0xFF5
  4468                           prodh	equ	0xFF4
  4469                           prodl	equ	0xFF3
  4470                           postinc0	equ	0xFEE
  4471                           wreg	equ	0xFE8
  4472                           indf2	equ	0xFDF
  4473                           postinc2	equ	0xFDE
  4474                           postdec2	equ	0xFDD
  4475                           fsr2h	equ	0xFDA
  4476                           fsr2l	equ	0xFD9
  4477                           status	equ	0xFD8
  4478                           
  4479 ;; *************** function ___wmul *****************
  4480 ;; Defined at:
  4481 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  4482 ;; Parameters:    Size  Location     Type
  4483 ;;  multiplier      2   14[BANK0 ] unsigned int 
  4484 ;;  multiplicand    2   16[BANK0 ] unsigned int 
  4485 ;; Auto vars:     Size  Location     Type
  4486 ;;  product         2   18[BANK0 ] unsigned int 
  4487 ;; Return value:  Size  Location     Type
  4488 ;;                  2   14[BANK0 ] unsigned int 
  4489 ;; Registers used:
  4490 ;;		wreg, status,2, status,0, prodl, prodh
  4491 ;; Tracked objects:
  4492 ;;		On entry : 0/0
  4493 ;;		On exit  : 0/0
  4494 ;;		Unchanged: 0/0
  4495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4496 ;;      Params:         0       4       0       0       0       0       0       0       0
  4497 ;;      Locals:         0       2       0       0       0       0       0       0       0
  4498 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4499 ;;      Totals:         0       6       0       0       0       0       0       0       0
  4500 ;;Total ram usage:        6 bytes
  4501 ;; Hardware stack levels used:    1
  4502 ;; Hardware stack levels required when called:    3
  4503 ;; This function calls:
  4504 ;;		Nothing
  4505 ;; This function is called by:
  4506 ;;		_fround
  4507 ;;		_scale
  4508 ;;		_sprintf
  4509 ;; This function uses a non-reentrant model
  4510 ;;
  4511                           
  4512                           	psect	text6
  4513  00311E                     __ptext6:
  4514                           	opt stack 0
  4515  00311E                     ___wmul:
  4516                           	opt stack 25
  4517                           
  4518                           ;incstack = 0
  4519  00311E  0100               	movlb	0	; () banked
  4520  003120  516E               	movf	___wmul@multiplier& (0+255),w,b
  4521  003122  0370               	mulwf	___wmul@multiplicand& (0+255),b
  4522  003124  CFF3 F072          	movff	prodl,___wmul@product
  4523  003128  CFF4 F073          	movff	prodh,___wmul@product+1
  4524  00312C  516E               	movf	___wmul@multiplier& (0+255),w,b
  4525  00312E  0371               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  4526  003130  50F3               	movf	prodl,w,c
  4527  003132  2773               	addwf	(___wmul@product+1)& (0+255),f,b
  4528  003134  516F               	movf	(___wmul@multiplier+1)& (0+255),w,b
  4529  003136  0370               	mulwf	___wmul@multiplicand& (0+255),b
  4530  003138  50F3               	movf	prodl,w,c
  4531  00313A  2773               	addwf	(___wmul@product+1)& (0+255),f,b
  4532                           
  4533                           ; BSR set to: 0
  4534  00313C  C072  F06E         	movff	___wmul@product,?___wmul
  4535  003140  C073  F06F         	movff	___wmul@product+1,?___wmul+1
  4536  003144  0012               	return	
  4537  003146                     __end_of___wmul:
  4538                           	opt stack 0
  4539                           tblptru	equ	0xFF8
  4540                           tblptrh	equ	0xFF7
  4541                           tblptrl	equ	0xFF6
  4542                           tablat	equ	0xFF5
  4543                           prodh	equ	0xFF4
  4544                           prodl	equ	0xFF3
  4545                           postinc0	equ	0xFEE
  4546                           wreg	equ	0xFE8
  4547                           indf2	equ	0xFDF
  4548                           postinc2	equ	0xFDE
  4549                           postdec2	equ	0xFDD
  4550                           fsr2h	equ	0xFDA
  4551                           fsr2l	equ	0xFD9
  4552                           status	equ	0xFD8
  4553                           
  4554 ;; *************** function ___ftmul *****************
  4555 ;; Defined at:
  4556 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  4557 ;; Parameters:    Size  Location     Type
  4558 ;;  f1              3   20[BANK0 ] float 
  4559 ;;  f2              3   23[BANK0 ] float 
  4560 ;; Auto vars:     Size  Location     Type
  4561 ;;  f3_as_produc    3   30[BANK0 ] unsigned um
  4562 ;;  sign            1   34[BANK0 ] unsigned char 
  4563 ;;  cntr            1   33[BANK0 ] unsigned char 
  4564 ;;  exp             1   29[BANK0 ] unsigned char 
  4565 ;; Return value:  Size  Location     Type
  4566 ;;                  3   20[BANK0 ] float 
  4567 ;; Registers used:
  4568 ;;		wreg, status,2, status,0, cstack
  4569 ;; Tracked objects:
  4570 ;;		On entry : 0/0
  4571 ;;		On exit  : 0/0
  4572 ;;		Unchanged: 0/0
  4573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4574 ;;      Params:         0       6       0       0       0       0       0       0       0
  4575 ;;      Locals:         0       6       0       0       0       0       0       0       0
  4576 ;;      Temps:          0       3       0       0       0       0       0       0       0
  4577 ;;      Totals:         0      15       0       0       0       0       0       0       0
  4578 ;;Total ram usage:       15 bytes
  4579 ;; Hardware stack levels used:    1
  4580 ;; Hardware stack levels required when called:    4
  4581 ;; This function calls:
  4582 ;;		___ftpack
  4583 ;; This function is called by:
  4584 ;;		_main
  4585 ;;		_fround
  4586 ;;		_scale
  4587 ;;		_sprintf
  4588 ;;		_sqrt
  4589 ;; This function uses a non-reentrant model
  4590 ;;
  4591                           
  4592                           	psect	text7
  4593  0027FE                     __ptext7:
  4594                           	opt stack 0
  4595  0027FE                     ___ftmul:
  4596                           	opt stack 25
  4597                           
  4598                           ; BSR set to: 0
  4599                           ;incstack = 0
  4600  0027FE  C076  F07A         	movff	___ftmul@f1+2,??___ftmul
  4601  002802  0100               	movlb	0	; () banked
  4602  002804  6B7B               	clrf	(??___ftmul+1)& (0+255),b
  4603  002806  6B7C               	clrf	(??___ftmul+2)& (0+255),b
  4604  002808  3575               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  4605  00280A  377A               	rlcf	??___ftmul& (0+255),f,b
  4606  00280C  E301               	bnc	u2171
  4607  00280E  817B               	bsf	(??___ftmul+1)& (0+255),0,b
  4608  002810                     u2171:
  4609  002810  517A               	movf	??___ftmul& (0+255),w,b
  4610  002812  6F7D               	movwf	___ftmul@exp& (0+255),b
  4611  002814  517D               	movf	___ftmul@exp& (0+255),w,b
  4612  002816  A4D8               	btfss	status,2,c
  4613  002818  D007               	goto	l588
  4614                           
  4615                           ; BSR set to: 0
  4616  00281A  0E00               	movlw	0
  4617  00281C  6F74               	movwf	?___ftmul& (0+255),b
  4618  00281E  0E00               	movlw	0
  4619  002820  6F75               	movwf	(?___ftmul+1)& (0+255),b
  4620  002822  0E00               	movlw	0
  4621  002824  6F76               	movwf	(?___ftmul+2)& (0+255),b
  4622                           
  4623                           ; BSR set to: 0
  4624  002826  0012               	return	
  4625  002828                     l588:
  4626                           
  4627                           ; BSR set to: 0
  4628                           
  4629                           ; BSR set to: 0
  4630  002828  C079  F07A         	movff	___ftmul@f2+2,??___ftmul
  4631  00282C  6B7B               	clrf	(??___ftmul+1)& (0+255),b
  4632  00282E  6B7C               	clrf	(??___ftmul+2)& (0+255),b
  4633  002830  3578               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  4634  002832  377A               	rlcf	??___ftmul& (0+255),f,b
  4635  002834  E301               	bnc	u2191
  4636  002836  817B               	bsf	(??___ftmul+1)& (0+255),0,b
  4637  002838                     u2191:
  4638  002838  517A               	movf	??___ftmul& (0+255),w,b
  4639  00283A  6F82               	movwf	___ftmul@sign& (0+255),b
  4640  00283C  5182               	movf	___ftmul@sign& (0+255),w,b
  4641  00283E  A4D8               	btfss	status,2,c
  4642  002840  D007               	goto	l590
  4643                           
  4644                           ; BSR set to: 0
  4645  002842  0E00               	movlw	0
  4646  002844  6F74               	movwf	?___ftmul& (0+255),b
  4647  002846  0E00               	movlw	0
  4648  002848  6F75               	movwf	(?___ftmul+1)& (0+255),b
  4649  00284A  0E00               	movlw	0
  4650  00284C  6F76               	movwf	(?___ftmul+2)& (0+255),b
  4651                           
  4652                           ; BSR set to: 0
  4653  00284E  0012               	return	
  4654  002850                     l590:
  4655                           
  4656                           ; BSR set to: 0
  4657                           
  4658                           ; BSR set to: 0
  4659  002850  5182               	movf	___ftmul@sign& (0+255),w,b
  4660  002852  0F7B               	addlw	123
  4661  002854  277D               	addwf	___ftmul@exp& (0+255),f,b
  4662                           
  4663                           ; BSR set to: 0
  4664  002856  C076  F082         	movff	___ftmul@f1+2,___ftmul@sign
  4665  00285A  5179               	movf	(___ftmul@f2+2)& (0+255),w,b
  4666  00285C  1B82               	xorwf	___ftmul@sign& (0+255),f,b
  4667  00285E  0E80               	movlw	128
  4668  002860  1782               	andwf	___ftmul@sign& (0+255),f,b
  4669                           
  4670                           ; BSR set to: 0
  4671  002862  8F75               	bsf	(___ftmul@f1+1)& (0+255),7,b
  4672                           
  4673                           ; BSR set to: 0
  4674  002864  8F78               	bsf	(___ftmul@f2+1)& (0+255),7,b
  4675                           
  4676                           ; BSR set to: 0
  4677  002866  0EFF               	movlw	255
  4678  002868  1777               	andwf	___ftmul@f2& (0+255),f,b
  4679  00286A  0EFF               	movlw	255
  4680  00286C  1778               	andwf	(___ftmul@f2+1)& (0+255),f,b
  4681  00286E  0E00               	movlw	0
  4682  002870  1779               	andwf	(___ftmul@f2+2)& (0+255),f,b
  4683                           
  4684                           ; BSR set to: 0
  4685  002872  0E00               	movlw	0
  4686  002874  6F7E               	movwf	___ftmul@f3_as_product& (0+255),b
  4687  002876  0E00               	movlw	0
  4688  002878  6F7F               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  4689  00287A  0E00               	movlw	0
  4690  00287C  6F80               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  4691                           
  4692                           ; BSR set to: 0
  4693  00287E  0E07               	movlw	7
  4694  002880  6F81               	movwf	___ftmul@cntr& (0+255),b
  4695  002882                     
  4696                           ; BSR set to: 0
  4697                           
  4698                           ; BSR set to: 0
  4699  002882  A174               	btfss	___ftmul@f1& (0+255),0,b
  4700  002884  D006               	goto	l592
  4701                           
  4702                           ; BSR set to: 0
  4703  002886  5177               	movf	___ftmul@f2& (0+255),w,b
  4704  002888  277E               	addwf	___ftmul@f3_as_product& (0+255),f,b
  4705  00288A  5178               	movf	(___ftmul@f2+1)& (0+255),w,b
  4706  00288C  237F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  4707  00288E  5179               	movf	(___ftmul@f2+2)& (0+255),w,b
  4708  002890  2380               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  4709  002892                     l592:
  4710                           
  4711                           ; BSR set to: 0
  4712                           
  4713                           ; BSR set to: 0
  4714  002892  90D8               	bcf	status,0,c
  4715  002894  3376               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  4716  002896  3375               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  4717  002898  3374               	rrcf	___ftmul@f1& (0+255),f,b
  4718  00289A  90D8               	bcf	status,0,c
  4719  00289C  3777               	rlcf	___ftmul@f2& (0+255),f,b
  4720  00289E  3778               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  4721  0028A0  3779               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  4722                           
  4723                           ; BSR set to: 0
  4724  0028A2  2F81               	decfsz	___ftmul@cntr& (0+255),f,b
  4725  0028A4  D7EE               	goto	l591
  4726                           
  4727                           ; BSR set to: 0
  4728                           
  4729                           ; BSR set to: 0
  4730  0028A6  0E09               	movlw	9
  4731  0028A8  6F81               	movwf	___ftmul@cntr& (0+255),b
  4732  0028AA                     
  4733                           ; BSR set to: 0
  4734                           
  4735                           ; BSR set to: 0
  4736  0028AA  A174               	btfss	___ftmul@f1& (0+255),0,b
  4737  0028AC  D006               	goto	l595
  4738                           
  4739                           ; BSR set to: 0
  4740  0028AE  5177               	movf	___ftmul@f2& (0+255),w,b
  4741  0028B0  277E               	addwf	___ftmul@f3_as_product& (0+255),f,b
  4742  0028B2  5178               	movf	(___ftmul@f2+1)& (0+255),w,b
  4743  0028B4  237F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  4744  0028B6  5179               	movf	(___ftmul@f2+2)& (0+255),w,b
  4745  0028B8  2380               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  4746  0028BA                     l595:
  4747                           
  4748                           ; BSR set to: 0
  4749                           
  4750                           ; BSR set to: 0
  4751  0028BA  90D8               	bcf	status,0,c
  4752  0028BC  3376               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  4753  0028BE  3375               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  4754  0028C0  3374               	rrcf	___ftmul@f1& (0+255),f,b
  4755  0028C2  90D8               	bcf	status,0,c
  4756  0028C4  3380               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  4757  0028C6  337F               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  4758  0028C8  337E               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  4759                           
  4760                           ; BSR set to: 0
  4761  0028CA  2F81               	decfsz	___ftmul@cntr& (0+255),f,b
  4762  0028CC  D7EE               	goto	l594
  4763                           
  4764                           ; BSR set to: 0
  4765                           
  4766                           ; BSR set to: 0
  4767  0028CE  C07E  F060         	movff	___ftmul@f3_as_product,___ftpack@arg
  4768  0028D2  C07F  F061         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4769  0028D6  C080  F062         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4770  0028DA  C07D  F063         	movff	___ftmul@exp,___ftpack@exp
  4771  0028DE  C082  F064         	movff	___ftmul@sign,___ftpack@sign
  4772  0028E2  ECDB  F015         	call	___ftpack	;wreg free
  4773  0028E6  C060  F074         	movff	?___ftpack,?___ftmul
  4774  0028EA  C061  F075         	movff	?___ftpack+1,?___ftmul+1
  4775  0028EE  C062  F076         	movff	?___ftpack+2,?___ftmul+2
  4776  0028F2  0012               	return	
  4777  0028F4                     __end_of___ftmul:
  4778                           	opt stack 0
  4779                           tblptru	equ	0xFF8
  4780                           tblptrh	equ	0xFF7
  4781                           tblptrl	equ	0xFF6
  4782                           tablat	equ	0xFF5
  4783                           prodh	equ	0xFF4
  4784                           prodl	equ	0xFF3
  4785                           postinc0	equ	0xFEE
  4786                           wreg	equ	0xFE8
  4787                           indf2	equ	0xFDF
  4788                           postinc2	equ	0xFDE
  4789                           postdec2	equ	0xFDD
  4790                           fsr2h	equ	0xFDA
  4791                           fsr2l	equ	0xFD9
  4792                           status	equ	0xFD8
  4793                           
  4794 ;; *************** function ___awmod *****************
  4795 ;; Defined at:
  4796 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  4797 ;; Parameters:    Size  Location     Type
  4798 ;;  dividend        2    0[BANK0 ] int 
  4799 ;;  divisor         2    2[BANK0 ] int 
  4800 ;; Auto vars:     Size  Location     Type
  4801 ;;  sign            1    5[BANK0 ] unsigned char 
  4802 ;;  counter         1    4[BANK0 ] unsigned char 
  4803 ;; Return value:  Size  Location     Type
  4804 ;;                  2    0[BANK0 ] int 
  4805 ;; Registers used:
  4806 ;;		wreg, status,2, status,0
  4807 ;; Tracked objects:
  4808 ;;		On entry : 0/0
  4809 ;;		On exit  : 0/0
  4810 ;;		Unchanged: 0/0
  4811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4812 ;;      Params:         0       4       0       0       0       0       0       0       0
  4813 ;;      Locals:         0       2       0       0       0       0       0       0       0
  4814 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4815 ;;      Totals:         0       6       0       0       0       0       0       0       0
  4816 ;;Total ram usage:        6 bytes
  4817 ;; Hardware stack levels used:    1
  4818 ;; Hardware stack levels required when called:    3
  4819 ;; This function calls:
  4820 ;;		Nothing
  4821 ;; This function is called by:
  4822 ;;		_fround
  4823 ;;		_scale
  4824 ;; This function uses a non-reentrant model
  4825 ;;
  4826                           
  4827                           	psect	text8
  4828  002EB0                     __ptext8:
  4829                           	opt stack 0
  4830  002EB0                     ___awmod:
  4831                           	opt stack 25
  4832                           
  4833                           ;incstack = 0
  4834  002EB0  0E00               	movlw	0
  4835  002EB2  0100               	movlb	0	; () banked
  4836  002EB4  6F65               	movwf	___awmod@sign& (0+255),b
  4837                           
  4838                           ; BSR set to: 0
  4839  002EB6  AF61               	btfss	(___awmod@dividend+1)& (0+255),7,b
  4840  002EB8  D006               	goto	l441
  4841                           
  4842                           ; BSR set to: 0
  4843  002EBA  6D60               	negf	___awmod@dividend& (0+255),b
  4844  002EBC  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  4845  002EBE  B0D8               	btfsc	status,0,c
  4846  002EC0  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  4847                           
  4848                           ; BSR set to: 0
  4849  002EC2  0E01               	movlw	1
  4850  002EC4  6F65               	movwf	___awmod@sign& (0+255),b
  4851  002EC6                     l441:
  4852                           
  4853                           ; BSR set to: 0
  4854                           
  4855                           ; BSR set to: 0
  4856  002EC6  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
  4857  002EC8  D004               	goto	l442
  4858                           
  4859                           ; BSR set to: 0
  4860  002ECA  6D62               	negf	___awmod@divisor& (0+255),b
  4861  002ECC  1F63               	comf	(___awmod@divisor+1)& (0+255),f,b
  4862  002ECE  B0D8               	btfsc	status,0,c
  4863  002ED0  2B63               	incf	(___awmod@divisor+1)& (0+255),f,b
  4864  002ED2                     l442:
  4865                           
  4866                           ; BSR set to: 0
  4867                           
  4868                           ; BSR set to: 0
  4869  002ED2  5162               	movf	___awmod@divisor& (0+255),w,b
  4870  002ED4  1163               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  4871  002ED6  B4D8               	btfsc	status,2,c
  4872  002ED8  D018               	goto	l449
  4873                           
  4874                           ; BSR set to: 0
  4875  002EDA  0E01               	movlw	1
  4876  002EDC  6F64               	movwf	___awmod@counter& (0+255),b
  4877  002EDE  D004               	goto	l444
  4878  002EE0                     
  4879                           ; BSR set to: 0
  4880                           
  4881                           ; BSR set to: 0
  4882  002EE0  90D8               	bcf	status,0,c
  4883  002EE2  3762               	rlcf	___awmod@divisor& (0+255),f,b
  4884  002EE4  3763               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  4885  002EE6  2B64               	incf	___awmod@counter& (0+255),f,b
  4886  002EE8                     l444:
  4887                           
  4888                           ; BSR set to: 0
  4889                           
  4890                           ; BSR set to: 0
  4891  002EE8  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
  4892  002EEA  D7FA               	goto	l445
  4893  002EEC                     u2320:
  4894                           
  4895                           ; BSR set to: 0
  4896                           
  4897                           ; BSR set to: 0
  4898                           
  4899                           ; BSR set to: 0
  4900  002EEC  5162               	movf	___awmod@divisor& (0+255),w,b
  4901  002EEE  5D60               	subwf	___awmod@dividend& (0+255),w,b
  4902  002EF0  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  4903  002EF2  5961               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  4904  002EF4  A0D8               	btfss	status,0,c
  4905  002EF6  D004               	goto	l448
  4906                           
  4907                           ; BSR set to: 0
  4908  002EF8  5162               	movf	___awmod@divisor& (0+255),w,b
  4909  002EFA  5F60               	subwf	___awmod@dividend& (0+255),f,b
  4910  002EFC  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  4911  002EFE  5B61               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  4912  002F00                     l448:
  4913                           
  4914                           ; BSR set to: 0
  4915                           
  4916                           ; BSR set to: 0
  4917  002F00  90D8               	bcf	status,0,c
  4918  002F02  3363               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  4919  002F04  3362               	rrcf	___awmod@divisor& (0+255),f,b
  4920                           
  4921                           ; BSR set to: 0
  4922  002F06  2F64               	decfsz	___awmod@counter& (0+255),f,b
  4923  002F08  D7F1               	goto	u2320
  4924  002F0A                     l449:
  4925                           
  4926                           ; BSR set to: 0
  4927                           
  4928                           ; BSR set to: 0
  4929                           
  4930                           ; BSR set to: 0
  4931  002F0A  5165               	movf	___awmod@sign& (0+255),w,b
  4932  002F0C  B4D8               	btfsc	status,2,c
  4933  002F0E  D004               	goto	l450
  4934                           
  4935                           ; BSR set to: 0
  4936  002F10  6D60               	negf	___awmod@dividend& (0+255),b
  4937  002F12  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  4938  002F14  B0D8               	btfsc	status,0,c
  4939  002F16  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  4940  002F18                     l450:
  4941                           
  4942                           ; BSR set to: 0
  4943                           
  4944                           ; BSR set to: 0
  4945  002F18  C060  F060         	movff	___awmod@dividend,?___awmod
  4946  002F1C  C061  F061         	movff	___awmod@dividend+1,?___awmod+1
  4947  002F20  0012               	return	
  4948  002F22                     __end_of___awmod:
  4949                           	opt stack 0
  4950                           tblptru	equ	0xFF8
  4951                           tblptrh	equ	0xFF7
  4952                           tblptrl	equ	0xFF6
  4953                           tablat	equ	0xFF5
  4954                           prodh	equ	0xFF4
  4955                           prodl	equ	0xFF3
  4956                           postinc0	equ	0xFEE
  4957                           wreg	equ	0xFE8
  4958                           indf2	equ	0xFDF
  4959                           postinc2	equ	0xFDE
  4960                           postdec2	equ	0xFDD
  4961                           fsr2h	equ	0xFDA
  4962                           fsr2l	equ	0xFD9
  4963                           status	equ	0xFD8
  4964                           
  4965 ;; *************** function ___awdiv *****************
  4966 ;; Defined at:
  4967 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  4968 ;; Parameters:    Size  Location     Type
  4969 ;;  dividend        2    6[BANK0 ] int 
  4970 ;;  divisor         2    8[BANK0 ] int 
  4971 ;; Auto vars:     Size  Location     Type
  4972 ;;  quotient        2   12[BANK0 ] int 
  4973 ;;  sign            1   11[BANK0 ] unsigned char 
  4974 ;;  counter         1   10[BANK0 ] unsigned char 
  4975 ;; Return value:  Size  Location     Type
  4976 ;;                  2    6[BANK0 ] int 
  4977 ;; Registers used:
  4978 ;;		wreg, status,2, status,0
  4979 ;; Tracked objects:
  4980 ;;		On entry : 0/0
  4981 ;;		On exit  : 0/0
  4982 ;;		Unchanged: 0/0
  4983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4984 ;;      Params:         0       4       0       0       0       0       0       0       0
  4985 ;;      Locals:         0       4       0       0       0       0       0       0       0
  4986 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4987 ;;      Totals:         0       8       0       0       0       0       0       0       0
  4988 ;;Total ram usage:        8 bytes
  4989 ;; Hardware stack levels used:    1
  4990 ;; Hardware stack levels required when called:    3
  4991 ;; This function calls:
  4992 ;;		Nothing
  4993 ;; This function is called by:
  4994 ;;		_fround
  4995 ;;		_scale
  4996 ;;		_sprintf
  4997 ;; This function uses a non-reentrant model
  4998 ;;
  4999                           
  5000                           	psect	text9
  5001  002DA6                     __ptext9:
  5002                           	opt stack 0
  5003  002DA6                     ___awdiv:
  5004                           	opt stack 25
  5005                           
  5006                           ; BSR set to: 0
  5007                           ;incstack = 0
  5008  002DA6  0E00               	movlw	0
  5009  002DA8  0100               	movlb	0	; () banked
  5010  002DAA  6F6B               	movwf	___awdiv@sign& (0+255),b
  5011                           
  5012                           ; BSR set to: 0
  5013  002DAC  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5014  002DAE  D006               	goto	l428
  5015                           
  5016                           ; BSR set to: 0
  5017  002DB0  6D68               	negf	___awdiv@divisor& (0+255),b
  5018  002DB2  1F69               	comf	(___awdiv@divisor+1)& (0+255),f,b
  5019  002DB4  B0D8               	btfsc	status,0,c
  5020  002DB6  2B69               	incf	(___awdiv@divisor+1)& (0+255),f,b
  5021                           
  5022                           ; BSR set to: 0
  5023  002DB8  0E01               	movlw	1
  5024  002DBA  6F6B               	movwf	___awdiv@sign& (0+255),b
  5025  002DBC                     l428:
  5026                           
  5027                           ; BSR set to: 0
  5028                           
  5029                           ; BSR set to: 0
  5030  002DBC  AF67               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  5031  002DBE  D006               	goto	l429
  5032                           
  5033                           ; BSR set to: 0
  5034  002DC0  6D66               	negf	___awdiv@dividend& (0+255),b
  5035  002DC2  1F67               	comf	(___awdiv@dividend+1)& (0+255),f,b
  5036  002DC4  B0D8               	btfsc	status,0,c
  5037  002DC6  2B67               	incf	(___awdiv@dividend+1)& (0+255),f,b
  5038                           
  5039                           ; BSR set to: 0
  5040  002DC8  0E01               	movlw	1
  5041  002DCA  1B6B               	xorwf	___awdiv@sign& (0+255),f,b
  5042  002DCC                     l429:
  5043                           
  5044                           ; BSR set to: 0
  5045                           
  5046                           ; BSR set to: 0
  5047  002DCC  0E00               	movlw	0
  5048  002DCE  6F6D               	movwf	(___awdiv@quotient+1)& (0+255),b
  5049  002DD0  0E00               	movlw	0
  5050  002DD2  6F6C               	movwf	___awdiv@quotient& (0+255),b
  5051                           
  5052                           ; BSR set to: 0
  5053  002DD4  5168               	movf	___awdiv@divisor& (0+255),w,b
  5054  002DD6  1169               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  5055  002DD8  B4D8               	btfsc	status,2,c
  5056  002DDA  D01C               	goto	l436
  5057                           
  5058                           ; BSR set to: 0
  5059  002DDC  0E01               	movlw	1
  5060  002DDE  6F6A               	movwf	___awdiv@counter& (0+255),b
  5061  002DE0  D004               	goto	l431
  5062  002DE2                     
  5063                           ; BSR set to: 0
  5064                           
  5065                           ; BSR set to: 0
  5066  002DE2  90D8               	bcf	status,0,c
  5067  002DE4  3768               	rlcf	___awdiv@divisor& (0+255),f,b
  5068  002DE6  3769               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  5069  002DE8  2B6A               	incf	___awdiv@counter& (0+255),f,b
  5070  002DEA                     l431:
  5071                           
  5072                           ; BSR set to: 0
  5073                           
  5074                           ; BSR set to: 0
  5075  002DEA  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5076  002DEC  D7FA               	goto	l432
  5077  002DEE                     u2260:
  5078                           
  5079                           ; BSR set to: 0
  5080                           
  5081                           ; BSR set to: 0
  5082                           
  5083                           ; BSR set to: 0
  5084  002DEE  90D8               	bcf	status,0,c
  5085  002DF0  376C               	rlcf	___awdiv@quotient& (0+255),f,b
  5086  002DF2  376D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  5087                           
  5088                           ; BSR set to: 0
  5089  002DF4  5168               	movf	___awdiv@divisor& (0+255),w,b
  5090  002DF6  5D66               	subwf	___awdiv@dividend& (0+255),w,b
  5091  002DF8  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5092  002DFA  5967               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  5093  002DFC  A0D8               	btfss	status,0,c
  5094  002DFE  D005               	goto	l435
  5095                           
  5096                           ; BSR set to: 0
  5097  002E00  5168               	movf	___awdiv@divisor& (0+255),w,b
  5098  002E02  5F66               	subwf	___awdiv@dividend& (0+255),f,b
  5099  002E04  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5100  002E06  5B67               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  5101                           
  5102                           ; BSR set to: 0
  5103  002E08  816C               	bsf	___awdiv@quotient& (0+255),0,b
  5104  002E0A                     l435:
  5105                           
  5106                           ; BSR set to: 0
  5107                           
  5108                           ; BSR set to: 0
  5109  002E0A  90D8               	bcf	status,0,c
  5110  002E0C  3369               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  5111  002E0E  3368               	rrcf	___awdiv@divisor& (0+255),f,b
  5112                           
  5113                           ; BSR set to: 0
  5114  002E10  2F6A               	decfsz	___awdiv@counter& (0+255),f,b
  5115  002E12  D7ED               	goto	u2260
  5116  002E14                     l436:
  5117                           
  5118                           ; BSR set to: 0
  5119                           
  5120                           ; BSR set to: 0
  5121                           
  5122                           ; BSR set to: 0
  5123  002E14  516B               	movf	___awdiv@sign& (0+255),w,b
  5124  002E16  B4D8               	btfsc	status,2,c
  5125  002E18  D004               	goto	l437
  5126                           
  5127                           ; BSR set to: 0
  5128  002E1A  6D6C               	negf	___awdiv@quotient& (0+255),b
  5129  002E1C  1F6D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  5130  002E1E  B0D8               	btfsc	status,0,c
  5131  002E20  2B6D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  5132  002E22                     l437:
  5133                           
  5134                           ; BSR set to: 0
  5135                           
  5136                           ; BSR set to: 0
  5137  002E22  C06C  F066         	movff	___awdiv@quotient,?___awdiv
  5138  002E26  C06D  F067         	movff	___awdiv@quotient+1,?___awdiv+1
  5139  002E2A  0012               	return	
  5140  002E2C                     __end_of___awdiv:
  5141                           	opt stack 0
  5142                           tblptru	equ	0xFF8
  5143                           tblptrh	equ	0xFF7
  5144                           tblptrl	equ	0xFF6
  5145                           tablat	equ	0xFF5
  5146                           prodh	equ	0xFF4
  5147                           prodl	equ	0xFF3
  5148                           postinc0	equ	0xFEE
  5149                           wreg	equ	0xFE8
  5150                           indf2	equ	0xFDF
  5151                           postinc2	equ	0xFDE
  5152                           postdec2	equ	0xFDD
  5153                           fsr2h	equ	0xFDA
  5154                           fsr2l	equ	0xFD9
  5155                           status	equ	0xFD8
  5156                           
  5157 ;; *************** function __tdiv_to_l_ *****************
  5158 ;; Defined at:
  5159 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdivl.c"
  5160 ;; Parameters:    Size  Location     Type
  5161 ;;  f1              3    0[BANK0 ] float 
  5162 ;;  f2              3    3[BANK0 ] float 
  5163 ;; Auto vars:     Size  Location     Type
  5164 ;;  quot            4    9[BANK0 ] unsigned long 
  5165 ;;  exp1            1   14[BANK0 ] unsigned char 
  5166 ;;  cntr            1   13[BANK0 ] unsigned char 
  5167 ;; Return value:  Size  Location     Type
  5168 ;;                  4    0[BANK0 ] unsigned long 
  5169 ;; Registers used:
  5170 ;;		wreg, status,2, status,0
  5171 ;; Tracked objects:
  5172 ;;		On entry : 0/0
  5173 ;;		On exit  : 0/0
  5174 ;;		Unchanged: 0/0
  5175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5176 ;;      Params:         0       6       0       0       0       0       0       0       0
  5177 ;;      Locals:         0       6       0       0       0       0       0       0       0
  5178 ;;      Temps:          0       3       0       0       0       0       0       0       0
  5179 ;;      Totals:         0      15       0       0       0       0       0       0       0
  5180 ;;Total ram usage:       15 bytes
  5181 ;; Hardware stack levels used:    1
  5182 ;; Hardware stack levels required when called:    3
  5183 ;; This function calls:
  5184 ;;		Nothing
  5185 ;; This function is called by:
  5186 ;;		_sprintf
  5187 ;; This function uses a non-reentrant model
  5188 ;;
  5189                           
  5190                           	psect	text10
  5191  00213E                     __ptext10:
  5192                           	opt stack 0
  5193  00213E                     __tdiv_to_l_:
  5194                           	opt stack 26
  5195                           
  5196                           ; BSR set to: 0
  5197                           ;incstack = 0
  5198  00213E  C062  F066         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  5199  002142  0100               	movlb	0	; () banked
  5200  002144  6B67               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  5201  002146  6B68               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  5202  002148  3561               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),w,b
  5203  00214A  3766               	rlcf	??__tdiv_to_l_& (0+255),f,b
  5204  00214C  E301               	bnc	u2501
  5205  00214E  8167               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  5206  002150                     u2501:
  5207  002150  5166               	movf	??__tdiv_to_l_& (0+255),w,b
  5208  002152  6F6E               	movwf	__tdiv_to_l_@exp1& (0+255),b
  5209  002154  516E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  5210  002156  A4D8               	btfss	status,2,c
  5211  002158  D009               	goto	l564
  5212                           
  5213                           ; BSR set to: 0
  5214  00215A  0E00               	movlw	0
  5215  00215C  6F60               	movwf	?__tdiv_to_l_& (0+255),b
  5216  00215E  0E00               	movlw	0
  5217  002160  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  5218  002162  0E00               	movlw	0
  5219  002164  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  5220  002166  0E00               	movlw	0
  5221  002168  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  5222                           
  5223                           ; BSR set to: 0
  5224  00216A  0012               	return	
  5225  00216C                     l564:
  5226                           
  5227                           ; BSR set to: 0
  5228                           
  5229                           ; BSR set to: 0
  5230  00216C  C065  F066         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  5231  002170  6B67               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  5232  002172  6B68               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  5233  002174  3564               	rlcf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  5234  002176  3766               	rlcf	??__tdiv_to_l_& (0+255),f,b
  5235  002178  E301               	bnc	u2521
  5236  00217A  8167               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  5237  00217C                     u2521:
  5238  00217C  5166               	movf	??__tdiv_to_l_& (0+255),w,b
  5239  00217E  6F6D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  5240  002180  516D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  5241  002182  A4D8               	btfss	status,2,c
  5242  002184  D009               	goto	l566
  5243                           
  5244                           ; BSR set to: 0
  5245  002186  0E00               	movlw	0
  5246  002188  6F60               	movwf	?__tdiv_to_l_& (0+255),b
  5247  00218A  0E00               	movlw	0
  5248  00218C  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  5249  00218E  0E00               	movlw	0
  5250  002190  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  5251  002192  0E00               	movlw	0
  5252  002194  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  5253                           
  5254                           ; BSR set to: 0
  5255  002196  0012               	return	
  5256  002198                     l566:
  5257                           
  5258                           ; BSR set to: 0
  5259                           
  5260                           ; BSR set to: 0
  5261  002198  8F61               	bsf	(__tdiv_to_l_@f1+1)& (0+255),7,b
  5262                           
  5263                           ; BSR set to: 0
  5264  00219A  0EFF               	movlw	255
  5265  00219C  1760               	andwf	__tdiv_to_l_@f1& (0+255),f,b
  5266  00219E  0EFF               	movlw	255
  5267  0021A0  1761               	andwf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  5268  0021A2  0E00               	movlw	0
  5269  0021A4  1762               	andwf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  5270  0021A6  8F64               	bsf	(__tdiv_to_l_@f2+1)& (0+255),7,b
  5271                           
  5272                           ; BSR set to: 0
  5273  0021A8  0EFF               	movlw	255
  5274  0021AA  1763               	andwf	__tdiv_to_l_@f2& (0+255),f,b
  5275  0021AC  0EFF               	movlw	255
  5276  0021AE  1764               	andwf	(__tdiv_to_l_@f2+1)& (0+255),f,b
  5277  0021B0  0E00               	movlw	0
  5278  0021B2  1765               	andwf	(__tdiv_to_l_@f2+2)& (0+255),f,b
  5279                           
  5280                           ; BSR set to: 0
  5281  0021B4  0E00               	movlw	0
  5282  0021B6  6F69               	movwf	__tdiv_to_l_@quot& (0+255),b
  5283  0021B8  0E00               	movlw	0
  5284  0021BA  6F6A               	movwf	(__tdiv_to_l_@quot+1)& (0+255),b
  5285  0021BC  0E00               	movlw	0
  5286  0021BE  6F6B               	movwf	(__tdiv_to_l_@quot+2)& (0+255),b
  5287  0021C0  0E00               	movlw	0
  5288  0021C2  6F6C               	movwf	(__tdiv_to_l_@quot+3)& (0+255),b
  5289                           
  5290                           ; BSR set to: 0
  5291  0021C4  0E7F               	movlw	127
  5292  0021C6  5F6E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  5293                           
  5294                           ; BSR set to: 0
  5295  0021C8  516D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  5296  0021CA  0F98               	addlw	152
  5297  0021CC  5F6E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  5298                           
  5299                           ; BSR set to: 0
  5300  0021CE  0E18               	movlw	24
  5301  0021D0  6F6D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  5302  0021D2                     l567:
  5303                           
  5304                           ; BSR set to: 0
  5305  0021D2  90D8               	bcf	status,0,c
  5306  0021D4  3769               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  5307  0021D6  376A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  5308  0021D8  376B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  5309  0021DA  376C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  5310                           
  5311                           ; BSR set to: 0
  5312  0021DC  5163               	movf	__tdiv_to_l_@f2& (0+255),w,b
  5313  0021DE  5D60               	subwf	__tdiv_to_l_@f1& (0+255),w,b
  5314  0021E0  5164               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  5315  0021E2  5961               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),w,b
  5316  0021E4  5165               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  5317  0021E6  5962               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),w,b
  5318  0021E8  A0D8               	btfss	status,0,c
  5319  0021EA  D007               	goto	l568
  5320                           
  5321                           ; BSR set to: 0
  5322  0021EC  5163               	movf	__tdiv_to_l_@f2& (0+255),w,b
  5323  0021EE  5F60               	subwf	__tdiv_to_l_@f1& (0+255),f,b
  5324  0021F0  5164               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  5325  0021F2  5B61               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),f,b
  5326  0021F4  5165               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  5327  0021F6  5B62               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),f,b
  5328                           
  5329                           ; BSR set to: 0
  5330  0021F8  8169               	bsf	__tdiv_to_l_@quot& (0+255),0,b
  5331  0021FA                     l568:
  5332                           
  5333                           ; BSR set to: 0
  5334  0021FA  90D8               	bcf	status,0,c
  5335  0021FC  3760               	rlcf	__tdiv_to_l_@f1& (0+255),f,b
  5336  0021FE  3761               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  5337  002200  3762               	rlcf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  5338                           
  5339                           ; BSR set to: 0
  5340  002202  2F6D               	decfsz	__tdiv_to_l_@cntr& (0+255),f,b
  5341  002204  D7E6               	goto	l567
  5342                           
  5343                           ; BSR set to: 0
  5344                           
  5345                           ; BSR set to: 0
  5346  002206  AF6E               	btfss	__tdiv_to_l_@exp1& (0+255),7,b
  5347  002208  D016               	goto	l570
  5348                           
  5349                           ; BSR set to: 0
  5350  00220A  516E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  5351  00220C  0A80               	xorlw	128
  5352  00220E  0F97               	addlw	151
  5353  002210  B0D8               	btfsc	status,0,c
  5354  002212  D009               	goto	l571
  5355                           
  5356                           ; BSR set to: 0
  5357  002214  0E00               	movlw	0
  5358  002216  6F60               	movwf	?__tdiv_to_l_& (0+255),b
  5359  002218  0E00               	movlw	0
  5360  00221A  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  5361  00221C  0E00               	movlw	0
  5362  00221E  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  5363  002220  0E00               	movlw	0
  5364  002222  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  5365                           
  5366                           ; BSR set to: 0
  5367  002224  0012               	return	
  5368  002226                     l571:
  5369                           
  5370                           ; BSR set to: 0
  5371                           
  5372                           ; BSR set to: 0
  5373                           
  5374                           ; BSR set to: 0
  5375  002226  90D8               	bcf	status,0,c
  5376  002228  336C               	rrcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  5377  00222A  336B               	rrcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  5378  00222C  336A               	rrcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  5379  00222E  3369               	rrcf	__tdiv_to_l_@quot& (0+255),f,b
  5380                           
  5381                           ; BSR set to: 0
  5382  002230  3F6E               	incfsz	__tdiv_to_l_@exp1& (0+255),f,b
  5383  002232  D7F9               	goto	l571
  5384                           
  5385                           ; BSR set to: 0
  5386  002234  D015               	goto	u2580
  5387  002236                     l570:
  5388                           
  5389                           ; BSR set to: 0
  5390                           
  5391                           ; BSR set to: 0
  5392  002236  0E17               	movlw	23
  5393  002238  656E               	cpfsgt	__tdiv_to_l_@exp1& (0+255),b
  5394  00223A  D00F               	goto	l576
  5395                           
  5396                           ; BSR set to: 0
  5397  00223C  0E00               	movlw	0
  5398  00223E  6F60               	movwf	?__tdiv_to_l_& (0+255),b
  5399  002240  0E00               	movlw	0
  5400  002242  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  5401  002244  0E00               	movlw	0
  5402  002246  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  5403  002248  0E00               	movlw	0
  5404  00224A  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  5405                           
  5406                           ; BSR set to: 0
  5407  00224C  0012               	return	
  5408  00224E                     
  5409                           ; BSR set to: 0
  5410                           
  5411                           ; BSR set to: 0
  5412  00224E  90D8               	bcf	status,0,c
  5413  002250  3769               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  5414  002252  376A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  5415  002254  376B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  5416  002256  376C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  5417  002258  076E               	decf	__tdiv_to_l_@exp1& (0+255),f,b
  5418  00225A                     l576:
  5419                           
  5420                           ; BSR set to: 0
  5421                           
  5422                           ; BSR set to: 0
  5423  00225A  516E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  5424  00225C  A4D8               	btfss	status,2,c
  5425  00225E  D7F7               	goto	l577
  5426  002260                     u2580:
  5427                           
  5428                           ; BSR set to: 0
  5429                           
  5430                           ; BSR set to: 0
  5431  002260  C069  F060         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  5432  002264  C06A  F061         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  5433  002268  C06B  F062         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  5434  00226C  C06C  F063         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  5435                           
  5436                           ; BSR set to: 0
  5437  002270  0012               	return		;funcret
  5438  002272                     __end_of__tdiv_to_l_:
  5439                           	opt stack 0
  5440                           tblptru	equ	0xFF8
  5441                           tblptrh	equ	0xFF7
  5442                           tblptrl	equ	0xFF6
  5443                           tablat	equ	0xFF5
  5444                           prodh	equ	0xFF4
  5445                           prodl	equ	0xFF3
  5446                           postinc0	equ	0xFEE
  5447                           wreg	equ	0xFE8
  5448                           indf2	equ	0xFDF
  5449                           postinc2	equ	0xFDE
  5450                           postdec2	equ	0xFDD
  5451                           fsr2h	equ	0xFDA
  5452                           fsr2l	equ	0xFD9
  5453                           status	equ	0xFD8
  5454                           
  5455 ;; *************** function __div_to_l_ *****************
  5456 ;; Defined at:
  5457 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fldivl.c"
  5458 ;; Parameters:    Size  Location     Type
  5459 ;;  f1              3    0[BANK0 ] unsigned long 
  5460 ;;  f2              3    3[BANK0 ] unsigned long 
  5461 ;; Auto vars:     Size  Location     Type
  5462 ;;  quot            4    6[BANK0 ] unsigned long 
  5463 ;;  exp1            1   11[BANK0 ] unsigned char 
  5464 ;;  cntr            1   10[BANK0 ] unsigned char 
  5465 ;; Return value:  Size  Location     Type
  5466 ;;                  4    0[BANK0 ] unsigned long 
  5467 ;; Registers used:
  5468 ;;		wreg, status,2, status,0
  5469 ;; Tracked objects:
  5470 ;;		On entry : 0/0
  5471 ;;		On exit  : 0/0
  5472 ;;		Unchanged: 0/0
  5473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5474 ;;      Params:         0       6       0       0       0       0       0       0       0
  5475 ;;      Locals:         0       6       0       0       0       0       0       0       0
  5476 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5477 ;;      Totals:         0      12       0       0       0       0       0       0       0
  5478 ;;Total ram usage:       12 bytes
  5479 ;; Hardware stack levels used:    1
  5480 ;; Hardware stack levels required when called:    3
  5481 ;; This function calls:
  5482 ;;		Nothing
  5483 ;; This function is called by:
  5484 ;;		_sprintf
  5485 ;; This function uses a non-reentrant model
  5486 ;;
  5487                           
  5488                           	psect	text11
  5489  0024D4                     __ptext11:
  5490                           	opt stack 0
  5491  0024D4                     __div_to_l_:
  5492                           	opt stack 26
  5493                           
  5494                           ; BSR set to: 0
  5495                           ;incstack = 0
  5496  0024D4  0100               	movlb	0	; () banked
  5497  0024D6  3562               	rlcf	(__div_to_l_@f1+2)& (0+255),w,b
  5498  0024D8  3563               	rlcf	(__div_to_l_@f1+3)& (0+255),w,b
  5499  0024DA  6F6B               	movwf	__div_to_l_@exp1& (0+255),b
  5500  0024DC  516B               	movf	__div_to_l_@exp1& (0+255),w,b
  5501  0024DE  A4D8               	btfss	status,2,c
  5502  0024E0  D009               	goto	l460
  5503                           
  5504                           ; BSR set to: 0
  5505  0024E2  0E00               	movlw	0
  5506  0024E4  6F60               	movwf	?__div_to_l_& (0+255),b
  5507  0024E6  0E00               	movlw	0
  5508  0024E8  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
  5509  0024EA  0E00               	movlw	0
  5510  0024EC  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
  5511  0024EE  0E00               	movlw	0
  5512  0024F0  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
  5513                           
  5514                           ; BSR set to: 0
  5515  0024F2  0012               	return	
  5516  0024F4                     l460:
  5517                           
  5518                           ; BSR set to: 0
  5519                           
  5520                           ; BSR set to: 0
  5521  0024F4  3565               	rlcf	(__div_to_l_@f2+2)& (0+255),w,b
  5522  0024F6  3566               	rlcf	(__div_to_l_@f2+3)& (0+255),w,b
  5523  0024F8  6F6A               	movwf	__div_to_l_@cntr& (0+255),b
  5524  0024FA  516A               	movf	__div_to_l_@cntr& (0+255),w,b
  5525  0024FC  A4D8               	btfss	status,2,c
  5526  0024FE  D009               	goto	l462
  5527                           
  5528                           ; BSR set to: 0
  5529  002500  0E00               	movlw	0
  5530  002502  6F60               	movwf	?__div_to_l_& (0+255),b
  5531  002504  0E00               	movlw	0
  5532  002506  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
  5533  002508  0E00               	movlw	0
  5534  00250A  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
  5535  00250C  0E00               	movlw	0
  5536  00250E  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
  5537                           
  5538                           ; BSR set to: 0
  5539  002510  0012               	return	
  5540  002512                     l462:
  5541                           
  5542                           ; BSR set to: 0
  5543                           
  5544                           ; BSR set to: 0
  5545  002512  8F62               	bsf	(__div_to_l_@f1+2)& (0+255),7,b
  5546                           
  5547                           ; BSR set to: 0
  5548  002514  0EFF               	movlw	255
  5549  002516  1760               	andwf	__div_to_l_@f1& (0+255),f,b
  5550  002518  0EFF               	movlw	255
  5551  00251A  1761               	andwf	(__div_to_l_@f1+1)& (0+255),f,b
  5552  00251C  0EFF               	movlw	255
  5553  00251E  1762               	andwf	(__div_to_l_@f1+2)& (0+255),f,b
  5554  002520  0E00               	movlw	0
  5555  002522  1763               	andwf	(__div_to_l_@f1+3)& (0+255),f,b
  5556                           
  5557                           ; BSR set to: 0
  5558  002524  8F65               	bsf	(__div_to_l_@f2+2)& (0+255),7,b
  5559  002526  0EFF               	movlw	255
  5560  002528  1763               	andwf	__div_to_l_@f2& (0+255),f,b
  5561  00252A  0EFF               	movlw	255
  5562  00252C  1764               	andwf	(__div_to_l_@f2+1)& (0+255),f,b
  5563  00252E  0EFF               	movlw	255
  5564  002530  1765               	andwf	(__div_to_l_@f2+2)& (0+255),f,b
  5565  002532  0E00               	movlw	0
  5566  002534  1766               	andwf	(__div_to_l_@f2+3)& (0+255),f,b
  5567                           
  5568                           ; BSR set to: 0
  5569  002536  0E00               	movlw	0
  5570  002538  6F66               	movwf	__div_to_l_@quot& (0+255),b
  5571  00253A  0E00               	movlw	0
  5572  00253C  6F67               	movwf	(__div_to_l_@quot+1)& (0+255),b
  5573  00253E  0E00               	movlw	0
  5574  002540  6F68               	movwf	(__div_to_l_@quot+2)& (0+255),b
  5575  002542  0E00               	movlw	0
  5576  002544  6F69               	movwf	(__div_to_l_@quot+3)& (0+255),b
  5577                           
  5578                           ; BSR set to: 0
  5579  002546  0E7F               	movlw	127
  5580  002548  5F6B               	subwf	__div_to_l_@exp1& (0+255),f,b
  5581                           
  5582                           ; BSR set to: 0
  5583  00254A  516A               	movf	__div_to_l_@cntr& (0+255),w,b
  5584  00254C  0FA0               	addlw	160
  5585  00254E  5F6B               	subwf	__div_to_l_@exp1& (0+255),f,b
  5586                           
  5587                           ; BSR set to: 0
  5588  002550  0E20               	movlw	32
  5589  002552  6F6A               	movwf	__div_to_l_@cntr& (0+255),b
  5590  002554                     
  5591                           ; BSR set to: 0
  5592                           
  5593                           ; BSR set to: 0
  5594  002554  90D8               	bcf	status,0,c
  5595  002556  3766               	rlcf	__div_to_l_@quot& (0+255),f,b
  5596  002558  3767               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  5597  00255A  3768               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  5598  00255C  3769               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  5599                           
  5600                           ; BSR set to: 0
  5601  00255E  5163               	movf	__div_to_l_@f2& (0+255),w,b
  5602  002560  5D60               	subwf	__div_to_l_@f1& (0+255),w,b
  5603  002562  5164               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  5604  002564  5961               	subwfb	(__div_to_l_@f1+1)& (0+255),w,b
  5605  002566  5165               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  5606  002568  5962               	subwfb	(__div_to_l_@f1+2)& (0+255),w,b
  5607  00256A  5166               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  5608  00256C  5963               	subwfb	(__div_to_l_@f1+3)& (0+255),w,b
  5609  00256E  A0D8               	btfss	status,0,c
  5610  002570  D009               	goto	l464
  5611                           
  5612                           ; BSR set to: 0
  5613  002572  5163               	movf	__div_to_l_@f2& (0+255),w,b
  5614  002574  5F60               	subwf	__div_to_l_@f1& (0+255),f,b
  5615  002576  5164               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  5616  002578  5B61               	subwfb	(__div_to_l_@f1+1)& (0+255),f,b
  5617  00257A  5165               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  5618  00257C  5B62               	subwfb	(__div_to_l_@f1+2)& (0+255),f,b
  5619  00257E  5166               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  5620  002580  5B63               	subwfb	(__div_to_l_@f1+3)& (0+255),f,b
  5621                           
  5622                           ; BSR set to: 0
  5623  002582  8166               	bsf	__div_to_l_@quot& (0+255),0,b
  5624  002584                     l464:
  5625                           
  5626                           ; BSR set to: 0
  5627                           
  5628                           ; BSR set to: 0
  5629  002584  90D8               	bcf	status,0,c
  5630  002586  3760               	rlcf	__div_to_l_@f1& (0+255),f,b
  5631  002588  3761               	rlcf	(__div_to_l_@f1+1)& (0+255),f,b
  5632  00258A  3762               	rlcf	(__div_to_l_@f1+2)& (0+255),f,b
  5633  00258C  3763               	rlcf	(__div_to_l_@f1+3)& (0+255),f,b
  5634                           
  5635                           ; BSR set to: 0
  5636  00258E  2F6A               	decfsz	__div_to_l_@cntr& (0+255),f,b
  5637  002590  D7E1               	goto	l463
  5638                           
  5639                           ; BSR set to: 0
  5640                           
  5641                           ; BSR set to: 0
  5642  002592  AF6B               	btfss	__div_to_l_@exp1& (0+255),7,b
  5643  002594  D016               	goto	l466
  5644                           
  5645                           ; BSR set to: 0
  5646  002596  516B               	movf	__div_to_l_@exp1& (0+255),w,b
  5647  002598  0A80               	xorlw	128
  5648  00259A  0F9F               	addlw	159
  5649  00259C  B0D8               	btfsc	status,0,c
  5650  00259E  D009               	goto	l467
  5651                           
  5652                           ; BSR set to: 0
  5653  0025A0  0E00               	movlw	0
  5654  0025A2  6F60               	movwf	?__div_to_l_& (0+255),b
  5655  0025A4  0E00               	movlw	0
  5656  0025A6  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
  5657  0025A8  0E00               	movlw	0
  5658  0025AA  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
  5659  0025AC  0E00               	movlw	0
  5660  0025AE  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
  5661                           
  5662                           ; BSR set to: 0
  5663  0025B0  0012               	return	
  5664  0025B2                     l467:
  5665                           
  5666                           ; BSR set to: 0
  5667                           
  5668                           ; BSR set to: 0
  5669                           
  5670                           ; BSR set to: 0
  5671  0025B2  90D8               	bcf	status,0,c
  5672  0025B4  3369               	rrcf	(__div_to_l_@quot+3)& (0+255),f,b
  5673  0025B6  3368               	rrcf	(__div_to_l_@quot+2)& (0+255),f,b
  5674  0025B8  3367               	rrcf	(__div_to_l_@quot+1)& (0+255),f,b
  5675  0025BA  3366               	rrcf	__div_to_l_@quot& (0+255),f,b
  5676                           
  5677                           ; BSR set to: 0
  5678  0025BC  3F6B               	incfsz	__div_to_l_@exp1& (0+255),f,b
  5679  0025BE  D7F9               	goto	l467
  5680                           
  5681                           ; BSR set to: 0
  5682  0025C0  D015               	goto	u2650
  5683  0025C2                     l466:
  5684                           
  5685                           ; BSR set to: 0
  5686                           
  5687                           ; BSR set to: 0
  5688  0025C2  0E1F               	movlw	31
  5689  0025C4  656B               	cpfsgt	__div_to_l_@exp1& (0+255),b
  5690  0025C6  D00F               	goto	l472
  5691                           
  5692                           ; BSR set to: 0
  5693  0025C8  0E00               	movlw	0
  5694  0025CA  6F60               	movwf	?__div_to_l_& (0+255),b
  5695  0025CC  0E00               	movlw	0
  5696  0025CE  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
  5697  0025D0  0E00               	movlw	0
  5698  0025D2  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
  5699  0025D4  0E00               	movlw	0
  5700  0025D6  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
  5701                           
  5702                           ; BSR set to: 0
  5703  0025D8  0012               	return	
  5704  0025DA                     
  5705                           ; BSR set to: 0
  5706                           
  5707                           ; BSR set to: 0
  5708  0025DA  90D8               	bcf	status,0,c
  5709  0025DC  3766               	rlcf	__div_to_l_@quot& (0+255),f,b
  5710  0025DE  3767               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  5711  0025E0  3768               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  5712  0025E2  3769               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  5713  0025E4  076B               	decf	__div_to_l_@exp1& (0+255),f,b
  5714  0025E6                     l472:
  5715                           
  5716                           ; BSR set to: 0
  5717                           
  5718                           ; BSR set to: 0
  5719  0025E6  516B               	movf	__div_to_l_@exp1& (0+255),w,b
  5720  0025E8  A4D8               	btfss	status,2,c
  5721  0025EA  D7F7               	goto	l473
  5722  0025EC                     u2650:
  5723                           
  5724                           ; BSR set to: 0
  5725                           
  5726                           ; BSR set to: 0
  5727  0025EC  C066  F060         	movff	__div_to_l_@quot,?__div_to_l_
  5728  0025F0  C067  F061         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  5729  0025F4  C068  F062         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  5730  0025F8  C069  F063         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  5731                           
  5732                           ; BSR set to: 0
  5733  0025FC  0012               	return		;funcret
  5734  0025FE                     __end_of__div_to_l_:
  5735                           	opt stack 0
  5736                           tblptru	equ	0xFF8
  5737                           tblptrh	equ	0xFF7
  5738                           tblptrl	equ	0xFF6
  5739                           tablat	equ	0xFF5
  5740                           prodh	equ	0xFF4
  5741                           prodl	equ	0xFF3
  5742                           postinc0	equ	0xFEE
  5743                           wreg	equ	0xFE8
  5744                           indf2	equ	0xFDF
  5745                           postinc2	equ	0xFDE
  5746                           postdec2	equ	0xFDD
  5747                           fsr2h	equ	0xFDA
  5748                           fsr2l	equ	0xFD9
  5749                           status	equ	0xFD8
  5750                           
  5751 ;; *************** function ___lltoft *****************
  5752 ;; Defined at:
  5753 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
  5754 ;; Parameters:    Size  Location     Type
  5755 ;;  c               4    8[BANK0 ] unsigned long 
  5756 ;; Auto vars:     Size  Location     Type
  5757 ;;  exp             1   16[BANK0 ] unsigned char 
  5758 ;; Return value:  Size  Location     Type
  5759 ;;                  3    8[BANK0 ] float 
  5760 ;; Registers used:
  5761 ;;		wreg, status,2, status,0, cstack
  5762 ;; Tracked objects:
  5763 ;;		On entry : 0/0
  5764 ;;		On exit  : 0/0
  5765 ;;		Unchanged: 0/0
  5766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5767 ;;      Params:         0       4       0       0       0       0       0       0       0
  5768 ;;      Locals:         0       1       0       0       0       0       0       0       0
  5769 ;;      Temps:          0       4       0       0       0       0       0       0       0
  5770 ;;      Totals:         0       9       0       0       0       0       0       0       0
  5771 ;;Total ram usage:        9 bytes
  5772 ;; Hardware stack levels used:    1
  5773 ;; Hardware stack levels required when called:    4
  5774 ;; This function calls:
  5775 ;;		___ftpack
  5776 ;; This function is called by:
  5777 ;;		_sprintf
  5778 ;; This function uses a non-reentrant model
  5779 ;;
  5780                           
  5781                           	psect	text12
  5782  002FF4                     __ptext12:
  5783                           	opt stack 0
  5784  002FF4                     ___lltoft:
  5785                           	opt stack 25
  5786                           
  5787                           ; BSR set to: 0
  5788                           ;incstack = 0
  5789  002FF4  0E8E               	movlw	142
  5790  002FF6  0100               	movlb	0	; () banked
  5791  002FF8  6F70               	movwf	___lltoft@exp& (0+255),b
  5792  002FFA  D006               	goto	l671
  5793  002FFC                     
  5794                           ; BSR set to: 0
  5795                           
  5796                           ; BSR set to: 0
  5797  002FFC  90D8               	bcf	status,0,c
  5798  002FFE  336B               	rrcf	(___lltoft@c+3)& (0+255),f,b
  5799  003000  336A               	rrcf	(___lltoft@c+2)& (0+255),f,b
  5800  003002  3369               	rrcf	(___lltoft@c+1)& (0+255),f,b
  5801  003004  3368               	rrcf	___lltoft@c& (0+255),f,b
  5802  003006  2B70               	incf	___lltoft@exp& (0+255),f,b
  5803  003008                     l671:
  5804                           
  5805                           ; BSR set to: 0
  5806                           
  5807                           ; BSR set to: 0
  5808  003008  0E00               	movlw	0
  5809  00300A  1568               	andwf	___lltoft@c& (0+255),w,b
  5810  00300C  6F6C               	movwf	??___lltoft& (0+255),b
  5811  00300E  0E00               	movlw	0
  5812  003010  1569               	andwf	(___lltoft@c+1)& (0+255),w,b
  5813  003012  6F6D               	movwf	(??___lltoft+1)& (0+255),b
  5814  003014  0E00               	movlw	0
  5815  003016  156A               	andwf	(___lltoft@c+2)& (0+255),w,b
  5816  003018  6F6E               	movwf	(??___lltoft+2)& (0+255),b
  5817  00301A  0EFF               	movlw	255
  5818  00301C  156B               	andwf	(___lltoft@c+3)& (0+255),w,b
  5819  00301E  6F6F               	movwf	(??___lltoft+3)& (0+255),b
  5820  003020  516C               	movf	??___lltoft& (0+255),w,b
  5821  003022  116D               	iorwf	(??___lltoft+1)& (0+255),w,b
  5822  003024  116E               	iorwf	(??___lltoft+2)& (0+255),w,b
  5823  003026  116F               	iorwf	(??___lltoft+3)& (0+255),w,b
  5824  003028  A4D8               	btfss	status,2,c
  5825  00302A  D7E8               	goto	l672
  5826                           
  5827                           ; BSR set to: 0
  5828                           
  5829                           ; BSR set to: 0
  5830  00302C  C068  F060         	movff	___lltoft@c,___ftpack@arg
  5831  003030  C069  F061         	movff	___lltoft@c+1,___ftpack@arg+1
  5832  003034  C06A  F062         	movff	___lltoft@c+2,___ftpack@arg+2
  5833  003038  C070  F063         	movff	___lltoft@exp,___ftpack@exp
  5834  00303C  0E00               	movlw	0
  5835  00303E  6F64               	movwf	___ftpack@sign& (0+255),b
  5836  003040  ECDB  F015         	call	___ftpack	;wreg free
  5837  003044  C060  F068         	movff	?___ftpack,?___lltoft
  5838  003048  C061  F069         	movff	?___ftpack+1,?___lltoft+1
  5839  00304C  C062  F06A         	movff	?___ftpack+2,?___lltoft+2
  5840  003050  0012               	return	
  5841  003052                     __end_of___lltoft:
  5842                           	opt stack 0
  5843                           tblptru	equ	0xFF8
  5844                           tblptrh	equ	0xFF7
  5845                           tblptrl	equ	0xFF6
  5846                           tablat	equ	0xFF5
  5847                           prodh	equ	0xFF4
  5848                           prodl	equ	0xFF3
  5849                           postinc0	equ	0xFEE
  5850                           wreg	equ	0xFE8
  5851                           indf2	equ	0xFDF
  5852                           postinc2	equ	0xFDE
  5853                           postdec2	equ	0xFDD
  5854                           fsr2h	equ	0xFDA
  5855                           fsr2l	equ	0xFD9
  5856                           status	equ	0xFD8
  5857                           
  5858 ;; *************** function ___llmod *****************
  5859 ;; Defined at:
  5860 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  5861 ;; Parameters:    Size  Location     Type
  5862 ;;  dividend        4   13[BANK0 ] unsigned long 
  5863 ;;  divisor         4   17[BANK0 ] unsigned long 
  5864 ;; Auto vars:     Size  Location     Type
  5865 ;;  counter         1   21[BANK0 ] unsigned char 
  5866 ;; Return value:  Size  Location     Type
  5867 ;;                  4   13[BANK0 ] unsigned long 
  5868 ;; Registers used:
  5869 ;;		wreg, status,2, status,0
  5870 ;; Tracked objects:
  5871 ;;		On entry : 0/0
  5872 ;;		On exit  : 0/0
  5873 ;;		Unchanged: 0/0
  5874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5875 ;;      Params:         0       8       0       0       0       0       0       0       0
  5876 ;;      Locals:         0       1       0       0       0       0       0       0       0
  5877 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5878 ;;      Totals:         0       9       0       0       0       0       0       0       0
  5879 ;;Total ram usage:        9 bytes
  5880 ;; Hardware stack levels used:    1
  5881 ;; Hardware stack levels required when called:    3
  5882 ;; This function calls:
  5883 ;;		Nothing
  5884 ;; This function is called by:
  5885 ;;		_sprintf
  5886 ;; This function uses a non-reentrant model
  5887 ;;
  5888                           
  5889                           	psect	text13
  5890  002F8C                     __ptext13:
  5891                           	opt stack 0
  5892  002F8C                     ___llmod:
  5893                           	opt stack 26
  5894                           
  5895                           ;incstack = 0
  5896  002F8C  0100               	movlb	0	; () banked
  5897  002F8E  5171               	movf	___llmod@divisor& (0+255),w,b
  5898  002F90  1172               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  5899  002F92  1173               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  5900  002F94  1174               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  5901  002F96  B4D8               	btfsc	status,2,c
  5902  002F98  D024               	goto	l665
  5903                           
  5904                           ; BSR set to: 0
  5905  002F9A  0E01               	movlw	1
  5906  002F9C  6F75               	movwf	___llmod@counter& (0+255),b
  5907  002F9E  D006               	goto	l660
  5908  002FA0                     
  5909                           ; BSR set to: 0
  5910                           
  5911                           ; BSR set to: 0
  5912  002FA0  90D8               	bcf	status,0,c
  5913  002FA2  3771               	rlcf	___llmod@divisor& (0+255),f,b
  5914  002FA4  3772               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  5915  002FA6  3773               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  5916  002FA8  3774               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  5917  002FAA  2B75               	incf	___llmod@counter& (0+255),f,b
  5918  002FAC                     l660:
  5919                           
  5920                           ; BSR set to: 0
  5921                           
  5922                           ; BSR set to: 0
  5923  002FAC  AF74               	btfss	(___llmod@divisor+3)& (0+255),7,b
  5924  002FAE  D7F8               	goto	l661
  5925  002FB0                     u2830:
  5926                           
  5927                           ; BSR set to: 0
  5928                           
  5929                           ; BSR set to: 0
  5930                           
  5931                           ; BSR set to: 0
  5932  002FB0  5171               	movf	___llmod@divisor& (0+255),w,b
  5933  002FB2  5D6D               	subwf	___llmod@dividend& (0+255),w,b
  5934  002FB4  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
  5935  002FB6  596E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  5936  002FB8  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
  5937  002FBA  596F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  5938  002FBC  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
  5939  002FBE  5970               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  5940  002FC0  A0D8               	btfss	status,0,c
  5941  002FC2  D008               	goto	l664
  5942                           
  5943                           ; BSR set to: 0
  5944  002FC4  5171               	movf	___llmod@divisor& (0+255),w,b
  5945  002FC6  5F6D               	subwf	___llmod@dividend& (0+255),f,b
  5946  002FC8  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
  5947  002FCA  5B6E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  5948  002FCC  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
  5949  002FCE  5B6F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  5950  002FD0  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
  5951  002FD2  5B70               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  5952  002FD4                     l664:
  5953                           
  5954                           ; BSR set to: 0
  5955                           
  5956                           ; BSR set to: 0
  5957  002FD4  90D8               	bcf	status,0,c
  5958  002FD6  3374               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  5959  002FD8  3373               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  5960  002FDA  3372               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  5961  002FDC  3371               	rrcf	___llmod@divisor& (0+255),f,b
  5962                           
  5963                           ; BSR set to: 0
  5964  002FDE  2F75               	decfsz	___llmod@counter& (0+255),f,b
  5965  002FE0  D7E7               	goto	u2830
  5966  002FE2                     l665:
  5967                           
  5968                           ; BSR set to: 0
  5969                           
  5970                           ; BSR set to: 0
  5971  002FE2  C06D  F06D         	movff	___llmod@dividend,?___llmod
  5972  002FE6  C06E  F06E         	movff	___llmod@dividend+1,?___llmod+1
  5973  002FEA  C06F  F06F         	movff	___llmod@dividend+2,?___llmod+2
  5974  002FEE  C070  F070         	movff	___llmod@dividend+3,?___llmod+3
  5975                           
  5976                           ; BSR set to: 0
  5977  002FF2  0012               	return		;funcret
  5978  002FF4                     __end_of___llmod:
  5979                           	opt stack 0
  5980                           tblptru	equ	0xFF8
  5981                           tblptrh	equ	0xFF7
  5982                           tblptrl	equ	0xFF6
  5983                           tablat	equ	0xFF5
  5984                           prodh	equ	0xFF4
  5985                           prodl	equ	0xFF3
  5986                           postinc0	equ	0xFEE
  5987                           wreg	equ	0xFE8
  5988                           indf2	equ	0xFDF
  5989                           postinc2	equ	0xFDE
  5990                           postdec2	equ	0xFDD
  5991                           fsr2h	equ	0xFDA
  5992                           fsr2l	equ	0xFD9
  5993                           status	equ	0xFD8
  5994                           
  5995 ;; *************** function ___lldiv *****************
  5996 ;; Defined at:
  5997 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  5998 ;; Parameters:    Size  Location     Type
  5999 ;;  dividend        4    0[BANK0 ] unsigned long 
  6000 ;;  divisor         4    4[BANK0 ] unsigned long 
  6001 ;; Auto vars:     Size  Location     Type
  6002 ;;  quotient        4    8[BANK0 ] unsigned long 
  6003 ;;  counter         1   12[BANK0 ] unsigned char 
  6004 ;; Return value:  Size  Location     Type
  6005 ;;                  4    0[BANK0 ] unsigned long 
  6006 ;; Registers used:
  6007 ;;		wreg, status,2, status,0
  6008 ;; Tracked objects:
  6009 ;;		On entry : 0/0
  6010 ;;		On exit  : 0/0
  6011 ;;		Unchanged: 0/0
  6012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6013 ;;      Params:         0       8       0       0       0       0       0       0       0
  6014 ;;      Locals:         0       5       0       0       0       0       0       0       0
  6015 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6016 ;;      Totals:         0      13       0       0       0       0       0       0       0
  6017 ;;Total ram usage:       13 bytes
  6018 ;; Hardware stack levels used:    1
  6019 ;; Hardware stack levels required when called:    3
  6020 ;; This function calls:
  6021 ;;		Nothing
  6022 ;; This function is called by:
  6023 ;;		_sprintf
  6024 ;; This function uses a non-reentrant model
  6025 ;;
  6026                           
  6027                           	psect	text14
  6028  002E2C                     __ptext14:
  6029                           	opt stack 0
  6030  002E2C                     ___lldiv:
  6031                           	opt stack 26
  6032                           
  6033                           ; BSR set to: 0
  6034                           ;incstack = 0
  6035  002E2C  0E00               	movlw	0
  6036  002E2E  0100               	movlb	0	; () banked
  6037  002E30  6F68               	movwf	___lldiv@quotient& (0+255),b
  6038  002E32  0E00               	movlw	0
  6039  002E34  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
  6040  002E36  0E00               	movlw	0
  6041  002E38  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
  6042  002E3A  0E00               	movlw	0
  6043  002E3C  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
  6044                           
  6045                           ; BSR set to: 0
  6046  002E3E  5164               	movf	___lldiv@divisor& (0+255),w,b
  6047  002E40  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  6048  002E42  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  6049  002E44  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  6050  002E46  B4D8               	btfsc	status,2,c
  6051  002E48  D02A               	goto	l655
  6052                           
  6053                           ; BSR set to: 0
  6054  002E4A  0E01               	movlw	1
  6055  002E4C  6F6C               	movwf	___lldiv@counter& (0+255),b
  6056  002E4E  D006               	goto	l650
  6057  002E50                     
  6058                           ; BSR set to: 0
  6059                           
  6060                           ; BSR set to: 0
  6061  002E50  90D8               	bcf	status,0,c
  6062  002E52  3764               	rlcf	___lldiv@divisor& (0+255),f,b
  6063  002E54  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  6064  002E56  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  6065  002E58  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  6066  002E5A  2B6C               	incf	___lldiv@counter& (0+255),f,b
  6067  002E5C                     l650:
  6068                           
  6069                           ; BSR set to: 0
  6070                           
  6071                           ; BSR set to: 0
  6072  002E5C  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  6073  002E5E  D7F8               	goto	l651
  6074  002E60                     u2800:
  6075                           
  6076                           ; BSR set to: 0
  6077                           
  6078                           ; BSR set to: 0
  6079                           
  6080                           ; BSR set to: 0
  6081  002E60  90D8               	bcf	status,0,c
  6082  002E62  3768               	rlcf	___lldiv@quotient& (0+255),f,b
  6083  002E64  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  6084  002E66  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  6085  002E68  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  6086                           
  6087                           ; BSR set to: 0
  6088  002E6A  5164               	movf	___lldiv@divisor& (0+255),w,b
  6089  002E6C  5D60               	subwf	___lldiv@dividend& (0+255),w,b
  6090  002E6E  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6091  002E70  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  6092  002E72  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6093  002E74  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  6094  002E76  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6095  002E78  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  6096  002E7A  A0D8               	btfss	status,0,c
  6097  002E7C  D009               	goto	l654
  6098                           
  6099                           ; BSR set to: 0
  6100  002E7E  5164               	movf	___lldiv@divisor& (0+255),w,b
  6101  002E80  5F60               	subwf	___lldiv@dividend& (0+255),f,b
  6102  002E82  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6103  002E84  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  6104  002E86  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6105  002E88  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  6106  002E8A  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6107  002E8C  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  6108                           
  6109                           ; BSR set to: 0
  6110  002E8E  8168               	bsf	___lldiv@quotient& (0+255),0,b
  6111  002E90                     l654:
  6112                           
  6113                           ; BSR set to: 0
  6114                           
  6115                           ; BSR set to: 0
  6116  002E90  90D8               	bcf	status,0,c
  6117  002E92  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  6118  002E94  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  6119  002E96  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  6120  002E98  3364               	rrcf	___lldiv@divisor& (0+255),f,b
  6121                           
  6122                           ; BSR set to: 0
  6123  002E9A  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
  6124  002E9C  D7E1               	goto	u2800
  6125  002E9E                     l655:
  6126                           
  6127                           ; BSR set to: 0
  6128                           
  6129                           ; BSR set to: 0
  6130  002E9E  C068  F060         	movff	___lldiv@quotient,?___lldiv
  6131  002EA2  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
  6132  002EA6  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
  6133  002EAA  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
  6134                           
  6135                           ; BSR set to: 0
  6136  002EAE  0012               	return		;funcret
  6137  002EB0                     __end_of___lldiv:
  6138                           	opt stack 0
  6139                           tblptru	equ	0xFF8
  6140                           tblptrh	equ	0xFF7
  6141                           tblptrl	equ	0xFF6
  6142                           tablat	equ	0xFF5
  6143                           prodh	equ	0xFF4
  6144                           prodl	equ	0xFF3
  6145                           postinc0	equ	0xFEE
  6146                           wreg	equ	0xFE8
  6147                           indf2	equ	0xFDF
  6148                           postinc2	equ	0xFDE
  6149                           postdec2	equ	0xFDD
  6150                           fsr2h	equ	0xFDA
  6151                           fsr2l	equ	0xFD9
  6152                           status	equ	0xFD8
  6153                           
  6154 ;; *************** function ___fttol *****************
  6155 ;; Defined at:
  6156 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  6157 ;; Parameters:    Size  Location     Type
  6158 ;;  f1              3   42[BANK0 ] float 
  6159 ;; Auto vars:     Size  Location     Type
  6160 ;;  lval            4   52[BANK0 ] unsigned long 
  6161 ;;  exp1            1   56[BANK0 ] unsigned char 
  6162 ;;  sign1           1   51[BANK0 ] unsigned char 
  6163 ;; Return value:  Size  Location     Type
  6164 ;;                  4   42[BANK0 ] long 
  6165 ;; Registers used:
  6166 ;;		wreg, status,2, status,0
  6167 ;; Tracked objects:
  6168 ;;		On entry : 0/0
  6169 ;;		On exit  : 0/0
  6170 ;;		Unchanged: 0/0
  6171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6172 ;;      Params:         0       4       0       0       0       0       0       0       0
  6173 ;;      Locals:         0       6       0       0       0       0       0       0       0
  6174 ;;      Temps:          0       5       0       0       0       0       0       0       0
  6175 ;;      Totals:         0      15       0       0       0       0       0       0       0
  6176 ;;Total ram usage:       15 bytes
  6177 ;; Hardware stack levels used:    1
  6178 ;; Hardware stack levels required when called:    3
  6179 ;; This function calls:
  6180 ;;		Nothing
  6181 ;; This function is called by:
  6182 ;;		_sprintf
  6183 ;; This function uses a non-reentrant model
  6184 ;;
  6185                           
  6186                           	psect	text15
  6187  002706                     __ptext15:
  6188                           	opt stack 0
  6189  002706                     ___fttol:
  6190                           	opt stack 26
  6191                           
  6192                           ; BSR set to: 0
  6193                           ;incstack = 0
  6194  002706  C08C  F08E         	movff	___fttol@f1+2,??___fttol
  6195  00270A  0100               	movlb	0	; () banked
  6196  00270C  6B8F               	clrf	(??___fttol+1)& (0+255),b
  6197  00270E  6B90               	clrf	(??___fttol+2)& (0+255),b
  6198  002710  358B               	rlcf	(___fttol@f1+1)& (0+255),w,b
  6199  002712  378E               	rlcf	??___fttol& (0+255),f,b
  6200  002714  E301               	bnc	u2711
  6201  002716  818F               	bsf	(??___fttol+1)& (0+255),0,b
  6202  002718                     u2711:
  6203  002718  518E               	movf	??___fttol& (0+255),w,b
  6204  00271A  6F98               	movwf	___fttol@exp1& (0+255),b
  6205  00271C  5198               	movf	___fttol@exp1& (0+255),w,b
  6206  00271E  A4D8               	btfss	status,2,c
  6207  002720  D009               	goto	l609
  6208                           
  6209                           ; BSR set to: 0
  6210  002722  0E00               	movlw	0
  6211  002724  6F8A               	movwf	?___fttol& (0+255),b
  6212  002726  0E00               	movlw	0
  6213  002728  6F8B               	movwf	(?___fttol+1)& (0+255),b
  6214  00272A  0E00               	movlw	0
  6215  00272C  6F8C               	movwf	(?___fttol+2)& (0+255),b
  6216  00272E  0E00               	movlw	0
  6217  002730  6F8D               	movwf	(?___fttol+3)& (0+255),b
  6218                           
  6219                           ; BSR set to: 0
  6220  002732  0012               	return	
  6221  002734                     l609:
  6222                           
  6223                           ; BSR set to: 0
  6224                           
  6225                           ; BSR set to: 0
  6226  002734  0E17               	movlw	23
  6227  002736  6F8E               	movwf	??___fttol& (0+255),b
  6228  002738  C08A  F08F         	movff	___fttol@f1,??___fttol+1
  6229  00273C  C08B  F090         	movff	___fttol@f1+1,??___fttol+2
  6230  002740  C08C  F091         	movff	___fttol@f1+2,??___fttol+3
  6231  002744  298E               	incf	??___fttol& (0+255),w,b
  6232  002746  6F92               	movwf	(??___fttol+4)& (0+255),b
  6233  002748  D004               	goto	u2730
  6234  00274A                     u2735:
  6235  00274A  90D8               	bcf	status,0,c
  6236  00274C  3391               	rrcf	(??___fttol+3)& (0+255),f,b
  6237  00274E  3390               	rrcf	(??___fttol+2)& (0+255),f,b
  6238  002750  338F               	rrcf	(??___fttol+1)& (0+255),f,b
  6239  002752                     u2730:
  6240  002752  2F92               	decfsz	(??___fttol+4)& (0+255),f,b
  6241  002754  D7FA               	goto	u2735
  6242  002756  0100               	movlb	0	; () banked
  6243  002758  518F               	movf	(??___fttol+1)& (0+255),w,b
  6244  00275A  6F93               	movwf	___fttol@sign1& (0+255),b
  6245                           
  6246                           ; BSR set to: 0
  6247  00275C  8F8B               	bsf	(___fttol@f1+1)& (0+255),7,b
  6248                           
  6249                           ; BSR set to: 0
  6250  00275E  0EFF               	movlw	255
  6251  002760  178A               	andwf	___fttol@f1& (0+255),f,b
  6252  002762  0EFF               	movlw	255
  6253  002764  178B               	andwf	(___fttol@f1+1)& (0+255),f,b
  6254  002766  0E00               	movlw	0
  6255  002768  178C               	andwf	(___fttol@f1+2)& (0+255),f,b
  6256                           
  6257                           ; BSR set to: 0
  6258  00276A  518A               	movf	___fttol@f1& (0+255),w,b
  6259  00276C  6F94               	movwf	___fttol@lval& (0+255),b
  6260  00276E  518B               	movf	(___fttol@f1+1)& (0+255),w,b
  6261  002770  6F95               	movwf	(___fttol@lval+1)& (0+255),b
  6262  002772  518C               	movf	(___fttol@f1+2)& (0+255),w,b
  6263  002774  6F96               	movwf	(___fttol@lval+2)& (0+255),b
  6264  002776  6B97               	clrf	(___fttol@lval+3)& (0+255),b
  6265                           
  6266                           ; BSR set to: 0
  6267  002778  0E8E               	movlw	142
  6268  00277A  5F98               	subwf	___fttol@exp1& (0+255),f,b
  6269                           
  6270                           ; BSR set to: 0
  6271  00277C  AF98               	btfss	___fttol@exp1& (0+255),7,b
  6272  00277E  D016               	goto	l611
  6273                           
  6274                           ; BSR set to: 0
  6275  002780  5198               	movf	___fttol@exp1& (0+255),w,b
  6276  002782  0A80               	xorlw	128
  6277  002784  0F8F               	addlw	143
  6278  002786  B0D8               	btfsc	status,0,c
  6279  002788  D009               	goto	l612
  6280                           
  6281                           ; BSR set to: 0
  6282  00278A  0E00               	movlw	0
  6283  00278C  6F8A               	movwf	?___fttol& (0+255),b
  6284  00278E  0E00               	movlw	0
  6285  002790  6F8B               	movwf	(?___fttol+1)& (0+255),b
  6286  002792  0E00               	movlw	0
  6287  002794  6F8C               	movwf	(?___fttol+2)& (0+255),b
  6288  002796  0E00               	movlw	0
  6289  002798  6F8D               	movwf	(?___fttol+3)& (0+255),b
  6290                           
  6291                           ; BSR set to: 0
  6292  00279A  0012               	return	
  6293  00279C                     l612:
  6294                           
  6295                           ; BSR set to: 0
  6296                           
  6297                           ; BSR set to: 0
  6298                           
  6299                           ; BSR set to: 0
  6300  00279C  90D8               	bcf	status,0,c
  6301  00279E  3397               	rrcf	(___fttol@lval+3)& (0+255),f,b
  6302  0027A0  3396               	rrcf	(___fttol@lval+2)& (0+255),f,b
  6303  0027A2  3395               	rrcf	(___fttol@lval+1)& (0+255),f,b
  6304  0027A4  3394               	rrcf	___fttol@lval& (0+255),f,b
  6305                           
  6306                           ; BSR set to: 0
  6307  0027A6  3F98               	incfsz	___fttol@exp1& (0+255),f,b
  6308  0027A8  D7F9               	goto	l612
  6309                           
  6310                           ; BSR set to: 0
  6311  0027AA  D015               	goto	u2770
  6312  0027AC                     l611:
  6313                           
  6314                           ; BSR set to: 0
  6315                           
  6316                           ; BSR set to: 0
  6317  0027AC  0E17               	movlw	23
  6318  0027AE  6598               	cpfsgt	___fttol@exp1& (0+255),b
  6319  0027B0  D00F               	goto	l617
  6320                           
  6321                           ; BSR set to: 0
  6322  0027B2  0E00               	movlw	0
  6323  0027B4  6F8A               	movwf	?___fttol& (0+255),b
  6324  0027B6  0E00               	movlw	0
  6325  0027B8  6F8B               	movwf	(?___fttol+1)& (0+255),b
  6326  0027BA  0E00               	movlw	0
  6327  0027BC  6F8C               	movwf	(?___fttol+2)& (0+255),b
  6328  0027BE  0E00               	movlw	0
  6329  0027C0  6F8D               	movwf	(?___fttol+3)& (0+255),b
  6330                           
  6331                           ; BSR set to: 0
  6332  0027C2  0012               	return	
  6333  0027C4                     
  6334                           ; BSR set to: 0
  6335                           
  6336                           ; BSR set to: 0
  6337  0027C4  90D8               	bcf	status,0,c
  6338  0027C6  3794               	rlcf	___fttol@lval& (0+255),f,b
  6339  0027C8  3795               	rlcf	(___fttol@lval+1)& (0+255),f,b
  6340  0027CA  3796               	rlcf	(___fttol@lval+2)& (0+255),f,b
  6341  0027CC  3797               	rlcf	(___fttol@lval+3)& (0+255),f,b
  6342  0027CE  0798               	decf	___fttol@exp1& (0+255),f,b
  6343  0027D0                     l617:
  6344                           
  6345                           ; BSR set to: 0
  6346                           
  6347                           ; BSR set to: 0
  6348  0027D0  5198               	movf	___fttol@exp1& (0+255),w,b
  6349  0027D2  A4D8               	btfss	status,2,c
  6350  0027D4  D7F7               	goto	l618
  6351  0027D6                     u2770:
  6352                           
  6353                           ; BSR set to: 0
  6354                           
  6355                           ; BSR set to: 0
  6356                           
  6357                           ; BSR set to: 0
  6358  0027D6  5193               	movf	___fttol@sign1& (0+255),w,b
  6359  0027D8  B4D8               	btfsc	status,2,c
  6360  0027DA  D008               	goto	l620
  6361                           
  6362                           ; BSR set to: 0
  6363  0027DC  1F97               	comf	(___fttol@lval+3)& (0+255),f,b
  6364  0027DE  1F96               	comf	(___fttol@lval+2)& (0+255),f,b
  6365  0027E0  1F95               	comf	(___fttol@lval+1)& (0+255),f,b
  6366  0027E2  6D94               	negf	___fttol@lval& (0+255),b
  6367  0027E4  0E00               	movlw	0
  6368  0027E6  2395               	addwfc	(___fttol@lval+1)& (0+255),f,b
  6369  0027E8  2396               	addwfc	(___fttol@lval+2)& (0+255),f,b
  6370  0027EA  2397               	addwfc	(___fttol@lval+3)& (0+255),f,b
  6371  0027EC                     l620:
  6372                           
  6373                           ; BSR set to: 0
  6374                           
  6375                           ; BSR set to: 0
  6376  0027EC  C094  F08A         	movff	___fttol@lval,?___fttol
  6377  0027F0  C095  F08B         	movff	___fttol@lval+1,?___fttol+1
  6378  0027F4  C096  F08C         	movff	___fttol@lval+2,?___fttol+2
  6379  0027F8  C097  F08D         	movff	___fttol@lval+3,?___fttol+3
  6380  0027FC  0012               	return	
  6381  0027FE                     __end_of___fttol:
  6382                           	opt stack 0
  6383                           tblptru	equ	0xFF8
  6384                           tblptrh	equ	0xFF7
  6385                           tblptrl	equ	0xFF6
  6386                           tablat	equ	0xFF5
  6387                           prodh	equ	0xFF4
  6388                           prodl	equ	0xFF3
  6389                           postinc0	equ	0xFEE
  6390                           wreg	equ	0xFE8
  6391                           indf2	equ	0xFDF
  6392                           postinc2	equ	0xFDE
  6393                           postdec2	equ	0xFDD
  6394                           fsr2h	equ	0xFDA
  6395                           fsr2l	equ	0xFD9
  6396                           status	equ	0xFD8
  6397                           
  6398 ;; *************** function ___ftsub *****************
  6399 ;; Defined at:
  6400 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  6401 ;; Parameters:    Size  Location     Type
  6402 ;;  f1              3   57[BANK0 ] float 
  6403 ;;  f2              3   60[BANK0 ] float 
  6404 ;; Auto vars:     Size  Location     Type
  6405 ;;		None
  6406 ;; Return value:  Size  Location     Type
  6407 ;;                  3   57[BANK0 ] float 
  6408 ;; Registers used:
  6409 ;;		wreg, status,2, status,0, cstack
  6410 ;; Tracked objects:
  6411 ;;		On entry : 0/0
  6412 ;;		On exit  : 0/0
  6413 ;;		Unchanged: 0/0
  6414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6415 ;;      Params:         0       6       0       0       0       0       0       0       0
  6416 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6417 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6418 ;;      Totals:         0       6       0       0       0       0       0       0       0
  6419 ;;Total ram usage:        6 bytes
  6420 ;; Hardware stack levels used:    1
  6421 ;; Hardware stack levels required when called:    5
  6422 ;; This function calls:
  6423 ;;		___ftadd
  6424 ;; This function is called by:
  6425 ;;		_sprintf
  6426 ;;		_sqrt
  6427 ;; This function uses a non-reentrant model
  6428 ;;
  6429                           
  6430                           	psect	text16
  6431  0030B0                     __ptext16:
  6432                           	opt stack 0
  6433  0030B0                     ___ftsub:
  6434                           	opt stack 24
  6435                           
  6436                           ; BSR set to: 0
  6437                           ;incstack = 0
  6438  0030B0  0100               	movlb	0	; () banked
  6439  0030B2  519C               	movf	___ftsub@f2& (0+255),w,b
  6440  0030B4  119D               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  6441  0030B6  119E               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  6442  0030B8  B4D8               	btfsc	status,2,c
  6443  0030BA  D006               	goto	l605
  6444                           
  6445                           ; BSR set to: 0
  6446  0030BC  0E00               	movlw	0
  6447  0030BE  1B9C               	xorwf	___ftsub@f2& (0+255),f,b
  6448  0030C0  0E00               	movlw	0
  6449  0030C2  1B9D               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  6450  0030C4  0E80               	movlw	128
  6451  0030C6  1B9E               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  6452  0030C8                     l605:
  6453                           
  6454                           ; BSR set to: 0
  6455                           
  6456                           ; BSR set to: 0
  6457  0030C8  C099  F08D         	movff	___ftsub@f1,___ftadd@f1
  6458  0030CC  C09A  F08E         	movff	___ftsub@f1+1,___ftadd@f1+1
  6459  0030D0  C09B  F08F         	movff	___ftsub@f1+2,___ftadd@f1+2
  6460  0030D4  C09C  F090         	movff	___ftsub@f2,___ftadd@f2
  6461  0030D8  C09D  F091         	movff	___ftsub@f2+1,___ftadd@f2+1
  6462  0030DC  C09E  F092         	movff	___ftsub@f2+2,___ftadd@f2+2
  6463  0030E0  EC5E  F00E         	call	___ftadd	;wreg free
  6464  0030E4  C08D  F099         	movff	?___ftadd,?___ftsub
  6465  0030E8  C08E  F09A         	movff	?___ftadd+1,?___ftsub+1
  6466  0030EC  C08F  F09B         	movff	?___ftadd+2,?___ftsub+2
  6467  0030F0  0012               	return	
  6468  0030F2                     __end_of___ftsub:
  6469                           	opt stack 0
  6470                           tblptru	equ	0xFF8
  6471                           tblptrh	equ	0xFF7
  6472                           tblptrl	equ	0xFF6
  6473                           tablat	equ	0xFF5
  6474                           prodh	equ	0xFF4
  6475                           prodl	equ	0xFF3
  6476                           postinc0	equ	0xFEE
  6477                           wreg	equ	0xFE8
  6478                           indf2	equ	0xFDF
  6479                           postinc2	equ	0xFDE
  6480                           postdec2	equ	0xFDD
  6481                           fsr2h	equ	0xFDA
  6482                           fsr2l	equ	0xFD9
  6483                           status	equ	0xFD8
  6484                           
  6485 ;; *************** function ___ftadd *****************
  6486 ;; Defined at:
  6487 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  6488 ;; Parameters:    Size  Location     Type
  6489 ;;  f1              3   45[BANK0 ] float 
  6490 ;;  f2              3   48[BANK0 ] float 
  6491 ;; Auto vars:     Size  Location     Type
  6492 ;;  exp1            1   56[BANK0 ] unsigned char 
  6493 ;;  exp2            1   55[BANK0 ] unsigned char 
  6494 ;;  sign            1   54[BANK0 ] unsigned char 
  6495 ;; Return value:  Size  Location     Type
  6496 ;;                  3   45[BANK0 ] float 
  6497 ;; Registers used:
  6498 ;;		wreg, status,2, status,0, cstack
  6499 ;; Tracked objects:
  6500 ;;		On entry : 0/0
  6501 ;;		On exit  : 0/0
  6502 ;;		Unchanged: 0/0
  6503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6504 ;;      Params:         0       6       0       0       0       0       0       0       0
  6505 ;;      Locals:         0       3       0       0       0       0       0       0       0
  6506 ;;      Temps:          0       3       0       0       0       0       0       0       0
  6507 ;;      Totals:         0      12       0       0       0       0       0       0       0
  6508 ;;Total ram usage:       12 bytes
  6509 ;; Hardware stack levels used:    1
  6510 ;; Hardware stack levels required when called:    4
  6511 ;; This function calls:
  6512 ;;		___ftpack
  6513 ;; This function is called by:
  6514 ;;		_main
  6515 ;;		_sprintf
  6516 ;;		___ftsub
  6517 ;; This function uses a non-reentrant model
  6518 ;;
  6519                           
  6520                           	psect	text17
  6521  001CBC                     __ptext17:
  6522                           	opt stack 0
  6523  001CBC                     ___ftadd:
  6524                           	opt stack 24
  6525                           
  6526                           ;incstack = 0
  6527  001CBC  C08F  F093         	movff	___ftadd@f1+2,??___ftadd
  6528  001CC0  0100               	movlb	0	; () banked
  6529  001CC2  6B94               	clrf	(??___ftadd+1)& (0+255),b
  6530  001CC4  6B95               	clrf	(??___ftadd+2)& (0+255),b
  6531  001CC6  358E               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  6532  001CC8  3793               	rlcf	??___ftadd& (0+255),f,b
  6533  001CCA  E301               	bnc	u1961
  6534  001CCC  8194               	bsf	(??___ftadd+1)& (0+255),0,b
  6535  001CCE                     u1961:
  6536  001CCE  5193               	movf	??___ftadd& (0+255),w,b
  6537  001CD0  6F98               	movwf	___ftadd@exp1& (0+255),b
  6538  001CD2  C092  F093         	movff	___ftadd@f2+2,??___ftadd
  6539  001CD6  6B94               	clrf	(??___ftadd+1)& (0+255),b
  6540  001CD8  6B95               	clrf	(??___ftadd+2)& (0+255),b
  6541  001CDA  3591               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  6542  001CDC  3793               	rlcf	??___ftadd& (0+255),f,b
  6543  001CDE  E301               	bnc	u1971
  6544  001CE0  8194               	bsf	(??___ftadd+1)& (0+255),0,b
  6545  001CE2                     u1971:
  6546  001CE2  5193               	movf	??___ftadd& (0+255),w,b
  6547  001CE4  6F97               	movwf	___ftadd@exp2& (0+255),b
  6548                           
  6549                           ; BSR set to: 0
  6550  001CE6  5198               	movf	___ftadd@exp1& (0+255),w,b
  6551  001CE8  B4D8               	btfsc	status,2,c
  6552  001CEA  D00B               	goto	u2000
  6553                           
  6554                           ; BSR set to: 0
  6555  001CEC  5197               	movf	___ftadd@exp2& (0+255),w,b
  6556  001CEE  5D98               	subwf	___ftadd@exp1& (0+255),w,b
  6557  001CF0  B0D8               	btfsc	status,0,c
  6558  001CF2  D00E               	goto	l523
  6559                           
  6560                           ; BSR set to: 0
  6561  001CF4  5198               	movf	___ftadd@exp1& (0+255),w,b
  6562  001CF6  0800               	sublw	0
  6563  001CF8  2597               	addwf	___ftadd@exp2& (0+255),w,b
  6564  001CFA  6F93               	movwf	??___ftadd& (0+255),b
  6565  001CFC  0E18               	movlw	24
  6566  001CFE  6593               	cpfsgt	??___ftadd& (0+255),b
  6567  001D00  D007               	goto	l523
  6568  001D02                     u2000:
  6569                           
  6570                           ; BSR set to: 0
  6571  001D02  C090  F08D         	movff	___ftadd@f2,?___ftadd
  6572  001D06  C091  F08E         	movff	___ftadd@f2+1,?___ftadd+1
  6573  001D0A  C092  F08F         	movff	___ftadd@f2+2,?___ftadd+2
  6574  001D0E  0012               	return	
  6575  001D10                     l523:
  6576                           
  6577                           ; BSR set to: 0
  6578                           
  6579                           ; BSR set to: 0
  6580  001D10  5197               	movf	___ftadd@exp2& (0+255),w,b
  6581  001D12  B4D8               	btfsc	status,2,c
  6582  001D14  D00B               	goto	u2030
  6583                           
  6584                           ; BSR set to: 0
  6585  001D16  5198               	movf	___ftadd@exp1& (0+255),w,b
  6586  001D18  5D97               	subwf	___ftadd@exp2& (0+255),w,b
  6587  001D1A  B0D8               	btfsc	status,0,c
  6588  001D1C  D00E               	goto	l527
  6589                           
  6590                           ; BSR set to: 0
  6591  001D1E  5197               	movf	___ftadd@exp2& (0+255),w,b
  6592  001D20  0800               	sublw	0
  6593  001D22  2598               	addwf	___ftadd@exp1& (0+255),w,b
  6594  001D24  6F93               	movwf	??___ftadd& (0+255),b
  6595  001D26  0E18               	movlw	24
  6596  001D28  6593               	cpfsgt	??___ftadd& (0+255),b
  6597  001D2A  D007               	goto	l527
  6598  001D2C                     u2030:
  6599                           
  6600                           ; BSR set to: 0
  6601  001D2C  C08D  F08D         	movff	___ftadd@f1,?___ftadd
  6602  001D30  C08E  F08E         	movff	___ftadd@f1+1,?___ftadd+1
  6603  001D34  C08F  F08F         	movff	___ftadd@f1+2,?___ftadd+2
  6604  001D38  0012               	return	
  6605  001D3A                     l527:
  6606                           
  6607                           ; BSR set to: 0
  6608                           
  6609                           ; BSR set to: 0
  6610  001D3A  0E06               	movlw	6
  6611  001D3C  6F96               	movwf	___ftadd@sign& (0+255),b
  6612                           
  6613                           ; BSR set to: 0
  6614  001D3E  BF8F               	btfsc	(___ftadd@f1+2)& (0+255),7,b
  6615                           
  6616                           ; BSR set to: 0
  6617  001D40  8F96               	bsf	___ftadd@sign& (0+255),7,b
  6618                           
  6619                           ; BSR set to: 0
  6620                           
  6621                           ; BSR set to: 0
  6622  001D42  BF92               	btfsc	(___ftadd@f2+2)& (0+255),7,b
  6623                           
  6624                           ; BSR set to: 0
  6625  001D44  8D96               	bsf	___ftadd@sign& (0+255),6,b
  6626                           
  6627                           ; BSR set to: 0
  6628  001D46  8F8E               	bsf	(___ftadd@f1+1)& (0+255),7,b
  6629                           
  6630                           ; BSR set to: 0
  6631  001D48  0EFF               	movlw	255
  6632  001D4A  178D               	andwf	___ftadd@f1& (0+255),f,b
  6633  001D4C  0EFF               	movlw	255
  6634  001D4E  178E               	andwf	(___ftadd@f1+1)& (0+255),f,b
  6635  001D50  0E00               	movlw	0
  6636  001D52  178F               	andwf	(___ftadd@f1+2)& (0+255),f,b
  6637  001D54  8F91               	bsf	(___ftadd@f2+1)& (0+255),7,b
  6638                           
  6639                           ; BSR set to: 0
  6640  001D56  0EFF               	movlw	255
  6641  001D58  1790               	andwf	___ftadd@f2& (0+255),f,b
  6642  001D5A  0EFF               	movlw	255
  6643  001D5C  1791               	andwf	(___ftadd@f2+1)& (0+255),f,b
  6644  001D5E  0E00               	movlw	0
  6645  001D60  1792               	andwf	(___ftadd@f2+2)& (0+255),f,b
  6646                           
  6647                           ; BSR set to: 0
  6648  001D62  5197               	movf	___ftadd@exp2& (0+255),w,b
  6649  001D64  5D98               	subwf	___ftadd@exp1& (0+255),w,b
  6650  001D66  B0D8               	btfsc	status,0,c
  6651  001D68  D01B               	goto	l532
  6652  001D6A                     u2060:
  6653                           
  6654                           ; BSR set to: 0
  6655                           
  6656                           ; BSR set to: 0
  6657  001D6A  90D8               	bcf	status,0,c
  6658  001D6C  3790               	rlcf	___ftadd@f2& (0+255),f,b
  6659  001D6E  3791               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  6660  001D70  3792               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  6661  001D72  0797               	decf	___ftadd@exp2& (0+255),f,b
  6662                           
  6663                           ; BSR set to: 0
  6664  001D74  5198               	movf	___ftadd@exp1& (0+255),w,b
  6665  001D76  1997               	xorwf	___ftadd@exp2& (0+255),w,b
  6666  001D78  B4D8               	btfsc	status,2,c
  6667  001D7A  D00D               	goto	l537
  6668                           
  6669                           ; BSR set to: 0
  6670  001D7C  0796               	decf	___ftadd@sign& (0+255),f,b
  6671  001D7E  C096  F093         	movff	___ftadd@sign,??___ftadd
  6672  001D82  0E07               	movlw	7
  6673  001D84  1793               	andwf	??___ftadd& (0+255),f,b
  6674  001D86  B4D8               	btfsc	status,2,c
  6675  001D88  D006               	goto	l537
  6676  001D8A  D7EF               	goto	u2060
  6677  001D8C                     
  6678                           ; BSR set to: 0
  6679                           
  6680                           ; BSR set to: 0
  6681  001D8C  90D8               	bcf	status,0,c
  6682  001D8E  338F               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  6683  001D90  338E               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  6684  001D92  338D               	rrcf	___ftadd@f1& (0+255),f,b
  6685  001D94  2B98               	incf	___ftadd@exp1& (0+255),f,b
  6686  001D96                     l537:
  6687                           
  6688                           ; BSR set to: 0
  6689                           
  6690                           ; BSR set to: 0
  6691  001D96  5197               	movf	___ftadd@exp2& (0+255),w,b
  6692  001D98  1998               	xorwf	___ftadd@exp1& (0+255),w,b
  6693  001D9A  B4D8               	btfsc	status,2,c
  6694  001D9C  D01F               	goto	u2130
  6695  001D9E  D7F6               	goto	l538
  6696  001DA0                     l532:
  6697                           
  6698                           ; BSR set to: 0
  6699                           
  6700                           ; BSR set to: 0
  6701  001DA0  5198               	movf	___ftadd@exp1& (0+255),w,b
  6702  001DA2  5D97               	subwf	___ftadd@exp2& (0+255),w,b
  6703  001DA4  B0D8               	btfsc	status,0,c
  6704  001DA6  D01A               	goto	u2130
  6705  001DA8                     u2100:
  6706                           
  6707                           ; BSR set to: 0
  6708                           
  6709                           ; BSR set to: 0
  6710  001DA8  90D8               	bcf	status,0,c
  6711  001DAA  378D               	rlcf	___ftadd@f1& (0+255),f,b
  6712  001DAC  378E               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  6713  001DAE  378F               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  6714  001DB0  0798               	decf	___ftadd@exp1& (0+255),f,b
  6715                           
  6716                           ; BSR set to: 0
  6717  001DB2  5198               	movf	___ftadd@exp1& (0+255),w,b
  6718  001DB4  1997               	xorwf	___ftadd@exp2& (0+255),w,b
  6719  001DB6  B4D8               	btfsc	status,2,c
  6720  001DB8  D00D               	goto	l546
  6721                           
  6722                           ; BSR set to: 0
  6723  001DBA  0796               	decf	___ftadd@sign& (0+255),f,b
  6724  001DBC  C096  F093         	movff	___ftadd@sign,??___ftadd
  6725  001DC0  0E07               	movlw	7
  6726  001DC2  1793               	andwf	??___ftadd& (0+255),f,b
  6727  001DC4  B4D8               	btfsc	status,2,c
  6728  001DC6  D006               	goto	l546
  6729  001DC8  D7EF               	goto	u2100
  6730  001DCA                     
  6731                           ; BSR set to: 0
  6732                           
  6733                           ; BSR set to: 0
  6734  001DCA  90D8               	bcf	status,0,c
  6735  001DCC  3392               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  6736  001DCE  3391               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  6737  001DD0  3390               	rrcf	___ftadd@f2& (0+255),f,b
  6738  001DD2  2B97               	incf	___ftadd@exp2& (0+255),f,b
  6739  001DD4                     l546:
  6740                           
  6741                           ; BSR set to: 0
  6742                           
  6743                           ; BSR set to: 0
  6744  001DD4  5197               	movf	___ftadd@exp2& (0+255),w,b
  6745  001DD6  1998               	xorwf	___ftadd@exp1& (0+255),w,b
  6746  001DD8  A4D8               	btfss	status,2,c
  6747  001DDA  D7F7               	goto	l547
  6748  001DDC                     u2130:
  6749                           
  6750                           ; BSR set to: 0
  6751                           
  6752                           ; BSR set to: 0
  6753                           
  6754                           ; BSR set to: 0
  6755  001DDC  AF96               	btfss	___ftadd@sign& (0+255),7,b
  6756  001DDE  D00C               	goto	l549
  6757                           
  6758                           ; BSR set to: 0
  6759  001DE0  0EFF               	movlw	255
  6760  001DE2  1B8D               	xorwf	___ftadd@f1& (0+255),f,b
  6761  001DE4  0EFF               	movlw	255
  6762  001DE6  1B8E               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  6763  001DE8  0EFF               	movlw	255
  6764  001DEA  1B8F               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  6765  001DEC  0E01               	movlw	1
  6766  001DEE  278D               	addwf	___ftadd@f1& (0+255),f,b
  6767  001DF0  0E00               	movlw	0
  6768  001DF2  238E               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  6769  001DF4  0E00               	movlw	0
  6770  001DF6  238F               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  6771  001DF8                     l549:
  6772                           
  6773                           ; BSR set to: 0
  6774  001DF8  AD96               	btfss	___ftadd@sign& (0+255),6,b
  6775  001DFA  D00C               	goto	l550
  6776                           
  6777                           ; BSR set to: 0
  6778  001DFC  0EFF               	movlw	255
  6779  001DFE  1B90               	xorwf	___ftadd@f2& (0+255),f,b
  6780  001E00  0EFF               	movlw	255
  6781  001E02  1B91               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  6782  001E04  0EFF               	movlw	255
  6783  001E06  1B92               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  6784  001E08  0E01               	movlw	1
  6785  001E0A  2790               	addwf	___ftadd@f2& (0+255),f,b
  6786  001E0C  0E00               	movlw	0
  6787  001E0E  2391               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  6788  001E10  0E00               	movlw	0
  6789  001E12  2392               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  6790  001E14                     l550:
  6791                           
  6792                           ; BSR set to: 0
  6793                           
  6794                           ; BSR set to: 0
  6795  001E14  0E00               	movlw	0
  6796  001E16  6F96               	movwf	___ftadd@sign& (0+255),b
  6797                           
  6798                           ; BSR set to: 0
  6799  001E18  518D               	movf	___ftadd@f1& (0+255),w,b
  6800  001E1A  2790               	addwf	___ftadd@f2& (0+255),f,b
  6801  001E1C  518E               	movf	(___ftadd@f1+1)& (0+255),w,b
  6802  001E1E  2391               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  6803  001E20  518F               	movf	(___ftadd@f1+2)& (0+255),w,b
  6804  001E22  2392               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  6805                           
  6806                           ; BSR set to: 0
  6807  001E24  AF92               	btfss	(___ftadd@f2+2)& (0+255),7,b
  6808  001E26  D00E               	goto	l551
  6809                           
  6810                           ; BSR set to: 0
  6811  001E28  0EFF               	movlw	255
  6812  001E2A  1B90               	xorwf	___ftadd@f2& (0+255),f,b
  6813  001E2C  0EFF               	movlw	255
  6814  001E2E  1B91               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  6815  001E30  0EFF               	movlw	255
  6816  001E32  1B92               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  6817  001E34  0E01               	movlw	1
  6818  001E36  2790               	addwf	___ftadd@f2& (0+255),f,b
  6819  001E38  0E00               	movlw	0
  6820  001E3A  2391               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  6821  001E3C  0E00               	movlw	0
  6822  001E3E  2392               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  6823                           
  6824                           ; BSR set to: 0
  6825  001E40  0E01               	movlw	1
  6826  001E42  6F96               	movwf	___ftadd@sign& (0+255),b
  6827  001E44                     l551:
  6828                           
  6829                           ; BSR set to: 0
  6830                           
  6831                           ; BSR set to: 0
  6832  001E44  C090  F060         	movff	___ftadd@f2,___ftpack@arg
  6833  001E48  C091  F061         	movff	___ftadd@f2+1,___ftpack@arg+1
  6834  001E4C  C092  F062         	movff	___ftadd@f2+2,___ftpack@arg+2
  6835  001E50  C098  F063         	movff	___ftadd@exp1,___ftpack@exp
  6836  001E54  C096  F064         	movff	___ftadd@sign,___ftpack@sign
  6837  001E58  ECDB  F015         	call	___ftpack	;wreg free
  6838  001E5C  C060  F08D         	movff	?___ftpack,?___ftadd
  6839  001E60  C061  F08E         	movff	?___ftpack+1,?___ftadd+1
  6840  001E64  C062  F08F         	movff	?___ftpack+2,?___ftadd+2
  6841  001E68  0012               	return	
  6842  001E6A                     __end_of___ftadd:
  6843                           	opt stack 0
  6844                           tblptru	equ	0xFF8
  6845                           tblptrh	equ	0xFF7
  6846                           tblptrl	equ	0xFF6
  6847                           tablat	equ	0xFF5
  6848                           prodh	equ	0xFF4
  6849                           prodl	equ	0xFF3
  6850                           postinc0	equ	0xFEE
  6851                           wreg	equ	0xFE8
  6852                           indf2	equ	0xFDF
  6853                           postinc2	equ	0xFDE
  6854                           postdec2	equ	0xFDD
  6855                           fsr2h	equ	0xFDA
  6856                           fsr2l	equ	0xFD9
  6857                           status	equ	0xFD8
  6858                           
  6859 ;; *************** function ___ftneg *****************
  6860 ;; Defined at:
  6861 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
  6862 ;; Parameters:    Size  Location     Type
  6863 ;;  f1              3    0[BANK0 ] float 
  6864 ;; Auto vars:     Size  Location     Type
  6865 ;;		None
  6866 ;; Return value:  Size  Location     Type
  6867 ;;                  3    0[BANK0 ] float 
  6868 ;; Registers used:
  6869 ;;		wreg, status,2, status,0
  6870 ;; Tracked objects:
  6871 ;;		On entry : 0/0
  6872 ;;		On exit  : 0/0
  6873 ;;		Unchanged: 0/0
  6874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6875 ;;      Params:         0       3       0       0       0       0       0       0       0
  6876 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6877 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6878 ;;      Totals:         0       3       0       0       0       0       0       0       0
  6879 ;;Total ram usage:        3 bytes
  6880 ;; Hardware stack levels used:    1
  6881 ;; Hardware stack levels required when called:    3
  6882 ;; This function calls:
  6883 ;;		Nothing
  6884 ;; This function is called by:
  6885 ;;		_sprintf
  6886 ;; This function uses a non-reentrant model
  6887 ;;
  6888                           
  6889                           	psect	text18
  6890  003146                     __ptext18:
  6891                           	opt stack 0
  6892  003146                     ___ftneg:
  6893                           	opt stack 26
  6894                           
  6895                           ;incstack = 0
  6896  003146  0100               	movlb	0	; () banked
  6897  003148  5160               	movf	___ftneg@f1& (0+255),w,b
  6898  00314A  1161               	iorwf	(___ftneg@f1+1)& (0+255),w,b
  6899  00314C  1162               	iorwf	(___ftneg@f1+2)& (0+255),w,b
  6900  00314E  B4D8               	btfsc	status,2,c
  6901  003150  D006               	goto	l599
  6902                           
  6903                           ; BSR set to: 0
  6904  003152  0E00               	movlw	0
  6905  003154  1B60               	xorwf	___ftneg@f1& (0+255),f,b
  6906  003156  0E00               	movlw	0
  6907  003158  1B61               	xorwf	(___ftneg@f1+1)& (0+255),f,b
  6908  00315A  0E80               	movlw	128
  6909  00315C  1B62               	xorwf	(___ftneg@f1+2)& (0+255),f,b
  6910  00315E                     l599:
  6911                           
  6912                           ; BSR set to: 0
  6913  00315E  C060  F060         	movff	___ftneg@f1,?___ftneg
  6914  003162  C061  F061         	movff	___ftneg@f1+1,?___ftneg+1
  6915  003166  C062  F062         	movff	___ftneg@f1+2,?___ftneg+2
  6916                           
  6917                           ; BSR set to: 0
  6918  00316A  0012               	return		;funcret
  6919  00316C                     __end_of___ftneg:
  6920                           	opt stack 0
  6921                           tblptru	equ	0xFF8
  6922                           tblptrh	equ	0xFF7
  6923                           tblptrl	equ	0xFF6
  6924                           tablat	equ	0xFF5
  6925                           prodh	equ	0xFF4
  6926                           prodl	equ	0xFF3
  6927                           postinc0	equ	0xFEE
  6928                           wreg	equ	0xFE8
  6929                           indf2	equ	0xFDF
  6930                           postinc2	equ	0xFDE
  6931                           postdec2	equ	0xFDD
  6932                           fsr2h	equ	0xFDA
  6933                           fsr2l	equ	0xFD9
  6934                           status	equ	0xFD8
  6935                           
  6936 ;; *************** function ___ftge *****************
  6937 ;; Defined at:
  6938 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  6939 ;; Parameters:    Size  Location     Type
  6940 ;;  ff1             3    0[BANK0 ] float 
  6941 ;;  ff2             3    3[BANK0 ] float 
  6942 ;; Auto vars:     Size  Location     Type
  6943 ;;		None
  6944 ;; Return value:  Size  Location     Type
  6945 ;;		None               void
  6946 ;; Registers used:
  6947 ;;		wreg, status,2, status,0
  6948 ;; Tracked objects:
  6949 ;;		On entry : 0/0
  6950 ;;		On exit  : 0/0
  6951 ;;		Unchanged: 0/0
  6952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6953 ;;      Params:         0       6       0       0       0       0       0       0       0
  6954 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6955 ;;      Temps:          0       3       0       0       0       0       0       0       0
  6956 ;;      Totals:         0       9       0       0       0       0       0       0       0
  6957 ;;Total ram usage:        9 bytes
  6958 ;; Hardware stack levels used:    1
  6959 ;; Hardware stack levels required when called:    3
  6960 ;; This function calls:
  6961 ;;		Nothing
  6962 ;; This function is called by:
  6963 ;;		_sprintf
  6964 ;;		_sqrt
  6965 ;; This function uses a non-reentrant model
  6966 ;;
  6967                           
  6968                           	psect	text19
  6969  002D14                     __ptext19:
  6970                           	opt stack 0
  6971  002D14                     ___ftge:
  6972                           	opt stack 26
  6973                           
  6974                           ; BSR set to: 0
  6975                           ;incstack = 0
  6976  002D14  0100               	movlb	0	; () banked
  6977  002D16  AF62               	btfss	(___ftge@ff1+2)& (0+255),7,b
  6978  002D18  D016               	goto	l581
  6979                           
  6980                           ; BSR set to: 0
  6981  002D1A  C060  F066         	movff	___ftge@ff1,??___ftge
  6982  002D1E  C061  F067         	movff	___ftge@ff1+1,??___ftge+1
  6983  002D22  C062  F068         	movff	___ftge@ff1+2,??___ftge+2
  6984  002D26  1F66               	comf	??___ftge& (0+255),f,b
  6985  002D28  1F67               	comf	(??___ftge+1)& (0+255),f,b
  6986  002D2A  1F68               	comf	(??___ftge+2)& (0+255),f,b
  6987  002D2C  2B66               	incf	??___ftge& (0+255),f,b
  6988  002D2E  0E00               	movlw	0
  6989  002D30  2367               	addwfc	(??___ftge+1)& (0+255),f,b
  6990  002D32  2368               	addwfc	(??___ftge+2)& (0+255),f,b
  6991  002D34  0E00               	movlw	0
  6992  002D36  2566               	addwf	??___ftge& (0+255),w,b
  6993  002D38  6F60               	movwf	___ftge@ff1& (0+255),b
  6994  002D3A  0E00               	movlw	0
  6995  002D3C  2167               	addwfc	(??___ftge+1)& (0+255),w,b
  6996  002D3E  6F61               	movwf	(___ftge@ff1+1)& (0+255),b
  6997  002D40  0E80               	movlw	128
  6998  002D42  2168               	addwfc	(??___ftge+2)& (0+255),w,b
  6999  002D44  6F62               	movwf	(___ftge@ff1+2)& (0+255),b
  7000  002D46                     l581:
  7001                           
  7002                           ; BSR set to: 0
  7003                           
  7004                           ; BSR set to: 0
  7005  002D46  AF65               	btfss	(___ftge@ff2+2)& (0+255),7,b
  7006  002D48  D016               	goto	l582
  7007                           
  7008                           ; BSR set to: 0
  7009  002D4A  C063  F066         	movff	___ftge@ff2,??___ftge
  7010  002D4E  C064  F067         	movff	___ftge@ff2+1,??___ftge+1
  7011  002D52  C065  F068         	movff	___ftge@ff2+2,??___ftge+2
  7012  002D56  1F66               	comf	??___ftge& (0+255),f,b
  7013  002D58  1F67               	comf	(??___ftge+1)& (0+255),f,b
  7014  002D5A  1F68               	comf	(??___ftge+2)& (0+255),f,b
  7015  002D5C  2B66               	incf	??___ftge& (0+255),f,b
  7016  002D5E  0E00               	movlw	0
  7017  002D60  2367               	addwfc	(??___ftge+1)& (0+255),f,b
  7018  002D62  2368               	addwfc	(??___ftge+2)& (0+255),f,b
  7019  002D64  0E00               	movlw	0
  7020  002D66  2566               	addwf	??___ftge& (0+255),w,b
  7021  002D68  6F63               	movwf	___ftge@ff2& (0+255),b
  7022  002D6A  0E00               	movlw	0
  7023  002D6C  2167               	addwfc	(??___ftge+1)& (0+255),w,b
  7024  002D6E  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  7025  002D70  0E80               	movlw	128
  7026  002D72  2168               	addwfc	(??___ftge+2)& (0+255),w,b
  7027  002D74  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  7028  002D76                     l582:
  7029                           
  7030                           ; BSR set to: 0
  7031                           
  7032                           ; BSR set to: 0
  7033  002D76  0E00               	movlw	0
  7034  002D78  1B60               	xorwf	___ftge@ff1& (0+255),f,b
  7035  002D7A  0E00               	movlw	0
  7036  002D7C  1B61               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  7037  002D7E  0E80               	movlw	128
  7038  002D80  1B62               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  7039                           
  7040                           ; BSR set to: 0
  7041  002D82  0E00               	movlw	0
  7042  002D84  1B63               	xorwf	___ftge@ff2& (0+255),f,b
  7043  002D86  0E00               	movlw	0
  7044  002D88  1B64               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  7045  002D8A  0E80               	movlw	128
  7046  002D8C  1B65               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  7047  002D8E  5163               	movf	___ftge@ff2& (0+255),w,b
  7048  002D90  5D60               	subwf	___ftge@ff1& (0+255),w,b
  7049  002D92  5164               	movf	(___ftge@ff2+1)& (0+255),w,b
  7050  002D94  5961               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  7051  002D96  5165               	movf	(___ftge@ff2+2)& (0+255),w,b
  7052  002D98  5962               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  7053  002D9A  B0D8               	btfsc	status,0,c
  7054  002D9C  D002               	goto	l2302
  7055                           
  7056                           ; BSR set to: 0
  7057  002D9E  90D8               	bcf	status,0,c
  7058  002DA0  0012               	return	
  7059  002DA2                     l2302:
  7060                           
  7061                           ; BSR set to: 0
  7062                           
  7063                           ; BSR set to: 0
  7064  002DA2  80D8               	bsf	status,0,c
  7065                           
  7066                           ; BSR set to: 0
  7067  002DA4  0012               	return	
  7068  002DA6                     __end_of___ftge:
  7069                           	opt stack 0
  7070                           tblptru	equ	0xFF8
  7071                           tblptrh	equ	0xFF7
  7072                           tblptrl	equ	0xFF6
  7073                           tablat	equ	0xFF5
  7074                           prodh	equ	0xFF4
  7075                           prodl	equ	0xFF3
  7076                           postinc0	equ	0xFEE
  7077                           wreg	equ	0xFE8
  7078                           indf2	equ	0xFDF
  7079                           postinc2	equ	0xFDE
  7080                           postdec2	equ	0xFDD
  7081                           fsr2h	equ	0xFDA
  7082                           fsr2l	equ	0xFD9
  7083                           status	equ	0xFD8
  7084                           
  7085 ;; *************** function _configstandard *****************
  7086 ;; Defined at:
  7087 ;;		line 10 in file "configstandard.c"
  7088 ;; Parameters:    Size  Location     Type
  7089 ;;		None
  7090 ;; Auto vars:     Size  Location     Type
  7091 ;;		None
  7092 ;; Return value:  Size  Location     Type
  7093 ;;                  1    wreg      void 
  7094 ;; Registers used:
  7095 ;;		wreg, status,2
  7096 ;; Tracked objects:
  7097 ;;		On entry : 0/0
  7098 ;;		On exit  : 0/0
  7099 ;;		Unchanged: 0/0
  7100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7101 ;;      Params:         0       0       0       0       0       0       0       0       0
  7102 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7103 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7104 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7105 ;;Total ram usage:        0 bytes
  7106 ;; Hardware stack levels used:    1
  7107 ;; Hardware stack levels required when called:    3
  7108 ;; This function calls:
  7109 ;;		Nothing
  7110 ;; This function is called by:
  7111 ;;		_main
  7112 ;; This function uses a non-reentrant model
  7113 ;;
  7114                           
  7115                           	psect	text20
  7116  003052                     __ptext20:
  7117                           	opt stack 0
  7118  003052                     _configstandard:
  7119                           	opt stack 27
  7120                           
  7121                           ;configstandard.c: 16: ADCON0bits.CHS3 = 0;
  7122                           
  7123                           ; BSR set to: 0
  7124                           ;incstack = 0
  7125  003052  9AC2               	bcf	4034,5,c	;volatile
  7126                           
  7127                           ;configstandard.c: 17: ADCON0bits.CHS2 = 0;
  7128  003054  98C2               	bcf	4034,4,c	;volatile
  7129                           
  7130                           ;configstandard.c: 18: ADCON0bits.CHS1 = 0;
  7131  003056  96C2               	bcf	4034,3,c	;volatile
  7132                           
  7133                           ;configstandard.c: 19: ADCON0bits.CHS0 = 0;
  7134  003058  94C2               	bcf	4034,2,c	;volatile
  7135                           
  7136                           ;configstandard.c: 20: ADCON0bits.ADON = 1;
  7137  00305A  80C2               	bsf	4034,0,c	;volatile
  7138                           
  7139                           ;configstandard.c: 24: ADCON1 = 0b00001110;
  7140  00305C  0E0E               	movlw	14
  7141  00305E  6EC1               	movwf	4033,c	;volatile
  7142                           
  7143                           ;configstandard.c: 28: ADCON2bits.ADFM = 1;
  7144  003060  8EC0               	bsf	4032,7,c	;volatile
  7145                           
  7146                           ;configstandard.c: 29: ADCON2bits.ACQT2 = 1;
  7147  003062  8AC0               	bsf	4032,5,c	;volatile
  7148                           
  7149                           ;configstandard.c: 30: ADCON2bits.ACQT1 = 0;
  7150  003064  98C0               	bcf	4032,4,c	;volatile
  7151                           
  7152                           ;configstandard.c: 31: ADCON2bits.ACQT0 = 1;
  7153  003066  86C0               	bsf	4032,3,c	;volatile
  7154                           
  7155                           ;configstandard.c: 32: ADCON2bits.ADCS2 = 1;
  7156  003068  84C0               	bsf	4032,2,c	;volatile
  7157                           
  7158                           ;configstandard.c: 33: ADCON2bits.ADCS1 = 0;
  7159  00306A  92C0               	bcf	4032,1,c	;volatile
  7160                           
  7161                           ;configstandard.c: 34: ADCON2bits.ADCS0 = 0;
  7162  00306C  90C0               	bcf	4032,0,c	;volatile
  7163                           
  7164                           ;configstandard.c: 36: ADRESH = 0;
  7165  00306E  0E00               	movlw	0
  7166  003070  6EC4               	movwf	4036,c	;volatile
  7167                           
  7168                           ;configstandard.c: 37: ADRESL = 0;
  7169  003072  0E00               	movlw	0
  7170  003074  6EC3               	movwf	4035,c	;volatile
  7171                           
  7172                           ;configstandard.c: 48: INTCONbits.GIE = 1;
  7173  003076  8EF2               	bsf	intcon,7,c	;volatile
  7174                           
  7175                           ;configstandard.c: 49: INTCONbits.PEIE = 1;
  7176  003078  8CF2               	bsf	intcon,6,c	;volatile
  7177                           
  7178                           ;configstandard.c: 50: PIE1bits.CCP1IE = 1;
  7179  00307A  849D               	bsf	3997,2,c	;volatile
  7180                           
  7181                           ;configstandard.c: 51: PIR1bits.CCP1IF = 0;
  7182  00307C  949E               	bcf	3998,2,c	;volatile
  7183                           
  7184                           ;configstandard.c: 58: T1CONbits.TMR1CS = 0;
  7185  00307E  92CD               	bcf	4045,1,c	;volatile
  7186                           
  7187                           ;configstandard.c: 59: T1CONbits.RD16 = 1;
  7188  003080  8ECD               	bsf	4045,7,c	;volatile
  7189                           
  7190                           ;configstandard.c: 60: T1CONbits.T1CKPS = 0b00;
  7191  003082  0ECF               	movlw	-49
  7192  003084  16CD               	andwf	4045,f,c	;volatile
  7193                           
  7194                           ;configstandard.c: 61: T1CONbits.TMR1ON = 0;
  7195  003086  90CD               	bcf	4045,0,c	;volatile
  7196                           
  7197                           ;configstandard.c: 62: TMR1 = 0;
  7198  003088  0E00               	movlw	0
  7199  00308A  6ECF               	movwf	4047,c	;volatile
  7200  00308C  0E00               	movlw	0
  7201  00308E  6ECE               	movwf	4046,c	;volatile
  7202                           
  7203                           ;configstandard.c: 66: CCP1CONbits.CCP1M = 0b1011;
  7204  003090  50BD               	movf	4029,w,c	;volatile
  7205  003092  0BF0               	andlw	-16
  7206  003094  090B               	iorlw	11
  7207  003096  6EBD               	movwf	4029,c	;volatile
  7208                           
  7209                           ;configstandard.c: 67: CCPR1 = 2400;
  7210  003098  0E09               	movlw	9
  7211  00309A  6EBF               	movwf	4031,c	;volatile
  7212  00309C  0E60               	movlw	96
  7213  00309E  6EBE               	movwf	4030,c	;volatile
  7214                           
  7215                           ;configstandard.c: 71: ADCON2bits.ADCS=110;
  7216  0030A0  50C0               	movf	4032,w,c	;volatile
  7217  0030A2  0BF8               	andlw	-8
  7218  0030A4  0906               	iorlw	6
  7219  0030A6  6EC0               	movwf	4032,c	;volatile
  7220                           
  7221                           ;configstandard.c: 72: ADCON2bits.ACQT=010;
  7222  0030A8  96C0               	bcf	4032,3,c	;volatile
  7223  0030AA  98C0               	bcf	4032,4,c	;volatile
  7224  0030AC  9AC0               	bcf	4032,5,c	;volatile
  7225  0030AE  0012               	return		;funcret
  7226  0030B0                     __end_of_configstandard:
  7227                           	opt stack 0
  7228                           tblptru	equ	0xFF8
  7229                           tblptrh	equ	0xFF7
  7230                           tblptrl	equ	0xFF6
  7231                           tablat	equ	0xFF5
  7232                           prodh	equ	0xFF4
  7233                           prodl	equ	0xFF3
  7234                           intcon	equ	0xFF2
  7235                           postinc0	equ	0xFEE
  7236                           wreg	equ	0xFE8
  7237                           indf2	equ	0xFDF
  7238                           postinc2	equ	0xFDE
  7239                           postdec2	equ	0xFDD
  7240                           fsr2h	equ	0xFDA
  7241                           fsr2l	equ	0xFD9
  7242                           status	equ	0xFD8
  7243                           
  7244 ;; *************** function ___lwtoft *****************
  7245 ;; Defined at:
  7246 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
  7247 ;; Parameters:    Size  Location     Type
  7248 ;;  c               2    8[BANK0 ] unsigned int 
  7249 ;; Auto vars:     Size  Location     Type
  7250 ;;		None
  7251 ;; Return value:  Size  Location     Type
  7252 ;;                  3    8[BANK0 ] float 
  7253 ;; Registers used:
  7254 ;;		wreg, status,2, status,0, cstack
  7255 ;; Tracked objects:
  7256 ;;		On entry : 0/0
  7257 ;;		On exit  : 0/0
  7258 ;;		Unchanged: 0/0
  7259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7260 ;;      Params:         0       3       0       0       0       0       0       0       0
  7261 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7262 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7263 ;;      Totals:         0       3       0       0       0       0       0       0       0
  7264 ;;Total ram usage:        3 bytes
  7265 ;; Hardware stack levels used:    1
  7266 ;; Hardware stack levels required when called:    4
  7267 ;; This function calls:
  7268 ;;		___ftpack
  7269 ;; This function is called by:
  7270 ;;		_main
  7271 ;; This function uses a non-reentrant model
  7272 ;;
  7273                           
  7274                           	psect	text21
  7275  00316C                     __ptext21:
  7276                           	opt stack 0
  7277  00316C                     ___lwtoft:
  7278                           	opt stack 26
  7279                           
  7280                           ;incstack = 0
  7281  00316C  C068  F060         	movff	___lwtoft@c,___ftpack@arg
  7282  003170  C069  F061         	movff	___lwtoft@c+1,___ftpack@arg+1
  7283  003174  0100               	movlb	0	; () banked
  7284  003176  6B62               	clrf	(___ftpack@arg+2)& (0+255),b
  7285  003178  0E8E               	movlw	142
  7286  00317A  6F63               	movwf	___ftpack@exp& (0+255),b
  7287  00317C  0E00               	movlw	0
  7288  00317E  6F64               	movwf	___ftpack@sign& (0+255),b
  7289  003180  ECDB  F015         	call	___ftpack	;wreg free
  7290  003184  C060  F068         	movff	?___ftpack,?___lwtoft
  7291  003188  C061  F069         	movff	?___ftpack+1,?___lwtoft+1
  7292  00318C  C062  F06A         	movff	?___ftpack+2,?___lwtoft+2
  7293  003190  0012               	return	
  7294  003192                     __end_of___lwtoft:
  7295                           	opt stack 0
  7296                           tblptru	equ	0xFF8
  7297                           tblptrh	equ	0xFF7
  7298                           tblptrl	equ	0xFF6
  7299                           tablat	equ	0xFF5
  7300                           prodh	equ	0xFF4
  7301                           prodl	equ	0xFF3
  7302                           intcon	equ	0xFF2
  7303                           postinc0	equ	0xFEE
  7304                           wreg	equ	0xFE8
  7305                           indf2	equ	0xFDF
  7306                           postinc2	equ	0xFDE
  7307                           postdec2	equ	0xFDD
  7308                           fsr2h	equ	0xFDA
  7309                           fsr2l	equ	0xFD9
  7310                           status	equ	0xFD8
  7311                           
  7312 ;; *************** function ___ftdiv *****************
  7313 ;; Defined at:
  7314 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  7315 ;; Parameters:    Size  Location     Type
  7316 ;;  f1              3   63[BANK0 ] float 
  7317 ;;  f2              3   66[BANK0 ] float 
  7318 ;; Auto vars:     Size  Location     Type
  7319 ;;  f3              3   73[BANK0 ] float 
  7320 ;;  sign            1   77[BANK0 ] unsigned char 
  7321 ;;  exp             1   76[BANK0 ] unsigned char 
  7322 ;;  cntr            1   72[BANK0 ] unsigned char 
  7323 ;; Return value:  Size  Location     Type
  7324 ;;                  3   63[BANK0 ] float 
  7325 ;; Registers used:
  7326 ;;		wreg, status,2, status,0, cstack
  7327 ;; Tracked objects:
  7328 ;;		On entry : 0/0
  7329 ;;		On exit  : 0/0
  7330 ;;		Unchanged: 0/0
  7331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7332 ;;      Params:         0       6       0       0       0       0       0       0       0
  7333 ;;      Locals:         0       6       0       0       0       0       0       0       0
  7334 ;;      Temps:          0       3       0       0       0       0       0       0       0
  7335 ;;      Totals:         0      15       0       0       0       0       0       0       0
  7336 ;;Total ram usage:       15 bytes
  7337 ;; Hardware stack levels used:    1
  7338 ;; Hardware stack levels required when called:    4
  7339 ;; This function calls:
  7340 ;;		___ftpack
  7341 ;; This function is called by:
  7342 ;;		_main
  7343 ;; This function uses a non-reentrant model
  7344 ;;
  7345                           
  7346                           	psect	text22
  7347  0029E8                     __ptext22:
  7348                           	opt stack 0
  7349  0029E8                     ___ftdiv:
  7350                           	opt stack 26
  7351                           
  7352                           ;incstack = 0
  7353  0029E8  C0A1  F0A5         	movff	___ftdiv@f1+2,??___ftdiv
  7354  0029EC  0100               	movlb	0	; () banked
  7355  0029EE  6BA6               	clrf	(??___ftdiv+1)& (0+255),b
  7356  0029F0  6BA7               	clrf	(??___ftdiv+2)& (0+255),b
  7357  0029F2  35A0               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
  7358  0029F4  37A5               	rlcf	??___ftdiv& (0+255),f,b
  7359  0029F6  E301               	bnc	u3561
  7360  0029F8  81A6               	bsf	(??___ftdiv+1)& (0+255),0,b
  7361  0029FA                     u3561:
  7362  0029FA  51A5               	movf	??___ftdiv& (0+255),w,b
  7363  0029FC  6FAC               	movwf	___ftdiv@exp& (0+255),b
  7364  0029FE  51AC               	movf	___ftdiv@exp& (0+255),w,b
  7365  002A00  A4D8               	btfss	status,2,c
  7366  002A02  D007               	goto	l556
  7367                           
  7368                           ; BSR set to: 0
  7369  002A04  0E00               	movlw	0
  7370  002A06  6F9F               	movwf	?___ftdiv& (0+255),b
  7371  002A08  0E00               	movlw	0
  7372  002A0A  6FA0               	movwf	(?___ftdiv+1)& (0+255),b
  7373  002A0C  0E00               	movlw	0
  7374  002A0E  6FA1               	movwf	(?___ftdiv+2)& (0+255),b
  7375                           
  7376                           ; BSR set to: 0
  7377  002A10  0012               	return	
  7378  002A12                     l556:
  7379                           
  7380                           ; BSR set to: 0
  7381                           
  7382                           ; BSR set to: 0
  7383  002A12  C0A4  F0A5         	movff	___ftdiv@f2+2,??___ftdiv
  7384  002A16  6BA6               	clrf	(??___ftdiv+1)& (0+255),b
  7385  002A18  6BA7               	clrf	(??___ftdiv+2)& (0+255),b
  7386  002A1A  35A3               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
  7387  002A1C  37A5               	rlcf	??___ftdiv& (0+255),f,b
  7388  002A1E  E301               	bnc	u3581
  7389  002A20  81A6               	bsf	(??___ftdiv+1)& (0+255),0,b
  7390  002A22                     u3581:
  7391  002A22  51A5               	movf	??___ftdiv& (0+255),w,b
  7392  002A24  6FAD               	movwf	___ftdiv@sign& (0+255),b
  7393  002A26  51AD               	movf	___ftdiv@sign& (0+255),w,b
  7394  002A28  A4D8               	btfss	status,2,c
  7395  002A2A  D007               	goto	l558
  7396                           
  7397                           ; BSR set to: 0
  7398  002A2C  0E00               	movlw	0
  7399  002A2E  6F9F               	movwf	?___ftdiv& (0+255),b
  7400  002A30  0E00               	movlw	0
  7401  002A32  6FA0               	movwf	(?___ftdiv+1)& (0+255),b
  7402  002A34  0E00               	movlw	0
  7403  002A36  6FA1               	movwf	(?___ftdiv+2)& (0+255),b
  7404                           
  7405                           ; BSR set to: 0
  7406  002A38  0012               	return	
  7407  002A3A                     l558:
  7408                           
  7409                           ; BSR set to: 0
  7410                           
  7411                           ; BSR set to: 0
  7412  002A3A  0E00               	movlw	0
  7413  002A3C  6FA9               	movwf	___ftdiv@f3& (0+255),b
  7414  002A3E  0E00               	movlw	0
  7415  002A40  6FAA               	movwf	(___ftdiv@f3+1)& (0+255),b
  7416  002A42  0E00               	movlw	0
  7417  002A44  6FAB               	movwf	(___ftdiv@f3+2)& (0+255),b
  7418                           
  7419                           ; BSR set to: 0
  7420  002A46  51AD               	movf	___ftdiv@sign& (0+255),w,b
  7421  002A48  0F89               	addlw	137
  7422  002A4A  5FAC               	subwf	___ftdiv@exp& (0+255),f,b
  7423                           
  7424                           ; BSR set to: 0
  7425  002A4C  C0A1  F0AD         	movff	___ftdiv@f1+2,___ftdiv@sign
  7426                           
  7427                           ; BSR set to: 0
  7428  002A50  51A4               	movf	(___ftdiv@f2+2)& (0+255),w,b
  7429  002A52  1BAD               	xorwf	___ftdiv@sign& (0+255),f,b
  7430                           
  7431                           ; BSR set to: 0
  7432  002A54  0E80               	movlw	128
  7433  002A56  17AD               	andwf	___ftdiv@sign& (0+255),f,b
  7434                           
  7435                           ; BSR set to: 0
  7436  002A58  8FA0               	bsf	(___ftdiv@f1+1)& (0+255),7,b
  7437                           
  7438                           ; BSR set to: 0
  7439  002A5A  0EFF               	movlw	255
  7440  002A5C  179F               	andwf	___ftdiv@f1& (0+255),f,b
  7441  002A5E  0EFF               	movlw	255
  7442  002A60  17A0               	andwf	(___ftdiv@f1+1)& (0+255),f,b
  7443  002A62  0E00               	movlw	0
  7444  002A64  17A1               	andwf	(___ftdiv@f1+2)& (0+255),f,b
  7445                           
  7446                           ; BSR set to: 0
  7447  002A66  8FA3               	bsf	(___ftdiv@f2+1)& (0+255),7,b
  7448                           
  7449                           ; BSR set to: 0
  7450  002A68  0EFF               	movlw	255
  7451  002A6A  17A2               	andwf	___ftdiv@f2& (0+255),f,b
  7452  002A6C  0EFF               	movlw	255
  7453  002A6E  17A3               	andwf	(___ftdiv@f2+1)& (0+255),f,b
  7454  002A70  0E00               	movlw	0
  7455  002A72  17A4               	andwf	(___ftdiv@f2+2)& (0+255),f,b
  7456                           
  7457                           ; BSR set to: 0
  7458  002A74  0E18               	movlw	24
  7459  002A76  6FA8               	movwf	___ftdiv@cntr& (0+255),b
  7460  002A78                     
  7461                           ; BSR set to: 0
  7462                           
  7463                           ; BSR set to: 0
  7464  002A78  90D8               	bcf	status,0,c
  7465  002A7A  37A9               	rlcf	___ftdiv@f3& (0+255),f,b
  7466  002A7C  37AA               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  7467  002A7E  37AB               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  7468                           
  7469                           ; BSR set to: 0
  7470  002A80  51A2               	movf	___ftdiv@f2& (0+255),w,b
  7471  002A82  5D9F               	subwf	___ftdiv@f1& (0+255),w,b
  7472  002A84  51A3               	movf	(___ftdiv@f2+1)& (0+255),w,b
  7473  002A86  59A0               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
  7474  002A88  51A4               	movf	(___ftdiv@f2+2)& (0+255),w,b
  7475  002A8A  59A1               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
  7476  002A8C  A0D8               	btfss	status,0,c
  7477  002A8E  D007               	goto	l560
  7478                           
  7479                           ; BSR set to: 0
  7480  002A90  51A2               	movf	___ftdiv@f2& (0+255),w,b
  7481  002A92  5F9F               	subwf	___ftdiv@f1& (0+255),f,b
  7482  002A94  51A3               	movf	(___ftdiv@f2+1)& (0+255),w,b
  7483  002A96  5BA0               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
  7484  002A98  51A4               	movf	(___ftdiv@f2+2)& (0+255),w,b
  7485  002A9A  5BA1               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
  7486                           
  7487                           ; BSR set to: 0
  7488  002A9C  81A9               	bsf	___ftdiv@f3& (0+255),0,b
  7489  002A9E                     l560:
  7490                           
  7491                           ; BSR set to: 0
  7492  002A9E  90D8               	bcf	status,0,c
  7493  002AA0  379F               	rlcf	___ftdiv@f1& (0+255),f,b
  7494  002AA2  37A0               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
  7495  002AA4  37A1               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
  7496                           
  7497                           ; BSR set to: 0
  7498  002AA6  2FA8               	decfsz	___ftdiv@cntr& (0+255),f,b
  7499  002AA8  D7E7               	goto	l559
  7500                           
  7501                           ; BSR set to: 0
  7502                           
  7503                           ; BSR set to: 0
  7504  002AAA  C0A9  F060         	movff	___ftdiv@f3,___ftpack@arg
  7505  002AAE  C0AA  F061         	movff	___ftdiv@f3+1,___ftpack@arg+1
  7506  002AB2  C0AB  F062         	movff	___ftdiv@f3+2,___ftpack@arg+2
  7507  002AB6  C0AC  F063         	movff	___ftdiv@exp,___ftpack@exp
  7508  002ABA  C0AD  F064         	movff	___ftdiv@sign,___ftpack@sign
  7509  002ABE  ECDB  F015         	call	___ftpack	;wreg free
  7510  002AC2  C060  F09F         	movff	?___ftpack,?___ftdiv
  7511  002AC6  C061  F0A0         	movff	?___ftpack+1,?___ftdiv+1
  7512  002ACA  C062  F0A1         	movff	?___ftpack+2,?___ftdiv+2
  7513  002ACE  0012               	return	
  7514  002AD0                     __end_of___ftdiv:
  7515                           	opt stack 0
  7516                           tblptru	equ	0xFF8
  7517                           tblptrh	equ	0xFF7
  7518                           tblptrl	equ	0xFF6
  7519                           tablat	equ	0xFF5
  7520                           prodh	equ	0xFF4
  7521                           prodl	equ	0xFF3
  7522                           intcon	equ	0xFF2
  7523                           postinc0	equ	0xFEE
  7524                           wreg	equ	0xFE8
  7525                           indf2	equ	0xFDF
  7526                           postinc2	equ	0xFDE
  7527                           postdec2	equ	0xFDD
  7528                           fsr2h	equ	0xFDA
  7529                           fsr2l	equ	0xFD9
  7530                           status	equ	0xFD8
  7531                           
  7532 ;; *************** function ___ftpack *****************
  7533 ;; Defined at:
  7534 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  7535 ;; Parameters:    Size  Location     Type
  7536 ;;  arg             3    0[BANK0 ] unsigned um
  7537 ;;  exp             1    3[BANK0 ] unsigned char 
  7538 ;;  sign            1    4[BANK0 ] unsigned char 
  7539 ;; Auto vars:     Size  Location     Type
  7540 ;;		None
  7541 ;; Return value:  Size  Location     Type
  7542 ;;                  3    0[BANK0 ] float 
  7543 ;; Registers used:
  7544 ;;		wreg, status,2, status,0
  7545 ;; Tracked objects:
  7546 ;;		On entry : 0/0
  7547 ;;		On exit  : 0/0
  7548 ;;		Unchanged: 0/0
  7549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7550 ;;      Params:         0       5       0       0       0       0       0       0       0
  7551 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7552 ;;      Temps:          0       3       0       0       0       0       0       0       0
  7553 ;;      Totals:         0       8       0       0       0       0       0       0       0
  7554 ;;Total ram usage:        8 bytes
  7555 ;; Hardware stack levels used:    1
  7556 ;; Hardware stack levels required when called:    3
  7557 ;; This function calls:
  7558 ;;		Nothing
  7559 ;; This function is called by:
  7560 ;;		___ftadd
  7561 ;;		___ftdiv
  7562 ;;		___ftmul
  7563 ;;		___lltoft
  7564 ;;		___lwtoft
  7565 ;; This function uses a non-reentrant model
  7566 ;;
  7567                           
  7568                           	psect	text23
  7569  002BB6                     __ptext23:
  7570                           	opt stack 0
  7571  002BB6                     ___ftpack:
  7572                           	opt stack 24
  7573                           
  7574                           ;incstack = 0
  7575  002BB6  0100               	movlb	0	; () banked
  7576  002BB8  5163               	movf	___ftpack@exp& (0+255),w,b
  7577  002BBA  B4D8               	btfsc	status,2,c
  7578  002BBC  D005               	goto	u1890
  7579                           
  7580                           ; BSR set to: 0
  7581  002BBE  5160               	movf	___ftpack@arg& (0+255),w,b
  7582  002BC0  1161               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  7583  002BC2  1162               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  7584  002BC4  A4D8               	btfss	status,2,c
  7585  002BC6  D00C               	goto	l492
  7586  002BC8                     u1890:
  7587                           
  7588                           ; BSR set to: 0
  7589                           
  7590                           ; BSR set to: 0
  7591  002BC8  0E00               	movlw	0
  7592  002BCA  6F60               	movwf	?___ftpack& (0+255),b
  7593  002BCC  0E00               	movlw	0
  7594  002BCE  6F61               	movwf	(?___ftpack+1)& (0+255),b
  7595  002BD0  0E00               	movlw	0
  7596  002BD2  6F62               	movwf	(?___ftpack+2)& (0+255),b
  7597                           
  7598                           ; BSR set to: 0
  7599  002BD4  0012               	return	
  7600  002BD6                     
  7601                           ; BSR set to: 0
  7602                           
  7603                           ; BSR set to: 0
  7604  002BD6  2B63               	incf	___ftpack@exp& (0+255),f,b
  7605  002BD8  90D8               	bcf	status,0,c
  7606  002BDA  3362               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  7607  002BDC  3361               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  7608  002BDE  3360               	rrcf	___ftpack@arg& (0+255),f,b
  7609  002BE0                     l492:
  7610                           
  7611                           ; BSR set to: 0
  7612                           
  7613                           ; BSR set to: 0
  7614  002BE0  0E00               	movlw	0
  7615  002BE2  1560               	andwf	___ftpack@arg& (0+255),w,b
  7616  002BE4  6F65               	movwf	??___ftpack& (0+255),b
  7617  002BE6  0E00               	movlw	0
  7618  002BE8  1561               	andwf	(___ftpack@arg+1)& (0+255),w,b
  7619  002BEA  6F66               	movwf	(??___ftpack+1)& (0+255),b
  7620  002BEC  0EFE               	movlw	254
  7621  002BEE  1562               	andwf	(___ftpack@arg+2)& (0+255),w,b
  7622  002BF0  6F67               	movwf	(??___ftpack+2)& (0+255),b
  7623  002BF2  5165               	movf	??___ftpack& (0+255),w,b
  7624  002BF4  1166               	iorwf	(??___ftpack+1)& (0+255),w,b
  7625  002BF6  1167               	iorwf	(??___ftpack+2)& (0+255),w,b
  7626  002BF8  B4D8               	btfsc	status,2,c
  7627  002BFA  D00C               	goto	l495
  7628  002BFC  D7EC               	goto	l493
  7629  002BFE                     
  7630                           ; BSR set to: 0
  7631                           
  7632                           ; BSR set to: 0
  7633  002BFE  2B63               	incf	___ftpack@exp& (0+255),f,b
  7634                           
  7635                           ; BSR set to: 0
  7636  002C00  0E01               	movlw	1
  7637  002C02  2760               	addwf	___ftpack@arg& (0+255),f,b
  7638  002C04  0E00               	movlw	0
  7639  002C06  2361               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  7640  002C08  0E00               	movlw	0
  7641  002C0A  2362               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  7642  002C0C  90D8               	bcf	status,0,c
  7643  002C0E  3362               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  7644  002C10  3361               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  7645  002C12  3360               	rrcf	___ftpack@arg& (0+255),f,b
  7646  002C14                     l495:
  7647                           
  7648                           ; BSR set to: 0
  7649                           
  7650                           ; BSR set to: 0
  7651  002C14  0E00               	movlw	0
  7652  002C16  1560               	andwf	___ftpack@arg& (0+255),w,b
  7653  002C18  6F65               	movwf	??___ftpack& (0+255),b
  7654  002C1A  0E00               	movlw	0
  7655  002C1C  1561               	andwf	(___ftpack@arg+1)& (0+255),w,b
  7656  002C1E  6F66               	movwf	(??___ftpack+1)& (0+255),b
  7657  002C20  0EFF               	movlw	255
  7658  002C22  1562               	andwf	(___ftpack@arg+2)& (0+255),w,b
  7659  002C24  6F67               	movwf	(??___ftpack+2)& (0+255),b
  7660  002C26  5165               	movf	??___ftpack& (0+255),w,b
  7661  002C28  1166               	iorwf	(??___ftpack+1)& (0+255),w,b
  7662  002C2A  1167               	iorwf	(??___ftpack+2)& (0+255),w,b
  7663  002C2C  B4D8               	btfsc	status,2,c
  7664  002C2E  D006               	goto	l498
  7665  002C30  D7E6               	goto	l496
  7666  002C32                     
  7667                           ; BSR set to: 0
  7668                           
  7669                           ; BSR set to: 0
  7670  002C32  0763               	decf	___ftpack@exp& (0+255),f,b
  7671  002C34  90D8               	bcf	status,0,c
  7672  002C36  3760               	rlcf	___ftpack@arg& (0+255),f,b
  7673  002C38  3761               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  7674  002C3A  3762               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  7675  002C3C                     l498:
  7676                           
  7677                           ; BSR set to: 0
  7678                           
  7679                           ; BSR set to: 0
  7680  002C3C  BF61               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  7681  002C3E  D003               	goto	u1930
  7682                           
  7683                           ; BSR set to: 0
  7684  002C40  0E02               	movlw	2
  7685  002C42  6163               	cpfslt	___ftpack@exp& (0+255),b
  7686  002C44  D7F6               	goto	l499
  7687  002C46                     u1930:
  7688                           
  7689                           ; BSR set to: 0
  7690                           
  7691                           ; BSR set to: 0
  7692  002C46  A163               	btfss	___ftpack@exp& (0+255),0,b
  7693                           
  7694                           ; BSR set to: 0
  7695  002C48  9F61               	bcf	(___ftpack@arg+1)& (0+255),7,b
  7696                           
  7697                           ; BSR set to: 0
  7698                           
  7699                           ; BSR set to: 0
  7700  002C4A  90D8               	bcf	status,0,c
  7701  002C4C  3363               	rrcf	___ftpack@exp& (0+255),f,b
  7702  002C4E  5163               	movf	___ftpack@exp& (0+255),w,b
  7703  002C50  1362               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  7704                           
  7705                           ; BSR set to: 0
  7706  002C52  5164               	movf	___ftpack@sign& (0+255),w,b
  7707  002C54  A4D8               	btfss	status,2,c
  7708                           
  7709                           ; BSR set to: 0
  7710  002C56  8F62               	bsf	(___ftpack@arg+2)& (0+255),7,b
  7711                           
  7712                           ; BSR set to: 0
  7713                           
  7714                           ; BSR set to: 0
  7715  002C58  C060  F060         	movff	___ftpack@arg,?___ftpack
  7716  002C5C  C061  F061         	movff	___ftpack@arg+1,?___ftpack+1
  7717  002C60  C062  F062         	movff	___ftpack@arg+2,?___ftpack+2
  7718  002C64  0012               	return	
  7719  002C66                     __end_of___ftpack:
  7720                           	opt stack 0
  7721                           tblptru	equ	0xFF8
  7722                           tblptrh	equ	0xFF7
  7723                           tblptrl	equ	0xFF6
  7724                           tablat	equ	0xFF5
  7725                           prodh	equ	0xFF4
  7726                           prodl	equ	0xFF3
  7727                           intcon	equ	0xFF2
  7728                           postinc0	equ	0xFEE
  7729                           wreg	equ	0xFE8
  7730                           indf2	equ	0xFDF
  7731                           postinc2	equ	0xFDE
  7732                           postdec2	equ	0xFDD
  7733                           fsr2h	equ	0xFDA
  7734                           fsr2l	equ	0xFD9
  7735                           status	equ	0xFD8
  7736                           
  7737 ;; *************** function _Lcd_Out2 *****************
  7738 ;; Defined at:
  7739 ;;		line 109 in file "Library_LCD_2.h"
  7740 ;; Parameters:    Size  Location     Type
  7741 ;;  y               1    wreg     unsigned char 
  7742 ;;  x               1    3[BANK0 ] unsigned char 
  7743 ;;  buffer          2    4[BANK0 ] PTR unsigned char 
  7744 ;;		 -> buffer2(20), main@buffer1(16), 
  7745 ;; Auto vars:     Size  Location     Type
  7746 ;;  y               1    6[BANK0 ] unsigned char 
  7747 ;;  data            1    7[BANK0 ] unsigned char 
  7748 ;; Return value:  Size  Location     Type
  7749 ;;                  1    wreg      void 
  7750 ;; Registers used:
  7751 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7752 ;; Tracked objects:
  7753 ;;		On entry : 0/0
  7754 ;;		On exit  : 0/0
  7755 ;;		Unchanged: 0/0
  7756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7757 ;;      Params:         0       3       0       0       0       0       0       0       0
  7758 ;;      Locals:         0       2       0       0       0       0       0       0       0
  7759 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7760 ;;      Totals:         0       5       0       0       0       0       0       0       0
  7761 ;;Total ram usage:        5 bytes
  7762 ;; Hardware stack levels used:    1
  7763 ;; Hardware stack levels required when called:    4
  7764 ;; This function calls:
  7765 ;;		_Lcd_Chr_CP
  7766 ;;		_Lcd_Cmd
  7767 ;; This function is called by:
  7768 ;;		_main
  7769 ;; This function uses a non-reentrant model
  7770 ;;
  7771                           
  7772                           	psect	text24
  7773  002F22                     __ptext24:
  7774                           	opt stack 0
  7775  002F22                     _Lcd_Out2:
  7776                           	opt stack 26
  7777                           
  7778                           ; BSR set to: 0
  7779                           ;incstack = 0
  7780                           ;Lcd_Out2@y stored from wreg
  7781  002F22  0100               	movlb	0	; () banked
  7782  002F24  6F66               	movwf	Lcd_Out2@y& (0+255),b
  7783                           
  7784                           ;Library_LCD_2.h: 111: unsigned char data;
  7785                           ;Library_LCD_2.h: 112: switch (y)
  7786  002F26  D00E               	goto	l82
  7787  002F28  0100               	movlb	0	; () banked
  7788  002F2A  5163               	movf	Lcd_Out2@x& (0+255),w,b
  7789  002F2C  0F80               	addlw	128
  7790  002F2E  D008               	goto	L5
  7791  002F30                     
  7792                           ; BSR set to: 0
  7793                           
  7794                           ; BSR set to: 0
  7795  002F30  5163               	movf	Lcd_Out2@x& (0+255),w,b
  7796  002F32  0FC0               	addlw	192
  7797  002F34  D005               	goto	L5
  7798  002F36                     
  7799                           ; BSR set to: 0
  7800                           
  7801                           ; BSR set to: 0
  7802  002F36  5163               	movf	Lcd_Out2@x& (0+255),w,b
  7803  002F38  0F94               	addlw	148
  7804  002F3A  D002               	goto	L5
  7805  002F3C                     
  7806                           ; BSR set to: 0
  7807                           
  7808                           ; BSR set to: 0
  7809  002F3C  5163               	movf	Lcd_Out2@x& (0+255),w,b
  7810  002F3E  0FD4               	addlw	212
  7811  002F40                     L5:
  7812  002F40  6F67               	movwf	Lcd_Out2@data& (0+255),b
  7813                           
  7814                           ; BSR set to: 0
  7815                           ;Library_LCD_2.h: 119: }
  7816                           
  7817                           ; BSR set to: 0
  7818                           
  7819                           ;Library_LCD_2.h: 118: default: break;
  7820  002F42  D00E               	goto	l84
  7821  002F44                     l82:
  7822                           
  7823                           ; BSR set to: 0
  7824  002F44  0100               	movlb	0	; () banked
  7825  002F46  5166               	movf	Lcd_Out2@y& (0+255),w,b
  7826                           
  7827                           ; Switch size 1, requested type "space"
  7828                           ; Number of cases is 4, Range of values is 1 to 4
  7829                           ; switch strategies available:
  7830                           ; Name         Instructions Cycles
  7831                           ; simple_byte           13     7 (average)
  7832                           ;	Chosen strategy is simple_byte
  7833  002F48  0A01               	xorlw	1	; case 1
  7834  002F4A  B4D8               	btfsc	status,2,c
  7835  002F4C  D7ED               	goto	l83
  7836  002F4E  0A03               	xorlw	3	; case 2
  7837  002F50  B4D8               	btfsc	status,2,c
  7838  002F52  D7EE               	goto	l85
  7839  002F54  0A01               	xorlw	1	; case 3
  7840  002F56  B4D8               	btfsc	status,2,c
  7841  002F58  D7EE               	goto	l86
  7842  002F5A  0A07               	xorlw	7	; case 4
  7843  002F5C  B4D8               	btfsc	status,2,c
  7844  002F5E  D7EE               	goto	l87
  7845  002F60                     l84:
  7846                           
  7847                           ; BSR set to: 0
  7848                           ;Library_LCD_2.h: 120: Lcd_Cmd(data);
  7849                           
  7850                           ; BSR set to: 0
  7851  002F60  5167               	movf	Lcd_Out2@data& (0+255),w,b
  7852  002F62  ECD3  F011         	call	_Lcd_Cmd
  7853                           
  7854                           ;Library_LCD_2.h: 121: while(*buffer)
  7855  002F66  D00A               	goto	l89
  7856  002F68                     
  7857                           ;Library_LCD_2.h: 122: {
  7858                           ;Library_LCD_2.h: 123: Lcd_Chr_CP(*buffer);
  7859  002F68  C064  FFD9         	movff	Lcd_Out2@buffer,fsr2l
  7860  002F6C  C065  FFDA         	movff	Lcd_Out2@buffer+1,fsr2h
  7861  002F70  50DF               	movf	indf2,w,c
  7862  002F72  EC39  F011         	call	_Lcd_Chr_CP
  7863                           
  7864                           ;Library_LCD_2.h: 124: buffer++;
  7865  002F76  0100               	movlb	0	; () banked
  7866  002F78  4B64               	infsnz	Lcd_Out2@buffer& (0+255),f,b
  7867  002F7A  2B65               	incf	(Lcd_Out2@buffer+1)& (0+255),f,b
  7868  002F7C                     l89:
  7869                           
  7870                           ; BSR set to: 0
  7871  002F7C  C064  FFD9         	movff	Lcd_Out2@buffer,fsr2l
  7872  002F80  C065  FFDA         	movff	Lcd_Out2@buffer+1,fsr2h
  7873  002F84  50DF               	movf	indf2,w,c
  7874  002F86  B4D8               	btfsc	status,2,c
  7875  002F88  0012               	return	
  7876  002F8A  D7EE               	goto	l90
  7877  002F8C                     __end_of_Lcd_Out2:
  7878                           	opt stack 0
  7879                           tblptru	equ	0xFF8
  7880                           tblptrh	equ	0xFF7
  7881                           tblptrl	equ	0xFF6
  7882                           tablat	equ	0xFF5
  7883                           prodh	equ	0xFF4
  7884                           prodl	equ	0xFF3
  7885                           intcon	equ	0xFF2
  7886                           postinc0	equ	0xFEE
  7887                           wreg	equ	0xFE8
  7888                           indf2	equ	0xFDF
  7889                           postinc2	equ	0xFDE
  7890                           postdec2	equ	0xFDD
  7891                           fsr2h	equ	0xFDA
  7892                           fsr2l	equ	0xFD9
  7893                           status	equ	0xFD8
  7894                           
  7895 ;; *************** function _Lcd_Chr_CP *****************
  7896 ;; Defined at:
  7897 ;;		line 130 in file "Library_LCD_2.h"
  7898 ;; Parameters:    Size  Location     Type
  7899 ;;  data            1    wreg     unsigned char 
  7900 ;; Auto vars:     Size  Location     Type
  7901 ;;  data            1    2[BANK0 ] unsigned char 
  7902 ;; Return value:  Size  Location     Type
  7903 ;;                  1    wreg      void 
  7904 ;; Registers used:
  7905 ;;		wreg, status,2, status,0
  7906 ;; Tracked objects:
  7907 ;;		On entry : 0/0
  7908 ;;		On exit  : 0/0
  7909 ;;		Unchanged: 0/0
  7910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7911 ;;      Params:         0       0       0       0       0       0       0       0       0
  7912 ;;      Locals:         0       1       0       0       0       0       0       0       0
  7913 ;;      Temps:          0       2       0       0       0       0       0       0       0
  7914 ;;      Totals:         0       3       0       0       0       0       0       0       0
  7915 ;;Total ram usage:        3 bytes
  7916 ;; Hardware stack levels used:    1
  7917 ;; Hardware stack levels required when called:    3
  7918 ;; This function calls:
  7919 ;;		Nothing
  7920 ;; This function is called by:
  7921 ;;		_Lcd_Out2
  7922 ;;		_Lcd_Out
  7923 ;; This function uses a non-reentrant model
  7924 ;;
  7925                           
  7926                           	psect	text25
  7927  002272                     __ptext25:
  7928                           	opt stack 0
  7929  002272                     _Lcd_Chr_CP:
  7930                           	opt stack 26
  7931                           
  7932                           ;incstack = 0
  7933                           ;Lcd_Chr_CP@data stored from wreg
  7934  002272  0100               	movlb	0	; () banked
  7935  002274  6F62               	movwf	Lcd_Chr_CP@data& (0+255),b
  7936                           
  7937                           ;Library_LCD_2.h: 131: PORTDbits.RD3 = 0; PORTDbits.RD1 = 1;
  7938  002276  9683               	bcf	3971,3,c	;volatile
  7939  002278  8283               	bsf	3971,1,c	;volatile
  7940                           
  7941                           ;Library_LCD_2.h: 132: PORTDbits.RD7 = (data & 0b10000000)>>7; PORTDbits.RD6 = (data & 0
      +                          b01000000)>>6;
  7942  00227A  0100               	movlb	0	; () banked
  7943  00227C  6B60               	clrf	??_Lcd_Chr_CP& (0+255),b
  7944  00227E  AF62               	btfss	Lcd_Chr_CP@data& (0+255),7,b
  7945  002280  D001               	bra	u2385
  7946  002282  2B60               	incf	??_Lcd_Chr_CP& (0+255),f,b
  7947  002284                     u2385:
  7948  002284  0E01               	movlw	1
  7949  002286  1760               	andwf	??_Lcd_Chr_CP& (0+255),f,b
  7950  002288  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  7951  00228A  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  7952  00228C  5083               	movf	3971,w,c	;volatile
  7953  00228E  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  7954  002290  0B7F               	andlw	-129
  7955  002292  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  7956  002294  6E83               	movwf	3971,c	;volatile
  7957  002296  C062  F060         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  7958  00229A  0E06               	movlw	6
  7959  00229C  6F61               	movwf	(??_Lcd_Chr_CP+1)& (0+255),b
  7960  00229E                     u2395:
  7961  00229E  90D8               	bcf	status,0,c
  7962  0022A0  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  7963  0022A2  2F61               	decfsz	(??_Lcd_Chr_CP+1)& (0+255),f,b
  7964  0022A4  D7FC               	goto	u2395
  7965  0022A6  0E01               	movlw	1
  7966  0022A8  1760               	andwf	??_Lcd_Chr_CP& (0+255),f,b
  7967  0022AA  3B60               	swapf	??_Lcd_Chr_CP& (0+255),f,b
  7968  0022AC  4760               	rlncf	??_Lcd_Chr_CP& (0+255),f,b
  7969  0022AE  4760               	rlncf	??_Lcd_Chr_CP& (0+255),f,b
  7970  0022B0  5083               	movf	3971,w,c	;volatile
  7971  0022B2  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  7972  0022B4  0BBF               	andlw	-65
  7973  0022B6  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  7974  0022B8  6E83               	movwf	3971,c	;volatile
  7975                           
  7976                           ;Library_LCD_2.h: 133: PORTDbits.RD5 = (data & 0b00100000)>>5; PORTDbits.RD4 = (data & 0
      +                          b00010000)>>4;
  7977  0022BA  C062  F060         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  7978  0022BE  0E05               	movlw	5
  7979  0022C0  6F61               	movwf	(??_Lcd_Chr_CP+1)& (0+255),b
  7980  0022C2                     u2405:
  7981  0022C2  90D8               	bcf	status,0,c
  7982  0022C4  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  7983  0022C6  2F61               	decfsz	(??_Lcd_Chr_CP+1)& (0+255),f,b
  7984  0022C8  D7FC               	goto	u2405
  7985  0022CA  0E01               	movlw	1
  7986  0022CC  1760               	andwf	??_Lcd_Chr_CP& (0+255),f,b
  7987  0022CE  3B60               	swapf	??_Lcd_Chr_CP& (0+255),f,b
  7988  0022D0  4760               	rlncf	??_Lcd_Chr_CP& (0+255),f,b
  7989  0022D2  5083               	movf	3971,w,c	;volatile
  7990  0022D4  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  7991  0022D6  0BDF               	andlw	-33
  7992  0022D8  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  7993  0022DA  6E83               	movwf	3971,c	;volatile
  7994  0022DC  C062  F060         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  7995  0022E0  3B60               	swapf	??_Lcd_Chr_CP& (0+255),f,b
  7996  0022E2  0E0F               	movlw	15
  7997  0022E4  1760               	andwf	??_Lcd_Chr_CP& (0+255),f,b
  7998  0022E6  0E01               	movlw	1
  7999  0022E8  1760               	andwf	??_Lcd_Chr_CP& (0+255),f,b
  8000  0022EA  3B60               	swapf	??_Lcd_Chr_CP& (0+255),f,b
  8001  0022EC  5083               	movf	3971,w,c	;volatile
  8002  0022EE  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  8003  0022F0  0BEF               	andlw	-17
  8004  0022F2  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  8005  0022F4  6E83               	movwf	3971,c	;volatile
  8006                           
  8007                           ; BSR set to: 0
  8008                           ;Library_LCD_2.h: 134: _delay(10);
  8009  0022F6  0E03               	movlw	3
  8010  0022F8                     u3777:
  8011  0022F8  2EE8               	decfsz	wreg,f,c
  8012  0022FA  D7FE               	bra	u3777
  8013  0022FC  F000               	nop	
  8014                           
  8015                           ;Library_LCD_2.h: 135: PORTDbits.RD3 = 1; _delay((unsigned long)((5)*(48000000/4000000.0
      +                          ))); PORTDbits.RD3 = 0;
  8016  0022FE  8683               	bsf	3971,3,c	;volatile
  8017  002300  0E14               	movlw	20
  8018  002302                     u3787:
  8019  002302  2EE8               	decfsz	wreg,f,c
  8020  002304  D7FE               	bra	u3787
  8021  002306  9683               	bcf	3971,3,c	;volatile
  8022                           
  8023                           ;Library_LCD_2.h: 136: PORTDbits.RD7 = (data & 0b00001000)>>3; PORTDbits.RD6 = (data & 0
      +                          b00000100)>>2;
  8024  002308  C062  F060         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  8025  00230C  0100               	movlb	0	; () banked
  8026  00230E  90D8               	bcf	status,0,c
  8027  002310  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  8028  002312  90D8               	bcf	status,0,c
  8029  002314  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  8030  002316  90D8               	bcf	status,0,c
  8031  002318  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  8032  00231A  0E01               	movlw	1
  8033  00231C  1760               	andwf	??_Lcd_Chr_CP& (0+255),f,b
  8034  00231E  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  8035  002320  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  8036  002322  5083               	movf	3971,w,c	;volatile
  8037  002324  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  8038  002326  0B7F               	andlw	-129
  8039  002328  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  8040  00232A  6E83               	movwf	3971,c	;volatile
  8041  00232C  C062  F060         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  8042  002330  90D8               	bcf	status,0,c
  8043  002332  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  8044  002334  90D8               	bcf	status,0,c
  8045  002336  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  8046  002338  0E01               	movlw	1
  8047  00233A  1760               	andwf	??_Lcd_Chr_CP& (0+255),f,b
  8048  00233C  3B60               	swapf	??_Lcd_Chr_CP& (0+255),f,b
  8049  00233E  4760               	rlncf	??_Lcd_Chr_CP& (0+255),f,b
  8050  002340  4760               	rlncf	??_Lcd_Chr_CP& (0+255),f,b
  8051  002342  5083               	movf	3971,w,c	;volatile
  8052  002344  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  8053  002346  0BBF               	andlw	-65
  8054  002348  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  8055  00234A  6E83               	movwf	3971,c	;volatile
  8056                           
  8057                           ;Library_LCD_2.h: 137: PORTDbits.RD5 = (data & 0b00000010)>>1; PORTDbits.RD4 = (data & 0
      +                          b00000001);
  8058  00234C  C062  F060         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  8059  002350  90D8               	bcf	status,0,c
  8060  002352  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  8061  002354  0E01               	movlw	1
  8062  002356  1760               	andwf	??_Lcd_Chr_CP& (0+255),f,b
  8063  002358  3B60               	swapf	??_Lcd_Chr_CP& (0+255),f,b
  8064  00235A  4760               	rlncf	??_Lcd_Chr_CP& (0+255),f,b
  8065  00235C  5083               	movf	3971,w,c	;volatile
  8066  00235E  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  8067  002360  0BDF               	andlw	-33
  8068  002362  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  8069  002364  6E83               	movwf	3971,c	;volatile
  8070  002366  C062  F060         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  8071  00236A  0E01               	movlw	1
  8072  00236C  1760               	andwf	??_Lcd_Chr_CP& (0+255),f,b
  8073  00236E  3B60               	swapf	??_Lcd_Chr_CP& (0+255),f,b
  8074  002370  5083               	movf	3971,w,c	;volatile
  8075  002372  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  8076  002374  0BEF               	andlw	-17
  8077  002376  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  8078  002378  6E83               	movwf	3971,c	;volatile
  8079                           
  8080                           ; BSR set to: 0
  8081                           ;Library_LCD_2.h: 138: _delay(10);
  8082  00237A  0E03               	movlw	3
  8083  00237C                     u3797:
  8084  00237C  2EE8               	decfsz	wreg,f,c
  8085  00237E  D7FE               	bra	u3797
  8086  002380  F000               	nop	
  8087                           
  8088                           ;Library_LCD_2.h: 139: PORTDbits.RD3 = 1; _delay((unsigned long)((5)*(48000000/4000000.0
      +                          ))); PORTDbits.RD3 = 0;
  8089  002382  8683               	bsf	3971,3,c	;volatile
  8090  002384  0E14               	movlw	20
  8091  002386                     u3807:
  8092  002386  2EE8               	decfsz	wreg,f,c
  8093  002388  D7FE               	bra	u3807
  8094  00238A  9683               	bcf	3971,3,c	;volatile
  8095                           
  8096                           ;Library_LCD_2.h: 140: _delay((unsigned long)((5)*(48000000/4000000.0))); _delay((unsign
      +                          ed long)((5500)*(48000000/4000000.0)));
  8097  00238C  0E14               	movlw	20
  8098  00238E                     u3817:
  8099  00238E  2EE8               	decfsz	wreg,f,c
  8100  002390  D7FE               	bra	u3817
  8101  002392  0E56               	movlw	86
  8102  002394  0100               	movlb	0	; () banked
  8103  002396  6F60               	movwf	??_Lcd_Chr_CP& (0+255),b
  8104  002398  0EB5               	movlw	181
  8105  00239A                     u3827:
  8106  00239A  2EE8               	decfsz	wreg,f,c
  8107  00239C  D7FE               	bra	u3827
  8108  00239E  2F60               	decfsz	??_Lcd_Chr_CP& (0+255),f,b
  8109  0023A0  D7FC               	bra	u3827
  8110  0023A2  D000               	nop2	
  8111  0023A4  0012               	return		;funcret
  8112  0023A6                     __end_of_Lcd_Chr_CP:
  8113                           	opt stack 0
  8114                           tblptru	equ	0xFF8
  8115                           tblptrh	equ	0xFF7
  8116                           tblptrl	equ	0xFF6
  8117                           tablat	equ	0xFF5
  8118                           prodh	equ	0xFF4
  8119                           prodl	equ	0xFF3
  8120                           intcon	equ	0xFF2
  8121                           postinc0	equ	0xFEE
  8122                           wreg	equ	0xFE8
  8123                           indf2	equ	0xFDF
  8124                           postinc2	equ	0xFDE
  8125                           postdec2	equ	0xFDD
  8126                           fsr2h	equ	0xFDA
  8127                           fsr2l	equ	0xFD9
  8128                           status	equ	0xFD8
  8129                           
  8130 ;; *************** function _Lcd_Init *****************
  8131 ;; Defined at:
  8132 ;;		line 46 in file "Library_LCD_2.h"
  8133 ;; Parameters:    Size  Location     Type
  8134 ;;		None
  8135 ;; Auto vars:     Size  Location     Type
  8136 ;;  data            1    4[BANK0 ] unsigned char 
  8137 ;; Return value:  Size  Location     Type
  8138 ;;                  1    wreg      void 
  8139 ;; Registers used:
  8140 ;;		wreg, status,2, status,0, cstack
  8141 ;; Tracked objects:
  8142 ;;		On entry : 0/0
  8143 ;;		On exit  : 0/0
  8144 ;;		Unchanged: 0/0
  8145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8146 ;;      Params:         0       0       0       0       0       0       0       0       0
  8147 ;;      Locals:         0       1       0       0       0       0       0       0       0
  8148 ;;      Temps:          0       1       0       0       0       0       0       0       0
  8149 ;;      Totals:         0       2       0       0       0       0       0       0       0
  8150 ;;Total ram usage:        2 bytes
  8151 ;; Hardware stack levels used:    1
  8152 ;; Hardware stack levels required when called:    4
  8153 ;; This function calls:
  8154 ;;		_Lcd_Cmd
  8155 ;; This function is called by:
  8156 ;;		_main
  8157 ;; This function uses a non-reentrant model
  8158 ;;
  8159                           
  8160                           	psect	text26
  8161  001FFE                     __ptext26:
  8162                           	opt stack 0
  8163  001FFE                     _Lcd_Init:
  8164                           	opt stack 26
  8165                           
  8166                           ;Library_LCD_2.h: 47: unsigned char data;
  8167                           ;Library_LCD_2.h: 48: TRISDbits.TRISD7 = 0;
  8168                           
  8169                           ;incstack = 0
  8170  001FFE  9E95               	bcf	3989,7,c	;volatile
  8171                           
  8172                           ;Library_LCD_2.h: 49: TRISDbits.TRISD6 = 0;
  8173  002000  9C95               	bcf	3989,6,c	;volatile
  8174                           
  8175                           ;Library_LCD_2.h: 50: TRISDbits.TRISD5 = 0;
  8176  002002  9A95               	bcf	3989,5,c	;volatile
  8177                           
  8178                           ;Library_LCD_2.h: 51: TRISDbits.TRISD4 = 0;
  8179  002004  9895               	bcf	3989,4,c	;volatile
  8180                           
  8181                           ;Library_LCD_2.h: 52: TRISDbits.TRISD3 = 0;
  8182  002006  9695               	bcf	3989,3,c	;volatile
  8183                           
  8184                           ;Library_LCD_2.h: 53: TRISDbits.TRISD1 = 0;
  8185  002008  9295               	bcf	3989,1,c	;volatile
  8186                           
  8187                           ;Library_LCD_2.h: 54: PORTDbits.RD7 = 0;
  8188  00200A  9E83               	bcf	3971,7,c	;volatile
  8189                           
  8190                           ;Library_LCD_2.h: 55: PORTDbits.RD6 = 0;
  8191  00200C  9C83               	bcf	3971,6,c	;volatile
  8192                           
  8193                           ;Library_LCD_2.h: 56: PORTDbits.RD5 = 0;
  8194  00200E  9A83               	bcf	3971,5,c	;volatile
  8195                           
  8196                           ;Library_LCD_2.h: 57: PORTDbits.RD4 = 0;
  8197  002010  9883               	bcf	3971,4,c	;volatile
  8198                           
  8199                           ;Library_LCD_2.h: 58: PORTDbits.RD3 = 0;
  8200  002012  9683               	bcf	3971,3,c	;volatile
  8201                           
  8202                           ;Library_LCD_2.h: 59: PORTDbits.RD1 = 0;
  8203  002014  9283               	bcf	3971,1,c	;volatile
  8204                           
  8205                           ;Library_LCD_2.h: 60: _delay((unsigned long)((5500)*(48000000/4000000.0)));
  8206  002016  0E56               	movlw	86
  8207  002018  0100               	movlb	0	; () banked
  8208  00201A  6F63               	movwf	??_Lcd_Init& (0+255),b
  8209  00201C  0EB5               	movlw	181
  8210  00201E                     u3837:
  8211  00201E  2EE8               	decfsz	wreg,f,c
  8212  002020  D7FE               	bra	u3837
  8213  002022  2F63               	decfsz	??_Lcd_Init& (0+255),f,b
  8214  002024  D7FC               	bra	u3837
  8215  002026  D000               	nop2	
  8216                           
  8217                           ;Library_LCD_2.h: 61: _delay((unsigned long)((5500)*(48000000/4000000.0)));
  8218  002028  0E56               	movlw	86
  8219  00202A  0100               	movlb	0	; () banked
  8220  00202C  6F63               	movwf	??_Lcd_Init& (0+255),b
  8221  00202E  0EB5               	movlw	181
  8222  002030                     u3847:
  8223  002030  2EE8               	decfsz	wreg,f,c
  8224  002032  D7FE               	bra	u3847
  8225  002034  2F63               	decfsz	??_Lcd_Init& (0+255),f,b
  8226  002036  D7FC               	bra	u3847
  8227  002038  D000               	nop2	
  8228                           
  8229                           ;Library_LCD_2.h: 62: _delay((unsigned long)((5500)*(48000000/4000000.0)));
  8230  00203A  0E56               	movlw	86
  8231  00203C  0100               	movlb	0	; () banked
  8232  00203E  6F63               	movwf	??_Lcd_Init& (0+255),b
  8233  002040  0EB5               	movlw	181
  8234  002042                     u3857:
  8235  002042  2EE8               	decfsz	wreg,f,c
  8236  002044  D7FE               	bra	u3857
  8237  002046  2F63               	decfsz	??_Lcd_Init& (0+255),f,b
  8238  002048  D7FC               	bra	u3857
  8239  00204A  D000               	nop2	
  8240                           
  8241                           ;Library_LCD_2.h: 63: _delay((unsigned long)((5500)*(48000000/4000000.0)));
  8242  00204C  0E56               	movlw	86
  8243  00204E  0100               	movlb	0	; () banked
  8244  002050  6F63               	movwf	??_Lcd_Init& (0+255),b
  8245  002052  0EB5               	movlw	181
  8246  002054                     u3867:
  8247  002054  2EE8               	decfsz	wreg,f,c
  8248  002056  D7FE               	bra	u3867
  8249  002058  2F63               	decfsz	??_Lcd_Init& (0+255),f,b
  8250  00205A  D7FC               	bra	u3867
  8251  00205C  D000               	nop2	
  8252                           
  8253                           ;Library_LCD_2.h: 64: _delay((unsigned long)((5500)*(48000000/4000000.0)));
  8254  00205E  0E56               	movlw	86
  8255  002060  0100               	movlb	0	; () banked
  8256  002062  6F63               	movwf	??_Lcd_Init& (0+255),b
  8257  002064  0EB5               	movlw	181
  8258  002066                     u3877:
  8259  002066  2EE8               	decfsz	wreg,f,c
  8260  002068  D7FE               	bra	u3877
  8261  00206A  2F63               	decfsz	??_Lcd_Init& (0+255),f,b
  8262  00206C  D7FC               	bra	u3877
  8263  00206E  D000               	nop2	
  8264                           
  8265                           ;Library_LCD_2.h: 65: _delay((unsigned long)((5500)*(48000000/4000000.0)));
  8266  002070  0E56               	movlw	86
  8267  002072  0100               	movlb	0	; () banked
  8268  002074  6F63               	movwf	??_Lcd_Init& (0+255),b
  8269  002076  0EB5               	movlw	181
  8270  002078                     u3887:
  8271  002078  2EE8               	decfsz	wreg,f,c
  8272  00207A  D7FE               	bra	u3887
  8273  00207C  2F63               	decfsz	??_Lcd_Init& (0+255),f,b
  8274  00207E  D7FC               	bra	u3887
  8275  002080  D000               	nop2	
  8276                           
  8277                           ;Library_LCD_2.h: 66: for(data = 1; data < 4; data ++)
  8278  002082  0E01               	movlw	1
  8279  002084  0100               	movlb	0	; () banked
  8280  002086  6F64               	movwf	Lcd_Init@data& (0+255),b
  8281  002088  D020               	goto	L6
  8282  00208A                     l64:
  8283                           
  8284                           ; BSR set to: 0
  8285                           ;Library_LCD_2.h: 67: {
  8286                           ;Library_LCD_2.h: 68: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits
      +                          .RD4 = 1; PORTDbits.RD3 = 0;
  8287  00208A  9E83               	bcf	3971,7,c	;volatile
  8288  00208C  9C83               	bcf	3971,6,c	;volatile
  8289  00208E  8A83               	bsf	3971,5,c	;volatile
  8290  002090  8883               	bsf	3971,4,c	;volatile
  8291  002092  9683               	bcf	3971,3,c	;volatile
  8292                           
  8293                           ;Library_LCD_2.h: 69: PORTDbits.RD1 = 0; PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits
      +                          .RD5 = 1; PORTDbits.RD4 = 1;
  8294  002094  9283               	bcf	3971,1,c	;volatile
  8295  002096  9E83               	bcf	3971,7,c	;volatile
  8296  002098  9C83               	bcf	3971,6,c	;volatile
  8297  00209A  8A83               	bsf	3971,5,c	;volatile
  8298  00209C  8883               	bsf	3971,4,c	;volatile
  8299                           
  8300                           ;Library_LCD_2.h: 70: PORTDbits.RD3 = 1; PORTDbits.RD1 = 0;
  8301  00209E  8683               	bsf	3971,3,c	;volatile
  8302  0020A0  9283               	bcf	3971,1,c	;volatile
  8303                           
  8304                           ; BSR set to: 0
  8305                           ;Library_LCD_2.h: 71: _delay((unsigned long)((5)*(48000000/4000000.0)));
  8306  0020A2  0E14               	movlw	20
  8307  0020A4                     u3897:
  8308  0020A4  2EE8               	decfsz	wreg,f,c
  8309  0020A6  D7FE               	bra	u3897
  8310                           
  8311                           ;Library_LCD_2.h: 72: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits
      +                          .RD4 = 1; PORTDbits.RD3 = 0;
  8312  0020A8  9E83               	bcf	3971,7,c	;volatile
  8313  0020AA  9C83               	bcf	3971,6,c	;volatile
  8314  0020AC  8A83               	bsf	3971,5,c	;volatile
  8315  0020AE  8883               	bsf	3971,4,c	;volatile
  8316  0020B0  9683               	bcf	3971,3,c	;volatile
  8317                           
  8318                           ;Library_LCD_2.h: 73: PORTDbits.RD1 = 0;
  8319  0020B2  9283               	bcf	3971,1,c	;volatile
  8320                           
  8321                           ;Library_LCD_2.h: 74: _delay((unsigned long)((5500)*(48000000/4000000.0)));
  8322  0020B4  0E56               	movlw	86
  8323  0020B6  0100               	movlb	0	; () banked
  8324  0020B8  6F63               	movwf	??_Lcd_Init& (0+255),b
  8325  0020BA  0EB5               	movlw	181
  8326  0020BC                     u3907:
  8327  0020BC  2EE8               	decfsz	wreg,f,c
  8328  0020BE  D7FE               	bra	u3907
  8329  0020C0  2F63               	decfsz	??_Lcd_Init& (0+255),f,b
  8330  0020C2  D7FC               	bra	u3907
  8331  0020C4  D000               	nop2	
  8332  0020C6  0100               	movlb	0	; () banked
  8333  0020C8  2B64               	incf	Lcd_Init@data& (0+255),f,b
  8334  0020CA                     L6:
  8335  0020CA  0E03               	movlw	3
  8336  0020CC  6564               	cpfsgt	Lcd_Init@data& (0+255),b
  8337  0020CE  D7DD               	goto	l64
  8338                           
  8339                           ; BSR set to: 0
  8340                           ;Library_LCD_2.h: 75: }
  8341                           ;Library_LCD_2.h: 76: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits
      +                          .RD4 = 0; PORTDbits.RD3 = 0; PORTDbits.RD1 = 0;
  8342  0020D0  9E83               	bcf	3971,7,c	;volatile
  8343  0020D2  9C83               	bcf	3971,6,c	;volatile
  8344  0020D4  8A83               	bsf	3971,5,c	;volatile
  8345  0020D6  9883               	bcf	3971,4,c	;volatile
  8346  0020D8  9683               	bcf	3971,3,c	;volatile
  8347  0020DA  9283               	bcf	3971,1,c	;volatile
  8348                           
  8349                           ;Library_LCD_2.h: 77: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits
      +                          .RD4 = 0; PORTDbits.RD3 = 1; PORTDbits.RD1 = 0;
  8350  0020DC  9E83               	bcf	3971,7,c	;volatile
  8351  0020DE  9C83               	bcf	3971,6,c	;volatile
  8352  0020E0  8A83               	bsf	3971,5,c	;volatile
  8353  0020E2  9883               	bcf	3971,4,c	;volatile
  8354  0020E4  8683               	bsf	3971,3,c	;volatile
  8355  0020E6  9283               	bcf	3971,1,c	;volatile
  8356                           
  8357                           ; BSR set to: 0
  8358                           ;Library_LCD_2.h: 78: _delay((unsigned long)((5)*(48000000/4000000.0)));
  8359  0020E8  0E14               	movlw	20
  8360  0020EA                     u3917:
  8361  0020EA  2EE8               	decfsz	wreg,f,c
  8362  0020EC  D7FE               	bra	u3917
  8363                           
  8364                           ;Library_LCD_2.h: 79: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits
      +                          .RD4 = 0; PORTDbits.RD3 = 0; PORTDbits.RD1 = 0;
  8365  0020EE  9E83               	bcf	3971,7,c	;volatile
  8366  0020F0  9C83               	bcf	3971,6,c	;volatile
  8367  0020F2  8A83               	bsf	3971,5,c	;volatile
  8368  0020F4  9883               	bcf	3971,4,c	;volatile
  8369  0020F6  9683               	bcf	3971,3,c	;volatile
  8370  0020F8  9283               	bcf	3971,1,c	;volatile
  8371                           
  8372                           ;Library_LCD_2.h: 80: _delay((unsigned long)((5500)*(48000000/4000000.0)));
  8373  0020FA  0E56               	movlw	86
  8374  0020FC  0100               	movlb	0	; () banked
  8375  0020FE  6F63               	movwf	??_Lcd_Init& (0+255),b
  8376  002100  0EB5               	movlw	181
  8377  002102                     u3927:
  8378  002102  2EE8               	decfsz	wreg,f,c
  8379  002104  D7FE               	bra	u3927
  8380  002106  2F63               	decfsz	??_Lcd_Init& (0+255),f,b
  8381  002108  D7FC               	bra	u3927
  8382  00210A  D000               	nop2	
  8383                           
  8384                           ;Library_LCD_2.h: 81: data = 40; Lcd_Cmd(data);
  8385  00210C  0E28               	movlw	40
  8386  00210E  0100               	movlb	0	; () banked
  8387  002110  6F64               	movwf	Lcd_Init@data& (0+255),b
  8388                           
  8389                           ; BSR set to: 0
  8390  002112  5164               	movf	Lcd_Init@data& (0+255),w,b
  8391  002114  ECD3  F011         	call	_Lcd_Cmd
  8392                           
  8393                           ;Library_LCD_2.h: 82: data = 16; Lcd_Cmd(data);
  8394  002118  0E10               	movlw	16
  8395  00211A  0100               	movlb	0	; () banked
  8396  00211C  6F64               	movwf	Lcd_Init@data& (0+255),b
  8397                           
  8398                           ; BSR set to: 0
  8399  00211E  5164               	movf	Lcd_Init@data& (0+255),w,b
  8400  002120  ECD3  F011         	call	_Lcd_Cmd
  8401                           
  8402                           ;Library_LCD_2.h: 83: data = 1; Lcd_Cmd(data);
  8403  002124  0E01               	movlw	1
  8404  002126  0100               	movlb	0	; () banked
  8405  002128  6F64               	movwf	Lcd_Init@data& (0+255),b
  8406                           
  8407                           ; BSR set to: 0
  8408  00212A  5164               	movf	Lcd_Init@data& (0+255),w,b
  8409  00212C  ECD3  F011         	call	_Lcd_Cmd
  8410                           
  8411                           ;Library_LCD_2.h: 84: data = 15; Lcd_Cmd(data);
  8412  002130  0E0F               	movlw	15
  8413  002132  0100               	movlb	0	; () banked
  8414  002134  6F64               	movwf	Lcd_Init@data& (0+255),b
  8415                           
  8416                           ; BSR set to: 0
  8417  002136  5164               	movf	Lcd_Init@data& (0+255),w,b
  8418  002138  ECD3  F011         	call	_Lcd_Cmd
  8419  00213C  0012               	return		;funcret
  8420  00213E                     __end_of_Lcd_Init:
  8421                           	opt stack 0
  8422                           tblptru	equ	0xFF8
  8423                           tblptrh	equ	0xFF7
  8424                           tblptrl	equ	0xFF6
  8425                           tablat	equ	0xFF5
  8426                           prodh	equ	0xFF4
  8427                           prodl	equ	0xFF3
  8428                           intcon	equ	0xFF2
  8429                           postinc0	equ	0xFEE
  8430                           wreg	equ	0xFE8
  8431                           indf2	equ	0xFDF
  8432                           postinc2	equ	0xFDE
  8433                           postdec2	equ	0xFDD
  8434                           fsr2h	equ	0xFDA
  8435                           fsr2l	equ	0xFD9
  8436                           status	equ	0xFD8
  8437                           
  8438 ;; *************** function _Lcd_Cmd *****************
  8439 ;; Defined at:
  8440 ;;		line 144 in file "Library_LCD_2.h"
  8441 ;; Parameters:    Size  Location     Type
  8442 ;;  data            1    wreg     unsigned char 
  8443 ;; Auto vars:     Size  Location     Type
  8444 ;;  data            1    2[BANK0 ] unsigned char 
  8445 ;; Return value:  Size  Location     Type
  8446 ;;                  1    wreg      void 
  8447 ;; Registers used:
  8448 ;;		wreg, status,2, status,0
  8449 ;; Tracked objects:
  8450 ;;		On entry : 0/0
  8451 ;;		On exit  : 0/0
  8452 ;;		Unchanged: 0/0
  8453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8454 ;;      Params:         0       0       0       0       0       0       0       0       0
  8455 ;;      Locals:         0       1       0       0       0       0       0       0       0
  8456 ;;      Temps:          0       2       0       0       0       0       0       0       0
  8457 ;;      Totals:         0       3       0       0       0       0       0       0       0
  8458 ;;Total ram usage:        3 bytes
  8459 ;; Hardware stack levels used:    1
  8460 ;; Hardware stack levels required when called:    3
  8461 ;; This function calls:
  8462 ;;		Nothing
  8463 ;; This function is called by:
  8464 ;;		_Lcd_Init
  8465 ;;		_Lcd_Out2
  8466 ;;		_main
  8467 ;;		_Lcd_Out
  8468 ;; This function uses a non-reentrant model
  8469 ;;
  8470                           
  8471                           	psect	text27
  8472  0023A6                     __ptext27:
  8473                           	opt stack 0
  8474  0023A6                     _Lcd_Cmd:
  8475                           	opt stack 26
  8476                           
  8477                           ;incstack = 0
  8478                           ;Lcd_Cmd@data stored from wreg
  8479  0023A6  0100               	movlb	0	; () banked
  8480  0023A8  6F62               	movwf	Lcd_Cmd@data& (0+255),b
  8481                           
  8482                           ;Library_LCD_2.h: 145: PORTDbits.RD3 = 0; PORTDbits.RD1 = 0;
  8483  0023AA  9683               	bcf	3971,3,c	;volatile
  8484  0023AC  9283               	bcf	3971,1,c	;volatile
  8485                           
  8486                           ;Library_LCD_2.h: 146: PORTDbits.RD7 = (data & 0b10000000)>>7; PORTDbits.RD6 = (data & 0
      +                          b01000000)>>6;
  8487  0023AE  0100               	movlb	0	; () banked
  8488  0023B0  6B60               	clrf	??_Lcd_Cmd& (0+255),b
  8489  0023B2  AF62               	btfss	Lcd_Cmd@data& (0+255),7,b
  8490  0023B4  D001               	bra	u2355
  8491  0023B6  2B60               	incf	??_Lcd_Cmd& (0+255),f,b
  8492  0023B8                     u2355:
  8493  0023B8  0E01               	movlw	1
  8494  0023BA  1760               	andwf	??_Lcd_Cmd& (0+255),f,b
  8495  0023BC  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
  8496  0023BE  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
  8497  0023C0  5083               	movf	3971,w,c	;volatile
  8498  0023C2  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
  8499  0023C4  0B7F               	andlw	-129
  8500  0023C6  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
  8501  0023C8  6E83               	movwf	3971,c	;volatile
  8502  0023CA  C062  F060         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  8503  0023CE  0E06               	movlw	6
  8504  0023D0  6F61               	movwf	(??_Lcd_Cmd+1)& (0+255),b
  8505  0023D2                     u2365:
  8506  0023D2  90D8               	bcf	status,0,c
  8507  0023D4  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
  8508  0023D6  2F61               	decfsz	(??_Lcd_Cmd+1)& (0+255),f,b
  8509  0023D8  D7FC               	goto	u2365
  8510  0023DA  0E01               	movlw	1
  8511  0023DC  1760               	andwf	??_Lcd_Cmd& (0+255),f,b
  8512  0023DE  3B60               	swapf	??_Lcd_Cmd& (0+255),f,b
  8513  0023E0  4760               	rlncf	??_Lcd_Cmd& (0+255),f,b
  8514  0023E2  4760               	rlncf	??_Lcd_Cmd& (0+255),f,b
  8515  0023E4  5083               	movf	3971,w,c	;volatile
  8516  0023E6  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
  8517  0023E8  0BBF               	andlw	-65
  8518  0023EA  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
  8519  0023EC  6E83               	movwf	3971,c	;volatile
  8520                           
  8521                           ;Library_LCD_2.h: 147: PORTDbits.RD5 = (data & 0b00100000)>>5; PORTDbits.RD4 = (data & 0
      +                          b00010000)>>4;
  8522  0023EE  C062  F060         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  8523  0023F2  0E05               	movlw	5
  8524  0023F4  6F61               	movwf	(??_Lcd_Cmd+1)& (0+255),b
  8525  0023F6                     u2375:
  8526  0023F6  90D8               	bcf	status,0,c
  8527  0023F8  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
  8528  0023FA  2F61               	decfsz	(??_Lcd_Cmd+1)& (0+255),f,b
  8529  0023FC  D7FC               	goto	u2375
  8530  0023FE  0E01               	movlw	1
  8531  002400  1760               	andwf	??_Lcd_Cmd& (0+255),f,b
  8532  002402  3B60               	swapf	??_Lcd_Cmd& (0+255),f,b
  8533  002404  4760               	rlncf	??_Lcd_Cmd& (0+255),f,b
  8534  002406  5083               	movf	3971,w,c	;volatile
  8535  002408  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
  8536  00240A  0BDF               	andlw	-33
  8537  00240C  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
  8538  00240E  6E83               	movwf	3971,c	;volatile
  8539  002410  C062  F060         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  8540  002414  3B60               	swapf	??_Lcd_Cmd& (0+255),f,b
  8541  002416  0E0F               	movlw	15
  8542  002418  1760               	andwf	??_Lcd_Cmd& (0+255),f,b
  8543  00241A  0E01               	movlw	1
  8544  00241C  1760               	andwf	??_Lcd_Cmd& (0+255),f,b
  8545  00241E  3B60               	swapf	??_Lcd_Cmd& (0+255),f,b
  8546  002420  5083               	movf	3971,w,c	;volatile
  8547  002422  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
  8548  002424  0BEF               	andlw	-17
  8549  002426  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
  8550  002428  6E83               	movwf	3971,c	;volatile
  8551                           
  8552                           ; BSR set to: 0
  8553                           ;Library_LCD_2.h: 148: _delay(10);
  8554  00242A  0E03               	movlw	3
  8555  00242C                     u3937:
  8556  00242C  2EE8               	decfsz	wreg,f,c
  8557  00242E  D7FE               	bra	u3937
  8558  002430  F000               	nop	
  8559                           
  8560                           ;Library_LCD_2.h: 149: PORTDbits.RD3 = 1; _delay((unsigned long)((5)*(48000000/4000000.0
      +                          ))); PORTDbits.RD3 = 0;
  8561  002432  8683               	bsf	3971,3,c	;volatile
  8562  002434  0E14               	movlw	20
  8563  002436                     u3947:
  8564  002436  2EE8               	decfsz	wreg,f,c
  8565  002438  D7FE               	bra	u3947
  8566  00243A  9683               	bcf	3971,3,c	;volatile
  8567                           
  8568                           ;Library_LCD_2.h: 150: PORTDbits.RD7 = (data & 0b00001000)>>3; PORTDbits.RD6 = (data & 0
      +                          b00000100)>>2;
  8569  00243C  C062  F060         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  8570  002440  0100               	movlb	0	; () banked
  8571  002442  90D8               	bcf	status,0,c
  8572  002444  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
  8573  002446  90D8               	bcf	status,0,c
  8574  002448  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
  8575  00244A  90D8               	bcf	status,0,c
  8576  00244C  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
  8577  00244E  0E01               	movlw	1
  8578  002450  1760               	andwf	??_Lcd_Cmd& (0+255),f,b
  8579  002452  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
  8580  002454  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
  8581  002456  5083               	movf	3971,w,c	;volatile
  8582  002458  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
  8583  00245A  0B7F               	andlw	-129
  8584  00245C  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
  8585  00245E  6E83               	movwf	3971,c	;volatile
  8586  002460  C062  F060         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  8587  002464  90D8               	bcf	status,0,c
  8588  002466  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
  8589  002468  90D8               	bcf	status,0,c
  8590  00246A  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
  8591  00246C  0E01               	movlw	1
  8592  00246E  1760               	andwf	??_Lcd_Cmd& (0+255),f,b
  8593  002470  3B60               	swapf	??_Lcd_Cmd& (0+255),f,b
  8594  002472  4760               	rlncf	??_Lcd_Cmd& (0+255),f,b
  8595  002474  4760               	rlncf	??_Lcd_Cmd& (0+255),f,b
  8596  002476  5083               	movf	3971,w,c	;volatile
  8597  002478  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
  8598  00247A  0BBF               	andlw	-65
  8599  00247C  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
  8600  00247E  6E83               	movwf	3971,c	;volatile
  8601                           
  8602                           ;Library_LCD_2.h: 151: PORTDbits.RD5 = (data & 0b00000010)>>1; PORTDbits.RD4 = (data & 0
      +                          b00000001);
  8603  002480  C062  F060         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  8604  002484  90D8               	bcf	status,0,c
  8605  002486  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
  8606  002488  0E01               	movlw	1
  8607  00248A  1760               	andwf	??_Lcd_Cmd& (0+255),f,b
  8608  00248C  3B60               	swapf	??_Lcd_Cmd& (0+255),f,b
  8609  00248E  4760               	rlncf	??_Lcd_Cmd& (0+255),f,b
  8610  002490  5083               	movf	3971,w,c	;volatile
  8611  002492  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
  8612  002494  0BDF               	andlw	-33
  8613  002496  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
  8614  002498  6E83               	movwf	3971,c	;volatile
  8615  00249A  C062  F060         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  8616  00249E  0E01               	movlw	1
  8617  0024A0  1760               	andwf	??_Lcd_Cmd& (0+255),f,b
  8618  0024A2  3B60               	swapf	??_Lcd_Cmd& (0+255),f,b
  8619  0024A4  5083               	movf	3971,w,c	;volatile
  8620  0024A6  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
  8621  0024A8  0BEF               	andlw	-17
  8622  0024AA  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
  8623  0024AC  6E83               	movwf	3971,c	;volatile
  8624                           
  8625                           ; BSR set to: 0
  8626                           ;Library_LCD_2.h: 152: _delay(10);
  8627  0024AE  0E03               	movlw	3
  8628  0024B0                     u3957:
  8629  0024B0  2EE8               	decfsz	wreg,f,c
  8630  0024B2  D7FE               	bra	u3957
  8631  0024B4  F000               	nop	
  8632                           
  8633                           ;Library_LCD_2.h: 153: PORTDbits.RD3 = 1; _delay((unsigned long)((5)*(48000000/4000000.0
      +                          ))); PORTDbits.RD3 = 0;
  8634  0024B6  8683               	bsf	3971,3,c	;volatile
  8635  0024B8  0E14               	movlw	20
  8636  0024BA                     u3967:
  8637  0024BA  2EE8               	decfsz	wreg,f,c
  8638  0024BC  D7FE               	bra	u3967
  8639  0024BE  9683               	bcf	3971,3,c	;volatile
  8640                           
  8641                           ;Library_LCD_2.h: 154: _delay((unsigned long)((5500)*(48000000/4000000.0)));
  8642  0024C0  0E56               	movlw	86
  8643  0024C2  0100               	movlb	0	; () banked
  8644  0024C4  6F60               	movwf	??_Lcd_Cmd& (0+255),b
  8645  0024C6  0EB5               	movlw	181
  8646  0024C8                     u3977:
  8647  0024C8  2EE8               	decfsz	wreg,f,c
  8648  0024CA  D7FE               	bra	u3977
  8649  0024CC  2F60               	decfsz	??_Lcd_Cmd& (0+255),f,b
  8650  0024CE  D7FC               	bra	u3977
  8651  0024D0  D000               	nop2	
  8652  0024D2  0012               	return		;funcret
  8653  0024D4                     __end_of_Lcd_Cmd:
  8654                           	opt stack 0
  8655                           tblptru	equ	0xFF8
  8656                           tblptrh	equ	0xFF7
  8657                           tblptrl	equ	0xFF6
  8658                           tablat	equ	0xFF5
  8659                           prodh	equ	0xFF4
  8660                           prodl	equ	0xFF3
  8661                           intcon	equ	0xFF2
  8662                           postinc0	equ	0xFEE
  8663                           wreg	equ	0xFE8
  8664                           indf2	equ	0xFDF
  8665                           postinc2	equ	0xFDE
  8666                           postdec2	equ	0xFDD
  8667                           fsr2h	equ	0xFDA
  8668                           fsr2l	equ	0xFD9
  8669                           status	equ	0xFD8
  8670                           
  8671 ;; *************** function _comparar *****************
  8672 ;; Defined at:
  8673 ;;		line 94 in file "main_014_Practice_CCP Comparacion_ADC.c"
  8674 ;; Parameters:    Size  Location     Type
  8675 ;;		None
  8676 ;; Auto vars:     Size  Location     Type
  8677 ;;		None
  8678 ;; Return value:  Size  Location     Type
  8679 ;;                  1    wreg      void 
  8680 ;; Registers used:
  8681 ;;		wreg, status,2, status,0, cstack
  8682 ;; Tracked objects:
  8683 ;;		On entry : 0/0
  8684 ;;		On exit  : 0/0
  8685 ;;		Unchanged: 0/0
  8686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8687 ;;      Params:         0       0       0       0       0       0       0       0       0
  8688 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8689 ;;      Temps:         18       0       0       0       0       0       0       0       0
  8690 ;;      Totals:        18       0       0       0       0       0       0       0       0
  8691 ;;Total ram usage:       18 bytes
  8692 ;; Hardware stack levels used:    1
  8693 ;; Hardware stack levels required when called:    2
  8694 ;; This function calls:
  8695 ;;		i2___ftdiv
  8696 ;;		i2___ftmul
  8697 ;;		i2___lwtoft
  8698 ;; This function is called by:
  8699 ;;		Interrupt level 2
  8700 ;; This function uses a non-reentrant model
  8701 ;;
  8702                           
  8703                           	psect	intcode
  8704  000008                     __pintcode:
  8705                           	opt stack 0
  8706  000008                     _comparar:
  8707                           	opt stack 24
  8708                           
  8709                           ;incstack = 0
  8710  000008  8255               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8711  00000A  EDFF  F012         	call	int_func,f	;refresh shadow registers
  8712                           tblptru	equ	0xFF8
  8713                           tblptrh	equ	0xFF7
  8714                           tblptrl	equ	0xFF6
  8715                           tablat	equ	0xFF5
  8716                           prodh	equ	0xFF4
  8717                           prodl	equ	0xFF3
  8718                           intcon	equ	0xFF2
  8719                           postinc0	equ	0xFEE
  8720                           wreg	equ	0xFE8
  8721                           indf2	equ	0xFDF
  8722                           postinc2	equ	0xFDE
  8723                           postdec2	equ	0xFDD
  8724                           fsr2h	equ	0xFDA
  8725                           fsr2l	equ	0xFD9
  8726                           status	equ	0xFD8
  8727                           
  8728                           	psect	intcode_body
  8729  0025FE                     __pintcode_body:
  8730                           	opt stack 24
  8731  0025FE                     int_func:
  8732                           	opt stack 24
  8733  0025FE  0006               	pop		; remove dummy address from shadow register refresh
  8734  002600  CFFA F02A          	movff	pclath,??_comparar
  8735  002604  CFFB F02B          	movff	pclatu,??_comparar+1
  8736  002608  CFE9 F02C          	movff	fsr0l,??_comparar+2
  8737  00260C  CFEA F02D          	movff	fsr0h,??_comparar+3
  8738  002610  CFE1 F02E          	movff	fsr1l,??_comparar+4
  8739  002614  CFE2 F02F          	movff	fsr1h,??_comparar+5
  8740  002618  CFD9 F030          	movff	fsr2l,??_comparar+6
  8741  00261C  CFDA F031          	movff	fsr2h,??_comparar+7
  8742  002620  CFF3 F032          	movff	prodl,??_comparar+8
  8743  002624  CFF4 F033          	movff	prodh,??_comparar+9
  8744  002628  CFF6 F034          	movff	tblptrl,??_comparar+10
  8745  00262C  CFF7 F035          	movff	tblptrh,??_comparar+11
  8746  002630  CFF8 F036          	movff	tblptru,??_comparar+12
  8747  002634  CFF5 F037          	movff	tablat,??_comparar+13
  8748  002638  C055  F038         	movff	btemp,??_comparar+14
  8749  00263C  C056  F039         	movff	btemp+1,??_comparar+15
  8750  002640  C057  F03A         	movff	btemp+2,??_comparar+16
  8751  002644  C058  F03B         	movff	btemp+3,??_comparar+17
  8752                           
  8753                           ;main_014_Practice_CCP Comparacion_ADC.c: 96: INTCONbits.GIE = 0;
  8754  002648  9EF2               	bcf	intcon,7,c	;volatile
  8755                           
  8756                           ;main_014_Practice_CCP Comparacion_ADC.c: 97: if(CCP1IF == 1)
  8757  00264A  A49E               	btfss	3998,2,c	;volatile
  8758  00264C  D036               	goto	i2l111
  8759                           
  8760                           ;main_014_Practice_CCP Comparacion_ADC.c: 98: {
  8761                           ;main_014_Practice_CCP Comparacion_ADC.c: 99: T1CONbits.TMR1ON = 0;
  8762  00264E  90CD               	bcf	4045,0,c	;volatile
  8763                           
  8764                           ;main_014_Practice_CCP Comparacion_ADC.c: 100: PIR1bits.CCP1IF = 0;
  8765  002650  949E               	bcf	3998,2,c	;volatile
  8766                           
  8767                           ;main_014_Practice_CCP Comparacion_ADC.c: 102: adc1 = ADRESH;
  8768  002652  CFC4 F03F          	movff	4036,_adc1	;volatile
  8769  002656  6A40               	clrf	_adc1+1,c
  8770                           
  8771                           ;main_014_Practice_CCP Comparacion_ADC.c: 103: adc1 = adc1<<8;
  8772  002658  503F               	movf	_adc1,w,c
  8773  00265A  6E40               	movwf	_adc1+1,c
  8774  00265C  6A3F               	clrf	_adc1,c
  8775                           
  8776                           ;main_014_Practice_CCP Comparacion_ADC.c: 104: adc1 = adc1 + ADRESL;
  8777  00265E  50C3               	movf	4035,w,c	;volatile
  8778  002660  243F               	addwf	_adc1,w,c
  8779  002662  6E3F               	movwf	_adc1,c
  8780  002664  0E00               	movlw	0
  8781  002666  2040               	addwfc	_adc1+1,w,c
  8782  002668  6E40               	movwf	_adc1+1,c
  8783                           
  8784                           ;main_014_Practice_CCP Comparacion_ADC.c: 106: voltaje = adc1 * 4.72 /1024.0;
  8785  00266A  0E0A               	movlw	10
  8786  00266C  6E0F               	movwf	i2___ftmul@f2,c
  8787  00266E  0E97               	movlw	151
  8788  002670  6E10               	movwf	i2___ftmul@f2+1,c
  8789  002672  0E40               	movlw	64
  8790  002674  6E11               	movwf	i2___ftmul@f2+2,c
  8791  002676  C03F  F009         	movff	_adc1,i2___lwtoft@c
  8792  00267A  C040  F00A         	movff	_adc1+1,i2___lwtoft@c+1
  8793  00267E  ECC9  F018         	call	i2___lwtoft	;wreg free
  8794  002682  C009  F00C         	movff	?i2___lwtoft,i2___ftmul@f1
  8795  002686  C00A  F00D         	movff	?i2___lwtoft+1,i2___ftmul@f1+1
  8796  00268A  C00B  F00E         	movff	?i2___lwtoft+2,i2___ftmul@f1+2
  8797  00268E  EC7A  F014         	call	i2___ftmul	;wreg free
  8798  002692  C00C  F01B         	movff	?i2___ftmul,i2___ftdiv@f1
  8799  002696  C00D  F01C         	movff	?i2___ftmul+1,i2___ftdiv@f1+1
  8800  00269A  C00E  F01D         	movff	?i2___ftmul+2,i2___ftdiv@f1+2
  8801  00269E  0E00               	movlw	0
  8802  0026A0  6E1E               	movwf	i2___ftdiv@f2,c
  8803  0026A2  0E80               	movlw	128
  8804  0026A4  6E1F               	movwf	i2___ftdiv@f2+1,c
  8805  0026A6  0E44               	movlw	68
  8806  0026A8  6E20               	movwf	i2___ftdiv@f2+2,c
  8807  0026AA  EC68  F015         	call	i2___ftdiv	;wreg free
  8808  0026AE  C01B  F03C         	movff	?i2___ftdiv,_voltaje
  8809  0026B2  C01C  F03D         	movff	?i2___ftdiv+1,_voltaje+1
  8810  0026B6  C01D  F03E         	movff	?i2___ftdiv+2,_voltaje+2
  8811  0026BA                     i2l111:
  8812  0026BA  C03B  F058         	movff	??_comparar+17,btemp+3
  8813  0026BE  C03A  F057         	movff	??_comparar+16,btemp+2
  8814  0026C2  C039  F056         	movff	??_comparar+15,btemp+1
  8815  0026C6  C038  F055         	movff	??_comparar+14,btemp
  8816  0026CA  C037  FFF5         	movff	??_comparar+13,tablat
  8817  0026CE  C036  FFF8         	movff	??_comparar+12,tblptru
  8818  0026D2  C035  FFF7         	movff	??_comparar+11,tblptrh
  8819  0026D6  C034  FFF6         	movff	??_comparar+10,tblptrl
  8820  0026DA  C033  FFF4         	movff	??_comparar+9,prodh
  8821  0026DE  C032  FFF3         	movff	??_comparar+8,prodl
  8822  0026E2  C031  FFDA         	movff	??_comparar+7,fsr2h
  8823  0026E6  C030  FFD9         	movff	??_comparar+6,fsr2l
  8824  0026EA  C02F  FFE2         	movff	??_comparar+5,fsr1h
  8825  0026EE  C02E  FFE1         	movff	??_comparar+4,fsr1l
  8826  0026F2  C02D  FFEA         	movff	??_comparar+3,fsr0h
  8827  0026F6  C02C  FFE9         	movff	??_comparar+2,fsr0l
  8828  0026FA  C02B  FFFB         	movff	??_comparar+1,pclatu
  8829  0026FE  C02A  FFFA         	movff	??_comparar,pclath
  8830  002702  9255               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8831  002704  0011               	retfie		f
  8832  002706                     __end_of_comparar:
  8833                           	opt stack 0
  8834                           pclatu	equ	0xFFB
  8835                           pclath	equ	0xFFA
  8836                           tblptru	equ	0xFF8
  8837                           tblptrh	equ	0xFF7
  8838                           tblptrl	equ	0xFF6
  8839                           tablat	equ	0xFF5
  8840                           prodh	equ	0xFF4
  8841                           prodl	equ	0xFF3
  8842                           intcon	equ	0xFF2
  8843                           postinc0	equ	0xFEE
  8844                           fsr0h	equ	0xFEA
  8845                           fsr0l	equ	0xFE9
  8846                           wreg	equ	0xFE8
  8847                           fsr1h	equ	0xFE2
  8848                           fsr1l	equ	0xFE1
  8849                           indf2	equ	0xFDF
  8850                           postinc2	equ	0xFDE
  8851                           postdec2	equ	0xFDD
  8852                           fsr2h	equ	0xFDA
  8853                           fsr2l	equ	0xFD9
  8854                           status	equ	0xFD8
  8855                           
  8856 ;; *************** function i2___lwtoft *****************
  8857 ;; Defined at:
  8858 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
  8859 ;; Parameters:    Size  Location     Type
  8860 ;;  c               2    8[COMRAM] unsigned int 
  8861 ;; Auto vars:     Size  Location     Type
  8862 ;;		None
  8863 ;; Return value:  Size  Location     Type
  8864 ;;                  3    8[COMRAM] float 
  8865 ;; Registers used:
  8866 ;;		wreg, status,2, status,0, cstack
  8867 ;; Tracked objects:
  8868 ;;		On entry : 0/0
  8869 ;;		On exit  : 0/0
  8870 ;;		Unchanged: 0/0
  8871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8872 ;;      Params:         3       0       0       0       0       0       0       0       0
  8873 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8874 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8875 ;;      Totals:         3       0       0       0       0       0       0       0       0
  8876 ;;Total ram usage:        3 bytes
  8877 ;; Hardware stack levels used:    1
  8878 ;; Hardware stack levels required when called:    1
  8879 ;; This function calls:
  8880 ;;		i2___ftpack
  8881 ;; This function is called by:
  8882 ;;		_comparar
  8883 ;; This function uses a non-reentrant model
  8884 ;;
  8885                           
  8886                           	psect	text29
  8887  003192                     __ptext29:
  8888                           	opt stack 0
  8889  003192                     i2___lwtoft:
  8890                           	opt stack 24
  8891                           
  8892                           ;incstack = 0
  8893  003192  C009  F001         	movff	i2___lwtoft@c,i2___ftpack@arg
  8894  003196  C00A  F002         	movff	i2___lwtoft@c+1,i2___ftpack@arg+1
  8895  00319A  6A03               	clrf	i2___ftpack@arg+2,c
  8896  00319C  0E8E               	movlw	142
  8897  00319E  6E04               	movwf	i2___ftpack@exp,c
  8898  0031A0  0E00               	movlw	0
  8899  0031A2  6E05               	movwf	i2___ftpack@sign,c
  8900  0031A4  EC33  F016         	call	i2___ftpack	;wreg free
  8901  0031A8  C001  F009         	movff	?i2___ftpack,?i2___lwtoft
  8902  0031AC  C002  F00A         	movff	?i2___ftpack+1,?i2___lwtoft+1
  8903  0031B0  C003  F00B         	movff	?i2___ftpack+2,?i2___lwtoft+2
  8904  0031B4  0012               	return	
  8905  0031B6                     __end_ofi2___lwtoft:
  8906                           	opt stack 0
  8907                           pclatu	equ	0xFFB
  8908                           pclath	equ	0xFFA
  8909                           tblptru	equ	0xFF8
  8910                           tblptrh	equ	0xFF7
  8911                           tblptrl	equ	0xFF6
  8912                           tablat	equ	0xFF5
  8913                           prodh	equ	0xFF4
  8914                           prodl	equ	0xFF3
  8915                           intcon	equ	0xFF2
  8916                           postinc0	equ	0xFEE
  8917                           fsr0h	equ	0xFEA
  8918                           fsr0l	equ	0xFE9
  8919                           wreg	equ	0xFE8
  8920                           fsr1h	equ	0xFE2
  8921                           fsr1l	equ	0xFE1
  8922                           indf2	equ	0xFDF
  8923                           postinc2	equ	0xFDE
  8924                           postdec2	equ	0xFDD
  8925                           fsr2h	equ	0xFDA
  8926                           fsr2l	equ	0xFD9
  8927                           status	equ	0xFD8
  8928                           
  8929 ;; *************** function i2___ftmul *****************
  8930 ;; Defined at:
  8931 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  8932 ;; Parameters:    Size  Location     Type
  8933 ;;  f1              3   11[COMRAM] float 
  8934 ;;  f2              3   14[COMRAM] float 
  8935 ;; Auto vars:     Size  Location     Type
  8936 ;;  __ftmul         3   21[COMRAM] unsigned um
  8937 ;;  __ftmul         1   25[COMRAM] unsigned char 
  8938 ;;  __ftmul         1   24[COMRAM] unsigned char 
  8939 ;;  __ftmul         1   20[COMRAM] unsigned char 
  8940 ;; Return value:  Size  Location     Type
  8941 ;;                  3   11[COMRAM] float 
  8942 ;; Registers used:
  8943 ;;		wreg, status,2, status,0, cstack
  8944 ;; Tracked objects:
  8945 ;;		On entry : 0/0
  8946 ;;		On exit  : 0/0
  8947 ;;		Unchanged: 0/0
  8948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8949 ;;      Params:         6       0       0       0       0       0       0       0       0
  8950 ;;      Locals:         6       0       0       0       0       0       0       0       0
  8951 ;;      Temps:          3       0       0       0       0       0       0       0       0
  8952 ;;      Totals:        15       0       0       0       0       0       0       0       0
  8953 ;;Total ram usage:       15 bytes
  8954 ;; Hardware stack levels used:    1
  8955 ;; Hardware stack levels required when called:    1
  8956 ;; This function calls:
  8957 ;;		i2___ftpack
  8958 ;; This function is called by:
  8959 ;;		_comparar
  8960 ;; This function uses a non-reentrant model
  8961 ;;
  8962                           
  8963                           	psect	text30
  8964  0028F4                     __ptext30:
  8965                           	opt stack 0
  8966  0028F4                     i2___ftmul:
  8967                           	opt stack 24
  8968                           
  8969                           ;incstack = 0
  8970  0028F4  C00E  F012         	movff	i2___ftmul@f1+2,??i2___ftmul
  8971  0028F8  6A13               	clrf	(??i2___ftmul+1)& (0+255),c
  8972  0028FA  6A14               	clrf	(??i2___ftmul+2)& (0+255),c
  8973  0028FC  340D               	rlcf	i2___ftmul@f1+1,w,c
  8974  0028FE  3612               	rlcf	??i2___ftmul& (0+255),f,c
  8975  002900  E301               	bnc	u366_41
  8976  002902  8013               	bsf	(??i2___ftmul+1)& (0+255),0,c
  8977  002904                     u366_41:
  8978  002904  5012               	movf	??i2___ftmul,w,c
  8979  002906  6E15               	movwf	i2___ftmul@exp,c
  8980  002908  5015               	movf	i2___ftmul@exp,w,c
  8981  00290A  A4D8               	btfss	status,2,c
  8982  00290C  D007               	goto	i2l588
  8983  00290E  0E00               	movlw	0
  8984  002910  6E0C               	movwf	?i2___ftmul,c
  8985  002912  0E00               	movlw	0
  8986  002914  6E0D               	movwf	?i2___ftmul+1,c
  8987  002916  0E00               	movlw	0
  8988  002918  6E0E               	movwf	?i2___ftmul+2,c
  8989  00291A  0012               	return	
  8990  00291C                     i2l588:
  8991  00291C  C011  F012         	movff	i2___ftmul@f2+2,??i2___ftmul
  8992  002920  6A13               	clrf	(??i2___ftmul+1)& (0+255),c
  8993  002922  6A14               	clrf	(??i2___ftmul+2)& (0+255),c
  8994  002924  3410               	rlcf	i2___ftmul@f2+1,w,c
  8995  002926  3612               	rlcf	??i2___ftmul& (0+255),f,c
  8996  002928  E301               	bnc	u368_41
  8997  00292A  8013               	bsf	(??i2___ftmul+1)& (0+255),0,c
  8998  00292C                     u368_41:
  8999  00292C  5012               	movf	??i2___ftmul,w,c
  9000  00292E  6E1A               	movwf	i2___ftmul@sign,c
  9001  002930  501A               	movf	i2___ftmul@sign,w,c
  9002  002932  A4D8               	btfss	status,2,c
  9003  002934  D007               	goto	i2l590
  9004  002936  0E00               	movlw	0
  9005  002938  6E0C               	movwf	?i2___ftmul,c
  9006  00293A  0E00               	movlw	0
  9007  00293C  6E0D               	movwf	?i2___ftmul+1,c
  9008  00293E  0E00               	movlw	0
  9009  002940  6E0E               	movwf	?i2___ftmul+2,c
  9010  002942  0012               	return	
  9011  002944                     i2l590:
  9012  002944  501A               	movf	i2___ftmul@sign,w,c
  9013  002946  0F7B               	addlw	123
  9014  002948  2615               	addwf	i2___ftmul@exp,f,c
  9015  00294A  C00E  F01A         	movff	i2___ftmul@f1+2,i2___ftmul@sign
  9016  00294E  5011               	movf	i2___ftmul@f2+2,w,c
  9017  002950  1A1A               	xorwf	i2___ftmul@sign,f,c
  9018  002952  0E80               	movlw	128
  9019  002954  161A               	andwf	i2___ftmul@sign,f,c
  9020  002956  8E0D               	bsf	i2___ftmul@f1+1,7,c
  9021  002958  8E10               	bsf	i2___ftmul@f2+1,7,c
  9022  00295A  0EFF               	movlw	255
  9023  00295C  160F               	andwf	i2___ftmul@f2,f,c
  9024  00295E  0EFF               	movlw	255
  9025  002960  1610               	andwf	i2___ftmul@f2+1,f,c
  9026  002962  0E00               	movlw	0
  9027  002964  1611               	andwf	i2___ftmul@f2+2,f,c
  9028  002966  0E00               	movlw	0
  9029  002968  6E16               	movwf	i2___ftmul@f3_as_product,c
  9030  00296A  0E00               	movlw	0
  9031  00296C  6E17               	movwf	i2___ftmul@f3_as_product+1,c
  9032  00296E  0E00               	movlw	0
  9033  002970  6E18               	movwf	i2___ftmul@f3_as_product+2,c
  9034  002972  0E07               	movlw	7
  9035  002974  6E19               	movwf	i2___ftmul@cntr,c
  9036  002976  A00C               	btfss	i2___ftmul@f1,0,c
  9037  002978  D006               	goto	i2l592
  9038  00297A  500F               	movf	i2___ftmul@f2,w,c
  9039  00297C  2616               	addwf	i2___ftmul@f3_as_product,f,c
  9040  00297E  5010               	movf	i2___ftmul@f2+1,w,c
  9041  002980  2217               	addwfc	i2___ftmul@f3_as_product+1,f,c
  9042  002982  5011               	movf	i2___ftmul@f2+2,w,c
  9043  002984  2218               	addwfc	i2___ftmul@f3_as_product+2,f,c
  9044  002986                     i2l592:
  9045  002986  90D8               	bcf	status,0,c
  9046  002988  320E               	rrcf	i2___ftmul@f1+2,f,c
  9047  00298A  320D               	rrcf	i2___ftmul@f1+1,f,c
  9048  00298C  320C               	rrcf	i2___ftmul@f1,f,c
  9049  00298E  90D8               	bcf	status,0,c
  9050  002990  360F               	rlcf	i2___ftmul@f2,f,c
  9051  002992  3610               	rlcf	i2___ftmul@f2+1,f,c
  9052  002994  3611               	rlcf	i2___ftmul@f2+2,f,c
  9053  002996  2E19               	decfsz	i2___ftmul@cntr,f,c
  9054  002998  D7EE               	goto	i2l591
  9055  00299A  0E09               	movlw	9
  9056  00299C  6E19               	movwf	i2___ftmul@cntr,c
  9057  00299E  A00C               	btfss	i2___ftmul@f1,0,c
  9058  0029A0  D006               	goto	i2l595
  9059  0029A2  500F               	movf	i2___ftmul@f2,w,c
  9060  0029A4  2616               	addwf	i2___ftmul@f3_as_product,f,c
  9061  0029A6  5010               	movf	i2___ftmul@f2+1,w,c
  9062  0029A8  2217               	addwfc	i2___ftmul@f3_as_product+1,f,c
  9063  0029AA  5011               	movf	i2___ftmul@f2+2,w,c
  9064  0029AC  2218               	addwfc	i2___ftmul@f3_as_product+2,f,c
  9065  0029AE                     i2l595:
  9066  0029AE  90D8               	bcf	status,0,c
  9067  0029B0  320E               	rrcf	i2___ftmul@f1+2,f,c
  9068  0029B2  320D               	rrcf	i2___ftmul@f1+1,f,c
  9069  0029B4  320C               	rrcf	i2___ftmul@f1,f,c
  9070  0029B6  90D8               	bcf	status,0,c
  9071  0029B8  3218               	rrcf	i2___ftmul@f3_as_product+2,f,c
  9072  0029BA  3217               	rrcf	i2___ftmul@f3_as_product+1,f,c
  9073  0029BC  3216               	rrcf	i2___ftmul@f3_as_product,f,c
  9074  0029BE  2E19               	decfsz	i2___ftmul@cntr,f,c
  9075  0029C0  D7EE               	goto	i2l594
  9076  0029C2  C016  F001         	movff	i2___ftmul@f3_as_product,i2___ftpack@arg
  9077  0029C6  C017  F002         	movff	i2___ftmul@f3_as_product+1,i2___ftpack@arg+1
  9078  0029CA  C018  F003         	movff	i2___ftmul@f3_as_product+2,i2___ftpack@arg+2
  9079  0029CE  C015  F004         	movff	i2___ftmul@exp,i2___ftpack@exp
  9080  0029D2  C01A  F005         	movff	i2___ftmul@sign,i2___ftpack@sign
  9081  0029D6  EC33  F016         	call	i2___ftpack	;wreg free
  9082  0029DA  C001  F00C         	movff	?i2___ftpack,?i2___ftmul
  9083  0029DE  C002  F00D         	movff	?i2___ftpack+1,?i2___ftmul+1
  9084  0029E2  C003  F00E         	movff	?i2___ftpack+2,?i2___ftmul+2
  9085  0029E6  0012               	return	
  9086  0029E8                     __end_ofi2___ftmul:
  9087                           	opt stack 0
  9088                           pclatu	equ	0xFFB
  9089                           pclath	equ	0xFFA
  9090                           tblptru	equ	0xFF8
  9091                           tblptrh	equ	0xFF7
  9092                           tblptrl	equ	0xFF6
  9093                           tablat	equ	0xFF5
  9094                           prodh	equ	0xFF4
  9095                           prodl	equ	0xFF3
  9096                           intcon	equ	0xFF2
  9097                           postinc0	equ	0xFEE
  9098                           fsr0h	equ	0xFEA
  9099                           fsr0l	equ	0xFE9
  9100                           wreg	equ	0xFE8
  9101                           fsr1h	equ	0xFE2
  9102                           fsr1l	equ	0xFE1
  9103                           indf2	equ	0xFDF
  9104                           postinc2	equ	0xFDE
  9105                           postdec2	equ	0xFDD
  9106                           fsr2h	equ	0xFDA
  9107                           fsr2l	equ	0xFD9
  9108                           status	equ	0xFD8
  9109                           
  9110 ;; *************** function i2___ftdiv *****************
  9111 ;; Defined at:
  9112 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  9113 ;; Parameters:    Size  Location     Type
  9114 ;;  f1              3   26[COMRAM] float 
  9115 ;;  f2              3   29[COMRAM] float 
  9116 ;; Auto vars:     Size  Location     Type
  9117 ;;  __ftdiv         3   36[COMRAM] float 
  9118 ;;  __ftdiv         1   40[COMRAM] unsigned char 
  9119 ;;  __ftdiv         1   39[COMRAM] unsigned char 
  9120 ;;  __ftdiv         1   35[COMRAM] unsigned char 
  9121 ;; Return value:  Size  Location     Type
  9122 ;;                  3   26[COMRAM] float 
  9123 ;; Registers used:
  9124 ;;		wreg, status,2, status,0, cstack
  9125 ;; Tracked objects:
  9126 ;;		On entry : 0/0
  9127 ;;		On exit  : 0/0
  9128 ;;		Unchanged: 0/0
  9129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9130 ;;      Params:         6       0       0       0       0       0       0       0       0
  9131 ;;      Locals:         6       0       0       0       0       0       0       0       0
  9132 ;;      Temps:          3       0       0       0       0       0       0       0       0
  9133 ;;      Totals:        15       0       0       0       0       0       0       0       0
  9134 ;;Total ram usage:       15 bytes
  9135 ;; Hardware stack levels used:    1
  9136 ;; Hardware stack levels required when called:    1
  9137 ;; This function calls:
  9138 ;;		i2___ftpack
  9139 ;; This function is called by:
  9140 ;;		_comparar
  9141 ;; This function uses a non-reentrant model
  9142 ;;
  9143                           
  9144                           	psect	text31
  9145  002AD0                     __ptext31:
  9146                           	opt stack 0
  9147  002AD0                     i2___ftdiv:
  9148                           	opt stack 24
  9149                           
  9150                           ;incstack = 0
  9151  002AD0  C01D  F021         	movff	i2___ftdiv@f1+2,??i2___ftdiv
  9152  002AD4  6A22               	clrf	(??i2___ftdiv+1)& (0+255),c
  9153  002AD6  6A23               	clrf	(??i2___ftdiv+2)& (0+255),c
  9154  002AD8  341C               	rlcf	i2___ftdiv@f1+1,w,c
  9155  002ADA  3621               	rlcf	??i2___ftdiv& (0+255),f,c
  9156  002ADC  E301               	bnc	u361_41
  9157  002ADE  8022               	bsf	(??i2___ftdiv+1)& (0+255),0,c
  9158  002AE0                     u361_41:
  9159  002AE0  5021               	movf	??i2___ftdiv,w,c
  9160  002AE2  6E28               	movwf	i2___ftdiv@exp,c
  9161  002AE4  5028               	movf	i2___ftdiv@exp,w,c
  9162  002AE6  A4D8               	btfss	status,2,c
  9163  002AE8  D007               	goto	i2l556
  9164  002AEA  0E00               	movlw	0
  9165  002AEC  6E1B               	movwf	?i2___ftdiv,c
  9166  002AEE  0E00               	movlw	0
  9167  002AF0  6E1C               	movwf	?i2___ftdiv+1,c
  9168  002AF2  0E00               	movlw	0
  9169  002AF4  6E1D               	movwf	?i2___ftdiv+2,c
  9170  002AF6  0012               	return	
  9171  002AF8                     i2l556:
  9172  002AF8  C020  F021         	movff	i2___ftdiv@f2+2,??i2___ftdiv
  9173  002AFC  6A22               	clrf	(??i2___ftdiv+1)& (0+255),c
  9174  002AFE  6A23               	clrf	(??i2___ftdiv+2)& (0+255),c
  9175  002B00  341F               	rlcf	i2___ftdiv@f2+1,w,c
  9176  002B02  3621               	rlcf	??i2___ftdiv& (0+255),f,c
  9177  002B04  E301               	bnc	u363_41
  9178  002B06  8022               	bsf	(??i2___ftdiv+1)& (0+255),0,c
  9179  002B08                     u363_41:
  9180  002B08  5021               	movf	??i2___ftdiv,w,c
  9181  002B0A  6E29               	movwf	i2___ftdiv@sign,c
  9182  002B0C  5029               	movf	i2___ftdiv@sign,w,c
  9183  002B0E  A4D8               	btfss	status,2,c
  9184  002B10  D007               	goto	i2l558
  9185  002B12  0E00               	movlw	0
  9186  002B14  6E1B               	movwf	?i2___ftdiv,c
  9187  002B16  0E00               	movlw	0
  9188  002B18  6E1C               	movwf	?i2___ftdiv+1,c
  9189  002B1A  0E00               	movlw	0
  9190  002B1C  6E1D               	movwf	?i2___ftdiv+2,c
  9191  002B1E  0012               	return	
  9192  002B20                     i2l558:
  9193  002B20  0E00               	movlw	0
  9194  002B22  6E25               	movwf	i2___ftdiv@f3,c
  9195  002B24  0E00               	movlw	0
  9196  002B26  6E26               	movwf	i2___ftdiv@f3+1,c
  9197  002B28  0E00               	movlw	0
  9198  002B2A  6E27               	movwf	i2___ftdiv@f3+2,c
  9199  002B2C  5029               	movf	i2___ftdiv@sign,w,c
  9200  002B2E  0F89               	addlw	137
  9201  002B30  5E28               	subwf	i2___ftdiv@exp,f,c
  9202  002B32  C01D  F029         	movff	i2___ftdiv@f1+2,i2___ftdiv@sign
  9203  002B36  5020               	movf	i2___ftdiv@f2+2,w,c
  9204  002B38  1A29               	xorwf	i2___ftdiv@sign,f,c
  9205  002B3A  0E80               	movlw	128
  9206  002B3C  1629               	andwf	i2___ftdiv@sign,f,c
  9207  002B3E  8E1C               	bsf	i2___ftdiv@f1+1,7,c
  9208  002B40  0EFF               	movlw	255
  9209  002B42  161B               	andwf	i2___ftdiv@f1,f,c
  9210  002B44  0EFF               	movlw	255
  9211  002B46  161C               	andwf	i2___ftdiv@f1+1,f,c
  9212  002B48  0E00               	movlw	0
  9213  002B4A  161D               	andwf	i2___ftdiv@f1+2,f,c
  9214  002B4C  8E1F               	bsf	i2___ftdiv@f2+1,7,c
  9215  002B4E  0EFF               	movlw	255
  9216  002B50  161E               	andwf	i2___ftdiv@f2,f,c
  9217  002B52  0EFF               	movlw	255
  9218  002B54  161F               	andwf	i2___ftdiv@f2+1,f,c
  9219  002B56  0E00               	movlw	0
  9220  002B58  1620               	andwf	i2___ftdiv@f2+2,f,c
  9221  002B5A  0E18               	movlw	24
  9222  002B5C  6E24               	movwf	i2___ftdiv@cntr,c
  9223  002B5E  90D8               	bcf	status,0,c
  9224  002B60  3625               	rlcf	i2___ftdiv@f3,f,c
  9225  002B62  3626               	rlcf	i2___ftdiv@f3+1,f,c
  9226  002B64  3627               	rlcf	i2___ftdiv@f3+2,f,c
  9227  002B66  501E               	movf	i2___ftdiv@f2,w,c
  9228  002B68  5C1B               	subwf	i2___ftdiv@f1,w,c
  9229  002B6A  501F               	movf	i2___ftdiv@f2+1,w,c
  9230  002B6C  581C               	subwfb	i2___ftdiv@f1+1,w,c
  9231  002B6E  5020               	movf	i2___ftdiv@f2+2,w,c
  9232  002B70  581D               	subwfb	i2___ftdiv@f1+2,w,c
  9233  002B72  A0D8               	btfss	status,0,c
  9234  002B74  D007               	goto	i2l560
  9235  002B76  501E               	movf	i2___ftdiv@f2,w,c
  9236  002B78  5E1B               	subwf	i2___ftdiv@f1,f,c
  9237  002B7A  501F               	movf	i2___ftdiv@f2+1,w,c
  9238  002B7C  5A1C               	subwfb	i2___ftdiv@f1+1,f,c
  9239  002B7E  5020               	movf	i2___ftdiv@f2+2,w,c
  9240  002B80  5A1D               	subwfb	i2___ftdiv@f1+2,f,c
  9241  002B82  8025               	bsf	i2___ftdiv@f3,0,c
  9242  002B84                     i2l560:
  9243  002B84  90D8               	bcf	status,0,c
  9244  002B86  361B               	rlcf	i2___ftdiv@f1,f,c
  9245  002B88  361C               	rlcf	i2___ftdiv@f1+1,f,c
  9246  002B8A  361D               	rlcf	i2___ftdiv@f1+2,f,c
  9247  002B8C  2E24               	decfsz	i2___ftdiv@cntr,f,c
  9248  002B8E  D7E7               	goto	i2l559
  9249  002B90  C025  F001         	movff	i2___ftdiv@f3,i2___ftpack@arg
  9250  002B94  C026  F002         	movff	i2___ftdiv@f3+1,i2___ftpack@arg+1
  9251  002B98  C027  F003         	movff	i2___ftdiv@f3+2,i2___ftpack@arg+2
  9252  002B9C  C028  F004         	movff	i2___ftdiv@exp,i2___ftpack@exp
  9253  002BA0  C029  F005         	movff	i2___ftdiv@sign,i2___ftpack@sign
  9254  002BA4  EC33  F016         	call	i2___ftpack	;wreg free
  9255  002BA8  C001  F01B         	movff	?i2___ftpack,?i2___ftdiv
  9256  002BAC  C002  F01C         	movff	?i2___ftpack+1,?i2___ftdiv+1
  9257  002BB0  C003  F01D         	movff	?i2___ftpack+2,?i2___ftdiv+2
  9258  002BB4  0012               	return	
  9259  002BB6                     __end_ofi2___ftdiv:
  9260                           	opt stack 0
  9261                           pclatu	equ	0xFFB
  9262                           pclath	equ	0xFFA
  9263                           tblptru	equ	0xFF8
  9264                           tblptrh	equ	0xFF7
  9265                           tblptrl	equ	0xFF6
  9266                           tablat	equ	0xFF5
  9267                           prodh	equ	0xFF4
  9268                           prodl	equ	0xFF3
  9269                           intcon	equ	0xFF2
  9270                           postinc0	equ	0xFEE
  9271                           fsr0h	equ	0xFEA
  9272                           fsr0l	equ	0xFE9
  9273                           wreg	equ	0xFE8
  9274                           fsr1h	equ	0xFE2
  9275                           fsr1l	equ	0xFE1
  9276                           indf2	equ	0xFDF
  9277                           postinc2	equ	0xFDE
  9278                           postdec2	equ	0xFDD
  9279                           fsr2h	equ	0xFDA
  9280                           fsr2l	equ	0xFD9
  9281                           status	equ	0xFD8
  9282                           
  9283 ;; *************** function i2___ftpack *****************
  9284 ;; Defined at:
  9285 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  9286 ;; Parameters:    Size  Location     Type
  9287 ;;  arg             3    0[COMRAM] unsigned um
  9288 ;;  exp             1    3[COMRAM] unsigned char 
  9289 ;;  sign            1    4[COMRAM] unsigned char 
  9290 ;; Auto vars:     Size  Location     Type
  9291 ;;		None
  9292 ;; Return value:  Size  Location     Type
  9293 ;;                  3    0[COMRAM] float 
  9294 ;; Registers used:
  9295 ;;		wreg, status,2, status,0
  9296 ;; Tracked objects:
  9297 ;;		On entry : 0/0
  9298 ;;		On exit  : 0/0
  9299 ;;		Unchanged: 0/0
  9300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9301 ;;      Params:         5       0       0       0       0       0       0       0       0
  9302 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9303 ;;      Temps:          3       0       0       0       0       0       0       0       0
  9304 ;;      Totals:         8       0       0       0       0       0       0       0       0
  9305 ;;Total ram usage:        8 bytes
  9306 ;; Hardware stack levels used:    1
  9307 ;; This function calls:
  9308 ;;		Nothing
  9309 ;; This function is called by:
  9310 ;;		i2___ftdiv
  9311 ;;		i2___ftmul
  9312 ;;		i2___lwtoft
  9313 ;; This function uses a non-reentrant model
  9314 ;;
  9315                           
  9316                           	psect	text32
  9317  002C66                     __ptext32:
  9318                           	opt stack 0
  9319  002C66                     i2___ftpack:
  9320                           	opt stack 24
  9321                           
  9322                           ;incstack = 0
  9323  002C66  5004               	movf	i2___ftpack@exp,w,c
  9324  002C68  B4D8               	btfsc	status,2,c
  9325  002C6A  D005               	goto	i2u287_40
  9326  002C6C  5001               	movf	i2___ftpack@arg,w,c
  9327  002C6E  1002               	iorwf	i2___ftpack@arg+1,w,c
  9328  002C70  1003               	iorwf	i2___ftpack@arg+2,w,c
  9329  002C72  A4D8               	btfss	status,2,c
  9330  002C74  D00C               	goto	i2l492
  9331  002C76                     i2u287_40:
  9332  002C76  0E00               	movlw	0
  9333  002C78  6E01               	movwf	?i2___ftpack,c
  9334  002C7A  0E00               	movlw	0
  9335  002C7C  6E02               	movwf	?i2___ftpack+1,c
  9336  002C7E  0E00               	movlw	0
  9337  002C80  6E03               	movwf	?i2___ftpack+2,c
  9338  002C82  0012               	return	
  9339  002C84  2A04               	incf	i2___ftpack@exp,f,c
  9340  002C86  90D8               	bcf	status,0,c
  9341  002C88  3203               	rrcf	i2___ftpack@arg+2,f,c
  9342  002C8A  3202               	rrcf	i2___ftpack@arg+1,f,c
  9343  002C8C  3201               	rrcf	i2___ftpack@arg,f,c
  9344  002C8E                     i2l492:
  9345  002C8E  0E00               	movlw	0
  9346  002C90  1401               	andwf	i2___ftpack@arg,w,c
  9347  002C92  6E06               	movwf	??i2___ftpack& (0+255),c
  9348  002C94  0E00               	movlw	0
  9349  002C96  1402               	andwf	i2___ftpack@arg+1,w,c
  9350  002C98  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
  9351  002C9A  0EFE               	movlw	254
  9352  002C9C  1403               	andwf	i2___ftpack@arg+2,w,c
  9353  002C9E  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
  9354  002CA0  5006               	movf	??i2___ftpack,w,c
  9355  002CA2  1007               	iorwf	??i2___ftpack+1,w,c
  9356  002CA4  1008               	iorwf	??i2___ftpack+2,w,c
  9357  002CA6  B4D8               	btfsc	status,2,c
  9358  002CA8  D00C               	goto	i2l495
  9359  002CAA  D7EC               	goto	i2l493
  9360  002CAC  2A04               	incf	i2___ftpack@exp,f,c
  9361  002CAE  0E01               	movlw	1
  9362  002CB0  2601               	addwf	i2___ftpack@arg,f,c
  9363  002CB2  0E00               	movlw	0
  9364  002CB4  2202               	addwfc	i2___ftpack@arg+1,f,c
  9365  002CB6  0E00               	movlw	0
  9366  002CB8  2203               	addwfc	i2___ftpack@arg+2,f,c
  9367  002CBA  90D8               	bcf	status,0,c
  9368  002CBC  3203               	rrcf	i2___ftpack@arg+2,f,c
  9369  002CBE  3202               	rrcf	i2___ftpack@arg+1,f,c
  9370  002CC0  3201               	rrcf	i2___ftpack@arg,f,c
  9371  002CC2                     i2l495:
  9372  002CC2  0E00               	movlw	0
  9373  002CC4  1401               	andwf	i2___ftpack@arg,w,c
  9374  002CC6  6E06               	movwf	??i2___ftpack& (0+255),c
  9375  002CC8  0E00               	movlw	0
  9376  002CCA  1402               	andwf	i2___ftpack@arg+1,w,c
  9377  002CCC  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
  9378  002CCE  0EFF               	movlw	255
  9379  002CD0  1403               	andwf	i2___ftpack@arg+2,w,c
  9380  002CD2  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
  9381  002CD4  5006               	movf	??i2___ftpack,w,c
  9382  002CD6  1007               	iorwf	??i2___ftpack+1,w,c
  9383  002CD8  1008               	iorwf	??i2___ftpack+2,w,c
  9384  002CDA  B4D8               	btfsc	status,2,c
  9385  002CDC  D006               	goto	i2l498
  9386  002CDE  D7E6               	goto	i2l496
  9387  002CE0  0604               	decf	i2___ftpack@exp,f,c
  9388  002CE2  90D8               	bcf	status,0,c
  9389  002CE4  3601               	rlcf	i2___ftpack@arg,f,c
  9390  002CE6  3602               	rlcf	i2___ftpack@arg+1,f,c
  9391  002CE8  3603               	rlcf	i2___ftpack@arg+2,f,c
  9392  002CEA                     i2l498:
  9393  002CEA  BE02               	btfsc	i2___ftpack@arg+1,7,c
  9394  002CEC  D003               	goto	i2u291_40
  9395  002CEE  0E02               	movlw	2
  9396  002CF0  6004               	cpfslt	i2___ftpack@exp,c
  9397  002CF2  D7F6               	goto	i2l499
  9398  002CF4                     i2u291_40:
  9399  002CF4  A004               	btfss	i2___ftpack@exp,0,c
  9400  002CF6  9E02               	bcf	i2___ftpack@arg+1,7,c
  9401  002CF8  90D8               	bcf	status,0,c
  9402  002CFA  3204               	rrcf	i2___ftpack@exp,f,c
  9403  002CFC  5004               	movf	i2___ftpack@exp,w,c
  9404  002CFE  1203               	iorwf	i2___ftpack@arg+2,f,c
  9405  002D00  5005               	movf	i2___ftpack@sign,w,c
  9406  002D02  A4D8               	btfss	status,2,c
  9407  002D04  8E03               	bsf	i2___ftpack@arg+2,7,c
  9408  002D06  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
  9409  002D0A  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
  9410  002D0E  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
  9411  002D12  0012               	return	
  9412  002D14                     __end_ofi2___ftpack:
  9413                           	opt stack 0
  9414                           pclatu	equ	0xFFB
  9415                           pclath	equ	0xFFA
  9416                           tblptru	equ	0xFF8
  9417                           tblptrh	equ	0xFF7
  9418                           tblptrl	equ	0xFF6
  9419                           tablat	equ	0xFF5
  9420                           prodh	equ	0xFF4
  9421                           prodl	equ	0xFF3
  9422                           intcon	equ	0xFF2
  9423                           postinc0	equ	0xFEE
  9424                           fsr0h	equ	0xFEA
  9425                           fsr0l	equ	0xFE9
  9426                           wreg	equ	0xFE8
  9427                           fsr1h	equ	0xFE2
  9428                           fsr1l	equ	0xFE1
  9429                           indf2	equ	0xFDF
  9430                           postinc2	equ	0xFDE
  9431                           postdec2	equ	0xFDD
  9432                           fsr2h	equ	0xFDA
  9433                           fsr2l	equ	0xFD9
  9434                           status	equ	0xFD8
  9435                           pclatu	equ	0xFFB
  9436                           pclath	equ	0xFFA
  9437                           tblptru	equ	0xFF8
  9438                           tblptrh	equ	0xFF7
  9439                           tblptrl	equ	0xFF6
  9440                           tablat	equ	0xFF5
  9441                           prodh	equ	0xFF4
  9442                           prodl	equ	0xFF3
  9443                           intcon	equ	0xFF2
  9444                           postinc0	equ	0xFEE
  9445                           fsr0h	equ	0xFEA
  9446                           fsr0l	equ	0xFE9
  9447                           wreg	equ	0xFE8
  9448                           fsr1h	equ	0xFE2
  9449                           fsr1l	equ	0xFE1
  9450                           indf2	equ	0xFDF
  9451                           postinc2	equ	0xFDE
  9452                           postdec2	equ	0xFDD
  9453                           fsr2h	equ	0xFDA
  9454                           fsr2l	equ	0xFD9
  9455                           status	equ	0xFD8
  9456                           
  9457                           	psect	rparam
  9458  0000                     pclatu	equ	0xFFB
  9459                           pclath	equ	0xFFA
  9460                           tblptru	equ	0xFF8
  9461                           tblptrh	equ	0xFF7
  9462                           tblptrl	equ	0xFF6
  9463                           tablat	equ	0xFF5
  9464                           prodh	equ	0xFF4
  9465                           prodl	equ	0xFF3
  9466                           intcon	equ	0xFF2
  9467                           postinc0	equ	0xFEE
  9468                           fsr0h	equ	0xFEA
  9469                           fsr0l	equ	0xFE9
  9470                           wreg	equ	0xFE8
  9471                           fsr1h	equ	0xFE2
  9472                           fsr1l	equ	0xFE1
  9473                           indf2	equ	0xFDF
  9474                           postinc2	equ	0xFDE
  9475                           postdec2	equ	0xFDD
  9476                           fsr2h	equ	0xFDA
  9477                           fsr2l	equ	0xFD9
  9478                           status	equ	0xFD8
  9479                           
  9480                           	psect	temp
  9481  000055                     btemp:
  9482                           	opt stack 0
  9483  000055                     	ds	1
  9484  0000                     int$flags	set	btemp
  9485  0000                     wtemp6	set	btemp+1
  9486                           pclatu	equ	0xFFB
  9487                           pclath	equ	0xFFA
  9488                           tblptru	equ	0xFF8
  9489                           tblptrh	equ	0xFF7
  9490                           tblptrl	equ	0xFF6
  9491                           tablat	equ	0xFF5
  9492                           prodh	equ	0xFF4
  9493                           prodl	equ	0xFF3
  9494                           intcon	equ	0xFF2
  9495                           postinc0	equ	0xFEE
  9496                           fsr0h	equ	0xFEA
  9497                           fsr0l	equ	0xFE9
  9498                           wreg	equ	0xFE8
  9499                           fsr1h	equ	0xFE2
  9500                           fsr1l	equ	0xFE1
  9501                           indf2	equ	0xFDF
  9502                           postinc2	equ	0xFDE
  9503                           postdec2	equ	0xFDD
  9504                           fsr2h	equ	0xFDA
  9505                           fsr2l	equ	0xFD9
  9506                           status	equ	0xFD8


Data Sizes:
    Strings     46
    Constant    118
    Data        0
    BSS         47
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     59      84
    BANK0           160    142     144
    BANK1           256      0      20
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_4(CODE[12]), STR_3(CODE[11]), STR_2(CODE[11]), STR_1(CODE[12]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> buffer2(COMRAM[20]), main@buffer1(BANK0[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Out2@buffer	PTR unsigned char  size(2) Largest target is 20
		 -> buffer2(COMRAM[20]), main@buffer1(BANK0[16]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _comparar in COMRAM

    _comparar->i2___ftdiv
    i2___lwtoft->i2___ftpack
    i2___ftmul->i2___lwtoft
    i2___ftdiv->i2___ftmul

Critical Paths under _main in BANK0

    _main->_sprintf
    _sqrt->___ftdiv
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___lwtoft->___ftpack
    ___ftdiv->___ftsub
    _Lcd_Out2->_Lcd_Chr_CP
    _Lcd_Out2->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd

Critical Paths under _comparar in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _comparar in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _comparar in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _comparar in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _comparar in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _comparar in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _comparar in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _comparar in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                41    41      0   87046
                                            101 BANK0     41    41      0
                            _Lcd_Cmd
                           _Lcd_Init
                           _Lcd_Out2
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
                     _configstandard
                            _sprintf
                               _sqrt
 ---------------------------------------------------------------------------------
 (1) _sqrt                                                19    16      3   12182
                                             78 BANK0     19    16      3
                            ___ftdiv (ARG)
                             ___ftge
                            ___ftmul
                            ___ftsub
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             44    37      7   56082
                                             63 BANK0     38    31      7
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                7     4      3   13223
                                             35 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              10     7      3   13025
                                             35 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2895
                                             14 BANK0      6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    6401
                                             20 BANK0     15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1664
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1820
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     455
                                              0 BANK0     15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     598
                                              0 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2650
                                              8 BANK0      9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     767
                                             13 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     618
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     480
                                             42 BANK0     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4576
                                             57 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    4079
                                             45 BANK0     12     6      6
                            ___ftmul (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     121
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     744
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (1) _configstandard                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             3     0      3    2653
                                              8 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    3619
                                             63 BANK0     15     9      6
                            ___ftadd (ARG)
                             ___ftge (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                            ___ftsub (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2505
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _Lcd_Out2                                             5     2      3    1141
                                              3 BANK0      5     2      3
                         _Lcd_Chr_CP
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Chr_CP                                           3     3      0     176
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     314
                                              3 BANK0      2     2      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     176
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _comparar                                            18    18      0    2153
                                             41 COMRAM    18    18      0
                          i2___ftdiv
                          i2___ftmul
                         i2___lwtoft
 ---------------------------------------------------------------------------------
 (6) i2___lwtoft                                           3     0      3     513
                                              8 COMRAM     3     0      3
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (6) i2___ftmul                                           15     9      6     843
                                             11 COMRAM    15     9      6
                         i2___ftpack
                         i2___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (6) i2___ftdiv                                           15     9      6     797
                                             26 COMRAM    15     9      6
                          i2___ftmul (ARG)
                         i2___ftpack
                         i2___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (7) i2___ftpack                                           8     3      5     465
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Cmd
   _Lcd_Init
     _Lcd_Cmd
   _Lcd_Out2
     _Lcd_Chr_CP
     _Lcd_Cmd
   ___ftadd
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftpack (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   ___ftdiv
     ___ftadd (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftpack (ARG)
     ___ftpack (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___lwtoft
     ___ftpack
   _configstandard
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _sqrt
     ___ftdiv (ARG)
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftge (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack

 _comparar (ROOT)
   i2___ftdiv
     i2___ftmul (ARG)
       i2___ftpack
       i2___lwtoft (ARG)
         i2___ftpack
     i2___ftpack (ARG)
     i2___lwtoft (ARG)
       i2___ftpack
   i2___ftmul
     i2___ftpack
     i2___lwtoft (ARG)
       i2___ftpack
   i2___lwtoft
     i2___ftpack

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      14       7        7.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     8E      90       5       90.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3B      54       1       89.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      F8      20        0.0%
DATA                 0      0      F8       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri May 18 05:11:44 2018

                     l64 208A                       l90 2F68                       l82 2F44  
                     l83 2F28                       l84 2F60                       l85 2F30  
                     l86 2F36                       l87 2F3C                       l89 2F7C  
           ___awdiv@sign 006B      ___wmul@multiplicand 0070              __CFG_BORV$3 000000  
             i2___ftpack 2C66             __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000  
           __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000             ___ftadd@exp1 0098  
           ___ftadd@exp2 0097             ___ftadd@sign 0096                      l201 0D12  
                    l210 0DC2                      l220 0EE2                      l221 0ECC  
                    l213 0DFE                      l205 0D7E                      l142 1BA4  
                    l230 106C                      l214 0DE8                      l206 0D98  
                    l118 1944                      l223 0F06                      l119 17C6  
                    l152 151C                      l240 1178                      l232 10C6  
                    l224 0F0A                      l160 08D0                      l145 1C7A  
                    l153 167A                      l233 10DE                      l225 0F2C  
                    l217 0EC2                      l209 0DD8                      l242 119A  
                    l226 1060                      l218 0E2C                      l170 09EE  
                    l162 08EA                      l155 1732                      l243 11A2  
                    l227 0F7C                      l171 09D8                      l163 08E2  
                    l148 1542                      l244 11C6                      l172 099E  
                    l149 1464                      l245 11CE                      l237 1136  
                    l229 1082                      l246 1216                      l190 0BAA  
                    l431 2DEA                      l247 11F6                      l239 1156  
                    l183 108C                      l191 0BE8                      l175 0A00  
                    l159 08B4                      l432 2DE2                      l256 12E8  
                    l192 0CAC                      l184 0A46                      l168 091A  
                    l441 2EC6                      l257 125E                      l185 0A88  
                    l450 2F18                      l442 2ED2                      l178 09FC  
                    l523 1D10                      l611 27AC                      l435 2E0A  
                    l195 0C56                      l187 0B1C                      l179 0A32  
                    l532 1DA0                      l620 27EC                      l612 279C  
                    l460 24F4                      l436 2E14                      l428 2DBC  
                    l444 2EE8                      l188 0B84                      l605 30C8  
                    l437 2E22                      l429 2DCC                      l445 2EE0  
                    l550 1E14                      l462 2512                      l551 1E44  
                    l527 1D3A                      l463 2554                      l560 2A9E  
                    l472 25E6                      l464 2584                      l448 2F00  
                    l624 31D0                      l537 1D96                      l617 27D0  
                    l609 2734                      l473 25DA                      l449 2F0A  
                    l546 1DD4                      l538 1D8C                      l618 27C4  
                    l650 2E5C                      l466 25C2                      l570 2236  
                    l547 1DCA                      l651 2E50                      l467 25B2  
                    l571 2226                      l492 2BE0                      l556 2A12  
                    l660 2FAC                      l564 216C                      l493 2BD6  
                    l581 2D46                      l549 1DF8                      l661 2FA0  
                    l558 2A3A                      l582 2D76                      l654 2E90  
                    l566 2198                      l590 2850                      l495 2C14  
                    l559 2A78                      l655 2E9E                      l671 3008  
                    l567 21D2                      l591 2882                      l496 2BFE  
                    l664 2FD4                      l672 2FFC                      l576 225A  
                    l568 21FA                      l592 2892                      l665 2FE2  
                    l577 224E                      l498 2C3C                      l594 28AA  
                    l499 2C32                      l595 28BA                      l588 2828  
                    l853 1EA8                      l854 1E9A                      l599 315E  
                    l856 1EF8               i2___lwtoft 3192             __CFG_CPB$OFF 000000  
           __CFG_CPD$OFF 000000          ?_configstandard 0001             ___awmod@sign 0065  
            main@Voltage 00E0                      wreg 000FE8             __CFG_LVP$OFF 000000  
            main@buffer1 00CA             ___ftdiv@cntr 00A8             ___ftdiv@sign 00AD  
           __CFG_WDT$OFF 000000                     l2302 2DA2                     l3300 10E2  
                   l3214 0DE8                     l3206 0DC2                     l3150 0BE8  
                   l3238 0ECC                     l3158 0C30                     l3370 125E  
                   l3178 0D16                     l3374 12E4                     l3648 1952  
                   STR_1 0877                     STR_2 089A                     STR_3 088F  
                   STR_4 0883                     u2000 1D02                     u2100 1DA8  
                   u2030 1D2C                     u2130 1DDC                     u2060 1D6A  
                   u3100 0BBA                     u3110 0BFA                     u2320 2EEC  
                   u2171 2810                     u2260 2DEE                     u3140 0C30  
                   u3060 0AC0                     u2405 22C2                     u2501 2150  
                   u2191 2838                     u3240 0E0C                     u2521 217C  
                   u3065 0AB6                     u2355 23B8                     u3500 123C  
                   u3180 0D4E                     u2365 23D2                     u3270 0EF0  
                   u2375 23F6                     u2711 2718                     u2800 2E60  
                   u3520 12F8                     u3280 0F00                     u2385 2284  
                   u1930 2C46                     u2730 2752                     u2650 25EC  
                   u3530 1312                     u3370 111A                     u2395 229E  
                   u2580 2260                     u2830 2FB0                     u2735 274A  
                   u3561 29FA                     u1961 1CCE                     u1890 2BC8  
                   u2770 27D6                     u3490 121E                     u1971 1CE2  
                   u3581 2A22                     u3807 2386                     u3817 238E  
                   u3907 20BC                     u3827 239A                     u3917 20EA  
                   u3837 201E                     u3757 177A                     u2990 097A  
                   u3927 2102                     u3847 2030                     u3767 18F6  
                   u3937 242C                     u3857 2042                     u3777 22F8  
                   u3947 2436                     u3867 2054                     u3787 2302  
                   u3957 24B0                     u3877 2066                     u3797 237C  
                   u3967 24BA                     u3887 2078                     u3977 24C8  
                   u3897 20A4                     _TMR1 000FCE                     _adc1 003F  
                   _main 1758             ___ftpack@arg 0060             ___ftpack@exp 0063  
                   fsr0h 000FEA                     fsr1h 000FE2                     fsr2h 000FDA  
                   fsr0l 000FE9                     indf2 000FDF                     fsr1l 000FE1  
                   fsr2l 000FD9                     btemp 0055                     _sqrt 1E6A  
                   prodh 000FF4                     prodl 000FF3                     start 000E  
          __CFG_IESO$OFF 000000             i2___ftdiv@f1 001B             i2___ftdiv@f2 001E  
           i2___ftdiv@f3 0025             _sprintf$1357 00AC          __end_of_Lcd_Cmd 24D4  
          __CFG_MCLRE$ON 000000             ___ftmul@cntr 0081             i2___ftmul@f1 000C  
           i2___ftmul@f2 000F             ___param_bank 000000             ___ftmul@sign 0082  
             _Lcd_Chr_CP 2272             ___fttol@exp1 0098             ___fttol@lval 0094  
         Lcd_Out2@buffer 0064            __CFG_PLLDIV$2 000000           __CFG_CCP2MX$ON 000000  
                  ?_main 0001          __end_of___awdiv 2E2C          __end_of___ftadd 1E6A  
                  _CCPR1 000FBE          __end_of___awmod 2F22          __end_of___ftdiv 2AD0  
        __end_of___ftneg 316C             i2___lwtoft@c 0009          __end_of___lldiv 2EB0  
                  ?_sqrt 00AE          __end_of___ftmul 28F4          ___awdiv@divisor 0068  
        __end_of___llmod 2FF4          __end_of___ftsub 30F2          __end_of___fttol 27FE  
                  i2l111 26BA                    i2l560 2B84                    i2l492 2C8E  
                  i2l556 2AF8                    i2l493 2C84                    i2l558 2B20  
                  i2l590 2944                    i2l495 2CC2                    i2l559 2B5E  
                  i2l591 2976                    i2l496 2CAC                    i2l592 2986  
                  i2l498 2CEA                    i2l594 299E                    i2l499 2CE0  
                  i2l595 29AE                    i2l588 291C          ___awdiv@counter 006A  
          __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000             ___lltoft@exp 0070  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000  
        __end_of_dpowers 0829                    _errno 00EE                    _scale 1320  
        __end_of_isdigit 31D8            ___ftpack@sign 0064                    pclath 000FFA  
                  tablat 000FF5                    sqrt@a 00AE                    sqrt@i 00BA  
                  sqrt@q 00BB                    sqrt@x 00BE                    sqrt@z 00B7  
                  status 000FD8                    wtemp6 0056          __end_of_sprintf 1320  
         __CFG_ICPRT$OFF 000000            i2___ftdiv@exp 0028           __CFG_PBADEN$ON 000000  
     __size_ofi2___ftdiv 00E6       __size_ofi2___ftmul 00F4         __end_of_Lcd_Init 213E  
       __end_of_Lcd_Out2 2F8C          __initialization 30F2             __end_of_main 1A4C  
          i2___ftmul@exp 0015             __end_of_sqrt 1FFE              ?i2___ftpack 0001  
                 ??_main 00C5            ___fttol@sign1 0093                   ??_sqrt 00B1  
            ?i2___lwtoft 0009            __activetblptr 000002     __size_of__tdiv_to_l_ 0134  
                 _ADCON1 000FC1                   _CCP1IF 007CF2         ___llmod@dividend 006D  
                 ?_scale 0083                   _ADRESH 000FC4                   _ADRESL 000FC3  
       ___awdiv@dividend 0066         __end_of___ftpack 2C66         __end_of___lltoft 3052  
                 u361_41 2AE0         __end_of___lwtoft 3192                   u363_41 2B08  
                 u366_41 2904                   u368_41 292C                ??_Lcd_Cmd 0060  
         __CFG_XINST$OFF 000000         __end_of__powers_ 0850         __end_of_comparar 2706  
                 ___ftge 2D14              ?_Lcd_Chr_CP 0001                   ___wmul 311E  
              ??___awdiv 006A                ??___ftadd 0093           __CFG_STVREN$ON 000000  
              ??___awmod 0064                ??___ftdiv 00A5                ??___ftneg 0063  
              ??___lldiv 0068                ??___ftmul 007A                ??___llmod 0075  
              ??___ftsub 009F                ??___fttol 008E                   _fround 1A4C  
                 clear_0 30F8                   clear_1 310A         ___awdiv@quotient 006C  
        ___awmod@divisor 0062          ___awmod@counter 0064    ___ftmul@f3_as_product 007E  
              ??_isdigit 0060        __end_ofi2___ftdiv 2BB6        __end_ofi2___ftmul 29E8  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8                   sqrt@og 00B4                ??_sprintf 00A6  
         i2___ftdiv@cntr 0024               __accesstop 0060  __end_of__initialization 3110  
         i2___ftdiv@sign 0029               ___ftadd@f1 008D               ___ftadd@f2 0090  
    __size_ofi2___ftpack 00AE               ___ftge@ff1 0060               ___ftge@ff2 0063  
          ___rparam_used 000001               ___ftdiv@f1 009F               ___ftdiv@f2 00A2  
             ___ftdiv@f3 00A9      __size_ofi2___lwtoft 0024               ___ftneg@f1 0060  
         i2___ftpack@arg 0001           i2___ftpack@exp 0004               ___ftmul@f1 0074  
             ___ftmul@f2 0077               ___ftsub@f1 0099               ___ftsub@f2 009C  
             ___fttol@f1 008A           __pcstackCOMRAM 0001               ___lltoft@c 0068  
         i2___ftmul@cntr 0019            __end_of_scale 1758           i2___ftmul@sign 001A  
       ??_configstandard 0060               ___lwtoft@c 0068               __div_to_l_ 24D4  
              ?_Lcd_Init 0001                ?_Lcd_Out2 0063          __div_to_l_@exp1 006B  
        __div_to_l_@cntr 006A                  ??_scale 0086          __div_to_l_@quot 0066  
           sprintf@width 00BD      __size_of_Lcd_Chr_CP 0134               __pbssBANK0 00EE  
             __pbssBANK1 0100            __div_to_l_@f1 0060            __div_to_l_@f2 0063  
                ?___ftge 0060                  ?___wmul 006E                  ?_fround 0083  
              ?___ftpack 0060                ?___lltoft 0068                ?___lwtoft 0068  
             ??_Lcd_Init 0063               ??_Lcd_Out2 0066                ?_comparar 0001  
        __CFG_VREGEN$OFF 000000                  _Lcd_Cmd 23A6        __end_of__npowers_ 0877  
                __Hparam 0000               _scale$1356 0086     main@numCiclosMuestro 00E9  
                __Lparam 0000          __size_of___ftge 0092                  ___awdiv 2DA6  
                ___ftadd 1CBC                  ___awmod 2EB0                  ___ftdiv 29E8  
                ___ftneg 3146                  ___lldiv 2E2C          __size_of___wmul 0028  
                ___ftmul 27FE                  ___llmod 2F8C                  ___ftsub 30B0  
                ___fttol 2706             __psmallconst 0800                  __pcinit 30F2  
           ??i2___ftpack 0006               ??___ftpack 0065          __size_of_fround 0270  
i2___ftmul@f3_as_product 0016                  __ramtop 0800               ??___lltoft 006C  
                __ptext0 1758                  __ptext1 1E6A                  __ptext2 08A6  
                __ptext3 1320                  __ptext4 31B6                  __ptext5 1A4C  
                __ptext6 311E                  __ptext7 27FE                  __ptext8 2EB0  
                __ptext9 2DA6                  _buffer1 0100                  _buffer2 0041  
           ??i2___lwtoft 000C               ??___lwtoft 006B                _T1CONbits 000FCD  
            ?__div_to_l_ 0060                  _dpowers 0801                  _isdigit 31B6  
       ___awmod@dividend 0060                  _sprintf 08A6                  _voltaje 003C  
         __pintcode_body 25FE               ??_comparar 002A     end_of_initialization 3110  
          __Lmediumconst 0000                  int_func 25FE       __end_ofi2___ftpack 2D14  
        ___lldiv@divisor 0064       __end_ofi2___lwtoft 31B6          ___lldiv@counter 006C  
           ??_Lcd_Chr_CP 0060                Lcd_Out2@x 0063                Lcd_Out2@y 0066  
                postdec2 000FDD                  postinc0 000FEE                  postinc2 000FDE  
         __tdiv_to_l_@f1 0060           __tdiv_to_l_@f2 0063            ??__tdiv_to_l_ 0066  
              _PORTDbits 000F83                _TRISAbits 000F92                _TRISDbits 000F95  
              i2___ftdiv 2AD0                i2___ftmul 28F4       __end_of_Lcd_Chr_CP 23A6  
            _CCP1CONbits 000FBD              ___ftdiv@exp 00AC          i2___ftpack@sign 0005  
    __size_of__div_to_l_ 012A               main@sumIns 00E3              ___ftmul@exp 007D  
         __end_of___ftge 2DA6           __end_of___wmul 3146           __end_of_fround 1CBC  
    start_initialization 30F2      __end_of__tdiv_to_l_ 2272               ?i2___ftdiv 001B  
             ?i2___ftmul 000C        __size_of_Lcd_Init 0140        __size_of_Lcd_Out2 006A  
        ___llmod@divisor 0071          ___llmod@counter 0075                 ??___ftge 0066  
               ??___wmul 0072         __CFG_LPT1OSC$OFF 000000                 ??_fround 0086  
          sprintf@tmpval 00B1               fround@prec 008C        __size_of___ftpack 00B0  
      __size_of___lltoft 005E              __pbssCOMRAM 003C        __size_of___lwtoft 0026  
          __pcstackBANK0 0060             _isdigit$1004 0061                 ?_Lcd_Cmd 0001  
            sprintf@flag 00BB        __size_of_comparar 26FE              sprintf@fval 00BF  
            sprintf@prec 00C2                _main$1352 00DA                _main$1353 00DD  
              __pintcode 0008                 ?___awdiv 0066                 ?___ftadd 008D  
               ?___awmod 0060                 ?___ftdiv 009F                 ?___ftneg 0060  
               ?___lldiv 0060                 ?___ftmul 0074                 ?___llmod 006D  
               ?___ftsub 0099                __npowers_ 0850                 ?___fttol 008A  
            __tdiv_to_l_ 213E             ??__div_to_l_ 0066              __smallconst 0800  
               ?_isdigit 0001  __size_of_configstandard 005E                 ?_sprintf 009F  
            ??i2___ftdiv 0021              ??i2___ftmul 0012           __size_of_scale 0438  
         ___wmul@product 0072                 _PIE1bits 000F9D                 _PIR1bits 000F9E  
     __end_of__div_to_l_ 25FE                 i2u291_40 2CF4                 i2u287_40 2C76  
       __CFG_WDTPS$32768 000000         main@PotenciaReal 00C7             Lcd_Init@data 0064  
             _ADCON0bits 000FC2               _ADCON2bits 000FC0        ___wmul@multiplier 006E  
           Lcd_Out2@data 0067                 _Lcd_Init 1FFE                 _Lcd_Out2 2F22  
       __size_of_Lcd_Cmd 012E                 __Hrparam 0000                 __Lrparam 0000  
       __size_of___awdiv 0086         __size_of___ftadd 01AE         __size_of___awmod 0072  
       __size_of___ftdiv 00E8         __size_of___ftneg 0026         __size_of___lldiv 0084  
       __size_of___ftmul 00F6         __size_of___llmod 0068         __size_of___ftsub 0042  
       __size_of___fttol 00F8                 ___ftpack 2BB6              _fround$1354 0089  
            _fround$1355 0086                 ___lltoft 2FF4                 ___lwtoft 316C  
             sprintf@exp 00B9               sprintf@val 00B5         __size_of_isdigit 0022  
         Lcd_Chr_CP@data 0062                 __ptext10 213E                 __ptext11 24D4  
               __ptext20 3052                 __ptext12 2FF4                 __ptext21 316C  
               __ptext13 2F8C                 __ptext30 28F4                 __ptext22 29E8  
               __ptext14 2E2C                 __ptext31 2AD0                 __ptext23 2BB6  
               __ptext15 2706                 __ptext32 2C66                 __ptext24 2F22  
               __ptext16 30B0                 __ptext25 2272                 __ptext17 1CBC  
               __ptext26 1FFE                 __ptext18 3146                 __ptext27 23A6  
               __ptext19 2D14                 __ptext29 3192                 __powers_ 0829  
               _comparar 0008         __size_of_sprintf 0A7A              Lcd_Cmd@data 0062  
          __size_of_main 02F4            __size_of_sqrt 0194                 int$flags 0055  
               main@Amps 00EB                 main@Irms 00E6    __CFG_CPUDIV$OSC1_PLL2 000000  
             _INTCONbits 000FF2           _configstandard 3052                 isdigit@c 0062  
               scale@scl 0089                 intlevel2 0000                sprintf@ap 00AF  
       __tdiv_to_l_@exp1 006E                sprintf@sp 009F         __tdiv_to_l_@cntr 006D  
       __tdiv_to_l_@quot 0069         ___lldiv@dividend 0060             ?__tdiv_to_l_ 0060  
               sprintf@c 00C4                 sprintf@f 00A1   __end_of_configstandard 30B0  
       ___lldiv@quotient 0068       __CFG_FOSC$HSPLL_HS 000000  
