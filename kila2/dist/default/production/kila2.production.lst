

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri May 18 11:28:05 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    54                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    55                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    56  0000                     
    57                           ; Version 1.45
    58                           ; Generated 16/11/2017 GMT
    59                           ; 
    60                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    61                           ; All rights reserved.
    62                           ; 
    63                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    64                           ; 
    65                           ; Redistribution and use in source and binary forms, with or without modification, are
    66                           ; permitted provided that the following conditions are met:
    67                           ; 
    68                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    69                           ;        conditions and the following disclaimer.
    70                           ; 
    71                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    72                           ;        of conditions and the following disclaimer in the documentation and/or other
    73                           ;        materials provided with the distribution.
    74                           ; 
    75                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    76                           ;        software without specific prior written permission.
    77                           ; 
    78                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    79                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    80                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    81                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    82                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    83                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    84                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    85                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    86                           ; 
    87                           ; 
    88                           ; Code-generator required, PIC18F4550 Definitions
    89                           ; 
    90                           ; SFR Addresses
    91  0000                     
    92                           	psect	smallconst
    93  000800                     __psmallconst:
    94                           	opt stack 0
    95  000800  00                 	db	0
    96  000801                     _dpowers:
    97                           	opt stack 0
    98  000801  0001               	dw	1
    99  000803  0000               	dw	0
   100  000805  000A               	dw	10
   101  000807  0000               	dw	0
   102  000809  0064               	dw	100
   103  00080B  0000               	dw	0
   104  00080D  03E8               	dw	1000
   105  00080F  0000               	dw	0
   106  000811  2710               	dw	10000
   107  000813  0000               	dw	0
   108  000815  86A0               	dw	34464
   109  000817  0001               	dw	1
   110  000819  4240               	dw	16960
   111  00081B  000F               	dw	15
   112  00081D  9680               	dw	38528
   113  00081F  0098               	dw	152
   114  000821  E100               	dw	57600
   115  000823  05F5               	dw	1525
   116  000825  CA00               	dw	51712
   117  000827  3B9A               	dw	15258
   118  000829                     __end_of_dpowers:
   119                           	opt stack 0
   120  000829                     __powers_:
   121                           	opt stack 0
   122  000829  00                 	db	0
   123  00082A  80                 	db	128
   124  00082B  3F                 	db	63
   125  00082C  00                 	db	0
   126  00082D  20                 	db	32
   127  00082E  41                 	db	65
   128  00082F  00                 	db	0
   129  000830  C8                 	db	200
   130  000831  42                 	db	66
   131  000832  00                 	db	0
   132  000833  7A                 	db	122
   133  000834  44                 	db	68
   134  000835  40                 	db	64
   135  000836  1C                 	db	28
   136  000837  46                 	db	70
   137  000838  50                 	db	80
   138  000839  C3                 	db	195
   139  00083A  47                 	db	71
   140  00083B  24                 	db	36
   141  00083C  74                 	db	116
   142  00083D  49                 	db	73
   143  00083E  97                 	db	151
   144  00083F  18                 	db	24
   145  000840  4B                 	db	75
   146  000841  BC                 	db	188
   147  000842  BE                 	db	190
   148  000843  4C                 	db	76
   149  000844  6B                 	db	107
   150  000845  6E                 	db	110
   151  000846  4E                 	db	78
   152  000847  03                 	db	3
   153  000848  15                 	db	21
   154  000849  50                 	db	80
   155  00084A  79                 	db	121
   156  00084B  AD                 	db	173
   157  00084C  60                 	db	96
   158  00084D  F3                 	db	243
   159  00084E  49                 	db	73
   160  00084F  71                 	db	113
   161  000850                     __end_of__powers_:
   162                           	opt stack 0
   163  000850                     __npowers_:
   164                           	opt stack 0
   165  000850  00                 	db	0
   166  000851  80                 	db	128
   167  000852  3F                 	db	63
   168  000853  CD                 	db	205
   169  000854  CC                 	db	204
   170  000855  3D                 	db	61
   171  000856  D7                 	db	215
   172  000857  23                 	db	35
   173  000858  3C                 	db	60
   174  000859  12                 	db	18
   175  00085A  83                 	db	131
   176  00085B  3A                 	db	58
   177  00085C  B7                 	db	183
   178  00085D  D1                 	db	209
   179  00085E  38                 	db	56
   180  00085F  C6                 	db	198
   181  000860  27                 	db	39
   182  000861  37                 	db	55
   183  000862  38                 	db	56
   184  000863  86                 	db	134
   185  000864  35                 	db	53
   186  000865  C0                 	db	192
   187  000866  D6                 	db	214
   188  000867  33                 	db	51
   189  000868  CC                 	db	204
   190  000869  2B                 	db	43
   191  00086A  32                 	db	50
   192  00086B  70                 	db	112
   193  00086C  89                 	db	137
   194  00086D  30                 	db	48
   195  00086E  E7                 	db	231
   196  00086F  DB                 	db	219
   197  000870  2E                 	db	46
   198  000871  E5                 	db	229
   199  000872  3C                 	db	60
   200  000873  1E                 	db	30
   201  000874  42                 	db	66
   202  000875  A2                 	db	162
   203  000876  0D                 	db	13
   204  000877                     __end_of__npowers_:
   205                           	opt stack 0
   206  000877                     sin@coeff_a:
   207                           	opt stack 0
   208  000877  F4                 	db	244
   209  000878  4A                 	db	74
   210  000879  48                 	db	72
   211  00087A  95                 	db	149
   212  00087B  95                 	db	149
   213  00087C  C7                 	db	199
   214  00087D  C1                 	db	193
   215  00087E  DC                 	db	220
   216  00087F  45                 	db	69
   217  000880  DC                 	db	220
   218  000881  6D                 	db	109
   219  000882  C3                 	db	195
   220  000883  B3                 	db	179
   221  000884  33                 	db	51
   222  000885  40                 	db	64
   223  000886                     __end_ofsin@coeff_a:
   224                           	opt stack 0
   225  000886                     sin@coeff_b:
   226                           	opt stack 0
   227  000886  34                 	db	52
   228  000887  01                 	db	1
   229  000888  48                 	db	72
   230  000889  9D                 	db	157
   231  00088A  B0                 	db	176
   232  00088B  45                 	db	69
   233  00088C  00                 	db	0
   234  00088D  DA                 	db	218
   235  00088E  42                 	db	66
   236  00088F  00                 	db	0
   237  000890  80                 	db	128
   238  000891  3F                 	db	63
   239  000892                     __end_ofsin@coeff_b:
   240                           	opt stack 0
   241  0000                     _CCPR1	set	4030
   242  0000                     _PORTBbits	set	3969
   243  0000                     _TRISBbits	set	3987
   244  0000                     _TRISAbits	set	3986
   245  0000                     _PIR1bits	set	3998
   246  0000                     _T1CONbits	set	4045
   247  0000                     _INTCONbits	set	4082
   248  0000                     _PORTDbits	set	3971
   249  0000                     _TRISDbits	set	3989
   250  0000                     _CCP1CONbits	set	4029
   251  0000                     _ADRESL	set	4035
   252  0000                     _ADRESH	set	4036
   253  0000                     _ADCON2bits	set	4032
   254  0000                     _ADCON1	set	4033
   255  0000                     _ADCON0bits	set	4034
   256  0000                     _CCP1IF	set	31986
   257  000892                     STR_2:
   258  000892  63                 	db	99	;'c'
   259  000893  61                 	db	97	;'a'
   260  000894  72                 	db	114	;'r'
   261  000895  67                 	db	103	;'g'
   262  000896  61                 	db	97	;'a'
   263  000897  6E                 	db	110	;'n'
   264  000898  64                 	db	100	;'d'
   265  000899  6F                 	db	111	;'o'
   266  00089A  20                 	db	32
   267  00089B  25                 	db	37
   268  00089C  30                 	db	48	;'0'
   269  00089D  2E                 	db	46
   270  00089E  32                 	db	50	;'2'
   271  00089F  66                 	db	102	;'f'
   272  0008A0  00                 	db	0
   273  0008A1                     STR_1:
   274  0008A1  63                 	db	99	;'c'
   275  0008A2  61                 	db	97	;'a'
   276  0008A3  72                 	db	114	;'r'
   277  0008A4  67                 	db	103	;'g'
   278  0008A5  61                 	db	97	;'a'
   279  0008A6  6E                 	db	110	;'n'
   280  0008A7  64                 	db	100	;'d'
   281  0008A8  6F                 	db	111	;'o'
   282  0008A9  20                 	db	32
   283  0008AA  25                 	db	37
   284  0008AB  33                 	db	51	;'3'
   285  0008AC  64                 	db	100	;'d'
   286  0008AD  00                 	db	0
   287  0008AE                     STR_7:
   288  0008AE  25                 	db	37
   289  0008AF  30                 	db	48	;'0'
   290  0008B0  2E                 	db	46
   291  0008B1  33                 	db	51	;'3'
   292  0008B2  66                 	db	102	;'f'
   293  0008B3  20                 	db	32
   294  0008B4  56                 	db	86	;'V'
   295  0008B5  41                 	db	65	;'A'
   296  0008B6  00                 	db	0
   297  0008B7                     STR_5:
   298  0008B7  70                 	db	112	;'p'
   299  0008B8  46                 	db	70	;'F'
   300  0008B9  3D                 	db	61	;'='
   301  0008BA  25                 	db	37
   302  0008BB  30                 	db	48	;'0'
   303  0008BC  2E                 	db	46
   304  0008BD  33                 	db	51	;'3'
   305  0008BE  66                 	db	102	;'f'
   306  0008BF  00                 	db	0
   307  0008C0                     STR_4:
   308  0008C0  63                 	db	99	;'c'
   309  0008C1  61                 	db	97	;'a'
   310  0008C2  72                 	db	114	;'r'
   311  0008C3  67                 	db	103	;'g'
   312  0008C4  61                 	db	97	;'a'
   313  0008C5  6E                 	db	110	;'n'
   314  0008C6  64                 	db	100	;'d'
   315  0008C7  70                 	db	112	;'p'
   316  0008C8  00                 	db	0
   317  0008C9                     STR_3:
   318  0008C9  25                 	db	37
   319  0008CA  30                 	db	48	;'0'
   320  0008CB  2E                 	db	46
   321  0008CC  32                 	db	50	;'2'
   322  0008CD  66                 	db	102	;'f'
   323  0008CE  20                 	db	32
   324  0008CF  57                 	db	87	;'W'
   325  0008D0  00                 	db	0
   326  0000                     
   327                           ; #config settings
   328  0008D1  00                 	db	0	; dummy byte at the end
   329  0000                     
   330                           	psect	cinit
   331  0039F6                     __pcinit:
   332                           	opt stack 0
   333  0039F6                     start_initialization:
   334                           	opt stack 0
   335  0039F6                     __initialization:
   336                           	opt stack 0
   337                           
   338                           ; Clear objects allocated to BANK1 (40 bytes)
   339  0039F6  EE01  F0D6         	lfsr	0,__pbssBANK1
   340  0039FA  0E28               	movlw	40
   341  0039FC                     clear_0:
   342  0039FC  6AEE               	clrf	postinc0,c
   343  0039FE  06E8               	decf	wreg,f,c
   344  003A00  E1FD               	bnz	clear_0
   345                           
   346                           ; Clear objects allocated to BANK0 (2 bytes)
   347  003A02  0100               	movlb	0
   348  003A04  6BDA               	clrf	(__pbssBANK0+1)& (0+255),b
   349  003A06  6BD9               	clrf	__pbssBANK0& (0+255),b
   350                           
   351                           ; Clear objects allocated to COMRAM (25 bytes)
   352  003A08  EE00  F03C         	lfsr	0,__pbssCOMRAM
   353  003A0C  0E19               	movlw	25
   354  003A0E                     clear_1:
   355  003A0E  6AEE               	clrf	postinc0,c
   356  003A10  06E8               	decf	wreg,f,c
   357  003A12  E1FD               	bnz	clear_1
   358  003A14                     end_of_initialization:
   359                           	opt stack 0
   360  003A14                     __end_of__initialization:
   361                           	opt stack 0
   362  003A14  9055               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   363  003A16  9255               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   364  003A18  0E00               	movlw	low (__Lmediumconst shr (0+16))
   365  003A1A  6EF8               	movwf	tblptru,c
   366  003A1C  0100               	movlb	0
   367  003A1E  EFA6  F009         	goto	_main	;jump to C main() function
   368                           tblptru	equ	0xFF8
   369                           postinc0	equ	0xFEE
   370                           wreg	equ	0xFE8
   371                           
   372                           	psect	bssCOMRAM
   373  00003C                     __pbssCOMRAM:
   374                           	opt stack 0
   375  00003C                     _buffer1:
   376                           	opt stack 0
   377  00003C                     	ds	20
   378  000050                     _voltaje:
   379                           	opt stack 0
   380  000050                     	ds	3
   381  000053                     _adc1:
   382                           	opt stack 0
   383  000053                     	ds	2
   384                           tblptru	equ	0xFF8
   385                           postinc0	equ	0xFEE
   386                           wreg	equ	0xFE8
   387                           
   388                           	psect	bssBANK0
   389  0000D9                     __pbssBANK0:
   390                           	opt stack 0
   391  0000D9                     _errno:
   392                           	opt stack 0
   393  0000D9                     	ds	2
   394                           tblptru	equ	0xFF8
   395                           postinc0	equ	0xFEE
   396                           wreg	equ	0xFE8
   397                           
   398                           	psect	bssBANK1
   399  0001D6                     __pbssBANK1:
   400                           	opt stack 0
   401  0001D6                     _buffer3:
   402                           	opt stack 0
   403  0001D6                     	ds	20
   404  0001EA                     _buffer2:
   405                           	opt stack 0
   406  0001EA                     	ds	20
   407                           tblptru	equ	0xFF8
   408                           postinc0	equ	0xFEE
   409                           wreg	equ	0xFE8
   410                           
   411                           	psect	cstackBANK1
   412  000100                     __pcstackBANK1:
   413                           	opt stack 0
   414  000100                     main@FPprom:
   415                           	opt stack 0
   416                           
   417                           ; 153 bytes @ 0x0
   418  000100                     	ds	153
   419  000199                     main@numTicks:
   420                           	opt stack 0
   421                           
   422                           ; 2 bytes @ 0x99
   423  000199                     	ds	2
   424  00019B                     main@buffer1:
   425                           	opt stack 0
   426                           
   427                           ; 16 bytes @ 0x9B
   428  00019B                     	ds	16
   429  0001AB                     main@Irms:
   430                           	opt stack 0
   431                           
   432                           ; 3 bytes @ 0xAB
   433  0001AB                     	ds	3
   434  0001AE                     main@FactorPotencia:
   435                           	opt stack 0
   436                           
   437                           ; 3 bytes @ 0xAE
   438  0001AE                     	ds	3
   439  0001B1                     main@factorPotenciaNum:
   440                           	opt stack 0
   441                           
   442                           ; 3 bytes @ 0xB1
   443  0001B1                     	ds	3
   444  0001B4                     main@Voltage:
   445                           	opt stack 0
   446                           
   447                           ; 3 bytes @ 0xB4
   448  0001B4                     	ds	3
   449  0001B7                     main@potenciaAparente:
   450                           	opt stack 0
   451                           
   452                           ; 3 bytes @ 0xB7
   453  0001B7                     	ds	3
   454  0001BA                     main@delay:
   455                           	opt stack 0
   456                           
   457                           ; 4 bytes @ 0xBA
   458  0001BA                     	ds	4
   459  0001BE                     main@sumIns:
   460                           	opt stack 0
   461                           
   462                           ; 3 bytes @ 0xBE
   463  0001BE                     	ds	3
   464  0001C1                     main@PotenciaReal:
   465                           	opt stack 0
   466                           
   467                           ; 3 bytes @ 0xC1
   468  0001C1                     	ds	3
   469  0001C4                     main@fppromtotal:
   470                           	opt stack 0
   471                           
   472                           ; 3 bytes @ 0xC4
   473  0001C4                     	ds	3
   474  0001C7                     _main$1426:
   475                           	opt stack 0
   476                           
   477                           ; 3 bytes @ 0xC7
   478  0001C7                     	ds	3
   479  0001CA                     main@numCiclosMuestro:
   480                           	opt stack 0
   481                           
   482                           ; 2 bytes @ 0xCA
   483  0001CA                     	ds	2
   484  0001CC                     main@loop:
   485                           	opt stack 0
   486                           
   487                           ; 1 bytes @ 0xCC
   488  0001CC                     	ds	1
   489  0001CD                     main@calculoFP:
   490                           	opt stack 0
   491                           
   492                           ; 1 bytes @ 0xCD
   493  0001CD                     	ds	1
   494  0001CE                     main@fppromtotal2:
   495                           	opt stack 0
   496                           
   497                           ; 3 bytes @ 0xCE
   498  0001CE                     	ds	3
   499  0001D1                     main@Amps:
   500                           	opt stack 0
   501                           
   502                           ; 3 bytes @ 0xD1
   503  0001D1                     	ds	3
   504  0001D4                     main@i:
   505                           	opt stack 0
   506                           
   507                           ; 2 bytes @ 0xD4
   508  0001D4                     	ds	2
   509                           tblptru	equ	0xFF8
   510                           postinc0	equ	0xFEE
   511                           wreg	equ	0xFE8
   512                           
   513                           	psect	cstackBANK0
   514  000060                     __pcstackBANK0:
   515                           	opt stack 0
   516  000060                     ??_Lcd_Cmd:
   517  000060                     ??_Lcd_Chr_CP:
   518  000060                     ??_isdigit:
   519  000060                     ?___awmod:
   520                           	opt stack 0
   521  000060                     ?___ftpack:
   522                           	opt stack 0
   523  000060                     ?___ftneg:
   524                           	opt stack 0
   525  000060                     ?__tdiv_to_l_:
   526                           	opt stack 0
   527  000060                     ?__div_to_l_:
   528                           	opt stack 0
   529  000060                     ?___lldiv:
   530                           	opt stack 0
   531  000060                     ___awmod@dividend:
   532                           	opt stack 0
   533  000060                     __div_to_l_@f1:
   534                           	opt stack 0
   535  000060                     ___ftpack@arg:
   536                           	opt stack 0
   537  000060                     __tdiv_to_l_@f1:
   538                           	opt stack 0
   539  000060                     ___ftge@ff1:
   540                           	opt stack 0
   541  000060                     ___ftneg@f1:
   542                           	opt stack 0
   543  000060                     frexp@value:
   544                           	opt stack 0
   545  000060                     ___lldiv@dividend:
   546                           	opt stack 0
   547                           
   548                           ; 4 bytes @ 0x0
   549  000060                     	ds	1
   550  000061                     _isdigit$1015:
   551                           	opt stack 0
   552                           
   553                           ; 1 bytes @ 0x1
   554  000061                     	ds	1
   555  000062                     Lcd_Chr_CP@data:
   556                           	opt stack 0
   557  000062                     Lcd_Cmd@data:
   558                           	opt stack 0
   559  000062                     isdigit@c:
   560                           	opt stack 0
   561  000062                     ___awmod@divisor:
   562                           	opt stack 0
   563                           
   564                           ; 2 bytes @ 0x2
   565  000062                     	ds	1
   566  000063                     ??_Lcd_Init:
   567  000063                     Lcd_Out2@x:
   568                           	opt stack 0
   569  000063                     ___ftpack@exp:
   570                           	opt stack 0
   571  000063                     frexp@eptr:
   572                           	opt stack 0
   573  000063                     __div_to_l_@f2:
   574                           	opt stack 0
   575  000063                     __tdiv_to_l_@f2:
   576                           	opt stack 0
   577  000063                     ___ftge@ff2:
   578                           	opt stack 0
   579                           
   580                           ; 3 bytes @ 0x3
   581  000063                     	ds	1
   582  000064                     Lcd_Init@data:
   583                           	opt stack 0
   584  000064                     ___awmod@counter:
   585                           	opt stack 0
   586  000064                     ___ftpack@sign:
   587                           	opt stack 0
   588  000064                     Lcd_Out2@buffer:
   589                           	opt stack 0
   590  000064                     ___lldiv@divisor:
   591                           	opt stack 0
   592                           
   593                           ; 4 bytes @ 0x4
   594  000064                     	ds	1
   595  000065                     ??___ftpack:
   596  000065                     ??_frexp:
   597  000065                     ___awmod@sign:
   598                           	opt stack 0
   599                           
   600                           ; 1 bytes @ 0x5
   601  000065                     	ds	1
   602  000066                     ??__tdiv_to_l_:
   603  000066                     ??___ftge:
   604  000066                     ?___awdiv:
   605                           	opt stack 0
   606  000066                     Lcd_Out2@y:
   607                           	opt stack 0
   608  000066                     ___awdiv@dividend:
   609                           	opt stack 0
   610  000066                     __div_to_l_@quot:
   611                           	opt stack 0
   612                           
   613                           ; 4 bytes @ 0x6
   614  000066                     	ds	1
   615  000067                     Lcd_Out2@data:
   616                           	opt stack 0
   617                           
   618                           ; 1 bytes @ 0x7
   619  000067                     	ds	1
   620  000068                     ?___lltoft:
   621                           	opt stack 0
   622  000068                     ?___lwtoft:
   623                           	opt stack 0
   624  000068                     ___awdiv@divisor:
   625                           	opt stack 0
   626  000068                     ___lwtoft@c:
   627                           	opt stack 0
   628  000068                     ___lldiv@quotient:
   629                           	opt stack 0
   630  000068                     ___lltoft@c:
   631                           	opt stack 0
   632                           
   633                           ; 4 bytes @ 0x8
   634  000068                     	ds	1
   635  000069                     __tdiv_to_l_@quot:
   636                           	opt stack 0
   637                           
   638                           ; 4 bytes @ 0x9
   639  000069                     	ds	1
   640  00006A                     ___awdiv@counter:
   641                           	opt stack 0
   642  00006A                     __div_to_l_@cntr:
   643                           	opt stack 0
   644                           
   645                           ; 1 bytes @ 0xA
   646  00006A                     	ds	1
   647  00006B                     ___awdiv@sign:
   648                           	opt stack 0
   649  00006B                     __div_to_l_@exp1:
   650                           	opt stack 0
   651                           
   652                           ; 1 bytes @ 0xB
   653  00006B                     	ds	1
   654  00006C                     ??___lltoft:
   655  00006C                     ___lldiv@counter:
   656                           	opt stack 0
   657  00006C                     ___awdiv@quotient:
   658                           	opt stack 0
   659                           
   660                           ; 2 bytes @ 0xC
   661  00006C                     	ds	1
   662  00006D                     ?___llmod:
   663                           	opt stack 0
   664  00006D                     __tdiv_to_l_@cntr:
   665                           	opt stack 0
   666  00006D                     ___llmod@dividend:
   667                           	opt stack 0
   668                           
   669                           ; 4 bytes @ 0xD
   670  00006D                     	ds	1
   671  00006E                     ?___wmul:
   672                           	opt stack 0
   673  00006E                     __tdiv_to_l_@exp1:
   674                           	opt stack 0
   675  00006E                     ___wmul@multiplier:
   676                           	opt stack 0
   677                           
   678                           ; 2 bytes @ 0xE
   679  00006E                     	ds	2
   680  000070                     ___lltoft@exp:
   681                           	opt stack 0
   682  000070                     ___wmul@multiplicand:
   683                           	opt stack 0
   684                           
   685                           ; 2 bytes @ 0x10
   686  000070                     	ds	1
   687  000071                     ___llmod@divisor:
   688                           	opt stack 0
   689                           
   690                           ; 4 bytes @ 0x11
   691  000071                     	ds	1
   692  000072                     ___wmul@product:
   693                           	opt stack 0
   694                           
   695                           ; 2 bytes @ 0x12
   696  000072                     	ds	2
   697  000074                     ?___ftmul:
   698                           	opt stack 0
   699  000074                     ___ftmul@f1:
   700                           	opt stack 0
   701                           
   702                           ; 3 bytes @ 0x14
   703  000074                     	ds	1
   704  000075                     ___llmod@counter:
   705                           	opt stack 0
   706                           
   707                           ; 1 bytes @ 0x15
   708  000075                     	ds	2
   709  000077                     ___ftmul@f2:
   710                           	opt stack 0
   711                           
   712                           ; 3 bytes @ 0x17
   713  000077                     	ds	3
   714  00007A                     ??___ftmul:
   715                           
   716                           ; 1 bytes @ 0x1A
   717  00007A                     	ds	3
   718  00007D                     ___ftmul@exp:
   719                           	opt stack 0
   720                           
   721                           ; 1 bytes @ 0x1D
   722  00007D                     	ds	1
   723  00007E                     ___ftmul@f3_as_product:
   724                           	opt stack 0
   725                           
   726                           ; 3 bytes @ 0x1E
   727  00007E                     	ds	3
   728  000081                     ___ftmul@cntr:
   729                           	opt stack 0
   730                           
   731                           ; 1 bytes @ 0x21
   732  000081                     	ds	1
   733  000082                     ___ftmul@sign:
   734                           	opt stack 0
   735                           
   736                           ; 1 bytes @ 0x22
   737  000082                     	ds	1
   738  000083                     ?_fround:
   739                           	opt stack 0
   740  000083                     ?_scale:
   741                           	opt stack 0
   742                           
   743                           ; 3 bytes @ 0x23
   744  000083                     	ds	3
   745  000086                     _fround$1428:
   746                           	opt stack 0
   747  000086                     _scale$1429:
   748                           	opt stack 0
   749                           
   750                           ; 3 bytes @ 0x26
   751  000086                     	ds	3
   752  000089                     scale@scl:
   753                           	opt stack 0
   754  000089                     _fround$1427:
   755                           	opt stack 0
   756                           
   757                           ; 3 bytes @ 0x29
   758  000089                     	ds	1
   759  00008A                     ?___fttol:
   760                           	opt stack 0
   761  00008A                     ___fttol@f1:
   762                           	opt stack 0
   763                           
   764                           ; 3 bytes @ 0x2A
   765  00008A                     	ds	2
   766  00008C                     fround@prec:
   767                           	opt stack 0
   768                           
   769                           ; 1 bytes @ 0x2C
   770  00008C                     	ds	1
   771  00008D                     ?___ftadd:
   772                           	opt stack 0
   773  00008D                     ___ftadd@f1:
   774                           	opt stack 0
   775                           
   776                           ; 3 bytes @ 0x2D
   777  00008D                     	ds	1
   778  00008E                     ??___fttol:
   779                           
   780                           ; 1 bytes @ 0x2E
   781  00008E                     	ds	2
   782  000090                     ___ftadd@f2:
   783                           	opt stack 0
   784                           
   785                           ; 3 bytes @ 0x30
   786  000090                     	ds	3
   787  000093                     ??___ftadd:
   788  000093                     ___fttol@sign1:
   789                           	opt stack 0
   790                           
   791                           ; 1 bytes @ 0x33
   792  000093                     	ds	1
   793  000094                     ___fttol@lval:
   794                           	opt stack 0
   795                           
   796                           ; 4 bytes @ 0x34
   797  000094                     	ds	2
   798  000096                     ___ftadd@sign:
   799                           	opt stack 0
   800                           
   801                           ; 1 bytes @ 0x36
   802  000096                     	ds	1
   803  000097                     ___ftadd@exp2:
   804                           	opt stack 0
   805                           
   806                           ; 1 bytes @ 0x37
   807  000097                     	ds	1
   808  000098                     ___ftadd@exp1:
   809                           	opt stack 0
   810  000098                     ___fttol@exp1:
   811                           	opt stack 0
   812                           
   813                           ; 1 bytes @ 0x38
   814  000098                     	ds	1
   815  000099                     ?_eval_poly:
   816                           	opt stack 0
   817  000099                     ?___altoft:
   818                           	opt stack 0
   819  000099                     eval_poly@x:
   820                           	opt stack 0
   821  000099                     ___altoft@c:
   822                           	opt stack 0
   823                           
   824                           ; 4 bytes @ 0x39
   825  000099                     	ds	3
   826  00009C                     eval_poly@d:
   827                           	opt stack 0
   828                           
   829                           ; 2 bytes @ 0x3C
   830  00009C                     	ds	1
   831  00009D                     ??___altoft:
   832                           
   833                           ; 1 bytes @ 0x3D
   834  00009D                     	ds	1
   835  00009E                     eval_poly@n:
   836                           	opt stack 0
   837                           
   838                           ; 2 bytes @ 0x3E
   839  00009E                     	ds	2
   840  0000A0                     ??_eval_poly:
   841                           
   842                           ; 1 bytes @ 0x40
   843  0000A0                     	ds	1
   844  0000A1                     ___altoft@exp:
   845                           	opt stack 0
   846                           
   847                           ; 1 bytes @ 0x41
   848  0000A1                     	ds	1
   849  0000A2                     ___altoft@sign:
   850                           	opt stack 0
   851  0000A2                     eval_poly@res:
   852                           	opt stack 0
   853                           
   854                           ; 3 bytes @ 0x42
   855  0000A2                     	ds	1
   856  0000A3                     ?_floor:
   857                           	opt stack 0
   858  0000A3                     floor@x:
   859                           	opt stack 0
   860                           
   861                           ; 3 bytes @ 0x43
   862  0000A3                     	ds	3
   863  0000A6                     floor@i:
   864                           	opt stack 0
   865                           
   866                           ; 3 bytes @ 0x46
   867  0000A6                     	ds	3
   868  0000A9                     floor@expon:
   869                           	opt stack 0
   870                           
   871                           ; 2 bytes @ 0x49
   872  0000A9                     	ds	2
   873  0000AB                     ?___ftsub:
   874                           	opt stack 0
   875  0000AB                     ___ftsub@f1:
   876                           	opt stack 0
   877                           
   878                           ; 3 bytes @ 0x4B
   879  0000AB                     	ds	3
   880  0000AE                     ___ftsub@f2:
   881                           	opt stack 0
   882                           
   883                           ; 3 bytes @ 0x4E
   884  0000AE                     	ds	3
   885  0000B1                     ?_sprintf:
   886                           	opt stack 0
   887  0000B1                     ?___ftdiv:
   888                           	opt stack 0
   889  0000B1                     sprintf@sp:
   890                           	opt stack 0
   891  0000B1                     ___ftdiv@f1:
   892                           	opt stack 0
   893                           
   894                           ; 3 bytes @ 0x51
   895  0000B1                     	ds	2
   896  0000B3                     sprintf@f:
   897                           	opt stack 0
   898                           
   899                           ; 2 bytes @ 0x53
   900  0000B3                     	ds	1
   901  0000B4                     ___ftdiv@f2:
   902                           	opt stack 0
   903                           
   904                           ; 3 bytes @ 0x54
   905  0000B4                     	ds	3
   906  0000B7                     ??___ftdiv:
   907                           
   908                           ; 1 bytes @ 0x57
   909  0000B7                     	ds	1
   910  0000B8                     ??_sprintf:
   911                           
   912                           ; 1 bytes @ 0x58
   913  0000B8                     	ds	2
   914  0000BA                     ___ftdiv@cntr:
   915                           	opt stack 0
   916                           
   917                           ; 1 bytes @ 0x5A
   918  0000BA                     	ds	1
   919  0000BB                     ___ftdiv@f3:
   920                           	opt stack 0
   921                           
   922                           ; 3 bytes @ 0x5B
   923  0000BB                     	ds	3
   924  0000BE                     ___ftdiv@exp:
   925                           	opt stack 0
   926  0000BE                     _sprintf$1430:
   927                           	opt stack 0
   928                           
   929                           ; 3 bytes @ 0x5E
   930  0000BE                     	ds	1
   931  0000BF                     ___ftdiv@sign:
   932                           	opt stack 0
   933                           
   934                           ; 1 bytes @ 0x5F
   935  0000BF                     	ds	1
   936  0000C0                     ?_sqrt:
   937                           	opt stack 0
   938  0000C0                     ?_sin:
   939                           	opt stack 0
   940  0000C0                     sin@f:
   941                           	opt stack 0
   942  0000C0                     sqrt@a:
   943                           	opt stack 0
   944                           
   945                           ; 3 bytes @ 0x60
   946  0000C0                     	ds	1
   947  0000C1                     sprintf@ap:
   948                           	opt stack 0
   949                           
   950                           ; 2 bytes @ 0x61
   951  0000C1                     	ds	2
   952  0000C3                     ??_sqrt:
   953  0000C3                     sin@y:
   954                           	opt stack 0
   955  0000C3                     sprintf@tmpval:
   956                           	opt stack 0
   957                           
   958                           ; 4 bytes @ 0x63
   959  0000C3                     	ds	3
   960  0000C6                     sqrt@og:
   961                           	opt stack 0
   962  0000C6                     _sin$1432:
   963                           	opt stack 0
   964                           
   965                           ; 3 bytes @ 0x66
   966  0000C6                     	ds	1
   967  0000C7                     sprintf@val:
   968                           	opt stack 0
   969                           
   970                           ; 4 bytes @ 0x67
   971  0000C7                     	ds	2
   972  0000C9                     sin@x2:
   973                           	opt stack 0
   974  0000C9                     sqrt@z:
   975                           	opt stack 0
   976                           
   977                           ; 3 bytes @ 0x69
   978  0000C9                     	ds	2
   979  0000CB                     sprintf@exp:
   980                           	opt stack 0
   981                           
   982                           ; 2 bytes @ 0x6B
   983  0000CB                     	ds	1
   984  0000CC                     sin@sgn:
   985                           	opt stack 0
   986  0000CC                     sqrt@i:
   987                           	opt stack 0
   988                           
   989                           ; 1 bytes @ 0x6C
   990  0000CC                     	ds	1
   991  0000CD                     ?_cos:
   992                           	opt stack 0
   993  0000CD                     sprintf@flag:
   994                           	opt stack 0
   995  0000CD                     cos@f:
   996                           	opt stack 0
   997  0000CD                     sqrt@q:
   998                           	opt stack 0
   999                           
  1000                           ; 3 bytes @ 0x6D
  1001  0000CD                     	ds	2
  1002  0000CF                     sprintf@width:
  1003                           	opt stack 0
  1004                           
  1005                           ; 2 bytes @ 0x6F
  1006  0000CF                     	ds	1
  1007  0000D0                     sqrt@x:
  1008                           	opt stack 0
  1009  0000D0                     _cos$1431:
  1010                           	opt stack 0
  1011                           
  1012                           ; 3 bytes @ 0x70
  1013  0000D0                     	ds	1
  1014  0000D1                     sprintf@fval:
  1015                           	opt stack 0
  1016                           
  1017                           ; 3 bytes @ 0x71
  1018  0000D1                     	ds	3
  1019  0000D4                     sprintf@prec:
  1020                           	opt stack 0
  1021                           
  1022                           ; 2 bytes @ 0x74
  1023  0000D4                     	ds	2
  1024  0000D6                     sprintf@c:
  1025                           	opt stack 0
  1026                           
  1027                           ; 1 bytes @ 0x76
  1028  0000D6                     	ds	1
  1029  0000D7                     ??_main:
  1030                           
  1031                           ; 1 bytes @ 0x77
  1032  0000D7                     	ds	2
  1033                           tblptru	equ	0xFF8
  1034                           postinc0	equ	0xFEE
  1035                           wreg	equ	0xFE8
  1036                           
  1037                           	psect	cstackCOMRAM
  1038  000001                     __pcstackCOMRAM:
  1039                           	opt stack 0
  1040  000001                     ?i2___ftpack:
  1041                           	opt stack 0
  1042  000001                     i2___ftpack@arg:
  1043                           	opt stack 0
  1044                           
  1045                           ; 3 bytes @ 0x0
  1046  000001                     	ds	3
  1047  000004                     i2___ftpack@exp:
  1048                           	opt stack 0
  1049                           
  1050                           ; 1 bytes @ 0x3
  1051  000004                     	ds	1
  1052  000005                     i2___ftpack@sign:
  1053                           	opt stack 0
  1054                           
  1055                           ; 1 bytes @ 0x4
  1056  000005                     	ds	1
  1057  000006                     ??i2___ftpack:
  1058                           
  1059                           ; 1 bytes @ 0x5
  1060  000006                     	ds	3
  1061  000009                     ?i2___lwtoft:
  1062                           	opt stack 0
  1063  000009                     i2___lwtoft@c:
  1064                           	opt stack 0
  1065                           
  1066                           ; 2 bytes @ 0x8
  1067  000009                     	ds	3
  1068  00000C                     ?i2___ftmul:
  1069                           	opt stack 0
  1070  00000C                     i2___ftmul@f1:
  1071                           	opt stack 0
  1072                           
  1073                           ; 3 bytes @ 0xB
  1074  00000C                     	ds	3
  1075  00000F                     i2___ftmul@f2:
  1076                           	opt stack 0
  1077                           
  1078                           ; 3 bytes @ 0xE
  1079  00000F                     	ds	3
  1080  000012                     ??i2___ftmul:
  1081                           
  1082                           ; 1 bytes @ 0x11
  1083  000012                     	ds	3
  1084  000015                     i2___ftmul@exp:
  1085                           	opt stack 0
  1086                           
  1087                           ; 1 bytes @ 0x14
  1088  000015                     	ds	1
  1089  000016                     i2___ftmul@f3_as_product:
  1090                           	opt stack 0
  1091                           
  1092                           ; 3 bytes @ 0x15
  1093  000016                     	ds	3
  1094  000019                     i2___ftmul@cntr:
  1095                           	opt stack 0
  1096                           
  1097                           ; 1 bytes @ 0x18
  1098  000019                     	ds	1
  1099  00001A                     i2___ftmul@sign:
  1100                           	opt stack 0
  1101                           
  1102                           ; 1 bytes @ 0x19
  1103  00001A                     	ds	1
  1104  00001B                     ?i2___ftdiv:
  1105                           	opt stack 0
  1106  00001B                     i2___ftdiv@f1:
  1107                           	opt stack 0
  1108                           
  1109                           ; 3 bytes @ 0x1A
  1110  00001B                     	ds	3
  1111  00001E                     i2___ftdiv@f2:
  1112                           	opt stack 0
  1113                           
  1114                           ; 3 bytes @ 0x1D
  1115  00001E                     	ds	3
  1116  000021                     ??i2___ftdiv:
  1117                           
  1118                           ; 1 bytes @ 0x20
  1119  000021                     	ds	3
  1120  000024                     i2___ftdiv@cntr:
  1121                           	opt stack 0
  1122                           
  1123                           ; 1 bytes @ 0x23
  1124  000024                     	ds	1
  1125  000025                     i2___ftdiv@f3:
  1126                           	opt stack 0
  1127                           
  1128                           ; 3 bytes @ 0x24
  1129  000025                     	ds	3
  1130  000028                     i2___ftdiv@exp:
  1131                           	opt stack 0
  1132                           
  1133                           ; 1 bytes @ 0x27
  1134  000028                     	ds	1
  1135  000029                     i2___ftdiv@sign:
  1136                           	opt stack 0
  1137                           
  1138                           ; 1 bytes @ 0x28
  1139  000029                     	ds	1
  1140  00002A                     ??_comparar:
  1141                           
  1142                           ; 1 bytes @ 0x29
  1143  00002A                     	ds	18
  1144                           tblptru	equ	0xFF8
  1145                           postinc0	equ	0xFEE
  1146                           wreg	equ	0xFE8
  1147                           
  1148 ;;
  1149 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1150 ;;
  1151 ;; *************** function _main *****************
  1152 ;; Defined at:
  1153 ;;		line 117 in file "main_014_Practice_CCP Comparacion_ADC.c"
  1154 ;; Parameters:    Size  Location     Type
  1155 ;;		None
  1156 ;; Auto vars:     Size  Location     Type
  1157 ;;  i               2  212[BANK1 ] int 
  1158 ;;  Amps            3  209[BANK1 ] float 
  1159 ;;  Voltage         3  180[BANK1 ] float 
  1160 ;;  potenciaApar    3  183[BANK1 ] float 
  1161 ;;  FPprom        153    0[BANK1 ] float [51]
  1162 ;;  buffer1        16  155[BANK1 ] unsigned char [16]
  1163 ;;  delay           4  186[BANK1 ] unsigned long 
  1164 ;;  fppromtotal2    3  206[BANK1 ] float 
  1165 ;;  fppromtotal     3  196[BANK1 ] float 
  1166 ;;  PotenciaReal    3  193[BANK1 ] float 
  1167 ;;  sumIns          3  190[BANK1 ] float 
  1168 ;;  factorPotenc    3  177[BANK1 ] float 
  1169 ;;  FactorPotenc    3  174[BANK1 ] float 
  1170 ;;  Irms            3  171[BANK1 ] float 
  1171 ;;  numCiclosMue    2  202[BANK1 ] unsigned int 
  1172 ;;  numTicks        2  153[BANK1 ] unsigned int 
  1173 ;;  calculoFP       1  205[BANK1 ] unsigned char 
  1174 ;;  loop            1  204[BANK1 ] unsigned char 
  1175 ;; Return value:  Size  Location     Type
  1176 ;;                  1    wreg      void 
  1177 ;; Registers used:
  1178 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1179 ;; Tracked objects:
  1180 ;;		On entry : 0/0
  1181 ;;		On exit  : 0/0
  1182 ;;		Unchanged: 0/0
  1183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1184 ;;      Params:         0       0       0       0       0       0       0       0       0
  1185 ;;      Locals:         0       0     214       0       0       0       0       0       0
  1186 ;;      Temps:          0       2       0       0       0       0       0       0       0
  1187 ;;      Totals:         0       2     214       0       0       0       0       0       0
  1188 ;;Total ram usage:      216 bytes
  1189 ;; Hardware stack levels required when called:    8
  1190 ;; This function calls:
  1191 ;;		_Lcd_Cmd
  1192 ;;		_Lcd_Init
  1193 ;;		_Lcd_Out2
  1194 ;;		___ftadd
  1195 ;;		___ftdiv
  1196 ;;		___ftmul
  1197 ;;		___lltoft
  1198 ;;		___lwtoft
  1199 ;;		___wmul
  1200 ;;		_configstandard
  1201 ;;		_cos
  1202 ;;		_sprintf
  1203 ;;		_sqrt
  1204 ;; This function is called by:
  1205 ;;		Startup code after reset
  1206 ;; This function uses a non-reentrant model
  1207 ;;
  1208                           
  1209                           	psect	text0
  1210  00134C                     __ptext0:
  1211                           	opt stack 0
  1212  00134C                     _main:
  1213                           	opt stack 23
  1214                           
  1215                           ;main_014_Practice_CCP Comparacion_ADC.c: 119: configstandard();
  1216                           
  1217                           ;incstack = 0
  1218  00134C  ECB8  F01C         	call	_configstandard	;wreg free
  1219                           
  1220                           ;main_014_Practice_CCP Comparacion_ADC.c: 121: TRISAbits.RA0 = 1;
  1221  001350  8092               	bsf	3986,0,c	;volatile
  1222                           
  1223                           ;main_014_Practice_CCP Comparacion_ADC.c: 123: TRISBbits.RB0=1;
  1224  001352  8093               	bsf	3987,0,c	;volatile
  1225                           
  1226                           ;main_014_Practice_CCP Comparacion_ADC.c: 124: TRISBbits.RB1=1;
  1227  001354  8293               	bsf	3987,1,c	;volatile
  1228                           
  1229                           ;main_014_Practice_CCP Comparacion_ADC.c: 127: unsigned char buffer1[16];
  1230                           ;main_014_Practice_CCP Comparacion_ADC.c: 130: Lcd_Init();
  1231  001356  ECC3  F012         	call	_Lcd_Init	;wreg free
  1232                           
  1233                           ;main_014_Practice_CCP Comparacion_ADC.c: 131: Lcd_Cmd(1);
  1234  00135A  0E01               	movlw	1
  1235  00135C  EC97  F014         	call	_Lcd_Cmd
  1236                           
  1237                           ;main_014_Practice_CCP Comparacion_ADC.c: 132: Lcd_Cmd(12);
  1238  001360  0E0C               	movlw	12
  1239  001362  EC97  F014         	call	_Lcd_Cmd
  1240                           
  1241                           ;main_014_Practice_CCP Comparacion_ADC.c: 133: _delay((unsigned long)((100)*(48000000/40
      +                          00.0)));
  1242  001366  0E07               	movlw	7
  1243  001368  0100               	movlb	0	; () banked
  1244  00136A  6FD8               	movwf	(??_main+1)& (0+255),b
  1245  00136C  0E17               	movlw	23
  1246  00136E  6FD7               	movwf	??_main& (0+255),b
  1247  001370  0E6A               	movlw	106
  1248  001372                     u4257:
  1249  001372  2EE8               	decfsz	wreg,f,c
  1250  001374  D7FE               	bra	u4257
  1251  001376  2FD7               	decfsz	??_main& (0+255),f,b
  1252  001378  D7FC               	bra	u4257
  1253  00137A  2FD8               	decfsz	(??_main+1)& (0+255),f,b
  1254  00137C  D7FA               	bra	u4257
  1255  00137E  F000               	nop	
  1256                           
  1257                           ;main_014_Practice_CCP Comparacion_ADC.c: 135: ADCON2bits.ADCS=110;
  1258  001380  50C0               	movf	4032,w,c	;volatile
  1259  001382  0BF8               	andlw	-8
  1260  001384  0906               	iorlw	6
  1261  001386  6EC0               	movwf	4032,c	;volatile
  1262                           
  1263                           ;main_014_Practice_CCP Comparacion_ADC.c: 136: ADCON2bits.ACQT=010;
  1264  001388  96C0               	bcf	4032,3,c	;volatile
  1265  00138A  98C0               	bcf	4032,4,c	;volatile
  1266  00138C  9AC0               	bcf	4032,5,c	;volatile
  1267                           
  1268                           ;main_014_Practice_CCP Comparacion_ADC.c: 137: float sumIns=0;
  1269  00138E  0E00               	movlw	0
  1270  001390  0101               	movlb	1	; () banked
  1271  001392  6FBE               	movwf	main@sumIns& (0+255),b
  1272  001394  0E00               	movlw	0
  1273  001396  6FBF               	movwf	(main@sumIns+1)& (0+255),b
  1274  001398  0E00               	movlw	0
  1275  00139A  6FC0               	movwf	(main@sumIns+2)& (0+255),b
  1276                           
  1277                           ; BSR set to: 1
  1278                           ;main_014_Practice_CCP Comparacion_ADC.c: 138: float Irms=0;
  1279  00139C  0E00               	movlw	0
  1280  00139E  6FAB               	movwf	main@Irms& (0+255),b
  1281  0013A0  0E00               	movlw	0
  1282  0013A2  6FAC               	movwf	(main@Irms+1)& (0+255),b
  1283  0013A4  0E00               	movlw	0
  1284  0013A6  6FAD               	movwf	(main@Irms+2)& (0+255),b
  1285                           
  1286                           ; BSR set to: 1
  1287                           ;main_014_Practice_CCP Comparacion_ADC.c: 139: unsigned int numCiclosMuestro=0;
  1288  0013A8  0E00               	movlw	0
  1289  0013AA  6FCB               	movwf	(main@numCiclosMuestro+1)& (0+255),b
  1290  0013AC  0E00               	movlw	0
  1291  0013AE  6FCA               	movwf	main@numCiclosMuestro& (0+255),b
  1292                           
  1293                           ; BSR set to: 1
  1294                           ;main_014_Practice_CCP Comparacion_ADC.c: 140: float PotenciaReal=0;
  1295  0013B0  0E00               	movlw	0
  1296  0013B2  6FC1               	movwf	main@PotenciaReal& (0+255),b
  1297  0013B4  0E00               	movlw	0
  1298  0013B6  6FC2               	movwf	(main@PotenciaReal+1)& (0+255),b
  1299  0013B8  0E00               	movlw	0
  1300  0013BA  6FC3               	movwf	(main@PotenciaReal+2)& (0+255),b
  1301                           
  1302                           ; BSR set to: 1
  1303                           ;main_014_Practice_CCP Comparacion_ADC.c: 141: float FactorPotencia=0;
  1304  0013BC  0E00               	movlw	0
  1305  0013BE  6FAE               	movwf	main@FactorPotencia& (0+255),b
  1306  0013C0  0E00               	movlw	0
  1307  0013C2  6FAF               	movwf	(main@FactorPotencia+1)& (0+255),b
  1308  0013C4  0E00               	movlw	0
  1309  0013C6  6FB0               	movwf	(main@FactorPotencia+2)& (0+255),b
  1310                           
  1311                           ; BSR set to: 1
  1312                           ;main_014_Practice_CCP Comparacion_ADC.c: 142: double factorPotenciaNum=0;
  1313  0013C8  0E00               	movlw	0
  1314  0013CA  6FB1               	movwf	main@factorPotenciaNum& (0+255),b
  1315  0013CC  0E00               	movlw	0
  1316  0013CE  6FB2               	movwf	(main@factorPotenciaNum+1)& (0+255),b
  1317  0013D0  0E00               	movlw	0
  1318  0013D2  6FB3               	movwf	(main@factorPotenciaNum+2)& (0+255),b
  1319                           
  1320                           ; BSR set to: 1
  1321                           ;main_014_Practice_CCP Comparacion_ADC.c: 143: unsigned char calculoFP=0;
  1322  0013D4  0E00               	movlw	0
  1323  0013D6  6FCD               	movwf	main@calculoFP& (0+255),b
  1324                           
  1325                           ; BSR set to: 1
  1326                           ;main_014_Practice_CCP Comparacion_ADC.c: 144: unsigned int numTicks=0;
  1327  0013D8  0E00               	movlw	0
  1328  0013DA  6F9A               	movwf	(main@numTicks+1)& (0+255),b
  1329  0013DC  0E00               	movlw	0
  1330  0013DE  6F99               	movwf	main@numTicks& (0+255),b
  1331                           
  1332                           ; BSR set to: 1
  1333                           ;main_014_Practice_CCP Comparacion_ADC.c: 145: unsigned long long delay=0;
  1334  0013E0  0E00               	movlw	0
  1335  0013E2  6FBA               	movwf	main@delay& (0+255),b
  1336  0013E4  0E00               	movlw	0
  1337  0013E6  6FBB               	movwf	(main@delay+1)& (0+255),b
  1338  0013E8  0E00               	movlw	0
  1339  0013EA  6FBC               	movwf	(main@delay+2)& (0+255),b
  1340  0013EC  0E00               	movlw	0
  1341  0013EE  6FBD               	movwf	(main@delay+3)& (0+255),b
  1342                           
  1343                           ; BSR set to: 1
  1344                           ;main_014_Practice_CCP Comparacion_ADC.c: 146: unsigned char loop=0;
  1345  0013F0  0E00               	movlw	0
  1346  0013F2  6FCC               	movwf	main@loop& (0+255),b
  1347                           
  1348                           ; BSR set to: 1
  1349                           ;main_014_Practice_CCP Comparacion_ADC.c: 147: float FPprom[51];
  1350                           ;main_014_Practice_CCP Comparacion_ADC.c: 148: float fppromtotal=0;
  1351  0013F4  0E00               	movlw	0
  1352  0013F6  6FC4               	movwf	main@fppromtotal& (0+255),b
  1353  0013F8  0E00               	movlw	0
  1354  0013FA  6FC5               	movwf	(main@fppromtotal+1)& (0+255),b
  1355  0013FC  0E00               	movlw	0
  1356  0013FE  6FC6               	movwf	(main@fppromtotal+2)& (0+255),b
  1357                           
  1358                           ; BSR set to: 1
  1359                           ;main_014_Practice_CCP Comparacion_ADC.c: 149: float fppromtotal2=0;
  1360  001400  0E00               	movlw	0
  1361  001402  6FCE               	movwf	main@fppromtotal2& (0+255),b
  1362  001404  0E00               	movlw	0
  1363  001406  6FCF               	movwf	(main@fppromtotal2+1)& (0+255),b
  1364  001408  0E00               	movlw	0
  1365  00140A  6FD0               	movwf	(main@fppromtotal2+2)& (0+255),b
  1366                           
  1367                           ; BSR set to: 1
  1368                           ;main_014_Practice_CCP Comparacion_ADC.c: 153: {
  1369                           ;main_014_Practice_CCP Comparacion_ADC.c: 156: while(numCiclosMuestro<200){
  1370                           
  1371                           ;main_014_Practice_CCP Comparacion_ADC.c: 152: while(1)
  1372  00140C  D0C2               	goto	l116
  1373  00140E                     l117:
  1374                           
  1375                           ; BSR set to: 1
  1376                           ;main_014_Practice_CCP Comparacion_ADC.c: 157: ADCON0bits.GO_DONE = 1;
  1377  00140E  82C2               	bsf	4034,1,c	;volatile
  1378                           
  1379                           ; BSR set to: 1
  1380                           ;main_014_Practice_CCP Comparacion_ADC.c: 158: adc1 = (ADRESH<<8)+ADRESL;
  1381  001410  50C4               	movf	4036,w,c	;volatile
  1382  001412  0100               	movlb	0	; () banked
  1383  001414  6FD8               	movwf	(??_main+1)& (0+255),b
  1384  001416  6BD7               	clrf	??_main& (0+255),b
  1385  001418  50C3               	movf	4035,w,c	;volatile
  1386  00141A  25D7               	addwf	??_main& (0+255),w,b
  1387  00141C  6E53               	movwf	_adc1,c
  1388  00141E  0E00               	movlw	0
  1389  001420  21D8               	addwfc	(??_main+1)& (0+255),w,b
  1390  001422  6E54               	movwf	_adc1+1,c
  1391                           
  1392                           ; BSR set to: 0
  1393                           ;main_014_Practice_CCP Comparacion_ADC.c: 159: float Voltage=0;
  1394  001424  0E00               	movlw	0
  1395  001426  0101               	movlb	1	; () banked
  1396  001428  6FB4               	movwf	main@Voltage& (0+255),b
  1397  00142A  0E00               	movlw	0
  1398  00142C  6FB5               	movwf	(main@Voltage+1)& (0+255),b
  1399  00142E  0E00               	movlw	0
  1400  001430  6FB6               	movwf	(main@Voltage+2)& (0+255),b
  1401                           
  1402                           ; BSR set to: 1
  1403                           ;main_014_Practice_CCP Comparacion_ADC.c: 160: float Amps=0;
  1404  001432  0E00               	movlw	0
  1405  001434  6FD1               	movwf	main@Amps& (0+255),b
  1406  001436  0E00               	movlw	0
  1407  001438  6FD2               	movwf	(main@Amps+1)& (0+255),b
  1408  00143A  0E00               	movlw	0
  1409  00143C  6FD3               	movwf	(main@Amps+2)& (0+255),b
  1410                           
  1411                           ; BSR set to: 1
  1412                           ;main_014_Practice_CCP Comparacion_ADC.c: 161: Voltage=(float)(adc1*5.0/1024.0);
  1413  00143E  0E00               	movlw	0
  1414  001440  0100               	movlb	0	; () banked
  1415  001442  6F77               	movwf	___ftmul@f2& (0+255),b
  1416  001444  0EA0               	movlw	160
  1417  001446  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  1418  001448  0E40               	movlw	64
  1419  00144A  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  1420  00144C  C053  F068         	movff	_adc1,___lwtoft@c
  1421  001450  C054  F069         	movff	_adc1+1,___lwtoft@c+1
  1422  001454  EC38  F01D         	call	___lwtoft	;wreg free
  1423  001458  C068  F074         	movff	?___lwtoft,___ftmul@f1
  1424  00145C  C069  F075         	movff	?___lwtoft+1,___ftmul@f1+1
  1425  001460  C06A  F076         	movff	?___lwtoft+2,___ftmul@f1+2
  1426  001464  ECC3  F016         	call	___ftmul	;wreg free
  1427  001468  C074  F0B1         	movff	?___ftmul,___ftdiv@f1
  1428  00146C  C075  F0B2         	movff	?___ftmul+1,___ftdiv@f1+1
  1429  001470  C076  F0B3         	movff	?___ftmul+2,___ftdiv@f1+2
  1430  001474  0E00               	movlw	0
  1431  001476  0100               	movlb	0	; () banked
  1432  001478  6FB4               	movwf	___ftdiv@f2& (0+255),b
  1433  00147A  0E80               	movlw	128
  1434  00147C  6FB5               	movwf	(___ftdiv@f2+1)& (0+255),b
  1435  00147E  0E44               	movlw	68
  1436  001480  6FB6               	movwf	(___ftdiv@f2+2)& (0+255),b
  1437  001482  ECB8  F017         	call	___ftdiv	;wreg free
  1438  001486  C0B1  F1B4         	movff	?___ftdiv,main@Voltage
  1439  00148A  C0B2  F1B5         	movff	?___ftdiv+1,main@Voltage+1
  1440  00148E  C0B3  F1B6         	movff	?___ftdiv+2,main@Voltage+2
  1441                           
  1442                           ;main_014_Practice_CCP Comparacion_ADC.c: 162: Amps=((Voltage-2.5)/0.185);
  1443  001492  0E00               	movlw	0
  1444  001494  0100               	movlb	0	; () banked
  1445  001496  6F90               	movwf	___ftadd@f2& (0+255),b
  1446  001498  0E20               	movlw	32
  1447  00149A  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
  1448  00149C  0EC0               	movlw	192
  1449  00149E  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
  1450  0014A0  C1B4  F08D         	movff	main@Voltage,___ftadd@f1
  1451  0014A4  C1B5  F08E         	movff	main@Voltage+1,___ftadd@f1+1
  1452  0014A8  C1B6  F08F         	movff	main@Voltage+2,___ftadd@f1+2
  1453  0014AC  EC22  F011         	call	___ftadd	;wreg free
  1454  0014B0  C08D  F0B1         	movff	?___ftadd,___ftdiv@f1
  1455  0014B4  C08E  F0B2         	movff	?___ftadd+1,___ftdiv@f1+1
  1456  0014B8  C08F  F0B3         	movff	?___ftadd+2,___ftdiv@f1+2
  1457  0014BC  0E71               	movlw	113
  1458  0014BE  0100               	movlb	0	; () banked
  1459  0014C0  6FB4               	movwf	___ftdiv@f2& (0+255),b
  1460  0014C2  0E3D               	movlw	61
  1461  0014C4  6FB5               	movwf	(___ftdiv@f2+1)& (0+255),b
  1462  0014C6  0E3E               	movlw	62
  1463  0014C8  6FB6               	movwf	(___ftdiv@f2+2)& (0+255),b
  1464  0014CA  ECB8  F017         	call	___ftdiv	;wreg free
  1465  0014CE  C0B1  F1D1         	movff	?___ftdiv,main@Amps
  1466  0014D2  C0B2  F1D2         	movff	?___ftdiv+1,main@Amps+1
  1467  0014D6  C0B3  F1D3         	movff	?___ftdiv+2,main@Amps+2
  1468                           
  1469                           ;main_014_Practice_CCP Comparacion_ADC.c: 164: sprintf(buffer1,"cargando %3d", numCiclos
      +                          Muestro);
  1470  0014DA  0E9B               	movlw	low main@buffer1
  1471  0014DC  0100               	movlb	0	; () banked
  1472  0014DE  6FB1               	movwf	sprintf@sp& (0+255),b
  1473  0014E0  0E01               	movlw	high main@buffer1
  1474  0014E2  6FB2               	movwf	(sprintf@sp+1)& (0+255),b
  1475  0014E4  0EA1               	movlw	low STR_1
  1476  0014E6  6FB3               	movwf	sprintf@f& (0+255),b
  1477  0014E8  0E08               	movlw	high STR_1
  1478  0014EA  6FB4               	movwf	(sprintf@f+1)& (0+255),b
  1479  0014EC  C1CA  F0B5         	movff	main@numCiclosMuestro,?_sprintf+4
  1480  0014F0  C1CB  F0B6         	movff	main@numCiclosMuestro+1,?_sprintf+5
  1481  0014F4  EC69  F004         	call	_sprintf	;wreg free
  1482                           
  1483                           ;main_014_Practice_CCP Comparacion_ADC.c: 165: sprintf(buffer2,"cargando %0.2f", Amps);
  1484  0014F8  0EEA               	movlw	low _buffer2
  1485  0014FA  0100               	movlb	0	; () banked
  1486  0014FC  6FB1               	movwf	sprintf@sp& (0+255),b
  1487  0014FE  0E01               	movlw	high _buffer2
  1488  001500  6FB2               	movwf	(sprintf@sp+1)& (0+255),b
  1489  001502  0E92               	movlw	low STR_2
  1490  001504  6FB3               	movwf	sprintf@f& (0+255),b
  1491  001506  0E08               	movlw	high STR_2
  1492  001508  6FB4               	movwf	(sprintf@f+1)& (0+255),b
  1493  00150A  C1D1  F0B5         	movff	main@Amps,?_sprintf+4
  1494  00150E  C1D2  F0B6         	movff	main@Amps+1,?_sprintf+5
  1495  001512  C1D3  F0B7         	movff	main@Amps+2,?_sprintf+6
  1496  001516  EC69  F004         	call	_sprintf	;wreg free
  1497                           
  1498                           ;main_014_Practice_CCP Comparacion_ADC.c: 166: Lcd_Out2(1, 0, buffer1);
  1499  00151A  0E00               	movlw	0
  1500  00151C  0100               	movlb	0	; () banked
  1501  00151E  6F63               	movwf	Lcd_Out2@x& (0+255),b
  1502  001520  0E9B               	movlw	low main@buffer1
  1503  001522  6F64               	movwf	Lcd_Out2@buffer& (0+255),b
  1504  001524  0E01               	movlw	high main@buffer1
  1505  001526  6F65               	movwf	(Lcd_Out2@buffer+1)& (0+255),b
  1506  001528  0E01               	movlw	1
  1507  00152A  EC87  F01A         	call	_Lcd_Out2
  1508                           
  1509                           ;main_014_Practice_CCP Comparacion_ADC.c: 167: Lcd_Out2(2, 0, buffer2);
  1510  00152E  0E00               	movlw	0
  1511  001530  0100               	movlb	0	; () banked
  1512  001532  6F63               	movwf	Lcd_Out2@x& (0+255),b
  1513  001534  0EEA               	movlw	low _buffer2
  1514  001536  6F64               	movwf	Lcd_Out2@buffer& (0+255),b
  1515  001538  0E01               	movlw	high _buffer2
  1516  00153A  6F65               	movwf	(Lcd_Out2@buffer+1)& (0+255),b
  1517  00153C  0E02               	movlw	2
  1518  00153E  EC87  F01A         	call	_Lcd_Out2
  1519                           
  1520                           ;main_014_Practice_CCP Comparacion_ADC.c: 169: _delay((unsigned long)((50)*(48000000/400
      +                          0000.0)));
  1521  001542  0EC8               	movlw	200
  1522  001544                     u4267:
  1523  001544  2EE8               	decfsz	wreg,f,c
  1524  001546  D7FE               	bra	u4267
  1525                           
  1526                           ;main_014_Practice_CCP Comparacion_ADC.c: 171: sumIns+=Amps*Amps;
  1527  001548  C1BE  F08D         	movff	main@sumIns,___ftadd@f1
  1528  00154C  C1BF  F08E         	movff	main@sumIns+1,___ftadd@f1+1
  1529  001550  C1C0  F08F         	movff	main@sumIns+2,___ftadd@f1+2
  1530  001554  C1D1  F077         	movff	main@Amps,___ftmul@f2
  1531  001558  C1D2  F078         	movff	main@Amps+1,___ftmul@f2+1
  1532  00155C  C1D3  F079         	movff	main@Amps+2,___ftmul@f2+2
  1533  001560  C1D1  F074         	movff	main@Amps,___ftmul@f1
  1534  001564  C1D2  F075         	movff	main@Amps+1,___ftmul@f1+1
  1535  001568  C1D3  F076         	movff	main@Amps+2,___ftmul@f1+2
  1536  00156C  ECC3  F016         	call	___ftmul	;wreg free
  1537  001570  C074  F090         	movff	?___ftmul,___ftadd@f2
  1538  001574  C075  F091         	movff	?___ftmul+1,___ftadd@f2+1
  1539  001578  C076  F092         	movff	?___ftmul+2,___ftadd@f2+2
  1540  00157C  EC22  F011         	call	___ftadd	;wreg free
  1541  001580  C08D  F1BE         	movff	?___ftadd,main@sumIns
  1542  001584  C08E  F1BF         	movff	?___ftadd+1,main@sumIns+1
  1543  001588  C08F  F1C0         	movff	?___ftadd+2,main@sumIns+2
  1544                           
  1545                           ;main_014_Practice_CCP Comparacion_ADC.c: 172: numCiclosMuestro+=1;
  1546  00158C  0101               	movlb	1	; () banked
  1547  00158E  4BCA               	infsnz	main@numCiclosMuestro& (0+255),f,b
  1548  001590  2BCB               	incf	(main@numCiclosMuestro+1)& (0+255),f,b
  1549  001592                     l116:
  1550                           
  1551                           ; BSR set to: 1
  1552  001592  0101               	movlb	1	; () banked
  1553  001594  51CB               	movf	(main@numCiclosMuestro+1)& (0+255),w,b
  1554  001596  E104               	bnz	l4006
  1555  001598  0EC8               	movlw	200
  1556  00159A  5DCA               	subwf	main@numCiclosMuestro& (0+255),w,b
  1557  00159C  A0D8               	btfss	status,0,c
  1558  00159E  D737               	goto	l117
  1559  0015A0                     l4006:
  1560                           
  1561                           ; BSR set to: 1
  1562                           ;main_014_Practice_CCP Comparacion_ADC.c: 174: }
  1563                           ;main_014_Practice_CCP Comparacion_ADC.c: 176: Irms=sqrt(sumIns/201)/20;
  1564  0015A0  0E00               	movlw	0
  1565  0015A2  0100               	movlb	0	; () banked
  1566  0015A4  6FB4               	movwf	___ftdiv@f2& (0+255),b
  1567  0015A6  0E49               	movlw	73
  1568  0015A8  6FB5               	movwf	(___ftdiv@f2+1)& (0+255),b
  1569  0015AA  0E43               	movlw	67
  1570  0015AC  6FB6               	movwf	(___ftdiv@f2+2)& (0+255),b
  1571  0015AE  C1BE  F0B1         	movff	main@sumIns,___ftdiv@f1
  1572  0015B2  C1BF  F0B2         	movff	main@sumIns+1,___ftdiv@f1+1
  1573  0015B6  C1C0  F0B3         	movff	main@sumIns+2,___ftdiv@f1+2
  1574  0015BA  ECB8  F017         	call	___ftdiv	;wreg free
  1575  0015BE  C0B1  F0C0         	movff	?___ftdiv,sqrt@a
  1576  0015C2  C0B2  F0C1         	movff	?___ftdiv+1,sqrt@a+1
  1577  0015C6  C0B3  F0C2         	movff	?___ftdiv+2,sqrt@a+2
  1578  0015CA  ECF9  F011         	call	_sqrt	;wreg free
  1579  0015CE  C0C0  F1C7         	movff	?_sqrt,_main$1426
  1580  0015D2  C0C1  F1C8         	movff	?_sqrt+1,_main$1426+1
  1581  0015D6  C0C2  F1C9         	movff	?_sqrt+2,_main$1426+2
  1582                           
  1583                           ;main_014_Practice_CCP Comparacion_ADC.c: 174: }
  1584                           ;main_014_Practice_CCP Comparacion_ADC.c: 176: Irms=sqrt(sumIns/201)/20;
  1585  0015DA  C1C7  F0B1         	movff	_main$1426,___ftdiv@f1
  1586  0015DE  C1C8  F0B2         	movff	_main$1426+1,___ftdiv@f1+1
  1587  0015E2  C1C9  F0B3         	movff	_main$1426+2,___ftdiv@f1+2
  1588  0015E6  0E00               	movlw	0
  1589  0015E8  0100               	movlb	0	; () banked
  1590  0015EA  6FB4               	movwf	___ftdiv@f2& (0+255),b
  1591  0015EC  0EA0               	movlw	160
  1592  0015EE  6FB5               	movwf	(___ftdiv@f2+1)& (0+255),b
  1593  0015F0  0E41               	movlw	65
  1594  0015F2  6FB6               	movwf	(___ftdiv@f2+2)& (0+255),b
  1595  0015F4  ECB8  F017         	call	___ftdiv	;wreg free
  1596  0015F8  C0B1  F1AB         	movff	?___ftdiv,main@Irms
  1597  0015FC  C0B2  F1AC         	movff	?___ftdiv+1,main@Irms+1
  1598  001600  C0B3  F1AD         	movff	?___ftdiv+2,main@Irms+2
  1599                           
  1600                           ;main_014_Practice_CCP Comparacion_ADC.c: 180: PotenciaReal=Irms*128;
  1601  001604  C1AB  F074         	movff	main@Irms,___ftmul@f1
  1602  001608  C1AC  F075         	movff	main@Irms+1,___ftmul@f1+1
  1603  00160C  C1AD  F076         	movff	main@Irms+2,___ftmul@f1+2
  1604  001610  0E00               	movlw	0
  1605  001612  0100               	movlb	0	; () banked
  1606  001614  6F77               	movwf	___ftmul@f2& (0+255),b
  1607  001616  0E00               	movlw	0
  1608  001618  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  1609  00161A  0E43               	movlw	67
  1610  00161C  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  1611  00161E  ECC3  F016         	call	___ftmul	;wreg free
  1612  001622  C074  F1C1         	movff	?___ftmul,main@PotenciaReal
  1613  001626  C075  F1C2         	movff	?___ftmul+1,main@PotenciaReal+1
  1614  00162A  C076  F1C3         	movff	?___ftmul+2,main@PotenciaReal+2
  1615                           
  1616                           ;main_014_Practice_CCP Comparacion_ADC.c: 181: sprintf(buffer1,"%0.2f W", PotenciaReal);
  1617  00162E  0E9B               	movlw	low main@buffer1
  1618  001630  0100               	movlb	0	; () banked
  1619  001632  6FB1               	movwf	sprintf@sp& (0+255),b
  1620  001634  0E01               	movlw	high main@buffer1
  1621  001636  6FB2               	movwf	(sprintf@sp+1)& (0+255),b
  1622  001638  0EC9               	movlw	low STR_3
  1623  00163A  6FB3               	movwf	sprintf@f& (0+255),b
  1624  00163C  0E08               	movlw	high STR_3
  1625  00163E  6FB4               	movwf	(sprintf@f+1)& (0+255),b
  1626  001640  C1C1  F0B5         	movff	main@PotenciaReal,?_sprintf+4
  1627  001644  C1C2  F0B6         	movff	main@PotenciaReal+1,?_sprintf+5
  1628  001648  C1C3  F0B7         	movff	main@PotenciaReal+2,?_sprintf+6
  1629  00164C  EC69  F004         	call	_sprintf	;wreg free
  1630                           
  1631                           ;main_014_Practice_CCP Comparacion_ADC.c: 182: Lcd_Out2(1, 0, buffer1);
  1632  001650  0E00               	movlw	0
  1633  001652  0100               	movlb	0	; () banked
  1634  001654  6F63               	movwf	Lcd_Out2@x& (0+255),b
  1635  001656  0E9B               	movlw	low main@buffer1
  1636  001658  6F64               	movwf	Lcd_Out2@buffer& (0+255),b
  1637  00165A  0E01               	movlw	high main@buffer1
  1638  00165C  6F65               	movwf	(Lcd_Out2@buffer+1)& (0+255),b
  1639  00165E  0E01               	movlw	1
  1640  001660  EC87  F01A         	call	_Lcd_Out2
  1641                           
  1642                           ;main_014_Practice_CCP Comparacion_ADC.c: 185: _delay((unsigned long)((500)*(48000000/40
      +                          00.0)));
  1643  001664  0E1F               	movlw	31
  1644  001666  0100               	movlb	0	; () banked
  1645  001668  6FD8               	movwf	(??_main+1)& (0+255),b
  1646  00166A  0E71               	movlw	113
  1647  00166C  6FD7               	movwf	??_main& (0+255),b
  1648  00166E  0E1E               	movlw	30
  1649  001670                     u4277:
  1650  001670  2EE8               	decfsz	wreg,f,c
  1651  001672  D7FE               	bra	u4277
  1652  001674  2FD7               	decfsz	??_main& (0+255),f,b
  1653  001676  D7FC               	bra	u4277
  1654  001678  2FD8               	decfsz	(??_main+1)& (0+255),f,b
  1655  00167A  D7FA               	bra	u4277
  1656  00167C  F000               	nop	
  1657                           
  1658                           ;main_014_Practice_CCP Comparacion_ADC.c: 186: while(loop<51){
  1659  00167E  D082               	goto	l119
  1660  001680                     
  1661                           ;main_014_Practice_CCP Comparacion_ADC.c: 187: Lcd_Out2(1, 8, "cargandp");
  1662  001680  0E08               	movlw	8
  1663  001682  0100               	movlb	0	; () banked
  1664  001684  6F63               	movwf	Lcd_Out2@x& (0+255),b
  1665  001686  0EC0               	movlw	low STR_4
  1666  001688  6F64               	movwf	Lcd_Out2@buffer& (0+255),b
  1667  00168A  0E08               	movlw	high STR_4
  1668  00168C  6F65               	movwf	(Lcd_Out2@buffer+1)& (0+255),b
  1669  00168E  0E01               	movlw	1
  1670  001690  EC87  F01A         	call	_Lcd_Out2
  1671                           
  1672                           ;main_014_Practice_CCP Comparacion_ADC.c: 188: if(PORTBbits.RB0==1){
  1673  001694  A081               	btfss	3969,0,c	;volatile
  1674  001696  D016               	goto	l123
  1675                           
  1676                           ;main_014_Practice_CCP Comparacion_ADC.c: 189: if(PORTBbits.RB1==1){
  1677  001698  A281               	btfss	3969,1,c	;volatile
  1678  00169A  D00A               	goto	l122
  1679                           
  1680                           ;main_014_Practice_CCP Comparacion_ADC.c: 190: delay=0;
  1681  00169C  0E00               	movlw	0
  1682  00169E  0101               	movlb	1	; () banked
  1683  0016A0  6FBA               	movwf	main@delay& (0+255),b
  1684  0016A2  0E00               	movlw	0
  1685  0016A4  6FBB               	movwf	(main@delay+1)& (0+255),b
  1686  0016A6  0E00               	movlw	0
  1687  0016A8  6FBC               	movwf	(main@delay+2)& (0+255),b
  1688  0016AA  0E00               	movlw	0
  1689  0016AC  6FBD               	movwf	(main@delay+3)& (0+255),b
  1690                           
  1691                           ;main_014_Practice_CCP Comparacion_ADC.c: 191: }else{
  1692  0016AE  D00A               	goto	l123
  1693  0016B0                     l122:
  1694                           
  1695                           ;main_014_Practice_CCP Comparacion_ADC.c: 192: _delay((unsigned long)((1)*(48000000/4000
      +                          000.0)));
  1696                           
  1697                           ; BSR set to: 1
  1698  0016B0  0E04               	movlw	4
  1699  0016B2                     u4287:
  1700  0016B2  2EE8               	decfsz	wreg,f,c
  1701  0016B4  D7FE               	bra	u4287
  1702                           
  1703                           ;main_014_Practice_CCP Comparacion_ADC.c: 193: delay++;
  1704  0016B6  0E01               	movlw	1
  1705  0016B8  0101               	movlb	1	; () banked
  1706  0016BA  27BA               	addwf	main@delay& (0+255),f,b
  1707  0016BC  0E00               	movlw	0
  1708  0016BE  23BB               	addwfc	(main@delay+1)& (0+255),f,b
  1709  0016C0  23BC               	addwfc	(main@delay+2)& (0+255),f,b
  1710  0016C2  23BD               	addwfc	(main@delay+3)& (0+255),f,b
  1711  0016C4                     l123:
  1712                           
  1713                           ;main_014_Practice_CCP Comparacion_ADC.c: 194: }
  1714                           ;main_014_Practice_CCP Comparacion_ADC.c: 195: }
  1715                           ;main_014_Practice_CCP Comparacion_ADC.c: 199: FactorPotencia=(float)((((float)delay/100
      +                          0000.0)*360.0)/(1.0/60.0));
  1716                           
  1717                           ; BSR set to: 1
  1718                           
  1719                           ; BSR set to: 1
  1720  0016C4  0E00               	movlw	0
  1721  0016C6  0100               	movlb	0	; () banked
  1722  0016C8  6F77               	movwf	___ftmul@f2& (0+255),b
  1723  0016CA  0EB4               	movlw	180
  1724  0016CC  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  1725  0016CE  0E43               	movlw	67
  1726  0016D0  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  1727  0016D2  0E24               	movlw	36
  1728  0016D4  6FB4               	movwf	___ftdiv@f2& (0+255),b
  1729  0016D6  0E74               	movlw	116
  1730  0016D8  6FB5               	movwf	(___ftdiv@f2+1)& (0+255),b
  1731  0016DA  0E49               	movlw	73
  1732  0016DC  6FB6               	movwf	(___ftdiv@f2+2)& (0+255),b
  1733  0016DE  C1BA  F068         	movff	main@delay,___lltoft@c
  1734  0016E2  C1BB  F069         	movff	main@delay+1,___lltoft@c+1
  1735  0016E6  C1BC  F06A         	movff	main@delay+2,___lltoft@c+2
  1736  0016EA  C1BD  F06B         	movff	main@delay+3,___lltoft@c+3
  1737  0016EE  EC89  F01C         	call	___lltoft	;wreg free
  1738  0016F2  C068  F0B1         	movff	?___lltoft,___ftdiv@f1
  1739  0016F6  C069  F0B2         	movff	?___lltoft+1,___ftdiv@f1+1
  1740  0016FA  C06A  F0B3         	movff	?___lltoft+2,___ftdiv@f1+2
  1741  0016FE  ECB8  F017         	call	___ftdiv	;wreg free
  1742  001702  C0B1  F074         	movff	?___ftdiv,___ftmul@f1
  1743  001706  C0B2  F075         	movff	?___ftdiv+1,___ftmul@f1+1
  1744  00170A  C0B3  F076         	movff	?___ftdiv+2,___ftmul@f1+2
  1745  00170E  ECC3  F016         	call	___ftmul	;wreg free
  1746  001712  C074  F1C7         	movff	?___ftmul,_main$1426
  1747  001716  C075  F1C8         	movff	?___ftmul+1,_main$1426+1
  1748  00171A  C076  F1C9         	movff	?___ftmul+2,_main$1426+2
  1749                           
  1750                           ;main_014_Practice_CCP Comparacion_ADC.c: 194: }
  1751                           ;main_014_Practice_CCP Comparacion_ADC.c: 195: }
  1752                           ;main_014_Practice_CCP Comparacion_ADC.c: 199: FactorPotencia=(float)((((float)delay/100
      +                          0000.0)*360.0)/(1.0/60.0));
  1753  00171E  C1C7  F0B1         	movff	_main$1426,___ftdiv@f1
  1754  001722  C1C8  F0B2         	movff	_main$1426+1,___ftdiv@f1+1
  1755  001726  C1C9  F0B3         	movff	_main$1426+2,___ftdiv@f1+2
  1756  00172A  0E89               	movlw	137
  1757  00172C  0100               	movlb	0	; () banked
  1758  00172E  6FB4               	movwf	___ftdiv@f2& (0+255),b
  1759  001730  0E88               	movlw	136
  1760  001732  6FB5               	movwf	(___ftdiv@f2+1)& (0+255),b
  1761  001734  0E3C               	movlw	60
  1762  001736  6FB6               	movwf	(___ftdiv@f2+2)& (0+255),b
  1763  001738  ECB8  F017         	call	___ftdiv	;wreg free
  1764  00173C  C0B1  F1AE         	movff	?___ftdiv,main@FactorPotencia
  1765  001740  C0B2  F1AF         	movff	?___ftdiv+1,main@FactorPotencia+1
  1766  001744  C0B3  F1B0         	movff	?___ftdiv+2,main@FactorPotencia+2
  1767                           
  1768                           ;main_014_Practice_CCP Comparacion_ADC.c: 200: factorPotenciaNum=cos(FactorPotencia);
  1769  001748  C1AE  F0CD         	movff	main@FactorPotencia,cos@f
  1770  00174C  C1AF  F0CE         	movff	main@FactorPotencia+1,cos@f+1
  1771  001750  C1B0  F0CF         	movff	main@FactorPotencia+2,cos@f+2
  1772  001754  EC7F  F019         	call	_cos	;wreg free
  1773  001758  C0CD  F1B1         	movff	?_cos,main@factorPotenciaNum
  1774  00175C  C0CE  F1B2         	movff	?_cos+1,main@factorPotenciaNum+1
  1775  001760  C0CF  F1B3         	movff	?_cos+2,main@factorPotenciaNum+2
  1776                           
  1777                           ;main_014_Practice_CCP Comparacion_ADC.c: 205: FPprom[loop]=factorPotenciaNum;
  1778  001764  0101               	movlb	1	; () banked
  1779  001766  51CC               	movf	main@loop& (0+255),w,b
  1780  001768  0D03               	mullw	3
  1781  00176A  0E00               	movlw	low main@FPprom
  1782  00176C  24F3               	addwf	prodl,w,c
  1783  00176E  6ED9               	movwf	fsr2l,c
  1784  001770  0E01               	movlw	high main@FPprom
  1785  001772  20F4               	addwfc	prodh,w,c
  1786  001774  6EDA               	movwf	fsr2h,c
  1787  001776  C1B1  FFDE         	movff	main@factorPotenciaNum,postinc2
  1788  00177A  C1B2  FFDE         	movff	main@factorPotenciaNum+1,postinc2
  1789  00177E  C1B3  FFDE         	movff	main@factorPotenciaNum+2,postinc2
  1790                           
  1791                           ; BSR set to: 1
  1792                           ;main_014_Practice_CCP Comparacion_ADC.c: 206: loop++;
  1793  001782  2BCC               	incf	main@loop& (0+255),f,b
  1794  001784                     l119:
  1795                           
  1796                           ; BSR set to: 1
  1797  001784  0E32               	movlw	50
  1798  001786  0101               	movlb	1	; () banked
  1799  001788  65CC               	cpfsgt	main@loop& (0+255),b
  1800  00178A  D77A               	goto	l120
  1801                           
  1802                           ; BSR set to: 1
  1803                           ;main_014_Practice_CCP Comparacion_ADC.c: 207: }
  1804                           ;main_014_Practice_CCP Comparacion_ADC.c: 208: if(calculoFP==0){
  1805                           
  1806                           ; BSR set to: 1
  1807  00178C  51CD               	movf	main@calculoFP& (0+255),w,b
  1808  00178E  A4D8               	btfss	status,2,c
  1809  001790  D069               	goto	l125
  1810                           
  1811                           ; BSR set to: 1
  1812                           ;main_014_Practice_CCP Comparacion_ADC.c: 209: for(int i=0;i<51;i++){
  1813  001792  0E00               	movlw	0
  1814  001794  6FD5               	movwf	(main@i+1)& (0+255),b
  1815  001796  0E00               	movlw	0
  1816  001798  6FD4               	movwf	main@i& (0+255),b
  1817  00179A                     l4042:
  1818                           
  1819                           ; BSR set to: 1
  1820  00179A  BFD5               	btfsc	(main@i+1)& (0+255),7,b
  1821  00179C  D006               	goto	l126
  1822  00179E  51D5               	movf	(main@i+1)& (0+255),w,b
  1823  0017A0  E12E               	bnz	l4052
  1824  0017A2  0E33               	movlw	51
  1825  0017A4  5DD4               	subwf	main@i& (0+255),w,b
  1826  0017A6  B0D8               	btfsc	status,0,c
  1827  0017A8  D02A               	goto	u4230
  1828  0017AA                     l126:
  1829                           
  1830                           ; BSR set to: 1
  1831                           ;main_014_Practice_CCP Comparacion_ADC.c: 211: fppromtotal+=FPprom[i];
  1832                           
  1833                           ; BSR set to: 1
  1834  0017AA  C1C4  F08D         	movff	main@fppromtotal,___ftadd@f1
  1835  0017AE  C1C5  F08E         	movff	main@fppromtotal+1,___ftadd@f1+1
  1836  0017B2  C1C6  F08F         	movff	main@fppromtotal+2,___ftadd@f1+2
  1837  0017B6  C1D4  F06E         	movff	main@i,___wmul@multiplier
  1838  0017BA  C1D5  F06F         	movff	main@i+1,___wmul@multiplier+1
  1839  0017BE  0E00               	movlw	0
  1840  0017C0  0100               	movlb	0	; () banked
  1841  0017C2  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1842  0017C4  0E03               	movlw	3
  1843  0017C6  6F70               	movwf	___wmul@multiplicand& (0+255),b
  1844  0017C8  EC11  F01D         	call	___wmul	;wreg free
  1845  0017CC  0E00               	movlw	low main@FPprom
  1846  0017CE  0100               	movlb	0	; () banked
  1847  0017D0  256E               	addwf	?___wmul& (0+255),w,b
  1848  0017D2  6ED9               	movwf	fsr2l,c
  1849  0017D4  0E01               	movlw	high main@FPprom
  1850  0017D6  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  1851  0017D8  6EDA               	movwf	fsr2h,c
  1852  0017DA  CFDE F090          	movff	postinc2,___ftadd@f2
  1853  0017DE  CFDE F091          	movff	postinc2,___ftadd@f2+1
  1854  0017E2  CFDD F092          	movff	postdec2,___ftadd@f2+2
  1855  0017E6  EC22  F011         	call	___ftadd	;wreg free
  1856  0017EA  C08D  F1C4         	movff	?___ftadd,main@fppromtotal
  1857  0017EE  C08E  F1C5         	movff	?___ftadd+1,main@fppromtotal+1
  1858  0017F2  C08F  F1C6         	movff	?___ftadd+2,main@fppromtotal+2
  1859  0017F6  0101               	movlb	1	; () banked
  1860  0017F8  4BD4               	infsnz	main@i& (0+255),f,b
  1861  0017FA  2BD5               	incf	(main@i+1)& (0+255),f,b
  1862  0017FC  D7CE               	goto	l4042
  1863  0017FE                     u4230:
  1864  0017FE                     l4052:
  1865                           
  1866                           ; BSR set to: 1
  1867                           ;main_014_Practice_CCP Comparacion_ADC.c: 212: }
  1868                           ;main_014_Practice_CCP Comparacion_ADC.c: 213: fppromtotal2=fppromtotal/51.0;
  1869  0017FE  C1C4  F0B1         	movff	main@fppromtotal,___ftdiv@f1
  1870  001802  C1C5  F0B2         	movff	main@fppromtotal+1,___ftdiv@f1+1
  1871  001806  C1C6  F0B3         	movff	main@fppromtotal+2,___ftdiv@f1+2
  1872  00180A  0E00               	movlw	0
  1873  00180C  0100               	movlb	0	; () banked
  1874  00180E  6FB4               	movwf	___ftdiv@f2& (0+255),b
  1875  001810  0E4C               	movlw	76
  1876  001812  6FB5               	movwf	(___ftdiv@f2+1)& (0+255),b
  1877  001814  0E42               	movlw	66
  1878  001816  6FB6               	movwf	(___ftdiv@f2+2)& (0+255),b
  1879  001818  ECB8  F017         	call	___ftdiv	;wreg free
  1880  00181C  C0B1  F1CE         	movff	?___ftdiv,main@fppromtotal2
  1881  001820  C0B2  F1CF         	movff	?___ftdiv+1,main@fppromtotal2+1
  1882  001824  C0B3  F1D0         	movff	?___ftdiv+2,main@fppromtotal2+2
  1883                           
  1884                           ;main_014_Practice_CCP Comparacion_ADC.c: 215: sprintf(buffer2,"pF=%0.3f",fppromtotal2 )
      +                          ;
  1885  001828  0EEA               	movlw	low _buffer2
  1886  00182A  0100               	movlb	0	; () banked
  1887  00182C  6FB1               	movwf	sprintf@sp& (0+255),b
  1888  00182E  0E01               	movlw	high _buffer2
  1889  001830  6FB2               	movwf	(sprintf@sp+1)& (0+255),b
  1890  001832  0EB7               	movlw	low STR_5
  1891  001834  6FB3               	movwf	sprintf@f& (0+255),b
  1892  001836  0E08               	movlw	high STR_5
  1893  001838  6FB4               	movwf	(sprintf@f+1)& (0+255),b
  1894  00183A  C1CE  F0B5         	movff	main@fppromtotal2,?_sprintf+4
  1895  00183E  C1CF  F0B6         	movff	main@fppromtotal2+1,?_sprintf+5
  1896  001842  C1D0  F0B7         	movff	main@fppromtotal2+2,?_sprintf+6
  1897  001846  EC69  F004         	call	_sprintf	;wreg free
  1898                           
  1899                           ;main_014_Practice_CCP Comparacion_ADC.c: 216: Lcd_Out2(1, 8, buffer2);
  1900  00184A  0E08               	movlw	8
  1901  00184C  0100               	movlb	0	; () banked
  1902  00184E  6F63               	movwf	Lcd_Out2@x& (0+255),b
  1903  001850  0EEA               	movlw	low _buffer2
  1904  001852  6F64               	movwf	Lcd_Out2@buffer& (0+255),b
  1905  001854  0E01               	movlw	high _buffer2
  1906  001856  6F65               	movwf	(Lcd_Out2@buffer+1)& (0+255),b
  1907  001858  0E01               	movlw	1
  1908  00185A  EC87  F01A         	call	_Lcd_Out2
  1909                           
  1910                           ;main_014_Practice_CCP Comparacion_ADC.c: 218: calculoFP=1;
  1911  00185E  0E01               	movlw	1
  1912  001860  0101               	movlb	1	; () banked
  1913  001862  6FCD               	movwf	main@calculoFP& (0+255),b
  1914  001864                     l125:
  1915                           
  1916                           ; BSR set to: 1
  1917                           ;main_014_Practice_CCP Comparacion_ADC.c: 219: }
  1918                           ;main_014_Practice_CCP Comparacion_ADC.c: 220: calculoFP=1;
  1919                           
  1920                           ; BSR set to: 1
  1921  001864  0E01               	movlw	1
  1922  001866  6FCD               	movwf	main@calculoFP& (0+255),b
  1923                           
  1924                           ; BSR set to: 1
  1925                           ;main_014_Practice_CCP Comparacion_ADC.c: 221: sprintf(buffer2,"pF=%0.3f",fppromtotal2 )
      +                          ;
  1926  001868  0EEA               	movlw	low _buffer2
  1927  00186A  0100               	movlb	0	; () banked
  1928  00186C  6FB1               	movwf	sprintf@sp& (0+255),b
  1929  00186E  0E01               	movlw	high _buffer2
  1930  001870  6FB2               	movwf	(sprintf@sp+1)& (0+255),b
  1931  001872  0EB7               	movlw	low STR_5
  1932  001874  6FB3               	movwf	sprintf@f& (0+255),b
  1933  001876  0E08               	movlw	high STR_5
  1934  001878  6FB4               	movwf	(sprintf@f+1)& (0+255),b
  1935  00187A  C1CE  F0B5         	movff	main@fppromtotal2,?_sprintf+4
  1936  00187E  C1CF  F0B6         	movff	main@fppromtotal2+1,?_sprintf+5
  1937  001882  C1D0  F0B7         	movff	main@fppromtotal2+2,?_sprintf+6
  1938  001886  EC69  F004         	call	_sprintf	;wreg free
  1939                           
  1940                           ;main_014_Practice_CCP Comparacion_ADC.c: 222: Lcd_Out2(1, 8, buffer2);
  1941  00188A  0E08               	movlw	8
  1942  00188C  0100               	movlb	0	; () banked
  1943  00188E  6F63               	movwf	Lcd_Out2@x& (0+255),b
  1944  001890  0EEA               	movlw	low _buffer2
  1945  001892  6F64               	movwf	Lcd_Out2@buffer& (0+255),b
  1946  001894  0E01               	movlw	high _buffer2
  1947  001896  6F65               	movwf	(Lcd_Out2@buffer+1)& (0+255),b
  1948  001898  0E01               	movlw	1
  1949  00189A  EC87  F01A         	call	_Lcd_Out2
  1950  00189E  0101               	movlb	1	; () banked
  1951  0018A0  51CD               	movf	main@calculoFP& (0+255),w,b
  1952  0018A2  B4D8               	btfsc	status,2,c
  1953  0018A4  D7FC               	goto	l129
  1954                           
  1955                           ; BSR set to: 1
  1956                           ;main_014_Practice_CCP Comparacion_ADC.c: 230: float potenciaAparente=0;
  1957                           
  1958                           ; BSR set to: 1
  1959  0018A6  0E00               	movlw	0
  1960  0018A8  6FB7               	movwf	main@potenciaAparente& (0+255),b
  1961  0018AA  0E00               	movlw	0
  1962  0018AC  6FB8               	movwf	(main@potenciaAparente+1)& (0+255),b
  1963  0018AE  0E00               	movlw	0
  1964  0018B0  6FB9               	movwf	(main@potenciaAparente+2)& (0+255),b
  1965                           
  1966                           ; BSR set to: 1
  1967                           ;main_014_Practice_CCP Comparacion_ADC.c: 231: potenciaAparente=PotenciaReal/fppromtotal
      +                          2;
  1968  0018B2  C1C1  F0B1         	movff	main@PotenciaReal,___ftdiv@f1
  1969  0018B6  C1C2  F0B2         	movff	main@PotenciaReal+1,___ftdiv@f1+1
  1970  0018BA  C1C3  F0B3         	movff	main@PotenciaReal+2,___ftdiv@f1+2
  1971  0018BE  C1CE  F0B4         	movff	main@fppromtotal2,___ftdiv@f2
  1972  0018C2  C1CF  F0B5         	movff	main@fppromtotal2+1,___ftdiv@f2+1
  1973  0018C6  C1D0  F0B6         	movff	main@fppromtotal2+2,___ftdiv@f2+2
  1974  0018CA  ECB8  F017         	call	___ftdiv	;wreg free
  1975  0018CE  C0B1  F1B7         	movff	?___ftdiv,main@potenciaAparente
  1976  0018D2  C0B2  F1B8         	movff	?___ftdiv+1,main@potenciaAparente+1
  1977  0018D6  C0B3  F1B9         	movff	?___ftdiv+2,main@potenciaAparente+2
  1978                           
  1979                           ;main_014_Practice_CCP Comparacion_ADC.c: 232: sprintf(buffer3,"%0.3f VA",potenciaAparen
      +                          te );
  1980  0018DA  0ED6               	movlw	low _buffer3
  1981  0018DC  0100               	movlb	0	; () banked
  1982  0018DE  6FB1               	movwf	sprintf@sp& (0+255),b
  1983  0018E0  0E01               	movlw	high _buffer3
  1984  0018E2  6FB2               	movwf	(sprintf@sp+1)& (0+255),b
  1985  0018E4  0EAE               	movlw	low STR_7
  1986  0018E6  6FB3               	movwf	sprintf@f& (0+255),b
  1987  0018E8  0E08               	movlw	high STR_7
  1988  0018EA  6FB4               	movwf	(sprintf@f+1)& (0+255),b
  1989  0018EC  C1B7  F0B5         	movff	main@potenciaAparente,?_sprintf+4
  1990  0018F0  C1B8  F0B6         	movff	main@potenciaAparente+1,?_sprintf+5
  1991  0018F4  C1B9  F0B7         	movff	main@potenciaAparente+2,?_sprintf+6
  1992  0018F8  EC69  F004         	call	_sprintf	;wreg free
  1993                           
  1994                           ;main_014_Practice_CCP Comparacion_ADC.c: 233: Lcd_Out2(2, 0, buffer3);
  1995  0018FC  0E00               	movlw	0
  1996  0018FE  0100               	movlb	0	; () banked
  1997  001900  6F63               	movwf	Lcd_Out2@x& (0+255),b
  1998  001902  0ED6               	movlw	low _buffer3
  1999  001904  6F64               	movwf	Lcd_Out2@buffer& (0+255),b
  2000  001906  0E01               	movlw	high _buffer3
  2001  001908  6F65               	movwf	(Lcd_Out2@buffer+1)& (0+255),b
  2002  00190A  0E02               	movlw	2
  2003  00190C  EC87  F01A         	call	_Lcd_Out2
  2004                           
  2005                           ;main_014_Practice_CCP Comparacion_ADC.c: 234: _delay((unsigned long)((1000)*(48000000/4
      +                          000.0)));
  2006  001910  0E3D               	movlw	61
  2007  001912  0100               	movlb	0	; () banked
  2008  001914  6FD8               	movwf	(??_main+1)& (0+255),b
  2009  001916  0EE1               	movlw	225
  2010  001918  6FD7               	movwf	??_main& (0+255),b
  2011  00191A  0E3F               	movlw	63
  2012  00191C                     u4297:
  2013  00191C  2EE8               	decfsz	wreg,f,c
  2014  00191E  D7FE               	bra	u4297
  2015  001920  2FD7               	decfsz	??_main& (0+255),f,b
  2016  001922  D7FC               	bra	u4297
  2017  001924  2FD8               	decfsz	(??_main+1)& (0+255),f,b
  2018  001926  D7FA               	bra	u4297
  2019  001928  D000               	nop2	
  2020                           
  2021                           ;main_014_Practice_CCP Comparacion_ADC.c: 235: Lcd_Cmd(1);
  2022  00192A  0E01               	movlw	1
  2023  00192C  EC97  F014         	call	_Lcd_Cmd
  2024  001930  D630               	goto	l116
  2025  001932                     __end_of_main:
  2026                           	opt stack 0
  2027                           tblptru	equ	0xFF8
  2028                           prodh	equ	0xFF4
  2029                           prodl	equ	0xFF3
  2030                           postinc0	equ	0xFEE
  2031                           wreg	equ	0xFE8
  2032                           postinc2	equ	0xFDE
  2033                           postdec2	equ	0xFDD
  2034                           fsr2h	equ	0xFDA
  2035                           fsr2l	equ	0xFD9
  2036                           status	equ	0xFD8
  2037                           
  2038 ;; *************** function _sqrt *****************
  2039 ;; Defined at:
  2040 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcsqrt.c"
  2041 ;; Parameters:    Size  Location     Type
  2042 ;;  a               3   96[BANK0 ] void 
  2043 ;; Auto vars:     Size  Location     Type
  2044 ;;  x               3  112[BANK0 ] void 
  2045 ;;  q               3  109[BANK0 ] void 
  2046 ;;  z               3  105[BANK0 ] void 
  2047 ;;  og              3  102[BANK0 ] void 
  2048 ;;  i               1  108[BANK0 ] unsigned char 
  2049 ;; Return value:  Size  Location     Type
  2050 ;;                  3   96[BANK0 ] unsigned char 
  2051 ;; Registers used:
  2052 ;;		wreg, status,2, status,0, cstack
  2053 ;; Tracked objects:
  2054 ;;		On entry : 0/0
  2055 ;;		On exit  : 0/0
  2056 ;;		Unchanged: 0/0
  2057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2058 ;;      Params:         0       3       0       0       0       0       0       0       0
  2059 ;;      Locals:         0      13       0       0       0       0       0       0       0
  2060 ;;      Temps:          0       3       0       0       0       0       0       0       0
  2061 ;;      Totals:         0      19       0       0       0       0       0       0       0
  2062 ;;Total ram usage:       19 bytes
  2063 ;; Hardware stack levels used:    1
  2064 ;; Hardware stack levels required when called:    6
  2065 ;; This function calls:
  2066 ;;		___ftge
  2067 ;;		___ftmul
  2068 ;;		___ftsub
  2069 ;; This function is called by:
  2070 ;;		_main
  2071 ;; This function uses a non-reentrant model
  2072 ;;
  2073                           
  2074                           	psect	text1
  2075  0023F2                     __ptext1:
  2076                           	opt stack 0
  2077  0023F2                     _sqrt:
  2078                           	opt stack 24
  2079                           
  2080                           ;incstack = 0
  2081  0023F2  0E00               	movlw	0
  2082  0023F4  0100               	movlb	0	; () banked
  2083  0023F6  6F60               	movwf	___ftge@ff1& (0+255),b
  2084  0023F8  0E00               	movlw	0
  2085  0023FA  6F61               	movwf	(___ftge@ff1+1)& (0+255),b
  2086  0023FC  0E00               	movlw	0
  2087  0023FE  6F62               	movwf	(___ftge@ff1+2)& (0+255),b
  2088  002400  C0C0  F063         	movff	sqrt@a,___ftge@ff2
  2089  002404  C0C1  F064         	movff	sqrt@a+1,___ftge@ff2+1
  2090  002408  C0C2  F065         	movff	sqrt@a+2,___ftge@ff2+2
  2091  00240C  ECD3  F01A         	call	___ftge	;wreg free
  2092  002410  0100               	movlb	0	; () banked
  2093  002412  A0D8               	btfss	status,0,c
  2094  002414  D00D               	goto	l884
  2095                           
  2096                           ; BSR set to: 0
  2097  002416  AFC2               	btfss	(sqrt@a+2)& (0+255),7,b
  2098  002418  D004               	goto	l885
  2099                           
  2100                           ; BSR set to: 0
  2101  00241A  0E00               	movlw	0
  2102  00241C  6FDA               	movwf	(_errno+1)& (0+255),b
  2103  00241E  0E21               	movlw	33
  2104  002420  6FD9               	movwf	_errno& (0+255),b
  2105  002422                     l885:
  2106                           
  2107                           ; BSR set to: 0
  2108  002422  0E00               	movlw	0
  2109  002424  6FC0               	movwf	?_sqrt& (0+255),b
  2110  002426  0E00               	movlw	0
  2111  002428  6FC1               	movwf	(?_sqrt+1)& (0+255),b
  2112  00242A  0E00               	movlw	0
  2113  00242C  6FC2               	movwf	(?_sqrt+2)& (0+255),b
  2114                           
  2115                           ; BSR set to: 0
  2116  00242E  0012               	return	
  2117  002430                     l884:
  2118                           
  2119                           ; BSR set to: 0
  2120  002430  C0C0  F0C9         	movff	sqrt@a,sqrt@z
  2121  002434  C0C1  F0CA         	movff	sqrt@a+1,sqrt@z+1
  2122  002438  C0C2  F0CB         	movff	sqrt@a+2,sqrt@z+2
  2123                           
  2124                           ; BSR set to: 0
  2125  00243C  C0C0  F0C3         	movff	sqrt@a,??_sqrt
  2126  002440  C0C1  F0C4         	movff	sqrt@a+1,??_sqrt+1
  2127  002444  C0C2  F0C5         	movff	sqrt@a+2,??_sqrt+2
  2128  002448  1FC3               	comf	??_sqrt& (0+255),f,b
  2129  00244A  1FC4               	comf	(??_sqrt+1)& (0+255),f,b
  2130  00244C  1FC5               	comf	(??_sqrt+2)& (0+255),f,b
  2131  00244E  2BC3               	incf	??_sqrt& (0+255),f,b
  2132  002450  0E00               	movlw	0
  2133  002452  23C4               	addwfc	(??_sqrt+1)& (0+255),f,b
  2134  002454  23C5               	addwfc	(??_sqrt+2)& (0+255),f,b
  2135  002456  0EC8               	movlw	200
  2136  002458  25C3               	addwf	??_sqrt& (0+255),w,b
  2137  00245A  6FD0               	movwf	sqrt@x& (0+255),b
  2138  00245C  0E6E               	movlw	110
  2139  00245E  21C4               	addwfc	(??_sqrt+1)& (0+255),w,b
  2140  002460  6FD1               	movwf	(sqrt@x+1)& (0+255),b
  2141  002462  0EBE               	movlw	190
  2142  002464  21C5               	addwfc	(??_sqrt+2)& (0+255),w,b
  2143  002466  6FD2               	movwf	(sqrt@x+2)& (0+255),b
  2144                           
  2145                           ; BSR set to: 0
  2146  002468  90D8               	bcf	status,0,c
  2147  00246A  33D2               	rrcf	(sqrt@x+2)& (0+255),f,b
  2148  00246C  33D1               	rrcf	(sqrt@x+1)& (0+255),f,b
  2149  00246E  33D0               	rrcf	sqrt@x& (0+255),f,b
  2150                           
  2151                           ; BSR set to: 0
  2152  002470  0E00               	movlw	0
  2153  002472  5FC9               	subwf	sqrt@z& (0+255),f,b
  2154  002474  0E80               	movlw	128
  2155  002476  5BCA               	subwfb	(sqrt@z+1)& (0+255),f,b
  2156  002478  0E00               	movlw	0
  2157  00247A  5BCB               	subwfb	(sqrt@z+2)& (0+255),f,b
  2158                           
  2159                           ; BSR set to: 0
  2160  00247C  0E04               	movlw	4
  2161  00247E  6FCC               	movwf	sqrt@i& (0+255),b
  2162  002480                     
  2163                           ; BSR set to: 0
  2164                           
  2165                           ; BSR set to: 0
  2166  002480  C0D0  F0C6         	movff	sqrt@x,sqrt@og
  2167  002484  C0D1  F0C7         	movff	sqrt@x+1,sqrt@og+1
  2168  002488  C0D2  F0C8         	movff	sqrt@x+2,sqrt@og+2
  2169                           
  2170                           ; BSR set to: 0
  2171  00248C  C0D0  F074         	movff	sqrt@x,___ftmul@f1
  2172  002490  C0D1  F075         	movff	sqrt@x+1,___ftmul@f1+1
  2173  002494  C0D2  F076         	movff	sqrt@x+2,___ftmul@f1+2
  2174  002498  C0C9  F077         	movff	sqrt@z,___ftmul@f2
  2175  00249C  C0CA  F078         	movff	sqrt@z+1,___ftmul@f2+1
  2176  0024A0  C0CB  F079         	movff	sqrt@z+2,___ftmul@f2+2
  2177  0024A4  ECC3  F016         	call	___ftmul	;wreg free
  2178  0024A8  C074  F0CD         	movff	?___ftmul,sqrt@q
  2179  0024AC  C075  F0CE         	movff	?___ftmul+1,sqrt@q+1
  2180  0024B0  C076  F0CF         	movff	?___ftmul+2,sqrt@q+2
  2181  0024B4  C0CD  F074         	movff	sqrt@q,___ftmul@f1
  2182  0024B8  C0CE  F075         	movff	sqrt@q+1,___ftmul@f1+1
  2183  0024BC  C0CF  F076         	movff	sqrt@q+2,___ftmul@f1+2
  2184  0024C0  C0D0  F077         	movff	sqrt@x,___ftmul@f2
  2185  0024C4  C0D1  F078         	movff	sqrt@x+1,___ftmul@f2+1
  2186  0024C8  C0D2  F079         	movff	sqrt@x+2,___ftmul@f2+2
  2187  0024CC  ECC3  F016         	call	___ftmul	;wreg free
  2188  0024D0  C074  F0CD         	movff	?___ftmul,sqrt@q
  2189  0024D4  C075  F0CE         	movff	?___ftmul+1,sqrt@q+1
  2190  0024D8  C076  F0CF         	movff	?___ftmul+2,sqrt@q+2
  2191  0024DC  C0CD  F074         	movff	sqrt@q,___ftmul@f1
  2192  0024E0  C0CE  F075         	movff	sqrt@q+1,___ftmul@f1+1
  2193  0024E4  C0CF  F076         	movff	sqrt@q+2,___ftmul@f1+2
  2194  0024E8  C0D0  F077         	movff	sqrt@x,___ftmul@f2
  2195  0024EC  C0D1  F078         	movff	sqrt@x+1,___ftmul@f2+1
  2196  0024F0  C0D2  F079         	movff	sqrt@x+2,___ftmul@f2+2
  2197  0024F4  ECC3  F016         	call	___ftmul	;wreg free
  2198  0024F8  C074  F0CD         	movff	?___ftmul,sqrt@q
  2199  0024FC  C075  F0CE         	movff	?___ftmul+1,sqrt@q+1
  2200  002500  C076  F0CF         	movff	?___ftmul+2,sqrt@q+2
  2201  002504  C0D0  F074         	movff	sqrt@x,___ftmul@f1
  2202  002508  C0D1  F075         	movff	sqrt@x+1,___ftmul@f1+1
  2203  00250C  C0D2  F076         	movff	sqrt@x+2,___ftmul@f1+2
  2204  002510  0E00               	movlw	0
  2205  002512  0100               	movlb	0	; () banked
  2206  002514  6F77               	movwf	___ftmul@f2& (0+255),b
  2207  002516  0EC0               	movlw	192
  2208  002518  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  2209  00251A  0E3F               	movlw	63
  2210  00251C  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  2211  00251E  ECC3  F016         	call	___ftmul	;wreg free
  2212  002522  C074  F0D0         	movff	?___ftmul,sqrt@x
  2213  002526  C075  F0D1         	movff	?___ftmul+1,sqrt@x+1
  2214  00252A  C076  F0D2         	movff	?___ftmul+2,sqrt@x+2
  2215  00252E  C0D0  F0AB         	movff	sqrt@x,___ftsub@f1
  2216  002532  C0D1  F0AC         	movff	sqrt@x+1,___ftsub@f1+1
  2217  002536  C0D2  F0AD         	movff	sqrt@x+2,___ftsub@f1+2
  2218  00253A  C0CD  F0AE         	movff	sqrt@q,___ftsub@f2
  2219  00253E  C0CE  F0AF         	movff	sqrt@q+1,___ftsub@f2+1
  2220  002542  C0CF  F0B0         	movff	sqrt@q+2,___ftsub@f2+2
  2221  002546  ECDA  F01C         	call	___ftsub	;wreg free
  2222  00254A  C0AB  F0D0         	movff	?___ftsub,sqrt@x
  2223  00254E  C0AC  F0D1         	movff	?___ftsub+1,sqrt@x+1
  2224  002552  C0AD  F0D2         	movff	?___ftsub+2,sqrt@x+2
  2225  002556  0100               	movlb	0	; () banked
  2226  002558  2FCC               	decfsz	sqrt@i& (0+255),f,b
  2227  00255A  D792               	goto	l887
  2228                           
  2229                           ; BSR set to: 0
  2230                           
  2231                           ; BSR set to: 0
  2232  00255C  C0D0  F074         	movff	sqrt@x,___ftmul@f1
  2233  002560  C0D1  F075         	movff	sqrt@x+1,___ftmul@f1+1
  2234  002564  C0D2  F076         	movff	sqrt@x+2,___ftmul@f1+2
  2235  002568  C0C0  F077         	movff	sqrt@a,___ftmul@f2
  2236  00256C  C0C1  F078         	movff	sqrt@a+1,___ftmul@f2+1
  2237  002570  C0C2  F079         	movff	sqrt@a+2,___ftmul@f2+2
  2238  002574  ECC3  F016         	call	___ftmul	;wreg free
  2239  002578  C074  F0C0         	movff	?___ftmul,?_sqrt
  2240  00257C  C075  F0C1         	movff	?___ftmul+1,?_sqrt+1
  2241  002580  C076  F0C2         	movff	?___ftmul+2,?_sqrt+2
  2242  002584  0012               	return	
  2243  002586                     __end_of_sqrt:
  2244                           	opt stack 0
  2245                           tblptru	equ	0xFF8
  2246                           prodh	equ	0xFF4
  2247                           prodl	equ	0xFF3
  2248                           postinc0	equ	0xFEE
  2249                           wreg	equ	0xFE8
  2250                           postinc2	equ	0xFDE
  2251                           postdec2	equ	0xFDD
  2252                           fsr2h	equ	0xFDA
  2253                           fsr2l	equ	0xFD9
  2254                           status	equ	0xFD8
  2255                           
  2256 ;; *************** function _sprintf *****************
  2257 ;; Defined at:
  2258 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  2259 ;; Parameters:    Size  Location     Type
  2260 ;;  sp              2   81[BANK0 ] PTR unsigned char 
  2261 ;;		 -> buffer3(20), buffer2(20), main@buffer1(16), 
  2262 ;;  f               2   83[BANK0 ] PTR const unsigned char 
  2263 ;;		 -> STR_7(9), STR_6(9), STR_5(9), STR_3(8), 
  2264 ;;		 -> STR_2(15), STR_1(13), 
  2265 ;; Auto vars:     Size  Location     Type
  2266 ;;  val             4  103[BANK0 ] unsigned long 
  2267 ;;  tmpval          4   99[BANK0 ] struct .
  2268 ;;  fval            3  113[BANK0 ] struct .
  2269 ;;  cp              3    0        PTR const unsigned char 
  2270 ;;  prec            2  116[BANK0 ] int 
  2271 ;;  width           2  111[BANK0 ] int 
  2272 ;;  flag            2  109[BANK0 ] unsigned short 
  2273 ;;  exp             2  107[BANK0 ] int 
  2274 ;;  ap              2   97[BANK0 ] PTR void [1]
  2275 ;;		 -> ?_sprintf(2), 
  2276 ;;  len             2    0        unsigned int 
  2277 ;;  c               1  118[BANK0 ] char 
  2278 ;;  d               1    0        unsigned char 
  2279 ;; Return value:  Size  Location     Type
  2280 ;;                  2   81[BANK0 ] int 
  2281 ;; Registers used:
  2282 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2283 ;; Tracked objects:
  2284 ;;		On entry : 0/0
  2285 ;;		On exit  : 0/0
  2286 ;;		Unchanged: 0/0
  2287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2288 ;;      Params:         0       7       0       0       0       0       0       0       0
  2289 ;;      Locals:         0      25       0       0       0       0       0       0       0
  2290 ;;      Temps:          0       6       0       0       0       0       0       0       0
  2291 ;;      Totals:         0      38       0       0       0       0       0       0       0
  2292 ;;Total ram usage:       38 bytes
  2293 ;; Hardware stack levels used:    1
  2294 ;; Hardware stack levels required when called:    6
  2295 ;; This function calls:
  2296 ;;		___awdiv
  2297 ;;		___ftadd
  2298 ;;		___ftge
  2299 ;;		___ftmul
  2300 ;;		___ftneg
  2301 ;;		___ftsub
  2302 ;;		___fttol
  2303 ;;		___lldiv
  2304 ;;		___llmod
  2305 ;;		___lltoft
  2306 ;;		___wmul
  2307 ;;		__div_to_l_
  2308 ;;		__tdiv_to_l_
  2309 ;;		_fround
  2310 ;;		_isdigit
  2311 ;;		_scale
  2312 ;; This function is called by:
  2313 ;;		_main
  2314 ;; This function uses a non-reentrant model
  2315 ;;
  2316                           
  2317                           	psect	text2
  2318  0008D2                     __ptext2:
  2319                           	opt stack 0
  2320  0008D2                     _sprintf:
  2321                           	opt stack 24
  2322                           
  2323                           ;doprnt.c: 494: va_list ap;
  2324                           ;doprnt.c: 499: signed char c;
  2325                           ;doprnt.c: 501: int width;
  2326                           ;doprnt.c: 504: int prec;
  2327                           ;doprnt.c: 508: unsigned short flag;
  2328                           ;doprnt.c: 515: char d;
  2329                           ;doprnt.c: 516: double fval;
  2330                           ;doprnt.c: 517: int exp;
  2331                           ;doprnt.c: 523: union {
  2332                           ;doprnt.c: 524: unsigned long vd;
  2333                           ;doprnt.c: 525: double integ;
  2334                           ;doprnt.c: 526: } tmpval;
  2335                           ;doprnt.c: 528: unsigned long val;
  2336                           ;doprnt.c: 529: unsigned len;
  2337                           ;doprnt.c: 530: const char * cp;
  2338                           ;doprnt.c: 533: *ap = __va_start();
  2339                           
  2340                           ;incstack = 0
  2341  0008D2  0EB5               	movlw	low (?_sprintf+4)
  2342  0008D4  0100               	movlb	0	; () banked
  2343  0008D6  6FC1               	movwf	sprintf@ap& (0+255),b
  2344  0008D8  0E00               	movlw	high (?_sprintf+4)
  2345  0008DA  6FC2               	movwf	(sprintf@ap+1)& (0+255),b
  2346                           
  2347                           ;doprnt.c: 536: while(c = *f++) {
  2348  0008DC  EF92  F009         	goto	u3990
  2349  0008E0                     
  2350                           ; BSR set to: 0
  2351                           ;doprnt.c: 538: if(c != '%')
  2352                           
  2353                           ; BSR set to: 0
  2354  0008E0  0E25               	movlw	37
  2355  0008E2  19D6               	xorwf	sprintf@c& (0+255),w,b
  2356  0008E4  B4D8               	btfsc	status,2,c
  2357  0008E6  D00A               	goto	l170
  2358                           
  2359                           ; BSR set to: 0
  2360                           ;doprnt.c: 540: {
  2361                           ;doprnt.c: 541: ((*sp++ = (c)));
  2362  0008E8  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  2363  0008EC  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  2364  0008F0  C0D6  FFDF         	movff	sprintf@c,indf2
  2365                           
  2366                           ; BSR set to: 0
  2367  0008F4  4BB1               	infsnz	sprintf@sp& (0+255),f,b
  2368  0008F6  2BB2               	incf	(sprintf@sp+1)& (0+255),f,b
  2369                           
  2370                           ;doprnt.c: 542: continue;
  2371  0008F8  EF92  F009         	goto	u3990
  2372  0008FC                     l170:
  2373                           
  2374                           ; BSR set to: 0
  2375                           ;doprnt.c: 543: }
  2376                           ;doprnt.c: 546: width = 0;
  2377                           
  2378                           ; BSR set to: 0
  2379  0008FC  0E00               	movlw	0
  2380  0008FE  6FD0               	movwf	(sprintf@width+1)& (0+255),b
  2381  000900  0E00               	movlw	0
  2382  000902  6FCF               	movwf	sprintf@width& (0+255),b
  2383                           
  2384                           ;doprnt.c: 548: flag = 0;
  2385  000904  0E00               	movlw	0
  2386  000906  6FCE               	movwf	(sprintf@flag+1)& (0+255),b
  2387  000908  0E00               	movlw	0
  2388  00090A  6FCD               	movwf	sprintf@flag& (0+255),b
  2389                           
  2390                           ; BSR set to: 0
  2391                           ;doprnt.c: 551: switch(*f) {
  2392                           
  2393                           ;doprnt.c: 550: for(;;) {
  2394  00090C  D004               	goto	l172
  2395  00090E                     
  2396                           ;doprnt.c: 580: flag |= 0x04;
  2397                           
  2398                           ; BSR set to: 0
  2399  00090E  0100               	movlb	0	; () banked
  2400  000910  85CD               	bsf	sprintf@flag& (0+255),2,b
  2401                           
  2402                           ;doprnt.c: 581: f++;
  2403  000912  4BB3               	infsnz	sprintf@f& (0+255),f,b
  2404  000914  2BB4               	incf	(sprintf@f+1)& (0+255),f,b
  2405  000916                     l172:
  2406                           
  2407                           ; BSR set to: 0
  2408  000916  C0B3  FFF6         	movff	sprintf@f,tblptrl
  2409  00091A  C0B4  FFF7         	movff	sprintf@f+1,tblptrh
  2410  00091E                     	if	0	;tblptru may be non-zero
  2411  00091E                     	endif
  2412  00091E                     	if	0	;tblptru may be non-zero
  2413  00091E                     	endif
  2414  00091E  0008               	tblrd		*
  2415  000920  50F5               	movf	tablat,w,c
  2416                           
  2417                           ; Switch size 1, requested type "space"
  2418                           ; Number of cases is 1, Range of values is 48 to 48
  2419                           ; switch strategies available:
  2420                           ; Name         Instructions Cycles
  2421                           ; simple_byte            4     3 (average)
  2422                           ;	Chosen strategy is simple_byte
  2423  000922  0A30               	xorlw	48	; case 48
  2424  000924  B4D8               	btfsc	status,2,c
  2425  000926  D7F3               	goto	l173
  2426                           
  2427                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2428                           
  2429                           ;doprnt.c: 586: }
  2430                           
  2431                           ;doprnt.c: 585: break;
  2432  000928  C0B3  FFF6         	movff	sprintf@f,tblptrl
  2433  00092C  C0B4  FFF7         	movff	sprintf@f+1,tblptrh
  2434  000930                     	if	0	;tblptru may be non-zero
  2435  000930                     	endif
  2436  000930                     	if	0	;tblptru may be non-zero
  2437  000930                     	endif
  2438  000930  0008               	tblrd		*
  2439  000932  50F5               	movf	tablat,w,c
  2440  000934  EC5D  F01D         	call	_isdigit
  2441  000938  A0D8               	btfss	status,0,c
  2442  00093A  D035               	goto	u3460
  2443                           
  2444                           ;doprnt.c: 598: width = 0;
  2445  00093C  0E00               	movlw	0
  2446  00093E  0100               	movlb	0	; () banked
  2447  000940  6FD0               	movwf	(sprintf@width+1)& (0+255),b
  2448  000942  0E00               	movlw	0
  2449  000944  6FCF               	movwf	sprintf@width& (0+255),b
  2450  000946                     
  2451                           ;doprnt.c: 600: width *= 10;
  2452                           
  2453                           ; BSR set to: 0
  2454  000946  C0CF  F06E         	movff	sprintf@width,___wmul@multiplier
  2455  00094A  C0D0  F06F         	movff	sprintf@width+1,___wmul@multiplier+1
  2456  00094E  0E00               	movlw	0
  2457  000950  0100               	movlb	0	; () banked
  2458  000952  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2459  000954  0E0A               	movlw	10
  2460  000956  6F70               	movwf	___wmul@multiplicand& (0+255),b
  2461  000958  EC11  F01D         	call	___wmul	;wreg free
  2462  00095C  C06E  F0CF         	movff	?___wmul,sprintf@width
  2463  000960  C06F  F0D0         	movff	?___wmul+1,sprintf@width+1
  2464                           
  2465                           ;doprnt.c: 601: width += *f++ - '0';
  2466  000964  0ED0               	movlw	208
  2467  000966  0100               	movlb	0	; () banked
  2468  000968  6FB8               	movwf	??_sprintf& (0+255),b
  2469  00096A  0EFF               	movlw	255
  2470  00096C  6FB9               	movwf	(??_sprintf+1)& (0+255),b
  2471  00096E  C0B3  FFF6         	movff	sprintf@f,tblptrl
  2472  000972  C0B4  FFF7         	movff	sprintf@f+1,tblptrh
  2473  000976                     	if	0	;tblptru may be non-zero
  2474  000976                     	endif
  2475  000976                     	if	0	;tblptru may be non-zero
  2476  000976                     	endif
  2477  000976  0008               	tblrd		*
  2478  000978  50F5               	movf	tablat,w,c
  2479  00097A  6FBA               	movwf	(??_sprintf+2)& (0+255),b
  2480  00097C  6BBB               	clrf	(??_sprintf+3)& (0+255),b
  2481  00097E  51B8               	movf	??_sprintf& (0+255),w,b
  2482  000980  27BA               	addwf	(??_sprintf+2)& (0+255),f,b
  2483  000982  51B9               	movf	(??_sprintf+1)& (0+255),w,b
  2484  000984  23BB               	addwfc	(??_sprintf+3)& (0+255),f,b
  2485  000986  51BA               	movf	(??_sprintf+2)& (0+255),w,b
  2486  000988  27CF               	addwf	sprintf@width& (0+255),f,b
  2487  00098A  51BB               	movf	(??_sprintf+3)& (0+255),w,b
  2488  00098C  23D0               	addwfc	(sprintf@width+1)& (0+255),f,b
  2489                           
  2490                           ; BSR set to: 0
  2491  00098E  4BB3               	infsnz	sprintf@f& (0+255),f,b
  2492  000990  2BB4               	incf	(sprintf@f+1)& (0+255),f,b
  2493                           
  2494                           ; BSR set to: 0
  2495                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2496  000992  C0B3  FFF6         	movff	sprintf@f,tblptrl
  2497  000996  C0B4  FFF7         	movff	sprintf@f+1,tblptrh
  2498  00099A                     	if	0	;tblptru may be non-zero
  2499  00099A                     	endif
  2500  00099A                     	if	0	;tblptru may be non-zero
  2501  00099A                     	endif
  2502  00099A  0008               	tblrd		*
  2503  00099C  50F5               	movf	tablat,w,c
  2504  00099E  EC5D  F01D         	call	_isdigit
  2505  0009A2  B0D8               	btfsc	status,0,c
  2506  0009A4  D7D0               	goto	l178
  2507  0009A6                     u3460:
  2508                           
  2509                           ;doprnt.c: 608: }
  2510                           ;doprnt.c: 611: if(*f == '.') {
  2511  0009A6  C0B3  FFF6         	movff	sprintf@f,tblptrl
  2512  0009AA  C0B4  FFF7         	movff	sprintf@f+1,tblptrh
  2513  0009AE                     	if	0	;tblptru may be non-zero
  2514  0009AE                     	endif
  2515  0009AE                     	if	0	;tblptru may be non-zero
  2516  0009AE                     	endif
  2517  0009AE  0008               	tblrd		*
  2518  0009B0  50F5               	movf	tablat,w,c
  2519  0009B2  0A2E               	xorlw	46
  2520  0009B4  A4D8               	btfss	status,2,c
  2521  0009B6  D031               	goto	l180
  2522                           
  2523                           ;doprnt.c: 612: flag |= 0x4000;
  2524  0009B8  0100               	movlb	0	; () banked
  2525  0009BA  8DCE               	bsf	(sprintf@flag+1)& (0+255),6,b
  2526                           
  2527                           ;doprnt.c: 613: f++;
  2528  0009BC  4BB3               	infsnz	sprintf@f& (0+255),f,b
  2529  0009BE  2BB4               	incf	(sprintf@f+1)& (0+255),f,b
  2530                           
  2531                           ; BSR set to: 0
  2532                           ;doprnt.c: 620: {
  2533                           ;doprnt.c: 621: prec = 0;
  2534  0009C0  0E00               	movlw	0
  2535  0009C2  6FD5               	movwf	(sprintf@prec+1)& (0+255),b
  2536  0009C4  0E00               	movlw	0
  2537  0009C6  6FD4               	movwf	sprintf@prec& (0+255),b
  2538                           
  2539                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  2540  0009C8  D01D               	goto	l181
  2541  0009CA                     
  2542                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  2543                           
  2544                           ; BSR set to: 0
  2545  0009CA  C0D4  F06E         	movff	sprintf@prec,___wmul@multiplier
  2546  0009CE  C0D5  F06F         	movff	sprintf@prec+1,___wmul@multiplier+1
  2547  0009D2  0E00               	movlw	0
  2548  0009D4  0100               	movlb	0	; () banked
  2549  0009D6  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2550  0009D8  0E0A               	movlw	10
  2551  0009DA  6F70               	movwf	___wmul@multiplicand& (0+255),b
  2552  0009DC  EC11  F01D         	call	___wmul	;wreg free
  2553  0009E0  C0B3  FFF6         	movff	sprintf@f,tblptrl
  2554  0009E4  C0B4  FFF7         	movff	sprintf@f+1,tblptrh
  2555  0009E8                     	if	0	;tblptru may be non-zero
  2556  0009E8                     	endif
  2557  0009E8                     	if	0	;tblptru may be non-zero
  2558  0009E8                     	endif
  2559  0009E8  0008               	tblrd		*
  2560  0009EA  50F5               	movf	tablat,w,c
  2561  0009EC  0100               	movlb	0	; () banked
  2562  0009EE  276E               	addwf	?___wmul& (0+255),f,b
  2563  0009F0  0E00               	movlw	0
  2564  0009F2  236F               	addwfc	(?___wmul+1)& (0+255),f,b
  2565  0009F4  0ED0               	movlw	208
  2566  0009F6  256E               	addwf	?___wmul& (0+255),w,b
  2567  0009F8  6FD4               	movwf	sprintf@prec& (0+255),b
  2568  0009FA  0EFF               	movlw	255
  2569  0009FC  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  2570  0009FE  6FD5               	movwf	(sprintf@prec+1)& (0+255),b
  2571                           
  2572                           ; BSR set to: 0
  2573  000A00  4BB3               	infsnz	sprintf@f& (0+255),f,b
  2574  000A02  2BB4               	incf	(sprintf@f+1)& (0+255),f,b
  2575  000A04                     l181:
  2576                           
  2577                           ; BSR set to: 0
  2578                           
  2579                           ; BSR set to: 0
  2580  000A04  C0B3  FFF6         	movff	sprintf@f,tblptrl
  2581  000A08  C0B4  FFF7         	movff	sprintf@f+1,tblptrh
  2582  000A0C                     	if	0	;tblptru may be non-zero
  2583  000A0C                     	endif
  2584  000A0C                     	if	0	;tblptru may be non-zero
  2585  000A0C                     	endif
  2586  000A0C  0008               	tblrd		*
  2587  000A0E  50F5               	movf	tablat,w,c
  2588  000A10  EC5D  F01D         	call	_isdigit
  2589  000A14  A0D8               	btfss	status,0,c
  2590  000A16  D00A               	goto	l185
  2591  000A18  D7D8               	goto	l182
  2592  000A1A                     l180:
  2593                           
  2594                           ;doprnt.c: 626: prec = 0;
  2595  000A1A  0E00               	movlw	0
  2596  000A1C  0100               	movlb	0	; () banked
  2597  000A1E  6FD5               	movwf	(sprintf@prec+1)& (0+255),b
  2598  000A20  0E00               	movlw	0
  2599  000A22  6FD4               	movwf	sprintf@prec& (0+255),b
  2600                           
  2601                           ; BSR set to: 0
  2602                           ;doprnt.c: 628: flag |= 0x1000;
  2603  000A24  89CE               	bsf	(sprintf@flag+1)& (0+255),4,b
  2604                           
  2605                           ; BSR set to: 0
  2606                           ;doprnt.c: 630: }
  2607                           ;doprnt.c: 635: switch(c = *f++) {
  2608  000A26  D002               	goto	l185
  2609  000A28                     
  2610                           ; BSR set to: 0
  2611                           ;doprnt.c: 663: flag |= 0x400;
  2612                           
  2613                           ; BSR set to: 0
  2614  000A28  85CE               	bsf	(sprintf@flag+1)& (0+255),2,b
  2615                           
  2616                           ; BSR set to: 0
  2617                           ;doprnt.c: 698: case 'i':
  2618                           ;doprnt.c: 699: break;
  2619                           
  2620                           ; BSR set to: 0
  2621                           
  2622                           ;doprnt.c: 697: case 'd':
  2623                           
  2624                           ;doprnt.c: 664: break;
  2625  000A2A  D019               	goto	l189
  2626  000A2C                     l185:
  2627                           
  2628                           ; BSR set to: 0
  2629  000A2C  C0B3  FFF6         	movff	sprintf@f,tblptrl
  2630  000A30  C0B4  FFF7         	movff	sprintf@f+1,tblptrh
  2631  000A34  0100               	movlb	0	; () banked
  2632  000A36  4BB3               	infsnz	sprintf@f& (0+255),f,b
  2633  000A38  2BB4               	incf	(sprintf@f+1)& (0+255),f,b
  2634  000A3A                     	if	0	;tblptru may be non-zero
  2635  000A3A                     	endif
  2636  000A3A                     	if	0	;tblptru may be non-zero
  2637  000A3A                     	endif
  2638  000A3A  0008               	tblrd		*
  2639  000A3C  CFF5 F0D6          	movff	tablat,sprintf@c
  2640  000A40  51D6               	movf	sprintf@c& (0+255),w,b
  2641                           
  2642                           ; Switch size 1, requested type "space"
  2643                           ; Number of cases is 4, Range of values is 0 to 105
  2644                           ; switch strategies available:
  2645                           ; Name         Instructions Cycles
  2646                           ; simple_byte           13     7 (average)
  2647                           ;	Chosen strategy is simple_byte
  2648  000A42  0A00               	xorlw	0	; case 0
  2649  000A44  B4D8               	btfsc	status,2,c
  2650  000A46  EF9F  F009         	goto	u4000
  2651  000A4A  0A64               	xorlw	100	; case 100
  2652  000A4C  B4D8               	btfsc	status,2,c
  2653  000A4E  D007               	goto	l189
  2654  000A50  0A02               	xorlw	2	; case 102
  2655  000A52  B4D8               	btfsc	status,2,c
  2656  000A54  D7E9               	goto	l188
  2657  000A56  0A0F               	xorlw	15	; case 105
  2658  000A58  A4D8               	btfss	status,2,c
  2659  000A5A  EF92  F009         	goto	u3990
  2660  000A5E                     l189:
  2661                           
  2662                           ; BSR set to: 0
  2663                           ;doprnt.c: 825: if(flag & (0x700)) {
  2664                           
  2665                           ; BSR set to: 0
  2666  000A5E  0E07               	movlw	7
  2667  000A60  15CE               	andwf	(sprintf@flag+1)& (0+255),w,b
  2668  000A62  B4D8               	btfsc	status,2,c
  2669  000A64  D329               	goto	l193
  2670                           
  2671                           ; BSR set to: 0
  2672                           ;doprnt.c: 827: if(flag & 0x1000)
  2673  000A66  A9CE               	btfss	(sprintf@flag+1)& (0+255),4,b
  2674  000A68  D004               	goto	l194
  2675                           
  2676                           ; BSR set to: 0
  2677                           ;doprnt.c: 829: prec = 6;
  2678  000A6A  0E00               	movlw	0
  2679  000A6C  6FD5               	movwf	(sprintf@prec+1)& (0+255),b
  2680  000A6E  0E06               	movlw	6
  2681  000A70  6FD4               	movwf	sprintf@prec& (0+255),b
  2682  000A72                     l194:
  2683                           
  2684                           ; BSR set to: 0
  2685                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  2686                           
  2687                           ; BSR set to: 0
  2688  000A72  C0C1  FFD9         	movff	sprintf@ap,fsr2l
  2689  000A76  C0C2  FFDA         	movff	sprintf@ap+1,fsr2h
  2690  000A7A  CFDE F0D1          	movff	postinc2,sprintf@fval
  2691  000A7E  CFDE F0D2          	movff	postinc2,sprintf@fval+1
  2692  000A82  CFDD F0D3          	movff	postdec2,sprintf@fval+2
  2693                           
  2694                           ; BSR set to: 0
  2695  000A86  0E03               	movlw	3
  2696  000A88  27C1               	addwf	sprintf@ap& (0+255),f,b
  2697  000A8A  0E00               	movlw	0
  2698  000A8C  23C2               	addwfc	(sprintf@ap+1)& (0+255),f,b
  2699                           
  2700                           ; BSR set to: 0
  2701                           ;doprnt.c: 831: if(fval < 0.0) {
  2702  000A8E  AFD3               	btfss	(sprintf@fval+2)& (0+255),7,b
  2703  000A90  D011               	goto	l195
  2704                           
  2705                           ; BSR set to: 0
  2706                           ;doprnt.c: 832: fval = -fval;
  2707  000A92  C0D1  F060         	movff	sprintf@fval,___ftneg@f1
  2708  000A96  C0D2  F061         	movff	sprintf@fval+1,___ftneg@f1+1
  2709  000A9A  C0D3  F062         	movff	sprintf@fval+2,___ftneg@f1+2
  2710  000A9E  EC25  F01D         	call	___ftneg	;wreg free
  2711  000AA2  C060  F0D1         	movff	?___ftneg,sprintf@fval
  2712  000AA6  C061  F0D2         	movff	?___ftneg+1,sprintf@fval+1
  2713  000AAA  C062  F0D3         	movff	?___ftneg+2,sprintf@fval+2
  2714                           
  2715                           ;doprnt.c: 833: flag |= 0x03;
  2716  000AAE  0E03               	movlw	3
  2717  000AB0  0100               	movlb	0	; () banked
  2718  000AB2  13CD               	iorwf	sprintf@flag& (0+255),f,b
  2719  000AB4                     l195:
  2720                           
  2721                           ; BSR set to: 0
  2722                           ;doprnt.c: 834: }
  2723                           ;doprnt.c: 835: exp = 0;
  2724                           
  2725                           ; BSR set to: 0
  2726  000AB4  0E00               	movlw	0
  2727  000AB6  6FCC               	movwf	(sprintf@exp+1)& (0+255),b
  2728  000AB8  0E00               	movlw	0
  2729  000ABA  6FCB               	movwf	sprintf@exp& (0+255),b
  2730                           
  2731                           ; BSR set to: 0
  2732                           ;doprnt.c: 836: if( fval!=0) {
  2733  000ABC  51D1               	movf	sprintf@fval& (0+255),w,b
  2734  000ABE  11D2               	iorwf	(sprintf@fval+1)& (0+255),w,b
  2735  000AC0  11D3               	iorwf	(sprintf@fval+2)& (0+255),w,b
  2736  000AC2  B4D8               	btfsc	status,2,c
  2737  000AC4  D088               	goto	l200
  2738                           
  2739                           ; BSR set to: 0
  2740                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  2741  000AC6  0E82               	movlw	130
  2742  000AC8  6FB8               	movwf	??_sprintf& (0+255),b
  2743  000ACA  0EFF               	movlw	255
  2744  000ACC  6FB9               	movwf	(??_sprintf+1)& (0+255),b
  2745  000ACE  C0D1  F0BA         	movff	sprintf@fval,??_sprintf+2
  2746  000AD2  C0D2  F0BB         	movff	sprintf@fval+1,??_sprintf+3
  2747  000AD6  C0D3  F0BC         	movff	sprintf@fval+2,??_sprintf+4
  2748  000ADA  C0D4  F0BD         	movff	sprintf@fval+3,??_sprintf+5
  2749  000ADE  0E10               	movlw	16
  2750  000AE0  D005               	goto	u3530
  2751  000AE2                     u3535:
  2752  000AE2  90D8               	bcf	status,0,c
  2753  000AE4  33BD               	rrcf	(??_sprintf+5)& (0+255),f,b
  2754  000AE6  33BC               	rrcf	(??_sprintf+4)& (0+255),f,b
  2755  000AE8  33BB               	rrcf	(??_sprintf+3)& (0+255),f,b
  2756  000AEA  33BA               	rrcf	(??_sprintf+2)& (0+255),f,b
  2757  000AEC                     u3530:
  2758  000AEC  2EE8               	decfsz	wreg,f,c
  2759  000AEE  D7F9               	goto	u3535
  2760  000AF0  51BA               	movf	(??_sprintf+2)& (0+255),w,b
  2761  000AF2  25B8               	addwf	??_sprintf& (0+255),w,b
  2762  000AF4  6FCB               	movwf	sprintf@exp& (0+255),b
  2763  000AF6  0E00               	movlw	0
  2764  000AF8  21B9               	addwfc	(??_sprintf+1)& (0+255),w,b
  2765  000AFA  6FCC               	movwf	(sprintf@exp+1)& (0+255),b
  2766                           
  2767                           ; BSR set to: 0
  2768                           ;doprnt.c: 838: exp--;
  2769  000AFC  07CB               	decf	sprintf@exp& (0+255),f,b
  2770  000AFE  A0D8               	btfss	status,0,c
  2771  000B00  07CC               	decf	(sprintf@exp+1)& (0+255),f,b
  2772                           
  2773                           ; BSR set to: 0
  2774                           ;doprnt.c: 839: exp *= 3;
  2775  000B02  C0CB  F06E         	movff	sprintf@exp,___wmul@multiplier
  2776  000B06  C0CC  F06F         	movff	sprintf@exp+1,___wmul@multiplier+1
  2777  000B0A  0E00               	movlw	0
  2778  000B0C  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2779  000B0E  0E03               	movlw	3
  2780  000B10  6F70               	movwf	___wmul@multiplicand& (0+255),b
  2781  000B12  EC11  F01D         	call	___wmul	;wreg free
  2782  000B16  C06E  F0CB         	movff	?___wmul,sprintf@exp
  2783  000B1A  C06F  F0CC         	movff	?___wmul+1,sprintf@exp+1
  2784                           
  2785                           ;doprnt.c: 840: exp /= 10;
  2786  000B1E  C0CB  F066         	movff	sprintf@exp,___awdiv@dividend
  2787  000B22  C0CC  F067         	movff	sprintf@exp+1,___awdiv@dividend+1
  2788  000B26  0E00               	movlw	0
  2789  000B28  0100               	movlb	0	; () banked
  2790  000B2A  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  2791  000B2C  0E0A               	movlw	10
  2792  000B2E  6F68               	movwf	___awdiv@divisor& (0+255),b
  2793  000B30  EC1C  F01B         	call	___awdiv	;wreg free
  2794  000B34  C066  F0CB         	movff	?___awdiv,sprintf@exp
  2795  000B38  C067  F0CC         	movff	?___awdiv+1,sprintf@exp+1
  2796                           
  2797                           ;doprnt.c: 841: if(exp < 0)
  2798  000B3C  0100               	movlb	0	; () banked
  2799  000B3E  AFCC               	btfss	(sprintf@exp+1)& (0+255),7,b
  2800  000B40  D003               	goto	l197
  2801                           
  2802                           ; BSR set to: 0
  2803                           ;doprnt.c: 842: exp--;
  2804  000B42  07CB               	decf	sprintf@exp& (0+255),f,b
  2805  000B44  A0D8               	btfss	status,0,c
  2806  000B46  07CC               	decf	(sprintf@exp+1)& (0+255),f,b
  2807  000B48                     l197:
  2808                           
  2809                           ; BSR set to: 0
  2810                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  2811                           
  2812                           ; BSR set to: 0
  2813  000B48  51CB               	movf	sprintf@exp& (0+255),w,b
  2814  000B4A  0800               	sublw	0
  2815  000B4C  EC99  F00C         	call	_scale
  2816  000B50  C083  F0C3         	movff	?_scale,sprintf@tmpval
  2817  000B54  C084  F0C4         	movff	?_scale+1,sprintf@tmpval+1
  2818  000B58  C085  F0C5         	movff	?_scale+2,sprintf@tmpval+2
  2819                           
  2820                           ;doprnt.c: 847: tmpval.integ *= fval;
  2821  000B5C  C0C3  F074         	movff	sprintf@tmpval,___ftmul@f1
  2822  000B60  C0C4  F075         	movff	sprintf@tmpval+1,___ftmul@f1+1
  2823  000B64  C0C5  F076         	movff	sprintf@tmpval+2,___ftmul@f1+2
  2824  000B68  C0D1  F077         	movff	sprintf@fval,___ftmul@f2
  2825  000B6C  C0D2  F078         	movff	sprintf@fval+1,___ftmul@f2+1
  2826  000B70  C0D3  F079         	movff	sprintf@fval+2,___ftmul@f2+2
  2827  000B74  ECC3  F016         	call	___ftmul	;wreg free
  2828  000B78  C074  F0C3         	movff	?___ftmul,sprintf@tmpval
  2829  000B7C  C075  F0C4         	movff	?___ftmul+1,sprintf@tmpval+1
  2830  000B80  C076  F0C5         	movff	?___ftmul+2,sprintf@tmpval+2
  2831                           
  2832                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  2833  000B84  C0C3  F060         	movff	sprintf@tmpval,___ftge@ff1
  2834  000B88  C0C4  F061         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2835  000B8C  C0C5  F062         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2836  000B90  0E00               	movlw	0
  2837  000B92  0100               	movlb	0	; () banked
  2838  000B94  6F63               	movwf	___ftge@ff2& (0+255),b
  2839  000B96  0E80               	movlw	128
  2840  000B98  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  2841  000B9A  0E3F               	movlw	63
  2842  000B9C  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  2843  000B9E  ECD3  F01A         	call	___ftge	;wreg free
  2844  000BA2  0100               	movlb	0	; () banked
  2845  000BA4  B0D8               	btfsc	status,0,c
  2846  000BA6  D004               	goto	l198
  2847                           
  2848                           ; BSR set to: 0
  2849                           ;doprnt.c: 849: exp--;
  2850  000BA8  07CB               	decf	sprintf@exp& (0+255),f,b
  2851  000BAA  A0D8               	btfss	status,0,c
  2852  000BAC  07CC               	decf	(sprintf@exp+1)& (0+255),f,b
  2853  000BAE  D013               	goto	l200
  2854  000BB0                     l198:
  2855                           
  2856                           ; BSR set to: 0
  2857                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  2858                           
  2859                           ; BSR set to: 0
  2860  000BB0  C0C3  F060         	movff	sprintf@tmpval,___ftge@ff1
  2861  000BB4  C0C4  F061         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2862  000BB8  C0C5  F062         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2863  000BBC  0E00               	movlw	0
  2864  000BBE  6F63               	movwf	___ftge@ff2& (0+255),b
  2865  000BC0  0E20               	movlw	32
  2866  000BC2  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  2867  000BC4  0E41               	movlw	65
  2868  000BC6  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  2869  000BC8  ECD3  F01A         	call	___ftge	;wreg free
  2870  000BCC  0100               	movlb	0	; () banked
  2871  000BCE  A0D8               	btfss	status,0,c
  2872  000BD0  D002               	goto	l200
  2873                           
  2874                           ; BSR set to: 0
  2875                           ;doprnt.c: 851: exp++;
  2876  000BD2  4BCB               	infsnz	sprintf@exp& (0+255),f,b
  2877  000BD4  2BCC               	incf	(sprintf@exp+1)& (0+255),f,b
  2878  000BD6                     l200:
  2879                           
  2880                           ; BSR set to: 0
  2881                           ;doprnt.c: 852: }
  2882                           ;doprnt.c: 1112: if(prec <= 12)
  2883                           
  2884                           ; BSR set to: 0
  2885                           
  2886                           ; BSR set to: 0
  2887                           
  2888                           ; BSR set to: 0
  2889  000BD6  BFD5               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2890  000BD8  D006               	goto	u3570
  2891  000BDA  51D5               	movf	(sprintf@prec+1)& (0+255),w,b
  2892  000BDC  E11B               	bnz	l3520
  2893  000BDE  0E0D               	movlw	13
  2894  000BE0  5DD4               	subwf	sprintf@prec& (0+255),w,b
  2895  000BE2  B0D8               	btfsc	status,0,c
  2896  000BE4  D017               	goto	l201
  2897  000BE6                     u3570:
  2898                           
  2899                           ; BSR set to: 0
  2900                           ;doprnt.c: 1113: fval += fround(prec);
  2901  000BE6  C0D1  F08D         	movff	sprintf@fval,___ftadd@f1
  2902  000BEA  C0D2  F08E         	movff	sprintf@fval+1,___ftadd@f1+1
  2903  000BEE  C0D3  F08F         	movff	sprintf@fval+2,___ftadd@f1+2
  2904  000BF2  51D4               	movf	sprintf@prec& (0+255),w,b
  2905  000BF4  ECB5  F00E         	call	_fround
  2906  000BF8  C083  F090         	movff	?_fround,___ftadd@f2
  2907  000BFC  C084  F091         	movff	?_fround+1,___ftadd@f2+1
  2908  000C00  C085  F092         	movff	?_fround+2,___ftadd@f2+2
  2909  000C04  EC22  F011         	call	___ftadd	;wreg free
  2910  000C08  C08D  F0D1         	movff	?___ftadd,sprintf@fval
  2911  000C0C  C08E  F0D2         	movff	?___ftadd+1,sprintf@fval+1
  2912  000C10  C08F  F0D3         	movff	?___ftadd+2,sprintf@fval+2
  2913  000C14                     l201:
  2914  000C14                     l3520:
  2915                           
  2916                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2917  000C14  0100               	movlb	0	; () banked
  2918  000C16  BFCC               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2919  000C18  D006               	goto	u3580
  2920  000C1A  51CC               	movf	(sprintf@exp+1)& (0+255),w,b
  2921  000C1C  E11F               	bnz	l3528
  2922  000C1E  0E0A               	movlw	10
  2923  000C20  5DCB               	subwf	sprintf@exp& (0+255),w,b
  2924  000C22  B0D8               	btfsc	status,0,c
  2925  000C24  D01B               	goto	u3610
  2926  000C26                     u3580:
  2927                           
  2928                           ; BSR set to: 0
  2929  000C26  51D1               	movf	sprintf@fval& (0+255),w,b
  2930  000C28  11D2               	iorwf	(sprintf@fval+1)& (0+255),w,b
  2931  000C2A  11D3               	iorwf	(sprintf@fval+2)& (0+255),w,b
  2932  000C2C  B4D8               	btfsc	status,2,c
  2933  000C2E  D054               	goto	l202
  2934                           
  2935                           ; BSR set to: 0
  2936  000C30  C0D1  F08A         	movff	sprintf@fval,___fttol@f1
  2937  000C34  C0D2  F08B         	movff	sprintf@fval+1,___fttol@f1+1
  2938  000C38  C0D3  F08C         	movff	sprintf@fval+2,___fttol@f1+2
  2939  000C3C  EC47  F016         	call	___fttol	;wreg free
  2940  000C40  0100               	movlb	0	; () banked
  2941  000C42  518A               	movf	?___fttol& (0+255),w,b
  2942  000C44  118B               	iorwf	(?___fttol+1)& (0+255),w,b
  2943  000C46  118C               	iorwf	(?___fttol+2)& (0+255),w,b
  2944  000C48  118D               	iorwf	(?___fttol+3)& (0+255),w,b
  2945  000C4A  B4D8               	btfsc	status,2,c
  2946                           
  2947                           ; BSR set to: 0
  2948  000C4C  BFCC               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2949  000C4E  D044               	goto	l202
  2950  000C50  51CC               	movf	(sprintf@exp+1)& (0+255),w,b
  2951  000C52  E104               	bnz	l3528
  2952  000C54  0E02               	movlw	2
  2953  000C56  5DCB               	subwf	sprintf@exp& (0+255),w,b
  2954  000C58  A0D8               	btfss	status,0,c
  2955  000C5A  D03E               	goto	l202
  2956  000C5C                     u3610:
  2957  000C5C                     l3528:
  2958                           
  2959                           ; BSR set to: 0
  2960                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2961  000C5C  C0C3  F060         	movff	sprintf@tmpval,___ftge@ff1
  2962  000C60  C0C4  F061         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2963  000C64  C0C5  F062         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2964  000C68  0E70               	movlw	112
  2965  000C6A  6F63               	movwf	___ftge@ff2& (0+255),b
  2966  000C6C  0E89               	movlw	137
  2967  000C6E  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  2968  000C70  0E40               	movlw	64
  2969  000C72  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  2970  000C74  ECD3  F01A         	call	___ftge	;wreg free
  2971  000C78  0100               	movlb	0	; () banked
  2972  000C7A  B0D8               	btfsc	status,0,c
  2973  000C7C  D002               	goto	l205
  2974                           
  2975                           ; BSR set to: 0
  2976                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2977  000C7E  0EF7               	movlw	247
  2978  000C80  D001               	goto	L1
  2979  000C82                     l205:
  2980                           
  2981                           ; BSR set to: 0
  2982                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2983                           
  2984                           ; BSR set to: 0
  2985  000C82  0EF8               	movlw	248
  2986  000C84                     L1:
  2987  000C84  27CB               	addwf	sprintf@exp& (0+255),f,b
  2988  000C86  0EFF               	movlw	255
  2989  000C88  23CC               	addwfc	(sprintf@exp+1)& (0+255),f,b
  2990                           
  2991                           ; BSR set to: 0
  2992                           ;doprnt.c: 1124: }
  2993                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  2994                           
  2995                           ; BSR set to: 0
  2996  000C8A  51CB               	movf	sprintf@exp& (0+255),w,b
  2997  000C8C  EC99  F00C         	call	_scale
  2998  000C90  C083  F0C3         	movff	?_scale,sprintf@tmpval
  2999  000C94  C084  F0C4         	movff	?_scale+1,sprintf@tmpval+1
  3000  000C98  C085  F0C5         	movff	?_scale+2,sprintf@tmpval+2
  3001                           
  3002                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  3003  000C9C  C0D1  F060         	movff	sprintf@fval,__tdiv_to_l_@f1
  3004  000CA0  C0D2  F061         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  3005  000CA4  C0D3  F062         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  3006  000CA8  C0C3  F063         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  3007  000CAC  C0C4  F064         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  3008  000CB0  C0C5  F065         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  3009  000CB4  EC63  F013         	call	__tdiv_to_l_	;wreg free
  3010  000CB8  C060  F0C7         	movff	?__tdiv_to_l_,sprintf@val
  3011  000CBC  C061  F0C8         	movff	?__tdiv_to_l_+1,sprintf@val+1
  3012  000CC0  C062  F0C9         	movff	?__tdiv_to_l_+2,sprintf@val+2
  3013  000CC4  C063  F0CA         	movff	?__tdiv_to_l_+3,sprintf@val+3
  3014                           
  3015                           ;doprnt.c: 1129: fval = 0.0;
  3016  000CC8  0E00               	movlw	0
  3017  000CCA  0100               	movlb	0	; () banked
  3018  000CCC  6FD1               	movwf	sprintf@fval& (0+255),b
  3019  000CCE  0E00               	movlw	0
  3020  000CD0  6FD2               	movwf	(sprintf@fval+1)& (0+255),b
  3021  000CD2  0E00               	movlw	0
  3022  000CD4  6FD3               	movwf	(sprintf@fval+2)& (0+255),b
  3023                           
  3024                           ;doprnt.c: 1130: } else {
  3025  000CD6  D033               	goto	l211
  3026  000CD8                     l202:
  3027                           
  3028                           ; BSR set to: 0
  3029                           ;doprnt.c: 1131: val = (unsigned long)fval;
  3030                           
  3031                           ; BSR set to: 0
  3032  000CD8  C0D1  F08A         	movff	sprintf@fval,___fttol@f1
  3033  000CDC  C0D2  F08B         	movff	sprintf@fval+1,___fttol@f1+1
  3034  000CE0  C0D3  F08C         	movff	sprintf@fval+2,___fttol@f1+2
  3035  000CE4  EC47  F016         	call	___fttol	;wreg free
  3036  000CE8  C08A  F0C7         	movff	?___fttol,sprintf@val
  3037  000CEC  C08B  F0C8         	movff	?___fttol+1,sprintf@val+1
  3038  000CF0  C08C  F0C9         	movff	?___fttol+2,sprintf@val+2
  3039  000CF4  C08D  F0CA         	movff	?___fttol+3,sprintf@val+3
  3040                           
  3041                           ;doprnt.c: 1132: fval -= (double)val;
  3042  000CF8  C0D1  F0AB         	movff	sprintf@fval,___ftsub@f1
  3043  000CFC  C0D2  F0AC         	movff	sprintf@fval+1,___ftsub@f1+1
  3044  000D00  C0D3  F0AD         	movff	sprintf@fval+2,___ftsub@f1+2
  3045  000D04  C0C7  F068         	movff	sprintf@val,___lltoft@c
  3046  000D08  C0C8  F069         	movff	sprintf@val+1,___lltoft@c+1
  3047  000D0C  C0C9  F06A         	movff	sprintf@val+2,___lltoft@c+2
  3048  000D10  C0CA  F06B         	movff	sprintf@val+3,___lltoft@c+3
  3049  000D14  EC89  F01C         	call	___lltoft	;wreg free
  3050  000D18  C068  F0AE         	movff	?___lltoft,___ftsub@f2
  3051  000D1C  C069  F0AF         	movff	?___lltoft+1,___ftsub@f2+1
  3052  000D20  C06A  F0B0         	movff	?___lltoft+2,___ftsub@f2+2
  3053  000D24  ECDA  F01C         	call	___ftsub	;wreg free
  3054  000D28  C0AB  F0D1         	movff	?___ftsub,sprintf@fval
  3055  000D2C  C0AC  F0D2         	movff	?___ftsub+1,sprintf@fval+1
  3056  000D30  C0AD  F0D3         	movff	?___ftsub+2,sprintf@fval+2
  3057                           
  3058                           ;doprnt.c: 1133: exp = 0;
  3059  000D34  0E00               	movlw	0
  3060  000D36  0100               	movlb	0	; () banked
  3061  000D38  6FCC               	movwf	(sprintf@exp+1)& (0+255),b
  3062  000D3A  0E00               	movlw	0
  3063  000D3C  6FCB               	movwf	sprintf@exp& (0+255),b
  3064  000D3E                     l211:
  3065                           
  3066                           ; BSR set to: 0
  3067                           ;doprnt.c: 1134: }
  3068                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  3069                           
  3070                           ; BSR set to: 0
  3071  000D3E  0E01               	movlw	1
  3072  000D40  6FD6               	movwf	sprintf@c& (0+255),b
  3073  000D42                     l3548:
  3074                           
  3075                           ; BSR set to: 0
  3076  000D42  0E0A               	movlw	10
  3077  000D44  19D6               	xorwf	sprintf@c& (0+255),w,b
  3078  000D46  B4D8               	btfsc	status,2,c
  3079  000D48  D018               	goto	u3650
  3080                           
  3081                           ; BSR set to: 0
  3082                           ;doprnt.c: 1137: if(val < dpowers[c])
  3083                           
  3084                           ; BSR set to: 0
  3085                           
  3086                           ; BSR set to: 0
  3087  000D4A  51D6               	movf	sprintf@c& (0+255),w,b
  3088  000D4C  0D04               	mullw	4
  3089  000D4E  0E01               	movlw	low _dpowers
  3090  000D50  24F3               	addwf	prodl,w,c
  3091  000D52  6EF6               	movwf	tblptrl,c
  3092  000D54  0E08               	movlw	high _dpowers
  3093  000D56  20F4               	addwfc	prodh,w,c
  3094  000D58  6EF7               	movwf	tblptrh,c
  3095  000D5A                     	if	0	;There are less than 3 active tblptr bytes
  3096  000D5A                     	endif
  3097  000D5A  0009               	tblrd		*+
  3098  000D5C  50F5               	movf	tablat,w,c
  3099  000D5E  5DC7               	subwf	sprintf@val& (0+255),w,b
  3100  000D60  0009               	tblrd		*+
  3101  000D62  50F5               	movf	tablat,w,c
  3102  000D64  59C8               	subwfb	(sprintf@val+1)& (0+255),w,b
  3103  000D66  0009               	tblrd		*+
  3104  000D68  50F5               	movf	tablat,w,c
  3105  000D6A  59C9               	subwfb	(sprintf@val+2)& (0+255),w,b
  3106  000D6C  0009               	tblrd		*+
  3107  000D6E  50F5               	movf	tablat,w,c
  3108  000D70  59CA               	subwfb	(sprintf@val+3)& (0+255),w,b
  3109  000D72  A0D8               	btfss	status,0,c
  3110  000D74  D002               	goto	u3650
  3111                           
  3112                           ; BSR set to: 0
  3113                           
  3114                           ; BSR set to: 0
  3115                           
  3116                           ; BSR set to: 0
  3117                           ;doprnt.c: 1138: break;
  3118  000D76  2BD6               	incf	sprintf@c& (0+255),f,b
  3119  000D78  D7E4               	goto	l3548
  3120  000D7A                     u3650:
  3121                           
  3122                           ; BSR set to: 0
  3123                           ;doprnt.c: 1142: width -= prec + c + exp;
  3124                           
  3125                           ; BSR set to: 0
  3126  000D7A  C0D6  F0B8         	movff	sprintf@c,??_sprintf
  3127  000D7E  6BB9               	clrf	(??_sprintf+1)& (0+255),b
  3128  000D80  BFB8               	btfsc	??_sprintf& (0+255),7,b
  3129  000D82  07B9               	decf	(??_sprintf+1)& (0+255),f,b
  3130  000D84  51D4               	movf	sprintf@prec& (0+255),w,b
  3131  000D86  27B8               	addwf	??_sprintf& (0+255),f,b
  3132  000D88  51D5               	movf	(sprintf@prec+1)& (0+255),w,b
  3133  000D8A  23B9               	addwfc	(??_sprintf+1)& (0+255),f,b
  3134  000D8C  51CB               	movf	sprintf@exp& (0+255),w,b
  3135  000D8E  27B8               	addwf	??_sprintf& (0+255),f,b
  3136  000D90  51CC               	movf	(sprintf@exp+1)& (0+255),w,b
  3137  000D92  23B9               	addwfc	(??_sprintf+1)& (0+255),f,b
  3138  000D94  51B8               	movf	??_sprintf& (0+255),w,b
  3139  000D96  5FCF               	subwf	sprintf@width& (0+255),f,b
  3140  000D98  51B9               	movf	(??_sprintf+1)& (0+255),w,b
  3141  000D9A  5BD0               	subwfb	(sprintf@width+1)& (0+255),f,b
  3142                           
  3143                           ;doprnt.c: 1143: if(
  3144                           ;doprnt.c: 1147: prec)
  3145  000D9C  51D4               	movf	sprintf@prec& (0+255),w,b
  3146  000D9E  11D5               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3147  000DA0  B4D8               	btfsc	status,2,c
  3148  000DA2  D003               	goto	l215
  3149                           
  3150                           ; BSR set to: 0
  3151                           ;doprnt.c: 1148: width--;
  3152  000DA4  07CF               	decf	sprintf@width& (0+255),f,b
  3153  000DA6  A0D8               	btfss	status,0,c
  3154  000DA8  07D0               	decf	(sprintf@width+1)& (0+255),f,b
  3155  000DAA                     l215:
  3156                           
  3157                           ; BSR set to: 0
  3158                           ;doprnt.c: 1149: if(flag & 0x03)
  3159                           
  3160                           ; BSR set to: 0
  3161  000DAA  0E03               	movlw	3
  3162  000DAC  15CD               	andwf	sprintf@flag& (0+255),w,b
  3163  000DAE  6FB8               	movwf	??_sprintf& (0+255),b
  3164  000DB0  0E00               	movlw	0
  3165  000DB2  15CE               	andwf	(sprintf@flag+1)& (0+255),w,b
  3166  000DB4  6FB9               	movwf	(??_sprintf+1)& (0+255),b
  3167  000DB6  51B8               	movf	??_sprintf& (0+255),w,b
  3168  000DB8  11B9               	iorwf	(??_sprintf+1)& (0+255),w,b
  3169  000DBA  B4D8               	btfsc	status,2,c
  3170  000DBC  D003               	goto	l216
  3171                           
  3172                           ; BSR set to: 0
  3173                           ;doprnt.c: 1150: width--;
  3174  000DBE  07CF               	decf	sprintf@width& (0+255),f,b
  3175  000DC0  A0D8               	btfss	status,0,c
  3176  000DC2  07D0               	decf	(sprintf@width+1)& (0+255),f,b
  3177  000DC4                     l216:
  3178                           
  3179                           ; BSR set to: 0
  3180                           ;doprnt.c: 1153: if(flag & 0x04) {
  3181                           
  3182                           ; BSR set to: 0
  3183  000DC4  A5CD               	btfss	sprintf@flag& (0+255),2,b
  3184  000DC6  D031               	goto	l223
  3185                           
  3186                           ; BSR set to: 0
  3187                           ;doprnt.c: 1157: if(flag & 0x03)
  3188  000DC8  0E03               	movlw	3
  3189  000DCA  15CD               	andwf	sprintf@flag& (0+255),w,b
  3190  000DCC  6FB8               	movwf	??_sprintf& (0+255),b
  3191  000DCE  0E00               	movlw	0
  3192  000DD0  15CE               	andwf	(sprintf@flag+1)& (0+255),w,b
  3193  000DD2  6FB9               	movwf	(??_sprintf+1)& (0+255),b
  3194  000DD4  51B8               	movf	??_sprintf& (0+255),w,b
  3195  000DD6  11B9               	iorwf	(??_sprintf+1)& (0+255),w,b
  3196  000DD8  B4D8               	btfsc	status,2,c
  3197  000DDA  D014               	goto	l219
  3198                           
  3199                           ; BSR set to: 0
  3200                           ;doprnt.c: 1159: ((*sp++ = ('-')));
  3201  000DDC  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  3202  000DE0  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  3203  000DE4  0E2D               	movlw	45
  3204  000DE6  6EDF               	movwf	indf2,c
  3205                           
  3206                           ; BSR set to: 0
  3207  000DE8  4BB1               	infsnz	sprintf@sp& (0+255),f,b
  3208  000DEA  2BB2               	incf	(sprintf@sp+1)& (0+255),f,b
  3209                           
  3210                           ; BSR set to: 0
  3211                           ;doprnt.c: 1168: while(width > 0) {
  3212  000DEC  D00B               	goto	l219
  3213  000DEE                     l3576:
  3214                           
  3215                           ; BSR set to: 0
  3216                           ;doprnt.c: 1169: ((*sp++ = ('0')));
  3217  000DEE  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  3218  000DF2  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  3219  000DF6  0E30               	movlw	48
  3220  000DF8  6EDF               	movwf	indf2,c
  3221                           
  3222                           ; BSR set to: 0
  3223  000DFA  4BB1               	infsnz	sprintf@sp& (0+255),f,b
  3224  000DFC  2BB2               	incf	(sprintf@sp+1)& (0+255),f,b
  3225                           
  3226                           ; BSR set to: 0
  3227                           ;doprnt.c: 1170: width--;
  3228  000DFE  07CF               	decf	sprintf@width& (0+255),f,b
  3229  000E00  A0D8               	btfss	status,0,c
  3230  000E02  07D0               	decf	(sprintf@width+1)& (0+255),f,b
  3231  000E04                     l219:
  3232                           
  3233                           ; BSR set to: 0
  3234                           
  3235                           ; BSR set to: 0
  3236  000E04  BFD0               	btfsc	(sprintf@width+1)& (0+255),7,b
  3237  000E06  D073               	goto	l227
  3238  000E08  51D0               	movf	(sprintf@width+1)& (0+255),w,b
  3239  000E0A  E1F1               	bnz	l3576
  3240  000E0C  05CF               	decf	sprintf@width& (0+255),w,b
  3241  000E0E  A0D8               	btfss	status,0,c
  3242  000E10  D06E               	goto	l227
  3243  000E12  D7ED               	goto	l220
  3244  000E14                     l3584:
  3245                           
  3246                           ; BSR set to: 0
  3247                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  3248  000E14  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  3249  000E18  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  3250  000E1C  0E20               	movlw	32
  3251  000E1E  6EDF               	movwf	indf2,c
  3252                           
  3253                           ; BSR set to: 0
  3254  000E20  4BB1               	infsnz	sprintf@sp& (0+255),f,b
  3255  000E22  2BB2               	incf	(sprintf@sp+1)& (0+255),f,b
  3256                           
  3257                           ; BSR set to: 0
  3258                           ;doprnt.c: 1182: width--;
  3259  000E24  07CF               	decf	sprintf@width& (0+255),f,b
  3260  000E26  A0D8               	btfss	status,0,c
  3261  000E28  07D0               	decf	(sprintf@width+1)& (0+255),f,b
  3262  000E2A                     l223:
  3263                           
  3264                           ; BSR set to: 0
  3265                           
  3266                           ; BSR set to: 0
  3267  000E2A  BFD0               	btfsc	(sprintf@width+1)& (0+255),7,b
  3268  000E2C  D005               	goto	u3710
  3269  000E2E  51D0               	movf	(sprintf@width+1)& (0+255),w,b
  3270  000E30  E1F1               	bnz	l3584
  3271  000E32  05CF               	decf	sprintf@width& (0+255),w,b
  3272  000E34  B0D8               	btfsc	status,0,c
  3273  000E36  D7EE               	goto	l224
  3274  000E38                     u3710:
  3275                           
  3276                           ; BSR set to: 0
  3277                           ;doprnt.c: 1183: }
  3278                           ;doprnt.c: 1188: if(flag & 0x03)
  3279                           
  3280                           ; BSR set to: 0
  3281  000E38  0E03               	movlw	3
  3282  000E3A  15CD               	andwf	sprintf@flag& (0+255),w,b
  3283  000E3C  6FB8               	movwf	??_sprintf& (0+255),b
  3284  000E3E  0E00               	movlw	0
  3285  000E40  15CE               	andwf	(sprintf@flag+1)& (0+255),w,b
  3286  000E42  6FB9               	movwf	(??_sprintf+1)& (0+255),b
  3287  000E44  51B8               	movf	??_sprintf& (0+255),w,b
  3288  000E46  11B9               	iorwf	(??_sprintf+1)& (0+255),w,b
  3289  000E48  B4D8               	btfsc	status,2,c
  3290  000E4A  D051               	goto	l227
  3291                           
  3292                           ; BSR set to: 0
  3293                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  3294  000E4C  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  3295  000E50  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  3296  000E54  0E2D               	movlw	45
  3297  000E56  D048               	goto	L2
  3298  000E58                     
  3299                           ; BSR set to: 0
  3300                           ;doprnt.c: 1200: {
  3301                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  3302                           
  3303                           ; BSR set to: 0
  3304  000E58  C0C7  F060         	movff	sprintf@val,___lldiv@dividend
  3305  000E5C  C0C8  F061         	movff	sprintf@val+1,___lldiv@dividend+1
  3306  000E60  C0C9  F062         	movff	sprintf@val+2,___lldiv@dividend+2
  3307  000E64  C0CA  F063         	movff	sprintf@val+3,___lldiv@dividend+3
  3308  000E68  51D6               	movf	sprintf@c& (0+255),w,b
  3309  000E6A  0D04               	mullw	4
  3310  000E6C  0E01               	movlw	low _dpowers
  3311  000E6E  24F3               	addwf	prodl,w,c
  3312  000E70  6EF6               	movwf	tblptrl,c
  3313  000E72  0E08               	movlw	high _dpowers
  3314  000E74  20F4               	addwfc	prodh,w,c
  3315  000E76  6EF7               	movwf	tblptrh,c
  3316  000E78                     	if	0	;There are less than 3 active tblptr bytes
  3317  000E78                     	endif
  3318  000E78  0009               	tblrd		*+
  3319  000E7A  CFF5 F064          	movff	tablat,___lldiv@divisor
  3320  000E7E  0009               	tblrd		*+
  3321  000E80  CFF5 F065          	movff	tablat,___lldiv@divisor+1
  3322  000E84  0009               	tblrd		*+
  3323  000E86  CFF5 F066          	movff	tablat,___lldiv@divisor+2
  3324  000E8A  000A               	tblrd		*-
  3325  000E8C  CFF5 F067          	movff	tablat,___lldiv@divisor+3
  3326  000E90  EC5F  F01B         	call	___lldiv	;wreg free
  3327  000E94  C060  F0C3         	movff	?___lldiv,sprintf@tmpval
  3328  000E98  C061  F0C4         	movff	?___lldiv+1,sprintf@tmpval+1
  3329  000E9C  C062  F0C5         	movff	?___lldiv+2,sprintf@tmpval+2
  3330  000EA0  C063  F0C6         	movff	?___lldiv+3,sprintf@tmpval+3
  3331                           
  3332                           ;doprnt.c: 1202: tmpval.vd %= 10;
  3333  000EA4  C0C3  F06D         	movff	sprintf@tmpval,___llmod@dividend
  3334  000EA8  C0C4  F06E         	movff	sprintf@tmpval+1,___llmod@dividend+1
  3335  000EAC  C0C5  F06F         	movff	sprintf@tmpval+2,___llmod@dividend+2
  3336  000EB0  C0C6  F070         	movff	sprintf@tmpval+3,___llmod@dividend+3
  3337  000EB4  0E0A               	movlw	10
  3338  000EB6  0100               	movlb	0	; () banked
  3339  000EB8  6F71               	movwf	___llmod@divisor& (0+255),b
  3340  000EBA  0E00               	movlw	0
  3341  000EBC  6F72               	movwf	(___llmod@divisor+1)& (0+255),b
  3342  000EBE  0E00               	movlw	0
  3343  000EC0  6F73               	movwf	(___llmod@divisor+2)& (0+255),b
  3344  000EC2  0E00               	movlw	0
  3345  000EC4  6F74               	movwf	(___llmod@divisor+3)& (0+255),b
  3346  000EC6  EC55  F01C         	call	___llmod	;wreg free
  3347  000ECA  C06D  F0C3         	movff	?___llmod,sprintf@tmpval
  3348  000ECE  C06E  F0C4         	movff	?___llmod+1,sprintf@tmpval+1
  3349  000ED2  C06F  F0C5         	movff	?___llmod+2,sprintf@tmpval+2
  3350  000ED6  C070  F0C6         	movff	?___llmod+3,sprintf@tmpval+3
  3351                           
  3352                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  3353  000EDA  0100               	movlb	0	; () banked
  3354  000EDC  51C3               	movf	sprintf@tmpval& (0+255),w,b
  3355  000EDE  0F30               	addlw	48
  3356  000EE0  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  3357  000EE4  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  3358  000EE8                     L2:
  3359  000EE8  6EDF               	movwf	indf2,c
  3360                           
  3361                           ; BSR set to: 0
  3362  000EEA  4BB1               	infsnz	sprintf@sp& (0+255),f,b
  3363  000EEC  2BB2               	incf	(sprintf@sp+1)& (0+255),f,b
  3364  000EEE                     l227:
  3365                           
  3366                           ; BSR set to: 0
  3367                           
  3368                           ; BSR set to: 0
  3369  000EEE  07D6               	decf	sprintf@c& (0+255),f,b
  3370  000EF0  29D6               	incf	sprintf@c& (0+255),w,b
  3371  000EF2  B4D8               	btfsc	status,2,c
  3372  000EF4  D00C               	goto	l230
  3373  000EF6  D7B0               	goto	l228
  3374  000EF8                     l3608:
  3375                           
  3376                           ; BSR set to: 0
  3377                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  3378  000EF8  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  3379  000EFC  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  3380  000F00  0E30               	movlw	48
  3381  000F02  6EDF               	movwf	indf2,c
  3382                           
  3383                           ; BSR set to: 0
  3384  000F04  4BB1               	infsnz	sprintf@sp& (0+255),f,b
  3385  000F06  2BB2               	incf	(sprintf@sp+1)& (0+255),f,b
  3386                           
  3387                           ; BSR set to: 0
  3388                           ;doprnt.c: 1209: exp--;
  3389  000F08  07CB               	decf	sprintf@exp& (0+255),f,b
  3390  000F0A  A0D8               	btfss	status,0,c
  3391  000F0C  07CC               	decf	(sprintf@exp+1)& (0+255),f,b
  3392  000F0E                     l230:
  3393                           
  3394                           ; BSR set to: 0
  3395                           
  3396                           ; BSR set to: 0
  3397  000F0E  BFCC               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3398  000F10  D005               	goto	u3740
  3399  000F12  51CC               	movf	(sprintf@exp+1)& (0+255),w,b
  3400  000F14  E1F1               	bnz	l3608
  3401  000F16  05CB               	decf	sprintf@exp& (0+255),w,b
  3402  000F18  B0D8               	btfsc	status,0,c
  3403  000F1A  D7EE               	goto	l231
  3404  000F1C                     u3740:
  3405                           
  3406                           ; BSR set to: 0
  3407                           ;doprnt.c: 1210: }
  3408                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  3409                           
  3410                           ; BSR set to: 0
  3411  000F1C  BFD5               	btfsc	(sprintf@prec+1)& (0+255),7,b
  3412  000F1E  D009               	goto	l233
  3413  000F20  51D5               	movf	(sprintf@prec+1)& (0+255),w,b
  3414  000F22  E104               	bnz	u3750
  3415  000F24  0E09               	movlw	9
  3416  000F26  5DD4               	subwf	sprintf@prec& (0+255),w,b
  3417  000F28  A0D8               	btfss	status,0,c
  3418  000F2A  D003               	goto	l233
  3419  000F2C                     u3750:
  3420                           
  3421                           ; BSR set to: 0
  3422                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  3423  000F2C  0E08               	movlw	8
  3424  000F2E  6FD6               	movwf	sprintf@c& (0+255),b
  3425  000F30  D002               	goto	l234
  3426  000F32                     l233:
  3427                           
  3428                           ; BSR set to: 0
  3429                           ;doprnt.c: 1213: else
  3430                           ;doprnt.c: 1214: c = prec;
  3431  000F32  C0D4  F0D6         	movff	sprintf@prec,sprintf@c
  3432  000F36                     l234:
  3433                           
  3434                           ; BSR set to: 0
  3435                           ;doprnt.c: 1215: prec -= c;
  3436                           
  3437                           ; BSR set to: 0
  3438  000F36  51D6               	movf	sprintf@c& (0+255),w,b
  3439  000F38  5FD4               	subwf	sprintf@prec& (0+255),f,b
  3440  000F3A  0E00               	movlw	0
  3441  000F3C  BFD6               	btfsc	sprintf@c& (0+255),7,b
  3442  000F3E  0EFF               	movlw	255
  3443  000F40  5BD5               	subwfb	(sprintf@prec+1)& (0+255),f,b
  3444                           
  3445                           ; BSR set to: 0
  3446                           ;doprnt.c: 1219: if(c)
  3447  000F42  51D6               	movf	sprintf@c& (0+255),w,b
  3448  000F44  B4D8               	btfsc	status,2,c
  3449  000F46  D008               	goto	l235
  3450                           
  3451                           ; BSR set to: 0
  3452                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  3453  000F48  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  3454  000F4C  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  3455  000F50  0E2E               	movlw	46
  3456  000F52  6EDF               	movwf	indf2,c
  3457                           
  3458                           ; BSR set to: 0
  3459  000F54  4BB1               	infsnz	sprintf@sp& (0+255),f,b
  3460  000F56  2BB2               	incf	(sprintf@sp+1)& (0+255),f,b
  3461  000F58                     l235:
  3462                           
  3463                           ; BSR set to: 0
  3464                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3465                           
  3466                           ; BSR set to: 0
  3467  000F58  51D6               	movf	sprintf@c& (0+255),w,b
  3468  000F5A  EC99  F00C         	call	_scale
  3469  000F5E  C083  F0BE         	movff	?_scale,_sprintf$1430
  3470  000F62  C084  F0BF         	movff	?_scale+1,_sprintf$1430+1
  3471  000F66  C085  F0C0         	movff	?_scale+2,_sprintf$1430+2
  3472                           
  3473                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3474  000F6A  C0D1  F077         	movff	sprintf@fval,___ftmul@f2
  3475  000F6E  C0D2  F078         	movff	sprintf@fval+1,___ftmul@f2+1
  3476  000F72  C0D3  F079         	movff	sprintf@fval+2,___ftmul@f2+2
  3477  000F76  C0BE  F074         	movff	_sprintf$1430,___ftmul@f1
  3478  000F7A  C0BF  F075         	movff	_sprintf$1430+1,___ftmul@f1+1
  3479  000F7E  C0C0  F076         	movff	_sprintf$1430+2,___ftmul@f1+2
  3480  000F82  ECC3  F016         	call	___ftmul	;wreg free
  3481  000F86  C074  F08A         	movff	?___ftmul,___fttol@f1
  3482  000F8A  C075  F08B         	movff	?___ftmul+1,___fttol@f1+1
  3483  000F8E  C076  F08C         	movff	?___ftmul+2,___fttol@f1+2
  3484  000F92  EC47  F016         	call	___fttol	;wreg free
  3485  000F96  C08A  F0C7         	movff	?___fttol,sprintf@val
  3486  000F9A  C08B  F0C8         	movff	?___fttol+1,sprintf@val+1
  3487  000F9E  C08C  F0C9         	movff	?___fttol+2,sprintf@val+2
  3488  000FA2  C08D  F0CA         	movff	?___fttol+3,sprintf@val+3
  3489                           
  3490                           ;doprnt.c: 1228: while(c--) {
  3491  000FA6  D072               	goto	l236
  3492  000FA8                     
  3493                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  3494  000FA8  C0C7  F060         	movff	sprintf@val,___lldiv@dividend
  3495  000FAC  C0C8  F061         	movff	sprintf@val+1,___lldiv@dividend+1
  3496  000FB0  C0C9  F062         	movff	sprintf@val+2,___lldiv@dividend+2
  3497  000FB4  C0CA  F063         	movff	sprintf@val+3,___lldiv@dividend+3
  3498  000FB8  0100               	movlb	0	; () banked
  3499  000FBA  51D6               	movf	sprintf@c& (0+255),w,b
  3500  000FBC  0D04               	mullw	4
  3501  000FBE  0E01               	movlw	low _dpowers
  3502  000FC0  24F3               	addwf	prodl,w,c
  3503  000FC2  6EF6               	movwf	tblptrl,c
  3504  000FC4  0E08               	movlw	high _dpowers
  3505  000FC6  20F4               	addwfc	prodh,w,c
  3506  000FC8  6EF7               	movwf	tblptrh,c
  3507  000FCA                     	if	0	;There are less than 3 active tblptr bytes
  3508  000FCA                     	endif
  3509  000FCA  0009               	tblrd		*+
  3510  000FCC  CFF5 F064          	movff	tablat,___lldiv@divisor
  3511  000FD0  0009               	tblrd		*+
  3512  000FD2  CFF5 F065          	movff	tablat,___lldiv@divisor+1
  3513  000FD6  0009               	tblrd		*+
  3514  000FD8  CFF5 F066          	movff	tablat,___lldiv@divisor+2
  3515  000FDC  000A               	tblrd		*-
  3516  000FDE  CFF5 F067          	movff	tablat,___lldiv@divisor+3
  3517  000FE2  EC5F  F01B         	call	___lldiv	;wreg free
  3518  000FE6  C060  F0C3         	movff	?___lldiv,sprintf@tmpval
  3519  000FEA  C061  F0C4         	movff	?___lldiv+1,sprintf@tmpval+1
  3520  000FEE  C062  F0C5         	movff	?___lldiv+2,sprintf@tmpval+2
  3521  000FF2  C063  F0C6         	movff	?___lldiv+3,sprintf@tmpval+3
  3522                           
  3523                           ;doprnt.c: 1230: tmpval.vd %= 10;
  3524  000FF6  C0C3  F06D         	movff	sprintf@tmpval,___llmod@dividend
  3525  000FFA  C0C4  F06E         	movff	sprintf@tmpval+1,___llmod@dividend+1
  3526  000FFE  C0C5  F06F         	movff	sprintf@tmpval+2,___llmod@dividend+2
  3527  001002  C0C6  F070         	movff	sprintf@tmpval+3,___llmod@dividend+3
  3528  001006  0E0A               	movlw	10
  3529  001008  0100               	movlb	0	; () banked
  3530  00100A  6F71               	movwf	___llmod@divisor& (0+255),b
  3531  00100C  0E00               	movlw	0
  3532  00100E  6F72               	movwf	(___llmod@divisor+1)& (0+255),b
  3533  001010  0E00               	movlw	0
  3534  001012  6F73               	movwf	(___llmod@divisor+2)& (0+255),b
  3535  001014  0E00               	movlw	0
  3536  001016  6F74               	movwf	(___llmod@divisor+3)& (0+255),b
  3537  001018  EC55  F01C         	call	___llmod	;wreg free
  3538  00101C  C06D  F0C3         	movff	?___llmod,sprintf@tmpval
  3539  001020  C06E  F0C4         	movff	?___llmod+1,sprintf@tmpval+1
  3540  001024  C06F  F0C5         	movff	?___llmod+2,sprintf@tmpval+2
  3541  001028  C070  F0C6         	movff	?___llmod+3,sprintf@tmpval+3
  3542                           
  3543                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  3544  00102C  0100               	movlb	0	; () banked
  3545  00102E  51C3               	movf	sprintf@tmpval& (0+255),w,b
  3546  001030  0F30               	addlw	48
  3547  001032  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  3548  001036  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  3549  00103A  6EDF               	movwf	indf2,c
  3550                           
  3551                           ; BSR set to: 0
  3552  00103C  4BB1               	infsnz	sprintf@sp& (0+255),f,b
  3553  00103E  2BB2               	incf	(sprintf@sp+1)& (0+255),f,b
  3554                           
  3555                           ; BSR set to: 0
  3556                           ;doprnt.c: 1232: val %= dpowers[c];
  3557  001040  C0C7  F06D         	movff	sprintf@val,___llmod@dividend
  3558  001044  C0C8  F06E         	movff	sprintf@val+1,___llmod@dividend+1
  3559  001048  C0C9  F06F         	movff	sprintf@val+2,___llmod@dividend+2
  3560  00104C  C0CA  F070         	movff	sprintf@val+3,___llmod@dividend+3
  3561  001050  51D6               	movf	sprintf@c& (0+255),w,b
  3562  001052  0D04               	mullw	4
  3563  001054  0E01               	movlw	low _dpowers
  3564  001056  24F3               	addwf	prodl,w,c
  3565  001058  6EF6               	movwf	tblptrl,c
  3566  00105A  0E08               	movlw	high _dpowers
  3567  00105C  20F4               	addwfc	prodh,w,c
  3568  00105E  6EF7               	movwf	tblptrh,c
  3569  001060                     	if	0	;There are less than 3 active tblptr bytes
  3570  001060                     	endif
  3571  001060  0009               	tblrd		*+
  3572  001062  CFF5 F071          	movff	tablat,___llmod@divisor
  3573  001066  0009               	tblrd		*+
  3574  001068  CFF5 F072          	movff	tablat,___llmod@divisor+1
  3575  00106C  0009               	tblrd		*+
  3576  00106E  CFF5 F073          	movff	tablat,___llmod@divisor+2
  3577  001072  000A               	tblrd		*-
  3578  001074  CFF5 F074          	movff	tablat,___llmod@divisor+3
  3579  001078  EC55  F01C         	call	___llmod	;wreg free
  3580  00107C  C06D  F0C7         	movff	?___llmod,sprintf@val
  3581  001080  C06E  F0C8         	movff	?___llmod+1,sprintf@val+1
  3582  001084  C06F  F0C9         	movff	?___llmod+2,sprintf@val+2
  3583  001088  C070  F0CA         	movff	?___llmod+3,sprintf@val+3
  3584  00108C                     l236:
  3585  00108C  0100               	movlb	0	; () banked
  3586  00108E  07D6               	decf	sprintf@c& (0+255),f,b
  3587  001090  29D6               	incf	sprintf@c& (0+255),w,b
  3588  001092  B4D8               	btfsc	status,2,c
  3589  001094  D00C               	goto	l239
  3590  001096  D788               	goto	l237
  3591  001098                     
  3592                           ; BSR set to: 0
  3593                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  3594                           
  3595                           ; BSR set to: 0
  3596  001098  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  3597  00109C  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  3598  0010A0  0E30               	movlw	48
  3599  0010A2  6EDF               	movwf	indf2,c
  3600                           
  3601                           ; BSR set to: 0
  3602  0010A4  4BB1               	infsnz	sprintf@sp& (0+255),f,b
  3603  0010A6  2BB2               	incf	(sprintf@sp+1)& (0+255),f,b
  3604                           
  3605                           ; BSR set to: 0
  3606                           ;doprnt.c: 1237: prec--;
  3607  0010A8  07D4               	decf	sprintf@prec& (0+255),f,b
  3608  0010AA  A0D8               	btfss	status,0,c
  3609  0010AC  07D5               	decf	(sprintf@prec+1)& (0+255),f,b
  3610  0010AE                     l239:
  3611                           
  3612                           ; BSR set to: 0
  3613                           
  3614                           ; BSR set to: 0
  3615  0010AE  51D4               	movf	sprintf@prec& (0+255),w,b
  3616  0010B0  11D5               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3617  0010B2  B4D8               	btfsc	status,2,c
  3618  0010B4  D137               	goto	u3990
  3619  0010B6  D7F0               	goto	l240
  3620  0010B8                     l193:
  3621                           
  3622                           ; BSR set to: 0
  3623                           ;doprnt.c: 1246: }
  3624                           ;doprnt.c: 1253: {
  3625                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  3626                           
  3627                           ; BSR set to: 0
  3628  0010B8  C0C1  FFD9         	movff	sprintf@ap,fsr2l
  3629  0010BC  C0C2  FFDA         	movff	sprintf@ap+1,fsr2h
  3630  0010C0  CFDE F0C7          	movff	postinc2,sprintf@val
  3631  0010C4  CFDD F0C8          	movff	postdec2,sprintf@val+1
  3632  0010C8  0E00               	movlw	0
  3633  0010CA  BFC8               	btfsc	(sprintf@val+1)& (0+255),7,b
  3634  0010CC  0EFF               	movlw	-1
  3635  0010CE  6FC9               	movwf	(sprintf@val+2)& (0+255),b
  3636  0010D0  6FCA               	movwf	(sprintf@val+3)& (0+255),b
  3637                           
  3638                           ; BSR set to: 0
  3639  0010D2  0E02               	movlw	2
  3640  0010D4  27C1               	addwf	sprintf@ap& (0+255),f,b
  3641  0010D6  0E00               	movlw	0
  3642  0010D8  23C2               	addwfc	(sprintf@ap+1)& (0+255),f,b
  3643                           
  3644                           ; BSR set to: 0
  3645                           ;doprnt.c: 1261: if((long)val < 0) {
  3646  0010DA  AFCA               	btfss	(sprintf@val+3)& (0+255),7,b
  3647  0010DC  D00A               	goto	l242
  3648                           
  3649                           ; BSR set to: 0
  3650                           ;doprnt.c: 1262: flag |= 0x03;
  3651  0010DE  0E03               	movlw	3
  3652  0010E0  13CD               	iorwf	sprintf@flag& (0+255),f,b
  3653                           
  3654                           ; BSR set to: 0
  3655                           ;doprnt.c: 1263: val = -val;
  3656  0010E2  1FCA               	comf	(sprintf@val+3)& (0+255),f,b
  3657  0010E4  1FC9               	comf	(sprintf@val+2)& (0+255),f,b
  3658  0010E6  1FC8               	comf	(sprintf@val+1)& (0+255),f,b
  3659  0010E8  6DC7               	negf	sprintf@val& (0+255),b
  3660  0010EA  0E00               	movlw	0
  3661  0010EC  23C8               	addwfc	(sprintf@val+1)& (0+255),f,b
  3662  0010EE  23C9               	addwfc	(sprintf@val+2)& (0+255),f,b
  3663  0010F0  23CA               	addwfc	(sprintf@val+3)& (0+255),f,b
  3664  0010F2                     l242:
  3665                           
  3666                           ; BSR set to: 0
  3667                           ;doprnt.c: 1264: }
  3668                           ;doprnt.c: 1266: }
  3669                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  3670                           
  3671                           ; BSR set to: 0
  3672  0010F2  51D4               	movf	sprintf@prec& (0+255),w,b
  3673  0010F4  11D5               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3674  0010F6  A4D8               	btfss	status,2,c
  3675  0010F8  D008               	goto	l243
  3676                           
  3677                           ; BSR set to: 0
  3678  0010FA  51C7               	movf	sprintf@val& (0+255),w,b
  3679  0010FC  11C8               	iorwf	(sprintf@val+1)& (0+255),w,b
  3680  0010FE  11C9               	iorwf	(sprintf@val+2)& (0+255),w,b
  3681  001100  11CA               	iorwf	(sprintf@val+3)& (0+255),w,b
  3682  001102  A4D8               	btfss	status,2,c
  3683  001104  D002               	goto	l243
  3684                           
  3685                           ; BSR set to: 0
  3686                           ;doprnt.c: 1291: prec++;
  3687  001106  4BD4               	infsnz	sprintf@prec& (0+255),f,b
  3688  001108  2BD5               	incf	(sprintf@prec+1)& (0+255),f,b
  3689  00110A                     l243:
  3690                           
  3691                           ; BSR set to: 0
  3692                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3693                           
  3694                           ; BSR set to: 0
  3695  00110A  0E01               	movlw	1
  3696  00110C  6FD6               	movwf	sprintf@c& (0+255),b
  3697  00110E                     l3670:
  3698                           
  3699                           ; BSR set to: 0
  3700  00110E  0E0A               	movlw	10
  3701  001110  19D6               	xorwf	sprintf@c& (0+255),w,b
  3702  001112  B4D8               	btfsc	status,2,c
  3703  001114  D018               	goto	u3840
  3704                           
  3705                           ; BSR set to: 0
  3706                           ;doprnt.c: 1306: if(val < dpowers[c])
  3707                           
  3708                           ; BSR set to: 0
  3709                           
  3710                           ; BSR set to: 0
  3711  001116  51D6               	movf	sprintf@c& (0+255),w,b
  3712  001118  0D04               	mullw	4
  3713  00111A  0E01               	movlw	low _dpowers
  3714  00111C  24F3               	addwf	prodl,w,c
  3715  00111E  6EF6               	movwf	tblptrl,c
  3716  001120  0E08               	movlw	high _dpowers
  3717  001122  20F4               	addwfc	prodh,w,c
  3718  001124  6EF7               	movwf	tblptrh,c
  3719  001126                     	if	0	;There are less than 3 active tblptr bytes
  3720  001126                     	endif
  3721  001126  0009               	tblrd		*+
  3722  001128  50F5               	movf	tablat,w,c
  3723  00112A  5DC7               	subwf	sprintf@val& (0+255),w,b
  3724  00112C  0009               	tblrd		*+
  3725  00112E  50F5               	movf	tablat,w,c
  3726  001130  59C8               	subwfb	(sprintf@val+1)& (0+255),w,b
  3727  001132  0009               	tblrd		*+
  3728  001134  50F5               	movf	tablat,w,c
  3729  001136  59C9               	subwfb	(sprintf@val+2)& (0+255),w,b
  3730  001138  0009               	tblrd		*+
  3731  00113A  50F5               	movf	tablat,w,c
  3732  00113C  59CA               	subwfb	(sprintf@val+3)& (0+255),w,b
  3733  00113E  A0D8               	btfss	status,0,c
  3734  001140  D002               	goto	u3840
  3735                           
  3736                           ; BSR set to: 0
  3737                           
  3738                           ; BSR set to: 0
  3739                           
  3740                           ; BSR set to: 0
  3741                           ;doprnt.c: 1307: break;
  3742  001142  2BD6               	incf	sprintf@c& (0+255),f,b
  3743  001144  D7E4               	goto	l3670
  3744  001146                     u3840:
  3745                           
  3746                           ; BSR set to: 0
  3747                           ;doprnt.c: 1339: if(c < prec)
  3748                           
  3749                           ; BSR set to: 0
  3750  001146  0E80               	movlw	128
  3751  001148  BFD6               	btfsc	sprintf@c& (0+255),7,b
  3752  00114A  0E7F               	movlw	127
  3753  00114C  6FB8               	movwf	??_sprintf& (0+255),b
  3754  00114E  51D4               	movf	sprintf@prec& (0+255),w,b
  3755  001150  5DD6               	subwf	sprintf@c& (0+255),w,b
  3756  001152  51D5               	movf	(sprintf@prec+1)& (0+255),w,b
  3757  001154  0A80               	xorlw	128
  3758  001156  59B8               	subwfb	??_sprintf& (0+255),w,b
  3759  001158  B0D8               	btfsc	status,0,c
  3760  00115A  D003               	goto	l247
  3761                           
  3762                           ; BSR set to: 0
  3763                           ;doprnt.c: 1340: c = prec;
  3764  00115C  C0D4  F0D6         	movff	sprintf@prec,sprintf@c
  3765  001160  D010               	goto	l249
  3766  001162                     l247:
  3767                           
  3768                           ; BSR set to: 0
  3769                           ;doprnt.c: 1341: else if(prec < c)
  3770                           
  3771                           ; BSR set to: 0
  3772  001162  51D5               	movf	(sprintf@prec+1)& (0+255),w,b
  3773  001164  0A80               	xorlw	128
  3774  001166  6FB8               	movwf	??_sprintf& (0+255),b
  3775  001168  51D6               	movf	sprintf@c& (0+255),w,b
  3776  00116A  5DD4               	subwf	sprintf@prec& (0+255),w,b
  3777  00116C  0E80               	movlw	128
  3778  00116E  BFD6               	btfsc	sprintf@c& (0+255),7,b
  3779  001170  0E7F               	movlw	127
  3780  001172  59B8               	subwfb	??_sprintf& (0+255),w,b
  3781  001174  B0D8               	btfsc	status,0,c
  3782  001176  D005               	goto	l249
  3783                           
  3784                           ; BSR set to: 0
  3785                           ;doprnt.c: 1342: prec = c;
  3786  001178  51D6               	movf	sprintf@c& (0+255),w,b
  3787  00117A  6FD4               	movwf	sprintf@prec& (0+255),b
  3788  00117C  6BD5               	clrf	(sprintf@prec+1)& (0+255),b
  3789  00117E  BFD4               	btfsc	sprintf@prec& (0+255),7,b
  3790  001180  07D5               	decf	(sprintf@prec+1)& (0+255),f,b
  3791  001182                     l249:
  3792                           
  3793                           ; BSR set to: 0
  3794                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3795                           
  3796                           ; BSR set to: 0
  3797                           
  3798                           ; BSR set to: 0
  3799  001182  51CF               	movf	sprintf@width& (0+255),w,b
  3800  001184  11D0               	iorwf	(sprintf@width+1)& (0+255),w,b
  3801  001186  B4D8               	btfsc	status,2,c
  3802  001188  D00D               	goto	l250
  3803                           
  3804                           ; BSR set to: 0
  3805  00118A  0E03               	movlw	3
  3806  00118C  15CD               	andwf	sprintf@flag& (0+255),w,b
  3807  00118E  6FB8               	movwf	??_sprintf& (0+255),b
  3808  001190  0E00               	movlw	0
  3809  001192  15CE               	andwf	(sprintf@flag+1)& (0+255),w,b
  3810  001194  6FB9               	movwf	(??_sprintf+1)& (0+255),b
  3811  001196  51B8               	movf	??_sprintf& (0+255),w,b
  3812  001198  11B9               	iorwf	(??_sprintf+1)& (0+255),w,b
  3813  00119A  B4D8               	btfsc	status,2,c
  3814  00119C  D003               	goto	l250
  3815                           
  3816                           ; BSR set to: 0
  3817                           ;doprnt.c: 1346: width--;
  3818  00119E  07CF               	decf	sprintf@width& (0+255),f,b
  3819  0011A0  A0D8               	btfss	status,0,c
  3820  0011A2  07D0               	decf	(sprintf@width+1)& (0+255),f,b
  3821  0011A4                     l250:
  3822                           
  3823                           ; BSR set to: 0
  3824                           ;doprnt.c: 1348: if(flag & 0x4000) {
  3825                           
  3826                           ; BSR set to: 0
  3827  0011A4  ADCE               	btfss	(sprintf@flag+1)& (0+255),6,b
  3828  0011A6  D013               	goto	l253
  3829                           
  3830                           ; BSR set to: 0
  3831                           ;doprnt.c: 1349: if(width > prec)
  3832  0011A8  51CF               	movf	sprintf@width& (0+255),w,b
  3833  0011AA  5DD4               	subwf	sprintf@prec& (0+255),w,b
  3834  0011AC  51D5               	movf	(sprintf@prec+1)& (0+255),w,b
  3835  0011AE  0A80               	xorlw	128
  3836  0011B0  6FB8               	movwf	??_sprintf& (0+255),b
  3837  0011B2  51D0               	movf	(sprintf@width+1)& (0+255),w,b
  3838  0011B4  0A80               	xorlw	128
  3839  0011B6  59B8               	subwfb	??_sprintf& (0+255),w,b
  3840  0011B8  B0D8               	btfsc	status,0,c
  3841  0011BA  D005               	goto	l252
  3842                           
  3843                           ; BSR set to: 0
  3844                           ;doprnt.c: 1350: width -= prec;
  3845  0011BC  51D4               	movf	sprintf@prec& (0+255),w,b
  3846  0011BE  5FCF               	subwf	sprintf@width& (0+255),f,b
  3847  0011C0  51D5               	movf	(sprintf@prec+1)& (0+255),w,b
  3848  0011C2  5BD0               	subwfb	(sprintf@width+1)& (0+255),f,b
  3849  0011C4  D004               	goto	l253
  3850  0011C6                     l252:
  3851                           
  3852                           ; BSR set to: 0
  3853                           ;doprnt.c: 1351: else
  3854                           ;doprnt.c: 1352: width = 0;
  3855                           
  3856                           ; BSR set to: 0
  3857  0011C6  0E00               	movlw	0
  3858  0011C8  6FD0               	movwf	(sprintf@width+1)& (0+255),b
  3859  0011CA  0E00               	movlw	0
  3860  0011CC  6FCF               	movwf	sprintf@width& (0+255),b
  3861  0011CE                     l253:
  3862                           
  3863                           ; BSR set to: 0
  3864                           ;doprnt.c: 1353: }
  3865                           ;doprnt.c: 1381: if(width > c)
  3866                           
  3867                           ; BSR set to: 0
  3868                           
  3869                           ; BSR set to: 0
  3870  0011CE  0E80               	movlw	128
  3871  0011D0  BFD6               	btfsc	sprintf@c& (0+255),7,b
  3872  0011D2  0E7F               	movlw	127
  3873  0011D4  6FB8               	movwf	??_sprintf& (0+255),b
  3874  0011D6  51CF               	movf	sprintf@width& (0+255),w,b
  3875  0011D8  5DD6               	subwf	sprintf@c& (0+255),w,b
  3876  0011DA  51D0               	movf	(sprintf@width+1)& (0+255),w,b
  3877  0011DC  0A80               	xorlw	128
  3878  0011DE  59B8               	subwfb	??_sprintf& (0+255),w,b
  3879  0011E0  B0D8               	btfsc	status,0,c
  3880  0011E2  D007               	goto	l254
  3881                           
  3882                           ; BSR set to: 0
  3883                           ;doprnt.c: 1382: width -= c;
  3884  0011E4  51D6               	movf	sprintf@c& (0+255),w,b
  3885  0011E6  5FCF               	subwf	sprintf@width& (0+255),f,b
  3886  0011E8  0E00               	movlw	0
  3887  0011EA  BFD6               	btfsc	sprintf@c& (0+255),7,b
  3888  0011EC  0EFF               	movlw	255
  3889  0011EE  5BD0               	subwfb	(sprintf@width+1)& (0+255),f,b
  3890  0011F0  D004               	goto	l255
  3891  0011F2                     l254:
  3892                           
  3893                           ; BSR set to: 0
  3894                           ;doprnt.c: 1383: else
  3895                           ;doprnt.c: 1384: width = 0;
  3896                           
  3897                           ; BSR set to: 0
  3898  0011F2  0E00               	movlw	0
  3899  0011F4  6FD0               	movwf	(sprintf@width+1)& (0+255),b
  3900  0011F6  0E00               	movlw	0
  3901  0011F8  6FCF               	movwf	sprintf@width& (0+255),b
  3902  0011FA                     l255:
  3903                           
  3904                           ; BSR set to: 0
  3905                           ;doprnt.c: 1387: if(flag & 0x04) {
  3906                           
  3907                           ; BSR set to: 0
  3908  0011FA  A5CD               	btfss	sprintf@flag& (0+255),2,b
  3909  0011FC  D022               	goto	l256
  3910                           
  3911                           ; BSR set to: 0
  3912                           ;doprnt.c: 1392: if(flag & 0x03)
  3913  0011FE  0E03               	movlw	3
  3914  001200  15CD               	andwf	sprintf@flag& (0+255),w,b
  3915  001202  6FB8               	movwf	??_sprintf& (0+255),b
  3916  001204  0E00               	movlw	0
  3917  001206  15CE               	andwf	(sprintf@flag+1)& (0+255),w,b
  3918  001208  6FB9               	movwf	(??_sprintf+1)& (0+255),b
  3919  00120A  51B8               	movf	??_sprintf& (0+255),w,b
  3920  00120C  11B9               	iorwf	(??_sprintf+1)& (0+255),w,b
  3921  00120E  B4D8               	btfsc	status,2,c
  3922  001210  D008               	goto	l257
  3923                           
  3924                           ; BSR set to: 0
  3925                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  3926  001212  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  3927  001216  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  3928  00121A  0E2D               	movlw	45
  3929  00121C  6EDF               	movwf	indf2,c
  3930                           
  3931                           ; BSR set to: 0
  3932  00121E  4BB1               	infsnz	sprintf@sp& (0+255),f,b
  3933  001220  2BB2               	incf	(sprintf@sp+1)& (0+255),f,b
  3934  001222                     l257:
  3935                           
  3936                           ; BSR set to: 0
  3937                           ;doprnt.c: 1415: if(width)
  3938                           
  3939                           ; BSR set to: 0
  3940  001222  51CF               	movf	sprintf@width& (0+255),w,b
  3941  001224  11D0               	iorwf	(sprintf@width+1)& (0+255),w,b
  3942  001226  B4D8               	btfsc	status,2,c
  3943  001228  D075               	goto	l266
  3944                           
  3945                           ; BSR set to: 0
  3946                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  3947                           
  3948                           ; BSR set to: 0
  3949                           
  3950                           ;doprnt.c: 1416: do
  3951  00122A  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  3952  00122E  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  3953  001232  0E30               	movlw	48
  3954  001234  6EDF               	movwf	indf2,c
  3955                           
  3956                           ; BSR set to: 0
  3957  001236  4BB1               	infsnz	sprintf@sp& (0+255),f,b
  3958  001238  2BB2               	incf	(sprintf@sp+1)& (0+255),f,b
  3959                           
  3960                           ; BSR set to: 0
  3961                           ;doprnt.c: 1418: while(--width);
  3962  00123A  07CF               	decf	sprintf@width& (0+255),f,b
  3963  00123C  A0D8               	btfss	status,0,c
  3964  00123E  07D0               	decf	(sprintf@width+1)& (0+255),f,b
  3965  001240  D7F0               	goto	l257
  3966  001242                     l256:
  3967                           
  3968                           ; BSR set to: 0
  3969                           ;doprnt.c: 1422: {
  3970                           ;doprnt.c: 1424: if(width
  3971                           ;doprnt.c: 1428: )
  3972                           
  3973                           ; BSR set to: 0
  3974  001242  51CF               	movf	sprintf@width& (0+255),w,b
  3975  001244  11D0               	iorwf	(sprintf@width+1)& (0+255),w,b
  3976  001246  B4D8               	btfsc	status,2,c
  3977  001248  D00F               	goto	u3970
  3978  00124A                     u3960:
  3979                           
  3980                           ; BSR set to: 0
  3981                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  3982                           
  3983                           ; BSR set to: 0
  3984                           
  3985                           ;doprnt.c: 1429: do
  3986  00124A  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  3987  00124E  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  3988  001252  0E20               	movlw	32
  3989  001254  6EDF               	movwf	indf2,c
  3990                           
  3991                           ; BSR set to: 0
  3992  001256  4BB1               	infsnz	sprintf@sp& (0+255),f,b
  3993  001258  2BB2               	incf	(sprintf@sp+1)& (0+255),f,b
  3994                           
  3995                           ; BSR set to: 0
  3996                           ;doprnt.c: 1431: while(--width);
  3997  00125A  07CF               	decf	sprintf@width& (0+255),f,b
  3998  00125C  A0D8               	btfss	status,0,c
  3999  00125E  07D0               	decf	(sprintf@width+1)& (0+255),f,b
  4000  001260  51CF               	movf	sprintf@width& (0+255),w,b
  4001  001262  11D0               	iorwf	(sprintf@width+1)& (0+255),w,b
  4002  001264  A4D8               	btfss	status,2,c
  4003  001266  D7F1               	goto	u3960
  4004  001268                     u3970:
  4005                           
  4006                           ; BSR set to: 0
  4007                           ;doprnt.c: 1438: if(flag & 0x03)
  4008                           
  4009                           ; BSR set to: 0
  4010                           
  4011                           ; BSR set to: 0
  4012  001268  0E03               	movlw	3
  4013  00126A  15CD               	andwf	sprintf@flag& (0+255),w,b
  4014  00126C  6FB8               	movwf	??_sprintf& (0+255),b
  4015  00126E  0E00               	movlw	0
  4016  001270  15CE               	andwf	(sprintf@flag+1)& (0+255),w,b
  4017  001272  6FB9               	movwf	(??_sprintf+1)& (0+255),b
  4018  001274  51B8               	movf	??_sprintf& (0+255),w,b
  4019  001276  11B9               	iorwf	(??_sprintf+1)& (0+255),w,b
  4020  001278  B4D8               	btfsc	status,2,c
  4021  00127A  D04C               	goto	l266
  4022                           
  4023                           ; BSR set to: 0
  4024                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  4025  00127C  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  4026  001280  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  4027  001284  0E2D               	movlw	45
  4028  001286  6EDF               	movwf	indf2,c
  4029  001288  D043               	goto	l3744
  4030  00128A                     l3740:
  4031                           
  4032                           ; BSR set to: 0
  4033                           ;doprnt.c: 1478: {
  4034                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4035  00128A  C0D4  F0B8         	movff	sprintf@prec,??_sprintf
  4036  00128E  C0D5  F0B9         	movff	sprintf@prec+1,??_sprintf+1
  4037  001292  90D8               	bcf	status,0,c
  4038  001294  37B8               	rlcf	??_sprintf& (0+255),f,b
  4039  001296  37B9               	rlcf	(??_sprintf+1)& (0+255),f,b
  4040  001298  90D8               	bcf	status,0,c
  4041  00129A  37B8               	rlcf	??_sprintf& (0+255),f,b
  4042  00129C  37B9               	rlcf	(??_sprintf+1)& (0+255),f,b
  4043  00129E  0E01               	movlw	low _dpowers
  4044  0012A0  25B8               	addwf	??_sprintf& (0+255),w,b
  4045  0012A2  6EF6               	movwf	tblptrl,c
  4046  0012A4  0E08               	movlw	high _dpowers
  4047  0012A6  21B9               	addwfc	(??_sprintf+1)& (0+255),w,b
  4048  0012A8  6EF7               	movwf	tblptrh,c
  4049  0012AA                     	if	0	;There are less than 3 active tblptr bytes
  4050  0012AA                     	endif
  4051  0012AA  0009               	tblrd		*+
  4052  0012AC  CFF5 F064          	movff	tablat,___lldiv@divisor
  4053  0012B0  0009               	tblrd		*+
  4054  0012B2  CFF5 F065          	movff	tablat,___lldiv@divisor+1
  4055  0012B6  0009               	tblrd		*+
  4056  0012B8  CFF5 F066          	movff	tablat,___lldiv@divisor+2
  4057  0012BC  000A               	tblrd		*-
  4058  0012BE  CFF5 F067          	movff	tablat,___lldiv@divisor+3
  4059  0012C2  C0C7  F060         	movff	sprintf@val,___lldiv@dividend
  4060  0012C6  C0C8  F061         	movff	sprintf@val+1,___lldiv@dividend+1
  4061  0012CA  C0C9  F062         	movff	sprintf@val+2,___lldiv@dividend+2
  4062  0012CE  C0CA  F063         	movff	sprintf@val+3,___lldiv@dividend+3
  4063  0012D2  EC5F  F01B         	call	___lldiv	;wreg free
  4064  0012D6  C060  F06D         	movff	?___lldiv,___llmod@dividend
  4065  0012DA  C061  F06E         	movff	?___lldiv+1,___llmod@dividend+1
  4066  0012DE  C062  F06F         	movff	?___lldiv+2,___llmod@dividend+2
  4067  0012E2  C063  F070         	movff	?___lldiv+3,___llmod@dividend+3
  4068  0012E6  0E0A               	movlw	10
  4069  0012E8  0100               	movlb	0	; () banked
  4070  0012EA  6F71               	movwf	___llmod@divisor& (0+255),b
  4071  0012EC  0E00               	movlw	0
  4072  0012EE  6F72               	movwf	(___llmod@divisor+1)& (0+255),b
  4073  0012F0  0E00               	movlw	0
  4074  0012F2  6F73               	movwf	(___llmod@divisor+2)& (0+255),b
  4075  0012F4  0E00               	movlw	0
  4076  0012F6  6F74               	movwf	(___llmod@divisor+3)& (0+255),b
  4077  0012F8  EC55  F01C         	call	___llmod	;wreg free
  4078  0012FC  0100               	movlb	0	; () banked
  4079  0012FE  516D               	movf	?___llmod& (0+255),w,b
  4080  001300  0F30               	addlw	48
  4081  001302  6FD6               	movwf	sprintf@c& (0+255),b
  4082                           
  4083                           ; BSR set to: 0
  4084                           ;doprnt.c: 1523: }
  4085                           ;doprnt.c: 1524: ((*sp++ = (c)));
  4086  001304  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  4087  001308  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  4088  00130C  C0D6  FFDF         	movff	sprintf@c,indf2
  4089  001310                     l3744:
  4090                           
  4091                           ; BSR set to: 0
  4092  001310  4BB1               	infsnz	sprintf@sp& (0+255),f,b
  4093  001312  2BB2               	incf	(sprintf@sp+1)& (0+255),f,b
  4094  001314                     l266:
  4095                           
  4096                           ; BSR set to: 0
  4097                           
  4098                           ; BSR set to: 0
  4099  001314  07D4               	decf	sprintf@prec& (0+255),f,b
  4100  001316  A0D8               	btfss	status,0,c
  4101  001318  07D5               	decf	(sprintf@prec+1)& (0+255),f,b
  4102  00131A  29D4               	incf	sprintf@prec& (0+255),w,b
  4103  00131C  E1B6               	bnz	l3740
  4104  00131E  29D5               	incf	(sprintf@prec+1)& (0+255),w,b
  4105  001320  A4D8               	btfss	status,2,c
  4106  001322  D7B3               	goto	l267
  4107  001324                     u3990:
  4108                           
  4109                           ; BSR set to: 0
  4110                           
  4111                           ; BSR set to: 0
  4112                           
  4113                           ; BSR set to: 0
  4114  001324  C0B3  FFF6         	movff	sprintf@f,tblptrl
  4115  001328  C0B4  FFF7         	movff	sprintf@f+1,tblptrh
  4116  00132C  4BB3               	infsnz	sprintf@f& (0+255),f,b
  4117  00132E  2BB4               	incf	(sprintf@f+1)& (0+255),f,b
  4118  001330                     	if	0	;tblptru may be non-zero
  4119  001330                     	endif
  4120  001330                     	if	0	;tblptru may be non-zero
  4121  001330                     	endif
  4122  001330  0008               	tblrd		*
  4123  001332  CFF5 F0D6          	movff	tablat,sprintf@c
  4124  001336  51D6               	movf	sprintf@c& (0+255),w,b
  4125  001338  A4D8               	btfss	status,2,c
  4126  00133A  EF70  F004         	goto	l169
  4127  00133E                     u4000:
  4128                           
  4129                           ; BSR set to: 0
  4130                           ;doprnt.c: 1538: *sp = 0;
  4131                           
  4132                           ; BSR set to: 0
  4133                           
  4134                           ;doprnt.c: 1525: }
  4135                           ;doprnt.c: 1533: }
  4136                           ;doprnt.c: 1535: alldone:
  4137                           
  4138                           ; BSR set to: 0
  4139  00133E  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  4140  001342  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  4141  001346  0E00               	movlw	0
  4142  001348  6EDF               	movwf	indf2,c
  4143  00134A  0012               	return	
  4144  00134C                     __end_of_sprintf:
  4145                           	opt stack 0
  4146                           tblptru	equ	0xFF8
  4147                           tblptrh	equ	0xFF7
  4148                           tblptrl	equ	0xFF6
  4149                           tablat	equ	0xFF5
  4150                           prodh	equ	0xFF4
  4151                           prodl	equ	0xFF3
  4152                           postinc0	equ	0xFEE
  4153                           wreg	equ	0xFE8
  4154                           indf2	equ	0xFDF
  4155                           postinc2	equ	0xFDE
  4156                           postdec2	equ	0xFDD
  4157                           fsr2h	equ	0xFDA
  4158                           fsr2l	equ	0xFD9
  4159                           status	equ	0xFD8
  4160                           
  4161 ;; *************** function _scale *****************
  4162 ;; Defined at:
  4163 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  4164 ;; Parameters:    Size  Location     Type
  4165 ;;  scl             1    wreg     char 
  4166 ;; Auto vars:     Size  Location     Type
  4167 ;;  scl             1   41[BANK0 ] char 
  4168 ;; Return value:  Size  Location     Type
  4169 ;;                  3   35[BANK0 ] char 
  4170 ;; Registers used:
  4171 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4172 ;; Tracked objects:
  4173 ;;		On entry : 0/0
  4174 ;;		On exit  : 0/0
  4175 ;;		Unchanged: 0/0
  4176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4177 ;;      Params:         0       3       0       0       0       0       0       0       0
  4178 ;;      Locals:         0       4       0       0       0       0       0       0       0
  4179 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4180 ;;      Totals:         0       7       0       0       0       0       0       0       0
  4181 ;;Total ram usage:        7 bytes
  4182 ;; Hardware stack levels used:    1
  4183 ;; Hardware stack levels required when called:    5
  4184 ;; This function calls:
  4185 ;;		___awdiv
  4186 ;;		___awmod
  4187 ;;		___ftmul
  4188 ;;		___wmul
  4189 ;; This function is called by:
  4190 ;;		_sprintf
  4191 ;; This function uses a non-reentrant model
  4192 ;;
  4193                           
  4194                           	psect	text3
  4195  001932                     __ptext3:
  4196                           	opt stack 0
  4197  001932                     _scale:
  4198                           	opt stack 24
  4199                           
  4200                           ; BSR set to: 0
  4201                           ;incstack = 0
  4202                           ;scale@scl stored from wreg
  4203  001932  0100               	movlb	0	; () banked
  4204  001934  6F89               	movwf	scale@scl& (0+255),b
  4205                           
  4206                           ;doprnt.c: 428: if(scl < 0) {
  4207  001936  0100               	movlb	0	; () banked
  4208  001938  AF89               	btfss	scale@scl& (0+255),7,b
  4209  00193A  D10C               	goto	l158
  4210                           
  4211                           ; BSR set to: 0
  4212                           ;doprnt.c: 429: scl = -scl;
  4213  00193C  6D89               	negf	scale@scl& (0+255),b
  4214                           
  4215                           ;doprnt.c: 430: if(scl>=110)
  4216  00193E  5189               	movf	scale@scl& (0+255),w,b
  4217  001940  0A80               	xorlw	128
  4218  001942  0F12               	addlw	-238
  4219  001944  A0D8               	btfss	status,0,c
  4220  001946  D097               	goto	l159
  4221                           
  4222                           ; BSR set to: 0
  4223                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4224  001948  0E00               	movlw	0
  4225  00194A  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4226  00194C  0E03               	movlw	3
  4227  00194E  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4228  001950  0E00               	movlw	0
  4229  001952  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  4230  001954  0E0A               	movlw	10
  4231  001956  6F68               	movwf	___awdiv@divisor& (0+255),b
  4232  001958  0E00               	movlw	0
  4233  00195A  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4234  00195C  0E64               	movlw	100
  4235  00195E  6F62               	movwf	___awmod@divisor& (0+255),b
  4236  001960  5189               	movf	scale@scl& (0+255),w,b
  4237  001962  6F60               	movwf	___awmod@dividend& (0+255),b
  4238  001964  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4239  001966  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  4240  001968  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  4241  00196A  EC1C  F01C         	call	___awmod	;wreg free
  4242  00196E  C060  F066         	movff	?___awmod,___awdiv@dividend
  4243  001972  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
  4244  001976  EC1C  F01B         	call	___awdiv	;wreg free
  4245  00197A  0E09               	movlw	9
  4246  00197C  0100               	movlb	0	; () banked
  4247  00197E  2566               	addwf	?___awdiv& (0+255),w,b
  4248  001980  6F6E               	movwf	___wmul@multiplier& (0+255),b
  4249  001982  0E00               	movlw	0
  4250  001984  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  4251  001986  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4252  001988  EC11  F01D         	call	___wmul	;wreg free
  4253  00198C  0E50               	movlw	low __npowers_
  4254  00198E  0100               	movlb	0	; () banked
  4255  001990  256E               	addwf	?___wmul& (0+255),w,b
  4256  001992  6EF6               	movwf	tblptrl,c
  4257  001994  0E08               	movlw	high __npowers_
  4258  001996  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4259  001998  6EF7               	movwf	tblptrh,c
  4260  00199A                     	if	0	;There are less than 3 active tblptr bytes
  4261  00199A                     	endif
  4262  00199A  0009               	tblrd		*+
  4263  00199C  CFF5 F077          	movff	tablat,___ftmul@f2
  4264  0019A0  0009               	tblrd		*+
  4265  0019A2  CFF5 F078          	movff	tablat,___ftmul@f2+1
  4266  0019A6  000A               	tblrd		*-
  4267  0019A8  CFF5 F079          	movff	tablat,___ftmul@f2+2
  4268  0019AC  0E00               	movlw	0
  4269  0019AE  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  4270  0019B0  0E64               	movlw	100
  4271  0019B2  6F68               	movwf	___awdiv@divisor& (0+255),b
  4272  0019B4  5189               	movf	scale@scl& (0+255),w,b
  4273  0019B6  6F66               	movwf	___awdiv@dividend& (0+255),b
  4274  0019B8  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  4275  0019BA  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  4276  0019BC  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  4277  0019BE  EC1C  F01B         	call	___awdiv	;wreg free
  4278  0019C2  0E12               	movlw	18
  4279  0019C4  0100               	movlb	0	; () banked
  4280  0019C6  2566               	addwf	?___awdiv& (0+255),w,b
  4281  0019C8  6F6E               	movwf	___wmul@multiplier& (0+255),b
  4282  0019CA  0E00               	movlw	0
  4283  0019CC  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  4284  0019CE  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4285  0019D0  0E00               	movlw	0
  4286  0019D2  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4287  0019D4  0E03               	movlw	3
  4288  0019D6  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4289  0019D8  EC11  F01D         	call	___wmul	;wreg free
  4290  0019DC  0E50               	movlw	low __npowers_
  4291  0019DE  0100               	movlb	0	; () banked
  4292  0019E0  256E               	addwf	?___wmul& (0+255),w,b
  4293  0019E2  6EF6               	movwf	tblptrl,c
  4294  0019E4  0E08               	movlw	high __npowers_
  4295  0019E6  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4296  0019E8  6EF7               	movwf	tblptrh,c
  4297  0019EA                     	if	0	;There are less than 3 active tblptr bytes
  4298  0019EA                     	endif
  4299  0019EA  0009               	tblrd		*+
  4300  0019EC  CFF5 F074          	movff	tablat,___ftmul@f1
  4301  0019F0  0009               	tblrd		*+
  4302  0019F2  CFF5 F075          	movff	tablat,___ftmul@f1+1
  4303  0019F6  000A               	tblrd		*-
  4304  0019F8  CFF5 F076          	movff	tablat,___ftmul@f1+2
  4305  0019FC  ECC3  F016         	call	___ftmul	;wreg free
  4306  001A00  C074  F086         	movff	?___ftmul,_scale$1429
  4307  001A04  C075  F087         	movff	?___ftmul+1,_scale$1429+1
  4308  001A08  C076  F088         	movff	?___ftmul+2,_scale$1429+2
  4309                           
  4310                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4311  001A0C  C086  F074         	movff	_scale$1429,___ftmul@f1
  4312  001A10  C087  F075         	movff	_scale$1429+1,___ftmul@f1+1
  4313  001A14  C088  F076         	movff	_scale$1429+2,___ftmul@f1+2
  4314  001A18  0E00               	movlw	0
  4315  001A1A  0100               	movlb	0	; () banked
  4316  001A1C  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4317  001A1E  0E03               	movlw	3
  4318  001A20  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4319  001A22  0E00               	movlw	0
  4320  001A24  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4321  001A26  0E0A               	movlw	10
  4322  001A28  6F62               	movwf	___awmod@divisor& (0+255),b
  4323  001A2A  5189               	movf	scale@scl& (0+255),w,b
  4324  001A2C  6F60               	movwf	___awmod@dividend& (0+255),b
  4325  001A2E  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4326  001A30  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  4327  001A32  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  4328  001A34  EC1C  F01C         	call	___awmod	;wreg free
  4329  001A38  C060  F06E         	movff	?___awmod,___wmul@multiplier
  4330  001A3C  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  4331  001A40  EC11  F01D         	call	___wmul	;wreg free
  4332  001A44  0E50               	movlw	low __npowers_
  4333  001A46  0100               	movlb	0	; () banked
  4334  001A48  256E               	addwf	?___wmul& (0+255),w,b
  4335  001A4A  6EF6               	movwf	tblptrl,c
  4336  001A4C  0E08               	movlw	high __npowers_
  4337  001A4E  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4338  001A50  6EF7               	movwf	tblptrh,c
  4339  001A52                     	if	0	;There are less than 3 active tblptr bytes
  4340  001A52                     	endif
  4341  001A52  0009               	tblrd		*+
  4342  001A54  CFF5 F077          	movff	tablat,___ftmul@f2
  4343  001A58  0009               	tblrd		*+
  4344  001A5A  CFF5 F078          	movff	tablat,___ftmul@f2+1
  4345  001A5E  000A               	tblrd		*-
  4346  001A60  CFF5 F079          	movff	tablat,___ftmul@f2+2
  4347  001A64  ECC3  F016         	call	___ftmul	;wreg free
  4348  001A68  C074  F083         	movff	?___ftmul,?_scale
  4349  001A6C  C075  F084         	movff	?___ftmul+1,?_scale+1
  4350  001A70  C076  F085         	movff	?___ftmul+2,?_scale+2
  4351  001A74  0012               	return	
  4352  001A76                     l159:
  4353                           
  4354                           ;doprnt.c: 432: else if(scl > 10)
  4355  001A76  0100               	movlb	0	; () banked
  4356  001A78  5189               	movf	scale@scl& (0+255),w,b
  4357  001A7A  0A80               	xorlw	128
  4358  001A7C  0F75               	addlw	-139
  4359  001A7E  A0D8               	btfss	status,0,c
  4360  001A80  D056               	goto	l162
  4361                           
  4362                           ; BSR set to: 0
  4363                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  4364  001A82  0E00               	movlw	0
  4365  001A84  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  4366  001A86  0E0A               	movlw	10
  4367  001A88  6F68               	movwf	___awdiv@divisor& (0+255),b
  4368  001A8A  5189               	movf	scale@scl& (0+255),w,b
  4369  001A8C  6F66               	movwf	___awdiv@dividend& (0+255),b
  4370  001A8E  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  4371  001A90  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  4372  001A92  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  4373  001A94  EC1C  F01B         	call	___awdiv	;wreg free
  4374  001A98  0E09               	movlw	9
  4375  001A9A  0100               	movlb	0	; () banked
  4376  001A9C  2566               	addwf	?___awdiv& (0+255),w,b
  4377  001A9E  6F6E               	movwf	___wmul@multiplier& (0+255),b
  4378  001AA0  0E00               	movlw	0
  4379  001AA2  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  4380  001AA4  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4381  001AA6  0E00               	movlw	0
  4382  001AA8  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4383  001AAA  0E03               	movlw	3
  4384  001AAC  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4385  001AAE  EC11  F01D         	call	___wmul	;wreg free
  4386  001AB2  0E50               	movlw	low __npowers_
  4387  001AB4  0100               	movlb	0	; () banked
  4388  001AB6  256E               	addwf	?___wmul& (0+255),w,b
  4389  001AB8  6EF6               	movwf	tblptrl,c
  4390  001ABA  0E08               	movlw	high __npowers_
  4391  001ABC  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4392  001ABE  6EF7               	movwf	tblptrh,c
  4393  001AC0                     	if	0	;There are less than 3 active tblptr bytes
  4394  001AC0                     	endif
  4395  001AC0  0009               	tblrd		*+
  4396  001AC2  CFF5 F074          	movff	tablat,___ftmul@f1
  4397  001AC6  0009               	tblrd		*+
  4398  001AC8  CFF5 F075          	movff	tablat,___ftmul@f1+1
  4399  001ACC  000A               	tblrd		*-
  4400  001ACE  CFF5 F076          	movff	tablat,___ftmul@f1+2
  4401  001AD2  0E00               	movlw	0
  4402  001AD4  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4403  001AD6  0E03               	movlw	3
  4404  001AD8  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4405  001ADA  0E00               	movlw	0
  4406  001ADC  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4407  001ADE  0E0A               	movlw	10
  4408  001AE0  6F62               	movwf	___awmod@divisor& (0+255),b
  4409  001AE2  5189               	movf	scale@scl& (0+255),w,b
  4410  001AE4  6F60               	movwf	___awmod@dividend& (0+255),b
  4411  001AE6  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4412  001AE8  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  4413  001AEA  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  4414  001AEC  EC1C  F01C         	call	___awmod	;wreg free
  4415  001AF0  C060  F06E         	movff	?___awmod,___wmul@multiplier
  4416  001AF4  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  4417  001AF8  EC11  F01D         	call	___wmul	;wreg free
  4418  001AFC  0E50               	movlw	low __npowers_
  4419  001AFE  0100               	movlb	0	; () banked
  4420  001B00  256E               	addwf	?___wmul& (0+255),w,b
  4421  001B02  6EF6               	movwf	tblptrl,c
  4422  001B04  0E08               	movlw	high __npowers_
  4423  001B06  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4424  001B08  6EF7               	movwf	tblptrh,c
  4425  001B0A                     	if	0	;There are less than 3 active tblptr bytes
  4426  001B0A                     	endif
  4427  001B0A  0009               	tblrd		*+
  4428  001B0C  CFF5 F077          	movff	tablat,___ftmul@f2
  4429  001B10  0009               	tblrd		*+
  4430  001B12  CFF5 F078          	movff	tablat,___ftmul@f2+1
  4431  001B16  000A               	tblrd		*-
  4432  001B18  CFF5 F079          	movff	tablat,___ftmul@f2+2
  4433  001B1C  ECC3  F016         	call	___ftmul	;wreg free
  4434  001B20  C074  F083         	movff	?___ftmul,?_scale
  4435  001B24  C075  F084         	movff	?___ftmul+1,?_scale+1
  4436  001B28  C076  F085         	movff	?___ftmul+2,?_scale+2
  4437  001B2C  0012               	return	
  4438  001B2E                     l162:
  4439                           
  4440                           ;doprnt.c: 434: return _npowers_[scl];
  4441  001B2E  0100               	movlb	0	; () banked
  4442  001B30  5189               	movf	scale@scl& (0+255),w,b
  4443  001B32  0D03               	mullw	3
  4444  001B34  0E50               	movlw	low __npowers_
  4445  001B36  24F3               	addwf	prodl,w,c
  4446  001B38  6EF6               	movwf	tblptrl,c
  4447  001B3A  0E08               	movlw	high __npowers_
  4448  001B3C  20F4               	addwfc	prodh,w,c
  4449  001B3E  6EF7               	movwf	tblptrh,c
  4450  001B40                     	if	0	;There are less than 3 active tblptr bytes
  4451  001B40                     	endif
  4452  001B40  0009               	tblrd		*+
  4453  001B42  CFF5 F083          	movff	tablat,?_scale
  4454  001B46  0009               	tblrd		*+
  4455  001B48  CFF5 F084          	movff	tablat,?_scale+1
  4456  001B4C  000A               	tblrd		*-
  4457  001B4E  CFF5 F085          	movff	tablat,?_scale+2
  4458                           
  4459                           ; BSR set to: 0
  4460  001B52  0012               	return	
  4461  001B54                     l158:
  4462                           
  4463                           ; BSR set to: 0
  4464                           ;doprnt.c: 435: }
  4465                           ;doprnt.c: 436: if(scl>=110)
  4466                           
  4467                           ; BSR set to: 0
  4468  001B54  5189               	movf	scale@scl& (0+255),w,b
  4469  001B56  0A80               	xorlw	128
  4470  001B58  0F12               	addlw	-238
  4471  001B5A  A0D8               	btfss	status,0,c
  4472  001B5C  D097               	goto	l163
  4473                           
  4474                           ; BSR set to: 0
  4475                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4476  001B5E  0E00               	movlw	0
  4477  001B60  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4478  001B62  0E03               	movlw	3
  4479  001B64  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4480  001B66  0E00               	movlw	0
  4481  001B68  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  4482  001B6A  0E0A               	movlw	10
  4483  001B6C  6F68               	movwf	___awdiv@divisor& (0+255),b
  4484  001B6E  0E00               	movlw	0
  4485  001B70  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4486  001B72  0E64               	movlw	100
  4487  001B74  6F62               	movwf	___awmod@divisor& (0+255),b
  4488  001B76  5189               	movf	scale@scl& (0+255),w,b
  4489  001B78  6F60               	movwf	___awmod@dividend& (0+255),b
  4490  001B7A  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4491  001B7C  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  4492  001B7E  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  4493  001B80  EC1C  F01C         	call	___awmod	;wreg free
  4494  001B84  C060  F066         	movff	?___awmod,___awdiv@dividend
  4495  001B88  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
  4496  001B8C  EC1C  F01B         	call	___awdiv	;wreg free
  4497  001B90  0E09               	movlw	9
  4498  001B92  0100               	movlb	0	; () banked
  4499  001B94  2566               	addwf	?___awdiv& (0+255),w,b
  4500  001B96  6F6E               	movwf	___wmul@multiplier& (0+255),b
  4501  001B98  0E00               	movlw	0
  4502  001B9A  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  4503  001B9C  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4504  001B9E  EC11  F01D         	call	___wmul	;wreg free
  4505  001BA2  0E29               	movlw	low __powers_
  4506  001BA4  0100               	movlb	0	; () banked
  4507  001BA6  256E               	addwf	?___wmul& (0+255),w,b
  4508  001BA8  6EF6               	movwf	tblptrl,c
  4509  001BAA  0E08               	movlw	high __powers_
  4510  001BAC  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4511  001BAE  6EF7               	movwf	tblptrh,c
  4512  001BB0                     	if	0	;There are less than 3 active tblptr bytes
  4513  001BB0                     	endif
  4514  001BB0  0009               	tblrd		*+
  4515  001BB2  CFF5 F077          	movff	tablat,___ftmul@f2
  4516  001BB6  0009               	tblrd		*+
  4517  001BB8  CFF5 F078          	movff	tablat,___ftmul@f2+1
  4518  001BBC  000A               	tblrd		*-
  4519  001BBE  CFF5 F079          	movff	tablat,___ftmul@f2+2
  4520  001BC2  0E00               	movlw	0
  4521  001BC4  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  4522  001BC6  0E64               	movlw	100
  4523  001BC8  6F68               	movwf	___awdiv@divisor& (0+255),b
  4524  001BCA  5189               	movf	scale@scl& (0+255),w,b
  4525  001BCC  6F66               	movwf	___awdiv@dividend& (0+255),b
  4526  001BCE  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  4527  001BD0  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  4528  001BD2  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  4529  001BD4  EC1C  F01B         	call	___awdiv	;wreg free
  4530  001BD8  0E12               	movlw	18
  4531  001BDA  0100               	movlb	0	; () banked
  4532  001BDC  2566               	addwf	?___awdiv& (0+255),w,b
  4533  001BDE  6F6E               	movwf	___wmul@multiplier& (0+255),b
  4534  001BE0  0E00               	movlw	0
  4535  001BE2  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  4536  001BE4  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4537  001BE6  0E00               	movlw	0
  4538  001BE8  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4539  001BEA  0E03               	movlw	3
  4540  001BEC  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4541  001BEE  EC11  F01D         	call	___wmul	;wreg free
  4542  001BF2  0E29               	movlw	low __powers_
  4543  001BF4  0100               	movlb	0	; () banked
  4544  001BF6  256E               	addwf	?___wmul& (0+255),w,b
  4545  001BF8  6EF6               	movwf	tblptrl,c
  4546  001BFA  0E08               	movlw	high __powers_
  4547  001BFC  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4548  001BFE  6EF7               	movwf	tblptrh,c
  4549  001C00                     	if	0	;There are less than 3 active tblptr bytes
  4550  001C00                     	endif
  4551  001C00  0009               	tblrd		*+
  4552  001C02  CFF5 F074          	movff	tablat,___ftmul@f1
  4553  001C06  0009               	tblrd		*+
  4554  001C08  CFF5 F075          	movff	tablat,___ftmul@f1+1
  4555  001C0C  000A               	tblrd		*-
  4556  001C0E  CFF5 F076          	movff	tablat,___ftmul@f1+2
  4557  001C12  ECC3  F016         	call	___ftmul	;wreg free
  4558  001C16  C074  F086         	movff	?___ftmul,_scale$1429
  4559  001C1A  C075  F087         	movff	?___ftmul+1,_scale$1429+1
  4560  001C1E  C076  F088         	movff	?___ftmul+2,_scale$1429+2
  4561                           
  4562                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4563  001C22  C086  F074         	movff	_scale$1429,___ftmul@f1
  4564  001C26  C087  F075         	movff	_scale$1429+1,___ftmul@f1+1
  4565  001C2A  C088  F076         	movff	_scale$1429+2,___ftmul@f1+2
  4566  001C2E  0E00               	movlw	0
  4567  001C30  0100               	movlb	0	; () banked
  4568  001C32  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4569  001C34  0E03               	movlw	3
  4570  001C36  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4571  001C38  0E00               	movlw	0
  4572  001C3A  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4573  001C3C  0E0A               	movlw	10
  4574  001C3E  6F62               	movwf	___awmod@divisor& (0+255),b
  4575  001C40  5189               	movf	scale@scl& (0+255),w,b
  4576  001C42  6F60               	movwf	___awmod@dividend& (0+255),b
  4577  001C44  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4578  001C46  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  4579  001C48  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  4580  001C4A  EC1C  F01C         	call	___awmod	;wreg free
  4581  001C4E  C060  F06E         	movff	?___awmod,___wmul@multiplier
  4582  001C52  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  4583  001C56  EC11  F01D         	call	___wmul	;wreg free
  4584  001C5A  0E29               	movlw	low __powers_
  4585  001C5C  0100               	movlb	0	; () banked
  4586  001C5E  256E               	addwf	?___wmul& (0+255),w,b
  4587  001C60  6EF6               	movwf	tblptrl,c
  4588  001C62  0E08               	movlw	high __powers_
  4589  001C64  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4590  001C66  6EF7               	movwf	tblptrh,c
  4591  001C68                     	if	0	;There are less than 3 active tblptr bytes
  4592  001C68                     	endif
  4593  001C68  0009               	tblrd		*+
  4594  001C6A  CFF5 F077          	movff	tablat,___ftmul@f2
  4595  001C6E  0009               	tblrd		*+
  4596  001C70  CFF5 F078          	movff	tablat,___ftmul@f2+1
  4597  001C74  000A               	tblrd		*-
  4598  001C76  CFF5 F079          	movff	tablat,___ftmul@f2+2
  4599  001C7A  ECC3  F016         	call	___ftmul	;wreg free
  4600  001C7E  C074  F083         	movff	?___ftmul,?_scale
  4601  001C82  C075  F084         	movff	?___ftmul+1,?_scale+1
  4602  001C86  C076  F085         	movff	?___ftmul+2,?_scale+2
  4603  001C8A  0012               	return	
  4604  001C8C                     l163:
  4605                           
  4606                           ;doprnt.c: 438: else if(scl > 10)
  4607  001C8C  0100               	movlb	0	; () banked
  4608  001C8E  5189               	movf	scale@scl& (0+255),w,b
  4609  001C90  0A80               	xorlw	128
  4610  001C92  0F75               	addlw	-139
  4611  001C94  A0D8               	btfss	status,0,c
  4612  001C96  D056               	goto	l165
  4613                           
  4614                           ; BSR set to: 0
  4615                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  4616  001C98  0E00               	movlw	0
  4617  001C9A  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  4618  001C9C  0E0A               	movlw	10
  4619  001C9E  6F68               	movwf	___awdiv@divisor& (0+255),b
  4620  001CA0  5189               	movf	scale@scl& (0+255),w,b
  4621  001CA2  6F66               	movwf	___awdiv@dividend& (0+255),b
  4622  001CA4  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  4623  001CA6  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  4624  001CA8  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  4625  001CAA  EC1C  F01B         	call	___awdiv	;wreg free
  4626  001CAE  0E09               	movlw	9
  4627  001CB0  0100               	movlb	0	; () banked
  4628  001CB2  2566               	addwf	?___awdiv& (0+255),w,b
  4629  001CB4  6F6E               	movwf	___wmul@multiplier& (0+255),b
  4630  001CB6  0E00               	movlw	0
  4631  001CB8  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  4632  001CBA  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4633  001CBC  0E00               	movlw	0
  4634  001CBE  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4635  001CC0  0E03               	movlw	3
  4636  001CC2  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4637  001CC4  EC11  F01D         	call	___wmul	;wreg free
  4638  001CC8  0E29               	movlw	low __powers_
  4639  001CCA  0100               	movlb	0	; () banked
  4640  001CCC  256E               	addwf	?___wmul& (0+255),w,b
  4641  001CCE  6EF6               	movwf	tblptrl,c
  4642  001CD0  0E08               	movlw	high __powers_
  4643  001CD2  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4644  001CD4  6EF7               	movwf	tblptrh,c
  4645  001CD6                     	if	0	;There are less than 3 active tblptr bytes
  4646  001CD6                     	endif
  4647  001CD6  0009               	tblrd		*+
  4648  001CD8  CFF5 F074          	movff	tablat,___ftmul@f1
  4649  001CDC  0009               	tblrd		*+
  4650  001CDE  CFF5 F075          	movff	tablat,___ftmul@f1+1
  4651  001CE2  000A               	tblrd		*-
  4652  001CE4  CFF5 F076          	movff	tablat,___ftmul@f1+2
  4653  001CE8  0E00               	movlw	0
  4654  001CEA  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4655  001CEC  0E03               	movlw	3
  4656  001CEE  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4657  001CF0  0E00               	movlw	0
  4658  001CF2  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4659  001CF4  0E0A               	movlw	10
  4660  001CF6  6F62               	movwf	___awmod@divisor& (0+255),b
  4661  001CF8  5189               	movf	scale@scl& (0+255),w,b
  4662  001CFA  6F60               	movwf	___awmod@dividend& (0+255),b
  4663  001CFC  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4664  001CFE  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  4665  001D00  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  4666  001D02  EC1C  F01C         	call	___awmod	;wreg free
  4667  001D06  C060  F06E         	movff	?___awmod,___wmul@multiplier
  4668  001D0A  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  4669  001D0E  EC11  F01D         	call	___wmul	;wreg free
  4670  001D12  0E29               	movlw	low __powers_
  4671  001D14  0100               	movlb	0	; () banked
  4672  001D16  256E               	addwf	?___wmul& (0+255),w,b
  4673  001D18  6EF6               	movwf	tblptrl,c
  4674  001D1A  0E08               	movlw	high __powers_
  4675  001D1C  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4676  001D1E  6EF7               	movwf	tblptrh,c
  4677  001D20                     	if	0	;There are less than 3 active tblptr bytes
  4678  001D20                     	endif
  4679  001D20  0009               	tblrd		*+
  4680  001D22  CFF5 F077          	movff	tablat,___ftmul@f2
  4681  001D26  0009               	tblrd		*+
  4682  001D28  CFF5 F078          	movff	tablat,___ftmul@f2+1
  4683  001D2C  000A               	tblrd		*-
  4684  001D2E  CFF5 F079          	movff	tablat,___ftmul@f2+2
  4685  001D32  ECC3  F016         	call	___ftmul	;wreg free
  4686  001D36  C074  F083         	movff	?___ftmul,?_scale
  4687  001D3A  C075  F084         	movff	?___ftmul+1,?_scale+1
  4688  001D3E  C076  F085         	movff	?___ftmul+2,?_scale+2
  4689  001D42  0012               	return	
  4690  001D44                     l165:
  4691                           
  4692                           ;doprnt.c: 440: return _powers_[scl];
  4693  001D44  0100               	movlb	0	; () banked
  4694  001D46  5189               	movf	scale@scl& (0+255),w,b
  4695  001D48  0D03               	mullw	3
  4696  001D4A  0E29               	movlw	low __powers_
  4697  001D4C  24F3               	addwf	prodl,w,c
  4698  001D4E  6EF6               	movwf	tblptrl,c
  4699  001D50  0E08               	movlw	high __powers_
  4700  001D52  20F4               	addwfc	prodh,w,c
  4701  001D54  6EF7               	movwf	tblptrh,c
  4702  001D56                     	if	0	;There are less than 3 active tblptr bytes
  4703  001D56                     	endif
  4704  001D56  0009               	tblrd		*+
  4705  001D58  CFF5 F083          	movff	tablat,?_scale
  4706  001D5C  0009               	tblrd		*+
  4707  001D5E  CFF5 F084          	movff	tablat,?_scale+1
  4708  001D62  000A               	tblrd		*-
  4709  001D64  CFF5 F085          	movff	tablat,?_scale+2
  4710  001D68  0012               	return	
  4711  001D6A                     __end_of_scale:
  4712                           	opt stack 0
  4713                           tblptru	equ	0xFF8
  4714                           tblptrh	equ	0xFF7
  4715                           tblptrl	equ	0xFF6
  4716                           tablat	equ	0xFF5
  4717                           prodh	equ	0xFF4
  4718                           prodl	equ	0xFF3
  4719                           postinc0	equ	0xFEE
  4720                           wreg	equ	0xFE8
  4721                           indf2	equ	0xFDF
  4722                           postinc2	equ	0xFDE
  4723                           postdec2	equ	0xFDD
  4724                           fsr2h	equ	0xFDA
  4725                           fsr2l	equ	0xFD9
  4726                           status	equ	0xFD8
  4727                           
  4728 ;; *************** function _isdigit *****************
  4729 ;; Defined at:
  4730 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  4731 ;; Parameters:    Size  Location     Type
  4732 ;;  c               1    wreg     unsigned char 
  4733 ;; Auto vars:     Size  Location     Type
  4734 ;;  c               1    2[BANK0 ] unsigned char 
  4735 ;; Return value:  Size  Location     Type
  4736 ;;		None               void
  4737 ;; Registers used:
  4738 ;;		wreg, status,2, status,0
  4739 ;; Tracked objects:
  4740 ;;		On entry : 0/0
  4741 ;;		On exit  : 0/0
  4742 ;;		Unchanged: 0/0
  4743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4744 ;;      Params:         0       0       0       0       0       0       0       0       0
  4745 ;;      Locals:         0       2       0       0       0       0       0       0       0
  4746 ;;      Temps:          0       1       0       0       0       0       0       0       0
  4747 ;;      Totals:         0       3       0       0       0       0       0       0       0
  4748 ;;Total ram usage:        3 bytes
  4749 ;; Hardware stack levels used:    1
  4750 ;; Hardware stack levels required when called:    3
  4751 ;; This function calls:
  4752 ;;		Nothing
  4753 ;; This function is called by:
  4754 ;;		_sprintf
  4755 ;; This function uses a non-reentrant model
  4756 ;;
  4757                           
  4758                           	psect	text4
  4759  003ABA                     __ptext4:
  4760                           	opt stack 0
  4761  003ABA                     _isdigit:
  4762                           	opt stack 26
  4763                           
  4764                           ;incstack = 0
  4765                           ;isdigit@c stored from wreg
  4766  003ABA  0100               	movlb	0	; () banked
  4767  003ABC  6F62               	movwf	isdigit@c& (0+255),b
  4768  003ABE  0E00               	movlw	0
  4769  003AC0  0100               	movlb	0	; () banked
  4770  003AC2  6F61               	movwf	_isdigit$1015& (0+255),b
  4771                           
  4772                           ; BSR set to: 0
  4773  003AC4  0E3A               	movlw	58
  4774  003AC6  6162               	cpfslt	isdigit@c& (0+255),b
  4775  003AC8  D005               	goto	l640
  4776                           
  4777                           ; BSR set to: 0
  4778  003ACA  0E2F               	movlw	47
  4779  003ACC  6562               	cpfsgt	isdigit@c& (0+255),b
  4780  003ACE  D002               	goto	l640
  4781                           
  4782                           ; BSR set to: 0
  4783  003AD0  0E01               	movlw	1
  4784  003AD2  6F61               	movwf	_isdigit$1015& (0+255),b
  4785  003AD4                     l640:
  4786                           
  4787                           ; BSR set to: 0
  4788                           
  4789                           ; BSR set to: 0
  4790  003AD4  C061  F060         	movff	_isdigit$1015,??_isdigit
  4791  003AD8  3160               	rrcf	??_isdigit& (0+255),w,b
  4792  003ADA  0012               	return	
  4793  003ADC                     __end_of_isdigit:
  4794                           	opt stack 0
  4795                           tblptru	equ	0xFF8
  4796                           tblptrh	equ	0xFF7
  4797                           tblptrl	equ	0xFF6
  4798                           tablat	equ	0xFF5
  4799                           prodh	equ	0xFF4
  4800                           prodl	equ	0xFF3
  4801                           postinc0	equ	0xFEE
  4802                           wreg	equ	0xFE8
  4803                           indf2	equ	0xFDF
  4804                           postinc2	equ	0xFDE
  4805                           postdec2	equ	0xFDD
  4806                           fsr2h	equ	0xFDA
  4807                           fsr2l	equ	0xFD9
  4808                           status	equ	0xFD8
  4809                           
  4810 ;; *************** function _fround *****************
  4811 ;; Defined at:
  4812 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  4813 ;; Parameters:    Size  Location     Type
  4814 ;;  prec            1    wreg     unsigned char 
  4815 ;; Auto vars:     Size  Location     Type
  4816 ;;  prec            1   44[BANK0 ] unsigned char 
  4817 ;; Return value:  Size  Location     Type
  4818 ;;                  3   35[BANK0 ] unsigned char 
  4819 ;; Registers used:
  4820 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4821 ;; Tracked objects:
  4822 ;;		On entry : 0/0
  4823 ;;		On exit  : 0/0
  4824 ;;		Unchanged: 0/0
  4825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4826 ;;      Params:         0       3       0       0       0       0       0       0       0
  4827 ;;      Locals:         0       7       0       0       0       0       0       0       0
  4828 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4829 ;;      Totals:         0      10       0       0       0       0       0       0       0
  4830 ;;Total ram usage:       10 bytes
  4831 ;; Hardware stack levels used:    1
  4832 ;; Hardware stack levels required when called:    5
  4833 ;; This function calls:
  4834 ;;		___awdiv
  4835 ;;		___awmod
  4836 ;;		___ftmul
  4837 ;;		___wmul
  4838 ;; This function is called by:
  4839 ;;		_sprintf
  4840 ;; This function uses a non-reentrant model
  4841 ;;
  4842                           
  4843                           	psect	text5
  4844  001D6A                     __ptext5:
  4845                           	opt stack 0
  4846  001D6A                     _fround:
  4847                           	opt stack 24
  4848                           
  4849                           ; BSR set to: 0
  4850                           ;incstack = 0
  4851                           ;fround@prec stored from wreg
  4852  001D6A  0100               	movlb	0	; () banked
  4853  001D6C  6F8C               	movwf	fround@prec& (0+255),b
  4854                           
  4855                           ;doprnt.c: 413: if(prec>=110)
  4856  001D6E  0E6D               	movlw	109
  4857  001D70  0100               	movlb	0	; () banked
  4858  001D72  658C               	cpfsgt	fround@prec& (0+255),b
  4859  001D74  D0A6               	goto	l152
  4860                           
  4861                           ; BSR set to: 0
  4862                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4863  001D76  0E00               	movlw	0
  4864  001D78  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4865  001D7A  0E03               	movlw	3
  4866  001D7C  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4867  001D7E  0E00               	movlw	0
  4868  001D80  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  4869  001D82  0E0A               	movlw	10
  4870  001D84  6F68               	movwf	___awdiv@divisor& (0+255),b
  4871  001D86  0E00               	movlw	0
  4872  001D88  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4873  001D8A  0E64               	movlw	100
  4874  001D8C  6F62               	movwf	___awmod@divisor& (0+255),b
  4875  001D8E  C08C  F060         	movff	fround@prec,___awmod@dividend
  4876  001D92  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4877  001D94  EC1C  F01C         	call	___awmod	;wreg free
  4878  001D98  C060  F066         	movff	?___awmod,___awdiv@dividend
  4879  001D9C  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
  4880  001DA0  EC1C  F01B         	call	___awdiv	;wreg free
  4881  001DA4  0E09               	movlw	9
  4882  001DA6  0100               	movlb	0	; () banked
  4883  001DA8  2566               	addwf	?___awdiv& (0+255),w,b
  4884  001DAA  6F6E               	movwf	___wmul@multiplier& (0+255),b
  4885  001DAC  0E00               	movlw	0
  4886  001DAE  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  4887  001DB0  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4888  001DB2  EC11  F01D         	call	___wmul	;wreg free
  4889  001DB6  0E50               	movlw	low __npowers_
  4890  001DB8  0100               	movlb	0	; () banked
  4891  001DBA  256E               	addwf	?___wmul& (0+255),w,b
  4892  001DBC  6EF6               	movwf	tblptrl,c
  4893  001DBE  0E08               	movlw	high __npowers_
  4894  001DC0  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4895  001DC2  6EF7               	movwf	tblptrh,c
  4896  001DC4                     	if	0	;There are less than 3 active tblptr bytes
  4897  001DC4                     	endif
  4898  001DC4  0009               	tblrd		*+
  4899  001DC6  CFF5 F077          	movff	tablat,___ftmul@f2
  4900  001DCA  0009               	tblrd		*+
  4901  001DCC  CFF5 F078          	movff	tablat,___ftmul@f2+1
  4902  001DD0  000A               	tblrd		*-
  4903  001DD2  CFF5 F079          	movff	tablat,___ftmul@f2+2
  4904  001DD6  0E00               	movlw	0
  4905  001DD8  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  4906  001DDA  0E64               	movlw	100
  4907  001DDC  6F68               	movwf	___awdiv@divisor& (0+255),b
  4908  001DDE  C08C  F066         	movff	fround@prec,___awdiv@dividend
  4909  001DE2  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  4910  001DE4  EC1C  F01B         	call	___awdiv	;wreg free
  4911  001DE8  0E12               	movlw	18
  4912  001DEA  0100               	movlb	0	; () banked
  4913  001DEC  2566               	addwf	?___awdiv& (0+255),w,b
  4914  001DEE  6F6E               	movwf	___wmul@multiplier& (0+255),b
  4915  001DF0  0E00               	movlw	0
  4916  001DF2  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  4917  001DF4  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4918  001DF6  0E00               	movlw	0
  4919  001DF8  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4920  001DFA  0E03               	movlw	3
  4921  001DFC  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4922  001DFE  EC11  F01D         	call	___wmul	;wreg free
  4923  001E02  0E50               	movlw	low __npowers_
  4924  001E04  0100               	movlb	0	; () banked
  4925  001E06  256E               	addwf	?___wmul& (0+255),w,b
  4926  001E08  6EF6               	movwf	tblptrl,c
  4927  001E0A  0E08               	movlw	high __npowers_
  4928  001E0C  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4929  001E0E  6EF7               	movwf	tblptrh,c
  4930  001E10                     	if	0	;There are less than 3 active tblptr bytes
  4931  001E10                     	endif
  4932  001E10  0009               	tblrd		*+
  4933  001E12  CFF5 F074          	movff	tablat,___ftmul@f1
  4934  001E16  0009               	tblrd		*+
  4935  001E18  CFF5 F075          	movff	tablat,___ftmul@f1+1
  4936  001E1C  000A               	tblrd		*-
  4937  001E1E  CFF5 F076          	movff	tablat,___ftmul@f1+2
  4938  001E22  ECC3  F016         	call	___ftmul	;wreg free
  4939  001E26  C074  F089         	movff	?___ftmul,_fround$1427
  4940  001E2A  C075  F08A         	movff	?___ftmul+1,_fround$1427+1
  4941  001E2E  C076  F08B         	movff	?___ftmul+2,_fround$1427+2
  4942                           
  4943                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4944  001E32  0E00               	movlw	0
  4945  001E34  0100               	movlb	0	; () banked
  4946  001E36  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4947  001E38  0E03               	movlw	3
  4948  001E3A  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4949  001E3C  0E00               	movlw	0
  4950  001E3E  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4951  001E40  0E0A               	movlw	10
  4952  001E42  6F62               	movwf	___awmod@divisor& (0+255),b
  4953  001E44  C08C  F060         	movff	fround@prec,___awmod@dividend
  4954  001E48  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4955  001E4A  EC1C  F01C         	call	___awmod	;wreg free
  4956  001E4E  C060  F06E         	movff	?___awmod,___wmul@multiplier
  4957  001E52  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  4958  001E56  EC11  F01D         	call	___wmul	;wreg free
  4959  001E5A  0E50               	movlw	low __npowers_
  4960  001E5C  0100               	movlb	0	; () banked
  4961  001E5E  256E               	addwf	?___wmul& (0+255),w,b
  4962  001E60  6EF6               	movwf	tblptrl,c
  4963  001E62  0E08               	movlw	high __npowers_
  4964  001E64  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4965  001E66  6EF7               	movwf	tblptrh,c
  4966  001E68                     	if	0	;There are less than 3 active tblptr bytes
  4967  001E68                     	endif
  4968  001E68  0009               	tblrd		*+
  4969  001E6A  CFF5 F077          	movff	tablat,___ftmul@f2
  4970  001E6E  0009               	tblrd		*+
  4971  001E70  CFF5 F078          	movff	tablat,___ftmul@f2+1
  4972  001E74  000A               	tblrd		*-
  4973  001E76  CFF5 F079          	movff	tablat,___ftmul@f2+2
  4974  001E7A  C089  F074         	movff	_fround$1427,___ftmul@f1
  4975  001E7E  C08A  F075         	movff	_fround$1427+1,___ftmul@f1+1
  4976  001E82  C08B  F076         	movff	_fround$1427+2,___ftmul@f1+2
  4977  001E86  ECC3  F016         	call	___ftmul	;wreg free
  4978  001E8A  C074  F086         	movff	?___ftmul,_fround$1428
  4979  001E8E  C075  F087         	movff	?___ftmul+1,_fround$1428+1
  4980  001E92  C076  F088         	movff	?___ftmul+2,_fround$1428+2
  4981                           
  4982                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4983  001E96  C086  F074         	movff	_fround$1428,___ftmul@f1
  4984  001E9A  C087  F075         	movff	_fround$1428+1,___ftmul@f1+1
  4985  001E9E  C088  F076         	movff	_fround$1428+2,___ftmul@f1+2
  4986  001EA2  0E00               	movlw	0
  4987  001EA4  0100               	movlb	0	; () banked
  4988  001EA6  6F77               	movwf	___ftmul@f2& (0+255),b
  4989  001EA8  0E00               	movlw	0
  4990  001EAA  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  4991  001EAC  0E3F               	movlw	63
  4992  001EAE  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  4993  001EB0  ECC3  F016         	call	___ftmul	;wreg free
  4994  001EB4  C074  F083         	movff	?___ftmul,?_fround
  4995  001EB8  C075  F084         	movff	?___ftmul+1,?_fround+1
  4996  001EBC  C076  F085         	movff	?___ftmul+2,?_fround+2
  4997  001EC0  0012               	return	
  4998  001EC2                     l152:
  4999                           
  5000                           ;doprnt.c: 415: else if(prec > 10)
  5001  001EC2  0E0A               	movlw	10
  5002  001EC4  0100               	movlb	0	; () banked
  5003  001EC6  658C               	cpfsgt	fround@prec& (0+255),b
  5004  001EC8  D067               	goto	l155
  5005                           
  5006                           ; BSR set to: 0
  5007                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5008  001ECA  0E00               	movlw	0
  5009  001ECC  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5010  001ECE  0E03               	movlw	3
  5011  001ED0  6F70               	movwf	___wmul@multiplicand& (0+255),b
  5012  001ED2  0E00               	movlw	0
  5013  001ED4  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  5014  001ED6  0E0A               	movlw	10
  5015  001ED8  6F62               	movwf	___awmod@divisor& (0+255),b
  5016  001EDA  C08C  F060         	movff	fround@prec,___awmod@dividend
  5017  001EDE  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  5018  001EE0  EC1C  F01C         	call	___awmod	;wreg free
  5019  001EE4  C060  F06E         	movff	?___awmod,___wmul@multiplier
  5020  001EE8  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  5021  001EEC  EC11  F01D         	call	___wmul	;wreg free
  5022  001EF0  0E50               	movlw	low __npowers_
  5023  001EF2  0100               	movlb	0	; () banked
  5024  001EF4  256E               	addwf	?___wmul& (0+255),w,b
  5025  001EF6  6EF6               	movwf	tblptrl,c
  5026  001EF8  0E08               	movlw	high __npowers_
  5027  001EFA  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  5028  001EFC  6EF7               	movwf	tblptrh,c
  5029  001EFE                     	if	0	;There are less than 3 active tblptr bytes
  5030  001EFE                     	endif
  5031  001EFE  0009               	tblrd		*+
  5032  001F00  CFF5 F077          	movff	tablat,___ftmul@f2
  5033  001F04  0009               	tblrd		*+
  5034  001F06  CFF5 F078          	movff	tablat,___ftmul@f2+1
  5035  001F0A  000A               	tblrd		*-
  5036  001F0C  CFF5 F079          	movff	tablat,___ftmul@f2+2
  5037  001F10  0E00               	movlw	0
  5038  001F12  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  5039  001F14  0E0A               	movlw	10
  5040  001F16  6F68               	movwf	___awdiv@divisor& (0+255),b
  5041  001F18  C08C  F066         	movff	fround@prec,___awdiv@dividend
  5042  001F1C  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  5043  001F1E  EC1C  F01B         	call	___awdiv	;wreg free
  5044  001F22  0E09               	movlw	9
  5045  001F24  0100               	movlb	0	; () banked
  5046  001F26  2566               	addwf	?___awdiv& (0+255),w,b
  5047  001F28  6F6E               	movwf	___wmul@multiplier& (0+255),b
  5048  001F2A  0E00               	movlw	0
  5049  001F2C  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  5050  001F2E  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  5051  001F30  0E00               	movlw	0
  5052  001F32  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5053  001F34  0E03               	movlw	3
  5054  001F36  6F70               	movwf	___wmul@multiplicand& (0+255),b
  5055  001F38  EC11  F01D         	call	___wmul	;wreg free
  5056  001F3C  0E50               	movlw	low __npowers_
  5057  001F3E  0100               	movlb	0	; () banked
  5058  001F40  256E               	addwf	?___wmul& (0+255),w,b
  5059  001F42  6EF6               	movwf	tblptrl,c
  5060  001F44  0E08               	movlw	high __npowers_
  5061  001F46  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  5062  001F48  6EF7               	movwf	tblptrh,c
  5063  001F4A                     	if	0	;There are less than 3 active tblptr bytes
  5064  001F4A                     	endif
  5065  001F4A  0009               	tblrd		*+
  5066  001F4C  CFF5 F074          	movff	tablat,___ftmul@f1
  5067  001F50  0009               	tblrd		*+
  5068  001F52  CFF5 F075          	movff	tablat,___ftmul@f1+1
  5069  001F56  000A               	tblrd		*-
  5070  001F58  CFF5 F076          	movff	tablat,___ftmul@f1+2
  5071  001F5C  ECC3  F016         	call	___ftmul	;wreg free
  5072  001F60  C074  F089         	movff	?___ftmul,_fround$1427
  5073  001F64  C075  F08A         	movff	?___ftmul+1,_fround$1427+1
  5074  001F68  C076  F08B         	movff	?___ftmul+2,_fround$1427+2
  5075                           
  5076                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5077  001F6C  C089  F074         	movff	_fround$1427,___ftmul@f1
  5078  001F70  C08A  F075         	movff	_fround$1427+1,___ftmul@f1+1
  5079  001F74  C08B  F076         	movff	_fround$1427+2,___ftmul@f1+2
  5080  001F78  0E00               	movlw	0
  5081  001F7A  0100               	movlb	0	; () banked
  5082  001F7C  6F77               	movwf	___ftmul@f2& (0+255),b
  5083  001F7E  0E00               	movlw	0
  5084  001F80  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  5085  001F82  0E3F               	movlw	63
  5086  001F84  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  5087  001F86  ECC3  F016         	call	___ftmul	;wreg free
  5088  001F8A  C074  F083         	movff	?___ftmul,?_fround
  5089  001F8E  C075  F084         	movff	?___ftmul+1,?_fround+1
  5090  001F92  C076  F085         	movff	?___ftmul+2,?_fround+2
  5091  001F96  0012               	return	
  5092  001F98                     l155:
  5093                           
  5094                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  5095  001F98  0100               	movlb	0	; () banked
  5096  001F9A  518C               	movf	fround@prec& (0+255),w,b
  5097  001F9C  0D03               	mullw	3
  5098  001F9E  0E50               	movlw	low __npowers_
  5099  001FA0  24F3               	addwf	prodl,w,c
  5100  001FA2  6EF6               	movwf	tblptrl,c
  5101  001FA4  0E08               	movlw	high __npowers_
  5102  001FA6  20F4               	addwfc	prodh,w,c
  5103  001FA8  6EF7               	movwf	tblptrh,c
  5104  001FAA                     	if	0	;There are less than 3 active tblptr bytes
  5105  001FAA                     	endif
  5106  001FAA  0009               	tblrd		*+
  5107  001FAC  CFF5 F074          	movff	tablat,___ftmul@f1
  5108  001FB0  0009               	tblrd		*+
  5109  001FB2  CFF5 F075          	movff	tablat,___ftmul@f1+1
  5110  001FB6  000A               	tblrd		*-
  5111  001FB8  CFF5 F076          	movff	tablat,___ftmul@f1+2
  5112  001FBC  0E00               	movlw	0
  5113  001FBE  6F77               	movwf	___ftmul@f2& (0+255),b
  5114  001FC0  0E00               	movlw	0
  5115  001FC2  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  5116  001FC4  0E3F               	movlw	63
  5117  001FC6  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  5118  001FC8  ECC3  F016         	call	___ftmul	;wreg free
  5119  001FCC  C074  F083         	movff	?___ftmul,?_fround
  5120  001FD0  C075  F084         	movff	?___ftmul+1,?_fround+1
  5121  001FD4  C076  F085         	movff	?___ftmul+2,?_fround+2
  5122  001FD8  0012               	return	
  5123  001FDA                     __end_of_fround:
  5124                           	opt stack 0
  5125                           tblptru	equ	0xFF8
  5126                           tblptrh	equ	0xFF7
  5127                           tblptrl	equ	0xFF6
  5128                           tablat	equ	0xFF5
  5129                           prodh	equ	0xFF4
  5130                           prodl	equ	0xFF3
  5131                           postinc0	equ	0xFEE
  5132                           wreg	equ	0xFE8
  5133                           indf2	equ	0xFDF
  5134                           postinc2	equ	0xFDE
  5135                           postdec2	equ	0xFDD
  5136                           fsr2h	equ	0xFDA
  5137                           fsr2l	equ	0xFD9
  5138                           status	equ	0xFD8
  5139                           
  5140 ;; *************** function ___awmod *****************
  5141 ;; Defined at:
  5142 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  5143 ;; Parameters:    Size  Location     Type
  5144 ;;  dividend        2    0[BANK0 ] int 
  5145 ;;  divisor         2    2[BANK0 ] int 
  5146 ;; Auto vars:     Size  Location     Type
  5147 ;;  sign            1    5[BANK0 ] unsigned char 
  5148 ;;  counter         1    4[BANK0 ] unsigned char 
  5149 ;; Return value:  Size  Location     Type
  5150 ;;                  2    0[BANK0 ] int 
  5151 ;; Registers used:
  5152 ;;		wreg, status,2, status,0
  5153 ;; Tracked objects:
  5154 ;;		On entry : 0/0
  5155 ;;		On exit  : 0/0
  5156 ;;		Unchanged: 0/0
  5157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5158 ;;      Params:         0       4       0       0       0       0       0       0       0
  5159 ;;      Locals:         0       2       0       0       0       0       0       0       0
  5160 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5161 ;;      Totals:         0       6       0       0       0       0       0       0       0
  5162 ;;Total ram usage:        6 bytes
  5163 ;; Hardware stack levels used:    1
  5164 ;; Hardware stack levels required when called:    3
  5165 ;; This function calls:
  5166 ;;		Nothing
  5167 ;; This function is called by:
  5168 ;;		_fround
  5169 ;;		_scale
  5170 ;; This function uses a non-reentrant model
  5171 ;;
  5172                           
  5173                           	psect	text6
  5174  003838                     __ptext6:
  5175                           	opt stack 0
  5176  003838                     ___awmod:
  5177                           	opt stack 25
  5178                           
  5179                           ;incstack = 0
  5180  003838  0E00               	movlw	0
  5181  00383A  0100               	movlb	0	; () banked
  5182  00383C  6F65               	movwf	___awmod@sign& (0+255),b
  5183                           
  5184                           ; BSR set to: 0
  5185  00383E  AF61               	btfss	(___awmod@dividend+1)& (0+255),7,b
  5186  003840  D006               	goto	l451
  5187                           
  5188                           ; BSR set to: 0
  5189  003842  6D60               	negf	___awmod@dividend& (0+255),b
  5190  003844  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  5191  003846  B0D8               	btfsc	status,0,c
  5192  003848  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  5193                           
  5194                           ; BSR set to: 0
  5195  00384A  0E01               	movlw	1
  5196  00384C  6F65               	movwf	___awmod@sign& (0+255),b
  5197  00384E                     l451:
  5198                           
  5199                           ; BSR set to: 0
  5200                           
  5201                           ; BSR set to: 0
  5202  00384E  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5203  003850  D004               	goto	l452
  5204                           
  5205                           ; BSR set to: 0
  5206  003852  6D62               	negf	___awmod@divisor& (0+255),b
  5207  003854  1F63               	comf	(___awmod@divisor+1)& (0+255),f,b
  5208  003856  B0D8               	btfsc	status,0,c
  5209  003858  2B63               	incf	(___awmod@divisor+1)& (0+255),f,b
  5210  00385A                     l452:
  5211                           
  5212                           ; BSR set to: 0
  5213                           
  5214                           ; BSR set to: 0
  5215  00385A  5162               	movf	___awmod@divisor& (0+255),w,b
  5216  00385C  1163               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  5217  00385E  B4D8               	btfsc	status,2,c
  5218  003860  D018               	goto	l459
  5219                           
  5220                           ; BSR set to: 0
  5221  003862  0E01               	movlw	1
  5222  003864  6F64               	movwf	___awmod@counter& (0+255),b
  5223  003866  D004               	goto	l454
  5224  003868                     
  5225                           ; BSR set to: 0
  5226                           
  5227                           ; BSR set to: 0
  5228  003868  90D8               	bcf	status,0,c
  5229  00386A  3762               	rlcf	___awmod@divisor& (0+255),f,b
  5230  00386C  3763               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  5231  00386E  2B64               	incf	___awmod@counter& (0+255),f,b
  5232  003870                     l454:
  5233                           
  5234                           ; BSR set to: 0
  5235                           
  5236                           ; BSR set to: 0
  5237  003870  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5238  003872  D7FA               	goto	l455
  5239  003874                     u2780:
  5240                           
  5241                           ; BSR set to: 0
  5242                           
  5243                           ; BSR set to: 0
  5244                           
  5245                           ; BSR set to: 0
  5246  003874  5162               	movf	___awmod@divisor& (0+255),w,b
  5247  003876  5D60               	subwf	___awmod@dividend& (0+255),w,b
  5248  003878  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  5249  00387A  5961               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  5250  00387C  A0D8               	btfss	status,0,c
  5251  00387E  D004               	goto	l458
  5252                           
  5253                           ; BSR set to: 0
  5254  003880  5162               	movf	___awmod@divisor& (0+255),w,b
  5255  003882  5F60               	subwf	___awmod@dividend& (0+255),f,b
  5256  003884  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  5257  003886  5B61               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  5258  003888                     l458:
  5259                           
  5260                           ; BSR set to: 0
  5261                           
  5262                           ; BSR set to: 0
  5263  003888  90D8               	bcf	status,0,c
  5264  00388A  3363               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  5265  00388C  3362               	rrcf	___awmod@divisor& (0+255),f,b
  5266                           
  5267                           ; BSR set to: 0
  5268  00388E  2F64               	decfsz	___awmod@counter& (0+255),f,b
  5269  003890  D7F1               	goto	u2780
  5270  003892                     l459:
  5271                           
  5272                           ; BSR set to: 0
  5273                           
  5274                           ; BSR set to: 0
  5275                           
  5276                           ; BSR set to: 0
  5277  003892  5165               	movf	___awmod@sign& (0+255),w,b
  5278  003894  B4D8               	btfsc	status,2,c
  5279  003896  D004               	goto	l460
  5280                           
  5281                           ; BSR set to: 0
  5282  003898  6D60               	negf	___awmod@dividend& (0+255),b
  5283  00389A  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  5284  00389C  B0D8               	btfsc	status,0,c
  5285  00389E  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  5286  0038A0                     l460:
  5287                           
  5288                           ; BSR set to: 0
  5289                           
  5290                           ; BSR set to: 0
  5291  0038A0  C060  F060         	movff	___awmod@dividend,?___awmod
  5292  0038A4  C061  F061         	movff	___awmod@dividend+1,?___awmod+1
  5293  0038A8  0012               	return	
  5294  0038AA                     __end_of___awmod:
  5295                           	opt stack 0
  5296                           tblptru	equ	0xFF8
  5297                           tblptrh	equ	0xFF7
  5298                           tblptrl	equ	0xFF6
  5299                           tablat	equ	0xFF5
  5300                           prodh	equ	0xFF4
  5301                           prodl	equ	0xFF3
  5302                           postinc0	equ	0xFEE
  5303                           wreg	equ	0xFE8
  5304                           indf2	equ	0xFDF
  5305                           postinc2	equ	0xFDE
  5306                           postdec2	equ	0xFDD
  5307                           fsr2h	equ	0xFDA
  5308                           fsr2l	equ	0xFD9
  5309                           status	equ	0xFD8
  5310                           
  5311 ;; *************** function ___awdiv *****************
  5312 ;; Defined at:
  5313 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  5314 ;; Parameters:    Size  Location     Type
  5315 ;;  dividend        2    6[BANK0 ] int 
  5316 ;;  divisor         2    8[BANK0 ] int 
  5317 ;; Auto vars:     Size  Location     Type
  5318 ;;  quotient        2   12[BANK0 ] int 
  5319 ;;  sign            1   11[BANK0 ] unsigned char 
  5320 ;;  counter         1   10[BANK0 ] unsigned char 
  5321 ;; Return value:  Size  Location     Type
  5322 ;;                  2    6[BANK0 ] int 
  5323 ;; Registers used:
  5324 ;;		wreg, status,2, status,0
  5325 ;; Tracked objects:
  5326 ;;		On entry : 0/0
  5327 ;;		On exit  : 0/0
  5328 ;;		Unchanged: 0/0
  5329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5330 ;;      Params:         0       4       0       0       0       0       0       0       0
  5331 ;;      Locals:         0       4       0       0       0       0       0       0       0
  5332 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5333 ;;      Totals:         0       8       0       0       0       0       0       0       0
  5334 ;;Total ram usage:        8 bytes
  5335 ;; Hardware stack levels used:    1
  5336 ;; Hardware stack levels required when called:    3
  5337 ;; This function calls:
  5338 ;;		Nothing
  5339 ;; This function is called by:
  5340 ;;		_fround
  5341 ;;		_scale
  5342 ;;		_sprintf
  5343 ;; This function uses a non-reentrant model
  5344 ;;
  5345                           
  5346                           	psect	text7
  5347  003638                     __ptext7:
  5348                           	opt stack 0
  5349  003638                     ___awdiv:
  5350                           	opt stack 25
  5351                           
  5352                           ; BSR set to: 0
  5353                           ;incstack = 0
  5354  003638  0E00               	movlw	0
  5355  00363A  0100               	movlb	0	; () banked
  5356  00363C  6F6B               	movwf	___awdiv@sign& (0+255),b
  5357                           
  5358                           ; BSR set to: 0
  5359  00363E  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5360  003640  D006               	goto	l438
  5361                           
  5362                           ; BSR set to: 0
  5363  003642  6D68               	negf	___awdiv@divisor& (0+255),b
  5364  003644  1F69               	comf	(___awdiv@divisor+1)& (0+255),f,b
  5365  003646  B0D8               	btfsc	status,0,c
  5366  003648  2B69               	incf	(___awdiv@divisor+1)& (0+255),f,b
  5367                           
  5368                           ; BSR set to: 0
  5369  00364A  0E01               	movlw	1
  5370  00364C  6F6B               	movwf	___awdiv@sign& (0+255),b
  5371  00364E                     l438:
  5372                           
  5373                           ; BSR set to: 0
  5374                           
  5375                           ; BSR set to: 0
  5376  00364E  AF67               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  5377  003650  D006               	goto	l439
  5378                           
  5379                           ; BSR set to: 0
  5380  003652  6D66               	negf	___awdiv@dividend& (0+255),b
  5381  003654  1F67               	comf	(___awdiv@dividend+1)& (0+255),f,b
  5382  003656  B0D8               	btfsc	status,0,c
  5383  003658  2B67               	incf	(___awdiv@dividend+1)& (0+255),f,b
  5384                           
  5385                           ; BSR set to: 0
  5386  00365A  0E01               	movlw	1
  5387  00365C  1B6B               	xorwf	___awdiv@sign& (0+255),f,b
  5388  00365E                     l439:
  5389                           
  5390                           ; BSR set to: 0
  5391                           
  5392                           ; BSR set to: 0
  5393  00365E  0E00               	movlw	0
  5394  003660  6F6D               	movwf	(___awdiv@quotient+1)& (0+255),b
  5395  003662  0E00               	movlw	0
  5396  003664  6F6C               	movwf	___awdiv@quotient& (0+255),b
  5397                           
  5398                           ; BSR set to: 0
  5399  003666  5168               	movf	___awdiv@divisor& (0+255),w,b
  5400  003668  1169               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  5401  00366A  B4D8               	btfsc	status,2,c
  5402  00366C  D01C               	goto	l446
  5403                           
  5404                           ; BSR set to: 0
  5405  00366E  0E01               	movlw	1
  5406  003670  6F6A               	movwf	___awdiv@counter& (0+255),b
  5407  003672  D004               	goto	l441
  5408  003674                     
  5409                           ; BSR set to: 0
  5410                           
  5411                           ; BSR set to: 0
  5412  003674  90D8               	bcf	status,0,c
  5413  003676  3768               	rlcf	___awdiv@divisor& (0+255),f,b
  5414  003678  3769               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  5415  00367A  2B6A               	incf	___awdiv@counter& (0+255),f,b
  5416  00367C                     l441:
  5417                           
  5418                           ; BSR set to: 0
  5419                           
  5420                           ; BSR set to: 0
  5421  00367C  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5422  00367E  D7FA               	goto	l442
  5423  003680                     u2720:
  5424                           
  5425                           ; BSR set to: 0
  5426                           
  5427                           ; BSR set to: 0
  5428                           
  5429                           ; BSR set to: 0
  5430  003680  90D8               	bcf	status,0,c
  5431  003682  376C               	rlcf	___awdiv@quotient& (0+255),f,b
  5432  003684  376D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  5433                           
  5434                           ; BSR set to: 0
  5435  003686  5168               	movf	___awdiv@divisor& (0+255),w,b
  5436  003688  5D66               	subwf	___awdiv@dividend& (0+255),w,b
  5437  00368A  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5438  00368C  5967               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  5439  00368E  A0D8               	btfss	status,0,c
  5440  003690  D005               	goto	l445
  5441                           
  5442                           ; BSR set to: 0
  5443  003692  5168               	movf	___awdiv@divisor& (0+255),w,b
  5444  003694  5F66               	subwf	___awdiv@dividend& (0+255),f,b
  5445  003696  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5446  003698  5B67               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  5447                           
  5448                           ; BSR set to: 0
  5449  00369A  816C               	bsf	___awdiv@quotient& (0+255),0,b
  5450  00369C                     l445:
  5451                           
  5452                           ; BSR set to: 0
  5453                           
  5454                           ; BSR set to: 0
  5455  00369C  90D8               	bcf	status,0,c
  5456  00369E  3369               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  5457  0036A0  3368               	rrcf	___awdiv@divisor& (0+255),f,b
  5458                           
  5459                           ; BSR set to: 0
  5460  0036A2  2F6A               	decfsz	___awdiv@counter& (0+255),f,b
  5461  0036A4  D7ED               	goto	u2720
  5462  0036A6                     l446:
  5463                           
  5464                           ; BSR set to: 0
  5465                           
  5466                           ; BSR set to: 0
  5467                           
  5468                           ; BSR set to: 0
  5469  0036A6  516B               	movf	___awdiv@sign& (0+255),w,b
  5470  0036A8  B4D8               	btfsc	status,2,c
  5471  0036AA  D004               	goto	l447
  5472                           
  5473                           ; BSR set to: 0
  5474  0036AC  6D6C               	negf	___awdiv@quotient& (0+255),b
  5475  0036AE  1F6D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  5476  0036B0  B0D8               	btfsc	status,0,c
  5477  0036B2  2B6D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  5478  0036B4                     l447:
  5479                           
  5480                           ; BSR set to: 0
  5481                           
  5482                           ; BSR set to: 0
  5483  0036B4  C06C  F066         	movff	___awdiv@quotient,?___awdiv
  5484  0036B8  C06D  F067         	movff	___awdiv@quotient+1,?___awdiv+1
  5485  0036BC  0012               	return	
  5486  0036BE                     __end_of___awdiv:
  5487                           	opt stack 0
  5488                           tblptru	equ	0xFF8
  5489                           tblptrh	equ	0xFF7
  5490                           tblptrl	equ	0xFF6
  5491                           tablat	equ	0xFF5
  5492                           prodh	equ	0xFF4
  5493                           prodl	equ	0xFF3
  5494                           postinc0	equ	0xFEE
  5495                           wreg	equ	0xFE8
  5496                           indf2	equ	0xFDF
  5497                           postinc2	equ	0xFDE
  5498                           postdec2	equ	0xFDD
  5499                           fsr2h	equ	0xFDA
  5500                           fsr2l	equ	0xFD9
  5501                           status	equ	0xFD8
  5502                           
  5503 ;; *************** function __tdiv_to_l_ *****************
  5504 ;; Defined at:
  5505 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdivl.c"
  5506 ;; Parameters:    Size  Location     Type
  5507 ;;  f1              3    0[BANK0 ] float 
  5508 ;;  f2              3    3[BANK0 ] float 
  5509 ;; Auto vars:     Size  Location     Type
  5510 ;;  quot            4    9[BANK0 ] unsigned long 
  5511 ;;  exp1            1   14[BANK0 ] unsigned char 
  5512 ;;  cntr            1   13[BANK0 ] unsigned char 
  5513 ;; Return value:  Size  Location     Type
  5514 ;;                  4    0[BANK0 ] unsigned long 
  5515 ;; Registers used:
  5516 ;;		wreg, status,2, status,0
  5517 ;; Tracked objects:
  5518 ;;		On entry : 0/0
  5519 ;;		On exit  : 0/0
  5520 ;;		Unchanged: 0/0
  5521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5522 ;;      Params:         0       6       0       0       0       0       0       0       0
  5523 ;;      Locals:         0       6       0       0       0       0       0       0       0
  5524 ;;      Temps:          0       3       0       0       0       0       0       0       0
  5525 ;;      Totals:         0      15       0       0       0       0       0       0       0
  5526 ;;Total ram usage:       15 bytes
  5527 ;; Hardware stack levels used:    1
  5528 ;; Hardware stack levels required when called:    3
  5529 ;; This function calls:
  5530 ;;		Nothing
  5531 ;; This function is called by:
  5532 ;;		_sprintf
  5533 ;; This function uses a non-reentrant model
  5534 ;;
  5535                           
  5536                           	psect	text8
  5537  0026C6                     __ptext8:
  5538                           	opt stack 0
  5539  0026C6                     __tdiv_to_l_:
  5540                           	opt stack 26
  5541                           
  5542                           ; BSR set to: 0
  5543                           ;incstack = 0
  5544  0026C6  C062  F066         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  5545  0026CA  0100               	movlb	0	; () banked
  5546  0026CC  6B67               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  5547  0026CE  6B68               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  5548  0026D0  3561               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),w,b
  5549  0026D2  3766               	rlcf	??__tdiv_to_l_& (0+255),f,b
  5550  0026D4  E301               	bnc	u3021
  5551  0026D6  8167               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  5552  0026D8                     u3021:
  5553  0026D8  5166               	movf	??__tdiv_to_l_& (0+255),w,b
  5554  0026DA  6F6E               	movwf	__tdiv_to_l_@exp1& (0+255),b
  5555  0026DC  516E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  5556  0026DE  A4D8               	btfss	status,2,c
  5557  0026E0  D009               	goto	l580
  5558                           
  5559                           ; BSR set to: 0
  5560  0026E2  0E00               	movlw	0
  5561  0026E4  6F60               	movwf	?__tdiv_to_l_& (0+255),b
  5562  0026E6  0E00               	movlw	0
  5563  0026E8  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  5564  0026EA  0E00               	movlw	0
  5565  0026EC  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  5566  0026EE  0E00               	movlw	0
  5567  0026F0  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  5568                           
  5569                           ; BSR set to: 0
  5570  0026F2  0012               	return	
  5571  0026F4                     l580:
  5572                           
  5573                           ; BSR set to: 0
  5574                           
  5575                           ; BSR set to: 0
  5576  0026F4  C065  F066         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  5577  0026F8  6B67               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  5578  0026FA  6B68               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  5579  0026FC  3564               	rlcf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  5580  0026FE  3766               	rlcf	??__tdiv_to_l_& (0+255),f,b
  5581  002700  E301               	bnc	u3041
  5582  002702  8167               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  5583  002704                     u3041:
  5584  002704  5166               	movf	??__tdiv_to_l_& (0+255),w,b
  5585  002706  6F6D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  5586  002708  516D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  5587  00270A  A4D8               	btfss	status,2,c
  5588  00270C  D009               	goto	l582
  5589                           
  5590                           ; BSR set to: 0
  5591  00270E  0E00               	movlw	0
  5592  002710  6F60               	movwf	?__tdiv_to_l_& (0+255),b
  5593  002712  0E00               	movlw	0
  5594  002714  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  5595  002716  0E00               	movlw	0
  5596  002718  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  5597  00271A  0E00               	movlw	0
  5598  00271C  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  5599                           
  5600                           ; BSR set to: 0
  5601  00271E  0012               	return	
  5602  002720                     l582:
  5603                           
  5604                           ; BSR set to: 0
  5605                           
  5606                           ; BSR set to: 0
  5607  002720  8F61               	bsf	(__tdiv_to_l_@f1+1)& (0+255),7,b
  5608                           
  5609                           ; BSR set to: 0
  5610  002722  0EFF               	movlw	255
  5611  002724  1760               	andwf	__tdiv_to_l_@f1& (0+255),f,b
  5612  002726  0EFF               	movlw	255
  5613  002728  1761               	andwf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  5614  00272A  0E00               	movlw	0
  5615  00272C  1762               	andwf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  5616  00272E  8F64               	bsf	(__tdiv_to_l_@f2+1)& (0+255),7,b
  5617                           
  5618                           ; BSR set to: 0
  5619  002730  0EFF               	movlw	255
  5620  002732  1763               	andwf	__tdiv_to_l_@f2& (0+255),f,b
  5621  002734  0EFF               	movlw	255
  5622  002736  1764               	andwf	(__tdiv_to_l_@f2+1)& (0+255),f,b
  5623  002738  0E00               	movlw	0
  5624  00273A  1765               	andwf	(__tdiv_to_l_@f2+2)& (0+255),f,b
  5625                           
  5626                           ; BSR set to: 0
  5627  00273C  0E00               	movlw	0
  5628  00273E  6F69               	movwf	__tdiv_to_l_@quot& (0+255),b
  5629  002740  0E00               	movlw	0
  5630  002742  6F6A               	movwf	(__tdiv_to_l_@quot+1)& (0+255),b
  5631  002744  0E00               	movlw	0
  5632  002746  6F6B               	movwf	(__tdiv_to_l_@quot+2)& (0+255),b
  5633  002748  0E00               	movlw	0
  5634  00274A  6F6C               	movwf	(__tdiv_to_l_@quot+3)& (0+255),b
  5635                           
  5636                           ; BSR set to: 0
  5637  00274C  0E7F               	movlw	127
  5638  00274E  5F6E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  5639                           
  5640                           ; BSR set to: 0
  5641  002750  516D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  5642  002752  0F98               	addlw	152
  5643  002754  5F6E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  5644                           
  5645                           ; BSR set to: 0
  5646  002756  0E18               	movlw	24
  5647  002758  6F6D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  5648  00275A                     l583:
  5649                           
  5650                           ; BSR set to: 0
  5651  00275A  90D8               	bcf	status,0,c
  5652  00275C  3769               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  5653  00275E  376A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  5654  002760  376B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  5655  002762  376C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  5656                           
  5657                           ; BSR set to: 0
  5658  002764  5163               	movf	__tdiv_to_l_@f2& (0+255),w,b
  5659  002766  5D60               	subwf	__tdiv_to_l_@f1& (0+255),w,b
  5660  002768  5164               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  5661  00276A  5961               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),w,b
  5662  00276C  5165               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  5663  00276E  5962               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),w,b
  5664  002770  A0D8               	btfss	status,0,c
  5665  002772  D007               	goto	l584
  5666                           
  5667                           ; BSR set to: 0
  5668  002774  5163               	movf	__tdiv_to_l_@f2& (0+255),w,b
  5669  002776  5F60               	subwf	__tdiv_to_l_@f1& (0+255),f,b
  5670  002778  5164               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  5671  00277A  5B61               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),f,b
  5672  00277C  5165               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  5673  00277E  5B62               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),f,b
  5674                           
  5675                           ; BSR set to: 0
  5676  002780  8169               	bsf	__tdiv_to_l_@quot& (0+255),0,b
  5677  002782                     l584:
  5678                           
  5679                           ; BSR set to: 0
  5680  002782  90D8               	bcf	status,0,c
  5681  002784  3760               	rlcf	__tdiv_to_l_@f1& (0+255),f,b
  5682  002786  3761               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  5683  002788  3762               	rlcf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  5684                           
  5685                           ; BSR set to: 0
  5686  00278A  2F6D               	decfsz	__tdiv_to_l_@cntr& (0+255),f,b
  5687  00278C  D7E6               	goto	l583
  5688                           
  5689                           ; BSR set to: 0
  5690                           
  5691                           ; BSR set to: 0
  5692  00278E  AF6E               	btfss	__tdiv_to_l_@exp1& (0+255),7,b
  5693  002790  D016               	goto	l586
  5694                           
  5695                           ; BSR set to: 0
  5696  002792  516E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  5697  002794  0A80               	xorlw	128
  5698  002796  0F97               	addlw	151
  5699  002798  B0D8               	btfsc	status,0,c
  5700  00279A  D009               	goto	l587
  5701                           
  5702                           ; BSR set to: 0
  5703  00279C  0E00               	movlw	0
  5704  00279E  6F60               	movwf	?__tdiv_to_l_& (0+255),b
  5705  0027A0  0E00               	movlw	0
  5706  0027A2  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  5707  0027A4  0E00               	movlw	0
  5708  0027A6  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  5709  0027A8  0E00               	movlw	0
  5710  0027AA  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  5711                           
  5712                           ; BSR set to: 0
  5713  0027AC  0012               	return	
  5714  0027AE                     l587:
  5715                           
  5716                           ; BSR set to: 0
  5717                           
  5718                           ; BSR set to: 0
  5719                           
  5720                           ; BSR set to: 0
  5721  0027AE  90D8               	bcf	status,0,c
  5722  0027B0  336C               	rrcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  5723  0027B2  336B               	rrcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  5724  0027B4  336A               	rrcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  5725  0027B6  3369               	rrcf	__tdiv_to_l_@quot& (0+255),f,b
  5726                           
  5727                           ; BSR set to: 0
  5728  0027B8  3F6E               	incfsz	__tdiv_to_l_@exp1& (0+255),f,b
  5729  0027BA  D7F9               	goto	l587
  5730                           
  5731                           ; BSR set to: 0
  5732  0027BC  D015               	goto	u3100
  5733  0027BE                     l586:
  5734                           
  5735                           ; BSR set to: 0
  5736                           
  5737                           ; BSR set to: 0
  5738  0027BE  0E17               	movlw	23
  5739  0027C0  656E               	cpfsgt	__tdiv_to_l_@exp1& (0+255),b
  5740  0027C2  D00F               	goto	l592
  5741                           
  5742                           ; BSR set to: 0
  5743  0027C4  0E00               	movlw	0
  5744  0027C6  6F60               	movwf	?__tdiv_to_l_& (0+255),b
  5745  0027C8  0E00               	movlw	0
  5746  0027CA  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  5747  0027CC  0E00               	movlw	0
  5748  0027CE  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  5749  0027D0  0E00               	movlw	0
  5750  0027D2  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  5751                           
  5752                           ; BSR set to: 0
  5753  0027D4  0012               	return	
  5754  0027D6                     
  5755                           ; BSR set to: 0
  5756                           
  5757                           ; BSR set to: 0
  5758  0027D6  90D8               	bcf	status,0,c
  5759  0027D8  3769               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  5760  0027DA  376A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  5761  0027DC  376B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  5762  0027DE  376C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  5763  0027E0  076E               	decf	__tdiv_to_l_@exp1& (0+255),f,b
  5764  0027E2                     l592:
  5765                           
  5766                           ; BSR set to: 0
  5767                           
  5768                           ; BSR set to: 0
  5769  0027E2  516E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  5770  0027E4  A4D8               	btfss	status,2,c
  5771  0027E6  D7F7               	goto	l593
  5772  0027E8                     u3100:
  5773                           
  5774                           ; BSR set to: 0
  5775                           
  5776                           ; BSR set to: 0
  5777  0027E8  C069  F060         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  5778  0027EC  C06A  F061         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  5779  0027F0  C06B  F062         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  5780  0027F4  C06C  F063         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  5781                           
  5782                           ; BSR set to: 0
  5783  0027F8  0012               	return		;funcret
  5784  0027FA                     __end_of__tdiv_to_l_:
  5785                           	opt stack 0
  5786                           tblptru	equ	0xFF8
  5787                           tblptrh	equ	0xFF7
  5788                           tblptrl	equ	0xFF6
  5789                           tablat	equ	0xFF5
  5790                           prodh	equ	0xFF4
  5791                           prodl	equ	0xFF3
  5792                           postinc0	equ	0xFEE
  5793                           wreg	equ	0xFE8
  5794                           indf2	equ	0xFDF
  5795                           postinc2	equ	0xFDE
  5796                           postdec2	equ	0xFDD
  5797                           fsr2h	equ	0xFDA
  5798                           fsr2l	equ	0xFD9
  5799                           status	equ	0xFD8
  5800                           
  5801 ;; *************** function __div_to_l_ *****************
  5802 ;; Defined at:
  5803 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fldivl.c"
  5804 ;; Parameters:    Size  Location     Type
  5805 ;;  f1              3    0[BANK0 ] unsigned long 
  5806 ;;  f2              3    3[BANK0 ] unsigned long 
  5807 ;; Auto vars:     Size  Location     Type
  5808 ;;  quot            4    6[BANK0 ] unsigned long 
  5809 ;;  exp1            1   11[BANK0 ] unsigned char 
  5810 ;;  cntr            1   10[BANK0 ] unsigned char 
  5811 ;; Return value:  Size  Location     Type
  5812 ;;                  4    0[BANK0 ] unsigned long 
  5813 ;; Registers used:
  5814 ;;		wreg, status,2, status,0
  5815 ;; Tracked objects:
  5816 ;;		On entry : 0/0
  5817 ;;		On exit  : 0/0
  5818 ;;		Unchanged: 0/0
  5819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5820 ;;      Params:         0       6       0       0       0       0       0       0       0
  5821 ;;      Locals:         0       6       0       0       0       0       0       0       0
  5822 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5823 ;;      Totals:         0      12       0       0       0       0       0       0       0
  5824 ;;Total ram usage:       12 bytes
  5825 ;; Hardware stack levels used:    1
  5826 ;; Hardware stack levels required when called:    3
  5827 ;; This function calls:
  5828 ;;		Nothing
  5829 ;; This function is called by:
  5830 ;;		_sprintf
  5831 ;; This function uses a non-reentrant model
  5832 ;;
  5833                           
  5834                           	psect	text9
  5835  002A5C                     __ptext9:
  5836                           	opt stack 0
  5837  002A5C                     __div_to_l_:
  5838                           	opt stack 26
  5839                           
  5840                           ; BSR set to: 0
  5841                           ;incstack = 0
  5842  002A5C  0100               	movlb	0	; () banked
  5843  002A5E  3562               	rlcf	(__div_to_l_@f1+2)& (0+255),w,b
  5844  002A60  3563               	rlcf	(__div_to_l_@f1+3)& (0+255),w,b
  5845  002A62  6F6B               	movwf	__div_to_l_@exp1& (0+255),b
  5846  002A64  516B               	movf	__div_to_l_@exp1& (0+255),w,b
  5847  002A66  A4D8               	btfss	status,2,c
  5848  002A68  D009               	goto	l476
  5849                           
  5850                           ; BSR set to: 0
  5851  002A6A  0E00               	movlw	0
  5852  002A6C  6F60               	movwf	?__div_to_l_& (0+255),b
  5853  002A6E  0E00               	movlw	0
  5854  002A70  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
  5855  002A72  0E00               	movlw	0
  5856  002A74  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
  5857  002A76  0E00               	movlw	0
  5858  002A78  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
  5859                           
  5860                           ; BSR set to: 0
  5861  002A7A  0012               	return	
  5862  002A7C                     l476:
  5863                           
  5864                           ; BSR set to: 0
  5865                           
  5866                           ; BSR set to: 0
  5867  002A7C  3565               	rlcf	(__div_to_l_@f2+2)& (0+255),w,b
  5868  002A7E  3566               	rlcf	(__div_to_l_@f2+3)& (0+255),w,b
  5869  002A80  6F6A               	movwf	__div_to_l_@cntr& (0+255),b
  5870  002A82  516A               	movf	__div_to_l_@cntr& (0+255),w,b
  5871  002A84  A4D8               	btfss	status,2,c
  5872  002A86  D009               	goto	l478
  5873                           
  5874                           ; BSR set to: 0
  5875  002A88  0E00               	movlw	0
  5876  002A8A  6F60               	movwf	?__div_to_l_& (0+255),b
  5877  002A8C  0E00               	movlw	0
  5878  002A8E  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
  5879  002A90  0E00               	movlw	0
  5880  002A92  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
  5881  002A94  0E00               	movlw	0
  5882  002A96  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
  5883                           
  5884                           ; BSR set to: 0
  5885  002A98  0012               	return	
  5886  002A9A                     l478:
  5887                           
  5888                           ; BSR set to: 0
  5889                           
  5890                           ; BSR set to: 0
  5891  002A9A  8F62               	bsf	(__div_to_l_@f1+2)& (0+255),7,b
  5892                           
  5893                           ; BSR set to: 0
  5894  002A9C  0EFF               	movlw	255
  5895  002A9E  1760               	andwf	__div_to_l_@f1& (0+255),f,b
  5896  002AA0  0EFF               	movlw	255
  5897  002AA2  1761               	andwf	(__div_to_l_@f1+1)& (0+255),f,b
  5898  002AA4  0EFF               	movlw	255
  5899  002AA6  1762               	andwf	(__div_to_l_@f1+2)& (0+255),f,b
  5900  002AA8  0E00               	movlw	0
  5901  002AAA  1763               	andwf	(__div_to_l_@f1+3)& (0+255),f,b
  5902                           
  5903                           ; BSR set to: 0
  5904  002AAC  8F65               	bsf	(__div_to_l_@f2+2)& (0+255),7,b
  5905  002AAE  0EFF               	movlw	255
  5906  002AB0  1763               	andwf	__div_to_l_@f2& (0+255),f,b
  5907  002AB2  0EFF               	movlw	255
  5908  002AB4  1764               	andwf	(__div_to_l_@f2+1)& (0+255),f,b
  5909  002AB6  0EFF               	movlw	255
  5910  002AB8  1765               	andwf	(__div_to_l_@f2+2)& (0+255),f,b
  5911  002ABA  0E00               	movlw	0
  5912  002ABC  1766               	andwf	(__div_to_l_@f2+3)& (0+255),f,b
  5913                           
  5914                           ; BSR set to: 0
  5915  002ABE  0E00               	movlw	0
  5916  002AC0  6F66               	movwf	__div_to_l_@quot& (0+255),b
  5917  002AC2  0E00               	movlw	0
  5918  002AC4  6F67               	movwf	(__div_to_l_@quot+1)& (0+255),b
  5919  002AC6  0E00               	movlw	0
  5920  002AC8  6F68               	movwf	(__div_to_l_@quot+2)& (0+255),b
  5921  002ACA  0E00               	movlw	0
  5922  002ACC  6F69               	movwf	(__div_to_l_@quot+3)& (0+255),b
  5923                           
  5924                           ; BSR set to: 0
  5925  002ACE  0E7F               	movlw	127
  5926  002AD0  5F6B               	subwf	__div_to_l_@exp1& (0+255),f,b
  5927                           
  5928                           ; BSR set to: 0
  5929  002AD2  516A               	movf	__div_to_l_@cntr& (0+255),w,b
  5930  002AD4  0FA0               	addlw	160
  5931  002AD6  5F6B               	subwf	__div_to_l_@exp1& (0+255),f,b
  5932                           
  5933                           ; BSR set to: 0
  5934  002AD8  0E20               	movlw	32
  5935  002ADA  6F6A               	movwf	__div_to_l_@cntr& (0+255),b
  5936  002ADC                     
  5937                           ; BSR set to: 0
  5938                           
  5939                           ; BSR set to: 0
  5940  002ADC  90D8               	bcf	status,0,c
  5941  002ADE  3766               	rlcf	__div_to_l_@quot& (0+255),f,b
  5942  002AE0  3767               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  5943  002AE2  3768               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  5944  002AE4  3769               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  5945                           
  5946                           ; BSR set to: 0
  5947  002AE6  5163               	movf	__div_to_l_@f2& (0+255),w,b
  5948  002AE8  5D60               	subwf	__div_to_l_@f1& (0+255),w,b
  5949  002AEA  5164               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  5950  002AEC  5961               	subwfb	(__div_to_l_@f1+1)& (0+255),w,b
  5951  002AEE  5165               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  5952  002AF0  5962               	subwfb	(__div_to_l_@f1+2)& (0+255),w,b
  5953  002AF2  5166               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  5954  002AF4  5963               	subwfb	(__div_to_l_@f1+3)& (0+255),w,b
  5955  002AF6  A0D8               	btfss	status,0,c
  5956  002AF8  D009               	goto	l480
  5957                           
  5958                           ; BSR set to: 0
  5959  002AFA  5163               	movf	__div_to_l_@f2& (0+255),w,b
  5960  002AFC  5F60               	subwf	__div_to_l_@f1& (0+255),f,b
  5961  002AFE  5164               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  5962  002B00  5B61               	subwfb	(__div_to_l_@f1+1)& (0+255),f,b
  5963  002B02  5165               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  5964  002B04  5B62               	subwfb	(__div_to_l_@f1+2)& (0+255),f,b
  5965  002B06  5166               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  5966  002B08  5B63               	subwfb	(__div_to_l_@f1+3)& (0+255),f,b
  5967                           
  5968                           ; BSR set to: 0
  5969  002B0A  8166               	bsf	__div_to_l_@quot& (0+255),0,b
  5970  002B0C                     l480:
  5971                           
  5972                           ; BSR set to: 0
  5973                           
  5974                           ; BSR set to: 0
  5975  002B0C  90D8               	bcf	status,0,c
  5976  002B0E  3760               	rlcf	__div_to_l_@f1& (0+255),f,b
  5977  002B10  3761               	rlcf	(__div_to_l_@f1+1)& (0+255),f,b
  5978  002B12  3762               	rlcf	(__div_to_l_@f1+2)& (0+255),f,b
  5979  002B14  3763               	rlcf	(__div_to_l_@f1+3)& (0+255),f,b
  5980                           
  5981                           ; BSR set to: 0
  5982  002B16  2F6A               	decfsz	__div_to_l_@cntr& (0+255),f,b
  5983  002B18  D7E1               	goto	l479
  5984                           
  5985                           ; BSR set to: 0
  5986                           
  5987                           ; BSR set to: 0
  5988  002B1A  AF6B               	btfss	__div_to_l_@exp1& (0+255),7,b
  5989  002B1C  D016               	goto	l482
  5990                           
  5991                           ; BSR set to: 0
  5992  002B1E  516B               	movf	__div_to_l_@exp1& (0+255),w,b
  5993  002B20  0A80               	xorlw	128
  5994  002B22  0F9F               	addlw	159
  5995  002B24  B0D8               	btfsc	status,0,c
  5996  002B26  D009               	goto	l483
  5997                           
  5998                           ; BSR set to: 0
  5999  002B28  0E00               	movlw	0
  6000  002B2A  6F60               	movwf	?__div_to_l_& (0+255),b
  6001  002B2C  0E00               	movlw	0
  6002  002B2E  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
  6003  002B30  0E00               	movlw	0
  6004  002B32  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
  6005  002B34  0E00               	movlw	0
  6006  002B36  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
  6007                           
  6008                           ; BSR set to: 0
  6009  002B38  0012               	return	
  6010  002B3A                     l483:
  6011                           
  6012                           ; BSR set to: 0
  6013                           
  6014                           ; BSR set to: 0
  6015                           
  6016                           ; BSR set to: 0
  6017  002B3A  90D8               	bcf	status,0,c
  6018  002B3C  3369               	rrcf	(__div_to_l_@quot+3)& (0+255),f,b
  6019  002B3E  3368               	rrcf	(__div_to_l_@quot+2)& (0+255),f,b
  6020  002B40  3367               	rrcf	(__div_to_l_@quot+1)& (0+255),f,b
  6021  002B42  3366               	rrcf	__div_to_l_@quot& (0+255),f,b
  6022                           
  6023                           ; BSR set to: 0
  6024  002B44  3F6B               	incfsz	__div_to_l_@exp1& (0+255),f,b
  6025  002B46  D7F9               	goto	l483
  6026                           
  6027                           ; BSR set to: 0
  6028  002B48  D015               	goto	u3170
  6029  002B4A                     l482:
  6030                           
  6031                           ; BSR set to: 0
  6032                           
  6033                           ; BSR set to: 0
  6034  002B4A  0E1F               	movlw	31
  6035  002B4C  656B               	cpfsgt	__div_to_l_@exp1& (0+255),b
  6036  002B4E  D00F               	goto	l488
  6037                           
  6038                           ; BSR set to: 0
  6039  002B50  0E00               	movlw	0
  6040  002B52  6F60               	movwf	?__div_to_l_& (0+255),b
  6041  002B54  0E00               	movlw	0
  6042  002B56  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
  6043  002B58  0E00               	movlw	0
  6044  002B5A  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
  6045  002B5C  0E00               	movlw	0
  6046  002B5E  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
  6047                           
  6048                           ; BSR set to: 0
  6049  002B60  0012               	return	
  6050  002B62                     
  6051                           ; BSR set to: 0
  6052                           
  6053                           ; BSR set to: 0
  6054  002B62  90D8               	bcf	status,0,c
  6055  002B64  3766               	rlcf	__div_to_l_@quot& (0+255),f,b
  6056  002B66  3767               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  6057  002B68  3768               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  6058  002B6A  3769               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  6059  002B6C  076B               	decf	__div_to_l_@exp1& (0+255),f,b
  6060  002B6E                     l488:
  6061                           
  6062                           ; BSR set to: 0
  6063                           
  6064                           ; BSR set to: 0
  6065  002B6E  516B               	movf	__div_to_l_@exp1& (0+255),w,b
  6066  002B70  A4D8               	btfss	status,2,c
  6067  002B72  D7F7               	goto	l489
  6068  002B74                     u3170:
  6069                           
  6070                           ; BSR set to: 0
  6071                           
  6072                           ; BSR set to: 0
  6073  002B74  C066  F060         	movff	__div_to_l_@quot,?__div_to_l_
  6074  002B78  C067  F061         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  6075  002B7C  C068  F062         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  6076  002B80  C069  F063         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  6077                           
  6078                           ; BSR set to: 0
  6079  002B84  0012               	return		;funcret
  6080  002B86                     __end_of__div_to_l_:
  6081                           	opt stack 0
  6082                           tblptru	equ	0xFF8
  6083                           tblptrh	equ	0xFF7
  6084                           tblptrl	equ	0xFF6
  6085                           tablat	equ	0xFF5
  6086                           prodh	equ	0xFF4
  6087                           prodl	equ	0xFF3
  6088                           postinc0	equ	0xFEE
  6089                           wreg	equ	0xFE8
  6090                           indf2	equ	0xFDF
  6091                           postinc2	equ	0xFDE
  6092                           postdec2	equ	0xFDD
  6093                           fsr2h	equ	0xFDA
  6094                           fsr2l	equ	0xFD9
  6095                           status	equ	0xFD8
  6096                           
  6097 ;; *************** function ___lltoft *****************
  6098 ;; Defined at:
  6099 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
  6100 ;; Parameters:    Size  Location     Type
  6101 ;;  c               4    8[BANK0 ] unsigned long 
  6102 ;; Auto vars:     Size  Location     Type
  6103 ;;  exp             1   16[BANK0 ] unsigned char 
  6104 ;; Return value:  Size  Location     Type
  6105 ;;                  3    8[BANK0 ] float 
  6106 ;; Registers used:
  6107 ;;		wreg, status,2, status,0, cstack
  6108 ;; Tracked objects:
  6109 ;;		On entry : 0/0
  6110 ;;		On exit  : 0/0
  6111 ;;		Unchanged: 0/0
  6112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6113 ;;      Params:         0       4       0       0       0       0       0       0       0
  6114 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6115 ;;      Temps:          0       4       0       0       0       0       0       0       0
  6116 ;;      Totals:         0       9       0       0       0       0       0       0       0
  6117 ;;Total ram usage:        9 bytes
  6118 ;; Hardware stack levels used:    1
  6119 ;; Hardware stack levels required when called:    4
  6120 ;; This function calls:
  6121 ;;		___ftpack
  6122 ;; This function is called by:
  6123 ;;		_main
  6124 ;;		_sprintf
  6125 ;; This function uses a non-reentrant model
  6126 ;;
  6127                           
  6128                           	psect	text10
  6129  003912                     __ptext10:
  6130                           	opt stack 0
  6131  003912                     ___lltoft:
  6132                           	opt stack 25
  6133                           
  6134                           ; BSR set to: 0
  6135                           ;incstack = 0
  6136  003912  0E8E               	movlw	142
  6137  003914  0100               	movlb	0	; () banked
  6138  003916  6F70               	movwf	___lltoft@exp& (0+255),b
  6139  003918  D006               	goto	l687
  6140  00391A                     
  6141                           ; BSR set to: 0
  6142                           
  6143                           ; BSR set to: 0
  6144  00391A  90D8               	bcf	status,0,c
  6145  00391C  336B               	rrcf	(___lltoft@c+3)& (0+255),f,b
  6146  00391E  336A               	rrcf	(___lltoft@c+2)& (0+255),f,b
  6147  003920  3369               	rrcf	(___lltoft@c+1)& (0+255),f,b
  6148  003922  3368               	rrcf	___lltoft@c& (0+255),f,b
  6149  003924  2B70               	incf	___lltoft@exp& (0+255),f,b
  6150  003926                     l687:
  6151                           
  6152                           ; BSR set to: 0
  6153                           
  6154                           ; BSR set to: 0
  6155  003926  0E00               	movlw	0
  6156  003928  1568               	andwf	___lltoft@c& (0+255),w,b
  6157  00392A  6F6C               	movwf	??___lltoft& (0+255),b
  6158  00392C  0E00               	movlw	0
  6159  00392E  1569               	andwf	(___lltoft@c+1)& (0+255),w,b
  6160  003930  6F6D               	movwf	(??___lltoft+1)& (0+255),b
  6161  003932  0E00               	movlw	0
  6162  003934  156A               	andwf	(___lltoft@c+2)& (0+255),w,b
  6163  003936  6F6E               	movwf	(??___lltoft+2)& (0+255),b
  6164  003938  0EFF               	movlw	255
  6165  00393A  156B               	andwf	(___lltoft@c+3)& (0+255),w,b
  6166  00393C  6F6F               	movwf	(??___lltoft+3)& (0+255),b
  6167  00393E  516C               	movf	??___lltoft& (0+255),w,b
  6168  003940  116D               	iorwf	(??___lltoft+1)& (0+255),w,b
  6169  003942  116E               	iorwf	(??___lltoft+2)& (0+255),w,b
  6170  003944  116F               	iorwf	(??___lltoft+3)& (0+255),w,b
  6171  003946  A4D8               	btfss	status,2,c
  6172  003948  D7E8               	goto	l688
  6173                           
  6174                           ; BSR set to: 0
  6175                           
  6176                           ; BSR set to: 0
  6177  00394A  C068  F060         	movff	___lltoft@c,___ftpack@arg
  6178  00394E  C069  F061         	movff	___lltoft@c+1,___ftpack@arg+1
  6179  003952  C06A  F062         	movff	___lltoft@c+2,___ftpack@arg+2
  6180  003956  C070  F063         	movff	___lltoft@exp,___ftpack@exp
  6181  00395A  0E00               	movlw	0
  6182  00395C  6F64               	movwf	___ftpack@sign& (0+255),b
  6183  00395E  ECD8  F019         	call	___ftpack	;wreg free
  6184  003962  C060  F068         	movff	?___ftpack,?___lltoft
  6185  003966  C061  F069         	movff	?___ftpack+1,?___lltoft+1
  6186  00396A  C062  F06A         	movff	?___ftpack+2,?___lltoft+2
  6187  00396E  0012               	return	
  6188  003970                     __end_of___lltoft:
  6189                           	opt stack 0
  6190                           tblptru	equ	0xFF8
  6191                           tblptrh	equ	0xFF7
  6192                           tblptrl	equ	0xFF6
  6193                           tablat	equ	0xFF5
  6194                           prodh	equ	0xFF4
  6195                           prodl	equ	0xFF3
  6196                           postinc0	equ	0xFEE
  6197                           wreg	equ	0xFE8
  6198                           indf2	equ	0xFDF
  6199                           postinc2	equ	0xFDE
  6200                           postdec2	equ	0xFDD
  6201                           fsr2h	equ	0xFDA
  6202                           fsr2l	equ	0xFD9
  6203                           status	equ	0xFD8
  6204                           
  6205 ;; *************** function ___llmod *****************
  6206 ;; Defined at:
  6207 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  6208 ;; Parameters:    Size  Location     Type
  6209 ;;  dividend        4   13[BANK0 ] unsigned long 
  6210 ;;  divisor         4   17[BANK0 ] unsigned long 
  6211 ;; Auto vars:     Size  Location     Type
  6212 ;;  counter         1   21[BANK0 ] unsigned char 
  6213 ;; Return value:  Size  Location     Type
  6214 ;;                  4   13[BANK0 ] unsigned long 
  6215 ;; Registers used:
  6216 ;;		wreg, status,2, status,0
  6217 ;; Tracked objects:
  6218 ;;		On entry : 0/0
  6219 ;;		On exit  : 0/0
  6220 ;;		Unchanged: 0/0
  6221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6222 ;;      Params:         0       8       0       0       0       0       0       0       0
  6223 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6224 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6225 ;;      Totals:         0       9       0       0       0       0       0       0       0
  6226 ;;Total ram usage:        9 bytes
  6227 ;; Hardware stack levels used:    1
  6228 ;; Hardware stack levels required when called:    3
  6229 ;; This function calls:
  6230 ;;		Nothing
  6231 ;; This function is called by:
  6232 ;;		_sprintf
  6233 ;; This function uses a non-reentrant model
  6234 ;;
  6235                           
  6236                           	psect	text11
  6237  0038AA                     __ptext11:
  6238                           	opt stack 0
  6239  0038AA                     ___llmod:
  6240                           	opt stack 26
  6241                           
  6242                           ;incstack = 0
  6243  0038AA  0100               	movlb	0	; () banked
  6244  0038AC  5171               	movf	___llmod@divisor& (0+255),w,b
  6245  0038AE  1172               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  6246  0038B0  1173               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  6247  0038B2  1174               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  6248  0038B4  B4D8               	btfsc	status,2,c
  6249  0038B6  D024               	goto	l681
  6250                           
  6251                           ; BSR set to: 0
  6252  0038B8  0E01               	movlw	1
  6253  0038BA  6F75               	movwf	___llmod@counter& (0+255),b
  6254  0038BC  D006               	goto	l676
  6255  0038BE                     
  6256                           ; BSR set to: 0
  6257                           
  6258                           ; BSR set to: 0
  6259  0038BE  90D8               	bcf	status,0,c
  6260  0038C0  3771               	rlcf	___llmod@divisor& (0+255),f,b
  6261  0038C2  3772               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  6262  0038C4  3773               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  6263  0038C6  3774               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  6264  0038C8  2B75               	incf	___llmod@counter& (0+255),f,b
  6265  0038CA                     l676:
  6266                           
  6267                           ; BSR set to: 0
  6268                           
  6269                           ; BSR set to: 0
  6270  0038CA  AF74               	btfss	(___llmod@divisor+3)& (0+255),7,b
  6271  0038CC  D7F8               	goto	l677
  6272  0038CE                     u3280:
  6273                           
  6274                           ; BSR set to: 0
  6275                           
  6276                           ; BSR set to: 0
  6277                           
  6278                           ; BSR set to: 0
  6279  0038CE  5171               	movf	___llmod@divisor& (0+255),w,b
  6280  0038D0  5D6D               	subwf	___llmod@dividend& (0+255),w,b
  6281  0038D2  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
  6282  0038D4  596E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  6283  0038D6  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
  6284  0038D8  596F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  6285  0038DA  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
  6286  0038DC  5970               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  6287  0038DE  A0D8               	btfss	status,0,c
  6288  0038E0  D008               	goto	l680
  6289                           
  6290                           ; BSR set to: 0
  6291  0038E2  5171               	movf	___llmod@divisor& (0+255),w,b
  6292  0038E4  5F6D               	subwf	___llmod@dividend& (0+255),f,b
  6293  0038E6  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
  6294  0038E8  5B6E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  6295  0038EA  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
  6296  0038EC  5B6F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  6297  0038EE  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
  6298  0038F0  5B70               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  6299  0038F2                     l680:
  6300                           
  6301                           ; BSR set to: 0
  6302                           
  6303                           ; BSR set to: 0
  6304  0038F2  90D8               	bcf	status,0,c
  6305  0038F4  3374               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  6306  0038F6  3373               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  6307  0038F8  3372               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  6308  0038FA  3371               	rrcf	___llmod@divisor& (0+255),f,b
  6309                           
  6310                           ; BSR set to: 0
  6311  0038FC  2F75               	decfsz	___llmod@counter& (0+255),f,b
  6312  0038FE  D7E7               	goto	u3280
  6313  003900                     l681:
  6314                           
  6315                           ; BSR set to: 0
  6316                           
  6317                           ; BSR set to: 0
  6318  003900  C06D  F06D         	movff	___llmod@dividend,?___llmod
  6319  003904  C06E  F06E         	movff	___llmod@dividend+1,?___llmod+1
  6320  003908  C06F  F06F         	movff	___llmod@dividend+2,?___llmod+2
  6321  00390C  C070  F070         	movff	___llmod@dividend+3,?___llmod+3
  6322                           
  6323                           ; BSR set to: 0
  6324  003910  0012               	return		;funcret
  6325  003912                     __end_of___llmod:
  6326                           	opt stack 0
  6327                           tblptru	equ	0xFF8
  6328                           tblptrh	equ	0xFF7
  6329                           tblptrl	equ	0xFF6
  6330                           tablat	equ	0xFF5
  6331                           prodh	equ	0xFF4
  6332                           prodl	equ	0xFF3
  6333                           postinc0	equ	0xFEE
  6334                           wreg	equ	0xFE8
  6335                           indf2	equ	0xFDF
  6336                           postinc2	equ	0xFDE
  6337                           postdec2	equ	0xFDD
  6338                           fsr2h	equ	0xFDA
  6339                           fsr2l	equ	0xFD9
  6340                           status	equ	0xFD8
  6341                           
  6342 ;; *************** function ___lldiv *****************
  6343 ;; Defined at:
  6344 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  6345 ;; Parameters:    Size  Location     Type
  6346 ;;  dividend        4    0[BANK0 ] unsigned long 
  6347 ;;  divisor         4    4[BANK0 ] unsigned long 
  6348 ;; Auto vars:     Size  Location     Type
  6349 ;;  quotient        4    8[BANK0 ] unsigned long 
  6350 ;;  counter         1   12[BANK0 ] unsigned char 
  6351 ;; Return value:  Size  Location     Type
  6352 ;;                  4    0[BANK0 ] unsigned long 
  6353 ;; Registers used:
  6354 ;;		wreg, status,2, status,0
  6355 ;; Tracked objects:
  6356 ;;		On entry : 0/0
  6357 ;;		On exit  : 0/0
  6358 ;;		Unchanged: 0/0
  6359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6360 ;;      Params:         0       8       0       0       0       0       0       0       0
  6361 ;;      Locals:         0       5       0       0       0       0       0       0       0
  6362 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6363 ;;      Totals:         0      13       0       0       0       0       0       0       0
  6364 ;;Total ram usage:       13 bytes
  6365 ;; Hardware stack levels used:    1
  6366 ;; Hardware stack levels required when called:    3
  6367 ;; This function calls:
  6368 ;;		Nothing
  6369 ;; This function is called by:
  6370 ;;		_sprintf
  6371 ;; This function uses a non-reentrant model
  6372 ;;
  6373                           
  6374                           	psect	text12
  6375  0036BE                     __ptext12:
  6376                           	opt stack 0
  6377  0036BE                     ___lldiv:
  6378                           	opt stack 26
  6379                           
  6380                           ; BSR set to: 0
  6381                           ;incstack = 0
  6382  0036BE  0E00               	movlw	0
  6383  0036C0  0100               	movlb	0	; () banked
  6384  0036C2  6F68               	movwf	___lldiv@quotient& (0+255),b
  6385  0036C4  0E00               	movlw	0
  6386  0036C6  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
  6387  0036C8  0E00               	movlw	0
  6388  0036CA  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
  6389  0036CC  0E00               	movlw	0
  6390  0036CE  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
  6391                           
  6392                           ; BSR set to: 0
  6393  0036D0  5164               	movf	___lldiv@divisor& (0+255),w,b
  6394  0036D2  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  6395  0036D4  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  6396  0036D6  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  6397  0036D8  B4D8               	btfsc	status,2,c
  6398  0036DA  D02A               	goto	l671
  6399                           
  6400                           ; BSR set to: 0
  6401  0036DC  0E01               	movlw	1
  6402  0036DE  6F6C               	movwf	___lldiv@counter& (0+255),b
  6403  0036E0  D006               	goto	l666
  6404  0036E2                     
  6405                           ; BSR set to: 0
  6406                           
  6407                           ; BSR set to: 0
  6408  0036E2  90D8               	bcf	status,0,c
  6409  0036E4  3764               	rlcf	___lldiv@divisor& (0+255),f,b
  6410  0036E6  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  6411  0036E8  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  6412  0036EA  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  6413  0036EC  2B6C               	incf	___lldiv@counter& (0+255),f,b
  6414  0036EE                     l666:
  6415                           
  6416                           ; BSR set to: 0
  6417                           
  6418                           ; BSR set to: 0
  6419  0036EE  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  6420  0036F0  D7F8               	goto	l667
  6421  0036F2                     u3250:
  6422                           
  6423                           ; BSR set to: 0
  6424                           
  6425                           ; BSR set to: 0
  6426                           
  6427                           ; BSR set to: 0
  6428  0036F2  90D8               	bcf	status,0,c
  6429  0036F4  3768               	rlcf	___lldiv@quotient& (0+255),f,b
  6430  0036F6  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  6431  0036F8  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  6432  0036FA  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  6433                           
  6434                           ; BSR set to: 0
  6435  0036FC  5164               	movf	___lldiv@divisor& (0+255),w,b
  6436  0036FE  5D60               	subwf	___lldiv@dividend& (0+255),w,b
  6437  003700  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6438  003702  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  6439  003704  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6440  003706  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  6441  003708  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6442  00370A  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  6443  00370C  A0D8               	btfss	status,0,c
  6444  00370E  D009               	goto	l670
  6445                           
  6446                           ; BSR set to: 0
  6447  003710  5164               	movf	___lldiv@divisor& (0+255),w,b
  6448  003712  5F60               	subwf	___lldiv@dividend& (0+255),f,b
  6449  003714  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6450  003716  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  6451  003718  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6452  00371A  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  6453  00371C  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6454  00371E  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  6455                           
  6456                           ; BSR set to: 0
  6457  003720  8168               	bsf	___lldiv@quotient& (0+255),0,b
  6458  003722                     l670:
  6459                           
  6460                           ; BSR set to: 0
  6461                           
  6462                           ; BSR set to: 0
  6463  003722  90D8               	bcf	status,0,c
  6464  003724  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  6465  003726  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  6466  003728  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  6467  00372A  3364               	rrcf	___lldiv@divisor& (0+255),f,b
  6468                           
  6469                           ; BSR set to: 0
  6470  00372C  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
  6471  00372E  D7E1               	goto	u3250
  6472  003730                     l671:
  6473                           
  6474                           ; BSR set to: 0
  6475                           
  6476                           ; BSR set to: 0
  6477  003730  C068  F060         	movff	___lldiv@quotient,?___lldiv
  6478  003734  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
  6479  003738  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
  6480  00373C  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
  6481                           
  6482                           ; BSR set to: 0
  6483  003740  0012               	return		;funcret
  6484  003742                     __end_of___lldiv:
  6485                           	opt stack 0
  6486                           tblptru	equ	0xFF8
  6487                           tblptrh	equ	0xFF7
  6488                           tblptrl	equ	0xFF6
  6489                           tablat	equ	0xFF5
  6490                           prodh	equ	0xFF4
  6491                           prodl	equ	0xFF3
  6492                           postinc0	equ	0xFEE
  6493                           wreg	equ	0xFE8
  6494                           indf2	equ	0xFDF
  6495                           postinc2	equ	0xFDE
  6496                           postdec2	equ	0xFDD
  6497                           fsr2h	equ	0xFDA
  6498                           fsr2l	equ	0xFD9
  6499                           status	equ	0xFD8
  6500                           
  6501 ;; *************** function _cos *****************
  6502 ;; Defined at:
  6503 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\cos.c"
  6504 ;; Parameters:    Size  Location     Type
  6505 ;;  f               3  109[BANK0 ] unsigned long 
  6506 ;; Auto vars:     Size  Location     Type
  6507 ;;		None
  6508 ;; Return value:  Size  Location     Type
  6509 ;;                  3  109[BANK0 ] unsigned long 
  6510 ;; Registers used:
  6511 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6512 ;; Tracked objects:
  6513 ;;		On entry : 0/0
  6514 ;;		On exit  : 0/0
  6515 ;;		Unchanged: 0/0
  6516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6517 ;;      Params:         0       3       0       0       0       0       0       0       0
  6518 ;;      Locals:         0       3       0       0       0       0       0       0       0
  6519 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6520 ;;      Totals:         0       6       0       0       0       0       0       0       0
  6521 ;;Total ram usage:        6 bytes
  6522 ;; Hardware stack levels used:    1
  6523 ;; Hardware stack levels required when called:    7
  6524 ;; This function calls:
  6525 ;;		___ftadd
  6526 ;;		___ftge
  6527 ;;		_sin
  6528 ;; This function is called by:
  6529 ;;		_main
  6530 ;; This function uses a non-reentrant model
  6531 ;;
  6532                           
  6533                           	psect	text13
  6534  0032FE                     __ptext13:
  6535                           	opt stack 0
  6536  0032FE                     _cos:
  6537                           	opt stack 23
  6538                           
  6539                           ; BSR set to: 0
  6540                           ;incstack = 0
  6541  0032FE  0E10               	movlw	16
  6542  003300  0100               	movlb	0	; () banked
  6543  003302  6F60               	movwf	___ftge@ff1& (0+255),b
  6544  003304  0E49               	movlw	73
  6545  003306  6F61               	movwf	(___ftge@ff1+1)& (0+255),b
  6546  003308  0E40               	movlw	64
  6547  00330A  6F62               	movwf	(___ftge@ff1+2)& (0+255),b
  6548  00330C  C0CD  F063         	movff	cos@f,___ftge@ff2
  6549  003310  C0CE  F064         	movff	cos@f+1,___ftge@ff2+1
  6550  003314  C0CF  F065         	movff	cos@f+2,___ftge@ff2+2
  6551  003318  ECD3  F01A         	call	___ftge	;wreg free
  6552  00331C  0100               	movlb	0	; () banked
  6553  00331E  B0D8               	btfsc	status,0,c
  6554  003320  D023               	goto	l472
  6555                           
  6556                           ; BSR set to: 0
  6557  003322  C0CD  F08D         	movff	cos@f,___ftadd@f1
  6558  003326  C0CE  F08E         	movff	cos@f+1,___ftadd@f1+1
  6559  00332A  C0CF  F08F         	movff	cos@f+2,___ftadd@f1+2
  6560  00332E  0ECC               	movlw	204
  6561  003330  6F90               	movwf	___ftadd@f2& (0+255),b
  6562  003332  0E96               	movlw	150
  6563  003334  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
  6564  003336  0EC0               	movlw	192
  6565  003338  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
  6566  00333A  EC22  F011         	call	___ftadd	;wreg free
  6567  00333E  C08D  F0D0         	movff	?___ftadd,_cos$1431
  6568  003342  C08E  F0D1         	movff	?___ftadd+1,_cos$1431+1
  6569  003346  C08F  F0D2         	movff	?___ftadd+2,_cos$1431+2
  6570  00334A  C0D0  F0C0         	movff	_cos$1431,sin@f
  6571  00334E  C0D1  F0C1         	movff	_cos$1431+1,sin@f+1
  6572  003352  C0D2  F0C2         	movff	_cos$1431+2,sin@f+2
  6573  003356  ECED  F00F         	call	_sin	;wreg free
  6574  00335A  C0C0  F0CD         	movff	?_sin,?_cos
  6575  00335E  C0C1  F0CE         	movff	?_sin+1,?_cos+1
  6576  003362  C0C2  F0CF         	movff	?_sin+2,?_cos+2
  6577  003366  0012               	return	
  6578  003368                     l472:
  6579  003368  C0CD  F08D         	movff	cos@f,___ftadd@f1
  6580  00336C  C0CE  F08E         	movff	cos@f+1,___ftadd@f1+1
  6581  003370  C0CF  F08F         	movff	cos@f+2,___ftadd@f1+2
  6582  003374  0E10               	movlw	16
  6583  003376  0100               	movlb	0	; () banked
  6584  003378  6F90               	movwf	___ftadd@f2& (0+255),b
  6585  00337A  0EC9               	movlw	201
  6586  00337C  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
  6587  00337E  0E3F               	movlw	63
  6588  003380  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
  6589  003382  EC22  F011         	call	___ftadd	;wreg free
  6590  003386  C08D  F0D0         	movff	?___ftadd,_cos$1431
  6591  00338A  C08E  F0D1         	movff	?___ftadd+1,_cos$1431+1
  6592  00338E  C08F  F0D2         	movff	?___ftadd+2,_cos$1431+2
  6593  003392  C0D0  F0C0         	movff	_cos$1431,sin@f
  6594  003396  C0D1  F0C1         	movff	_cos$1431+1,sin@f+1
  6595  00339A  C0D2  F0C2         	movff	_cos$1431+2,sin@f+2
  6596  00339E  ECED  F00F         	call	_sin	;wreg free
  6597  0033A2  C0C0  F0CD         	movff	?_sin,?_cos
  6598  0033A6  C0C1  F0CE         	movff	?_sin+1,?_cos+1
  6599  0033AA  C0C2  F0CF         	movff	?_sin+2,?_cos+2
  6600  0033AE  0012               	return	
  6601  0033B0                     __end_of_cos:
  6602                           	opt stack 0
  6603                           tblptru	equ	0xFF8
  6604                           tblptrh	equ	0xFF7
  6605                           tblptrl	equ	0xFF6
  6606                           tablat	equ	0xFF5
  6607                           prodh	equ	0xFF4
  6608                           prodl	equ	0xFF3
  6609                           postinc0	equ	0xFEE
  6610                           wreg	equ	0xFE8
  6611                           indf2	equ	0xFDF
  6612                           postinc2	equ	0xFDE
  6613                           postdec2	equ	0xFDD
  6614                           fsr2h	equ	0xFDA
  6615                           fsr2l	equ	0xFD9
  6616                           status	equ	0xFD8
  6617                           
  6618 ;; *************** function _sin *****************
  6619 ;; Defined at:
  6620 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sin.c"
  6621 ;; Parameters:    Size  Location     Type
  6622 ;;  f               3   96[BANK0 ] unsigned long 
  6623 ;; Auto vars:     Size  Location     Type
  6624 ;;  x2              3  105[BANK0 ] unsigned long 
  6625 ;;  y               3   99[BANK0 ] unsigned long 
  6626 ;;  sgn             1  108[BANK0 ] unsigned char 
  6627 ;; Return value:  Size  Location     Type
  6628 ;;                  3   96[BANK0 ] unsigned char 
  6629 ;; Registers used:
  6630 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6631 ;; Tracked objects:
  6632 ;;		On entry : 0/0
  6633 ;;		On exit  : 0/0
  6634 ;;		Unchanged: 0/0
  6635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6636 ;;      Params:         0       3       0       0       0       0       0       0       0
  6637 ;;      Locals:         0      10       0       0       0       0       0       0       0
  6638 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6639 ;;      Totals:         0      13       0       0       0       0       0       0       0
  6640 ;;Total ram usage:       13 bytes
  6641 ;; Hardware stack levels used:    1
  6642 ;; Hardware stack levels required when called:    6
  6643 ;; This function calls:
  6644 ;;		___ftadd
  6645 ;;		___ftdiv
  6646 ;;		___ftge
  6647 ;;		___ftmul
  6648 ;;		___ftneg
  6649 ;;		___ftsub
  6650 ;;		_eval_poly
  6651 ;;		_floor
  6652 ;; This function is called by:
  6653 ;;		_cos
  6654 ;; This function uses a non-reentrant model
  6655 ;;
  6656                           
  6657                           	psect	text14
  6658  001FDA                     __ptext14:
  6659                           	opt stack 0
  6660  001FDA                     _sin:
  6661                           	opt stack 23
  6662                           
  6663                           ;incstack = 0
  6664  001FDA  0E00               	movlw	0
  6665  001FDC  0100               	movlb	0	; () banked
  6666  001FDE  6FCC               	movwf	sin@sgn& (0+255),b
  6667                           
  6668                           ; BSR set to: 0
  6669  001FE0  AFC2               	btfss	(sin@f+2)& (0+255),7,b
  6670  001FE2  D011               	goto	l755
  6671                           
  6672                           ; BSR set to: 0
  6673  001FE4  C0C0  F060         	movff	sin@f,___ftneg@f1
  6674  001FE8  C0C1  F061         	movff	sin@f+1,___ftneg@f1+1
  6675  001FEC  C0C2  F062         	movff	sin@f+2,___ftneg@f1+2
  6676  001FF0  EC25  F01D         	call	___ftneg	;wreg free
  6677  001FF4  C060  F0C0         	movff	?___ftneg,sin@f
  6678  001FF8  C061  F0C1         	movff	?___ftneg+1,sin@f+1
  6679  001FFC  C062  F0C2         	movff	?___ftneg+2,sin@f+2
  6680  002000  0E01               	movlw	1
  6681  002002  0100               	movlb	0	; () banked
  6682  002004  6FCC               	movwf	sin@sgn& (0+255),b
  6683  002006                     l755:
  6684                           
  6685                           ; BSR set to: 0
  6686                           
  6687                           ; BSR set to: 0
  6688  002006  C0C0  F074         	movff	sin@f,___ftmul@f1
  6689  00200A  C0C1  F075         	movff	sin@f+1,___ftmul@f1+1
  6690  00200E  C0C2  F076         	movff	sin@f+2,___ftmul@f1+2
  6691  002012  0EFA               	movlw	250
  6692  002014  6F77               	movwf	___ftmul@f2& (0+255),b
  6693  002016  0E22               	movlw	34
  6694  002018  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  6695  00201A  0E3E               	movlw	62
  6696  00201C  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  6697  00201E  ECC3  F016         	call	___ftmul	;wreg free
  6698  002022  C074  F0C0         	movff	?___ftmul,sin@f
  6699  002026  C075  F0C1         	movff	?___ftmul+1,sin@f+1
  6700  00202A  C076  F0C2         	movff	?___ftmul+2,sin@f+2
  6701  00202E  C0C0  F0AB         	movff	sin@f,___ftsub@f1
  6702  002032  C0C1  F0AC         	movff	sin@f+1,___ftsub@f1+1
  6703  002036  C0C2  F0AD         	movff	sin@f+2,___ftsub@f1+2
  6704  00203A  C0C0  F0A3         	movff	sin@f,floor@x
  6705  00203E  C0C1  F0A4         	movff	sin@f+1,floor@x+1
  6706  002042  C0C2  F0A5         	movff	sin@f+2,floor@x+2
  6707  002046  EC9F  F018         	call	_floor	;wreg free
  6708  00204A  C0A3  F0AE         	movff	?_floor,___ftsub@f2
  6709  00204E  C0A4  F0AF         	movff	?_floor+1,___ftsub@f2+1
  6710  002052  C0A5  F0B0         	movff	?_floor+2,___ftsub@f2+2
  6711  002056  ECDA  F01C         	call	___ftsub	;wreg free
  6712  00205A  C0AB  F0C0         	movff	?___ftsub,sin@f
  6713  00205E  C0AC  F0C1         	movff	?___ftsub+1,sin@f+1
  6714  002062  C0AD  F0C2         	movff	?___ftsub+2,sin@f+2
  6715  002066  C0C0  F074         	movff	sin@f,___ftmul@f1
  6716  00206A  C0C1  F075         	movff	sin@f+1,___ftmul@f1+1
  6717  00206E  C0C2  F076         	movff	sin@f+2,___ftmul@f1+2
  6718  002072  0E00               	movlw	0
  6719  002074  0100               	movlb	0	; () banked
  6720  002076  6F77               	movwf	___ftmul@f2& (0+255),b
  6721  002078  0E80               	movlw	128
  6722  00207A  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  6723  00207C  0E40               	movlw	64
  6724  00207E  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  6725  002080  ECC3  F016         	call	___ftmul	;wreg free
  6726  002084  C074  F0C0         	movff	?___ftmul,sin@f
  6727  002088  C075  F0C1         	movff	?___ftmul+1,sin@f+1
  6728  00208C  C076  F0C2         	movff	?___ftmul+2,sin@f+2
  6729  002090  0E00               	movlw	0
  6730  002092  0100               	movlb	0	; () banked
  6731  002094  6F60               	movwf	___ftge@ff1& (0+255),b
  6732  002096  0E00               	movlw	0
  6733  002098  6F61               	movwf	(___ftge@ff1+1)& (0+255),b
  6734  00209A  0E40               	movlw	64
  6735  00209C  6F62               	movwf	(___ftge@ff1+2)& (0+255),b
  6736  00209E  C0C0  F063         	movff	sin@f,___ftge@ff2
  6737  0020A2  C0C1  F064         	movff	sin@f+1,___ftge@ff2+1
  6738  0020A6  C0C2  F065         	movff	sin@f+2,___ftge@ff2+2
  6739  0020AA  ECD3  F01A         	call	___ftge	;wreg free
  6740  0020AE  0100               	movlb	0	; () banked
  6741  0020B0  B0D8               	btfsc	status,0,c
  6742  0020B2  D01C               	goto	l756
  6743                           
  6744                           ; BSR set to: 0
  6745  0020B4  C0C0  F0AB         	movff	sin@f,___ftsub@f1
  6746  0020B8  C0C1  F0AC         	movff	sin@f+1,___ftsub@f1+1
  6747  0020BC  C0C2  F0AD         	movff	sin@f+2,___ftsub@f1+2
  6748  0020C0  0E00               	movlw	0
  6749  0020C2  6FAE               	movwf	___ftsub@f2& (0+255),b
  6750  0020C4  0E00               	movlw	0
  6751  0020C6  6FAF               	movwf	(___ftsub@f2+1)& (0+255),b
  6752  0020C8  0E40               	movlw	64
  6753  0020CA  6FB0               	movwf	(___ftsub@f2+2)& (0+255),b
  6754  0020CC  ECDA  F01C         	call	___ftsub	;wreg free
  6755  0020D0  C0AB  F0C0         	movff	?___ftsub,sin@f
  6756  0020D4  C0AC  F0C1         	movff	?___ftsub+1,sin@f+1
  6757  0020D8  C0AD  F0C2         	movff	?___ftsub+2,sin@f+2
  6758  0020DC  0100               	movlb	0	; () banked
  6759  0020DE  51CC               	movf	sin@sgn& (0+255),w,b
  6760  0020E0  A4D8               	btfss	status,2,c
  6761  0020E2  D002               	goto	u3200
  6762  0020E4  0E01               	movlw	1
  6763  0020E6  D001               	goto	u3210
  6764  0020E8                     u3200:
  6765  0020E8  0E00               	movlw	0
  6766  0020EA                     u3210:
  6767  0020EA  6FCC               	movwf	sin@sgn& (0+255),b
  6768  0020EC                     l756:
  6769                           
  6770                           ; BSR set to: 0
  6771                           
  6772                           ; BSR set to: 0
  6773  0020EC  0E00               	movlw	0
  6774  0020EE  6F60               	movwf	___ftge@ff1& (0+255),b
  6775  0020F0  0E80               	movlw	128
  6776  0020F2  6F61               	movwf	(___ftge@ff1+1)& (0+255),b
  6777  0020F4  0E3F               	movlw	63
  6778  0020F6  6F62               	movwf	(___ftge@ff1+2)& (0+255),b
  6779  0020F8  C0C0  F063         	movff	sin@f,___ftge@ff2
  6780  0020FC  C0C1  F064         	movff	sin@f+1,___ftge@ff2+1
  6781  002100  C0C2  F065         	movff	sin@f+2,___ftge@ff2+2
  6782  002104  ECD3  F01A         	call	___ftge	;wreg free
  6783  002108  0100               	movlb	0	; () banked
  6784  00210A  B0D8               	btfsc	status,0,c
  6785  00210C  D01D               	goto	l757
  6786                           
  6787                           ; BSR set to: 0
  6788  00210E  C0C0  F060         	movff	sin@f,___ftneg@f1
  6789  002112  C0C1  F061         	movff	sin@f+1,___ftneg@f1+1
  6790  002116  C0C2  F062         	movff	sin@f+2,___ftneg@f1+2
  6791  00211A  EC25  F01D         	call	___ftneg	;wreg free
  6792  00211E  C060  F08D         	movff	?___ftneg,___ftadd@f1
  6793  002122  C061  F08E         	movff	?___ftneg+1,___ftadd@f1+1
  6794  002126  C062  F08F         	movff	?___ftneg+2,___ftadd@f1+2
  6795  00212A  0E00               	movlw	0
  6796  00212C  0100               	movlb	0	; () banked
  6797  00212E  6F90               	movwf	___ftadd@f2& (0+255),b
  6798  002130  0E00               	movlw	0
  6799  002132  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
  6800  002134  0E40               	movlw	64
  6801  002136  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
  6802  002138  EC22  F011         	call	___ftadd	;wreg free
  6803  00213C  C08D  F0C0         	movff	?___ftadd,sin@f
  6804  002140  C08E  F0C1         	movff	?___ftadd+1,sin@f+1
  6805  002144  C08F  F0C2         	movff	?___ftadd+2,sin@f+2
  6806  002148                     l757:
  6807  002148  C0C0  F074         	movff	sin@f,___ftmul@f1
  6808  00214C  C0C1  F075         	movff	sin@f+1,___ftmul@f1+1
  6809  002150  C0C2  F076         	movff	sin@f+2,___ftmul@f1+2
  6810  002154  C0C0  F077         	movff	sin@f,___ftmul@f2
  6811  002158  C0C1  F078         	movff	sin@f+1,___ftmul@f2+1
  6812  00215C  C0C2  F079         	movff	sin@f+2,___ftmul@f2+2
  6813  002160  ECC3  F016         	call	___ftmul	;wreg free
  6814  002164  C074  F0C9         	movff	?___ftmul,sin@x2
  6815  002168  C075  F0CA         	movff	?___ftmul+1,sin@x2+1
  6816  00216C  C076  F0CB         	movff	?___ftmul+2,sin@x2+2
  6817  002170  C0C9  F099         	movff	sin@x2,eval_poly@x
  6818  002174  C0CA  F09A         	movff	sin@x2+1,eval_poly@x+1
  6819  002178  C0CB  F09B         	movff	sin@x2+2,eval_poly@x+2
  6820  00217C  0E86               	movlw	low sin@coeff_b
  6821  00217E  0100               	movlb	0	; () banked
  6822  002180  6F9C               	movwf	eval_poly@d& (0+255),b
  6823  002182  0E08               	movlw	high sin@coeff_b
  6824  002184  6F9D               	movwf	(eval_poly@d+1)& (0+255),b
  6825  002186  0E00               	movlw	0
  6826  002188  6F9F               	movwf	(eval_poly@n+1)& (0+255),b
  6827  00218A  0E03               	movlw	3
  6828  00218C  6F9E               	movwf	eval_poly@n& (0+255),b
  6829  00218E  EC11  F019         	call	_eval_poly	;wreg free
  6830  002192  C099  F0C3         	movff	?_eval_poly,sin@y
  6831  002196  C09A  F0C4         	movff	?_eval_poly+1,sin@y+1
  6832  00219A  C09B  F0C5         	movff	?_eval_poly+2,sin@y+2
  6833  00219E  C0C3  F0B4         	movff	sin@y,___ftdiv@f2
  6834  0021A2  C0C4  F0B5         	movff	sin@y+1,___ftdiv@f2+1
  6835  0021A6  C0C5  F0B6         	movff	sin@y+2,___ftdiv@f2+2
  6836  0021AA  0E00               	movlw	0
  6837  0021AC  0100               	movlb	0	; () banked
  6838  0021AE  6F9F               	movwf	(eval_poly@n+1)& (0+255),b
  6839  0021B0  0E04               	movlw	4
  6840  0021B2  6F9E               	movwf	eval_poly@n& (0+255),b
  6841  0021B4  0E77               	movlw	low sin@coeff_a
  6842  0021B6  6F9C               	movwf	eval_poly@d& (0+255),b
  6843  0021B8  0E08               	movlw	high sin@coeff_a
  6844  0021BA  6F9D               	movwf	(eval_poly@d+1)& (0+255),b
  6845  0021BC  C0C9  F099         	movff	sin@x2,eval_poly@x
  6846  0021C0  C0CA  F09A         	movff	sin@x2+1,eval_poly@x+1
  6847  0021C4  C0CB  F09B         	movff	sin@x2+2,eval_poly@x+2
  6848  0021C8  EC11  F019         	call	_eval_poly	;wreg free
  6849  0021CC  C099  F0B1         	movff	?_eval_poly,___ftdiv@f1
  6850  0021D0  C09A  F0B2         	movff	?_eval_poly+1,___ftdiv@f1+1
  6851  0021D4  C09B  F0B3         	movff	?_eval_poly+2,___ftdiv@f1+2
  6852  0021D8  ECB8  F017         	call	___ftdiv	;wreg free
  6853  0021DC  C0B1  F0C6         	movff	?___ftdiv,_sin$1432
  6854  0021E0  C0B2  F0C7         	movff	?___ftdiv+1,_sin$1432+1
  6855  0021E4  C0B3  F0C8         	movff	?___ftdiv+2,_sin$1432+2
  6856  0021E8  C0C0  F074         	movff	sin@f,___ftmul@f1
  6857  0021EC  C0C1  F075         	movff	sin@f+1,___ftmul@f1+1
  6858  0021F0  C0C2  F076         	movff	sin@f+2,___ftmul@f1+2
  6859  0021F4  C0C6  F077         	movff	_sin$1432,___ftmul@f2
  6860  0021F8  C0C7  F078         	movff	_sin$1432+1,___ftmul@f2+1
  6861  0021FC  C0C8  F079         	movff	_sin$1432+2,___ftmul@f2+2
  6862  002200  ECC3  F016         	call	___ftmul	;wreg free
  6863  002204  C074  F0C0         	movff	?___ftmul,sin@f
  6864  002208  C075  F0C1         	movff	?___ftmul+1,sin@f+1
  6865  00220C  C076  F0C2         	movff	?___ftmul+2,sin@f+2
  6866  002210  0100               	movlb	0	; () banked
  6867  002212  51CC               	movf	sin@sgn& (0+255),w,b
  6868  002214  B4D8               	btfsc	status,2,c
  6869  002216  D00F               	goto	l758
  6870                           
  6871                           ; BSR set to: 0
  6872  002218  C0C0  F060         	movff	sin@f,___ftneg@f1
  6873  00221C  C0C1  F061         	movff	sin@f+1,___ftneg@f1+1
  6874  002220  C0C2  F062         	movff	sin@f+2,___ftneg@f1+2
  6875  002224  EC25  F01D         	call	___ftneg	;wreg free
  6876  002228  C060  F0C0         	movff	?___ftneg,?_sin
  6877  00222C  C061  F0C1         	movff	?___ftneg+1,?_sin+1
  6878  002230  C062  F0C2         	movff	?___ftneg+2,?_sin+2
  6879  002234  0012               	return	
  6880  002236                     l758:
  6881                           
  6882                           ; BSR set to: 0
  6883  002236  C0C0  F0C0         	movff	sin@f,?_sin
  6884  00223A  C0C1  F0C1         	movff	sin@f+1,?_sin+1
  6885  00223E  C0C2  F0C2         	movff	sin@f+2,?_sin+2
  6886  002242  0012               	return		;funcret
  6887  002244                     __end_of_sin:
  6888                           	opt stack 0
  6889                           tblptru	equ	0xFF8
  6890                           tblptrh	equ	0xFF7
  6891                           tblptrl	equ	0xFF6
  6892                           tablat	equ	0xFF5
  6893                           prodh	equ	0xFF4
  6894                           prodl	equ	0xFF3
  6895                           postinc0	equ	0xFEE
  6896                           wreg	equ	0xFE8
  6897                           indf2	equ	0xFDF
  6898                           postinc2	equ	0xFDE
  6899                           postdec2	equ	0xFDD
  6900                           fsr2h	equ	0xFDA
  6901                           fsr2l	equ	0xFD9
  6902                           status	equ	0xFD8
  6903                           
  6904 ;; *************** function _floor *****************
  6905 ;; Defined at:
  6906 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\floor.c"
  6907 ;; Parameters:    Size  Location     Type
  6908 ;;  x               3   67[BANK0 ] unsigned char 
  6909 ;; Auto vars:     Size  Location     Type
  6910 ;;  i               3   70[BANK0 ] unsigned char 
  6911 ;;  expon           2   73[BANK0 ] int 
  6912 ;; Return value:  Size  Location     Type
  6913 ;;                  3   67[BANK0 ] int 
  6914 ;; Registers used:
  6915 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6916 ;; Tracked objects:
  6917 ;;		On entry : 0/0
  6918 ;;		On exit  : 0/0
  6919 ;;		Unchanged: 0/0
  6920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6921 ;;      Params:         0       3       0       0       0       0       0       0       0
  6922 ;;      Locals:         0       5       0       0       0       0       0       0       0
  6923 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6924 ;;      Totals:         0       8       0       0       0       0       0       0       0
  6925 ;;Total ram usage:        8 bytes
  6926 ;; Hardware stack levels used:    1
  6927 ;; Hardware stack levels required when called:    5
  6928 ;; This function calls:
  6929 ;;		___altoft
  6930 ;;		___ftadd
  6931 ;;		___ftge
  6932 ;;		___fttol
  6933 ;;		_frexp
  6934 ;; This function is called by:
  6935 ;;		_sin
  6936 ;; This function uses a non-reentrant model
  6937 ;;
  6938                           
  6939                           	psect	text15
  6940  00313E                     __ptext15:
  6941                           	opt stack 0
  6942  00313E                     _floor:
  6943                           	opt stack 23
  6944                           
  6945                           ;incstack = 0
  6946  00313E  C0A3  F060         	movff	floor@x,frexp@value
  6947  003142  C0A4  F061         	movff	floor@x+1,frexp@value+1
  6948  003146  C0A5  F062         	movff	floor@x+2,frexp@value+2
  6949  00314A  0EA9               	movlw	low floor@expon
  6950  00314C  0100               	movlb	0	; () banked
  6951  00314E  6F63               	movwf	frexp@eptr& (0+255),b
  6952  003150  0E00               	movlw	high floor@expon
  6953  003152  6F64               	movwf	(frexp@eptr+1)& (0+255),b
  6954  003154  ECA1  F01B         	call	_frexp	;wreg free
  6955  003158  0100               	movlb	0	; () banked
  6956  00315A  AFAA               	btfss	(floor@expon+1)& (0+255),7,b
  6957  00315C  D010               	goto	l920
  6958                           
  6959                           ; BSR set to: 0
  6960  00315E  AFA5               	btfss	(floor@x+2)& (0+255),7,b
  6961  003160  D007               	goto	l921
  6962                           
  6963                           ; BSR set to: 0
  6964  003162  0E00               	movlw	0
  6965  003164  6FA3               	movwf	?_floor& (0+255),b
  6966  003166  0E80               	movlw	128
  6967  003168  6FA4               	movwf	(?_floor+1)& (0+255),b
  6968  00316A  0EBF               	movlw	191
  6969  00316C  6FA5               	movwf	(?_floor+2)& (0+255),b
  6970                           
  6971                           ; BSR set to: 0
  6972  00316E  0012               	return	
  6973  003170                     l921:
  6974                           
  6975                           ; BSR set to: 0
  6976                           
  6977                           ; BSR set to: 0
  6978  003170  0E00               	movlw	0
  6979  003172  6FA3               	movwf	?_floor& (0+255),b
  6980  003174  0E00               	movlw	0
  6981  003176  6FA4               	movwf	(?_floor+1)& (0+255),b
  6982  003178  0E00               	movlw	0
  6983  00317A  6FA5               	movwf	(?_floor+2)& (0+255),b
  6984                           
  6985                           ; BSR set to: 0
  6986  00317C  0012               	return	
  6987  00317E                     l920:
  6988                           
  6989                           ; BSR set to: 0
  6990                           
  6991                           ; BSR set to: 0
  6992  00317E  51AA               	movf	(floor@expon+1)& (0+255),w,b
  6993  003180  E104               	bnz	u2840
  6994  003182  0E15               	movlw	21
  6995  003184  5DA9               	subwf	floor@expon& (0+255),w,b
  6996  003186  A0D8               	btfss	status,0,c
  6997  003188  D007               	goto	l923
  6998  00318A                     u2840:
  6999                           
  7000                           ; BSR set to: 0
  7001  00318A  C0A3  F0A3         	movff	floor@x,?_floor
  7002  00318E  C0A4  F0A4         	movff	floor@x+1,?_floor+1
  7003  003192  C0A5  F0A5         	movff	floor@x+2,?_floor+2
  7004  003196  0012               	return	
  7005  003198                     l923:
  7006                           
  7007                           ; BSR set to: 0
  7008                           
  7009                           ; BSR set to: 0
  7010  003198  C0A3  F08A         	movff	floor@x,___fttol@f1
  7011  00319C  C0A4  F08B         	movff	floor@x+1,___fttol@f1+1
  7012  0031A0  C0A5  F08C         	movff	floor@x+2,___fttol@f1+2
  7013  0031A4  EC47  F016         	call	___fttol	;wreg free
  7014  0031A8  C08A  F099         	movff	?___fttol,___altoft@c
  7015  0031AC  C08B  F09A         	movff	?___fttol+1,___altoft@c+1
  7016  0031B0  C08C  F09B         	movff	?___fttol+2,___altoft@c+2
  7017  0031B4  C08D  F09C         	movff	?___fttol+3,___altoft@c+3
  7018  0031B8  ECDF  F01B         	call	___altoft	;wreg free
  7019  0031BC  C099  F0A6         	movff	?___altoft,floor@i
  7020  0031C0  C09A  F0A7         	movff	?___altoft+1,floor@i+1
  7021  0031C4  C09B  F0A8         	movff	?___altoft+2,floor@i+2
  7022  0031C8  C0A3  F060         	movff	floor@x,___ftge@ff1
  7023  0031CC  C0A4  F061         	movff	floor@x+1,___ftge@ff1+1
  7024  0031D0  C0A5  F062         	movff	floor@x+2,___ftge@ff1+2
  7025  0031D4  C0A6  F063         	movff	floor@i,___ftge@ff2
  7026  0031D8  C0A7  F064         	movff	floor@i+1,___ftge@ff2+1
  7027  0031DC  C0A8  F065         	movff	floor@i+2,___ftge@ff2+2
  7028  0031E0  ECD3  F01A         	call	___ftge	;wreg free
  7029  0031E4  0100               	movlb	0	; () banked
  7030  0031E6  B0D8               	btfsc	status,0,c
  7031  0031E8  D015               	goto	l924
  7032                           
  7033                           ; BSR set to: 0
  7034  0031EA  C0A6  F08D         	movff	floor@i,___ftadd@f1
  7035  0031EE  C0A7  F08E         	movff	floor@i+1,___ftadd@f1+1
  7036  0031F2  C0A8  F08F         	movff	floor@i+2,___ftadd@f1+2
  7037  0031F6  0E00               	movlw	0
  7038  0031F8  6F90               	movwf	___ftadd@f2& (0+255),b
  7039  0031FA  0E80               	movlw	128
  7040  0031FC  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
  7041  0031FE  0EBF               	movlw	191
  7042  003200  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
  7043  003202  EC22  F011         	call	___ftadd	;wreg free
  7044  003206  C08D  F0A3         	movff	?___ftadd,?_floor
  7045  00320A  C08E  F0A4         	movff	?___ftadd+1,?_floor+1
  7046  00320E  C08F  F0A5         	movff	?___ftadd+2,?_floor+2
  7047  003212  0012               	return	
  7048  003214                     l924:
  7049                           
  7050                           ; BSR set to: 0
  7051  003214  C0A6  F0A3         	movff	floor@i,?_floor
  7052  003218  C0A7  F0A4         	movff	floor@i+1,?_floor+1
  7053  00321C  C0A8  F0A5         	movff	floor@i+2,?_floor+2
  7054  003220  0012               	return		;funcret
  7055  003222                     __end_of_floor:
  7056                           	opt stack 0
  7057                           tblptru	equ	0xFF8
  7058                           tblptrh	equ	0xFF7
  7059                           tblptrl	equ	0xFF6
  7060                           tablat	equ	0xFF5
  7061                           prodh	equ	0xFF4
  7062                           prodl	equ	0xFF3
  7063                           postinc0	equ	0xFEE
  7064                           wreg	equ	0xFE8
  7065                           indf2	equ	0xFDF
  7066                           postinc2	equ	0xFDE
  7067                           postdec2	equ	0xFDD
  7068                           fsr2h	equ	0xFDA
  7069                           fsr2l	equ	0xFD9
  7070                           status	equ	0xFD8
  7071                           
  7072 ;; *************** function _frexp *****************
  7073 ;; Defined at:
  7074 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
  7075 ;; Parameters:    Size  Location     Type
  7076 ;;  value           3    0[BANK0 ] int 
  7077 ;;  eptr            2    3[BANK0 ] PTR int 
  7078 ;;		 -> floor@expon(2), 
  7079 ;; Auto vars:     Size  Location     Type
  7080 ;;		None
  7081 ;; Return value:  Size  Location     Type
  7082 ;;                  3    0[BANK0 ] PTR int 
  7083 ;; Registers used:
  7084 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7085 ;; Tracked objects:
  7086 ;;		On entry : 0/0
  7087 ;;		On exit  : 0/0
  7088 ;;		Unchanged: 0/0
  7089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7090 ;;      Params:         0       5       0       0       0       0       0       0       0
  7091 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7092 ;;      Temps:          0       2       0       0       0       0       0       0       0
  7093 ;;      Totals:         0       7       0       0       0       0       0       0       0
  7094 ;;Total ram usage:        7 bytes
  7095 ;; Hardware stack levels used:    1
  7096 ;; Hardware stack levels required when called:    3
  7097 ;; This function calls:
  7098 ;;		Nothing
  7099 ;; This function is called by:
  7100 ;;		_floor
  7101 ;; This function uses a non-reentrant model
  7102 ;;
  7103                           
  7104                           	psect	text16
  7105  003742                     __ptext16:
  7106                           	opt stack 0
  7107  003742                     _frexp:
  7108                           	opt stack 24
  7109                           
  7110                           ;incstack = 0
  7111  003742  0100               	movlb	0	; () banked
  7112  003744  5160               	movf	frexp@value& (0+255),w,b
  7113  003746  1161               	iorwf	(frexp@value+1)& (0+255),w,b
  7114  003748  1162               	iorwf	(frexp@value+2)& (0+255),w,b
  7115  00374A  A4D8               	btfss	status,2,c
  7116  00374C  D009               	goto	l929
  7117                           
  7118                           ; BSR set to: 0
  7119  00374E  C063  FFD9         	movff	frexp@eptr,fsr2l
  7120  003752  C064  FFDA         	movff	frexp@eptr+1,fsr2h
  7121  003756  0E00               	movlw	0
  7122  003758  6EDE               	movwf	postinc2,c
  7123  00375A  0E00               	movlw	0
  7124  00375C  6EDD               	movwf	postdec2,c
  7125                           
  7126                           ; BSR set to: 0
  7127                           ;	Return value of _frexp is never used
  7128  00375E  0012               	return	
  7129  003760                     l929:
  7130                           
  7131                           ; BSR set to: 0
  7132                           
  7133                           ; BSR set to: 0
  7134  003760  5162               	movf	(frexp@value+2)& (0+255),w,b
  7135  003762  0B7F               	andlw	127
  7136  003764  6F65               	movwf	??_frexp& (0+255),b
  7137  003766  6B66               	clrf	(??_frexp+1)& (0+255),b
  7138  003768  90D8               	bcf	status,0,c
  7139  00376A  3765               	rlcf	??_frexp& (0+255),f,b
  7140  00376C  3766               	rlcf	(??_frexp+1)& (0+255),f,b
  7141  00376E  C063  FFD9         	movff	frexp@eptr,fsr2l
  7142  003772  C064  FFDA         	movff	frexp@eptr+1,fsr2h
  7143  003776  C065  FFDE         	movff	??_frexp,postinc2
  7144  00377A  C066  FFDD         	movff	??_frexp+1,postdec2
  7145  00377E  AF61               	btfss	(frexp@value+1)& (0+255),7,b
  7146  003780  D003               	goto	u2620
  7147  003782  6B65               	clrf	??_frexp& (0+255),b
  7148  003784  2B65               	incf	??_frexp& (0+255),f,b
  7149  003786  D002               	goto	u2628
  7150  003788                     u2620:
  7151  003788  0100               	movlb	0	; () banked
  7152  00378A  6B65               	clrf	??_frexp& (0+255),b
  7153  00378C                     u2628:
  7154  00378C  5165               	movf	??_frexp& (0+255),w,b
  7155  00378E  C063  FFD9         	movff	frexp@eptr,fsr2l
  7156  003792  C064  FFDA         	movff	frexp@eptr+1,fsr2h
  7157  003796  12DE               	iorwf	postinc2,f,c
  7158  003798  0E00               	movlw	0
  7159  00379A  12DD               	iorwf	postdec2,f,c
  7160                           
  7161                           ; BSR set to: 0
  7162  00379C  C063  FFD9         	movff	frexp@eptr,fsr2l
  7163  0037A0  C064  FFDA         	movff	frexp@eptr+1,fsr2h
  7164  0037A4  0E82               	movlw	130
  7165  0037A6  26DE               	addwf	postinc2,f,c
  7166  0037A8  0EFF               	movlw	255
  7167  0037AA  22DD               	addwfc	postdec2,f,c
  7168                           
  7169                           ; BSR set to: 0
  7170  0037AC  8162               	bsf	(frexp@value+2)& (0+255),0,b
  7171  0037AE  8362               	bsf	(frexp@value+2)& (0+255),1,b
  7172  0037B0  8562               	bsf	(frexp@value+2)& (0+255),2,b
  7173  0037B2  8762               	bsf	(frexp@value+2)& (0+255),3,b
  7174  0037B4  8962               	bsf	(frexp@value+2)& (0+255),4,b
  7175  0037B6  8B62               	bsf	(frexp@value+2)& (0+255),5,b
  7176  0037B8  9D62               	bcf	(frexp@value+2)& (0+255),6,b
  7177                           
  7178                           ; BSR set to: 0
  7179  0037BA  9F61               	bcf	(frexp@value+1)& (0+255),7,b
  7180  0037BC  0012               	return	
  7181  0037BE                     __end_of_frexp:
  7182                           	opt stack 0
  7183                           tblptru	equ	0xFF8
  7184                           tblptrh	equ	0xFF7
  7185                           tblptrl	equ	0xFF6
  7186                           tablat	equ	0xFF5
  7187                           prodh	equ	0xFF4
  7188                           prodl	equ	0xFF3
  7189                           postinc0	equ	0xFEE
  7190                           wreg	equ	0xFE8
  7191                           indf2	equ	0xFDF
  7192                           postinc2	equ	0xFDE
  7193                           postdec2	equ	0xFDD
  7194                           fsr2h	equ	0xFDA
  7195                           fsr2l	equ	0xFD9
  7196                           status	equ	0xFD8
  7197                           
  7198 ;; *************** function ___fttol *****************
  7199 ;; Defined at:
  7200 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  7201 ;; Parameters:    Size  Location     Type
  7202 ;;  f1              3   42[BANK0 ] float 
  7203 ;; Auto vars:     Size  Location     Type
  7204 ;;  lval            4   52[BANK0 ] unsigned long 
  7205 ;;  exp1            1   56[BANK0 ] unsigned char 
  7206 ;;  sign1           1   51[BANK0 ] unsigned char 
  7207 ;; Return value:  Size  Location     Type
  7208 ;;                  4   42[BANK0 ] long 
  7209 ;; Registers used:
  7210 ;;		wreg, status,2, status,0
  7211 ;; Tracked objects:
  7212 ;;		On entry : 0/0
  7213 ;;		On exit  : 0/0
  7214 ;;		Unchanged: 0/0
  7215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7216 ;;      Params:         0       4       0       0       0       0       0       0       0
  7217 ;;      Locals:         0       6       0       0       0       0       0       0       0
  7218 ;;      Temps:          0       5       0       0       0       0       0       0       0
  7219 ;;      Totals:         0      15       0       0       0       0       0       0       0
  7220 ;;Total ram usage:       15 bytes
  7221 ;; Hardware stack levels used:    1
  7222 ;; Hardware stack levels required when called:    3
  7223 ;; This function calls:
  7224 ;;		Nothing
  7225 ;; This function is called by:
  7226 ;;		_sprintf
  7227 ;;		_floor
  7228 ;; This function uses a non-reentrant model
  7229 ;;
  7230                           
  7231                           	psect	text17
  7232  002C8E                     __ptext17:
  7233                           	opt stack 0
  7234  002C8E                     ___fttol:
  7235                           	opt stack 26
  7236                           
  7237                           ; BSR set to: 0
  7238                           ;incstack = 0
  7239  002C8E  C08C  F08E         	movff	___fttol@f1+2,??___fttol
  7240  002C92  0100               	movlb	0	; () banked
  7241  002C94  6B8F               	clrf	(??___fttol+1)& (0+255),b
  7242  002C96  6B90               	clrf	(??___fttol+2)& (0+255),b
  7243  002C98  358B               	rlcf	(___fttol@f1+1)& (0+255),w,b
  7244  002C9A  378E               	rlcf	??___fttol& (0+255),f,b
  7245  002C9C  E301               	bnc	u2531
  7246  002C9E  818F               	bsf	(??___fttol+1)& (0+255),0,b
  7247  002CA0                     u2531:
  7248  002CA0  518E               	movf	??___fttol& (0+255),w,b
  7249  002CA2  6F98               	movwf	___fttol@exp1& (0+255),b
  7250  002CA4  5198               	movf	___fttol@exp1& (0+255),w,b
  7251  002CA6  A4D8               	btfss	status,2,c
  7252  002CA8  D009               	goto	l625
  7253                           
  7254                           ; BSR set to: 0
  7255  002CAA  0E00               	movlw	0
  7256  002CAC  6F8A               	movwf	?___fttol& (0+255),b
  7257  002CAE  0E00               	movlw	0
  7258  002CB0  6F8B               	movwf	(?___fttol+1)& (0+255),b
  7259  002CB2  0E00               	movlw	0
  7260  002CB4  6F8C               	movwf	(?___fttol+2)& (0+255),b
  7261  002CB6  0E00               	movlw	0
  7262  002CB8  6F8D               	movwf	(?___fttol+3)& (0+255),b
  7263                           
  7264                           ; BSR set to: 0
  7265  002CBA  0012               	return	
  7266  002CBC                     l625:
  7267                           
  7268                           ; BSR set to: 0
  7269                           
  7270                           ; BSR set to: 0
  7271  002CBC  0E17               	movlw	23
  7272  002CBE  6F8E               	movwf	??___fttol& (0+255),b
  7273  002CC0  C08A  F08F         	movff	___fttol@f1,??___fttol+1
  7274  002CC4  C08B  F090         	movff	___fttol@f1+1,??___fttol+2
  7275  002CC8  C08C  F091         	movff	___fttol@f1+2,??___fttol+3
  7276  002CCC  298E               	incf	??___fttol& (0+255),w,b
  7277  002CCE  6F92               	movwf	(??___fttol+4)& (0+255),b
  7278  002CD0  D004               	goto	u2550
  7279  002CD2                     u2555:
  7280  002CD2  90D8               	bcf	status,0,c
  7281  002CD4  3391               	rrcf	(??___fttol+3)& (0+255),f,b
  7282  002CD6  3390               	rrcf	(??___fttol+2)& (0+255),f,b
  7283  002CD8  338F               	rrcf	(??___fttol+1)& (0+255),f,b
  7284  002CDA                     u2550:
  7285  002CDA  2F92               	decfsz	(??___fttol+4)& (0+255),f,b
  7286  002CDC  D7FA               	goto	u2555
  7287  002CDE  0100               	movlb	0	; () banked
  7288  002CE0  518F               	movf	(??___fttol+1)& (0+255),w,b
  7289  002CE2  6F93               	movwf	___fttol@sign1& (0+255),b
  7290                           
  7291                           ; BSR set to: 0
  7292  002CE4  8F8B               	bsf	(___fttol@f1+1)& (0+255),7,b
  7293                           
  7294                           ; BSR set to: 0
  7295  002CE6  0EFF               	movlw	255
  7296  002CE8  178A               	andwf	___fttol@f1& (0+255),f,b
  7297  002CEA  0EFF               	movlw	255
  7298  002CEC  178B               	andwf	(___fttol@f1+1)& (0+255),f,b
  7299  002CEE  0E00               	movlw	0
  7300  002CF0  178C               	andwf	(___fttol@f1+2)& (0+255),f,b
  7301                           
  7302                           ; BSR set to: 0
  7303  002CF2  518A               	movf	___fttol@f1& (0+255),w,b
  7304  002CF4  6F94               	movwf	___fttol@lval& (0+255),b
  7305  002CF6  518B               	movf	(___fttol@f1+1)& (0+255),w,b
  7306  002CF8  6F95               	movwf	(___fttol@lval+1)& (0+255),b
  7307  002CFA  518C               	movf	(___fttol@f1+2)& (0+255),w,b
  7308  002CFC  6F96               	movwf	(___fttol@lval+2)& (0+255),b
  7309  002CFE  6B97               	clrf	(___fttol@lval+3)& (0+255),b
  7310                           
  7311                           ; BSR set to: 0
  7312  002D00  0E8E               	movlw	142
  7313  002D02  5F98               	subwf	___fttol@exp1& (0+255),f,b
  7314                           
  7315                           ; BSR set to: 0
  7316  002D04  AF98               	btfss	___fttol@exp1& (0+255),7,b
  7317  002D06  D016               	goto	l627
  7318                           
  7319                           ; BSR set to: 0
  7320  002D08  5198               	movf	___fttol@exp1& (0+255),w,b
  7321  002D0A  0A80               	xorlw	128
  7322  002D0C  0F8F               	addlw	143
  7323  002D0E  B0D8               	btfsc	status,0,c
  7324  002D10  D009               	goto	l628
  7325                           
  7326                           ; BSR set to: 0
  7327  002D12  0E00               	movlw	0
  7328  002D14  6F8A               	movwf	?___fttol& (0+255),b
  7329  002D16  0E00               	movlw	0
  7330  002D18  6F8B               	movwf	(?___fttol+1)& (0+255),b
  7331  002D1A  0E00               	movlw	0
  7332  002D1C  6F8C               	movwf	(?___fttol+2)& (0+255),b
  7333  002D1E  0E00               	movlw	0
  7334  002D20  6F8D               	movwf	(?___fttol+3)& (0+255),b
  7335                           
  7336                           ; BSR set to: 0
  7337  002D22  0012               	return	
  7338  002D24                     l628:
  7339                           
  7340                           ; BSR set to: 0
  7341                           
  7342                           ; BSR set to: 0
  7343                           
  7344                           ; BSR set to: 0
  7345  002D24  90D8               	bcf	status,0,c
  7346  002D26  3397               	rrcf	(___fttol@lval+3)& (0+255),f,b
  7347  002D28  3396               	rrcf	(___fttol@lval+2)& (0+255),f,b
  7348  002D2A  3395               	rrcf	(___fttol@lval+1)& (0+255),f,b
  7349  002D2C  3394               	rrcf	___fttol@lval& (0+255),f,b
  7350                           
  7351                           ; BSR set to: 0
  7352  002D2E  3F98               	incfsz	___fttol@exp1& (0+255),f,b
  7353  002D30  D7F9               	goto	l628
  7354                           
  7355                           ; BSR set to: 0
  7356  002D32  D015               	goto	u2590
  7357  002D34                     l627:
  7358                           
  7359                           ; BSR set to: 0
  7360                           
  7361                           ; BSR set to: 0
  7362  002D34  0E17               	movlw	23
  7363  002D36  6598               	cpfsgt	___fttol@exp1& (0+255),b
  7364  002D38  D00F               	goto	l633
  7365                           
  7366                           ; BSR set to: 0
  7367  002D3A  0E00               	movlw	0
  7368  002D3C  6F8A               	movwf	?___fttol& (0+255),b
  7369  002D3E  0E00               	movlw	0
  7370  002D40  6F8B               	movwf	(?___fttol+1)& (0+255),b
  7371  002D42  0E00               	movlw	0
  7372  002D44  6F8C               	movwf	(?___fttol+2)& (0+255),b
  7373  002D46  0E00               	movlw	0
  7374  002D48  6F8D               	movwf	(?___fttol+3)& (0+255),b
  7375                           
  7376                           ; BSR set to: 0
  7377  002D4A  0012               	return	
  7378  002D4C                     
  7379                           ; BSR set to: 0
  7380                           
  7381                           ; BSR set to: 0
  7382  002D4C  90D8               	bcf	status,0,c
  7383  002D4E  3794               	rlcf	___fttol@lval& (0+255),f,b
  7384  002D50  3795               	rlcf	(___fttol@lval+1)& (0+255),f,b
  7385  002D52  3796               	rlcf	(___fttol@lval+2)& (0+255),f,b
  7386  002D54  3797               	rlcf	(___fttol@lval+3)& (0+255),f,b
  7387  002D56  0798               	decf	___fttol@exp1& (0+255),f,b
  7388  002D58                     l633:
  7389                           
  7390                           ; BSR set to: 0
  7391                           
  7392                           ; BSR set to: 0
  7393  002D58  5198               	movf	___fttol@exp1& (0+255),w,b
  7394  002D5A  A4D8               	btfss	status,2,c
  7395  002D5C  D7F7               	goto	l634
  7396  002D5E                     u2590:
  7397                           
  7398                           ; BSR set to: 0
  7399                           
  7400                           ; BSR set to: 0
  7401                           
  7402                           ; BSR set to: 0
  7403  002D5E  5193               	movf	___fttol@sign1& (0+255),w,b
  7404  002D60  B4D8               	btfsc	status,2,c
  7405  002D62  D008               	goto	l636
  7406                           
  7407                           ; BSR set to: 0
  7408  002D64  1F97               	comf	(___fttol@lval+3)& (0+255),f,b
  7409  002D66  1F96               	comf	(___fttol@lval+2)& (0+255),f,b
  7410  002D68  1F95               	comf	(___fttol@lval+1)& (0+255),f,b
  7411  002D6A  6D94               	negf	___fttol@lval& (0+255),b
  7412  002D6C  0E00               	movlw	0
  7413  002D6E  2395               	addwfc	(___fttol@lval+1)& (0+255),f,b
  7414  002D70  2396               	addwfc	(___fttol@lval+2)& (0+255),f,b
  7415  002D72  2397               	addwfc	(___fttol@lval+3)& (0+255),f,b
  7416  002D74                     l636:
  7417                           
  7418                           ; BSR set to: 0
  7419                           
  7420                           ; BSR set to: 0
  7421  002D74  C094  F08A         	movff	___fttol@lval,?___fttol
  7422  002D78  C095  F08B         	movff	___fttol@lval+1,?___fttol+1
  7423  002D7C  C096  F08C         	movff	___fttol@lval+2,?___fttol+2
  7424  002D80  C097  F08D         	movff	___fttol@lval+3,?___fttol+3
  7425  002D84  0012               	return	
  7426  002D86                     __end_of___fttol:
  7427                           	opt stack 0
  7428                           tblptru	equ	0xFF8
  7429                           tblptrh	equ	0xFF7
  7430                           tblptrl	equ	0xFF6
  7431                           tablat	equ	0xFF5
  7432                           prodh	equ	0xFF4
  7433                           prodl	equ	0xFF3
  7434                           postinc0	equ	0xFEE
  7435                           wreg	equ	0xFE8
  7436                           indf2	equ	0xFDF
  7437                           postinc2	equ	0xFDE
  7438                           postdec2	equ	0xFDD
  7439                           fsr2h	equ	0xFDA
  7440                           fsr2l	equ	0xFD9
  7441                           status	equ	0xFD8
  7442                           
  7443 ;; *************** function ___ftge *****************
  7444 ;; Defined at:
  7445 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  7446 ;; Parameters:    Size  Location     Type
  7447 ;;  ff1             3    0[BANK0 ] float 
  7448 ;;  ff2             3    3[BANK0 ] float 
  7449 ;; Auto vars:     Size  Location     Type
  7450 ;;		None
  7451 ;; Return value:  Size  Location     Type
  7452 ;;		None               void
  7453 ;; Registers used:
  7454 ;;		wreg, status,2, status,0
  7455 ;; Tracked objects:
  7456 ;;		On entry : 0/0
  7457 ;;		On exit  : 0/0
  7458 ;;		Unchanged: 0/0
  7459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7460 ;;      Params:         0       6       0       0       0       0       0       0       0
  7461 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7462 ;;      Temps:          0       3       0       0       0       0       0       0       0
  7463 ;;      Totals:         0       9       0       0       0       0       0       0       0
  7464 ;;Total ram usage:        9 bytes
  7465 ;; Hardware stack levels used:    1
  7466 ;; Hardware stack levels required when called:    3
  7467 ;; This function calls:
  7468 ;;		Nothing
  7469 ;; This function is called by:
  7470 ;;		_sprintf
  7471 ;;		_cos
  7472 ;;		_sin
  7473 ;;		_sqrt
  7474 ;;		_floor
  7475 ;; This function uses a non-reentrant model
  7476 ;;
  7477                           
  7478                           	psect	text18
  7479  0035A6                     __ptext18:
  7480                           	opt stack 0
  7481  0035A6                     ___ftge:
  7482                           	opt stack 26
  7483                           
  7484                           ; BSR set to: 0
  7485                           ;incstack = 0
  7486  0035A6  0100               	movlb	0	; () banked
  7487  0035A8  AF62               	btfss	(___ftge@ff1+2)& (0+255),7,b
  7488  0035AA  D016               	goto	l597
  7489                           
  7490                           ; BSR set to: 0
  7491  0035AC  C060  F066         	movff	___ftge@ff1,??___ftge
  7492  0035B0  C061  F067         	movff	___ftge@ff1+1,??___ftge+1
  7493  0035B4  C062  F068         	movff	___ftge@ff1+2,??___ftge+2
  7494  0035B8  1F66               	comf	??___ftge& (0+255),f,b
  7495  0035BA  1F67               	comf	(??___ftge+1)& (0+255),f,b
  7496  0035BC  1F68               	comf	(??___ftge+2)& (0+255),f,b
  7497  0035BE  2B66               	incf	??___ftge& (0+255),f,b
  7498  0035C0  0E00               	movlw	0
  7499  0035C2  2367               	addwfc	(??___ftge+1)& (0+255),f,b
  7500  0035C4  2368               	addwfc	(??___ftge+2)& (0+255),f,b
  7501  0035C6  0E00               	movlw	0
  7502  0035C8  2566               	addwf	??___ftge& (0+255),w,b
  7503  0035CA  6F60               	movwf	___ftge@ff1& (0+255),b
  7504  0035CC  0E00               	movlw	0
  7505  0035CE  2167               	addwfc	(??___ftge+1)& (0+255),w,b
  7506  0035D0  6F61               	movwf	(___ftge@ff1+1)& (0+255),b
  7507  0035D2  0E80               	movlw	128
  7508  0035D4  2168               	addwfc	(??___ftge+2)& (0+255),w,b
  7509  0035D6  6F62               	movwf	(___ftge@ff1+2)& (0+255),b
  7510  0035D8                     l597:
  7511                           
  7512                           ; BSR set to: 0
  7513                           
  7514                           ; BSR set to: 0
  7515  0035D8  AF65               	btfss	(___ftge@ff2+2)& (0+255),7,b
  7516  0035DA  D016               	goto	l598
  7517                           
  7518                           ; BSR set to: 0
  7519  0035DC  C063  F066         	movff	___ftge@ff2,??___ftge
  7520  0035E0  C064  F067         	movff	___ftge@ff2+1,??___ftge+1
  7521  0035E4  C065  F068         	movff	___ftge@ff2+2,??___ftge+2
  7522  0035E8  1F66               	comf	??___ftge& (0+255),f,b
  7523  0035EA  1F67               	comf	(??___ftge+1)& (0+255),f,b
  7524  0035EC  1F68               	comf	(??___ftge+2)& (0+255),f,b
  7525  0035EE  2B66               	incf	??___ftge& (0+255),f,b
  7526  0035F0  0E00               	movlw	0
  7527  0035F2  2367               	addwfc	(??___ftge+1)& (0+255),f,b
  7528  0035F4  2368               	addwfc	(??___ftge+2)& (0+255),f,b
  7529  0035F6  0E00               	movlw	0
  7530  0035F8  2566               	addwf	??___ftge& (0+255),w,b
  7531  0035FA  6F63               	movwf	___ftge@ff2& (0+255),b
  7532  0035FC  0E00               	movlw	0
  7533  0035FE  2167               	addwfc	(??___ftge+1)& (0+255),w,b
  7534  003600  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  7535  003602  0E80               	movlw	128
  7536  003604  2168               	addwfc	(??___ftge+2)& (0+255),w,b
  7537  003606  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  7538  003608                     l598:
  7539                           
  7540                           ; BSR set to: 0
  7541                           
  7542                           ; BSR set to: 0
  7543  003608  0E00               	movlw	0
  7544  00360A  1B60               	xorwf	___ftge@ff1& (0+255),f,b
  7545  00360C  0E00               	movlw	0
  7546  00360E  1B61               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  7547  003610  0E80               	movlw	128
  7548  003612  1B62               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  7549                           
  7550                           ; BSR set to: 0
  7551  003614  0E00               	movlw	0
  7552  003616  1B63               	xorwf	___ftge@ff2& (0+255),f,b
  7553  003618  0E00               	movlw	0
  7554  00361A  1B64               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  7555  00361C  0E80               	movlw	128
  7556  00361E  1B65               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  7557  003620  5163               	movf	___ftge@ff2& (0+255),w,b
  7558  003622  5D60               	subwf	___ftge@ff1& (0+255),w,b
  7559  003624  5164               	movf	(___ftge@ff2+1)& (0+255),w,b
  7560  003626  5961               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  7561  003628  5165               	movf	(___ftge@ff2+2)& (0+255),w,b
  7562  00362A  5962               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  7563  00362C  B0D8               	btfsc	status,0,c
  7564  00362E  D002               	goto	l2544
  7565                           
  7566                           ; BSR set to: 0
  7567  003630  90D8               	bcf	status,0,c
  7568  003632  0012               	return	
  7569  003634                     l2544:
  7570                           
  7571                           ; BSR set to: 0
  7572                           
  7573                           ; BSR set to: 0
  7574  003634  80D8               	bsf	status,0,c
  7575                           
  7576                           ; BSR set to: 0
  7577  003636  0012               	return	
  7578  003638                     __end_of___ftge:
  7579                           	opt stack 0
  7580                           tblptru	equ	0xFF8
  7581                           tblptrh	equ	0xFF7
  7582                           tblptrl	equ	0xFF6
  7583                           tablat	equ	0xFF5
  7584                           prodh	equ	0xFF4
  7585                           prodl	equ	0xFF3
  7586                           postinc0	equ	0xFEE
  7587                           wreg	equ	0xFE8
  7588                           indf2	equ	0xFDF
  7589                           postinc2	equ	0xFDE
  7590                           postdec2	equ	0xFDD
  7591                           fsr2h	equ	0xFDA
  7592                           fsr2l	equ	0xFD9
  7593                           status	equ	0xFD8
  7594                           
  7595 ;; *************** function ___altoft *****************
  7596 ;; Defined at:
  7597 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
  7598 ;; Parameters:    Size  Location     Type
  7599 ;;  c               4   57[BANK0 ] long 
  7600 ;; Auto vars:     Size  Location     Type
  7601 ;;  sign            1   66[BANK0 ] unsigned char 
  7602 ;;  exp             1   65[BANK0 ] unsigned char 
  7603 ;; Return value:  Size  Location     Type
  7604 ;;                  3   57[BANK0 ] float 
  7605 ;; Registers used:
  7606 ;;		wreg, status,2, status,0, cstack
  7607 ;; Tracked objects:
  7608 ;;		On entry : 0/0
  7609 ;;		On exit  : 0/0
  7610 ;;		Unchanged: 0/0
  7611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7612 ;;      Params:         0       4       0       0       0       0       0       0       0
  7613 ;;      Locals:         0       2       0       0       0       0       0       0       0
  7614 ;;      Temps:          0       4       0       0       0       0       0       0       0
  7615 ;;      Totals:         0      10       0       0       0       0       0       0       0
  7616 ;;Total ram usage:       10 bytes
  7617 ;; Hardware stack levels used:    1
  7618 ;; Hardware stack levels required when called:    4
  7619 ;; This function calls:
  7620 ;;		___ftpack
  7621 ;; This function is called by:
  7622 ;;		_floor
  7623 ;; This function uses a non-reentrant model
  7624 ;;
  7625                           
  7626                           	psect	text19
  7627  0037BE                     __ptext19:
  7628                           	opt stack 0
  7629  0037BE                     ___altoft:
  7630                           	opt stack 23
  7631                           
  7632                           ; BSR set to: 0
  7633                           ;incstack = 0
  7634  0037BE  0E00               	movlw	0
  7635  0037C0  0100               	movlb	0	; () banked
  7636  0037C2  6FA2               	movwf	___altoft@sign& (0+255),b
  7637  0037C4  0E8E               	movlw	142
  7638  0037C6  6FA1               	movwf	___altoft@exp& (0+255),b
  7639                           
  7640                           ; BSR set to: 0
  7641  0037C8  AF9C               	btfss	(___altoft@c+3)& (0+255),7,b
  7642  0037CA  D011               	goto	l355
  7643                           
  7644                           ; BSR set to: 0
  7645  0037CC  1F9C               	comf	(___altoft@c+3)& (0+255),f,b
  7646  0037CE  1F9B               	comf	(___altoft@c+2)& (0+255),f,b
  7647  0037D0  1F9A               	comf	(___altoft@c+1)& (0+255),f,b
  7648  0037D2  6D99               	negf	___altoft@c& (0+255),b
  7649  0037D4  0E00               	movlw	0
  7650  0037D6  239A               	addwfc	(___altoft@c+1)& (0+255),f,b
  7651  0037D8  239B               	addwfc	(___altoft@c+2)& (0+255),f,b
  7652  0037DA  239C               	addwfc	(___altoft@c+3)& (0+255),f,b
  7653                           
  7654                           ; BSR set to: 0
  7655  0037DC  0E01               	movlw	1
  7656  0037DE  6FA2               	movwf	___altoft@sign& (0+255),b
  7657                           
  7658                           ; BSR set to: 0
  7659  0037E0  D006               	goto	l355
  7660  0037E2                     
  7661                           ; BSR set to: 0
  7662                           
  7663                           ; BSR set to: 0
  7664  0037E2  90D8               	bcf	status,0,c
  7665  0037E4  339C               	rrcf	(___altoft@c+3)& (0+255),f,b
  7666  0037E6  339B               	rrcf	(___altoft@c+2)& (0+255),f,b
  7667  0037E8  339A               	rrcf	(___altoft@c+1)& (0+255),f,b
  7668  0037EA  3399               	rrcf	___altoft@c& (0+255),f,b
  7669  0037EC  2BA1               	incf	___altoft@exp& (0+255),f,b
  7670  0037EE                     l355:
  7671                           
  7672                           ; BSR set to: 0
  7673                           
  7674                           ; BSR set to: 0
  7675  0037EE  0E00               	movlw	0
  7676  0037F0  1599               	andwf	___altoft@c& (0+255),w,b
  7677  0037F2  6F9D               	movwf	??___altoft& (0+255),b
  7678  0037F4  0E00               	movlw	0
  7679  0037F6  159A               	andwf	(___altoft@c+1)& (0+255),w,b
  7680  0037F8  6F9E               	movwf	(??___altoft+1)& (0+255),b
  7681  0037FA  0E00               	movlw	0
  7682  0037FC  159B               	andwf	(___altoft@c+2)& (0+255),w,b
  7683  0037FE  6F9F               	movwf	(??___altoft+2)& (0+255),b
  7684  003800  0EFF               	movlw	255
  7685  003802  159C               	andwf	(___altoft@c+3)& (0+255),w,b
  7686  003804  6FA0               	movwf	(??___altoft+3)& (0+255),b
  7687  003806  519D               	movf	??___altoft& (0+255),w,b
  7688  003808  119E               	iorwf	(??___altoft+1)& (0+255),w,b
  7689  00380A  119F               	iorwf	(??___altoft+2)& (0+255),w,b
  7690  00380C  11A0               	iorwf	(??___altoft+3)& (0+255),w,b
  7691  00380E  A4D8               	btfss	status,2,c
  7692  003810  D7E8               	goto	l356
  7693                           
  7694                           ; BSR set to: 0
  7695                           
  7696                           ; BSR set to: 0
  7697  003812  C099  F060         	movff	___altoft@c,___ftpack@arg
  7698  003816  C09A  F061         	movff	___altoft@c+1,___ftpack@arg+1
  7699  00381A  C09B  F062         	movff	___altoft@c+2,___ftpack@arg+2
  7700  00381E  C0A1  F063         	movff	___altoft@exp,___ftpack@exp
  7701  003822  C0A2  F064         	movff	___altoft@sign,___ftpack@sign
  7702  003826  ECD8  F019         	call	___ftpack	;wreg free
  7703  00382A  C060  F099         	movff	?___ftpack,?___altoft
  7704  00382E  C061  F09A         	movff	?___ftpack+1,?___altoft+1
  7705  003832  C062  F09B         	movff	?___ftpack+2,?___altoft+2
  7706  003836  0012               	return	
  7707  003838                     __end_of___altoft:
  7708                           	opt stack 0
  7709                           tblptru	equ	0xFF8
  7710                           tblptrh	equ	0xFF7
  7711                           tblptrl	equ	0xFF6
  7712                           tablat	equ	0xFF5
  7713                           prodh	equ	0xFF4
  7714                           prodl	equ	0xFF3
  7715                           postinc0	equ	0xFEE
  7716                           wreg	equ	0xFE8
  7717                           indf2	equ	0xFDF
  7718                           postinc2	equ	0xFDE
  7719                           postdec2	equ	0xFDD
  7720                           fsr2h	equ	0xFDA
  7721                           fsr2l	equ	0xFD9
  7722                           status	equ	0xFD8
  7723                           
  7724 ;; *************** function _eval_poly *****************
  7725 ;; Defined at:
  7726 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
  7727 ;; Parameters:    Size  Location     Type
  7728 ;;  x               3   57[BANK0 ] float 
  7729 ;;  d               2   60[BANK0 ] PTR const 
  7730 ;;		 -> sin@coeff_a(15), sin@coeff_b(12), 
  7731 ;;  n               2   62[BANK0 ] int 
  7732 ;; Auto vars:     Size  Location     Type
  7733 ;;  res             3   66[BANK0 ] int 
  7734 ;; Return value:  Size  Location     Type
  7735 ;;                  3   57[BANK0 ] int 
  7736 ;; Registers used:
  7737 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7738 ;; Tracked objects:
  7739 ;;		On entry : 0/0
  7740 ;;		On exit  : 0/0
  7741 ;;		Unchanged: 0/0
  7742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7743 ;;      Params:         0       7       0       0       0       0       0       0       0
  7744 ;;      Locals:         0       3       0       0       0       0       0       0       0
  7745 ;;      Temps:          0       2       0       0       0       0       0       0       0
  7746 ;;      Totals:         0      12       0       0       0       0       0       0       0
  7747 ;;Total ram usage:       12 bytes
  7748 ;; Hardware stack levels used:    1
  7749 ;; Hardware stack levels required when called:    5
  7750 ;; This function calls:
  7751 ;;		___ftadd
  7752 ;;		___ftmul
  7753 ;;		___wmul
  7754 ;; This function is called by:
  7755 ;;		_sin
  7756 ;; This function uses a non-reentrant model
  7757 ;;
  7758                           
  7759                           	psect	text20
  7760  003222                     __ptext20:
  7761                           	opt stack 0
  7762  003222                     _eval_poly:
  7763                           	opt stack 23
  7764                           
  7765                           ;incstack = 0
  7766  003222  C09E  F06E         	movff	eval_poly@n,___wmul@multiplier
  7767  003226  C09F  F06F         	movff	eval_poly@n+1,___wmul@multiplier+1
  7768  00322A  0E00               	movlw	0
  7769  00322C  0100               	movlb	0	; () banked
  7770  00322E  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7771  003230  0E03               	movlw	3
  7772  003232  6F70               	movwf	___wmul@multiplicand& (0+255),b
  7773  003234  EC11  F01D         	call	___wmul	;wreg free
  7774  003238  C09C  F0A0         	movff	eval_poly@d,??_eval_poly
  7775  00323C  C09D  F0A1         	movff	eval_poly@d+1,??_eval_poly+1
  7776  003240  0100               	movlb	0	; () banked
  7777  003242  516E               	movf	?___wmul& (0+255),w,b
  7778  003244  27A0               	addwf	??_eval_poly& (0+255),f,b
  7779  003246  516F               	movf	(?___wmul+1)& (0+255),w,b
  7780  003248  23A1               	addwfc	(??_eval_poly+1)& (0+255),f,b
  7781  00324A  C0A0  FFF6         	movff	??_eval_poly,tblptrl
  7782  00324E  C0A1  FFF7         	movff	??_eval_poly+1,tblptrh
  7783  003252                     	if	0	;tblptru may be non-zero
  7784  003252                     	endif
  7785  003252                     	if	0	;tblptru may be non-zero
  7786  003252                     	endif
  7787  003252  0009               	tblrd		*+
  7788  003254  CFF5 F0A2          	movff	tablat,eval_poly@res
  7789  003258  0009               	tblrd		*+
  7790  00325A  CFF5 F0A3          	movff	tablat,eval_poly@res+1
  7791  00325E  000A               	tblrd		*-
  7792  003260  CFF5 F0A4          	movff	tablat,eval_poly@res+2
  7793  003264  D040               	goto	l912
  7794  003266                     
  7795                           ; BSR set to: 0
  7796                           
  7797                           ; BSR set to: 0
  7798  003266  C0A2  F077         	movff	eval_poly@res,___ftmul@f2
  7799  00326A  C0A3  F078         	movff	eval_poly@res+1,___ftmul@f2+1
  7800  00326E  C0A4  F079         	movff	eval_poly@res+2,___ftmul@f2+2
  7801  003272  C099  F074         	movff	eval_poly@x,___ftmul@f1
  7802  003276  C09A  F075         	movff	eval_poly@x+1,___ftmul@f1+1
  7803  00327A  C09B  F076         	movff	eval_poly@x+2,___ftmul@f1+2
  7804  00327E  ECC3  F016         	call	___ftmul	;wreg free
  7805  003282  C074  F08D         	movff	?___ftmul,___ftadd@f1
  7806  003286  C075  F08E         	movff	?___ftmul+1,___ftadd@f1+1
  7807  00328A  C076  F08F         	movff	?___ftmul+2,___ftadd@f1+2
  7808  00328E  0E00               	movlw	0
  7809  003290  0100               	movlb	0	; () banked
  7810  003292  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7811  003294  0E03               	movlw	3
  7812  003296  6F70               	movwf	___wmul@multiplicand& (0+255),b
  7813  003298  079E               	decf	eval_poly@n& (0+255),f,b
  7814  00329A  A0D8               	btfss	status,0,c
  7815  00329C  079F               	decf	(eval_poly@n+1)& (0+255),f,b
  7816  00329E  C09E  F06E         	movff	eval_poly@n,___wmul@multiplier
  7817  0032A2  C09F  F06F         	movff	eval_poly@n+1,___wmul@multiplier+1
  7818  0032A6  EC11  F01D         	call	___wmul	;wreg free
  7819  0032AA  C09C  F0A0         	movff	eval_poly@d,??_eval_poly
  7820  0032AE  C09D  F0A1         	movff	eval_poly@d+1,??_eval_poly+1
  7821  0032B2  0100               	movlb	0	; () banked
  7822  0032B4  516E               	movf	?___wmul& (0+255),w,b
  7823  0032B6  27A0               	addwf	??_eval_poly& (0+255),f,b
  7824  0032B8  516F               	movf	(?___wmul+1)& (0+255),w,b
  7825  0032BA  23A1               	addwfc	(??_eval_poly+1)& (0+255),f,b
  7826  0032BC  C0A0  FFF6         	movff	??_eval_poly,tblptrl
  7827  0032C0  C0A1  FFF7         	movff	??_eval_poly+1,tblptrh
  7828  0032C4                     	if	0	;tblptru may be non-zero
  7829  0032C4                     	endif
  7830  0032C4                     	if	0	;tblptru may be non-zero
  7831  0032C4                     	endif
  7832  0032C4  0009               	tblrd		*+
  7833  0032C6  CFF5 F090          	movff	tablat,___ftadd@f2
  7834  0032CA  0009               	tblrd		*+
  7835  0032CC  CFF5 F091          	movff	tablat,___ftadd@f2+1
  7836  0032D0  000A               	tblrd		*-
  7837  0032D2  CFF5 F092          	movff	tablat,___ftadd@f2+2
  7838  0032D6  EC22  F011         	call	___ftadd	;wreg free
  7839  0032DA  C08D  F0A2         	movff	?___ftadd,eval_poly@res
  7840  0032DE  C08E  F0A3         	movff	?___ftadd+1,eval_poly@res+1
  7841  0032E2  C08F  F0A4         	movff	?___ftadd+2,eval_poly@res+2
  7842  0032E6                     l912:
  7843  0032E6  0100               	movlb	0	; () banked
  7844  0032E8  519E               	movf	eval_poly@n& (0+255),w,b
  7845  0032EA  119F               	iorwf	(eval_poly@n+1)& (0+255),w,b
  7846  0032EC  A4D8               	btfss	status,2,c
  7847  0032EE  D7BB               	goto	l913
  7848                           
  7849                           ; BSR set to: 0
  7850  0032F0  C0A2  F099         	movff	eval_poly@res,?_eval_poly
  7851  0032F4  C0A3  F09A         	movff	eval_poly@res+1,?_eval_poly+1
  7852  0032F8  C0A4  F09B         	movff	eval_poly@res+2,?_eval_poly+2
  7853                           
  7854                           ; BSR set to: 0
  7855  0032FC  0012               	return		;funcret
  7856  0032FE                     __end_of_eval_poly:
  7857                           	opt stack 0
  7858                           tblptru	equ	0xFF8
  7859                           tblptrh	equ	0xFF7
  7860                           tblptrl	equ	0xFF6
  7861                           tablat	equ	0xFF5
  7862                           prodh	equ	0xFF4
  7863                           prodl	equ	0xFF3
  7864                           postinc0	equ	0xFEE
  7865                           wreg	equ	0xFE8
  7866                           indf2	equ	0xFDF
  7867                           postinc2	equ	0xFDE
  7868                           postdec2	equ	0xFDD
  7869                           fsr2h	equ	0xFDA
  7870                           fsr2l	equ	0xFD9
  7871                           status	equ	0xFD8
  7872                           
  7873 ;; *************** function ___wmul *****************
  7874 ;; Defined at:
  7875 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  7876 ;; Parameters:    Size  Location     Type
  7877 ;;  multiplier      2   14[BANK0 ] unsigned int 
  7878 ;;  multiplicand    2   16[BANK0 ] unsigned int 
  7879 ;; Auto vars:     Size  Location     Type
  7880 ;;  product         2   18[BANK0 ] unsigned int 
  7881 ;; Return value:  Size  Location     Type
  7882 ;;                  2   14[BANK0 ] unsigned int 
  7883 ;; Registers used:
  7884 ;;		wreg, status,2, status,0, prodl, prodh
  7885 ;; Tracked objects:
  7886 ;;		On entry : 0/0
  7887 ;;		On exit  : 0/0
  7888 ;;		Unchanged: 0/0
  7889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7890 ;;      Params:         0       4       0       0       0       0       0       0       0
  7891 ;;      Locals:         0       2       0       0       0       0       0       0       0
  7892 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7893 ;;      Totals:         0       6       0       0       0       0       0       0       0
  7894 ;;Total ram usage:        6 bytes
  7895 ;; Hardware stack levels used:    1
  7896 ;; Hardware stack levels required when called:    3
  7897 ;; This function calls:
  7898 ;;		Nothing
  7899 ;; This function is called by:
  7900 ;;		_main
  7901 ;;		_fround
  7902 ;;		_scale
  7903 ;;		_sprintf
  7904 ;;		_eval_poly
  7905 ;; This function uses a non-reentrant model
  7906 ;;
  7907                           
  7908                           	psect	text21
  7909  003A22                     __ptext21:
  7910                           	opt stack 0
  7911  003A22                     ___wmul:
  7912                           	opt stack 25
  7913                           
  7914                           ; BSR set to: 0
  7915                           ;incstack = 0
  7916  003A22  0100               	movlb	0	; () banked
  7917  003A24  516E               	movf	___wmul@multiplier& (0+255),w,b
  7918  003A26  0370               	mulwf	___wmul@multiplicand& (0+255),b
  7919  003A28  CFF3 F072          	movff	prodl,___wmul@product
  7920  003A2C  CFF4 F073          	movff	prodh,___wmul@product+1
  7921  003A30  516E               	movf	___wmul@multiplier& (0+255),w,b
  7922  003A32  0371               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  7923  003A34  50F3               	movf	prodl,w,c
  7924  003A36  2773               	addwf	(___wmul@product+1)& (0+255),f,b
  7925  003A38  516F               	movf	(___wmul@multiplier+1)& (0+255),w,b
  7926  003A3A  0370               	mulwf	___wmul@multiplicand& (0+255),b
  7927  003A3C  50F3               	movf	prodl,w,c
  7928  003A3E  2773               	addwf	(___wmul@product+1)& (0+255),f,b
  7929                           
  7930                           ; BSR set to: 0
  7931  003A40  C072  F06E         	movff	___wmul@product,?___wmul
  7932  003A44  C073  F06F         	movff	___wmul@product+1,?___wmul+1
  7933  003A48  0012               	return	
  7934  003A4A                     __end_of___wmul:
  7935                           	opt stack 0
  7936                           tblptru	equ	0xFF8
  7937                           tblptrh	equ	0xFF7
  7938                           tblptrl	equ	0xFF6
  7939                           tablat	equ	0xFF5
  7940                           prodh	equ	0xFF4
  7941                           prodl	equ	0xFF3
  7942                           postinc0	equ	0xFEE
  7943                           wreg	equ	0xFE8
  7944                           indf2	equ	0xFDF
  7945                           postinc2	equ	0xFDE
  7946                           postdec2	equ	0xFDD
  7947                           fsr2h	equ	0xFDA
  7948                           fsr2l	equ	0xFD9
  7949                           status	equ	0xFD8
  7950                           
  7951 ;; *************** function ___ftmul *****************
  7952 ;; Defined at:
  7953 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  7954 ;; Parameters:    Size  Location     Type
  7955 ;;  f1              3   20[BANK0 ] float 
  7956 ;;  f2              3   23[BANK0 ] float 
  7957 ;; Auto vars:     Size  Location     Type
  7958 ;;  f3_as_produc    3   30[BANK0 ] unsigned um
  7959 ;;  sign            1   34[BANK0 ] unsigned char 
  7960 ;;  cntr            1   33[BANK0 ] unsigned char 
  7961 ;;  exp             1   29[BANK0 ] unsigned char 
  7962 ;; Return value:  Size  Location     Type
  7963 ;;                  3   20[BANK0 ] float 
  7964 ;; Registers used:
  7965 ;;		wreg, status,2, status,0, cstack
  7966 ;; Tracked objects:
  7967 ;;		On entry : 0/0
  7968 ;;		On exit  : 0/0
  7969 ;;		Unchanged: 0/0
  7970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7971 ;;      Params:         0       6       0       0       0       0       0       0       0
  7972 ;;      Locals:         0       6       0       0       0       0       0       0       0
  7973 ;;      Temps:          0       3       0       0       0       0       0       0       0
  7974 ;;      Totals:         0      15       0       0       0       0       0       0       0
  7975 ;;Total ram usage:       15 bytes
  7976 ;; Hardware stack levels used:    1
  7977 ;; Hardware stack levels required when called:    4
  7978 ;; This function calls:
  7979 ;;		___ftpack
  7980 ;; This function is called by:
  7981 ;;		_main
  7982 ;;		_fround
  7983 ;;		_scale
  7984 ;;		_sprintf
  7985 ;;		_sin
  7986 ;;		_sqrt
  7987 ;;		_eval_poly
  7988 ;; This function uses a non-reentrant model
  7989 ;;
  7990                           
  7991                           	psect	text22
  7992  002D86                     __ptext22:
  7993                           	opt stack 0
  7994  002D86                     ___ftmul:
  7995                           	opt stack 25
  7996                           
  7997                           ; BSR set to: 0
  7998                           ;incstack = 0
  7999  002D86  C076  F07A         	movff	___ftmul@f1+2,??___ftmul
  8000  002D8A  0100               	movlb	0	; () banked
  8001  002D8C  6B7B               	clrf	(??___ftmul+1)& (0+255),b
  8002  002D8E  6B7C               	clrf	(??___ftmul+2)& (0+255),b
  8003  002D90  3575               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  8004  002D92  377A               	rlcf	??___ftmul& (0+255),f,b
  8005  002D94  E301               	bnc	u2441
  8006  002D96  817B               	bsf	(??___ftmul+1)& (0+255),0,b
  8007  002D98                     u2441:
  8008  002D98  517A               	movf	??___ftmul& (0+255),w,b
  8009  002D9A  6F7D               	movwf	___ftmul@exp& (0+255),b
  8010  002D9C  517D               	movf	___ftmul@exp& (0+255),w,b
  8011  002D9E  A4D8               	btfss	status,2,c
  8012  002DA0  D007               	goto	l604
  8013                           
  8014                           ; BSR set to: 0
  8015  002DA2  0E00               	movlw	0
  8016  002DA4  6F74               	movwf	?___ftmul& (0+255),b
  8017  002DA6  0E00               	movlw	0
  8018  002DA8  6F75               	movwf	(?___ftmul+1)& (0+255),b
  8019  002DAA  0E00               	movlw	0
  8020  002DAC  6F76               	movwf	(?___ftmul+2)& (0+255),b
  8021                           
  8022                           ; BSR set to: 0
  8023  002DAE  0012               	return	
  8024  002DB0                     l604:
  8025                           
  8026                           ; BSR set to: 0
  8027                           
  8028                           ; BSR set to: 0
  8029  002DB0  C079  F07A         	movff	___ftmul@f2+2,??___ftmul
  8030  002DB4  6B7B               	clrf	(??___ftmul+1)& (0+255),b
  8031  002DB6  6B7C               	clrf	(??___ftmul+2)& (0+255),b
  8032  002DB8  3578               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  8033  002DBA  377A               	rlcf	??___ftmul& (0+255),f,b
  8034  002DBC  E301               	bnc	u2461
  8035  002DBE  817B               	bsf	(??___ftmul+1)& (0+255),0,b
  8036  002DC0                     u2461:
  8037  002DC0  517A               	movf	??___ftmul& (0+255),w,b
  8038  002DC2  6F82               	movwf	___ftmul@sign& (0+255),b
  8039  002DC4  5182               	movf	___ftmul@sign& (0+255),w,b
  8040  002DC6  A4D8               	btfss	status,2,c
  8041  002DC8  D007               	goto	l606
  8042                           
  8043                           ; BSR set to: 0
  8044  002DCA  0E00               	movlw	0
  8045  002DCC  6F74               	movwf	?___ftmul& (0+255),b
  8046  002DCE  0E00               	movlw	0
  8047  002DD0  6F75               	movwf	(?___ftmul+1)& (0+255),b
  8048  002DD2  0E00               	movlw	0
  8049  002DD4  6F76               	movwf	(?___ftmul+2)& (0+255),b
  8050                           
  8051                           ; BSR set to: 0
  8052  002DD6  0012               	return	
  8053  002DD8                     l606:
  8054                           
  8055                           ; BSR set to: 0
  8056                           
  8057                           ; BSR set to: 0
  8058  002DD8  5182               	movf	___ftmul@sign& (0+255),w,b
  8059  002DDA  0F7B               	addlw	123
  8060  002DDC  277D               	addwf	___ftmul@exp& (0+255),f,b
  8061                           
  8062                           ; BSR set to: 0
  8063  002DDE  C076  F082         	movff	___ftmul@f1+2,___ftmul@sign
  8064  002DE2  5179               	movf	(___ftmul@f2+2)& (0+255),w,b
  8065  002DE4  1B82               	xorwf	___ftmul@sign& (0+255),f,b
  8066  002DE6  0E80               	movlw	128
  8067  002DE8  1782               	andwf	___ftmul@sign& (0+255),f,b
  8068                           
  8069                           ; BSR set to: 0
  8070  002DEA  8F75               	bsf	(___ftmul@f1+1)& (0+255),7,b
  8071                           
  8072                           ; BSR set to: 0
  8073  002DEC  8F78               	bsf	(___ftmul@f2+1)& (0+255),7,b
  8074                           
  8075                           ; BSR set to: 0
  8076  002DEE  0EFF               	movlw	255
  8077  002DF0  1777               	andwf	___ftmul@f2& (0+255),f,b
  8078  002DF2  0EFF               	movlw	255
  8079  002DF4  1778               	andwf	(___ftmul@f2+1)& (0+255),f,b
  8080  002DF6  0E00               	movlw	0
  8081  002DF8  1779               	andwf	(___ftmul@f2+2)& (0+255),f,b
  8082                           
  8083                           ; BSR set to: 0
  8084  002DFA  0E00               	movlw	0
  8085  002DFC  6F7E               	movwf	___ftmul@f3_as_product& (0+255),b
  8086  002DFE  0E00               	movlw	0
  8087  002E00  6F7F               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  8088  002E02  0E00               	movlw	0
  8089  002E04  6F80               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  8090                           
  8091                           ; BSR set to: 0
  8092  002E06  0E07               	movlw	7
  8093  002E08  6F81               	movwf	___ftmul@cntr& (0+255),b
  8094  002E0A                     
  8095                           ; BSR set to: 0
  8096                           
  8097                           ; BSR set to: 0
  8098  002E0A  A174               	btfss	___ftmul@f1& (0+255),0,b
  8099  002E0C  D006               	goto	l608
  8100                           
  8101                           ; BSR set to: 0
  8102  002E0E  5177               	movf	___ftmul@f2& (0+255),w,b
  8103  002E10  277E               	addwf	___ftmul@f3_as_product& (0+255),f,b
  8104  002E12  5178               	movf	(___ftmul@f2+1)& (0+255),w,b
  8105  002E14  237F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  8106  002E16  5179               	movf	(___ftmul@f2+2)& (0+255),w,b
  8107  002E18  2380               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  8108  002E1A                     l608:
  8109                           
  8110                           ; BSR set to: 0
  8111                           
  8112                           ; BSR set to: 0
  8113  002E1A  90D8               	bcf	status,0,c
  8114  002E1C  3376               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  8115  002E1E  3375               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  8116  002E20  3374               	rrcf	___ftmul@f1& (0+255),f,b
  8117  002E22  90D8               	bcf	status,0,c
  8118  002E24  3777               	rlcf	___ftmul@f2& (0+255),f,b
  8119  002E26  3778               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  8120  002E28  3779               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  8121                           
  8122                           ; BSR set to: 0
  8123  002E2A  2F81               	decfsz	___ftmul@cntr& (0+255),f,b
  8124  002E2C  D7EE               	goto	l607
  8125                           
  8126                           ; BSR set to: 0
  8127                           
  8128                           ; BSR set to: 0
  8129  002E2E  0E09               	movlw	9
  8130  002E30  6F81               	movwf	___ftmul@cntr& (0+255),b
  8131  002E32                     
  8132                           ; BSR set to: 0
  8133                           
  8134                           ; BSR set to: 0
  8135  002E32  A174               	btfss	___ftmul@f1& (0+255),0,b
  8136  002E34  D006               	goto	l611
  8137                           
  8138                           ; BSR set to: 0
  8139  002E36  5177               	movf	___ftmul@f2& (0+255),w,b
  8140  002E38  277E               	addwf	___ftmul@f3_as_product& (0+255),f,b
  8141  002E3A  5178               	movf	(___ftmul@f2+1)& (0+255),w,b
  8142  002E3C  237F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  8143  002E3E  5179               	movf	(___ftmul@f2+2)& (0+255),w,b
  8144  002E40  2380               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  8145  002E42                     l611:
  8146                           
  8147                           ; BSR set to: 0
  8148                           
  8149                           ; BSR set to: 0
  8150  002E42  90D8               	bcf	status,0,c
  8151  002E44  3376               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  8152  002E46  3375               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  8153  002E48  3374               	rrcf	___ftmul@f1& (0+255),f,b
  8154  002E4A  90D8               	bcf	status,0,c
  8155  002E4C  3380               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  8156  002E4E  337F               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  8157  002E50  337E               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  8158                           
  8159                           ; BSR set to: 0
  8160  002E52  2F81               	decfsz	___ftmul@cntr& (0+255),f,b
  8161  002E54  D7EE               	goto	l610
  8162                           
  8163                           ; BSR set to: 0
  8164                           
  8165                           ; BSR set to: 0
  8166  002E56  C07E  F060         	movff	___ftmul@f3_as_product,___ftpack@arg
  8167  002E5A  C07F  F061         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  8168  002E5E  C080  F062         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  8169  002E62  C07D  F063         	movff	___ftmul@exp,___ftpack@exp
  8170  002E66  C082  F064         	movff	___ftmul@sign,___ftpack@sign
  8171  002E6A  ECD8  F019         	call	___ftpack	;wreg free
  8172  002E6E  C060  F074         	movff	?___ftpack,?___ftmul
  8173  002E72  C061  F075         	movff	?___ftpack+1,?___ftmul+1
  8174  002E76  C062  F076         	movff	?___ftpack+2,?___ftmul+2
  8175  002E7A  0012               	return	
  8176  002E7C                     __end_of___ftmul:
  8177                           	opt stack 0
  8178                           tblptru	equ	0xFF8
  8179                           tblptrh	equ	0xFF7
  8180                           tblptrl	equ	0xFF6
  8181                           tablat	equ	0xFF5
  8182                           prodh	equ	0xFF4
  8183                           prodl	equ	0xFF3
  8184                           postinc0	equ	0xFEE
  8185                           wreg	equ	0xFE8
  8186                           indf2	equ	0xFDF
  8187                           postinc2	equ	0xFDE
  8188                           postdec2	equ	0xFDD
  8189                           fsr2h	equ	0xFDA
  8190                           fsr2l	equ	0xFD9
  8191                           status	equ	0xFD8
  8192                           
  8193 ;; *************** function ___ftsub *****************
  8194 ;; Defined at:
  8195 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  8196 ;; Parameters:    Size  Location     Type
  8197 ;;  f1              3   75[BANK0 ] float 
  8198 ;;  f2              3   78[BANK0 ] float 
  8199 ;; Auto vars:     Size  Location     Type
  8200 ;;		None
  8201 ;; Return value:  Size  Location     Type
  8202 ;;                  3   75[BANK0 ] float 
  8203 ;; Registers used:
  8204 ;;		wreg, status,2, status,0, cstack
  8205 ;; Tracked objects:
  8206 ;;		On entry : 0/0
  8207 ;;		On exit  : 0/0
  8208 ;;		Unchanged: 0/0
  8209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8210 ;;      Params:         0       6       0       0       0       0       0       0       0
  8211 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8212 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8213 ;;      Totals:         0       6       0       0       0       0       0       0       0
  8214 ;;Total ram usage:        6 bytes
  8215 ;; Hardware stack levels used:    1
  8216 ;; Hardware stack levels required when called:    5
  8217 ;; This function calls:
  8218 ;;		___ftadd
  8219 ;; This function is called by:
  8220 ;;		_sprintf
  8221 ;;		_sin
  8222 ;;		_sqrt
  8223 ;; This function uses a non-reentrant model
  8224 ;;
  8225                           
  8226                           	psect	text23
  8227  0039B4                     __ptext23:
  8228                           	opt stack 0
  8229  0039B4                     ___ftsub:
  8230                           	opt stack 24
  8231                           
  8232                           ;incstack = 0
  8233  0039B4  0100               	movlb	0	; () banked
  8234  0039B6  51AE               	movf	___ftsub@f2& (0+255),w,b
  8235  0039B8  11AF               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  8236  0039BA  11B0               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  8237  0039BC  B4D8               	btfsc	status,2,c
  8238  0039BE  D006               	goto	l621
  8239                           
  8240                           ; BSR set to: 0
  8241  0039C0  0E00               	movlw	0
  8242  0039C2  1BAE               	xorwf	___ftsub@f2& (0+255),f,b
  8243  0039C4  0E00               	movlw	0
  8244  0039C6  1BAF               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  8245  0039C8  0E80               	movlw	128
  8246  0039CA  1BB0               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  8247  0039CC                     l621:
  8248                           
  8249                           ; BSR set to: 0
  8250                           
  8251                           ; BSR set to: 0
  8252  0039CC  C0AB  F08D         	movff	___ftsub@f1,___ftadd@f1
  8253  0039D0  C0AC  F08E         	movff	___ftsub@f1+1,___ftadd@f1+1
  8254  0039D4  C0AD  F08F         	movff	___ftsub@f1+2,___ftadd@f1+2
  8255  0039D8  C0AE  F090         	movff	___ftsub@f2,___ftadd@f2
  8256  0039DC  C0AF  F091         	movff	___ftsub@f2+1,___ftadd@f2+1
  8257  0039E0  C0B0  F092         	movff	___ftsub@f2+2,___ftadd@f2+2
  8258  0039E4  EC22  F011         	call	___ftadd	;wreg free
  8259  0039E8  C08D  F0AB         	movff	?___ftadd,?___ftsub
  8260  0039EC  C08E  F0AC         	movff	?___ftadd+1,?___ftsub+1
  8261  0039F0  C08F  F0AD         	movff	?___ftadd+2,?___ftsub+2
  8262  0039F4  0012               	return	
  8263  0039F6                     __end_of___ftsub:
  8264                           	opt stack 0
  8265                           tblptru	equ	0xFF8
  8266                           tblptrh	equ	0xFF7
  8267                           tblptrl	equ	0xFF6
  8268                           tablat	equ	0xFF5
  8269                           prodh	equ	0xFF4
  8270                           prodl	equ	0xFF3
  8271                           postinc0	equ	0xFEE
  8272                           wreg	equ	0xFE8
  8273                           indf2	equ	0xFDF
  8274                           postinc2	equ	0xFDE
  8275                           postdec2	equ	0xFDD
  8276                           fsr2h	equ	0xFDA
  8277                           fsr2l	equ	0xFD9
  8278                           status	equ	0xFD8
  8279                           
  8280 ;; *************** function ___ftadd *****************
  8281 ;; Defined at:
  8282 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  8283 ;; Parameters:    Size  Location     Type
  8284 ;;  f1              3   45[BANK0 ] float 
  8285 ;;  f2              3   48[BANK0 ] float 
  8286 ;; Auto vars:     Size  Location     Type
  8287 ;;  exp1            1   56[BANK0 ] unsigned char 
  8288 ;;  exp2            1   55[BANK0 ] unsigned char 
  8289 ;;  sign            1   54[BANK0 ] unsigned char 
  8290 ;; Return value:  Size  Location     Type
  8291 ;;                  3   45[BANK0 ] float 
  8292 ;; Registers used:
  8293 ;;		wreg, status,2, status,0, cstack
  8294 ;; Tracked objects:
  8295 ;;		On entry : 0/0
  8296 ;;		On exit  : 0/0
  8297 ;;		Unchanged: 0/0
  8298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8299 ;;      Params:         0       6       0       0       0       0       0       0       0
  8300 ;;      Locals:         0       3       0       0       0       0       0       0       0
  8301 ;;      Temps:          0       3       0       0       0       0       0       0       0
  8302 ;;      Totals:         0      12       0       0       0       0       0       0       0
  8303 ;;Total ram usage:       12 bytes
  8304 ;; Hardware stack levels used:    1
  8305 ;; Hardware stack levels required when called:    4
  8306 ;; This function calls:
  8307 ;;		___ftpack
  8308 ;; This function is called by:
  8309 ;;		_main
  8310 ;;		_sprintf
  8311 ;;		_cos
  8312 ;;		___ftsub
  8313 ;;		_sin
  8314 ;;		_eval_poly
  8315 ;;		_floor
  8316 ;; This function uses a non-reentrant model
  8317 ;;
  8318                           
  8319                           	psect	text24
  8320  002244                     __ptext24:
  8321                           	opt stack 0
  8322  002244                     ___ftadd:
  8323                           	opt stack 24
  8324                           
  8325                           ;incstack = 0
  8326  002244  C08F  F093         	movff	___ftadd@f1+2,??___ftadd
  8327  002248  0100               	movlb	0	; () banked
  8328  00224A  6B94               	clrf	(??___ftadd+1)& (0+255),b
  8329  00224C  6B95               	clrf	(??___ftadd+2)& (0+255),b
  8330  00224E  358E               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  8331  002250  3793               	rlcf	??___ftadd& (0+255),f,b
  8332  002252  E301               	bnc	u2231
  8333  002254  8194               	bsf	(??___ftadd+1)& (0+255),0,b
  8334  002256                     u2231:
  8335  002256  5193               	movf	??___ftadd& (0+255),w,b
  8336  002258  6F98               	movwf	___ftadd@exp1& (0+255),b
  8337  00225A  C092  F093         	movff	___ftadd@f2+2,??___ftadd
  8338  00225E  6B94               	clrf	(??___ftadd+1)& (0+255),b
  8339  002260  6B95               	clrf	(??___ftadd+2)& (0+255),b
  8340  002262  3591               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  8341  002264  3793               	rlcf	??___ftadd& (0+255),f,b
  8342  002266  E301               	bnc	u2241
  8343  002268  8194               	bsf	(??___ftadd+1)& (0+255),0,b
  8344  00226A                     u2241:
  8345  00226A  5193               	movf	??___ftadd& (0+255),w,b
  8346  00226C  6F97               	movwf	___ftadd@exp2& (0+255),b
  8347                           
  8348                           ; BSR set to: 0
  8349  00226E  5198               	movf	___ftadd@exp1& (0+255),w,b
  8350  002270  B4D8               	btfsc	status,2,c
  8351  002272  D00B               	goto	u2270
  8352                           
  8353                           ; BSR set to: 0
  8354  002274  5197               	movf	___ftadd@exp2& (0+255),w,b
  8355  002276  5D98               	subwf	___ftadd@exp1& (0+255),w,b
  8356  002278  B0D8               	btfsc	status,0,c
  8357  00227A  D00E               	goto	l539
  8358                           
  8359                           ; BSR set to: 0
  8360  00227C  5198               	movf	___ftadd@exp1& (0+255),w,b
  8361  00227E  0800               	sublw	0
  8362  002280  2597               	addwf	___ftadd@exp2& (0+255),w,b
  8363  002282  6F93               	movwf	??___ftadd& (0+255),b
  8364  002284  0E18               	movlw	24
  8365  002286  6593               	cpfsgt	??___ftadd& (0+255),b
  8366  002288  D007               	goto	l539
  8367  00228A                     u2270:
  8368                           
  8369                           ; BSR set to: 0
  8370  00228A  C090  F08D         	movff	___ftadd@f2,?___ftadd
  8371  00228E  C091  F08E         	movff	___ftadd@f2+1,?___ftadd+1
  8372  002292  C092  F08F         	movff	___ftadd@f2+2,?___ftadd+2
  8373  002296  0012               	return	
  8374  002298                     l539:
  8375                           
  8376                           ; BSR set to: 0
  8377                           
  8378                           ; BSR set to: 0
  8379  002298  5197               	movf	___ftadd@exp2& (0+255),w,b
  8380  00229A  B4D8               	btfsc	status,2,c
  8381  00229C  D00B               	goto	u2300
  8382                           
  8383                           ; BSR set to: 0
  8384  00229E  5198               	movf	___ftadd@exp1& (0+255),w,b
  8385  0022A0  5D97               	subwf	___ftadd@exp2& (0+255),w,b
  8386  0022A2  B0D8               	btfsc	status,0,c
  8387  0022A4  D00E               	goto	l543
  8388                           
  8389                           ; BSR set to: 0
  8390  0022A6  5197               	movf	___ftadd@exp2& (0+255),w,b
  8391  0022A8  0800               	sublw	0
  8392  0022AA  2598               	addwf	___ftadd@exp1& (0+255),w,b
  8393  0022AC  6F93               	movwf	??___ftadd& (0+255),b
  8394  0022AE  0E18               	movlw	24
  8395  0022B0  6593               	cpfsgt	??___ftadd& (0+255),b
  8396  0022B2  D007               	goto	l543
  8397  0022B4                     u2300:
  8398                           
  8399                           ; BSR set to: 0
  8400  0022B4  C08D  F08D         	movff	___ftadd@f1,?___ftadd
  8401  0022B8  C08E  F08E         	movff	___ftadd@f1+1,?___ftadd+1
  8402  0022BC  C08F  F08F         	movff	___ftadd@f1+2,?___ftadd+2
  8403  0022C0  0012               	return	
  8404  0022C2                     l543:
  8405                           
  8406                           ; BSR set to: 0
  8407                           
  8408                           ; BSR set to: 0
  8409  0022C2  0E06               	movlw	6
  8410  0022C4  6F96               	movwf	___ftadd@sign& (0+255),b
  8411                           
  8412                           ; BSR set to: 0
  8413  0022C6  BF8F               	btfsc	(___ftadd@f1+2)& (0+255),7,b
  8414                           
  8415                           ; BSR set to: 0
  8416  0022C8  8F96               	bsf	___ftadd@sign& (0+255),7,b
  8417                           
  8418                           ; BSR set to: 0
  8419                           
  8420                           ; BSR set to: 0
  8421  0022CA  BF92               	btfsc	(___ftadd@f2+2)& (0+255),7,b
  8422                           
  8423                           ; BSR set to: 0
  8424  0022CC  8D96               	bsf	___ftadd@sign& (0+255),6,b
  8425                           
  8426                           ; BSR set to: 0
  8427  0022CE  8F8E               	bsf	(___ftadd@f1+1)& (0+255),7,b
  8428                           
  8429                           ; BSR set to: 0
  8430  0022D0  0EFF               	movlw	255
  8431  0022D2  178D               	andwf	___ftadd@f1& (0+255),f,b
  8432  0022D4  0EFF               	movlw	255
  8433  0022D6  178E               	andwf	(___ftadd@f1+1)& (0+255),f,b
  8434  0022D8  0E00               	movlw	0
  8435  0022DA  178F               	andwf	(___ftadd@f1+2)& (0+255),f,b
  8436  0022DC  8F91               	bsf	(___ftadd@f2+1)& (0+255),7,b
  8437                           
  8438                           ; BSR set to: 0
  8439  0022DE  0EFF               	movlw	255
  8440  0022E0  1790               	andwf	___ftadd@f2& (0+255),f,b
  8441  0022E2  0EFF               	movlw	255
  8442  0022E4  1791               	andwf	(___ftadd@f2+1)& (0+255),f,b
  8443  0022E6  0E00               	movlw	0
  8444  0022E8  1792               	andwf	(___ftadd@f2+2)& (0+255),f,b
  8445                           
  8446                           ; BSR set to: 0
  8447  0022EA  5197               	movf	___ftadd@exp2& (0+255),w,b
  8448  0022EC  5D98               	subwf	___ftadd@exp1& (0+255),w,b
  8449  0022EE  B0D8               	btfsc	status,0,c
  8450  0022F0  D01B               	goto	l548
  8451  0022F2                     u2330:
  8452                           
  8453                           ; BSR set to: 0
  8454                           
  8455                           ; BSR set to: 0
  8456  0022F2  90D8               	bcf	status,0,c
  8457  0022F4  3790               	rlcf	___ftadd@f2& (0+255),f,b
  8458  0022F6  3791               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  8459  0022F8  3792               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  8460  0022FA  0797               	decf	___ftadd@exp2& (0+255),f,b
  8461                           
  8462                           ; BSR set to: 0
  8463  0022FC  5198               	movf	___ftadd@exp1& (0+255),w,b
  8464  0022FE  1997               	xorwf	___ftadd@exp2& (0+255),w,b
  8465  002300  B4D8               	btfsc	status,2,c
  8466  002302  D00D               	goto	l553
  8467                           
  8468                           ; BSR set to: 0
  8469  002304  0796               	decf	___ftadd@sign& (0+255),f,b
  8470  002306  C096  F093         	movff	___ftadd@sign,??___ftadd
  8471  00230A  0E07               	movlw	7
  8472  00230C  1793               	andwf	??___ftadd& (0+255),f,b
  8473  00230E  B4D8               	btfsc	status,2,c
  8474  002310  D006               	goto	l553
  8475  002312  D7EF               	goto	u2330
  8476  002314                     
  8477                           ; BSR set to: 0
  8478                           
  8479                           ; BSR set to: 0
  8480  002314  90D8               	bcf	status,0,c
  8481  002316  338F               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  8482  002318  338E               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  8483  00231A  338D               	rrcf	___ftadd@f1& (0+255),f,b
  8484  00231C  2B98               	incf	___ftadd@exp1& (0+255),f,b
  8485  00231E                     l553:
  8486                           
  8487                           ; BSR set to: 0
  8488                           
  8489                           ; BSR set to: 0
  8490  00231E  5197               	movf	___ftadd@exp2& (0+255),w,b
  8491  002320  1998               	xorwf	___ftadd@exp1& (0+255),w,b
  8492  002322  B4D8               	btfsc	status,2,c
  8493  002324  D01F               	goto	u2400
  8494  002326  D7F6               	goto	l554
  8495  002328                     l548:
  8496                           
  8497                           ; BSR set to: 0
  8498                           
  8499                           ; BSR set to: 0
  8500  002328  5198               	movf	___ftadd@exp1& (0+255),w,b
  8501  00232A  5D97               	subwf	___ftadd@exp2& (0+255),w,b
  8502  00232C  B0D8               	btfsc	status,0,c
  8503  00232E  D01A               	goto	u2400
  8504  002330                     u2370:
  8505                           
  8506                           ; BSR set to: 0
  8507                           
  8508                           ; BSR set to: 0
  8509  002330  90D8               	bcf	status,0,c
  8510  002332  378D               	rlcf	___ftadd@f1& (0+255),f,b
  8511  002334  378E               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  8512  002336  378F               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  8513  002338  0798               	decf	___ftadd@exp1& (0+255),f,b
  8514                           
  8515                           ; BSR set to: 0
  8516  00233A  5198               	movf	___ftadd@exp1& (0+255),w,b
  8517  00233C  1997               	xorwf	___ftadd@exp2& (0+255),w,b
  8518  00233E  B4D8               	btfsc	status,2,c
  8519  002340  D00D               	goto	l562
  8520                           
  8521                           ; BSR set to: 0
  8522  002342  0796               	decf	___ftadd@sign& (0+255),f,b
  8523  002344  C096  F093         	movff	___ftadd@sign,??___ftadd
  8524  002348  0E07               	movlw	7
  8525  00234A  1793               	andwf	??___ftadd& (0+255),f,b
  8526  00234C  B4D8               	btfsc	status,2,c
  8527  00234E  D006               	goto	l562
  8528  002350  D7EF               	goto	u2370
  8529  002352                     
  8530                           ; BSR set to: 0
  8531                           
  8532                           ; BSR set to: 0
  8533  002352  90D8               	bcf	status,0,c
  8534  002354  3392               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  8535  002356  3391               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  8536  002358  3390               	rrcf	___ftadd@f2& (0+255),f,b
  8537  00235A  2B97               	incf	___ftadd@exp2& (0+255),f,b
  8538  00235C                     l562:
  8539                           
  8540                           ; BSR set to: 0
  8541                           
  8542                           ; BSR set to: 0
  8543  00235C  5197               	movf	___ftadd@exp2& (0+255),w,b
  8544  00235E  1998               	xorwf	___ftadd@exp1& (0+255),w,b
  8545  002360  A4D8               	btfss	status,2,c
  8546  002362  D7F7               	goto	l563
  8547  002364                     u2400:
  8548                           
  8549                           ; BSR set to: 0
  8550                           
  8551                           ; BSR set to: 0
  8552                           
  8553                           ; BSR set to: 0
  8554  002364  AF96               	btfss	___ftadd@sign& (0+255),7,b
  8555  002366  D00C               	goto	l565
  8556                           
  8557                           ; BSR set to: 0
  8558  002368  0EFF               	movlw	255
  8559  00236A  1B8D               	xorwf	___ftadd@f1& (0+255),f,b
  8560  00236C  0EFF               	movlw	255
  8561  00236E  1B8E               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  8562  002370  0EFF               	movlw	255
  8563  002372  1B8F               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  8564  002374  0E01               	movlw	1
  8565  002376  278D               	addwf	___ftadd@f1& (0+255),f,b
  8566  002378  0E00               	movlw	0
  8567  00237A  238E               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  8568  00237C  0E00               	movlw	0
  8569  00237E  238F               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  8570  002380                     l565:
  8571                           
  8572                           ; BSR set to: 0
  8573  002380  AD96               	btfss	___ftadd@sign& (0+255),6,b
  8574  002382  D00C               	goto	l566
  8575                           
  8576                           ; BSR set to: 0
  8577  002384  0EFF               	movlw	255
  8578  002386  1B90               	xorwf	___ftadd@f2& (0+255),f,b
  8579  002388  0EFF               	movlw	255
  8580  00238A  1B91               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  8581  00238C  0EFF               	movlw	255
  8582  00238E  1B92               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  8583  002390  0E01               	movlw	1
  8584  002392  2790               	addwf	___ftadd@f2& (0+255),f,b
  8585  002394  0E00               	movlw	0
  8586  002396  2391               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8587  002398  0E00               	movlw	0
  8588  00239A  2392               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8589  00239C                     l566:
  8590                           
  8591                           ; BSR set to: 0
  8592                           
  8593                           ; BSR set to: 0
  8594  00239C  0E00               	movlw	0
  8595  00239E  6F96               	movwf	___ftadd@sign& (0+255),b
  8596                           
  8597                           ; BSR set to: 0
  8598  0023A0  518D               	movf	___ftadd@f1& (0+255),w,b
  8599  0023A2  2790               	addwf	___ftadd@f2& (0+255),f,b
  8600  0023A4  518E               	movf	(___ftadd@f1+1)& (0+255),w,b
  8601  0023A6  2391               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8602  0023A8  518F               	movf	(___ftadd@f1+2)& (0+255),w,b
  8603  0023AA  2392               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8604                           
  8605                           ; BSR set to: 0
  8606  0023AC  AF92               	btfss	(___ftadd@f2+2)& (0+255),7,b
  8607  0023AE  D00E               	goto	l567
  8608                           
  8609                           ; BSR set to: 0
  8610  0023B0  0EFF               	movlw	255
  8611  0023B2  1B90               	xorwf	___ftadd@f2& (0+255),f,b
  8612  0023B4  0EFF               	movlw	255
  8613  0023B6  1B91               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  8614  0023B8  0EFF               	movlw	255
  8615  0023BA  1B92               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  8616  0023BC  0E01               	movlw	1
  8617  0023BE  2790               	addwf	___ftadd@f2& (0+255),f,b
  8618  0023C0  0E00               	movlw	0
  8619  0023C2  2391               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8620  0023C4  0E00               	movlw	0
  8621  0023C6  2392               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8622                           
  8623                           ; BSR set to: 0
  8624  0023C8  0E01               	movlw	1
  8625  0023CA  6F96               	movwf	___ftadd@sign& (0+255),b
  8626  0023CC                     l567:
  8627                           
  8628                           ; BSR set to: 0
  8629                           
  8630                           ; BSR set to: 0
  8631  0023CC  C090  F060         	movff	___ftadd@f2,___ftpack@arg
  8632  0023D0  C091  F061         	movff	___ftadd@f2+1,___ftpack@arg+1
  8633  0023D4  C092  F062         	movff	___ftadd@f2+2,___ftpack@arg+2
  8634  0023D8  C098  F063         	movff	___ftadd@exp1,___ftpack@exp
  8635  0023DC  C096  F064         	movff	___ftadd@sign,___ftpack@sign
  8636  0023E0  ECD8  F019         	call	___ftpack	;wreg free
  8637  0023E4  C060  F08D         	movff	?___ftpack,?___ftadd
  8638  0023E8  C061  F08E         	movff	?___ftpack+1,?___ftadd+1
  8639  0023EC  C062  F08F         	movff	?___ftpack+2,?___ftadd+2
  8640  0023F0  0012               	return	
  8641  0023F2                     __end_of___ftadd:
  8642                           	opt stack 0
  8643                           tblptru	equ	0xFF8
  8644                           tblptrh	equ	0xFF7
  8645                           tblptrl	equ	0xFF6
  8646                           tablat	equ	0xFF5
  8647                           prodh	equ	0xFF4
  8648                           prodl	equ	0xFF3
  8649                           postinc0	equ	0xFEE
  8650                           wreg	equ	0xFE8
  8651                           indf2	equ	0xFDF
  8652                           postinc2	equ	0xFDE
  8653                           postdec2	equ	0xFDD
  8654                           fsr2h	equ	0xFDA
  8655                           fsr2l	equ	0xFD9
  8656                           status	equ	0xFD8
  8657                           
  8658 ;; *************** function ___ftneg *****************
  8659 ;; Defined at:
  8660 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
  8661 ;; Parameters:    Size  Location     Type
  8662 ;;  f1              3    0[BANK0 ] float 
  8663 ;; Auto vars:     Size  Location     Type
  8664 ;;		None
  8665 ;; Return value:  Size  Location     Type
  8666 ;;                  3    0[BANK0 ] float 
  8667 ;; Registers used:
  8668 ;;		wreg, status,2, status,0
  8669 ;; Tracked objects:
  8670 ;;		On entry : 0/0
  8671 ;;		On exit  : 0/0
  8672 ;;		Unchanged: 0/0
  8673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8674 ;;      Params:         0       3       0       0       0       0       0       0       0
  8675 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8676 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8677 ;;      Totals:         0       3       0       0       0       0       0       0       0
  8678 ;;Total ram usage:        3 bytes
  8679 ;; Hardware stack levels used:    1
  8680 ;; Hardware stack levels required when called:    3
  8681 ;; This function calls:
  8682 ;;		Nothing
  8683 ;; This function is called by:
  8684 ;;		_sprintf
  8685 ;;		_sin
  8686 ;; This function uses a non-reentrant model
  8687 ;;
  8688                           
  8689                           	psect	text25
  8690  003A4A                     __ptext25:
  8691                           	opt stack 0
  8692  003A4A                     ___ftneg:
  8693                           	opt stack 26
  8694                           
  8695                           ;incstack = 0
  8696  003A4A  0100               	movlb	0	; () banked
  8697  003A4C  5160               	movf	___ftneg@f1& (0+255),w,b
  8698  003A4E  1161               	iorwf	(___ftneg@f1+1)& (0+255),w,b
  8699  003A50  1162               	iorwf	(___ftneg@f1+2)& (0+255),w,b
  8700  003A52  B4D8               	btfsc	status,2,c
  8701  003A54  D006               	goto	l615
  8702                           
  8703                           ; BSR set to: 0
  8704  003A56  0E00               	movlw	0
  8705  003A58  1B60               	xorwf	___ftneg@f1& (0+255),f,b
  8706  003A5A  0E00               	movlw	0
  8707  003A5C  1B61               	xorwf	(___ftneg@f1+1)& (0+255),f,b
  8708  003A5E  0E80               	movlw	128
  8709  003A60  1B62               	xorwf	(___ftneg@f1+2)& (0+255),f,b
  8710  003A62                     l615:
  8711                           
  8712                           ; BSR set to: 0
  8713  003A62  C060  F060         	movff	___ftneg@f1,?___ftneg
  8714  003A66  C061  F061         	movff	___ftneg@f1+1,?___ftneg+1
  8715  003A6A  C062  F062         	movff	___ftneg@f1+2,?___ftneg+2
  8716                           
  8717                           ; BSR set to: 0
  8718  003A6E  0012               	return		;funcret
  8719  003A70                     __end_of___ftneg:
  8720                           	opt stack 0
  8721                           tblptru	equ	0xFF8
  8722                           tblptrh	equ	0xFF7
  8723                           tblptrl	equ	0xFF6
  8724                           tablat	equ	0xFF5
  8725                           prodh	equ	0xFF4
  8726                           prodl	equ	0xFF3
  8727                           postinc0	equ	0xFEE
  8728                           wreg	equ	0xFE8
  8729                           indf2	equ	0xFDF
  8730                           postinc2	equ	0xFDE
  8731                           postdec2	equ	0xFDD
  8732                           fsr2h	equ	0xFDA
  8733                           fsr2l	equ	0xFD9
  8734                           status	equ	0xFD8
  8735                           
  8736 ;; *************** function ___ftdiv *****************
  8737 ;; Defined at:
  8738 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  8739 ;; Parameters:    Size  Location     Type
  8740 ;;  f1              3   81[BANK0 ] float 
  8741 ;;  f2              3   84[BANK0 ] float 
  8742 ;; Auto vars:     Size  Location     Type
  8743 ;;  f3              3   91[BANK0 ] float 
  8744 ;;  sign            1   95[BANK0 ] unsigned char 
  8745 ;;  exp             1   94[BANK0 ] unsigned char 
  8746 ;;  cntr            1   90[BANK0 ] unsigned char 
  8747 ;; Return value:  Size  Location     Type
  8748 ;;                  3   81[BANK0 ] float 
  8749 ;; Registers used:
  8750 ;;		wreg, status,2, status,0, cstack
  8751 ;; Tracked objects:
  8752 ;;		On entry : 0/0
  8753 ;;		On exit  : 0/0
  8754 ;;		Unchanged: 0/0
  8755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8756 ;;      Params:         0       6       0       0       0       0       0       0       0
  8757 ;;      Locals:         0       6       0       0       0       0       0       0       0
  8758 ;;      Temps:          0       3       0       0       0       0       0       0       0
  8759 ;;      Totals:         0      15       0       0       0       0       0       0       0
  8760 ;;Total ram usage:       15 bytes
  8761 ;; Hardware stack levels used:    1
  8762 ;; Hardware stack levels required when called:    4
  8763 ;; This function calls:
  8764 ;;		___ftpack
  8765 ;; This function is called by:
  8766 ;;		_main
  8767 ;;		_sin
  8768 ;; This function uses a non-reentrant model
  8769 ;;
  8770                           
  8771                           	psect	text26
  8772  002F70                     __ptext26:
  8773                           	opt stack 0
  8774  002F70                     ___ftdiv:
  8775                           	opt stack 24
  8776                           
  8777                           ; BSR set to: 0
  8778                           ;incstack = 0
  8779  002F70  C0B3  F0B7         	movff	___ftdiv@f1+2,??___ftdiv
  8780  002F74  0100               	movlb	0	; () banked
  8781  002F76  6BB8               	clrf	(??___ftdiv+1)& (0+255),b
  8782  002F78  6BB9               	clrf	(??___ftdiv+2)& (0+255),b
  8783  002F7A  35B2               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
  8784  002F7C  37B7               	rlcf	??___ftdiv& (0+255),f,b
  8785  002F7E  E301               	bnc	u2631
  8786  002F80  81B8               	bsf	(??___ftdiv+1)& (0+255),0,b
  8787  002F82                     u2631:
  8788  002F82  51B7               	movf	??___ftdiv& (0+255),w,b
  8789  002F84  6FBE               	movwf	___ftdiv@exp& (0+255),b
  8790  002F86  51BE               	movf	___ftdiv@exp& (0+255),w,b
  8791  002F88  A4D8               	btfss	status,2,c
  8792  002F8A  D007               	goto	l572
  8793                           
  8794                           ; BSR set to: 0
  8795  002F8C  0E00               	movlw	0
  8796  002F8E  6FB1               	movwf	?___ftdiv& (0+255),b
  8797  002F90  0E00               	movlw	0
  8798  002F92  6FB2               	movwf	(?___ftdiv+1)& (0+255),b
  8799  002F94  0E00               	movlw	0
  8800  002F96  6FB3               	movwf	(?___ftdiv+2)& (0+255),b
  8801                           
  8802                           ; BSR set to: 0
  8803  002F98  0012               	return	
  8804  002F9A                     l572:
  8805                           
  8806                           ; BSR set to: 0
  8807                           
  8808                           ; BSR set to: 0
  8809  002F9A  C0B6  F0B7         	movff	___ftdiv@f2+2,??___ftdiv
  8810  002F9E  6BB8               	clrf	(??___ftdiv+1)& (0+255),b
  8811  002FA0  6BB9               	clrf	(??___ftdiv+2)& (0+255),b
  8812  002FA2  35B5               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
  8813  002FA4  37B7               	rlcf	??___ftdiv& (0+255),f,b
  8814  002FA6  E301               	bnc	u2651
  8815  002FA8  81B8               	bsf	(??___ftdiv+1)& (0+255),0,b
  8816  002FAA                     u2651:
  8817  002FAA  51B7               	movf	??___ftdiv& (0+255),w,b
  8818  002FAC  6FBF               	movwf	___ftdiv@sign& (0+255),b
  8819  002FAE  51BF               	movf	___ftdiv@sign& (0+255),w,b
  8820  002FB0  A4D8               	btfss	status,2,c
  8821  002FB2  D007               	goto	l574
  8822                           
  8823                           ; BSR set to: 0
  8824  002FB4  0E00               	movlw	0
  8825  002FB6  6FB1               	movwf	?___ftdiv& (0+255),b
  8826  002FB8  0E00               	movlw	0
  8827  002FBA  6FB2               	movwf	(?___ftdiv+1)& (0+255),b
  8828  002FBC  0E00               	movlw	0
  8829  002FBE  6FB3               	movwf	(?___ftdiv+2)& (0+255),b
  8830                           
  8831                           ; BSR set to: 0
  8832  002FC0  0012               	return	
  8833  002FC2                     l574:
  8834                           
  8835                           ; BSR set to: 0
  8836                           
  8837                           ; BSR set to: 0
  8838  002FC2  0E00               	movlw	0
  8839  002FC4  6FBB               	movwf	___ftdiv@f3& (0+255),b
  8840  002FC6  0E00               	movlw	0
  8841  002FC8  6FBC               	movwf	(___ftdiv@f3+1)& (0+255),b
  8842  002FCA  0E00               	movlw	0
  8843  002FCC  6FBD               	movwf	(___ftdiv@f3+2)& (0+255),b
  8844                           
  8845                           ; BSR set to: 0
  8846  002FCE  51BF               	movf	___ftdiv@sign& (0+255),w,b
  8847  002FD0  0F89               	addlw	137
  8848  002FD2  5FBE               	subwf	___ftdiv@exp& (0+255),f,b
  8849                           
  8850                           ; BSR set to: 0
  8851  002FD4  C0B3  F0BF         	movff	___ftdiv@f1+2,___ftdiv@sign
  8852                           
  8853                           ; BSR set to: 0
  8854  002FD8  51B6               	movf	(___ftdiv@f2+2)& (0+255),w,b
  8855  002FDA  1BBF               	xorwf	___ftdiv@sign& (0+255),f,b
  8856                           
  8857                           ; BSR set to: 0
  8858  002FDC  0E80               	movlw	128
  8859  002FDE  17BF               	andwf	___ftdiv@sign& (0+255),f,b
  8860                           
  8861                           ; BSR set to: 0
  8862  002FE0  8FB2               	bsf	(___ftdiv@f1+1)& (0+255),7,b
  8863                           
  8864                           ; BSR set to: 0
  8865  002FE2  0EFF               	movlw	255
  8866  002FE4  17B1               	andwf	___ftdiv@f1& (0+255),f,b
  8867  002FE6  0EFF               	movlw	255
  8868  002FE8  17B2               	andwf	(___ftdiv@f1+1)& (0+255),f,b
  8869  002FEA  0E00               	movlw	0
  8870  002FEC  17B3               	andwf	(___ftdiv@f1+2)& (0+255),f,b
  8871                           
  8872                           ; BSR set to: 0
  8873  002FEE  8FB5               	bsf	(___ftdiv@f2+1)& (0+255),7,b
  8874                           
  8875                           ; BSR set to: 0
  8876  002FF0  0EFF               	movlw	255
  8877  002FF2  17B4               	andwf	___ftdiv@f2& (0+255),f,b
  8878  002FF4  0EFF               	movlw	255
  8879  002FF6  17B5               	andwf	(___ftdiv@f2+1)& (0+255),f,b
  8880  002FF8  0E00               	movlw	0
  8881  002FFA  17B6               	andwf	(___ftdiv@f2+2)& (0+255),f,b
  8882                           
  8883                           ; BSR set to: 0
  8884  002FFC  0E18               	movlw	24
  8885  002FFE  6FBA               	movwf	___ftdiv@cntr& (0+255),b
  8886  003000                     
  8887                           ; BSR set to: 0
  8888                           
  8889                           ; BSR set to: 0
  8890  003000  90D8               	bcf	status,0,c
  8891  003002  37BB               	rlcf	___ftdiv@f3& (0+255),f,b
  8892  003004  37BC               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  8893  003006  37BD               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  8894                           
  8895                           ; BSR set to: 0
  8896  003008  51B4               	movf	___ftdiv@f2& (0+255),w,b
  8897  00300A  5DB1               	subwf	___ftdiv@f1& (0+255),w,b
  8898  00300C  51B5               	movf	(___ftdiv@f2+1)& (0+255),w,b
  8899  00300E  59B2               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
  8900  003010  51B6               	movf	(___ftdiv@f2+2)& (0+255),w,b
  8901  003012  59B3               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
  8902  003014  A0D8               	btfss	status,0,c
  8903  003016  D007               	goto	l576
  8904                           
  8905                           ; BSR set to: 0
  8906  003018  51B4               	movf	___ftdiv@f2& (0+255),w,b
  8907  00301A  5FB1               	subwf	___ftdiv@f1& (0+255),f,b
  8908  00301C  51B5               	movf	(___ftdiv@f2+1)& (0+255),w,b
  8909  00301E  5BB2               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
  8910  003020  51B6               	movf	(___ftdiv@f2+2)& (0+255),w,b
  8911  003022  5BB3               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
  8912                           
  8913                           ; BSR set to: 0
  8914  003024  81BB               	bsf	___ftdiv@f3& (0+255),0,b
  8915  003026                     l576:
  8916                           
  8917                           ; BSR set to: 0
  8918  003026  90D8               	bcf	status,0,c
  8919  003028  37B1               	rlcf	___ftdiv@f1& (0+255),f,b
  8920  00302A  37B2               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
  8921  00302C  37B3               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
  8922                           
  8923                           ; BSR set to: 0
  8924  00302E  2FBA               	decfsz	___ftdiv@cntr& (0+255),f,b
  8925  003030  D7E7               	goto	l575
  8926                           
  8927                           ; BSR set to: 0
  8928                           
  8929                           ; BSR set to: 0
  8930  003032  C0BB  F060         	movff	___ftdiv@f3,___ftpack@arg
  8931  003036  C0BC  F061         	movff	___ftdiv@f3+1,___ftpack@arg+1
  8932  00303A  C0BD  F062         	movff	___ftdiv@f3+2,___ftpack@arg+2
  8933  00303E  C0BE  F063         	movff	___ftdiv@exp,___ftpack@exp
  8934  003042  C0BF  F064         	movff	___ftdiv@sign,___ftpack@sign
  8935  003046  ECD8  F019         	call	___ftpack	;wreg free
  8936  00304A  C060  F0B1         	movff	?___ftpack,?___ftdiv
  8937  00304E  C061  F0B2         	movff	?___ftpack+1,?___ftdiv+1
  8938  003052  C062  F0B3         	movff	?___ftpack+2,?___ftdiv+2
  8939  003056  0012               	return	
  8940  003058                     __end_of___ftdiv:
  8941                           	opt stack 0
  8942                           tblptru	equ	0xFF8
  8943                           tblptrh	equ	0xFF7
  8944                           tblptrl	equ	0xFF6
  8945                           tablat	equ	0xFF5
  8946                           prodh	equ	0xFF4
  8947                           prodl	equ	0xFF3
  8948                           postinc0	equ	0xFEE
  8949                           wreg	equ	0xFE8
  8950                           indf2	equ	0xFDF
  8951                           postinc2	equ	0xFDE
  8952                           postdec2	equ	0xFDD
  8953                           fsr2h	equ	0xFDA
  8954                           fsr2l	equ	0xFD9
  8955                           status	equ	0xFD8
  8956                           
  8957 ;; *************** function _configstandard *****************
  8958 ;; Defined at:
  8959 ;;		line 10 in file "configstandard.c"
  8960 ;; Parameters:    Size  Location     Type
  8961 ;;		None
  8962 ;; Auto vars:     Size  Location     Type
  8963 ;;		None
  8964 ;; Return value:  Size  Location     Type
  8965 ;;                  1    wreg      void 
  8966 ;; Registers used:
  8967 ;;		wreg, status,2
  8968 ;; Tracked objects:
  8969 ;;		On entry : 0/0
  8970 ;;		On exit  : 0/0
  8971 ;;		Unchanged: 0/0
  8972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8973 ;;      Params:         0       0       0       0       0       0       0       0       0
  8974 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8975 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8976 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8977 ;;Total ram usage:        0 bytes
  8978 ;; Hardware stack levels used:    1
  8979 ;; Hardware stack levels required when called:    3
  8980 ;; This function calls:
  8981 ;;		Nothing
  8982 ;; This function is called by:
  8983 ;;		_main
  8984 ;; This function uses a non-reentrant model
  8985 ;;
  8986                           
  8987                           	psect	text27
  8988  003970                     __ptext27:
  8989                           	opt stack 0
  8990  003970                     _configstandard:
  8991                           	opt stack 27
  8992                           
  8993                           ;configstandard.c: 16: ADCON0bits.CHS3 = 0;
  8994                           
  8995                           ;incstack = 0
  8996  003970  9AC2               	bcf	4034,5,c	;volatile
  8997                           
  8998                           ;configstandard.c: 17: ADCON0bits.CHS2 = 0;
  8999  003972  98C2               	bcf	4034,4,c	;volatile
  9000                           
  9001                           ;configstandard.c: 18: ADCON0bits.CHS1 = 0;
  9002  003974  96C2               	bcf	4034,3,c	;volatile
  9003                           
  9004                           ;configstandard.c: 19: ADCON0bits.CHS0 = 0;
  9005  003976  94C2               	bcf	4034,2,c	;volatile
  9006                           
  9007                           ;configstandard.c: 20: ADCON0bits.ADON = 1;
  9008  003978  80C2               	bsf	4034,0,c	;volatile
  9009                           
  9010                           ;configstandard.c: 24: ADCON1 = 0b00001110;
  9011  00397A  0E0E               	movlw	14
  9012  00397C  6EC1               	movwf	4033,c	;volatile
  9013                           
  9014                           ;configstandard.c: 28: ADCON2bits.ADFM = 1;
  9015  00397E  8EC0               	bsf	4032,7,c	;volatile
  9016                           
  9017                           ;configstandard.c: 29: ADCON2bits.ACQT2 = 1;
  9018  003980  8AC0               	bsf	4032,5,c	;volatile
  9019                           
  9020                           ;configstandard.c: 30: ADCON2bits.ACQT1 = 0;
  9021  003982  98C0               	bcf	4032,4,c	;volatile
  9022                           
  9023                           ;configstandard.c: 31: ADCON2bits.ACQT0 = 1;
  9024  003984  86C0               	bsf	4032,3,c	;volatile
  9025                           
  9026                           ;configstandard.c: 32: ADCON2bits.ADCS2 = 1;
  9027  003986  84C0               	bsf	4032,2,c	;volatile
  9028                           
  9029                           ;configstandard.c: 33: ADCON2bits.ADCS1 = 0;
  9030  003988  92C0               	bcf	4032,1,c	;volatile
  9031                           
  9032                           ;configstandard.c: 34: ADCON2bits.ADCS0 = 0;
  9033  00398A  90C0               	bcf	4032,0,c	;volatile
  9034                           
  9035                           ;configstandard.c: 36: ADRESH = 0;
  9036  00398C  0E00               	movlw	0
  9037  00398E  6EC4               	movwf	4036,c	;volatile
  9038                           
  9039                           ;configstandard.c: 37: ADRESL = 0;
  9040  003990  0E00               	movlw	0
  9041  003992  6EC3               	movwf	4035,c	;volatile
  9042                           
  9043                           ;configstandard.c: 54: CCP1CONbits.CCP1M = 0b1011;
  9044  003994  50BD               	movf	4029,w,c	;volatile
  9045  003996  0BF0               	andlw	-16
  9046  003998  090B               	iorlw	11
  9047  00399A  6EBD               	movwf	4029,c	;volatile
  9048                           
  9049                           ;configstandard.c: 55: CCPR1 = 2400;
  9050  00399C  0E09               	movlw	9
  9051  00399E  6EBF               	movwf	4031,c	;volatile
  9052  0039A0  0E60               	movlw	96
  9053  0039A2  6EBE               	movwf	4030,c	;volatile
  9054                           
  9055                           ;configstandard.c: 59: ADCON2bits.ADCS=110;
  9056  0039A4  50C0               	movf	4032,w,c	;volatile
  9057  0039A6  0BF8               	andlw	-8
  9058  0039A8  0906               	iorlw	6
  9059  0039AA  6EC0               	movwf	4032,c	;volatile
  9060                           
  9061                           ;configstandard.c: 60: ADCON2bits.ACQT=010;
  9062  0039AC  96C0               	bcf	4032,3,c	;volatile
  9063  0039AE  98C0               	bcf	4032,4,c	;volatile
  9064  0039B0  9AC0               	bcf	4032,5,c	;volatile
  9065  0039B2  0012               	return		;funcret
  9066  0039B4                     __end_of_configstandard:
  9067                           	opt stack 0
  9068                           tblptru	equ	0xFF8
  9069                           tblptrh	equ	0xFF7
  9070                           tblptrl	equ	0xFF6
  9071                           tablat	equ	0xFF5
  9072                           prodh	equ	0xFF4
  9073                           prodl	equ	0xFF3
  9074                           postinc0	equ	0xFEE
  9075                           wreg	equ	0xFE8
  9076                           indf2	equ	0xFDF
  9077                           postinc2	equ	0xFDE
  9078                           postdec2	equ	0xFDD
  9079                           fsr2h	equ	0xFDA
  9080                           fsr2l	equ	0xFD9
  9081                           status	equ	0xFD8
  9082                           
  9083 ;; *************** function ___lwtoft *****************
  9084 ;; Defined at:
  9085 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
  9086 ;; Parameters:    Size  Location     Type
  9087 ;;  c               2    8[BANK0 ] unsigned int 
  9088 ;; Auto vars:     Size  Location     Type
  9089 ;;		None
  9090 ;; Return value:  Size  Location     Type
  9091 ;;                  3    8[BANK0 ] float 
  9092 ;; Registers used:
  9093 ;;		wreg, status,2, status,0, cstack
  9094 ;; Tracked objects:
  9095 ;;		On entry : 0/0
  9096 ;;		On exit  : 0/0
  9097 ;;		Unchanged: 0/0
  9098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9099 ;;      Params:         0       3       0       0       0       0       0       0       0
  9100 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9101 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9102 ;;      Totals:         0       3       0       0       0       0       0       0       0
  9103 ;;Total ram usage:        3 bytes
  9104 ;; Hardware stack levels used:    1
  9105 ;; Hardware stack levels required when called:    4
  9106 ;; This function calls:
  9107 ;;		___ftpack
  9108 ;; This function is called by:
  9109 ;;		_main
  9110 ;; This function uses a non-reentrant model
  9111 ;;
  9112                           
  9113                           	psect	text28
  9114  003A70                     __ptext28:
  9115                           	opt stack 0
  9116  003A70                     ___lwtoft:
  9117                           	opt stack 26
  9118                           
  9119                           ;incstack = 0
  9120  003A70  C068  F060         	movff	___lwtoft@c,___ftpack@arg
  9121  003A74  C069  F061         	movff	___lwtoft@c+1,___ftpack@arg+1
  9122  003A78  0100               	movlb	0	; () banked
  9123  003A7A  6B62               	clrf	(___ftpack@arg+2)& (0+255),b
  9124  003A7C  0E8E               	movlw	142
  9125  003A7E  6F63               	movwf	___ftpack@exp& (0+255),b
  9126  003A80  0E00               	movlw	0
  9127  003A82  6F64               	movwf	___ftpack@sign& (0+255),b
  9128  003A84  ECD8  F019         	call	___ftpack	;wreg free
  9129  003A88  C060  F068         	movff	?___ftpack,?___lwtoft
  9130  003A8C  C061  F069         	movff	?___ftpack+1,?___lwtoft+1
  9131  003A90  C062  F06A         	movff	?___ftpack+2,?___lwtoft+2
  9132  003A94  0012               	return	
  9133  003A96                     __end_of___lwtoft:
  9134                           	opt stack 0
  9135                           tblptru	equ	0xFF8
  9136                           tblptrh	equ	0xFF7
  9137                           tblptrl	equ	0xFF6
  9138                           tablat	equ	0xFF5
  9139                           prodh	equ	0xFF4
  9140                           prodl	equ	0xFF3
  9141                           postinc0	equ	0xFEE
  9142                           wreg	equ	0xFE8
  9143                           indf2	equ	0xFDF
  9144                           postinc2	equ	0xFDE
  9145                           postdec2	equ	0xFDD
  9146                           fsr2h	equ	0xFDA
  9147                           fsr2l	equ	0xFD9
  9148                           status	equ	0xFD8
  9149                           
  9150 ;; *************** function ___ftpack *****************
  9151 ;; Defined at:
  9152 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  9153 ;; Parameters:    Size  Location     Type
  9154 ;;  arg             3    0[BANK0 ] unsigned um
  9155 ;;  exp             1    3[BANK0 ] unsigned char 
  9156 ;;  sign            1    4[BANK0 ] unsigned char 
  9157 ;; Auto vars:     Size  Location     Type
  9158 ;;		None
  9159 ;; Return value:  Size  Location     Type
  9160 ;;                  3    0[BANK0 ] float 
  9161 ;; Registers used:
  9162 ;;		wreg, status,2, status,0
  9163 ;; Tracked objects:
  9164 ;;		On entry : 0/0
  9165 ;;		On exit  : 0/0
  9166 ;;		Unchanged: 0/0
  9167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9168 ;;      Params:         0       5       0       0       0       0       0       0       0
  9169 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9170 ;;      Temps:          0       3       0       0       0       0       0       0       0
  9171 ;;      Totals:         0       8       0       0       0       0       0       0       0
  9172 ;;Total ram usage:        8 bytes
  9173 ;; Hardware stack levels used:    1
  9174 ;; Hardware stack levels required when called:    3
  9175 ;; This function calls:
  9176 ;;		Nothing
  9177 ;; This function is called by:
  9178 ;;		___altoft
  9179 ;;		___ftadd
  9180 ;;		___ftdiv
  9181 ;;		___ftmul
  9182 ;;		___lltoft
  9183 ;;		___lwtoft
  9184 ;; This function uses a non-reentrant model
  9185 ;;
  9186                           
  9187                           	psect	text29
  9188  0033B0                     __ptext29:
  9189                           	opt stack 0
  9190  0033B0                     ___ftpack:
  9191                           	opt stack 24
  9192                           
  9193                           ;incstack = 0
  9194  0033B0  0100               	movlb	0	; () banked
  9195  0033B2  5163               	movf	___ftpack@exp& (0+255),w,b
  9196  0033B4  B4D8               	btfsc	status,2,c
  9197  0033B6  D005               	goto	u2140
  9198                           
  9199                           ; BSR set to: 0
  9200  0033B8  5160               	movf	___ftpack@arg& (0+255),w,b
  9201  0033BA  1161               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  9202  0033BC  1162               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  9203  0033BE  A4D8               	btfss	status,2,c
  9204  0033C0  D00C               	goto	l508
  9205  0033C2                     u2140:
  9206                           
  9207                           ; BSR set to: 0
  9208                           
  9209                           ; BSR set to: 0
  9210  0033C2  0E00               	movlw	0
  9211  0033C4  6F60               	movwf	?___ftpack& (0+255),b
  9212  0033C6  0E00               	movlw	0
  9213  0033C8  6F61               	movwf	(?___ftpack+1)& (0+255),b
  9214  0033CA  0E00               	movlw	0
  9215  0033CC  6F62               	movwf	(?___ftpack+2)& (0+255),b
  9216                           
  9217                           ; BSR set to: 0
  9218  0033CE  0012               	return	
  9219  0033D0                     
  9220                           ; BSR set to: 0
  9221                           
  9222                           ; BSR set to: 0
  9223  0033D0  2B63               	incf	___ftpack@exp& (0+255),f,b
  9224  0033D2  90D8               	bcf	status,0,c
  9225  0033D4  3362               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  9226  0033D6  3361               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  9227  0033D8  3360               	rrcf	___ftpack@arg& (0+255),f,b
  9228  0033DA                     l508:
  9229                           
  9230                           ; BSR set to: 0
  9231                           
  9232                           ; BSR set to: 0
  9233  0033DA  0E00               	movlw	0
  9234  0033DC  1560               	andwf	___ftpack@arg& (0+255),w,b
  9235  0033DE  6F65               	movwf	??___ftpack& (0+255),b
  9236  0033E0  0E00               	movlw	0
  9237  0033E2  1561               	andwf	(___ftpack@arg+1)& (0+255),w,b
  9238  0033E4  6F66               	movwf	(??___ftpack+1)& (0+255),b
  9239  0033E6  0EFE               	movlw	254
  9240  0033E8  1562               	andwf	(___ftpack@arg+2)& (0+255),w,b
  9241  0033EA  6F67               	movwf	(??___ftpack+2)& (0+255),b
  9242  0033EC  5165               	movf	??___ftpack& (0+255),w,b
  9243  0033EE  1166               	iorwf	(??___ftpack+1)& (0+255),w,b
  9244  0033F0  1167               	iorwf	(??___ftpack+2)& (0+255),w,b
  9245  0033F2  B4D8               	btfsc	status,2,c
  9246  0033F4  D00C               	goto	l511
  9247  0033F6  D7EC               	goto	l509
  9248  0033F8                     
  9249                           ; BSR set to: 0
  9250                           
  9251                           ; BSR set to: 0
  9252  0033F8  2B63               	incf	___ftpack@exp& (0+255),f,b
  9253                           
  9254                           ; BSR set to: 0
  9255  0033FA  0E01               	movlw	1
  9256  0033FC  2760               	addwf	___ftpack@arg& (0+255),f,b
  9257  0033FE  0E00               	movlw	0
  9258  003400  2361               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  9259  003402  0E00               	movlw	0
  9260  003404  2362               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  9261  003406  90D8               	bcf	status,0,c
  9262  003408  3362               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  9263  00340A  3361               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  9264  00340C  3360               	rrcf	___ftpack@arg& (0+255),f,b
  9265  00340E                     l511:
  9266                           
  9267                           ; BSR set to: 0
  9268                           
  9269                           ; BSR set to: 0
  9270  00340E  0E00               	movlw	0
  9271  003410  1560               	andwf	___ftpack@arg& (0+255),w,b
  9272  003412  6F65               	movwf	??___ftpack& (0+255),b
  9273  003414  0E00               	movlw	0
  9274  003416  1561               	andwf	(___ftpack@arg+1)& (0+255),w,b
  9275  003418  6F66               	movwf	(??___ftpack+1)& (0+255),b
  9276  00341A  0EFF               	movlw	255
  9277  00341C  1562               	andwf	(___ftpack@arg+2)& (0+255),w,b
  9278  00341E  6F67               	movwf	(??___ftpack+2)& (0+255),b
  9279  003420  5165               	movf	??___ftpack& (0+255),w,b
  9280  003422  1166               	iorwf	(??___ftpack+1)& (0+255),w,b
  9281  003424  1167               	iorwf	(??___ftpack+2)& (0+255),w,b
  9282  003426  B4D8               	btfsc	status,2,c
  9283  003428  D006               	goto	l514
  9284  00342A  D7E6               	goto	l512
  9285  00342C                     
  9286                           ; BSR set to: 0
  9287                           
  9288                           ; BSR set to: 0
  9289  00342C  0763               	decf	___ftpack@exp& (0+255),f,b
  9290  00342E  90D8               	bcf	status,0,c
  9291  003430  3760               	rlcf	___ftpack@arg& (0+255),f,b
  9292  003432  3761               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  9293  003434  3762               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  9294  003436                     l514:
  9295                           
  9296                           ; BSR set to: 0
  9297                           
  9298                           ; BSR set to: 0
  9299  003436  BF61               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  9300  003438  D003               	goto	u2180
  9301                           
  9302                           ; BSR set to: 0
  9303  00343A  0E02               	movlw	2
  9304  00343C  6163               	cpfslt	___ftpack@exp& (0+255),b
  9305  00343E  D7F6               	goto	l515
  9306  003440                     u2180:
  9307                           
  9308                           ; BSR set to: 0
  9309                           
  9310                           ; BSR set to: 0
  9311  003440  A163               	btfss	___ftpack@exp& (0+255),0,b
  9312                           
  9313                           ; BSR set to: 0
  9314  003442  9F61               	bcf	(___ftpack@arg+1)& (0+255),7,b
  9315                           
  9316                           ; BSR set to: 0
  9317                           
  9318                           ; BSR set to: 0
  9319  003444  90D8               	bcf	status,0,c
  9320  003446  3363               	rrcf	___ftpack@exp& (0+255),f,b
  9321  003448  5163               	movf	___ftpack@exp& (0+255),w,b
  9322  00344A  1362               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  9323                           
  9324                           ; BSR set to: 0
  9325  00344C  5164               	movf	___ftpack@sign& (0+255),w,b
  9326  00344E  A4D8               	btfss	status,2,c
  9327                           
  9328                           ; BSR set to: 0
  9329  003450  8F62               	bsf	(___ftpack@arg+2)& (0+255),7,b
  9330                           
  9331                           ; BSR set to: 0
  9332                           
  9333                           ; BSR set to: 0
  9334  003452  C060  F060         	movff	___ftpack@arg,?___ftpack
  9335  003456  C061  F061         	movff	___ftpack@arg+1,?___ftpack+1
  9336  00345A  C062  F062         	movff	___ftpack@arg+2,?___ftpack+2
  9337  00345E  0012               	return	
  9338  003460                     __end_of___ftpack:
  9339                           	opt stack 0
  9340                           tblptru	equ	0xFF8
  9341                           tblptrh	equ	0xFF7
  9342                           tblptrl	equ	0xFF6
  9343                           tablat	equ	0xFF5
  9344                           prodh	equ	0xFF4
  9345                           prodl	equ	0xFF3
  9346                           postinc0	equ	0xFEE
  9347                           wreg	equ	0xFE8
  9348                           indf2	equ	0xFDF
  9349                           postinc2	equ	0xFDE
  9350                           postdec2	equ	0xFDD
  9351                           fsr2h	equ	0xFDA
  9352                           fsr2l	equ	0xFD9
  9353                           status	equ	0xFD8
  9354                           
  9355 ;; *************** function _Lcd_Out2 *****************
  9356 ;; Defined at:
  9357 ;;		line 109 in file "Library_LCD_2.h"
  9358 ;; Parameters:    Size  Location     Type
  9359 ;;  y               1    wreg     unsigned char 
  9360 ;;  x               1    3[BANK0 ] unsigned char 
  9361 ;;  buffer          2    4[BANK0 ] PTR unsigned char 
  9362 ;;		 -> buffer3(20), STR_4(9), buffer2(20), main@buffer1(16), 
  9363 ;; Auto vars:     Size  Location     Type
  9364 ;;  y               1    6[BANK0 ] unsigned char 
  9365 ;;  data            1    7[BANK0 ] unsigned char 
  9366 ;; Return value:  Size  Location     Type
  9367 ;;                  1    wreg      void 
  9368 ;; Registers used:
  9369 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9370 ;; Tracked objects:
  9371 ;;		On entry : 0/0
  9372 ;;		On exit  : 0/0
  9373 ;;		Unchanged: 0/0
  9374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9375 ;;      Params:         0       3       0       0       0       0       0       0       0
  9376 ;;      Locals:         0       2       0       0       0       0       0       0       0
  9377 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9378 ;;      Totals:         0       5       0       0       0       0       0       0       0
  9379 ;;Total ram usage:        5 bytes
  9380 ;; Hardware stack levels used:    1
  9381 ;; Hardware stack levels required when called:    4
  9382 ;; This function calls:
  9383 ;;		_Lcd_Chr_CP
  9384 ;;		_Lcd_Cmd
  9385 ;; This function is called by:
  9386 ;;		_main
  9387 ;; This function uses a non-reentrant model
  9388 ;;
  9389                           
  9390                           	psect	text30
  9391  00350E                     __ptext30:
  9392                           	opt stack 0
  9393  00350E                     _Lcd_Out2:
  9394                           	opt stack 26
  9395                           
  9396                           ; BSR set to: 0
  9397                           ;incstack = 0
  9398                           ;Lcd_Out2@y stored from wreg
  9399  00350E  0100               	movlb	0	; () banked
  9400  003510  6F66               	movwf	Lcd_Out2@y& (0+255),b
  9401                           
  9402                           ;Library_LCD_2.h: 111: unsigned char data;
  9403                           ;Library_LCD_2.h: 112: switch (y)
  9404  003512  D00E               	goto	l78
  9405  003514  0100               	movlb	0	; () banked
  9406  003516  5163               	movf	Lcd_Out2@x& (0+255),w,b
  9407  003518  0F80               	addlw	128
  9408  00351A  D008               	goto	L5
  9409  00351C                     
  9410                           ; BSR set to: 0
  9411                           
  9412                           ; BSR set to: 0
  9413  00351C  5163               	movf	Lcd_Out2@x& (0+255),w,b
  9414  00351E  0FC0               	addlw	192
  9415  003520  D005               	goto	L5
  9416  003522                     
  9417                           ; BSR set to: 0
  9418                           
  9419                           ; BSR set to: 0
  9420  003522  5163               	movf	Lcd_Out2@x& (0+255),w,b
  9421  003524  0F94               	addlw	148
  9422  003526  D002               	goto	L5
  9423  003528                     
  9424                           ; BSR set to: 0
  9425                           
  9426                           ; BSR set to: 0
  9427  003528  5163               	movf	Lcd_Out2@x& (0+255),w,b
  9428  00352A  0FD4               	addlw	212
  9429  00352C                     L5:
  9430  00352C  6F67               	movwf	Lcd_Out2@data& (0+255),b
  9431                           
  9432                           ; BSR set to: 0
  9433                           ;Library_LCD_2.h: 119: }
  9434                           
  9435                           ; BSR set to: 0
  9436                           
  9437                           ;Library_LCD_2.h: 118: default: break;
  9438  00352E  D00E               	goto	l80
  9439  003530                     l78:
  9440                           
  9441                           ; BSR set to: 0
  9442  003530  0100               	movlb	0	; () banked
  9443  003532  5166               	movf	Lcd_Out2@y& (0+255),w,b
  9444                           
  9445                           ; Switch size 1, requested type "space"
  9446                           ; Number of cases is 4, Range of values is 1 to 4
  9447                           ; switch strategies available:
  9448                           ; Name         Instructions Cycles
  9449                           ; simple_byte           13     7 (average)
  9450                           ;	Chosen strategy is simple_byte
  9451  003534  0A01               	xorlw	1	; case 1
  9452  003536  B4D8               	btfsc	status,2,c
  9453  003538  D7ED               	goto	l79
  9454  00353A  0A03               	xorlw	3	; case 2
  9455  00353C  B4D8               	btfsc	status,2,c
  9456  00353E  D7EE               	goto	l81
  9457  003540  0A01               	xorlw	1	; case 3
  9458  003542  B4D8               	btfsc	status,2,c
  9459  003544  D7EE               	goto	l82
  9460  003546  0A07               	xorlw	7	; case 4
  9461  003548  B4D8               	btfsc	status,2,c
  9462  00354A  D7EE               	goto	l83
  9463  00354C                     l80:
  9464                           
  9465                           ; BSR set to: 0
  9466                           ;Library_LCD_2.h: 120: Lcd_Cmd(data);
  9467                           
  9468                           ; BSR set to: 0
  9469  00354C  5167               	movf	Lcd_Out2@data& (0+255),w,b
  9470  00354E  EC97  F014         	call	_Lcd_Cmd
  9471                           
  9472                           ;Library_LCD_2.h: 121: while(*buffer)
  9473  003552  D015               	goto	l85
  9474  003554                     
  9475                           ;Library_LCD_2.h: 122: {
  9476                           ;Library_LCD_2.h: 123: Lcd_Chr_CP(*buffer);
  9477  003554  C064  FFF6         	movff	Lcd_Out2@buffer,tblptrl
  9478  003558  C065  FFF7         	movff	Lcd_Out2@buffer+1,tblptrh
  9479  00355C  6AF8               	clrf	tblptru,c
  9480  00355E  0E07               	movlw	(high __ramtop+-1)
  9481  003560  64F7               	cpfsgt	tblptrh,c
  9482  003562  D003               	bra	u3417
  9483  003564  0008               	tblrd		*
  9484  003566  50F5               	movf	tablat,w,c
  9485  003568  D005               	bra	u3410
  9486  00356A                     u3417:
  9487  00356A  CFF6 FFD9          	movff	tblptrl,fsr2l
  9488  00356E  CFF7 FFDA          	movff	tblptrh,fsr2h
  9489  003572  50DF               	movf	indf2,w,c
  9490  003574                     u3410:
  9491  003574  ECFD  F013         	call	_Lcd_Chr_CP
  9492                           
  9493                           ;Library_LCD_2.h: 124: buffer++;
  9494  003578  0100               	movlb	0	; () banked
  9495  00357A  4B64               	infsnz	Lcd_Out2@buffer& (0+255),f,b
  9496  00357C  2B65               	incf	(Lcd_Out2@buffer+1)& (0+255),f,b
  9497  00357E                     l85:
  9498                           
  9499                           ; BSR set to: 0
  9500  00357E  C064  FFF6         	movff	Lcd_Out2@buffer,tblptrl
  9501  003582  C065  FFF7         	movff	Lcd_Out2@buffer+1,tblptrh
  9502  003586  6AF8               	clrf	tblptru,c
  9503  003588  0E07               	movlw	(high __ramtop+-1)
  9504  00358A  64F7               	cpfsgt	tblptrh,c
  9505  00358C  D003               	bra	u3427
  9506  00358E  0008               	tblrd		*
  9507  003590  50F5               	movf	tablat,w,c
  9508  003592  D005               	bra	u3420
  9509  003594                     u3427:
  9510  003594  CFF6 FFD9          	movff	tblptrl,fsr2l
  9511  003598  CFF7 FFDA          	movff	tblptrh,fsr2h
  9512  00359C  50DF               	movf	indf2,w,c
  9513  00359E                     u3420:
  9514  00359E  0900               	iorlw	0
  9515  0035A0  B4D8               	btfsc	status,2,c
  9516  0035A2  0012               	return	
  9517  0035A4  D7D7               	goto	l86
  9518  0035A6                     __end_of_Lcd_Out2:
  9519                           	opt stack 0
  9520                           tblptru	equ	0xFF8
  9521                           tblptrh	equ	0xFF7
  9522                           tblptrl	equ	0xFF6
  9523                           tablat	equ	0xFF5
  9524                           prodh	equ	0xFF4
  9525                           prodl	equ	0xFF3
  9526                           postinc0	equ	0xFEE
  9527                           wreg	equ	0xFE8
  9528                           indf2	equ	0xFDF
  9529                           postinc2	equ	0xFDE
  9530                           postdec2	equ	0xFDD
  9531                           fsr2h	equ	0xFDA
  9532                           fsr2l	equ	0xFD9
  9533                           status	equ	0xFD8
  9534                           
  9535 ;; *************** function _Lcd_Chr_CP *****************
  9536 ;; Defined at:
  9537 ;;		line 130 in file "Library_LCD_2.h"
  9538 ;; Parameters:    Size  Location     Type
  9539 ;;  data            1    wreg     unsigned char 
  9540 ;; Auto vars:     Size  Location     Type
  9541 ;;  data            1    2[BANK0 ] unsigned char 
  9542 ;; Return value:  Size  Location     Type
  9543 ;;                  1    wreg      void 
  9544 ;; Registers used:
  9545 ;;		wreg, status,2, status,0
  9546 ;; Tracked objects:
  9547 ;;		On entry : 0/0
  9548 ;;		On exit  : 0/0
  9549 ;;		Unchanged: 0/0
  9550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9551 ;;      Params:         0       0       0       0       0       0       0       0       0
  9552 ;;      Locals:         0       1       0       0       0       0       0       0       0
  9553 ;;      Temps:          0       2       0       0       0       0       0       0       0
  9554 ;;      Totals:         0       3       0       0       0       0       0       0       0
  9555 ;;Total ram usage:        3 bytes
  9556 ;; Hardware stack levels used:    1
  9557 ;; Hardware stack levels required when called:    3
  9558 ;; This function calls:
  9559 ;;		Nothing
  9560 ;; This function is called by:
  9561 ;;		_Lcd_Out2
  9562 ;;		_Lcd_Out
  9563 ;; This function uses a non-reentrant model
  9564 ;;
  9565                           
  9566                           	psect	text31
  9567  0027FA                     __ptext31:
  9568                           	opt stack 0
  9569  0027FA                     _Lcd_Chr_CP:
  9570                           	opt stack 26
  9571                           
  9572                           ;incstack = 0
  9573                           ;Lcd_Chr_CP@data stored from wreg
  9574  0027FA  0100               	movlb	0	; () banked
  9575  0027FC  6F62               	movwf	Lcd_Chr_CP@data& (0+255),b
  9576                           
  9577                           ;Library_LCD_2.h: 131: PORTDbits.RD3 = 0; PORTDbits.RD1 = 1;
  9578  0027FE  9683               	bcf	3971,3,c	;volatile
  9579  002800  8283               	bsf	3971,1,c	;volatile
  9580                           
  9581                           ;Library_LCD_2.h: 132: PORTDbits.RD7 = (data & 0b10000000)>>7; PORTDbits.RD6 = (data & 0
      +                          b01000000)>>6;
  9582  002802  0100               	movlb	0	; () banked
  9583  002804  6B60               	clrf	??_Lcd_Chr_CP& (0+255),b
  9584  002806  AF62               	btfss	Lcd_Chr_CP@data& (0+255),7,b
  9585  002808  D001               	bra	u2905
  9586  00280A  2B60               	incf	??_Lcd_Chr_CP& (0+255),f,b
  9587  00280C                     u2905:
  9588  00280C  0E01               	movlw	1
  9589  00280E  1760               	andwf	??_Lcd_Chr_CP& (0+255),f,b
  9590  002810  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  9591  002812  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  9592  002814  5083               	movf	3971,w,c	;volatile
  9593  002816  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  9594  002818  0B7F               	andlw	-129
  9595  00281A  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  9596  00281C  6E83               	movwf	3971,c	;volatile
  9597  00281E  C062  F060         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  9598  002822  0E06               	movlw	6
  9599  002824  6F61               	movwf	(??_Lcd_Chr_CP+1)& (0+255),b
  9600  002826                     u2915:
  9601  002826  90D8               	bcf	status,0,c
  9602  002828  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  9603  00282A  2F61               	decfsz	(??_Lcd_Chr_CP+1)& (0+255),f,b
  9604  00282C  D7FC               	goto	u2915
  9605  00282E  0E01               	movlw	1
  9606  002830  1760               	andwf	??_Lcd_Chr_CP& (0+255),f,b
  9607  002832  3B60               	swapf	??_Lcd_Chr_CP& (0+255),f,b
  9608  002834  4760               	rlncf	??_Lcd_Chr_CP& (0+255),f,b
  9609  002836  4760               	rlncf	??_Lcd_Chr_CP& (0+255),f,b
  9610  002838  5083               	movf	3971,w,c	;volatile
  9611  00283A  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  9612  00283C  0BBF               	andlw	-65
  9613  00283E  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  9614  002840  6E83               	movwf	3971,c	;volatile
  9615                           
  9616                           ;Library_LCD_2.h: 133: PORTDbits.RD5 = (data & 0b00100000)>>5; PORTDbits.RD4 = (data & 0
      +                          b00010000)>>4;
  9617  002842  C062  F060         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  9618  002846  0E05               	movlw	5
  9619  002848  6F61               	movwf	(??_Lcd_Chr_CP+1)& (0+255),b
  9620  00284A                     u2925:
  9621  00284A  90D8               	bcf	status,0,c
  9622  00284C  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  9623  00284E  2F61               	decfsz	(??_Lcd_Chr_CP+1)& (0+255),f,b
  9624  002850  D7FC               	goto	u2925
  9625  002852  0E01               	movlw	1
  9626  002854  1760               	andwf	??_Lcd_Chr_CP& (0+255),f,b
  9627  002856  3B60               	swapf	??_Lcd_Chr_CP& (0+255),f,b
  9628  002858  4760               	rlncf	??_Lcd_Chr_CP& (0+255),f,b
  9629  00285A  5083               	movf	3971,w,c	;volatile
  9630  00285C  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  9631  00285E  0BDF               	andlw	-33
  9632  002860  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  9633  002862  6E83               	movwf	3971,c	;volatile
  9634  002864  C062  F060         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  9635  002868  3B60               	swapf	??_Lcd_Chr_CP& (0+255),f,b
  9636  00286A  0E0F               	movlw	15
  9637  00286C  1760               	andwf	??_Lcd_Chr_CP& (0+255),f,b
  9638  00286E  0E01               	movlw	1
  9639  002870  1760               	andwf	??_Lcd_Chr_CP& (0+255),f,b
  9640  002872  3B60               	swapf	??_Lcd_Chr_CP& (0+255),f,b
  9641  002874  5083               	movf	3971,w,c	;volatile
  9642  002876  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  9643  002878  0BEF               	andlw	-17
  9644  00287A  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  9645  00287C  6E83               	movwf	3971,c	;volatile
  9646                           
  9647                           ; BSR set to: 0
  9648                           ;Library_LCD_2.h: 134: _delay(10);
  9649  00287E  0E03               	movlw	3
  9650  002880                     u4307:
  9651  002880  2EE8               	decfsz	wreg,f,c
  9652  002882  D7FE               	bra	u4307
  9653  002884  F000               	nop	
  9654                           
  9655                           ;Library_LCD_2.h: 135: PORTDbits.RD3 = 1; _delay((unsigned long)((5)*(48000000/4000000.0
      +                          ))); PORTDbits.RD3 = 0;
  9656  002886  8683               	bsf	3971,3,c	;volatile
  9657  002888  0E14               	movlw	20
  9658  00288A                     u4317:
  9659  00288A  2EE8               	decfsz	wreg,f,c
  9660  00288C  D7FE               	bra	u4317
  9661  00288E  9683               	bcf	3971,3,c	;volatile
  9662                           
  9663                           ;Library_LCD_2.h: 136: PORTDbits.RD7 = (data & 0b00001000)>>3; PORTDbits.RD6 = (data & 0
      +                          b00000100)>>2;
  9664  002890  C062  F060         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  9665  002894  0100               	movlb	0	; () banked
  9666  002896  90D8               	bcf	status,0,c
  9667  002898  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  9668  00289A  90D8               	bcf	status,0,c
  9669  00289C  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  9670  00289E  90D8               	bcf	status,0,c
  9671  0028A0  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  9672  0028A2  0E01               	movlw	1
  9673  0028A4  1760               	andwf	??_Lcd_Chr_CP& (0+255),f,b
  9674  0028A6  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  9675  0028A8  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  9676  0028AA  5083               	movf	3971,w,c	;volatile
  9677  0028AC  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  9678  0028AE  0B7F               	andlw	-129
  9679  0028B0  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  9680  0028B2  6E83               	movwf	3971,c	;volatile
  9681  0028B4  C062  F060         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  9682  0028B8  90D8               	bcf	status,0,c
  9683  0028BA  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  9684  0028BC  90D8               	bcf	status,0,c
  9685  0028BE  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  9686  0028C0  0E01               	movlw	1
  9687  0028C2  1760               	andwf	??_Lcd_Chr_CP& (0+255),f,b
  9688  0028C4  3B60               	swapf	??_Lcd_Chr_CP& (0+255),f,b
  9689  0028C6  4760               	rlncf	??_Lcd_Chr_CP& (0+255),f,b
  9690  0028C8  4760               	rlncf	??_Lcd_Chr_CP& (0+255),f,b
  9691  0028CA  5083               	movf	3971,w,c	;volatile
  9692  0028CC  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  9693  0028CE  0BBF               	andlw	-65
  9694  0028D0  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  9695  0028D2  6E83               	movwf	3971,c	;volatile
  9696                           
  9697                           ;Library_LCD_2.h: 137: PORTDbits.RD5 = (data & 0b00000010)>>1; PORTDbits.RD4 = (data & 0
      +                          b00000001);
  9698  0028D4  C062  F060         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  9699  0028D8  90D8               	bcf	status,0,c
  9700  0028DA  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  9701  0028DC  0E01               	movlw	1
  9702  0028DE  1760               	andwf	??_Lcd_Chr_CP& (0+255),f,b
  9703  0028E0  3B60               	swapf	??_Lcd_Chr_CP& (0+255),f,b
  9704  0028E2  4760               	rlncf	??_Lcd_Chr_CP& (0+255),f,b
  9705  0028E4  5083               	movf	3971,w,c	;volatile
  9706  0028E6  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  9707  0028E8  0BDF               	andlw	-33
  9708  0028EA  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  9709  0028EC  6E83               	movwf	3971,c	;volatile
  9710  0028EE  C062  F060         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  9711  0028F2  0E01               	movlw	1
  9712  0028F4  1760               	andwf	??_Lcd_Chr_CP& (0+255),f,b
  9713  0028F6  3B60               	swapf	??_Lcd_Chr_CP& (0+255),f,b
  9714  0028F8  5083               	movf	3971,w,c	;volatile
  9715  0028FA  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  9716  0028FC  0BEF               	andlw	-17
  9717  0028FE  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  9718  002900  6E83               	movwf	3971,c	;volatile
  9719                           
  9720                           ; BSR set to: 0
  9721                           ;Library_LCD_2.h: 138: _delay(10);
  9722  002902  0E03               	movlw	3
  9723  002904                     u4327:
  9724  002904  2EE8               	decfsz	wreg,f,c
  9725  002906  D7FE               	bra	u4327
  9726  002908  F000               	nop	
  9727                           
  9728                           ;Library_LCD_2.h: 139: PORTDbits.RD3 = 1; _delay((unsigned long)((5)*(48000000/4000000.0
      +                          ))); PORTDbits.RD3 = 0;
  9729  00290A  8683               	bsf	3971,3,c	;volatile
  9730  00290C  0E14               	movlw	20
  9731  00290E                     u4337:
  9732  00290E  2EE8               	decfsz	wreg,f,c
  9733  002910  D7FE               	bra	u4337
  9734  002912  9683               	bcf	3971,3,c	;volatile
  9735                           
  9736                           ;Library_LCD_2.h: 140: _delay((unsigned long)((5)*(48000000/4000000.0))); _delay((unsign
      +                          ed long)((5500)*(48000000/4000000.0)));
  9737  002914  0E14               	movlw	20
  9738  002916                     u4347:
  9739  002916  2EE8               	decfsz	wreg,f,c
  9740  002918  D7FE               	bra	u4347
  9741  00291A  0E56               	movlw	86
  9742  00291C  0100               	movlb	0	; () banked
  9743  00291E  6F60               	movwf	??_Lcd_Chr_CP& (0+255),b
  9744  002920  0EB5               	movlw	181
  9745  002922                     u4357:
  9746  002922  2EE8               	decfsz	wreg,f,c
  9747  002924  D7FE               	bra	u4357
  9748  002926  2F60               	decfsz	??_Lcd_Chr_CP& (0+255),f,b
  9749  002928  D7FC               	bra	u4357
  9750  00292A  D000               	nop2	
  9751  00292C  0012               	return		;funcret
  9752  00292E                     __end_of_Lcd_Chr_CP:
  9753                           	opt stack 0
  9754                           tblptru	equ	0xFF8
  9755                           tblptrh	equ	0xFF7
  9756                           tblptrl	equ	0xFF6
  9757                           tablat	equ	0xFF5
  9758                           prodh	equ	0xFF4
  9759                           prodl	equ	0xFF3
  9760                           postinc0	equ	0xFEE
  9761                           wreg	equ	0xFE8
  9762                           indf2	equ	0xFDF
  9763                           postinc2	equ	0xFDE
  9764                           postdec2	equ	0xFDD
  9765                           fsr2h	equ	0xFDA
  9766                           fsr2l	equ	0xFD9
  9767                           status	equ	0xFD8
  9768                           
  9769 ;; *************** function _Lcd_Init *****************
  9770 ;; Defined at:
  9771 ;;		line 46 in file "Library_LCD_2.h"
  9772 ;; Parameters:    Size  Location     Type
  9773 ;;		None
  9774 ;; Auto vars:     Size  Location     Type
  9775 ;;  data            1    4[BANK0 ] unsigned char 
  9776 ;; Return value:  Size  Location     Type
  9777 ;;                  1    wreg      void 
  9778 ;; Registers used:
  9779 ;;		wreg, status,2, status,0, cstack
  9780 ;; Tracked objects:
  9781 ;;		On entry : 0/0
  9782 ;;		On exit  : 0/0
  9783 ;;		Unchanged: 0/0
  9784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9785 ;;      Params:         0       0       0       0       0       0       0       0       0
  9786 ;;      Locals:         0       1       0       0       0       0       0       0       0
  9787 ;;      Temps:          0       1       0       0       0       0       0       0       0
  9788 ;;      Totals:         0       2       0       0       0       0       0       0       0
  9789 ;;Total ram usage:        2 bytes
  9790 ;; Hardware stack levels used:    1
  9791 ;; Hardware stack levels required when called:    4
  9792 ;; This function calls:
  9793 ;;		_Lcd_Cmd
  9794 ;; This function is called by:
  9795 ;;		_main
  9796 ;; This function uses a non-reentrant model
  9797 ;;
  9798                           
  9799                           	psect	text32
  9800  002586                     __ptext32:
  9801                           	opt stack 0
  9802  002586                     _Lcd_Init:
  9803                           	opt stack 26
  9804                           
  9805                           ;Library_LCD_2.h: 47: unsigned char data;
  9806                           ;Library_LCD_2.h: 48: TRISDbits.TRISD7 = 0;
  9807                           
  9808                           ;incstack = 0
  9809  002586  9E95               	bcf	3989,7,c	;volatile
  9810                           
  9811                           ;Library_LCD_2.h: 49: TRISDbits.TRISD6 = 0;
  9812  002588  9C95               	bcf	3989,6,c	;volatile
  9813                           
  9814                           ;Library_LCD_2.h: 50: TRISDbits.TRISD5 = 0;
  9815  00258A  9A95               	bcf	3989,5,c	;volatile
  9816                           
  9817                           ;Library_LCD_2.h: 51: TRISDbits.TRISD4 = 0;
  9818  00258C  9895               	bcf	3989,4,c	;volatile
  9819                           
  9820                           ;Library_LCD_2.h: 52: TRISDbits.TRISD3 = 0;
  9821  00258E  9695               	bcf	3989,3,c	;volatile
  9822                           
  9823                           ;Library_LCD_2.h: 53: TRISDbits.TRISD1 = 0;
  9824  002590  9295               	bcf	3989,1,c	;volatile
  9825                           
  9826                           ;Library_LCD_2.h: 54: PORTDbits.RD7 = 0;
  9827  002592  9E83               	bcf	3971,7,c	;volatile
  9828                           
  9829                           ;Library_LCD_2.h: 55: PORTDbits.RD6 = 0;
  9830  002594  9C83               	bcf	3971,6,c	;volatile
  9831                           
  9832                           ;Library_LCD_2.h: 56: PORTDbits.RD5 = 0;
  9833  002596  9A83               	bcf	3971,5,c	;volatile
  9834                           
  9835                           ;Library_LCD_2.h: 57: PORTDbits.RD4 = 0;
  9836  002598  9883               	bcf	3971,4,c	;volatile
  9837                           
  9838                           ;Library_LCD_2.h: 58: PORTDbits.RD3 = 0;
  9839  00259A  9683               	bcf	3971,3,c	;volatile
  9840                           
  9841                           ;Library_LCD_2.h: 59: PORTDbits.RD1 = 0;
  9842  00259C  9283               	bcf	3971,1,c	;volatile
  9843                           
  9844                           ;Library_LCD_2.h: 60: _delay((unsigned long)((5500)*(48000000/4000000.0)));
  9845  00259E  0E56               	movlw	86
  9846  0025A0  0100               	movlb	0	; () banked
  9847  0025A2  6F63               	movwf	??_Lcd_Init& (0+255),b
  9848  0025A4  0EB5               	movlw	181
  9849  0025A6                     u4367:
  9850  0025A6  2EE8               	decfsz	wreg,f,c
  9851  0025A8  D7FE               	bra	u4367
  9852  0025AA  2F63               	decfsz	??_Lcd_Init& (0+255),f,b
  9853  0025AC  D7FC               	bra	u4367
  9854  0025AE  D000               	nop2	
  9855                           
  9856                           ;Library_LCD_2.h: 61: _delay((unsigned long)((5500)*(48000000/4000000.0)));
  9857  0025B0  0E56               	movlw	86
  9858  0025B2  0100               	movlb	0	; () banked
  9859  0025B4  6F63               	movwf	??_Lcd_Init& (0+255),b
  9860  0025B6  0EB5               	movlw	181
  9861  0025B8                     u4377:
  9862  0025B8  2EE8               	decfsz	wreg,f,c
  9863  0025BA  D7FE               	bra	u4377
  9864  0025BC  2F63               	decfsz	??_Lcd_Init& (0+255),f,b
  9865  0025BE  D7FC               	bra	u4377
  9866  0025C0  D000               	nop2	
  9867                           
  9868                           ;Library_LCD_2.h: 62: _delay((unsigned long)((5500)*(48000000/4000000.0)));
  9869  0025C2  0E56               	movlw	86
  9870  0025C4  0100               	movlb	0	; () banked
  9871  0025C6  6F63               	movwf	??_Lcd_Init& (0+255),b
  9872  0025C8  0EB5               	movlw	181
  9873  0025CA                     u4387:
  9874  0025CA  2EE8               	decfsz	wreg,f,c
  9875  0025CC  D7FE               	bra	u4387
  9876  0025CE  2F63               	decfsz	??_Lcd_Init& (0+255),f,b
  9877  0025D0  D7FC               	bra	u4387
  9878  0025D2  D000               	nop2	
  9879                           
  9880                           ;Library_LCD_2.h: 63: _delay((unsigned long)((5500)*(48000000/4000000.0)));
  9881  0025D4  0E56               	movlw	86
  9882  0025D6  0100               	movlb	0	; () banked
  9883  0025D8  6F63               	movwf	??_Lcd_Init& (0+255),b
  9884  0025DA  0EB5               	movlw	181
  9885  0025DC                     u4397:
  9886  0025DC  2EE8               	decfsz	wreg,f,c
  9887  0025DE  D7FE               	bra	u4397
  9888  0025E0  2F63               	decfsz	??_Lcd_Init& (0+255),f,b
  9889  0025E2  D7FC               	bra	u4397
  9890  0025E4  D000               	nop2	
  9891                           
  9892                           ;Library_LCD_2.h: 64: _delay((unsigned long)((5500)*(48000000/4000000.0)));
  9893  0025E6  0E56               	movlw	86
  9894  0025E8  0100               	movlb	0	; () banked
  9895  0025EA  6F63               	movwf	??_Lcd_Init& (0+255),b
  9896  0025EC  0EB5               	movlw	181
  9897  0025EE                     u4407:
  9898  0025EE  2EE8               	decfsz	wreg,f,c
  9899  0025F0  D7FE               	bra	u4407
  9900  0025F2  2F63               	decfsz	??_Lcd_Init& (0+255),f,b
  9901  0025F4  D7FC               	bra	u4407
  9902  0025F6  D000               	nop2	
  9903                           
  9904                           ;Library_LCD_2.h: 65: _delay((unsigned long)((5500)*(48000000/4000000.0)));
  9905  0025F8  0E56               	movlw	86
  9906  0025FA  0100               	movlb	0	; () banked
  9907  0025FC  6F63               	movwf	??_Lcd_Init& (0+255),b
  9908  0025FE  0EB5               	movlw	181
  9909  002600                     u4417:
  9910  002600  2EE8               	decfsz	wreg,f,c
  9911  002602  D7FE               	bra	u4417
  9912  002604  2F63               	decfsz	??_Lcd_Init& (0+255),f,b
  9913  002606  D7FC               	bra	u4417
  9914  002608  D000               	nop2	
  9915                           
  9916                           ;Library_LCD_2.h: 66: for(data = 1; data < 4; data ++)
  9917  00260A  0E01               	movlw	1
  9918  00260C  0100               	movlb	0	; () banked
  9919  00260E  6F64               	movwf	Lcd_Init@data& (0+255),b
  9920  002610  D020               	goto	L6
  9921  002612                     l60:
  9922                           
  9923                           ; BSR set to: 0
  9924                           ;Library_LCD_2.h: 67: {
  9925                           ;Library_LCD_2.h: 68: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits
      +                          .RD4 = 1; PORTDbits.RD3 = 0;
  9926  002612  9E83               	bcf	3971,7,c	;volatile
  9927  002614  9C83               	bcf	3971,6,c	;volatile
  9928  002616  8A83               	bsf	3971,5,c	;volatile
  9929  002618  8883               	bsf	3971,4,c	;volatile
  9930  00261A  9683               	bcf	3971,3,c	;volatile
  9931                           
  9932                           ;Library_LCD_2.h: 69: PORTDbits.RD1 = 0; PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits
      +                          .RD5 = 1; PORTDbits.RD4 = 1;
  9933  00261C  9283               	bcf	3971,1,c	;volatile
  9934  00261E  9E83               	bcf	3971,7,c	;volatile
  9935  002620  9C83               	bcf	3971,6,c	;volatile
  9936  002622  8A83               	bsf	3971,5,c	;volatile
  9937  002624  8883               	bsf	3971,4,c	;volatile
  9938                           
  9939                           ;Library_LCD_2.h: 70: PORTDbits.RD3 = 1; PORTDbits.RD1 = 0;
  9940  002626  8683               	bsf	3971,3,c	;volatile
  9941  002628  9283               	bcf	3971,1,c	;volatile
  9942                           
  9943                           ; BSR set to: 0
  9944                           ;Library_LCD_2.h: 71: _delay((unsigned long)((5)*(48000000/4000000.0)));
  9945  00262A  0E14               	movlw	20
  9946  00262C                     u4427:
  9947  00262C  2EE8               	decfsz	wreg,f,c
  9948  00262E  D7FE               	bra	u4427
  9949                           
  9950                           ;Library_LCD_2.h: 72: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits
      +                          .RD4 = 1; PORTDbits.RD3 = 0;
  9951  002630  9E83               	bcf	3971,7,c	;volatile
  9952  002632  9C83               	bcf	3971,6,c	;volatile
  9953  002634  8A83               	bsf	3971,5,c	;volatile
  9954  002636  8883               	bsf	3971,4,c	;volatile
  9955  002638  9683               	bcf	3971,3,c	;volatile
  9956                           
  9957                           ;Library_LCD_2.h: 73: PORTDbits.RD1 = 0;
  9958  00263A  9283               	bcf	3971,1,c	;volatile
  9959                           
  9960                           ;Library_LCD_2.h: 74: _delay((unsigned long)((5500)*(48000000/4000000.0)));
  9961  00263C  0E56               	movlw	86
  9962  00263E  0100               	movlb	0	; () banked
  9963  002640  6F63               	movwf	??_Lcd_Init& (0+255),b
  9964  002642  0EB5               	movlw	181
  9965  002644                     u4437:
  9966  002644  2EE8               	decfsz	wreg,f,c
  9967  002646  D7FE               	bra	u4437
  9968  002648  2F63               	decfsz	??_Lcd_Init& (0+255),f,b
  9969  00264A  D7FC               	bra	u4437
  9970  00264C  D000               	nop2	
  9971  00264E  0100               	movlb	0	; () banked
  9972  002650  2B64               	incf	Lcd_Init@data& (0+255),f,b
  9973  002652                     L6:
  9974  002652  0E03               	movlw	3
  9975  002654  6564               	cpfsgt	Lcd_Init@data& (0+255),b
  9976  002656  D7DD               	goto	l60
  9977                           
  9978                           ; BSR set to: 0
  9979                           ;Library_LCD_2.h: 75: }
  9980                           ;Library_LCD_2.h: 76: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits
      +                          .RD4 = 0; PORTDbits.RD3 = 0; PORTDbits.RD1 = 0;
  9981  002658  9E83               	bcf	3971,7,c	;volatile
  9982  00265A  9C83               	bcf	3971,6,c	;volatile
  9983  00265C  8A83               	bsf	3971,5,c	;volatile
  9984  00265E  9883               	bcf	3971,4,c	;volatile
  9985  002660  9683               	bcf	3971,3,c	;volatile
  9986  002662  9283               	bcf	3971,1,c	;volatile
  9987                           
  9988                           ;Library_LCD_2.h: 77: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits
      +                          .RD4 = 0; PORTDbits.RD3 = 1; PORTDbits.RD1 = 0;
  9989  002664  9E83               	bcf	3971,7,c	;volatile
  9990  002666  9C83               	bcf	3971,6,c	;volatile
  9991  002668  8A83               	bsf	3971,5,c	;volatile
  9992  00266A  9883               	bcf	3971,4,c	;volatile
  9993  00266C  8683               	bsf	3971,3,c	;volatile
  9994  00266E  9283               	bcf	3971,1,c	;volatile
  9995                           
  9996                           ; BSR set to: 0
  9997                           ;Library_LCD_2.h: 78: _delay((unsigned long)((5)*(48000000/4000000.0)));
  9998  002670  0E14               	movlw	20
  9999  002672                     u4447:
 10000  002672  2EE8               	decfsz	wreg,f,c
 10001  002674  D7FE               	bra	u4447
 10002                           
 10003                           ;Library_LCD_2.h: 79: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits
      +                          .RD4 = 0; PORTDbits.RD3 = 0; PORTDbits.RD1 = 0;
 10004  002676  9E83               	bcf	3971,7,c	;volatile
 10005  002678  9C83               	bcf	3971,6,c	;volatile
 10006  00267A  8A83               	bsf	3971,5,c	;volatile
 10007  00267C  9883               	bcf	3971,4,c	;volatile
 10008  00267E  9683               	bcf	3971,3,c	;volatile
 10009  002680  9283               	bcf	3971,1,c	;volatile
 10010                           
 10011                           ;Library_LCD_2.h: 80: _delay((unsigned long)((5500)*(48000000/4000000.0)));
 10012  002682  0E56               	movlw	86
 10013  002684  0100               	movlb	0	; () banked
 10014  002686  6F63               	movwf	??_Lcd_Init& (0+255),b
 10015  002688  0EB5               	movlw	181
 10016  00268A                     u4457:
 10017  00268A  2EE8               	decfsz	wreg,f,c
 10018  00268C  D7FE               	bra	u4457
 10019  00268E  2F63               	decfsz	??_Lcd_Init& (0+255),f,b
 10020  002690  D7FC               	bra	u4457
 10021  002692  D000               	nop2	
 10022                           
 10023                           ;Library_LCD_2.h: 81: data = 40; Lcd_Cmd(data);
 10024  002694  0E28               	movlw	40
 10025  002696  0100               	movlb	0	; () banked
 10026  002698  6F64               	movwf	Lcd_Init@data& (0+255),b
 10027                           
 10028                           ; BSR set to: 0
 10029  00269A  5164               	movf	Lcd_Init@data& (0+255),w,b
 10030  00269C  EC97  F014         	call	_Lcd_Cmd
 10031                           
 10032                           ;Library_LCD_2.h: 82: data = 16; Lcd_Cmd(data);
 10033  0026A0  0E10               	movlw	16
 10034  0026A2  0100               	movlb	0	; () banked
 10035  0026A4  6F64               	movwf	Lcd_Init@data& (0+255),b
 10036                           
 10037                           ; BSR set to: 0
 10038  0026A6  5164               	movf	Lcd_Init@data& (0+255),w,b
 10039  0026A8  EC97  F014         	call	_Lcd_Cmd
 10040                           
 10041                           ;Library_LCD_2.h: 83: data = 1; Lcd_Cmd(data);
 10042  0026AC  0E01               	movlw	1
 10043  0026AE  0100               	movlb	0	; () banked
 10044  0026B0  6F64               	movwf	Lcd_Init@data& (0+255),b
 10045                           
 10046                           ; BSR set to: 0
 10047  0026B2  5164               	movf	Lcd_Init@data& (0+255),w,b
 10048  0026B4  EC97  F014         	call	_Lcd_Cmd
 10049                           
 10050                           ;Library_LCD_2.h: 84: data = 15; Lcd_Cmd(data);
 10051  0026B8  0E0F               	movlw	15
 10052  0026BA  0100               	movlb	0	; () banked
 10053  0026BC  6F64               	movwf	Lcd_Init@data& (0+255),b
 10054                           
 10055                           ; BSR set to: 0
 10056  0026BE  5164               	movf	Lcd_Init@data& (0+255),w,b
 10057  0026C0  EC97  F014         	call	_Lcd_Cmd
 10058  0026C4  0012               	return		;funcret
 10059  0026C6                     __end_of_Lcd_Init:
 10060                           	opt stack 0
 10061                           tblptru	equ	0xFF8
 10062                           tblptrh	equ	0xFF7
 10063                           tblptrl	equ	0xFF6
 10064                           tablat	equ	0xFF5
 10065                           prodh	equ	0xFF4
 10066                           prodl	equ	0xFF3
 10067                           postinc0	equ	0xFEE
 10068                           wreg	equ	0xFE8
 10069                           indf2	equ	0xFDF
 10070                           postinc2	equ	0xFDE
 10071                           postdec2	equ	0xFDD
 10072                           fsr2h	equ	0xFDA
 10073                           fsr2l	equ	0xFD9
 10074                           status	equ	0xFD8
 10075                           
 10076 ;; *************** function _Lcd_Cmd *****************
 10077 ;; Defined at:
 10078 ;;		line 144 in file "Library_LCD_2.h"
 10079 ;; Parameters:    Size  Location     Type
 10080 ;;  data            1    wreg     unsigned char 
 10081 ;; Auto vars:     Size  Location     Type
 10082 ;;  data            1    2[BANK0 ] unsigned char 
 10083 ;; Return value:  Size  Location     Type
 10084 ;;                  1    wreg      void 
 10085 ;; Registers used:
 10086 ;;		wreg, status,2, status,0
 10087 ;; Tracked objects:
 10088 ;;		On entry : 0/0
 10089 ;;		On exit  : 0/0
 10090 ;;		Unchanged: 0/0
 10091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10092 ;;      Params:         0       0       0       0       0       0       0       0       0
 10093 ;;      Locals:         0       1       0       0       0       0       0       0       0
 10094 ;;      Temps:          0       2       0       0       0       0       0       0       0
 10095 ;;      Totals:         0       3       0       0       0       0       0       0       0
 10096 ;;Total ram usage:        3 bytes
 10097 ;; Hardware stack levels used:    1
 10098 ;; Hardware stack levels required when called:    3
 10099 ;; This function calls:
 10100 ;;		Nothing
 10101 ;; This function is called by:
 10102 ;;		_Lcd_Init
 10103 ;;		_Lcd_Out2
 10104 ;;		_main
 10105 ;;		_Lcd_Out
 10106 ;; This function uses a non-reentrant model
 10107 ;;
 10108                           
 10109                           	psect	text33
 10110  00292E                     __ptext33:
 10111                           	opt stack 0
 10112  00292E                     _Lcd_Cmd:
 10113                           	opt stack 26
 10114                           
 10115                           ;incstack = 0
 10116                           ;Lcd_Cmd@data stored from wreg
 10117  00292E  0100               	movlb	0	; () banked
 10118  002930  6F62               	movwf	Lcd_Cmd@data& (0+255),b
 10119                           
 10120                           ;Library_LCD_2.h: 145: PORTDbits.RD3 = 0; PORTDbits.RD1 = 0;
 10121  002932  9683               	bcf	3971,3,c	;volatile
 10122  002934  9283               	bcf	3971,1,c	;volatile
 10123                           
 10124                           ;Library_LCD_2.h: 146: PORTDbits.RD7 = (data & 0b10000000)>>7; PORTDbits.RD6 = (data & 0
      +                          b01000000)>>6;
 10125  002936  0100               	movlb	0	; () banked
 10126  002938  6B60               	clrf	??_Lcd_Cmd& (0+255),b
 10127  00293A  AF62               	btfss	Lcd_Cmd@data& (0+255),7,b
 10128  00293C  D001               	bra	u2875
 10129  00293E  2B60               	incf	??_Lcd_Cmd& (0+255),f,b
 10130  002940                     u2875:
 10131  002940  0E01               	movlw	1
 10132  002942  1760               	andwf	??_Lcd_Cmd& (0+255),f,b
 10133  002944  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
 10134  002946  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
 10135  002948  5083               	movf	3971,w,c	;volatile
 10136  00294A  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
 10137  00294C  0B7F               	andlw	-129
 10138  00294E  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
 10139  002950  6E83               	movwf	3971,c	;volatile
 10140  002952  C062  F060         	movff	Lcd_Cmd@data,??_Lcd_Cmd
 10141  002956  0E06               	movlw	6
 10142  002958  6F61               	movwf	(??_Lcd_Cmd+1)& (0+255),b
 10143  00295A                     u2885:
 10144  00295A  90D8               	bcf	status,0,c
 10145  00295C  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
 10146  00295E  2F61               	decfsz	(??_Lcd_Cmd+1)& (0+255),f,b
 10147  002960  D7FC               	goto	u2885
 10148  002962  0E01               	movlw	1
 10149  002964  1760               	andwf	??_Lcd_Cmd& (0+255),f,b
 10150  002966  3B60               	swapf	??_Lcd_Cmd& (0+255),f,b
 10151  002968  4760               	rlncf	??_Lcd_Cmd& (0+255),f,b
 10152  00296A  4760               	rlncf	??_Lcd_Cmd& (0+255),f,b
 10153  00296C  5083               	movf	3971,w,c	;volatile
 10154  00296E  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
 10155  002970  0BBF               	andlw	-65
 10156  002972  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
 10157  002974  6E83               	movwf	3971,c	;volatile
 10158                           
 10159                           ;Library_LCD_2.h: 147: PORTDbits.RD5 = (data & 0b00100000)>>5; PORTDbits.RD4 = (data & 0
      +                          b00010000)>>4;
 10160  002976  C062  F060         	movff	Lcd_Cmd@data,??_Lcd_Cmd
 10161  00297A  0E05               	movlw	5
 10162  00297C  6F61               	movwf	(??_Lcd_Cmd+1)& (0+255),b
 10163  00297E                     u2895:
 10164  00297E  90D8               	bcf	status,0,c
 10165  002980  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
 10166  002982  2F61               	decfsz	(??_Lcd_Cmd+1)& (0+255),f,b
 10167  002984  D7FC               	goto	u2895
 10168  002986  0E01               	movlw	1
 10169  002988  1760               	andwf	??_Lcd_Cmd& (0+255),f,b
 10170  00298A  3B60               	swapf	??_Lcd_Cmd& (0+255),f,b
 10171  00298C  4760               	rlncf	??_Lcd_Cmd& (0+255),f,b
 10172  00298E  5083               	movf	3971,w,c	;volatile
 10173  002990  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
 10174  002992  0BDF               	andlw	-33
 10175  002994  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
 10176  002996  6E83               	movwf	3971,c	;volatile
 10177  002998  C062  F060         	movff	Lcd_Cmd@data,??_Lcd_Cmd
 10178  00299C  3B60               	swapf	??_Lcd_Cmd& (0+255),f,b
 10179  00299E  0E0F               	movlw	15
 10180  0029A0  1760               	andwf	??_Lcd_Cmd& (0+255),f,b
 10181  0029A2  0E01               	movlw	1
 10182  0029A4  1760               	andwf	??_Lcd_Cmd& (0+255),f,b
 10183  0029A6  3B60               	swapf	??_Lcd_Cmd& (0+255),f,b
 10184  0029A8  5083               	movf	3971,w,c	;volatile
 10185  0029AA  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
 10186  0029AC  0BEF               	andlw	-17
 10187  0029AE  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
 10188  0029B0  6E83               	movwf	3971,c	;volatile
 10189                           
 10190                           ; BSR set to: 0
 10191                           ;Library_LCD_2.h: 148: _delay(10);
 10192  0029B2  0E03               	movlw	3
 10193  0029B4                     u4467:
 10194  0029B4  2EE8               	decfsz	wreg,f,c
 10195  0029B6  D7FE               	bra	u4467
 10196  0029B8  F000               	nop	
 10197                           
 10198                           ;Library_LCD_2.h: 149: PORTDbits.RD3 = 1; _delay((unsigned long)((5)*(48000000/4000000.0
      +                          ))); PORTDbits.RD3 = 0;
 10199  0029BA  8683               	bsf	3971,3,c	;volatile
 10200  0029BC  0E14               	movlw	20
 10201  0029BE                     u4477:
 10202  0029BE  2EE8               	decfsz	wreg,f,c
 10203  0029C0  D7FE               	bra	u4477
 10204  0029C2  9683               	bcf	3971,3,c	;volatile
 10205                           
 10206                           ;Library_LCD_2.h: 150: PORTDbits.RD7 = (data & 0b00001000)>>3; PORTDbits.RD6 = (data & 0
      +                          b00000100)>>2;
 10207  0029C4  C062  F060         	movff	Lcd_Cmd@data,??_Lcd_Cmd
 10208  0029C8  0100               	movlb	0	; () banked
 10209  0029CA  90D8               	bcf	status,0,c
 10210  0029CC  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
 10211  0029CE  90D8               	bcf	status,0,c
 10212  0029D0  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
 10213  0029D2  90D8               	bcf	status,0,c
 10214  0029D4  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
 10215  0029D6  0E01               	movlw	1
 10216  0029D8  1760               	andwf	??_Lcd_Cmd& (0+255),f,b
 10217  0029DA  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
 10218  0029DC  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
 10219  0029DE  5083               	movf	3971,w,c	;volatile
 10220  0029E0  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
 10221  0029E2  0B7F               	andlw	-129
 10222  0029E4  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
 10223  0029E6  6E83               	movwf	3971,c	;volatile
 10224  0029E8  C062  F060         	movff	Lcd_Cmd@data,??_Lcd_Cmd
 10225  0029EC  90D8               	bcf	status,0,c
 10226  0029EE  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
 10227  0029F0  90D8               	bcf	status,0,c
 10228  0029F2  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
 10229  0029F4  0E01               	movlw	1
 10230  0029F6  1760               	andwf	??_Lcd_Cmd& (0+255),f,b
 10231  0029F8  3B60               	swapf	??_Lcd_Cmd& (0+255),f,b
 10232  0029FA  4760               	rlncf	??_Lcd_Cmd& (0+255),f,b
 10233  0029FC  4760               	rlncf	??_Lcd_Cmd& (0+255),f,b
 10234  0029FE  5083               	movf	3971,w,c	;volatile
 10235  002A00  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
 10236  002A02  0BBF               	andlw	-65
 10237  002A04  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
 10238  002A06  6E83               	movwf	3971,c	;volatile
 10239                           
 10240                           ;Library_LCD_2.h: 151: PORTDbits.RD5 = (data & 0b00000010)>>1; PORTDbits.RD4 = (data & 0
      +                          b00000001);
 10241  002A08  C062  F060         	movff	Lcd_Cmd@data,??_Lcd_Cmd
 10242  002A0C  90D8               	bcf	status,0,c
 10243  002A0E  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
 10244  002A10  0E01               	movlw	1
 10245  002A12  1760               	andwf	??_Lcd_Cmd& (0+255),f,b
 10246  002A14  3B60               	swapf	??_Lcd_Cmd& (0+255),f,b
 10247  002A16  4760               	rlncf	??_Lcd_Cmd& (0+255),f,b
 10248  002A18  5083               	movf	3971,w,c	;volatile
 10249  002A1A  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
 10250  002A1C  0BDF               	andlw	-33
 10251  002A1E  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
 10252  002A20  6E83               	movwf	3971,c	;volatile
 10253  002A22  C062  F060         	movff	Lcd_Cmd@data,??_Lcd_Cmd
 10254  002A26  0E01               	movlw	1
 10255  002A28  1760               	andwf	??_Lcd_Cmd& (0+255),f,b
 10256  002A2A  3B60               	swapf	??_Lcd_Cmd& (0+255),f,b
 10257  002A2C  5083               	movf	3971,w,c	;volatile
 10258  002A2E  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
 10259  002A30  0BEF               	andlw	-17
 10260  002A32  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
 10261  002A34  6E83               	movwf	3971,c	;volatile
 10262                           
 10263                           ; BSR set to: 0
 10264                           ;Library_LCD_2.h: 152: _delay(10);
 10265  002A36  0E03               	movlw	3
 10266  002A38                     u4487:
 10267  002A38  2EE8               	decfsz	wreg,f,c
 10268  002A3A  D7FE               	bra	u4487
 10269  002A3C  F000               	nop	
 10270                           
 10271                           ;Library_LCD_2.h: 153: PORTDbits.RD3 = 1; _delay((unsigned long)((5)*(48000000/4000000.0
      +                          ))); PORTDbits.RD3 = 0;
 10272  002A3E  8683               	bsf	3971,3,c	;volatile
 10273  002A40  0E14               	movlw	20
 10274  002A42                     u4497:
 10275  002A42  2EE8               	decfsz	wreg,f,c
 10276  002A44  D7FE               	bra	u4497
 10277  002A46  9683               	bcf	3971,3,c	;volatile
 10278                           
 10279                           ;Library_LCD_2.h: 154: _delay((unsigned long)((5500)*(48000000/4000000.0)));
 10280  002A48  0E56               	movlw	86
 10281  002A4A  0100               	movlb	0	; () banked
 10282  002A4C  6F60               	movwf	??_Lcd_Cmd& (0+255),b
 10283  002A4E  0EB5               	movlw	181
 10284  002A50                     u4507:
 10285  002A50  2EE8               	decfsz	wreg,f,c
 10286  002A52  D7FE               	bra	u4507
 10287  002A54  2F60               	decfsz	??_Lcd_Cmd& (0+255),f,b
 10288  002A56  D7FC               	bra	u4507
 10289  002A58  D000               	nop2	
 10290  002A5A  0012               	return		;funcret
 10291  002A5C                     __end_of_Lcd_Cmd:
 10292                           	opt stack 0
 10293                           tblptru	equ	0xFF8
 10294                           tblptrh	equ	0xFF7
 10295                           tblptrl	equ	0xFF6
 10296                           tablat	equ	0xFF5
 10297                           prodh	equ	0xFF4
 10298                           prodl	equ	0xFF3
 10299                           postinc0	equ	0xFEE
 10300                           wreg	equ	0xFE8
 10301                           indf2	equ	0xFDF
 10302                           postinc2	equ	0xFDE
 10303                           postdec2	equ	0xFDD
 10304                           fsr2h	equ	0xFDA
 10305                           fsr2l	equ	0xFD9
 10306                           status	equ	0xFD8
 10307                           
 10308 ;; *************** function _comparar *****************
 10309 ;; Defined at:
 10310 ;;		line 94 in file "main_014_Practice_CCP Comparacion_ADC.c"
 10311 ;; Parameters:    Size  Location     Type
 10312 ;;		None
 10313 ;; Auto vars:     Size  Location     Type
 10314 ;;		None
 10315 ;; Return value:  Size  Location     Type
 10316 ;;                  1    wreg      void 
 10317 ;; Registers used:
 10318 ;;		wreg, status,2, status,0, cstack
 10319 ;; Tracked objects:
 10320 ;;		On entry : 0/0
 10321 ;;		On exit  : 0/0
 10322 ;;		Unchanged: 0/0
 10323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10324 ;;      Params:         0       0       0       0       0       0       0       0       0
 10325 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10326 ;;      Temps:         18       0       0       0       0       0       0       0       0
 10327 ;;      Totals:        18       0       0       0       0       0       0       0       0
 10328 ;;Total ram usage:       18 bytes
 10329 ;; Hardware stack levels used:    1
 10330 ;; Hardware stack levels required when called:    2
 10331 ;; This function calls:
 10332 ;;		i2___ftdiv
 10333 ;;		i2___ftmul
 10334 ;;		i2___lwtoft
 10335 ;; This function is called by:
 10336 ;;		Interrupt level 2
 10337 ;; This function uses a non-reentrant model
 10338 ;;
 10339                           
 10340                           	psect	intcode
 10341  000008                     __pintcode:
 10342                           	opt stack 0
 10343  000008                     _comparar:
 10344                           	opt stack 23
 10345                           
 10346                           ;incstack = 0
 10347  000008  8255               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10348  00000A  EDC3  F015         	call	int_func,f	;refresh shadow registers
 10349                           tblptru	equ	0xFF8
 10350                           tblptrh	equ	0xFF7
 10351                           tblptrl	equ	0xFF6
 10352                           tablat	equ	0xFF5
 10353                           prodh	equ	0xFF4
 10354                           prodl	equ	0xFF3
 10355                           postinc0	equ	0xFEE
 10356                           wreg	equ	0xFE8
 10357                           indf2	equ	0xFDF
 10358                           postinc2	equ	0xFDE
 10359                           postdec2	equ	0xFDD
 10360                           fsr2h	equ	0xFDA
 10361                           fsr2l	equ	0xFD9
 10362                           status	equ	0xFD8
 10363                           
 10364                           	psect	intcode_body
 10365  002B86                     __pintcode_body:
 10366                           	opt stack 23
 10367  002B86                     int_func:
 10368                           	opt stack 23
 10369  002B86  0006               	pop		; remove dummy address from shadow register refresh
 10370  002B88  CFFA F02A          	movff	pclath,??_comparar
 10371  002B8C  CFFB F02B          	movff	pclatu,??_comparar+1
 10372  002B90  CFE9 F02C          	movff	fsr0l,??_comparar+2
 10373  002B94  CFEA F02D          	movff	fsr0h,??_comparar+3
 10374  002B98  CFE1 F02E          	movff	fsr1l,??_comparar+4
 10375  002B9C  CFE2 F02F          	movff	fsr1h,??_comparar+5
 10376  002BA0  CFD9 F030          	movff	fsr2l,??_comparar+6
 10377  002BA4  CFDA F031          	movff	fsr2h,??_comparar+7
 10378  002BA8  CFF3 F032          	movff	prodl,??_comparar+8
 10379  002BAC  CFF4 F033          	movff	prodh,??_comparar+9
 10380  002BB0  CFF6 F034          	movff	tblptrl,??_comparar+10
 10381  002BB4  CFF7 F035          	movff	tblptrh,??_comparar+11
 10382  002BB8  CFF8 F036          	movff	tblptru,??_comparar+12
 10383  002BBC  CFF5 F037          	movff	tablat,??_comparar+13
 10384  002BC0  C055  F038         	movff	btemp,??_comparar+14
 10385  002BC4  C056  F039         	movff	btemp+1,??_comparar+15
 10386  002BC8  C057  F03A         	movff	btemp+2,??_comparar+16
 10387  002BCC  C058  F03B         	movff	btemp+3,??_comparar+17
 10388                           
 10389                           ;main_014_Practice_CCP Comparacion_ADC.c: 96: INTCONbits.GIE = 0;
 10390  002BD0  9EF2               	bcf	intcon,7,c	;volatile
 10391                           
 10392                           ;main_014_Practice_CCP Comparacion_ADC.c: 97: if(CCP1IF == 1)
 10393  002BD2  A49E               	btfss	3998,2,c	;volatile
 10394  002BD4  D036               	goto	i2l109
 10395                           
 10396                           ;main_014_Practice_CCP Comparacion_ADC.c: 98: {
 10397                           ;main_014_Practice_CCP Comparacion_ADC.c: 99: T1CONbits.TMR1ON = 0;
 10398  002BD6  90CD               	bcf	4045,0,c	;volatile
 10399                           
 10400                           ;main_014_Practice_CCP Comparacion_ADC.c: 100: PIR1bits.CCP1IF = 0;
 10401  002BD8  949E               	bcf	3998,2,c	;volatile
 10402                           
 10403                           ;main_014_Practice_CCP Comparacion_ADC.c: 102: adc1 = ADRESH;
 10404  002BDA  CFC4 F053          	movff	4036,_adc1	;volatile
 10405  002BDE  6A54               	clrf	_adc1+1,c
 10406                           
 10407                           ;main_014_Practice_CCP Comparacion_ADC.c: 103: adc1 = adc1<<8;
 10408  002BE0  5053               	movf	_adc1,w,c
 10409  002BE2  6E54               	movwf	_adc1+1,c
 10410  002BE4  6A53               	clrf	_adc1,c
 10411                           
 10412                           ;main_014_Practice_CCP Comparacion_ADC.c: 104: adc1 = adc1 + ADRESL;
 10413  002BE6  50C3               	movf	4035,w,c	;volatile
 10414  002BE8  2453               	addwf	_adc1,w,c
 10415  002BEA  6E53               	movwf	_adc1,c
 10416  002BEC  0E00               	movlw	0
 10417  002BEE  2054               	addwfc	_adc1+1,w,c
 10418  002BF0  6E54               	movwf	_adc1+1,c
 10419                           
 10420                           ;main_014_Practice_CCP Comparacion_ADC.c: 106: voltaje = adc1 * 4.72 /1024.0;
 10421  002BF2  0E0A               	movlw	10
 10422  002BF4  6E0F               	movwf	i2___ftmul@f2,c
 10423  002BF6  0E97               	movlw	151
 10424  002BF8  6E10               	movwf	i2___ftmul@f2+1,c
 10425  002BFA  0E40               	movlw	64
 10426  002BFC  6E11               	movwf	i2___ftmul@f2+2,c
 10427  002BFE  C053  F009         	movff	_adc1,i2___lwtoft@c
 10428  002C02  C054  F00A         	movff	_adc1+1,i2___lwtoft@c+1
 10429  002C06  EC4B  F01D         	call	i2___lwtoft	;wreg free
 10430  002C0A  C009  F00C         	movff	?i2___lwtoft,i2___ftmul@f1
 10431  002C0E  C00A  F00D         	movff	?i2___lwtoft+1,i2___ftmul@f1+1
 10432  002C12  C00B  F00E         	movff	?i2___lwtoft+2,i2___ftmul@f1+2
 10433  002C16  EC3E  F017         	call	i2___ftmul	;wreg free
 10434  002C1A  C00C  F01B         	movff	?i2___ftmul,i2___ftdiv@f1
 10435  002C1E  C00D  F01C         	movff	?i2___ftmul+1,i2___ftdiv@f1+1
 10436  002C22  C00E  F01D         	movff	?i2___ftmul+2,i2___ftdiv@f1+2
 10437  002C26  0E00               	movlw	0
 10438  002C28  6E1E               	movwf	i2___ftdiv@f2,c
 10439  002C2A  0E80               	movlw	128
 10440  002C2C  6E1F               	movwf	i2___ftdiv@f2+1,c
 10441  002C2E  0E44               	movlw	68
 10442  002C30  6E20               	movwf	i2___ftdiv@f2+2,c
 10443  002C32  EC2C  F018         	call	i2___ftdiv	;wreg free
 10444  002C36  C01B  F050         	movff	?i2___ftdiv,_voltaje
 10445  002C3A  C01C  F051         	movff	?i2___ftdiv+1,_voltaje+1
 10446  002C3E  C01D  F052         	movff	?i2___ftdiv+2,_voltaje+2
 10447  002C42                     i2l109:
 10448  002C42  C03B  F058         	movff	??_comparar+17,btemp+3
 10449  002C46  C03A  F057         	movff	??_comparar+16,btemp+2
 10450  002C4A  C039  F056         	movff	??_comparar+15,btemp+1
 10451  002C4E  C038  F055         	movff	??_comparar+14,btemp
 10452  002C52  C037  FFF5         	movff	??_comparar+13,tablat
 10453  002C56  C036  FFF8         	movff	??_comparar+12,tblptru
 10454  002C5A  C035  FFF7         	movff	??_comparar+11,tblptrh
 10455  002C5E  C034  FFF6         	movff	??_comparar+10,tblptrl
 10456  002C62  C033  FFF4         	movff	??_comparar+9,prodh
 10457  002C66  C032  FFF3         	movff	??_comparar+8,prodl
 10458  002C6A  C031  FFDA         	movff	??_comparar+7,fsr2h
 10459  002C6E  C030  FFD9         	movff	??_comparar+6,fsr2l
 10460  002C72  C02F  FFE2         	movff	??_comparar+5,fsr1h
 10461  002C76  C02E  FFE1         	movff	??_comparar+4,fsr1l
 10462  002C7A  C02D  FFEA         	movff	??_comparar+3,fsr0h
 10463  002C7E  C02C  FFE9         	movff	??_comparar+2,fsr0l
 10464  002C82  C02B  FFFB         	movff	??_comparar+1,pclatu
 10465  002C86  C02A  FFFA         	movff	??_comparar,pclath
 10466  002C8A  9255               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10467  002C8C  0011               	retfie		f
 10468  002C8E                     __end_of_comparar:
 10469                           	opt stack 0
 10470                           pclatu	equ	0xFFB
 10471                           pclath	equ	0xFFA
 10472                           tblptru	equ	0xFF8
 10473                           tblptrh	equ	0xFF7
 10474                           tblptrl	equ	0xFF6
 10475                           tablat	equ	0xFF5
 10476                           prodh	equ	0xFF4
 10477                           prodl	equ	0xFF3
 10478                           intcon	equ	0xFF2
 10479                           postinc0	equ	0xFEE
 10480                           fsr0h	equ	0xFEA
 10481                           fsr0l	equ	0xFE9
 10482                           wreg	equ	0xFE8
 10483                           fsr1h	equ	0xFE2
 10484                           fsr1l	equ	0xFE1
 10485                           indf2	equ	0xFDF
 10486                           postinc2	equ	0xFDE
 10487                           postdec2	equ	0xFDD
 10488                           fsr2h	equ	0xFDA
 10489                           fsr2l	equ	0xFD9
 10490                           status	equ	0xFD8
 10491                           
 10492 ;; *************** function i2___lwtoft *****************
 10493 ;; Defined at:
 10494 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
 10495 ;; Parameters:    Size  Location     Type
 10496 ;;  c               2    8[COMRAM] unsigned int 
 10497 ;; Auto vars:     Size  Location     Type
 10498 ;;		None
 10499 ;; Return value:  Size  Location     Type
 10500 ;;                  3    8[COMRAM] float 
 10501 ;; Registers used:
 10502 ;;		wreg, status,2, status,0, cstack
 10503 ;; Tracked objects:
 10504 ;;		On entry : 0/0
 10505 ;;		On exit  : 0/0
 10506 ;;		Unchanged: 0/0
 10507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10508 ;;      Params:         3       0       0       0       0       0       0       0       0
 10509 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10510 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10511 ;;      Totals:         3       0       0       0       0       0       0       0       0
 10512 ;;Total ram usage:        3 bytes
 10513 ;; Hardware stack levels used:    1
 10514 ;; Hardware stack levels required when called:    1
 10515 ;; This function calls:
 10516 ;;		i2___ftpack
 10517 ;; This function is called by:
 10518 ;;		_comparar
 10519 ;; This function uses a non-reentrant model
 10520 ;;
 10521                           
 10522                           	psect	text35
 10523  003A96                     __ptext35:
 10524                           	opt stack 0
 10525  003A96                     i2___lwtoft:
 10526                           	opt stack 23
 10527                           
 10528                           ;incstack = 0
 10529  003A96  C009  F001         	movff	i2___lwtoft@c,i2___ftpack@arg
 10530  003A9A  C00A  F002         	movff	i2___lwtoft@c+1,i2___ftpack@arg+1
 10531  003A9E  6A03               	clrf	i2___ftpack@arg+2,c
 10532  003AA0  0E8E               	movlw	142
 10533  003AA2  6E04               	movwf	i2___ftpack@exp,c
 10534  003AA4  0E00               	movlw	0
 10535  003AA6  6E05               	movwf	i2___ftpack@sign,c
 10536  003AA8  EC30  F01A         	call	i2___ftpack	;wreg free
 10537  003AAC  C001  F009         	movff	?i2___ftpack,?i2___lwtoft
 10538  003AB0  C002  F00A         	movff	?i2___ftpack+1,?i2___lwtoft+1
 10539  003AB4  C003  F00B         	movff	?i2___ftpack+2,?i2___lwtoft+2
 10540  003AB8  0012               	return	
 10541  003ABA                     __end_ofi2___lwtoft:
 10542                           	opt stack 0
 10543                           pclatu	equ	0xFFB
 10544                           pclath	equ	0xFFA
 10545                           tblptru	equ	0xFF8
 10546                           tblptrh	equ	0xFF7
 10547                           tblptrl	equ	0xFF6
 10548                           tablat	equ	0xFF5
 10549                           prodh	equ	0xFF4
 10550                           prodl	equ	0xFF3
 10551                           intcon	equ	0xFF2
 10552                           postinc0	equ	0xFEE
 10553                           fsr0h	equ	0xFEA
 10554                           fsr0l	equ	0xFE9
 10555                           wreg	equ	0xFE8
 10556                           fsr1h	equ	0xFE2
 10557                           fsr1l	equ	0xFE1
 10558                           indf2	equ	0xFDF
 10559                           postinc2	equ	0xFDE
 10560                           postdec2	equ	0xFDD
 10561                           fsr2h	equ	0xFDA
 10562                           fsr2l	equ	0xFD9
 10563                           status	equ	0xFD8
 10564                           
 10565 ;; *************** function i2___ftmul *****************
 10566 ;; Defined at:
 10567 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 10568 ;; Parameters:    Size  Location     Type
 10569 ;;  f1              3   11[COMRAM] float 
 10570 ;;  f2              3   14[COMRAM] float 
 10571 ;; Auto vars:     Size  Location     Type
 10572 ;;  __ftmul         3   21[COMRAM] unsigned um
 10573 ;;  __ftmul         1   25[COMRAM] unsigned char 
 10574 ;;  __ftmul         1   24[COMRAM] unsigned char 
 10575 ;;  __ftmul         1   20[COMRAM] unsigned char 
 10576 ;; Return value:  Size  Location     Type
 10577 ;;                  3   11[COMRAM] float 
 10578 ;; Registers used:
 10579 ;;		wreg, status,2, status,0, cstack
 10580 ;; Tracked objects:
 10581 ;;		On entry : 0/0
 10582 ;;		On exit  : 0/0
 10583 ;;		Unchanged: 0/0
 10584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10585 ;;      Params:         6       0       0       0       0       0       0       0       0
 10586 ;;      Locals:         6       0       0       0       0       0       0       0       0
 10587 ;;      Temps:          3       0       0       0       0       0       0       0       0
 10588 ;;      Totals:        15       0       0       0       0       0       0       0       0
 10589 ;;Total ram usage:       15 bytes
 10590 ;; Hardware stack levels used:    1
 10591 ;; Hardware stack levels required when called:    1
 10592 ;; This function calls:
 10593 ;;		i2___ftpack
 10594 ;; This function is called by:
 10595 ;;		_comparar
 10596 ;; This function uses a non-reentrant model
 10597 ;;
 10598                           
 10599                           	psect	text36
 10600  002E7C                     __ptext36:
 10601                           	opt stack 0
 10602  002E7C                     i2___ftmul:
 10603                           	opt stack 23
 10604                           
 10605                           ;incstack = 0
 10606  002E7C  C00E  F012         	movff	i2___ftmul@f1+2,??i2___ftmul
 10607  002E80  6A13               	clrf	(??i2___ftmul+1)& (0+255),c
 10608  002E82  6A14               	clrf	(??i2___ftmul+2)& (0+255),c
 10609  002E84  340D               	rlcf	i2___ftmul@f1+1,w,c
 10610  002E86  3612               	rlcf	??i2___ftmul& (0+255),f,c
 10611  002E88  E301               	bnc	u409_41
 10612  002E8A  8013               	bsf	(??i2___ftmul+1)& (0+255),0,c
 10613  002E8C                     u409_41:
 10614  002E8C  5012               	movf	??i2___ftmul,w,c
 10615  002E8E  6E15               	movwf	i2___ftmul@exp,c
 10616  002E90  5015               	movf	i2___ftmul@exp,w,c
 10617  002E92  A4D8               	btfss	status,2,c
 10618  002E94  D007               	goto	i2l604
 10619  002E96  0E00               	movlw	0
 10620  002E98  6E0C               	movwf	?i2___ftmul,c
 10621  002E9A  0E00               	movlw	0
 10622  002E9C  6E0D               	movwf	?i2___ftmul+1,c
 10623  002E9E  0E00               	movlw	0
 10624  002EA0  6E0E               	movwf	?i2___ftmul+2,c
 10625  002EA2  0012               	return	
 10626  002EA4                     i2l604:
 10627  002EA4  C011  F012         	movff	i2___ftmul@f2+2,??i2___ftmul
 10628  002EA8  6A13               	clrf	(??i2___ftmul+1)& (0+255),c
 10629  002EAA  6A14               	clrf	(??i2___ftmul+2)& (0+255),c
 10630  002EAC  3410               	rlcf	i2___ftmul@f2+1,w,c
 10631  002EAE  3612               	rlcf	??i2___ftmul& (0+255),f,c
 10632  002EB0  E301               	bnc	u411_41
 10633  002EB2  8013               	bsf	(??i2___ftmul+1)& (0+255),0,c
 10634  002EB4                     u411_41:
 10635  002EB4  5012               	movf	??i2___ftmul,w,c
 10636  002EB6  6E1A               	movwf	i2___ftmul@sign,c
 10637  002EB8  501A               	movf	i2___ftmul@sign,w,c
 10638  002EBA  A4D8               	btfss	status,2,c
 10639  002EBC  D007               	goto	i2l606
 10640  002EBE  0E00               	movlw	0
 10641  002EC0  6E0C               	movwf	?i2___ftmul,c
 10642  002EC2  0E00               	movlw	0
 10643  002EC4  6E0D               	movwf	?i2___ftmul+1,c
 10644  002EC6  0E00               	movlw	0
 10645  002EC8  6E0E               	movwf	?i2___ftmul+2,c
 10646  002ECA  0012               	return	
 10647  002ECC                     i2l606:
 10648  002ECC  501A               	movf	i2___ftmul@sign,w,c
 10649  002ECE  0F7B               	addlw	123
 10650  002ED0  2615               	addwf	i2___ftmul@exp,f,c
 10651  002ED2  C00E  F01A         	movff	i2___ftmul@f1+2,i2___ftmul@sign
 10652  002ED6  5011               	movf	i2___ftmul@f2+2,w,c
 10653  002ED8  1A1A               	xorwf	i2___ftmul@sign,f,c
 10654  002EDA  0E80               	movlw	128
 10655  002EDC  161A               	andwf	i2___ftmul@sign,f,c
 10656  002EDE  8E0D               	bsf	i2___ftmul@f1+1,7,c
 10657  002EE0  8E10               	bsf	i2___ftmul@f2+1,7,c
 10658  002EE2  0EFF               	movlw	255
 10659  002EE4  160F               	andwf	i2___ftmul@f2,f,c
 10660  002EE6  0EFF               	movlw	255
 10661  002EE8  1610               	andwf	i2___ftmul@f2+1,f,c
 10662  002EEA  0E00               	movlw	0
 10663  002EEC  1611               	andwf	i2___ftmul@f2+2,f,c
 10664  002EEE  0E00               	movlw	0
 10665  002EF0  6E16               	movwf	i2___ftmul@f3_as_product,c
 10666  002EF2  0E00               	movlw	0
 10667  002EF4  6E17               	movwf	i2___ftmul@f3_as_product+1,c
 10668  002EF6  0E00               	movlw	0
 10669  002EF8  6E18               	movwf	i2___ftmul@f3_as_product+2,c
 10670  002EFA  0E07               	movlw	7
 10671  002EFC  6E19               	movwf	i2___ftmul@cntr,c
 10672  002EFE  A00C               	btfss	i2___ftmul@f1,0,c
 10673  002F00  D006               	goto	i2l608
 10674  002F02  500F               	movf	i2___ftmul@f2,w,c
 10675  002F04  2616               	addwf	i2___ftmul@f3_as_product,f,c
 10676  002F06  5010               	movf	i2___ftmul@f2+1,w,c
 10677  002F08  2217               	addwfc	i2___ftmul@f3_as_product+1,f,c
 10678  002F0A  5011               	movf	i2___ftmul@f2+2,w,c
 10679  002F0C  2218               	addwfc	i2___ftmul@f3_as_product+2,f,c
 10680  002F0E                     i2l608:
 10681  002F0E  90D8               	bcf	status,0,c
 10682  002F10  320E               	rrcf	i2___ftmul@f1+2,f,c
 10683  002F12  320D               	rrcf	i2___ftmul@f1+1,f,c
 10684  002F14  320C               	rrcf	i2___ftmul@f1,f,c
 10685  002F16  90D8               	bcf	status,0,c
 10686  002F18  360F               	rlcf	i2___ftmul@f2,f,c
 10687  002F1A  3610               	rlcf	i2___ftmul@f2+1,f,c
 10688  002F1C  3611               	rlcf	i2___ftmul@f2+2,f,c
 10689  002F1E  2E19               	decfsz	i2___ftmul@cntr,f,c
 10690  002F20  D7EE               	goto	i2l607
 10691  002F22  0E09               	movlw	9
 10692  002F24  6E19               	movwf	i2___ftmul@cntr,c
 10693  002F26  A00C               	btfss	i2___ftmul@f1,0,c
 10694  002F28  D006               	goto	i2l611
 10695  002F2A  500F               	movf	i2___ftmul@f2,w,c
 10696  002F2C  2616               	addwf	i2___ftmul@f3_as_product,f,c
 10697  002F2E  5010               	movf	i2___ftmul@f2+1,w,c
 10698  002F30  2217               	addwfc	i2___ftmul@f3_as_product+1,f,c
 10699  002F32  5011               	movf	i2___ftmul@f2+2,w,c
 10700  002F34  2218               	addwfc	i2___ftmul@f3_as_product+2,f,c
 10701  002F36                     i2l611:
 10702  002F36  90D8               	bcf	status,0,c
 10703  002F38  320E               	rrcf	i2___ftmul@f1+2,f,c
 10704  002F3A  320D               	rrcf	i2___ftmul@f1+1,f,c
 10705  002F3C  320C               	rrcf	i2___ftmul@f1,f,c
 10706  002F3E  90D8               	bcf	status,0,c
 10707  002F40  3218               	rrcf	i2___ftmul@f3_as_product+2,f,c
 10708  002F42  3217               	rrcf	i2___ftmul@f3_as_product+1,f,c
 10709  002F44  3216               	rrcf	i2___ftmul@f3_as_product,f,c
 10710  002F46  2E19               	decfsz	i2___ftmul@cntr,f,c
 10711  002F48  D7EE               	goto	i2l610
 10712  002F4A  C016  F001         	movff	i2___ftmul@f3_as_product,i2___ftpack@arg
 10713  002F4E  C017  F002         	movff	i2___ftmul@f3_as_product+1,i2___ftpack@arg+1
 10714  002F52  C018  F003         	movff	i2___ftmul@f3_as_product+2,i2___ftpack@arg+2
 10715  002F56  C015  F004         	movff	i2___ftmul@exp,i2___ftpack@exp
 10716  002F5A  C01A  F005         	movff	i2___ftmul@sign,i2___ftpack@sign
 10717  002F5E  EC30  F01A         	call	i2___ftpack	;wreg free
 10718  002F62  C001  F00C         	movff	?i2___ftpack,?i2___ftmul
 10719  002F66  C002  F00D         	movff	?i2___ftpack+1,?i2___ftmul+1
 10720  002F6A  C003  F00E         	movff	?i2___ftpack+2,?i2___ftmul+2
 10721  002F6E  0012               	return	
 10722  002F70                     __end_ofi2___ftmul:
 10723                           	opt stack 0
 10724                           pclatu	equ	0xFFB
 10725                           pclath	equ	0xFFA
 10726                           tblptru	equ	0xFF8
 10727                           tblptrh	equ	0xFF7
 10728                           tblptrl	equ	0xFF6
 10729                           tablat	equ	0xFF5
 10730                           prodh	equ	0xFF4
 10731                           prodl	equ	0xFF3
 10732                           intcon	equ	0xFF2
 10733                           postinc0	equ	0xFEE
 10734                           fsr0h	equ	0xFEA
 10735                           fsr0l	equ	0xFE9
 10736                           wreg	equ	0xFE8
 10737                           fsr1h	equ	0xFE2
 10738                           fsr1l	equ	0xFE1
 10739                           indf2	equ	0xFDF
 10740                           postinc2	equ	0xFDE
 10741                           postdec2	equ	0xFDD
 10742                           fsr2h	equ	0xFDA
 10743                           fsr2l	equ	0xFD9
 10744                           status	equ	0xFD8
 10745                           
 10746 ;; *************** function i2___ftdiv *****************
 10747 ;; Defined at:
 10748 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 10749 ;; Parameters:    Size  Location     Type
 10750 ;;  f1              3   26[COMRAM] float 
 10751 ;;  f2              3   29[COMRAM] float 
 10752 ;; Auto vars:     Size  Location     Type
 10753 ;;  __ftdiv         3   36[COMRAM] float 
 10754 ;;  __ftdiv         1   40[COMRAM] unsigned char 
 10755 ;;  __ftdiv         1   39[COMRAM] unsigned char 
 10756 ;;  __ftdiv         1   35[COMRAM] unsigned char 
 10757 ;; Return value:  Size  Location     Type
 10758 ;;                  3   26[COMRAM] float 
 10759 ;; Registers used:
 10760 ;;		wreg, status,2, status,0, cstack
 10761 ;; Tracked objects:
 10762 ;;		On entry : 0/0
 10763 ;;		On exit  : 0/0
 10764 ;;		Unchanged: 0/0
 10765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10766 ;;      Params:         6       0       0       0       0       0       0       0       0
 10767 ;;      Locals:         6       0       0       0       0       0       0       0       0
 10768 ;;      Temps:          3       0       0       0       0       0       0       0       0
 10769 ;;      Totals:        15       0       0       0       0       0       0       0       0
 10770 ;;Total ram usage:       15 bytes
 10771 ;; Hardware stack levels used:    1
 10772 ;; Hardware stack levels required when called:    1
 10773 ;; This function calls:
 10774 ;;		i2___ftpack
 10775 ;; This function is called by:
 10776 ;;		_comparar
 10777 ;; This function uses a non-reentrant model
 10778 ;;
 10779                           
 10780                           	psect	text37
 10781  003058                     __ptext37:
 10782                           	opt stack 0
 10783  003058                     i2___ftdiv:
 10784                           	opt stack 23
 10785                           
 10786                           ;incstack = 0
 10787  003058  C01D  F021         	movff	i2___ftdiv@f1+2,??i2___ftdiv
 10788  00305C  6A22               	clrf	(??i2___ftdiv+1)& (0+255),c
 10789  00305E  6A23               	clrf	(??i2___ftdiv+2)& (0+255),c
 10790  003060  341C               	rlcf	i2___ftdiv@f1+1,w,c
 10791  003062  3621               	rlcf	??i2___ftdiv& (0+255),f,c
 10792  003064  E301               	bnc	u404_41
 10793  003066  8022               	bsf	(??i2___ftdiv+1)& (0+255),0,c
 10794  003068                     u404_41:
 10795  003068  5021               	movf	??i2___ftdiv,w,c
 10796  00306A  6E28               	movwf	i2___ftdiv@exp,c
 10797  00306C  5028               	movf	i2___ftdiv@exp,w,c
 10798  00306E  A4D8               	btfss	status,2,c
 10799  003070  D007               	goto	i2l572
 10800  003072  0E00               	movlw	0
 10801  003074  6E1B               	movwf	?i2___ftdiv,c
 10802  003076  0E00               	movlw	0
 10803  003078  6E1C               	movwf	?i2___ftdiv+1,c
 10804  00307A  0E00               	movlw	0
 10805  00307C  6E1D               	movwf	?i2___ftdiv+2,c
 10806  00307E  0012               	return	
 10807  003080                     i2l572:
 10808  003080  C020  F021         	movff	i2___ftdiv@f2+2,??i2___ftdiv
 10809  003084  6A22               	clrf	(??i2___ftdiv+1)& (0+255),c
 10810  003086  6A23               	clrf	(??i2___ftdiv+2)& (0+255),c
 10811  003088  341F               	rlcf	i2___ftdiv@f2+1,w,c
 10812  00308A  3621               	rlcf	??i2___ftdiv& (0+255),f,c
 10813  00308C  E301               	bnc	u406_41
 10814  00308E  8022               	bsf	(??i2___ftdiv+1)& (0+255),0,c
 10815  003090                     u406_41:
 10816  003090  5021               	movf	??i2___ftdiv,w,c
 10817  003092  6E29               	movwf	i2___ftdiv@sign,c
 10818  003094  5029               	movf	i2___ftdiv@sign,w,c
 10819  003096  A4D8               	btfss	status,2,c
 10820  003098  D007               	goto	i2l574
 10821  00309A  0E00               	movlw	0
 10822  00309C  6E1B               	movwf	?i2___ftdiv,c
 10823  00309E  0E00               	movlw	0
 10824  0030A0  6E1C               	movwf	?i2___ftdiv+1,c
 10825  0030A2  0E00               	movlw	0
 10826  0030A4  6E1D               	movwf	?i2___ftdiv+2,c
 10827  0030A6  0012               	return	
 10828  0030A8                     i2l574:
 10829  0030A8  0E00               	movlw	0
 10830  0030AA  6E25               	movwf	i2___ftdiv@f3,c
 10831  0030AC  0E00               	movlw	0
 10832  0030AE  6E26               	movwf	i2___ftdiv@f3+1,c
 10833  0030B0  0E00               	movlw	0
 10834  0030B2  6E27               	movwf	i2___ftdiv@f3+2,c
 10835  0030B4  5029               	movf	i2___ftdiv@sign,w,c
 10836  0030B6  0F89               	addlw	137
 10837  0030B8  5E28               	subwf	i2___ftdiv@exp,f,c
 10838  0030BA  C01D  F029         	movff	i2___ftdiv@f1+2,i2___ftdiv@sign
 10839  0030BE  5020               	movf	i2___ftdiv@f2+2,w,c
 10840  0030C0  1A29               	xorwf	i2___ftdiv@sign,f,c
 10841  0030C2  0E80               	movlw	128
 10842  0030C4  1629               	andwf	i2___ftdiv@sign,f,c
 10843  0030C6  8E1C               	bsf	i2___ftdiv@f1+1,7,c
 10844  0030C8  0EFF               	movlw	255
 10845  0030CA  161B               	andwf	i2___ftdiv@f1,f,c
 10846  0030CC  0EFF               	movlw	255
 10847  0030CE  161C               	andwf	i2___ftdiv@f1+1,f,c
 10848  0030D0  0E00               	movlw	0
 10849  0030D2  161D               	andwf	i2___ftdiv@f1+2,f,c
 10850  0030D4  8E1F               	bsf	i2___ftdiv@f2+1,7,c
 10851  0030D6  0EFF               	movlw	255
 10852  0030D8  161E               	andwf	i2___ftdiv@f2,f,c
 10853  0030DA  0EFF               	movlw	255
 10854  0030DC  161F               	andwf	i2___ftdiv@f2+1,f,c
 10855  0030DE  0E00               	movlw	0
 10856  0030E0  1620               	andwf	i2___ftdiv@f2+2,f,c
 10857  0030E2  0E18               	movlw	24
 10858  0030E4  6E24               	movwf	i2___ftdiv@cntr,c
 10859  0030E6  90D8               	bcf	status,0,c
 10860  0030E8  3625               	rlcf	i2___ftdiv@f3,f,c
 10861  0030EA  3626               	rlcf	i2___ftdiv@f3+1,f,c
 10862  0030EC  3627               	rlcf	i2___ftdiv@f3+2,f,c
 10863  0030EE  501E               	movf	i2___ftdiv@f2,w,c
 10864  0030F0  5C1B               	subwf	i2___ftdiv@f1,w,c
 10865  0030F2  501F               	movf	i2___ftdiv@f2+1,w,c
 10866  0030F4  581C               	subwfb	i2___ftdiv@f1+1,w,c
 10867  0030F6  5020               	movf	i2___ftdiv@f2+2,w,c
 10868  0030F8  581D               	subwfb	i2___ftdiv@f1+2,w,c
 10869  0030FA  A0D8               	btfss	status,0,c
 10870  0030FC  D007               	goto	i2l576
 10871  0030FE  501E               	movf	i2___ftdiv@f2,w,c
 10872  003100  5E1B               	subwf	i2___ftdiv@f1,f,c
 10873  003102  501F               	movf	i2___ftdiv@f2+1,w,c
 10874  003104  5A1C               	subwfb	i2___ftdiv@f1+1,f,c
 10875  003106  5020               	movf	i2___ftdiv@f2+2,w,c
 10876  003108  5A1D               	subwfb	i2___ftdiv@f1+2,f,c
 10877  00310A  8025               	bsf	i2___ftdiv@f3,0,c
 10878  00310C                     i2l576:
 10879  00310C  90D8               	bcf	status,0,c
 10880  00310E  361B               	rlcf	i2___ftdiv@f1,f,c
 10881  003110  361C               	rlcf	i2___ftdiv@f1+1,f,c
 10882  003112  361D               	rlcf	i2___ftdiv@f1+2,f,c
 10883  003114  2E24               	decfsz	i2___ftdiv@cntr,f,c
 10884  003116  D7E7               	goto	i2l575
 10885  003118  C025  F001         	movff	i2___ftdiv@f3,i2___ftpack@arg
 10886  00311C  C026  F002         	movff	i2___ftdiv@f3+1,i2___ftpack@arg+1
 10887  003120  C027  F003         	movff	i2___ftdiv@f3+2,i2___ftpack@arg+2
 10888  003124  C028  F004         	movff	i2___ftdiv@exp,i2___ftpack@exp
 10889  003128  C029  F005         	movff	i2___ftdiv@sign,i2___ftpack@sign
 10890  00312C  EC30  F01A         	call	i2___ftpack	;wreg free
 10891  003130  C001  F01B         	movff	?i2___ftpack,?i2___ftdiv
 10892  003134  C002  F01C         	movff	?i2___ftpack+1,?i2___ftdiv+1
 10893  003138  C003  F01D         	movff	?i2___ftpack+2,?i2___ftdiv+2
 10894  00313C  0012               	return	
 10895  00313E                     __end_ofi2___ftdiv:
 10896                           	opt stack 0
 10897                           pclatu	equ	0xFFB
 10898                           pclath	equ	0xFFA
 10899                           tblptru	equ	0xFF8
 10900                           tblptrh	equ	0xFF7
 10901                           tblptrl	equ	0xFF6
 10902                           tablat	equ	0xFF5
 10903                           prodh	equ	0xFF4
 10904                           prodl	equ	0xFF3
 10905                           intcon	equ	0xFF2
 10906                           postinc0	equ	0xFEE
 10907                           fsr0h	equ	0xFEA
 10908                           fsr0l	equ	0xFE9
 10909                           wreg	equ	0xFE8
 10910                           fsr1h	equ	0xFE2
 10911                           fsr1l	equ	0xFE1
 10912                           indf2	equ	0xFDF
 10913                           postinc2	equ	0xFDE
 10914                           postdec2	equ	0xFDD
 10915                           fsr2h	equ	0xFDA
 10916                           fsr2l	equ	0xFD9
 10917                           status	equ	0xFD8
 10918                           
 10919 ;; *************** function i2___ftpack *****************
 10920 ;; Defined at:
 10921 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 10922 ;; Parameters:    Size  Location     Type
 10923 ;;  arg             3    0[COMRAM] unsigned um
 10924 ;;  exp             1    3[COMRAM] unsigned char 
 10925 ;;  sign            1    4[COMRAM] unsigned char 
 10926 ;; Auto vars:     Size  Location     Type
 10927 ;;		None
 10928 ;; Return value:  Size  Location     Type
 10929 ;;                  3    0[COMRAM] float 
 10930 ;; Registers used:
 10931 ;;		wreg, status,2, status,0
 10932 ;; Tracked objects:
 10933 ;;		On entry : 0/0
 10934 ;;		On exit  : 0/0
 10935 ;;		Unchanged: 0/0
 10936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10937 ;;      Params:         5       0       0       0       0       0       0       0       0
 10938 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10939 ;;      Temps:          3       0       0       0       0       0       0       0       0
 10940 ;;      Totals:         8       0       0       0       0       0       0       0       0
 10941 ;;Total ram usage:        8 bytes
 10942 ;; Hardware stack levels used:    1
 10943 ;; This function calls:
 10944 ;;		Nothing
 10945 ;; This function is called by:
 10946 ;;		i2___ftdiv
 10947 ;;		i2___ftmul
 10948 ;;		i2___lwtoft
 10949 ;; This function uses a non-reentrant model
 10950 ;;
 10951                           
 10952                           	psect	text38
 10953  003460                     __ptext38:
 10954                           	opt stack 0
 10955  003460                     i2___ftpack:
 10956                           	opt stack 23
 10957                           
 10958                           ;incstack = 0
 10959  003460  5004               	movf	i2___ftpack@exp,w,c
 10960  003462  B4D8               	btfsc	status,2,c
 10961  003464  D005               	goto	i2u332_40
 10962  003466  5001               	movf	i2___ftpack@arg,w,c
 10963  003468  1002               	iorwf	i2___ftpack@arg+1,w,c
 10964  00346A  1003               	iorwf	i2___ftpack@arg+2,w,c
 10965  00346C  A4D8               	btfss	status,2,c
 10966  00346E  D00C               	goto	i2l508
 10967  003470                     i2u332_40:
 10968  003470  0E00               	movlw	0
 10969  003472  6E01               	movwf	?i2___ftpack,c
 10970  003474  0E00               	movlw	0
 10971  003476  6E02               	movwf	?i2___ftpack+1,c
 10972  003478  0E00               	movlw	0
 10973  00347A  6E03               	movwf	?i2___ftpack+2,c
 10974  00347C  0012               	return	
 10975  00347E  2A04               	incf	i2___ftpack@exp,f,c
 10976  003480  90D8               	bcf	status,0,c
 10977  003482  3203               	rrcf	i2___ftpack@arg+2,f,c
 10978  003484  3202               	rrcf	i2___ftpack@arg+1,f,c
 10979  003486  3201               	rrcf	i2___ftpack@arg,f,c
 10980  003488                     i2l508:
 10981  003488  0E00               	movlw	0
 10982  00348A  1401               	andwf	i2___ftpack@arg,w,c
 10983  00348C  6E06               	movwf	??i2___ftpack& (0+255),c
 10984  00348E  0E00               	movlw	0
 10985  003490  1402               	andwf	i2___ftpack@arg+1,w,c
 10986  003492  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 10987  003494  0EFE               	movlw	254
 10988  003496  1403               	andwf	i2___ftpack@arg+2,w,c
 10989  003498  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 10990  00349A  5006               	movf	??i2___ftpack,w,c
 10991  00349C  1007               	iorwf	??i2___ftpack+1,w,c
 10992  00349E  1008               	iorwf	??i2___ftpack+2,w,c
 10993  0034A0  B4D8               	btfsc	status,2,c
 10994  0034A2  D00C               	goto	i2l511
 10995  0034A4  D7EC               	goto	i2l509
 10996  0034A6  2A04               	incf	i2___ftpack@exp,f,c
 10997  0034A8  0E01               	movlw	1
 10998  0034AA  2601               	addwf	i2___ftpack@arg,f,c
 10999  0034AC  0E00               	movlw	0
 11000  0034AE  2202               	addwfc	i2___ftpack@arg+1,f,c
 11001  0034B0  0E00               	movlw	0
 11002  0034B2  2203               	addwfc	i2___ftpack@arg+2,f,c
 11003  0034B4  90D8               	bcf	status,0,c
 11004  0034B6  3203               	rrcf	i2___ftpack@arg+2,f,c
 11005  0034B8  3202               	rrcf	i2___ftpack@arg+1,f,c
 11006  0034BA  3201               	rrcf	i2___ftpack@arg,f,c
 11007  0034BC                     i2l511:
 11008  0034BC  0E00               	movlw	0
 11009  0034BE  1401               	andwf	i2___ftpack@arg,w,c
 11010  0034C0  6E06               	movwf	??i2___ftpack& (0+255),c
 11011  0034C2  0E00               	movlw	0
 11012  0034C4  1402               	andwf	i2___ftpack@arg+1,w,c
 11013  0034C6  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 11014  0034C8  0EFF               	movlw	255
 11015  0034CA  1403               	andwf	i2___ftpack@arg+2,w,c
 11016  0034CC  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 11017  0034CE  5006               	movf	??i2___ftpack,w,c
 11018  0034D0  1007               	iorwf	??i2___ftpack+1,w,c
 11019  0034D2  1008               	iorwf	??i2___ftpack+2,w,c
 11020  0034D4  B4D8               	btfsc	status,2,c
 11021  0034D6  D006               	goto	i2l514
 11022  0034D8  D7E6               	goto	i2l512
 11023  0034DA  0604               	decf	i2___ftpack@exp,f,c
 11024  0034DC  90D8               	bcf	status,0,c
 11025  0034DE  3601               	rlcf	i2___ftpack@arg,f,c
 11026  0034E0  3602               	rlcf	i2___ftpack@arg+1,f,c
 11027  0034E2  3603               	rlcf	i2___ftpack@arg+2,f,c
 11028  0034E4                     i2l514:
 11029  0034E4  BE02               	btfsc	i2___ftpack@arg+1,7,c
 11030  0034E6  D003               	goto	i2u336_40
 11031  0034E8  0E02               	movlw	2
 11032  0034EA  6004               	cpfslt	i2___ftpack@exp,c
 11033  0034EC  D7F6               	goto	i2l515
 11034  0034EE                     i2u336_40:
 11035  0034EE  A004               	btfss	i2___ftpack@exp,0,c
 11036  0034F0  9E02               	bcf	i2___ftpack@arg+1,7,c
 11037  0034F2  90D8               	bcf	status,0,c
 11038  0034F4  3204               	rrcf	i2___ftpack@exp,f,c
 11039  0034F6  5004               	movf	i2___ftpack@exp,w,c
 11040  0034F8  1203               	iorwf	i2___ftpack@arg+2,f,c
 11041  0034FA  5005               	movf	i2___ftpack@sign,w,c
 11042  0034FC  A4D8               	btfss	status,2,c
 11043  0034FE  8E03               	bsf	i2___ftpack@arg+2,7,c
 11044  003500  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
 11045  003504  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 11046  003508  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 11047  00350C  0012               	return	
 11048  00350E                     __end_ofi2___ftpack:
 11049                           	opt stack 0
 11050                           pclatu	equ	0xFFB
 11051                           pclath	equ	0xFFA
 11052                           tblptru	equ	0xFF8
 11053                           tblptrh	equ	0xFF7
 11054                           tblptrl	equ	0xFF6
 11055                           tablat	equ	0xFF5
 11056                           prodh	equ	0xFF4
 11057                           prodl	equ	0xFF3
 11058                           intcon	equ	0xFF2
 11059                           postinc0	equ	0xFEE
 11060                           fsr0h	equ	0xFEA
 11061                           fsr0l	equ	0xFE9
 11062                           wreg	equ	0xFE8
 11063                           fsr1h	equ	0xFE2
 11064                           fsr1l	equ	0xFE1
 11065                           indf2	equ	0xFDF
 11066                           postinc2	equ	0xFDE
 11067                           postdec2	equ	0xFDD
 11068                           fsr2h	equ	0xFDA
 11069                           fsr2l	equ	0xFD9
 11070                           status	equ	0xFD8
 11071                           pclatu	equ	0xFFB
 11072                           pclath	equ	0xFFA
 11073                           tblptru	equ	0xFF8
 11074                           tblptrh	equ	0xFF7
 11075                           tblptrl	equ	0xFF6
 11076                           tablat	equ	0xFF5
 11077                           prodh	equ	0xFF4
 11078                           prodl	equ	0xFF3
 11079                           intcon	equ	0xFF2
 11080                           postinc0	equ	0xFEE
 11081                           fsr0h	equ	0xFEA
 11082                           fsr0l	equ	0xFE9
 11083                           wreg	equ	0xFE8
 11084                           fsr1h	equ	0xFE2
 11085                           fsr1l	equ	0xFE1
 11086                           indf2	equ	0xFDF
 11087                           postinc2	equ	0xFDE
 11088                           postdec2	equ	0xFDD
 11089                           fsr2h	equ	0xFDA
 11090                           fsr2l	equ	0xFD9
 11091                           status	equ	0xFD8
 11092                           
 11093                           	psect	rparam
 11094  0000                     pclatu	equ	0xFFB
 11095                           pclath	equ	0xFFA
 11096                           tblptru	equ	0xFF8
 11097                           tblptrh	equ	0xFF7
 11098                           tblptrl	equ	0xFF6
 11099                           tablat	equ	0xFF5
 11100                           prodh	equ	0xFF4
 11101                           prodl	equ	0xFF3
 11102                           intcon	equ	0xFF2
 11103                           postinc0	equ	0xFEE
 11104                           fsr0h	equ	0xFEA
 11105                           fsr0l	equ	0xFE9
 11106                           wreg	equ	0xFE8
 11107                           fsr1h	equ	0xFE2
 11108                           fsr1l	equ	0xFE1
 11109                           indf2	equ	0xFDF
 11110                           postinc2	equ	0xFDE
 11111                           postdec2	equ	0xFDD
 11112                           fsr2h	equ	0xFDA
 11113                           fsr2l	equ	0xFD9
 11114                           status	equ	0xFD8
 11115                           
 11116                           	psect	temp
 11117  000055                     btemp:
 11118                           	opt stack 0
 11119  000055                     	ds	1
 11120  0000                     int$flags	set	btemp
 11121  0000                     wtemp6	set	btemp+1
 11122                           pclatu	equ	0xFFB
 11123                           pclath	equ	0xFFA
 11124                           tblptru	equ	0xFF8
 11125                           tblptrh	equ	0xFF7
 11126                           tblptrl	equ	0xFF6
 11127                           tablat	equ	0xFF5
 11128                           prodh	equ	0xFF4
 11129                           prodl	equ	0xFF3
 11130                           intcon	equ	0xFF2
 11131                           postinc0	equ	0xFEE
 11132                           fsr0h	equ	0xFEA
 11133                           fsr0l	equ	0xFE9
 11134                           wreg	equ	0xFE8
 11135                           fsr1h	equ	0xFE2
 11136                           fsr1l	equ	0xFE1
 11137                           indf2	equ	0xFDF
 11138                           postinc2	equ	0xFDE
 11139                           postdec2	equ	0xFDD
 11140                           fsr2h	equ	0xFDA
 11141                           fsr2l	equ	0xFD9
 11142                           status	equ	0xFD8


Data Sizes:
    Strings     63
    Constant    145
    Data        0
    BSS         67
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     59      84
    BANK0           160    121     123
    BANK1           256    214     254
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> floor@expon(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 15
		 -> sin@coeff_a(CODE[15]), sin@coeff_b(CODE[12]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_7(CODE[9]), STR_6(CODE[9]), STR_5(CODE[9]), STR_3(CODE[8]), 
		 -> STR_2(CODE[15]), STR_1(CODE[13]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> buffer3(BANK1[20]), buffer2(BANK1[20]), main@buffer1(BANK1[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Out2@buffer	PTR unsigned char  size(2) Largest target is 20
		 -> buffer3(BANK1[20]), STR_4(CODE[9]), buffer2(BANK1[20]), main@buffer1(BANK1[16]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _comparar in COMRAM

    _comparar->i2___ftdiv
    i2___lwtoft->i2___ftpack
    i2___ftmul->i2___lwtoft
    i2___ftdiv->i2___ftmul

Critical Paths under _main in BANK0

    _main->_sprintf
    _sqrt->___ftdiv
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    _cos->_sin
    _sin->___ftdiv
    _floor->___altoft
    ___fttol->_scale
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___ftsub->_floor
    ___ftadd->_fround
    ___ftdiv->___ftsub
    ___lwtoft->___ftpack
    _Lcd_Out2->_Lcd_Chr_CP
    _Lcd_Out2->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd

Critical Paths under _comparar in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _comparar in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _comparar in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _comparar in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _comparar in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _comparar in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _comparar in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _comparar in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               216   216      0  165652
                                            119 BANK0      2     2      0
                                              0 BANK1    214   214      0
                            _Lcd_Cmd
                           _Lcd_Init
                           _Lcd_Out2
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                           ___lltoft
                           ___lwtoft
                             ___wmul
                     _configstandard
                                _cos
                            _sprintf
                               _sqrt
 ---------------------------------------------------------------------------------
 (1) _sqrt                                                19    16      3   14996
                                             96 BANK0     19    16      3
                            ___ftdiv (ARG)
                             ___ftge
                            ___ftmul
                            ___ftsub
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             44    37      7   63840
                                             81 BANK0     38    31      7
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                7     4      3   14630
                                             35 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              10     7      3   14432
                                             35 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1664
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1820
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     455
                                              0 BANK0     15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     598
                                              0 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2765
                                              8 BANK0      9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     767
                                             13 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     618
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _cos                                                  6     3      3   58279
                                            109 BANK0      6     3      3
                            ___ftadd
                             ___ftge
                                _sin
 ---------------------------------------------------------------------------------
 (2) _sin                                                 13    10      3   51709
                                             96 BANK0     13    10      3
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                          _eval_poly
                              _floor
 ---------------------------------------------------------------------------------
 (3) _floor                                                8     5      3   10383
                                             67 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                7     2      5     360
                                              0 BANK0      7     2      5
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     556
                                             42 BANK0     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6    1352
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    2758
                                             57 BANK0     10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           12     5      7   16367
                                             57 BANK0     12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    3351
                                             14 BANK0      6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    7352
                                             20 BANK0     15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    5831
                                             75 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
                              _floor (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    5030
                                             45 BANK0     12     6      6
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                             ___wmul (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     349
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             15     9      6    4418
                                             81 BANK0     15     9      6
                            ___ftadd (ARG)
                             ___ftge (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                            ___ftsub (ARG)
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (1) _configstandard                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             3     0      3    2692
                                              8 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2544
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _Lcd_Out2                                             5     2      3    1597
                                              3 BANK0      5     2      3
                         _Lcd_Chr_CP
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Chr_CP                                           3     3      0     176
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     314
                                              3 BANK0      2     2      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     176
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _comparar                                            18    18      0    2153
                                             41 COMRAM    18    18      0
                          i2___ftdiv
                          i2___ftmul
                         i2___lwtoft
 ---------------------------------------------------------------------------------
 (7) i2___lwtoft                                           3     0      3     513
                                              8 COMRAM     3     0      3
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (7) i2___ftmul                                           15     9      6     843
                                             11 COMRAM    15     9      6
                         i2___ftpack
                         i2___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (7) i2___ftdiv                                           15     9      6     797
                                             26 COMRAM    15     9      6
                          i2___ftmul (ARG)
                         i2___ftpack
                         i2___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (8) i2___ftpack                                           8     3      5     465
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Cmd
   _Lcd_Init
     _Lcd_Cmd
   _Lcd_Out2
     _Lcd_Chr_CP
     _Lcd_Cmd
   ___ftadd
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   ___ftdiv
     ___ftadd (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftpack (ARG)
     ___ftpack (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
       _floor (ARG)
         ___altoft
           ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _frexp
     ___lltoft (ARG)
       ___ftpack
     ___lwtoft (ARG)
       ___ftpack
     _eval_poly (ARG)
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___ftpack (ARG)
     ___lltoft (ARG)
       ___ftpack
     ___lwtoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___lltoft
     ___ftpack
   ___lwtoft
     ___ftpack
   ___wmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
   _configstandard
   _cos
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     _sin
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
           _floor (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftadd
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftge
             ___fttol
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _frexp
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _eval_poly (ARG)
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
         _floor (ARG)
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _frexp
       _eval_poly
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _floor
         ___altoft
           ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _frexp
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
       _floor (ARG)
         ___altoft
           ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _frexp
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _sqrt
     ___ftdiv (ARG)
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
         _floor (ARG)
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _frexp
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _eval_poly (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
       _floor (ARG)
         ___altoft
           ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _frexp

 _comparar (ROOT)
   i2___ftdiv
     i2___ftmul (ARG)
       i2___ftpack
       i2___lwtoft (ARG)
         i2___ftpack
     i2___ftpack (ARG)
     i2___lwtoft (ARG)
       i2___ftpack
   i2___ftmul
     i2___ftpack
     i2___lwtoft (ARG)
       i2___ftpack
   i2___lwtoft
     i2___ftpack

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     D6      FE       7       99.2%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     79      7B       5       76.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3B      54       1       89.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1CD      20        0.0%
DATA                 0      0     1CD       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri May 18 11:28:05 2018

           ___altoft@exp 00A1            ___altoft@sign 00A2                       l60 2612  
                     l80 354C                       l81 351C                       l82 3522  
                     l83 3528                       l85 357E                       l86 3554  
                     l78 3530                       l79 3514             ___awdiv@sign 006B  
    ___wmul@multiplicand 0070              __CFG_BORV$3 000000               i2___ftpack 3460  
           __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000  
           __CFG_CP3$OFF 000000             ___ftadd@exp1 0098             ___ftadd@exp2 0097  
           ___ftadd@sign 0096                      l200 0BD6                      l120 1680  
                    l201 0C14                      l202 0CD8                      l122 16B0  
                    l211 0D3E                      l123 16C4                      l220 0DEE  
                    l116 1592                      l205 0C82                      l125 1864  
                    l117 140E                      l230 0F0E                      l126 17AA  
                    l231 0EF8                      l223 0E2A                      l215 0DAA  
                    l119 1784                      l152 1EC2                      l240 1098  
                    l224 0E14                      l216 0DC4                      l233 0F32  
                    l129 189E                      l162 1B2E                      l250 11A4  
                    l242 10F2                      l234 0F36                      l170 08FC  
                    l155 1F98                      l163 1C8C                      l243 110A  
                    l235 0F58                      l227 0EEE                      l219 0E04  
                    l252 11C6                      l236 108C                      l228 0E58  
                    l180 0A1A                      l172 0916                      l165 1D44  
                    l253 11CE                      l237 0FA8                      l181 0A04  
                    l173 090E                      l158 1B54                      l254 11F2  
                    l182 09CA                      l511 340E                      l159 1A76  
                    l255 11FA                      l247 1162                      l239 10AE  
                    l512 33F8                      l256 1242                      l441 367C  
                    l257 1222                      l249 1182                      l193 10B8  
                    l185 0A2C                      l169 08E0                      l514 3436  
                    l610 2E32                      l442 3674                      l266 1314  
                    l194 0A72                      l178 0946                      l515 342C  
                    l611 2E42                      l355 37EE                      l451 384E  
                    l267 128A                      l195 0AB4                      l508 33DA  
                    l604 2DB0                      l356 37E2                      l460 38A0  
                    l452 385A                      l188 0A28                      l509 33D0  
                    l621 39CC                      l445 369C                      l197 0B48  
                    l189 0A5E                      l606 2DD8                      l446 36A6  
                    l438 364E                      l454 3870                      l198 0BB0  
                    l615 3A62                      l543 22C2                      l607 2E0A  
                    l447 36B4                      l439 365E                      l455 3868  
                    l608 2E1A                      l472 3368                      l480 2B0C  
                    l640 3AD4                      l553 231E                      l633 2D58  
                    l625 2CBC                      l562 235C                      l554 2314  
                    l634 2D4C                      l482 2B4A                      l458 3888  
                    l563 2352                      l539 2298                      l627 2D34  
                    l483 2B3A                      l459 3892                      l572 2F9A  
                    l548 2328                      l636 2D74                      l628 2D24  
                    l476 2A7C                      l580 26F4                      l565 2380  
                    l574 2FC2                      l566 239C                      l670 3722  
                    l478 2A9A                      l582 2720                      l575 3000  
                    l567 23CC                      l671 3730                      l479 2ADC  
                    l583 275A                      l576 3026                      l912 32E6  
                    l920 317E                      l680 38F2                      l488 2B6E  
                    l592 27E2                      l584 2782                      l913 3266  
                    l921 3170                      l681 3900                      l489 2B62  
                    l593 27D6                      l666 36EE                      l586 27BE  
                    l923 3198                      l755 2006                      l667 36E2  
                    l587 27AE                      l924 3214                      l756 20EC  
                    l676 38CA                      l597 35D8                      l757 2148  
                    l677 38BE                      l598 3608                      l758 2236  
                    l687 3926                      l688 391A                      l929 3760  
                    l884 2430                      l885 2422               i2___lwtoft 3A96  
                    l887 2480             __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000  
                    _cos 32FE          ?_configstandard 0001                      _sin 1FDA  
           ___awmod@sign 0065              main@Voltage 01B4                      prod 000FF3  
                    wreg 000FE8             __CFG_LVP$OFF 000000              main@buffer1 019B  
           ___ftdiv@cntr 00BA             ___ftdiv@sign 00BF             __CFG_WDT$OFF 000000  
                   l4006 15A0                     l4042 179A                     l4052 17FE  
                   l2544 3634                     l3520 0C14                     ?_cos 00CD  
                   l3608 0EF8                     l3528 0C5C                     l3740 128A  
                   l3548 0D42                     l3670 110E                     l3744 1310  
                   l3584 0E14                     l3576 0DEE                     ?_sin 00C0  
                   STR_1 08A1                     STR_2 0892                     STR_3 08C9  
                   STR_4 08C0                     STR_5 08B7                     STR_6 08B7  
                   STR_7 08AE                     u2140 33C2                     u2300 22B4  
                   u3100 27E8                     u3021 26D8                     u2231 2256  
                   u2400 2364                     u3200 20E8                     u4000 133E  
                   u2241 226A                     u3041 2704                     u2330 22F2  
                   u3210 20EA                     u2180 3440                     u2270 228A  
                   u2441 2D98                     u3410 3574                     u2370 2330  
                   u3250 36F2                     u3170 2B74                     u2531 2CA0  
                   u3420 359E                     u2620 3788                     u2461 2DC0  
                   u2550 2CDA                     u4230 17FE                     u2631 2F82  
                   u3280 38CE                     u2720 3680                     u3417 356A  
                   u3610 0C5C                     u3530 0AEC                     u4307 2880  
                   u3427 3594                     u2651 2FAA                     u2555 2CD2  
                   u2628 378C                     u3460 09A6                     u4317 288A  
                   u2590 2D5E                     u3710 0E38                     u4407 25EE  
                   u4327 2904                     u3535 0AE2                     u2840 318A  
                   u4417 2600                     u4337 290E                     u2905 280C  
                   u4257 1372                     u3650 0D7A                     u3570 0BE6  
                   u4507 2A50                     u4427 262C                     u4347 2916  
                   u2915 2826                     u4267 1544                     u2780 3874  
                   u3740 0F1C                     u3580 0C26                     u4437 2644  
                   u4357 2922                     u2925 284A                     u4277 1670  
                   u3750 0F2C                     u4447 2672                     u4367 25A6  
                   u4287 16B2                     u3840 1146                     u4457 268A  
                   u4377 25B8                     u4297 191C                     u4467 29B4  
                   u2875 2940                     u4387 25CA                     u4477 29BE  
                   u2885 295A                     u4397 25DC                     u4487 2A38  
                   u2895 297E                     u3960 124A                     u4497 2A42  
                   u3970 1268                     u3990 1324                     _adc1 0053  
                   _main 134C             ___ftpack@arg 0060                     cos@f 00CD  
           ___ftpack@exp 0063                     fsr0h 000FEA                     fsr1h 000FE2  
                   fsr2h 000FDA                     fsr0l 000FE9                     indf2 000FDF  
                   fsr1l 000FE1                     fsr2l 000FD9                     btemp 0055  
                   _sqrt 23F2                     sin@f 00C0                     sin@y 00C3  
                   prodh 000FF4                     prodl 000FF3                     start 000E  
          __CFG_IESO$OFF 000000             i2___ftdiv@f1 001B             i2___ftdiv@f2 001E  
           i2___ftdiv@f3 0025             _sprintf$1430 00BE          __end_of_Lcd_Cmd 2A5C  
          __CFG_MCLRE$ON 000000             ___ftmul@cntr 0081             i2___ftmul@f1 000C  
           i2___ftmul@f2 000F             ___param_bank 000000             ___ftmul@sign 0082  
             _Lcd_Chr_CP 27FA             ___fttol@exp1 0098                    ??_cos 00D0  
           ___fttol@lval 0094                    ??_sin 00C3           Lcd_Out2@buffer 0064  
          __CFG_PLLDIV$2 000000           __CFG_CCP2MX$ON 000000                    ?_main 0001  
        __end_of___awdiv 36BE          __end_of___ftadd 23F2                    _CCPR1 000FBE  
        __end_of___awmod 38AA          __end_of___ftdiv 3058          __end_of___ftneg 3A70  
           i2___lwtoft@c 0009          __end_of___lldiv 3742                    ?_sqrt 00C0  
        __end_of___ftmul 2E7C          ___awdiv@divisor 0068          __end_of___llmod 3912  
        __end_of___ftsub 39F6          __end_of___fttol 2D86                    i2l109 2C42  
                  i2l511 34BC                    i2l512 34A6                    i2l514 34E4  
                  i2l610 2F26                    i2l515 34DA                    i2l611 2F36  
                  i2l508 3488                    i2l604 2EA4                    i2l509 347E  
                  i2l606 2ECC                    i2l607 2EFE                    i2l608 2F0E  
                  i2l572 3080                    i2l574 30A8                    i2l575 30E6  
                  i2l576 310C          ___awdiv@counter 006A       __end_ofsin@coeff_a 0886  
     __end_ofsin@coeff_b 0892            __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000  
          __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000  
           ___lltoft@exp 0070           __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000  
         __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000  
          __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000  
         __CFG_EBTRB$OFF 000000          __end_of_dpowers 0829                    _floor 313E  
                  _frexp 3742                    _errno 00D9                    _scale 1932  
        __end_of_isdigit 3ADC             main@numTicks 0199            ___ftpack@sign 0064  
                  main@i 01D4     main@potenciaAparente 01B7                    pclath 000FFA  
                  sin@x2 00C9                    tablat 000FF5                    sqrt@a 00C0  
                  sqrt@i 00CC                    sqrt@q 00CD                    sqrt@x 00D0  
                  sqrt@z 00C9                    status 000FD8                    wtemp6 0056  
        __end_of_sprintf 134C           __CFG_ICPRT$OFF 000000            i2___ftdiv@exp 0028  
         __CFG_PBADEN$ON 000000       __size_ofi2___ftdiv 00E6       __size_ofi2___ftmul 00F4  
       __end_of_Lcd_Init 26C6         __end_of_Lcd_Out2 35A6          __initialization 39F6  
          main@calculoFP 01CD             __end_of_main 1932            i2___ftmul@exp 0015  
           __end_of_sqrt 2586              ?i2___ftpack 0001                   ??_main 00D7  
          ___fttol@sign1 0093                   ??_sqrt 00C3              ?i2___lwtoft 0009  
          __activetblptr 000002     __size_of__tdiv_to_l_ 0134                   _ADCON1 000FC1  
                 ?_floor 00A3                   _CCP1IF 007CF2                   ?_frexp 0060  
       __end_of___altoft 3838         ___llmod@dividend 006D                   ?_scale 0083  
                 _ADRESH 000FC4                   _ADRESL 000FC3         ___awdiv@dividend 0066  
       __end_of___ftpack 3460         __end_of___lltoft 3970                   u411_41 2EB4  
                 u404_41 3068                   u406_41 3090                   u409_41 2E8C  
       __end_of___lwtoft 3A96                ??_Lcd_Cmd 0060           __CFG_XINST$OFF 000000  
       __end_of__powers_ 0850         __end_of_comparar 2C8E                   ___ftge 35A6  
            ?_Lcd_Chr_CP 0001                   ___wmul 3A22                ??___awdiv 006A  
              ??___ftadd 0093           __CFG_STVREN$ON 000000                ??___awmod 0064  
              ??___ftdiv 00B7                ??___ftneg 0063                ??___lldiv 0068  
              ??___ftmul 007A                ??___llmod 0075                ??___ftsub 00B1  
              ??___fttol 008E                   _fround 1D6A                   clear_0 39FC  
                 clear_1 3A0E         ___awdiv@quotient 006C          ___awmod@divisor 0062  
        ___awmod@counter 0064                   floor@i 00A6                   floor@x 00A3  
  ___ftmul@f3_as_product 007E                ??_isdigit 0060        __end_ofi2___ftdiv 313E  
                 sin@sgn 00CC        __end_ofi2___ftmul 2F70             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
                 sqrt@og 00C6                ??_sprintf 00B8           i2___ftdiv@cntr 0024  
             __accesstop 0060  __end_of__initialization 3A14               ___altoft@c 0099  
         i2___ftdiv@sign 0029               ___ftadd@f1 008D               ___ftadd@f2 0090  
    __size_ofi2___ftpack 00AE               ___ftge@ff1 0060               ___ftge@ff2 0063  
           eval_poly@res 00A2            ___rparam_used 000001               ___ftdiv@f1 00B1  
             ___ftdiv@f2 00B4               ___ftdiv@f3 00BB      __size_ofi2___lwtoft 0024  
             ___ftneg@f1 0060           i2___ftpack@arg 0001           i2___ftpack@exp 0004  
             ___ftmul@f1 0074               ___ftmul@f2 0077               ___ftsub@f1 00AB  
             ___ftsub@f2 00AE               ___fttol@f1 008A           __pcstackCOMRAM 0001  
             ___lltoft@c 0068            __end_of_floor 3222            __end_of_frexp 37BE  
         i2___ftmul@cntr 0019            __end_of_scale 1D6A           i2___ftmul@sign 001A  
       ??_configstandard 0060               ___lwtoft@c 0068               __div_to_l_ 2A5C  
              ?_Lcd_Init 0001                ?_Lcd_Out2 0063          __div_to_l_@exp1 006B  
                ??_floor 00A6          __div_to_l_@cntr 006A                  ??_frexp 0065  
                ??_scale 0086          __div_to_l_@quot 0066             sprintf@width 00CF  
    __size_of_Lcd_Chr_CP 0134               __pbssBANK0 00D9               __pbssBANK1 01D6  
     __size_of_eval_poly 00DC            __div_to_l_@f1 0060            __div_to_l_@f2 0063  
                ?___ftge 0060                  ?___wmul 006E                ?___altoft 0099  
                ?_fround 0083                ?___ftpack 0060                ?___lltoft 0068  
              ?___lwtoft 0068               ??_Lcd_Init 0063               ??_Lcd_Out2 0066  
              ?_comparar 0001       main@FactorPotencia 01AE          __CFG_VREGEN$OFF 000000  
                _Lcd_Cmd 292E        __end_of__npowers_ 0877                  __Hparam 0000  
             _scale$1429 0086     main@numCiclosMuestro 01CA                  __Lparam 0000  
        __size_of___ftge 0092                  ___awdiv 3638                  ___ftadd 2244  
                ___awmod 3838                  ___ftdiv 2F70                  ___ftneg 3A4A  
                ___lldiv 36BE          __size_of___wmul 0028                  ___ftmul 2D86  
                ___llmod 38AA                  ___ftsub 39B4                  ___fttol 2C8E  
           __psmallconst 0800               ??___altoft 009D                  __pcinit 39F6  
           ??i2___ftpack 0006               ??___ftpack 0065        __end_of_eval_poly 32FE  
        __size_of_fround 0270  i2___ftmul@f3_as_product 0016                  __ramtop 0800  
             ??___lltoft 006C                  __ptext0 134C                  __ptext1 23F2  
                __ptext2 08D2                  __ptext3 1932                  __ptext4 3ABA  
                __ptext5 1D6A                  __ptext6 3838                  __ptext7 3638  
                __ptext8 26C6                  __ptext9 2A5C                  _buffer1 003C  
                _buffer2 01EA                  _buffer3 01D6             ??i2___lwtoft 000C  
             ??___lwtoft 006B                _T1CONbits 000FCD              ?__div_to_l_ 0060  
                _dpowers 0801             __size_of_cos 00B2                  _isdigit 3ABA  
           __size_of_sin 026A         ___awmod@dividend 0060                  _sprintf 08D2  
                _voltaje 0050           __pintcode_body 2B86               ??_comparar 002A  
   end_of_initialization 3A14            __Lmediumconst 0000                  int_func 2B86  
     __end_ofi2___ftpack 350E          ___lldiv@divisor 0064       __end_ofi2___lwtoft 3ABA  
        ___lldiv@counter 006C             ??_Lcd_Chr_CP 0060                Lcd_Out2@x 0063  
              Lcd_Out2@y 0066                  postdec2 000FDD                  postinc0 000FEE  
                postinc2 000FDE           __tdiv_to_l_@f1 0060           __tdiv_to_l_@f2 0063  
          ??__tdiv_to_l_ 0066                _PORTBbits 000F81                _PORTDbits 000F83  
             main@FPprom 0100                _TRISAbits 000F92                _TRISBbits 000F93  
              _TRISDbits 000F95                i2___ftdiv 3058                i2___ftmul 2E7C  
     __end_of_Lcd_Chr_CP 292E              _CCP1CONbits 000FBD              ___ftdiv@exp 00BE  
        i2___ftpack@sign 0005      __size_of__div_to_l_ 012A               main@sumIns 01BE  
            ___ftmul@exp 007D           __end_of___ftge 3638           __end_of___wmul 3A4A  
       main@fppromtotal2 01CE           __end_of_fround 1FDA               floor@expon 00A9  
    start_initialization 39F6               eval_poly@d 009C               eval_poly@n 009E  
             eval_poly@x 0099      __end_of__tdiv_to_l_ 27FA              __end_of_cos 33B0  
            __end_of_sin 2244               ?i2___ftdiv 001B               ?i2___ftmul 000C  
      __size_of_Lcd_Init 0140        __size_of_Lcd_Out2 0098               frexp@value 0060  
        ___llmod@divisor 0071          ___llmod@counter 0075                 ??___ftge 0066  
               ??___wmul 0072         __CFG_LPT1OSC$OFF 000000                 ??_fround 0086  
          sprintf@tmpval 00C3        __size_of___altoft 007A               fround@prec 008C  
      __size_of___ftpack 00B0        __size_of___lltoft 005E              __pbssCOMRAM 003C  
      __size_of___lwtoft 0026            __pcstackBANK0 0060            __pcstackBANK1 0100  
           _isdigit$1015 0061                 ?_Lcd_Cmd 0001              sprintf@flag 00CD  
      __size_of_comparar 2C86              sprintf@fval 00D1               sin@coeff_a 0877  
             sin@coeff_b 0886              sprintf@prec 00D4                _main$1426 01C7  
              __pintcode 0008                 ?___awdiv 0066                 ?___ftadd 008D  
               ?___awmod 0060                 ?___ftdiv 00B1                 ?___ftneg 0060  
               ?___lldiv 0060                 ?___ftmul 0074                 ?___llmod 006D  
               ?___ftsub 00AB                __npowers_ 0850                 ?___fttol 008A  
            __tdiv_to_l_ 26C6             ??__div_to_l_ 0066              __smallconst 0800  
               ?_isdigit 0001                _eval_poly 3222    main@factorPotenciaNum 01B1  
__size_of_configstandard 0044                 ?_sprintf 00B1           __size_of_floor 00E4  
            ??i2___ftdiv 0021           __size_of_frexp 007C              ??i2___ftmul 0012  
         __size_of_scale 0438           ___wmul@product 0072                 i2u332_40 3470  
               i2u336_40 34EE                 _PIR1bits 000F9E       __end_of__div_to_l_ 2B86  
       __CFG_WDTPS$32768 000000         main@PotenciaReal 01C1             Lcd_Init@data 0064  
             _ADCON0bits 000FC2               _ADCON2bits 000FC0        ___wmul@multiplier 006E  
              main@delay 01BA               ?_eval_poly 0099             Lcd_Out2@data 0067  
               _Lcd_Init 2586                 _Lcd_Out2 350E          main@fppromtotal 01C4  
       __size_of_Lcd_Cmd 012E                frexp@eptr 0063                 __Hrparam 0000  
               __Lrparam 0000         __size_of___awdiv 0086         __size_of___ftadd 01AE  
       __size_of___awmod 0072         __size_of___ftdiv 00E8         __size_of___ftneg 0026  
       __size_of___lldiv 0084                 ___altoft 37BE         __size_of___ftmul 00F6  
               _cos$1431 00D0         __size_of___llmod 0068         __size_of___ftsub 0042  
       __size_of___fttol 00F8                 ___ftpack 33B0              _fround$1427 0089  
            _fround$1428 0086                 ___lltoft 3912                 ___lwtoft 3A70  
             sprintf@exp 00CB               sprintf@val 00C7         __size_of_isdigit 0022  
         Lcd_Chr_CP@data 0062                 __ptext10 3912                 __ptext11 38AA  
               __ptext20 3222                 __ptext12 36BE                 __ptext21 3A22  
               __ptext13 32FE                 __ptext30 350E                 __ptext22 2D86  
               __ptext14 1FDA                 __ptext31 27FA                 __ptext23 39B4  
               __ptext15 313E                 __ptext32 2586                 __ptext24 2244  
               __ptext16 3742                 __ptext33 292E                 __ptext25 3A4A  
               __ptext17 2C8E                 __ptext26 2F70                 __ptext18 35A6  
               __ptext35 3A96                 __ptext27 3970                 __ptext19 37BE  
               __ptext36 2E7C                 __ptext28 3A70                 __ptext37 3058  
               __ptext29 33B0                 __ptext38 3460                 _sin$1432 00C6  
               __powers_ 0829                 _comparar 0008         __size_of_sprintf 0A7A  
            Lcd_Cmd@data 0062            __size_of_main 05E6            __size_of_sqrt 0194  
               int$flags 0055                 main@Amps 01D1                 main@Irms 01AB  
               main@loop 01CC    __CFG_CPUDIV$OSC1_PLL2 000000               _INTCONbits 000FF2  
            ??_eval_poly 00A0           _configstandard 3970                 isdigit@c 0062  
               scale@scl 0089                 intlevel2 0000                sprintf@ap 00C1  
       __tdiv_to_l_@exp1 006E                sprintf@sp 00B1         __tdiv_to_l_@cntr 006D  
       __tdiv_to_l_@quot 0069         ___lldiv@dividend 0060             ?__tdiv_to_l_ 0060  
               sprintf@c 00D6                 sprintf@f 00B3   __end_of_configstandard 39B4  
       ___lldiv@quotient 0068       __CFG_FOSC$HSPLL_HS 000000  
