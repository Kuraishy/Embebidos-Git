

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri May 18 11:06:36 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    54                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    55                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    56  0000                     
    57                           ; Version 1.45
    58                           ; Generated 16/11/2017 GMT
    59                           ; 
    60                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    61                           ; All rights reserved.
    62                           ; 
    63                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    64                           ; 
    65                           ; Redistribution and use in source and binary forms, with or without modification, are
    66                           ; permitted provided that the following conditions are met:
    67                           ; 
    68                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    69                           ;        conditions and the following disclaimer.
    70                           ; 
    71                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    72                           ;        of conditions and the following disclaimer in the documentation and/or other
    73                           ;        materials provided with the distribution.
    74                           ; 
    75                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    76                           ;        software without specific prior written permission.
    77                           ; 
    78                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    79                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    80                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    81                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    82                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    83                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    84                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    85                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    86                           ; 
    87                           ; 
    88                           ; Code-generator required, PIC18F4550 Definitions
    89                           ; 
    90                           ; SFR Addresses
    91  0000                     
    92                           	psect	smallconst
    93  000800                     __psmallconst:
    94                           	opt stack 0
    95  000800  00                 	db	0
    96  000801                     _dpowers:
    97                           	opt stack 0
    98  000801  0001               	dw	1
    99  000803  0000               	dw	0
   100  000805  000A               	dw	10
   101  000807  0000               	dw	0
   102  000809  0064               	dw	100
   103  00080B  0000               	dw	0
   104  00080D  03E8               	dw	1000
   105  00080F  0000               	dw	0
   106  000811  2710               	dw	10000
   107  000813  0000               	dw	0
   108  000815  86A0               	dw	34464
   109  000817  0001               	dw	1
   110  000819  4240               	dw	16960
   111  00081B  000F               	dw	15
   112  00081D  9680               	dw	38528
   113  00081F  0098               	dw	152
   114  000821  E100               	dw	57600
   115  000823  05F5               	dw	1525
   116  000825  CA00               	dw	51712
   117  000827  3B9A               	dw	15258
   118  000829                     __end_of_dpowers:
   119                           	opt stack 0
   120  000829                     __powers_:
   121                           	opt stack 0
   122  000829  00                 	db	0
   123  00082A  80                 	db	128
   124  00082B  3F                 	db	63
   125  00082C  00                 	db	0
   126  00082D  20                 	db	32
   127  00082E  41                 	db	65
   128  00082F  00                 	db	0
   129  000830  C8                 	db	200
   130  000831  42                 	db	66
   131  000832  00                 	db	0
   132  000833  7A                 	db	122
   133  000834  44                 	db	68
   134  000835  40                 	db	64
   135  000836  1C                 	db	28
   136  000837  46                 	db	70
   137  000838  50                 	db	80
   138  000839  C3                 	db	195
   139  00083A  47                 	db	71
   140  00083B  24                 	db	36
   141  00083C  74                 	db	116
   142  00083D  49                 	db	73
   143  00083E  97                 	db	151
   144  00083F  18                 	db	24
   145  000840  4B                 	db	75
   146  000841  BC                 	db	188
   147  000842  BE                 	db	190
   148  000843  4C                 	db	76
   149  000844  6B                 	db	107
   150  000845  6E                 	db	110
   151  000846  4E                 	db	78
   152  000847  03                 	db	3
   153  000848  15                 	db	21
   154  000849  50                 	db	80
   155  00084A  79                 	db	121
   156  00084B  AD                 	db	173
   157  00084C  60                 	db	96
   158  00084D  F3                 	db	243
   159  00084E  49                 	db	73
   160  00084F  71                 	db	113
   161  000850                     __end_of__powers_:
   162                           	opt stack 0
   163  000850                     __npowers_:
   164                           	opt stack 0
   165  000850  00                 	db	0
   166  000851  80                 	db	128
   167  000852  3F                 	db	63
   168  000853  CD                 	db	205
   169  000854  CC                 	db	204
   170  000855  3D                 	db	61
   171  000856  D7                 	db	215
   172  000857  23                 	db	35
   173  000858  3C                 	db	60
   174  000859  12                 	db	18
   175  00085A  83                 	db	131
   176  00085B  3A                 	db	58
   177  00085C  B7                 	db	183
   178  00085D  D1                 	db	209
   179  00085E  38                 	db	56
   180  00085F  C6                 	db	198
   181  000860  27                 	db	39
   182  000861  37                 	db	55
   183  000862  38                 	db	56
   184  000863  86                 	db	134
   185  000864  35                 	db	53
   186  000865  C0                 	db	192
   187  000866  D6                 	db	214
   188  000867  33                 	db	51
   189  000868  CC                 	db	204
   190  000869  2B                 	db	43
   191  00086A  32                 	db	50
   192  00086B  70                 	db	112
   193  00086C  89                 	db	137
   194  00086D  30                 	db	48
   195  00086E  E7                 	db	231
   196  00086F  DB                 	db	219
   197  000870  2E                 	db	46
   198  000871  E5                 	db	229
   199  000872  3C                 	db	60
   200  000873  1E                 	db	30
   201  000874  42                 	db	66
   202  000875  A2                 	db	162
   203  000876  0D                 	db	13
   204  000877                     __end_of__npowers_:
   205                           	opt stack 0
   206  000877                     sin@coeff_a:
   207                           	opt stack 0
   208  000877  F4                 	db	244
   209  000878  4A                 	db	74
   210  000879  48                 	db	72
   211  00087A  95                 	db	149
   212  00087B  95                 	db	149
   213  00087C  C7                 	db	199
   214  00087D  C1                 	db	193
   215  00087E  DC                 	db	220
   216  00087F  45                 	db	69
   217  000880  DC                 	db	220
   218  000881  6D                 	db	109
   219  000882  C3                 	db	195
   220  000883  B3                 	db	179
   221  000884  33                 	db	51
   222  000885  40                 	db	64
   223  000886                     __end_ofsin@coeff_a:
   224                           	opt stack 0
   225  000886                     sin@coeff_b:
   226                           	opt stack 0
   227  000886  34                 	db	52
   228  000887  01                 	db	1
   229  000888  48                 	db	72
   230  000889  9D                 	db	157
   231  00088A  B0                 	db	176
   232  00088B  45                 	db	69
   233  00088C  00                 	db	0
   234  00088D  DA                 	db	218
   235  00088E  42                 	db	66
   236  00088F  00                 	db	0
   237  000890  80                 	db	128
   238  000891  3F                 	db	63
   239  000892                     __end_ofsin@coeff_b:
   240                           	opt stack 0
   241  0000                     _CCPR1	set	4030
   242  0000                     _PORTBbits	set	3969
   243  0000                     _TRISBbits	set	3987
   244  0000                     _TRISAbits	set	3986
   245  0000                     _PIR1bits	set	3998
   246  0000                     _T1CONbits	set	4045
   247  0000                     _INTCONbits	set	4082
   248  0000                     _PORTDbits	set	3971
   249  0000                     _TRISDbits	set	3989
   250  0000                     _CCP1CONbits	set	4029
   251  0000                     _ADRESL	set	4035
   252  0000                     _ADRESH	set	4036
   253  0000                     _ADCON2bits	set	4032
   254  0000                     _ADCON1	set	4033
   255  0000                     _ADCON0bits	set	4034
   256  0000                     _CCP1IF	set	31986
   257  000892                     STR_1:
   258  000892  56                 	db	86	;'V'
   259  000893  6F                 	db	111	;'o'
   260  000894  6C                 	db	108	;'l'
   261  000895  74                 	db	116	;'t'
   262  000896  61                 	db	97	;'a'
   263  000897  67                 	db	103	;'g'
   264  000898  65                 	db	101	;'e'
   265  000899  20                 	db	32
   266  00089A  25                 	db	37
   267  00089B  33                 	db	51	;'3'
   268  00089C  64                 	db	100	;'d'
   269  00089D  00                 	db	0
   270  00089E                     STR_3:
   271  00089E  49                 	db	73	;'I'
   272  00089F  52                 	db	82	;'R'
   273  0008A0  4D                 	db	77	;'M'
   274  0008A1  53                 	db	83	;'S'
   275  0008A2  20                 	db	32
   276  0008A3  25                 	db	37
   277  0008A4  30                 	db	48	;'0'
   278  0008A5  2E                 	db	46
   279  0008A6  32                 	db	50	;'2'
   280  0008A7  66                 	db	102	;'f'
   281  0008A8  00                 	db	0
   282  0008A9                     STR_2:
   283  0008A9  61                 	db	97	;'a'
   284  0008AA  6D                 	db	109	;'m'
   285  0008AB  70                 	db	112	;'p'
   286  0008AC  73                 	db	115	;'s'
   287  0008AD  20                 	db	32
   288  0008AE  25                 	db	37
   289  0008AF  30                 	db	48	;'0'
   290  0008B0  2E                 	db	46
   291  0008B1  32                 	db	50	;'2'
   292  0008B2  66                 	db	102	;'f'
   293  0008B3  00                 	db	0
   294  0008B4                     STR_5:
   295  0008B4  70                 	db	112	;'p'
   296  0008B5  46                 	db	70	;'F'
   297  0008B6  3D                 	db	61	;'='
   298  0008B7  25                 	db	37
   299  0008B8  30                 	db	48	;'0'
   300  0008B9  2E                 	db	46
   301  0008BA  33                 	db	51	;'3'
   302  0008BB  66                 	db	102	;'f'
   303  0008BC  00                 	db	0
   304  0008BD                     STR_4:
   305  0008BD  74                 	db	116	;'t'
   306  0008BE  65                 	db	101	;'e'
   307  0008BF  73                 	db	115	;'s'
   308  0008C0  74                 	db	116	;'t'
   309  0008C1  00                 	db	0
   310                           
   311                           ; #config settings
   312  0008C2  00                 	db	0	; dummy byte at the end
   313  0000                     
   314                           	psect	cinit
   315  0038FA                     __pcinit:
   316                           	opt stack 0
   317  0038FA                     start_initialization:
   318                           	opt stack 0
   319  0038FA                     __initialization:
   320                           	opt stack 0
   321                           
   322                           ; Clear objects allocated to BANK1 (20 bytes)
   323  0038FA  EE01  F0D3         	lfsr	0,__pbssBANK1
   324  0038FE  0E14               	movlw	20
   325  003900                     clear_0:
   326  003900  6AEE               	clrf	postinc0,c
   327  003902  06E8               	decf	wreg,f,c
   328  003904  E1FD               	bnz	clear_0
   329                           
   330                           ; Clear objects allocated to BANK0 (22 bytes)
   331  003906  EE00  F0D9         	lfsr	0,__pbssBANK0
   332  00390A  0E16               	movlw	22
   333  00390C                     clear_1:
   334  00390C  6AEE               	clrf	postinc0,c
   335  00390E  06E8               	decf	wreg,f,c
   336  003910  E1FD               	bnz	clear_1
   337                           
   338                           ; Clear objects allocated to COMRAM (25 bytes)
   339  003912  EE00  F03C         	lfsr	0,__pbssCOMRAM
   340  003916  0E19               	movlw	25
   341  003918                     clear_2:
   342  003918  6AEE               	clrf	postinc0,c
   343  00391A  06E8               	decf	wreg,f,c
   344  00391C  E1FD               	bnz	clear_2
   345  00391E                     end_of_initialization:
   346                           	opt stack 0
   347  00391E                     __end_of__initialization:
   348                           	opt stack 0
   349  00391E  9055               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   350  003920  9255               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   351  003922  0E00               	movlw	low (__Lmediumconst shr (0+16))
   352  003924  6EF8               	movwf	tblptru,c
   353  003926  0100               	movlb	0
   354  003928  EF9F  F009         	goto	_main	;jump to C main() function
   355                           tblptru	equ	0xFF8
   356                           postinc0	equ	0xFEE
   357                           wreg	equ	0xFE8
   358                           
   359                           	psect	bssCOMRAM
   360  00003C                     __pbssCOMRAM:
   361                           	opt stack 0
   362  00003C                     _buffer1:
   363                           	opt stack 0
   364  00003C                     	ds	20
   365  000050                     _voltaje:
   366                           	opt stack 0
   367  000050                     	ds	3
   368  000053                     _adc1:
   369                           	opt stack 0
   370  000053                     	ds	2
   371                           tblptru	equ	0xFF8
   372                           postinc0	equ	0xFEE
   373                           wreg	equ	0xFE8
   374                           
   375                           	psect	bssBANK0
   376  0000D9                     __pbssBANK0:
   377                           	opt stack 0
   378  0000D9                     _buffer3:
   379                           	opt stack 0
   380  0000D9                     	ds	20
   381  0000ED                     _errno:
   382                           	opt stack 0
   383  0000ED                     	ds	2
   384                           tblptru	equ	0xFF8
   385                           postinc0	equ	0xFEE
   386                           wreg	equ	0xFE8
   387                           
   388                           	psect	bssBANK1
   389  0001D3                     __pbssBANK1:
   390                           	opt stack 0
   391  0001D3                     _buffer2:
   392                           	opt stack 0
   393  0001D3                     	ds	20
   394                           tblptru	equ	0xFF8
   395                           postinc0	equ	0xFEE
   396                           wreg	equ	0xFE8
   397                           
   398                           	psect	cstackBANK1
   399  000100                     __pcstackBANK1:
   400                           	opt stack 0
   401  000100                     main@FPprom:
   402                           	opt stack 0
   403                           
   404                           ; 153 bytes @ 0x0
   405  000100                     	ds	153
   406  000199                     main@PotenciaReal:
   407                           	opt stack 0
   408                           
   409                           ; 3 bytes @ 0x99
   410  000199                     	ds	3
   411  00019C                     main@numTicks:
   412                           	opt stack 0
   413                           
   414                           ; 2 bytes @ 0x9C
   415  00019C                     	ds	2
   416  00019E                     main@buffer1:
   417                           	opt stack 0
   418                           
   419                           ; 16 bytes @ 0x9E
   420  00019E                     	ds	16
   421  0001AE                     main@Irms:
   422                           	opt stack 0
   423                           
   424                           ; 3 bytes @ 0xAE
   425  0001AE                     	ds	3
   426  0001B1                     main@FactorPotencia:
   427                           	opt stack 0
   428                           
   429                           ; 3 bytes @ 0xB1
   430  0001B1                     	ds	3
   431  0001B4                     main@factorPotenciaNum:
   432                           	opt stack 0
   433                           
   434                           ; 3 bytes @ 0xB4
   435  0001B4                     	ds	3
   436  0001B7                     main@fppromtotal2:
   437                           	opt stack 0
   438                           
   439                           ; 3 bytes @ 0xB7
   440  0001B7                     	ds	3
   441  0001BA                     main@Voltage:
   442                           	opt stack 0
   443                           
   444                           ; 3 bytes @ 0xBA
   445  0001BA                     	ds	3
   446  0001BD                     main@delay:
   447                           	opt stack 0
   448                           
   449                           ; 4 bytes @ 0xBD
   450  0001BD                     	ds	4
   451  0001C1                     main@sumIns:
   452                           	opt stack 0
   453                           
   454                           ; 3 bytes @ 0xC1
   455  0001C1                     	ds	3
   456  0001C4                     main@fppromtotal:
   457                           	opt stack 0
   458                           
   459                           ; 3 bytes @ 0xC4
   460  0001C4                     	ds	3
   461  0001C7                     _main$1423:
   462                           	opt stack 0
   463                           
   464                           ; 3 bytes @ 0xC7
   465  0001C7                     	ds	3
   466  0001CA                     main@numCiclosMuestro:
   467                           	opt stack 0
   468                           
   469                           ; 2 bytes @ 0xCA
   470  0001CA                     	ds	2
   471  0001CC                     main@loop:
   472                           	opt stack 0
   473                           
   474                           ; 1 bytes @ 0xCC
   475  0001CC                     	ds	1
   476  0001CD                     main@calculoFP:
   477                           	opt stack 0
   478                           
   479                           ; 1 bytes @ 0xCD
   480  0001CD                     	ds	1
   481  0001CE                     main@Amps:
   482                           	opt stack 0
   483                           
   484                           ; 3 bytes @ 0xCE
   485  0001CE                     	ds	3
   486  0001D1                     main@i:
   487                           	opt stack 0
   488                           
   489                           ; 2 bytes @ 0xD1
   490  0001D1                     	ds	2
   491                           tblptru	equ	0xFF8
   492                           postinc0	equ	0xFEE
   493                           wreg	equ	0xFE8
   494                           
   495                           	psect	cstackBANK0
   496  000060                     __pcstackBANK0:
   497                           	opt stack 0
   498  000060                     ??_Lcd_Cmd:
   499  000060                     ??_Lcd_Chr_CP:
   500  000060                     ??_isdigit:
   501  000060                     ?___awmod:
   502                           	opt stack 0
   503  000060                     ?___ftpack:
   504                           	opt stack 0
   505  000060                     ?___ftneg:
   506                           	opt stack 0
   507  000060                     ?__tdiv_to_l_:
   508                           	opt stack 0
   509  000060                     ?__div_to_l_:
   510                           	opt stack 0
   511  000060                     ?___lldiv:
   512                           	opt stack 0
   513  000060                     ___awmod@dividend:
   514                           	opt stack 0
   515  000060                     __div_to_l_@f1:
   516                           	opt stack 0
   517  000060                     ___ftpack@arg:
   518                           	opt stack 0
   519  000060                     __tdiv_to_l_@f1:
   520                           	opt stack 0
   521  000060                     ___ftge@ff1:
   522                           	opt stack 0
   523  000060                     ___ftneg@f1:
   524                           	opt stack 0
   525  000060                     frexp@value:
   526                           	opt stack 0
   527  000060                     ___lldiv@dividend:
   528                           	opt stack 0
   529                           
   530                           ; 4 bytes @ 0x0
   531  000060                     	ds	1
   532  000061                     _isdigit$1012:
   533                           	opt stack 0
   534                           
   535                           ; 1 bytes @ 0x1
   536  000061                     	ds	1
   537  000062                     Lcd_Chr_CP@data:
   538                           	opt stack 0
   539  000062                     Lcd_Cmd@data:
   540                           	opt stack 0
   541  000062                     isdigit@c:
   542                           	opt stack 0
   543  000062                     ___awmod@divisor:
   544                           	opt stack 0
   545                           
   546                           ; 2 bytes @ 0x2
   547  000062                     	ds	1
   548  000063                     ??_Lcd_Init:
   549  000063                     Lcd_Out2@x:
   550                           	opt stack 0
   551  000063                     ___ftpack@exp:
   552                           	opt stack 0
   553  000063                     frexp@eptr:
   554                           	opt stack 0
   555  000063                     __div_to_l_@f2:
   556                           	opt stack 0
   557  000063                     __tdiv_to_l_@f2:
   558                           	opt stack 0
   559  000063                     ___ftge@ff2:
   560                           	opt stack 0
   561                           
   562                           ; 3 bytes @ 0x3
   563  000063                     	ds	1
   564  000064                     Lcd_Init@data:
   565                           	opt stack 0
   566  000064                     ___awmod@counter:
   567                           	opt stack 0
   568  000064                     ___ftpack@sign:
   569                           	opt stack 0
   570  000064                     Lcd_Out2@buffer:
   571                           	opt stack 0
   572  000064                     ___lldiv@divisor:
   573                           	opt stack 0
   574                           
   575                           ; 4 bytes @ 0x4
   576  000064                     	ds	1
   577  000065                     ??___ftpack:
   578  000065                     ??_frexp:
   579  000065                     ___awmod@sign:
   580                           	opt stack 0
   581                           
   582                           ; 1 bytes @ 0x5
   583  000065                     	ds	1
   584  000066                     ??__tdiv_to_l_:
   585  000066                     ??___ftge:
   586  000066                     ?___awdiv:
   587                           	opt stack 0
   588  000066                     Lcd_Out2@y:
   589                           	opt stack 0
   590  000066                     ___awdiv@dividend:
   591                           	opt stack 0
   592  000066                     __div_to_l_@quot:
   593                           	opt stack 0
   594                           
   595                           ; 4 bytes @ 0x6
   596  000066                     	ds	1
   597  000067                     Lcd_Out2@data:
   598                           	opt stack 0
   599                           
   600                           ; 1 bytes @ 0x7
   601  000067                     	ds	1
   602  000068                     ?___lltoft:
   603                           	opt stack 0
   604  000068                     ?___lwtoft:
   605                           	opt stack 0
   606  000068                     ___awdiv@divisor:
   607                           	opt stack 0
   608  000068                     ___lwtoft@c:
   609                           	opt stack 0
   610  000068                     ___lldiv@quotient:
   611                           	opt stack 0
   612  000068                     ___lltoft@c:
   613                           	opt stack 0
   614                           
   615                           ; 4 bytes @ 0x8
   616  000068                     	ds	1
   617  000069                     __tdiv_to_l_@quot:
   618                           	opt stack 0
   619                           
   620                           ; 4 bytes @ 0x9
   621  000069                     	ds	1
   622  00006A                     ___awdiv@counter:
   623                           	opt stack 0
   624  00006A                     __div_to_l_@cntr:
   625                           	opt stack 0
   626                           
   627                           ; 1 bytes @ 0xA
   628  00006A                     	ds	1
   629  00006B                     ___awdiv@sign:
   630                           	opt stack 0
   631  00006B                     __div_to_l_@exp1:
   632                           	opt stack 0
   633                           
   634                           ; 1 bytes @ 0xB
   635  00006B                     	ds	1
   636  00006C                     ??___lltoft:
   637  00006C                     ___lldiv@counter:
   638                           	opt stack 0
   639  00006C                     ___awdiv@quotient:
   640                           	opt stack 0
   641                           
   642                           ; 2 bytes @ 0xC
   643  00006C                     	ds	1
   644  00006D                     ?___llmod:
   645                           	opt stack 0
   646  00006D                     __tdiv_to_l_@cntr:
   647                           	opt stack 0
   648  00006D                     ___llmod@dividend:
   649                           	opt stack 0
   650                           
   651                           ; 4 bytes @ 0xD
   652  00006D                     	ds	1
   653  00006E                     ?___wmul:
   654                           	opt stack 0
   655  00006E                     __tdiv_to_l_@exp1:
   656                           	opt stack 0
   657  00006E                     ___wmul@multiplier:
   658                           	opt stack 0
   659                           
   660                           ; 2 bytes @ 0xE
   661  00006E                     	ds	2
   662  000070                     ___lltoft@exp:
   663                           	opt stack 0
   664  000070                     ___wmul@multiplicand:
   665                           	opt stack 0
   666                           
   667                           ; 2 bytes @ 0x10
   668  000070                     	ds	1
   669  000071                     ___llmod@divisor:
   670                           	opt stack 0
   671                           
   672                           ; 4 bytes @ 0x11
   673  000071                     	ds	1
   674  000072                     ___wmul@product:
   675                           	opt stack 0
   676                           
   677                           ; 2 bytes @ 0x12
   678  000072                     	ds	2
   679  000074                     ?___ftmul:
   680                           	opt stack 0
   681  000074                     ___ftmul@f1:
   682                           	opt stack 0
   683                           
   684                           ; 3 bytes @ 0x14
   685  000074                     	ds	1
   686  000075                     ___llmod@counter:
   687                           	opt stack 0
   688                           
   689                           ; 1 bytes @ 0x15
   690  000075                     	ds	2
   691  000077                     ___ftmul@f2:
   692                           	opt stack 0
   693                           
   694                           ; 3 bytes @ 0x17
   695  000077                     	ds	3
   696  00007A                     ??___ftmul:
   697                           
   698                           ; 1 bytes @ 0x1A
   699  00007A                     	ds	3
   700  00007D                     ___ftmul@exp:
   701                           	opt stack 0
   702                           
   703                           ; 1 bytes @ 0x1D
   704  00007D                     	ds	1
   705  00007E                     ___ftmul@f3_as_product:
   706                           	opt stack 0
   707                           
   708                           ; 3 bytes @ 0x1E
   709  00007E                     	ds	3
   710  000081                     ___ftmul@cntr:
   711                           	opt stack 0
   712                           
   713                           ; 1 bytes @ 0x21
   714  000081                     	ds	1
   715  000082                     ___ftmul@sign:
   716                           	opt stack 0
   717                           
   718                           ; 1 bytes @ 0x22
   719  000082                     	ds	1
   720  000083                     ?_fround:
   721                           	opt stack 0
   722  000083                     ?_scale:
   723                           	opt stack 0
   724                           
   725                           ; 3 bytes @ 0x23
   726  000083                     	ds	3
   727  000086                     _fround$1425:
   728                           	opt stack 0
   729  000086                     _scale$1426:
   730                           	opt stack 0
   731                           
   732                           ; 3 bytes @ 0x26
   733  000086                     	ds	3
   734  000089                     scale@scl:
   735                           	opt stack 0
   736  000089                     _fround$1424:
   737                           	opt stack 0
   738                           
   739                           ; 3 bytes @ 0x29
   740  000089                     	ds	1
   741  00008A                     ?___fttol:
   742                           	opt stack 0
   743  00008A                     ___fttol@f1:
   744                           	opt stack 0
   745                           
   746                           ; 3 bytes @ 0x2A
   747  00008A                     	ds	2
   748  00008C                     fround@prec:
   749                           	opt stack 0
   750                           
   751                           ; 1 bytes @ 0x2C
   752  00008C                     	ds	1
   753  00008D                     ?___ftadd:
   754                           	opt stack 0
   755  00008D                     ___ftadd@f1:
   756                           	opt stack 0
   757                           
   758                           ; 3 bytes @ 0x2D
   759  00008D                     	ds	1
   760  00008E                     ??___fttol:
   761                           
   762                           ; 1 bytes @ 0x2E
   763  00008E                     	ds	2
   764  000090                     ___ftadd@f2:
   765                           	opt stack 0
   766                           
   767                           ; 3 bytes @ 0x30
   768  000090                     	ds	3
   769  000093                     ??___ftadd:
   770  000093                     ___fttol@sign1:
   771                           	opt stack 0
   772                           
   773                           ; 1 bytes @ 0x33
   774  000093                     	ds	1
   775  000094                     ___fttol@lval:
   776                           	opt stack 0
   777                           
   778                           ; 4 bytes @ 0x34
   779  000094                     	ds	2
   780  000096                     ___ftadd@sign:
   781                           	opt stack 0
   782                           
   783                           ; 1 bytes @ 0x36
   784  000096                     	ds	1
   785  000097                     ___ftadd@exp2:
   786                           	opt stack 0
   787                           
   788                           ; 1 bytes @ 0x37
   789  000097                     	ds	1
   790  000098                     ___ftadd@exp1:
   791                           	opt stack 0
   792  000098                     ___fttol@exp1:
   793                           	opt stack 0
   794                           
   795                           ; 1 bytes @ 0x38
   796  000098                     	ds	1
   797  000099                     ?_eval_poly:
   798                           	opt stack 0
   799  000099                     ?___altoft:
   800                           	opt stack 0
   801  000099                     eval_poly@x:
   802                           	opt stack 0
   803  000099                     ___altoft@c:
   804                           	opt stack 0
   805                           
   806                           ; 4 bytes @ 0x39
   807  000099                     	ds	3
   808  00009C                     eval_poly@d:
   809                           	opt stack 0
   810                           
   811                           ; 2 bytes @ 0x3C
   812  00009C                     	ds	1
   813  00009D                     ??___altoft:
   814                           
   815                           ; 1 bytes @ 0x3D
   816  00009D                     	ds	1
   817  00009E                     eval_poly@n:
   818                           	opt stack 0
   819                           
   820                           ; 2 bytes @ 0x3E
   821  00009E                     	ds	2
   822  0000A0                     ??_eval_poly:
   823                           
   824                           ; 1 bytes @ 0x40
   825  0000A0                     	ds	1
   826  0000A1                     ___altoft@exp:
   827                           	opt stack 0
   828                           
   829                           ; 1 bytes @ 0x41
   830  0000A1                     	ds	1
   831  0000A2                     ___altoft@sign:
   832                           	opt stack 0
   833  0000A2                     eval_poly@res:
   834                           	opt stack 0
   835                           
   836                           ; 3 bytes @ 0x42
   837  0000A2                     	ds	1
   838  0000A3                     ?_floor:
   839                           	opt stack 0
   840  0000A3                     floor@x:
   841                           	opt stack 0
   842                           
   843                           ; 3 bytes @ 0x43
   844  0000A3                     	ds	3
   845  0000A6                     floor@i:
   846                           	opt stack 0
   847                           
   848                           ; 3 bytes @ 0x46
   849  0000A6                     	ds	3
   850  0000A9                     floor@expon:
   851                           	opt stack 0
   852                           
   853                           ; 2 bytes @ 0x49
   854  0000A9                     	ds	2
   855  0000AB                     ?___ftsub:
   856                           	opt stack 0
   857  0000AB                     ___ftsub@f1:
   858                           	opt stack 0
   859                           
   860                           ; 3 bytes @ 0x4B
   861  0000AB                     	ds	3
   862  0000AE                     ___ftsub@f2:
   863                           	opt stack 0
   864                           
   865                           ; 3 bytes @ 0x4E
   866  0000AE                     	ds	3
   867  0000B1                     ?_sprintf:
   868                           	opt stack 0
   869  0000B1                     ?___ftdiv:
   870                           	opt stack 0
   871  0000B1                     sprintf@sp:
   872                           	opt stack 0
   873  0000B1                     ___ftdiv@f1:
   874                           	opt stack 0
   875                           
   876                           ; 3 bytes @ 0x51
   877  0000B1                     	ds	2
   878  0000B3                     sprintf@f:
   879                           	opt stack 0
   880                           
   881                           ; 2 bytes @ 0x53
   882  0000B3                     	ds	1
   883  0000B4                     ___ftdiv@f2:
   884                           	opt stack 0
   885                           
   886                           ; 3 bytes @ 0x54
   887  0000B4                     	ds	3
   888  0000B7                     ??___ftdiv:
   889                           
   890                           ; 1 bytes @ 0x57
   891  0000B7                     	ds	1
   892  0000B8                     ??_sprintf:
   893                           
   894                           ; 1 bytes @ 0x58
   895  0000B8                     	ds	2
   896  0000BA                     ___ftdiv@cntr:
   897                           	opt stack 0
   898                           
   899                           ; 1 bytes @ 0x5A
   900  0000BA                     	ds	1
   901  0000BB                     ___ftdiv@f3:
   902                           	opt stack 0
   903                           
   904                           ; 3 bytes @ 0x5B
   905  0000BB                     	ds	3
   906  0000BE                     ___ftdiv@exp:
   907                           	opt stack 0
   908  0000BE                     _sprintf$1427:
   909                           	opt stack 0
   910                           
   911                           ; 3 bytes @ 0x5E
   912  0000BE                     	ds	1
   913  0000BF                     ___ftdiv@sign:
   914                           	opt stack 0
   915                           
   916                           ; 1 bytes @ 0x5F
   917  0000BF                     	ds	1
   918  0000C0                     ?_sqrt:
   919                           	opt stack 0
   920  0000C0                     ?_sin:
   921                           	opt stack 0
   922  0000C0                     sin@f:
   923                           	opt stack 0
   924  0000C0                     sqrt@a:
   925                           	opt stack 0
   926                           
   927                           ; 3 bytes @ 0x60
   928  0000C0                     	ds	1
   929  0000C1                     sprintf@ap:
   930                           	opt stack 0
   931                           
   932                           ; 2 bytes @ 0x61
   933  0000C1                     	ds	2
   934  0000C3                     ??_sqrt:
   935  0000C3                     sin@y:
   936                           	opt stack 0
   937  0000C3                     sprintf@tmpval:
   938                           	opt stack 0
   939                           
   940                           ; 4 bytes @ 0x63
   941  0000C3                     	ds	3
   942  0000C6                     sqrt@og:
   943                           	opt stack 0
   944  0000C6                     _sin$1429:
   945                           	opt stack 0
   946                           
   947                           ; 3 bytes @ 0x66
   948  0000C6                     	ds	1
   949  0000C7                     sprintf@val:
   950                           	opt stack 0
   951                           
   952                           ; 4 bytes @ 0x67
   953  0000C7                     	ds	2
   954  0000C9                     sin@x2:
   955                           	opt stack 0
   956  0000C9                     sqrt@z:
   957                           	opt stack 0
   958                           
   959                           ; 3 bytes @ 0x69
   960  0000C9                     	ds	2
   961  0000CB                     sprintf@exp:
   962                           	opt stack 0
   963                           
   964                           ; 2 bytes @ 0x6B
   965  0000CB                     	ds	1
   966  0000CC                     sin@sgn:
   967                           	opt stack 0
   968  0000CC                     sqrt@i:
   969                           	opt stack 0
   970                           
   971                           ; 1 bytes @ 0x6C
   972  0000CC                     	ds	1
   973  0000CD                     ?_cos:
   974                           	opt stack 0
   975  0000CD                     sprintf@flag:
   976                           	opt stack 0
   977  0000CD                     cos@f:
   978                           	opt stack 0
   979  0000CD                     sqrt@q:
   980                           	opt stack 0
   981                           
   982                           ; 3 bytes @ 0x6D
   983  0000CD                     	ds	2
   984  0000CF                     sprintf@width:
   985                           	opt stack 0
   986                           
   987                           ; 2 bytes @ 0x6F
   988  0000CF                     	ds	1
   989  0000D0                     sqrt@x:
   990                           	opt stack 0
   991  0000D0                     _cos$1428:
   992                           	opt stack 0
   993                           
   994                           ; 3 bytes @ 0x70
   995  0000D0                     	ds	1
   996  0000D1                     sprintf@fval:
   997                           	opt stack 0
   998                           
   999                           ; 3 bytes @ 0x71
  1000  0000D1                     	ds	3
  1001  0000D4                     sprintf@prec:
  1002                           	opt stack 0
  1003                           
  1004                           ; 2 bytes @ 0x74
  1005  0000D4                     	ds	2
  1006  0000D6                     sprintf@c:
  1007                           	opt stack 0
  1008                           
  1009                           ; 1 bytes @ 0x76
  1010  0000D6                     	ds	1
  1011  0000D7                     ??_main:
  1012                           
  1013                           ; 1 bytes @ 0x77
  1014  0000D7                     	ds	2
  1015                           tblptru	equ	0xFF8
  1016                           postinc0	equ	0xFEE
  1017                           wreg	equ	0xFE8
  1018                           
  1019                           	psect	cstackCOMRAM
  1020  000001                     __pcstackCOMRAM:
  1021                           	opt stack 0
  1022  000001                     ?i2___ftpack:
  1023                           	opt stack 0
  1024  000001                     i2___ftpack@arg:
  1025                           	opt stack 0
  1026                           
  1027                           ; 3 bytes @ 0x0
  1028  000001                     	ds	3
  1029  000004                     i2___ftpack@exp:
  1030                           	opt stack 0
  1031                           
  1032                           ; 1 bytes @ 0x3
  1033  000004                     	ds	1
  1034  000005                     i2___ftpack@sign:
  1035                           	opt stack 0
  1036                           
  1037                           ; 1 bytes @ 0x4
  1038  000005                     	ds	1
  1039  000006                     ??i2___ftpack:
  1040                           
  1041                           ; 1 bytes @ 0x5
  1042  000006                     	ds	3
  1043  000009                     ?i2___lwtoft:
  1044                           	opt stack 0
  1045  000009                     i2___lwtoft@c:
  1046                           	opt stack 0
  1047                           
  1048                           ; 2 bytes @ 0x8
  1049  000009                     	ds	3
  1050  00000C                     ?i2___ftmul:
  1051                           	opt stack 0
  1052  00000C                     i2___ftmul@f1:
  1053                           	opt stack 0
  1054                           
  1055                           ; 3 bytes @ 0xB
  1056  00000C                     	ds	3
  1057  00000F                     i2___ftmul@f2:
  1058                           	opt stack 0
  1059                           
  1060                           ; 3 bytes @ 0xE
  1061  00000F                     	ds	3
  1062  000012                     ??i2___ftmul:
  1063                           
  1064                           ; 1 bytes @ 0x11
  1065  000012                     	ds	3
  1066  000015                     i2___ftmul@exp:
  1067                           	opt stack 0
  1068                           
  1069                           ; 1 bytes @ 0x14
  1070  000015                     	ds	1
  1071  000016                     i2___ftmul@f3_as_product:
  1072                           	opt stack 0
  1073                           
  1074                           ; 3 bytes @ 0x15
  1075  000016                     	ds	3
  1076  000019                     i2___ftmul@cntr:
  1077                           	opt stack 0
  1078                           
  1079                           ; 1 bytes @ 0x18
  1080  000019                     	ds	1
  1081  00001A                     i2___ftmul@sign:
  1082                           	opt stack 0
  1083                           
  1084                           ; 1 bytes @ 0x19
  1085  00001A                     	ds	1
  1086  00001B                     ?i2___ftdiv:
  1087                           	opt stack 0
  1088  00001B                     i2___ftdiv@f1:
  1089                           	opt stack 0
  1090                           
  1091                           ; 3 bytes @ 0x1A
  1092  00001B                     	ds	3
  1093  00001E                     i2___ftdiv@f2:
  1094                           	opt stack 0
  1095                           
  1096                           ; 3 bytes @ 0x1D
  1097  00001E                     	ds	3
  1098  000021                     ??i2___ftdiv:
  1099                           
  1100                           ; 1 bytes @ 0x20
  1101  000021                     	ds	3
  1102  000024                     i2___ftdiv@cntr:
  1103                           	opt stack 0
  1104                           
  1105                           ; 1 bytes @ 0x23
  1106  000024                     	ds	1
  1107  000025                     i2___ftdiv@f3:
  1108                           	opt stack 0
  1109                           
  1110                           ; 3 bytes @ 0x24
  1111  000025                     	ds	3
  1112  000028                     i2___ftdiv@exp:
  1113                           	opt stack 0
  1114                           
  1115                           ; 1 bytes @ 0x27
  1116  000028                     	ds	1
  1117  000029                     i2___ftdiv@sign:
  1118                           	opt stack 0
  1119                           
  1120                           ; 1 bytes @ 0x28
  1121  000029                     	ds	1
  1122  00002A                     ??_comparar:
  1123                           
  1124                           ; 1 bytes @ 0x29
  1125  00002A                     	ds	18
  1126                           tblptru	equ	0xFF8
  1127                           postinc0	equ	0xFEE
  1128                           wreg	equ	0xFE8
  1129                           
  1130 ;;
  1131 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1132 ;;
  1133 ;; *************** function _main *****************
  1134 ;; Defined at:
  1135 ;;		line 117 in file "main_014_Practice_CCP Comparacion_ADC.c"
  1136 ;; Parameters:    Size  Location     Type
  1137 ;;		None
  1138 ;; Auto vars:     Size  Location     Type
  1139 ;;  i               2  209[BANK1 ] int 
  1140 ;;  Amps            3  206[BANK1 ] float 
  1141 ;;  Voltage         3  186[BANK1 ] float 
  1142 ;;  FPprom        153    0[BANK1 ] float [51]
  1143 ;;  buffer1        16  158[BANK1 ] unsigned char [16]
  1144 ;;  delay           4  189[BANK1 ] unsigned long 
  1145 ;;  fppromtotal     3  196[BANK1 ] float 
  1146 ;;  sumIns          3  193[BANK1 ] float 
  1147 ;;  fppromtotal2    3  183[BANK1 ] float 
  1148 ;;  factorPotenc    3  180[BANK1 ] float 
  1149 ;;  FactorPotenc    3  177[BANK1 ] float 
  1150 ;;  Irms            3  174[BANK1 ] float 
  1151 ;;  PotenciaReal    3  153[BANK1 ] float 
  1152 ;;  numCiclosMue    2  202[BANK1 ] unsigned int 
  1153 ;;  numTicks        2  156[BANK1 ] unsigned int 
  1154 ;;  calculoFP       1  205[BANK1 ] unsigned char 
  1155 ;;  loop            1  204[BANK1 ] unsigned char 
  1156 ;; Return value:  Size  Location     Type
  1157 ;;                  1    wreg      void 
  1158 ;; Registers used:
  1159 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1160 ;; Tracked objects:
  1161 ;;		On entry : 0/0
  1162 ;;		On exit  : 0/0
  1163 ;;		Unchanged: 0/0
  1164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1165 ;;      Params:         0       0       0       0       0       0       0       0       0
  1166 ;;      Locals:         0       0     211       0       0       0       0       0       0
  1167 ;;      Temps:          0       2       0       0       0       0       0       0       0
  1168 ;;      Totals:         0       2     211       0       0       0       0       0       0
  1169 ;;Total ram usage:      213 bytes
  1170 ;; Hardware stack levels required when called:    8
  1171 ;; This function calls:
  1172 ;;		_Lcd_Cmd
  1173 ;;		_Lcd_Init
  1174 ;;		_Lcd_Out2
  1175 ;;		___ftadd
  1176 ;;		___ftdiv
  1177 ;;		___ftmul
  1178 ;;		___lltoft
  1179 ;;		___lwtoft
  1180 ;;		___wmul
  1181 ;;		_configstandard
  1182 ;;		_cos
  1183 ;;		_sprintf
  1184 ;;		_sqrt
  1185 ;; This function is called by:
  1186 ;;		Startup code after reset
  1187 ;; This function uses a non-reentrant model
  1188 ;;
  1189                           
  1190                           	psect	text0
  1191  00133E                     __ptext0:
  1192                           	opt stack 0
  1193  00133E                     _main:
  1194                           	opt stack 23
  1195                           
  1196                           ;main_014_Practice_CCP Comparacion_ADC.c: 119: configstandard();
  1197                           
  1198                           ;incstack = 0
  1199  00133E  EC3A  F01C         	call	_configstandard	;wreg free
  1200                           
  1201                           ;main_014_Practice_CCP Comparacion_ADC.c: 121: TRISAbits.RA0 = 1;
  1202  001342  8092               	bsf	3986,0,c	;volatile
  1203                           
  1204                           ;main_014_Practice_CCP Comparacion_ADC.c: 123: TRISBbits.RB0=1;
  1205  001344  8093               	bsf	3987,0,c	;volatile
  1206                           
  1207                           ;main_014_Practice_CCP Comparacion_ADC.c: 124: TRISBbits.RB1=1;
  1208  001346  8293               	bsf	3987,1,c	;volatile
  1209                           
  1210                           ;main_014_Practice_CCP Comparacion_ADC.c: 127: unsigned char buffer1[16];
  1211                           ;main_014_Practice_CCP Comparacion_ADC.c: 130: Lcd_Init();
  1212  001348  EC45  F012         	call	_Lcd_Init	;wreg free
  1213                           
  1214                           ;main_014_Practice_CCP Comparacion_ADC.c: 131: Lcd_Cmd(1);
  1215  00134C  0E01               	movlw	1
  1216  00134E  EC19  F014         	call	_Lcd_Cmd
  1217                           
  1218                           ;main_014_Practice_CCP Comparacion_ADC.c: 132: Lcd_Cmd(12);
  1219  001352  0E0C               	movlw	12
  1220  001354  EC19  F014         	call	_Lcd_Cmd
  1221                           
  1222                           ;main_014_Practice_CCP Comparacion_ADC.c: 133: _delay((unsigned long)((100)*(48000000/40
      +                          00.0)));
  1223  001358  0E07               	movlw	7
  1224  00135A  0100               	movlb	0	; () banked
  1225  00135C  6FD8               	movwf	(??_main+1)& (0+255),b
  1226  00135E  0E17               	movlw	23
  1227  001360  6FD7               	movwf	??_main& (0+255),b
  1228  001362  0E6A               	movlw	106
  1229  001364                     u4257:
  1230  001364  2EE8               	decfsz	wreg,f,c
  1231  001366  D7FE               	bra	u4257
  1232  001368  2FD7               	decfsz	??_main& (0+255),f,b
  1233  00136A  D7FC               	bra	u4257
  1234  00136C  2FD8               	decfsz	(??_main+1)& (0+255),f,b
  1235  00136E  D7FA               	bra	u4257
  1236  001370  F000               	nop	
  1237                           
  1238                           ;main_014_Practice_CCP Comparacion_ADC.c: 135: ADCON2bits.ADCS=110;
  1239  001372  50C0               	movf	4032,w,c	;volatile
  1240  001374  0BF8               	andlw	-8
  1241  001376  0906               	iorlw	6
  1242  001378  6EC0               	movwf	4032,c	;volatile
  1243                           
  1244                           ;main_014_Practice_CCP Comparacion_ADC.c: 136: ADCON2bits.ACQT=010;
  1245  00137A  96C0               	bcf	4032,3,c	;volatile
  1246  00137C  98C0               	bcf	4032,4,c	;volatile
  1247  00137E  9AC0               	bcf	4032,5,c	;volatile
  1248                           
  1249                           ;main_014_Practice_CCP Comparacion_ADC.c: 137: float sumIns=0;
  1250  001380  0E00               	movlw	0
  1251  001382  0101               	movlb	1	; () banked
  1252  001384  6FC1               	movwf	main@sumIns& (0+255),b
  1253  001386  0E00               	movlw	0
  1254  001388  6FC2               	movwf	(main@sumIns+1)& (0+255),b
  1255  00138A  0E00               	movlw	0
  1256  00138C  6FC3               	movwf	(main@sumIns+2)& (0+255),b
  1257                           
  1258                           ; BSR set to: 1
  1259                           ;main_014_Practice_CCP Comparacion_ADC.c: 138: float Irms=0;
  1260  00138E  0E00               	movlw	0
  1261  001390  6FAE               	movwf	main@Irms& (0+255),b
  1262  001392  0E00               	movlw	0
  1263  001394  6FAF               	movwf	(main@Irms+1)& (0+255),b
  1264  001396  0E00               	movlw	0
  1265  001398  6FB0               	movwf	(main@Irms+2)& (0+255),b
  1266                           
  1267                           ; BSR set to: 1
  1268                           ;main_014_Practice_CCP Comparacion_ADC.c: 139: unsigned int numCiclosMuestro=0;
  1269  00139A  0E00               	movlw	0
  1270  00139C  6FCB               	movwf	(main@numCiclosMuestro+1)& (0+255),b
  1271  00139E  0E00               	movlw	0
  1272  0013A0  6FCA               	movwf	main@numCiclosMuestro& (0+255),b
  1273                           
  1274                           ; BSR set to: 1
  1275                           ;main_014_Practice_CCP Comparacion_ADC.c: 140: float PotenciaReal=0;
  1276  0013A2  0E00               	movlw	0
  1277  0013A4  6F99               	movwf	main@PotenciaReal& (0+255),b
  1278  0013A6  0E00               	movlw	0
  1279  0013A8  6F9A               	movwf	(main@PotenciaReal+1)& (0+255),b
  1280  0013AA  0E00               	movlw	0
  1281  0013AC  6F9B               	movwf	(main@PotenciaReal+2)& (0+255),b
  1282                           
  1283                           ; BSR set to: 1
  1284                           ;main_014_Practice_CCP Comparacion_ADC.c: 141: float FactorPotencia=0;
  1285  0013AE  0E00               	movlw	0
  1286  0013B0  6FB1               	movwf	main@FactorPotencia& (0+255),b
  1287  0013B2  0E00               	movlw	0
  1288  0013B4  6FB2               	movwf	(main@FactorPotencia+1)& (0+255),b
  1289  0013B6  0E00               	movlw	0
  1290  0013B8  6FB3               	movwf	(main@FactorPotencia+2)& (0+255),b
  1291                           
  1292                           ; BSR set to: 1
  1293                           ;main_014_Practice_CCP Comparacion_ADC.c: 142: double factorPotenciaNum=0;
  1294  0013BA  0E00               	movlw	0
  1295  0013BC  6FB4               	movwf	main@factorPotenciaNum& (0+255),b
  1296  0013BE  0E00               	movlw	0
  1297  0013C0  6FB5               	movwf	(main@factorPotenciaNum+1)& (0+255),b
  1298  0013C2  0E00               	movlw	0
  1299  0013C4  6FB6               	movwf	(main@factorPotenciaNum+2)& (0+255),b
  1300                           
  1301                           ; BSR set to: 1
  1302                           ;main_014_Practice_CCP Comparacion_ADC.c: 143: unsigned char calculoFP=0;
  1303  0013C6  0E00               	movlw	0
  1304  0013C8  6FCD               	movwf	main@calculoFP& (0+255),b
  1305                           
  1306                           ; BSR set to: 1
  1307                           ;main_014_Practice_CCP Comparacion_ADC.c: 144: unsigned int numTicks=0;
  1308  0013CA  0E00               	movlw	0
  1309  0013CC  6F9D               	movwf	(main@numTicks+1)& (0+255),b
  1310  0013CE  0E00               	movlw	0
  1311  0013D0  6F9C               	movwf	main@numTicks& (0+255),b
  1312                           
  1313                           ; BSR set to: 1
  1314                           ;main_014_Practice_CCP Comparacion_ADC.c: 145: unsigned long long delay=0;
  1315  0013D2  0E00               	movlw	0
  1316  0013D4  6FBD               	movwf	main@delay& (0+255),b
  1317  0013D6  0E00               	movlw	0
  1318  0013D8  6FBE               	movwf	(main@delay+1)& (0+255),b
  1319  0013DA  0E00               	movlw	0
  1320  0013DC  6FBF               	movwf	(main@delay+2)& (0+255),b
  1321  0013DE  0E00               	movlw	0
  1322  0013E0  6FC0               	movwf	(main@delay+3)& (0+255),b
  1323                           
  1324                           ; BSR set to: 1
  1325                           ;main_014_Practice_CCP Comparacion_ADC.c: 146: unsigned char loop=0;
  1326  0013E2  0E00               	movlw	0
  1327  0013E4  6FCC               	movwf	main@loop& (0+255),b
  1328                           
  1329                           ; BSR set to: 1
  1330                           ;main_014_Practice_CCP Comparacion_ADC.c: 147: float FPprom[51];
  1331                           ;main_014_Practice_CCP Comparacion_ADC.c: 148: float fppromtotal=0;
  1332  0013E6  0E00               	movlw	0
  1333  0013E8  6FC4               	movwf	main@fppromtotal& (0+255),b
  1334  0013EA  0E00               	movlw	0
  1335  0013EC  6FC5               	movwf	(main@fppromtotal+1)& (0+255),b
  1336  0013EE  0E00               	movlw	0
  1337  0013F0  6FC6               	movwf	(main@fppromtotal+2)& (0+255),b
  1338                           
  1339                           ; BSR set to: 1
  1340                           ;main_014_Practice_CCP Comparacion_ADC.c: 149: float fppromtotal2=0;
  1341  0013F2  0E00               	movlw	0
  1342  0013F4  6FB7               	movwf	main@fppromtotal2& (0+255),b
  1343  0013F6  0E00               	movlw	0
  1344  0013F8  6FB8               	movwf	(main@fppromtotal2+1)& (0+255),b
  1345  0013FA  0E00               	movlw	0
  1346  0013FC  6FB9               	movwf	(main@fppromtotal2+2)& (0+255),b
  1347                           
  1348                           ; BSR set to: 1
  1349                           ;main_014_Practice_CCP Comparacion_ADC.c: 153: {
  1350                           ;main_014_Practice_CCP Comparacion_ADC.c: 156: while(numCiclosMuestro<200){
  1351                           
  1352                           ;main_014_Practice_CCP Comparacion_ADC.c: 152: while(1)
  1353  0013FE  D0C2               	goto	l116
  1354  001400                     l117:
  1355                           
  1356                           ; BSR set to: 1
  1357                           ;main_014_Practice_CCP Comparacion_ADC.c: 157: ADCON0bits.GO_DONE = 1;
  1358  001400  82C2               	bsf	4034,1,c	;volatile
  1359                           
  1360                           ; BSR set to: 1
  1361                           ;main_014_Practice_CCP Comparacion_ADC.c: 158: adc1 = (ADRESH<<8)+ADRESL;
  1362  001402  50C4               	movf	4036,w,c	;volatile
  1363  001404  0100               	movlb	0	; () banked
  1364  001406  6FD8               	movwf	(??_main+1)& (0+255),b
  1365  001408  6BD7               	clrf	??_main& (0+255),b
  1366  00140A  50C3               	movf	4035,w,c	;volatile
  1367  00140C  25D7               	addwf	??_main& (0+255),w,b
  1368  00140E  6E53               	movwf	_adc1,c
  1369  001410  0E00               	movlw	0
  1370  001412  21D8               	addwfc	(??_main+1)& (0+255),w,b
  1371  001414  6E54               	movwf	_adc1+1,c
  1372                           
  1373                           ; BSR set to: 0
  1374                           ;main_014_Practice_CCP Comparacion_ADC.c: 159: float Voltage=0;
  1375  001416  0E00               	movlw	0
  1376  001418  0101               	movlb	1	; () banked
  1377  00141A  6FBA               	movwf	main@Voltage& (0+255),b
  1378  00141C  0E00               	movlw	0
  1379  00141E  6FBB               	movwf	(main@Voltage+1)& (0+255),b
  1380  001420  0E00               	movlw	0
  1381  001422  6FBC               	movwf	(main@Voltage+2)& (0+255),b
  1382                           
  1383                           ; BSR set to: 1
  1384                           ;main_014_Practice_CCP Comparacion_ADC.c: 160: float Amps=0;
  1385  001424  0E00               	movlw	0
  1386  001426  6FCE               	movwf	main@Amps& (0+255),b
  1387  001428  0E00               	movlw	0
  1388  00142A  6FCF               	movwf	(main@Amps+1)& (0+255),b
  1389  00142C  0E00               	movlw	0
  1390  00142E  6FD0               	movwf	(main@Amps+2)& (0+255),b
  1391                           
  1392                           ; BSR set to: 1
  1393                           ;main_014_Practice_CCP Comparacion_ADC.c: 161: Voltage=(float)(adc1*5.0/1024.0);
  1394  001430  0E00               	movlw	0
  1395  001432  0100               	movlb	0	; () banked
  1396  001434  6F77               	movwf	___ftmul@f2& (0+255),b
  1397  001436  0EA0               	movlw	160
  1398  001438  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  1399  00143A  0E40               	movlw	64
  1400  00143C  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  1401  00143E  C053  F068         	movff	_adc1,___lwtoft@c
  1402  001442  C054  F069         	movff	_adc1+1,___lwtoft@c+1
  1403  001446  ECBD  F01C         	call	___lwtoft	;wreg free
  1404  00144A  C068  F074         	movff	?___lwtoft,___ftmul@f1
  1405  00144E  C069  F075         	movff	?___lwtoft+1,___ftmul@f1+1
  1406  001452  C06A  F076         	movff	?___lwtoft+2,___ftmul@f1+2
  1407  001456  EC45  F016         	call	___ftmul	;wreg free
  1408  00145A  C074  F0B1         	movff	?___ftmul,___ftdiv@f1
  1409  00145E  C075  F0B2         	movff	?___ftmul+1,___ftdiv@f1+1
  1410  001462  C076  F0B3         	movff	?___ftmul+2,___ftdiv@f1+2
  1411  001466  0E00               	movlw	0
  1412  001468  0100               	movlb	0	; () banked
  1413  00146A  6FB4               	movwf	___ftdiv@f2& (0+255),b
  1414  00146C  0E80               	movlw	128
  1415  00146E  6FB5               	movwf	(___ftdiv@f2+1)& (0+255),b
  1416  001470  0E44               	movlw	68
  1417  001472  6FB6               	movwf	(___ftdiv@f2+2)& (0+255),b
  1418  001474  EC3A  F017         	call	___ftdiv	;wreg free
  1419  001478  C0B1  F1BA         	movff	?___ftdiv,main@Voltage
  1420  00147C  C0B2  F1BB         	movff	?___ftdiv+1,main@Voltage+1
  1421  001480  C0B3  F1BC         	movff	?___ftdiv+2,main@Voltage+2
  1422                           
  1423                           ;main_014_Practice_CCP Comparacion_ADC.c: 162: Amps=((Voltage-2.5)/0.185);
  1424  001484  0E00               	movlw	0
  1425  001486  0100               	movlb	0	; () banked
  1426  001488  6F90               	movwf	___ftadd@f2& (0+255),b
  1427  00148A  0E20               	movlw	32
  1428  00148C  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
  1429  00148E  0EC0               	movlw	192
  1430  001490  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
  1431  001492  C1BA  F08D         	movff	main@Voltage,___ftadd@f1
  1432  001496  C1BB  F08E         	movff	main@Voltage+1,___ftadd@f1+1
  1433  00149A  C1BC  F08F         	movff	main@Voltage+2,___ftadd@f1+2
  1434  00149E  ECA4  F010         	call	___ftadd	;wreg free
  1435  0014A2  C08D  F0B1         	movff	?___ftadd,___ftdiv@f1
  1436  0014A6  C08E  F0B2         	movff	?___ftadd+1,___ftdiv@f1+1
  1437  0014AA  C08F  F0B3         	movff	?___ftadd+2,___ftdiv@f1+2
  1438  0014AE  0E71               	movlw	113
  1439  0014B0  0100               	movlb	0	; () banked
  1440  0014B2  6FB4               	movwf	___ftdiv@f2& (0+255),b
  1441  0014B4  0E3D               	movlw	61
  1442  0014B6  6FB5               	movwf	(___ftdiv@f2+1)& (0+255),b
  1443  0014B8  0E3E               	movlw	62
  1444  0014BA  6FB6               	movwf	(___ftdiv@f2+2)& (0+255),b
  1445  0014BC  EC3A  F017         	call	___ftdiv	;wreg free
  1446  0014C0  C0B1  F1CE         	movff	?___ftdiv,main@Amps
  1447  0014C4  C0B2  F1CF         	movff	?___ftdiv+1,main@Amps+1
  1448  0014C8  C0B3  F1D0         	movff	?___ftdiv+2,main@Amps+2
  1449                           
  1450                           ;main_014_Practice_CCP Comparacion_ADC.c: 164: sprintf(buffer1,"Voltage %3d", numCiclosM
      +                          uestro);
  1451  0014CC  0E9E               	movlw	low main@buffer1
  1452  0014CE  0100               	movlb	0	; () banked
  1453  0014D0  6FB1               	movwf	sprintf@sp& (0+255),b
  1454  0014D2  0E01               	movlw	high main@buffer1
  1455  0014D4  6FB2               	movwf	(sprintf@sp+1)& (0+255),b
  1456  0014D6  0E92               	movlw	low STR_1
  1457  0014D8  6FB3               	movwf	sprintf@f& (0+255),b
  1458  0014DA  0E08               	movlw	high STR_1
  1459  0014DC  6FB4               	movwf	(sprintf@f+1)& (0+255),b
  1460  0014DE  C1CA  F0B5         	movff	main@numCiclosMuestro,?_sprintf+4
  1461  0014E2  C1CB  F0B6         	movff	main@numCiclosMuestro+1,?_sprintf+5
  1462  0014E6  EC62  F004         	call	_sprintf	;wreg free
  1463                           
  1464                           ;main_014_Practice_CCP Comparacion_ADC.c: 165: sprintf(buffer2,"amps %0.2f", Amps);
  1465  0014EA  0ED3               	movlw	low _buffer2
  1466  0014EC  0100               	movlb	0	; () banked
  1467  0014EE  6FB1               	movwf	sprintf@sp& (0+255),b
  1468  0014F0  0E01               	movlw	high _buffer2
  1469  0014F2  6FB2               	movwf	(sprintf@sp+1)& (0+255),b
  1470  0014F4  0EA9               	movlw	low STR_2
  1471  0014F6  6FB3               	movwf	sprintf@f& (0+255),b
  1472  0014F8  0E08               	movlw	high STR_2
  1473  0014FA  6FB4               	movwf	(sprintf@f+1)& (0+255),b
  1474  0014FC  C1CE  F0B5         	movff	main@Amps,?_sprintf+4
  1475  001500  C1CF  F0B6         	movff	main@Amps+1,?_sprintf+5
  1476  001504  C1D0  F0B7         	movff	main@Amps+2,?_sprintf+6
  1477  001508  EC62  F004         	call	_sprintf	;wreg free
  1478                           
  1479                           ;main_014_Practice_CCP Comparacion_ADC.c: 166: Lcd_Out2(1, 0, buffer1);
  1480  00150C  0E00               	movlw	0
  1481  00150E  0100               	movlb	0	; () banked
  1482  001510  6F63               	movwf	Lcd_Out2@x& (0+255),b
  1483  001512  0E9E               	movlw	low main@buffer1
  1484  001514  6F64               	movwf	Lcd_Out2@buffer& (0+255),b
  1485  001516  0E01               	movlw	high main@buffer1
  1486  001518  6F65               	movwf	(Lcd_Out2@buffer+1)& (0+255),b
  1487  00151A  0E01               	movlw	1
  1488  00151C  EC09  F01A         	call	_Lcd_Out2
  1489                           
  1490                           ;main_014_Practice_CCP Comparacion_ADC.c: 167: Lcd_Out2(2, 0, buffer2);
  1491  001520  0E00               	movlw	0
  1492  001522  0100               	movlb	0	; () banked
  1493  001524  6F63               	movwf	Lcd_Out2@x& (0+255),b
  1494  001526  0ED3               	movlw	low _buffer2
  1495  001528  6F64               	movwf	Lcd_Out2@buffer& (0+255),b
  1496  00152A  0E01               	movlw	high _buffer2
  1497  00152C  6F65               	movwf	(Lcd_Out2@buffer+1)& (0+255),b
  1498  00152E  0E02               	movlw	2
  1499  001530  EC09  F01A         	call	_Lcd_Out2
  1500                           
  1501                           ;main_014_Practice_CCP Comparacion_ADC.c: 169: _delay((unsigned long)((50)*(48000000/400
      +                          0000.0)));
  1502  001534  0EC8               	movlw	200
  1503  001536                     u4267:
  1504  001536  2EE8               	decfsz	wreg,f,c
  1505  001538  D7FE               	bra	u4267
  1506                           
  1507                           ;main_014_Practice_CCP Comparacion_ADC.c: 171: sumIns+=Amps*Amps;
  1508  00153A  C1C1  F08D         	movff	main@sumIns,___ftadd@f1
  1509  00153E  C1C2  F08E         	movff	main@sumIns+1,___ftadd@f1+1
  1510  001542  C1C3  F08F         	movff	main@sumIns+2,___ftadd@f1+2
  1511  001546  C1CE  F077         	movff	main@Amps,___ftmul@f2
  1512  00154A  C1CF  F078         	movff	main@Amps+1,___ftmul@f2+1
  1513  00154E  C1D0  F079         	movff	main@Amps+2,___ftmul@f2+2
  1514  001552  C1CE  F074         	movff	main@Amps,___ftmul@f1
  1515  001556  C1CF  F075         	movff	main@Amps+1,___ftmul@f1+1
  1516  00155A  C1D0  F076         	movff	main@Amps+2,___ftmul@f1+2
  1517  00155E  EC45  F016         	call	___ftmul	;wreg free
  1518  001562  C074  F090         	movff	?___ftmul,___ftadd@f2
  1519  001566  C075  F091         	movff	?___ftmul+1,___ftadd@f2+1
  1520  00156A  C076  F092         	movff	?___ftmul+2,___ftadd@f2+2
  1521  00156E  ECA4  F010         	call	___ftadd	;wreg free
  1522  001572  C08D  F1C1         	movff	?___ftadd,main@sumIns
  1523  001576  C08E  F1C2         	movff	?___ftadd+1,main@sumIns+1
  1524  00157A  C08F  F1C3         	movff	?___ftadd+2,main@sumIns+2
  1525                           
  1526                           ;main_014_Practice_CCP Comparacion_ADC.c: 172: numCiclosMuestro+=1;
  1527  00157E  0101               	movlb	1	; () banked
  1528  001580  4BCA               	infsnz	main@numCiclosMuestro& (0+255),f,b
  1529  001582  2BCB               	incf	(main@numCiclosMuestro+1)& (0+255),f,b
  1530  001584                     l116:
  1531                           
  1532                           ; BSR set to: 1
  1533                           
  1534                           ; BSR set to: 1
  1535  001584  51CB               	movf	(main@numCiclosMuestro+1)& (0+255),w,b
  1536  001586  E104               	bnz	l3990
  1537  001588  0EC8               	movlw	200
  1538  00158A  5DCA               	subwf	main@numCiclosMuestro& (0+255),w,b
  1539  00158C  A0D8               	btfss	status,0,c
  1540  00158E  D738               	goto	l117
  1541  001590                     l3990:
  1542                           
  1543                           ; BSR set to: 1
  1544                           ;main_014_Practice_CCP Comparacion_ADC.c: 174: }
  1545                           ;main_014_Practice_CCP Comparacion_ADC.c: 176: Irms=sqrt(sumIns/201)/20;
  1546  001590  0E00               	movlw	0
  1547  001592  0100               	movlb	0	; () banked
  1548  001594  6FB4               	movwf	___ftdiv@f2& (0+255),b
  1549  001596  0E49               	movlw	73
  1550  001598  6FB5               	movwf	(___ftdiv@f2+1)& (0+255),b
  1551  00159A  0E43               	movlw	67
  1552  00159C  6FB6               	movwf	(___ftdiv@f2+2)& (0+255),b
  1553  00159E  C1C1  F0B1         	movff	main@sumIns,___ftdiv@f1
  1554  0015A2  C1C2  F0B2         	movff	main@sumIns+1,___ftdiv@f1+1
  1555  0015A6  C1C3  F0B3         	movff	main@sumIns+2,___ftdiv@f1+2
  1556  0015AA  EC3A  F017         	call	___ftdiv	;wreg free
  1557  0015AE  C0B1  F0C0         	movff	?___ftdiv,sqrt@a
  1558  0015B2  C0B2  F0C1         	movff	?___ftdiv+1,sqrt@a+1
  1559  0015B6  C0B3  F0C2         	movff	?___ftdiv+2,sqrt@a+2
  1560  0015BA  EC7B  F011         	call	_sqrt	;wreg free
  1561  0015BE  C0C0  F1C7         	movff	?_sqrt,_main$1423
  1562  0015C2  C0C1  F1C8         	movff	?_sqrt+1,_main$1423+1
  1563  0015C6  C0C2  F1C9         	movff	?_sqrt+2,_main$1423+2
  1564                           
  1565                           ;main_014_Practice_CCP Comparacion_ADC.c: 174: }
  1566                           ;main_014_Practice_CCP Comparacion_ADC.c: 176: Irms=sqrt(sumIns/201)/20;
  1567  0015CA  C1C7  F0B1         	movff	_main$1423,___ftdiv@f1
  1568  0015CE  C1C8  F0B2         	movff	_main$1423+1,___ftdiv@f1+1
  1569  0015D2  C1C9  F0B3         	movff	_main$1423+2,___ftdiv@f1+2
  1570  0015D6  0E00               	movlw	0
  1571  0015D8  0100               	movlb	0	; () banked
  1572  0015DA  6FB4               	movwf	___ftdiv@f2& (0+255),b
  1573  0015DC  0EA0               	movlw	160
  1574  0015DE  6FB5               	movwf	(___ftdiv@f2+1)& (0+255),b
  1575  0015E0  0E41               	movlw	65
  1576  0015E2  6FB6               	movwf	(___ftdiv@f2+2)& (0+255),b
  1577  0015E4  EC3A  F017         	call	___ftdiv	;wreg free
  1578  0015E8  C0B1  F1AE         	movff	?___ftdiv,main@Irms
  1579  0015EC  C0B2  F1AF         	movff	?___ftdiv+1,main@Irms+1
  1580  0015F0  C0B3  F1B0         	movff	?___ftdiv+2,main@Irms+2
  1581                           
  1582                           ;main_014_Practice_CCP Comparacion_ADC.c: 177: sprintf(buffer2,"IRMS %0.2f", Irms);
  1583  0015F4  0ED3               	movlw	low _buffer2
  1584  0015F6  0100               	movlb	0	; () banked
  1585  0015F8  6FB1               	movwf	sprintf@sp& (0+255),b
  1586  0015FA  0E01               	movlw	high _buffer2
  1587  0015FC  6FB2               	movwf	(sprintf@sp+1)& (0+255),b
  1588  0015FE  0E9E               	movlw	low STR_3
  1589  001600  6FB3               	movwf	sprintf@f& (0+255),b
  1590  001602  0E08               	movlw	high STR_3
  1591  001604  6FB4               	movwf	(sprintf@f+1)& (0+255),b
  1592  001606  C1AE  F0B5         	movff	main@Irms,?_sprintf+4
  1593  00160A  C1AF  F0B6         	movff	main@Irms+1,?_sprintf+5
  1594  00160E  C1B0  F0B7         	movff	main@Irms+2,?_sprintf+6
  1595  001612  EC62  F004         	call	_sprintf	;wreg free
  1596                           
  1597                           ;main_014_Practice_CCP Comparacion_ADC.c: 178: Lcd_Out2(2, 0, buffer2);
  1598  001616  0E00               	movlw	0
  1599  001618  0100               	movlb	0	; () banked
  1600  00161A  6F63               	movwf	Lcd_Out2@x& (0+255),b
  1601  00161C  0ED3               	movlw	low _buffer2
  1602  00161E  6F64               	movwf	Lcd_Out2@buffer& (0+255),b
  1603  001620  0E01               	movlw	high _buffer2
  1604  001622  6F65               	movwf	(Lcd_Out2@buffer+1)& (0+255),b
  1605  001624  0E02               	movlw	2
  1606  001626  EC09  F01A         	call	_Lcd_Out2
  1607                           
  1608                           ;main_014_Practice_CCP Comparacion_ADC.c: 185: _delay((unsigned long)((500)*(48000000/40
      +                          00.0)));
  1609  00162A  0E1F               	movlw	31
  1610  00162C  0100               	movlb	0	; () banked
  1611  00162E  6FD8               	movwf	(??_main+1)& (0+255),b
  1612  001630  0E71               	movlw	113
  1613  001632  6FD7               	movwf	??_main& (0+255),b
  1614  001634  0E1E               	movlw	30
  1615  001636                     u4277:
  1616  001636  2EE8               	decfsz	wreg,f,c
  1617  001638  D7FE               	bra	u4277
  1618  00163A  2FD7               	decfsz	??_main& (0+255),f,b
  1619  00163C  D7FC               	bra	u4277
  1620  00163E  2FD8               	decfsz	(??_main+1)& (0+255),f,b
  1621  001640  D7FA               	bra	u4277
  1622  001642  F000               	nop	
  1623                           
  1624                           ;main_014_Practice_CCP Comparacion_ADC.c: 186: while(loop<51){
  1625  001644  D082               	goto	l119
  1626  001646                     
  1627                           ;main_014_Practice_CCP Comparacion_ADC.c: 187: Lcd_Out2(1, 0, "test");
  1628  001646  0E00               	movlw	0
  1629  001648  0100               	movlb	0	; () banked
  1630  00164A  6F63               	movwf	Lcd_Out2@x& (0+255),b
  1631  00164C  0EBD               	movlw	low STR_4
  1632  00164E  6F64               	movwf	Lcd_Out2@buffer& (0+255),b
  1633  001650  0E08               	movlw	high STR_4
  1634  001652  6F65               	movwf	(Lcd_Out2@buffer+1)& (0+255),b
  1635  001654  0E01               	movlw	1
  1636  001656  EC09  F01A         	call	_Lcd_Out2
  1637                           
  1638                           ;main_014_Practice_CCP Comparacion_ADC.c: 188: if(PORTBbits.RB0==1){
  1639  00165A  A081               	btfss	3969,0,c	;volatile
  1640  00165C  D016               	goto	l123
  1641                           
  1642                           ;main_014_Practice_CCP Comparacion_ADC.c: 189: if(PORTBbits.RB1==1){
  1643  00165E  A281               	btfss	3969,1,c	;volatile
  1644  001660  D00A               	goto	l122
  1645                           
  1646                           ;main_014_Practice_CCP Comparacion_ADC.c: 190: delay=0;
  1647  001662  0E00               	movlw	0
  1648  001664  0101               	movlb	1	; () banked
  1649  001666  6FBD               	movwf	main@delay& (0+255),b
  1650  001668  0E00               	movlw	0
  1651  00166A  6FBE               	movwf	(main@delay+1)& (0+255),b
  1652  00166C  0E00               	movlw	0
  1653  00166E  6FBF               	movwf	(main@delay+2)& (0+255),b
  1654  001670  0E00               	movlw	0
  1655  001672  6FC0               	movwf	(main@delay+3)& (0+255),b
  1656                           
  1657                           ;main_014_Practice_CCP Comparacion_ADC.c: 191: }else{
  1658  001674  D00A               	goto	l123
  1659  001676                     l122:
  1660                           
  1661                           ;main_014_Practice_CCP Comparacion_ADC.c: 192: _delay((unsigned long)((1)*(48000000/4000
      +                          000.0)));
  1662                           
  1663                           ; BSR set to: 1
  1664  001676  0E04               	movlw	4
  1665  001678                     u4287:
  1666  001678  2EE8               	decfsz	wreg,f,c
  1667  00167A  D7FE               	bra	u4287
  1668                           
  1669                           ;main_014_Practice_CCP Comparacion_ADC.c: 193: delay++;
  1670  00167C  0E01               	movlw	1
  1671  00167E  0101               	movlb	1	; () banked
  1672  001680  27BD               	addwf	main@delay& (0+255),f,b
  1673  001682  0E00               	movlw	0
  1674  001684  23BE               	addwfc	(main@delay+1)& (0+255),f,b
  1675  001686  23BF               	addwfc	(main@delay+2)& (0+255),f,b
  1676  001688  23C0               	addwfc	(main@delay+3)& (0+255),f,b
  1677  00168A                     l123:
  1678                           
  1679                           ;main_014_Practice_CCP Comparacion_ADC.c: 194: }
  1680                           ;main_014_Practice_CCP Comparacion_ADC.c: 195: }
  1681                           ;main_014_Practice_CCP Comparacion_ADC.c: 199: FactorPotencia=(float)((((float)delay/100
      +                          0000.0)*360.0)/(1.0/60.0));
  1682                           
  1683                           ; BSR set to: 1
  1684                           
  1685                           ; BSR set to: 1
  1686  00168A  0E00               	movlw	0
  1687  00168C  0100               	movlb	0	; () banked
  1688  00168E  6F77               	movwf	___ftmul@f2& (0+255),b
  1689  001690  0EB4               	movlw	180
  1690  001692  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  1691  001694  0E43               	movlw	67
  1692  001696  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  1693  001698  0E24               	movlw	36
  1694  00169A  6FB4               	movwf	___ftdiv@f2& (0+255),b
  1695  00169C  0E74               	movlw	116
  1696  00169E  6FB5               	movwf	(___ftdiv@f2+1)& (0+255),b
  1697  0016A0  0E49               	movlw	73
  1698  0016A2  6FB6               	movwf	(___ftdiv@f2+2)& (0+255),b
  1699  0016A4  C1BD  F068         	movff	main@delay,___lltoft@c
  1700  0016A8  C1BE  F069         	movff	main@delay+1,___lltoft@c+1
  1701  0016AC  C1BF  F06A         	movff	main@delay+2,___lltoft@c+2
  1702  0016B0  C1C0  F06B         	movff	main@delay+3,___lltoft@c+3
  1703  0016B4  EC0B  F01C         	call	___lltoft	;wreg free
  1704  0016B8  C068  F0B1         	movff	?___lltoft,___ftdiv@f1
  1705  0016BC  C069  F0B2         	movff	?___lltoft+1,___ftdiv@f1+1
  1706  0016C0  C06A  F0B3         	movff	?___lltoft+2,___ftdiv@f1+2
  1707  0016C4  EC3A  F017         	call	___ftdiv	;wreg free
  1708  0016C8  C0B1  F074         	movff	?___ftdiv,___ftmul@f1
  1709  0016CC  C0B2  F075         	movff	?___ftdiv+1,___ftmul@f1+1
  1710  0016D0  C0B3  F076         	movff	?___ftdiv+2,___ftmul@f1+2
  1711  0016D4  EC45  F016         	call	___ftmul	;wreg free
  1712  0016D8  C074  F1C7         	movff	?___ftmul,_main$1423
  1713  0016DC  C075  F1C8         	movff	?___ftmul+1,_main$1423+1
  1714  0016E0  C076  F1C9         	movff	?___ftmul+2,_main$1423+2
  1715                           
  1716                           ;main_014_Practice_CCP Comparacion_ADC.c: 194: }
  1717                           ;main_014_Practice_CCP Comparacion_ADC.c: 195: }
  1718                           ;main_014_Practice_CCP Comparacion_ADC.c: 199: FactorPotencia=(float)((((float)delay/100
      +                          0000.0)*360.0)/(1.0/60.0));
  1719  0016E4  C1C7  F0B1         	movff	_main$1423,___ftdiv@f1
  1720  0016E8  C1C8  F0B2         	movff	_main$1423+1,___ftdiv@f1+1
  1721  0016EC  C1C9  F0B3         	movff	_main$1423+2,___ftdiv@f1+2
  1722  0016F0  0E89               	movlw	137
  1723  0016F2  0100               	movlb	0	; () banked
  1724  0016F4  6FB4               	movwf	___ftdiv@f2& (0+255),b
  1725  0016F6  0E88               	movlw	136
  1726  0016F8  6FB5               	movwf	(___ftdiv@f2+1)& (0+255),b
  1727  0016FA  0E3C               	movlw	60
  1728  0016FC  6FB6               	movwf	(___ftdiv@f2+2)& (0+255),b
  1729  0016FE  EC3A  F017         	call	___ftdiv	;wreg free
  1730  001702  C0B1  F1B1         	movff	?___ftdiv,main@FactorPotencia
  1731  001706  C0B2  F1B2         	movff	?___ftdiv+1,main@FactorPotencia+1
  1732  00170A  C0B3  F1B3         	movff	?___ftdiv+2,main@FactorPotencia+2
  1733                           
  1734                           ;main_014_Practice_CCP Comparacion_ADC.c: 200: factorPotenciaNum=cos(FactorPotencia);
  1735  00170E  C1B1  F0CD         	movff	main@FactorPotencia,cos@f
  1736  001712  C1B2  F0CE         	movff	main@FactorPotencia+1,cos@f+1
  1737  001716  C1B3  F0CF         	movff	main@FactorPotencia+2,cos@f+2
  1738  00171A  EC01  F019         	call	_cos	;wreg free
  1739  00171E  C0CD  F1B4         	movff	?_cos,main@factorPotenciaNum
  1740  001722  C0CE  F1B5         	movff	?_cos+1,main@factorPotenciaNum+1
  1741  001726  C0CF  F1B6         	movff	?_cos+2,main@factorPotenciaNum+2
  1742                           
  1743                           ;main_014_Practice_CCP Comparacion_ADC.c: 205: FPprom[loop]=factorPotenciaNum;
  1744  00172A  0101               	movlb	1	; () banked
  1745  00172C  51CC               	movf	main@loop& (0+255),w,b
  1746  00172E  0D03               	mullw	3
  1747  001730  0E00               	movlw	low main@FPprom
  1748  001732  24F3               	addwf	prodl,w,c
  1749  001734  6ED9               	movwf	fsr2l,c
  1750  001736  0E01               	movlw	high main@FPprom
  1751  001738  20F4               	addwfc	prodh,w,c
  1752  00173A  6EDA               	movwf	fsr2h,c
  1753  00173C  C1B4  FFDE         	movff	main@factorPotenciaNum,postinc2
  1754  001740  C1B5  FFDE         	movff	main@factorPotenciaNum+1,postinc2
  1755  001744  C1B6  FFDE         	movff	main@factorPotenciaNum+2,postinc2
  1756                           
  1757                           ; BSR set to: 1
  1758                           ;main_014_Practice_CCP Comparacion_ADC.c: 206: loop++;
  1759  001748  2BCC               	incf	main@loop& (0+255),f,b
  1760  00174A                     l119:
  1761                           
  1762                           ; BSR set to: 1
  1763  00174A  0E32               	movlw	50
  1764  00174C  0101               	movlb	1	; () banked
  1765  00174E  65CC               	cpfsgt	main@loop& (0+255),b
  1766  001750  D77A               	goto	l120
  1767                           
  1768                           ; BSR set to: 1
  1769                           ;main_014_Practice_CCP Comparacion_ADC.c: 207: }
  1770                           ;main_014_Practice_CCP Comparacion_ADC.c: 208: if(calculoFP==0){
  1771                           
  1772                           ; BSR set to: 1
  1773  001752  51CD               	movf	main@calculoFP& (0+255),w,b
  1774  001754  A4D8               	btfss	status,2,c
  1775  001756  D069               	goto	l125
  1776                           
  1777                           ; BSR set to: 1
  1778                           ;main_014_Practice_CCP Comparacion_ADC.c: 209: for(int i=0;i<51;i++){
  1779  001758  0E00               	movlw	0
  1780  00175A  6FD2               	movwf	(main@i+1)& (0+255),b
  1781  00175C  0E00               	movlw	0
  1782  00175E  6FD1               	movwf	main@i& (0+255),b
  1783  001760                     l4026:
  1784                           
  1785                           ; BSR set to: 1
  1786  001760  BFD2               	btfsc	(main@i+1)& (0+255),7,b
  1787  001762  D006               	goto	l126
  1788  001764  51D2               	movf	(main@i+1)& (0+255),w,b
  1789  001766  E12E               	bnz	l4036
  1790  001768  0E33               	movlw	51
  1791  00176A  5DD1               	subwf	main@i& (0+255),w,b
  1792  00176C  B0D8               	btfsc	status,0,c
  1793  00176E  D02A               	goto	u4230
  1794  001770                     l126:
  1795                           
  1796                           ; BSR set to: 1
  1797                           ;main_014_Practice_CCP Comparacion_ADC.c: 211: fppromtotal+=FPprom[i];
  1798                           
  1799                           ; BSR set to: 1
  1800  001770  C1C4  F08D         	movff	main@fppromtotal,___ftadd@f1
  1801  001774  C1C5  F08E         	movff	main@fppromtotal+1,___ftadd@f1+1
  1802  001778  C1C6  F08F         	movff	main@fppromtotal+2,___ftadd@f1+2
  1803  00177C  C1D1  F06E         	movff	main@i,___wmul@multiplier
  1804  001780  C1D2  F06F         	movff	main@i+1,___wmul@multiplier+1
  1805  001784  0E00               	movlw	0
  1806  001786  0100               	movlb	0	; () banked
  1807  001788  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1808  00178A  0E03               	movlw	3
  1809  00178C  6F70               	movwf	___wmul@multiplicand& (0+255),b
  1810  00178E  EC96  F01C         	call	___wmul	;wreg free
  1811  001792  0E00               	movlw	low main@FPprom
  1812  001794  0100               	movlb	0	; () banked
  1813  001796  256E               	addwf	?___wmul& (0+255),w,b
  1814  001798  6ED9               	movwf	fsr2l,c
  1815  00179A  0E01               	movlw	high main@FPprom
  1816  00179C  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  1817  00179E  6EDA               	movwf	fsr2h,c
  1818  0017A0  CFDE F090          	movff	postinc2,___ftadd@f2
  1819  0017A4  CFDE F091          	movff	postinc2,___ftadd@f2+1
  1820  0017A8  CFDD F092          	movff	postdec2,___ftadd@f2+2
  1821  0017AC  ECA4  F010         	call	___ftadd	;wreg free
  1822  0017B0  C08D  F1C4         	movff	?___ftadd,main@fppromtotal
  1823  0017B4  C08E  F1C5         	movff	?___ftadd+1,main@fppromtotal+1
  1824  0017B8  C08F  F1C6         	movff	?___ftadd+2,main@fppromtotal+2
  1825  0017BC  0101               	movlb	1	; () banked
  1826  0017BE  4BD1               	infsnz	main@i& (0+255),f,b
  1827  0017C0  2BD2               	incf	(main@i+1)& (0+255),f,b
  1828  0017C2  D7CE               	goto	l4026
  1829  0017C4                     u4230:
  1830  0017C4                     l4036:
  1831                           
  1832                           ; BSR set to: 1
  1833                           ;main_014_Practice_CCP Comparacion_ADC.c: 212: }
  1834                           ;main_014_Practice_CCP Comparacion_ADC.c: 213: fppromtotal2=fppromtotal/51.0;
  1835  0017C4  C1C4  F0B1         	movff	main@fppromtotal,___ftdiv@f1
  1836  0017C8  C1C5  F0B2         	movff	main@fppromtotal+1,___ftdiv@f1+1
  1837  0017CC  C1C6  F0B3         	movff	main@fppromtotal+2,___ftdiv@f1+2
  1838  0017D0  0E00               	movlw	0
  1839  0017D2  0100               	movlb	0	; () banked
  1840  0017D4  6FB4               	movwf	___ftdiv@f2& (0+255),b
  1841  0017D6  0E4C               	movlw	76
  1842  0017D8  6FB5               	movwf	(___ftdiv@f2+1)& (0+255),b
  1843  0017DA  0E42               	movlw	66
  1844  0017DC  6FB6               	movwf	(___ftdiv@f2+2)& (0+255),b
  1845  0017DE  EC3A  F017         	call	___ftdiv	;wreg free
  1846  0017E2  C0B1  F1B7         	movff	?___ftdiv,main@fppromtotal2
  1847  0017E6  C0B2  F1B8         	movff	?___ftdiv+1,main@fppromtotal2+1
  1848  0017EA  C0B3  F1B9         	movff	?___ftdiv+2,main@fppromtotal2+2
  1849                           
  1850                           ;main_014_Practice_CCP Comparacion_ADC.c: 215: sprintf(buffer1,"pF=%0.3f",fppromtotal2 )
      +                          ;
  1851  0017EE  0E9E               	movlw	low main@buffer1
  1852  0017F0  0100               	movlb	0	; () banked
  1853  0017F2  6FB1               	movwf	sprintf@sp& (0+255),b
  1854  0017F4  0E01               	movlw	high main@buffer1
  1855  0017F6  6FB2               	movwf	(sprintf@sp+1)& (0+255),b
  1856  0017F8  0EB4               	movlw	low STR_5
  1857  0017FA  6FB3               	movwf	sprintf@f& (0+255),b
  1858  0017FC  0E08               	movlw	high STR_5
  1859  0017FE  6FB4               	movwf	(sprintf@f+1)& (0+255),b
  1860  001800  C1B7  F0B5         	movff	main@fppromtotal2,?_sprintf+4
  1861  001804  C1B8  F0B6         	movff	main@fppromtotal2+1,?_sprintf+5
  1862  001808  C1B9  F0B7         	movff	main@fppromtotal2+2,?_sprintf+6
  1863  00180C  EC62  F004         	call	_sprintf	;wreg free
  1864                           
  1865                           ;main_014_Practice_CCP Comparacion_ADC.c: 216: Lcd_Out2(1, 0, buffer1);
  1866  001810  0E00               	movlw	0
  1867  001812  0100               	movlb	0	; () banked
  1868  001814  6F63               	movwf	Lcd_Out2@x& (0+255),b
  1869  001816  0E9E               	movlw	low main@buffer1
  1870  001818  6F64               	movwf	Lcd_Out2@buffer& (0+255),b
  1871  00181A  0E01               	movlw	high main@buffer1
  1872  00181C  6F65               	movwf	(Lcd_Out2@buffer+1)& (0+255),b
  1873  00181E  0E01               	movlw	1
  1874  001820  EC09  F01A         	call	_Lcd_Out2
  1875                           
  1876                           ;main_014_Practice_CCP Comparacion_ADC.c: 218: calculoFP=1;
  1877  001824  0E01               	movlw	1
  1878  001826  0101               	movlb	1	; () banked
  1879  001828  6FCD               	movwf	main@calculoFP& (0+255),b
  1880  00182A                     l125:
  1881                           
  1882                           ; BSR set to: 1
  1883                           ;main_014_Practice_CCP Comparacion_ADC.c: 219: }
  1884                           ;main_014_Practice_CCP Comparacion_ADC.c: 220: calculoFP=1;
  1885                           
  1886                           ; BSR set to: 1
  1887  00182A  0E01               	movlw	1
  1888  00182C  6FCD               	movwf	main@calculoFP& (0+255),b
  1889  00182E                     
  1890                           ; BSR set to: 1
  1891                           
  1892                           ; BSR set to: 1
  1893                           
  1894                           ; BSR set to: 1
  1895  00182E  51CD               	movf	main@calculoFP& (0+255),w,b
  1896  001830  A4D8               	btfss	status,2,c
  1897  001832  D6A8               	goto	l116
  1898  001834  D7FC               	goto	l129
  1899  001836                     __end_of_main:
  1900                           	opt stack 0
  1901                           tblptru	equ	0xFF8
  1902                           prodh	equ	0xFF4
  1903                           prodl	equ	0xFF3
  1904                           postinc0	equ	0xFEE
  1905                           wreg	equ	0xFE8
  1906                           postinc2	equ	0xFDE
  1907                           postdec2	equ	0xFDD
  1908                           fsr2h	equ	0xFDA
  1909                           fsr2l	equ	0xFD9
  1910                           status	equ	0xFD8
  1911                           
  1912 ;; *************** function _sqrt *****************
  1913 ;; Defined at:
  1914 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcsqrt.c"
  1915 ;; Parameters:    Size  Location     Type
  1916 ;;  a               3   96[BANK0 ] void 
  1917 ;; Auto vars:     Size  Location     Type
  1918 ;;  x               3  112[BANK0 ] void 
  1919 ;;  q               3  109[BANK0 ] void 
  1920 ;;  z               3  105[BANK0 ] void 
  1921 ;;  og              3  102[BANK0 ] void 
  1922 ;;  i               1  108[BANK0 ] unsigned char 
  1923 ;; Return value:  Size  Location     Type
  1924 ;;                  3   96[BANK0 ] unsigned char 
  1925 ;; Registers used:
  1926 ;;		wreg, status,2, status,0, cstack
  1927 ;; Tracked objects:
  1928 ;;		On entry : 0/0
  1929 ;;		On exit  : 0/0
  1930 ;;		Unchanged: 0/0
  1931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1932 ;;      Params:         0       3       0       0       0       0       0       0       0
  1933 ;;      Locals:         0      13       0       0       0       0       0       0       0
  1934 ;;      Temps:          0       3       0       0       0       0       0       0       0
  1935 ;;      Totals:         0      19       0       0       0       0       0       0       0
  1936 ;;Total ram usage:       19 bytes
  1937 ;; Hardware stack levels used:    1
  1938 ;; Hardware stack levels required when called:    6
  1939 ;; This function calls:
  1940 ;;		___ftge
  1941 ;;		___ftmul
  1942 ;;		___ftsub
  1943 ;; This function is called by:
  1944 ;;		_main
  1945 ;; This function uses a non-reentrant model
  1946 ;;
  1947                           
  1948                           	psect	text1
  1949  0022F6                     __ptext1:
  1950                           	opt stack 0
  1951  0022F6                     _sqrt:
  1952                           	opt stack 24
  1953                           
  1954                           ; BSR set to: 1
  1955                           ;incstack = 0
  1956  0022F6  0E00               	movlw	0
  1957  0022F8  0100               	movlb	0	; () banked
  1958  0022FA  6F60               	movwf	___ftge@ff1& (0+255),b
  1959  0022FC  0E00               	movlw	0
  1960  0022FE  6F61               	movwf	(___ftge@ff1+1)& (0+255),b
  1961  002300  0E00               	movlw	0
  1962  002302  6F62               	movwf	(___ftge@ff1+2)& (0+255),b
  1963  002304  C0C0  F063         	movff	sqrt@a,___ftge@ff2
  1964  002308  C0C1  F064         	movff	sqrt@a+1,___ftge@ff2+1
  1965  00230C  C0C2  F065         	movff	sqrt@a+2,___ftge@ff2+2
  1966  002310  EC55  F01A         	call	___ftge	;wreg free
  1967  002314  0100               	movlb	0	; () banked
  1968  002316  A0D8               	btfss	status,0,c
  1969  002318  D00D               	goto	l884
  1970                           
  1971                           ; BSR set to: 0
  1972  00231A  AFC2               	btfss	(sqrt@a+2)& (0+255),7,b
  1973  00231C  D004               	goto	l885
  1974                           
  1975                           ; BSR set to: 0
  1976  00231E  0E00               	movlw	0
  1977  002320  6FEE               	movwf	(_errno+1)& (0+255),b
  1978  002322  0E21               	movlw	33
  1979  002324  6FED               	movwf	_errno& (0+255),b
  1980  002326                     l885:
  1981                           
  1982                           ; BSR set to: 0
  1983  002326  0E00               	movlw	0
  1984  002328  6FC0               	movwf	?_sqrt& (0+255),b
  1985  00232A  0E00               	movlw	0
  1986  00232C  6FC1               	movwf	(?_sqrt+1)& (0+255),b
  1987  00232E  0E00               	movlw	0
  1988  002330  6FC2               	movwf	(?_sqrt+2)& (0+255),b
  1989                           
  1990                           ; BSR set to: 0
  1991  002332  0012               	return	
  1992  002334                     l884:
  1993                           
  1994                           ; BSR set to: 0
  1995  002334  C0C0  F0C9         	movff	sqrt@a,sqrt@z
  1996  002338  C0C1  F0CA         	movff	sqrt@a+1,sqrt@z+1
  1997  00233C  C0C2  F0CB         	movff	sqrt@a+2,sqrt@z+2
  1998                           
  1999                           ; BSR set to: 0
  2000  002340  C0C0  F0C3         	movff	sqrt@a,??_sqrt
  2001  002344  C0C1  F0C4         	movff	sqrt@a+1,??_sqrt+1
  2002  002348  C0C2  F0C5         	movff	sqrt@a+2,??_sqrt+2
  2003  00234C  1FC3               	comf	??_sqrt& (0+255),f,b
  2004  00234E  1FC4               	comf	(??_sqrt+1)& (0+255),f,b
  2005  002350  1FC5               	comf	(??_sqrt+2)& (0+255),f,b
  2006  002352  2BC3               	incf	??_sqrt& (0+255),f,b
  2007  002354  0E00               	movlw	0
  2008  002356  23C4               	addwfc	(??_sqrt+1)& (0+255),f,b
  2009  002358  23C5               	addwfc	(??_sqrt+2)& (0+255),f,b
  2010  00235A  0EC8               	movlw	200
  2011  00235C  25C3               	addwf	??_sqrt& (0+255),w,b
  2012  00235E  6FD0               	movwf	sqrt@x& (0+255),b
  2013  002360  0E6E               	movlw	110
  2014  002362  21C4               	addwfc	(??_sqrt+1)& (0+255),w,b
  2015  002364  6FD1               	movwf	(sqrt@x+1)& (0+255),b
  2016  002366  0EBE               	movlw	190
  2017  002368  21C5               	addwfc	(??_sqrt+2)& (0+255),w,b
  2018  00236A  6FD2               	movwf	(sqrt@x+2)& (0+255),b
  2019                           
  2020                           ; BSR set to: 0
  2021  00236C  90D8               	bcf	status,0,c
  2022  00236E  33D2               	rrcf	(sqrt@x+2)& (0+255),f,b
  2023  002370  33D1               	rrcf	(sqrt@x+1)& (0+255),f,b
  2024  002372  33D0               	rrcf	sqrt@x& (0+255),f,b
  2025                           
  2026                           ; BSR set to: 0
  2027  002374  0E00               	movlw	0
  2028  002376  5FC9               	subwf	sqrt@z& (0+255),f,b
  2029  002378  0E80               	movlw	128
  2030  00237A  5BCA               	subwfb	(sqrt@z+1)& (0+255),f,b
  2031  00237C  0E00               	movlw	0
  2032  00237E  5BCB               	subwfb	(sqrt@z+2)& (0+255),f,b
  2033                           
  2034                           ; BSR set to: 0
  2035  002380  0E04               	movlw	4
  2036  002382  6FCC               	movwf	sqrt@i& (0+255),b
  2037  002384                     
  2038                           ; BSR set to: 0
  2039                           
  2040                           ; BSR set to: 0
  2041  002384  C0D0  F0C6         	movff	sqrt@x,sqrt@og
  2042  002388  C0D1  F0C7         	movff	sqrt@x+1,sqrt@og+1
  2043  00238C  C0D2  F0C8         	movff	sqrt@x+2,sqrt@og+2
  2044                           
  2045                           ; BSR set to: 0
  2046  002390  C0D0  F074         	movff	sqrt@x,___ftmul@f1
  2047  002394  C0D1  F075         	movff	sqrt@x+1,___ftmul@f1+1
  2048  002398  C0D2  F076         	movff	sqrt@x+2,___ftmul@f1+2
  2049  00239C  C0C9  F077         	movff	sqrt@z,___ftmul@f2
  2050  0023A0  C0CA  F078         	movff	sqrt@z+1,___ftmul@f2+1
  2051  0023A4  C0CB  F079         	movff	sqrt@z+2,___ftmul@f2+2
  2052  0023A8  EC45  F016         	call	___ftmul	;wreg free
  2053  0023AC  C074  F0CD         	movff	?___ftmul,sqrt@q
  2054  0023B0  C075  F0CE         	movff	?___ftmul+1,sqrt@q+1
  2055  0023B4  C076  F0CF         	movff	?___ftmul+2,sqrt@q+2
  2056  0023B8  C0CD  F074         	movff	sqrt@q,___ftmul@f1
  2057  0023BC  C0CE  F075         	movff	sqrt@q+1,___ftmul@f1+1
  2058  0023C0  C0CF  F076         	movff	sqrt@q+2,___ftmul@f1+2
  2059  0023C4  C0D0  F077         	movff	sqrt@x,___ftmul@f2
  2060  0023C8  C0D1  F078         	movff	sqrt@x+1,___ftmul@f2+1
  2061  0023CC  C0D2  F079         	movff	sqrt@x+2,___ftmul@f2+2
  2062  0023D0  EC45  F016         	call	___ftmul	;wreg free
  2063  0023D4  C074  F0CD         	movff	?___ftmul,sqrt@q
  2064  0023D8  C075  F0CE         	movff	?___ftmul+1,sqrt@q+1
  2065  0023DC  C076  F0CF         	movff	?___ftmul+2,sqrt@q+2
  2066  0023E0  C0CD  F074         	movff	sqrt@q,___ftmul@f1
  2067  0023E4  C0CE  F075         	movff	sqrt@q+1,___ftmul@f1+1
  2068  0023E8  C0CF  F076         	movff	sqrt@q+2,___ftmul@f1+2
  2069  0023EC  C0D0  F077         	movff	sqrt@x,___ftmul@f2
  2070  0023F0  C0D1  F078         	movff	sqrt@x+1,___ftmul@f2+1
  2071  0023F4  C0D2  F079         	movff	sqrt@x+2,___ftmul@f2+2
  2072  0023F8  EC45  F016         	call	___ftmul	;wreg free
  2073  0023FC  C074  F0CD         	movff	?___ftmul,sqrt@q
  2074  002400  C075  F0CE         	movff	?___ftmul+1,sqrt@q+1
  2075  002404  C076  F0CF         	movff	?___ftmul+2,sqrt@q+2
  2076  002408  C0D0  F074         	movff	sqrt@x,___ftmul@f1
  2077  00240C  C0D1  F075         	movff	sqrt@x+1,___ftmul@f1+1
  2078  002410  C0D2  F076         	movff	sqrt@x+2,___ftmul@f1+2
  2079  002414  0E00               	movlw	0
  2080  002416  0100               	movlb	0	; () banked
  2081  002418  6F77               	movwf	___ftmul@f2& (0+255),b
  2082  00241A  0EC0               	movlw	192
  2083  00241C  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  2084  00241E  0E3F               	movlw	63
  2085  002420  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  2086  002422  EC45  F016         	call	___ftmul	;wreg free
  2087  002426  C074  F0D0         	movff	?___ftmul,sqrt@x
  2088  00242A  C075  F0D1         	movff	?___ftmul+1,sqrt@x+1
  2089  00242E  C076  F0D2         	movff	?___ftmul+2,sqrt@x+2
  2090  002432  C0D0  F0AB         	movff	sqrt@x,___ftsub@f1
  2091  002436  C0D1  F0AC         	movff	sqrt@x+1,___ftsub@f1+1
  2092  00243A  C0D2  F0AD         	movff	sqrt@x+2,___ftsub@f1+2
  2093  00243E  C0CD  F0AE         	movff	sqrt@q,___ftsub@f2
  2094  002442  C0CE  F0AF         	movff	sqrt@q+1,___ftsub@f2+1
  2095  002446  C0CF  F0B0         	movff	sqrt@q+2,___ftsub@f2+2
  2096  00244A  EC5C  F01C         	call	___ftsub	;wreg free
  2097  00244E  C0AB  F0D0         	movff	?___ftsub,sqrt@x
  2098  002452  C0AC  F0D1         	movff	?___ftsub+1,sqrt@x+1
  2099  002456  C0AD  F0D2         	movff	?___ftsub+2,sqrt@x+2
  2100  00245A  0100               	movlb	0	; () banked
  2101  00245C  2FCC               	decfsz	sqrt@i& (0+255),f,b
  2102  00245E  D792               	goto	l887
  2103                           
  2104                           ; BSR set to: 0
  2105                           
  2106                           ; BSR set to: 0
  2107  002460  C0D0  F074         	movff	sqrt@x,___ftmul@f1
  2108  002464  C0D1  F075         	movff	sqrt@x+1,___ftmul@f1+1
  2109  002468  C0D2  F076         	movff	sqrt@x+2,___ftmul@f1+2
  2110  00246C  C0C0  F077         	movff	sqrt@a,___ftmul@f2
  2111  002470  C0C1  F078         	movff	sqrt@a+1,___ftmul@f2+1
  2112  002474  C0C2  F079         	movff	sqrt@a+2,___ftmul@f2+2
  2113  002478  EC45  F016         	call	___ftmul	;wreg free
  2114  00247C  C074  F0C0         	movff	?___ftmul,?_sqrt
  2115  002480  C075  F0C1         	movff	?___ftmul+1,?_sqrt+1
  2116  002484  C076  F0C2         	movff	?___ftmul+2,?_sqrt+2
  2117  002488  0012               	return	
  2118  00248A                     __end_of_sqrt:
  2119                           	opt stack 0
  2120                           tblptru	equ	0xFF8
  2121                           prodh	equ	0xFF4
  2122                           prodl	equ	0xFF3
  2123                           postinc0	equ	0xFEE
  2124                           wreg	equ	0xFE8
  2125                           postinc2	equ	0xFDE
  2126                           postdec2	equ	0xFDD
  2127                           fsr2h	equ	0xFDA
  2128                           fsr2l	equ	0xFD9
  2129                           status	equ	0xFD8
  2130                           
  2131 ;; *************** function _sprintf *****************
  2132 ;; Defined at:
  2133 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  2134 ;; Parameters:    Size  Location     Type
  2135 ;;  sp              2   81[BANK0 ] PTR unsigned char 
  2136 ;;		 -> buffer2(20), main@buffer1(16), 
  2137 ;;  f               2   83[BANK0 ] PTR const unsigned char 
  2138 ;;		 -> STR_5(9), STR_3(11), STR_2(11), STR_1(12), 
  2139 ;; Auto vars:     Size  Location     Type
  2140 ;;  val             4  103[BANK0 ] unsigned long 
  2141 ;;  tmpval          4   99[BANK0 ] struct .
  2142 ;;  fval            3  113[BANK0 ] struct .
  2143 ;;  cp              3    0        PTR const unsigned char 
  2144 ;;  prec            2  116[BANK0 ] int 
  2145 ;;  width           2  111[BANK0 ] int 
  2146 ;;  flag            2  109[BANK0 ] unsigned short 
  2147 ;;  exp             2  107[BANK0 ] int 
  2148 ;;  ap              2   97[BANK0 ] PTR void [1]
  2149 ;;		 -> ?_sprintf(2), 
  2150 ;;  len             2    0        unsigned int 
  2151 ;;  c               1  118[BANK0 ] char 
  2152 ;;  d               1    0        unsigned char 
  2153 ;; Return value:  Size  Location     Type
  2154 ;;                  2   81[BANK0 ] int 
  2155 ;; Registers used:
  2156 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2157 ;; Tracked objects:
  2158 ;;		On entry : 0/0
  2159 ;;		On exit  : 0/0
  2160 ;;		Unchanged: 0/0
  2161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2162 ;;      Params:         0       7       0       0       0       0       0       0       0
  2163 ;;      Locals:         0      25       0       0       0       0       0       0       0
  2164 ;;      Temps:          0       6       0       0       0       0       0       0       0
  2165 ;;      Totals:         0      38       0       0       0       0       0       0       0
  2166 ;;Total ram usage:       38 bytes
  2167 ;; Hardware stack levels used:    1
  2168 ;; Hardware stack levels required when called:    6
  2169 ;; This function calls:
  2170 ;;		___awdiv
  2171 ;;		___ftadd
  2172 ;;		___ftge
  2173 ;;		___ftmul
  2174 ;;		___ftneg
  2175 ;;		___ftsub
  2176 ;;		___fttol
  2177 ;;		___lldiv
  2178 ;;		___llmod
  2179 ;;		___lltoft
  2180 ;;		___wmul
  2181 ;;		__div_to_l_
  2182 ;;		__tdiv_to_l_
  2183 ;;		_fround
  2184 ;;		_isdigit
  2185 ;;		_scale
  2186 ;; This function is called by:
  2187 ;;		_main
  2188 ;; This function uses a non-reentrant model
  2189 ;;
  2190                           
  2191                           	psect	text2
  2192  0008C4                     __ptext2:
  2193                           	opt stack 0
  2194  0008C4                     _sprintf:
  2195                           	opt stack 24
  2196                           
  2197                           ;doprnt.c: 494: va_list ap;
  2198                           ;doprnt.c: 499: signed char c;
  2199                           ;doprnt.c: 501: int width;
  2200                           ;doprnt.c: 504: int prec;
  2201                           ;doprnt.c: 508: unsigned short flag;
  2202                           ;doprnt.c: 515: char d;
  2203                           ;doprnt.c: 516: double fval;
  2204                           ;doprnt.c: 517: int exp;
  2205                           ;doprnt.c: 523: union {
  2206                           ;doprnt.c: 524: unsigned long vd;
  2207                           ;doprnt.c: 525: double integ;
  2208                           ;doprnt.c: 526: } tmpval;
  2209                           ;doprnt.c: 528: unsigned long val;
  2210                           ;doprnt.c: 529: unsigned len;
  2211                           ;doprnt.c: 530: const char * cp;
  2212                           ;doprnt.c: 533: *ap = __va_start();
  2213                           
  2214                           ;incstack = 0
  2215  0008C4  0EB5               	movlw	low (?_sprintf+4)
  2216  0008C6  0100               	movlb	0	; () banked
  2217  0008C8  6FC1               	movwf	sprintf@ap& (0+255),b
  2218  0008CA  0E00               	movlw	high (?_sprintf+4)
  2219  0008CC  6FC2               	movwf	(sprintf@ap+1)& (0+255),b
  2220                           
  2221                           ;doprnt.c: 536: while(c = *f++) {
  2222  0008CE  EF8B  F009         	goto	u3990
  2223  0008D2                     
  2224                           ; BSR set to: 0
  2225                           ;doprnt.c: 538: if(c != '%')
  2226                           
  2227                           ; BSR set to: 0
  2228  0008D2  0E25               	movlw	37
  2229  0008D4  19D6               	xorwf	sprintf@c& (0+255),w,b
  2230  0008D6  B4D8               	btfsc	status,2,c
  2231  0008D8  D00A               	goto	l170
  2232                           
  2233                           ; BSR set to: 0
  2234                           ;doprnt.c: 540: {
  2235                           ;doprnt.c: 541: ((*sp++ = (c)));
  2236  0008DA  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  2237  0008DE  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  2238  0008E2  C0D6  FFDF         	movff	sprintf@c,indf2
  2239                           
  2240                           ; BSR set to: 0
  2241  0008E6  4BB1               	infsnz	sprintf@sp& (0+255),f,b
  2242  0008E8  2BB2               	incf	(sprintf@sp+1)& (0+255),f,b
  2243                           
  2244                           ;doprnt.c: 542: continue;
  2245  0008EA  EF8B  F009         	goto	u3990
  2246  0008EE                     l170:
  2247                           
  2248                           ; BSR set to: 0
  2249                           ;doprnt.c: 543: }
  2250                           ;doprnt.c: 546: width = 0;
  2251                           
  2252                           ; BSR set to: 0
  2253  0008EE  0E00               	movlw	0
  2254  0008F0  6FD0               	movwf	(sprintf@width+1)& (0+255),b
  2255  0008F2  0E00               	movlw	0
  2256  0008F4  6FCF               	movwf	sprintf@width& (0+255),b
  2257                           
  2258                           ;doprnt.c: 548: flag = 0;
  2259  0008F6  0E00               	movlw	0
  2260  0008F8  6FCE               	movwf	(sprintf@flag+1)& (0+255),b
  2261  0008FA  0E00               	movlw	0
  2262  0008FC  6FCD               	movwf	sprintf@flag& (0+255),b
  2263                           
  2264                           ; BSR set to: 0
  2265                           ;doprnt.c: 551: switch(*f) {
  2266                           
  2267                           ;doprnt.c: 550: for(;;) {
  2268  0008FE  D004               	goto	l172
  2269  000900                     
  2270                           ;doprnt.c: 580: flag |= 0x04;
  2271                           
  2272                           ; BSR set to: 0
  2273  000900  0100               	movlb	0	; () banked
  2274  000902  85CD               	bsf	sprintf@flag& (0+255),2,b
  2275                           
  2276                           ;doprnt.c: 581: f++;
  2277  000904  4BB3               	infsnz	sprintf@f& (0+255),f,b
  2278  000906  2BB4               	incf	(sprintf@f+1)& (0+255),f,b
  2279  000908                     l172:
  2280                           
  2281                           ; BSR set to: 0
  2282  000908  C0B3  FFF6         	movff	sprintf@f,tblptrl
  2283  00090C  C0B4  FFF7         	movff	sprintf@f+1,tblptrh
  2284  000910                     	if	0	;tblptru may be non-zero
  2285  000910                     	endif
  2286  000910                     	if	0	;tblptru may be non-zero
  2287  000910                     	endif
  2288  000910  0008               	tblrd		*
  2289  000912  50F5               	movf	tablat,w,c
  2290                           
  2291                           ; Switch size 1, requested type "space"
  2292                           ; Number of cases is 1, Range of values is 48 to 48
  2293                           ; switch strategies available:
  2294                           ; Name         Instructions Cycles
  2295                           ; simple_byte            4     3 (average)
  2296                           ;	Chosen strategy is simple_byte
  2297  000914  0A30               	xorlw	48	; case 48
  2298  000916  B4D8               	btfsc	status,2,c
  2299  000918  D7F3               	goto	l173
  2300                           
  2301                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2302                           
  2303                           ;doprnt.c: 586: }
  2304                           
  2305                           ;doprnt.c: 585: break;
  2306  00091A  C0B3  FFF6         	movff	sprintf@f,tblptrl
  2307  00091E  C0B4  FFF7         	movff	sprintf@f+1,tblptrh
  2308  000922                     	if	0	;tblptru may be non-zero
  2309  000922                     	endif
  2310  000922                     	if	0	;tblptru may be non-zero
  2311  000922                     	endif
  2312  000922  0008               	tblrd		*
  2313  000924  50F5               	movf	tablat,w,c
  2314  000926  ECE2  F01C         	call	_isdigit
  2315  00092A  A0D8               	btfss	status,0,c
  2316  00092C  D035               	goto	u3460
  2317                           
  2318                           ;doprnt.c: 598: width = 0;
  2319  00092E  0E00               	movlw	0
  2320  000930  0100               	movlb	0	; () banked
  2321  000932  6FD0               	movwf	(sprintf@width+1)& (0+255),b
  2322  000934  0E00               	movlw	0
  2323  000936  6FCF               	movwf	sprintf@width& (0+255),b
  2324  000938                     
  2325                           ;doprnt.c: 600: width *= 10;
  2326                           
  2327                           ; BSR set to: 0
  2328  000938  C0CF  F06E         	movff	sprintf@width,___wmul@multiplier
  2329  00093C  C0D0  F06F         	movff	sprintf@width+1,___wmul@multiplier+1
  2330  000940  0E00               	movlw	0
  2331  000942  0100               	movlb	0	; () banked
  2332  000944  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2333  000946  0E0A               	movlw	10
  2334  000948  6F70               	movwf	___wmul@multiplicand& (0+255),b
  2335  00094A  EC96  F01C         	call	___wmul	;wreg free
  2336  00094E  C06E  F0CF         	movff	?___wmul,sprintf@width
  2337  000952  C06F  F0D0         	movff	?___wmul+1,sprintf@width+1
  2338                           
  2339                           ;doprnt.c: 601: width += *f++ - '0';
  2340  000956  0ED0               	movlw	208
  2341  000958  0100               	movlb	0	; () banked
  2342  00095A  6FB8               	movwf	??_sprintf& (0+255),b
  2343  00095C  0EFF               	movlw	255
  2344  00095E  6FB9               	movwf	(??_sprintf+1)& (0+255),b
  2345  000960  C0B3  FFF6         	movff	sprintf@f,tblptrl
  2346  000964  C0B4  FFF7         	movff	sprintf@f+1,tblptrh
  2347  000968                     	if	0	;tblptru may be non-zero
  2348  000968                     	endif
  2349  000968                     	if	0	;tblptru may be non-zero
  2350  000968                     	endif
  2351  000968  0008               	tblrd		*
  2352  00096A  50F5               	movf	tablat,w,c
  2353  00096C  6FBA               	movwf	(??_sprintf+2)& (0+255),b
  2354  00096E  6BBB               	clrf	(??_sprintf+3)& (0+255),b
  2355  000970  51B8               	movf	??_sprintf& (0+255),w,b
  2356  000972  27BA               	addwf	(??_sprintf+2)& (0+255),f,b
  2357  000974  51B9               	movf	(??_sprintf+1)& (0+255),w,b
  2358  000976  23BB               	addwfc	(??_sprintf+3)& (0+255),f,b
  2359  000978  51BA               	movf	(??_sprintf+2)& (0+255),w,b
  2360  00097A  27CF               	addwf	sprintf@width& (0+255),f,b
  2361  00097C  51BB               	movf	(??_sprintf+3)& (0+255),w,b
  2362  00097E  23D0               	addwfc	(sprintf@width+1)& (0+255),f,b
  2363                           
  2364                           ; BSR set to: 0
  2365  000980  4BB3               	infsnz	sprintf@f& (0+255),f,b
  2366  000982  2BB4               	incf	(sprintf@f+1)& (0+255),f,b
  2367                           
  2368                           ; BSR set to: 0
  2369                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2370  000984  C0B3  FFF6         	movff	sprintf@f,tblptrl
  2371  000988  C0B4  FFF7         	movff	sprintf@f+1,tblptrh
  2372  00098C                     	if	0	;tblptru may be non-zero
  2373  00098C                     	endif
  2374  00098C                     	if	0	;tblptru may be non-zero
  2375  00098C                     	endif
  2376  00098C  0008               	tblrd		*
  2377  00098E  50F5               	movf	tablat,w,c
  2378  000990  ECE2  F01C         	call	_isdigit
  2379  000994  B0D8               	btfsc	status,0,c
  2380  000996  D7D0               	goto	l178
  2381  000998                     u3460:
  2382                           
  2383                           ;doprnt.c: 608: }
  2384                           ;doprnt.c: 611: if(*f == '.') {
  2385  000998  C0B3  FFF6         	movff	sprintf@f,tblptrl
  2386  00099C  C0B4  FFF7         	movff	sprintf@f+1,tblptrh
  2387  0009A0                     	if	0	;tblptru may be non-zero
  2388  0009A0                     	endif
  2389  0009A0                     	if	0	;tblptru may be non-zero
  2390  0009A0                     	endif
  2391  0009A0  0008               	tblrd		*
  2392  0009A2  50F5               	movf	tablat,w,c
  2393  0009A4  0A2E               	xorlw	46
  2394  0009A6  A4D8               	btfss	status,2,c
  2395  0009A8  D031               	goto	l180
  2396                           
  2397                           ;doprnt.c: 612: flag |= 0x4000;
  2398  0009AA  0100               	movlb	0	; () banked
  2399  0009AC  8DCE               	bsf	(sprintf@flag+1)& (0+255),6,b
  2400                           
  2401                           ;doprnt.c: 613: f++;
  2402  0009AE  4BB3               	infsnz	sprintf@f& (0+255),f,b
  2403  0009B0  2BB4               	incf	(sprintf@f+1)& (0+255),f,b
  2404                           
  2405                           ; BSR set to: 0
  2406                           ;doprnt.c: 620: {
  2407                           ;doprnt.c: 621: prec = 0;
  2408  0009B2  0E00               	movlw	0
  2409  0009B4  6FD5               	movwf	(sprintf@prec+1)& (0+255),b
  2410  0009B6  0E00               	movlw	0
  2411  0009B8  6FD4               	movwf	sprintf@prec& (0+255),b
  2412                           
  2413                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  2414  0009BA  D01D               	goto	l181
  2415  0009BC                     
  2416                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  2417                           
  2418                           ; BSR set to: 0
  2419  0009BC  C0D4  F06E         	movff	sprintf@prec,___wmul@multiplier
  2420  0009C0  C0D5  F06F         	movff	sprintf@prec+1,___wmul@multiplier+1
  2421  0009C4  0E00               	movlw	0
  2422  0009C6  0100               	movlb	0	; () banked
  2423  0009C8  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2424  0009CA  0E0A               	movlw	10
  2425  0009CC  6F70               	movwf	___wmul@multiplicand& (0+255),b
  2426  0009CE  EC96  F01C         	call	___wmul	;wreg free
  2427  0009D2  C0B3  FFF6         	movff	sprintf@f,tblptrl
  2428  0009D6  C0B4  FFF7         	movff	sprintf@f+1,tblptrh
  2429  0009DA                     	if	0	;tblptru may be non-zero
  2430  0009DA                     	endif
  2431  0009DA                     	if	0	;tblptru may be non-zero
  2432  0009DA                     	endif
  2433  0009DA  0008               	tblrd		*
  2434  0009DC  50F5               	movf	tablat,w,c
  2435  0009DE  0100               	movlb	0	; () banked
  2436  0009E0  276E               	addwf	?___wmul& (0+255),f,b
  2437  0009E2  0E00               	movlw	0
  2438  0009E4  236F               	addwfc	(?___wmul+1)& (0+255),f,b
  2439  0009E6  0ED0               	movlw	208
  2440  0009E8  256E               	addwf	?___wmul& (0+255),w,b
  2441  0009EA  6FD4               	movwf	sprintf@prec& (0+255),b
  2442  0009EC  0EFF               	movlw	255
  2443  0009EE  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  2444  0009F0  6FD5               	movwf	(sprintf@prec+1)& (0+255),b
  2445                           
  2446                           ; BSR set to: 0
  2447  0009F2  4BB3               	infsnz	sprintf@f& (0+255),f,b
  2448  0009F4  2BB4               	incf	(sprintf@f+1)& (0+255),f,b
  2449  0009F6                     l181:
  2450                           
  2451                           ; BSR set to: 0
  2452                           
  2453                           ; BSR set to: 0
  2454  0009F6  C0B3  FFF6         	movff	sprintf@f,tblptrl
  2455  0009FA  C0B4  FFF7         	movff	sprintf@f+1,tblptrh
  2456  0009FE                     	if	0	;tblptru may be non-zero
  2457  0009FE                     	endif
  2458  0009FE                     	if	0	;tblptru may be non-zero
  2459  0009FE                     	endif
  2460  0009FE  0008               	tblrd		*
  2461  000A00  50F5               	movf	tablat,w,c
  2462  000A02  ECE2  F01C         	call	_isdigit
  2463  000A06  A0D8               	btfss	status,0,c
  2464  000A08  D00A               	goto	l185
  2465  000A0A  D7D8               	goto	l182
  2466  000A0C                     l180:
  2467                           
  2468                           ;doprnt.c: 626: prec = 0;
  2469  000A0C  0E00               	movlw	0
  2470  000A0E  0100               	movlb	0	; () banked
  2471  000A10  6FD5               	movwf	(sprintf@prec+1)& (0+255),b
  2472  000A12  0E00               	movlw	0
  2473  000A14  6FD4               	movwf	sprintf@prec& (0+255),b
  2474                           
  2475                           ; BSR set to: 0
  2476                           ;doprnt.c: 628: flag |= 0x1000;
  2477  000A16  89CE               	bsf	(sprintf@flag+1)& (0+255),4,b
  2478                           
  2479                           ; BSR set to: 0
  2480                           ;doprnt.c: 630: }
  2481                           ;doprnt.c: 635: switch(c = *f++) {
  2482  000A18  D002               	goto	l185
  2483  000A1A                     
  2484                           ; BSR set to: 0
  2485                           ;doprnt.c: 663: flag |= 0x400;
  2486                           
  2487                           ; BSR set to: 0
  2488  000A1A  85CE               	bsf	(sprintf@flag+1)& (0+255),2,b
  2489                           
  2490                           ; BSR set to: 0
  2491                           ;doprnt.c: 698: case 'i':
  2492                           ;doprnt.c: 699: break;
  2493                           
  2494                           ; BSR set to: 0
  2495                           
  2496                           ;doprnt.c: 697: case 'd':
  2497                           
  2498                           ;doprnt.c: 664: break;
  2499  000A1C  D019               	goto	l189
  2500  000A1E                     l185:
  2501                           
  2502                           ; BSR set to: 0
  2503  000A1E  C0B3  FFF6         	movff	sprintf@f,tblptrl
  2504  000A22  C0B4  FFF7         	movff	sprintf@f+1,tblptrh
  2505  000A26  0100               	movlb	0	; () banked
  2506  000A28  4BB3               	infsnz	sprintf@f& (0+255),f,b
  2507  000A2A  2BB4               	incf	(sprintf@f+1)& (0+255),f,b
  2508  000A2C                     	if	0	;tblptru may be non-zero
  2509  000A2C                     	endif
  2510  000A2C                     	if	0	;tblptru may be non-zero
  2511  000A2C                     	endif
  2512  000A2C  0008               	tblrd		*
  2513  000A2E  CFF5 F0D6          	movff	tablat,sprintf@c
  2514  000A32  51D6               	movf	sprintf@c& (0+255),w,b
  2515                           
  2516                           ; Switch size 1, requested type "space"
  2517                           ; Number of cases is 4, Range of values is 0 to 105
  2518                           ; switch strategies available:
  2519                           ; Name         Instructions Cycles
  2520                           ; simple_byte           13     7 (average)
  2521                           ;	Chosen strategy is simple_byte
  2522  000A34  0A00               	xorlw	0	; case 0
  2523  000A36  B4D8               	btfsc	status,2,c
  2524  000A38  EF98  F009         	goto	u4000
  2525  000A3C  0A64               	xorlw	100	; case 100
  2526  000A3E  B4D8               	btfsc	status,2,c
  2527  000A40  D007               	goto	l189
  2528  000A42  0A02               	xorlw	2	; case 102
  2529  000A44  B4D8               	btfsc	status,2,c
  2530  000A46  D7E9               	goto	l188
  2531  000A48  0A0F               	xorlw	15	; case 105
  2532  000A4A  A4D8               	btfss	status,2,c
  2533  000A4C  EF8B  F009         	goto	u3990
  2534  000A50                     l189:
  2535                           
  2536                           ; BSR set to: 0
  2537                           ;doprnt.c: 825: if(flag & (0x700)) {
  2538                           
  2539                           ; BSR set to: 0
  2540  000A50  0E07               	movlw	7
  2541  000A52  15CE               	andwf	(sprintf@flag+1)& (0+255),w,b
  2542  000A54  B4D8               	btfsc	status,2,c
  2543  000A56  D329               	goto	l193
  2544                           
  2545                           ; BSR set to: 0
  2546                           ;doprnt.c: 827: if(flag & 0x1000)
  2547  000A58  A9CE               	btfss	(sprintf@flag+1)& (0+255),4,b
  2548  000A5A  D004               	goto	l194
  2549                           
  2550                           ; BSR set to: 0
  2551                           ;doprnt.c: 829: prec = 6;
  2552  000A5C  0E00               	movlw	0
  2553  000A5E  6FD5               	movwf	(sprintf@prec+1)& (0+255),b
  2554  000A60  0E06               	movlw	6
  2555  000A62  6FD4               	movwf	sprintf@prec& (0+255),b
  2556  000A64                     l194:
  2557                           
  2558                           ; BSR set to: 0
  2559                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  2560                           
  2561                           ; BSR set to: 0
  2562  000A64  C0C1  FFD9         	movff	sprintf@ap,fsr2l
  2563  000A68  C0C2  FFDA         	movff	sprintf@ap+1,fsr2h
  2564  000A6C  CFDE F0D1          	movff	postinc2,sprintf@fval
  2565  000A70  CFDE F0D2          	movff	postinc2,sprintf@fval+1
  2566  000A74  CFDD F0D3          	movff	postdec2,sprintf@fval+2
  2567                           
  2568                           ; BSR set to: 0
  2569  000A78  0E03               	movlw	3
  2570  000A7A  27C1               	addwf	sprintf@ap& (0+255),f,b
  2571  000A7C  0E00               	movlw	0
  2572  000A7E  23C2               	addwfc	(sprintf@ap+1)& (0+255),f,b
  2573                           
  2574                           ; BSR set to: 0
  2575                           ;doprnt.c: 831: if(fval < 0.0) {
  2576  000A80  AFD3               	btfss	(sprintf@fval+2)& (0+255),7,b
  2577  000A82  D011               	goto	l195
  2578                           
  2579                           ; BSR set to: 0
  2580                           ;doprnt.c: 832: fval = -fval;
  2581  000A84  C0D1  F060         	movff	sprintf@fval,___ftneg@f1
  2582  000A88  C0D2  F061         	movff	sprintf@fval+1,___ftneg@f1+1
  2583  000A8C  C0D3  F062         	movff	sprintf@fval+2,___ftneg@f1+2
  2584  000A90  ECAA  F01C         	call	___ftneg	;wreg free
  2585  000A94  C060  F0D1         	movff	?___ftneg,sprintf@fval
  2586  000A98  C061  F0D2         	movff	?___ftneg+1,sprintf@fval+1
  2587  000A9C  C062  F0D3         	movff	?___ftneg+2,sprintf@fval+2
  2588                           
  2589                           ;doprnt.c: 833: flag |= 0x03;
  2590  000AA0  0E03               	movlw	3
  2591  000AA2  0100               	movlb	0	; () banked
  2592  000AA4  13CD               	iorwf	sprintf@flag& (0+255),f,b
  2593  000AA6                     l195:
  2594                           
  2595                           ; BSR set to: 0
  2596                           ;doprnt.c: 834: }
  2597                           ;doprnt.c: 835: exp = 0;
  2598                           
  2599                           ; BSR set to: 0
  2600  000AA6  0E00               	movlw	0
  2601  000AA8  6FCC               	movwf	(sprintf@exp+1)& (0+255),b
  2602  000AAA  0E00               	movlw	0
  2603  000AAC  6FCB               	movwf	sprintf@exp& (0+255),b
  2604                           
  2605                           ; BSR set to: 0
  2606                           ;doprnt.c: 836: if( fval!=0) {
  2607  000AAE  51D1               	movf	sprintf@fval& (0+255),w,b
  2608  000AB0  11D2               	iorwf	(sprintf@fval+1)& (0+255),w,b
  2609  000AB2  11D3               	iorwf	(sprintf@fval+2)& (0+255),w,b
  2610  000AB4  B4D8               	btfsc	status,2,c
  2611  000AB6  D088               	goto	l200
  2612                           
  2613                           ; BSR set to: 0
  2614                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  2615  000AB8  0E82               	movlw	130
  2616  000ABA  6FB8               	movwf	??_sprintf& (0+255),b
  2617  000ABC  0EFF               	movlw	255
  2618  000ABE  6FB9               	movwf	(??_sprintf+1)& (0+255),b
  2619  000AC0  C0D1  F0BA         	movff	sprintf@fval,??_sprintf+2
  2620  000AC4  C0D2  F0BB         	movff	sprintf@fval+1,??_sprintf+3
  2621  000AC8  C0D3  F0BC         	movff	sprintf@fval+2,??_sprintf+4
  2622  000ACC  C0D4  F0BD         	movff	sprintf@fval+3,??_sprintf+5
  2623  000AD0  0E10               	movlw	16
  2624  000AD2  D005               	goto	u3530
  2625  000AD4                     u3535:
  2626  000AD4  90D8               	bcf	status,0,c
  2627  000AD6  33BD               	rrcf	(??_sprintf+5)& (0+255),f,b
  2628  000AD8  33BC               	rrcf	(??_sprintf+4)& (0+255),f,b
  2629  000ADA  33BB               	rrcf	(??_sprintf+3)& (0+255),f,b
  2630  000ADC  33BA               	rrcf	(??_sprintf+2)& (0+255),f,b
  2631  000ADE                     u3530:
  2632  000ADE  2EE8               	decfsz	wreg,f,c
  2633  000AE0  D7F9               	goto	u3535
  2634  000AE2  51BA               	movf	(??_sprintf+2)& (0+255),w,b
  2635  000AE4  25B8               	addwf	??_sprintf& (0+255),w,b
  2636  000AE6  6FCB               	movwf	sprintf@exp& (0+255),b
  2637  000AE8  0E00               	movlw	0
  2638  000AEA  21B9               	addwfc	(??_sprintf+1)& (0+255),w,b
  2639  000AEC  6FCC               	movwf	(sprintf@exp+1)& (0+255),b
  2640                           
  2641                           ; BSR set to: 0
  2642                           ;doprnt.c: 838: exp--;
  2643  000AEE  07CB               	decf	sprintf@exp& (0+255),f,b
  2644  000AF0  A0D8               	btfss	status,0,c
  2645  000AF2  07CC               	decf	(sprintf@exp+1)& (0+255),f,b
  2646                           
  2647                           ; BSR set to: 0
  2648                           ;doprnt.c: 839: exp *= 3;
  2649  000AF4  C0CB  F06E         	movff	sprintf@exp,___wmul@multiplier
  2650  000AF8  C0CC  F06F         	movff	sprintf@exp+1,___wmul@multiplier+1
  2651  000AFC  0E00               	movlw	0
  2652  000AFE  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2653  000B00  0E03               	movlw	3
  2654  000B02  6F70               	movwf	___wmul@multiplicand& (0+255),b
  2655  000B04  EC96  F01C         	call	___wmul	;wreg free
  2656  000B08  C06E  F0CB         	movff	?___wmul,sprintf@exp
  2657  000B0C  C06F  F0CC         	movff	?___wmul+1,sprintf@exp+1
  2658                           
  2659                           ;doprnt.c: 840: exp /= 10;
  2660  000B10  C0CB  F066         	movff	sprintf@exp,___awdiv@dividend
  2661  000B14  C0CC  F067         	movff	sprintf@exp+1,___awdiv@dividend+1
  2662  000B18  0E00               	movlw	0
  2663  000B1A  0100               	movlb	0	; () banked
  2664  000B1C  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  2665  000B1E  0E0A               	movlw	10
  2666  000B20  6F68               	movwf	___awdiv@divisor& (0+255),b
  2667  000B22  EC9E  F01A         	call	___awdiv	;wreg free
  2668  000B26  C066  F0CB         	movff	?___awdiv,sprintf@exp
  2669  000B2A  C067  F0CC         	movff	?___awdiv+1,sprintf@exp+1
  2670                           
  2671                           ;doprnt.c: 841: if(exp < 0)
  2672  000B2E  0100               	movlb	0	; () banked
  2673  000B30  AFCC               	btfss	(sprintf@exp+1)& (0+255),7,b
  2674  000B32  D003               	goto	l197
  2675                           
  2676                           ; BSR set to: 0
  2677                           ;doprnt.c: 842: exp--;
  2678  000B34  07CB               	decf	sprintf@exp& (0+255),f,b
  2679  000B36  A0D8               	btfss	status,0,c
  2680  000B38  07CC               	decf	(sprintf@exp+1)& (0+255),f,b
  2681  000B3A                     l197:
  2682                           
  2683                           ; BSR set to: 0
  2684                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  2685                           
  2686                           ; BSR set to: 0
  2687  000B3A  51CB               	movf	sprintf@exp& (0+255),w,b
  2688  000B3C  0800               	sublw	0
  2689  000B3E  EC1B  F00C         	call	_scale
  2690  000B42  C083  F0C3         	movff	?_scale,sprintf@tmpval
  2691  000B46  C084  F0C4         	movff	?_scale+1,sprintf@tmpval+1
  2692  000B4A  C085  F0C5         	movff	?_scale+2,sprintf@tmpval+2
  2693                           
  2694                           ;doprnt.c: 847: tmpval.integ *= fval;
  2695  000B4E  C0C3  F074         	movff	sprintf@tmpval,___ftmul@f1
  2696  000B52  C0C4  F075         	movff	sprintf@tmpval+1,___ftmul@f1+1
  2697  000B56  C0C5  F076         	movff	sprintf@tmpval+2,___ftmul@f1+2
  2698  000B5A  C0D1  F077         	movff	sprintf@fval,___ftmul@f2
  2699  000B5E  C0D2  F078         	movff	sprintf@fval+1,___ftmul@f2+1
  2700  000B62  C0D3  F079         	movff	sprintf@fval+2,___ftmul@f2+2
  2701  000B66  EC45  F016         	call	___ftmul	;wreg free
  2702  000B6A  C074  F0C3         	movff	?___ftmul,sprintf@tmpval
  2703  000B6E  C075  F0C4         	movff	?___ftmul+1,sprintf@tmpval+1
  2704  000B72  C076  F0C5         	movff	?___ftmul+2,sprintf@tmpval+2
  2705                           
  2706                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  2707  000B76  C0C3  F060         	movff	sprintf@tmpval,___ftge@ff1
  2708  000B7A  C0C4  F061         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2709  000B7E  C0C5  F062         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2710  000B82  0E00               	movlw	0
  2711  000B84  0100               	movlb	0	; () banked
  2712  000B86  6F63               	movwf	___ftge@ff2& (0+255),b
  2713  000B88  0E80               	movlw	128
  2714  000B8A  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  2715  000B8C  0E3F               	movlw	63
  2716  000B8E  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  2717  000B90  EC55  F01A         	call	___ftge	;wreg free
  2718  000B94  0100               	movlb	0	; () banked
  2719  000B96  B0D8               	btfsc	status,0,c
  2720  000B98  D004               	goto	l198
  2721                           
  2722                           ; BSR set to: 0
  2723                           ;doprnt.c: 849: exp--;
  2724  000B9A  07CB               	decf	sprintf@exp& (0+255),f,b
  2725  000B9C  A0D8               	btfss	status,0,c
  2726  000B9E  07CC               	decf	(sprintf@exp+1)& (0+255),f,b
  2727  000BA0  D013               	goto	l200
  2728  000BA2                     l198:
  2729                           
  2730                           ; BSR set to: 0
  2731                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  2732                           
  2733                           ; BSR set to: 0
  2734  000BA2  C0C3  F060         	movff	sprintf@tmpval,___ftge@ff1
  2735  000BA6  C0C4  F061         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2736  000BAA  C0C5  F062         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2737  000BAE  0E00               	movlw	0
  2738  000BB0  6F63               	movwf	___ftge@ff2& (0+255),b
  2739  000BB2  0E20               	movlw	32
  2740  000BB4  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  2741  000BB6  0E41               	movlw	65
  2742  000BB8  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  2743  000BBA  EC55  F01A         	call	___ftge	;wreg free
  2744  000BBE  0100               	movlb	0	; () banked
  2745  000BC0  A0D8               	btfss	status,0,c
  2746  000BC2  D002               	goto	l200
  2747                           
  2748                           ; BSR set to: 0
  2749                           ;doprnt.c: 851: exp++;
  2750  000BC4  4BCB               	infsnz	sprintf@exp& (0+255),f,b
  2751  000BC6  2BCC               	incf	(sprintf@exp+1)& (0+255),f,b
  2752  000BC8                     l200:
  2753                           
  2754                           ; BSR set to: 0
  2755                           ;doprnt.c: 852: }
  2756                           ;doprnt.c: 1112: if(prec <= 12)
  2757                           
  2758                           ; BSR set to: 0
  2759                           
  2760                           ; BSR set to: 0
  2761                           
  2762                           ; BSR set to: 0
  2763  000BC8  BFD5               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2764  000BCA  D006               	goto	u3570
  2765  000BCC  51D5               	movf	(sprintf@prec+1)& (0+255),w,b
  2766  000BCE  E11B               	bnz	l3504
  2767  000BD0  0E0D               	movlw	13
  2768  000BD2  5DD4               	subwf	sprintf@prec& (0+255),w,b
  2769  000BD4  B0D8               	btfsc	status,0,c
  2770  000BD6  D017               	goto	l201
  2771  000BD8                     u3570:
  2772                           
  2773                           ; BSR set to: 0
  2774                           ;doprnt.c: 1113: fval += fround(prec);
  2775  000BD8  C0D1  F08D         	movff	sprintf@fval,___ftadd@f1
  2776  000BDC  C0D2  F08E         	movff	sprintf@fval+1,___ftadd@f1+1
  2777  000BE0  C0D3  F08F         	movff	sprintf@fval+2,___ftadd@f1+2
  2778  000BE4  51D4               	movf	sprintf@prec& (0+255),w,b
  2779  000BE6  EC37  F00E         	call	_fround
  2780  000BEA  C083  F090         	movff	?_fround,___ftadd@f2
  2781  000BEE  C084  F091         	movff	?_fround+1,___ftadd@f2+1
  2782  000BF2  C085  F092         	movff	?_fround+2,___ftadd@f2+2
  2783  000BF6  ECA4  F010         	call	___ftadd	;wreg free
  2784  000BFA  C08D  F0D1         	movff	?___ftadd,sprintf@fval
  2785  000BFE  C08E  F0D2         	movff	?___ftadd+1,sprintf@fval+1
  2786  000C02  C08F  F0D3         	movff	?___ftadd+2,sprintf@fval+2
  2787  000C06                     l201:
  2788  000C06                     l3504:
  2789                           
  2790                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2791  000C06  0100               	movlb	0	; () banked
  2792  000C08  BFCC               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2793  000C0A  D006               	goto	u3580
  2794  000C0C  51CC               	movf	(sprintf@exp+1)& (0+255),w,b
  2795  000C0E  E11F               	bnz	l3512
  2796  000C10  0E0A               	movlw	10
  2797  000C12  5DCB               	subwf	sprintf@exp& (0+255),w,b
  2798  000C14  B0D8               	btfsc	status,0,c
  2799  000C16  D01B               	goto	u3610
  2800  000C18                     u3580:
  2801                           
  2802                           ; BSR set to: 0
  2803  000C18  51D1               	movf	sprintf@fval& (0+255),w,b
  2804  000C1A  11D2               	iorwf	(sprintf@fval+1)& (0+255),w,b
  2805  000C1C  11D3               	iorwf	(sprintf@fval+2)& (0+255),w,b
  2806  000C1E  B4D8               	btfsc	status,2,c
  2807  000C20  D054               	goto	l202
  2808                           
  2809                           ; BSR set to: 0
  2810  000C22  C0D1  F08A         	movff	sprintf@fval,___fttol@f1
  2811  000C26  C0D2  F08B         	movff	sprintf@fval+1,___fttol@f1+1
  2812  000C2A  C0D3  F08C         	movff	sprintf@fval+2,___fttol@f1+2
  2813  000C2E  ECC9  F015         	call	___fttol	;wreg free
  2814  000C32  0100               	movlb	0	; () banked
  2815  000C34  518A               	movf	?___fttol& (0+255),w,b
  2816  000C36  118B               	iorwf	(?___fttol+1)& (0+255),w,b
  2817  000C38  118C               	iorwf	(?___fttol+2)& (0+255),w,b
  2818  000C3A  118D               	iorwf	(?___fttol+3)& (0+255),w,b
  2819  000C3C  B4D8               	btfsc	status,2,c
  2820                           
  2821                           ; BSR set to: 0
  2822  000C3E  BFCC               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2823  000C40  D044               	goto	l202
  2824  000C42  51CC               	movf	(sprintf@exp+1)& (0+255),w,b
  2825  000C44  E104               	bnz	l3512
  2826  000C46  0E02               	movlw	2
  2827  000C48  5DCB               	subwf	sprintf@exp& (0+255),w,b
  2828  000C4A  A0D8               	btfss	status,0,c
  2829  000C4C  D03E               	goto	l202
  2830  000C4E                     u3610:
  2831  000C4E                     l3512:
  2832                           
  2833                           ; BSR set to: 0
  2834                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2835  000C4E  C0C3  F060         	movff	sprintf@tmpval,___ftge@ff1
  2836  000C52  C0C4  F061         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2837  000C56  C0C5  F062         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2838  000C5A  0E70               	movlw	112
  2839  000C5C  6F63               	movwf	___ftge@ff2& (0+255),b
  2840  000C5E  0E89               	movlw	137
  2841  000C60  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  2842  000C62  0E40               	movlw	64
  2843  000C64  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  2844  000C66  EC55  F01A         	call	___ftge	;wreg free
  2845  000C6A  0100               	movlb	0	; () banked
  2846  000C6C  B0D8               	btfsc	status,0,c
  2847  000C6E  D002               	goto	l205
  2848                           
  2849                           ; BSR set to: 0
  2850                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2851  000C70  0EF7               	movlw	247
  2852  000C72  D001               	goto	L1
  2853  000C74                     l205:
  2854                           
  2855                           ; BSR set to: 0
  2856                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2857                           
  2858                           ; BSR set to: 0
  2859  000C74  0EF8               	movlw	248
  2860  000C76                     L1:
  2861  000C76  27CB               	addwf	sprintf@exp& (0+255),f,b
  2862  000C78  0EFF               	movlw	255
  2863  000C7A  23CC               	addwfc	(sprintf@exp+1)& (0+255),f,b
  2864                           
  2865                           ; BSR set to: 0
  2866                           ;doprnt.c: 1124: }
  2867                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  2868                           
  2869                           ; BSR set to: 0
  2870  000C7C  51CB               	movf	sprintf@exp& (0+255),w,b
  2871  000C7E  EC1B  F00C         	call	_scale
  2872  000C82  C083  F0C3         	movff	?_scale,sprintf@tmpval
  2873  000C86  C084  F0C4         	movff	?_scale+1,sprintf@tmpval+1
  2874  000C8A  C085  F0C5         	movff	?_scale+2,sprintf@tmpval+2
  2875                           
  2876                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2877  000C8E  C0D1  F060         	movff	sprintf@fval,__tdiv_to_l_@f1
  2878  000C92  C0D2  F061         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  2879  000C96  C0D3  F062         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  2880  000C9A  C0C3  F063         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  2881  000C9E  C0C4  F064         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  2882  000CA2  C0C5  F065         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  2883  000CA6  ECE5  F012         	call	__tdiv_to_l_	;wreg free
  2884  000CAA  C060  F0C7         	movff	?__tdiv_to_l_,sprintf@val
  2885  000CAE  C061  F0C8         	movff	?__tdiv_to_l_+1,sprintf@val+1
  2886  000CB2  C062  F0C9         	movff	?__tdiv_to_l_+2,sprintf@val+2
  2887  000CB6  C063  F0CA         	movff	?__tdiv_to_l_+3,sprintf@val+3
  2888                           
  2889                           ;doprnt.c: 1129: fval = 0.0;
  2890  000CBA  0E00               	movlw	0
  2891  000CBC  0100               	movlb	0	; () banked
  2892  000CBE  6FD1               	movwf	sprintf@fval& (0+255),b
  2893  000CC0  0E00               	movlw	0
  2894  000CC2  6FD2               	movwf	(sprintf@fval+1)& (0+255),b
  2895  000CC4  0E00               	movlw	0
  2896  000CC6  6FD3               	movwf	(sprintf@fval+2)& (0+255),b
  2897                           
  2898                           ;doprnt.c: 1130: } else {
  2899  000CC8  D033               	goto	l211
  2900  000CCA                     l202:
  2901                           
  2902                           ; BSR set to: 0
  2903                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2904                           
  2905                           ; BSR set to: 0
  2906  000CCA  C0D1  F08A         	movff	sprintf@fval,___fttol@f1
  2907  000CCE  C0D2  F08B         	movff	sprintf@fval+1,___fttol@f1+1
  2908  000CD2  C0D3  F08C         	movff	sprintf@fval+2,___fttol@f1+2
  2909  000CD6  ECC9  F015         	call	___fttol	;wreg free
  2910  000CDA  C08A  F0C7         	movff	?___fttol,sprintf@val
  2911  000CDE  C08B  F0C8         	movff	?___fttol+1,sprintf@val+1
  2912  000CE2  C08C  F0C9         	movff	?___fttol+2,sprintf@val+2
  2913  000CE6  C08D  F0CA         	movff	?___fttol+3,sprintf@val+3
  2914                           
  2915                           ;doprnt.c: 1132: fval -= (double)val;
  2916  000CEA  C0D1  F0AB         	movff	sprintf@fval,___ftsub@f1
  2917  000CEE  C0D2  F0AC         	movff	sprintf@fval+1,___ftsub@f1+1
  2918  000CF2  C0D3  F0AD         	movff	sprintf@fval+2,___ftsub@f1+2
  2919  000CF6  C0C7  F068         	movff	sprintf@val,___lltoft@c
  2920  000CFA  C0C8  F069         	movff	sprintf@val+1,___lltoft@c+1
  2921  000CFE  C0C9  F06A         	movff	sprintf@val+2,___lltoft@c+2
  2922  000D02  C0CA  F06B         	movff	sprintf@val+3,___lltoft@c+3
  2923  000D06  EC0B  F01C         	call	___lltoft	;wreg free
  2924  000D0A  C068  F0AE         	movff	?___lltoft,___ftsub@f2
  2925  000D0E  C069  F0AF         	movff	?___lltoft+1,___ftsub@f2+1
  2926  000D12  C06A  F0B0         	movff	?___lltoft+2,___ftsub@f2+2
  2927  000D16  EC5C  F01C         	call	___ftsub	;wreg free
  2928  000D1A  C0AB  F0D1         	movff	?___ftsub,sprintf@fval
  2929  000D1E  C0AC  F0D2         	movff	?___ftsub+1,sprintf@fval+1
  2930  000D22  C0AD  F0D3         	movff	?___ftsub+2,sprintf@fval+2
  2931                           
  2932                           ;doprnt.c: 1133: exp = 0;
  2933  000D26  0E00               	movlw	0
  2934  000D28  0100               	movlb	0	; () banked
  2935  000D2A  6FCC               	movwf	(sprintf@exp+1)& (0+255),b
  2936  000D2C  0E00               	movlw	0
  2937  000D2E  6FCB               	movwf	sprintf@exp& (0+255),b
  2938  000D30                     l211:
  2939                           
  2940                           ; BSR set to: 0
  2941                           ;doprnt.c: 1134: }
  2942                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2943                           
  2944                           ; BSR set to: 0
  2945  000D30  0E01               	movlw	1
  2946  000D32  6FD6               	movwf	sprintf@c& (0+255),b
  2947  000D34                     l3532:
  2948                           
  2949                           ; BSR set to: 0
  2950  000D34  0E0A               	movlw	10
  2951  000D36  19D6               	xorwf	sprintf@c& (0+255),w,b
  2952  000D38  B4D8               	btfsc	status,2,c
  2953  000D3A  D018               	goto	u3650
  2954                           
  2955                           ; BSR set to: 0
  2956                           ;doprnt.c: 1137: if(val < dpowers[c])
  2957                           
  2958                           ; BSR set to: 0
  2959                           
  2960                           ; BSR set to: 0
  2961  000D3C  51D6               	movf	sprintf@c& (0+255),w,b
  2962  000D3E  0D04               	mullw	4
  2963  000D40  0E01               	movlw	low _dpowers
  2964  000D42  24F3               	addwf	prodl,w,c
  2965  000D44  6EF6               	movwf	tblptrl,c
  2966  000D46  0E08               	movlw	high _dpowers
  2967  000D48  20F4               	addwfc	prodh,w,c
  2968  000D4A  6EF7               	movwf	tblptrh,c
  2969  000D4C                     	if	0	;There are less than 3 active tblptr bytes
  2970  000D4C                     	endif
  2971  000D4C  0009               	tblrd		*+
  2972  000D4E  50F5               	movf	tablat,w,c
  2973  000D50  5DC7               	subwf	sprintf@val& (0+255),w,b
  2974  000D52  0009               	tblrd		*+
  2975  000D54  50F5               	movf	tablat,w,c
  2976  000D56  59C8               	subwfb	(sprintf@val+1)& (0+255),w,b
  2977  000D58  0009               	tblrd		*+
  2978  000D5A  50F5               	movf	tablat,w,c
  2979  000D5C  59C9               	subwfb	(sprintf@val+2)& (0+255),w,b
  2980  000D5E  0009               	tblrd		*+
  2981  000D60  50F5               	movf	tablat,w,c
  2982  000D62  59CA               	subwfb	(sprintf@val+3)& (0+255),w,b
  2983  000D64  A0D8               	btfss	status,0,c
  2984  000D66  D002               	goto	u3650
  2985                           
  2986                           ; BSR set to: 0
  2987                           
  2988                           ; BSR set to: 0
  2989                           
  2990                           ; BSR set to: 0
  2991                           ;doprnt.c: 1138: break;
  2992  000D68  2BD6               	incf	sprintf@c& (0+255),f,b
  2993  000D6A  D7E4               	goto	l3532
  2994  000D6C                     u3650:
  2995                           
  2996                           ; BSR set to: 0
  2997                           ;doprnt.c: 1142: width -= prec + c + exp;
  2998                           
  2999                           ; BSR set to: 0
  3000  000D6C  C0D6  F0B8         	movff	sprintf@c,??_sprintf
  3001  000D70  6BB9               	clrf	(??_sprintf+1)& (0+255),b
  3002  000D72  BFB8               	btfsc	??_sprintf& (0+255),7,b
  3003  000D74  07B9               	decf	(??_sprintf+1)& (0+255),f,b
  3004  000D76  51D4               	movf	sprintf@prec& (0+255),w,b
  3005  000D78  27B8               	addwf	??_sprintf& (0+255),f,b
  3006  000D7A  51D5               	movf	(sprintf@prec+1)& (0+255),w,b
  3007  000D7C  23B9               	addwfc	(??_sprintf+1)& (0+255),f,b
  3008  000D7E  51CB               	movf	sprintf@exp& (0+255),w,b
  3009  000D80  27B8               	addwf	??_sprintf& (0+255),f,b
  3010  000D82  51CC               	movf	(sprintf@exp+1)& (0+255),w,b
  3011  000D84  23B9               	addwfc	(??_sprintf+1)& (0+255),f,b
  3012  000D86  51B8               	movf	??_sprintf& (0+255),w,b
  3013  000D88  5FCF               	subwf	sprintf@width& (0+255),f,b
  3014  000D8A  51B9               	movf	(??_sprintf+1)& (0+255),w,b
  3015  000D8C  5BD0               	subwfb	(sprintf@width+1)& (0+255),f,b
  3016                           
  3017                           ;doprnt.c: 1143: if(
  3018                           ;doprnt.c: 1147: prec)
  3019  000D8E  51D4               	movf	sprintf@prec& (0+255),w,b
  3020  000D90  11D5               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3021  000D92  B4D8               	btfsc	status,2,c
  3022  000D94  D003               	goto	l215
  3023                           
  3024                           ; BSR set to: 0
  3025                           ;doprnt.c: 1148: width--;
  3026  000D96  07CF               	decf	sprintf@width& (0+255),f,b
  3027  000D98  A0D8               	btfss	status,0,c
  3028  000D9A  07D0               	decf	(sprintf@width+1)& (0+255),f,b
  3029  000D9C                     l215:
  3030                           
  3031                           ; BSR set to: 0
  3032                           ;doprnt.c: 1149: if(flag & 0x03)
  3033                           
  3034                           ; BSR set to: 0
  3035  000D9C  0E03               	movlw	3
  3036  000D9E  15CD               	andwf	sprintf@flag& (0+255),w,b
  3037  000DA0  6FB8               	movwf	??_sprintf& (0+255),b
  3038  000DA2  0E00               	movlw	0
  3039  000DA4  15CE               	andwf	(sprintf@flag+1)& (0+255),w,b
  3040  000DA6  6FB9               	movwf	(??_sprintf+1)& (0+255),b
  3041  000DA8  51B8               	movf	??_sprintf& (0+255),w,b
  3042  000DAA  11B9               	iorwf	(??_sprintf+1)& (0+255),w,b
  3043  000DAC  B4D8               	btfsc	status,2,c
  3044  000DAE  D003               	goto	l216
  3045                           
  3046                           ; BSR set to: 0
  3047                           ;doprnt.c: 1150: width--;
  3048  000DB0  07CF               	decf	sprintf@width& (0+255),f,b
  3049  000DB2  A0D8               	btfss	status,0,c
  3050  000DB4  07D0               	decf	(sprintf@width+1)& (0+255),f,b
  3051  000DB6                     l216:
  3052                           
  3053                           ; BSR set to: 0
  3054                           ;doprnt.c: 1153: if(flag & 0x04) {
  3055                           
  3056                           ; BSR set to: 0
  3057  000DB6  A5CD               	btfss	sprintf@flag& (0+255),2,b
  3058  000DB8  D031               	goto	l223
  3059                           
  3060                           ; BSR set to: 0
  3061                           ;doprnt.c: 1157: if(flag & 0x03)
  3062  000DBA  0E03               	movlw	3
  3063  000DBC  15CD               	andwf	sprintf@flag& (0+255),w,b
  3064  000DBE  6FB8               	movwf	??_sprintf& (0+255),b
  3065  000DC0  0E00               	movlw	0
  3066  000DC2  15CE               	andwf	(sprintf@flag+1)& (0+255),w,b
  3067  000DC4  6FB9               	movwf	(??_sprintf+1)& (0+255),b
  3068  000DC6  51B8               	movf	??_sprintf& (0+255),w,b
  3069  000DC8  11B9               	iorwf	(??_sprintf+1)& (0+255),w,b
  3070  000DCA  B4D8               	btfsc	status,2,c
  3071  000DCC  D014               	goto	l219
  3072                           
  3073                           ; BSR set to: 0
  3074                           ;doprnt.c: 1159: ((*sp++ = ('-')));
  3075  000DCE  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  3076  000DD2  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  3077  000DD6  0E2D               	movlw	45
  3078  000DD8  6EDF               	movwf	indf2,c
  3079                           
  3080                           ; BSR set to: 0
  3081  000DDA  4BB1               	infsnz	sprintf@sp& (0+255),f,b
  3082  000DDC  2BB2               	incf	(sprintf@sp+1)& (0+255),f,b
  3083                           
  3084                           ; BSR set to: 0
  3085                           ;doprnt.c: 1168: while(width > 0) {
  3086  000DDE  D00B               	goto	l219
  3087  000DE0                     l3560:
  3088                           
  3089                           ; BSR set to: 0
  3090                           ;doprnt.c: 1169: ((*sp++ = ('0')));
  3091  000DE0  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  3092  000DE4  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  3093  000DE8  0E30               	movlw	48
  3094  000DEA  6EDF               	movwf	indf2,c
  3095                           
  3096                           ; BSR set to: 0
  3097  000DEC  4BB1               	infsnz	sprintf@sp& (0+255),f,b
  3098  000DEE  2BB2               	incf	(sprintf@sp+1)& (0+255),f,b
  3099                           
  3100                           ; BSR set to: 0
  3101                           ;doprnt.c: 1170: width--;
  3102  000DF0  07CF               	decf	sprintf@width& (0+255),f,b
  3103  000DF2  A0D8               	btfss	status,0,c
  3104  000DF4  07D0               	decf	(sprintf@width+1)& (0+255),f,b
  3105  000DF6                     l219:
  3106                           
  3107                           ; BSR set to: 0
  3108                           
  3109                           ; BSR set to: 0
  3110  000DF6  BFD0               	btfsc	(sprintf@width+1)& (0+255),7,b
  3111  000DF8  D073               	goto	l227
  3112  000DFA  51D0               	movf	(sprintf@width+1)& (0+255),w,b
  3113  000DFC  E1F1               	bnz	l3560
  3114  000DFE  05CF               	decf	sprintf@width& (0+255),w,b
  3115  000E00  A0D8               	btfss	status,0,c
  3116  000E02  D06E               	goto	l227
  3117  000E04  D7ED               	goto	l220
  3118  000E06                     l3568:
  3119                           
  3120                           ; BSR set to: 0
  3121                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  3122  000E06  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  3123  000E0A  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  3124  000E0E  0E20               	movlw	32
  3125  000E10  6EDF               	movwf	indf2,c
  3126                           
  3127                           ; BSR set to: 0
  3128  000E12  4BB1               	infsnz	sprintf@sp& (0+255),f,b
  3129  000E14  2BB2               	incf	(sprintf@sp+1)& (0+255),f,b
  3130                           
  3131                           ; BSR set to: 0
  3132                           ;doprnt.c: 1182: width--;
  3133  000E16  07CF               	decf	sprintf@width& (0+255),f,b
  3134  000E18  A0D8               	btfss	status,0,c
  3135  000E1A  07D0               	decf	(sprintf@width+1)& (0+255),f,b
  3136  000E1C                     l223:
  3137                           
  3138                           ; BSR set to: 0
  3139                           
  3140                           ; BSR set to: 0
  3141  000E1C  BFD0               	btfsc	(sprintf@width+1)& (0+255),7,b
  3142  000E1E  D005               	goto	u3710
  3143  000E20  51D0               	movf	(sprintf@width+1)& (0+255),w,b
  3144  000E22  E1F1               	bnz	l3568
  3145  000E24  05CF               	decf	sprintf@width& (0+255),w,b
  3146  000E26  B0D8               	btfsc	status,0,c
  3147  000E28  D7EE               	goto	l224
  3148  000E2A                     u3710:
  3149                           
  3150                           ; BSR set to: 0
  3151                           ;doprnt.c: 1183: }
  3152                           ;doprnt.c: 1188: if(flag & 0x03)
  3153                           
  3154                           ; BSR set to: 0
  3155  000E2A  0E03               	movlw	3
  3156  000E2C  15CD               	andwf	sprintf@flag& (0+255),w,b
  3157  000E2E  6FB8               	movwf	??_sprintf& (0+255),b
  3158  000E30  0E00               	movlw	0
  3159  000E32  15CE               	andwf	(sprintf@flag+1)& (0+255),w,b
  3160  000E34  6FB9               	movwf	(??_sprintf+1)& (0+255),b
  3161  000E36  51B8               	movf	??_sprintf& (0+255),w,b
  3162  000E38  11B9               	iorwf	(??_sprintf+1)& (0+255),w,b
  3163  000E3A  B4D8               	btfsc	status,2,c
  3164  000E3C  D051               	goto	l227
  3165                           
  3166                           ; BSR set to: 0
  3167                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  3168  000E3E  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  3169  000E42  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  3170  000E46  0E2D               	movlw	45
  3171  000E48  D048               	goto	L2
  3172  000E4A                     
  3173                           ; BSR set to: 0
  3174                           ;doprnt.c: 1200: {
  3175                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  3176                           
  3177                           ; BSR set to: 0
  3178  000E4A  C0C7  F060         	movff	sprintf@val,___lldiv@dividend
  3179  000E4E  C0C8  F061         	movff	sprintf@val+1,___lldiv@dividend+1
  3180  000E52  C0C9  F062         	movff	sprintf@val+2,___lldiv@dividend+2
  3181  000E56  C0CA  F063         	movff	sprintf@val+3,___lldiv@dividend+3
  3182  000E5A  51D6               	movf	sprintf@c& (0+255),w,b
  3183  000E5C  0D04               	mullw	4
  3184  000E5E  0E01               	movlw	low _dpowers
  3185  000E60  24F3               	addwf	prodl,w,c
  3186  000E62  6EF6               	movwf	tblptrl,c
  3187  000E64  0E08               	movlw	high _dpowers
  3188  000E66  20F4               	addwfc	prodh,w,c
  3189  000E68  6EF7               	movwf	tblptrh,c
  3190  000E6A                     	if	0	;There are less than 3 active tblptr bytes
  3191  000E6A                     	endif
  3192  000E6A  0009               	tblrd		*+
  3193  000E6C  CFF5 F064          	movff	tablat,___lldiv@divisor
  3194  000E70  0009               	tblrd		*+
  3195  000E72  CFF5 F065          	movff	tablat,___lldiv@divisor+1
  3196  000E76  0009               	tblrd		*+
  3197  000E78  CFF5 F066          	movff	tablat,___lldiv@divisor+2
  3198  000E7C  000A               	tblrd		*-
  3199  000E7E  CFF5 F067          	movff	tablat,___lldiv@divisor+3
  3200  000E82  ECE1  F01A         	call	___lldiv	;wreg free
  3201  000E86  C060  F0C3         	movff	?___lldiv,sprintf@tmpval
  3202  000E8A  C061  F0C4         	movff	?___lldiv+1,sprintf@tmpval+1
  3203  000E8E  C062  F0C5         	movff	?___lldiv+2,sprintf@tmpval+2
  3204  000E92  C063  F0C6         	movff	?___lldiv+3,sprintf@tmpval+3
  3205                           
  3206                           ;doprnt.c: 1202: tmpval.vd %= 10;
  3207  000E96  C0C3  F06D         	movff	sprintf@tmpval,___llmod@dividend
  3208  000E9A  C0C4  F06E         	movff	sprintf@tmpval+1,___llmod@dividend+1
  3209  000E9E  C0C5  F06F         	movff	sprintf@tmpval+2,___llmod@dividend+2
  3210  000EA2  C0C6  F070         	movff	sprintf@tmpval+3,___llmod@dividend+3
  3211  000EA6  0E0A               	movlw	10
  3212  000EA8  0100               	movlb	0	; () banked
  3213  000EAA  6F71               	movwf	___llmod@divisor& (0+255),b
  3214  000EAC  0E00               	movlw	0
  3215  000EAE  6F72               	movwf	(___llmod@divisor+1)& (0+255),b
  3216  000EB0  0E00               	movlw	0
  3217  000EB2  6F73               	movwf	(___llmod@divisor+2)& (0+255),b
  3218  000EB4  0E00               	movlw	0
  3219  000EB6  6F74               	movwf	(___llmod@divisor+3)& (0+255),b
  3220  000EB8  ECD7  F01B         	call	___llmod	;wreg free
  3221  000EBC  C06D  F0C3         	movff	?___llmod,sprintf@tmpval
  3222  000EC0  C06E  F0C4         	movff	?___llmod+1,sprintf@tmpval+1
  3223  000EC4  C06F  F0C5         	movff	?___llmod+2,sprintf@tmpval+2
  3224  000EC8  C070  F0C6         	movff	?___llmod+3,sprintf@tmpval+3
  3225                           
  3226                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  3227  000ECC  0100               	movlb	0	; () banked
  3228  000ECE  51C3               	movf	sprintf@tmpval& (0+255),w,b
  3229  000ED0  0F30               	addlw	48
  3230  000ED2  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  3231  000ED6  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  3232  000EDA                     L2:
  3233  000EDA  6EDF               	movwf	indf2,c
  3234                           
  3235                           ; BSR set to: 0
  3236  000EDC  4BB1               	infsnz	sprintf@sp& (0+255),f,b
  3237  000EDE  2BB2               	incf	(sprintf@sp+1)& (0+255),f,b
  3238  000EE0                     l227:
  3239                           
  3240                           ; BSR set to: 0
  3241                           
  3242                           ; BSR set to: 0
  3243  000EE0  07D6               	decf	sprintf@c& (0+255),f,b
  3244  000EE2  29D6               	incf	sprintf@c& (0+255),w,b
  3245  000EE4  B4D8               	btfsc	status,2,c
  3246  000EE6  D00C               	goto	l230
  3247  000EE8  D7B0               	goto	l228
  3248  000EEA                     l3592:
  3249                           
  3250                           ; BSR set to: 0
  3251                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  3252  000EEA  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  3253  000EEE  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  3254  000EF2  0E30               	movlw	48
  3255  000EF4  6EDF               	movwf	indf2,c
  3256                           
  3257                           ; BSR set to: 0
  3258  000EF6  4BB1               	infsnz	sprintf@sp& (0+255),f,b
  3259  000EF8  2BB2               	incf	(sprintf@sp+1)& (0+255),f,b
  3260                           
  3261                           ; BSR set to: 0
  3262                           ;doprnt.c: 1209: exp--;
  3263  000EFA  07CB               	decf	sprintf@exp& (0+255),f,b
  3264  000EFC  A0D8               	btfss	status,0,c
  3265  000EFE  07CC               	decf	(sprintf@exp+1)& (0+255),f,b
  3266  000F00                     l230:
  3267                           
  3268                           ; BSR set to: 0
  3269                           
  3270                           ; BSR set to: 0
  3271  000F00  BFCC               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3272  000F02  D005               	goto	u3740
  3273  000F04  51CC               	movf	(sprintf@exp+1)& (0+255),w,b
  3274  000F06  E1F1               	bnz	l3592
  3275  000F08  05CB               	decf	sprintf@exp& (0+255),w,b
  3276  000F0A  B0D8               	btfsc	status,0,c
  3277  000F0C  D7EE               	goto	l231
  3278  000F0E                     u3740:
  3279                           
  3280                           ; BSR set to: 0
  3281                           ;doprnt.c: 1210: }
  3282                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  3283                           
  3284                           ; BSR set to: 0
  3285  000F0E  BFD5               	btfsc	(sprintf@prec+1)& (0+255),7,b
  3286  000F10  D009               	goto	l233
  3287  000F12  51D5               	movf	(sprintf@prec+1)& (0+255),w,b
  3288  000F14  E104               	bnz	u3750
  3289  000F16  0E09               	movlw	9
  3290  000F18  5DD4               	subwf	sprintf@prec& (0+255),w,b
  3291  000F1A  A0D8               	btfss	status,0,c
  3292  000F1C  D003               	goto	l233
  3293  000F1E                     u3750:
  3294                           
  3295                           ; BSR set to: 0
  3296                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  3297  000F1E  0E08               	movlw	8
  3298  000F20  6FD6               	movwf	sprintf@c& (0+255),b
  3299  000F22  D002               	goto	l234
  3300  000F24                     l233:
  3301                           
  3302                           ; BSR set to: 0
  3303                           ;doprnt.c: 1213: else
  3304                           ;doprnt.c: 1214: c = prec;
  3305  000F24  C0D4  F0D6         	movff	sprintf@prec,sprintf@c
  3306  000F28                     l234:
  3307                           
  3308                           ; BSR set to: 0
  3309                           ;doprnt.c: 1215: prec -= c;
  3310                           
  3311                           ; BSR set to: 0
  3312  000F28  51D6               	movf	sprintf@c& (0+255),w,b
  3313  000F2A  5FD4               	subwf	sprintf@prec& (0+255),f,b
  3314  000F2C  0E00               	movlw	0
  3315  000F2E  BFD6               	btfsc	sprintf@c& (0+255),7,b
  3316  000F30  0EFF               	movlw	255
  3317  000F32  5BD5               	subwfb	(sprintf@prec+1)& (0+255),f,b
  3318                           
  3319                           ; BSR set to: 0
  3320                           ;doprnt.c: 1219: if(c)
  3321  000F34  51D6               	movf	sprintf@c& (0+255),w,b
  3322  000F36  B4D8               	btfsc	status,2,c
  3323  000F38  D008               	goto	l235
  3324                           
  3325                           ; BSR set to: 0
  3326                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  3327  000F3A  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  3328  000F3E  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  3329  000F42  0E2E               	movlw	46
  3330  000F44  6EDF               	movwf	indf2,c
  3331                           
  3332                           ; BSR set to: 0
  3333  000F46  4BB1               	infsnz	sprintf@sp& (0+255),f,b
  3334  000F48  2BB2               	incf	(sprintf@sp+1)& (0+255),f,b
  3335  000F4A                     l235:
  3336                           
  3337                           ; BSR set to: 0
  3338                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3339                           
  3340                           ; BSR set to: 0
  3341  000F4A  51D6               	movf	sprintf@c& (0+255),w,b
  3342  000F4C  EC1B  F00C         	call	_scale
  3343  000F50  C083  F0BE         	movff	?_scale,_sprintf$1427
  3344  000F54  C084  F0BF         	movff	?_scale+1,_sprintf$1427+1
  3345  000F58  C085  F0C0         	movff	?_scale+2,_sprintf$1427+2
  3346                           
  3347                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3348  000F5C  C0D1  F077         	movff	sprintf@fval,___ftmul@f2
  3349  000F60  C0D2  F078         	movff	sprintf@fval+1,___ftmul@f2+1
  3350  000F64  C0D3  F079         	movff	sprintf@fval+2,___ftmul@f2+2
  3351  000F68  C0BE  F074         	movff	_sprintf$1427,___ftmul@f1
  3352  000F6C  C0BF  F075         	movff	_sprintf$1427+1,___ftmul@f1+1
  3353  000F70  C0C0  F076         	movff	_sprintf$1427+2,___ftmul@f1+2
  3354  000F74  EC45  F016         	call	___ftmul	;wreg free
  3355  000F78  C074  F08A         	movff	?___ftmul,___fttol@f1
  3356  000F7C  C075  F08B         	movff	?___ftmul+1,___fttol@f1+1
  3357  000F80  C076  F08C         	movff	?___ftmul+2,___fttol@f1+2
  3358  000F84  ECC9  F015         	call	___fttol	;wreg free
  3359  000F88  C08A  F0C7         	movff	?___fttol,sprintf@val
  3360  000F8C  C08B  F0C8         	movff	?___fttol+1,sprintf@val+1
  3361  000F90  C08C  F0C9         	movff	?___fttol+2,sprintf@val+2
  3362  000F94  C08D  F0CA         	movff	?___fttol+3,sprintf@val+3
  3363                           
  3364                           ;doprnt.c: 1228: while(c--) {
  3365  000F98  D072               	goto	l236
  3366  000F9A                     
  3367                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  3368  000F9A  C0C7  F060         	movff	sprintf@val,___lldiv@dividend
  3369  000F9E  C0C8  F061         	movff	sprintf@val+1,___lldiv@dividend+1
  3370  000FA2  C0C9  F062         	movff	sprintf@val+2,___lldiv@dividend+2
  3371  000FA6  C0CA  F063         	movff	sprintf@val+3,___lldiv@dividend+3
  3372  000FAA  0100               	movlb	0	; () banked
  3373  000FAC  51D6               	movf	sprintf@c& (0+255),w,b
  3374  000FAE  0D04               	mullw	4
  3375  000FB0  0E01               	movlw	low _dpowers
  3376  000FB2  24F3               	addwf	prodl,w,c
  3377  000FB4  6EF6               	movwf	tblptrl,c
  3378  000FB6  0E08               	movlw	high _dpowers
  3379  000FB8  20F4               	addwfc	prodh,w,c
  3380  000FBA  6EF7               	movwf	tblptrh,c
  3381  000FBC                     	if	0	;There are less than 3 active tblptr bytes
  3382  000FBC                     	endif
  3383  000FBC  0009               	tblrd		*+
  3384  000FBE  CFF5 F064          	movff	tablat,___lldiv@divisor
  3385  000FC2  0009               	tblrd		*+
  3386  000FC4  CFF5 F065          	movff	tablat,___lldiv@divisor+1
  3387  000FC8  0009               	tblrd		*+
  3388  000FCA  CFF5 F066          	movff	tablat,___lldiv@divisor+2
  3389  000FCE  000A               	tblrd		*-
  3390  000FD0  CFF5 F067          	movff	tablat,___lldiv@divisor+3
  3391  000FD4  ECE1  F01A         	call	___lldiv	;wreg free
  3392  000FD8  C060  F0C3         	movff	?___lldiv,sprintf@tmpval
  3393  000FDC  C061  F0C4         	movff	?___lldiv+1,sprintf@tmpval+1
  3394  000FE0  C062  F0C5         	movff	?___lldiv+2,sprintf@tmpval+2
  3395  000FE4  C063  F0C6         	movff	?___lldiv+3,sprintf@tmpval+3
  3396                           
  3397                           ;doprnt.c: 1230: tmpval.vd %= 10;
  3398  000FE8  C0C3  F06D         	movff	sprintf@tmpval,___llmod@dividend
  3399  000FEC  C0C4  F06E         	movff	sprintf@tmpval+1,___llmod@dividend+1
  3400  000FF0  C0C5  F06F         	movff	sprintf@tmpval+2,___llmod@dividend+2
  3401  000FF4  C0C6  F070         	movff	sprintf@tmpval+3,___llmod@dividend+3
  3402  000FF8  0E0A               	movlw	10
  3403  000FFA  0100               	movlb	0	; () banked
  3404  000FFC  6F71               	movwf	___llmod@divisor& (0+255),b
  3405  000FFE  0E00               	movlw	0
  3406  001000  6F72               	movwf	(___llmod@divisor+1)& (0+255),b
  3407  001002  0E00               	movlw	0
  3408  001004  6F73               	movwf	(___llmod@divisor+2)& (0+255),b
  3409  001006  0E00               	movlw	0
  3410  001008  6F74               	movwf	(___llmod@divisor+3)& (0+255),b
  3411  00100A  ECD7  F01B         	call	___llmod	;wreg free
  3412  00100E  C06D  F0C3         	movff	?___llmod,sprintf@tmpval
  3413  001012  C06E  F0C4         	movff	?___llmod+1,sprintf@tmpval+1
  3414  001016  C06F  F0C5         	movff	?___llmod+2,sprintf@tmpval+2
  3415  00101A  C070  F0C6         	movff	?___llmod+3,sprintf@tmpval+3
  3416                           
  3417                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  3418  00101E  0100               	movlb	0	; () banked
  3419  001020  51C3               	movf	sprintf@tmpval& (0+255),w,b
  3420  001022  0F30               	addlw	48
  3421  001024  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  3422  001028  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  3423  00102C  6EDF               	movwf	indf2,c
  3424                           
  3425                           ; BSR set to: 0
  3426  00102E  4BB1               	infsnz	sprintf@sp& (0+255),f,b
  3427  001030  2BB2               	incf	(sprintf@sp+1)& (0+255),f,b
  3428                           
  3429                           ; BSR set to: 0
  3430                           ;doprnt.c: 1232: val %= dpowers[c];
  3431  001032  C0C7  F06D         	movff	sprintf@val,___llmod@dividend
  3432  001036  C0C8  F06E         	movff	sprintf@val+1,___llmod@dividend+1
  3433  00103A  C0C9  F06F         	movff	sprintf@val+2,___llmod@dividend+2
  3434  00103E  C0CA  F070         	movff	sprintf@val+3,___llmod@dividend+3
  3435  001042  51D6               	movf	sprintf@c& (0+255),w,b
  3436  001044  0D04               	mullw	4
  3437  001046  0E01               	movlw	low _dpowers
  3438  001048  24F3               	addwf	prodl,w,c
  3439  00104A  6EF6               	movwf	tblptrl,c
  3440  00104C  0E08               	movlw	high _dpowers
  3441  00104E  20F4               	addwfc	prodh,w,c
  3442  001050  6EF7               	movwf	tblptrh,c
  3443  001052                     	if	0	;There are less than 3 active tblptr bytes
  3444  001052                     	endif
  3445  001052  0009               	tblrd		*+
  3446  001054  CFF5 F071          	movff	tablat,___llmod@divisor
  3447  001058  0009               	tblrd		*+
  3448  00105A  CFF5 F072          	movff	tablat,___llmod@divisor+1
  3449  00105E  0009               	tblrd		*+
  3450  001060  CFF5 F073          	movff	tablat,___llmod@divisor+2
  3451  001064  000A               	tblrd		*-
  3452  001066  CFF5 F074          	movff	tablat,___llmod@divisor+3
  3453  00106A  ECD7  F01B         	call	___llmod	;wreg free
  3454  00106E  C06D  F0C7         	movff	?___llmod,sprintf@val
  3455  001072  C06E  F0C8         	movff	?___llmod+1,sprintf@val+1
  3456  001076  C06F  F0C9         	movff	?___llmod+2,sprintf@val+2
  3457  00107A  C070  F0CA         	movff	?___llmod+3,sprintf@val+3
  3458  00107E                     l236:
  3459  00107E  0100               	movlb	0	; () banked
  3460  001080  07D6               	decf	sprintf@c& (0+255),f,b
  3461  001082  29D6               	incf	sprintf@c& (0+255),w,b
  3462  001084  B4D8               	btfsc	status,2,c
  3463  001086  D00C               	goto	l239
  3464  001088  D788               	goto	l237
  3465  00108A                     
  3466                           ; BSR set to: 0
  3467                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  3468                           
  3469                           ; BSR set to: 0
  3470  00108A  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  3471  00108E  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  3472  001092  0E30               	movlw	48
  3473  001094  6EDF               	movwf	indf2,c
  3474                           
  3475                           ; BSR set to: 0
  3476  001096  4BB1               	infsnz	sprintf@sp& (0+255),f,b
  3477  001098  2BB2               	incf	(sprintf@sp+1)& (0+255),f,b
  3478                           
  3479                           ; BSR set to: 0
  3480                           ;doprnt.c: 1237: prec--;
  3481  00109A  07D4               	decf	sprintf@prec& (0+255),f,b
  3482  00109C  A0D8               	btfss	status,0,c
  3483  00109E  07D5               	decf	(sprintf@prec+1)& (0+255),f,b
  3484  0010A0                     l239:
  3485                           
  3486                           ; BSR set to: 0
  3487                           
  3488                           ; BSR set to: 0
  3489  0010A0  51D4               	movf	sprintf@prec& (0+255),w,b
  3490  0010A2  11D5               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3491  0010A4  B4D8               	btfsc	status,2,c
  3492  0010A6  D137               	goto	u3990
  3493  0010A8  D7F0               	goto	l240
  3494  0010AA                     l193:
  3495                           
  3496                           ; BSR set to: 0
  3497                           ;doprnt.c: 1246: }
  3498                           ;doprnt.c: 1253: {
  3499                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  3500                           
  3501                           ; BSR set to: 0
  3502  0010AA  C0C1  FFD9         	movff	sprintf@ap,fsr2l
  3503  0010AE  C0C2  FFDA         	movff	sprintf@ap+1,fsr2h
  3504  0010B2  CFDE F0C7          	movff	postinc2,sprintf@val
  3505  0010B6  CFDD F0C8          	movff	postdec2,sprintf@val+1
  3506  0010BA  0E00               	movlw	0
  3507  0010BC  BFC8               	btfsc	(sprintf@val+1)& (0+255),7,b
  3508  0010BE  0EFF               	movlw	-1
  3509  0010C0  6FC9               	movwf	(sprintf@val+2)& (0+255),b
  3510  0010C2  6FCA               	movwf	(sprintf@val+3)& (0+255),b
  3511                           
  3512                           ; BSR set to: 0
  3513  0010C4  0E02               	movlw	2
  3514  0010C6  27C1               	addwf	sprintf@ap& (0+255),f,b
  3515  0010C8  0E00               	movlw	0
  3516  0010CA  23C2               	addwfc	(sprintf@ap+1)& (0+255),f,b
  3517                           
  3518                           ; BSR set to: 0
  3519                           ;doprnt.c: 1261: if((long)val < 0) {
  3520  0010CC  AFCA               	btfss	(sprintf@val+3)& (0+255),7,b
  3521  0010CE  D00A               	goto	l242
  3522                           
  3523                           ; BSR set to: 0
  3524                           ;doprnt.c: 1262: flag |= 0x03;
  3525  0010D0  0E03               	movlw	3
  3526  0010D2  13CD               	iorwf	sprintf@flag& (0+255),f,b
  3527                           
  3528                           ; BSR set to: 0
  3529                           ;doprnt.c: 1263: val = -val;
  3530  0010D4  1FCA               	comf	(sprintf@val+3)& (0+255),f,b
  3531  0010D6  1FC9               	comf	(sprintf@val+2)& (0+255),f,b
  3532  0010D8  1FC8               	comf	(sprintf@val+1)& (0+255),f,b
  3533  0010DA  6DC7               	negf	sprintf@val& (0+255),b
  3534  0010DC  0E00               	movlw	0
  3535  0010DE  23C8               	addwfc	(sprintf@val+1)& (0+255),f,b
  3536  0010E0  23C9               	addwfc	(sprintf@val+2)& (0+255),f,b
  3537  0010E2  23CA               	addwfc	(sprintf@val+3)& (0+255),f,b
  3538  0010E4                     l242:
  3539                           
  3540                           ; BSR set to: 0
  3541                           ;doprnt.c: 1264: }
  3542                           ;doprnt.c: 1266: }
  3543                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  3544                           
  3545                           ; BSR set to: 0
  3546  0010E4  51D4               	movf	sprintf@prec& (0+255),w,b
  3547  0010E6  11D5               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3548  0010E8  A4D8               	btfss	status,2,c
  3549  0010EA  D008               	goto	l243
  3550                           
  3551                           ; BSR set to: 0
  3552  0010EC  51C7               	movf	sprintf@val& (0+255),w,b
  3553  0010EE  11C8               	iorwf	(sprintf@val+1)& (0+255),w,b
  3554  0010F0  11C9               	iorwf	(sprintf@val+2)& (0+255),w,b
  3555  0010F2  11CA               	iorwf	(sprintf@val+3)& (0+255),w,b
  3556  0010F4  A4D8               	btfss	status,2,c
  3557  0010F6  D002               	goto	l243
  3558                           
  3559                           ; BSR set to: 0
  3560                           ;doprnt.c: 1291: prec++;
  3561  0010F8  4BD4               	infsnz	sprintf@prec& (0+255),f,b
  3562  0010FA  2BD5               	incf	(sprintf@prec+1)& (0+255),f,b
  3563  0010FC                     l243:
  3564                           
  3565                           ; BSR set to: 0
  3566                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3567                           
  3568                           ; BSR set to: 0
  3569  0010FC  0E01               	movlw	1
  3570  0010FE  6FD6               	movwf	sprintf@c& (0+255),b
  3571  001100                     l3654:
  3572                           
  3573                           ; BSR set to: 0
  3574  001100  0E0A               	movlw	10
  3575  001102  19D6               	xorwf	sprintf@c& (0+255),w,b
  3576  001104  B4D8               	btfsc	status,2,c
  3577  001106  D018               	goto	u3840
  3578                           
  3579                           ; BSR set to: 0
  3580                           ;doprnt.c: 1306: if(val < dpowers[c])
  3581                           
  3582                           ; BSR set to: 0
  3583                           
  3584                           ; BSR set to: 0
  3585  001108  51D6               	movf	sprintf@c& (0+255),w,b
  3586  00110A  0D04               	mullw	4
  3587  00110C  0E01               	movlw	low _dpowers
  3588  00110E  24F3               	addwf	prodl,w,c
  3589  001110  6EF6               	movwf	tblptrl,c
  3590  001112  0E08               	movlw	high _dpowers
  3591  001114  20F4               	addwfc	prodh,w,c
  3592  001116  6EF7               	movwf	tblptrh,c
  3593  001118                     	if	0	;There are less than 3 active tblptr bytes
  3594  001118                     	endif
  3595  001118  0009               	tblrd		*+
  3596  00111A  50F5               	movf	tablat,w,c
  3597  00111C  5DC7               	subwf	sprintf@val& (0+255),w,b
  3598  00111E  0009               	tblrd		*+
  3599  001120  50F5               	movf	tablat,w,c
  3600  001122  59C8               	subwfb	(sprintf@val+1)& (0+255),w,b
  3601  001124  0009               	tblrd		*+
  3602  001126  50F5               	movf	tablat,w,c
  3603  001128  59C9               	subwfb	(sprintf@val+2)& (0+255),w,b
  3604  00112A  0009               	tblrd		*+
  3605  00112C  50F5               	movf	tablat,w,c
  3606  00112E  59CA               	subwfb	(sprintf@val+3)& (0+255),w,b
  3607  001130  A0D8               	btfss	status,0,c
  3608  001132  D002               	goto	u3840
  3609                           
  3610                           ; BSR set to: 0
  3611                           
  3612                           ; BSR set to: 0
  3613                           
  3614                           ; BSR set to: 0
  3615                           ;doprnt.c: 1307: break;
  3616  001134  2BD6               	incf	sprintf@c& (0+255),f,b
  3617  001136  D7E4               	goto	l3654
  3618  001138                     u3840:
  3619                           
  3620                           ; BSR set to: 0
  3621                           ;doprnt.c: 1339: if(c < prec)
  3622                           
  3623                           ; BSR set to: 0
  3624  001138  0E80               	movlw	128
  3625  00113A  BFD6               	btfsc	sprintf@c& (0+255),7,b
  3626  00113C  0E7F               	movlw	127
  3627  00113E  6FB8               	movwf	??_sprintf& (0+255),b
  3628  001140  51D4               	movf	sprintf@prec& (0+255),w,b
  3629  001142  5DD6               	subwf	sprintf@c& (0+255),w,b
  3630  001144  51D5               	movf	(sprintf@prec+1)& (0+255),w,b
  3631  001146  0A80               	xorlw	128
  3632  001148  59B8               	subwfb	??_sprintf& (0+255),w,b
  3633  00114A  B0D8               	btfsc	status,0,c
  3634  00114C  D003               	goto	l247
  3635                           
  3636                           ; BSR set to: 0
  3637                           ;doprnt.c: 1340: c = prec;
  3638  00114E  C0D4  F0D6         	movff	sprintf@prec,sprintf@c
  3639  001152  D010               	goto	l249
  3640  001154                     l247:
  3641                           
  3642                           ; BSR set to: 0
  3643                           ;doprnt.c: 1341: else if(prec < c)
  3644                           
  3645                           ; BSR set to: 0
  3646  001154  51D5               	movf	(sprintf@prec+1)& (0+255),w,b
  3647  001156  0A80               	xorlw	128
  3648  001158  6FB8               	movwf	??_sprintf& (0+255),b
  3649  00115A  51D6               	movf	sprintf@c& (0+255),w,b
  3650  00115C  5DD4               	subwf	sprintf@prec& (0+255),w,b
  3651  00115E  0E80               	movlw	128
  3652  001160  BFD6               	btfsc	sprintf@c& (0+255),7,b
  3653  001162  0E7F               	movlw	127
  3654  001164  59B8               	subwfb	??_sprintf& (0+255),w,b
  3655  001166  B0D8               	btfsc	status,0,c
  3656  001168  D005               	goto	l249
  3657                           
  3658                           ; BSR set to: 0
  3659                           ;doprnt.c: 1342: prec = c;
  3660  00116A  51D6               	movf	sprintf@c& (0+255),w,b
  3661  00116C  6FD4               	movwf	sprintf@prec& (0+255),b
  3662  00116E  6BD5               	clrf	(sprintf@prec+1)& (0+255),b
  3663  001170  BFD4               	btfsc	sprintf@prec& (0+255),7,b
  3664  001172  07D5               	decf	(sprintf@prec+1)& (0+255),f,b
  3665  001174                     l249:
  3666                           
  3667                           ; BSR set to: 0
  3668                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3669                           
  3670                           ; BSR set to: 0
  3671                           
  3672                           ; BSR set to: 0
  3673  001174  51CF               	movf	sprintf@width& (0+255),w,b
  3674  001176  11D0               	iorwf	(sprintf@width+1)& (0+255),w,b
  3675  001178  B4D8               	btfsc	status,2,c
  3676  00117A  D00D               	goto	l250
  3677                           
  3678                           ; BSR set to: 0
  3679  00117C  0E03               	movlw	3
  3680  00117E  15CD               	andwf	sprintf@flag& (0+255),w,b
  3681  001180  6FB8               	movwf	??_sprintf& (0+255),b
  3682  001182  0E00               	movlw	0
  3683  001184  15CE               	andwf	(sprintf@flag+1)& (0+255),w,b
  3684  001186  6FB9               	movwf	(??_sprintf+1)& (0+255),b
  3685  001188  51B8               	movf	??_sprintf& (0+255),w,b
  3686  00118A  11B9               	iorwf	(??_sprintf+1)& (0+255),w,b
  3687  00118C  B4D8               	btfsc	status,2,c
  3688  00118E  D003               	goto	l250
  3689                           
  3690                           ; BSR set to: 0
  3691                           ;doprnt.c: 1346: width--;
  3692  001190  07CF               	decf	sprintf@width& (0+255),f,b
  3693  001192  A0D8               	btfss	status,0,c
  3694  001194  07D0               	decf	(sprintf@width+1)& (0+255),f,b
  3695  001196                     l250:
  3696                           
  3697                           ; BSR set to: 0
  3698                           ;doprnt.c: 1348: if(flag & 0x4000) {
  3699                           
  3700                           ; BSR set to: 0
  3701  001196  ADCE               	btfss	(sprintf@flag+1)& (0+255),6,b
  3702  001198  D013               	goto	l253
  3703                           
  3704                           ; BSR set to: 0
  3705                           ;doprnt.c: 1349: if(width > prec)
  3706  00119A  51CF               	movf	sprintf@width& (0+255),w,b
  3707  00119C  5DD4               	subwf	sprintf@prec& (0+255),w,b
  3708  00119E  51D5               	movf	(sprintf@prec+1)& (0+255),w,b
  3709  0011A0  0A80               	xorlw	128
  3710  0011A2  6FB8               	movwf	??_sprintf& (0+255),b
  3711  0011A4  51D0               	movf	(sprintf@width+1)& (0+255),w,b
  3712  0011A6  0A80               	xorlw	128
  3713  0011A8  59B8               	subwfb	??_sprintf& (0+255),w,b
  3714  0011AA  B0D8               	btfsc	status,0,c
  3715  0011AC  D005               	goto	l252
  3716                           
  3717                           ; BSR set to: 0
  3718                           ;doprnt.c: 1350: width -= prec;
  3719  0011AE  51D4               	movf	sprintf@prec& (0+255),w,b
  3720  0011B0  5FCF               	subwf	sprintf@width& (0+255),f,b
  3721  0011B2  51D5               	movf	(sprintf@prec+1)& (0+255),w,b
  3722  0011B4  5BD0               	subwfb	(sprintf@width+1)& (0+255),f,b
  3723  0011B6  D004               	goto	l253
  3724  0011B8                     l252:
  3725                           
  3726                           ; BSR set to: 0
  3727                           ;doprnt.c: 1351: else
  3728                           ;doprnt.c: 1352: width = 0;
  3729                           
  3730                           ; BSR set to: 0
  3731  0011B8  0E00               	movlw	0
  3732  0011BA  6FD0               	movwf	(sprintf@width+1)& (0+255),b
  3733  0011BC  0E00               	movlw	0
  3734  0011BE  6FCF               	movwf	sprintf@width& (0+255),b
  3735  0011C0                     l253:
  3736                           
  3737                           ; BSR set to: 0
  3738                           ;doprnt.c: 1353: }
  3739                           ;doprnt.c: 1381: if(width > c)
  3740                           
  3741                           ; BSR set to: 0
  3742                           
  3743                           ; BSR set to: 0
  3744  0011C0  0E80               	movlw	128
  3745  0011C2  BFD6               	btfsc	sprintf@c& (0+255),7,b
  3746  0011C4  0E7F               	movlw	127
  3747  0011C6  6FB8               	movwf	??_sprintf& (0+255),b
  3748  0011C8  51CF               	movf	sprintf@width& (0+255),w,b
  3749  0011CA  5DD6               	subwf	sprintf@c& (0+255),w,b
  3750  0011CC  51D0               	movf	(sprintf@width+1)& (0+255),w,b
  3751  0011CE  0A80               	xorlw	128
  3752  0011D0  59B8               	subwfb	??_sprintf& (0+255),w,b
  3753  0011D2  B0D8               	btfsc	status,0,c
  3754  0011D4  D007               	goto	l254
  3755                           
  3756                           ; BSR set to: 0
  3757                           ;doprnt.c: 1382: width -= c;
  3758  0011D6  51D6               	movf	sprintf@c& (0+255),w,b
  3759  0011D8  5FCF               	subwf	sprintf@width& (0+255),f,b
  3760  0011DA  0E00               	movlw	0
  3761  0011DC  BFD6               	btfsc	sprintf@c& (0+255),7,b
  3762  0011DE  0EFF               	movlw	255
  3763  0011E0  5BD0               	subwfb	(sprintf@width+1)& (0+255),f,b
  3764  0011E2  D004               	goto	l255
  3765  0011E4                     l254:
  3766                           
  3767                           ; BSR set to: 0
  3768                           ;doprnt.c: 1383: else
  3769                           ;doprnt.c: 1384: width = 0;
  3770                           
  3771                           ; BSR set to: 0
  3772  0011E4  0E00               	movlw	0
  3773  0011E6  6FD0               	movwf	(sprintf@width+1)& (0+255),b
  3774  0011E8  0E00               	movlw	0
  3775  0011EA  6FCF               	movwf	sprintf@width& (0+255),b
  3776  0011EC                     l255:
  3777                           
  3778                           ; BSR set to: 0
  3779                           ;doprnt.c: 1387: if(flag & 0x04) {
  3780                           
  3781                           ; BSR set to: 0
  3782  0011EC  A5CD               	btfss	sprintf@flag& (0+255),2,b
  3783  0011EE  D022               	goto	l256
  3784                           
  3785                           ; BSR set to: 0
  3786                           ;doprnt.c: 1392: if(flag & 0x03)
  3787  0011F0  0E03               	movlw	3
  3788  0011F2  15CD               	andwf	sprintf@flag& (0+255),w,b
  3789  0011F4  6FB8               	movwf	??_sprintf& (0+255),b
  3790  0011F6  0E00               	movlw	0
  3791  0011F8  15CE               	andwf	(sprintf@flag+1)& (0+255),w,b
  3792  0011FA  6FB9               	movwf	(??_sprintf+1)& (0+255),b
  3793  0011FC  51B8               	movf	??_sprintf& (0+255),w,b
  3794  0011FE  11B9               	iorwf	(??_sprintf+1)& (0+255),w,b
  3795  001200  B4D8               	btfsc	status,2,c
  3796  001202  D008               	goto	l257
  3797                           
  3798                           ; BSR set to: 0
  3799                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  3800  001204  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  3801  001208  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  3802  00120C  0E2D               	movlw	45
  3803  00120E  6EDF               	movwf	indf2,c
  3804                           
  3805                           ; BSR set to: 0
  3806  001210  4BB1               	infsnz	sprintf@sp& (0+255),f,b
  3807  001212  2BB2               	incf	(sprintf@sp+1)& (0+255),f,b
  3808  001214                     l257:
  3809                           
  3810                           ; BSR set to: 0
  3811                           ;doprnt.c: 1415: if(width)
  3812                           
  3813                           ; BSR set to: 0
  3814  001214  51CF               	movf	sprintf@width& (0+255),w,b
  3815  001216  11D0               	iorwf	(sprintf@width+1)& (0+255),w,b
  3816  001218  B4D8               	btfsc	status,2,c
  3817  00121A  D075               	goto	l266
  3818                           
  3819                           ; BSR set to: 0
  3820                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  3821                           
  3822                           ; BSR set to: 0
  3823                           
  3824                           ;doprnt.c: 1416: do
  3825  00121C  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  3826  001220  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  3827  001224  0E30               	movlw	48
  3828  001226  6EDF               	movwf	indf2,c
  3829                           
  3830                           ; BSR set to: 0
  3831  001228  4BB1               	infsnz	sprintf@sp& (0+255),f,b
  3832  00122A  2BB2               	incf	(sprintf@sp+1)& (0+255),f,b
  3833                           
  3834                           ; BSR set to: 0
  3835                           ;doprnt.c: 1418: while(--width);
  3836  00122C  07CF               	decf	sprintf@width& (0+255),f,b
  3837  00122E  A0D8               	btfss	status,0,c
  3838  001230  07D0               	decf	(sprintf@width+1)& (0+255),f,b
  3839  001232  D7F0               	goto	l257
  3840  001234                     l256:
  3841                           
  3842                           ; BSR set to: 0
  3843                           ;doprnt.c: 1422: {
  3844                           ;doprnt.c: 1424: if(width
  3845                           ;doprnt.c: 1428: )
  3846                           
  3847                           ; BSR set to: 0
  3848  001234  51CF               	movf	sprintf@width& (0+255),w,b
  3849  001236  11D0               	iorwf	(sprintf@width+1)& (0+255),w,b
  3850  001238  B4D8               	btfsc	status,2,c
  3851  00123A  D00F               	goto	u3970
  3852  00123C                     u3960:
  3853                           
  3854                           ; BSR set to: 0
  3855                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  3856                           
  3857                           ; BSR set to: 0
  3858                           
  3859                           ;doprnt.c: 1429: do
  3860  00123C  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  3861  001240  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  3862  001244  0E20               	movlw	32
  3863  001246  6EDF               	movwf	indf2,c
  3864                           
  3865                           ; BSR set to: 0
  3866  001248  4BB1               	infsnz	sprintf@sp& (0+255),f,b
  3867  00124A  2BB2               	incf	(sprintf@sp+1)& (0+255),f,b
  3868                           
  3869                           ; BSR set to: 0
  3870                           ;doprnt.c: 1431: while(--width);
  3871  00124C  07CF               	decf	sprintf@width& (0+255),f,b
  3872  00124E  A0D8               	btfss	status,0,c
  3873  001250  07D0               	decf	(sprintf@width+1)& (0+255),f,b
  3874  001252  51CF               	movf	sprintf@width& (0+255),w,b
  3875  001254  11D0               	iorwf	(sprintf@width+1)& (0+255),w,b
  3876  001256  A4D8               	btfss	status,2,c
  3877  001258  D7F1               	goto	u3960
  3878  00125A                     u3970:
  3879                           
  3880                           ; BSR set to: 0
  3881                           ;doprnt.c: 1438: if(flag & 0x03)
  3882                           
  3883                           ; BSR set to: 0
  3884                           
  3885                           ; BSR set to: 0
  3886  00125A  0E03               	movlw	3
  3887  00125C  15CD               	andwf	sprintf@flag& (0+255),w,b
  3888  00125E  6FB8               	movwf	??_sprintf& (0+255),b
  3889  001260  0E00               	movlw	0
  3890  001262  15CE               	andwf	(sprintf@flag+1)& (0+255),w,b
  3891  001264  6FB9               	movwf	(??_sprintf+1)& (0+255),b
  3892  001266  51B8               	movf	??_sprintf& (0+255),w,b
  3893  001268  11B9               	iorwf	(??_sprintf+1)& (0+255),w,b
  3894  00126A  B4D8               	btfsc	status,2,c
  3895  00126C  D04C               	goto	l266
  3896                           
  3897                           ; BSR set to: 0
  3898                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  3899  00126E  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  3900  001272  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  3901  001276  0E2D               	movlw	45
  3902  001278  6EDF               	movwf	indf2,c
  3903  00127A  D043               	goto	l3728
  3904  00127C                     l3724:
  3905                           
  3906                           ; BSR set to: 0
  3907                           ;doprnt.c: 1478: {
  3908                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3909  00127C  C0D4  F0B8         	movff	sprintf@prec,??_sprintf
  3910  001280  C0D5  F0B9         	movff	sprintf@prec+1,??_sprintf+1
  3911  001284  90D8               	bcf	status,0,c
  3912  001286  37B8               	rlcf	??_sprintf& (0+255),f,b
  3913  001288  37B9               	rlcf	(??_sprintf+1)& (0+255),f,b
  3914  00128A  90D8               	bcf	status,0,c
  3915  00128C  37B8               	rlcf	??_sprintf& (0+255),f,b
  3916  00128E  37B9               	rlcf	(??_sprintf+1)& (0+255),f,b
  3917  001290  0E01               	movlw	low _dpowers
  3918  001292  25B8               	addwf	??_sprintf& (0+255),w,b
  3919  001294  6EF6               	movwf	tblptrl,c
  3920  001296  0E08               	movlw	high _dpowers
  3921  001298  21B9               	addwfc	(??_sprintf+1)& (0+255),w,b
  3922  00129A  6EF7               	movwf	tblptrh,c
  3923  00129C                     	if	0	;There are less than 3 active tblptr bytes
  3924  00129C                     	endif
  3925  00129C  0009               	tblrd		*+
  3926  00129E  CFF5 F064          	movff	tablat,___lldiv@divisor
  3927  0012A2  0009               	tblrd		*+
  3928  0012A4  CFF5 F065          	movff	tablat,___lldiv@divisor+1
  3929  0012A8  0009               	tblrd		*+
  3930  0012AA  CFF5 F066          	movff	tablat,___lldiv@divisor+2
  3931  0012AE  000A               	tblrd		*-
  3932  0012B0  CFF5 F067          	movff	tablat,___lldiv@divisor+3
  3933  0012B4  C0C7  F060         	movff	sprintf@val,___lldiv@dividend
  3934  0012B8  C0C8  F061         	movff	sprintf@val+1,___lldiv@dividend+1
  3935  0012BC  C0C9  F062         	movff	sprintf@val+2,___lldiv@dividend+2
  3936  0012C0  C0CA  F063         	movff	sprintf@val+3,___lldiv@dividend+3
  3937  0012C4  ECE1  F01A         	call	___lldiv	;wreg free
  3938  0012C8  C060  F06D         	movff	?___lldiv,___llmod@dividend
  3939  0012CC  C061  F06E         	movff	?___lldiv+1,___llmod@dividend+1
  3940  0012D0  C062  F06F         	movff	?___lldiv+2,___llmod@dividend+2
  3941  0012D4  C063  F070         	movff	?___lldiv+3,___llmod@dividend+3
  3942  0012D8  0E0A               	movlw	10
  3943  0012DA  0100               	movlb	0	; () banked
  3944  0012DC  6F71               	movwf	___llmod@divisor& (0+255),b
  3945  0012DE  0E00               	movlw	0
  3946  0012E0  6F72               	movwf	(___llmod@divisor+1)& (0+255),b
  3947  0012E2  0E00               	movlw	0
  3948  0012E4  6F73               	movwf	(___llmod@divisor+2)& (0+255),b
  3949  0012E6  0E00               	movlw	0
  3950  0012E8  6F74               	movwf	(___llmod@divisor+3)& (0+255),b
  3951  0012EA  ECD7  F01B         	call	___llmod	;wreg free
  3952  0012EE  0100               	movlb	0	; () banked
  3953  0012F0  516D               	movf	?___llmod& (0+255),w,b
  3954  0012F2  0F30               	addlw	48
  3955  0012F4  6FD6               	movwf	sprintf@c& (0+255),b
  3956                           
  3957                           ; BSR set to: 0
  3958                           ;doprnt.c: 1523: }
  3959                           ;doprnt.c: 1524: ((*sp++ = (c)));
  3960  0012F6  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  3961  0012FA  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  3962  0012FE  C0D6  FFDF         	movff	sprintf@c,indf2
  3963  001302                     l3728:
  3964                           
  3965                           ; BSR set to: 0
  3966  001302  4BB1               	infsnz	sprintf@sp& (0+255),f,b
  3967  001304  2BB2               	incf	(sprintf@sp+1)& (0+255),f,b
  3968  001306                     l266:
  3969                           
  3970                           ; BSR set to: 0
  3971                           
  3972                           ; BSR set to: 0
  3973  001306  07D4               	decf	sprintf@prec& (0+255),f,b
  3974  001308  A0D8               	btfss	status,0,c
  3975  00130A  07D5               	decf	(sprintf@prec+1)& (0+255),f,b
  3976  00130C  29D4               	incf	sprintf@prec& (0+255),w,b
  3977  00130E  E1B6               	bnz	l3724
  3978  001310  29D5               	incf	(sprintf@prec+1)& (0+255),w,b
  3979  001312  A4D8               	btfss	status,2,c
  3980  001314  D7B3               	goto	l267
  3981  001316                     u3990:
  3982                           
  3983                           ; BSR set to: 0
  3984                           
  3985                           ; BSR set to: 0
  3986                           
  3987                           ; BSR set to: 0
  3988  001316  C0B3  FFF6         	movff	sprintf@f,tblptrl
  3989  00131A  C0B4  FFF7         	movff	sprintf@f+1,tblptrh
  3990  00131E  4BB3               	infsnz	sprintf@f& (0+255),f,b
  3991  001320  2BB4               	incf	(sprintf@f+1)& (0+255),f,b
  3992  001322                     	if	0	;tblptru may be non-zero
  3993  001322                     	endif
  3994  001322                     	if	0	;tblptru may be non-zero
  3995  001322                     	endif
  3996  001322  0008               	tblrd		*
  3997  001324  CFF5 F0D6          	movff	tablat,sprintf@c
  3998  001328  51D6               	movf	sprintf@c& (0+255),w,b
  3999  00132A  A4D8               	btfss	status,2,c
  4000  00132C  EF69  F004         	goto	l169
  4001  001330                     u4000:
  4002                           
  4003                           ; BSR set to: 0
  4004                           ;doprnt.c: 1538: *sp = 0;
  4005                           
  4006                           ; BSR set to: 0
  4007                           
  4008                           ;doprnt.c: 1525: }
  4009                           ;doprnt.c: 1533: }
  4010                           ;doprnt.c: 1535: alldone:
  4011                           
  4012                           ; BSR set to: 0
  4013  001330  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  4014  001334  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  4015  001338  0E00               	movlw	0
  4016  00133A  6EDF               	movwf	indf2,c
  4017  00133C  0012               	return	
  4018  00133E                     __end_of_sprintf:
  4019                           	opt stack 0
  4020                           tblptru	equ	0xFF8
  4021                           tblptrh	equ	0xFF7
  4022                           tblptrl	equ	0xFF6
  4023                           tablat	equ	0xFF5
  4024                           prodh	equ	0xFF4
  4025                           prodl	equ	0xFF3
  4026                           postinc0	equ	0xFEE
  4027                           wreg	equ	0xFE8
  4028                           indf2	equ	0xFDF
  4029                           postinc2	equ	0xFDE
  4030                           postdec2	equ	0xFDD
  4031                           fsr2h	equ	0xFDA
  4032                           fsr2l	equ	0xFD9
  4033                           status	equ	0xFD8
  4034                           
  4035 ;; *************** function _scale *****************
  4036 ;; Defined at:
  4037 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  4038 ;; Parameters:    Size  Location     Type
  4039 ;;  scl             1    wreg     char 
  4040 ;; Auto vars:     Size  Location     Type
  4041 ;;  scl             1   41[BANK0 ] char 
  4042 ;; Return value:  Size  Location     Type
  4043 ;;                  3   35[BANK0 ] char 
  4044 ;; Registers used:
  4045 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4046 ;; Tracked objects:
  4047 ;;		On entry : 0/0
  4048 ;;		On exit  : 0/0
  4049 ;;		Unchanged: 0/0
  4050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4051 ;;      Params:         0       3       0       0       0       0       0       0       0
  4052 ;;      Locals:         0       4       0       0       0       0       0       0       0
  4053 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4054 ;;      Totals:         0       7       0       0       0       0       0       0       0
  4055 ;;Total ram usage:        7 bytes
  4056 ;; Hardware stack levels used:    1
  4057 ;; Hardware stack levels required when called:    5
  4058 ;; This function calls:
  4059 ;;		___awdiv
  4060 ;;		___awmod
  4061 ;;		___ftmul
  4062 ;;		___wmul
  4063 ;; This function is called by:
  4064 ;;		_sprintf
  4065 ;; This function uses a non-reentrant model
  4066 ;;
  4067                           
  4068                           	psect	text3
  4069  001836                     __ptext3:
  4070                           	opt stack 0
  4071  001836                     _scale:
  4072                           	opt stack 24
  4073                           
  4074                           ; BSR set to: 0
  4075                           ;incstack = 0
  4076                           ;scale@scl stored from wreg
  4077  001836  0100               	movlb	0	; () banked
  4078  001838  6F89               	movwf	scale@scl& (0+255),b
  4079                           
  4080                           ;doprnt.c: 428: if(scl < 0) {
  4081  00183A  0100               	movlb	0	; () banked
  4082  00183C  AF89               	btfss	scale@scl& (0+255),7,b
  4083  00183E  D10C               	goto	l158
  4084                           
  4085                           ; BSR set to: 0
  4086                           ;doprnt.c: 429: scl = -scl;
  4087  001840  6D89               	negf	scale@scl& (0+255),b
  4088                           
  4089                           ;doprnt.c: 430: if(scl>=110)
  4090  001842  5189               	movf	scale@scl& (0+255),w,b
  4091  001844  0A80               	xorlw	128
  4092  001846  0F12               	addlw	-238
  4093  001848  A0D8               	btfss	status,0,c
  4094  00184A  D097               	goto	l159
  4095                           
  4096                           ; BSR set to: 0
  4097                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4098  00184C  0E00               	movlw	0
  4099  00184E  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4100  001850  0E03               	movlw	3
  4101  001852  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4102  001854  0E00               	movlw	0
  4103  001856  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  4104  001858  0E0A               	movlw	10
  4105  00185A  6F68               	movwf	___awdiv@divisor& (0+255),b
  4106  00185C  0E00               	movlw	0
  4107  00185E  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4108  001860  0E64               	movlw	100
  4109  001862  6F62               	movwf	___awmod@divisor& (0+255),b
  4110  001864  5189               	movf	scale@scl& (0+255),w,b
  4111  001866  6F60               	movwf	___awmod@dividend& (0+255),b
  4112  001868  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4113  00186A  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  4114  00186C  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  4115  00186E  EC9E  F01B         	call	___awmod	;wreg free
  4116  001872  C060  F066         	movff	?___awmod,___awdiv@dividend
  4117  001876  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
  4118  00187A  EC9E  F01A         	call	___awdiv	;wreg free
  4119  00187E  0E09               	movlw	9
  4120  001880  0100               	movlb	0	; () banked
  4121  001882  2566               	addwf	?___awdiv& (0+255),w,b
  4122  001884  6F6E               	movwf	___wmul@multiplier& (0+255),b
  4123  001886  0E00               	movlw	0
  4124  001888  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  4125  00188A  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4126  00188C  EC96  F01C         	call	___wmul	;wreg free
  4127  001890  0E50               	movlw	low __npowers_
  4128  001892  0100               	movlb	0	; () banked
  4129  001894  256E               	addwf	?___wmul& (0+255),w,b
  4130  001896  6EF6               	movwf	tblptrl,c
  4131  001898  0E08               	movlw	high __npowers_
  4132  00189A  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4133  00189C  6EF7               	movwf	tblptrh,c
  4134  00189E                     	if	0	;There are less than 3 active tblptr bytes
  4135  00189E                     	endif
  4136  00189E  0009               	tblrd		*+
  4137  0018A0  CFF5 F077          	movff	tablat,___ftmul@f2
  4138  0018A4  0009               	tblrd		*+
  4139  0018A6  CFF5 F078          	movff	tablat,___ftmul@f2+1
  4140  0018AA  000A               	tblrd		*-
  4141  0018AC  CFF5 F079          	movff	tablat,___ftmul@f2+2
  4142  0018B0  0E00               	movlw	0
  4143  0018B2  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  4144  0018B4  0E64               	movlw	100
  4145  0018B6  6F68               	movwf	___awdiv@divisor& (0+255),b
  4146  0018B8  5189               	movf	scale@scl& (0+255),w,b
  4147  0018BA  6F66               	movwf	___awdiv@dividend& (0+255),b
  4148  0018BC  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  4149  0018BE  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  4150  0018C0  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  4151  0018C2  EC9E  F01A         	call	___awdiv	;wreg free
  4152  0018C6  0E12               	movlw	18
  4153  0018C8  0100               	movlb	0	; () banked
  4154  0018CA  2566               	addwf	?___awdiv& (0+255),w,b
  4155  0018CC  6F6E               	movwf	___wmul@multiplier& (0+255),b
  4156  0018CE  0E00               	movlw	0
  4157  0018D0  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  4158  0018D2  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4159  0018D4  0E00               	movlw	0
  4160  0018D6  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4161  0018D8  0E03               	movlw	3
  4162  0018DA  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4163  0018DC  EC96  F01C         	call	___wmul	;wreg free
  4164  0018E0  0E50               	movlw	low __npowers_
  4165  0018E2  0100               	movlb	0	; () banked
  4166  0018E4  256E               	addwf	?___wmul& (0+255),w,b
  4167  0018E6  6EF6               	movwf	tblptrl,c
  4168  0018E8  0E08               	movlw	high __npowers_
  4169  0018EA  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4170  0018EC  6EF7               	movwf	tblptrh,c
  4171  0018EE                     	if	0	;There are less than 3 active tblptr bytes
  4172  0018EE                     	endif
  4173  0018EE  0009               	tblrd		*+
  4174  0018F0  CFF5 F074          	movff	tablat,___ftmul@f1
  4175  0018F4  0009               	tblrd		*+
  4176  0018F6  CFF5 F075          	movff	tablat,___ftmul@f1+1
  4177  0018FA  000A               	tblrd		*-
  4178  0018FC  CFF5 F076          	movff	tablat,___ftmul@f1+2
  4179  001900  EC45  F016         	call	___ftmul	;wreg free
  4180  001904  C074  F086         	movff	?___ftmul,_scale$1426
  4181  001908  C075  F087         	movff	?___ftmul+1,_scale$1426+1
  4182  00190C  C076  F088         	movff	?___ftmul+2,_scale$1426+2
  4183                           
  4184                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4185  001910  C086  F074         	movff	_scale$1426,___ftmul@f1
  4186  001914  C087  F075         	movff	_scale$1426+1,___ftmul@f1+1
  4187  001918  C088  F076         	movff	_scale$1426+2,___ftmul@f1+2
  4188  00191C  0E00               	movlw	0
  4189  00191E  0100               	movlb	0	; () banked
  4190  001920  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4191  001922  0E03               	movlw	3
  4192  001924  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4193  001926  0E00               	movlw	0
  4194  001928  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4195  00192A  0E0A               	movlw	10
  4196  00192C  6F62               	movwf	___awmod@divisor& (0+255),b
  4197  00192E  5189               	movf	scale@scl& (0+255),w,b
  4198  001930  6F60               	movwf	___awmod@dividend& (0+255),b
  4199  001932  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4200  001934  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  4201  001936  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  4202  001938  EC9E  F01B         	call	___awmod	;wreg free
  4203  00193C  C060  F06E         	movff	?___awmod,___wmul@multiplier
  4204  001940  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  4205  001944  EC96  F01C         	call	___wmul	;wreg free
  4206  001948  0E50               	movlw	low __npowers_
  4207  00194A  0100               	movlb	0	; () banked
  4208  00194C  256E               	addwf	?___wmul& (0+255),w,b
  4209  00194E  6EF6               	movwf	tblptrl,c
  4210  001950  0E08               	movlw	high __npowers_
  4211  001952  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4212  001954  6EF7               	movwf	tblptrh,c
  4213  001956                     	if	0	;There are less than 3 active tblptr bytes
  4214  001956                     	endif
  4215  001956  0009               	tblrd		*+
  4216  001958  CFF5 F077          	movff	tablat,___ftmul@f2
  4217  00195C  0009               	tblrd		*+
  4218  00195E  CFF5 F078          	movff	tablat,___ftmul@f2+1
  4219  001962  000A               	tblrd		*-
  4220  001964  CFF5 F079          	movff	tablat,___ftmul@f2+2
  4221  001968  EC45  F016         	call	___ftmul	;wreg free
  4222  00196C  C074  F083         	movff	?___ftmul,?_scale
  4223  001970  C075  F084         	movff	?___ftmul+1,?_scale+1
  4224  001974  C076  F085         	movff	?___ftmul+2,?_scale+2
  4225  001978  0012               	return	
  4226  00197A                     l159:
  4227                           
  4228                           ;doprnt.c: 432: else if(scl > 10)
  4229  00197A  0100               	movlb	0	; () banked
  4230  00197C  5189               	movf	scale@scl& (0+255),w,b
  4231  00197E  0A80               	xorlw	128
  4232  001980  0F75               	addlw	-139
  4233  001982  A0D8               	btfss	status,0,c
  4234  001984  D056               	goto	l162
  4235                           
  4236                           ; BSR set to: 0
  4237                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  4238  001986  0E00               	movlw	0
  4239  001988  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  4240  00198A  0E0A               	movlw	10
  4241  00198C  6F68               	movwf	___awdiv@divisor& (0+255),b
  4242  00198E  5189               	movf	scale@scl& (0+255),w,b
  4243  001990  6F66               	movwf	___awdiv@dividend& (0+255),b
  4244  001992  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  4245  001994  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  4246  001996  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  4247  001998  EC9E  F01A         	call	___awdiv	;wreg free
  4248  00199C  0E09               	movlw	9
  4249  00199E  0100               	movlb	0	; () banked
  4250  0019A0  2566               	addwf	?___awdiv& (0+255),w,b
  4251  0019A2  6F6E               	movwf	___wmul@multiplier& (0+255),b
  4252  0019A4  0E00               	movlw	0
  4253  0019A6  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  4254  0019A8  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4255  0019AA  0E00               	movlw	0
  4256  0019AC  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4257  0019AE  0E03               	movlw	3
  4258  0019B0  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4259  0019B2  EC96  F01C         	call	___wmul	;wreg free
  4260  0019B6  0E50               	movlw	low __npowers_
  4261  0019B8  0100               	movlb	0	; () banked
  4262  0019BA  256E               	addwf	?___wmul& (0+255),w,b
  4263  0019BC  6EF6               	movwf	tblptrl,c
  4264  0019BE  0E08               	movlw	high __npowers_
  4265  0019C0  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4266  0019C2  6EF7               	movwf	tblptrh,c
  4267  0019C4                     	if	0	;There are less than 3 active tblptr bytes
  4268  0019C4                     	endif
  4269  0019C4  0009               	tblrd		*+
  4270  0019C6  CFF5 F074          	movff	tablat,___ftmul@f1
  4271  0019CA  0009               	tblrd		*+
  4272  0019CC  CFF5 F075          	movff	tablat,___ftmul@f1+1
  4273  0019D0  000A               	tblrd		*-
  4274  0019D2  CFF5 F076          	movff	tablat,___ftmul@f1+2
  4275  0019D6  0E00               	movlw	0
  4276  0019D8  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4277  0019DA  0E03               	movlw	3
  4278  0019DC  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4279  0019DE  0E00               	movlw	0
  4280  0019E0  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4281  0019E2  0E0A               	movlw	10
  4282  0019E4  6F62               	movwf	___awmod@divisor& (0+255),b
  4283  0019E6  5189               	movf	scale@scl& (0+255),w,b
  4284  0019E8  6F60               	movwf	___awmod@dividend& (0+255),b
  4285  0019EA  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4286  0019EC  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  4287  0019EE  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  4288  0019F0  EC9E  F01B         	call	___awmod	;wreg free
  4289  0019F4  C060  F06E         	movff	?___awmod,___wmul@multiplier
  4290  0019F8  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  4291  0019FC  EC96  F01C         	call	___wmul	;wreg free
  4292  001A00  0E50               	movlw	low __npowers_
  4293  001A02  0100               	movlb	0	; () banked
  4294  001A04  256E               	addwf	?___wmul& (0+255),w,b
  4295  001A06  6EF6               	movwf	tblptrl,c
  4296  001A08  0E08               	movlw	high __npowers_
  4297  001A0A  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4298  001A0C  6EF7               	movwf	tblptrh,c
  4299  001A0E                     	if	0	;There are less than 3 active tblptr bytes
  4300  001A0E                     	endif
  4301  001A0E  0009               	tblrd		*+
  4302  001A10  CFF5 F077          	movff	tablat,___ftmul@f2
  4303  001A14  0009               	tblrd		*+
  4304  001A16  CFF5 F078          	movff	tablat,___ftmul@f2+1
  4305  001A1A  000A               	tblrd		*-
  4306  001A1C  CFF5 F079          	movff	tablat,___ftmul@f2+2
  4307  001A20  EC45  F016         	call	___ftmul	;wreg free
  4308  001A24  C074  F083         	movff	?___ftmul,?_scale
  4309  001A28  C075  F084         	movff	?___ftmul+1,?_scale+1
  4310  001A2C  C076  F085         	movff	?___ftmul+2,?_scale+2
  4311  001A30  0012               	return	
  4312  001A32                     l162:
  4313                           
  4314                           ;doprnt.c: 434: return _npowers_[scl];
  4315  001A32  0100               	movlb	0	; () banked
  4316  001A34  5189               	movf	scale@scl& (0+255),w,b
  4317  001A36  0D03               	mullw	3
  4318  001A38  0E50               	movlw	low __npowers_
  4319  001A3A  24F3               	addwf	prodl,w,c
  4320  001A3C  6EF6               	movwf	tblptrl,c
  4321  001A3E  0E08               	movlw	high __npowers_
  4322  001A40  20F4               	addwfc	prodh,w,c
  4323  001A42  6EF7               	movwf	tblptrh,c
  4324  001A44                     	if	0	;There are less than 3 active tblptr bytes
  4325  001A44                     	endif
  4326  001A44  0009               	tblrd		*+
  4327  001A46  CFF5 F083          	movff	tablat,?_scale
  4328  001A4A  0009               	tblrd		*+
  4329  001A4C  CFF5 F084          	movff	tablat,?_scale+1
  4330  001A50  000A               	tblrd		*-
  4331  001A52  CFF5 F085          	movff	tablat,?_scale+2
  4332                           
  4333                           ; BSR set to: 0
  4334  001A56  0012               	return	
  4335  001A58                     l158:
  4336                           
  4337                           ; BSR set to: 0
  4338                           ;doprnt.c: 435: }
  4339                           ;doprnt.c: 436: if(scl>=110)
  4340                           
  4341                           ; BSR set to: 0
  4342  001A58  5189               	movf	scale@scl& (0+255),w,b
  4343  001A5A  0A80               	xorlw	128
  4344  001A5C  0F12               	addlw	-238
  4345  001A5E  A0D8               	btfss	status,0,c
  4346  001A60  D097               	goto	l163
  4347                           
  4348                           ; BSR set to: 0
  4349                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4350  001A62  0E00               	movlw	0
  4351  001A64  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4352  001A66  0E03               	movlw	3
  4353  001A68  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4354  001A6A  0E00               	movlw	0
  4355  001A6C  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  4356  001A6E  0E0A               	movlw	10
  4357  001A70  6F68               	movwf	___awdiv@divisor& (0+255),b
  4358  001A72  0E00               	movlw	0
  4359  001A74  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4360  001A76  0E64               	movlw	100
  4361  001A78  6F62               	movwf	___awmod@divisor& (0+255),b
  4362  001A7A  5189               	movf	scale@scl& (0+255),w,b
  4363  001A7C  6F60               	movwf	___awmod@dividend& (0+255),b
  4364  001A7E  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4365  001A80  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  4366  001A82  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  4367  001A84  EC9E  F01B         	call	___awmod	;wreg free
  4368  001A88  C060  F066         	movff	?___awmod,___awdiv@dividend
  4369  001A8C  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
  4370  001A90  EC9E  F01A         	call	___awdiv	;wreg free
  4371  001A94  0E09               	movlw	9
  4372  001A96  0100               	movlb	0	; () banked
  4373  001A98  2566               	addwf	?___awdiv& (0+255),w,b
  4374  001A9A  6F6E               	movwf	___wmul@multiplier& (0+255),b
  4375  001A9C  0E00               	movlw	0
  4376  001A9E  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  4377  001AA0  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4378  001AA2  EC96  F01C         	call	___wmul	;wreg free
  4379  001AA6  0E29               	movlw	low __powers_
  4380  001AA8  0100               	movlb	0	; () banked
  4381  001AAA  256E               	addwf	?___wmul& (0+255),w,b
  4382  001AAC  6EF6               	movwf	tblptrl,c
  4383  001AAE  0E08               	movlw	high __powers_
  4384  001AB0  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4385  001AB2  6EF7               	movwf	tblptrh,c
  4386  001AB4                     	if	0	;There are less than 3 active tblptr bytes
  4387  001AB4                     	endif
  4388  001AB4  0009               	tblrd		*+
  4389  001AB6  CFF5 F077          	movff	tablat,___ftmul@f2
  4390  001ABA  0009               	tblrd		*+
  4391  001ABC  CFF5 F078          	movff	tablat,___ftmul@f2+1
  4392  001AC0  000A               	tblrd		*-
  4393  001AC2  CFF5 F079          	movff	tablat,___ftmul@f2+2
  4394  001AC6  0E00               	movlw	0
  4395  001AC8  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  4396  001ACA  0E64               	movlw	100
  4397  001ACC  6F68               	movwf	___awdiv@divisor& (0+255),b
  4398  001ACE  5189               	movf	scale@scl& (0+255),w,b
  4399  001AD0  6F66               	movwf	___awdiv@dividend& (0+255),b
  4400  001AD2  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  4401  001AD4  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  4402  001AD6  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  4403  001AD8  EC9E  F01A         	call	___awdiv	;wreg free
  4404  001ADC  0E12               	movlw	18
  4405  001ADE  0100               	movlb	0	; () banked
  4406  001AE0  2566               	addwf	?___awdiv& (0+255),w,b
  4407  001AE2  6F6E               	movwf	___wmul@multiplier& (0+255),b
  4408  001AE4  0E00               	movlw	0
  4409  001AE6  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  4410  001AE8  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4411  001AEA  0E00               	movlw	0
  4412  001AEC  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4413  001AEE  0E03               	movlw	3
  4414  001AF0  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4415  001AF2  EC96  F01C         	call	___wmul	;wreg free
  4416  001AF6  0E29               	movlw	low __powers_
  4417  001AF8  0100               	movlb	0	; () banked
  4418  001AFA  256E               	addwf	?___wmul& (0+255),w,b
  4419  001AFC  6EF6               	movwf	tblptrl,c
  4420  001AFE  0E08               	movlw	high __powers_
  4421  001B00  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4422  001B02  6EF7               	movwf	tblptrh,c
  4423  001B04                     	if	0	;There are less than 3 active tblptr bytes
  4424  001B04                     	endif
  4425  001B04  0009               	tblrd		*+
  4426  001B06  CFF5 F074          	movff	tablat,___ftmul@f1
  4427  001B0A  0009               	tblrd		*+
  4428  001B0C  CFF5 F075          	movff	tablat,___ftmul@f1+1
  4429  001B10  000A               	tblrd		*-
  4430  001B12  CFF5 F076          	movff	tablat,___ftmul@f1+2
  4431  001B16  EC45  F016         	call	___ftmul	;wreg free
  4432  001B1A  C074  F086         	movff	?___ftmul,_scale$1426
  4433  001B1E  C075  F087         	movff	?___ftmul+1,_scale$1426+1
  4434  001B22  C076  F088         	movff	?___ftmul+2,_scale$1426+2
  4435                           
  4436                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4437  001B26  C086  F074         	movff	_scale$1426,___ftmul@f1
  4438  001B2A  C087  F075         	movff	_scale$1426+1,___ftmul@f1+1
  4439  001B2E  C088  F076         	movff	_scale$1426+2,___ftmul@f1+2
  4440  001B32  0E00               	movlw	0
  4441  001B34  0100               	movlb	0	; () banked
  4442  001B36  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4443  001B38  0E03               	movlw	3
  4444  001B3A  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4445  001B3C  0E00               	movlw	0
  4446  001B3E  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4447  001B40  0E0A               	movlw	10
  4448  001B42  6F62               	movwf	___awmod@divisor& (0+255),b
  4449  001B44  5189               	movf	scale@scl& (0+255),w,b
  4450  001B46  6F60               	movwf	___awmod@dividend& (0+255),b
  4451  001B48  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4452  001B4A  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  4453  001B4C  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  4454  001B4E  EC9E  F01B         	call	___awmod	;wreg free
  4455  001B52  C060  F06E         	movff	?___awmod,___wmul@multiplier
  4456  001B56  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  4457  001B5A  EC96  F01C         	call	___wmul	;wreg free
  4458  001B5E  0E29               	movlw	low __powers_
  4459  001B60  0100               	movlb	0	; () banked
  4460  001B62  256E               	addwf	?___wmul& (0+255),w,b
  4461  001B64  6EF6               	movwf	tblptrl,c
  4462  001B66  0E08               	movlw	high __powers_
  4463  001B68  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4464  001B6A  6EF7               	movwf	tblptrh,c
  4465  001B6C                     	if	0	;There are less than 3 active tblptr bytes
  4466  001B6C                     	endif
  4467  001B6C  0009               	tblrd		*+
  4468  001B6E  CFF5 F077          	movff	tablat,___ftmul@f2
  4469  001B72  0009               	tblrd		*+
  4470  001B74  CFF5 F078          	movff	tablat,___ftmul@f2+1
  4471  001B78  000A               	tblrd		*-
  4472  001B7A  CFF5 F079          	movff	tablat,___ftmul@f2+2
  4473  001B7E  EC45  F016         	call	___ftmul	;wreg free
  4474  001B82  C074  F083         	movff	?___ftmul,?_scale
  4475  001B86  C075  F084         	movff	?___ftmul+1,?_scale+1
  4476  001B8A  C076  F085         	movff	?___ftmul+2,?_scale+2
  4477  001B8E  0012               	return	
  4478  001B90                     l163:
  4479                           
  4480                           ;doprnt.c: 438: else if(scl > 10)
  4481  001B90  0100               	movlb	0	; () banked
  4482  001B92  5189               	movf	scale@scl& (0+255),w,b
  4483  001B94  0A80               	xorlw	128
  4484  001B96  0F75               	addlw	-139
  4485  001B98  A0D8               	btfss	status,0,c
  4486  001B9A  D056               	goto	l165
  4487                           
  4488                           ; BSR set to: 0
  4489                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  4490  001B9C  0E00               	movlw	0
  4491  001B9E  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  4492  001BA0  0E0A               	movlw	10
  4493  001BA2  6F68               	movwf	___awdiv@divisor& (0+255),b
  4494  001BA4  5189               	movf	scale@scl& (0+255),w,b
  4495  001BA6  6F66               	movwf	___awdiv@dividend& (0+255),b
  4496  001BA8  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  4497  001BAA  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  4498  001BAC  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  4499  001BAE  EC9E  F01A         	call	___awdiv	;wreg free
  4500  001BB2  0E09               	movlw	9
  4501  001BB4  0100               	movlb	0	; () banked
  4502  001BB6  2566               	addwf	?___awdiv& (0+255),w,b
  4503  001BB8  6F6E               	movwf	___wmul@multiplier& (0+255),b
  4504  001BBA  0E00               	movlw	0
  4505  001BBC  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  4506  001BBE  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4507  001BC0  0E00               	movlw	0
  4508  001BC2  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4509  001BC4  0E03               	movlw	3
  4510  001BC6  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4511  001BC8  EC96  F01C         	call	___wmul	;wreg free
  4512  001BCC  0E29               	movlw	low __powers_
  4513  001BCE  0100               	movlb	0	; () banked
  4514  001BD0  256E               	addwf	?___wmul& (0+255),w,b
  4515  001BD2  6EF6               	movwf	tblptrl,c
  4516  001BD4  0E08               	movlw	high __powers_
  4517  001BD6  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4518  001BD8  6EF7               	movwf	tblptrh,c
  4519  001BDA                     	if	0	;There are less than 3 active tblptr bytes
  4520  001BDA                     	endif
  4521  001BDA  0009               	tblrd		*+
  4522  001BDC  CFF5 F074          	movff	tablat,___ftmul@f1
  4523  001BE0  0009               	tblrd		*+
  4524  001BE2  CFF5 F075          	movff	tablat,___ftmul@f1+1
  4525  001BE6  000A               	tblrd		*-
  4526  001BE8  CFF5 F076          	movff	tablat,___ftmul@f1+2
  4527  001BEC  0E00               	movlw	0
  4528  001BEE  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4529  001BF0  0E03               	movlw	3
  4530  001BF2  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4531  001BF4  0E00               	movlw	0
  4532  001BF6  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4533  001BF8  0E0A               	movlw	10
  4534  001BFA  6F62               	movwf	___awmod@divisor& (0+255),b
  4535  001BFC  5189               	movf	scale@scl& (0+255),w,b
  4536  001BFE  6F60               	movwf	___awmod@dividend& (0+255),b
  4537  001C00  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4538  001C02  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  4539  001C04  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  4540  001C06  EC9E  F01B         	call	___awmod	;wreg free
  4541  001C0A  C060  F06E         	movff	?___awmod,___wmul@multiplier
  4542  001C0E  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  4543  001C12  EC96  F01C         	call	___wmul	;wreg free
  4544  001C16  0E29               	movlw	low __powers_
  4545  001C18  0100               	movlb	0	; () banked
  4546  001C1A  256E               	addwf	?___wmul& (0+255),w,b
  4547  001C1C  6EF6               	movwf	tblptrl,c
  4548  001C1E  0E08               	movlw	high __powers_
  4549  001C20  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4550  001C22  6EF7               	movwf	tblptrh,c
  4551  001C24                     	if	0	;There are less than 3 active tblptr bytes
  4552  001C24                     	endif
  4553  001C24  0009               	tblrd		*+
  4554  001C26  CFF5 F077          	movff	tablat,___ftmul@f2
  4555  001C2A  0009               	tblrd		*+
  4556  001C2C  CFF5 F078          	movff	tablat,___ftmul@f2+1
  4557  001C30  000A               	tblrd		*-
  4558  001C32  CFF5 F079          	movff	tablat,___ftmul@f2+2
  4559  001C36  EC45  F016         	call	___ftmul	;wreg free
  4560  001C3A  C074  F083         	movff	?___ftmul,?_scale
  4561  001C3E  C075  F084         	movff	?___ftmul+1,?_scale+1
  4562  001C42  C076  F085         	movff	?___ftmul+2,?_scale+2
  4563  001C46  0012               	return	
  4564  001C48                     l165:
  4565                           
  4566                           ;doprnt.c: 440: return _powers_[scl];
  4567  001C48  0100               	movlb	0	; () banked
  4568  001C4A  5189               	movf	scale@scl& (0+255),w,b
  4569  001C4C  0D03               	mullw	3
  4570  001C4E  0E29               	movlw	low __powers_
  4571  001C50  24F3               	addwf	prodl,w,c
  4572  001C52  6EF6               	movwf	tblptrl,c
  4573  001C54  0E08               	movlw	high __powers_
  4574  001C56  20F4               	addwfc	prodh,w,c
  4575  001C58  6EF7               	movwf	tblptrh,c
  4576  001C5A                     	if	0	;There are less than 3 active tblptr bytes
  4577  001C5A                     	endif
  4578  001C5A  0009               	tblrd		*+
  4579  001C5C  CFF5 F083          	movff	tablat,?_scale
  4580  001C60  0009               	tblrd		*+
  4581  001C62  CFF5 F084          	movff	tablat,?_scale+1
  4582  001C66  000A               	tblrd		*-
  4583  001C68  CFF5 F085          	movff	tablat,?_scale+2
  4584  001C6C  0012               	return	
  4585  001C6E                     __end_of_scale:
  4586                           	opt stack 0
  4587                           tblptru	equ	0xFF8
  4588                           tblptrh	equ	0xFF7
  4589                           tblptrl	equ	0xFF6
  4590                           tablat	equ	0xFF5
  4591                           prodh	equ	0xFF4
  4592                           prodl	equ	0xFF3
  4593                           postinc0	equ	0xFEE
  4594                           wreg	equ	0xFE8
  4595                           indf2	equ	0xFDF
  4596                           postinc2	equ	0xFDE
  4597                           postdec2	equ	0xFDD
  4598                           fsr2h	equ	0xFDA
  4599                           fsr2l	equ	0xFD9
  4600                           status	equ	0xFD8
  4601                           
  4602 ;; *************** function _isdigit *****************
  4603 ;; Defined at:
  4604 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  4605 ;; Parameters:    Size  Location     Type
  4606 ;;  c               1    wreg     unsigned char 
  4607 ;; Auto vars:     Size  Location     Type
  4608 ;;  c               1    2[BANK0 ] unsigned char 
  4609 ;; Return value:  Size  Location     Type
  4610 ;;		None               void
  4611 ;; Registers used:
  4612 ;;		wreg, status,2, status,0
  4613 ;; Tracked objects:
  4614 ;;		On entry : 0/0
  4615 ;;		On exit  : 0/0
  4616 ;;		Unchanged: 0/0
  4617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4618 ;;      Params:         0       0       0       0       0       0       0       0       0
  4619 ;;      Locals:         0       2       0       0       0       0       0       0       0
  4620 ;;      Temps:          0       1       0       0       0       0       0       0       0
  4621 ;;      Totals:         0       3       0       0       0       0       0       0       0
  4622 ;;Total ram usage:        3 bytes
  4623 ;; Hardware stack levels used:    1
  4624 ;; Hardware stack levels required when called:    3
  4625 ;; This function calls:
  4626 ;;		Nothing
  4627 ;; This function is called by:
  4628 ;;		_sprintf
  4629 ;; This function uses a non-reentrant model
  4630 ;;
  4631                           
  4632                           	psect	text4
  4633  0039C4                     __ptext4:
  4634                           	opt stack 0
  4635  0039C4                     _isdigit:
  4636                           	opt stack 26
  4637                           
  4638                           ;incstack = 0
  4639                           ;isdigit@c stored from wreg
  4640  0039C4  0100               	movlb	0	; () banked
  4641  0039C6  6F62               	movwf	isdigit@c& (0+255),b
  4642  0039C8  0E00               	movlw	0
  4643  0039CA  0100               	movlb	0	; () banked
  4644  0039CC  6F61               	movwf	_isdigit$1012& (0+255),b
  4645                           
  4646                           ; BSR set to: 0
  4647  0039CE  0E3A               	movlw	58
  4648  0039D0  6162               	cpfslt	isdigit@c& (0+255),b
  4649  0039D2  D005               	goto	l640
  4650                           
  4651                           ; BSR set to: 0
  4652  0039D4  0E2F               	movlw	47
  4653  0039D6  6562               	cpfsgt	isdigit@c& (0+255),b
  4654  0039D8  D002               	goto	l640
  4655                           
  4656                           ; BSR set to: 0
  4657  0039DA  0E01               	movlw	1
  4658  0039DC  6F61               	movwf	_isdigit$1012& (0+255),b
  4659  0039DE                     l640:
  4660                           
  4661                           ; BSR set to: 0
  4662                           
  4663                           ; BSR set to: 0
  4664  0039DE  C061  F060         	movff	_isdigit$1012,??_isdigit
  4665  0039E2  3160               	rrcf	??_isdigit& (0+255),w,b
  4666  0039E4  0012               	return	
  4667  0039E6                     __end_of_isdigit:
  4668                           	opt stack 0
  4669                           tblptru	equ	0xFF8
  4670                           tblptrh	equ	0xFF7
  4671                           tblptrl	equ	0xFF6
  4672                           tablat	equ	0xFF5
  4673                           prodh	equ	0xFF4
  4674                           prodl	equ	0xFF3
  4675                           postinc0	equ	0xFEE
  4676                           wreg	equ	0xFE8
  4677                           indf2	equ	0xFDF
  4678                           postinc2	equ	0xFDE
  4679                           postdec2	equ	0xFDD
  4680                           fsr2h	equ	0xFDA
  4681                           fsr2l	equ	0xFD9
  4682                           status	equ	0xFD8
  4683                           
  4684 ;; *************** function _fround *****************
  4685 ;; Defined at:
  4686 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  4687 ;; Parameters:    Size  Location     Type
  4688 ;;  prec            1    wreg     unsigned char 
  4689 ;; Auto vars:     Size  Location     Type
  4690 ;;  prec            1   44[BANK0 ] unsigned char 
  4691 ;; Return value:  Size  Location     Type
  4692 ;;                  3   35[BANK0 ] unsigned char 
  4693 ;; Registers used:
  4694 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4695 ;; Tracked objects:
  4696 ;;		On entry : 0/0
  4697 ;;		On exit  : 0/0
  4698 ;;		Unchanged: 0/0
  4699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4700 ;;      Params:         0       3       0       0       0       0       0       0       0
  4701 ;;      Locals:         0       7       0       0       0       0       0       0       0
  4702 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4703 ;;      Totals:         0      10       0       0       0       0       0       0       0
  4704 ;;Total ram usage:       10 bytes
  4705 ;; Hardware stack levels used:    1
  4706 ;; Hardware stack levels required when called:    5
  4707 ;; This function calls:
  4708 ;;		___awdiv
  4709 ;;		___awmod
  4710 ;;		___ftmul
  4711 ;;		___wmul
  4712 ;; This function is called by:
  4713 ;;		_sprintf
  4714 ;; This function uses a non-reentrant model
  4715 ;;
  4716                           
  4717                           	psect	text5
  4718  001C6E                     __ptext5:
  4719                           	opt stack 0
  4720  001C6E                     _fround:
  4721                           	opt stack 24
  4722                           
  4723                           ; BSR set to: 0
  4724                           ;incstack = 0
  4725                           ;fround@prec stored from wreg
  4726  001C6E  0100               	movlb	0	; () banked
  4727  001C70  6F8C               	movwf	fround@prec& (0+255),b
  4728                           
  4729                           ;doprnt.c: 413: if(prec>=110)
  4730  001C72  0E6D               	movlw	109
  4731  001C74  0100               	movlb	0	; () banked
  4732  001C76  658C               	cpfsgt	fround@prec& (0+255),b
  4733  001C78  D0A6               	goto	l152
  4734                           
  4735                           ; BSR set to: 0
  4736                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4737  001C7A  0E00               	movlw	0
  4738  001C7C  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4739  001C7E  0E03               	movlw	3
  4740  001C80  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4741  001C82  0E00               	movlw	0
  4742  001C84  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  4743  001C86  0E0A               	movlw	10
  4744  001C88  6F68               	movwf	___awdiv@divisor& (0+255),b
  4745  001C8A  0E00               	movlw	0
  4746  001C8C  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4747  001C8E  0E64               	movlw	100
  4748  001C90  6F62               	movwf	___awmod@divisor& (0+255),b
  4749  001C92  C08C  F060         	movff	fround@prec,___awmod@dividend
  4750  001C96  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4751  001C98  EC9E  F01B         	call	___awmod	;wreg free
  4752  001C9C  C060  F066         	movff	?___awmod,___awdiv@dividend
  4753  001CA0  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
  4754  001CA4  EC9E  F01A         	call	___awdiv	;wreg free
  4755  001CA8  0E09               	movlw	9
  4756  001CAA  0100               	movlb	0	; () banked
  4757  001CAC  2566               	addwf	?___awdiv& (0+255),w,b
  4758  001CAE  6F6E               	movwf	___wmul@multiplier& (0+255),b
  4759  001CB0  0E00               	movlw	0
  4760  001CB2  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  4761  001CB4  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4762  001CB6  EC96  F01C         	call	___wmul	;wreg free
  4763  001CBA  0E50               	movlw	low __npowers_
  4764  001CBC  0100               	movlb	0	; () banked
  4765  001CBE  256E               	addwf	?___wmul& (0+255),w,b
  4766  001CC0  6EF6               	movwf	tblptrl,c
  4767  001CC2  0E08               	movlw	high __npowers_
  4768  001CC4  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4769  001CC6  6EF7               	movwf	tblptrh,c
  4770  001CC8                     	if	0	;There are less than 3 active tblptr bytes
  4771  001CC8                     	endif
  4772  001CC8  0009               	tblrd		*+
  4773  001CCA  CFF5 F077          	movff	tablat,___ftmul@f2
  4774  001CCE  0009               	tblrd		*+
  4775  001CD0  CFF5 F078          	movff	tablat,___ftmul@f2+1
  4776  001CD4  000A               	tblrd		*-
  4777  001CD6  CFF5 F079          	movff	tablat,___ftmul@f2+2
  4778  001CDA  0E00               	movlw	0
  4779  001CDC  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  4780  001CDE  0E64               	movlw	100
  4781  001CE0  6F68               	movwf	___awdiv@divisor& (0+255),b
  4782  001CE2  C08C  F066         	movff	fround@prec,___awdiv@dividend
  4783  001CE6  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  4784  001CE8  EC9E  F01A         	call	___awdiv	;wreg free
  4785  001CEC  0E12               	movlw	18
  4786  001CEE  0100               	movlb	0	; () banked
  4787  001CF0  2566               	addwf	?___awdiv& (0+255),w,b
  4788  001CF2  6F6E               	movwf	___wmul@multiplier& (0+255),b
  4789  001CF4  0E00               	movlw	0
  4790  001CF6  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  4791  001CF8  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4792  001CFA  0E00               	movlw	0
  4793  001CFC  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4794  001CFE  0E03               	movlw	3
  4795  001D00  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4796  001D02  EC96  F01C         	call	___wmul	;wreg free
  4797  001D06  0E50               	movlw	low __npowers_
  4798  001D08  0100               	movlb	0	; () banked
  4799  001D0A  256E               	addwf	?___wmul& (0+255),w,b
  4800  001D0C  6EF6               	movwf	tblptrl,c
  4801  001D0E  0E08               	movlw	high __npowers_
  4802  001D10  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4803  001D12  6EF7               	movwf	tblptrh,c
  4804  001D14                     	if	0	;There are less than 3 active tblptr bytes
  4805  001D14                     	endif
  4806  001D14  0009               	tblrd		*+
  4807  001D16  CFF5 F074          	movff	tablat,___ftmul@f1
  4808  001D1A  0009               	tblrd		*+
  4809  001D1C  CFF5 F075          	movff	tablat,___ftmul@f1+1
  4810  001D20  000A               	tblrd		*-
  4811  001D22  CFF5 F076          	movff	tablat,___ftmul@f1+2
  4812  001D26  EC45  F016         	call	___ftmul	;wreg free
  4813  001D2A  C074  F089         	movff	?___ftmul,_fround$1424
  4814  001D2E  C075  F08A         	movff	?___ftmul+1,_fround$1424+1
  4815  001D32  C076  F08B         	movff	?___ftmul+2,_fround$1424+2
  4816                           
  4817                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4818  001D36  0E00               	movlw	0
  4819  001D38  0100               	movlb	0	; () banked
  4820  001D3A  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4821  001D3C  0E03               	movlw	3
  4822  001D3E  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4823  001D40  0E00               	movlw	0
  4824  001D42  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4825  001D44  0E0A               	movlw	10
  4826  001D46  6F62               	movwf	___awmod@divisor& (0+255),b
  4827  001D48  C08C  F060         	movff	fround@prec,___awmod@dividend
  4828  001D4C  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4829  001D4E  EC9E  F01B         	call	___awmod	;wreg free
  4830  001D52  C060  F06E         	movff	?___awmod,___wmul@multiplier
  4831  001D56  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  4832  001D5A  EC96  F01C         	call	___wmul	;wreg free
  4833  001D5E  0E50               	movlw	low __npowers_
  4834  001D60  0100               	movlb	0	; () banked
  4835  001D62  256E               	addwf	?___wmul& (0+255),w,b
  4836  001D64  6EF6               	movwf	tblptrl,c
  4837  001D66  0E08               	movlw	high __npowers_
  4838  001D68  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4839  001D6A  6EF7               	movwf	tblptrh,c
  4840  001D6C                     	if	0	;There are less than 3 active tblptr bytes
  4841  001D6C                     	endif
  4842  001D6C  0009               	tblrd		*+
  4843  001D6E  CFF5 F077          	movff	tablat,___ftmul@f2
  4844  001D72  0009               	tblrd		*+
  4845  001D74  CFF5 F078          	movff	tablat,___ftmul@f2+1
  4846  001D78  000A               	tblrd		*-
  4847  001D7A  CFF5 F079          	movff	tablat,___ftmul@f2+2
  4848  001D7E  C089  F074         	movff	_fround$1424,___ftmul@f1
  4849  001D82  C08A  F075         	movff	_fround$1424+1,___ftmul@f1+1
  4850  001D86  C08B  F076         	movff	_fround$1424+2,___ftmul@f1+2
  4851  001D8A  EC45  F016         	call	___ftmul	;wreg free
  4852  001D8E  C074  F086         	movff	?___ftmul,_fround$1425
  4853  001D92  C075  F087         	movff	?___ftmul+1,_fround$1425+1
  4854  001D96  C076  F088         	movff	?___ftmul+2,_fround$1425+2
  4855                           
  4856                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4857  001D9A  C086  F074         	movff	_fround$1425,___ftmul@f1
  4858  001D9E  C087  F075         	movff	_fround$1425+1,___ftmul@f1+1
  4859  001DA2  C088  F076         	movff	_fround$1425+2,___ftmul@f1+2
  4860  001DA6  0E00               	movlw	0
  4861  001DA8  0100               	movlb	0	; () banked
  4862  001DAA  6F77               	movwf	___ftmul@f2& (0+255),b
  4863  001DAC  0E00               	movlw	0
  4864  001DAE  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  4865  001DB0  0E3F               	movlw	63
  4866  001DB2  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  4867  001DB4  EC45  F016         	call	___ftmul	;wreg free
  4868  001DB8  C074  F083         	movff	?___ftmul,?_fround
  4869  001DBC  C075  F084         	movff	?___ftmul+1,?_fround+1
  4870  001DC0  C076  F085         	movff	?___ftmul+2,?_fround+2
  4871  001DC4  0012               	return	
  4872  001DC6                     l152:
  4873                           
  4874                           ;doprnt.c: 415: else if(prec > 10)
  4875  001DC6  0E0A               	movlw	10
  4876  001DC8  0100               	movlb	0	; () banked
  4877  001DCA  658C               	cpfsgt	fround@prec& (0+255),b
  4878  001DCC  D067               	goto	l155
  4879                           
  4880                           ; BSR set to: 0
  4881                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4882  001DCE  0E00               	movlw	0
  4883  001DD0  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4884  001DD2  0E03               	movlw	3
  4885  001DD4  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4886  001DD6  0E00               	movlw	0
  4887  001DD8  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4888  001DDA  0E0A               	movlw	10
  4889  001DDC  6F62               	movwf	___awmod@divisor& (0+255),b
  4890  001DDE  C08C  F060         	movff	fround@prec,___awmod@dividend
  4891  001DE2  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4892  001DE4  EC9E  F01B         	call	___awmod	;wreg free
  4893  001DE8  C060  F06E         	movff	?___awmod,___wmul@multiplier
  4894  001DEC  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  4895  001DF0  EC96  F01C         	call	___wmul	;wreg free
  4896  001DF4  0E50               	movlw	low __npowers_
  4897  001DF6  0100               	movlb	0	; () banked
  4898  001DF8  256E               	addwf	?___wmul& (0+255),w,b
  4899  001DFA  6EF6               	movwf	tblptrl,c
  4900  001DFC  0E08               	movlw	high __npowers_
  4901  001DFE  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4902  001E00  6EF7               	movwf	tblptrh,c
  4903  001E02                     	if	0	;There are less than 3 active tblptr bytes
  4904  001E02                     	endif
  4905  001E02  0009               	tblrd		*+
  4906  001E04  CFF5 F077          	movff	tablat,___ftmul@f2
  4907  001E08  0009               	tblrd		*+
  4908  001E0A  CFF5 F078          	movff	tablat,___ftmul@f2+1
  4909  001E0E  000A               	tblrd		*-
  4910  001E10  CFF5 F079          	movff	tablat,___ftmul@f2+2
  4911  001E14  0E00               	movlw	0
  4912  001E16  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  4913  001E18  0E0A               	movlw	10
  4914  001E1A  6F68               	movwf	___awdiv@divisor& (0+255),b
  4915  001E1C  C08C  F066         	movff	fround@prec,___awdiv@dividend
  4916  001E20  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  4917  001E22  EC9E  F01A         	call	___awdiv	;wreg free
  4918  001E26  0E09               	movlw	9
  4919  001E28  0100               	movlb	0	; () banked
  4920  001E2A  2566               	addwf	?___awdiv& (0+255),w,b
  4921  001E2C  6F6E               	movwf	___wmul@multiplier& (0+255),b
  4922  001E2E  0E00               	movlw	0
  4923  001E30  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  4924  001E32  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4925  001E34  0E00               	movlw	0
  4926  001E36  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4927  001E38  0E03               	movlw	3
  4928  001E3A  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4929  001E3C  EC96  F01C         	call	___wmul	;wreg free
  4930  001E40  0E50               	movlw	low __npowers_
  4931  001E42  0100               	movlb	0	; () banked
  4932  001E44  256E               	addwf	?___wmul& (0+255),w,b
  4933  001E46  6EF6               	movwf	tblptrl,c
  4934  001E48  0E08               	movlw	high __npowers_
  4935  001E4A  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4936  001E4C  6EF7               	movwf	tblptrh,c
  4937  001E4E                     	if	0	;There are less than 3 active tblptr bytes
  4938  001E4E                     	endif
  4939  001E4E  0009               	tblrd		*+
  4940  001E50  CFF5 F074          	movff	tablat,___ftmul@f1
  4941  001E54  0009               	tblrd		*+
  4942  001E56  CFF5 F075          	movff	tablat,___ftmul@f1+1
  4943  001E5A  000A               	tblrd		*-
  4944  001E5C  CFF5 F076          	movff	tablat,___ftmul@f1+2
  4945  001E60  EC45  F016         	call	___ftmul	;wreg free
  4946  001E64  C074  F089         	movff	?___ftmul,_fround$1424
  4947  001E68  C075  F08A         	movff	?___ftmul+1,_fround$1424+1
  4948  001E6C  C076  F08B         	movff	?___ftmul+2,_fround$1424+2
  4949                           
  4950                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4951  001E70  C089  F074         	movff	_fround$1424,___ftmul@f1
  4952  001E74  C08A  F075         	movff	_fround$1424+1,___ftmul@f1+1
  4953  001E78  C08B  F076         	movff	_fround$1424+2,___ftmul@f1+2
  4954  001E7C  0E00               	movlw	0
  4955  001E7E  0100               	movlb	0	; () banked
  4956  001E80  6F77               	movwf	___ftmul@f2& (0+255),b
  4957  001E82  0E00               	movlw	0
  4958  001E84  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  4959  001E86  0E3F               	movlw	63
  4960  001E88  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  4961  001E8A  EC45  F016         	call	___ftmul	;wreg free
  4962  001E8E  C074  F083         	movff	?___ftmul,?_fround
  4963  001E92  C075  F084         	movff	?___ftmul+1,?_fround+1
  4964  001E96  C076  F085         	movff	?___ftmul+2,?_fround+2
  4965  001E9A  0012               	return	
  4966  001E9C                     l155:
  4967                           
  4968                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  4969  001E9C  0100               	movlb	0	; () banked
  4970  001E9E  518C               	movf	fround@prec& (0+255),w,b
  4971  001EA0  0D03               	mullw	3
  4972  001EA2  0E50               	movlw	low __npowers_
  4973  001EA4  24F3               	addwf	prodl,w,c
  4974  001EA6  6EF6               	movwf	tblptrl,c
  4975  001EA8  0E08               	movlw	high __npowers_
  4976  001EAA  20F4               	addwfc	prodh,w,c
  4977  001EAC  6EF7               	movwf	tblptrh,c
  4978  001EAE                     	if	0	;There are less than 3 active tblptr bytes
  4979  001EAE                     	endif
  4980  001EAE  0009               	tblrd		*+
  4981  001EB0  CFF5 F074          	movff	tablat,___ftmul@f1
  4982  001EB4  0009               	tblrd		*+
  4983  001EB6  CFF5 F075          	movff	tablat,___ftmul@f1+1
  4984  001EBA  000A               	tblrd		*-
  4985  001EBC  CFF5 F076          	movff	tablat,___ftmul@f1+2
  4986  001EC0  0E00               	movlw	0
  4987  001EC2  6F77               	movwf	___ftmul@f2& (0+255),b
  4988  001EC4  0E00               	movlw	0
  4989  001EC6  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  4990  001EC8  0E3F               	movlw	63
  4991  001ECA  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  4992  001ECC  EC45  F016         	call	___ftmul	;wreg free
  4993  001ED0  C074  F083         	movff	?___ftmul,?_fround
  4994  001ED4  C075  F084         	movff	?___ftmul+1,?_fround+1
  4995  001ED8  C076  F085         	movff	?___ftmul+2,?_fround+2
  4996  001EDC  0012               	return	
  4997  001EDE                     __end_of_fround:
  4998                           	opt stack 0
  4999                           tblptru	equ	0xFF8
  5000                           tblptrh	equ	0xFF7
  5001                           tblptrl	equ	0xFF6
  5002                           tablat	equ	0xFF5
  5003                           prodh	equ	0xFF4
  5004                           prodl	equ	0xFF3
  5005                           postinc0	equ	0xFEE
  5006                           wreg	equ	0xFE8
  5007                           indf2	equ	0xFDF
  5008                           postinc2	equ	0xFDE
  5009                           postdec2	equ	0xFDD
  5010                           fsr2h	equ	0xFDA
  5011                           fsr2l	equ	0xFD9
  5012                           status	equ	0xFD8
  5013                           
  5014 ;; *************** function ___awmod *****************
  5015 ;; Defined at:
  5016 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  5017 ;; Parameters:    Size  Location     Type
  5018 ;;  dividend        2    0[BANK0 ] int 
  5019 ;;  divisor         2    2[BANK0 ] int 
  5020 ;; Auto vars:     Size  Location     Type
  5021 ;;  sign            1    5[BANK0 ] unsigned char 
  5022 ;;  counter         1    4[BANK0 ] unsigned char 
  5023 ;; Return value:  Size  Location     Type
  5024 ;;                  2    0[BANK0 ] int 
  5025 ;; Registers used:
  5026 ;;		wreg, status,2, status,0
  5027 ;; Tracked objects:
  5028 ;;		On entry : 0/0
  5029 ;;		On exit  : 0/0
  5030 ;;		Unchanged: 0/0
  5031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5032 ;;      Params:         0       4       0       0       0       0       0       0       0
  5033 ;;      Locals:         0       2       0       0       0       0       0       0       0
  5034 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5035 ;;      Totals:         0       6       0       0       0       0       0       0       0
  5036 ;;Total ram usage:        6 bytes
  5037 ;; Hardware stack levels used:    1
  5038 ;; Hardware stack levels required when called:    3
  5039 ;; This function calls:
  5040 ;;		Nothing
  5041 ;; This function is called by:
  5042 ;;		_fround
  5043 ;;		_scale
  5044 ;; This function uses a non-reentrant model
  5045 ;;
  5046                           
  5047                           	psect	text6
  5048  00373C                     __ptext6:
  5049                           	opt stack 0
  5050  00373C                     ___awmod:
  5051                           	opt stack 25
  5052                           
  5053                           ;incstack = 0
  5054  00373C  0E00               	movlw	0
  5055  00373E  0100               	movlb	0	; () banked
  5056  003740  6F65               	movwf	___awmod@sign& (0+255),b
  5057                           
  5058                           ; BSR set to: 0
  5059  003742  AF61               	btfss	(___awmod@dividend+1)& (0+255),7,b
  5060  003744  D006               	goto	l451
  5061                           
  5062                           ; BSR set to: 0
  5063  003746  6D60               	negf	___awmod@dividend& (0+255),b
  5064  003748  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  5065  00374A  B0D8               	btfsc	status,0,c
  5066  00374C  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  5067                           
  5068                           ; BSR set to: 0
  5069  00374E  0E01               	movlw	1
  5070  003750  6F65               	movwf	___awmod@sign& (0+255),b
  5071  003752                     l451:
  5072                           
  5073                           ; BSR set to: 0
  5074                           
  5075                           ; BSR set to: 0
  5076  003752  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5077  003754  D004               	goto	l452
  5078                           
  5079                           ; BSR set to: 0
  5080  003756  6D62               	negf	___awmod@divisor& (0+255),b
  5081  003758  1F63               	comf	(___awmod@divisor+1)& (0+255),f,b
  5082  00375A  B0D8               	btfsc	status,0,c
  5083  00375C  2B63               	incf	(___awmod@divisor+1)& (0+255),f,b
  5084  00375E                     l452:
  5085                           
  5086                           ; BSR set to: 0
  5087                           
  5088                           ; BSR set to: 0
  5089  00375E  5162               	movf	___awmod@divisor& (0+255),w,b
  5090  003760  1163               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  5091  003762  B4D8               	btfsc	status,2,c
  5092  003764  D018               	goto	l459
  5093                           
  5094                           ; BSR set to: 0
  5095  003766  0E01               	movlw	1
  5096  003768  6F64               	movwf	___awmod@counter& (0+255),b
  5097  00376A  D004               	goto	l454
  5098  00376C                     
  5099                           ; BSR set to: 0
  5100                           
  5101                           ; BSR set to: 0
  5102  00376C  90D8               	bcf	status,0,c
  5103  00376E  3762               	rlcf	___awmod@divisor& (0+255),f,b
  5104  003770  3763               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  5105  003772  2B64               	incf	___awmod@counter& (0+255),f,b
  5106  003774                     l454:
  5107                           
  5108                           ; BSR set to: 0
  5109                           
  5110                           ; BSR set to: 0
  5111  003774  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5112  003776  D7FA               	goto	l455
  5113  003778                     u2780:
  5114                           
  5115                           ; BSR set to: 0
  5116                           
  5117                           ; BSR set to: 0
  5118                           
  5119                           ; BSR set to: 0
  5120  003778  5162               	movf	___awmod@divisor& (0+255),w,b
  5121  00377A  5D60               	subwf	___awmod@dividend& (0+255),w,b
  5122  00377C  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  5123  00377E  5961               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  5124  003780  A0D8               	btfss	status,0,c
  5125  003782  D004               	goto	l458
  5126                           
  5127                           ; BSR set to: 0
  5128  003784  5162               	movf	___awmod@divisor& (0+255),w,b
  5129  003786  5F60               	subwf	___awmod@dividend& (0+255),f,b
  5130  003788  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  5131  00378A  5B61               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  5132  00378C                     l458:
  5133                           
  5134                           ; BSR set to: 0
  5135                           
  5136                           ; BSR set to: 0
  5137  00378C  90D8               	bcf	status,0,c
  5138  00378E  3363               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  5139  003790  3362               	rrcf	___awmod@divisor& (0+255),f,b
  5140                           
  5141                           ; BSR set to: 0
  5142  003792  2F64               	decfsz	___awmod@counter& (0+255),f,b
  5143  003794  D7F1               	goto	u2780
  5144  003796                     l459:
  5145                           
  5146                           ; BSR set to: 0
  5147                           
  5148                           ; BSR set to: 0
  5149                           
  5150                           ; BSR set to: 0
  5151  003796  5165               	movf	___awmod@sign& (0+255),w,b
  5152  003798  B4D8               	btfsc	status,2,c
  5153  00379A  D004               	goto	l460
  5154                           
  5155                           ; BSR set to: 0
  5156  00379C  6D60               	negf	___awmod@dividend& (0+255),b
  5157  00379E  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  5158  0037A0  B0D8               	btfsc	status,0,c
  5159  0037A2  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  5160  0037A4                     l460:
  5161                           
  5162                           ; BSR set to: 0
  5163                           
  5164                           ; BSR set to: 0
  5165  0037A4  C060  F060         	movff	___awmod@dividend,?___awmod
  5166  0037A8  C061  F061         	movff	___awmod@dividend+1,?___awmod+1
  5167  0037AC  0012               	return	
  5168  0037AE                     __end_of___awmod:
  5169                           	opt stack 0
  5170                           tblptru	equ	0xFF8
  5171                           tblptrh	equ	0xFF7
  5172                           tblptrl	equ	0xFF6
  5173                           tablat	equ	0xFF5
  5174                           prodh	equ	0xFF4
  5175                           prodl	equ	0xFF3
  5176                           postinc0	equ	0xFEE
  5177                           wreg	equ	0xFE8
  5178                           indf2	equ	0xFDF
  5179                           postinc2	equ	0xFDE
  5180                           postdec2	equ	0xFDD
  5181                           fsr2h	equ	0xFDA
  5182                           fsr2l	equ	0xFD9
  5183                           status	equ	0xFD8
  5184                           
  5185 ;; *************** function ___awdiv *****************
  5186 ;; Defined at:
  5187 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  5188 ;; Parameters:    Size  Location     Type
  5189 ;;  dividend        2    6[BANK0 ] int 
  5190 ;;  divisor         2    8[BANK0 ] int 
  5191 ;; Auto vars:     Size  Location     Type
  5192 ;;  quotient        2   12[BANK0 ] int 
  5193 ;;  sign            1   11[BANK0 ] unsigned char 
  5194 ;;  counter         1   10[BANK0 ] unsigned char 
  5195 ;; Return value:  Size  Location     Type
  5196 ;;                  2    6[BANK0 ] int 
  5197 ;; Registers used:
  5198 ;;		wreg, status,2, status,0
  5199 ;; Tracked objects:
  5200 ;;		On entry : 0/0
  5201 ;;		On exit  : 0/0
  5202 ;;		Unchanged: 0/0
  5203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5204 ;;      Params:         0       4       0       0       0       0       0       0       0
  5205 ;;      Locals:         0       4       0       0       0       0       0       0       0
  5206 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5207 ;;      Totals:         0       8       0       0       0       0       0       0       0
  5208 ;;Total ram usage:        8 bytes
  5209 ;; Hardware stack levels used:    1
  5210 ;; Hardware stack levels required when called:    3
  5211 ;; This function calls:
  5212 ;;		Nothing
  5213 ;; This function is called by:
  5214 ;;		_fround
  5215 ;;		_scale
  5216 ;;		_sprintf
  5217 ;; This function uses a non-reentrant model
  5218 ;;
  5219                           
  5220                           	psect	text7
  5221  00353C                     __ptext7:
  5222                           	opt stack 0
  5223  00353C                     ___awdiv:
  5224                           	opt stack 25
  5225                           
  5226                           ; BSR set to: 0
  5227                           ;incstack = 0
  5228  00353C  0E00               	movlw	0
  5229  00353E  0100               	movlb	0	; () banked
  5230  003540  6F6B               	movwf	___awdiv@sign& (0+255),b
  5231                           
  5232                           ; BSR set to: 0
  5233  003542  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5234  003544  D006               	goto	l438
  5235                           
  5236                           ; BSR set to: 0
  5237  003546  6D68               	negf	___awdiv@divisor& (0+255),b
  5238  003548  1F69               	comf	(___awdiv@divisor+1)& (0+255),f,b
  5239  00354A  B0D8               	btfsc	status,0,c
  5240  00354C  2B69               	incf	(___awdiv@divisor+1)& (0+255),f,b
  5241                           
  5242                           ; BSR set to: 0
  5243  00354E  0E01               	movlw	1
  5244  003550  6F6B               	movwf	___awdiv@sign& (0+255),b
  5245  003552                     l438:
  5246                           
  5247                           ; BSR set to: 0
  5248                           
  5249                           ; BSR set to: 0
  5250  003552  AF67               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  5251  003554  D006               	goto	l439
  5252                           
  5253                           ; BSR set to: 0
  5254  003556  6D66               	negf	___awdiv@dividend& (0+255),b
  5255  003558  1F67               	comf	(___awdiv@dividend+1)& (0+255),f,b
  5256  00355A  B0D8               	btfsc	status,0,c
  5257  00355C  2B67               	incf	(___awdiv@dividend+1)& (0+255),f,b
  5258                           
  5259                           ; BSR set to: 0
  5260  00355E  0E01               	movlw	1
  5261  003560  1B6B               	xorwf	___awdiv@sign& (0+255),f,b
  5262  003562                     l439:
  5263                           
  5264                           ; BSR set to: 0
  5265                           
  5266                           ; BSR set to: 0
  5267  003562  0E00               	movlw	0
  5268  003564  6F6D               	movwf	(___awdiv@quotient+1)& (0+255),b
  5269  003566  0E00               	movlw	0
  5270  003568  6F6C               	movwf	___awdiv@quotient& (0+255),b
  5271                           
  5272                           ; BSR set to: 0
  5273  00356A  5168               	movf	___awdiv@divisor& (0+255),w,b
  5274  00356C  1169               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  5275  00356E  B4D8               	btfsc	status,2,c
  5276  003570  D01C               	goto	l446
  5277                           
  5278                           ; BSR set to: 0
  5279  003572  0E01               	movlw	1
  5280  003574  6F6A               	movwf	___awdiv@counter& (0+255),b
  5281  003576  D004               	goto	l441
  5282  003578                     
  5283                           ; BSR set to: 0
  5284                           
  5285                           ; BSR set to: 0
  5286  003578  90D8               	bcf	status,0,c
  5287  00357A  3768               	rlcf	___awdiv@divisor& (0+255),f,b
  5288  00357C  3769               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  5289  00357E  2B6A               	incf	___awdiv@counter& (0+255),f,b
  5290  003580                     l441:
  5291                           
  5292                           ; BSR set to: 0
  5293                           
  5294                           ; BSR set to: 0
  5295  003580  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5296  003582  D7FA               	goto	l442
  5297  003584                     u2720:
  5298                           
  5299                           ; BSR set to: 0
  5300                           
  5301                           ; BSR set to: 0
  5302                           
  5303                           ; BSR set to: 0
  5304  003584  90D8               	bcf	status,0,c
  5305  003586  376C               	rlcf	___awdiv@quotient& (0+255),f,b
  5306  003588  376D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  5307                           
  5308                           ; BSR set to: 0
  5309  00358A  5168               	movf	___awdiv@divisor& (0+255),w,b
  5310  00358C  5D66               	subwf	___awdiv@dividend& (0+255),w,b
  5311  00358E  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5312  003590  5967               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  5313  003592  A0D8               	btfss	status,0,c
  5314  003594  D005               	goto	l445
  5315                           
  5316                           ; BSR set to: 0
  5317  003596  5168               	movf	___awdiv@divisor& (0+255),w,b
  5318  003598  5F66               	subwf	___awdiv@dividend& (0+255),f,b
  5319  00359A  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5320  00359C  5B67               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  5321                           
  5322                           ; BSR set to: 0
  5323  00359E  816C               	bsf	___awdiv@quotient& (0+255),0,b
  5324  0035A0                     l445:
  5325                           
  5326                           ; BSR set to: 0
  5327                           
  5328                           ; BSR set to: 0
  5329  0035A0  90D8               	bcf	status,0,c
  5330  0035A2  3369               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  5331  0035A4  3368               	rrcf	___awdiv@divisor& (0+255),f,b
  5332                           
  5333                           ; BSR set to: 0
  5334  0035A6  2F6A               	decfsz	___awdiv@counter& (0+255),f,b
  5335  0035A8  D7ED               	goto	u2720
  5336  0035AA                     l446:
  5337                           
  5338                           ; BSR set to: 0
  5339                           
  5340                           ; BSR set to: 0
  5341                           
  5342                           ; BSR set to: 0
  5343  0035AA  516B               	movf	___awdiv@sign& (0+255),w,b
  5344  0035AC  B4D8               	btfsc	status,2,c
  5345  0035AE  D004               	goto	l447
  5346                           
  5347                           ; BSR set to: 0
  5348  0035B0  6D6C               	negf	___awdiv@quotient& (0+255),b
  5349  0035B2  1F6D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  5350  0035B4  B0D8               	btfsc	status,0,c
  5351  0035B6  2B6D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  5352  0035B8                     l447:
  5353                           
  5354                           ; BSR set to: 0
  5355                           
  5356                           ; BSR set to: 0
  5357  0035B8  C06C  F066         	movff	___awdiv@quotient,?___awdiv
  5358  0035BC  C06D  F067         	movff	___awdiv@quotient+1,?___awdiv+1
  5359  0035C0  0012               	return	
  5360  0035C2                     __end_of___awdiv:
  5361                           	opt stack 0
  5362                           tblptru	equ	0xFF8
  5363                           tblptrh	equ	0xFF7
  5364                           tblptrl	equ	0xFF6
  5365                           tablat	equ	0xFF5
  5366                           prodh	equ	0xFF4
  5367                           prodl	equ	0xFF3
  5368                           postinc0	equ	0xFEE
  5369                           wreg	equ	0xFE8
  5370                           indf2	equ	0xFDF
  5371                           postinc2	equ	0xFDE
  5372                           postdec2	equ	0xFDD
  5373                           fsr2h	equ	0xFDA
  5374                           fsr2l	equ	0xFD9
  5375                           status	equ	0xFD8
  5376                           
  5377 ;; *************** function __tdiv_to_l_ *****************
  5378 ;; Defined at:
  5379 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdivl.c"
  5380 ;; Parameters:    Size  Location     Type
  5381 ;;  f1              3    0[BANK0 ] float 
  5382 ;;  f2              3    3[BANK0 ] float 
  5383 ;; Auto vars:     Size  Location     Type
  5384 ;;  quot            4    9[BANK0 ] unsigned long 
  5385 ;;  exp1            1   14[BANK0 ] unsigned char 
  5386 ;;  cntr            1   13[BANK0 ] unsigned char 
  5387 ;; Return value:  Size  Location     Type
  5388 ;;                  4    0[BANK0 ] unsigned long 
  5389 ;; Registers used:
  5390 ;;		wreg, status,2, status,0
  5391 ;; Tracked objects:
  5392 ;;		On entry : 0/0
  5393 ;;		On exit  : 0/0
  5394 ;;		Unchanged: 0/0
  5395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5396 ;;      Params:         0       6       0       0       0       0       0       0       0
  5397 ;;      Locals:         0       6       0       0       0       0       0       0       0
  5398 ;;      Temps:          0       3       0       0       0       0       0       0       0
  5399 ;;      Totals:         0      15       0       0       0       0       0       0       0
  5400 ;;Total ram usage:       15 bytes
  5401 ;; Hardware stack levels used:    1
  5402 ;; Hardware stack levels required when called:    3
  5403 ;; This function calls:
  5404 ;;		Nothing
  5405 ;; This function is called by:
  5406 ;;		_sprintf
  5407 ;; This function uses a non-reentrant model
  5408 ;;
  5409                           
  5410                           	psect	text8
  5411  0025CA                     __ptext8:
  5412                           	opt stack 0
  5413  0025CA                     __tdiv_to_l_:
  5414                           	opt stack 26
  5415                           
  5416                           ; BSR set to: 0
  5417                           ;incstack = 0
  5418  0025CA  C062  F066         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  5419  0025CE  0100               	movlb	0	; () banked
  5420  0025D0  6B67               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  5421  0025D2  6B68               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  5422  0025D4  3561               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),w,b
  5423  0025D6  3766               	rlcf	??__tdiv_to_l_& (0+255),f,b
  5424  0025D8  E301               	bnc	u3021
  5425  0025DA  8167               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  5426  0025DC                     u3021:
  5427  0025DC  5166               	movf	??__tdiv_to_l_& (0+255),w,b
  5428  0025DE  6F6E               	movwf	__tdiv_to_l_@exp1& (0+255),b
  5429  0025E0  516E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  5430  0025E2  A4D8               	btfss	status,2,c
  5431  0025E4  D009               	goto	l580
  5432                           
  5433                           ; BSR set to: 0
  5434  0025E6  0E00               	movlw	0
  5435  0025E8  6F60               	movwf	?__tdiv_to_l_& (0+255),b
  5436  0025EA  0E00               	movlw	0
  5437  0025EC  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  5438  0025EE  0E00               	movlw	0
  5439  0025F0  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  5440  0025F2  0E00               	movlw	0
  5441  0025F4  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  5442                           
  5443                           ; BSR set to: 0
  5444  0025F6  0012               	return	
  5445  0025F8                     l580:
  5446                           
  5447                           ; BSR set to: 0
  5448                           
  5449                           ; BSR set to: 0
  5450  0025F8  C065  F066         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  5451  0025FC  6B67               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  5452  0025FE  6B68               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  5453  002600  3564               	rlcf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  5454  002602  3766               	rlcf	??__tdiv_to_l_& (0+255),f,b
  5455  002604  E301               	bnc	u3041
  5456  002606  8167               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  5457  002608                     u3041:
  5458  002608  5166               	movf	??__tdiv_to_l_& (0+255),w,b
  5459  00260A  6F6D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  5460  00260C  516D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  5461  00260E  A4D8               	btfss	status,2,c
  5462  002610  D009               	goto	l582
  5463                           
  5464                           ; BSR set to: 0
  5465  002612  0E00               	movlw	0
  5466  002614  6F60               	movwf	?__tdiv_to_l_& (0+255),b
  5467  002616  0E00               	movlw	0
  5468  002618  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  5469  00261A  0E00               	movlw	0
  5470  00261C  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  5471  00261E  0E00               	movlw	0
  5472  002620  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  5473                           
  5474                           ; BSR set to: 0
  5475  002622  0012               	return	
  5476  002624                     l582:
  5477                           
  5478                           ; BSR set to: 0
  5479                           
  5480                           ; BSR set to: 0
  5481  002624  8F61               	bsf	(__tdiv_to_l_@f1+1)& (0+255),7,b
  5482                           
  5483                           ; BSR set to: 0
  5484  002626  0EFF               	movlw	255
  5485  002628  1760               	andwf	__tdiv_to_l_@f1& (0+255),f,b
  5486  00262A  0EFF               	movlw	255
  5487  00262C  1761               	andwf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  5488  00262E  0E00               	movlw	0
  5489  002630  1762               	andwf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  5490  002632  8F64               	bsf	(__tdiv_to_l_@f2+1)& (0+255),7,b
  5491                           
  5492                           ; BSR set to: 0
  5493  002634  0EFF               	movlw	255
  5494  002636  1763               	andwf	__tdiv_to_l_@f2& (0+255),f,b
  5495  002638  0EFF               	movlw	255
  5496  00263A  1764               	andwf	(__tdiv_to_l_@f2+1)& (0+255),f,b
  5497  00263C  0E00               	movlw	0
  5498  00263E  1765               	andwf	(__tdiv_to_l_@f2+2)& (0+255),f,b
  5499                           
  5500                           ; BSR set to: 0
  5501  002640  0E00               	movlw	0
  5502  002642  6F69               	movwf	__tdiv_to_l_@quot& (0+255),b
  5503  002644  0E00               	movlw	0
  5504  002646  6F6A               	movwf	(__tdiv_to_l_@quot+1)& (0+255),b
  5505  002648  0E00               	movlw	0
  5506  00264A  6F6B               	movwf	(__tdiv_to_l_@quot+2)& (0+255),b
  5507  00264C  0E00               	movlw	0
  5508  00264E  6F6C               	movwf	(__tdiv_to_l_@quot+3)& (0+255),b
  5509                           
  5510                           ; BSR set to: 0
  5511  002650  0E7F               	movlw	127
  5512  002652  5F6E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  5513                           
  5514                           ; BSR set to: 0
  5515  002654  516D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  5516  002656  0F98               	addlw	152
  5517  002658  5F6E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  5518                           
  5519                           ; BSR set to: 0
  5520  00265A  0E18               	movlw	24
  5521  00265C  6F6D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  5522  00265E                     l583:
  5523                           
  5524                           ; BSR set to: 0
  5525  00265E  90D8               	bcf	status,0,c
  5526  002660  3769               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  5527  002662  376A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  5528  002664  376B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  5529  002666  376C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  5530                           
  5531                           ; BSR set to: 0
  5532  002668  5163               	movf	__tdiv_to_l_@f2& (0+255),w,b
  5533  00266A  5D60               	subwf	__tdiv_to_l_@f1& (0+255),w,b
  5534  00266C  5164               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  5535  00266E  5961               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),w,b
  5536  002670  5165               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  5537  002672  5962               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),w,b
  5538  002674  A0D8               	btfss	status,0,c
  5539  002676  D007               	goto	l584
  5540                           
  5541                           ; BSR set to: 0
  5542  002678  5163               	movf	__tdiv_to_l_@f2& (0+255),w,b
  5543  00267A  5F60               	subwf	__tdiv_to_l_@f1& (0+255),f,b
  5544  00267C  5164               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  5545  00267E  5B61               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),f,b
  5546  002680  5165               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  5547  002682  5B62               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),f,b
  5548                           
  5549                           ; BSR set to: 0
  5550  002684  8169               	bsf	__tdiv_to_l_@quot& (0+255),0,b
  5551  002686                     l584:
  5552                           
  5553                           ; BSR set to: 0
  5554  002686  90D8               	bcf	status,0,c
  5555  002688  3760               	rlcf	__tdiv_to_l_@f1& (0+255),f,b
  5556  00268A  3761               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  5557  00268C  3762               	rlcf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  5558                           
  5559                           ; BSR set to: 0
  5560  00268E  2F6D               	decfsz	__tdiv_to_l_@cntr& (0+255),f,b
  5561  002690  D7E6               	goto	l583
  5562                           
  5563                           ; BSR set to: 0
  5564                           
  5565                           ; BSR set to: 0
  5566  002692  AF6E               	btfss	__tdiv_to_l_@exp1& (0+255),7,b
  5567  002694  D016               	goto	l586
  5568                           
  5569                           ; BSR set to: 0
  5570  002696  516E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  5571  002698  0A80               	xorlw	128
  5572  00269A  0F97               	addlw	151
  5573  00269C  B0D8               	btfsc	status,0,c
  5574  00269E  D009               	goto	l587
  5575                           
  5576                           ; BSR set to: 0
  5577  0026A0  0E00               	movlw	0
  5578  0026A2  6F60               	movwf	?__tdiv_to_l_& (0+255),b
  5579  0026A4  0E00               	movlw	0
  5580  0026A6  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  5581  0026A8  0E00               	movlw	0
  5582  0026AA  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  5583  0026AC  0E00               	movlw	0
  5584  0026AE  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  5585                           
  5586                           ; BSR set to: 0
  5587  0026B0  0012               	return	
  5588  0026B2                     l587:
  5589                           
  5590                           ; BSR set to: 0
  5591                           
  5592                           ; BSR set to: 0
  5593                           
  5594                           ; BSR set to: 0
  5595  0026B2  90D8               	bcf	status,0,c
  5596  0026B4  336C               	rrcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  5597  0026B6  336B               	rrcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  5598  0026B8  336A               	rrcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  5599  0026BA  3369               	rrcf	__tdiv_to_l_@quot& (0+255),f,b
  5600                           
  5601                           ; BSR set to: 0
  5602  0026BC  3F6E               	incfsz	__tdiv_to_l_@exp1& (0+255),f,b
  5603  0026BE  D7F9               	goto	l587
  5604                           
  5605                           ; BSR set to: 0
  5606  0026C0  D015               	goto	u3100
  5607  0026C2                     l586:
  5608                           
  5609                           ; BSR set to: 0
  5610                           
  5611                           ; BSR set to: 0
  5612  0026C2  0E17               	movlw	23
  5613  0026C4  656E               	cpfsgt	__tdiv_to_l_@exp1& (0+255),b
  5614  0026C6  D00F               	goto	l592
  5615                           
  5616                           ; BSR set to: 0
  5617  0026C8  0E00               	movlw	0
  5618  0026CA  6F60               	movwf	?__tdiv_to_l_& (0+255),b
  5619  0026CC  0E00               	movlw	0
  5620  0026CE  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  5621  0026D0  0E00               	movlw	0
  5622  0026D2  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  5623  0026D4  0E00               	movlw	0
  5624  0026D6  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  5625                           
  5626                           ; BSR set to: 0
  5627  0026D8  0012               	return	
  5628  0026DA                     
  5629                           ; BSR set to: 0
  5630                           
  5631                           ; BSR set to: 0
  5632  0026DA  90D8               	bcf	status,0,c
  5633  0026DC  3769               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  5634  0026DE  376A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  5635  0026E0  376B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  5636  0026E2  376C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  5637  0026E4  076E               	decf	__tdiv_to_l_@exp1& (0+255),f,b
  5638  0026E6                     l592:
  5639                           
  5640                           ; BSR set to: 0
  5641                           
  5642                           ; BSR set to: 0
  5643  0026E6  516E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  5644  0026E8  A4D8               	btfss	status,2,c
  5645  0026EA  D7F7               	goto	l593
  5646  0026EC                     u3100:
  5647                           
  5648                           ; BSR set to: 0
  5649                           
  5650                           ; BSR set to: 0
  5651  0026EC  C069  F060         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  5652  0026F0  C06A  F061         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  5653  0026F4  C06B  F062         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  5654  0026F8  C06C  F063         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  5655                           
  5656                           ; BSR set to: 0
  5657  0026FC  0012               	return		;funcret
  5658  0026FE                     __end_of__tdiv_to_l_:
  5659                           	opt stack 0
  5660                           tblptru	equ	0xFF8
  5661                           tblptrh	equ	0xFF7
  5662                           tblptrl	equ	0xFF6
  5663                           tablat	equ	0xFF5
  5664                           prodh	equ	0xFF4
  5665                           prodl	equ	0xFF3
  5666                           postinc0	equ	0xFEE
  5667                           wreg	equ	0xFE8
  5668                           indf2	equ	0xFDF
  5669                           postinc2	equ	0xFDE
  5670                           postdec2	equ	0xFDD
  5671                           fsr2h	equ	0xFDA
  5672                           fsr2l	equ	0xFD9
  5673                           status	equ	0xFD8
  5674                           
  5675 ;; *************** function __div_to_l_ *****************
  5676 ;; Defined at:
  5677 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fldivl.c"
  5678 ;; Parameters:    Size  Location     Type
  5679 ;;  f1              3    0[BANK0 ] unsigned long 
  5680 ;;  f2              3    3[BANK0 ] unsigned long 
  5681 ;; Auto vars:     Size  Location     Type
  5682 ;;  quot            4    6[BANK0 ] unsigned long 
  5683 ;;  exp1            1   11[BANK0 ] unsigned char 
  5684 ;;  cntr            1   10[BANK0 ] unsigned char 
  5685 ;; Return value:  Size  Location     Type
  5686 ;;                  4    0[BANK0 ] unsigned long 
  5687 ;; Registers used:
  5688 ;;		wreg, status,2, status,0
  5689 ;; Tracked objects:
  5690 ;;		On entry : 0/0
  5691 ;;		On exit  : 0/0
  5692 ;;		Unchanged: 0/0
  5693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5694 ;;      Params:         0       6       0       0       0       0       0       0       0
  5695 ;;      Locals:         0       6       0       0       0       0       0       0       0
  5696 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5697 ;;      Totals:         0      12       0       0       0       0       0       0       0
  5698 ;;Total ram usage:       12 bytes
  5699 ;; Hardware stack levels used:    1
  5700 ;; Hardware stack levels required when called:    3
  5701 ;; This function calls:
  5702 ;;		Nothing
  5703 ;; This function is called by:
  5704 ;;		_sprintf
  5705 ;; This function uses a non-reentrant model
  5706 ;;
  5707                           
  5708                           	psect	text9
  5709  002960                     __ptext9:
  5710                           	opt stack 0
  5711  002960                     __div_to_l_:
  5712                           	opt stack 26
  5713                           
  5714                           ; BSR set to: 0
  5715                           ;incstack = 0
  5716  002960  0100               	movlb	0	; () banked
  5717  002962  3562               	rlcf	(__div_to_l_@f1+2)& (0+255),w,b
  5718  002964  3563               	rlcf	(__div_to_l_@f1+3)& (0+255),w,b
  5719  002966  6F6B               	movwf	__div_to_l_@exp1& (0+255),b
  5720  002968  516B               	movf	__div_to_l_@exp1& (0+255),w,b
  5721  00296A  A4D8               	btfss	status,2,c
  5722  00296C  D009               	goto	l476
  5723                           
  5724                           ; BSR set to: 0
  5725  00296E  0E00               	movlw	0
  5726  002970  6F60               	movwf	?__div_to_l_& (0+255),b
  5727  002972  0E00               	movlw	0
  5728  002974  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
  5729  002976  0E00               	movlw	0
  5730  002978  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
  5731  00297A  0E00               	movlw	0
  5732  00297C  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
  5733                           
  5734                           ; BSR set to: 0
  5735  00297E  0012               	return	
  5736  002980                     l476:
  5737                           
  5738                           ; BSR set to: 0
  5739                           
  5740                           ; BSR set to: 0
  5741  002980  3565               	rlcf	(__div_to_l_@f2+2)& (0+255),w,b
  5742  002982  3566               	rlcf	(__div_to_l_@f2+3)& (0+255),w,b
  5743  002984  6F6A               	movwf	__div_to_l_@cntr& (0+255),b
  5744  002986  516A               	movf	__div_to_l_@cntr& (0+255),w,b
  5745  002988  A4D8               	btfss	status,2,c
  5746  00298A  D009               	goto	l478
  5747                           
  5748                           ; BSR set to: 0
  5749  00298C  0E00               	movlw	0
  5750  00298E  6F60               	movwf	?__div_to_l_& (0+255),b
  5751  002990  0E00               	movlw	0
  5752  002992  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
  5753  002994  0E00               	movlw	0
  5754  002996  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
  5755  002998  0E00               	movlw	0
  5756  00299A  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
  5757                           
  5758                           ; BSR set to: 0
  5759  00299C  0012               	return	
  5760  00299E                     l478:
  5761                           
  5762                           ; BSR set to: 0
  5763                           
  5764                           ; BSR set to: 0
  5765  00299E  8F62               	bsf	(__div_to_l_@f1+2)& (0+255),7,b
  5766                           
  5767                           ; BSR set to: 0
  5768  0029A0  0EFF               	movlw	255
  5769  0029A2  1760               	andwf	__div_to_l_@f1& (0+255),f,b
  5770  0029A4  0EFF               	movlw	255
  5771  0029A6  1761               	andwf	(__div_to_l_@f1+1)& (0+255),f,b
  5772  0029A8  0EFF               	movlw	255
  5773  0029AA  1762               	andwf	(__div_to_l_@f1+2)& (0+255),f,b
  5774  0029AC  0E00               	movlw	0
  5775  0029AE  1763               	andwf	(__div_to_l_@f1+3)& (0+255),f,b
  5776                           
  5777                           ; BSR set to: 0
  5778  0029B0  8F65               	bsf	(__div_to_l_@f2+2)& (0+255),7,b
  5779  0029B2  0EFF               	movlw	255
  5780  0029B4  1763               	andwf	__div_to_l_@f2& (0+255),f,b
  5781  0029B6  0EFF               	movlw	255
  5782  0029B8  1764               	andwf	(__div_to_l_@f2+1)& (0+255),f,b
  5783  0029BA  0EFF               	movlw	255
  5784  0029BC  1765               	andwf	(__div_to_l_@f2+2)& (0+255),f,b
  5785  0029BE  0E00               	movlw	0
  5786  0029C0  1766               	andwf	(__div_to_l_@f2+3)& (0+255),f,b
  5787                           
  5788                           ; BSR set to: 0
  5789  0029C2  0E00               	movlw	0
  5790  0029C4  6F66               	movwf	__div_to_l_@quot& (0+255),b
  5791  0029C6  0E00               	movlw	0
  5792  0029C8  6F67               	movwf	(__div_to_l_@quot+1)& (0+255),b
  5793  0029CA  0E00               	movlw	0
  5794  0029CC  6F68               	movwf	(__div_to_l_@quot+2)& (0+255),b
  5795  0029CE  0E00               	movlw	0
  5796  0029D0  6F69               	movwf	(__div_to_l_@quot+3)& (0+255),b
  5797                           
  5798                           ; BSR set to: 0
  5799  0029D2  0E7F               	movlw	127
  5800  0029D4  5F6B               	subwf	__div_to_l_@exp1& (0+255),f,b
  5801                           
  5802                           ; BSR set to: 0
  5803  0029D6  516A               	movf	__div_to_l_@cntr& (0+255),w,b
  5804  0029D8  0FA0               	addlw	160
  5805  0029DA  5F6B               	subwf	__div_to_l_@exp1& (0+255),f,b
  5806                           
  5807                           ; BSR set to: 0
  5808  0029DC  0E20               	movlw	32
  5809  0029DE  6F6A               	movwf	__div_to_l_@cntr& (0+255),b
  5810  0029E0                     
  5811                           ; BSR set to: 0
  5812                           
  5813                           ; BSR set to: 0
  5814  0029E0  90D8               	bcf	status,0,c
  5815  0029E2  3766               	rlcf	__div_to_l_@quot& (0+255),f,b
  5816  0029E4  3767               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  5817  0029E6  3768               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  5818  0029E8  3769               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  5819                           
  5820                           ; BSR set to: 0
  5821  0029EA  5163               	movf	__div_to_l_@f2& (0+255),w,b
  5822  0029EC  5D60               	subwf	__div_to_l_@f1& (0+255),w,b
  5823  0029EE  5164               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  5824  0029F0  5961               	subwfb	(__div_to_l_@f1+1)& (0+255),w,b
  5825  0029F2  5165               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  5826  0029F4  5962               	subwfb	(__div_to_l_@f1+2)& (0+255),w,b
  5827  0029F6  5166               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  5828  0029F8  5963               	subwfb	(__div_to_l_@f1+3)& (0+255),w,b
  5829  0029FA  A0D8               	btfss	status,0,c
  5830  0029FC  D009               	goto	l480
  5831                           
  5832                           ; BSR set to: 0
  5833  0029FE  5163               	movf	__div_to_l_@f2& (0+255),w,b
  5834  002A00  5F60               	subwf	__div_to_l_@f1& (0+255),f,b
  5835  002A02  5164               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  5836  002A04  5B61               	subwfb	(__div_to_l_@f1+1)& (0+255),f,b
  5837  002A06  5165               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  5838  002A08  5B62               	subwfb	(__div_to_l_@f1+2)& (0+255),f,b
  5839  002A0A  5166               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  5840  002A0C  5B63               	subwfb	(__div_to_l_@f1+3)& (0+255),f,b
  5841                           
  5842                           ; BSR set to: 0
  5843  002A0E  8166               	bsf	__div_to_l_@quot& (0+255),0,b
  5844  002A10                     l480:
  5845                           
  5846                           ; BSR set to: 0
  5847                           
  5848                           ; BSR set to: 0
  5849  002A10  90D8               	bcf	status,0,c
  5850  002A12  3760               	rlcf	__div_to_l_@f1& (0+255),f,b
  5851  002A14  3761               	rlcf	(__div_to_l_@f1+1)& (0+255),f,b
  5852  002A16  3762               	rlcf	(__div_to_l_@f1+2)& (0+255),f,b
  5853  002A18  3763               	rlcf	(__div_to_l_@f1+3)& (0+255),f,b
  5854                           
  5855                           ; BSR set to: 0
  5856  002A1A  2F6A               	decfsz	__div_to_l_@cntr& (0+255),f,b
  5857  002A1C  D7E1               	goto	l479
  5858                           
  5859                           ; BSR set to: 0
  5860                           
  5861                           ; BSR set to: 0
  5862  002A1E  AF6B               	btfss	__div_to_l_@exp1& (0+255),7,b
  5863  002A20  D016               	goto	l482
  5864                           
  5865                           ; BSR set to: 0
  5866  002A22  516B               	movf	__div_to_l_@exp1& (0+255),w,b
  5867  002A24  0A80               	xorlw	128
  5868  002A26  0F9F               	addlw	159
  5869  002A28  B0D8               	btfsc	status,0,c
  5870  002A2A  D009               	goto	l483
  5871                           
  5872                           ; BSR set to: 0
  5873  002A2C  0E00               	movlw	0
  5874  002A2E  6F60               	movwf	?__div_to_l_& (0+255),b
  5875  002A30  0E00               	movlw	0
  5876  002A32  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
  5877  002A34  0E00               	movlw	0
  5878  002A36  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
  5879  002A38  0E00               	movlw	0
  5880  002A3A  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
  5881                           
  5882                           ; BSR set to: 0
  5883  002A3C  0012               	return	
  5884  002A3E                     l483:
  5885                           
  5886                           ; BSR set to: 0
  5887                           
  5888                           ; BSR set to: 0
  5889                           
  5890                           ; BSR set to: 0
  5891  002A3E  90D8               	bcf	status,0,c
  5892  002A40  3369               	rrcf	(__div_to_l_@quot+3)& (0+255),f,b
  5893  002A42  3368               	rrcf	(__div_to_l_@quot+2)& (0+255),f,b
  5894  002A44  3367               	rrcf	(__div_to_l_@quot+1)& (0+255),f,b
  5895  002A46  3366               	rrcf	__div_to_l_@quot& (0+255),f,b
  5896                           
  5897                           ; BSR set to: 0
  5898  002A48  3F6B               	incfsz	__div_to_l_@exp1& (0+255),f,b
  5899  002A4A  D7F9               	goto	l483
  5900                           
  5901                           ; BSR set to: 0
  5902  002A4C  D015               	goto	u3170
  5903  002A4E                     l482:
  5904                           
  5905                           ; BSR set to: 0
  5906                           
  5907                           ; BSR set to: 0
  5908  002A4E  0E1F               	movlw	31
  5909  002A50  656B               	cpfsgt	__div_to_l_@exp1& (0+255),b
  5910  002A52  D00F               	goto	l488
  5911                           
  5912                           ; BSR set to: 0
  5913  002A54  0E00               	movlw	0
  5914  002A56  6F60               	movwf	?__div_to_l_& (0+255),b
  5915  002A58  0E00               	movlw	0
  5916  002A5A  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
  5917  002A5C  0E00               	movlw	0
  5918  002A5E  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
  5919  002A60  0E00               	movlw	0
  5920  002A62  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
  5921                           
  5922                           ; BSR set to: 0
  5923  002A64  0012               	return	
  5924  002A66                     
  5925                           ; BSR set to: 0
  5926                           
  5927                           ; BSR set to: 0
  5928  002A66  90D8               	bcf	status,0,c
  5929  002A68  3766               	rlcf	__div_to_l_@quot& (0+255),f,b
  5930  002A6A  3767               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  5931  002A6C  3768               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  5932  002A6E  3769               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  5933  002A70  076B               	decf	__div_to_l_@exp1& (0+255),f,b
  5934  002A72                     l488:
  5935                           
  5936                           ; BSR set to: 0
  5937                           
  5938                           ; BSR set to: 0
  5939  002A72  516B               	movf	__div_to_l_@exp1& (0+255),w,b
  5940  002A74  A4D8               	btfss	status,2,c
  5941  002A76  D7F7               	goto	l489
  5942  002A78                     u3170:
  5943                           
  5944                           ; BSR set to: 0
  5945                           
  5946                           ; BSR set to: 0
  5947  002A78  C066  F060         	movff	__div_to_l_@quot,?__div_to_l_
  5948  002A7C  C067  F061         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  5949  002A80  C068  F062         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  5950  002A84  C069  F063         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  5951                           
  5952                           ; BSR set to: 0
  5953  002A88  0012               	return		;funcret
  5954  002A8A                     __end_of__div_to_l_:
  5955                           	opt stack 0
  5956                           tblptru	equ	0xFF8
  5957                           tblptrh	equ	0xFF7
  5958                           tblptrl	equ	0xFF6
  5959                           tablat	equ	0xFF5
  5960                           prodh	equ	0xFF4
  5961                           prodl	equ	0xFF3
  5962                           postinc0	equ	0xFEE
  5963                           wreg	equ	0xFE8
  5964                           indf2	equ	0xFDF
  5965                           postinc2	equ	0xFDE
  5966                           postdec2	equ	0xFDD
  5967                           fsr2h	equ	0xFDA
  5968                           fsr2l	equ	0xFD9
  5969                           status	equ	0xFD8
  5970                           
  5971 ;; *************** function ___lltoft *****************
  5972 ;; Defined at:
  5973 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
  5974 ;; Parameters:    Size  Location     Type
  5975 ;;  c               4    8[BANK0 ] unsigned long 
  5976 ;; Auto vars:     Size  Location     Type
  5977 ;;  exp             1   16[BANK0 ] unsigned char 
  5978 ;; Return value:  Size  Location     Type
  5979 ;;                  3    8[BANK0 ] float 
  5980 ;; Registers used:
  5981 ;;		wreg, status,2, status,0, cstack
  5982 ;; Tracked objects:
  5983 ;;		On entry : 0/0
  5984 ;;		On exit  : 0/0
  5985 ;;		Unchanged: 0/0
  5986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5987 ;;      Params:         0       4       0       0       0       0       0       0       0
  5988 ;;      Locals:         0       1       0       0       0       0       0       0       0
  5989 ;;      Temps:          0       4       0       0       0       0       0       0       0
  5990 ;;      Totals:         0       9       0       0       0       0       0       0       0
  5991 ;;Total ram usage:        9 bytes
  5992 ;; Hardware stack levels used:    1
  5993 ;; Hardware stack levels required when called:    4
  5994 ;; This function calls:
  5995 ;;		___ftpack
  5996 ;; This function is called by:
  5997 ;;		_main
  5998 ;;		_sprintf
  5999 ;; This function uses a non-reentrant model
  6000 ;;
  6001                           
  6002                           	psect	text10
  6003  003816                     __ptext10:
  6004                           	opt stack 0
  6005  003816                     ___lltoft:
  6006                           	opt stack 25
  6007                           
  6008                           ; BSR set to: 0
  6009                           ;incstack = 0
  6010  003816  0E8E               	movlw	142
  6011  003818  0100               	movlb	0	; () banked
  6012  00381A  6F70               	movwf	___lltoft@exp& (0+255),b
  6013  00381C  D006               	goto	l687
  6014  00381E                     
  6015                           ; BSR set to: 0
  6016                           
  6017                           ; BSR set to: 0
  6018  00381E  90D8               	bcf	status,0,c
  6019  003820  336B               	rrcf	(___lltoft@c+3)& (0+255),f,b
  6020  003822  336A               	rrcf	(___lltoft@c+2)& (0+255),f,b
  6021  003824  3369               	rrcf	(___lltoft@c+1)& (0+255),f,b
  6022  003826  3368               	rrcf	___lltoft@c& (0+255),f,b
  6023  003828  2B70               	incf	___lltoft@exp& (0+255),f,b
  6024  00382A                     l687:
  6025                           
  6026                           ; BSR set to: 0
  6027                           
  6028                           ; BSR set to: 0
  6029  00382A  0E00               	movlw	0
  6030  00382C  1568               	andwf	___lltoft@c& (0+255),w,b
  6031  00382E  6F6C               	movwf	??___lltoft& (0+255),b
  6032  003830  0E00               	movlw	0
  6033  003832  1569               	andwf	(___lltoft@c+1)& (0+255),w,b
  6034  003834  6F6D               	movwf	(??___lltoft+1)& (0+255),b
  6035  003836  0E00               	movlw	0
  6036  003838  156A               	andwf	(___lltoft@c+2)& (0+255),w,b
  6037  00383A  6F6E               	movwf	(??___lltoft+2)& (0+255),b
  6038  00383C  0EFF               	movlw	255
  6039  00383E  156B               	andwf	(___lltoft@c+3)& (0+255),w,b
  6040  003840  6F6F               	movwf	(??___lltoft+3)& (0+255),b
  6041  003842  516C               	movf	??___lltoft& (0+255),w,b
  6042  003844  116D               	iorwf	(??___lltoft+1)& (0+255),w,b
  6043  003846  116E               	iorwf	(??___lltoft+2)& (0+255),w,b
  6044  003848  116F               	iorwf	(??___lltoft+3)& (0+255),w,b
  6045  00384A  A4D8               	btfss	status,2,c
  6046  00384C  D7E8               	goto	l688
  6047                           
  6048                           ; BSR set to: 0
  6049                           
  6050                           ; BSR set to: 0
  6051  00384E  C068  F060         	movff	___lltoft@c,___ftpack@arg
  6052  003852  C069  F061         	movff	___lltoft@c+1,___ftpack@arg+1
  6053  003856  C06A  F062         	movff	___lltoft@c+2,___ftpack@arg+2
  6054  00385A  C070  F063         	movff	___lltoft@exp,___ftpack@exp
  6055  00385E  0E00               	movlw	0
  6056  003860  6F64               	movwf	___ftpack@sign& (0+255),b
  6057  003862  EC5A  F019         	call	___ftpack	;wreg free
  6058  003866  C060  F068         	movff	?___ftpack,?___lltoft
  6059  00386A  C061  F069         	movff	?___ftpack+1,?___lltoft+1
  6060  00386E  C062  F06A         	movff	?___ftpack+2,?___lltoft+2
  6061  003872  0012               	return	
  6062  003874                     __end_of___lltoft:
  6063                           	opt stack 0
  6064                           tblptru	equ	0xFF8
  6065                           tblptrh	equ	0xFF7
  6066                           tblptrl	equ	0xFF6
  6067                           tablat	equ	0xFF5
  6068                           prodh	equ	0xFF4
  6069                           prodl	equ	0xFF3
  6070                           postinc0	equ	0xFEE
  6071                           wreg	equ	0xFE8
  6072                           indf2	equ	0xFDF
  6073                           postinc2	equ	0xFDE
  6074                           postdec2	equ	0xFDD
  6075                           fsr2h	equ	0xFDA
  6076                           fsr2l	equ	0xFD9
  6077                           status	equ	0xFD8
  6078                           
  6079 ;; *************** function ___llmod *****************
  6080 ;; Defined at:
  6081 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  6082 ;; Parameters:    Size  Location     Type
  6083 ;;  dividend        4   13[BANK0 ] unsigned long 
  6084 ;;  divisor         4   17[BANK0 ] unsigned long 
  6085 ;; Auto vars:     Size  Location     Type
  6086 ;;  counter         1   21[BANK0 ] unsigned char 
  6087 ;; Return value:  Size  Location     Type
  6088 ;;                  4   13[BANK0 ] unsigned long 
  6089 ;; Registers used:
  6090 ;;		wreg, status,2, status,0
  6091 ;; Tracked objects:
  6092 ;;		On entry : 0/0
  6093 ;;		On exit  : 0/0
  6094 ;;		Unchanged: 0/0
  6095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6096 ;;      Params:         0       8       0       0       0       0       0       0       0
  6097 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6098 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6099 ;;      Totals:         0       9       0       0       0       0       0       0       0
  6100 ;;Total ram usage:        9 bytes
  6101 ;; Hardware stack levels used:    1
  6102 ;; Hardware stack levels required when called:    3
  6103 ;; This function calls:
  6104 ;;		Nothing
  6105 ;; This function is called by:
  6106 ;;		_sprintf
  6107 ;; This function uses a non-reentrant model
  6108 ;;
  6109                           
  6110                           	psect	text11
  6111  0037AE                     __ptext11:
  6112                           	opt stack 0
  6113  0037AE                     ___llmod:
  6114                           	opt stack 26
  6115                           
  6116                           ;incstack = 0
  6117  0037AE  0100               	movlb	0	; () banked
  6118  0037B0  5171               	movf	___llmod@divisor& (0+255),w,b
  6119  0037B2  1172               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  6120  0037B4  1173               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  6121  0037B6  1174               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  6122  0037B8  B4D8               	btfsc	status,2,c
  6123  0037BA  D024               	goto	l681
  6124                           
  6125                           ; BSR set to: 0
  6126  0037BC  0E01               	movlw	1
  6127  0037BE  6F75               	movwf	___llmod@counter& (0+255),b
  6128  0037C0  D006               	goto	l676
  6129  0037C2                     
  6130                           ; BSR set to: 0
  6131                           
  6132                           ; BSR set to: 0
  6133  0037C2  90D8               	bcf	status,0,c
  6134  0037C4  3771               	rlcf	___llmod@divisor& (0+255),f,b
  6135  0037C6  3772               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  6136  0037C8  3773               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  6137  0037CA  3774               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  6138  0037CC  2B75               	incf	___llmod@counter& (0+255),f,b
  6139  0037CE                     l676:
  6140                           
  6141                           ; BSR set to: 0
  6142                           
  6143                           ; BSR set to: 0
  6144  0037CE  AF74               	btfss	(___llmod@divisor+3)& (0+255),7,b
  6145  0037D0  D7F8               	goto	l677
  6146  0037D2                     u3280:
  6147                           
  6148                           ; BSR set to: 0
  6149                           
  6150                           ; BSR set to: 0
  6151                           
  6152                           ; BSR set to: 0
  6153  0037D2  5171               	movf	___llmod@divisor& (0+255),w,b
  6154  0037D4  5D6D               	subwf	___llmod@dividend& (0+255),w,b
  6155  0037D6  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
  6156  0037D8  596E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  6157  0037DA  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
  6158  0037DC  596F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  6159  0037DE  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
  6160  0037E0  5970               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  6161  0037E2  A0D8               	btfss	status,0,c
  6162  0037E4  D008               	goto	l680
  6163                           
  6164                           ; BSR set to: 0
  6165  0037E6  5171               	movf	___llmod@divisor& (0+255),w,b
  6166  0037E8  5F6D               	subwf	___llmod@dividend& (0+255),f,b
  6167  0037EA  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
  6168  0037EC  5B6E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  6169  0037EE  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
  6170  0037F0  5B6F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  6171  0037F2  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
  6172  0037F4  5B70               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  6173  0037F6                     l680:
  6174                           
  6175                           ; BSR set to: 0
  6176                           
  6177                           ; BSR set to: 0
  6178  0037F6  90D8               	bcf	status,0,c
  6179  0037F8  3374               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  6180  0037FA  3373               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  6181  0037FC  3372               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  6182  0037FE  3371               	rrcf	___llmod@divisor& (0+255),f,b
  6183                           
  6184                           ; BSR set to: 0
  6185  003800  2F75               	decfsz	___llmod@counter& (0+255),f,b
  6186  003802  D7E7               	goto	u3280
  6187  003804                     l681:
  6188                           
  6189                           ; BSR set to: 0
  6190                           
  6191                           ; BSR set to: 0
  6192  003804  C06D  F06D         	movff	___llmod@dividend,?___llmod
  6193  003808  C06E  F06E         	movff	___llmod@dividend+1,?___llmod+1
  6194  00380C  C06F  F06F         	movff	___llmod@dividend+2,?___llmod+2
  6195  003810  C070  F070         	movff	___llmod@dividend+3,?___llmod+3
  6196                           
  6197                           ; BSR set to: 0
  6198  003814  0012               	return		;funcret
  6199  003816                     __end_of___llmod:
  6200                           	opt stack 0
  6201                           tblptru	equ	0xFF8
  6202                           tblptrh	equ	0xFF7
  6203                           tblptrl	equ	0xFF6
  6204                           tablat	equ	0xFF5
  6205                           prodh	equ	0xFF4
  6206                           prodl	equ	0xFF3
  6207                           postinc0	equ	0xFEE
  6208                           wreg	equ	0xFE8
  6209                           indf2	equ	0xFDF
  6210                           postinc2	equ	0xFDE
  6211                           postdec2	equ	0xFDD
  6212                           fsr2h	equ	0xFDA
  6213                           fsr2l	equ	0xFD9
  6214                           status	equ	0xFD8
  6215                           
  6216 ;; *************** function ___lldiv *****************
  6217 ;; Defined at:
  6218 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  6219 ;; Parameters:    Size  Location     Type
  6220 ;;  dividend        4    0[BANK0 ] unsigned long 
  6221 ;;  divisor         4    4[BANK0 ] unsigned long 
  6222 ;; Auto vars:     Size  Location     Type
  6223 ;;  quotient        4    8[BANK0 ] unsigned long 
  6224 ;;  counter         1   12[BANK0 ] unsigned char 
  6225 ;; Return value:  Size  Location     Type
  6226 ;;                  4    0[BANK0 ] unsigned long 
  6227 ;; Registers used:
  6228 ;;		wreg, status,2, status,0
  6229 ;; Tracked objects:
  6230 ;;		On entry : 0/0
  6231 ;;		On exit  : 0/0
  6232 ;;		Unchanged: 0/0
  6233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6234 ;;      Params:         0       8       0       0       0       0       0       0       0
  6235 ;;      Locals:         0       5       0       0       0       0       0       0       0
  6236 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6237 ;;      Totals:         0      13       0       0       0       0       0       0       0
  6238 ;;Total ram usage:       13 bytes
  6239 ;; Hardware stack levels used:    1
  6240 ;; Hardware stack levels required when called:    3
  6241 ;; This function calls:
  6242 ;;		Nothing
  6243 ;; This function is called by:
  6244 ;;		_sprintf
  6245 ;; This function uses a non-reentrant model
  6246 ;;
  6247                           
  6248                           	psect	text12
  6249  0035C2                     __ptext12:
  6250                           	opt stack 0
  6251  0035C2                     ___lldiv:
  6252                           	opt stack 26
  6253                           
  6254                           ; BSR set to: 0
  6255                           ;incstack = 0
  6256  0035C2  0E00               	movlw	0
  6257  0035C4  0100               	movlb	0	; () banked
  6258  0035C6  6F68               	movwf	___lldiv@quotient& (0+255),b
  6259  0035C8  0E00               	movlw	0
  6260  0035CA  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
  6261  0035CC  0E00               	movlw	0
  6262  0035CE  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
  6263  0035D0  0E00               	movlw	0
  6264  0035D2  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
  6265                           
  6266                           ; BSR set to: 0
  6267  0035D4  5164               	movf	___lldiv@divisor& (0+255),w,b
  6268  0035D6  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  6269  0035D8  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  6270  0035DA  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  6271  0035DC  B4D8               	btfsc	status,2,c
  6272  0035DE  D02A               	goto	l671
  6273                           
  6274                           ; BSR set to: 0
  6275  0035E0  0E01               	movlw	1
  6276  0035E2  6F6C               	movwf	___lldiv@counter& (0+255),b
  6277  0035E4  D006               	goto	l666
  6278  0035E6                     
  6279                           ; BSR set to: 0
  6280                           
  6281                           ; BSR set to: 0
  6282  0035E6  90D8               	bcf	status,0,c
  6283  0035E8  3764               	rlcf	___lldiv@divisor& (0+255),f,b
  6284  0035EA  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  6285  0035EC  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  6286  0035EE  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  6287  0035F0  2B6C               	incf	___lldiv@counter& (0+255),f,b
  6288  0035F2                     l666:
  6289                           
  6290                           ; BSR set to: 0
  6291                           
  6292                           ; BSR set to: 0
  6293  0035F2  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  6294  0035F4  D7F8               	goto	l667
  6295  0035F6                     u3250:
  6296                           
  6297                           ; BSR set to: 0
  6298                           
  6299                           ; BSR set to: 0
  6300                           
  6301                           ; BSR set to: 0
  6302  0035F6  90D8               	bcf	status,0,c
  6303  0035F8  3768               	rlcf	___lldiv@quotient& (0+255),f,b
  6304  0035FA  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  6305  0035FC  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  6306  0035FE  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  6307                           
  6308                           ; BSR set to: 0
  6309  003600  5164               	movf	___lldiv@divisor& (0+255),w,b
  6310  003602  5D60               	subwf	___lldiv@dividend& (0+255),w,b
  6311  003604  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6312  003606  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  6313  003608  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6314  00360A  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  6315  00360C  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6316  00360E  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  6317  003610  A0D8               	btfss	status,0,c
  6318  003612  D009               	goto	l670
  6319                           
  6320                           ; BSR set to: 0
  6321  003614  5164               	movf	___lldiv@divisor& (0+255),w,b
  6322  003616  5F60               	subwf	___lldiv@dividend& (0+255),f,b
  6323  003618  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6324  00361A  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  6325  00361C  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6326  00361E  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  6327  003620  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6328  003622  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  6329                           
  6330                           ; BSR set to: 0
  6331  003624  8168               	bsf	___lldiv@quotient& (0+255),0,b
  6332  003626                     l670:
  6333                           
  6334                           ; BSR set to: 0
  6335                           
  6336                           ; BSR set to: 0
  6337  003626  90D8               	bcf	status,0,c
  6338  003628  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  6339  00362A  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  6340  00362C  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  6341  00362E  3364               	rrcf	___lldiv@divisor& (0+255),f,b
  6342                           
  6343                           ; BSR set to: 0
  6344  003630  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
  6345  003632  D7E1               	goto	u3250
  6346  003634                     l671:
  6347                           
  6348                           ; BSR set to: 0
  6349                           
  6350                           ; BSR set to: 0
  6351  003634  C068  F060         	movff	___lldiv@quotient,?___lldiv
  6352  003638  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
  6353  00363C  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
  6354  003640  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
  6355                           
  6356                           ; BSR set to: 0
  6357  003644  0012               	return		;funcret
  6358  003646                     __end_of___lldiv:
  6359                           	opt stack 0
  6360                           tblptru	equ	0xFF8
  6361                           tblptrh	equ	0xFF7
  6362                           tblptrl	equ	0xFF6
  6363                           tablat	equ	0xFF5
  6364                           prodh	equ	0xFF4
  6365                           prodl	equ	0xFF3
  6366                           postinc0	equ	0xFEE
  6367                           wreg	equ	0xFE8
  6368                           indf2	equ	0xFDF
  6369                           postinc2	equ	0xFDE
  6370                           postdec2	equ	0xFDD
  6371                           fsr2h	equ	0xFDA
  6372                           fsr2l	equ	0xFD9
  6373                           status	equ	0xFD8
  6374                           
  6375 ;; *************** function _cos *****************
  6376 ;; Defined at:
  6377 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\cos.c"
  6378 ;; Parameters:    Size  Location     Type
  6379 ;;  f               3  109[BANK0 ] unsigned long 
  6380 ;; Auto vars:     Size  Location     Type
  6381 ;;		None
  6382 ;; Return value:  Size  Location     Type
  6383 ;;                  3  109[BANK0 ] unsigned long 
  6384 ;; Registers used:
  6385 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6386 ;; Tracked objects:
  6387 ;;		On entry : 0/0
  6388 ;;		On exit  : 0/0
  6389 ;;		Unchanged: 0/0
  6390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6391 ;;      Params:         0       3       0       0       0       0       0       0       0
  6392 ;;      Locals:         0       3       0       0       0       0       0       0       0
  6393 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6394 ;;      Totals:         0       6       0       0       0       0       0       0       0
  6395 ;;Total ram usage:        6 bytes
  6396 ;; Hardware stack levels used:    1
  6397 ;; Hardware stack levels required when called:    7
  6398 ;; This function calls:
  6399 ;;		___ftadd
  6400 ;;		___ftge
  6401 ;;		_sin
  6402 ;; This function is called by:
  6403 ;;		_main
  6404 ;; This function uses a non-reentrant model
  6405 ;;
  6406                           
  6407                           	psect	text13
  6408  003202                     __ptext13:
  6409                           	opt stack 0
  6410  003202                     _cos:
  6411                           	opt stack 23
  6412                           
  6413                           ; BSR set to: 0
  6414                           ;incstack = 0
  6415  003202  0E10               	movlw	16
  6416  003204  0100               	movlb	0	; () banked
  6417  003206  6F60               	movwf	___ftge@ff1& (0+255),b
  6418  003208  0E49               	movlw	73
  6419  00320A  6F61               	movwf	(___ftge@ff1+1)& (0+255),b
  6420  00320C  0E40               	movlw	64
  6421  00320E  6F62               	movwf	(___ftge@ff1+2)& (0+255),b
  6422  003210  C0CD  F063         	movff	cos@f,___ftge@ff2
  6423  003214  C0CE  F064         	movff	cos@f+1,___ftge@ff2+1
  6424  003218  C0CF  F065         	movff	cos@f+2,___ftge@ff2+2
  6425  00321C  EC55  F01A         	call	___ftge	;wreg free
  6426  003220  0100               	movlb	0	; () banked
  6427  003222  B0D8               	btfsc	status,0,c
  6428  003224  D023               	goto	l472
  6429                           
  6430                           ; BSR set to: 0
  6431  003226  C0CD  F08D         	movff	cos@f,___ftadd@f1
  6432  00322A  C0CE  F08E         	movff	cos@f+1,___ftadd@f1+1
  6433  00322E  C0CF  F08F         	movff	cos@f+2,___ftadd@f1+2
  6434  003232  0ECC               	movlw	204
  6435  003234  6F90               	movwf	___ftadd@f2& (0+255),b
  6436  003236  0E96               	movlw	150
  6437  003238  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
  6438  00323A  0EC0               	movlw	192
  6439  00323C  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
  6440  00323E  ECA4  F010         	call	___ftadd	;wreg free
  6441  003242  C08D  F0D0         	movff	?___ftadd,_cos$1428
  6442  003246  C08E  F0D1         	movff	?___ftadd+1,_cos$1428+1
  6443  00324A  C08F  F0D2         	movff	?___ftadd+2,_cos$1428+2
  6444  00324E  C0D0  F0C0         	movff	_cos$1428,sin@f
  6445  003252  C0D1  F0C1         	movff	_cos$1428+1,sin@f+1
  6446  003256  C0D2  F0C2         	movff	_cos$1428+2,sin@f+2
  6447  00325A  EC6F  F00F         	call	_sin	;wreg free
  6448  00325E  C0C0  F0CD         	movff	?_sin,?_cos
  6449  003262  C0C1  F0CE         	movff	?_sin+1,?_cos+1
  6450  003266  C0C2  F0CF         	movff	?_sin+2,?_cos+2
  6451  00326A  0012               	return	
  6452  00326C                     l472:
  6453  00326C  C0CD  F08D         	movff	cos@f,___ftadd@f1
  6454  003270  C0CE  F08E         	movff	cos@f+1,___ftadd@f1+1
  6455  003274  C0CF  F08F         	movff	cos@f+2,___ftadd@f1+2
  6456  003278  0E10               	movlw	16
  6457  00327A  0100               	movlb	0	; () banked
  6458  00327C  6F90               	movwf	___ftadd@f2& (0+255),b
  6459  00327E  0EC9               	movlw	201
  6460  003280  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
  6461  003282  0E3F               	movlw	63
  6462  003284  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
  6463  003286  ECA4  F010         	call	___ftadd	;wreg free
  6464  00328A  C08D  F0D0         	movff	?___ftadd,_cos$1428
  6465  00328E  C08E  F0D1         	movff	?___ftadd+1,_cos$1428+1
  6466  003292  C08F  F0D2         	movff	?___ftadd+2,_cos$1428+2
  6467  003296  C0D0  F0C0         	movff	_cos$1428,sin@f
  6468  00329A  C0D1  F0C1         	movff	_cos$1428+1,sin@f+1
  6469  00329E  C0D2  F0C2         	movff	_cos$1428+2,sin@f+2
  6470  0032A2  EC6F  F00F         	call	_sin	;wreg free
  6471  0032A6  C0C0  F0CD         	movff	?_sin,?_cos
  6472  0032AA  C0C1  F0CE         	movff	?_sin+1,?_cos+1
  6473  0032AE  C0C2  F0CF         	movff	?_sin+2,?_cos+2
  6474  0032B2  0012               	return	
  6475  0032B4                     __end_of_cos:
  6476                           	opt stack 0
  6477                           tblptru	equ	0xFF8
  6478                           tblptrh	equ	0xFF7
  6479                           tblptrl	equ	0xFF6
  6480                           tablat	equ	0xFF5
  6481                           prodh	equ	0xFF4
  6482                           prodl	equ	0xFF3
  6483                           postinc0	equ	0xFEE
  6484                           wreg	equ	0xFE8
  6485                           indf2	equ	0xFDF
  6486                           postinc2	equ	0xFDE
  6487                           postdec2	equ	0xFDD
  6488                           fsr2h	equ	0xFDA
  6489                           fsr2l	equ	0xFD9
  6490                           status	equ	0xFD8
  6491                           
  6492 ;; *************** function _sin *****************
  6493 ;; Defined at:
  6494 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sin.c"
  6495 ;; Parameters:    Size  Location     Type
  6496 ;;  f               3   96[BANK0 ] unsigned long 
  6497 ;; Auto vars:     Size  Location     Type
  6498 ;;  x2              3  105[BANK0 ] unsigned long 
  6499 ;;  y               3   99[BANK0 ] unsigned long 
  6500 ;;  sgn             1  108[BANK0 ] unsigned char 
  6501 ;; Return value:  Size  Location     Type
  6502 ;;                  3   96[BANK0 ] unsigned char 
  6503 ;; Registers used:
  6504 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6505 ;; Tracked objects:
  6506 ;;		On entry : 0/0
  6507 ;;		On exit  : 0/0
  6508 ;;		Unchanged: 0/0
  6509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6510 ;;      Params:         0       3       0       0       0       0       0       0       0
  6511 ;;      Locals:         0      10       0       0       0       0       0       0       0
  6512 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6513 ;;      Totals:         0      13       0       0       0       0       0       0       0
  6514 ;;Total ram usage:       13 bytes
  6515 ;; Hardware stack levels used:    1
  6516 ;; Hardware stack levels required when called:    6
  6517 ;; This function calls:
  6518 ;;		___ftadd
  6519 ;;		___ftdiv
  6520 ;;		___ftge
  6521 ;;		___ftmul
  6522 ;;		___ftneg
  6523 ;;		___ftsub
  6524 ;;		_eval_poly
  6525 ;;		_floor
  6526 ;; This function is called by:
  6527 ;;		_cos
  6528 ;; This function uses a non-reentrant model
  6529 ;;
  6530                           
  6531                           	psect	text14
  6532  001EDE                     __ptext14:
  6533                           	opt stack 0
  6534  001EDE                     _sin:
  6535                           	opt stack 23
  6536                           
  6537                           ;incstack = 0
  6538  001EDE  0E00               	movlw	0
  6539  001EE0  0100               	movlb	0	; () banked
  6540  001EE2  6FCC               	movwf	sin@sgn& (0+255),b
  6541                           
  6542                           ; BSR set to: 0
  6543  001EE4  AFC2               	btfss	(sin@f+2)& (0+255),7,b
  6544  001EE6  D011               	goto	l755
  6545                           
  6546                           ; BSR set to: 0
  6547  001EE8  C0C0  F060         	movff	sin@f,___ftneg@f1
  6548  001EEC  C0C1  F061         	movff	sin@f+1,___ftneg@f1+1
  6549  001EF0  C0C2  F062         	movff	sin@f+2,___ftneg@f1+2
  6550  001EF4  ECAA  F01C         	call	___ftneg	;wreg free
  6551  001EF8  C060  F0C0         	movff	?___ftneg,sin@f
  6552  001EFC  C061  F0C1         	movff	?___ftneg+1,sin@f+1
  6553  001F00  C062  F0C2         	movff	?___ftneg+2,sin@f+2
  6554  001F04  0E01               	movlw	1
  6555  001F06  0100               	movlb	0	; () banked
  6556  001F08  6FCC               	movwf	sin@sgn& (0+255),b
  6557  001F0A                     l755:
  6558                           
  6559                           ; BSR set to: 0
  6560                           
  6561                           ; BSR set to: 0
  6562  001F0A  C0C0  F074         	movff	sin@f,___ftmul@f1
  6563  001F0E  C0C1  F075         	movff	sin@f+1,___ftmul@f1+1
  6564  001F12  C0C2  F076         	movff	sin@f+2,___ftmul@f1+2
  6565  001F16  0EFA               	movlw	250
  6566  001F18  6F77               	movwf	___ftmul@f2& (0+255),b
  6567  001F1A  0E22               	movlw	34
  6568  001F1C  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  6569  001F1E  0E3E               	movlw	62
  6570  001F20  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  6571  001F22  EC45  F016         	call	___ftmul	;wreg free
  6572  001F26  C074  F0C0         	movff	?___ftmul,sin@f
  6573  001F2A  C075  F0C1         	movff	?___ftmul+1,sin@f+1
  6574  001F2E  C076  F0C2         	movff	?___ftmul+2,sin@f+2
  6575  001F32  C0C0  F0AB         	movff	sin@f,___ftsub@f1
  6576  001F36  C0C1  F0AC         	movff	sin@f+1,___ftsub@f1+1
  6577  001F3A  C0C2  F0AD         	movff	sin@f+2,___ftsub@f1+2
  6578  001F3E  C0C0  F0A3         	movff	sin@f,floor@x
  6579  001F42  C0C1  F0A4         	movff	sin@f+1,floor@x+1
  6580  001F46  C0C2  F0A5         	movff	sin@f+2,floor@x+2
  6581  001F4A  EC21  F018         	call	_floor	;wreg free
  6582  001F4E  C0A3  F0AE         	movff	?_floor,___ftsub@f2
  6583  001F52  C0A4  F0AF         	movff	?_floor+1,___ftsub@f2+1
  6584  001F56  C0A5  F0B0         	movff	?_floor+2,___ftsub@f2+2
  6585  001F5A  EC5C  F01C         	call	___ftsub	;wreg free
  6586  001F5E  C0AB  F0C0         	movff	?___ftsub,sin@f
  6587  001F62  C0AC  F0C1         	movff	?___ftsub+1,sin@f+1
  6588  001F66  C0AD  F0C2         	movff	?___ftsub+2,sin@f+2
  6589  001F6A  C0C0  F074         	movff	sin@f,___ftmul@f1
  6590  001F6E  C0C1  F075         	movff	sin@f+1,___ftmul@f1+1
  6591  001F72  C0C2  F076         	movff	sin@f+2,___ftmul@f1+2
  6592  001F76  0E00               	movlw	0
  6593  001F78  0100               	movlb	0	; () banked
  6594  001F7A  6F77               	movwf	___ftmul@f2& (0+255),b
  6595  001F7C  0E80               	movlw	128
  6596  001F7E  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  6597  001F80  0E40               	movlw	64
  6598  001F82  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  6599  001F84  EC45  F016         	call	___ftmul	;wreg free
  6600  001F88  C074  F0C0         	movff	?___ftmul,sin@f
  6601  001F8C  C075  F0C1         	movff	?___ftmul+1,sin@f+1
  6602  001F90  C076  F0C2         	movff	?___ftmul+2,sin@f+2
  6603  001F94  0E00               	movlw	0
  6604  001F96  0100               	movlb	0	; () banked
  6605  001F98  6F60               	movwf	___ftge@ff1& (0+255),b
  6606  001F9A  0E00               	movlw	0
  6607  001F9C  6F61               	movwf	(___ftge@ff1+1)& (0+255),b
  6608  001F9E  0E40               	movlw	64
  6609  001FA0  6F62               	movwf	(___ftge@ff1+2)& (0+255),b
  6610  001FA2  C0C0  F063         	movff	sin@f,___ftge@ff2
  6611  001FA6  C0C1  F064         	movff	sin@f+1,___ftge@ff2+1
  6612  001FAA  C0C2  F065         	movff	sin@f+2,___ftge@ff2+2
  6613  001FAE  EC55  F01A         	call	___ftge	;wreg free
  6614  001FB2  0100               	movlb	0	; () banked
  6615  001FB4  B0D8               	btfsc	status,0,c
  6616  001FB6  D01C               	goto	l756
  6617                           
  6618                           ; BSR set to: 0
  6619  001FB8  C0C0  F0AB         	movff	sin@f,___ftsub@f1
  6620  001FBC  C0C1  F0AC         	movff	sin@f+1,___ftsub@f1+1
  6621  001FC0  C0C2  F0AD         	movff	sin@f+2,___ftsub@f1+2
  6622  001FC4  0E00               	movlw	0
  6623  001FC6  6FAE               	movwf	___ftsub@f2& (0+255),b
  6624  001FC8  0E00               	movlw	0
  6625  001FCA  6FAF               	movwf	(___ftsub@f2+1)& (0+255),b
  6626  001FCC  0E40               	movlw	64
  6627  001FCE  6FB0               	movwf	(___ftsub@f2+2)& (0+255),b
  6628  001FD0  EC5C  F01C         	call	___ftsub	;wreg free
  6629  001FD4  C0AB  F0C0         	movff	?___ftsub,sin@f
  6630  001FD8  C0AC  F0C1         	movff	?___ftsub+1,sin@f+1
  6631  001FDC  C0AD  F0C2         	movff	?___ftsub+2,sin@f+2
  6632  001FE0  0100               	movlb	0	; () banked
  6633  001FE2  51CC               	movf	sin@sgn& (0+255),w,b
  6634  001FE4  A4D8               	btfss	status,2,c
  6635  001FE6  D002               	goto	u3200
  6636  001FE8  0E01               	movlw	1
  6637  001FEA  D001               	goto	u3210
  6638  001FEC                     u3200:
  6639  001FEC  0E00               	movlw	0
  6640  001FEE                     u3210:
  6641  001FEE  6FCC               	movwf	sin@sgn& (0+255),b
  6642  001FF0                     l756:
  6643                           
  6644                           ; BSR set to: 0
  6645                           
  6646                           ; BSR set to: 0
  6647  001FF0  0E00               	movlw	0
  6648  001FF2  6F60               	movwf	___ftge@ff1& (0+255),b
  6649  001FF4  0E80               	movlw	128
  6650  001FF6  6F61               	movwf	(___ftge@ff1+1)& (0+255),b
  6651  001FF8  0E3F               	movlw	63
  6652  001FFA  6F62               	movwf	(___ftge@ff1+2)& (0+255),b
  6653  001FFC  C0C0  F063         	movff	sin@f,___ftge@ff2
  6654  002000  C0C1  F064         	movff	sin@f+1,___ftge@ff2+1
  6655  002004  C0C2  F065         	movff	sin@f+2,___ftge@ff2+2
  6656  002008  EC55  F01A         	call	___ftge	;wreg free
  6657  00200C  0100               	movlb	0	; () banked
  6658  00200E  B0D8               	btfsc	status,0,c
  6659  002010  D01D               	goto	l757
  6660                           
  6661                           ; BSR set to: 0
  6662  002012  C0C0  F060         	movff	sin@f,___ftneg@f1
  6663  002016  C0C1  F061         	movff	sin@f+1,___ftneg@f1+1
  6664  00201A  C0C2  F062         	movff	sin@f+2,___ftneg@f1+2
  6665  00201E  ECAA  F01C         	call	___ftneg	;wreg free
  6666  002022  C060  F08D         	movff	?___ftneg,___ftadd@f1
  6667  002026  C061  F08E         	movff	?___ftneg+1,___ftadd@f1+1
  6668  00202A  C062  F08F         	movff	?___ftneg+2,___ftadd@f1+2
  6669  00202E  0E00               	movlw	0
  6670  002030  0100               	movlb	0	; () banked
  6671  002032  6F90               	movwf	___ftadd@f2& (0+255),b
  6672  002034  0E00               	movlw	0
  6673  002036  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
  6674  002038  0E40               	movlw	64
  6675  00203A  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
  6676  00203C  ECA4  F010         	call	___ftadd	;wreg free
  6677  002040  C08D  F0C0         	movff	?___ftadd,sin@f
  6678  002044  C08E  F0C1         	movff	?___ftadd+1,sin@f+1
  6679  002048  C08F  F0C2         	movff	?___ftadd+2,sin@f+2
  6680  00204C                     l757:
  6681  00204C  C0C0  F074         	movff	sin@f,___ftmul@f1
  6682  002050  C0C1  F075         	movff	sin@f+1,___ftmul@f1+1
  6683  002054  C0C2  F076         	movff	sin@f+2,___ftmul@f1+2
  6684  002058  C0C0  F077         	movff	sin@f,___ftmul@f2
  6685  00205C  C0C1  F078         	movff	sin@f+1,___ftmul@f2+1
  6686  002060  C0C2  F079         	movff	sin@f+2,___ftmul@f2+2
  6687  002064  EC45  F016         	call	___ftmul	;wreg free
  6688  002068  C074  F0C9         	movff	?___ftmul,sin@x2
  6689  00206C  C075  F0CA         	movff	?___ftmul+1,sin@x2+1
  6690  002070  C076  F0CB         	movff	?___ftmul+2,sin@x2+2
  6691  002074  C0C9  F099         	movff	sin@x2,eval_poly@x
  6692  002078  C0CA  F09A         	movff	sin@x2+1,eval_poly@x+1
  6693  00207C  C0CB  F09B         	movff	sin@x2+2,eval_poly@x+2
  6694  002080  0E86               	movlw	low sin@coeff_b
  6695  002082  0100               	movlb	0	; () banked
  6696  002084  6F9C               	movwf	eval_poly@d& (0+255),b
  6697  002086  0E08               	movlw	high sin@coeff_b
  6698  002088  6F9D               	movwf	(eval_poly@d+1)& (0+255),b
  6699  00208A  0E00               	movlw	0
  6700  00208C  6F9F               	movwf	(eval_poly@n+1)& (0+255),b
  6701  00208E  0E03               	movlw	3
  6702  002090  6F9E               	movwf	eval_poly@n& (0+255),b
  6703  002092  EC93  F018         	call	_eval_poly	;wreg free
  6704  002096  C099  F0C3         	movff	?_eval_poly,sin@y
  6705  00209A  C09A  F0C4         	movff	?_eval_poly+1,sin@y+1
  6706  00209E  C09B  F0C5         	movff	?_eval_poly+2,sin@y+2
  6707  0020A2  C0C3  F0B4         	movff	sin@y,___ftdiv@f2
  6708  0020A6  C0C4  F0B5         	movff	sin@y+1,___ftdiv@f2+1
  6709  0020AA  C0C5  F0B6         	movff	sin@y+2,___ftdiv@f2+2
  6710  0020AE  0E00               	movlw	0
  6711  0020B0  0100               	movlb	0	; () banked
  6712  0020B2  6F9F               	movwf	(eval_poly@n+1)& (0+255),b
  6713  0020B4  0E04               	movlw	4
  6714  0020B6  6F9E               	movwf	eval_poly@n& (0+255),b
  6715  0020B8  0E77               	movlw	low sin@coeff_a
  6716  0020BA  6F9C               	movwf	eval_poly@d& (0+255),b
  6717  0020BC  0E08               	movlw	high sin@coeff_a
  6718  0020BE  6F9D               	movwf	(eval_poly@d+1)& (0+255),b
  6719  0020C0  C0C9  F099         	movff	sin@x2,eval_poly@x
  6720  0020C4  C0CA  F09A         	movff	sin@x2+1,eval_poly@x+1
  6721  0020C8  C0CB  F09B         	movff	sin@x2+2,eval_poly@x+2
  6722  0020CC  EC93  F018         	call	_eval_poly	;wreg free
  6723  0020D0  C099  F0B1         	movff	?_eval_poly,___ftdiv@f1
  6724  0020D4  C09A  F0B2         	movff	?_eval_poly+1,___ftdiv@f1+1
  6725  0020D8  C09B  F0B3         	movff	?_eval_poly+2,___ftdiv@f1+2
  6726  0020DC  EC3A  F017         	call	___ftdiv	;wreg free
  6727  0020E0  C0B1  F0C6         	movff	?___ftdiv,_sin$1429
  6728  0020E4  C0B2  F0C7         	movff	?___ftdiv+1,_sin$1429+1
  6729  0020E8  C0B3  F0C8         	movff	?___ftdiv+2,_sin$1429+2
  6730  0020EC  C0C0  F074         	movff	sin@f,___ftmul@f1
  6731  0020F0  C0C1  F075         	movff	sin@f+1,___ftmul@f1+1
  6732  0020F4  C0C2  F076         	movff	sin@f+2,___ftmul@f1+2
  6733  0020F8  C0C6  F077         	movff	_sin$1429,___ftmul@f2
  6734  0020FC  C0C7  F078         	movff	_sin$1429+1,___ftmul@f2+1
  6735  002100  C0C8  F079         	movff	_sin$1429+2,___ftmul@f2+2
  6736  002104  EC45  F016         	call	___ftmul	;wreg free
  6737  002108  C074  F0C0         	movff	?___ftmul,sin@f
  6738  00210C  C075  F0C1         	movff	?___ftmul+1,sin@f+1
  6739  002110  C076  F0C2         	movff	?___ftmul+2,sin@f+2
  6740  002114  0100               	movlb	0	; () banked
  6741  002116  51CC               	movf	sin@sgn& (0+255),w,b
  6742  002118  B4D8               	btfsc	status,2,c
  6743  00211A  D00F               	goto	l758
  6744                           
  6745                           ; BSR set to: 0
  6746  00211C  C0C0  F060         	movff	sin@f,___ftneg@f1
  6747  002120  C0C1  F061         	movff	sin@f+1,___ftneg@f1+1
  6748  002124  C0C2  F062         	movff	sin@f+2,___ftneg@f1+2
  6749  002128  ECAA  F01C         	call	___ftneg	;wreg free
  6750  00212C  C060  F0C0         	movff	?___ftneg,?_sin
  6751  002130  C061  F0C1         	movff	?___ftneg+1,?_sin+1
  6752  002134  C062  F0C2         	movff	?___ftneg+2,?_sin+2
  6753  002138  0012               	return	
  6754  00213A                     l758:
  6755                           
  6756                           ; BSR set to: 0
  6757  00213A  C0C0  F0C0         	movff	sin@f,?_sin
  6758  00213E  C0C1  F0C1         	movff	sin@f+1,?_sin+1
  6759  002142  C0C2  F0C2         	movff	sin@f+2,?_sin+2
  6760  002146  0012               	return		;funcret
  6761  002148                     __end_of_sin:
  6762                           	opt stack 0
  6763                           tblptru	equ	0xFF8
  6764                           tblptrh	equ	0xFF7
  6765                           tblptrl	equ	0xFF6
  6766                           tablat	equ	0xFF5
  6767                           prodh	equ	0xFF4
  6768                           prodl	equ	0xFF3
  6769                           postinc0	equ	0xFEE
  6770                           wreg	equ	0xFE8
  6771                           indf2	equ	0xFDF
  6772                           postinc2	equ	0xFDE
  6773                           postdec2	equ	0xFDD
  6774                           fsr2h	equ	0xFDA
  6775                           fsr2l	equ	0xFD9
  6776                           status	equ	0xFD8
  6777                           
  6778 ;; *************** function _floor *****************
  6779 ;; Defined at:
  6780 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\floor.c"
  6781 ;; Parameters:    Size  Location     Type
  6782 ;;  x               3   67[BANK0 ] unsigned char 
  6783 ;; Auto vars:     Size  Location     Type
  6784 ;;  i               3   70[BANK0 ] unsigned char 
  6785 ;;  expon           2   73[BANK0 ] int 
  6786 ;; Return value:  Size  Location     Type
  6787 ;;                  3   67[BANK0 ] int 
  6788 ;; Registers used:
  6789 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6790 ;; Tracked objects:
  6791 ;;		On entry : 0/0
  6792 ;;		On exit  : 0/0
  6793 ;;		Unchanged: 0/0
  6794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6795 ;;      Params:         0       3       0       0       0       0       0       0       0
  6796 ;;      Locals:         0       5       0       0       0       0       0       0       0
  6797 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6798 ;;      Totals:         0       8       0       0       0       0       0       0       0
  6799 ;;Total ram usage:        8 bytes
  6800 ;; Hardware stack levels used:    1
  6801 ;; Hardware stack levels required when called:    5
  6802 ;; This function calls:
  6803 ;;		___altoft
  6804 ;;		___ftadd
  6805 ;;		___ftge
  6806 ;;		___fttol
  6807 ;;		_frexp
  6808 ;; This function is called by:
  6809 ;;		_sin
  6810 ;; This function uses a non-reentrant model
  6811 ;;
  6812                           
  6813                           	psect	text15
  6814  003042                     __ptext15:
  6815                           	opt stack 0
  6816  003042                     _floor:
  6817                           	opt stack 23
  6818                           
  6819                           ;incstack = 0
  6820  003042  C0A3  F060         	movff	floor@x,frexp@value
  6821  003046  C0A4  F061         	movff	floor@x+1,frexp@value+1
  6822  00304A  C0A5  F062         	movff	floor@x+2,frexp@value+2
  6823  00304E  0EA9               	movlw	low floor@expon
  6824  003050  0100               	movlb	0	; () banked
  6825  003052  6F63               	movwf	frexp@eptr& (0+255),b
  6826  003054  0E00               	movlw	high floor@expon
  6827  003056  6F64               	movwf	(frexp@eptr+1)& (0+255),b
  6828  003058  EC23  F01B         	call	_frexp	;wreg free
  6829  00305C  0100               	movlb	0	; () banked
  6830  00305E  AFAA               	btfss	(floor@expon+1)& (0+255),7,b
  6831  003060  D010               	goto	l920
  6832                           
  6833                           ; BSR set to: 0
  6834  003062  AFA5               	btfss	(floor@x+2)& (0+255),7,b
  6835  003064  D007               	goto	l921
  6836                           
  6837                           ; BSR set to: 0
  6838  003066  0E00               	movlw	0
  6839  003068  6FA3               	movwf	?_floor& (0+255),b
  6840  00306A  0E80               	movlw	128
  6841  00306C  6FA4               	movwf	(?_floor+1)& (0+255),b
  6842  00306E  0EBF               	movlw	191
  6843  003070  6FA5               	movwf	(?_floor+2)& (0+255),b
  6844                           
  6845                           ; BSR set to: 0
  6846  003072  0012               	return	
  6847  003074                     l921:
  6848                           
  6849                           ; BSR set to: 0
  6850                           
  6851                           ; BSR set to: 0
  6852  003074  0E00               	movlw	0
  6853  003076  6FA3               	movwf	?_floor& (0+255),b
  6854  003078  0E00               	movlw	0
  6855  00307A  6FA4               	movwf	(?_floor+1)& (0+255),b
  6856  00307C  0E00               	movlw	0
  6857  00307E  6FA5               	movwf	(?_floor+2)& (0+255),b
  6858                           
  6859                           ; BSR set to: 0
  6860  003080  0012               	return	
  6861  003082                     l920:
  6862                           
  6863                           ; BSR set to: 0
  6864                           
  6865                           ; BSR set to: 0
  6866  003082  51AA               	movf	(floor@expon+1)& (0+255),w,b
  6867  003084  E104               	bnz	u2840
  6868  003086  0E15               	movlw	21
  6869  003088  5DA9               	subwf	floor@expon& (0+255),w,b
  6870  00308A  A0D8               	btfss	status,0,c
  6871  00308C  D007               	goto	l923
  6872  00308E                     u2840:
  6873                           
  6874                           ; BSR set to: 0
  6875  00308E  C0A3  F0A3         	movff	floor@x,?_floor
  6876  003092  C0A4  F0A4         	movff	floor@x+1,?_floor+1
  6877  003096  C0A5  F0A5         	movff	floor@x+2,?_floor+2
  6878  00309A  0012               	return	
  6879  00309C                     l923:
  6880                           
  6881                           ; BSR set to: 0
  6882                           
  6883                           ; BSR set to: 0
  6884  00309C  C0A3  F08A         	movff	floor@x,___fttol@f1
  6885  0030A0  C0A4  F08B         	movff	floor@x+1,___fttol@f1+1
  6886  0030A4  C0A5  F08C         	movff	floor@x+2,___fttol@f1+2
  6887  0030A8  ECC9  F015         	call	___fttol	;wreg free
  6888  0030AC  C08A  F099         	movff	?___fttol,___altoft@c
  6889  0030B0  C08B  F09A         	movff	?___fttol+1,___altoft@c+1
  6890  0030B4  C08C  F09B         	movff	?___fttol+2,___altoft@c+2
  6891  0030B8  C08D  F09C         	movff	?___fttol+3,___altoft@c+3
  6892  0030BC  EC61  F01B         	call	___altoft	;wreg free
  6893  0030C0  C099  F0A6         	movff	?___altoft,floor@i
  6894  0030C4  C09A  F0A7         	movff	?___altoft+1,floor@i+1
  6895  0030C8  C09B  F0A8         	movff	?___altoft+2,floor@i+2
  6896  0030CC  C0A3  F060         	movff	floor@x,___ftge@ff1
  6897  0030D0  C0A4  F061         	movff	floor@x+1,___ftge@ff1+1
  6898  0030D4  C0A5  F062         	movff	floor@x+2,___ftge@ff1+2
  6899  0030D8  C0A6  F063         	movff	floor@i,___ftge@ff2
  6900  0030DC  C0A7  F064         	movff	floor@i+1,___ftge@ff2+1
  6901  0030E0  C0A8  F065         	movff	floor@i+2,___ftge@ff2+2
  6902  0030E4  EC55  F01A         	call	___ftge	;wreg free
  6903  0030E8  0100               	movlb	0	; () banked
  6904  0030EA  B0D8               	btfsc	status,0,c
  6905  0030EC  D015               	goto	l924
  6906                           
  6907                           ; BSR set to: 0
  6908  0030EE  C0A6  F08D         	movff	floor@i,___ftadd@f1
  6909  0030F2  C0A7  F08E         	movff	floor@i+1,___ftadd@f1+1
  6910  0030F6  C0A8  F08F         	movff	floor@i+2,___ftadd@f1+2
  6911  0030FA  0E00               	movlw	0
  6912  0030FC  6F90               	movwf	___ftadd@f2& (0+255),b
  6913  0030FE  0E80               	movlw	128
  6914  003100  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
  6915  003102  0EBF               	movlw	191
  6916  003104  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
  6917  003106  ECA4  F010         	call	___ftadd	;wreg free
  6918  00310A  C08D  F0A3         	movff	?___ftadd,?_floor
  6919  00310E  C08E  F0A4         	movff	?___ftadd+1,?_floor+1
  6920  003112  C08F  F0A5         	movff	?___ftadd+2,?_floor+2
  6921  003116  0012               	return	
  6922  003118                     l924:
  6923                           
  6924                           ; BSR set to: 0
  6925  003118  C0A6  F0A3         	movff	floor@i,?_floor
  6926  00311C  C0A7  F0A4         	movff	floor@i+1,?_floor+1
  6927  003120  C0A8  F0A5         	movff	floor@i+2,?_floor+2
  6928  003124  0012               	return		;funcret
  6929  003126                     __end_of_floor:
  6930                           	opt stack 0
  6931                           tblptru	equ	0xFF8
  6932                           tblptrh	equ	0xFF7
  6933                           tblptrl	equ	0xFF6
  6934                           tablat	equ	0xFF5
  6935                           prodh	equ	0xFF4
  6936                           prodl	equ	0xFF3
  6937                           postinc0	equ	0xFEE
  6938                           wreg	equ	0xFE8
  6939                           indf2	equ	0xFDF
  6940                           postinc2	equ	0xFDE
  6941                           postdec2	equ	0xFDD
  6942                           fsr2h	equ	0xFDA
  6943                           fsr2l	equ	0xFD9
  6944                           status	equ	0xFD8
  6945                           
  6946 ;; *************** function _frexp *****************
  6947 ;; Defined at:
  6948 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
  6949 ;; Parameters:    Size  Location     Type
  6950 ;;  value           3    0[BANK0 ] int 
  6951 ;;  eptr            2    3[BANK0 ] PTR int 
  6952 ;;		 -> floor@expon(2), 
  6953 ;; Auto vars:     Size  Location     Type
  6954 ;;		None
  6955 ;; Return value:  Size  Location     Type
  6956 ;;                  3    0[BANK0 ] PTR int 
  6957 ;; Registers used:
  6958 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6959 ;; Tracked objects:
  6960 ;;		On entry : 0/0
  6961 ;;		On exit  : 0/0
  6962 ;;		Unchanged: 0/0
  6963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6964 ;;      Params:         0       5       0       0       0       0       0       0       0
  6965 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6966 ;;      Temps:          0       2       0       0       0       0       0       0       0
  6967 ;;      Totals:         0       7       0       0       0       0       0       0       0
  6968 ;;Total ram usage:        7 bytes
  6969 ;; Hardware stack levels used:    1
  6970 ;; Hardware stack levels required when called:    3
  6971 ;; This function calls:
  6972 ;;		Nothing
  6973 ;; This function is called by:
  6974 ;;		_floor
  6975 ;; This function uses a non-reentrant model
  6976 ;;
  6977                           
  6978                           	psect	text16
  6979  003646                     __ptext16:
  6980                           	opt stack 0
  6981  003646                     _frexp:
  6982                           	opt stack 24
  6983                           
  6984                           ;incstack = 0
  6985  003646  0100               	movlb	0	; () banked
  6986  003648  5160               	movf	frexp@value& (0+255),w,b
  6987  00364A  1161               	iorwf	(frexp@value+1)& (0+255),w,b
  6988  00364C  1162               	iorwf	(frexp@value+2)& (0+255),w,b
  6989  00364E  A4D8               	btfss	status,2,c
  6990  003650  D009               	goto	l929
  6991                           
  6992                           ; BSR set to: 0
  6993  003652  C063  FFD9         	movff	frexp@eptr,fsr2l
  6994  003656  C064  FFDA         	movff	frexp@eptr+1,fsr2h
  6995  00365A  0E00               	movlw	0
  6996  00365C  6EDE               	movwf	postinc2,c
  6997  00365E  0E00               	movlw	0
  6998  003660  6EDD               	movwf	postdec2,c
  6999                           
  7000                           ; BSR set to: 0
  7001                           ;	Return value of _frexp is never used
  7002  003662  0012               	return	
  7003  003664                     l929:
  7004                           
  7005                           ; BSR set to: 0
  7006                           
  7007                           ; BSR set to: 0
  7008  003664  5162               	movf	(frexp@value+2)& (0+255),w,b
  7009  003666  0B7F               	andlw	127
  7010  003668  6F65               	movwf	??_frexp& (0+255),b
  7011  00366A  6B66               	clrf	(??_frexp+1)& (0+255),b
  7012  00366C  90D8               	bcf	status,0,c
  7013  00366E  3765               	rlcf	??_frexp& (0+255),f,b
  7014  003670  3766               	rlcf	(??_frexp+1)& (0+255),f,b
  7015  003672  C063  FFD9         	movff	frexp@eptr,fsr2l
  7016  003676  C064  FFDA         	movff	frexp@eptr+1,fsr2h
  7017  00367A  C065  FFDE         	movff	??_frexp,postinc2
  7018  00367E  C066  FFDD         	movff	??_frexp+1,postdec2
  7019  003682  AF61               	btfss	(frexp@value+1)& (0+255),7,b
  7020  003684  D003               	goto	u2620
  7021  003686  6B65               	clrf	??_frexp& (0+255),b
  7022  003688  2B65               	incf	??_frexp& (0+255),f,b
  7023  00368A  D002               	goto	u2628
  7024  00368C                     u2620:
  7025  00368C  0100               	movlb	0	; () banked
  7026  00368E  6B65               	clrf	??_frexp& (0+255),b
  7027  003690                     u2628:
  7028  003690  5165               	movf	??_frexp& (0+255),w,b
  7029  003692  C063  FFD9         	movff	frexp@eptr,fsr2l
  7030  003696  C064  FFDA         	movff	frexp@eptr+1,fsr2h
  7031  00369A  12DE               	iorwf	postinc2,f,c
  7032  00369C  0E00               	movlw	0
  7033  00369E  12DD               	iorwf	postdec2,f,c
  7034                           
  7035                           ; BSR set to: 0
  7036  0036A0  C063  FFD9         	movff	frexp@eptr,fsr2l
  7037  0036A4  C064  FFDA         	movff	frexp@eptr+1,fsr2h
  7038  0036A8  0E82               	movlw	130
  7039  0036AA  26DE               	addwf	postinc2,f,c
  7040  0036AC  0EFF               	movlw	255
  7041  0036AE  22DD               	addwfc	postdec2,f,c
  7042                           
  7043                           ; BSR set to: 0
  7044  0036B0  8162               	bsf	(frexp@value+2)& (0+255),0,b
  7045  0036B2  8362               	bsf	(frexp@value+2)& (0+255),1,b
  7046  0036B4  8562               	bsf	(frexp@value+2)& (0+255),2,b
  7047  0036B6  8762               	bsf	(frexp@value+2)& (0+255),3,b
  7048  0036B8  8962               	bsf	(frexp@value+2)& (0+255),4,b
  7049  0036BA  8B62               	bsf	(frexp@value+2)& (0+255),5,b
  7050  0036BC  9D62               	bcf	(frexp@value+2)& (0+255),6,b
  7051                           
  7052                           ; BSR set to: 0
  7053  0036BE  9F61               	bcf	(frexp@value+1)& (0+255),7,b
  7054  0036C0  0012               	return	
  7055  0036C2                     __end_of_frexp:
  7056                           	opt stack 0
  7057                           tblptru	equ	0xFF8
  7058                           tblptrh	equ	0xFF7
  7059                           tblptrl	equ	0xFF6
  7060                           tablat	equ	0xFF5
  7061                           prodh	equ	0xFF4
  7062                           prodl	equ	0xFF3
  7063                           postinc0	equ	0xFEE
  7064                           wreg	equ	0xFE8
  7065                           indf2	equ	0xFDF
  7066                           postinc2	equ	0xFDE
  7067                           postdec2	equ	0xFDD
  7068                           fsr2h	equ	0xFDA
  7069                           fsr2l	equ	0xFD9
  7070                           status	equ	0xFD8
  7071                           
  7072 ;; *************** function ___fttol *****************
  7073 ;; Defined at:
  7074 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  7075 ;; Parameters:    Size  Location     Type
  7076 ;;  f1              3   42[BANK0 ] float 
  7077 ;; Auto vars:     Size  Location     Type
  7078 ;;  lval            4   52[BANK0 ] unsigned long 
  7079 ;;  exp1            1   56[BANK0 ] unsigned char 
  7080 ;;  sign1           1   51[BANK0 ] unsigned char 
  7081 ;; Return value:  Size  Location     Type
  7082 ;;                  4   42[BANK0 ] long 
  7083 ;; Registers used:
  7084 ;;		wreg, status,2, status,0
  7085 ;; Tracked objects:
  7086 ;;		On entry : 0/0
  7087 ;;		On exit  : 0/0
  7088 ;;		Unchanged: 0/0
  7089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7090 ;;      Params:         0       4       0       0       0       0       0       0       0
  7091 ;;      Locals:         0       6       0       0       0       0       0       0       0
  7092 ;;      Temps:          0       5       0       0       0       0       0       0       0
  7093 ;;      Totals:         0      15       0       0       0       0       0       0       0
  7094 ;;Total ram usage:       15 bytes
  7095 ;; Hardware stack levels used:    1
  7096 ;; Hardware stack levels required when called:    3
  7097 ;; This function calls:
  7098 ;;		Nothing
  7099 ;; This function is called by:
  7100 ;;		_sprintf
  7101 ;;		_floor
  7102 ;; This function uses a non-reentrant model
  7103 ;;
  7104                           
  7105                           	psect	text17
  7106  002B92                     __ptext17:
  7107                           	opt stack 0
  7108  002B92                     ___fttol:
  7109                           	opt stack 26
  7110                           
  7111                           ; BSR set to: 0
  7112                           ;incstack = 0
  7113  002B92  C08C  F08E         	movff	___fttol@f1+2,??___fttol
  7114  002B96  0100               	movlb	0	; () banked
  7115  002B98  6B8F               	clrf	(??___fttol+1)& (0+255),b
  7116  002B9A  6B90               	clrf	(??___fttol+2)& (0+255),b
  7117  002B9C  358B               	rlcf	(___fttol@f1+1)& (0+255),w,b
  7118  002B9E  378E               	rlcf	??___fttol& (0+255),f,b
  7119  002BA0  E301               	bnc	u2531
  7120  002BA2  818F               	bsf	(??___fttol+1)& (0+255),0,b
  7121  002BA4                     u2531:
  7122  002BA4  518E               	movf	??___fttol& (0+255),w,b
  7123  002BA6  6F98               	movwf	___fttol@exp1& (0+255),b
  7124  002BA8  5198               	movf	___fttol@exp1& (0+255),w,b
  7125  002BAA  A4D8               	btfss	status,2,c
  7126  002BAC  D009               	goto	l625
  7127                           
  7128                           ; BSR set to: 0
  7129  002BAE  0E00               	movlw	0
  7130  002BB0  6F8A               	movwf	?___fttol& (0+255),b
  7131  002BB2  0E00               	movlw	0
  7132  002BB4  6F8B               	movwf	(?___fttol+1)& (0+255),b
  7133  002BB6  0E00               	movlw	0
  7134  002BB8  6F8C               	movwf	(?___fttol+2)& (0+255),b
  7135  002BBA  0E00               	movlw	0
  7136  002BBC  6F8D               	movwf	(?___fttol+3)& (0+255),b
  7137                           
  7138                           ; BSR set to: 0
  7139  002BBE  0012               	return	
  7140  002BC0                     l625:
  7141                           
  7142                           ; BSR set to: 0
  7143                           
  7144                           ; BSR set to: 0
  7145  002BC0  0E17               	movlw	23
  7146  002BC2  6F8E               	movwf	??___fttol& (0+255),b
  7147  002BC4  C08A  F08F         	movff	___fttol@f1,??___fttol+1
  7148  002BC8  C08B  F090         	movff	___fttol@f1+1,??___fttol+2
  7149  002BCC  C08C  F091         	movff	___fttol@f1+2,??___fttol+3
  7150  002BD0  298E               	incf	??___fttol& (0+255),w,b
  7151  002BD2  6F92               	movwf	(??___fttol+4)& (0+255),b
  7152  002BD4  D004               	goto	u2550
  7153  002BD6                     u2555:
  7154  002BD6  90D8               	bcf	status,0,c
  7155  002BD8  3391               	rrcf	(??___fttol+3)& (0+255),f,b
  7156  002BDA  3390               	rrcf	(??___fttol+2)& (0+255),f,b
  7157  002BDC  338F               	rrcf	(??___fttol+1)& (0+255),f,b
  7158  002BDE                     u2550:
  7159  002BDE  2F92               	decfsz	(??___fttol+4)& (0+255),f,b
  7160  002BE0  D7FA               	goto	u2555
  7161  002BE2  0100               	movlb	0	; () banked
  7162  002BE4  518F               	movf	(??___fttol+1)& (0+255),w,b
  7163  002BE6  6F93               	movwf	___fttol@sign1& (0+255),b
  7164                           
  7165                           ; BSR set to: 0
  7166  002BE8  8F8B               	bsf	(___fttol@f1+1)& (0+255),7,b
  7167                           
  7168                           ; BSR set to: 0
  7169  002BEA  0EFF               	movlw	255
  7170  002BEC  178A               	andwf	___fttol@f1& (0+255),f,b
  7171  002BEE  0EFF               	movlw	255
  7172  002BF0  178B               	andwf	(___fttol@f1+1)& (0+255),f,b
  7173  002BF2  0E00               	movlw	0
  7174  002BF4  178C               	andwf	(___fttol@f1+2)& (0+255),f,b
  7175                           
  7176                           ; BSR set to: 0
  7177  002BF6  518A               	movf	___fttol@f1& (0+255),w,b
  7178  002BF8  6F94               	movwf	___fttol@lval& (0+255),b
  7179  002BFA  518B               	movf	(___fttol@f1+1)& (0+255),w,b
  7180  002BFC  6F95               	movwf	(___fttol@lval+1)& (0+255),b
  7181  002BFE  518C               	movf	(___fttol@f1+2)& (0+255),w,b
  7182  002C00  6F96               	movwf	(___fttol@lval+2)& (0+255),b
  7183  002C02  6B97               	clrf	(___fttol@lval+3)& (0+255),b
  7184                           
  7185                           ; BSR set to: 0
  7186  002C04  0E8E               	movlw	142
  7187  002C06  5F98               	subwf	___fttol@exp1& (0+255),f,b
  7188                           
  7189                           ; BSR set to: 0
  7190  002C08  AF98               	btfss	___fttol@exp1& (0+255),7,b
  7191  002C0A  D016               	goto	l627
  7192                           
  7193                           ; BSR set to: 0
  7194  002C0C  5198               	movf	___fttol@exp1& (0+255),w,b
  7195  002C0E  0A80               	xorlw	128
  7196  002C10  0F8F               	addlw	143
  7197  002C12  B0D8               	btfsc	status,0,c
  7198  002C14  D009               	goto	l628
  7199                           
  7200                           ; BSR set to: 0
  7201  002C16  0E00               	movlw	0
  7202  002C18  6F8A               	movwf	?___fttol& (0+255),b
  7203  002C1A  0E00               	movlw	0
  7204  002C1C  6F8B               	movwf	(?___fttol+1)& (0+255),b
  7205  002C1E  0E00               	movlw	0
  7206  002C20  6F8C               	movwf	(?___fttol+2)& (0+255),b
  7207  002C22  0E00               	movlw	0
  7208  002C24  6F8D               	movwf	(?___fttol+3)& (0+255),b
  7209                           
  7210                           ; BSR set to: 0
  7211  002C26  0012               	return	
  7212  002C28                     l628:
  7213                           
  7214                           ; BSR set to: 0
  7215                           
  7216                           ; BSR set to: 0
  7217                           
  7218                           ; BSR set to: 0
  7219  002C28  90D8               	bcf	status,0,c
  7220  002C2A  3397               	rrcf	(___fttol@lval+3)& (0+255),f,b
  7221  002C2C  3396               	rrcf	(___fttol@lval+2)& (0+255),f,b
  7222  002C2E  3395               	rrcf	(___fttol@lval+1)& (0+255),f,b
  7223  002C30  3394               	rrcf	___fttol@lval& (0+255),f,b
  7224                           
  7225                           ; BSR set to: 0
  7226  002C32  3F98               	incfsz	___fttol@exp1& (0+255),f,b
  7227  002C34  D7F9               	goto	l628
  7228                           
  7229                           ; BSR set to: 0
  7230  002C36  D015               	goto	u2590
  7231  002C38                     l627:
  7232                           
  7233                           ; BSR set to: 0
  7234                           
  7235                           ; BSR set to: 0
  7236  002C38  0E17               	movlw	23
  7237  002C3A  6598               	cpfsgt	___fttol@exp1& (0+255),b
  7238  002C3C  D00F               	goto	l633
  7239                           
  7240                           ; BSR set to: 0
  7241  002C3E  0E00               	movlw	0
  7242  002C40  6F8A               	movwf	?___fttol& (0+255),b
  7243  002C42  0E00               	movlw	0
  7244  002C44  6F8B               	movwf	(?___fttol+1)& (0+255),b
  7245  002C46  0E00               	movlw	0
  7246  002C48  6F8C               	movwf	(?___fttol+2)& (0+255),b
  7247  002C4A  0E00               	movlw	0
  7248  002C4C  6F8D               	movwf	(?___fttol+3)& (0+255),b
  7249                           
  7250                           ; BSR set to: 0
  7251  002C4E  0012               	return	
  7252  002C50                     
  7253                           ; BSR set to: 0
  7254                           
  7255                           ; BSR set to: 0
  7256  002C50  90D8               	bcf	status,0,c
  7257  002C52  3794               	rlcf	___fttol@lval& (0+255),f,b
  7258  002C54  3795               	rlcf	(___fttol@lval+1)& (0+255),f,b
  7259  002C56  3796               	rlcf	(___fttol@lval+2)& (0+255),f,b
  7260  002C58  3797               	rlcf	(___fttol@lval+3)& (0+255),f,b
  7261  002C5A  0798               	decf	___fttol@exp1& (0+255),f,b
  7262  002C5C                     l633:
  7263                           
  7264                           ; BSR set to: 0
  7265                           
  7266                           ; BSR set to: 0
  7267  002C5C  5198               	movf	___fttol@exp1& (0+255),w,b
  7268  002C5E  A4D8               	btfss	status,2,c
  7269  002C60  D7F7               	goto	l634
  7270  002C62                     u2590:
  7271                           
  7272                           ; BSR set to: 0
  7273                           
  7274                           ; BSR set to: 0
  7275                           
  7276                           ; BSR set to: 0
  7277  002C62  5193               	movf	___fttol@sign1& (0+255),w,b
  7278  002C64  B4D8               	btfsc	status,2,c
  7279  002C66  D008               	goto	l636
  7280                           
  7281                           ; BSR set to: 0
  7282  002C68  1F97               	comf	(___fttol@lval+3)& (0+255),f,b
  7283  002C6A  1F96               	comf	(___fttol@lval+2)& (0+255),f,b
  7284  002C6C  1F95               	comf	(___fttol@lval+1)& (0+255),f,b
  7285  002C6E  6D94               	negf	___fttol@lval& (0+255),b
  7286  002C70  0E00               	movlw	0
  7287  002C72  2395               	addwfc	(___fttol@lval+1)& (0+255),f,b
  7288  002C74  2396               	addwfc	(___fttol@lval+2)& (0+255),f,b
  7289  002C76  2397               	addwfc	(___fttol@lval+3)& (0+255),f,b
  7290  002C78                     l636:
  7291                           
  7292                           ; BSR set to: 0
  7293                           
  7294                           ; BSR set to: 0
  7295  002C78  C094  F08A         	movff	___fttol@lval,?___fttol
  7296  002C7C  C095  F08B         	movff	___fttol@lval+1,?___fttol+1
  7297  002C80  C096  F08C         	movff	___fttol@lval+2,?___fttol+2
  7298  002C84  C097  F08D         	movff	___fttol@lval+3,?___fttol+3
  7299  002C88  0012               	return	
  7300  002C8A                     __end_of___fttol:
  7301                           	opt stack 0
  7302                           tblptru	equ	0xFF8
  7303                           tblptrh	equ	0xFF7
  7304                           tblptrl	equ	0xFF6
  7305                           tablat	equ	0xFF5
  7306                           prodh	equ	0xFF4
  7307                           prodl	equ	0xFF3
  7308                           postinc0	equ	0xFEE
  7309                           wreg	equ	0xFE8
  7310                           indf2	equ	0xFDF
  7311                           postinc2	equ	0xFDE
  7312                           postdec2	equ	0xFDD
  7313                           fsr2h	equ	0xFDA
  7314                           fsr2l	equ	0xFD9
  7315                           status	equ	0xFD8
  7316                           
  7317 ;; *************** function ___ftge *****************
  7318 ;; Defined at:
  7319 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  7320 ;; Parameters:    Size  Location     Type
  7321 ;;  ff1             3    0[BANK0 ] float 
  7322 ;;  ff2             3    3[BANK0 ] float 
  7323 ;; Auto vars:     Size  Location     Type
  7324 ;;		None
  7325 ;; Return value:  Size  Location     Type
  7326 ;;		None               void
  7327 ;; Registers used:
  7328 ;;		wreg, status,2, status,0
  7329 ;; Tracked objects:
  7330 ;;		On entry : 0/0
  7331 ;;		On exit  : 0/0
  7332 ;;		Unchanged: 0/0
  7333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7334 ;;      Params:         0       6       0       0       0       0       0       0       0
  7335 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7336 ;;      Temps:          0       3       0       0       0       0       0       0       0
  7337 ;;      Totals:         0       9       0       0       0       0       0       0       0
  7338 ;;Total ram usage:        9 bytes
  7339 ;; Hardware stack levels used:    1
  7340 ;; Hardware stack levels required when called:    3
  7341 ;; This function calls:
  7342 ;;		Nothing
  7343 ;; This function is called by:
  7344 ;;		_sprintf
  7345 ;;		_cos
  7346 ;;		_sin
  7347 ;;		_sqrt
  7348 ;;		_floor
  7349 ;; This function uses a non-reentrant model
  7350 ;;
  7351                           
  7352                           	psect	text18
  7353  0034AA                     __ptext18:
  7354                           	opt stack 0
  7355  0034AA                     ___ftge:
  7356                           	opt stack 26
  7357                           
  7358                           ; BSR set to: 0
  7359                           ;incstack = 0
  7360  0034AA  0100               	movlb	0	; () banked
  7361  0034AC  AF62               	btfss	(___ftge@ff1+2)& (0+255),7,b
  7362  0034AE  D016               	goto	l597
  7363                           
  7364                           ; BSR set to: 0
  7365  0034B0  C060  F066         	movff	___ftge@ff1,??___ftge
  7366  0034B4  C061  F067         	movff	___ftge@ff1+1,??___ftge+1
  7367  0034B8  C062  F068         	movff	___ftge@ff1+2,??___ftge+2
  7368  0034BC  1F66               	comf	??___ftge& (0+255),f,b
  7369  0034BE  1F67               	comf	(??___ftge+1)& (0+255),f,b
  7370  0034C0  1F68               	comf	(??___ftge+2)& (0+255),f,b
  7371  0034C2  2B66               	incf	??___ftge& (0+255),f,b
  7372  0034C4  0E00               	movlw	0
  7373  0034C6  2367               	addwfc	(??___ftge+1)& (0+255),f,b
  7374  0034C8  2368               	addwfc	(??___ftge+2)& (0+255),f,b
  7375  0034CA  0E00               	movlw	0
  7376  0034CC  2566               	addwf	??___ftge& (0+255),w,b
  7377  0034CE  6F60               	movwf	___ftge@ff1& (0+255),b
  7378  0034D0  0E00               	movlw	0
  7379  0034D2  2167               	addwfc	(??___ftge+1)& (0+255),w,b
  7380  0034D4  6F61               	movwf	(___ftge@ff1+1)& (0+255),b
  7381  0034D6  0E80               	movlw	128
  7382  0034D8  2168               	addwfc	(??___ftge+2)& (0+255),w,b
  7383  0034DA  6F62               	movwf	(___ftge@ff1+2)& (0+255),b
  7384  0034DC                     l597:
  7385                           
  7386                           ; BSR set to: 0
  7387                           
  7388                           ; BSR set to: 0
  7389  0034DC  AF65               	btfss	(___ftge@ff2+2)& (0+255),7,b
  7390  0034DE  D016               	goto	l598
  7391                           
  7392                           ; BSR set to: 0
  7393  0034E0  C063  F066         	movff	___ftge@ff2,??___ftge
  7394  0034E4  C064  F067         	movff	___ftge@ff2+1,??___ftge+1
  7395  0034E8  C065  F068         	movff	___ftge@ff2+2,??___ftge+2
  7396  0034EC  1F66               	comf	??___ftge& (0+255),f,b
  7397  0034EE  1F67               	comf	(??___ftge+1)& (0+255),f,b
  7398  0034F0  1F68               	comf	(??___ftge+2)& (0+255),f,b
  7399  0034F2  2B66               	incf	??___ftge& (0+255),f,b
  7400  0034F4  0E00               	movlw	0
  7401  0034F6  2367               	addwfc	(??___ftge+1)& (0+255),f,b
  7402  0034F8  2368               	addwfc	(??___ftge+2)& (0+255),f,b
  7403  0034FA  0E00               	movlw	0
  7404  0034FC  2566               	addwf	??___ftge& (0+255),w,b
  7405  0034FE  6F63               	movwf	___ftge@ff2& (0+255),b
  7406  003500  0E00               	movlw	0
  7407  003502  2167               	addwfc	(??___ftge+1)& (0+255),w,b
  7408  003504  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  7409  003506  0E80               	movlw	128
  7410  003508  2168               	addwfc	(??___ftge+2)& (0+255),w,b
  7411  00350A  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  7412  00350C                     l598:
  7413                           
  7414                           ; BSR set to: 0
  7415                           
  7416                           ; BSR set to: 0
  7417  00350C  0E00               	movlw	0
  7418  00350E  1B60               	xorwf	___ftge@ff1& (0+255),f,b
  7419  003510  0E00               	movlw	0
  7420  003512  1B61               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  7421  003514  0E80               	movlw	128
  7422  003516  1B62               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  7423                           
  7424                           ; BSR set to: 0
  7425  003518  0E00               	movlw	0
  7426  00351A  1B63               	xorwf	___ftge@ff2& (0+255),f,b
  7427  00351C  0E00               	movlw	0
  7428  00351E  1B64               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  7429  003520  0E80               	movlw	128
  7430  003522  1B65               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  7431  003524  5163               	movf	___ftge@ff2& (0+255),w,b
  7432  003526  5D60               	subwf	___ftge@ff1& (0+255),w,b
  7433  003528  5164               	movf	(___ftge@ff2+1)& (0+255),w,b
  7434  00352A  5961               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  7435  00352C  5165               	movf	(___ftge@ff2+2)& (0+255),w,b
  7436  00352E  5962               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  7437  003530  B0D8               	btfsc	status,0,c
  7438  003532  D002               	goto	l2528
  7439                           
  7440                           ; BSR set to: 0
  7441  003534  90D8               	bcf	status,0,c
  7442  003536  0012               	return	
  7443  003538                     l2528:
  7444                           
  7445                           ; BSR set to: 0
  7446                           
  7447                           ; BSR set to: 0
  7448  003538  80D8               	bsf	status,0,c
  7449                           
  7450                           ; BSR set to: 0
  7451  00353A  0012               	return	
  7452  00353C                     __end_of___ftge:
  7453                           	opt stack 0
  7454                           tblptru	equ	0xFF8
  7455                           tblptrh	equ	0xFF7
  7456                           tblptrl	equ	0xFF6
  7457                           tablat	equ	0xFF5
  7458                           prodh	equ	0xFF4
  7459                           prodl	equ	0xFF3
  7460                           postinc0	equ	0xFEE
  7461                           wreg	equ	0xFE8
  7462                           indf2	equ	0xFDF
  7463                           postinc2	equ	0xFDE
  7464                           postdec2	equ	0xFDD
  7465                           fsr2h	equ	0xFDA
  7466                           fsr2l	equ	0xFD9
  7467                           status	equ	0xFD8
  7468                           
  7469 ;; *************** function ___altoft *****************
  7470 ;; Defined at:
  7471 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
  7472 ;; Parameters:    Size  Location     Type
  7473 ;;  c               4   57[BANK0 ] long 
  7474 ;; Auto vars:     Size  Location     Type
  7475 ;;  sign            1   66[BANK0 ] unsigned char 
  7476 ;;  exp             1   65[BANK0 ] unsigned char 
  7477 ;; Return value:  Size  Location     Type
  7478 ;;                  3   57[BANK0 ] float 
  7479 ;; Registers used:
  7480 ;;		wreg, status,2, status,0, cstack
  7481 ;; Tracked objects:
  7482 ;;		On entry : 0/0
  7483 ;;		On exit  : 0/0
  7484 ;;		Unchanged: 0/0
  7485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7486 ;;      Params:         0       4       0       0       0       0       0       0       0
  7487 ;;      Locals:         0       2       0       0       0       0       0       0       0
  7488 ;;      Temps:          0       4       0       0       0       0       0       0       0
  7489 ;;      Totals:         0      10       0       0       0       0       0       0       0
  7490 ;;Total ram usage:       10 bytes
  7491 ;; Hardware stack levels used:    1
  7492 ;; Hardware stack levels required when called:    4
  7493 ;; This function calls:
  7494 ;;		___ftpack
  7495 ;; This function is called by:
  7496 ;;		_floor
  7497 ;; This function uses a non-reentrant model
  7498 ;;
  7499                           
  7500                           	psect	text19
  7501  0036C2                     __ptext19:
  7502                           	opt stack 0
  7503  0036C2                     ___altoft:
  7504                           	opt stack 23
  7505                           
  7506                           ; BSR set to: 0
  7507                           ;incstack = 0
  7508  0036C2  0E00               	movlw	0
  7509  0036C4  0100               	movlb	0	; () banked
  7510  0036C6  6FA2               	movwf	___altoft@sign& (0+255),b
  7511  0036C8  0E8E               	movlw	142
  7512  0036CA  6FA1               	movwf	___altoft@exp& (0+255),b
  7513                           
  7514                           ; BSR set to: 0
  7515  0036CC  AF9C               	btfss	(___altoft@c+3)& (0+255),7,b
  7516  0036CE  D011               	goto	l355
  7517                           
  7518                           ; BSR set to: 0
  7519  0036D0  1F9C               	comf	(___altoft@c+3)& (0+255),f,b
  7520  0036D2  1F9B               	comf	(___altoft@c+2)& (0+255),f,b
  7521  0036D4  1F9A               	comf	(___altoft@c+1)& (0+255),f,b
  7522  0036D6  6D99               	negf	___altoft@c& (0+255),b
  7523  0036D8  0E00               	movlw	0
  7524  0036DA  239A               	addwfc	(___altoft@c+1)& (0+255),f,b
  7525  0036DC  239B               	addwfc	(___altoft@c+2)& (0+255),f,b
  7526  0036DE  239C               	addwfc	(___altoft@c+3)& (0+255),f,b
  7527                           
  7528                           ; BSR set to: 0
  7529  0036E0  0E01               	movlw	1
  7530  0036E2  6FA2               	movwf	___altoft@sign& (0+255),b
  7531                           
  7532                           ; BSR set to: 0
  7533  0036E4  D006               	goto	l355
  7534  0036E6                     
  7535                           ; BSR set to: 0
  7536                           
  7537                           ; BSR set to: 0
  7538  0036E6  90D8               	bcf	status,0,c
  7539  0036E8  339C               	rrcf	(___altoft@c+3)& (0+255),f,b
  7540  0036EA  339B               	rrcf	(___altoft@c+2)& (0+255),f,b
  7541  0036EC  339A               	rrcf	(___altoft@c+1)& (0+255),f,b
  7542  0036EE  3399               	rrcf	___altoft@c& (0+255),f,b
  7543  0036F0  2BA1               	incf	___altoft@exp& (0+255),f,b
  7544  0036F2                     l355:
  7545                           
  7546                           ; BSR set to: 0
  7547                           
  7548                           ; BSR set to: 0
  7549  0036F2  0E00               	movlw	0
  7550  0036F4  1599               	andwf	___altoft@c& (0+255),w,b
  7551  0036F6  6F9D               	movwf	??___altoft& (0+255),b
  7552  0036F8  0E00               	movlw	0
  7553  0036FA  159A               	andwf	(___altoft@c+1)& (0+255),w,b
  7554  0036FC  6F9E               	movwf	(??___altoft+1)& (0+255),b
  7555  0036FE  0E00               	movlw	0
  7556  003700  159B               	andwf	(___altoft@c+2)& (0+255),w,b
  7557  003702  6F9F               	movwf	(??___altoft+2)& (0+255),b
  7558  003704  0EFF               	movlw	255
  7559  003706  159C               	andwf	(___altoft@c+3)& (0+255),w,b
  7560  003708  6FA0               	movwf	(??___altoft+3)& (0+255),b
  7561  00370A  519D               	movf	??___altoft& (0+255),w,b
  7562  00370C  119E               	iorwf	(??___altoft+1)& (0+255),w,b
  7563  00370E  119F               	iorwf	(??___altoft+2)& (0+255),w,b
  7564  003710  11A0               	iorwf	(??___altoft+3)& (0+255),w,b
  7565  003712  A4D8               	btfss	status,2,c
  7566  003714  D7E8               	goto	l356
  7567                           
  7568                           ; BSR set to: 0
  7569                           
  7570                           ; BSR set to: 0
  7571  003716  C099  F060         	movff	___altoft@c,___ftpack@arg
  7572  00371A  C09A  F061         	movff	___altoft@c+1,___ftpack@arg+1
  7573  00371E  C09B  F062         	movff	___altoft@c+2,___ftpack@arg+2
  7574  003722  C0A1  F063         	movff	___altoft@exp,___ftpack@exp
  7575  003726  C0A2  F064         	movff	___altoft@sign,___ftpack@sign
  7576  00372A  EC5A  F019         	call	___ftpack	;wreg free
  7577  00372E  C060  F099         	movff	?___ftpack,?___altoft
  7578  003732  C061  F09A         	movff	?___ftpack+1,?___altoft+1
  7579  003736  C062  F09B         	movff	?___ftpack+2,?___altoft+2
  7580  00373A  0012               	return	
  7581  00373C                     __end_of___altoft:
  7582                           	opt stack 0
  7583                           tblptru	equ	0xFF8
  7584                           tblptrh	equ	0xFF7
  7585                           tblptrl	equ	0xFF6
  7586                           tablat	equ	0xFF5
  7587                           prodh	equ	0xFF4
  7588                           prodl	equ	0xFF3
  7589                           postinc0	equ	0xFEE
  7590                           wreg	equ	0xFE8
  7591                           indf2	equ	0xFDF
  7592                           postinc2	equ	0xFDE
  7593                           postdec2	equ	0xFDD
  7594                           fsr2h	equ	0xFDA
  7595                           fsr2l	equ	0xFD9
  7596                           status	equ	0xFD8
  7597                           
  7598 ;; *************** function _eval_poly *****************
  7599 ;; Defined at:
  7600 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
  7601 ;; Parameters:    Size  Location     Type
  7602 ;;  x               3   57[BANK0 ] float 
  7603 ;;  d               2   60[BANK0 ] PTR const 
  7604 ;;		 -> sin@coeff_a(15), sin@coeff_b(12), 
  7605 ;;  n               2   62[BANK0 ] int 
  7606 ;; Auto vars:     Size  Location     Type
  7607 ;;  res             3   66[BANK0 ] int 
  7608 ;; Return value:  Size  Location     Type
  7609 ;;                  3   57[BANK0 ] int 
  7610 ;; Registers used:
  7611 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7612 ;; Tracked objects:
  7613 ;;		On entry : 0/0
  7614 ;;		On exit  : 0/0
  7615 ;;		Unchanged: 0/0
  7616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7617 ;;      Params:         0       7       0       0       0       0       0       0       0
  7618 ;;      Locals:         0       3       0       0       0       0       0       0       0
  7619 ;;      Temps:          0       2       0       0       0       0       0       0       0
  7620 ;;      Totals:         0      12       0       0       0       0       0       0       0
  7621 ;;Total ram usage:       12 bytes
  7622 ;; Hardware stack levels used:    1
  7623 ;; Hardware stack levels required when called:    5
  7624 ;; This function calls:
  7625 ;;		___ftadd
  7626 ;;		___ftmul
  7627 ;;		___wmul
  7628 ;; This function is called by:
  7629 ;;		_sin
  7630 ;; This function uses a non-reentrant model
  7631 ;;
  7632                           
  7633                           	psect	text20
  7634  003126                     __ptext20:
  7635                           	opt stack 0
  7636  003126                     _eval_poly:
  7637                           	opt stack 23
  7638                           
  7639                           ;incstack = 0
  7640  003126  C09E  F06E         	movff	eval_poly@n,___wmul@multiplier
  7641  00312A  C09F  F06F         	movff	eval_poly@n+1,___wmul@multiplier+1
  7642  00312E  0E00               	movlw	0
  7643  003130  0100               	movlb	0	; () banked
  7644  003132  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7645  003134  0E03               	movlw	3
  7646  003136  6F70               	movwf	___wmul@multiplicand& (0+255),b
  7647  003138  EC96  F01C         	call	___wmul	;wreg free
  7648  00313C  C09C  F0A0         	movff	eval_poly@d,??_eval_poly
  7649  003140  C09D  F0A1         	movff	eval_poly@d+1,??_eval_poly+1
  7650  003144  0100               	movlb	0	; () banked
  7651  003146  516E               	movf	?___wmul& (0+255),w,b
  7652  003148  27A0               	addwf	??_eval_poly& (0+255),f,b
  7653  00314A  516F               	movf	(?___wmul+1)& (0+255),w,b
  7654  00314C  23A1               	addwfc	(??_eval_poly+1)& (0+255),f,b
  7655  00314E  C0A0  FFF6         	movff	??_eval_poly,tblptrl
  7656  003152  C0A1  FFF7         	movff	??_eval_poly+1,tblptrh
  7657  003156                     	if	0	;tblptru may be non-zero
  7658  003156                     	endif
  7659  003156                     	if	0	;tblptru may be non-zero
  7660  003156                     	endif
  7661  003156  0009               	tblrd		*+
  7662  003158  CFF5 F0A2          	movff	tablat,eval_poly@res
  7663  00315C  0009               	tblrd		*+
  7664  00315E  CFF5 F0A3          	movff	tablat,eval_poly@res+1
  7665  003162  000A               	tblrd		*-
  7666  003164  CFF5 F0A4          	movff	tablat,eval_poly@res+2
  7667  003168  D040               	goto	l912
  7668  00316A                     
  7669                           ; BSR set to: 0
  7670                           
  7671                           ; BSR set to: 0
  7672  00316A  C0A2  F077         	movff	eval_poly@res,___ftmul@f2
  7673  00316E  C0A3  F078         	movff	eval_poly@res+1,___ftmul@f2+1
  7674  003172  C0A4  F079         	movff	eval_poly@res+2,___ftmul@f2+2
  7675  003176  C099  F074         	movff	eval_poly@x,___ftmul@f1
  7676  00317A  C09A  F075         	movff	eval_poly@x+1,___ftmul@f1+1
  7677  00317E  C09B  F076         	movff	eval_poly@x+2,___ftmul@f1+2
  7678  003182  EC45  F016         	call	___ftmul	;wreg free
  7679  003186  C074  F08D         	movff	?___ftmul,___ftadd@f1
  7680  00318A  C075  F08E         	movff	?___ftmul+1,___ftadd@f1+1
  7681  00318E  C076  F08F         	movff	?___ftmul+2,___ftadd@f1+2
  7682  003192  0E00               	movlw	0
  7683  003194  0100               	movlb	0	; () banked
  7684  003196  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7685  003198  0E03               	movlw	3
  7686  00319A  6F70               	movwf	___wmul@multiplicand& (0+255),b
  7687  00319C  079E               	decf	eval_poly@n& (0+255),f,b
  7688  00319E  A0D8               	btfss	status,0,c
  7689  0031A0  079F               	decf	(eval_poly@n+1)& (0+255),f,b
  7690  0031A2  C09E  F06E         	movff	eval_poly@n,___wmul@multiplier
  7691  0031A6  C09F  F06F         	movff	eval_poly@n+1,___wmul@multiplier+1
  7692  0031AA  EC96  F01C         	call	___wmul	;wreg free
  7693  0031AE  C09C  F0A0         	movff	eval_poly@d,??_eval_poly
  7694  0031B2  C09D  F0A1         	movff	eval_poly@d+1,??_eval_poly+1
  7695  0031B6  0100               	movlb	0	; () banked
  7696  0031B8  516E               	movf	?___wmul& (0+255),w,b
  7697  0031BA  27A0               	addwf	??_eval_poly& (0+255),f,b
  7698  0031BC  516F               	movf	(?___wmul+1)& (0+255),w,b
  7699  0031BE  23A1               	addwfc	(??_eval_poly+1)& (0+255),f,b
  7700  0031C0  C0A0  FFF6         	movff	??_eval_poly,tblptrl
  7701  0031C4  C0A1  FFF7         	movff	??_eval_poly+1,tblptrh
  7702  0031C8                     	if	0	;tblptru may be non-zero
  7703  0031C8                     	endif
  7704  0031C8                     	if	0	;tblptru may be non-zero
  7705  0031C8                     	endif
  7706  0031C8  0009               	tblrd		*+
  7707  0031CA  CFF5 F090          	movff	tablat,___ftadd@f2
  7708  0031CE  0009               	tblrd		*+
  7709  0031D0  CFF5 F091          	movff	tablat,___ftadd@f2+1
  7710  0031D4  000A               	tblrd		*-
  7711  0031D6  CFF5 F092          	movff	tablat,___ftadd@f2+2
  7712  0031DA  ECA4  F010         	call	___ftadd	;wreg free
  7713  0031DE  C08D  F0A2         	movff	?___ftadd,eval_poly@res
  7714  0031E2  C08E  F0A3         	movff	?___ftadd+1,eval_poly@res+1
  7715  0031E6  C08F  F0A4         	movff	?___ftadd+2,eval_poly@res+2
  7716  0031EA                     l912:
  7717  0031EA  0100               	movlb	0	; () banked
  7718  0031EC  519E               	movf	eval_poly@n& (0+255),w,b
  7719  0031EE  119F               	iorwf	(eval_poly@n+1)& (0+255),w,b
  7720  0031F0  A4D8               	btfss	status,2,c
  7721  0031F2  D7BB               	goto	l913
  7722                           
  7723                           ; BSR set to: 0
  7724  0031F4  C0A2  F099         	movff	eval_poly@res,?_eval_poly
  7725  0031F8  C0A3  F09A         	movff	eval_poly@res+1,?_eval_poly+1
  7726  0031FC  C0A4  F09B         	movff	eval_poly@res+2,?_eval_poly+2
  7727                           
  7728                           ; BSR set to: 0
  7729  003200  0012               	return		;funcret
  7730  003202                     __end_of_eval_poly:
  7731                           	opt stack 0
  7732                           tblptru	equ	0xFF8
  7733                           tblptrh	equ	0xFF7
  7734                           tblptrl	equ	0xFF6
  7735                           tablat	equ	0xFF5
  7736                           prodh	equ	0xFF4
  7737                           prodl	equ	0xFF3
  7738                           postinc0	equ	0xFEE
  7739                           wreg	equ	0xFE8
  7740                           indf2	equ	0xFDF
  7741                           postinc2	equ	0xFDE
  7742                           postdec2	equ	0xFDD
  7743                           fsr2h	equ	0xFDA
  7744                           fsr2l	equ	0xFD9
  7745                           status	equ	0xFD8
  7746                           
  7747 ;; *************** function ___wmul *****************
  7748 ;; Defined at:
  7749 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  7750 ;; Parameters:    Size  Location     Type
  7751 ;;  multiplier      2   14[BANK0 ] unsigned int 
  7752 ;;  multiplicand    2   16[BANK0 ] unsigned int 
  7753 ;; Auto vars:     Size  Location     Type
  7754 ;;  product         2   18[BANK0 ] unsigned int 
  7755 ;; Return value:  Size  Location     Type
  7756 ;;                  2   14[BANK0 ] unsigned int 
  7757 ;; Registers used:
  7758 ;;		wreg, status,2, status,0, prodl, prodh
  7759 ;; Tracked objects:
  7760 ;;		On entry : 0/0
  7761 ;;		On exit  : 0/0
  7762 ;;		Unchanged: 0/0
  7763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7764 ;;      Params:         0       4       0       0       0       0       0       0       0
  7765 ;;      Locals:         0       2       0       0       0       0       0       0       0
  7766 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7767 ;;      Totals:         0       6       0       0       0       0       0       0       0
  7768 ;;Total ram usage:        6 bytes
  7769 ;; Hardware stack levels used:    1
  7770 ;; Hardware stack levels required when called:    3
  7771 ;; This function calls:
  7772 ;;		Nothing
  7773 ;; This function is called by:
  7774 ;;		_main
  7775 ;;		_fround
  7776 ;;		_scale
  7777 ;;		_sprintf
  7778 ;;		_eval_poly
  7779 ;; This function uses a non-reentrant model
  7780 ;;
  7781                           
  7782                           	psect	text21
  7783  00392C                     __ptext21:
  7784                           	opt stack 0
  7785  00392C                     ___wmul:
  7786                           	opt stack 25
  7787                           
  7788                           ; BSR set to: 0
  7789                           ;incstack = 0
  7790  00392C  0100               	movlb	0	; () banked
  7791  00392E  516E               	movf	___wmul@multiplier& (0+255),w,b
  7792  003930  0370               	mulwf	___wmul@multiplicand& (0+255),b
  7793  003932  CFF3 F072          	movff	prodl,___wmul@product
  7794  003936  CFF4 F073          	movff	prodh,___wmul@product+1
  7795  00393A  516E               	movf	___wmul@multiplier& (0+255),w,b
  7796  00393C  0371               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  7797  00393E  50F3               	movf	prodl,w,c
  7798  003940  2773               	addwf	(___wmul@product+1)& (0+255),f,b
  7799  003942  516F               	movf	(___wmul@multiplier+1)& (0+255),w,b
  7800  003944  0370               	mulwf	___wmul@multiplicand& (0+255),b
  7801  003946  50F3               	movf	prodl,w,c
  7802  003948  2773               	addwf	(___wmul@product+1)& (0+255),f,b
  7803                           
  7804                           ; BSR set to: 0
  7805  00394A  C072  F06E         	movff	___wmul@product,?___wmul
  7806  00394E  C073  F06F         	movff	___wmul@product+1,?___wmul+1
  7807  003952  0012               	return	
  7808  003954                     __end_of___wmul:
  7809                           	opt stack 0
  7810                           tblptru	equ	0xFF8
  7811                           tblptrh	equ	0xFF7
  7812                           tblptrl	equ	0xFF6
  7813                           tablat	equ	0xFF5
  7814                           prodh	equ	0xFF4
  7815                           prodl	equ	0xFF3
  7816                           postinc0	equ	0xFEE
  7817                           wreg	equ	0xFE8
  7818                           indf2	equ	0xFDF
  7819                           postinc2	equ	0xFDE
  7820                           postdec2	equ	0xFDD
  7821                           fsr2h	equ	0xFDA
  7822                           fsr2l	equ	0xFD9
  7823                           status	equ	0xFD8
  7824                           
  7825 ;; *************** function ___ftmul *****************
  7826 ;; Defined at:
  7827 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  7828 ;; Parameters:    Size  Location     Type
  7829 ;;  f1              3   20[BANK0 ] float 
  7830 ;;  f2              3   23[BANK0 ] float 
  7831 ;; Auto vars:     Size  Location     Type
  7832 ;;  f3_as_produc    3   30[BANK0 ] unsigned um
  7833 ;;  sign            1   34[BANK0 ] unsigned char 
  7834 ;;  cntr            1   33[BANK0 ] unsigned char 
  7835 ;;  exp             1   29[BANK0 ] unsigned char 
  7836 ;; Return value:  Size  Location     Type
  7837 ;;                  3   20[BANK0 ] float 
  7838 ;; Registers used:
  7839 ;;		wreg, status,2, status,0, cstack
  7840 ;; Tracked objects:
  7841 ;;		On entry : 0/0
  7842 ;;		On exit  : 0/0
  7843 ;;		Unchanged: 0/0
  7844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7845 ;;      Params:         0       6       0       0       0       0       0       0       0
  7846 ;;      Locals:         0       6       0       0       0       0       0       0       0
  7847 ;;      Temps:          0       3       0       0       0       0       0       0       0
  7848 ;;      Totals:         0      15       0       0       0       0       0       0       0
  7849 ;;Total ram usage:       15 bytes
  7850 ;; Hardware stack levels used:    1
  7851 ;; Hardware stack levels required when called:    4
  7852 ;; This function calls:
  7853 ;;		___ftpack
  7854 ;; This function is called by:
  7855 ;;		_main
  7856 ;;		_fround
  7857 ;;		_scale
  7858 ;;		_sprintf
  7859 ;;		_sin
  7860 ;;		_sqrt
  7861 ;;		_eval_poly
  7862 ;; This function uses a non-reentrant model
  7863 ;;
  7864                           
  7865                           	psect	text22
  7866  002C8A                     __ptext22:
  7867                           	opt stack 0
  7868  002C8A                     ___ftmul:
  7869                           	opt stack 25
  7870                           
  7871                           ; BSR set to: 0
  7872                           ;incstack = 0
  7873  002C8A  C076  F07A         	movff	___ftmul@f1+2,??___ftmul
  7874  002C8E  0100               	movlb	0	; () banked
  7875  002C90  6B7B               	clrf	(??___ftmul+1)& (0+255),b
  7876  002C92  6B7C               	clrf	(??___ftmul+2)& (0+255),b
  7877  002C94  3575               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  7878  002C96  377A               	rlcf	??___ftmul& (0+255),f,b
  7879  002C98  E301               	bnc	u2441
  7880  002C9A  817B               	bsf	(??___ftmul+1)& (0+255),0,b
  7881  002C9C                     u2441:
  7882  002C9C  517A               	movf	??___ftmul& (0+255),w,b
  7883  002C9E  6F7D               	movwf	___ftmul@exp& (0+255),b
  7884  002CA0  517D               	movf	___ftmul@exp& (0+255),w,b
  7885  002CA2  A4D8               	btfss	status,2,c
  7886  002CA4  D007               	goto	l604
  7887                           
  7888                           ; BSR set to: 0
  7889  002CA6  0E00               	movlw	0
  7890  002CA8  6F74               	movwf	?___ftmul& (0+255),b
  7891  002CAA  0E00               	movlw	0
  7892  002CAC  6F75               	movwf	(?___ftmul+1)& (0+255),b
  7893  002CAE  0E00               	movlw	0
  7894  002CB0  6F76               	movwf	(?___ftmul+2)& (0+255),b
  7895                           
  7896                           ; BSR set to: 0
  7897  002CB2  0012               	return	
  7898  002CB4                     l604:
  7899                           
  7900                           ; BSR set to: 0
  7901                           
  7902                           ; BSR set to: 0
  7903  002CB4  C079  F07A         	movff	___ftmul@f2+2,??___ftmul
  7904  002CB8  6B7B               	clrf	(??___ftmul+1)& (0+255),b
  7905  002CBA  6B7C               	clrf	(??___ftmul+2)& (0+255),b
  7906  002CBC  3578               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  7907  002CBE  377A               	rlcf	??___ftmul& (0+255),f,b
  7908  002CC0  E301               	bnc	u2461
  7909  002CC2  817B               	bsf	(??___ftmul+1)& (0+255),0,b
  7910  002CC4                     u2461:
  7911  002CC4  517A               	movf	??___ftmul& (0+255),w,b
  7912  002CC6  6F82               	movwf	___ftmul@sign& (0+255),b
  7913  002CC8  5182               	movf	___ftmul@sign& (0+255),w,b
  7914  002CCA  A4D8               	btfss	status,2,c
  7915  002CCC  D007               	goto	l606
  7916                           
  7917                           ; BSR set to: 0
  7918  002CCE  0E00               	movlw	0
  7919  002CD0  6F74               	movwf	?___ftmul& (0+255),b
  7920  002CD2  0E00               	movlw	0
  7921  002CD4  6F75               	movwf	(?___ftmul+1)& (0+255),b
  7922  002CD6  0E00               	movlw	0
  7923  002CD8  6F76               	movwf	(?___ftmul+2)& (0+255),b
  7924                           
  7925                           ; BSR set to: 0
  7926  002CDA  0012               	return	
  7927  002CDC                     l606:
  7928                           
  7929                           ; BSR set to: 0
  7930                           
  7931                           ; BSR set to: 0
  7932  002CDC  5182               	movf	___ftmul@sign& (0+255),w,b
  7933  002CDE  0F7B               	addlw	123
  7934  002CE0  277D               	addwf	___ftmul@exp& (0+255),f,b
  7935                           
  7936                           ; BSR set to: 0
  7937  002CE2  C076  F082         	movff	___ftmul@f1+2,___ftmul@sign
  7938  002CE6  5179               	movf	(___ftmul@f2+2)& (0+255),w,b
  7939  002CE8  1B82               	xorwf	___ftmul@sign& (0+255),f,b
  7940  002CEA  0E80               	movlw	128
  7941  002CEC  1782               	andwf	___ftmul@sign& (0+255),f,b
  7942                           
  7943                           ; BSR set to: 0
  7944  002CEE  8F75               	bsf	(___ftmul@f1+1)& (0+255),7,b
  7945                           
  7946                           ; BSR set to: 0
  7947  002CF0  8F78               	bsf	(___ftmul@f2+1)& (0+255),7,b
  7948                           
  7949                           ; BSR set to: 0
  7950  002CF2  0EFF               	movlw	255
  7951  002CF4  1777               	andwf	___ftmul@f2& (0+255),f,b
  7952  002CF6  0EFF               	movlw	255
  7953  002CF8  1778               	andwf	(___ftmul@f2+1)& (0+255),f,b
  7954  002CFA  0E00               	movlw	0
  7955  002CFC  1779               	andwf	(___ftmul@f2+2)& (0+255),f,b
  7956                           
  7957                           ; BSR set to: 0
  7958  002CFE  0E00               	movlw	0
  7959  002D00  6F7E               	movwf	___ftmul@f3_as_product& (0+255),b
  7960  002D02  0E00               	movlw	0
  7961  002D04  6F7F               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  7962  002D06  0E00               	movlw	0
  7963  002D08  6F80               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  7964                           
  7965                           ; BSR set to: 0
  7966  002D0A  0E07               	movlw	7
  7967  002D0C  6F81               	movwf	___ftmul@cntr& (0+255),b
  7968  002D0E                     
  7969                           ; BSR set to: 0
  7970                           
  7971                           ; BSR set to: 0
  7972  002D0E  A174               	btfss	___ftmul@f1& (0+255),0,b
  7973  002D10  D006               	goto	l608
  7974                           
  7975                           ; BSR set to: 0
  7976  002D12  5177               	movf	___ftmul@f2& (0+255),w,b
  7977  002D14  277E               	addwf	___ftmul@f3_as_product& (0+255),f,b
  7978  002D16  5178               	movf	(___ftmul@f2+1)& (0+255),w,b
  7979  002D18  237F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  7980  002D1A  5179               	movf	(___ftmul@f2+2)& (0+255),w,b
  7981  002D1C  2380               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  7982  002D1E                     l608:
  7983                           
  7984                           ; BSR set to: 0
  7985                           
  7986                           ; BSR set to: 0
  7987  002D1E  90D8               	bcf	status,0,c
  7988  002D20  3376               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  7989  002D22  3375               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  7990  002D24  3374               	rrcf	___ftmul@f1& (0+255),f,b
  7991  002D26  90D8               	bcf	status,0,c
  7992  002D28  3777               	rlcf	___ftmul@f2& (0+255),f,b
  7993  002D2A  3778               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  7994  002D2C  3779               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  7995                           
  7996                           ; BSR set to: 0
  7997  002D2E  2F81               	decfsz	___ftmul@cntr& (0+255),f,b
  7998  002D30  D7EE               	goto	l607
  7999                           
  8000                           ; BSR set to: 0
  8001                           
  8002                           ; BSR set to: 0
  8003  002D32  0E09               	movlw	9
  8004  002D34  6F81               	movwf	___ftmul@cntr& (0+255),b
  8005  002D36                     
  8006                           ; BSR set to: 0
  8007                           
  8008                           ; BSR set to: 0
  8009  002D36  A174               	btfss	___ftmul@f1& (0+255),0,b
  8010  002D38  D006               	goto	l611
  8011                           
  8012                           ; BSR set to: 0
  8013  002D3A  5177               	movf	___ftmul@f2& (0+255),w,b
  8014  002D3C  277E               	addwf	___ftmul@f3_as_product& (0+255),f,b
  8015  002D3E  5178               	movf	(___ftmul@f2+1)& (0+255),w,b
  8016  002D40  237F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  8017  002D42  5179               	movf	(___ftmul@f2+2)& (0+255),w,b
  8018  002D44  2380               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  8019  002D46                     l611:
  8020                           
  8021                           ; BSR set to: 0
  8022                           
  8023                           ; BSR set to: 0
  8024  002D46  90D8               	bcf	status,0,c
  8025  002D48  3376               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  8026  002D4A  3375               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  8027  002D4C  3374               	rrcf	___ftmul@f1& (0+255),f,b
  8028  002D4E  90D8               	bcf	status,0,c
  8029  002D50  3380               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  8030  002D52  337F               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  8031  002D54  337E               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  8032                           
  8033                           ; BSR set to: 0
  8034  002D56  2F81               	decfsz	___ftmul@cntr& (0+255),f,b
  8035  002D58  D7EE               	goto	l610
  8036                           
  8037                           ; BSR set to: 0
  8038                           
  8039                           ; BSR set to: 0
  8040  002D5A  C07E  F060         	movff	___ftmul@f3_as_product,___ftpack@arg
  8041  002D5E  C07F  F061         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  8042  002D62  C080  F062         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  8043  002D66  C07D  F063         	movff	___ftmul@exp,___ftpack@exp
  8044  002D6A  C082  F064         	movff	___ftmul@sign,___ftpack@sign
  8045  002D6E  EC5A  F019         	call	___ftpack	;wreg free
  8046  002D72  C060  F074         	movff	?___ftpack,?___ftmul
  8047  002D76  C061  F075         	movff	?___ftpack+1,?___ftmul+1
  8048  002D7A  C062  F076         	movff	?___ftpack+2,?___ftmul+2
  8049  002D7E  0012               	return	
  8050  002D80                     __end_of___ftmul:
  8051                           	opt stack 0
  8052                           tblptru	equ	0xFF8
  8053                           tblptrh	equ	0xFF7
  8054                           tblptrl	equ	0xFF6
  8055                           tablat	equ	0xFF5
  8056                           prodh	equ	0xFF4
  8057                           prodl	equ	0xFF3
  8058                           postinc0	equ	0xFEE
  8059                           wreg	equ	0xFE8
  8060                           indf2	equ	0xFDF
  8061                           postinc2	equ	0xFDE
  8062                           postdec2	equ	0xFDD
  8063                           fsr2h	equ	0xFDA
  8064                           fsr2l	equ	0xFD9
  8065                           status	equ	0xFD8
  8066                           
  8067 ;; *************** function ___ftsub *****************
  8068 ;; Defined at:
  8069 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  8070 ;; Parameters:    Size  Location     Type
  8071 ;;  f1              3   75[BANK0 ] float 
  8072 ;;  f2              3   78[BANK0 ] float 
  8073 ;; Auto vars:     Size  Location     Type
  8074 ;;		None
  8075 ;; Return value:  Size  Location     Type
  8076 ;;                  3   75[BANK0 ] float 
  8077 ;; Registers used:
  8078 ;;		wreg, status,2, status,0, cstack
  8079 ;; Tracked objects:
  8080 ;;		On entry : 0/0
  8081 ;;		On exit  : 0/0
  8082 ;;		Unchanged: 0/0
  8083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8084 ;;      Params:         0       6       0       0       0       0       0       0       0
  8085 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8086 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8087 ;;      Totals:         0       6       0       0       0       0       0       0       0
  8088 ;;Total ram usage:        6 bytes
  8089 ;; Hardware stack levels used:    1
  8090 ;; Hardware stack levels required when called:    5
  8091 ;; This function calls:
  8092 ;;		___ftadd
  8093 ;; This function is called by:
  8094 ;;		_sprintf
  8095 ;;		_sin
  8096 ;;		_sqrt
  8097 ;; This function uses a non-reentrant model
  8098 ;;
  8099                           
  8100                           	psect	text23
  8101  0038B8                     __ptext23:
  8102                           	opt stack 0
  8103  0038B8                     ___ftsub:
  8104                           	opt stack 24
  8105                           
  8106                           ;incstack = 0
  8107  0038B8  0100               	movlb	0	; () banked
  8108  0038BA  51AE               	movf	___ftsub@f2& (0+255),w,b
  8109  0038BC  11AF               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  8110  0038BE  11B0               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  8111  0038C0  B4D8               	btfsc	status,2,c
  8112  0038C2  D006               	goto	l621
  8113                           
  8114                           ; BSR set to: 0
  8115  0038C4  0E00               	movlw	0
  8116  0038C6  1BAE               	xorwf	___ftsub@f2& (0+255),f,b
  8117  0038C8  0E00               	movlw	0
  8118  0038CA  1BAF               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  8119  0038CC  0E80               	movlw	128
  8120  0038CE  1BB0               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  8121  0038D0                     l621:
  8122                           
  8123                           ; BSR set to: 0
  8124                           
  8125                           ; BSR set to: 0
  8126  0038D0  C0AB  F08D         	movff	___ftsub@f1,___ftadd@f1
  8127  0038D4  C0AC  F08E         	movff	___ftsub@f1+1,___ftadd@f1+1
  8128  0038D8  C0AD  F08F         	movff	___ftsub@f1+2,___ftadd@f1+2
  8129  0038DC  C0AE  F090         	movff	___ftsub@f2,___ftadd@f2
  8130  0038E0  C0AF  F091         	movff	___ftsub@f2+1,___ftadd@f2+1
  8131  0038E4  C0B0  F092         	movff	___ftsub@f2+2,___ftadd@f2+2
  8132  0038E8  ECA4  F010         	call	___ftadd	;wreg free
  8133  0038EC  C08D  F0AB         	movff	?___ftadd,?___ftsub
  8134  0038F0  C08E  F0AC         	movff	?___ftadd+1,?___ftsub+1
  8135  0038F4  C08F  F0AD         	movff	?___ftadd+2,?___ftsub+2
  8136  0038F8  0012               	return	
  8137  0038FA                     __end_of___ftsub:
  8138                           	opt stack 0
  8139                           tblptru	equ	0xFF8
  8140                           tblptrh	equ	0xFF7
  8141                           tblptrl	equ	0xFF6
  8142                           tablat	equ	0xFF5
  8143                           prodh	equ	0xFF4
  8144                           prodl	equ	0xFF3
  8145                           postinc0	equ	0xFEE
  8146                           wreg	equ	0xFE8
  8147                           indf2	equ	0xFDF
  8148                           postinc2	equ	0xFDE
  8149                           postdec2	equ	0xFDD
  8150                           fsr2h	equ	0xFDA
  8151                           fsr2l	equ	0xFD9
  8152                           status	equ	0xFD8
  8153                           
  8154 ;; *************** function ___ftadd *****************
  8155 ;; Defined at:
  8156 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  8157 ;; Parameters:    Size  Location     Type
  8158 ;;  f1              3   45[BANK0 ] float 
  8159 ;;  f2              3   48[BANK0 ] float 
  8160 ;; Auto vars:     Size  Location     Type
  8161 ;;  exp1            1   56[BANK0 ] unsigned char 
  8162 ;;  exp2            1   55[BANK0 ] unsigned char 
  8163 ;;  sign            1   54[BANK0 ] unsigned char 
  8164 ;; Return value:  Size  Location     Type
  8165 ;;                  3   45[BANK0 ] float 
  8166 ;; Registers used:
  8167 ;;		wreg, status,2, status,0, cstack
  8168 ;; Tracked objects:
  8169 ;;		On entry : 0/0
  8170 ;;		On exit  : 0/0
  8171 ;;		Unchanged: 0/0
  8172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8173 ;;      Params:         0       6       0       0       0       0       0       0       0
  8174 ;;      Locals:         0       3       0       0       0       0       0       0       0
  8175 ;;      Temps:          0       3       0       0       0       0       0       0       0
  8176 ;;      Totals:         0      12       0       0       0       0       0       0       0
  8177 ;;Total ram usage:       12 bytes
  8178 ;; Hardware stack levels used:    1
  8179 ;; Hardware stack levels required when called:    4
  8180 ;; This function calls:
  8181 ;;		___ftpack
  8182 ;; This function is called by:
  8183 ;;		_main
  8184 ;;		_sprintf
  8185 ;;		_cos
  8186 ;;		___ftsub
  8187 ;;		_sin
  8188 ;;		_eval_poly
  8189 ;;		_floor
  8190 ;; This function uses a non-reentrant model
  8191 ;;
  8192                           
  8193                           	psect	text24
  8194  002148                     __ptext24:
  8195                           	opt stack 0
  8196  002148                     ___ftadd:
  8197                           	opt stack 24
  8198                           
  8199                           ;incstack = 0
  8200  002148  C08F  F093         	movff	___ftadd@f1+2,??___ftadd
  8201  00214C  0100               	movlb	0	; () banked
  8202  00214E  6B94               	clrf	(??___ftadd+1)& (0+255),b
  8203  002150  6B95               	clrf	(??___ftadd+2)& (0+255),b
  8204  002152  358E               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  8205  002154  3793               	rlcf	??___ftadd& (0+255),f,b
  8206  002156  E301               	bnc	u2231
  8207  002158  8194               	bsf	(??___ftadd+1)& (0+255),0,b
  8208  00215A                     u2231:
  8209  00215A  5193               	movf	??___ftadd& (0+255),w,b
  8210  00215C  6F98               	movwf	___ftadd@exp1& (0+255),b
  8211  00215E  C092  F093         	movff	___ftadd@f2+2,??___ftadd
  8212  002162  6B94               	clrf	(??___ftadd+1)& (0+255),b
  8213  002164  6B95               	clrf	(??___ftadd+2)& (0+255),b
  8214  002166  3591               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  8215  002168  3793               	rlcf	??___ftadd& (0+255),f,b
  8216  00216A  E301               	bnc	u2241
  8217  00216C  8194               	bsf	(??___ftadd+1)& (0+255),0,b
  8218  00216E                     u2241:
  8219  00216E  5193               	movf	??___ftadd& (0+255),w,b
  8220  002170  6F97               	movwf	___ftadd@exp2& (0+255),b
  8221                           
  8222                           ; BSR set to: 0
  8223  002172  5198               	movf	___ftadd@exp1& (0+255),w,b
  8224  002174  B4D8               	btfsc	status,2,c
  8225  002176  D00B               	goto	u2270
  8226                           
  8227                           ; BSR set to: 0
  8228  002178  5197               	movf	___ftadd@exp2& (0+255),w,b
  8229  00217A  5D98               	subwf	___ftadd@exp1& (0+255),w,b
  8230  00217C  B0D8               	btfsc	status,0,c
  8231  00217E  D00E               	goto	l539
  8232                           
  8233                           ; BSR set to: 0
  8234  002180  5198               	movf	___ftadd@exp1& (0+255),w,b
  8235  002182  0800               	sublw	0
  8236  002184  2597               	addwf	___ftadd@exp2& (0+255),w,b
  8237  002186  6F93               	movwf	??___ftadd& (0+255),b
  8238  002188  0E18               	movlw	24
  8239  00218A  6593               	cpfsgt	??___ftadd& (0+255),b
  8240  00218C  D007               	goto	l539
  8241  00218E                     u2270:
  8242                           
  8243                           ; BSR set to: 0
  8244  00218E  C090  F08D         	movff	___ftadd@f2,?___ftadd
  8245  002192  C091  F08E         	movff	___ftadd@f2+1,?___ftadd+1
  8246  002196  C092  F08F         	movff	___ftadd@f2+2,?___ftadd+2
  8247  00219A  0012               	return	
  8248  00219C                     l539:
  8249                           
  8250                           ; BSR set to: 0
  8251                           
  8252                           ; BSR set to: 0
  8253  00219C  5197               	movf	___ftadd@exp2& (0+255),w,b
  8254  00219E  B4D8               	btfsc	status,2,c
  8255  0021A0  D00B               	goto	u2300
  8256                           
  8257                           ; BSR set to: 0
  8258  0021A2  5198               	movf	___ftadd@exp1& (0+255),w,b
  8259  0021A4  5D97               	subwf	___ftadd@exp2& (0+255),w,b
  8260  0021A6  B0D8               	btfsc	status,0,c
  8261  0021A8  D00E               	goto	l543
  8262                           
  8263                           ; BSR set to: 0
  8264  0021AA  5197               	movf	___ftadd@exp2& (0+255),w,b
  8265  0021AC  0800               	sublw	0
  8266  0021AE  2598               	addwf	___ftadd@exp1& (0+255),w,b
  8267  0021B0  6F93               	movwf	??___ftadd& (0+255),b
  8268  0021B2  0E18               	movlw	24
  8269  0021B4  6593               	cpfsgt	??___ftadd& (0+255),b
  8270  0021B6  D007               	goto	l543
  8271  0021B8                     u2300:
  8272                           
  8273                           ; BSR set to: 0
  8274  0021B8  C08D  F08D         	movff	___ftadd@f1,?___ftadd
  8275  0021BC  C08E  F08E         	movff	___ftadd@f1+1,?___ftadd+1
  8276  0021C0  C08F  F08F         	movff	___ftadd@f1+2,?___ftadd+2
  8277  0021C4  0012               	return	
  8278  0021C6                     l543:
  8279                           
  8280                           ; BSR set to: 0
  8281                           
  8282                           ; BSR set to: 0
  8283  0021C6  0E06               	movlw	6
  8284  0021C8  6F96               	movwf	___ftadd@sign& (0+255),b
  8285                           
  8286                           ; BSR set to: 0
  8287  0021CA  BF8F               	btfsc	(___ftadd@f1+2)& (0+255),7,b
  8288                           
  8289                           ; BSR set to: 0
  8290  0021CC  8F96               	bsf	___ftadd@sign& (0+255),7,b
  8291                           
  8292                           ; BSR set to: 0
  8293                           
  8294                           ; BSR set to: 0
  8295  0021CE  BF92               	btfsc	(___ftadd@f2+2)& (0+255),7,b
  8296                           
  8297                           ; BSR set to: 0
  8298  0021D0  8D96               	bsf	___ftadd@sign& (0+255),6,b
  8299                           
  8300                           ; BSR set to: 0
  8301  0021D2  8F8E               	bsf	(___ftadd@f1+1)& (0+255),7,b
  8302                           
  8303                           ; BSR set to: 0
  8304  0021D4  0EFF               	movlw	255
  8305  0021D6  178D               	andwf	___ftadd@f1& (0+255),f,b
  8306  0021D8  0EFF               	movlw	255
  8307  0021DA  178E               	andwf	(___ftadd@f1+1)& (0+255),f,b
  8308  0021DC  0E00               	movlw	0
  8309  0021DE  178F               	andwf	(___ftadd@f1+2)& (0+255),f,b
  8310  0021E0  8F91               	bsf	(___ftadd@f2+1)& (0+255),7,b
  8311                           
  8312                           ; BSR set to: 0
  8313  0021E2  0EFF               	movlw	255
  8314  0021E4  1790               	andwf	___ftadd@f2& (0+255),f,b
  8315  0021E6  0EFF               	movlw	255
  8316  0021E8  1791               	andwf	(___ftadd@f2+1)& (0+255),f,b
  8317  0021EA  0E00               	movlw	0
  8318  0021EC  1792               	andwf	(___ftadd@f2+2)& (0+255),f,b
  8319                           
  8320                           ; BSR set to: 0
  8321  0021EE  5197               	movf	___ftadd@exp2& (0+255),w,b
  8322  0021F0  5D98               	subwf	___ftadd@exp1& (0+255),w,b
  8323  0021F2  B0D8               	btfsc	status,0,c
  8324  0021F4  D01B               	goto	l548
  8325  0021F6                     u2330:
  8326                           
  8327                           ; BSR set to: 0
  8328                           
  8329                           ; BSR set to: 0
  8330  0021F6  90D8               	bcf	status,0,c
  8331  0021F8  3790               	rlcf	___ftadd@f2& (0+255),f,b
  8332  0021FA  3791               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  8333  0021FC  3792               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  8334  0021FE  0797               	decf	___ftadd@exp2& (0+255),f,b
  8335                           
  8336                           ; BSR set to: 0
  8337  002200  5198               	movf	___ftadd@exp1& (0+255),w,b
  8338  002202  1997               	xorwf	___ftadd@exp2& (0+255),w,b
  8339  002204  B4D8               	btfsc	status,2,c
  8340  002206  D00D               	goto	l553
  8341                           
  8342                           ; BSR set to: 0
  8343  002208  0796               	decf	___ftadd@sign& (0+255),f,b
  8344  00220A  C096  F093         	movff	___ftadd@sign,??___ftadd
  8345  00220E  0E07               	movlw	7
  8346  002210  1793               	andwf	??___ftadd& (0+255),f,b
  8347  002212  B4D8               	btfsc	status,2,c
  8348  002214  D006               	goto	l553
  8349  002216  D7EF               	goto	u2330
  8350  002218                     
  8351                           ; BSR set to: 0
  8352                           
  8353                           ; BSR set to: 0
  8354  002218  90D8               	bcf	status,0,c
  8355  00221A  338F               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  8356  00221C  338E               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  8357  00221E  338D               	rrcf	___ftadd@f1& (0+255),f,b
  8358  002220  2B98               	incf	___ftadd@exp1& (0+255),f,b
  8359  002222                     l553:
  8360                           
  8361                           ; BSR set to: 0
  8362                           
  8363                           ; BSR set to: 0
  8364  002222  5197               	movf	___ftadd@exp2& (0+255),w,b
  8365  002224  1998               	xorwf	___ftadd@exp1& (0+255),w,b
  8366  002226  B4D8               	btfsc	status,2,c
  8367  002228  D01F               	goto	u2400
  8368  00222A  D7F6               	goto	l554
  8369  00222C                     l548:
  8370                           
  8371                           ; BSR set to: 0
  8372                           
  8373                           ; BSR set to: 0
  8374  00222C  5198               	movf	___ftadd@exp1& (0+255),w,b
  8375  00222E  5D97               	subwf	___ftadd@exp2& (0+255),w,b
  8376  002230  B0D8               	btfsc	status,0,c
  8377  002232  D01A               	goto	u2400
  8378  002234                     u2370:
  8379                           
  8380                           ; BSR set to: 0
  8381                           
  8382                           ; BSR set to: 0
  8383  002234  90D8               	bcf	status,0,c
  8384  002236  378D               	rlcf	___ftadd@f1& (0+255),f,b
  8385  002238  378E               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  8386  00223A  378F               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  8387  00223C  0798               	decf	___ftadd@exp1& (0+255),f,b
  8388                           
  8389                           ; BSR set to: 0
  8390  00223E  5198               	movf	___ftadd@exp1& (0+255),w,b
  8391  002240  1997               	xorwf	___ftadd@exp2& (0+255),w,b
  8392  002242  B4D8               	btfsc	status,2,c
  8393  002244  D00D               	goto	l562
  8394                           
  8395                           ; BSR set to: 0
  8396  002246  0796               	decf	___ftadd@sign& (0+255),f,b
  8397  002248  C096  F093         	movff	___ftadd@sign,??___ftadd
  8398  00224C  0E07               	movlw	7
  8399  00224E  1793               	andwf	??___ftadd& (0+255),f,b
  8400  002250  B4D8               	btfsc	status,2,c
  8401  002252  D006               	goto	l562
  8402  002254  D7EF               	goto	u2370
  8403  002256                     
  8404                           ; BSR set to: 0
  8405                           
  8406                           ; BSR set to: 0
  8407  002256  90D8               	bcf	status,0,c
  8408  002258  3392               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  8409  00225A  3391               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  8410  00225C  3390               	rrcf	___ftadd@f2& (0+255),f,b
  8411  00225E  2B97               	incf	___ftadd@exp2& (0+255),f,b
  8412  002260                     l562:
  8413                           
  8414                           ; BSR set to: 0
  8415                           
  8416                           ; BSR set to: 0
  8417  002260  5197               	movf	___ftadd@exp2& (0+255),w,b
  8418  002262  1998               	xorwf	___ftadd@exp1& (0+255),w,b
  8419  002264  A4D8               	btfss	status,2,c
  8420  002266  D7F7               	goto	l563
  8421  002268                     u2400:
  8422                           
  8423                           ; BSR set to: 0
  8424                           
  8425                           ; BSR set to: 0
  8426                           
  8427                           ; BSR set to: 0
  8428  002268  AF96               	btfss	___ftadd@sign& (0+255),7,b
  8429  00226A  D00C               	goto	l565
  8430                           
  8431                           ; BSR set to: 0
  8432  00226C  0EFF               	movlw	255
  8433  00226E  1B8D               	xorwf	___ftadd@f1& (0+255),f,b
  8434  002270  0EFF               	movlw	255
  8435  002272  1B8E               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  8436  002274  0EFF               	movlw	255
  8437  002276  1B8F               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  8438  002278  0E01               	movlw	1
  8439  00227A  278D               	addwf	___ftadd@f1& (0+255),f,b
  8440  00227C  0E00               	movlw	0
  8441  00227E  238E               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  8442  002280  0E00               	movlw	0
  8443  002282  238F               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  8444  002284                     l565:
  8445                           
  8446                           ; BSR set to: 0
  8447  002284  AD96               	btfss	___ftadd@sign& (0+255),6,b
  8448  002286  D00C               	goto	l566
  8449                           
  8450                           ; BSR set to: 0
  8451  002288  0EFF               	movlw	255
  8452  00228A  1B90               	xorwf	___ftadd@f2& (0+255),f,b
  8453  00228C  0EFF               	movlw	255
  8454  00228E  1B91               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  8455  002290  0EFF               	movlw	255
  8456  002292  1B92               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  8457  002294  0E01               	movlw	1
  8458  002296  2790               	addwf	___ftadd@f2& (0+255),f,b
  8459  002298  0E00               	movlw	0
  8460  00229A  2391               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8461  00229C  0E00               	movlw	0
  8462  00229E  2392               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8463  0022A0                     l566:
  8464                           
  8465                           ; BSR set to: 0
  8466                           
  8467                           ; BSR set to: 0
  8468  0022A0  0E00               	movlw	0
  8469  0022A2  6F96               	movwf	___ftadd@sign& (0+255),b
  8470                           
  8471                           ; BSR set to: 0
  8472  0022A4  518D               	movf	___ftadd@f1& (0+255),w,b
  8473  0022A6  2790               	addwf	___ftadd@f2& (0+255),f,b
  8474  0022A8  518E               	movf	(___ftadd@f1+1)& (0+255),w,b
  8475  0022AA  2391               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8476  0022AC  518F               	movf	(___ftadd@f1+2)& (0+255),w,b
  8477  0022AE  2392               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8478                           
  8479                           ; BSR set to: 0
  8480  0022B0  AF92               	btfss	(___ftadd@f2+2)& (0+255),7,b
  8481  0022B2  D00E               	goto	l567
  8482                           
  8483                           ; BSR set to: 0
  8484  0022B4  0EFF               	movlw	255
  8485  0022B6  1B90               	xorwf	___ftadd@f2& (0+255),f,b
  8486  0022B8  0EFF               	movlw	255
  8487  0022BA  1B91               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  8488  0022BC  0EFF               	movlw	255
  8489  0022BE  1B92               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  8490  0022C0  0E01               	movlw	1
  8491  0022C2  2790               	addwf	___ftadd@f2& (0+255),f,b
  8492  0022C4  0E00               	movlw	0
  8493  0022C6  2391               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8494  0022C8  0E00               	movlw	0
  8495  0022CA  2392               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8496                           
  8497                           ; BSR set to: 0
  8498  0022CC  0E01               	movlw	1
  8499  0022CE  6F96               	movwf	___ftadd@sign& (0+255),b
  8500  0022D0                     l567:
  8501                           
  8502                           ; BSR set to: 0
  8503                           
  8504                           ; BSR set to: 0
  8505  0022D0  C090  F060         	movff	___ftadd@f2,___ftpack@arg
  8506  0022D4  C091  F061         	movff	___ftadd@f2+1,___ftpack@arg+1
  8507  0022D8  C092  F062         	movff	___ftadd@f2+2,___ftpack@arg+2
  8508  0022DC  C098  F063         	movff	___ftadd@exp1,___ftpack@exp
  8509  0022E0  C096  F064         	movff	___ftadd@sign,___ftpack@sign
  8510  0022E4  EC5A  F019         	call	___ftpack	;wreg free
  8511  0022E8  C060  F08D         	movff	?___ftpack,?___ftadd
  8512  0022EC  C061  F08E         	movff	?___ftpack+1,?___ftadd+1
  8513  0022F0  C062  F08F         	movff	?___ftpack+2,?___ftadd+2
  8514  0022F4  0012               	return	
  8515  0022F6                     __end_of___ftadd:
  8516                           	opt stack 0
  8517                           tblptru	equ	0xFF8
  8518                           tblptrh	equ	0xFF7
  8519                           tblptrl	equ	0xFF6
  8520                           tablat	equ	0xFF5
  8521                           prodh	equ	0xFF4
  8522                           prodl	equ	0xFF3
  8523                           postinc0	equ	0xFEE
  8524                           wreg	equ	0xFE8
  8525                           indf2	equ	0xFDF
  8526                           postinc2	equ	0xFDE
  8527                           postdec2	equ	0xFDD
  8528                           fsr2h	equ	0xFDA
  8529                           fsr2l	equ	0xFD9
  8530                           status	equ	0xFD8
  8531                           
  8532 ;; *************** function ___ftneg *****************
  8533 ;; Defined at:
  8534 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
  8535 ;; Parameters:    Size  Location     Type
  8536 ;;  f1              3    0[BANK0 ] float 
  8537 ;; Auto vars:     Size  Location     Type
  8538 ;;		None
  8539 ;; Return value:  Size  Location     Type
  8540 ;;                  3    0[BANK0 ] float 
  8541 ;; Registers used:
  8542 ;;		wreg, status,2, status,0
  8543 ;; Tracked objects:
  8544 ;;		On entry : 0/0
  8545 ;;		On exit  : 0/0
  8546 ;;		Unchanged: 0/0
  8547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8548 ;;      Params:         0       3       0       0       0       0       0       0       0
  8549 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8550 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8551 ;;      Totals:         0       3       0       0       0       0       0       0       0
  8552 ;;Total ram usage:        3 bytes
  8553 ;; Hardware stack levels used:    1
  8554 ;; Hardware stack levels required when called:    3
  8555 ;; This function calls:
  8556 ;;		Nothing
  8557 ;; This function is called by:
  8558 ;;		_sprintf
  8559 ;;		_sin
  8560 ;; This function uses a non-reentrant model
  8561 ;;
  8562                           
  8563                           	psect	text25
  8564  003954                     __ptext25:
  8565                           	opt stack 0
  8566  003954                     ___ftneg:
  8567                           	opt stack 26
  8568                           
  8569                           ;incstack = 0
  8570  003954  0100               	movlb	0	; () banked
  8571  003956  5160               	movf	___ftneg@f1& (0+255),w,b
  8572  003958  1161               	iorwf	(___ftneg@f1+1)& (0+255),w,b
  8573  00395A  1162               	iorwf	(___ftneg@f1+2)& (0+255),w,b
  8574  00395C  B4D8               	btfsc	status,2,c
  8575  00395E  D006               	goto	l615
  8576                           
  8577                           ; BSR set to: 0
  8578  003960  0E00               	movlw	0
  8579  003962  1B60               	xorwf	___ftneg@f1& (0+255),f,b
  8580  003964  0E00               	movlw	0
  8581  003966  1B61               	xorwf	(___ftneg@f1+1)& (0+255),f,b
  8582  003968  0E80               	movlw	128
  8583  00396A  1B62               	xorwf	(___ftneg@f1+2)& (0+255),f,b
  8584  00396C                     l615:
  8585                           
  8586                           ; BSR set to: 0
  8587  00396C  C060  F060         	movff	___ftneg@f1,?___ftneg
  8588  003970  C061  F061         	movff	___ftneg@f1+1,?___ftneg+1
  8589  003974  C062  F062         	movff	___ftneg@f1+2,?___ftneg+2
  8590                           
  8591                           ; BSR set to: 0
  8592  003978  0012               	return		;funcret
  8593  00397A                     __end_of___ftneg:
  8594                           	opt stack 0
  8595                           tblptru	equ	0xFF8
  8596                           tblptrh	equ	0xFF7
  8597                           tblptrl	equ	0xFF6
  8598                           tablat	equ	0xFF5
  8599                           prodh	equ	0xFF4
  8600                           prodl	equ	0xFF3
  8601                           postinc0	equ	0xFEE
  8602                           wreg	equ	0xFE8
  8603                           indf2	equ	0xFDF
  8604                           postinc2	equ	0xFDE
  8605                           postdec2	equ	0xFDD
  8606                           fsr2h	equ	0xFDA
  8607                           fsr2l	equ	0xFD9
  8608                           status	equ	0xFD8
  8609                           
  8610 ;; *************** function ___ftdiv *****************
  8611 ;; Defined at:
  8612 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  8613 ;; Parameters:    Size  Location     Type
  8614 ;;  f1              3   81[BANK0 ] float 
  8615 ;;  f2              3   84[BANK0 ] float 
  8616 ;; Auto vars:     Size  Location     Type
  8617 ;;  f3              3   91[BANK0 ] float 
  8618 ;;  sign            1   95[BANK0 ] unsigned char 
  8619 ;;  exp             1   94[BANK0 ] unsigned char 
  8620 ;;  cntr            1   90[BANK0 ] unsigned char 
  8621 ;; Return value:  Size  Location     Type
  8622 ;;                  3   81[BANK0 ] float 
  8623 ;; Registers used:
  8624 ;;		wreg, status,2, status,0, cstack
  8625 ;; Tracked objects:
  8626 ;;		On entry : 0/0
  8627 ;;		On exit  : 0/0
  8628 ;;		Unchanged: 0/0
  8629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8630 ;;      Params:         0       6       0       0       0       0       0       0       0
  8631 ;;      Locals:         0       6       0       0       0       0       0       0       0
  8632 ;;      Temps:          0       3       0       0       0       0       0       0       0
  8633 ;;      Totals:         0      15       0       0       0       0       0       0       0
  8634 ;;Total ram usage:       15 bytes
  8635 ;; Hardware stack levels used:    1
  8636 ;; Hardware stack levels required when called:    4
  8637 ;; This function calls:
  8638 ;;		___ftpack
  8639 ;; This function is called by:
  8640 ;;		_main
  8641 ;;		_sin
  8642 ;; This function uses a non-reentrant model
  8643 ;;
  8644                           
  8645                           	psect	text26
  8646  002E74                     __ptext26:
  8647                           	opt stack 0
  8648  002E74                     ___ftdiv:
  8649                           	opt stack 24
  8650                           
  8651                           ; BSR set to: 0
  8652                           ;incstack = 0
  8653  002E74  C0B3  F0B7         	movff	___ftdiv@f1+2,??___ftdiv
  8654  002E78  0100               	movlb	0	; () banked
  8655  002E7A  6BB8               	clrf	(??___ftdiv+1)& (0+255),b
  8656  002E7C  6BB9               	clrf	(??___ftdiv+2)& (0+255),b
  8657  002E7E  35B2               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
  8658  002E80  37B7               	rlcf	??___ftdiv& (0+255),f,b
  8659  002E82  E301               	bnc	u2631
  8660  002E84  81B8               	bsf	(??___ftdiv+1)& (0+255),0,b
  8661  002E86                     u2631:
  8662  002E86  51B7               	movf	??___ftdiv& (0+255),w,b
  8663  002E88  6FBE               	movwf	___ftdiv@exp& (0+255),b
  8664  002E8A  51BE               	movf	___ftdiv@exp& (0+255),w,b
  8665  002E8C  A4D8               	btfss	status,2,c
  8666  002E8E  D007               	goto	l572
  8667                           
  8668                           ; BSR set to: 0
  8669  002E90  0E00               	movlw	0
  8670  002E92  6FB1               	movwf	?___ftdiv& (0+255),b
  8671  002E94  0E00               	movlw	0
  8672  002E96  6FB2               	movwf	(?___ftdiv+1)& (0+255),b
  8673  002E98  0E00               	movlw	0
  8674  002E9A  6FB3               	movwf	(?___ftdiv+2)& (0+255),b
  8675                           
  8676                           ; BSR set to: 0
  8677  002E9C  0012               	return	
  8678  002E9E                     l572:
  8679                           
  8680                           ; BSR set to: 0
  8681                           
  8682                           ; BSR set to: 0
  8683  002E9E  C0B6  F0B7         	movff	___ftdiv@f2+2,??___ftdiv
  8684  002EA2  6BB8               	clrf	(??___ftdiv+1)& (0+255),b
  8685  002EA4  6BB9               	clrf	(??___ftdiv+2)& (0+255),b
  8686  002EA6  35B5               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
  8687  002EA8  37B7               	rlcf	??___ftdiv& (0+255),f,b
  8688  002EAA  E301               	bnc	u2651
  8689  002EAC  81B8               	bsf	(??___ftdiv+1)& (0+255),0,b
  8690  002EAE                     u2651:
  8691  002EAE  51B7               	movf	??___ftdiv& (0+255),w,b
  8692  002EB0  6FBF               	movwf	___ftdiv@sign& (0+255),b
  8693  002EB2  51BF               	movf	___ftdiv@sign& (0+255),w,b
  8694  002EB4  A4D8               	btfss	status,2,c
  8695  002EB6  D007               	goto	l574
  8696                           
  8697                           ; BSR set to: 0
  8698  002EB8  0E00               	movlw	0
  8699  002EBA  6FB1               	movwf	?___ftdiv& (0+255),b
  8700  002EBC  0E00               	movlw	0
  8701  002EBE  6FB2               	movwf	(?___ftdiv+1)& (0+255),b
  8702  002EC0  0E00               	movlw	0
  8703  002EC2  6FB3               	movwf	(?___ftdiv+2)& (0+255),b
  8704                           
  8705                           ; BSR set to: 0
  8706  002EC4  0012               	return	
  8707  002EC6                     l574:
  8708                           
  8709                           ; BSR set to: 0
  8710                           
  8711                           ; BSR set to: 0
  8712  002EC6  0E00               	movlw	0
  8713  002EC8  6FBB               	movwf	___ftdiv@f3& (0+255),b
  8714  002ECA  0E00               	movlw	0
  8715  002ECC  6FBC               	movwf	(___ftdiv@f3+1)& (0+255),b
  8716  002ECE  0E00               	movlw	0
  8717  002ED0  6FBD               	movwf	(___ftdiv@f3+2)& (0+255),b
  8718                           
  8719                           ; BSR set to: 0
  8720  002ED2  51BF               	movf	___ftdiv@sign& (0+255),w,b
  8721  002ED4  0F89               	addlw	137
  8722  002ED6  5FBE               	subwf	___ftdiv@exp& (0+255),f,b
  8723                           
  8724                           ; BSR set to: 0
  8725  002ED8  C0B3  F0BF         	movff	___ftdiv@f1+2,___ftdiv@sign
  8726                           
  8727                           ; BSR set to: 0
  8728  002EDC  51B6               	movf	(___ftdiv@f2+2)& (0+255),w,b
  8729  002EDE  1BBF               	xorwf	___ftdiv@sign& (0+255),f,b
  8730                           
  8731                           ; BSR set to: 0
  8732  002EE0  0E80               	movlw	128
  8733  002EE2  17BF               	andwf	___ftdiv@sign& (0+255),f,b
  8734                           
  8735                           ; BSR set to: 0
  8736  002EE4  8FB2               	bsf	(___ftdiv@f1+1)& (0+255),7,b
  8737                           
  8738                           ; BSR set to: 0
  8739  002EE6  0EFF               	movlw	255
  8740  002EE8  17B1               	andwf	___ftdiv@f1& (0+255),f,b
  8741  002EEA  0EFF               	movlw	255
  8742  002EEC  17B2               	andwf	(___ftdiv@f1+1)& (0+255),f,b
  8743  002EEE  0E00               	movlw	0
  8744  002EF0  17B3               	andwf	(___ftdiv@f1+2)& (0+255),f,b
  8745                           
  8746                           ; BSR set to: 0
  8747  002EF2  8FB5               	bsf	(___ftdiv@f2+1)& (0+255),7,b
  8748                           
  8749                           ; BSR set to: 0
  8750  002EF4  0EFF               	movlw	255
  8751  002EF6  17B4               	andwf	___ftdiv@f2& (0+255),f,b
  8752  002EF8  0EFF               	movlw	255
  8753  002EFA  17B5               	andwf	(___ftdiv@f2+1)& (0+255),f,b
  8754  002EFC  0E00               	movlw	0
  8755  002EFE  17B6               	andwf	(___ftdiv@f2+2)& (0+255),f,b
  8756                           
  8757                           ; BSR set to: 0
  8758  002F00  0E18               	movlw	24
  8759  002F02  6FBA               	movwf	___ftdiv@cntr& (0+255),b
  8760  002F04                     
  8761                           ; BSR set to: 0
  8762                           
  8763                           ; BSR set to: 0
  8764  002F04  90D8               	bcf	status,0,c
  8765  002F06  37BB               	rlcf	___ftdiv@f3& (0+255),f,b
  8766  002F08  37BC               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  8767  002F0A  37BD               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  8768                           
  8769                           ; BSR set to: 0
  8770  002F0C  51B4               	movf	___ftdiv@f2& (0+255),w,b
  8771  002F0E  5DB1               	subwf	___ftdiv@f1& (0+255),w,b
  8772  002F10  51B5               	movf	(___ftdiv@f2+1)& (0+255),w,b
  8773  002F12  59B2               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
  8774  002F14  51B6               	movf	(___ftdiv@f2+2)& (0+255),w,b
  8775  002F16  59B3               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
  8776  002F18  A0D8               	btfss	status,0,c
  8777  002F1A  D007               	goto	l576
  8778                           
  8779                           ; BSR set to: 0
  8780  002F1C  51B4               	movf	___ftdiv@f2& (0+255),w,b
  8781  002F1E  5FB1               	subwf	___ftdiv@f1& (0+255),f,b
  8782  002F20  51B5               	movf	(___ftdiv@f2+1)& (0+255),w,b
  8783  002F22  5BB2               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
  8784  002F24  51B6               	movf	(___ftdiv@f2+2)& (0+255),w,b
  8785  002F26  5BB3               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
  8786                           
  8787                           ; BSR set to: 0
  8788  002F28  81BB               	bsf	___ftdiv@f3& (0+255),0,b
  8789  002F2A                     l576:
  8790                           
  8791                           ; BSR set to: 0
  8792  002F2A  90D8               	bcf	status,0,c
  8793  002F2C  37B1               	rlcf	___ftdiv@f1& (0+255),f,b
  8794  002F2E  37B2               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
  8795  002F30  37B3               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
  8796                           
  8797                           ; BSR set to: 0
  8798  002F32  2FBA               	decfsz	___ftdiv@cntr& (0+255),f,b
  8799  002F34  D7E7               	goto	l575
  8800                           
  8801                           ; BSR set to: 0
  8802                           
  8803                           ; BSR set to: 0
  8804  002F36  C0BB  F060         	movff	___ftdiv@f3,___ftpack@arg
  8805  002F3A  C0BC  F061         	movff	___ftdiv@f3+1,___ftpack@arg+1
  8806  002F3E  C0BD  F062         	movff	___ftdiv@f3+2,___ftpack@arg+2
  8807  002F42  C0BE  F063         	movff	___ftdiv@exp,___ftpack@exp
  8808  002F46  C0BF  F064         	movff	___ftdiv@sign,___ftpack@sign
  8809  002F4A  EC5A  F019         	call	___ftpack	;wreg free
  8810  002F4E  C060  F0B1         	movff	?___ftpack,?___ftdiv
  8811  002F52  C061  F0B2         	movff	?___ftpack+1,?___ftdiv+1
  8812  002F56  C062  F0B3         	movff	?___ftpack+2,?___ftdiv+2
  8813  002F5A  0012               	return	
  8814  002F5C                     __end_of___ftdiv:
  8815                           	opt stack 0
  8816                           tblptru	equ	0xFF8
  8817                           tblptrh	equ	0xFF7
  8818                           tblptrl	equ	0xFF6
  8819                           tablat	equ	0xFF5
  8820                           prodh	equ	0xFF4
  8821                           prodl	equ	0xFF3
  8822                           postinc0	equ	0xFEE
  8823                           wreg	equ	0xFE8
  8824                           indf2	equ	0xFDF
  8825                           postinc2	equ	0xFDE
  8826                           postdec2	equ	0xFDD
  8827                           fsr2h	equ	0xFDA
  8828                           fsr2l	equ	0xFD9
  8829                           status	equ	0xFD8
  8830                           
  8831 ;; *************** function _configstandard *****************
  8832 ;; Defined at:
  8833 ;;		line 10 in file "configstandard.c"
  8834 ;; Parameters:    Size  Location     Type
  8835 ;;		None
  8836 ;; Auto vars:     Size  Location     Type
  8837 ;;		None
  8838 ;; Return value:  Size  Location     Type
  8839 ;;                  1    wreg      void 
  8840 ;; Registers used:
  8841 ;;		wreg, status,2
  8842 ;; Tracked objects:
  8843 ;;		On entry : 0/0
  8844 ;;		On exit  : 0/0
  8845 ;;		Unchanged: 0/0
  8846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8847 ;;      Params:         0       0       0       0       0       0       0       0       0
  8848 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8849 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8850 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8851 ;;Total ram usage:        0 bytes
  8852 ;; Hardware stack levels used:    1
  8853 ;; Hardware stack levels required when called:    3
  8854 ;; This function calls:
  8855 ;;		Nothing
  8856 ;; This function is called by:
  8857 ;;		_main
  8858 ;; This function uses a non-reentrant model
  8859 ;;
  8860                           
  8861                           	psect	text27
  8862  003874                     __ptext27:
  8863                           	opt stack 0
  8864  003874                     _configstandard:
  8865                           	opt stack 27
  8866                           
  8867                           ;configstandard.c: 16: ADCON0bits.CHS3 = 0;
  8868                           
  8869                           ;incstack = 0
  8870  003874  9AC2               	bcf	4034,5,c	;volatile
  8871                           
  8872                           ;configstandard.c: 17: ADCON0bits.CHS2 = 0;
  8873  003876  98C2               	bcf	4034,4,c	;volatile
  8874                           
  8875                           ;configstandard.c: 18: ADCON0bits.CHS1 = 0;
  8876  003878  96C2               	bcf	4034,3,c	;volatile
  8877                           
  8878                           ;configstandard.c: 19: ADCON0bits.CHS0 = 0;
  8879  00387A  94C2               	bcf	4034,2,c	;volatile
  8880                           
  8881                           ;configstandard.c: 20: ADCON0bits.ADON = 1;
  8882  00387C  80C2               	bsf	4034,0,c	;volatile
  8883                           
  8884                           ;configstandard.c: 24: ADCON1 = 0b00001110;
  8885  00387E  0E0E               	movlw	14
  8886  003880  6EC1               	movwf	4033,c	;volatile
  8887                           
  8888                           ;configstandard.c: 28: ADCON2bits.ADFM = 1;
  8889  003882  8EC0               	bsf	4032,7,c	;volatile
  8890                           
  8891                           ;configstandard.c: 29: ADCON2bits.ACQT2 = 1;
  8892  003884  8AC0               	bsf	4032,5,c	;volatile
  8893                           
  8894                           ;configstandard.c: 30: ADCON2bits.ACQT1 = 0;
  8895  003886  98C0               	bcf	4032,4,c	;volatile
  8896                           
  8897                           ;configstandard.c: 31: ADCON2bits.ACQT0 = 1;
  8898  003888  86C0               	bsf	4032,3,c	;volatile
  8899                           
  8900                           ;configstandard.c: 32: ADCON2bits.ADCS2 = 1;
  8901  00388A  84C0               	bsf	4032,2,c	;volatile
  8902                           
  8903                           ;configstandard.c: 33: ADCON2bits.ADCS1 = 0;
  8904  00388C  92C0               	bcf	4032,1,c	;volatile
  8905                           
  8906                           ;configstandard.c: 34: ADCON2bits.ADCS0 = 0;
  8907  00388E  90C0               	bcf	4032,0,c	;volatile
  8908                           
  8909                           ;configstandard.c: 36: ADRESH = 0;
  8910  003890  0E00               	movlw	0
  8911  003892  6EC4               	movwf	4036,c	;volatile
  8912                           
  8913                           ;configstandard.c: 37: ADRESL = 0;
  8914  003894  0E00               	movlw	0
  8915  003896  6EC3               	movwf	4035,c	;volatile
  8916                           
  8917                           ;configstandard.c: 54: CCP1CONbits.CCP1M = 0b1011;
  8918  003898  50BD               	movf	4029,w,c	;volatile
  8919  00389A  0BF0               	andlw	-16
  8920  00389C  090B               	iorlw	11
  8921  00389E  6EBD               	movwf	4029,c	;volatile
  8922                           
  8923                           ;configstandard.c: 55: CCPR1 = 2400;
  8924  0038A0  0E09               	movlw	9
  8925  0038A2  6EBF               	movwf	4031,c	;volatile
  8926  0038A4  0E60               	movlw	96
  8927  0038A6  6EBE               	movwf	4030,c	;volatile
  8928                           
  8929                           ;configstandard.c: 59: ADCON2bits.ADCS=110;
  8930  0038A8  50C0               	movf	4032,w,c	;volatile
  8931  0038AA  0BF8               	andlw	-8
  8932  0038AC  0906               	iorlw	6
  8933  0038AE  6EC0               	movwf	4032,c	;volatile
  8934                           
  8935                           ;configstandard.c: 60: ADCON2bits.ACQT=010;
  8936  0038B0  96C0               	bcf	4032,3,c	;volatile
  8937  0038B2  98C0               	bcf	4032,4,c	;volatile
  8938  0038B4  9AC0               	bcf	4032,5,c	;volatile
  8939  0038B6  0012               	return		;funcret
  8940  0038B8                     __end_of_configstandard:
  8941                           	opt stack 0
  8942                           tblptru	equ	0xFF8
  8943                           tblptrh	equ	0xFF7
  8944                           tblptrl	equ	0xFF6
  8945                           tablat	equ	0xFF5
  8946                           prodh	equ	0xFF4
  8947                           prodl	equ	0xFF3
  8948                           postinc0	equ	0xFEE
  8949                           wreg	equ	0xFE8
  8950                           indf2	equ	0xFDF
  8951                           postinc2	equ	0xFDE
  8952                           postdec2	equ	0xFDD
  8953                           fsr2h	equ	0xFDA
  8954                           fsr2l	equ	0xFD9
  8955                           status	equ	0xFD8
  8956                           
  8957 ;; *************** function ___lwtoft *****************
  8958 ;; Defined at:
  8959 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
  8960 ;; Parameters:    Size  Location     Type
  8961 ;;  c               2    8[BANK0 ] unsigned int 
  8962 ;; Auto vars:     Size  Location     Type
  8963 ;;		None
  8964 ;; Return value:  Size  Location     Type
  8965 ;;                  3    8[BANK0 ] float 
  8966 ;; Registers used:
  8967 ;;		wreg, status,2, status,0, cstack
  8968 ;; Tracked objects:
  8969 ;;		On entry : 0/0
  8970 ;;		On exit  : 0/0
  8971 ;;		Unchanged: 0/0
  8972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8973 ;;      Params:         0       3       0       0       0       0       0       0       0
  8974 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8975 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8976 ;;      Totals:         0       3       0       0       0       0       0       0       0
  8977 ;;Total ram usage:        3 bytes
  8978 ;; Hardware stack levels used:    1
  8979 ;; Hardware stack levels required when called:    4
  8980 ;; This function calls:
  8981 ;;		___ftpack
  8982 ;; This function is called by:
  8983 ;;		_main
  8984 ;; This function uses a non-reentrant model
  8985 ;;
  8986                           
  8987                           	psect	text28
  8988  00397A                     __ptext28:
  8989                           	opt stack 0
  8990  00397A                     ___lwtoft:
  8991                           	opt stack 26
  8992                           
  8993                           ;incstack = 0
  8994  00397A  C068  F060         	movff	___lwtoft@c,___ftpack@arg
  8995  00397E  C069  F061         	movff	___lwtoft@c+1,___ftpack@arg+1
  8996  003982  0100               	movlb	0	; () banked
  8997  003984  6B62               	clrf	(___ftpack@arg+2)& (0+255),b
  8998  003986  0E8E               	movlw	142
  8999  003988  6F63               	movwf	___ftpack@exp& (0+255),b
  9000  00398A  0E00               	movlw	0
  9001  00398C  6F64               	movwf	___ftpack@sign& (0+255),b
  9002  00398E  EC5A  F019         	call	___ftpack	;wreg free
  9003  003992  C060  F068         	movff	?___ftpack,?___lwtoft
  9004  003996  C061  F069         	movff	?___ftpack+1,?___lwtoft+1
  9005  00399A  C062  F06A         	movff	?___ftpack+2,?___lwtoft+2
  9006  00399E  0012               	return	
  9007  0039A0                     __end_of___lwtoft:
  9008                           	opt stack 0
  9009                           tblptru	equ	0xFF8
  9010                           tblptrh	equ	0xFF7
  9011                           tblptrl	equ	0xFF6
  9012                           tablat	equ	0xFF5
  9013                           prodh	equ	0xFF4
  9014                           prodl	equ	0xFF3
  9015                           postinc0	equ	0xFEE
  9016                           wreg	equ	0xFE8
  9017                           indf2	equ	0xFDF
  9018                           postinc2	equ	0xFDE
  9019                           postdec2	equ	0xFDD
  9020                           fsr2h	equ	0xFDA
  9021                           fsr2l	equ	0xFD9
  9022                           status	equ	0xFD8
  9023                           
  9024 ;; *************** function ___ftpack *****************
  9025 ;; Defined at:
  9026 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  9027 ;; Parameters:    Size  Location     Type
  9028 ;;  arg             3    0[BANK0 ] unsigned um
  9029 ;;  exp             1    3[BANK0 ] unsigned char 
  9030 ;;  sign            1    4[BANK0 ] unsigned char 
  9031 ;; Auto vars:     Size  Location     Type
  9032 ;;		None
  9033 ;; Return value:  Size  Location     Type
  9034 ;;                  3    0[BANK0 ] float 
  9035 ;; Registers used:
  9036 ;;		wreg, status,2, status,0
  9037 ;; Tracked objects:
  9038 ;;		On entry : 0/0
  9039 ;;		On exit  : 0/0
  9040 ;;		Unchanged: 0/0
  9041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9042 ;;      Params:         0       5       0       0       0       0       0       0       0
  9043 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9044 ;;      Temps:          0       3       0       0       0       0       0       0       0
  9045 ;;      Totals:         0       8       0       0       0       0       0       0       0
  9046 ;;Total ram usage:        8 bytes
  9047 ;; Hardware stack levels used:    1
  9048 ;; Hardware stack levels required when called:    3
  9049 ;; This function calls:
  9050 ;;		Nothing
  9051 ;; This function is called by:
  9052 ;;		___altoft
  9053 ;;		___ftadd
  9054 ;;		___ftdiv
  9055 ;;		___ftmul
  9056 ;;		___lltoft
  9057 ;;		___lwtoft
  9058 ;; This function uses a non-reentrant model
  9059 ;;
  9060                           
  9061                           	psect	text29
  9062  0032B4                     __ptext29:
  9063                           	opt stack 0
  9064  0032B4                     ___ftpack:
  9065                           	opt stack 24
  9066                           
  9067                           ;incstack = 0
  9068  0032B4  0100               	movlb	0	; () banked
  9069  0032B6  5163               	movf	___ftpack@exp& (0+255),w,b
  9070  0032B8  B4D8               	btfsc	status,2,c
  9071  0032BA  D005               	goto	u2140
  9072                           
  9073                           ; BSR set to: 0
  9074  0032BC  5160               	movf	___ftpack@arg& (0+255),w,b
  9075  0032BE  1161               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  9076  0032C0  1162               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  9077  0032C2  A4D8               	btfss	status,2,c
  9078  0032C4  D00C               	goto	l508
  9079  0032C6                     u2140:
  9080                           
  9081                           ; BSR set to: 0
  9082                           
  9083                           ; BSR set to: 0
  9084  0032C6  0E00               	movlw	0
  9085  0032C8  6F60               	movwf	?___ftpack& (0+255),b
  9086  0032CA  0E00               	movlw	0
  9087  0032CC  6F61               	movwf	(?___ftpack+1)& (0+255),b
  9088  0032CE  0E00               	movlw	0
  9089  0032D0  6F62               	movwf	(?___ftpack+2)& (0+255),b
  9090                           
  9091                           ; BSR set to: 0
  9092  0032D2  0012               	return	
  9093  0032D4                     
  9094                           ; BSR set to: 0
  9095                           
  9096                           ; BSR set to: 0
  9097  0032D4  2B63               	incf	___ftpack@exp& (0+255),f,b
  9098  0032D6  90D8               	bcf	status,0,c
  9099  0032D8  3362               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  9100  0032DA  3361               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  9101  0032DC  3360               	rrcf	___ftpack@arg& (0+255),f,b
  9102  0032DE                     l508:
  9103                           
  9104                           ; BSR set to: 0
  9105                           
  9106                           ; BSR set to: 0
  9107  0032DE  0E00               	movlw	0
  9108  0032E0  1560               	andwf	___ftpack@arg& (0+255),w,b
  9109  0032E2  6F65               	movwf	??___ftpack& (0+255),b
  9110  0032E4  0E00               	movlw	0
  9111  0032E6  1561               	andwf	(___ftpack@arg+1)& (0+255),w,b
  9112  0032E8  6F66               	movwf	(??___ftpack+1)& (0+255),b
  9113  0032EA  0EFE               	movlw	254
  9114  0032EC  1562               	andwf	(___ftpack@arg+2)& (0+255),w,b
  9115  0032EE  6F67               	movwf	(??___ftpack+2)& (0+255),b
  9116  0032F0  5165               	movf	??___ftpack& (0+255),w,b
  9117  0032F2  1166               	iorwf	(??___ftpack+1)& (0+255),w,b
  9118  0032F4  1167               	iorwf	(??___ftpack+2)& (0+255),w,b
  9119  0032F6  B4D8               	btfsc	status,2,c
  9120  0032F8  D00C               	goto	l511
  9121  0032FA  D7EC               	goto	l509
  9122  0032FC                     
  9123                           ; BSR set to: 0
  9124                           
  9125                           ; BSR set to: 0
  9126  0032FC  2B63               	incf	___ftpack@exp& (0+255),f,b
  9127                           
  9128                           ; BSR set to: 0
  9129  0032FE  0E01               	movlw	1
  9130  003300  2760               	addwf	___ftpack@arg& (0+255),f,b
  9131  003302  0E00               	movlw	0
  9132  003304  2361               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  9133  003306  0E00               	movlw	0
  9134  003308  2362               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  9135  00330A  90D8               	bcf	status,0,c
  9136  00330C  3362               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  9137  00330E  3361               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  9138  003310  3360               	rrcf	___ftpack@arg& (0+255),f,b
  9139  003312                     l511:
  9140                           
  9141                           ; BSR set to: 0
  9142                           
  9143                           ; BSR set to: 0
  9144  003312  0E00               	movlw	0
  9145  003314  1560               	andwf	___ftpack@arg& (0+255),w,b
  9146  003316  6F65               	movwf	??___ftpack& (0+255),b
  9147  003318  0E00               	movlw	0
  9148  00331A  1561               	andwf	(___ftpack@arg+1)& (0+255),w,b
  9149  00331C  6F66               	movwf	(??___ftpack+1)& (0+255),b
  9150  00331E  0EFF               	movlw	255
  9151  003320  1562               	andwf	(___ftpack@arg+2)& (0+255),w,b
  9152  003322  6F67               	movwf	(??___ftpack+2)& (0+255),b
  9153  003324  5165               	movf	??___ftpack& (0+255),w,b
  9154  003326  1166               	iorwf	(??___ftpack+1)& (0+255),w,b
  9155  003328  1167               	iorwf	(??___ftpack+2)& (0+255),w,b
  9156  00332A  B4D8               	btfsc	status,2,c
  9157  00332C  D006               	goto	l514
  9158  00332E  D7E6               	goto	l512
  9159  003330                     
  9160                           ; BSR set to: 0
  9161                           
  9162                           ; BSR set to: 0
  9163  003330  0763               	decf	___ftpack@exp& (0+255),f,b
  9164  003332  90D8               	bcf	status,0,c
  9165  003334  3760               	rlcf	___ftpack@arg& (0+255),f,b
  9166  003336  3761               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  9167  003338  3762               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  9168  00333A                     l514:
  9169                           
  9170                           ; BSR set to: 0
  9171                           
  9172                           ; BSR set to: 0
  9173  00333A  BF61               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  9174  00333C  D003               	goto	u2180
  9175                           
  9176                           ; BSR set to: 0
  9177  00333E  0E02               	movlw	2
  9178  003340  6163               	cpfslt	___ftpack@exp& (0+255),b
  9179  003342  D7F6               	goto	l515
  9180  003344                     u2180:
  9181                           
  9182                           ; BSR set to: 0
  9183                           
  9184                           ; BSR set to: 0
  9185  003344  A163               	btfss	___ftpack@exp& (0+255),0,b
  9186                           
  9187                           ; BSR set to: 0
  9188  003346  9F61               	bcf	(___ftpack@arg+1)& (0+255),7,b
  9189                           
  9190                           ; BSR set to: 0
  9191                           
  9192                           ; BSR set to: 0
  9193  003348  90D8               	bcf	status,0,c
  9194  00334A  3363               	rrcf	___ftpack@exp& (0+255),f,b
  9195  00334C  5163               	movf	___ftpack@exp& (0+255),w,b
  9196  00334E  1362               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  9197                           
  9198                           ; BSR set to: 0
  9199  003350  5164               	movf	___ftpack@sign& (0+255),w,b
  9200  003352  A4D8               	btfss	status,2,c
  9201                           
  9202                           ; BSR set to: 0
  9203  003354  8F62               	bsf	(___ftpack@arg+2)& (0+255),7,b
  9204                           
  9205                           ; BSR set to: 0
  9206                           
  9207                           ; BSR set to: 0
  9208  003356  C060  F060         	movff	___ftpack@arg,?___ftpack
  9209  00335A  C061  F061         	movff	___ftpack@arg+1,?___ftpack+1
  9210  00335E  C062  F062         	movff	___ftpack@arg+2,?___ftpack+2
  9211  003362  0012               	return	
  9212  003364                     __end_of___ftpack:
  9213                           	opt stack 0
  9214                           tblptru	equ	0xFF8
  9215                           tblptrh	equ	0xFF7
  9216                           tblptrl	equ	0xFF6
  9217                           tablat	equ	0xFF5
  9218                           prodh	equ	0xFF4
  9219                           prodl	equ	0xFF3
  9220                           postinc0	equ	0xFEE
  9221                           wreg	equ	0xFE8
  9222                           indf2	equ	0xFDF
  9223                           postinc2	equ	0xFDE
  9224                           postdec2	equ	0xFDD
  9225                           fsr2h	equ	0xFDA
  9226                           fsr2l	equ	0xFD9
  9227                           status	equ	0xFD8
  9228                           
  9229 ;; *************** function _Lcd_Out2 *****************
  9230 ;; Defined at:
  9231 ;;		line 109 in file "Library_LCD_2.h"
  9232 ;; Parameters:    Size  Location     Type
  9233 ;;  y               1    wreg     unsigned char 
  9234 ;;  x               1    3[BANK0 ] unsigned char 
  9235 ;;  buffer          2    4[BANK0 ] PTR unsigned char 
  9236 ;;		 -> STR_4(5), buffer2(20), main@buffer1(16), 
  9237 ;; Auto vars:     Size  Location     Type
  9238 ;;  y               1    6[BANK0 ] unsigned char 
  9239 ;;  data            1    7[BANK0 ] unsigned char 
  9240 ;; Return value:  Size  Location     Type
  9241 ;;                  1    wreg      void 
  9242 ;; Registers used:
  9243 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9244 ;; Tracked objects:
  9245 ;;		On entry : 0/0
  9246 ;;		On exit  : 0/0
  9247 ;;		Unchanged: 0/0
  9248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9249 ;;      Params:         0       3       0       0       0       0       0       0       0
  9250 ;;      Locals:         0       2       0       0       0       0       0       0       0
  9251 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9252 ;;      Totals:         0       5       0       0       0       0       0       0       0
  9253 ;;Total ram usage:        5 bytes
  9254 ;; Hardware stack levels used:    1
  9255 ;; Hardware stack levels required when called:    4
  9256 ;; This function calls:
  9257 ;;		_Lcd_Chr_CP
  9258 ;;		_Lcd_Cmd
  9259 ;; This function is called by:
  9260 ;;		_main
  9261 ;; This function uses a non-reentrant model
  9262 ;;
  9263                           
  9264                           	psect	text30
  9265  003412                     __ptext30:
  9266                           	opt stack 0
  9267  003412                     _Lcd_Out2:
  9268                           	opt stack 26
  9269                           
  9270                           ; BSR set to: 0
  9271                           ;incstack = 0
  9272                           ;Lcd_Out2@y stored from wreg
  9273  003412  0100               	movlb	0	; () banked
  9274  003414  6F66               	movwf	Lcd_Out2@y& (0+255),b
  9275                           
  9276                           ;Library_LCD_2.h: 111: unsigned char data;
  9277                           ;Library_LCD_2.h: 112: switch (y)
  9278  003416  D00E               	goto	l78
  9279  003418  0100               	movlb	0	; () banked
  9280  00341A  5163               	movf	Lcd_Out2@x& (0+255),w,b
  9281  00341C  0F80               	addlw	128
  9282  00341E  D008               	goto	L5
  9283  003420                     
  9284                           ; BSR set to: 0
  9285                           
  9286                           ; BSR set to: 0
  9287  003420  5163               	movf	Lcd_Out2@x& (0+255),w,b
  9288  003422  0FC0               	addlw	192
  9289  003424  D005               	goto	L5
  9290  003426                     
  9291                           ; BSR set to: 0
  9292                           
  9293                           ; BSR set to: 0
  9294  003426  5163               	movf	Lcd_Out2@x& (0+255),w,b
  9295  003428  0F94               	addlw	148
  9296  00342A  D002               	goto	L5
  9297  00342C                     
  9298                           ; BSR set to: 0
  9299                           
  9300                           ; BSR set to: 0
  9301  00342C  5163               	movf	Lcd_Out2@x& (0+255),w,b
  9302  00342E  0FD4               	addlw	212
  9303  003430                     L5:
  9304  003430  6F67               	movwf	Lcd_Out2@data& (0+255),b
  9305                           
  9306                           ; BSR set to: 0
  9307                           ;Library_LCD_2.h: 119: }
  9308                           
  9309                           ; BSR set to: 0
  9310                           
  9311                           ;Library_LCD_2.h: 118: default: break;
  9312  003432  D00E               	goto	l80
  9313  003434                     l78:
  9314                           
  9315                           ; BSR set to: 0
  9316  003434  0100               	movlb	0	; () banked
  9317  003436  5166               	movf	Lcd_Out2@y& (0+255),w,b
  9318                           
  9319                           ; Switch size 1, requested type "space"
  9320                           ; Number of cases is 4, Range of values is 1 to 4
  9321                           ; switch strategies available:
  9322                           ; Name         Instructions Cycles
  9323                           ; simple_byte           13     7 (average)
  9324                           ;	Chosen strategy is simple_byte
  9325  003438  0A01               	xorlw	1	; case 1
  9326  00343A  B4D8               	btfsc	status,2,c
  9327  00343C  D7ED               	goto	l79
  9328  00343E  0A03               	xorlw	3	; case 2
  9329  003440  B4D8               	btfsc	status,2,c
  9330  003442  D7EE               	goto	l81
  9331  003444  0A01               	xorlw	1	; case 3
  9332  003446  B4D8               	btfsc	status,2,c
  9333  003448  D7EE               	goto	l82
  9334  00344A  0A07               	xorlw	7	; case 4
  9335  00344C  B4D8               	btfsc	status,2,c
  9336  00344E  D7EE               	goto	l83
  9337  003450                     l80:
  9338                           
  9339                           ; BSR set to: 0
  9340                           ;Library_LCD_2.h: 120: Lcd_Cmd(data);
  9341                           
  9342                           ; BSR set to: 0
  9343  003450  5167               	movf	Lcd_Out2@data& (0+255),w,b
  9344  003452  EC19  F014         	call	_Lcd_Cmd
  9345                           
  9346                           ;Library_LCD_2.h: 121: while(*buffer)
  9347  003456  D015               	goto	l85
  9348  003458                     
  9349                           ;Library_LCD_2.h: 122: {
  9350                           ;Library_LCD_2.h: 123: Lcd_Chr_CP(*buffer);
  9351  003458  C064  FFF6         	movff	Lcd_Out2@buffer,tblptrl
  9352  00345C  C065  FFF7         	movff	Lcd_Out2@buffer+1,tblptrh
  9353  003460  6AF8               	clrf	tblptru,c
  9354  003462  0E07               	movlw	(high __ramtop+-1)
  9355  003464  64F7               	cpfsgt	tblptrh,c
  9356  003466  D003               	bra	u3417
  9357  003468  0008               	tblrd		*
  9358  00346A  50F5               	movf	tablat,w,c
  9359  00346C  D005               	bra	u3410
  9360  00346E                     u3417:
  9361  00346E  CFF6 FFD9          	movff	tblptrl,fsr2l
  9362  003472  CFF7 FFDA          	movff	tblptrh,fsr2h
  9363  003476  50DF               	movf	indf2,w,c
  9364  003478                     u3410:
  9365  003478  EC7F  F013         	call	_Lcd_Chr_CP
  9366                           
  9367                           ;Library_LCD_2.h: 124: buffer++;
  9368  00347C  0100               	movlb	0	; () banked
  9369  00347E  4B64               	infsnz	Lcd_Out2@buffer& (0+255),f,b
  9370  003480  2B65               	incf	(Lcd_Out2@buffer+1)& (0+255),f,b
  9371  003482                     l85:
  9372                           
  9373                           ; BSR set to: 0
  9374  003482  C064  FFF6         	movff	Lcd_Out2@buffer,tblptrl
  9375  003486  C065  FFF7         	movff	Lcd_Out2@buffer+1,tblptrh
  9376  00348A  6AF8               	clrf	tblptru,c
  9377  00348C  0E07               	movlw	(high __ramtop+-1)
  9378  00348E  64F7               	cpfsgt	tblptrh,c
  9379  003490  D003               	bra	u3427
  9380  003492  0008               	tblrd		*
  9381  003494  50F5               	movf	tablat,w,c
  9382  003496  D005               	bra	u3420
  9383  003498                     u3427:
  9384  003498  CFF6 FFD9          	movff	tblptrl,fsr2l
  9385  00349C  CFF7 FFDA          	movff	tblptrh,fsr2h
  9386  0034A0  50DF               	movf	indf2,w,c
  9387  0034A2                     u3420:
  9388  0034A2  0900               	iorlw	0
  9389  0034A4  B4D8               	btfsc	status,2,c
  9390  0034A6  0012               	return	
  9391  0034A8  D7D7               	goto	l86
  9392  0034AA                     __end_of_Lcd_Out2:
  9393                           	opt stack 0
  9394                           tblptru	equ	0xFF8
  9395                           tblptrh	equ	0xFF7
  9396                           tblptrl	equ	0xFF6
  9397                           tablat	equ	0xFF5
  9398                           prodh	equ	0xFF4
  9399                           prodl	equ	0xFF3
  9400                           postinc0	equ	0xFEE
  9401                           wreg	equ	0xFE8
  9402                           indf2	equ	0xFDF
  9403                           postinc2	equ	0xFDE
  9404                           postdec2	equ	0xFDD
  9405                           fsr2h	equ	0xFDA
  9406                           fsr2l	equ	0xFD9
  9407                           status	equ	0xFD8
  9408                           
  9409 ;; *************** function _Lcd_Chr_CP *****************
  9410 ;; Defined at:
  9411 ;;		line 130 in file "Library_LCD_2.h"
  9412 ;; Parameters:    Size  Location     Type
  9413 ;;  data            1    wreg     unsigned char 
  9414 ;; Auto vars:     Size  Location     Type
  9415 ;;  data            1    2[BANK0 ] unsigned char 
  9416 ;; Return value:  Size  Location     Type
  9417 ;;                  1    wreg      void 
  9418 ;; Registers used:
  9419 ;;		wreg, status,2, status,0
  9420 ;; Tracked objects:
  9421 ;;		On entry : 0/0
  9422 ;;		On exit  : 0/0
  9423 ;;		Unchanged: 0/0
  9424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9425 ;;      Params:         0       0       0       0       0       0       0       0       0
  9426 ;;      Locals:         0       1       0       0       0       0       0       0       0
  9427 ;;      Temps:          0       2       0       0       0       0       0       0       0
  9428 ;;      Totals:         0       3       0       0       0       0       0       0       0
  9429 ;;Total ram usage:        3 bytes
  9430 ;; Hardware stack levels used:    1
  9431 ;; Hardware stack levels required when called:    3
  9432 ;; This function calls:
  9433 ;;		Nothing
  9434 ;; This function is called by:
  9435 ;;		_Lcd_Out2
  9436 ;;		_Lcd_Out
  9437 ;; This function uses a non-reentrant model
  9438 ;;
  9439                           
  9440                           	psect	text31
  9441  0026FE                     __ptext31:
  9442                           	opt stack 0
  9443  0026FE                     _Lcd_Chr_CP:
  9444                           	opt stack 26
  9445                           
  9446                           ;incstack = 0
  9447                           ;Lcd_Chr_CP@data stored from wreg
  9448  0026FE  0100               	movlb	0	; () banked
  9449  002700  6F62               	movwf	Lcd_Chr_CP@data& (0+255),b
  9450                           
  9451                           ;Library_LCD_2.h: 131: PORTDbits.RD3 = 0; PORTDbits.RD1 = 1;
  9452  002702  9683               	bcf	3971,3,c	;volatile
  9453  002704  8283               	bsf	3971,1,c	;volatile
  9454                           
  9455                           ;Library_LCD_2.h: 132: PORTDbits.RD7 = (data & 0b10000000)>>7; PORTDbits.RD6 = (data & 0
      +                          b01000000)>>6;
  9456  002706  0100               	movlb	0	; () banked
  9457  002708  6B60               	clrf	??_Lcd_Chr_CP& (0+255),b
  9458  00270A  AF62               	btfss	Lcd_Chr_CP@data& (0+255),7,b
  9459  00270C  D001               	bra	u2905
  9460  00270E  2B60               	incf	??_Lcd_Chr_CP& (0+255),f,b
  9461  002710                     u2905:
  9462  002710  0E01               	movlw	1
  9463  002712  1760               	andwf	??_Lcd_Chr_CP& (0+255),f,b
  9464  002714  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  9465  002716  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  9466  002718  5083               	movf	3971,w,c	;volatile
  9467  00271A  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  9468  00271C  0B7F               	andlw	-129
  9469  00271E  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  9470  002720  6E83               	movwf	3971,c	;volatile
  9471  002722  C062  F060         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  9472  002726  0E06               	movlw	6
  9473  002728  6F61               	movwf	(??_Lcd_Chr_CP+1)& (0+255),b
  9474  00272A                     u2915:
  9475  00272A  90D8               	bcf	status,0,c
  9476  00272C  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  9477  00272E  2F61               	decfsz	(??_Lcd_Chr_CP+1)& (0+255),f,b
  9478  002730  D7FC               	goto	u2915
  9479  002732  0E01               	movlw	1
  9480  002734  1760               	andwf	??_Lcd_Chr_CP& (0+255),f,b
  9481  002736  3B60               	swapf	??_Lcd_Chr_CP& (0+255),f,b
  9482  002738  4760               	rlncf	??_Lcd_Chr_CP& (0+255),f,b
  9483  00273A  4760               	rlncf	??_Lcd_Chr_CP& (0+255),f,b
  9484  00273C  5083               	movf	3971,w,c	;volatile
  9485  00273E  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  9486  002740  0BBF               	andlw	-65
  9487  002742  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  9488  002744  6E83               	movwf	3971,c	;volatile
  9489                           
  9490                           ;Library_LCD_2.h: 133: PORTDbits.RD5 = (data & 0b00100000)>>5; PORTDbits.RD4 = (data & 0
      +                          b00010000)>>4;
  9491  002746  C062  F060         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  9492  00274A  0E05               	movlw	5
  9493  00274C  6F61               	movwf	(??_Lcd_Chr_CP+1)& (0+255),b
  9494  00274E                     u2925:
  9495  00274E  90D8               	bcf	status,0,c
  9496  002750  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  9497  002752  2F61               	decfsz	(??_Lcd_Chr_CP+1)& (0+255),f,b
  9498  002754  D7FC               	goto	u2925
  9499  002756  0E01               	movlw	1
  9500  002758  1760               	andwf	??_Lcd_Chr_CP& (0+255),f,b
  9501  00275A  3B60               	swapf	??_Lcd_Chr_CP& (0+255),f,b
  9502  00275C  4760               	rlncf	??_Lcd_Chr_CP& (0+255),f,b
  9503  00275E  5083               	movf	3971,w,c	;volatile
  9504  002760  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  9505  002762  0BDF               	andlw	-33
  9506  002764  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  9507  002766  6E83               	movwf	3971,c	;volatile
  9508  002768  C062  F060         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  9509  00276C  3B60               	swapf	??_Lcd_Chr_CP& (0+255),f,b
  9510  00276E  0E0F               	movlw	15
  9511  002770  1760               	andwf	??_Lcd_Chr_CP& (0+255),f,b
  9512  002772  0E01               	movlw	1
  9513  002774  1760               	andwf	??_Lcd_Chr_CP& (0+255),f,b
  9514  002776  3B60               	swapf	??_Lcd_Chr_CP& (0+255),f,b
  9515  002778  5083               	movf	3971,w,c	;volatile
  9516  00277A  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  9517  00277C  0BEF               	andlw	-17
  9518  00277E  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  9519  002780  6E83               	movwf	3971,c	;volatile
  9520                           
  9521                           ; BSR set to: 0
  9522                           ;Library_LCD_2.h: 134: _delay(10);
  9523  002782  0E03               	movlw	3
  9524  002784                     u4297:
  9525  002784  2EE8               	decfsz	wreg,f,c
  9526  002786  D7FE               	bra	u4297
  9527  002788  F000               	nop	
  9528                           
  9529                           ;Library_LCD_2.h: 135: PORTDbits.RD3 = 1; _delay((unsigned long)((5)*(48000000/4000000.0
      +                          ))); PORTDbits.RD3 = 0;
  9530  00278A  8683               	bsf	3971,3,c	;volatile
  9531  00278C  0E14               	movlw	20
  9532  00278E                     u4307:
  9533  00278E  2EE8               	decfsz	wreg,f,c
  9534  002790  D7FE               	bra	u4307
  9535  002792  9683               	bcf	3971,3,c	;volatile
  9536                           
  9537                           ;Library_LCD_2.h: 136: PORTDbits.RD7 = (data & 0b00001000)>>3; PORTDbits.RD6 = (data & 0
      +                          b00000100)>>2;
  9538  002794  C062  F060         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  9539  002798  0100               	movlb	0	; () banked
  9540  00279A  90D8               	bcf	status,0,c
  9541  00279C  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  9542  00279E  90D8               	bcf	status,0,c
  9543  0027A0  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  9544  0027A2  90D8               	bcf	status,0,c
  9545  0027A4  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  9546  0027A6  0E01               	movlw	1
  9547  0027A8  1760               	andwf	??_Lcd_Chr_CP& (0+255),f,b
  9548  0027AA  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  9549  0027AC  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  9550  0027AE  5083               	movf	3971,w,c	;volatile
  9551  0027B0  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  9552  0027B2  0B7F               	andlw	-129
  9553  0027B4  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  9554  0027B6  6E83               	movwf	3971,c	;volatile
  9555  0027B8  C062  F060         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  9556  0027BC  90D8               	bcf	status,0,c
  9557  0027BE  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  9558  0027C0  90D8               	bcf	status,0,c
  9559  0027C2  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  9560  0027C4  0E01               	movlw	1
  9561  0027C6  1760               	andwf	??_Lcd_Chr_CP& (0+255),f,b
  9562  0027C8  3B60               	swapf	??_Lcd_Chr_CP& (0+255),f,b
  9563  0027CA  4760               	rlncf	??_Lcd_Chr_CP& (0+255),f,b
  9564  0027CC  4760               	rlncf	??_Lcd_Chr_CP& (0+255),f,b
  9565  0027CE  5083               	movf	3971,w,c	;volatile
  9566  0027D0  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  9567  0027D2  0BBF               	andlw	-65
  9568  0027D4  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  9569  0027D6  6E83               	movwf	3971,c	;volatile
  9570                           
  9571                           ;Library_LCD_2.h: 137: PORTDbits.RD5 = (data & 0b00000010)>>1; PORTDbits.RD4 = (data & 0
      +                          b00000001);
  9572  0027D8  C062  F060         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  9573  0027DC  90D8               	bcf	status,0,c
  9574  0027DE  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  9575  0027E0  0E01               	movlw	1
  9576  0027E2  1760               	andwf	??_Lcd_Chr_CP& (0+255),f,b
  9577  0027E4  3B60               	swapf	??_Lcd_Chr_CP& (0+255),f,b
  9578  0027E6  4760               	rlncf	??_Lcd_Chr_CP& (0+255),f,b
  9579  0027E8  5083               	movf	3971,w,c	;volatile
  9580  0027EA  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  9581  0027EC  0BDF               	andlw	-33
  9582  0027EE  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  9583  0027F0  6E83               	movwf	3971,c	;volatile
  9584  0027F2  C062  F060         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  9585  0027F6  0E01               	movlw	1
  9586  0027F8  1760               	andwf	??_Lcd_Chr_CP& (0+255),f,b
  9587  0027FA  3B60               	swapf	??_Lcd_Chr_CP& (0+255),f,b
  9588  0027FC  5083               	movf	3971,w,c	;volatile
  9589  0027FE  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  9590  002800  0BEF               	andlw	-17
  9591  002802  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  9592  002804  6E83               	movwf	3971,c	;volatile
  9593                           
  9594                           ; BSR set to: 0
  9595                           ;Library_LCD_2.h: 138: _delay(10);
  9596  002806  0E03               	movlw	3
  9597  002808                     u4317:
  9598  002808  2EE8               	decfsz	wreg,f,c
  9599  00280A  D7FE               	bra	u4317
  9600  00280C  F000               	nop	
  9601                           
  9602                           ;Library_LCD_2.h: 139: PORTDbits.RD3 = 1; _delay((unsigned long)((5)*(48000000/4000000.0
      +                          ))); PORTDbits.RD3 = 0;
  9603  00280E  8683               	bsf	3971,3,c	;volatile
  9604  002810  0E14               	movlw	20
  9605  002812                     u4327:
  9606  002812  2EE8               	decfsz	wreg,f,c
  9607  002814  D7FE               	bra	u4327
  9608  002816  9683               	bcf	3971,3,c	;volatile
  9609                           
  9610                           ;Library_LCD_2.h: 140: _delay((unsigned long)((5)*(48000000/4000000.0))); _delay((unsign
      +                          ed long)((5500)*(48000000/4000000.0)));
  9611  002818  0E14               	movlw	20
  9612  00281A                     u4337:
  9613  00281A  2EE8               	decfsz	wreg,f,c
  9614  00281C  D7FE               	bra	u4337
  9615  00281E  0E56               	movlw	86
  9616  002820  0100               	movlb	0	; () banked
  9617  002822  6F60               	movwf	??_Lcd_Chr_CP& (0+255),b
  9618  002824  0EB5               	movlw	181
  9619  002826                     u4347:
  9620  002826  2EE8               	decfsz	wreg,f,c
  9621  002828  D7FE               	bra	u4347
  9622  00282A  2F60               	decfsz	??_Lcd_Chr_CP& (0+255),f,b
  9623  00282C  D7FC               	bra	u4347
  9624  00282E  D000               	nop2	
  9625  002830  0012               	return		;funcret
  9626  002832                     __end_of_Lcd_Chr_CP:
  9627                           	opt stack 0
  9628                           tblptru	equ	0xFF8
  9629                           tblptrh	equ	0xFF7
  9630                           tblptrl	equ	0xFF6
  9631                           tablat	equ	0xFF5
  9632                           prodh	equ	0xFF4
  9633                           prodl	equ	0xFF3
  9634                           postinc0	equ	0xFEE
  9635                           wreg	equ	0xFE8
  9636                           indf2	equ	0xFDF
  9637                           postinc2	equ	0xFDE
  9638                           postdec2	equ	0xFDD
  9639                           fsr2h	equ	0xFDA
  9640                           fsr2l	equ	0xFD9
  9641                           status	equ	0xFD8
  9642                           
  9643 ;; *************** function _Lcd_Init *****************
  9644 ;; Defined at:
  9645 ;;		line 46 in file "Library_LCD_2.h"
  9646 ;; Parameters:    Size  Location     Type
  9647 ;;		None
  9648 ;; Auto vars:     Size  Location     Type
  9649 ;;  data            1    4[BANK0 ] unsigned char 
  9650 ;; Return value:  Size  Location     Type
  9651 ;;                  1    wreg      void 
  9652 ;; Registers used:
  9653 ;;		wreg, status,2, status,0, cstack
  9654 ;; Tracked objects:
  9655 ;;		On entry : 0/0
  9656 ;;		On exit  : 0/0
  9657 ;;		Unchanged: 0/0
  9658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9659 ;;      Params:         0       0       0       0       0       0       0       0       0
  9660 ;;      Locals:         0       1       0       0       0       0       0       0       0
  9661 ;;      Temps:          0       1       0       0       0       0       0       0       0
  9662 ;;      Totals:         0       2       0       0       0       0       0       0       0
  9663 ;;Total ram usage:        2 bytes
  9664 ;; Hardware stack levels used:    1
  9665 ;; Hardware stack levels required when called:    4
  9666 ;; This function calls:
  9667 ;;		_Lcd_Cmd
  9668 ;; This function is called by:
  9669 ;;		_main
  9670 ;; This function uses a non-reentrant model
  9671 ;;
  9672                           
  9673                           	psect	text32
  9674  00248A                     __ptext32:
  9675                           	opt stack 0
  9676  00248A                     _Lcd_Init:
  9677                           	opt stack 26
  9678                           
  9679                           ;Library_LCD_2.h: 47: unsigned char data;
  9680                           ;Library_LCD_2.h: 48: TRISDbits.TRISD7 = 0;
  9681                           
  9682                           ;incstack = 0
  9683  00248A  9E95               	bcf	3989,7,c	;volatile
  9684                           
  9685                           ;Library_LCD_2.h: 49: TRISDbits.TRISD6 = 0;
  9686  00248C  9C95               	bcf	3989,6,c	;volatile
  9687                           
  9688                           ;Library_LCD_2.h: 50: TRISDbits.TRISD5 = 0;
  9689  00248E  9A95               	bcf	3989,5,c	;volatile
  9690                           
  9691                           ;Library_LCD_2.h: 51: TRISDbits.TRISD4 = 0;
  9692  002490  9895               	bcf	3989,4,c	;volatile
  9693                           
  9694                           ;Library_LCD_2.h: 52: TRISDbits.TRISD3 = 0;
  9695  002492  9695               	bcf	3989,3,c	;volatile
  9696                           
  9697                           ;Library_LCD_2.h: 53: TRISDbits.TRISD1 = 0;
  9698  002494  9295               	bcf	3989,1,c	;volatile
  9699                           
  9700                           ;Library_LCD_2.h: 54: PORTDbits.RD7 = 0;
  9701  002496  9E83               	bcf	3971,7,c	;volatile
  9702                           
  9703                           ;Library_LCD_2.h: 55: PORTDbits.RD6 = 0;
  9704  002498  9C83               	bcf	3971,6,c	;volatile
  9705                           
  9706                           ;Library_LCD_2.h: 56: PORTDbits.RD5 = 0;
  9707  00249A  9A83               	bcf	3971,5,c	;volatile
  9708                           
  9709                           ;Library_LCD_2.h: 57: PORTDbits.RD4 = 0;
  9710  00249C  9883               	bcf	3971,4,c	;volatile
  9711                           
  9712                           ;Library_LCD_2.h: 58: PORTDbits.RD3 = 0;
  9713  00249E  9683               	bcf	3971,3,c	;volatile
  9714                           
  9715                           ;Library_LCD_2.h: 59: PORTDbits.RD1 = 0;
  9716  0024A0  9283               	bcf	3971,1,c	;volatile
  9717                           
  9718                           ;Library_LCD_2.h: 60: _delay((unsigned long)((5500)*(48000000/4000000.0)));
  9719  0024A2  0E56               	movlw	86
  9720  0024A4  0100               	movlb	0	; () banked
  9721  0024A6  6F63               	movwf	??_Lcd_Init& (0+255),b
  9722  0024A8  0EB5               	movlw	181
  9723  0024AA                     u4357:
  9724  0024AA  2EE8               	decfsz	wreg,f,c
  9725  0024AC  D7FE               	bra	u4357
  9726  0024AE  2F63               	decfsz	??_Lcd_Init& (0+255),f,b
  9727  0024B0  D7FC               	bra	u4357
  9728  0024B2  D000               	nop2	
  9729                           
  9730                           ;Library_LCD_2.h: 61: _delay((unsigned long)((5500)*(48000000/4000000.0)));
  9731  0024B4  0E56               	movlw	86
  9732  0024B6  0100               	movlb	0	; () banked
  9733  0024B8  6F63               	movwf	??_Lcd_Init& (0+255),b
  9734  0024BA  0EB5               	movlw	181
  9735  0024BC                     u4367:
  9736  0024BC  2EE8               	decfsz	wreg,f,c
  9737  0024BE  D7FE               	bra	u4367
  9738  0024C0  2F63               	decfsz	??_Lcd_Init& (0+255),f,b
  9739  0024C2  D7FC               	bra	u4367
  9740  0024C4  D000               	nop2	
  9741                           
  9742                           ;Library_LCD_2.h: 62: _delay((unsigned long)((5500)*(48000000/4000000.0)));
  9743  0024C6  0E56               	movlw	86
  9744  0024C8  0100               	movlb	0	; () banked
  9745  0024CA  6F63               	movwf	??_Lcd_Init& (0+255),b
  9746  0024CC  0EB5               	movlw	181
  9747  0024CE                     u4377:
  9748  0024CE  2EE8               	decfsz	wreg,f,c
  9749  0024D0  D7FE               	bra	u4377
  9750  0024D2  2F63               	decfsz	??_Lcd_Init& (0+255),f,b
  9751  0024D4  D7FC               	bra	u4377
  9752  0024D6  D000               	nop2	
  9753                           
  9754                           ;Library_LCD_2.h: 63: _delay((unsigned long)((5500)*(48000000/4000000.0)));
  9755  0024D8  0E56               	movlw	86
  9756  0024DA  0100               	movlb	0	; () banked
  9757  0024DC  6F63               	movwf	??_Lcd_Init& (0+255),b
  9758  0024DE  0EB5               	movlw	181
  9759  0024E0                     u4387:
  9760  0024E0  2EE8               	decfsz	wreg,f,c
  9761  0024E2  D7FE               	bra	u4387
  9762  0024E4  2F63               	decfsz	??_Lcd_Init& (0+255),f,b
  9763  0024E6  D7FC               	bra	u4387
  9764  0024E8  D000               	nop2	
  9765                           
  9766                           ;Library_LCD_2.h: 64: _delay((unsigned long)((5500)*(48000000/4000000.0)));
  9767  0024EA  0E56               	movlw	86
  9768  0024EC  0100               	movlb	0	; () banked
  9769  0024EE  6F63               	movwf	??_Lcd_Init& (0+255),b
  9770  0024F0  0EB5               	movlw	181
  9771  0024F2                     u4397:
  9772  0024F2  2EE8               	decfsz	wreg,f,c
  9773  0024F4  D7FE               	bra	u4397
  9774  0024F6  2F63               	decfsz	??_Lcd_Init& (0+255),f,b
  9775  0024F8  D7FC               	bra	u4397
  9776  0024FA  D000               	nop2	
  9777                           
  9778                           ;Library_LCD_2.h: 65: _delay((unsigned long)((5500)*(48000000/4000000.0)));
  9779  0024FC  0E56               	movlw	86
  9780  0024FE  0100               	movlb	0	; () banked
  9781  002500  6F63               	movwf	??_Lcd_Init& (0+255),b
  9782  002502  0EB5               	movlw	181
  9783  002504                     u4407:
  9784  002504  2EE8               	decfsz	wreg,f,c
  9785  002506  D7FE               	bra	u4407
  9786  002508  2F63               	decfsz	??_Lcd_Init& (0+255),f,b
  9787  00250A  D7FC               	bra	u4407
  9788  00250C  D000               	nop2	
  9789                           
  9790                           ;Library_LCD_2.h: 66: for(data = 1; data < 4; data ++)
  9791  00250E  0E01               	movlw	1
  9792  002510  0100               	movlb	0	; () banked
  9793  002512  6F64               	movwf	Lcd_Init@data& (0+255),b
  9794  002514  D020               	goto	L6
  9795  002516                     l60:
  9796                           
  9797                           ; BSR set to: 0
  9798                           ;Library_LCD_2.h: 67: {
  9799                           ;Library_LCD_2.h: 68: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits
      +                          .RD4 = 1; PORTDbits.RD3 = 0;
  9800  002516  9E83               	bcf	3971,7,c	;volatile
  9801  002518  9C83               	bcf	3971,6,c	;volatile
  9802  00251A  8A83               	bsf	3971,5,c	;volatile
  9803  00251C  8883               	bsf	3971,4,c	;volatile
  9804  00251E  9683               	bcf	3971,3,c	;volatile
  9805                           
  9806                           ;Library_LCD_2.h: 69: PORTDbits.RD1 = 0; PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits
      +                          .RD5 = 1; PORTDbits.RD4 = 1;
  9807  002520  9283               	bcf	3971,1,c	;volatile
  9808  002522  9E83               	bcf	3971,7,c	;volatile
  9809  002524  9C83               	bcf	3971,6,c	;volatile
  9810  002526  8A83               	bsf	3971,5,c	;volatile
  9811  002528  8883               	bsf	3971,4,c	;volatile
  9812                           
  9813                           ;Library_LCD_2.h: 70: PORTDbits.RD3 = 1; PORTDbits.RD1 = 0;
  9814  00252A  8683               	bsf	3971,3,c	;volatile
  9815  00252C  9283               	bcf	3971,1,c	;volatile
  9816                           
  9817                           ; BSR set to: 0
  9818                           ;Library_LCD_2.h: 71: _delay((unsigned long)((5)*(48000000/4000000.0)));
  9819  00252E  0E14               	movlw	20
  9820  002530                     u4417:
  9821  002530  2EE8               	decfsz	wreg,f,c
  9822  002532  D7FE               	bra	u4417
  9823                           
  9824                           ;Library_LCD_2.h: 72: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits
      +                          .RD4 = 1; PORTDbits.RD3 = 0;
  9825  002534  9E83               	bcf	3971,7,c	;volatile
  9826  002536  9C83               	bcf	3971,6,c	;volatile
  9827  002538  8A83               	bsf	3971,5,c	;volatile
  9828  00253A  8883               	bsf	3971,4,c	;volatile
  9829  00253C  9683               	bcf	3971,3,c	;volatile
  9830                           
  9831                           ;Library_LCD_2.h: 73: PORTDbits.RD1 = 0;
  9832  00253E  9283               	bcf	3971,1,c	;volatile
  9833                           
  9834                           ;Library_LCD_2.h: 74: _delay((unsigned long)((5500)*(48000000/4000000.0)));
  9835  002540  0E56               	movlw	86
  9836  002542  0100               	movlb	0	; () banked
  9837  002544  6F63               	movwf	??_Lcd_Init& (0+255),b
  9838  002546  0EB5               	movlw	181
  9839  002548                     u4427:
  9840  002548  2EE8               	decfsz	wreg,f,c
  9841  00254A  D7FE               	bra	u4427
  9842  00254C  2F63               	decfsz	??_Lcd_Init& (0+255),f,b
  9843  00254E  D7FC               	bra	u4427
  9844  002550  D000               	nop2	
  9845  002552  0100               	movlb	0	; () banked
  9846  002554  2B64               	incf	Lcd_Init@data& (0+255),f,b
  9847  002556                     L6:
  9848  002556  0E03               	movlw	3
  9849  002558  6564               	cpfsgt	Lcd_Init@data& (0+255),b
  9850  00255A  D7DD               	goto	l60
  9851                           
  9852                           ; BSR set to: 0
  9853                           ;Library_LCD_2.h: 75: }
  9854                           ;Library_LCD_2.h: 76: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits
      +                          .RD4 = 0; PORTDbits.RD3 = 0; PORTDbits.RD1 = 0;
  9855  00255C  9E83               	bcf	3971,7,c	;volatile
  9856  00255E  9C83               	bcf	3971,6,c	;volatile
  9857  002560  8A83               	bsf	3971,5,c	;volatile
  9858  002562  9883               	bcf	3971,4,c	;volatile
  9859  002564  9683               	bcf	3971,3,c	;volatile
  9860  002566  9283               	bcf	3971,1,c	;volatile
  9861                           
  9862                           ;Library_LCD_2.h: 77: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits
      +                          .RD4 = 0; PORTDbits.RD3 = 1; PORTDbits.RD1 = 0;
  9863  002568  9E83               	bcf	3971,7,c	;volatile
  9864  00256A  9C83               	bcf	3971,6,c	;volatile
  9865  00256C  8A83               	bsf	3971,5,c	;volatile
  9866  00256E  9883               	bcf	3971,4,c	;volatile
  9867  002570  8683               	bsf	3971,3,c	;volatile
  9868  002572  9283               	bcf	3971,1,c	;volatile
  9869                           
  9870                           ; BSR set to: 0
  9871                           ;Library_LCD_2.h: 78: _delay((unsigned long)((5)*(48000000/4000000.0)));
  9872  002574  0E14               	movlw	20
  9873  002576                     u4437:
  9874  002576  2EE8               	decfsz	wreg,f,c
  9875  002578  D7FE               	bra	u4437
  9876                           
  9877                           ;Library_LCD_2.h: 79: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits
      +                          .RD4 = 0; PORTDbits.RD3 = 0; PORTDbits.RD1 = 0;
  9878  00257A  9E83               	bcf	3971,7,c	;volatile
  9879  00257C  9C83               	bcf	3971,6,c	;volatile
  9880  00257E  8A83               	bsf	3971,5,c	;volatile
  9881  002580  9883               	bcf	3971,4,c	;volatile
  9882  002582  9683               	bcf	3971,3,c	;volatile
  9883  002584  9283               	bcf	3971,1,c	;volatile
  9884                           
  9885                           ;Library_LCD_2.h: 80: _delay((unsigned long)((5500)*(48000000/4000000.0)));
  9886  002586  0E56               	movlw	86
  9887  002588  0100               	movlb	0	; () banked
  9888  00258A  6F63               	movwf	??_Lcd_Init& (0+255),b
  9889  00258C  0EB5               	movlw	181
  9890  00258E                     u4447:
  9891  00258E  2EE8               	decfsz	wreg,f,c
  9892  002590  D7FE               	bra	u4447
  9893  002592  2F63               	decfsz	??_Lcd_Init& (0+255),f,b
  9894  002594  D7FC               	bra	u4447
  9895  002596  D000               	nop2	
  9896                           
  9897                           ;Library_LCD_2.h: 81: data = 40; Lcd_Cmd(data);
  9898  002598  0E28               	movlw	40
  9899  00259A  0100               	movlb	0	; () banked
  9900  00259C  6F64               	movwf	Lcd_Init@data& (0+255),b
  9901                           
  9902                           ; BSR set to: 0
  9903  00259E  5164               	movf	Lcd_Init@data& (0+255),w,b
  9904  0025A0  EC19  F014         	call	_Lcd_Cmd
  9905                           
  9906                           ;Library_LCD_2.h: 82: data = 16; Lcd_Cmd(data);
  9907  0025A4  0E10               	movlw	16
  9908  0025A6  0100               	movlb	0	; () banked
  9909  0025A8  6F64               	movwf	Lcd_Init@data& (0+255),b
  9910                           
  9911                           ; BSR set to: 0
  9912  0025AA  5164               	movf	Lcd_Init@data& (0+255),w,b
  9913  0025AC  EC19  F014         	call	_Lcd_Cmd
  9914                           
  9915                           ;Library_LCD_2.h: 83: data = 1; Lcd_Cmd(data);
  9916  0025B0  0E01               	movlw	1
  9917  0025B2  0100               	movlb	0	; () banked
  9918  0025B4  6F64               	movwf	Lcd_Init@data& (0+255),b
  9919                           
  9920                           ; BSR set to: 0
  9921  0025B6  5164               	movf	Lcd_Init@data& (0+255),w,b
  9922  0025B8  EC19  F014         	call	_Lcd_Cmd
  9923                           
  9924                           ;Library_LCD_2.h: 84: data = 15; Lcd_Cmd(data);
  9925  0025BC  0E0F               	movlw	15
  9926  0025BE  0100               	movlb	0	; () banked
  9927  0025C0  6F64               	movwf	Lcd_Init@data& (0+255),b
  9928                           
  9929                           ; BSR set to: 0
  9930  0025C2  5164               	movf	Lcd_Init@data& (0+255),w,b
  9931  0025C4  EC19  F014         	call	_Lcd_Cmd
  9932  0025C8  0012               	return		;funcret
  9933  0025CA                     __end_of_Lcd_Init:
  9934                           	opt stack 0
  9935                           tblptru	equ	0xFF8
  9936                           tblptrh	equ	0xFF7
  9937                           tblptrl	equ	0xFF6
  9938                           tablat	equ	0xFF5
  9939                           prodh	equ	0xFF4
  9940                           prodl	equ	0xFF3
  9941                           postinc0	equ	0xFEE
  9942                           wreg	equ	0xFE8
  9943                           indf2	equ	0xFDF
  9944                           postinc2	equ	0xFDE
  9945                           postdec2	equ	0xFDD
  9946                           fsr2h	equ	0xFDA
  9947                           fsr2l	equ	0xFD9
  9948                           status	equ	0xFD8
  9949                           
  9950 ;; *************** function _Lcd_Cmd *****************
  9951 ;; Defined at:
  9952 ;;		line 144 in file "Library_LCD_2.h"
  9953 ;; Parameters:    Size  Location     Type
  9954 ;;  data            1    wreg     unsigned char 
  9955 ;; Auto vars:     Size  Location     Type
  9956 ;;  data            1    2[BANK0 ] unsigned char 
  9957 ;; Return value:  Size  Location     Type
  9958 ;;                  1    wreg      void 
  9959 ;; Registers used:
  9960 ;;		wreg, status,2, status,0
  9961 ;; Tracked objects:
  9962 ;;		On entry : 0/0
  9963 ;;		On exit  : 0/0
  9964 ;;		Unchanged: 0/0
  9965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9966 ;;      Params:         0       0       0       0       0       0       0       0       0
  9967 ;;      Locals:         0       1       0       0       0       0       0       0       0
  9968 ;;      Temps:          0       2       0       0       0       0       0       0       0
  9969 ;;      Totals:         0       3       0       0       0       0       0       0       0
  9970 ;;Total ram usage:        3 bytes
  9971 ;; Hardware stack levels used:    1
  9972 ;; Hardware stack levels required when called:    3
  9973 ;; This function calls:
  9974 ;;		Nothing
  9975 ;; This function is called by:
  9976 ;;		_Lcd_Init
  9977 ;;		_Lcd_Out2
  9978 ;;		_main
  9979 ;;		_Lcd_Out
  9980 ;; This function uses a non-reentrant model
  9981 ;;
  9982                           
  9983                           	psect	text33
  9984  002832                     __ptext33:
  9985                           	opt stack 0
  9986  002832                     _Lcd_Cmd:
  9987                           	opt stack 26
  9988                           
  9989                           ;incstack = 0
  9990                           ;Lcd_Cmd@data stored from wreg
  9991  002832  0100               	movlb	0	; () banked
  9992  002834  6F62               	movwf	Lcd_Cmd@data& (0+255),b
  9993                           
  9994                           ;Library_LCD_2.h: 145: PORTDbits.RD3 = 0; PORTDbits.RD1 = 0;
  9995  002836  9683               	bcf	3971,3,c	;volatile
  9996  002838  9283               	bcf	3971,1,c	;volatile
  9997                           
  9998                           ;Library_LCD_2.h: 146: PORTDbits.RD7 = (data & 0b10000000)>>7; PORTDbits.RD6 = (data & 0
      +                          b01000000)>>6;
  9999  00283A  0100               	movlb	0	; () banked
 10000  00283C  6B60               	clrf	??_Lcd_Cmd& (0+255),b
 10001  00283E  AF62               	btfss	Lcd_Cmd@data& (0+255),7,b
 10002  002840  D001               	bra	u2875
 10003  002842  2B60               	incf	??_Lcd_Cmd& (0+255),f,b
 10004  002844                     u2875:
 10005  002844  0E01               	movlw	1
 10006  002846  1760               	andwf	??_Lcd_Cmd& (0+255),f,b
 10007  002848  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
 10008  00284A  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
 10009  00284C  5083               	movf	3971,w,c	;volatile
 10010  00284E  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
 10011  002850  0B7F               	andlw	-129
 10012  002852  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
 10013  002854  6E83               	movwf	3971,c	;volatile
 10014  002856  C062  F060         	movff	Lcd_Cmd@data,??_Lcd_Cmd
 10015  00285A  0E06               	movlw	6
 10016  00285C  6F61               	movwf	(??_Lcd_Cmd+1)& (0+255),b
 10017  00285E                     u2885:
 10018  00285E  90D8               	bcf	status,0,c
 10019  002860  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
 10020  002862  2F61               	decfsz	(??_Lcd_Cmd+1)& (0+255),f,b
 10021  002864  D7FC               	goto	u2885
 10022  002866  0E01               	movlw	1
 10023  002868  1760               	andwf	??_Lcd_Cmd& (0+255),f,b
 10024  00286A  3B60               	swapf	??_Lcd_Cmd& (0+255),f,b
 10025  00286C  4760               	rlncf	??_Lcd_Cmd& (0+255),f,b
 10026  00286E  4760               	rlncf	??_Lcd_Cmd& (0+255),f,b
 10027  002870  5083               	movf	3971,w,c	;volatile
 10028  002872  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
 10029  002874  0BBF               	andlw	-65
 10030  002876  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
 10031  002878  6E83               	movwf	3971,c	;volatile
 10032                           
 10033                           ;Library_LCD_2.h: 147: PORTDbits.RD5 = (data & 0b00100000)>>5; PORTDbits.RD4 = (data & 0
      +                          b00010000)>>4;
 10034  00287A  C062  F060         	movff	Lcd_Cmd@data,??_Lcd_Cmd
 10035  00287E  0E05               	movlw	5
 10036  002880  6F61               	movwf	(??_Lcd_Cmd+1)& (0+255),b
 10037  002882                     u2895:
 10038  002882  90D8               	bcf	status,0,c
 10039  002884  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
 10040  002886  2F61               	decfsz	(??_Lcd_Cmd+1)& (0+255),f,b
 10041  002888  D7FC               	goto	u2895
 10042  00288A  0E01               	movlw	1
 10043  00288C  1760               	andwf	??_Lcd_Cmd& (0+255),f,b
 10044  00288E  3B60               	swapf	??_Lcd_Cmd& (0+255),f,b
 10045  002890  4760               	rlncf	??_Lcd_Cmd& (0+255),f,b
 10046  002892  5083               	movf	3971,w,c	;volatile
 10047  002894  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
 10048  002896  0BDF               	andlw	-33
 10049  002898  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
 10050  00289A  6E83               	movwf	3971,c	;volatile
 10051  00289C  C062  F060         	movff	Lcd_Cmd@data,??_Lcd_Cmd
 10052  0028A0  3B60               	swapf	??_Lcd_Cmd& (0+255),f,b
 10053  0028A2  0E0F               	movlw	15
 10054  0028A4  1760               	andwf	??_Lcd_Cmd& (0+255),f,b
 10055  0028A6  0E01               	movlw	1
 10056  0028A8  1760               	andwf	??_Lcd_Cmd& (0+255),f,b
 10057  0028AA  3B60               	swapf	??_Lcd_Cmd& (0+255),f,b
 10058  0028AC  5083               	movf	3971,w,c	;volatile
 10059  0028AE  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
 10060  0028B0  0BEF               	andlw	-17
 10061  0028B2  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
 10062  0028B4  6E83               	movwf	3971,c	;volatile
 10063                           
 10064                           ; BSR set to: 0
 10065                           ;Library_LCD_2.h: 148: _delay(10);
 10066  0028B6  0E03               	movlw	3
 10067  0028B8                     u4457:
 10068  0028B8  2EE8               	decfsz	wreg,f,c
 10069  0028BA  D7FE               	bra	u4457
 10070  0028BC  F000               	nop	
 10071                           
 10072                           ;Library_LCD_2.h: 149: PORTDbits.RD3 = 1; _delay((unsigned long)((5)*(48000000/4000000.0
      +                          ))); PORTDbits.RD3 = 0;
 10073  0028BE  8683               	bsf	3971,3,c	;volatile
 10074  0028C0  0E14               	movlw	20
 10075  0028C2                     u4467:
 10076  0028C2  2EE8               	decfsz	wreg,f,c
 10077  0028C4  D7FE               	bra	u4467
 10078  0028C6  9683               	bcf	3971,3,c	;volatile
 10079                           
 10080                           ;Library_LCD_2.h: 150: PORTDbits.RD7 = (data & 0b00001000)>>3; PORTDbits.RD6 = (data & 0
      +                          b00000100)>>2;
 10081  0028C8  C062  F060         	movff	Lcd_Cmd@data,??_Lcd_Cmd
 10082  0028CC  0100               	movlb	0	; () banked
 10083  0028CE  90D8               	bcf	status,0,c
 10084  0028D0  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
 10085  0028D2  90D8               	bcf	status,0,c
 10086  0028D4  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
 10087  0028D6  90D8               	bcf	status,0,c
 10088  0028D8  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
 10089  0028DA  0E01               	movlw	1
 10090  0028DC  1760               	andwf	??_Lcd_Cmd& (0+255),f,b
 10091  0028DE  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
 10092  0028E0  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
 10093  0028E2  5083               	movf	3971,w,c	;volatile
 10094  0028E4  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
 10095  0028E6  0B7F               	andlw	-129
 10096  0028E8  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
 10097  0028EA  6E83               	movwf	3971,c	;volatile
 10098  0028EC  C062  F060         	movff	Lcd_Cmd@data,??_Lcd_Cmd
 10099  0028F0  90D8               	bcf	status,0,c
 10100  0028F2  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
 10101  0028F4  90D8               	bcf	status,0,c
 10102  0028F6  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
 10103  0028F8  0E01               	movlw	1
 10104  0028FA  1760               	andwf	??_Lcd_Cmd& (0+255),f,b
 10105  0028FC  3B60               	swapf	??_Lcd_Cmd& (0+255),f,b
 10106  0028FE  4760               	rlncf	??_Lcd_Cmd& (0+255),f,b
 10107  002900  4760               	rlncf	??_Lcd_Cmd& (0+255),f,b
 10108  002902  5083               	movf	3971,w,c	;volatile
 10109  002904  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
 10110  002906  0BBF               	andlw	-65
 10111  002908  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
 10112  00290A  6E83               	movwf	3971,c	;volatile
 10113                           
 10114                           ;Library_LCD_2.h: 151: PORTDbits.RD5 = (data & 0b00000010)>>1; PORTDbits.RD4 = (data & 0
      +                          b00000001);
 10115  00290C  C062  F060         	movff	Lcd_Cmd@data,??_Lcd_Cmd
 10116  002910  90D8               	bcf	status,0,c
 10117  002912  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
 10118  002914  0E01               	movlw	1
 10119  002916  1760               	andwf	??_Lcd_Cmd& (0+255),f,b
 10120  002918  3B60               	swapf	??_Lcd_Cmd& (0+255),f,b
 10121  00291A  4760               	rlncf	??_Lcd_Cmd& (0+255),f,b
 10122  00291C  5083               	movf	3971,w,c	;volatile
 10123  00291E  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
 10124  002920  0BDF               	andlw	-33
 10125  002922  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
 10126  002924  6E83               	movwf	3971,c	;volatile
 10127  002926  C062  F060         	movff	Lcd_Cmd@data,??_Lcd_Cmd
 10128  00292A  0E01               	movlw	1
 10129  00292C  1760               	andwf	??_Lcd_Cmd& (0+255),f,b
 10130  00292E  3B60               	swapf	??_Lcd_Cmd& (0+255),f,b
 10131  002930  5083               	movf	3971,w,c	;volatile
 10132  002932  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
 10133  002934  0BEF               	andlw	-17
 10134  002936  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
 10135  002938  6E83               	movwf	3971,c	;volatile
 10136                           
 10137                           ; BSR set to: 0
 10138                           ;Library_LCD_2.h: 152: _delay(10);
 10139  00293A  0E03               	movlw	3
 10140  00293C                     u4477:
 10141  00293C  2EE8               	decfsz	wreg,f,c
 10142  00293E  D7FE               	bra	u4477
 10143  002940  F000               	nop	
 10144                           
 10145                           ;Library_LCD_2.h: 153: PORTDbits.RD3 = 1; _delay((unsigned long)((5)*(48000000/4000000.0
      +                          ))); PORTDbits.RD3 = 0;
 10146  002942  8683               	bsf	3971,3,c	;volatile
 10147  002944  0E14               	movlw	20
 10148  002946                     u4487:
 10149  002946  2EE8               	decfsz	wreg,f,c
 10150  002948  D7FE               	bra	u4487
 10151  00294A  9683               	bcf	3971,3,c	;volatile
 10152                           
 10153                           ;Library_LCD_2.h: 154: _delay((unsigned long)((5500)*(48000000/4000000.0)));
 10154  00294C  0E56               	movlw	86
 10155  00294E  0100               	movlb	0	; () banked
 10156  002950  6F60               	movwf	??_Lcd_Cmd& (0+255),b
 10157  002952  0EB5               	movlw	181
 10158  002954                     u4497:
 10159  002954  2EE8               	decfsz	wreg,f,c
 10160  002956  D7FE               	bra	u4497
 10161  002958  2F60               	decfsz	??_Lcd_Cmd& (0+255),f,b
 10162  00295A  D7FC               	bra	u4497
 10163  00295C  D000               	nop2	
 10164  00295E  0012               	return		;funcret
 10165  002960                     __end_of_Lcd_Cmd:
 10166                           	opt stack 0
 10167                           tblptru	equ	0xFF8
 10168                           tblptrh	equ	0xFF7
 10169                           tblptrl	equ	0xFF6
 10170                           tablat	equ	0xFF5
 10171                           prodh	equ	0xFF4
 10172                           prodl	equ	0xFF3
 10173                           postinc0	equ	0xFEE
 10174                           wreg	equ	0xFE8
 10175                           indf2	equ	0xFDF
 10176                           postinc2	equ	0xFDE
 10177                           postdec2	equ	0xFDD
 10178                           fsr2h	equ	0xFDA
 10179                           fsr2l	equ	0xFD9
 10180                           status	equ	0xFD8
 10181                           
 10182 ;; *************** function _comparar *****************
 10183 ;; Defined at:
 10184 ;;		line 94 in file "main_014_Practice_CCP Comparacion_ADC.c"
 10185 ;; Parameters:    Size  Location     Type
 10186 ;;		None
 10187 ;; Auto vars:     Size  Location     Type
 10188 ;;		None
 10189 ;; Return value:  Size  Location     Type
 10190 ;;                  1    wreg      void 
 10191 ;; Registers used:
 10192 ;;		wreg, status,2, status,0, cstack
 10193 ;; Tracked objects:
 10194 ;;		On entry : 0/0
 10195 ;;		On exit  : 0/0
 10196 ;;		Unchanged: 0/0
 10197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10198 ;;      Params:         0       0       0       0       0       0       0       0       0
 10199 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10200 ;;      Temps:         18       0       0       0       0       0       0       0       0
 10201 ;;      Totals:        18       0       0       0       0       0       0       0       0
 10202 ;;Total ram usage:       18 bytes
 10203 ;; Hardware stack levels used:    1
 10204 ;; Hardware stack levels required when called:    2
 10205 ;; This function calls:
 10206 ;;		i2___ftdiv
 10207 ;;		i2___ftmul
 10208 ;;		i2___lwtoft
 10209 ;; This function is called by:
 10210 ;;		Interrupt level 2
 10211 ;; This function uses a non-reentrant model
 10212 ;;
 10213                           
 10214                           	psect	intcode
 10215  000008                     __pintcode:
 10216                           	opt stack 0
 10217  000008                     _comparar:
 10218                           	opt stack 23
 10219                           
 10220                           ;incstack = 0
 10221  000008  8255               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10222  00000A  ED45  F015         	call	int_func,f	;refresh shadow registers
 10223                           tblptru	equ	0xFF8
 10224                           tblptrh	equ	0xFF7
 10225                           tblptrl	equ	0xFF6
 10226                           tablat	equ	0xFF5
 10227                           prodh	equ	0xFF4
 10228                           prodl	equ	0xFF3
 10229                           postinc0	equ	0xFEE
 10230                           wreg	equ	0xFE8
 10231                           indf2	equ	0xFDF
 10232                           postinc2	equ	0xFDE
 10233                           postdec2	equ	0xFDD
 10234                           fsr2h	equ	0xFDA
 10235                           fsr2l	equ	0xFD9
 10236                           status	equ	0xFD8
 10237                           
 10238                           	psect	intcode_body
 10239  002A8A                     __pintcode_body:
 10240                           	opt stack 23
 10241  002A8A                     int_func:
 10242                           	opt stack 23
 10243  002A8A  0006               	pop		; remove dummy address from shadow register refresh
 10244  002A8C  CFFA F02A          	movff	pclath,??_comparar
 10245  002A90  CFFB F02B          	movff	pclatu,??_comparar+1
 10246  002A94  CFE9 F02C          	movff	fsr0l,??_comparar+2
 10247  002A98  CFEA F02D          	movff	fsr0h,??_comparar+3
 10248  002A9C  CFE1 F02E          	movff	fsr1l,??_comparar+4
 10249  002AA0  CFE2 F02F          	movff	fsr1h,??_comparar+5
 10250  002AA4  CFD9 F030          	movff	fsr2l,??_comparar+6
 10251  002AA8  CFDA F031          	movff	fsr2h,??_comparar+7
 10252  002AAC  CFF3 F032          	movff	prodl,??_comparar+8
 10253  002AB0  CFF4 F033          	movff	prodh,??_comparar+9
 10254  002AB4  CFF6 F034          	movff	tblptrl,??_comparar+10
 10255  002AB8  CFF7 F035          	movff	tblptrh,??_comparar+11
 10256  002ABC  CFF8 F036          	movff	tblptru,??_comparar+12
 10257  002AC0  CFF5 F037          	movff	tablat,??_comparar+13
 10258  002AC4  C055  F038         	movff	btemp,??_comparar+14
 10259  002AC8  C056  F039         	movff	btemp+1,??_comparar+15
 10260  002ACC  C057  F03A         	movff	btemp+2,??_comparar+16
 10261  002AD0  C058  F03B         	movff	btemp+3,??_comparar+17
 10262                           
 10263                           ;main_014_Practice_CCP Comparacion_ADC.c: 96: INTCONbits.GIE = 0;
 10264  002AD4  9EF2               	bcf	intcon,7,c	;volatile
 10265                           
 10266                           ;main_014_Practice_CCP Comparacion_ADC.c: 97: if(CCP1IF == 1)
 10267  002AD6  A49E               	btfss	3998,2,c	;volatile
 10268  002AD8  D036               	goto	i2l109
 10269                           
 10270                           ;main_014_Practice_CCP Comparacion_ADC.c: 98: {
 10271                           ;main_014_Practice_CCP Comparacion_ADC.c: 99: T1CONbits.TMR1ON = 0;
 10272  002ADA  90CD               	bcf	4045,0,c	;volatile
 10273                           
 10274                           ;main_014_Practice_CCP Comparacion_ADC.c: 100: PIR1bits.CCP1IF = 0;
 10275  002ADC  949E               	bcf	3998,2,c	;volatile
 10276                           
 10277                           ;main_014_Practice_CCP Comparacion_ADC.c: 102: adc1 = ADRESH;
 10278  002ADE  CFC4 F053          	movff	4036,_adc1	;volatile
 10279  002AE2  6A54               	clrf	_adc1+1,c
 10280                           
 10281                           ;main_014_Practice_CCP Comparacion_ADC.c: 103: adc1 = adc1<<8;
 10282  002AE4  5053               	movf	_adc1,w,c
 10283  002AE6  6E54               	movwf	_adc1+1,c
 10284  002AE8  6A53               	clrf	_adc1,c
 10285                           
 10286                           ;main_014_Practice_CCP Comparacion_ADC.c: 104: adc1 = adc1 + ADRESL;
 10287  002AEA  50C3               	movf	4035,w,c	;volatile
 10288  002AEC  2453               	addwf	_adc1,w,c
 10289  002AEE  6E53               	movwf	_adc1,c
 10290  002AF0  0E00               	movlw	0
 10291  002AF2  2054               	addwfc	_adc1+1,w,c
 10292  002AF4  6E54               	movwf	_adc1+1,c
 10293                           
 10294                           ;main_014_Practice_CCP Comparacion_ADC.c: 106: voltaje = adc1 * 4.72 /1024.0;
 10295  002AF6  0E0A               	movlw	10
 10296  002AF8  6E0F               	movwf	i2___ftmul@f2,c
 10297  002AFA  0E97               	movlw	151
 10298  002AFC  6E10               	movwf	i2___ftmul@f2+1,c
 10299  002AFE  0E40               	movlw	64
 10300  002B00  6E11               	movwf	i2___ftmul@f2+2,c
 10301  002B02  C053  F009         	movff	_adc1,i2___lwtoft@c
 10302  002B06  C054  F00A         	movff	_adc1+1,i2___lwtoft@c+1
 10303  002B0A  ECD0  F01C         	call	i2___lwtoft	;wreg free
 10304  002B0E  C009  F00C         	movff	?i2___lwtoft,i2___ftmul@f1
 10305  002B12  C00A  F00D         	movff	?i2___lwtoft+1,i2___ftmul@f1+1
 10306  002B16  C00B  F00E         	movff	?i2___lwtoft+2,i2___ftmul@f1+2
 10307  002B1A  ECC0  F016         	call	i2___ftmul	;wreg free
 10308  002B1E  C00C  F01B         	movff	?i2___ftmul,i2___ftdiv@f1
 10309  002B22  C00D  F01C         	movff	?i2___ftmul+1,i2___ftdiv@f1+1
 10310  002B26  C00E  F01D         	movff	?i2___ftmul+2,i2___ftdiv@f1+2
 10311  002B2A  0E00               	movlw	0
 10312  002B2C  6E1E               	movwf	i2___ftdiv@f2,c
 10313  002B2E  0E80               	movlw	128
 10314  002B30  6E1F               	movwf	i2___ftdiv@f2+1,c
 10315  002B32  0E44               	movlw	68
 10316  002B34  6E20               	movwf	i2___ftdiv@f2+2,c
 10317  002B36  ECAE  F017         	call	i2___ftdiv	;wreg free
 10318  002B3A  C01B  F050         	movff	?i2___ftdiv,_voltaje
 10319  002B3E  C01C  F051         	movff	?i2___ftdiv+1,_voltaje+1
 10320  002B42  C01D  F052         	movff	?i2___ftdiv+2,_voltaje+2
 10321  002B46                     i2l109:
 10322  002B46  C03B  F058         	movff	??_comparar+17,btemp+3
 10323  002B4A  C03A  F057         	movff	??_comparar+16,btemp+2
 10324  002B4E  C039  F056         	movff	??_comparar+15,btemp+1
 10325  002B52  C038  F055         	movff	??_comparar+14,btemp
 10326  002B56  C037  FFF5         	movff	??_comparar+13,tablat
 10327  002B5A  C036  FFF8         	movff	??_comparar+12,tblptru
 10328  002B5E  C035  FFF7         	movff	??_comparar+11,tblptrh
 10329  002B62  C034  FFF6         	movff	??_comparar+10,tblptrl
 10330  002B66  C033  FFF4         	movff	??_comparar+9,prodh
 10331  002B6A  C032  FFF3         	movff	??_comparar+8,prodl
 10332  002B6E  C031  FFDA         	movff	??_comparar+7,fsr2h
 10333  002B72  C030  FFD9         	movff	??_comparar+6,fsr2l
 10334  002B76  C02F  FFE2         	movff	??_comparar+5,fsr1h
 10335  002B7A  C02E  FFE1         	movff	??_comparar+4,fsr1l
 10336  002B7E  C02D  FFEA         	movff	??_comparar+3,fsr0h
 10337  002B82  C02C  FFE9         	movff	??_comparar+2,fsr0l
 10338  002B86  C02B  FFFB         	movff	??_comparar+1,pclatu
 10339  002B8A  C02A  FFFA         	movff	??_comparar,pclath
 10340  002B8E  9255               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10341  002B90  0011               	retfie		f
 10342  002B92                     __end_of_comparar:
 10343                           	opt stack 0
 10344                           pclatu	equ	0xFFB
 10345                           pclath	equ	0xFFA
 10346                           tblptru	equ	0xFF8
 10347                           tblptrh	equ	0xFF7
 10348                           tblptrl	equ	0xFF6
 10349                           tablat	equ	0xFF5
 10350                           prodh	equ	0xFF4
 10351                           prodl	equ	0xFF3
 10352                           intcon	equ	0xFF2
 10353                           postinc0	equ	0xFEE
 10354                           fsr0h	equ	0xFEA
 10355                           fsr0l	equ	0xFE9
 10356                           wreg	equ	0xFE8
 10357                           fsr1h	equ	0xFE2
 10358                           fsr1l	equ	0xFE1
 10359                           indf2	equ	0xFDF
 10360                           postinc2	equ	0xFDE
 10361                           postdec2	equ	0xFDD
 10362                           fsr2h	equ	0xFDA
 10363                           fsr2l	equ	0xFD9
 10364                           status	equ	0xFD8
 10365                           
 10366 ;; *************** function i2___lwtoft *****************
 10367 ;; Defined at:
 10368 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
 10369 ;; Parameters:    Size  Location     Type
 10370 ;;  c               2    8[COMRAM] unsigned int 
 10371 ;; Auto vars:     Size  Location     Type
 10372 ;;		None
 10373 ;; Return value:  Size  Location     Type
 10374 ;;                  3    8[COMRAM] float 
 10375 ;; Registers used:
 10376 ;;		wreg, status,2, status,0, cstack
 10377 ;; Tracked objects:
 10378 ;;		On entry : 0/0
 10379 ;;		On exit  : 0/0
 10380 ;;		Unchanged: 0/0
 10381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10382 ;;      Params:         3       0       0       0       0       0       0       0       0
 10383 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10384 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10385 ;;      Totals:         3       0       0       0       0       0       0       0       0
 10386 ;;Total ram usage:        3 bytes
 10387 ;; Hardware stack levels used:    1
 10388 ;; Hardware stack levels required when called:    1
 10389 ;; This function calls:
 10390 ;;		i2___ftpack
 10391 ;; This function is called by:
 10392 ;;		_comparar
 10393 ;; This function uses a non-reentrant model
 10394 ;;
 10395                           
 10396                           	psect	text35
 10397  0039A0                     __ptext35:
 10398                           	opt stack 0
 10399  0039A0                     i2___lwtoft:
 10400                           	opt stack 23
 10401                           
 10402                           ;incstack = 0
 10403  0039A0  C009  F001         	movff	i2___lwtoft@c,i2___ftpack@arg
 10404  0039A4  C00A  F002         	movff	i2___lwtoft@c+1,i2___ftpack@arg+1
 10405  0039A8  6A03               	clrf	i2___ftpack@arg+2,c
 10406  0039AA  0E8E               	movlw	142
 10407  0039AC  6E04               	movwf	i2___ftpack@exp,c
 10408  0039AE  0E00               	movlw	0
 10409  0039B0  6E05               	movwf	i2___ftpack@sign,c
 10410  0039B2  ECB2  F019         	call	i2___ftpack	;wreg free
 10411  0039B6  C001  F009         	movff	?i2___ftpack,?i2___lwtoft
 10412  0039BA  C002  F00A         	movff	?i2___ftpack+1,?i2___lwtoft+1
 10413  0039BE  C003  F00B         	movff	?i2___ftpack+2,?i2___lwtoft+2
 10414  0039C2  0012               	return	
 10415  0039C4                     __end_ofi2___lwtoft:
 10416                           	opt stack 0
 10417                           pclatu	equ	0xFFB
 10418                           pclath	equ	0xFFA
 10419                           tblptru	equ	0xFF8
 10420                           tblptrh	equ	0xFF7
 10421                           tblptrl	equ	0xFF6
 10422                           tablat	equ	0xFF5
 10423                           prodh	equ	0xFF4
 10424                           prodl	equ	0xFF3
 10425                           intcon	equ	0xFF2
 10426                           postinc0	equ	0xFEE
 10427                           fsr0h	equ	0xFEA
 10428                           fsr0l	equ	0xFE9
 10429                           wreg	equ	0xFE8
 10430                           fsr1h	equ	0xFE2
 10431                           fsr1l	equ	0xFE1
 10432                           indf2	equ	0xFDF
 10433                           postinc2	equ	0xFDE
 10434                           postdec2	equ	0xFDD
 10435                           fsr2h	equ	0xFDA
 10436                           fsr2l	equ	0xFD9
 10437                           status	equ	0xFD8
 10438                           
 10439 ;; *************** function i2___ftmul *****************
 10440 ;; Defined at:
 10441 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 10442 ;; Parameters:    Size  Location     Type
 10443 ;;  f1              3   11[COMRAM] float 
 10444 ;;  f2              3   14[COMRAM] float 
 10445 ;; Auto vars:     Size  Location     Type
 10446 ;;  __ftmul         3   21[COMRAM] unsigned um
 10447 ;;  __ftmul         1   25[COMRAM] unsigned char 
 10448 ;;  __ftmul         1   24[COMRAM] unsigned char 
 10449 ;;  __ftmul         1   20[COMRAM] unsigned char 
 10450 ;; Return value:  Size  Location     Type
 10451 ;;                  3   11[COMRAM] float 
 10452 ;; Registers used:
 10453 ;;		wreg, status,2, status,0, cstack
 10454 ;; Tracked objects:
 10455 ;;		On entry : 0/0
 10456 ;;		On exit  : 0/0
 10457 ;;		Unchanged: 0/0
 10458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10459 ;;      Params:         6       0       0       0       0       0       0       0       0
 10460 ;;      Locals:         6       0       0       0       0       0       0       0       0
 10461 ;;      Temps:          3       0       0       0       0       0       0       0       0
 10462 ;;      Totals:        15       0       0       0       0       0       0       0       0
 10463 ;;Total ram usage:       15 bytes
 10464 ;; Hardware stack levels used:    1
 10465 ;; Hardware stack levels required when called:    1
 10466 ;; This function calls:
 10467 ;;		i2___ftpack
 10468 ;; This function is called by:
 10469 ;;		_comparar
 10470 ;; This function uses a non-reentrant model
 10471 ;;
 10472                           
 10473                           	psect	text36
 10474  002D80                     __ptext36:
 10475                           	opt stack 0
 10476  002D80                     i2___ftmul:
 10477                           	opt stack 23
 10478                           
 10479                           ;incstack = 0
 10480  002D80  C00E  F012         	movff	i2___ftmul@f1+2,??i2___ftmul
 10481  002D84  6A13               	clrf	(??i2___ftmul+1)& (0+255),c
 10482  002D86  6A14               	clrf	(??i2___ftmul+2)& (0+255),c
 10483  002D88  340D               	rlcf	i2___ftmul@f1+1,w,c
 10484  002D8A  3612               	rlcf	??i2___ftmul& (0+255),f,c
 10485  002D8C  E301               	bnc	u409_41
 10486  002D8E  8013               	bsf	(??i2___ftmul+1)& (0+255),0,c
 10487  002D90                     u409_41:
 10488  002D90  5012               	movf	??i2___ftmul,w,c
 10489  002D92  6E15               	movwf	i2___ftmul@exp,c
 10490  002D94  5015               	movf	i2___ftmul@exp,w,c
 10491  002D96  A4D8               	btfss	status,2,c
 10492  002D98  D007               	goto	i2l604
 10493  002D9A  0E00               	movlw	0
 10494  002D9C  6E0C               	movwf	?i2___ftmul,c
 10495  002D9E  0E00               	movlw	0
 10496  002DA0  6E0D               	movwf	?i2___ftmul+1,c
 10497  002DA2  0E00               	movlw	0
 10498  002DA4  6E0E               	movwf	?i2___ftmul+2,c
 10499  002DA6  0012               	return	
 10500  002DA8                     i2l604:
 10501  002DA8  C011  F012         	movff	i2___ftmul@f2+2,??i2___ftmul
 10502  002DAC  6A13               	clrf	(??i2___ftmul+1)& (0+255),c
 10503  002DAE  6A14               	clrf	(??i2___ftmul+2)& (0+255),c
 10504  002DB0  3410               	rlcf	i2___ftmul@f2+1,w,c
 10505  002DB2  3612               	rlcf	??i2___ftmul& (0+255),f,c
 10506  002DB4  E301               	bnc	u411_41
 10507  002DB6  8013               	bsf	(??i2___ftmul+1)& (0+255),0,c
 10508  002DB8                     u411_41:
 10509  002DB8  5012               	movf	??i2___ftmul,w,c
 10510  002DBA  6E1A               	movwf	i2___ftmul@sign,c
 10511  002DBC  501A               	movf	i2___ftmul@sign,w,c
 10512  002DBE  A4D8               	btfss	status,2,c
 10513  002DC0  D007               	goto	i2l606
 10514  002DC2  0E00               	movlw	0
 10515  002DC4  6E0C               	movwf	?i2___ftmul,c
 10516  002DC6  0E00               	movlw	0
 10517  002DC8  6E0D               	movwf	?i2___ftmul+1,c
 10518  002DCA  0E00               	movlw	0
 10519  002DCC  6E0E               	movwf	?i2___ftmul+2,c
 10520  002DCE  0012               	return	
 10521  002DD0                     i2l606:
 10522  002DD0  501A               	movf	i2___ftmul@sign,w,c
 10523  002DD2  0F7B               	addlw	123
 10524  002DD4  2615               	addwf	i2___ftmul@exp,f,c
 10525  002DD6  C00E  F01A         	movff	i2___ftmul@f1+2,i2___ftmul@sign
 10526  002DDA  5011               	movf	i2___ftmul@f2+2,w,c
 10527  002DDC  1A1A               	xorwf	i2___ftmul@sign,f,c
 10528  002DDE  0E80               	movlw	128
 10529  002DE0  161A               	andwf	i2___ftmul@sign,f,c
 10530  002DE2  8E0D               	bsf	i2___ftmul@f1+1,7,c
 10531  002DE4  8E10               	bsf	i2___ftmul@f2+1,7,c
 10532  002DE6  0EFF               	movlw	255
 10533  002DE8  160F               	andwf	i2___ftmul@f2,f,c
 10534  002DEA  0EFF               	movlw	255
 10535  002DEC  1610               	andwf	i2___ftmul@f2+1,f,c
 10536  002DEE  0E00               	movlw	0
 10537  002DF0  1611               	andwf	i2___ftmul@f2+2,f,c
 10538  002DF2  0E00               	movlw	0
 10539  002DF4  6E16               	movwf	i2___ftmul@f3_as_product,c
 10540  002DF6  0E00               	movlw	0
 10541  002DF8  6E17               	movwf	i2___ftmul@f3_as_product+1,c
 10542  002DFA  0E00               	movlw	0
 10543  002DFC  6E18               	movwf	i2___ftmul@f3_as_product+2,c
 10544  002DFE  0E07               	movlw	7
 10545  002E00  6E19               	movwf	i2___ftmul@cntr,c
 10546  002E02  A00C               	btfss	i2___ftmul@f1,0,c
 10547  002E04  D006               	goto	i2l608
 10548  002E06  500F               	movf	i2___ftmul@f2,w,c
 10549  002E08  2616               	addwf	i2___ftmul@f3_as_product,f,c
 10550  002E0A  5010               	movf	i2___ftmul@f2+1,w,c
 10551  002E0C  2217               	addwfc	i2___ftmul@f3_as_product+1,f,c
 10552  002E0E  5011               	movf	i2___ftmul@f2+2,w,c
 10553  002E10  2218               	addwfc	i2___ftmul@f3_as_product+2,f,c
 10554  002E12                     i2l608:
 10555  002E12  90D8               	bcf	status,0,c
 10556  002E14  320E               	rrcf	i2___ftmul@f1+2,f,c
 10557  002E16  320D               	rrcf	i2___ftmul@f1+1,f,c
 10558  002E18  320C               	rrcf	i2___ftmul@f1,f,c
 10559  002E1A  90D8               	bcf	status,0,c
 10560  002E1C  360F               	rlcf	i2___ftmul@f2,f,c
 10561  002E1E  3610               	rlcf	i2___ftmul@f2+1,f,c
 10562  002E20  3611               	rlcf	i2___ftmul@f2+2,f,c
 10563  002E22  2E19               	decfsz	i2___ftmul@cntr,f,c
 10564  002E24  D7EE               	goto	i2l607
 10565  002E26  0E09               	movlw	9
 10566  002E28  6E19               	movwf	i2___ftmul@cntr,c
 10567  002E2A  A00C               	btfss	i2___ftmul@f1,0,c
 10568  002E2C  D006               	goto	i2l611
 10569  002E2E  500F               	movf	i2___ftmul@f2,w,c
 10570  002E30  2616               	addwf	i2___ftmul@f3_as_product,f,c
 10571  002E32  5010               	movf	i2___ftmul@f2+1,w,c
 10572  002E34  2217               	addwfc	i2___ftmul@f3_as_product+1,f,c
 10573  002E36  5011               	movf	i2___ftmul@f2+2,w,c
 10574  002E38  2218               	addwfc	i2___ftmul@f3_as_product+2,f,c
 10575  002E3A                     i2l611:
 10576  002E3A  90D8               	bcf	status,0,c
 10577  002E3C  320E               	rrcf	i2___ftmul@f1+2,f,c
 10578  002E3E  320D               	rrcf	i2___ftmul@f1+1,f,c
 10579  002E40  320C               	rrcf	i2___ftmul@f1,f,c
 10580  002E42  90D8               	bcf	status,0,c
 10581  002E44  3218               	rrcf	i2___ftmul@f3_as_product+2,f,c
 10582  002E46  3217               	rrcf	i2___ftmul@f3_as_product+1,f,c
 10583  002E48  3216               	rrcf	i2___ftmul@f3_as_product,f,c
 10584  002E4A  2E19               	decfsz	i2___ftmul@cntr,f,c
 10585  002E4C  D7EE               	goto	i2l610
 10586  002E4E  C016  F001         	movff	i2___ftmul@f3_as_product,i2___ftpack@arg
 10587  002E52  C017  F002         	movff	i2___ftmul@f3_as_product+1,i2___ftpack@arg+1
 10588  002E56  C018  F003         	movff	i2___ftmul@f3_as_product+2,i2___ftpack@arg+2
 10589  002E5A  C015  F004         	movff	i2___ftmul@exp,i2___ftpack@exp
 10590  002E5E  C01A  F005         	movff	i2___ftmul@sign,i2___ftpack@sign
 10591  002E62  ECB2  F019         	call	i2___ftpack	;wreg free
 10592  002E66  C001  F00C         	movff	?i2___ftpack,?i2___ftmul
 10593  002E6A  C002  F00D         	movff	?i2___ftpack+1,?i2___ftmul+1
 10594  002E6E  C003  F00E         	movff	?i2___ftpack+2,?i2___ftmul+2
 10595  002E72  0012               	return	
 10596  002E74                     __end_ofi2___ftmul:
 10597                           	opt stack 0
 10598                           pclatu	equ	0xFFB
 10599                           pclath	equ	0xFFA
 10600                           tblptru	equ	0xFF8
 10601                           tblptrh	equ	0xFF7
 10602                           tblptrl	equ	0xFF6
 10603                           tablat	equ	0xFF5
 10604                           prodh	equ	0xFF4
 10605                           prodl	equ	0xFF3
 10606                           intcon	equ	0xFF2
 10607                           postinc0	equ	0xFEE
 10608                           fsr0h	equ	0xFEA
 10609                           fsr0l	equ	0xFE9
 10610                           wreg	equ	0xFE8
 10611                           fsr1h	equ	0xFE2
 10612                           fsr1l	equ	0xFE1
 10613                           indf2	equ	0xFDF
 10614                           postinc2	equ	0xFDE
 10615                           postdec2	equ	0xFDD
 10616                           fsr2h	equ	0xFDA
 10617                           fsr2l	equ	0xFD9
 10618                           status	equ	0xFD8
 10619                           
 10620 ;; *************** function i2___ftdiv *****************
 10621 ;; Defined at:
 10622 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 10623 ;; Parameters:    Size  Location     Type
 10624 ;;  f1              3   26[COMRAM] float 
 10625 ;;  f2              3   29[COMRAM] float 
 10626 ;; Auto vars:     Size  Location     Type
 10627 ;;  __ftdiv         3   36[COMRAM] float 
 10628 ;;  __ftdiv         1   40[COMRAM] unsigned char 
 10629 ;;  __ftdiv         1   39[COMRAM] unsigned char 
 10630 ;;  __ftdiv         1   35[COMRAM] unsigned char 
 10631 ;; Return value:  Size  Location     Type
 10632 ;;                  3   26[COMRAM] float 
 10633 ;; Registers used:
 10634 ;;		wreg, status,2, status,0, cstack
 10635 ;; Tracked objects:
 10636 ;;		On entry : 0/0
 10637 ;;		On exit  : 0/0
 10638 ;;		Unchanged: 0/0
 10639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10640 ;;      Params:         6       0       0       0       0       0       0       0       0
 10641 ;;      Locals:         6       0       0       0       0       0       0       0       0
 10642 ;;      Temps:          3       0       0       0       0       0       0       0       0
 10643 ;;      Totals:        15       0       0       0       0       0       0       0       0
 10644 ;;Total ram usage:       15 bytes
 10645 ;; Hardware stack levels used:    1
 10646 ;; Hardware stack levels required when called:    1
 10647 ;; This function calls:
 10648 ;;		i2___ftpack
 10649 ;; This function is called by:
 10650 ;;		_comparar
 10651 ;; This function uses a non-reentrant model
 10652 ;;
 10653                           
 10654                           	psect	text37
 10655  002F5C                     __ptext37:
 10656                           	opt stack 0
 10657  002F5C                     i2___ftdiv:
 10658                           	opt stack 23
 10659                           
 10660                           ;incstack = 0
 10661  002F5C  C01D  F021         	movff	i2___ftdiv@f1+2,??i2___ftdiv
 10662  002F60  6A22               	clrf	(??i2___ftdiv+1)& (0+255),c
 10663  002F62  6A23               	clrf	(??i2___ftdiv+2)& (0+255),c
 10664  002F64  341C               	rlcf	i2___ftdiv@f1+1,w,c
 10665  002F66  3621               	rlcf	??i2___ftdiv& (0+255),f,c
 10666  002F68  E301               	bnc	u404_41
 10667  002F6A  8022               	bsf	(??i2___ftdiv+1)& (0+255),0,c
 10668  002F6C                     u404_41:
 10669  002F6C  5021               	movf	??i2___ftdiv,w,c
 10670  002F6E  6E28               	movwf	i2___ftdiv@exp,c
 10671  002F70  5028               	movf	i2___ftdiv@exp,w,c
 10672  002F72  A4D8               	btfss	status,2,c
 10673  002F74  D007               	goto	i2l572
 10674  002F76  0E00               	movlw	0
 10675  002F78  6E1B               	movwf	?i2___ftdiv,c
 10676  002F7A  0E00               	movlw	0
 10677  002F7C  6E1C               	movwf	?i2___ftdiv+1,c
 10678  002F7E  0E00               	movlw	0
 10679  002F80  6E1D               	movwf	?i2___ftdiv+2,c
 10680  002F82  0012               	return	
 10681  002F84                     i2l572:
 10682  002F84  C020  F021         	movff	i2___ftdiv@f2+2,??i2___ftdiv
 10683  002F88  6A22               	clrf	(??i2___ftdiv+1)& (0+255),c
 10684  002F8A  6A23               	clrf	(??i2___ftdiv+2)& (0+255),c
 10685  002F8C  341F               	rlcf	i2___ftdiv@f2+1,w,c
 10686  002F8E  3621               	rlcf	??i2___ftdiv& (0+255),f,c
 10687  002F90  E301               	bnc	u406_41
 10688  002F92  8022               	bsf	(??i2___ftdiv+1)& (0+255),0,c
 10689  002F94                     u406_41:
 10690  002F94  5021               	movf	??i2___ftdiv,w,c
 10691  002F96  6E29               	movwf	i2___ftdiv@sign,c
 10692  002F98  5029               	movf	i2___ftdiv@sign,w,c
 10693  002F9A  A4D8               	btfss	status,2,c
 10694  002F9C  D007               	goto	i2l574
 10695  002F9E  0E00               	movlw	0
 10696  002FA0  6E1B               	movwf	?i2___ftdiv,c
 10697  002FA2  0E00               	movlw	0
 10698  002FA4  6E1C               	movwf	?i2___ftdiv+1,c
 10699  002FA6  0E00               	movlw	0
 10700  002FA8  6E1D               	movwf	?i2___ftdiv+2,c
 10701  002FAA  0012               	return	
 10702  002FAC                     i2l574:
 10703  002FAC  0E00               	movlw	0
 10704  002FAE  6E25               	movwf	i2___ftdiv@f3,c
 10705  002FB0  0E00               	movlw	0
 10706  002FB2  6E26               	movwf	i2___ftdiv@f3+1,c
 10707  002FB4  0E00               	movlw	0
 10708  002FB6  6E27               	movwf	i2___ftdiv@f3+2,c
 10709  002FB8  5029               	movf	i2___ftdiv@sign,w,c
 10710  002FBA  0F89               	addlw	137
 10711  002FBC  5E28               	subwf	i2___ftdiv@exp,f,c
 10712  002FBE  C01D  F029         	movff	i2___ftdiv@f1+2,i2___ftdiv@sign
 10713  002FC2  5020               	movf	i2___ftdiv@f2+2,w,c
 10714  002FC4  1A29               	xorwf	i2___ftdiv@sign,f,c
 10715  002FC6  0E80               	movlw	128
 10716  002FC8  1629               	andwf	i2___ftdiv@sign,f,c
 10717  002FCA  8E1C               	bsf	i2___ftdiv@f1+1,7,c
 10718  002FCC  0EFF               	movlw	255
 10719  002FCE  161B               	andwf	i2___ftdiv@f1,f,c
 10720  002FD0  0EFF               	movlw	255
 10721  002FD2  161C               	andwf	i2___ftdiv@f1+1,f,c
 10722  002FD4  0E00               	movlw	0
 10723  002FD6  161D               	andwf	i2___ftdiv@f1+2,f,c
 10724  002FD8  8E1F               	bsf	i2___ftdiv@f2+1,7,c
 10725  002FDA  0EFF               	movlw	255
 10726  002FDC  161E               	andwf	i2___ftdiv@f2,f,c
 10727  002FDE  0EFF               	movlw	255
 10728  002FE0  161F               	andwf	i2___ftdiv@f2+1,f,c
 10729  002FE2  0E00               	movlw	0
 10730  002FE4  1620               	andwf	i2___ftdiv@f2+2,f,c
 10731  002FE6  0E18               	movlw	24
 10732  002FE8  6E24               	movwf	i2___ftdiv@cntr,c
 10733  002FEA  90D8               	bcf	status,0,c
 10734  002FEC  3625               	rlcf	i2___ftdiv@f3,f,c
 10735  002FEE  3626               	rlcf	i2___ftdiv@f3+1,f,c
 10736  002FF0  3627               	rlcf	i2___ftdiv@f3+2,f,c
 10737  002FF2  501E               	movf	i2___ftdiv@f2,w,c
 10738  002FF4  5C1B               	subwf	i2___ftdiv@f1,w,c
 10739  002FF6  501F               	movf	i2___ftdiv@f2+1,w,c
 10740  002FF8  581C               	subwfb	i2___ftdiv@f1+1,w,c
 10741  002FFA  5020               	movf	i2___ftdiv@f2+2,w,c
 10742  002FFC  581D               	subwfb	i2___ftdiv@f1+2,w,c
 10743  002FFE  A0D8               	btfss	status,0,c
 10744  003000  D007               	goto	i2l576
 10745  003002  501E               	movf	i2___ftdiv@f2,w,c
 10746  003004  5E1B               	subwf	i2___ftdiv@f1,f,c
 10747  003006  501F               	movf	i2___ftdiv@f2+1,w,c
 10748  003008  5A1C               	subwfb	i2___ftdiv@f1+1,f,c
 10749  00300A  5020               	movf	i2___ftdiv@f2+2,w,c
 10750  00300C  5A1D               	subwfb	i2___ftdiv@f1+2,f,c
 10751  00300E  8025               	bsf	i2___ftdiv@f3,0,c
 10752  003010                     i2l576:
 10753  003010  90D8               	bcf	status,0,c
 10754  003012  361B               	rlcf	i2___ftdiv@f1,f,c
 10755  003014  361C               	rlcf	i2___ftdiv@f1+1,f,c
 10756  003016  361D               	rlcf	i2___ftdiv@f1+2,f,c
 10757  003018  2E24               	decfsz	i2___ftdiv@cntr,f,c
 10758  00301A  D7E7               	goto	i2l575
 10759  00301C  C025  F001         	movff	i2___ftdiv@f3,i2___ftpack@arg
 10760  003020  C026  F002         	movff	i2___ftdiv@f3+1,i2___ftpack@arg+1
 10761  003024  C027  F003         	movff	i2___ftdiv@f3+2,i2___ftpack@arg+2
 10762  003028  C028  F004         	movff	i2___ftdiv@exp,i2___ftpack@exp
 10763  00302C  C029  F005         	movff	i2___ftdiv@sign,i2___ftpack@sign
 10764  003030  ECB2  F019         	call	i2___ftpack	;wreg free
 10765  003034  C001  F01B         	movff	?i2___ftpack,?i2___ftdiv
 10766  003038  C002  F01C         	movff	?i2___ftpack+1,?i2___ftdiv+1
 10767  00303C  C003  F01D         	movff	?i2___ftpack+2,?i2___ftdiv+2
 10768  003040  0012               	return	
 10769  003042                     __end_ofi2___ftdiv:
 10770                           	opt stack 0
 10771                           pclatu	equ	0xFFB
 10772                           pclath	equ	0xFFA
 10773                           tblptru	equ	0xFF8
 10774                           tblptrh	equ	0xFF7
 10775                           tblptrl	equ	0xFF6
 10776                           tablat	equ	0xFF5
 10777                           prodh	equ	0xFF4
 10778                           prodl	equ	0xFF3
 10779                           intcon	equ	0xFF2
 10780                           postinc0	equ	0xFEE
 10781                           fsr0h	equ	0xFEA
 10782                           fsr0l	equ	0xFE9
 10783                           wreg	equ	0xFE8
 10784                           fsr1h	equ	0xFE2
 10785                           fsr1l	equ	0xFE1
 10786                           indf2	equ	0xFDF
 10787                           postinc2	equ	0xFDE
 10788                           postdec2	equ	0xFDD
 10789                           fsr2h	equ	0xFDA
 10790                           fsr2l	equ	0xFD9
 10791                           status	equ	0xFD8
 10792                           
 10793 ;; *************** function i2___ftpack *****************
 10794 ;; Defined at:
 10795 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 10796 ;; Parameters:    Size  Location     Type
 10797 ;;  arg             3    0[COMRAM] unsigned um
 10798 ;;  exp             1    3[COMRAM] unsigned char 
 10799 ;;  sign            1    4[COMRAM] unsigned char 
 10800 ;; Auto vars:     Size  Location     Type
 10801 ;;		None
 10802 ;; Return value:  Size  Location     Type
 10803 ;;                  3    0[COMRAM] float 
 10804 ;; Registers used:
 10805 ;;		wreg, status,2, status,0
 10806 ;; Tracked objects:
 10807 ;;		On entry : 0/0
 10808 ;;		On exit  : 0/0
 10809 ;;		Unchanged: 0/0
 10810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10811 ;;      Params:         5       0       0       0       0       0       0       0       0
 10812 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10813 ;;      Temps:          3       0       0       0       0       0       0       0       0
 10814 ;;      Totals:         8       0       0       0       0       0       0       0       0
 10815 ;;Total ram usage:        8 bytes
 10816 ;; Hardware stack levels used:    1
 10817 ;; This function calls:
 10818 ;;		Nothing
 10819 ;; This function is called by:
 10820 ;;		i2___ftdiv
 10821 ;;		i2___ftmul
 10822 ;;		i2___lwtoft
 10823 ;; This function uses a non-reentrant model
 10824 ;;
 10825                           
 10826                           	psect	text38
 10827  003364                     __ptext38:
 10828                           	opt stack 0
 10829  003364                     i2___ftpack:
 10830                           	opt stack 23
 10831                           
 10832                           ;incstack = 0
 10833  003364  5004               	movf	i2___ftpack@exp,w,c
 10834  003366  B4D8               	btfsc	status,2,c
 10835  003368  D005               	goto	i2u332_40
 10836  00336A  5001               	movf	i2___ftpack@arg,w,c
 10837  00336C  1002               	iorwf	i2___ftpack@arg+1,w,c
 10838  00336E  1003               	iorwf	i2___ftpack@arg+2,w,c
 10839  003370  A4D8               	btfss	status,2,c
 10840  003372  D00C               	goto	i2l508
 10841  003374                     i2u332_40:
 10842  003374  0E00               	movlw	0
 10843  003376  6E01               	movwf	?i2___ftpack,c
 10844  003378  0E00               	movlw	0
 10845  00337A  6E02               	movwf	?i2___ftpack+1,c
 10846  00337C  0E00               	movlw	0
 10847  00337E  6E03               	movwf	?i2___ftpack+2,c
 10848  003380  0012               	return	
 10849  003382  2A04               	incf	i2___ftpack@exp,f,c
 10850  003384  90D8               	bcf	status,0,c
 10851  003386  3203               	rrcf	i2___ftpack@arg+2,f,c
 10852  003388  3202               	rrcf	i2___ftpack@arg+1,f,c
 10853  00338A  3201               	rrcf	i2___ftpack@arg,f,c
 10854  00338C                     i2l508:
 10855  00338C  0E00               	movlw	0
 10856  00338E  1401               	andwf	i2___ftpack@arg,w,c
 10857  003390  6E06               	movwf	??i2___ftpack& (0+255),c
 10858  003392  0E00               	movlw	0
 10859  003394  1402               	andwf	i2___ftpack@arg+1,w,c
 10860  003396  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 10861  003398  0EFE               	movlw	254
 10862  00339A  1403               	andwf	i2___ftpack@arg+2,w,c
 10863  00339C  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 10864  00339E  5006               	movf	??i2___ftpack,w,c
 10865  0033A0  1007               	iorwf	??i2___ftpack+1,w,c
 10866  0033A2  1008               	iorwf	??i2___ftpack+2,w,c
 10867  0033A4  B4D8               	btfsc	status,2,c
 10868  0033A6  D00C               	goto	i2l511
 10869  0033A8  D7EC               	goto	i2l509
 10870  0033AA  2A04               	incf	i2___ftpack@exp,f,c
 10871  0033AC  0E01               	movlw	1
 10872  0033AE  2601               	addwf	i2___ftpack@arg,f,c
 10873  0033B0  0E00               	movlw	0
 10874  0033B2  2202               	addwfc	i2___ftpack@arg+1,f,c
 10875  0033B4  0E00               	movlw	0
 10876  0033B6  2203               	addwfc	i2___ftpack@arg+2,f,c
 10877  0033B8  90D8               	bcf	status,0,c
 10878  0033BA  3203               	rrcf	i2___ftpack@arg+2,f,c
 10879  0033BC  3202               	rrcf	i2___ftpack@arg+1,f,c
 10880  0033BE  3201               	rrcf	i2___ftpack@arg,f,c
 10881  0033C0                     i2l511:
 10882  0033C0  0E00               	movlw	0
 10883  0033C2  1401               	andwf	i2___ftpack@arg,w,c
 10884  0033C4  6E06               	movwf	??i2___ftpack& (0+255),c
 10885  0033C6  0E00               	movlw	0
 10886  0033C8  1402               	andwf	i2___ftpack@arg+1,w,c
 10887  0033CA  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 10888  0033CC  0EFF               	movlw	255
 10889  0033CE  1403               	andwf	i2___ftpack@arg+2,w,c
 10890  0033D0  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 10891  0033D2  5006               	movf	??i2___ftpack,w,c
 10892  0033D4  1007               	iorwf	??i2___ftpack+1,w,c
 10893  0033D6  1008               	iorwf	??i2___ftpack+2,w,c
 10894  0033D8  B4D8               	btfsc	status,2,c
 10895  0033DA  D006               	goto	i2l514
 10896  0033DC  D7E6               	goto	i2l512
 10897  0033DE  0604               	decf	i2___ftpack@exp,f,c
 10898  0033E0  90D8               	bcf	status,0,c
 10899  0033E2  3601               	rlcf	i2___ftpack@arg,f,c
 10900  0033E4  3602               	rlcf	i2___ftpack@arg+1,f,c
 10901  0033E6  3603               	rlcf	i2___ftpack@arg+2,f,c
 10902  0033E8                     i2l514:
 10903  0033E8  BE02               	btfsc	i2___ftpack@arg+1,7,c
 10904  0033EA  D003               	goto	i2u336_40
 10905  0033EC  0E02               	movlw	2
 10906  0033EE  6004               	cpfslt	i2___ftpack@exp,c
 10907  0033F0  D7F6               	goto	i2l515
 10908  0033F2                     i2u336_40:
 10909  0033F2  A004               	btfss	i2___ftpack@exp,0,c
 10910  0033F4  9E02               	bcf	i2___ftpack@arg+1,7,c
 10911  0033F6  90D8               	bcf	status,0,c
 10912  0033F8  3204               	rrcf	i2___ftpack@exp,f,c
 10913  0033FA  5004               	movf	i2___ftpack@exp,w,c
 10914  0033FC  1203               	iorwf	i2___ftpack@arg+2,f,c
 10915  0033FE  5005               	movf	i2___ftpack@sign,w,c
 10916  003400  A4D8               	btfss	status,2,c
 10917  003402  8E03               	bsf	i2___ftpack@arg+2,7,c
 10918  003404  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
 10919  003408  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 10920  00340C  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 10921  003410  0012               	return	
 10922  003412                     __end_ofi2___ftpack:
 10923                           	opt stack 0
 10924                           pclatu	equ	0xFFB
 10925                           pclath	equ	0xFFA
 10926                           tblptru	equ	0xFF8
 10927                           tblptrh	equ	0xFF7
 10928                           tblptrl	equ	0xFF6
 10929                           tablat	equ	0xFF5
 10930                           prodh	equ	0xFF4
 10931                           prodl	equ	0xFF3
 10932                           intcon	equ	0xFF2
 10933                           postinc0	equ	0xFEE
 10934                           fsr0h	equ	0xFEA
 10935                           fsr0l	equ	0xFE9
 10936                           wreg	equ	0xFE8
 10937                           fsr1h	equ	0xFE2
 10938                           fsr1l	equ	0xFE1
 10939                           indf2	equ	0xFDF
 10940                           postinc2	equ	0xFDE
 10941                           postdec2	equ	0xFDD
 10942                           fsr2h	equ	0xFDA
 10943                           fsr2l	equ	0xFD9
 10944                           status	equ	0xFD8
 10945                           pclatu	equ	0xFFB
 10946                           pclath	equ	0xFFA
 10947                           tblptru	equ	0xFF8
 10948                           tblptrh	equ	0xFF7
 10949                           tblptrl	equ	0xFF6
 10950                           tablat	equ	0xFF5
 10951                           prodh	equ	0xFF4
 10952                           prodl	equ	0xFF3
 10953                           intcon	equ	0xFF2
 10954                           postinc0	equ	0xFEE
 10955                           fsr0h	equ	0xFEA
 10956                           fsr0l	equ	0xFE9
 10957                           wreg	equ	0xFE8
 10958                           fsr1h	equ	0xFE2
 10959                           fsr1l	equ	0xFE1
 10960                           indf2	equ	0xFDF
 10961                           postinc2	equ	0xFDE
 10962                           postdec2	equ	0xFDD
 10963                           fsr2h	equ	0xFDA
 10964                           fsr2l	equ	0xFD9
 10965                           status	equ	0xFD8
 10966                           
 10967                           	psect	rparam
 10968  0000                     pclatu	equ	0xFFB
 10969                           pclath	equ	0xFFA
 10970                           tblptru	equ	0xFF8
 10971                           tblptrh	equ	0xFF7
 10972                           tblptrl	equ	0xFF6
 10973                           tablat	equ	0xFF5
 10974                           prodh	equ	0xFF4
 10975                           prodl	equ	0xFF3
 10976                           intcon	equ	0xFF2
 10977                           postinc0	equ	0xFEE
 10978                           fsr0h	equ	0xFEA
 10979                           fsr0l	equ	0xFE9
 10980                           wreg	equ	0xFE8
 10981                           fsr1h	equ	0xFE2
 10982                           fsr1l	equ	0xFE1
 10983                           indf2	equ	0xFDF
 10984                           postinc2	equ	0xFDE
 10985                           postdec2	equ	0xFDD
 10986                           fsr2h	equ	0xFDA
 10987                           fsr2l	equ	0xFD9
 10988                           status	equ	0xFD8
 10989                           
 10990                           	psect	temp
 10991  000055                     btemp:
 10992                           	opt stack 0
 10993  000055                     	ds	1
 10994  0000                     int$flags	set	btemp
 10995  0000                     wtemp6	set	btemp+1
 10996                           pclatu	equ	0xFFB
 10997                           pclath	equ	0xFFA
 10998                           tblptru	equ	0xFF8
 10999                           tblptrh	equ	0xFF7
 11000                           tblptrl	equ	0xFF6
 11001                           tablat	equ	0xFF5
 11002                           prodh	equ	0xFF4
 11003                           prodl	equ	0xFF3
 11004                           intcon	equ	0xFF2
 11005                           postinc0	equ	0xFEE
 11006                           fsr0h	equ	0xFEA
 11007                           fsr0l	equ	0xFE9
 11008                           wreg	equ	0xFE8
 11009                           fsr1h	equ	0xFE2
 11010                           fsr1l	equ	0xFE1
 11011                           indf2	equ	0xFDF
 11012                           postinc2	equ	0xFDE
 11013                           postdec2	equ	0xFDD
 11014                           fsr2h	equ	0xFDA
 11015                           fsr2l	equ	0xFD9
 11016                           status	equ	0xFD8


Data Sizes:
    Strings     48
    Constant    145
    Data        0
    BSS         67
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     59      84
    BANK0           160    121     143
    BANK1           256    211     231
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> floor@expon(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 15
		 -> sin@coeff_a(CODE[15]), sin@coeff_b(CODE[12]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_5(CODE[9]), STR_3(CODE[11]), STR_2(CODE[11]), STR_1(CODE[12]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> buffer2(BANK1[20]), main@buffer1(BANK1[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Out2@buffer	PTR unsigned char  size(2) Largest target is 20
		 -> STR_4(CODE[5]), buffer2(BANK1[20]), main@buffer1(BANK1[16]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _comparar in COMRAM

    _comparar->i2___ftdiv
    i2___lwtoft->i2___ftpack
    i2___ftmul->i2___lwtoft
    i2___ftdiv->i2___ftmul

Critical Paths under _main in BANK0

    _main->_sprintf
    _sqrt->___ftdiv
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    _cos->_sin
    _sin->___ftdiv
    _floor->___altoft
    ___fttol->_scale
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___ftsub->_floor
    ___ftadd->_fround
    ___ftdiv->___ftsub
    ___lwtoft->___ftpack
    _Lcd_Out2->_Lcd_Chr_CP
    _Lcd_Out2->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd

Critical Paths under _comparar in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _comparar in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _comparar in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _comparar in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _comparar in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _comparar in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _comparar in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _comparar in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               213   213      0  163563
                                            119 BANK0      2     2      0
                                              0 BANK1    211   211      0
                            _Lcd_Cmd
                           _Lcd_Init
                           _Lcd_Out2
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                           ___lltoft
                           ___lwtoft
                             ___wmul
                     _configstandard
                                _cos
                            _sprintf
                               _sqrt
 ---------------------------------------------------------------------------------
 (1) _sqrt                                                19    16      3   14844
                                             96 BANK0     19    16      3
                            ___ftdiv (ARG)
                             ___ftge
                            ___ftmul
                            ___ftsub
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             44    37      7   63080
                                             81 BANK0     38    31      7
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                7     4      3   14478
                                             35 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              10     7      3   14280
                                             35 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1664
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1820
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     455
                                              0 BANK0     15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     598
                                              0 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2765
                                              8 BANK0      9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     767
                                             13 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     618
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _cos                                                  6     3      3   57823
                                            109 BANK0      6     3      3
                            ___ftadd
                             ___ftge
                                _sin
 ---------------------------------------------------------------------------------
 (2) _sin                                                 13    10      3   51253
                                             96 BANK0     13    10      3
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                          _eval_poly
                              _floor
 ---------------------------------------------------------------------------------
 (3) _floor                                                8     5      3   10383
                                             67 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                7     2      5     360
                                              0 BANK0      7     2      5
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     556
                                             42 BANK0     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6    1352
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    2758
                                             57 BANK0     10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           12     5      7   16215
                                             57 BANK0     12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    3351
                                             14 BANK0      6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    7200
                                             20 BANK0     15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    5831
                                             75 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
                              _floor (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    5030
                                             45 BANK0     12     6      6
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                             ___wmul (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     349
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             15     9      6    4266
                                             81 BANK0     15     9      6
                            ___ftadd (ARG)
                             ___ftge (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                            ___ftsub (ARG)
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (1) _configstandard                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             3     0      3    2692
                                              8 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2544
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _Lcd_Out2                                             5     2      3    1293
                                              3 BANK0      5     2      3
                         _Lcd_Chr_CP
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Chr_CP                                           3     3      0     176
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     314
                                              3 BANK0      2     2      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     176
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _comparar                                            18    18      0    2153
                                             41 COMRAM    18    18      0
                          i2___ftdiv
                          i2___ftmul
                         i2___lwtoft
 ---------------------------------------------------------------------------------
 (7) i2___lwtoft                                           3     0      3     513
                                              8 COMRAM     3     0      3
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (7) i2___ftmul                                           15     9      6     843
                                             11 COMRAM    15     9      6
                         i2___ftpack
                         i2___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (7) i2___ftdiv                                           15     9      6     797
                                             26 COMRAM    15     9      6
                          i2___ftmul (ARG)
                         i2___ftpack
                         i2___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (8) i2___ftpack                                           8     3      5     465
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Cmd
   _Lcd_Init
     _Lcd_Cmd
   _Lcd_Out2
     _Lcd_Chr_CP
     _Lcd_Cmd
   ___ftadd
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   ___ftdiv
     ___ftadd (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftpack (ARG)
     ___ftpack (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
       _floor (ARG)
         ___altoft
           ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _frexp
     ___lltoft (ARG)
       ___ftpack
     ___lwtoft (ARG)
       ___ftpack
     _eval_poly (ARG)
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___ftpack (ARG)
     ___lltoft (ARG)
       ___ftpack
     ___lwtoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___lltoft
     ___ftpack
   ___lwtoft
     ___ftpack
   ___wmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
   _configstandard
   _cos
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     _sin
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
           _floor (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftadd
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftge
             ___fttol
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _frexp
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _eval_poly (ARG)
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
         _floor (ARG)
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _frexp
       _eval_poly
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _floor
         ___altoft
           ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _frexp
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
       _floor (ARG)
         ___altoft
           ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _frexp
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _sqrt
     ___ftdiv (ARG)
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
         _floor (ARG)
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _frexp
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _eval_poly (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
       _floor (ARG)
         ___altoft
           ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _frexp

 _comparar (ROOT)
   i2___ftdiv
     i2___ftmul (ARG)
       i2___ftpack
       i2___lwtoft (ARG)
         i2___ftpack
     i2___ftpack (ARG)
     i2___lwtoft (ARG)
       i2___ftpack
   i2___ftmul
     i2___ftpack
     i2___lwtoft (ARG)
       i2___ftpack
   i2___lwtoft
     i2___ftpack

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     D3      E7       7       90.2%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     79      8F       5       89.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3B      54       1       89.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1CA      20        0.0%
DATA                 0      0     1CA       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri May 18 11:06:36 2018

           ___altoft@exp 00A1            ___altoft@sign 00A2                       l60 2516  
                     l80 3450                       l81 3420                       l82 3426  
                     l83 342C                       l85 3482                       l86 3458  
                     l78 3434                       l79 3418             ___awdiv@sign 006B  
    ___wmul@multiplicand 0070              __CFG_BORV$3 000000               i2___ftpack 3364  
           __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000  
           __CFG_CP3$OFF 000000             ___ftadd@exp1 0098             ___ftadd@exp2 0097  
           ___ftadd@sign 0096                      l200 0BC8                      l120 1646  
                    l201 0C06                      l202 0CCA                      l122 1676  
                    l211 0D30                      l123 168A                      l220 0DE0  
                    l116 1584                      l205 0C74                      l125 182A  
                    l117 1400                      l230 0F00                      l126 1770  
                    l231 0EEA                      l223 0E1C                      l215 0D9C  
                    l119 174A                      l152 1DC6                      l240 108A  
                    l224 0E06                      l216 0DB6                      l233 0F24  
                    l129 182E                      l162 1A32                      l250 1196  
                    l242 10E4                      l234 0F28                      l170 08EE  
                    l155 1E9C                      l163 1B90                      l243 10FC  
                    l235 0F4A                      l227 0EE0                      l219 0DF6  
                    l252 11B8                      l236 107E                      l228 0E4A  
                    l180 0A0C                      l172 0908                      l165 1C48  
                    l253 11C0                      l237 0F9A                      l181 09F6  
                    l173 0900                      l158 1A58                      l254 11E4  
                    l182 09BC                      l511 3312                      l159 197A  
                    l255 11EC                      l247 1154                      l239 10A0  
                    l512 32FC                      l256 1234                      l441 3580  
                    l257 1214                      l249 1174                      l193 10AA  
                    l185 0A1E                      l169 08D2                      l514 333A  
                    l610 2D36                      l442 3578                      l266 1306  
                    l194 0A64                      l178 0938                      l515 3330  
                    l611 2D46                      l355 36F2                      l451 3752  
                    l267 127C                      l195 0AA6                      l508 32DE  
                    l604 2CB4                      l356 36E6                      l460 37A4  
                    l452 375E                      l188 0A1A                      l509 32D4  
                    l621 38D0                      l445 35A0                      l197 0B3A  
                    l189 0A50                      l606 2CDC                      l446 35AA  
                    l438 3552                      l454 3774                      l198 0BA2  
                    l615 396C                      l543 21C6                      l607 2D0E  
                    l447 35B8                      l439 3562                      l455 376C  
                    l608 2D1E                      l472 326C                      l480 2A10  
                    l640 39DE                      l553 2222                      l633 2C5C  
                    l625 2BC0                      l562 2260                      l554 2218  
                    l634 2C50                      l482 2A4E                      l458 378C  
                    l563 2256                      l539 219C                      l627 2C38  
                    l483 2A3E                      l459 3796                      l572 2E9E  
                    l548 222C                      l636 2C78                      l628 2C28  
                    l476 2980                      l580 25F8                      l565 2284  
                    l574 2EC6                      l566 22A0                      l670 3626  
                    l478 299E                      l582 2624                      l575 2F04  
                    l567 22D0                      l671 3634                      l479 29E0  
                    l583 265E                      l576 2F2A                      l912 31EA  
                    l920 3082                      l680 37F6                      l488 2A72  
                    l592 26E6                      l584 2686                      l913 316A  
                    l921 3074                      l681 3804                      l489 2A66  
                    l593 26DA                      l666 35F2                      l586 26C2  
                    l923 309C                      l755 1F0A                      l667 35E6  
                    l587 26B2                      l924 3118                      l756 1FF0  
                    l676 37CE                      l597 34DC                      l757 204C  
                    l677 37C2                      l598 350C                      l758 213A  
                    l687 382A                      l688 381E                      l929 3664  
                    l884 2334                      l885 2326               i2___lwtoft 39A0  
                    l887 2384             __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000  
                    _cos 3202          ?_configstandard 0001                      _sin 1EDE  
           ___awmod@sign 0065              main@Voltage 01BA                      prod 000FF3  
                    wreg 000FE8             __CFG_LVP$OFF 000000              main@buffer1 019E  
           ___ftdiv@cntr 00BA             ___ftdiv@sign 00BF             __CFG_WDT$OFF 000000  
                   l4026 1760                     l4036 17C4                     l2528 3538  
                   l3512 0C4E                     l3504 0C06                     l3532 0D34  
                   ?_cos 00CD                     l3560 0DE0                     l3724 127C  
                   l3654 1100                     l3728 1302                     l3592 0EEA  
                   l3568 0E06                     l3990 1590                     ?_sin 00C0  
                   STR_1 0892                     STR_2 08A9                     STR_3 089E  
                   STR_4 08BD                     STR_5 08B4                     u2140 32C6  
                   u2300 21B8                     u3100 26EC                     u3021 25DC  
                   u2231 215A                     u2400 2268                     u3200 1FEC  
                   u4000 1330                     u2241 216E                     u3041 2608  
                   u2330 21F6                     u3210 1FEE                     u2180 3344  
                   u2270 218E                     u2441 2C9C                     u3410 3478  
                   u2370 2234                     u3250 35F6                     u3170 2A78  
                   u2531 2BA4                     u3420 34A2                     u2620 368C  
                   u2461 2CC4                     u2550 2BDE                     u4230 17C4  
                   u2631 2E86                     u3280 37D2                     u2720 3584  
                   u3417 346E                     u3610 0C4E                     u3530 0ADE  
                   u4307 278E                     u3427 3498                     u2651 2EAE  
                   u2555 2BD6                     u2628 3690                     u3460 0998  
                   u4317 2808                     u2590 2C62                     u3710 0E2A  
                   u4407 2504                     u4327 2812                     u3535 0AD4  
                   u2840 308E                     u4417 2530                     u4337 281A  
                   u2905 2710                     u4257 1364                     u3650 0D6C  
                   u3570 0BD8                     u4427 2548                     u4347 2826  
                   u2915 272A                     u4267 1536                     u2780 3778  
                   u3740 0F0E                     u3580 0C18                     u4437 2576  
                   u4357 24AA                     u2925 274E                     u4277 1636  
                   u3750 0F1E                     u4447 258E                     u4367 24BC  
                   u4287 1678                     u3840 1138                     u4457 28B8  
                   u4377 24CE                     u4297 2784                     u4467 28C2  
                   u2875 2844                     u4387 24E0                     u4477 293C  
                   u2885 285E                     u4397 24F2                     u4487 2946  
                   u2895 2882                     u3960 123C                     u4497 2954  
                   u3970 125A                     u3990 1316                     _adc1 0053  
                   _main 133E             ___ftpack@arg 0060                     cos@f 00CD  
           ___ftpack@exp 0063                     fsr0h 000FEA                     fsr1h 000FE2  
                   fsr2h 000FDA                     fsr0l 000FE9                     indf2 000FDF  
                   fsr1l 000FE1                     fsr2l 000FD9                     btemp 0055  
                   _sqrt 22F6                     sin@f 00C0                     sin@y 00C3  
                   prodh 000FF4                     prodl 000FF3                     start 000E  
          __CFG_IESO$OFF 000000             i2___ftdiv@f1 001B             i2___ftdiv@f2 001E  
           i2___ftdiv@f3 0025             _sprintf$1427 00BE          __end_of_Lcd_Cmd 2960  
          __CFG_MCLRE$ON 000000             ___ftmul@cntr 0081             i2___ftmul@f1 000C  
           i2___ftmul@f2 000F             ___param_bank 000000             ___ftmul@sign 0082  
             _Lcd_Chr_CP 26FE             ___fttol@exp1 0098                    ??_cos 00D0  
           ___fttol@lval 0094                    ??_sin 00C3           Lcd_Out2@buffer 0064  
          __CFG_PLLDIV$2 000000           __CFG_CCP2MX$ON 000000                    ?_main 0001  
        __end_of___awdiv 35C2          __end_of___ftadd 22F6                    _CCPR1 000FBE  
        __end_of___awmod 37AE          __end_of___ftdiv 2F5C          __end_of___ftneg 397A  
           i2___lwtoft@c 0009          __end_of___lldiv 3646                    ?_sqrt 00C0  
        __end_of___ftmul 2D80          ___awdiv@divisor 0068          __end_of___llmod 3816  
        __end_of___ftsub 38FA          __end_of___fttol 2C8A                    i2l109 2B46  
                  i2l511 33C0                    i2l512 33AA                    i2l514 33E8  
                  i2l610 2E2A                    i2l515 33DE                    i2l611 2E3A  
                  i2l508 338C                    i2l604 2DA8                    i2l509 3382  
                  i2l606 2DD0                    i2l607 2E02                    i2l608 2E12  
                  i2l572 2F84                    i2l574 2FAC                    i2l575 2FEA  
                  i2l576 3010          ___awdiv@counter 006A       __end_ofsin@coeff_a 0886  
     __end_ofsin@coeff_b 0892            __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000  
          __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000  
           ___lltoft@exp 0070           __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000  
         __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000  
          __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000  
         __CFG_EBTRB$OFF 000000          __end_of_dpowers 0829                    _floor 3042  
                  _frexp 3646                    _errno 00ED                    _scale 1836  
        __end_of_isdigit 39E6             main@numTicks 019C            ___ftpack@sign 0064  
                  main@i 01D1                    pclath 000FFA                    sin@x2 00C9  
                  tablat 000FF5                    sqrt@a 00C0                    sqrt@i 00CC  
                  sqrt@q 00CD                    sqrt@x 00D0                    sqrt@z 00C9  
                  status 000FD8                    wtemp6 0056          __end_of_sprintf 133E  
         __CFG_ICPRT$OFF 000000            i2___ftdiv@exp 0028           __CFG_PBADEN$ON 000000  
     __size_ofi2___ftdiv 00E6       __size_ofi2___ftmul 00F4         __end_of_Lcd_Init 25CA  
       __end_of_Lcd_Out2 34AA          __initialization 38FA            main@calculoFP 01CD  
           __end_of_main 1836            i2___ftmul@exp 0015             __end_of_sqrt 248A  
            ?i2___ftpack 0001                   ??_main 00D7            ___fttol@sign1 0093  
                 ??_sqrt 00C3              ?i2___lwtoft 0009            __activetblptr 000002  
   __size_of__tdiv_to_l_ 0134                   _ADCON1 000FC1                   ?_floor 00A3  
                 _CCP1IF 007CF2                   ?_frexp 0060         __end_of___altoft 373C  
       ___llmod@dividend 006D                   ?_scale 0083                   _ADRESH 000FC4  
                 _ADRESL 000FC3         ___awdiv@dividend 0066         __end_of___ftpack 3364  
       __end_of___lltoft 3874                   u411_41 2DB8                   u404_41 2F6C  
                 u406_41 2F94                   u409_41 2D90         __end_of___lwtoft 39A0  
              ??_Lcd_Cmd 0060           __CFG_XINST$OFF 000000         __end_of__powers_ 0850  
       __end_of_comparar 2B92                   ___ftge 34AA              ?_Lcd_Chr_CP 0001  
                 ___wmul 392C                ??___awdiv 006A                ??___ftadd 0093  
         __CFG_STVREN$ON 000000                ??___awmod 0064                ??___ftdiv 00B7  
              ??___ftneg 0063                ??___lldiv 0068                ??___ftmul 007A  
              ??___llmod 0075                ??___ftsub 00B1                ??___fttol 008E  
                 _fround 1C6E                   clear_0 3900                   clear_1 390C  
                 clear_2 3918         ___awdiv@quotient 006C          ___awmod@divisor 0062  
        ___awmod@counter 0064                   floor@i 00A6                   floor@x 00A3  
  ___ftmul@f3_as_product 007E                ??_isdigit 0060        __end_ofi2___ftdiv 3042  
                 sin@sgn 00CC        __end_ofi2___ftmul 2E74             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
                 sqrt@og 00C6                ??_sprintf 00B8           i2___ftdiv@cntr 0024  
             __accesstop 0060  __end_of__initialization 391E               ___altoft@c 0099  
         i2___ftdiv@sign 0029               ___ftadd@f1 008D               ___ftadd@f2 0090  
    __size_ofi2___ftpack 00AE               ___ftge@ff1 0060               ___ftge@ff2 0063  
           eval_poly@res 00A2            ___rparam_used 000001               ___ftdiv@f1 00B1  
             ___ftdiv@f2 00B4               ___ftdiv@f3 00BB      __size_ofi2___lwtoft 0024  
             ___ftneg@f1 0060           i2___ftpack@arg 0001           i2___ftpack@exp 0004  
             ___ftmul@f1 0074               ___ftmul@f2 0077               ___ftsub@f1 00AB  
             ___ftsub@f2 00AE               ___fttol@f1 008A           __pcstackCOMRAM 0001  
             ___lltoft@c 0068            __end_of_floor 3126            __end_of_frexp 36C2  
         i2___ftmul@cntr 0019            __end_of_scale 1C6E           i2___ftmul@sign 001A  
       ??_configstandard 0060               ___lwtoft@c 0068               __div_to_l_ 2960  
              ?_Lcd_Init 0001                ?_Lcd_Out2 0063          __div_to_l_@exp1 006B  
                ??_floor 00A6          __div_to_l_@cntr 006A                  ??_frexp 0065  
                ??_scale 0086          __div_to_l_@quot 0066             sprintf@width 00CF  
    __size_of_Lcd_Chr_CP 0134               __pbssBANK0 00D9               __pbssBANK1 01D3  
     __size_of_eval_poly 00DC            __div_to_l_@f1 0060            __div_to_l_@f2 0063  
                ?___ftge 0060                  ?___wmul 006E                ?___altoft 0099  
                ?_fround 0083                ?___ftpack 0060                ?___lltoft 0068  
              ?___lwtoft 0068               ??_Lcd_Init 0063               ??_Lcd_Out2 0066  
              ?_comparar 0001       main@FactorPotencia 01B1          __CFG_VREGEN$OFF 000000  
                _Lcd_Cmd 2832        __end_of__npowers_ 0877                  __Hparam 0000  
             _scale$1426 0086     main@numCiclosMuestro 01CA                  __Lparam 0000  
        __size_of___ftge 0092                  ___awdiv 353C                  ___ftadd 2148  
                ___awmod 373C                  ___ftdiv 2E74                  ___ftneg 3954  
                ___lldiv 35C2          __size_of___wmul 0028                  ___ftmul 2C8A  
                ___llmod 37AE                  ___ftsub 38B8                  ___fttol 2B92  
           __psmallconst 0800               ??___altoft 009D                  __pcinit 38FA  
           ??i2___ftpack 0006               ??___ftpack 0065        __end_of_eval_poly 3202  
        __size_of_fround 0270  i2___ftmul@f3_as_product 0016                  __ramtop 0800  
             ??___lltoft 006C                  __ptext0 133E                  __ptext1 22F6  
                __ptext2 08C4                  __ptext3 1836                  __ptext4 39C4  
                __ptext5 1C6E                  __ptext6 373C                  __ptext7 353C  
                __ptext8 25CA                  __ptext9 2960                  _buffer1 003C  
                _buffer2 01D3                  _buffer3 00D9             ??i2___lwtoft 000C  
             ??___lwtoft 006B                _T1CONbits 000FCD              ?__div_to_l_ 0060  
                _dpowers 0801             __size_of_cos 00B2                  _isdigit 39C4  
           __size_of_sin 026A         ___awmod@dividend 0060                  _sprintf 08C4  
                _voltaje 0050           __pintcode_body 2A8A               ??_comparar 002A  
   end_of_initialization 391E            __Lmediumconst 0000                  int_func 2A8A  
     __end_ofi2___ftpack 3412          ___lldiv@divisor 0064       __end_ofi2___lwtoft 39C4  
        ___lldiv@counter 006C             ??_Lcd_Chr_CP 0060                Lcd_Out2@x 0063  
              Lcd_Out2@y 0066                  postdec2 000FDD                  postinc0 000FEE  
                postinc2 000FDE           __tdiv_to_l_@f1 0060           __tdiv_to_l_@f2 0063  
          ??__tdiv_to_l_ 0066                _PORTBbits 000F81                _PORTDbits 000F83  
             main@FPprom 0100                _TRISAbits 000F92                _TRISBbits 000F93  
              _TRISDbits 000F95                i2___ftdiv 2F5C                i2___ftmul 2D80  
     __end_of_Lcd_Chr_CP 2832              _CCP1CONbits 000FBD              ___ftdiv@exp 00BE  
        i2___ftpack@sign 0005      __size_of__div_to_l_ 012A               main@sumIns 01C1  
            ___ftmul@exp 007D           __end_of___ftge 353C           __end_of___wmul 3954  
       main@fppromtotal2 01B7           __end_of_fround 1EDE               floor@expon 00A9  
    start_initialization 38FA               eval_poly@d 009C               eval_poly@n 009E  
             eval_poly@x 0099      __end_of__tdiv_to_l_ 26FE              __end_of_cos 32B4  
            __end_of_sin 2148               ?i2___ftdiv 001B               ?i2___ftmul 000C  
      __size_of_Lcd_Init 0140        __size_of_Lcd_Out2 0098               frexp@value 0060  
        ___llmod@divisor 0071          ___llmod@counter 0075                 ??___ftge 0066  
               ??___wmul 0072         __CFG_LPT1OSC$OFF 000000                 ??_fround 0086  
          sprintf@tmpval 00C3        __size_of___altoft 007A               fround@prec 008C  
      __size_of___ftpack 00B0        __size_of___lltoft 005E              __pbssCOMRAM 003C  
      __size_of___lwtoft 0026            __pcstackBANK0 0060            __pcstackBANK1 0100  
           _isdigit$1012 0061                 ?_Lcd_Cmd 0001              sprintf@flag 00CD  
      __size_of_comparar 2B8A              sprintf@fval 00D1               sin@coeff_a 0877  
             sin@coeff_b 0886              sprintf@prec 00D4                _main$1423 01C7  
              __pintcode 0008                 ?___awdiv 0066                 ?___ftadd 008D  
               ?___awmod 0060                 ?___ftdiv 00B1                 ?___ftneg 0060  
               ?___lldiv 0060                 ?___ftmul 0074                 ?___llmod 006D  
               ?___ftsub 00AB                __npowers_ 0850                 ?___fttol 008A  
            __tdiv_to_l_ 25CA             ??__div_to_l_ 0066              __smallconst 0800  
               ?_isdigit 0001                _eval_poly 3126    main@factorPotenciaNum 01B4  
__size_of_configstandard 0044                 ?_sprintf 00B1           __size_of_floor 00E4  
            ??i2___ftdiv 0021           __size_of_frexp 007C              ??i2___ftmul 0012  
         __size_of_scale 0438           ___wmul@product 0072                 i2u332_40 3374  
               i2u336_40 33F2                 _PIR1bits 000F9E       __end_of__div_to_l_ 2A8A  
       __CFG_WDTPS$32768 000000         main@PotenciaReal 0199             Lcd_Init@data 0064  
             _ADCON0bits 000FC2               _ADCON2bits 000FC0        ___wmul@multiplier 006E  
              main@delay 01BD               ?_eval_poly 0099             Lcd_Out2@data 0067  
               _Lcd_Init 248A                 _Lcd_Out2 3412          main@fppromtotal 01C4  
       __size_of_Lcd_Cmd 012E                frexp@eptr 0063                 __Hrparam 0000  
               __Lrparam 0000         __size_of___awdiv 0086         __size_of___ftadd 01AE  
       __size_of___awmod 0072         __size_of___ftdiv 00E8         __size_of___ftneg 0026  
       __size_of___lldiv 0084                 ___altoft 36C2         __size_of___ftmul 00F6  
               _cos$1428 00D0         __size_of___llmod 0068         __size_of___ftsub 0042  
       __size_of___fttol 00F8                 ___ftpack 32B4              _fround$1424 0089  
            _fround$1425 0086                 ___lltoft 3816                 ___lwtoft 397A  
             sprintf@exp 00CB               sprintf@val 00C7         __size_of_isdigit 0022  
         Lcd_Chr_CP@data 0062                 __ptext10 3816                 __ptext11 37AE  
               __ptext20 3126                 __ptext12 35C2                 __ptext21 392C  
               __ptext13 3202                 __ptext30 3412                 __ptext22 2C8A  
               __ptext14 1EDE                 __ptext31 26FE                 __ptext23 38B8  
               __ptext15 3042                 __ptext32 248A                 __ptext24 2148  
               __ptext16 3646                 __ptext33 2832                 __ptext25 3954  
               __ptext17 2B92                 __ptext26 2E74                 __ptext18 34AA  
               __ptext35 39A0                 __ptext27 3874                 __ptext19 36C2  
               __ptext36 2D80                 __ptext28 397A                 __ptext37 2F5C  
               __ptext29 32B4                 __ptext38 3364                 _sin$1429 00C6  
               __powers_ 0829                 _comparar 0008         __size_of_sprintf 0A7A  
            Lcd_Cmd@data 0062            __size_of_main 04F8            __size_of_sqrt 0194  
               int$flags 0055                 main@Amps 01CE                 main@Irms 01AE  
               main@loop 01CC    __CFG_CPUDIV$OSC1_PLL2 000000               _INTCONbits 000FF2  
            ??_eval_poly 00A0           _configstandard 3874                 isdigit@c 0062  
               scale@scl 0089                 intlevel2 0000                sprintf@ap 00C1  
       __tdiv_to_l_@exp1 006E                sprintf@sp 00B1         __tdiv_to_l_@cntr 006D  
       __tdiv_to_l_@quot 0069         ___lldiv@dividend 0060             ?__tdiv_to_l_ 0060  
               sprintf@c 00D6                 sprintf@f 00B3   __end_of_configstandard 38B8  
       ___lldiv@quotient 0068       __CFG_FOSC$HSPLL_HS 000000  
