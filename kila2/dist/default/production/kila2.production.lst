

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri May 18 03:40:24 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    39                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    45                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    46                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    47  0000                     
    48                           ; Version 1.45
    49                           ; Generated 16/11/2017 GMT
    50                           ; 
    51                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    52                           ; All rights reserved.
    53                           ; 
    54                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    55                           ; 
    56                           ; Redistribution and use in source and binary forms, with or without modification, are
    57                           ; permitted provided that the following conditions are met:
    58                           ; 
    59                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    60                           ;        conditions and the following disclaimer.
    61                           ; 
    62                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    63                           ;        of conditions and the following disclaimer in the documentation and/or other
    64                           ;        materials provided with the distribution.
    65                           ; 
    66                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    67                           ;        software without specific prior written permission.
    68                           ; 
    69                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    70                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    71                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    72                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    73                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    74                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    75                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    76                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    77                           ; 
    78                           ; 
    79                           ; Code-generator required, PIC18F4550 Definitions
    80                           ; 
    81                           ; SFR Addresses
    82  0000                     
    83                           	psect	smallconst
    84  000800                     __psmallconst:
    85                           	opt stack 0
    86  000800  00                 	db	0
    87  000801                     _dpowers:
    88                           	opt stack 0
    89  000801  0001               	dw	1
    90  000803  0000               	dw	0
    91  000805  000A               	dw	10
    92  000807  0000               	dw	0
    93  000809  0064               	dw	100
    94  00080B  0000               	dw	0
    95  00080D  03E8               	dw	1000
    96  00080F  0000               	dw	0
    97  000811  2710               	dw	10000
    98  000813  0000               	dw	0
    99  000815  86A0               	dw	34464
   100  000817  0001               	dw	1
   101  000819  4240               	dw	16960
   102  00081B  000F               	dw	15
   103  00081D  9680               	dw	38528
   104  00081F  0098               	dw	152
   105  000821  E100               	dw	57600
   106  000823  05F5               	dw	1525
   107  000825  CA00               	dw	51712
   108  000827  3B9A               	dw	15258
   109  000829                     __end_of_dpowers:
   110                           	opt stack 0
   111  000829                     __powers_:
   112                           	opt stack 0
   113  000829  00                 	db	0
   114  00082A  80                 	db	128
   115  00082B  3F                 	db	63
   116  00082C  00                 	db	0
   117  00082D  20                 	db	32
   118  00082E  41                 	db	65
   119  00082F  00                 	db	0
   120  000830  C8                 	db	200
   121  000831  42                 	db	66
   122  000832  00                 	db	0
   123  000833  7A                 	db	122
   124  000834  44                 	db	68
   125  000835  40                 	db	64
   126  000836  1C                 	db	28
   127  000837  46                 	db	70
   128  000838  50                 	db	80
   129  000839  C3                 	db	195
   130  00083A  47                 	db	71
   131  00083B  24                 	db	36
   132  00083C  74                 	db	116
   133  00083D  49                 	db	73
   134  00083E  97                 	db	151
   135  00083F  18                 	db	24
   136  000840  4B                 	db	75
   137  000841  BC                 	db	188
   138  000842  BE                 	db	190
   139  000843  4C                 	db	76
   140  000844  6B                 	db	107
   141  000845  6E                 	db	110
   142  000846  4E                 	db	78
   143  000847  03                 	db	3
   144  000848  15                 	db	21
   145  000849  50                 	db	80
   146  00084A  79                 	db	121
   147  00084B  AD                 	db	173
   148  00084C  60                 	db	96
   149  00084D  F3                 	db	243
   150  00084E  49                 	db	73
   151  00084F  71                 	db	113
   152  000850                     __end_of__powers_:
   153                           	opt stack 0
   154  000850                     __npowers_:
   155                           	opt stack 0
   156  000850  00                 	db	0
   157  000851  80                 	db	128
   158  000852  3F                 	db	63
   159  000853  CD                 	db	205
   160  000854  CC                 	db	204
   161  000855  3D                 	db	61
   162  000856  D7                 	db	215
   163  000857  23                 	db	35
   164  000858  3C                 	db	60
   165  000859  12                 	db	18
   166  00085A  83                 	db	131
   167  00085B  3A                 	db	58
   168  00085C  B7                 	db	183
   169  00085D  D1                 	db	209
   170  00085E  38                 	db	56
   171  00085F  C6                 	db	198
   172  000860  27                 	db	39
   173  000861  37                 	db	55
   174  000862  38                 	db	56
   175  000863  86                 	db	134
   176  000864  35                 	db	53
   177  000865  C0                 	db	192
   178  000866  D6                 	db	214
   179  000867  33                 	db	51
   180  000868  CC                 	db	204
   181  000869  2B                 	db	43
   182  00086A  32                 	db	50
   183  00086B  70                 	db	112
   184  00086C  89                 	db	137
   185  00086D  30                 	db	48
   186  00086E  E7                 	db	231
   187  00086F  DB                 	db	219
   188  000870  2E                 	db	46
   189  000871  E5                 	db	229
   190  000872  3C                 	db	60
   191  000873  1E                 	db	30
   192  000874  42                 	db	66
   193  000875  A2                 	db	162
   194  000876  0D                 	db	13
   195  000877                     __end_of__npowers_:
   196                           	opt stack 0
   197  0000                     _CCPR1	set	4030
   198  0000                     _TMR1	set	4046
   199  0000                     _TRISAbits	set	3986
   200  0000                     _PORTDbits	set	3971
   201  0000                     _TRISDbits	set	3989
   202  0000                     _CCP1CONbits	set	4029
   203  0000                     _T1CONbits	set	4045
   204  0000                     _PIR1bits	set	3998
   205  0000                     _PIE1bits	set	3997
   206  0000                     _INTCONbits	set	4082
   207  0000                     _ADRESL	set	4035
   208  0000                     _ADRESH	set	4036
   209  0000                     _ADCON2bits	set	4032
   210  0000                     _ADCON1	set	4033
   211  0000                     _ADCON0bits	set	4034
   212  0000                     _CCP1IF	set	31986
   213  000877                     STR_1:
   214  000877  56                 	db	86	;'V'
   215  000878  6F                 	db	111	;'o'
   216  000879  6C                 	db	108	;'l'
   217  00087A  74                 	db	116	;'t'
   218  00087B  61                 	db	97	;'a'
   219  00087C  67                 	db	103	;'g'
   220  00087D  65                 	db	101	;'e'
   221  00087E  20                 	db	32
   222  00087F  25                 	db	37
   223  000880  30                 	db	48	;'0'
   224  000881  2E                 	db	46
   225  000882  32                 	db	50	;'2'
   226  000883  66                 	db	102	;'f'
   227  000884  00                 	db	0
   228  000885                     STR_2:
   229  000885  61                 	db	97	;'a'
   230  000886  6D                 	db	109	;'m'
   231  000887  70                 	db	112	;'p'
   232  000888  73                 	db	115	;'s'
   233  000889  20                 	db	32
   234  00088A  25                 	db	37
   235  00088B  30                 	db	48	;'0'
   236  00088C  2E                 	db	46
   237  00088D  32                 	db	50	;'2'
   238  00088E  66                 	db	102	;'f'
   239  00088F  00                 	db	0
   240                           
   241                           ; #config settings
   242  000890  00                 	db	0	; dummy byte at the end
   243  0000                     
   244                           	psect	cinit
   245  002CD0                     __pcinit:
   246                           	opt stack 0
   247  002CD0                     start_initialization:
   248                           	opt stack 0
   249  002CD0                     __initialization:
   250                           	opt stack 0
   251                           
   252                           ; Clear objects allocated to BANK0 (20 bytes)
   253  002CD0  EE00  F0DD         	lfsr	0,__pbssBANK0
   254  002CD4  0E14               	movlw	20
   255  002CD6                     clear_0:
   256  002CD6  6AEE               	clrf	postinc0,c
   257  002CD8  06E8               	decf	wreg,f,c
   258  002CDA  E1FD               	bnz	clear_0
   259                           
   260                           ; Clear objects allocated to COMRAM (25 bytes)
   261  002CDC  EE00  F03C         	lfsr	0,__pbssCOMRAM
   262  002CE0  0E19               	movlw	25
   263  002CE2                     clear_1:
   264  002CE2  6AEE               	clrf	postinc0,c
   265  002CE4  06E8               	decf	wreg,f,c
   266  002CE6  E1FD               	bnz	clear_1
   267  002CE8                     end_of_initialization:
   268                           	opt stack 0
   269  002CE8                     __end_of__initialization:
   270                           	opt stack 0
   271  002CE8  9055               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   272  002CEA  9255               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   273  002CEC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   274  002CEE  6EF8               	movwf	tblptru,c
   275  002CF0  0100               	movlb	0
   276  002CF2  EF21  F00D         	goto	_main	;jump to C main() function
   277                           tblptru	equ	0xFF8
   278                           postinc0	equ	0xFEE
   279                           wreg	equ	0xFE8
   280                           
   281                           	psect	bssCOMRAM
   282  00003C                     __pbssCOMRAM:
   283                           	opt stack 0
   284  00003C                     _buffer1:
   285                           	opt stack 0
   286  00003C                     	ds	20
   287  000050                     _voltaje:
   288                           	opt stack 0
   289  000050                     	ds	3
   290  000053                     _adc1:
   291                           	opt stack 0
   292  000053                     	ds	2
   293                           tblptru	equ	0xFF8
   294                           postinc0	equ	0xFEE
   295                           wreg	equ	0xFE8
   296                           
   297                           	psect	bssBANK0
   298  0000DD                     __pbssBANK0:
   299                           	opt stack 0
   300  0000DD                     _buffer2:
   301                           	opt stack 0
   302  0000DD                     	ds	20
   303                           tblptru	equ	0xFF8
   304                           postinc0	equ	0xFEE
   305                           wreg	equ	0xFE8
   306                           
   307                           	psect	cstackBANK0
   308  000060                     __pcstackBANK0:
   309                           	opt stack 0
   310  000060                     ??_Lcd_Cmd:
   311  000060                     ??_Lcd_Chr_CP:
   312  000060                     ??_isdigit:
   313  000060                     ?___awmod:
   314                           	opt stack 0
   315  000060                     ?___ftpack:
   316                           	opt stack 0
   317  000060                     ?___ftneg:
   318                           	opt stack 0
   319  000060                     ?__tdiv_to_l_:
   320                           	opt stack 0
   321  000060                     ?__div_to_l_:
   322                           	opt stack 0
   323  000060                     ?___lldiv:
   324                           	opt stack 0
   325  000060                     ?___llmod:
   326                           	opt stack 0
   327  000060                     ___awmod@dividend:
   328                           	opt stack 0
   329  000060                     __div_to_l_@f1:
   330                           	opt stack 0
   331  000060                     ___ftpack@arg:
   332                           	opt stack 0
   333  000060                     __tdiv_to_l_@f1:
   334                           	opt stack 0
   335  000060                     ___ftge@ff1:
   336                           	opt stack 0
   337  000060                     ___ftneg@f1:
   338                           	opt stack 0
   339  000060                     ___lldiv@dividend:
   340                           	opt stack 0
   341  000060                     ___llmod@dividend:
   342                           	opt stack 0
   343                           
   344                           ; 4 bytes @ 0x0
   345  000060                     	ds	1
   346  000061                     _isdigit$993:
   347                           	opt stack 0
   348                           
   349                           ; 1 bytes @ 0x1
   350  000061                     	ds	1
   351  000062                     Lcd_Chr_CP@data:
   352                           	opt stack 0
   353  000062                     Lcd_Cmd@data:
   354                           	opt stack 0
   355  000062                     isdigit@c:
   356                           	opt stack 0
   357  000062                     ___awmod@divisor:
   358                           	opt stack 0
   359                           
   360                           ; 2 bytes @ 0x2
   361  000062                     	ds	1
   362  000063                     ??_Lcd_Init:
   363  000063                     Lcd_Out2@x:
   364                           	opt stack 0
   365  000063                     ___ftpack@exp:
   366                           	opt stack 0
   367  000063                     __div_to_l_@f2:
   368                           	opt stack 0
   369  000063                     __tdiv_to_l_@f2:
   370                           	opt stack 0
   371  000063                     ___ftge@ff2:
   372                           	opt stack 0
   373                           
   374                           ; 3 bytes @ 0x3
   375  000063                     	ds	1
   376  000064                     Lcd_Init@data:
   377                           	opt stack 0
   378  000064                     ___awmod@counter:
   379                           	opt stack 0
   380  000064                     ___ftpack@sign:
   381                           	opt stack 0
   382  000064                     Lcd_Out2@buffer:
   383                           	opt stack 0
   384  000064                     ___lldiv@divisor:
   385                           	opt stack 0
   386  000064                     ___llmod@divisor:
   387                           	opt stack 0
   388                           
   389                           ; 4 bytes @ 0x4
   390  000064                     	ds	1
   391  000065                     ??___ftpack:
   392  000065                     ___awmod@sign:
   393                           	opt stack 0
   394                           
   395                           ; 1 bytes @ 0x5
   396  000065                     	ds	1
   397  000066                     ??__tdiv_to_l_:
   398  000066                     ??___ftge:
   399  000066                     ?___awdiv:
   400                           	opt stack 0
   401  000066                     Lcd_Out2@y:
   402                           	opt stack 0
   403  000066                     ___awdiv@dividend:
   404                           	opt stack 0
   405  000066                     __div_to_l_@quot:
   406                           	opt stack 0
   407                           
   408                           ; 4 bytes @ 0x6
   409  000066                     	ds	1
   410  000067                     Lcd_Out2@data:
   411                           	opt stack 0
   412                           
   413                           ; 1 bytes @ 0x7
   414  000067                     	ds	1
   415  000068                     ?___lltoft:
   416                           	opt stack 0
   417  000068                     ?___lwtoft:
   418                           	opt stack 0
   419  000068                     ___llmod@counter:
   420                           	opt stack 0
   421  000068                     ___awdiv@divisor:
   422                           	opt stack 0
   423  000068                     ___lwtoft@c:
   424                           	opt stack 0
   425  000068                     ___lldiv@quotient:
   426                           	opt stack 0
   427  000068                     ___lltoft@c:
   428                           	opt stack 0
   429                           
   430                           ; 4 bytes @ 0x8
   431  000068                     	ds	1
   432  000069                     __tdiv_to_l_@quot:
   433                           	opt stack 0
   434                           
   435                           ; 4 bytes @ 0x9
   436  000069                     	ds	1
   437  00006A                     ___awdiv@counter:
   438                           	opt stack 0
   439  00006A                     __div_to_l_@cntr:
   440                           	opt stack 0
   441                           
   442                           ; 1 bytes @ 0xA
   443  00006A                     	ds	1
   444  00006B                     ___awdiv@sign:
   445                           	opt stack 0
   446  00006B                     __div_to_l_@exp1:
   447                           	opt stack 0
   448                           
   449                           ; 1 bytes @ 0xB
   450  00006B                     	ds	1
   451  00006C                     ??___lltoft:
   452  00006C                     ___lldiv@counter:
   453                           	opt stack 0
   454  00006C                     ___awdiv@quotient:
   455                           	opt stack 0
   456                           
   457                           ; 2 bytes @ 0xC
   458  00006C                     	ds	1
   459  00006D                     __tdiv_to_l_@cntr:
   460                           	opt stack 0
   461                           
   462                           ; 1 bytes @ 0xD
   463  00006D                     	ds	1
   464  00006E                     ?___wmul:
   465                           	opt stack 0
   466  00006E                     __tdiv_to_l_@exp1:
   467                           	opt stack 0
   468  00006E                     ___wmul@multiplier:
   469                           	opt stack 0
   470                           
   471                           ; 2 bytes @ 0xE
   472  00006E                     	ds	2
   473  000070                     ___lltoft@exp:
   474                           	opt stack 0
   475  000070                     ___wmul@multiplicand:
   476                           	opt stack 0
   477                           
   478                           ; 2 bytes @ 0x10
   479  000070                     	ds	2
   480  000072                     ___wmul@product:
   481                           	opt stack 0
   482                           
   483                           ; 2 bytes @ 0x12
   484  000072                     	ds	2
   485  000074                     ?___ftmul:
   486                           	opt stack 0
   487  000074                     ___ftmul@f1:
   488                           	opt stack 0
   489                           
   490                           ; 3 bytes @ 0x14
   491  000074                     	ds	3
   492  000077                     ___ftmul@f2:
   493                           	opt stack 0
   494                           
   495                           ; 3 bytes @ 0x17
   496  000077                     	ds	3
   497  00007A                     ??___ftmul:
   498                           
   499                           ; 1 bytes @ 0x1A
   500  00007A                     	ds	3
   501  00007D                     ___ftmul@exp:
   502                           	opt stack 0
   503                           
   504                           ; 1 bytes @ 0x1D
   505  00007D                     	ds	1
   506  00007E                     ___ftmul@f3_as_product:
   507                           	opt stack 0
   508                           
   509                           ; 3 bytes @ 0x1E
   510  00007E                     	ds	3
   511  000081                     ___ftmul@cntr:
   512                           	opt stack 0
   513                           
   514                           ; 1 bytes @ 0x21
   515  000081                     	ds	1
   516  000082                     ___ftmul@sign:
   517                           	opt stack 0
   518                           
   519                           ; 1 bytes @ 0x22
   520  000082                     	ds	1
   521  000083                     ?_fround:
   522                           	opt stack 0
   523  000083                     ?_scale:
   524                           	opt stack 0
   525                           
   526                           ; 3 bytes @ 0x23
   527  000083                     	ds	3
   528  000086                     _fround$1333:
   529                           	opt stack 0
   530  000086                     _scale$1334:
   531                           	opt stack 0
   532                           
   533                           ; 3 bytes @ 0x26
   534  000086                     	ds	3
   535  000089                     scale@scl:
   536                           	opt stack 0
   537  000089                     _fround$1332:
   538                           	opt stack 0
   539                           
   540                           ; 3 bytes @ 0x29
   541  000089                     	ds	1
   542  00008A                     ?___fttol:
   543                           	opt stack 0
   544  00008A                     ___fttol@f1:
   545                           	opt stack 0
   546                           
   547                           ; 3 bytes @ 0x2A
   548  00008A                     	ds	2
   549  00008C                     fround@prec:
   550                           	opt stack 0
   551                           
   552                           ; 1 bytes @ 0x2C
   553  00008C                     	ds	1
   554  00008D                     ?___ftadd:
   555                           	opt stack 0
   556  00008D                     ___ftadd@f1:
   557                           	opt stack 0
   558                           
   559                           ; 3 bytes @ 0x2D
   560  00008D                     	ds	1
   561  00008E                     ??___fttol:
   562                           
   563                           ; 1 bytes @ 0x2E
   564  00008E                     	ds	2
   565  000090                     ___ftadd@f2:
   566                           	opt stack 0
   567                           
   568                           ; 3 bytes @ 0x30
   569  000090                     	ds	3
   570  000093                     ??___ftadd:
   571  000093                     ___fttol@sign1:
   572                           	opt stack 0
   573                           
   574                           ; 1 bytes @ 0x33
   575  000093                     	ds	1
   576  000094                     ___fttol@lval:
   577                           	opt stack 0
   578                           
   579                           ; 4 bytes @ 0x34
   580  000094                     	ds	2
   581  000096                     ___ftadd@sign:
   582                           	opt stack 0
   583                           
   584                           ; 1 bytes @ 0x36
   585  000096                     	ds	1
   586  000097                     ___ftadd@exp2:
   587                           	opt stack 0
   588                           
   589                           ; 1 bytes @ 0x37
   590  000097                     	ds	1
   591  000098                     ___ftadd@exp1:
   592                           	opt stack 0
   593  000098                     ___fttol@exp1:
   594                           	opt stack 0
   595                           
   596                           ; 1 bytes @ 0x38
   597  000098                     	ds	1
   598  000099                     ?___ftdiv:
   599                           	opt stack 0
   600  000099                     ?___ftsub:
   601                           	opt stack 0
   602  000099                     ___ftdiv@f1:
   603                           	opt stack 0
   604  000099                     ___ftsub@f1:
   605                           	opt stack 0
   606                           
   607                           ; 3 bytes @ 0x39
   608  000099                     	ds	3
   609  00009C                     ___ftdiv@f2:
   610                           	opt stack 0
   611  00009C                     ___ftsub@f2:
   612                           	opt stack 0
   613                           
   614                           ; 3 bytes @ 0x3C
   615  00009C                     	ds	3
   616  00009F                     ??___ftdiv:
   617  00009F                     ?_sprintf:
   618                           	opt stack 0
   619  00009F                     sprintf@sp:
   620                           	opt stack 0
   621                           
   622                           ; 2 bytes @ 0x3F
   623  00009F                     	ds	2
   624  0000A1                     sprintf@f:
   625                           	opt stack 0
   626                           
   627                           ; 2 bytes @ 0x41
   628  0000A1                     	ds	1
   629  0000A2                     ___ftdiv@cntr:
   630                           	opt stack 0
   631                           
   632                           ; 1 bytes @ 0x42
   633  0000A2                     	ds	1
   634  0000A3                     ___ftdiv@f3:
   635                           	opt stack 0
   636                           
   637                           ; 3 bytes @ 0x43
   638  0000A3                     	ds	3
   639  0000A6                     ??_sprintf:
   640  0000A6                     ___ftdiv@exp:
   641                           	opt stack 0
   642                           
   643                           ; 1 bytes @ 0x46
   644  0000A6                     	ds	1
   645  0000A7                     ___ftdiv@sign:
   646                           	opt stack 0
   647                           
   648                           ; 1 bytes @ 0x47
   649  0000A7                     	ds	5
   650  0000AC                     _sprintf$1335:
   651                           	opt stack 0
   652                           
   653                           ; 3 bytes @ 0x4C
   654  0000AC                     	ds	3
   655  0000AF                     sprintf@ap:
   656                           	opt stack 0
   657                           
   658                           ; 2 bytes @ 0x4F
   659  0000AF                     	ds	2
   660  0000B1                     sprintf@val:
   661                           	opt stack 0
   662                           
   663                           ; 4 bytes @ 0x51
   664  0000B1                     	ds	4
   665  0000B5                     sprintf@tmpval:
   666                           	opt stack 0
   667                           
   668                           ; 4 bytes @ 0x55
   669  0000B5                     	ds	4
   670  0000B9                     sprintf@exp:
   671                           	opt stack 0
   672                           
   673                           ; 2 bytes @ 0x59
   674  0000B9                     	ds	2
   675  0000BB                     sprintf@flag:
   676                           	opt stack 0
   677                           
   678                           ; 2 bytes @ 0x5B
   679  0000BB                     	ds	2
   680  0000BD                     sprintf@width:
   681                           	opt stack 0
   682                           
   683                           ; 2 bytes @ 0x5D
   684  0000BD                     	ds	2
   685  0000BF                     sprintf@fval:
   686                           	opt stack 0
   687                           
   688                           ; 3 bytes @ 0x5F
   689  0000BF                     	ds	3
   690  0000C2                     sprintf@prec:
   691                           	opt stack 0
   692                           
   693                           ; 2 bytes @ 0x62
   694  0000C2                     	ds	2
   695  0000C4                     sprintf@c:
   696                           	opt stack 0
   697                           
   698                           ; 1 bytes @ 0x64
   699  0000C4                     	ds	1
   700  0000C5                     ??_main:
   701                           
   702                           ; 1 bytes @ 0x65
   703  0000C5                     	ds	2
   704  0000C7                     main@buffer1:
   705                           	opt stack 0
   706                           
   707                           ; 16 bytes @ 0x67
   708  0000C7                     	ds	16
   709  0000D7                     main@Amps:
   710                           	opt stack 0
   711                           
   712                           ; 3 bytes @ 0x77
   713  0000D7                     	ds	3
   714  0000DA                     main@Voltage:
   715                           	opt stack 0
   716                           
   717                           ; 3 bytes @ 0x7A
   718  0000DA                     	ds	3
   719                           tblptru	equ	0xFF8
   720                           postinc0	equ	0xFEE
   721                           wreg	equ	0xFE8
   722                           
   723                           	psect	cstackCOMRAM
   724  000001                     __pcstackCOMRAM:
   725                           	opt stack 0
   726  000001                     ?i2___ftpack:
   727                           	opt stack 0
   728  000001                     i2___ftpack@arg:
   729                           	opt stack 0
   730                           
   731                           ; 3 bytes @ 0x0
   732  000001                     	ds	3
   733  000004                     i2___ftpack@exp:
   734                           	opt stack 0
   735                           
   736                           ; 1 bytes @ 0x3
   737  000004                     	ds	1
   738  000005                     i2___ftpack@sign:
   739                           	opt stack 0
   740                           
   741                           ; 1 bytes @ 0x4
   742  000005                     	ds	1
   743  000006                     ??i2___ftpack:
   744                           
   745                           ; 1 bytes @ 0x5
   746  000006                     	ds	3
   747  000009                     ?i2___lwtoft:
   748                           	opt stack 0
   749  000009                     i2___lwtoft@c:
   750                           	opt stack 0
   751                           
   752                           ; 2 bytes @ 0x8
   753  000009                     	ds	3
   754  00000C                     ?i2___ftmul:
   755                           	opt stack 0
   756  00000C                     i2___ftmul@f1:
   757                           	opt stack 0
   758                           
   759                           ; 3 bytes @ 0xB
   760  00000C                     	ds	3
   761  00000F                     i2___ftmul@f2:
   762                           	opt stack 0
   763                           
   764                           ; 3 bytes @ 0xE
   765  00000F                     	ds	3
   766  000012                     ??i2___ftmul:
   767                           
   768                           ; 1 bytes @ 0x11
   769  000012                     	ds	3
   770  000015                     i2___ftmul@exp:
   771                           	opt stack 0
   772                           
   773                           ; 1 bytes @ 0x14
   774  000015                     	ds	1
   775  000016                     i2___ftmul@f3_as_product:
   776                           	opt stack 0
   777                           
   778                           ; 3 bytes @ 0x15
   779  000016                     	ds	3
   780  000019                     i2___ftmul@cntr:
   781                           	opt stack 0
   782                           
   783                           ; 1 bytes @ 0x18
   784  000019                     	ds	1
   785  00001A                     i2___ftmul@sign:
   786                           	opt stack 0
   787                           
   788                           ; 1 bytes @ 0x19
   789  00001A                     	ds	1
   790  00001B                     ?i2___ftdiv:
   791                           	opt stack 0
   792  00001B                     i2___ftdiv@f1:
   793                           	opt stack 0
   794                           
   795                           ; 3 bytes @ 0x1A
   796  00001B                     	ds	3
   797  00001E                     i2___ftdiv@f2:
   798                           	opt stack 0
   799                           
   800                           ; 3 bytes @ 0x1D
   801  00001E                     	ds	3
   802  000021                     ??i2___ftdiv:
   803                           
   804                           ; 1 bytes @ 0x20
   805  000021                     	ds	3
   806  000024                     i2___ftdiv@cntr:
   807                           	opt stack 0
   808                           
   809                           ; 1 bytes @ 0x23
   810  000024                     	ds	1
   811  000025                     i2___ftdiv@f3:
   812                           	opt stack 0
   813                           
   814                           ; 3 bytes @ 0x24
   815  000025                     	ds	3
   816  000028                     i2___ftdiv@exp:
   817                           	opt stack 0
   818                           
   819                           ; 1 bytes @ 0x27
   820  000028                     	ds	1
   821  000029                     i2___ftdiv@sign:
   822                           	opt stack 0
   823                           
   824                           ; 1 bytes @ 0x28
   825  000029                     	ds	1
   826  00002A                     ??_comparar:
   827                           
   828                           ; 1 bytes @ 0x29
   829  00002A                     	ds	18
   830                           tblptru	equ	0xFF8
   831                           postinc0	equ	0xFEE
   832                           wreg	equ	0xFE8
   833                           
   834 ;;
   835 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   836 ;;
   837 ;; *************** function _main *****************
   838 ;; Defined at:
   839 ;;		line 116 in file "main_014_Practice_CCP Comparacion_ADC.c"
   840 ;; Parameters:    Size  Location     Type
   841 ;;		None
   842 ;; Auto vars:     Size  Location     Type
   843 ;;  Voltage         3  122[BANK0 ] float 
   844 ;;  Amps            3  119[BANK0 ] float 
   845 ;;  buffer1        16  103[BANK0 ] unsigned char [16]
   846 ;; Return value:  Size  Location     Type
   847 ;;                  1    wreg      void 
   848 ;; Registers used:
   849 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   850 ;; Tracked objects:
   851 ;;		On entry : 0/0
   852 ;;		On exit  : 0/0
   853 ;;		Unchanged: 0/0
   854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   855 ;;      Params:         0       0       0       0       0       0       0       0       0
   856 ;;      Locals:         0      22       0       0       0       0       0       0       0
   857 ;;      Temps:          0       2       0       0       0       0       0       0       0
   858 ;;      Totals:         0      24       0       0       0       0       0       0       0
   859 ;;Total ram usage:       24 bytes
   860 ;; Hardware stack levels required when called:    7
   861 ;; This function calls:
   862 ;;		_Lcd_Cmd
   863 ;;		_Lcd_Init
   864 ;;		_Lcd_Out2
   865 ;;		___ftadd
   866 ;;		___ftdiv
   867 ;;		___ftmul
   868 ;;		___lwtoft
   869 ;;		_configstandard
   870 ;;		_sprintf
   871 ;; This function is called by:
   872 ;;		Startup code after reset
   873 ;; This function uses a non-reentrant model
   874 ;;
   875                           
   876                           	psect	text0
   877  001A42                     __ptext0:
   878                           	opt stack 0
   879  001A42                     _main:
   880                           	opt stack 24
   881                           
   882                           ;main_014_Practice_CCP Comparacion_ADC.c: 118: configstandard();
   883                           
   884                           ;incstack = 0
   885  001A42  EC04  F016         	call	_configstandard	;wreg free
   886                           
   887                           ;main_014_Practice_CCP Comparacion_ADC.c: 121: TRISAbits.RA0 = 1;
   888  001A46  8092               	bsf	3986,0,c	;volatile
   889                           
   890                           ;main_014_Practice_CCP Comparacion_ADC.c: 126: unsigned char buffer1[16];
   891                           ;main_014_Practice_CCP Comparacion_ADC.c: 129: Lcd_Init();
   892  001A48  ECDA  F00D         	call	_Lcd_Init	;wreg free
   893                           
   894                           ;main_014_Practice_CCP Comparacion_ADC.c: 130: Lcd_Cmd(1);
   895  001A4C  0E01               	movlw	1
   896  001A4E  ECAE  F00F         	call	_Lcd_Cmd
   897                           
   898                           ;main_014_Practice_CCP Comparacion_ADC.c: 131: Lcd_Cmd(12);
   899  001A52  0E0C               	movlw	12
   900  001A54  ECAE  F00F         	call	_Lcd_Cmd
   901                           
   902                           ;main_014_Practice_CCP Comparacion_ADC.c: 132: _delay((unsigned long)((100)*(16000000/40
      +                          00.0)));
   903  001A58  0E03               	movlw	3
   904  001A5A  0100               	movlb	0	; () banked
   905  001A5C  6FC6               	movwf	(??_main+1)& (0+255),b
   906  001A5E  0E08               	movlw	8
   907  001A60  6FC5               	movwf	??_main& (0+255),b
   908  001A62  0E77               	movlw	119
   909  001A64                     u3597:
   910  001A64  2EE8               	decfsz	wreg,f,c
   911  001A66  D7FE               	bra	u3597
   912  001A68  2FC5               	decfsz	??_main& (0+255),f,b
   913  001A6A  D7FC               	bra	u3597
   914  001A6C  2FC6               	decfsz	(??_main+1)& (0+255),f,b
   915  001A6E  D7FA               	bra	u3597
   916                           
   917                           ;main_014_Practice_CCP Comparacion_ADC.c: 134: ADCON2bits.ADCS=110;
   918  001A70  50C0               	movf	4032,w,c	;volatile
   919  001A72  0BF8               	andlw	-8
   920  001A74  0906               	iorlw	6
   921  001A76  6EC0               	movwf	4032,c	;volatile
   922                           
   923                           ;main_014_Practice_CCP Comparacion_ADC.c: 135: ADCON2bits.ACQT=010;
   924  001A78  96C0               	bcf	4032,3,c	;volatile
   925  001A7A  98C0               	bcf	4032,4,c	;volatile
   926  001A7C  9AC0               	bcf	4032,5,c	;volatile
   927  001A7E                     
   928                           ;main_014_Practice_CCP Comparacion_ADC.c: 137: {
   929                           ;main_014_Practice_CCP Comparacion_ADC.c: 139: ADCON0bits.GO_DONE = 1;
   930  001A7E  82C2               	bsf	4034,1,c	;volatile
   931                           
   932                           ;main_014_Practice_CCP Comparacion_ADC.c: 141: adc1 = (ADRESH<<8)+ADRESL;
   933  001A80  50C4               	movf	4036,w,c	;volatile
   934  001A82  0100               	movlb	0	; () banked
   935  001A84  6FC6               	movwf	(??_main+1)& (0+255),b
   936  001A86  6BC5               	clrf	??_main& (0+255),b
   937  001A88  50C3               	movf	4035,w,c	;volatile
   938  001A8A  25C5               	addwf	??_main& (0+255),w,b
   939  001A8C  6E53               	movwf	_adc1,c
   940  001A8E  0E00               	movlw	0
   941  001A90  21C6               	addwfc	(??_main+1)& (0+255),w,b
   942  001A92  6E54               	movwf	_adc1+1,c
   943                           
   944                           ; BSR set to: 0
   945                           ;main_014_Practice_CCP Comparacion_ADC.c: 147: float Voltage=0;
   946  001A94  0E00               	movlw	0
   947  001A96  6FDA               	movwf	main@Voltage& (0+255),b
   948  001A98  0E00               	movlw	0
   949  001A9A  6FDB               	movwf	(main@Voltage+1)& (0+255),b
   950  001A9C  0E00               	movlw	0
   951  001A9E  6FDC               	movwf	(main@Voltage+2)& (0+255),b
   952                           
   953                           ; BSR set to: 0
   954                           ;main_014_Practice_CCP Comparacion_ADC.c: 148: float Amps=0;
   955  001AA0  0E00               	movlw	0
   956  001AA2  6FD7               	movwf	main@Amps& (0+255),b
   957  001AA4  0E00               	movlw	0
   958  001AA6  6FD8               	movwf	(main@Amps+1)& (0+255),b
   959  001AA8  0E00               	movlw	0
   960  001AAA  6FD9               	movwf	(main@Amps+2)& (0+255),b
   961                           
   962                           ; BSR set to: 0
   963                           ;main_014_Practice_CCP Comparacion_ADC.c: 150: Voltage=(float)(adc1*5.0/1024.0);
   964  001AAC  0E00               	movlw	0
   965  001AAE  6F77               	movwf	___ftmul@f2& (0+255),b
   966  001AB0  0EA0               	movlw	160
   967  001AB2  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
   968  001AB4  0E40               	movlw	64
   969  001AB6  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
   970  001AB8  C053  F068         	movff	_adc1,___lwtoft@c
   971  001ABC  C054  F069         	movff	_adc1+1,___lwtoft@c+1
   972  001AC0  EC8E  F016         	call	___lwtoft	;wreg free
   973  001AC4  C068  F074         	movff	?___lwtoft,___ftmul@f1
   974  001AC8  C069  F075         	movff	?___lwtoft+1,___ftmul@f1+1
   975  001ACC  C06A  F076         	movff	?___lwtoft+2,___ftmul@f1+2
   976  001AD0  ECDA  F011         	call	___ftmul	;wreg free
   977  001AD4  C074  F099         	movff	?___ftmul,___ftdiv@f1
   978  001AD8  C075  F09A         	movff	?___ftmul+1,___ftdiv@f1+1
   979  001ADC  C076  F09B         	movff	?___ftmul+2,___ftdiv@f1+2
   980  001AE0  0E00               	movlw	0
   981  001AE2  0100               	movlb	0	; () banked
   982  001AE4  6F9C               	movwf	___ftdiv@f2& (0+255),b
   983  001AE6  0E80               	movlw	128
   984  001AE8  6F9D               	movwf	(___ftdiv@f2+1)& (0+255),b
   985  001AEA  0E44               	movlw	68
   986  001AEC  6F9E               	movwf	(___ftdiv@f2+2)& (0+255),b
   987  001AEE  ECCF  F012         	call	___ftdiv	;wreg free
   988  001AF2  C099  F0DA         	movff	?___ftdiv,main@Voltage
   989  001AF6  C09A  F0DB         	movff	?___ftdiv+1,main@Voltage+1
   990  001AFA  C09B  F0DC         	movff	?___ftdiv+2,main@Voltage+2
   991                           
   992                           ;main_014_Practice_CCP Comparacion_ADC.c: 151: Amps=((Voltage-2.5)/0.185);
   993  001AFE  0E00               	movlw	0
   994  001B00  0100               	movlb	0	; () banked
   995  001B02  6F90               	movwf	___ftadd@f2& (0+255),b
   996  001B04  0E20               	movlw	32
   997  001B06  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
   998  001B08  0EC0               	movlw	192
   999  001B0A  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
  1000  001B0C  C0DA  F08D         	movff	main@Voltage,___ftadd@f1
  1001  001B10  C0DB  F08E         	movff	main@Voltage+1,___ftadd@f1+1
  1002  001B14  C0DC  F08F         	movff	main@Voltage+2,___ftadd@f1+2
  1003  001B18  EC4A  F00C         	call	___ftadd	;wreg free
  1004  001B1C  C08D  F099         	movff	?___ftadd,___ftdiv@f1
  1005  001B20  C08E  F09A         	movff	?___ftadd+1,___ftdiv@f1+1
  1006  001B24  C08F  F09B         	movff	?___ftadd+2,___ftdiv@f1+2
  1007  001B28  0E71               	movlw	113
  1008  001B2A  0100               	movlb	0	; () banked
  1009  001B2C  6F9C               	movwf	___ftdiv@f2& (0+255),b
  1010  001B2E  0E3D               	movlw	61
  1011  001B30  6F9D               	movwf	(___ftdiv@f2+1)& (0+255),b
  1012  001B32  0E3E               	movlw	62
  1013  001B34  6F9E               	movwf	(___ftdiv@f2+2)& (0+255),b
  1014  001B36  ECCF  F012         	call	___ftdiv	;wreg free
  1015  001B3A  C099  F0D7         	movff	?___ftdiv,main@Amps
  1016  001B3E  C09A  F0D8         	movff	?___ftdiv+1,main@Amps+1
  1017  001B42  C09B  F0D9         	movff	?___ftdiv+2,main@Amps+2
  1018                           
  1019                           ;main_014_Practice_CCP Comparacion_ADC.c: 152: sprintf(buffer1,"Voltage %0.2f", Voltage)
      +                          ;
  1020  001B46  0EC7               	movlw	low main@buffer1
  1021  001B48  0100               	movlb	0	; () banked
  1022  001B4A  6F9F               	movwf	sprintf@sp& (0+255),b
  1023  001B4C  0E00               	movlw	high main@buffer1
  1024  001B4E  6FA0               	movwf	(sprintf@sp+1)& (0+255),b
  1025  001B50  0E77               	movlw	low STR_1
  1026  001B52  6FA1               	movwf	sprintf@f& (0+255),b
  1027  001B54  0E08               	movlw	high STR_1
  1028  001B56  6FA2               	movwf	(sprintf@f+1)& (0+255),b
  1029  001B58  C0DA  F0A3         	movff	main@Voltage,?_sprintf+4
  1030  001B5C  C0DB  F0A4         	movff	main@Voltage+1,?_sprintf+5
  1031  001B60  C0DC  F0A5         	movff	main@Voltage+2,?_sprintf+6
  1032  001B64  EC49  F004         	call	_sprintf	;wreg free
  1033                           
  1034                           ;main_014_Practice_CCP Comparacion_ADC.c: 153: sprintf(buffer2,"amps %0.2f", Amps);
  1035  001B68  0EDD               	movlw	low _buffer2
  1036  001B6A  0100               	movlb	0	; () banked
  1037  001B6C  6F9F               	movwf	sprintf@sp& (0+255),b
  1038  001B6E  0E00               	movlw	high _buffer2
  1039  001B70  6FA0               	movwf	(sprintf@sp+1)& (0+255),b
  1040  001B72  0E85               	movlw	low STR_2
  1041  001B74  6FA1               	movwf	sprintf@f& (0+255),b
  1042  001B76  0E08               	movlw	high STR_2
  1043  001B78  6FA2               	movwf	(sprintf@f+1)& (0+255),b
  1044  001B7A  C0D7  F0A3         	movff	main@Amps,?_sprintf+4
  1045  001B7E  C0D8  F0A4         	movff	main@Amps+1,?_sprintf+5
  1046  001B82  C0D9  F0A5         	movff	main@Amps+2,?_sprintf+6
  1047  001B86  EC49  F004         	call	_sprintf	;wreg free
  1048                           
  1049                           ;main_014_Practice_CCP Comparacion_ADC.c: 154: Lcd_Out2(1, 0, buffer1);
  1050  001B8A  0E00               	movlw	0
  1051  001B8C  0100               	movlb	0	; () banked
  1052  001B8E  6F63               	movwf	Lcd_Out2@x& (0+255),b
  1053  001B90  0EC7               	movlw	low main@buffer1
  1054  001B92  6F64               	movwf	Lcd_Out2@buffer& (0+255),b
  1055  001B94  0E00               	movlw	high main@buffer1
  1056  001B96  6F65               	movwf	(Lcd_Out2@buffer+1)& (0+255),b
  1057  001B98  0E01               	movlw	1
  1058  001B9A  EC6C  F015         	call	_Lcd_Out2
  1059                           
  1060                           ;main_014_Practice_CCP Comparacion_ADC.c: 155: Lcd_Out2(2, 0, buffer2);
  1061  001B9E  0E00               	movlw	0
  1062  001BA0  0100               	movlb	0	; () banked
  1063  001BA2  6F63               	movwf	Lcd_Out2@x& (0+255),b
  1064  001BA4  0EDD               	movlw	low _buffer2
  1065  001BA6  6F64               	movwf	Lcd_Out2@buffer& (0+255),b
  1066  001BA8  0E00               	movlw	high _buffer2
  1067  001BAA  6F65               	movwf	(Lcd_Out2@buffer+1)& (0+255),b
  1068  001BAC  0E02               	movlw	2
  1069  001BAE  EC6C  F015         	call	_Lcd_Out2
  1070  001BB2  D765               	goto	l115
  1071  001BB4                     __end_of_main:
  1072                           	opt stack 0
  1073                           tblptru	equ	0xFF8
  1074                           postinc0	equ	0xFEE
  1075                           wreg	equ	0xFE8
  1076                           
  1077 ;; *************** function _sprintf *****************
  1078 ;; Defined at:
  1079 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  1080 ;; Parameters:    Size  Location     Type
  1081 ;;  sp              2   63[BANK0 ] PTR unsigned char 
  1082 ;;		 -> buffer2(20), main@buffer1(16), 
  1083 ;;  f               2   65[BANK0 ] PTR const unsigned char 
  1084 ;;		 -> STR_2(11), STR_1(14), 
  1085 ;; Auto vars:     Size  Location     Type
  1086 ;;  tmpval          4   85[BANK0 ] struct .
  1087 ;;  val             4   81[BANK0 ] unsigned long 
  1088 ;;  fval            3   95[BANK0 ] unsigned long 
  1089 ;;  cp              3    0        PTR const unsigned char 
  1090 ;;  prec            2   98[BANK0 ] int 
  1091 ;;  width           2   93[BANK0 ] int 
  1092 ;;  flag            2   91[BANK0 ] unsigned short 
  1093 ;;  exp             2   89[BANK0 ] int 
  1094 ;;  ap              2   79[BANK0 ] PTR void [1]
  1095 ;;		 -> ?_sprintf(2), 
  1096 ;;  len             2    0        unsigned int 
  1097 ;;  c               1  100[BANK0 ] char 
  1098 ;;  d               1    0        unsigned char 
  1099 ;; Return value:  Size  Location     Type
  1100 ;;                  2   63[BANK0 ] int 
  1101 ;; Registers used:
  1102 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1103 ;; Tracked objects:
  1104 ;;		On entry : 0/0
  1105 ;;		On exit  : 0/0
  1106 ;;		Unchanged: 0/0
  1107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1108 ;;      Params:         0       7       0       0       0       0       0       0       0
  1109 ;;      Locals:         0      25       0       0       0       0       0       0       0
  1110 ;;      Temps:          0       6       0       0       0       0       0       0       0
  1111 ;;      Totals:         0      38       0       0       0       0       0       0       0
  1112 ;;Total ram usage:       38 bytes
  1113 ;; Hardware stack levels used:    1
  1114 ;; Hardware stack levels required when called:    6
  1115 ;; This function calls:
  1116 ;;		___awdiv
  1117 ;;		___ftadd
  1118 ;;		___ftge
  1119 ;;		___ftmul
  1120 ;;		___ftneg
  1121 ;;		___ftsub
  1122 ;;		___fttol
  1123 ;;		___lldiv
  1124 ;;		___llmod
  1125 ;;		___lltoft
  1126 ;;		___wmul
  1127 ;;		__div_to_l_
  1128 ;;		__tdiv_to_l_
  1129 ;;		_fround
  1130 ;;		_isdigit
  1131 ;;		_scale
  1132 ;; This function is called by:
  1133 ;;		_main
  1134 ;; This function uses a non-reentrant model
  1135 ;;
  1136                           
  1137                           	psect	text1
  1138  000892                     __ptext1:
  1139                           	opt stack 0
  1140  000892                     _sprintf:
  1141                           	opt stack 24
  1142                           
  1143                           ;doprnt.c: 494: va_list ap;
  1144                           ;doprnt.c: 499: signed char c;
  1145                           ;doprnt.c: 501: int width;
  1146                           ;doprnt.c: 504: int prec;
  1147                           ;doprnt.c: 508: unsigned short flag;
  1148                           ;doprnt.c: 515: char d;
  1149                           ;doprnt.c: 516: double fval;
  1150                           ;doprnt.c: 517: int exp;
  1151                           ;doprnt.c: 523: union {
  1152                           ;doprnt.c: 524: unsigned long vd;
  1153                           ;doprnt.c: 525: double integ;
  1154                           ;doprnt.c: 526: } tmpval;
  1155                           ;doprnt.c: 528: unsigned long val;
  1156                           ;doprnt.c: 529: unsigned len;
  1157                           ;doprnt.c: 530: const char * cp;
  1158                           ;doprnt.c: 533: *ap = __va_start();
  1159                           
  1160                           ;incstack = 0
  1161  000892  0EA3               	movlw	low (?_sprintf+4)
  1162  000894  0100               	movlb	0	; () banked
  1163  000896  6FAF               	movwf	sprintf@ap& (0+255),b
  1164  000898  0E00               	movlw	high (?_sprintf+4)
  1165  00089A  6FB0               	movwf	(sprintf@ap+1)& (0+255),b
  1166                           
  1167                           ;doprnt.c: 536: while(c = *f++) {
  1168  00089C  EFE2  F008         	goto	l244
  1169  0008A0                     
  1170                           ; BSR set to: 0
  1171                           ;doprnt.c: 538: if(c != '%')
  1172                           
  1173                           ; BSR set to: 0
  1174  0008A0  0E25               	movlw	37
  1175  0008A2  19C4               	xorwf	sprintf@c& (0+255),w,b
  1176  0008A4  B4D8               	btfsc	status,2,c
  1177  0008A6  D008               	goto	l155
  1178                           
  1179                           ; BSR set to: 0
  1180                           ;doprnt.c: 540: {
  1181                           ;doprnt.c: 541: ((*sp++ = (c)));
  1182  0008A8  C09F  FFD9         	movff	sprintf@sp,fsr2l
  1183  0008AC  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  1184  0008B0  C0C4  FFDF         	movff	sprintf@c,indf2
  1185  0008B4  EFE0  F008         	goto	l3227
  1186  0008B8                     l155:
  1187                           
  1188                           ; BSR set to: 0
  1189                           ;doprnt.c: 543: }
  1190                           ;doprnt.c: 546: width = 0;
  1191                           
  1192                           ; BSR set to: 0
  1193  0008B8  0E00               	movlw	0
  1194  0008BA  6FBE               	movwf	(sprintf@width+1)& (0+255),b
  1195  0008BC  0E00               	movlw	0
  1196  0008BE  6FBD               	movwf	sprintf@width& (0+255),b
  1197                           
  1198                           ;doprnt.c: 548: flag = 0;
  1199  0008C0  0E00               	movlw	0
  1200  0008C2  6FBC               	movwf	(sprintf@flag+1)& (0+255),b
  1201  0008C4  0E00               	movlw	0
  1202  0008C6  6FBB               	movwf	sprintf@flag& (0+255),b
  1203                           
  1204                           ; BSR set to: 0
  1205                           ;doprnt.c: 551: switch(*f) {
  1206                           
  1207                           ;doprnt.c: 550: for(;;) {
  1208  0008C8  D004               	goto	l157
  1209  0008CA                     
  1210                           ;doprnt.c: 580: flag |= 0x04;
  1211                           
  1212                           ; BSR set to: 0
  1213  0008CA  0100               	movlb	0	; () banked
  1214  0008CC  85BB               	bsf	sprintf@flag& (0+255),2,b
  1215                           
  1216                           ;doprnt.c: 581: f++;
  1217  0008CE  4BA1               	infsnz	sprintf@f& (0+255),f,b
  1218  0008D0  2BA2               	incf	(sprintf@f+1)& (0+255),f,b
  1219  0008D2                     l157:
  1220                           
  1221                           ; BSR set to: 0
  1222  0008D2  C0A1  FFF6         	movff	sprintf@f,tblptrl
  1223  0008D6  C0A2  FFF7         	movff	sprintf@f+1,tblptrh
  1224  0008DA                     	if	0	;tblptru may be non-zero
  1225  0008DA                     	endif
  1226  0008DA                     	if	0	;tblptru may be non-zero
  1227  0008DA                     	endif
  1228  0008DA  0008               	tblrd		*
  1229  0008DC  50F5               	movf	tablat,w,c
  1230                           
  1231                           ; Switch size 1, requested type "space"
  1232                           ; Number of cases is 1, Range of values is 48 to 48
  1233                           ; switch strategies available:
  1234                           ; Name         Instructions Cycles
  1235                           ; simple_byte            4     3 (average)
  1236                           ;	Chosen strategy is simple_byte
  1237  0008DE  0A30               	xorlw	48	; case 48
  1238  0008E0  B4D8               	btfsc	status,2,c
  1239  0008E2  D7F3               	goto	l158
  1240                           
  1241                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1242                           
  1243                           ;doprnt.c: 586: }
  1244                           
  1245                           ;doprnt.c: 585: break;
  1246  0008E4  C0A1  FFF6         	movff	sprintf@f,tblptrl
  1247  0008E8  C0A2  FFF7         	movff	sprintf@f+1,tblptrh
  1248  0008EC                     	if	0	;tblptru may be non-zero
  1249  0008EC                     	endif
  1250  0008EC                     	if	0	;tblptru may be non-zero
  1251  0008EC                     	endif
  1252  0008EC  0008               	tblrd		*
  1253  0008EE  50F5               	movf	tablat,w,c
  1254  0008F0  ECB3  F016         	call	_isdigit
  1255  0008F4  A0D8               	btfss	status,0,c
  1256  0008F6  D035               	goto	u2910
  1257                           
  1258                           ;doprnt.c: 598: width = 0;
  1259  0008F8  0E00               	movlw	0
  1260  0008FA  0100               	movlb	0	; () banked
  1261  0008FC  6FBE               	movwf	(sprintf@width+1)& (0+255),b
  1262  0008FE  0E00               	movlw	0
  1263  000900  6FBD               	movwf	sprintf@width& (0+255),b
  1264  000902                     
  1265                           ;doprnt.c: 600: width *= 10;
  1266                           
  1267                           ; BSR set to: 0
  1268  000902  C0BD  F06E         	movff	sprintf@width,___wmul@multiplier
  1269  000906  C0BE  F06F         	movff	sprintf@width+1,___wmul@multiplier+1
  1270  00090A  0E00               	movlw	0
  1271  00090C  0100               	movlb	0	; () banked
  1272  00090E  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1273  000910  0E0A               	movlw	10
  1274  000912  6F70               	movwf	___wmul@multiplicand& (0+255),b
  1275  000914  EC54  F016         	call	___wmul	;wreg free
  1276  000918  C06E  F0BD         	movff	?___wmul,sprintf@width
  1277  00091C  C06F  F0BE         	movff	?___wmul+1,sprintf@width+1
  1278                           
  1279                           ;doprnt.c: 601: width += *f++ - '0';
  1280  000920  0ED0               	movlw	208
  1281  000922  0100               	movlb	0	; () banked
  1282  000924  6FA6               	movwf	??_sprintf& (0+255),b
  1283  000926  0EFF               	movlw	255
  1284  000928  6FA7               	movwf	(??_sprintf+1)& (0+255),b
  1285  00092A  C0A1  FFF6         	movff	sprintf@f,tblptrl
  1286  00092E  C0A2  FFF7         	movff	sprintf@f+1,tblptrh
  1287  000932                     	if	0	;tblptru may be non-zero
  1288  000932                     	endif
  1289  000932                     	if	0	;tblptru may be non-zero
  1290  000932                     	endif
  1291  000932  0008               	tblrd		*
  1292  000934  50F5               	movf	tablat,w,c
  1293  000936  6FA8               	movwf	(??_sprintf+2)& (0+255),b
  1294  000938  6BA9               	clrf	(??_sprintf+3)& (0+255),b
  1295  00093A  51A6               	movf	??_sprintf& (0+255),w,b
  1296  00093C  27A8               	addwf	(??_sprintf+2)& (0+255),f,b
  1297  00093E  51A7               	movf	(??_sprintf+1)& (0+255),w,b
  1298  000940  23A9               	addwfc	(??_sprintf+3)& (0+255),f,b
  1299  000942  51A8               	movf	(??_sprintf+2)& (0+255),w,b
  1300  000944  27BD               	addwf	sprintf@width& (0+255),f,b
  1301  000946  51A9               	movf	(??_sprintf+3)& (0+255),w,b
  1302  000948  23BE               	addwfc	(sprintf@width+1)& (0+255),f,b
  1303                           
  1304                           ; BSR set to: 0
  1305  00094A  4BA1               	infsnz	sprintf@f& (0+255),f,b
  1306  00094C  2BA2               	incf	(sprintf@f+1)& (0+255),f,b
  1307                           
  1308                           ; BSR set to: 0
  1309                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1310  00094E  C0A1  FFF6         	movff	sprintf@f,tblptrl
  1311  000952  C0A2  FFF7         	movff	sprintf@f+1,tblptrh
  1312  000956                     	if	0	;tblptru may be non-zero
  1313  000956                     	endif
  1314  000956                     	if	0	;tblptru may be non-zero
  1315  000956                     	endif
  1316  000956  0008               	tblrd		*
  1317  000958  50F5               	movf	tablat,w,c
  1318  00095A  ECB3  F016         	call	_isdigit
  1319  00095E  B0D8               	btfsc	status,0,c
  1320  000960  D7D0               	goto	l163
  1321  000962                     u2910:
  1322                           
  1323                           ;doprnt.c: 608: }
  1324                           ;doprnt.c: 611: if(*f == '.') {
  1325  000962  C0A1  FFF6         	movff	sprintf@f,tblptrl
  1326  000966  C0A2  FFF7         	movff	sprintf@f+1,tblptrh
  1327  00096A                     	if	0	;tblptru may be non-zero
  1328  00096A                     	endif
  1329  00096A                     	if	0	;tblptru may be non-zero
  1330  00096A                     	endif
  1331  00096A  0008               	tblrd		*
  1332  00096C  50F5               	movf	tablat,w,c
  1333  00096E  0A2E               	xorlw	46
  1334  000970  A4D8               	btfss	status,2,c
  1335  000972  D031               	goto	l165
  1336                           
  1337                           ;doprnt.c: 612: flag |= 0x4000;
  1338  000974  0100               	movlb	0	; () banked
  1339  000976  8DBC               	bsf	(sprintf@flag+1)& (0+255),6,b
  1340                           
  1341                           ;doprnt.c: 613: f++;
  1342  000978  4BA1               	infsnz	sprintf@f& (0+255),f,b
  1343  00097A  2BA2               	incf	(sprintf@f+1)& (0+255),f,b
  1344                           
  1345                           ; BSR set to: 0
  1346                           ;doprnt.c: 620: {
  1347                           ;doprnt.c: 621: prec = 0;
  1348  00097C  0E00               	movlw	0
  1349  00097E  6FC3               	movwf	(sprintf@prec+1)& (0+255),b
  1350  000980  0E00               	movlw	0
  1351  000982  6FC2               	movwf	sprintf@prec& (0+255),b
  1352                           
  1353                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1354  000984  D01D               	goto	l166
  1355  000986                     
  1356                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1357                           
  1358                           ; BSR set to: 0
  1359  000986  C0C2  F06E         	movff	sprintf@prec,___wmul@multiplier
  1360  00098A  C0C3  F06F         	movff	sprintf@prec+1,___wmul@multiplier+1
  1361  00098E  0E00               	movlw	0
  1362  000990  0100               	movlb	0	; () banked
  1363  000992  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1364  000994  0E0A               	movlw	10
  1365  000996  6F70               	movwf	___wmul@multiplicand& (0+255),b
  1366  000998  EC54  F016         	call	___wmul	;wreg free
  1367  00099C  C0A1  FFF6         	movff	sprintf@f,tblptrl
  1368  0009A0  C0A2  FFF7         	movff	sprintf@f+1,tblptrh
  1369  0009A4                     	if	0	;tblptru may be non-zero
  1370  0009A4                     	endif
  1371  0009A4                     	if	0	;tblptru may be non-zero
  1372  0009A4                     	endif
  1373  0009A4  0008               	tblrd		*
  1374  0009A6  50F5               	movf	tablat,w,c
  1375  0009A8  0100               	movlb	0	; () banked
  1376  0009AA  276E               	addwf	?___wmul& (0+255),f,b
  1377  0009AC  0E00               	movlw	0
  1378  0009AE  236F               	addwfc	(?___wmul+1)& (0+255),f,b
  1379  0009B0  0ED0               	movlw	208
  1380  0009B2  256E               	addwf	?___wmul& (0+255),w,b
  1381  0009B4  6FC2               	movwf	sprintf@prec& (0+255),b
  1382  0009B6  0EFF               	movlw	255
  1383  0009B8  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  1384  0009BA  6FC3               	movwf	(sprintf@prec+1)& (0+255),b
  1385                           
  1386                           ; BSR set to: 0
  1387  0009BC  4BA1               	infsnz	sprintf@f& (0+255),f,b
  1388  0009BE  2BA2               	incf	(sprintf@f+1)& (0+255),f,b
  1389  0009C0                     l166:
  1390                           
  1391                           ; BSR set to: 0
  1392                           
  1393                           ; BSR set to: 0
  1394  0009C0  C0A1  FFF6         	movff	sprintf@f,tblptrl
  1395  0009C4  C0A2  FFF7         	movff	sprintf@f+1,tblptrh
  1396  0009C8                     	if	0	;tblptru may be non-zero
  1397  0009C8                     	endif
  1398  0009C8                     	if	0	;tblptru may be non-zero
  1399  0009C8                     	endif
  1400  0009C8  0008               	tblrd		*
  1401  0009CA  50F5               	movf	tablat,w,c
  1402  0009CC  ECB3  F016         	call	_isdigit
  1403  0009D0  A0D8               	btfss	status,0,c
  1404  0009D2  D00A               	goto	l170
  1405  0009D4  D7D8               	goto	l167
  1406  0009D6                     l165:
  1407                           
  1408                           ;doprnt.c: 626: prec = 0;
  1409  0009D6  0E00               	movlw	0
  1410  0009D8  0100               	movlb	0	; () banked
  1411  0009DA  6FC3               	movwf	(sprintf@prec+1)& (0+255),b
  1412  0009DC  0E00               	movlw	0
  1413  0009DE  6FC2               	movwf	sprintf@prec& (0+255),b
  1414                           
  1415                           ; BSR set to: 0
  1416                           ;doprnt.c: 628: flag |= 0x1000;
  1417  0009E0  89BC               	bsf	(sprintf@flag+1)& (0+255),4,b
  1418                           
  1419                           ; BSR set to: 0
  1420                           ;doprnt.c: 630: }
  1421                           ;doprnt.c: 635: switch(c = *f++) {
  1422  0009E2  D002               	goto	l170
  1423  0009E4                     
  1424                           ; BSR set to: 0
  1425                           ;doprnt.c: 663: flag |= 0x400;
  1426                           
  1427                           ; BSR set to: 0
  1428  0009E4  85BC               	bsf	(sprintf@flag+1)& (0+255),2,b
  1429                           
  1430                           ;doprnt.c: 664: break;
  1431  0009E6  D012               	goto	l174
  1432  0009E8                     l170:
  1433                           
  1434                           ; BSR set to: 0
  1435  0009E8  C0A1  FFF6         	movff	sprintf@f,tblptrl
  1436  0009EC  C0A2  FFF7         	movff	sprintf@f+1,tblptrh
  1437  0009F0  0100               	movlb	0	; () banked
  1438  0009F2  4BA1               	infsnz	sprintf@f& (0+255),f,b
  1439  0009F4  2BA2               	incf	(sprintf@f+1)& (0+255),f,b
  1440  0009F6                     	if	0	;tblptru may be non-zero
  1441  0009F6                     	endif
  1442  0009F6                     	if	0	;tblptru may be non-zero
  1443  0009F6                     	endif
  1444  0009F6  0008               	tblrd		*
  1445  0009F8  CFF5 F0C4          	movff	tablat,sprintf@c
  1446  0009FC  51C4               	movf	sprintf@c& (0+255),w,b
  1447                           
  1448                           ; Switch size 1, requested type "space"
  1449                           ; Number of cases is 2, Range of values is 0 to 102
  1450                           ; switch strategies available:
  1451                           ; Name         Instructions Cycles
  1452                           ; simple_byte            7     4 (average)
  1453                           ;	Chosen strategy is simple_byte
  1454  0009FE  0A00               	xorlw	0	; case 0
  1455  000A00  B4D8               	btfsc	status,2,c
  1456  000A02  D3ED               	goto	u3400
  1457  000A04  0A66               	xorlw	102	; case 102
  1458  000A06  B4D8               	btfsc	status,2,c
  1459  000A08  D7ED               	goto	l173
  1460  000A0A  D3DC               	goto	l244
  1461  000A0C                     l174:
  1462                           
  1463                           ; BSR set to: 0
  1464                           ;doprnt.c: 825: if(flag & (0x700)) {
  1465                           
  1466                           ; BSR set to: 0
  1467  000A0C  0E07               	movlw	7
  1468  000A0E  15BC               	andwf	(sprintf@flag+1)& (0+255),w,b
  1469  000A10  B4D8               	btfsc	status,2,c
  1470  000A12  D329               	goto	l176
  1471                           
  1472                           ; BSR set to: 0
  1473                           ;doprnt.c: 827: if(flag & 0x1000)
  1474  000A14  A9BC               	btfss	(sprintf@flag+1)& (0+255),4,b
  1475  000A16  D004               	goto	l177
  1476                           
  1477                           ; BSR set to: 0
  1478                           ;doprnt.c: 829: prec = 6;
  1479  000A18  0E00               	movlw	0
  1480  000A1A  6FC3               	movwf	(sprintf@prec+1)& (0+255),b
  1481  000A1C  0E06               	movlw	6
  1482  000A1E  6FC2               	movwf	sprintf@prec& (0+255),b
  1483  000A20                     l177:
  1484                           
  1485                           ; BSR set to: 0
  1486                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1487                           
  1488                           ; BSR set to: 0
  1489  000A20  C0AF  FFD9         	movff	sprintf@ap,fsr2l
  1490  000A24  C0B0  FFDA         	movff	sprintf@ap+1,fsr2h
  1491  000A28  CFDE F0BF          	movff	postinc2,sprintf@fval
  1492  000A2C  CFDE F0C0          	movff	postinc2,sprintf@fval+1
  1493  000A30  CFDD F0C1          	movff	postdec2,sprintf@fval+2
  1494                           
  1495                           ; BSR set to: 0
  1496  000A34  0E03               	movlw	3
  1497  000A36  27AF               	addwf	sprintf@ap& (0+255),f,b
  1498  000A38  0E00               	movlw	0
  1499  000A3A  23B0               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1500                           
  1501                           ; BSR set to: 0
  1502                           ;doprnt.c: 831: if(fval < 0.0) {
  1503  000A3C  AFC1               	btfss	(sprintf@fval+2)& (0+255),7,b
  1504  000A3E  D011               	goto	l178
  1505                           
  1506                           ; BSR set to: 0
  1507                           ;doprnt.c: 832: fval = -fval;
  1508  000A40  C0BF  F060         	movff	sprintf@fval,___ftneg@f1
  1509  000A44  C0C0  F061         	movff	sprintf@fval+1,___ftneg@f1+1
  1510  000A48  C0C1  F062         	movff	sprintf@fval+2,___ftneg@f1+2
  1511  000A4C  EC7B  F016         	call	___ftneg	;wreg free
  1512  000A50  C060  F0BF         	movff	?___ftneg,sprintf@fval
  1513  000A54  C061  F0C0         	movff	?___ftneg+1,sprintf@fval+1
  1514  000A58  C062  F0C1         	movff	?___ftneg+2,sprintf@fval+2
  1515                           
  1516                           ;doprnt.c: 833: flag |= 0x03;
  1517  000A5C  0E03               	movlw	3
  1518  000A5E  0100               	movlb	0	; () banked
  1519  000A60  13BB               	iorwf	sprintf@flag& (0+255),f,b
  1520  000A62                     l178:
  1521                           
  1522                           ; BSR set to: 0
  1523                           ;doprnt.c: 834: }
  1524                           ;doprnt.c: 835: exp = 0;
  1525                           
  1526                           ; BSR set to: 0
  1527  000A62  0E00               	movlw	0
  1528  000A64  6FBA               	movwf	(sprintf@exp+1)& (0+255),b
  1529  000A66  0E00               	movlw	0
  1530  000A68  6FB9               	movwf	sprintf@exp& (0+255),b
  1531                           
  1532                           ; BSR set to: 0
  1533                           ;doprnt.c: 836: if( fval!=0) {
  1534  000A6A  51BF               	movf	sprintf@fval& (0+255),w,b
  1535  000A6C  11C0               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1536  000A6E  11C1               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1537  000A70  B4D8               	btfsc	status,2,c
  1538  000A72  D088               	goto	l183
  1539                           
  1540                           ; BSR set to: 0
  1541                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1542  000A74  0E82               	movlw	130
  1543  000A76  6FA6               	movwf	??_sprintf& (0+255),b
  1544  000A78  0EFF               	movlw	255
  1545  000A7A  6FA7               	movwf	(??_sprintf+1)& (0+255),b
  1546  000A7C  C0BF  F0A8         	movff	sprintf@fval,??_sprintf+2
  1547  000A80  C0C0  F0A9         	movff	sprintf@fval+1,??_sprintf+3
  1548  000A84  C0C1  F0AA         	movff	sprintf@fval+2,??_sprintf+4
  1549  000A88  C0C2  F0AB         	movff	sprintf@fval+3,??_sprintf+5
  1550  000A8C  0E10               	movlw	16
  1551  000A8E  D005               	goto	u2980
  1552  000A90                     u2985:
  1553  000A90  90D8               	bcf	status,0,c
  1554  000A92  33AB               	rrcf	(??_sprintf+5)& (0+255),f,b
  1555  000A94  33AA               	rrcf	(??_sprintf+4)& (0+255),f,b
  1556  000A96  33A9               	rrcf	(??_sprintf+3)& (0+255),f,b
  1557  000A98  33A8               	rrcf	(??_sprintf+2)& (0+255),f,b
  1558  000A9A                     u2980:
  1559  000A9A  2EE8               	decfsz	wreg,f,c
  1560  000A9C  D7F9               	goto	u2985
  1561  000A9E  51A8               	movf	(??_sprintf+2)& (0+255),w,b
  1562  000AA0  25A6               	addwf	??_sprintf& (0+255),w,b
  1563  000AA2  6FB9               	movwf	sprintf@exp& (0+255),b
  1564  000AA4  0E00               	movlw	0
  1565  000AA6  21A7               	addwfc	(??_sprintf+1)& (0+255),w,b
  1566  000AA8  6FBA               	movwf	(sprintf@exp+1)& (0+255),b
  1567                           
  1568                           ; BSR set to: 0
  1569                           ;doprnt.c: 838: exp--;
  1570  000AAA  07B9               	decf	sprintf@exp& (0+255),f,b
  1571  000AAC  A0D8               	btfss	status,0,c
  1572  000AAE  07BA               	decf	(sprintf@exp+1)& (0+255),f,b
  1573                           
  1574                           ; BSR set to: 0
  1575                           ;doprnt.c: 839: exp *= 3;
  1576  000AB0  C0B9  F06E         	movff	sprintf@exp,___wmul@multiplier
  1577  000AB4  C0BA  F06F         	movff	sprintf@exp+1,___wmul@multiplier+1
  1578  000AB8  0E00               	movlw	0
  1579  000ABA  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1580  000ABC  0E03               	movlw	3
  1581  000ABE  6F70               	movwf	___wmul@multiplicand& (0+255),b
  1582  000AC0  EC54  F016         	call	___wmul	;wreg free
  1583  000AC4  C06E  F0B9         	movff	?___wmul,sprintf@exp
  1584  000AC8  C06F  F0BA         	movff	?___wmul+1,sprintf@exp+1
  1585                           
  1586                           ;doprnt.c: 840: exp /= 10;
  1587  000ACC  C0B9  F066         	movff	sprintf@exp,___awdiv@dividend
  1588  000AD0  C0BA  F067         	movff	sprintf@exp+1,___awdiv@dividend+1
  1589  000AD4  0E00               	movlw	0
  1590  000AD6  0100               	movlb	0	; () banked
  1591  000AD8  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  1592  000ADA  0E0A               	movlw	10
  1593  000ADC  6F68               	movwf	___awdiv@divisor& (0+255),b
  1594  000ADE  ECAE  F014         	call	___awdiv	;wreg free
  1595  000AE2  C066  F0B9         	movff	?___awdiv,sprintf@exp
  1596  000AE6  C067  F0BA         	movff	?___awdiv+1,sprintf@exp+1
  1597                           
  1598                           ;doprnt.c: 841: if(exp < 0)
  1599  000AEA  0100               	movlb	0	; () banked
  1600  000AEC  AFBA               	btfss	(sprintf@exp+1)& (0+255),7,b
  1601  000AEE  D003               	goto	l180
  1602                           
  1603                           ; BSR set to: 0
  1604                           ;doprnt.c: 842: exp--;
  1605  000AF0  07B9               	decf	sprintf@exp& (0+255),f,b
  1606  000AF2  A0D8               	btfss	status,0,c
  1607  000AF4  07BA               	decf	(sprintf@exp+1)& (0+255),f,b
  1608  000AF6                     l180:
  1609                           
  1610                           ; BSR set to: 0
  1611                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1612                           
  1613                           ; BSR set to: 0
  1614  000AF6  51B9               	movf	sprintf@exp& (0+255),w,b
  1615  000AF8  0800               	sublw	0
  1616  000AFA  ECF6  F008         	call	_scale
  1617  000AFE  C083  F0B5         	movff	?_scale,sprintf@tmpval
  1618  000B02  C084  F0B6         	movff	?_scale+1,sprintf@tmpval+1
  1619  000B06  C085  F0B7         	movff	?_scale+2,sprintf@tmpval+2
  1620                           
  1621                           ;doprnt.c: 847: tmpval.integ *= fval;
  1622  000B0A  C0B5  F074         	movff	sprintf@tmpval,___ftmul@f1
  1623  000B0E  C0B6  F075         	movff	sprintf@tmpval+1,___ftmul@f1+1
  1624  000B12  C0B7  F076         	movff	sprintf@tmpval+2,___ftmul@f1+2
  1625  000B16  C0BF  F077         	movff	sprintf@fval,___ftmul@f2
  1626  000B1A  C0C0  F078         	movff	sprintf@fval+1,___ftmul@f2+1
  1627  000B1E  C0C1  F079         	movff	sprintf@fval+2,___ftmul@f2+2
  1628  000B22  ECDA  F011         	call	___ftmul	;wreg free
  1629  000B26  C074  F0B5         	movff	?___ftmul,sprintf@tmpval
  1630  000B2A  C075  F0B6         	movff	?___ftmul+1,sprintf@tmpval+1
  1631  000B2E  C076  F0B7         	movff	?___ftmul+2,sprintf@tmpval+2
  1632                           
  1633                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1634  000B32  C0B5  F060         	movff	sprintf@tmpval,___ftge@ff1
  1635  000B36  C0B6  F061         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1636  000B3A  C0B7  F062         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1637  000B3E  0E00               	movlw	0
  1638  000B40  0100               	movlb	0	; () banked
  1639  000B42  6F63               	movwf	___ftge@ff2& (0+255),b
  1640  000B44  0E80               	movlw	128
  1641  000B46  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  1642  000B48  0E3F               	movlw	63
  1643  000B4A  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  1644  000B4C  EC65  F014         	call	___ftge	;wreg free
  1645  000B50  0100               	movlb	0	; () banked
  1646  000B52  B0D8               	btfsc	status,0,c
  1647  000B54  D004               	goto	l181
  1648                           
  1649                           ; BSR set to: 0
  1650                           ;doprnt.c: 849: exp--;
  1651  000B56  07B9               	decf	sprintf@exp& (0+255),f,b
  1652  000B58  A0D8               	btfss	status,0,c
  1653  000B5A  07BA               	decf	(sprintf@exp+1)& (0+255),f,b
  1654  000B5C  D013               	goto	l183
  1655  000B5E                     l181:
  1656                           
  1657                           ; BSR set to: 0
  1658                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1659                           
  1660                           ; BSR set to: 0
  1661  000B5E  C0B5  F060         	movff	sprintf@tmpval,___ftge@ff1
  1662  000B62  C0B6  F061         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1663  000B66  C0B7  F062         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1664  000B6A  0E00               	movlw	0
  1665  000B6C  6F63               	movwf	___ftge@ff2& (0+255),b
  1666  000B6E  0E20               	movlw	32
  1667  000B70  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  1668  000B72  0E41               	movlw	65
  1669  000B74  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  1670  000B76  EC65  F014         	call	___ftge	;wreg free
  1671  000B7A  0100               	movlb	0	; () banked
  1672  000B7C  A0D8               	btfss	status,0,c
  1673  000B7E  D002               	goto	l183
  1674                           
  1675                           ; BSR set to: 0
  1676                           ;doprnt.c: 851: exp++;
  1677  000B80  4BB9               	infsnz	sprintf@exp& (0+255),f,b
  1678  000B82  2BBA               	incf	(sprintf@exp+1)& (0+255),f,b
  1679  000B84                     l183:
  1680                           
  1681                           ; BSR set to: 0
  1682                           ;doprnt.c: 852: }
  1683                           ;doprnt.c: 1112: if(prec <= 12)
  1684                           
  1685                           ; BSR set to: 0
  1686                           
  1687                           ; BSR set to: 0
  1688                           
  1689                           ; BSR set to: 0
  1690  000B84  BFC3               	btfsc	(sprintf@prec+1)& (0+255),7,b
  1691  000B86  D006               	goto	u3020
  1692  000B88  51C3               	movf	(sprintf@prec+1)& (0+255),w,b
  1693  000B8A  E11B               	bnz	l3033
  1694  000B8C  0E0D               	movlw	13
  1695  000B8E  5DC2               	subwf	sprintf@prec& (0+255),w,b
  1696  000B90  B0D8               	btfsc	status,0,c
  1697  000B92  D017               	goto	l184
  1698  000B94                     u3020:
  1699                           
  1700                           ; BSR set to: 0
  1701                           ;doprnt.c: 1113: fval += fround(prec);
  1702  000B94  C0BF  F08D         	movff	sprintf@fval,___ftadd@f1
  1703  000B98  C0C0  F08E         	movff	sprintf@fval+1,___ftadd@f1+1
  1704  000B9C  C0C1  F08F         	movff	sprintf@fval+2,___ftadd@f1+2
  1705  000BA0  51C2               	movf	sprintf@prec& (0+255),w,b
  1706  000BA2  EC12  F00B         	call	_fround
  1707  000BA6  C083  F090         	movff	?_fround,___ftadd@f2
  1708  000BAA  C084  F091         	movff	?_fround+1,___ftadd@f2+1
  1709  000BAE  C085  F092         	movff	?_fround+2,___ftadd@f2+2
  1710  000BB2  EC4A  F00C         	call	___ftadd	;wreg free
  1711  000BB6  C08D  F0BF         	movff	?___ftadd,sprintf@fval
  1712  000BBA  C08E  F0C0         	movff	?___ftadd+1,sprintf@fval+1
  1713  000BBE  C08F  F0C1         	movff	?___ftadd+2,sprintf@fval+2
  1714  000BC2                     l184:
  1715  000BC2                     l3033:
  1716                           
  1717                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1718  000BC2  0100               	movlb	0	; () banked
  1719  000BC4  BFBA               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1720  000BC6  D006               	goto	u3030
  1721  000BC8  51BA               	movf	(sprintf@exp+1)& (0+255),w,b
  1722  000BCA  E11F               	bnz	l3041
  1723  000BCC  0E0A               	movlw	10
  1724  000BCE  5DB9               	subwf	sprintf@exp& (0+255),w,b
  1725  000BD0  B0D8               	btfsc	status,0,c
  1726  000BD2  D01B               	goto	u3060
  1727  000BD4                     u3030:
  1728                           
  1729                           ; BSR set to: 0
  1730  000BD4  51BF               	movf	sprintf@fval& (0+255),w,b
  1731  000BD6  11C0               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1732  000BD8  11C1               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1733  000BDA  B4D8               	btfsc	status,2,c
  1734  000BDC  D054               	goto	l185
  1735                           
  1736                           ; BSR set to: 0
  1737  000BDE  C0BF  F08A         	movff	sprintf@fval,___fttol@f1
  1738  000BE2  C0C0  F08B         	movff	sprintf@fval+1,___fttol@f1+1
  1739  000BE6  C0C1  F08C         	movff	sprintf@fval+2,___fttol@f1+2
  1740  000BEA  EC5E  F011         	call	___fttol	;wreg free
  1741  000BEE  0100               	movlb	0	; () banked
  1742  000BF0  518A               	movf	?___fttol& (0+255),w,b
  1743  000BF2  118B               	iorwf	(?___fttol+1)& (0+255),w,b
  1744  000BF4  118C               	iorwf	(?___fttol+2)& (0+255),w,b
  1745  000BF6  118D               	iorwf	(?___fttol+3)& (0+255),w,b
  1746  000BF8  B4D8               	btfsc	status,2,c
  1747                           
  1748                           ; BSR set to: 0
  1749  000BFA  BFBA               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1750  000BFC  D044               	goto	l185
  1751  000BFE  51BA               	movf	(sprintf@exp+1)& (0+255),w,b
  1752  000C00  E104               	bnz	l3041
  1753  000C02  0E02               	movlw	2
  1754  000C04  5DB9               	subwf	sprintf@exp& (0+255),w,b
  1755  000C06  A0D8               	btfss	status,0,c
  1756  000C08  D03E               	goto	l185
  1757  000C0A                     u3060:
  1758  000C0A                     l3041:
  1759                           
  1760                           ; BSR set to: 0
  1761                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  1762  000C0A  C0B5  F060         	movff	sprintf@tmpval,___ftge@ff1
  1763  000C0E  C0B6  F061         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1764  000C12  C0B7  F062         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1765  000C16  0E70               	movlw	112
  1766  000C18  6F63               	movwf	___ftge@ff2& (0+255),b
  1767  000C1A  0E89               	movlw	137
  1768  000C1C  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  1769  000C1E  0E40               	movlw	64
  1770  000C20  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  1771  000C22  EC65  F014         	call	___ftge	;wreg free
  1772  000C26  0100               	movlb	0	; () banked
  1773  000C28  B0D8               	btfsc	status,0,c
  1774  000C2A  D002               	goto	l188
  1775                           
  1776                           ; BSR set to: 0
  1777                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1778  000C2C  0EF7               	movlw	247
  1779  000C2E  D001               	goto	L1
  1780  000C30                     l188:
  1781                           
  1782                           ; BSR set to: 0
  1783                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1784                           
  1785                           ; BSR set to: 0
  1786  000C30  0EF8               	movlw	248
  1787  000C32                     L1:
  1788  000C32  27B9               	addwf	sprintf@exp& (0+255),f,b
  1789  000C34  0EFF               	movlw	255
  1790  000C36  23BA               	addwfc	(sprintf@exp+1)& (0+255),f,b
  1791                           
  1792                           ; BSR set to: 0
  1793                           ;doprnt.c: 1124: }
  1794                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  1795                           
  1796                           ; BSR set to: 0
  1797  000C38  51B9               	movf	sprintf@exp& (0+255),w,b
  1798  000C3A  ECF6  F008         	call	_scale
  1799  000C3E  C083  F0B5         	movff	?_scale,sprintf@tmpval
  1800  000C42  C084  F0B6         	movff	?_scale+1,sprintf@tmpval+1
  1801  000C46  C085  F0B7         	movff	?_scale+2,sprintf@tmpval+2
  1802                           
  1803                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  1804  000C4A  C0BF  F060         	movff	sprintf@fval,__tdiv_to_l_@f1
  1805  000C4E  C0C0  F061         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  1806  000C52  C0C1  F062         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  1807  000C56  C0B5  F063         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  1808  000C5A  C0B6  F064         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  1809  000C5E  C0B7  F065         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  1810  000C62  EC7A  F00E         	call	__tdiv_to_l_	;wreg free
  1811  000C66  C060  F0B1         	movff	?__tdiv_to_l_,sprintf@val
  1812  000C6A  C061  F0B2         	movff	?__tdiv_to_l_+1,sprintf@val+1
  1813  000C6E  C062  F0B3         	movff	?__tdiv_to_l_+2,sprintf@val+2
  1814  000C72  C063  F0B4         	movff	?__tdiv_to_l_+3,sprintf@val+3
  1815                           
  1816                           ;doprnt.c: 1129: fval = 0.0;
  1817  000C76  0E00               	movlw	0
  1818  000C78  0100               	movlb	0	; () banked
  1819  000C7A  6FBF               	movwf	sprintf@fval& (0+255),b
  1820  000C7C  0E00               	movlw	0
  1821  000C7E  6FC0               	movwf	(sprintf@fval+1)& (0+255),b
  1822  000C80  0E00               	movlw	0
  1823  000C82  6FC1               	movwf	(sprintf@fval+2)& (0+255),b
  1824                           
  1825                           ;doprnt.c: 1130: } else {
  1826  000C84  D033               	goto	l194
  1827  000C86                     l185:
  1828                           
  1829                           ; BSR set to: 0
  1830                           ;doprnt.c: 1131: val = (unsigned long)fval;
  1831                           
  1832                           ; BSR set to: 0
  1833  000C86  C0BF  F08A         	movff	sprintf@fval,___fttol@f1
  1834  000C8A  C0C0  F08B         	movff	sprintf@fval+1,___fttol@f1+1
  1835  000C8E  C0C1  F08C         	movff	sprintf@fval+2,___fttol@f1+2
  1836  000C92  EC5E  F011         	call	___fttol	;wreg free
  1837  000C96  C08A  F0B1         	movff	?___fttol,sprintf@val
  1838  000C9A  C08B  F0B2         	movff	?___fttol+1,sprintf@val+1
  1839  000C9E  C08C  F0B3         	movff	?___fttol+2,sprintf@val+2
  1840  000CA2  C08D  F0B4         	movff	?___fttol+3,sprintf@val+3
  1841                           
  1842                           ;doprnt.c: 1132: fval -= (double)val;
  1843  000CA6  C0BF  F099         	movff	sprintf@fval,___ftsub@f1
  1844  000CAA  C0C0  F09A         	movff	sprintf@fval+1,___ftsub@f1+1
  1845  000CAE  C0C1  F09B         	movff	sprintf@fval+2,___ftsub@f1+2
  1846  000CB2  C0B1  F068         	movff	sprintf@val,___lltoft@c
  1847  000CB6  C0B2  F069         	movff	sprintf@val+1,___lltoft@c+1
  1848  000CBA  C0B3  F06A         	movff	sprintf@val+2,___lltoft@c+2
  1849  000CBE  C0B4  F06B         	movff	sprintf@val+3,___lltoft@c+3
  1850  000CC2  ECD5  F015         	call	___lltoft	;wreg free
  1851  000CC6  C068  F09C         	movff	?___lltoft,___ftsub@f2
  1852  000CCA  C069  F09D         	movff	?___lltoft+1,___ftsub@f2+1
  1853  000CCE  C06A  F09E         	movff	?___lltoft+2,___ftsub@f2+2
  1854  000CD2  EC33  F016         	call	___ftsub	;wreg free
  1855  000CD6  C099  F0BF         	movff	?___ftsub,sprintf@fval
  1856  000CDA  C09A  F0C0         	movff	?___ftsub+1,sprintf@fval+1
  1857  000CDE  C09B  F0C1         	movff	?___ftsub+2,sprintf@fval+2
  1858                           
  1859                           ;doprnt.c: 1133: exp = 0;
  1860  000CE2  0E00               	movlw	0
  1861  000CE4  0100               	movlb	0	; () banked
  1862  000CE6  6FBA               	movwf	(sprintf@exp+1)& (0+255),b
  1863  000CE8  0E00               	movlw	0
  1864  000CEA  6FB9               	movwf	sprintf@exp& (0+255),b
  1865  000CEC                     l194:
  1866                           
  1867                           ; BSR set to: 0
  1868                           ;doprnt.c: 1134: }
  1869                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  1870                           
  1871                           ; BSR set to: 0
  1872  000CEC  0E01               	movlw	1
  1873  000CEE  6FC4               	movwf	sprintf@c& (0+255),b
  1874  000CF0                     l3061:
  1875                           
  1876                           ; BSR set to: 0
  1877  000CF0  0E0A               	movlw	10
  1878  000CF2  19C4               	xorwf	sprintf@c& (0+255),w,b
  1879  000CF4  B4D8               	btfsc	status,2,c
  1880  000CF6  D018               	goto	u3100
  1881                           
  1882                           ; BSR set to: 0
  1883                           ;doprnt.c: 1137: if(val < dpowers[c])
  1884                           
  1885                           ; BSR set to: 0
  1886                           
  1887                           ; BSR set to: 0
  1888  000CF8  51C4               	movf	sprintf@c& (0+255),w,b
  1889  000CFA  0D04               	mullw	4
  1890  000CFC  0E01               	movlw	low _dpowers
  1891  000CFE  24F3               	addwf	prodl,w,c
  1892  000D00  6EF6               	movwf	tblptrl,c
  1893  000D02  0E08               	movlw	high _dpowers
  1894  000D04  20F4               	addwfc	prodh,w,c
  1895  000D06  6EF7               	movwf	tblptrh,c
  1896  000D08                     	if	0	;There are less than 3 active tblptr bytes
  1897  000D08                     	endif
  1898  000D08  0009               	tblrd		*+
  1899  000D0A  50F5               	movf	tablat,w,c
  1900  000D0C  5DB1               	subwf	sprintf@val& (0+255),w,b
  1901  000D0E  0009               	tblrd		*+
  1902  000D10  50F5               	movf	tablat,w,c
  1903  000D12  59B2               	subwfb	(sprintf@val+1)& (0+255),w,b
  1904  000D14  0009               	tblrd		*+
  1905  000D16  50F5               	movf	tablat,w,c
  1906  000D18  59B3               	subwfb	(sprintf@val+2)& (0+255),w,b
  1907  000D1A  0009               	tblrd		*+
  1908  000D1C  50F5               	movf	tablat,w,c
  1909  000D1E  59B4               	subwfb	(sprintf@val+3)& (0+255),w,b
  1910  000D20  A0D8               	btfss	status,0,c
  1911  000D22  D002               	goto	u3100
  1912                           
  1913                           ; BSR set to: 0
  1914                           
  1915                           ; BSR set to: 0
  1916                           
  1917                           ; BSR set to: 0
  1918                           ;doprnt.c: 1138: break;
  1919  000D24  2BC4               	incf	sprintf@c& (0+255),f,b
  1920  000D26  D7E4               	goto	l3061
  1921  000D28                     u3100:
  1922                           
  1923                           ; BSR set to: 0
  1924                           ;doprnt.c: 1142: width -= prec + c + exp;
  1925                           
  1926                           ; BSR set to: 0
  1927  000D28  C0C4  F0A6         	movff	sprintf@c,??_sprintf
  1928  000D2C  6BA7               	clrf	(??_sprintf+1)& (0+255),b
  1929  000D2E  BFA6               	btfsc	??_sprintf& (0+255),7,b
  1930  000D30  07A7               	decf	(??_sprintf+1)& (0+255),f,b
  1931  000D32  51C2               	movf	sprintf@prec& (0+255),w,b
  1932  000D34  27A6               	addwf	??_sprintf& (0+255),f,b
  1933  000D36  51C3               	movf	(sprintf@prec+1)& (0+255),w,b
  1934  000D38  23A7               	addwfc	(??_sprintf+1)& (0+255),f,b
  1935  000D3A  51B9               	movf	sprintf@exp& (0+255),w,b
  1936  000D3C  27A6               	addwf	??_sprintf& (0+255),f,b
  1937  000D3E  51BA               	movf	(sprintf@exp+1)& (0+255),w,b
  1938  000D40  23A7               	addwfc	(??_sprintf+1)& (0+255),f,b
  1939  000D42  51A6               	movf	??_sprintf& (0+255),w,b
  1940  000D44  5FBD               	subwf	sprintf@width& (0+255),f,b
  1941  000D46  51A7               	movf	(??_sprintf+1)& (0+255),w,b
  1942  000D48  5BBE               	subwfb	(sprintf@width+1)& (0+255),f,b
  1943                           
  1944                           ;doprnt.c: 1143: if(
  1945                           ;doprnt.c: 1147: prec)
  1946  000D4A  51C2               	movf	sprintf@prec& (0+255),w,b
  1947  000D4C  11C3               	iorwf	(sprintf@prec+1)& (0+255),w,b
  1948  000D4E  B4D8               	btfsc	status,2,c
  1949  000D50  D003               	goto	l198
  1950                           
  1951                           ; BSR set to: 0
  1952                           ;doprnt.c: 1148: width--;
  1953  000D52  07BD               	decf	sprintf@width& (0+255),f,b
  1954  000D54  A0D8               	btfss	status,0,c
  1955  000D56  07BE               	decf	(sprintf@width+1)& (0+255),f,b
  1956  000D58                     l198:
  1957                           
  1958                           ; BSR set to: 0
  1959                           ;doprnt.c: 1149: if(flag & 0x03)
  1960                           
  1961                           ; BSR set to: 0
  1962  000D58  0E03               	movlw	3
  1963  000D5A  15BB               	andwf	sprintf@flag& (0+255),w,b
  1964  000D5C  6FA6               	movwf	??_sprintf& (0+255),b
  1965  000D5E  0E00               	movlw	0
  1966  000D60  15BC               	andwf	(sprintf@flag+1)& (0+255),w,b
  1967  000D62  6FA7               	movwf	(??_sprintf+1)& (0+255),b
  1968  000D64  51A6               	movf	??_sprintf& (0+255),w,b
  1969  000D66  11A7               	iorwf	(??_sprintf+1)& (0+255),w,b
  1970  000D68  B4D8               	btfsc	status,2,c
  1971  000D6A  D003               	goto	l199
  1972                           
  1973                           ; BSR set to: 0
  1974                           ;doprnt.c: 1150: width--;
  1975  000D6C  07BD               	decf	sprintf@width& (0+255),f,b
  1976  000D6E  A0D8               	btfss	status,0,c
  1977  000D70  07BE               	decf	(sprintf@width+1)& (0+255),f,b
  1978  000D72                     l199:
  1979                           
  1980                           ; BSR set to: 0
  1981                           ;doprnt.c: 1153: if(flag & 0x04) {
  1982                           
  1983                           ; BSR set to: 0
  1984  000D72  A5BB               	btfss	sprintf@flag& (0+255),2,b
  1985  000D74  D031               	goto	l206
  1986                           
  1987                           ; BSR set to: 0
  1988                           ;doprnt.c: 1157: if(flag & 0x03)
  1989  000D76  0E03               	movlw	3
  1990  000D78  15BB               	andwf	sprintf@flag& (0+255),w,b
  1991  000D7A  6FA6               	movwf	??_sprintf& (0+255),b
  1992  000D7C  0E00               	movlw	0
  1993  000D7E  15BC               	andwf	(sprintf@flag+1)& (0+255),w,b
  1994  000D80  6FA7               	movwf	(??_sprintf+1)& (0+255),b
  1995  000D82  51A6               	movf	??_sprintf& (0+255),w,b
  1996  000D84  11A7               	iorwf	(??_sprintf+1)& (0+255),w,b
  1997  000D86  B4D8               	btfsc	status,2,c
  1998  000D88  D014               	goto	l202
  1999                           
  2000                           ; BSR set to: 0
  2001                           ;doprnt.c: 1159: ((*sp++ = ('-')));
  2002  000D8A  C09F  FFD9         	movff	sprintf@sp,fsr2l
  2003  000D8E  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  2004  000D92  0E2D               	movlw	45
  2005  000D94  6EDF               	movwf	indf2,c
  2006                           
  2007                           ; BSR set to: 0
  2008  000D96  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  2009  000D98  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  2010                           
  2011                           ; BSR set to: 0
  2012                           ;doprnt.c: 1168: while(width > 0) {
  2013  000D9A  D00B               	goto	l202
  2014  000D9C                     l3089:
  2015                           
  2016                           ; BSR set to: 0
  2017                           ;doprnt.c: 1169: ((*sp++ = ('0')));
  2018  000D9C  C09F  FFD9         	movff	sprintf@sp,fsr2l
  2019  000DA0  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  2020  000DA4  0E30               	movlw	48
  2021  000DA6  6EDF               	movwf	indf2,c
  2022                           
  2023                           ; BSR set to: 0
  2024  000DA8  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  2025  000DAA  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  2026                           
  2027                           ; BSR set to: 0
  2028                           ;doprnt.c: 1170: width--;
  2029  000DAC  07BD               	decf	sprintf@width& (0+255),f,b
  2030  000DAE  A0D8               	btfss	status,0,c
  2031  000DB0  07BE               	decf	(sprintf@width+1)& (0+255),f,b
  2032  000DB2                     l202:
  2033                           
  2034                           ; BSR set to: 0
  2035                           
  2036                           ; BSR set to: 0
  2037  000DB2  BFBE               	btfsc	(sprintf@width+1)& (0+255),7,b
  2038  000DB4  D073               	goto	l210
  2039  000DB6  51BE               	movf	(sprintf@width+1)& (0+255),w,b
  2040  000DB8  E1F1               	bnz	l3089
  2041  000DBA  05BD               	decf	sprintf@width& (0+255),w,b
  2042  000DBC  A0D8               	btfss	status,0,c
  2043  000DBE  D06E               	goto	l210
  2044  000DC0  D7ED               	goto	l203
  2045  000DC2                     l3097:
  2046                           
  2047                           ; BSR set to: 0
  2048                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  2049  000DC2  C09F  FFD9         	movff	sprintf@sp,fsr2l
  2050  000DC6  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  2051  000DCA  0E20               	movlw	32
  2052  000DCC  6EDF               	movwf	indf2,c
  2053                           
  2054                           ; BSR set to: 0
  2055  000DCE  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  2056  000DD0  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  2057                           
  2058                           ; BSR set to: 0
  2059                           ;doprnt.c: 1182: width--;
  2060  000DD2  07BD               	decf	sprintf@width& (0+255),f,b
  2061  000DD4  A0D8               	btfss	status,0,c
  2062  000DD6  07BE               	decf	(sprintf@width+1)& (0+255),f,b
  2063  000DD8                     l206:
  2064                           
  2065                           ; BSR set to: 0
  2066                           
  2067                           ; BSR set to: 0
  2068  000DD8  BFBE               	btfsc	(sprintf@width+1)& (0+255),7,b
  2069  000DDA  D005               	goto	u3160
  2070  000DDC  51BE               	movf	(sprintf@width+1)& (0+255),w,b
  2071  000DDE  E1F1               	bnz	l3097
  2072  000DE0  05BD               	decf	sprintf@width& (0+255),w,b
  2073  000DE2  B0D8               	btfsc	status,0,c
  2074  000DE4  D7EE               	goto	l207
  2075  000DE6                     u3160:
  2076                           
  2077                           ; BSR set to: 0
  2078                           ;doprnt.c: 1183: }
  2079                           ;doprnt.c: 1188: if(flag & 0x03)
  2080                           
  2081                           ; BSR set to: 0
  2082  000DE6  0E03               	movlw	3
  2083  000DE8  15BB               	andwf	sprintf@flag& (0+255),w,b
  2084  000DEA  6FA6               	movwf	??_sprintf& (0+255),b
  2085  000DEC  0E00               	movlw	0
  2086  000DEE  15BC               	andwf	(sprintf@flag+1)& (0+255),w,b
  2087  000DF0  6FA7               	movwf	(??_sprintf+1)& (0+255),b
  2088  000DF2  51A6               	movf	??_sprintf& (0+255),w,b
  2089  000DF4  11A7               	iorwf	(??_sprintf+1)& (0+255),w,b
  2090  000DF6  B4D8               	btfsc	status,2,c
  2091  000DF8  D051               	goto	l210
  2092                           
  2093                           ; BSR set to: 0
  2094                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  2095  000DFA  C09F  FFD9         	movff	sprintf@sp,fsr2l
  2096  000DFE  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  2097  000E02  0E2D               	movlw	45
  2098  000E04  D048               	goto	L2
  2099  000E06                     
  2100                           ; BSR set to: 0
  2101                           ;doprnt.c: 1200: {
  2102                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2103                           
  2104                           ; BSR set to: 0
  2105  000E06  C0B1  F060         	movff	sprintf@val,___lldiv@dividend
  2106  000E0A  C0B2  F061         	movff	sprintf@val+1,___lldiv@dividend+1
  2107  000E0E  C0B3  F062         	movff	sprintf@val+2,___lldiv@dividend+2
  2108  000E12  C0B4  F063         	movff	sprintf@val+3,___lldiv@dividend+3
  2109  000E16  51C4               	movf	sprintf@c& (0+255),w,b
  2110  000E18  0D04               	mullw	4
  2111  000E1A  0E01               	movlw	low _dpowers
  2112  000E1C  24F3               	addwf	prodl,w,c
  2113  000E1E  6EF6               	movwf	tblptrl,c
  2114  000E20  0E08               	movlw	high _dpowers
  2115  000E22  20F4               	addwfc	prodh,w,c
  2116  000E24  6EF7               	movwf	tblptrh,c
  2117  000E26                     	if	0	;There are less than 3 active tblptr bytes
  2118  000E26                     	endif
  2119  000E26  0009               	tblrd		*+
  2120  000E28  CFF5 F064          	movff	tablat,___lldiv@divisor
  2121  000E2C  0009               	tblrd		*+
  2122  000E2E  CFF5 F065          	movff	tablat,___lldiv@divisor+1
  2123  000E32  0009               	tblrd		*+
  2124  000E34  CFF5 F066          	movff	tablat,___lldiv@divisor+2
  2125  000E38  000A               	tblrd		*-
  2126  000E3A  CFF5 F067          	movff	tablat,___lldiv@divisor+3
  2127  000E3E  ECF1  F014         	call	___lldiv	;wreg free
  2128  000E42  C060  F0B5         	movff	?___lldiv,sprintf@tmpval
  2129  000E46  C061  F0B6         	movff	?___lldiv+1,sprintf@tmpval+1
  2130  000E4A  C062  F0B7         	movff	?___lldiv+2,sprintf@tmpval+2
  2131  000E4E  C063  F0B8         	movff	?___lldiv+3,sprintf@tmpval+3
  2132                           
  2133                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2134  000E52  C0B5  F060         	movff	sprintf@tmpval,___llmod@dividend
  2135  000E56  C0B6  F061         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2136  000E5A  C0B7  F062         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2137  000E5E  C0B8  F063         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2138  000E62  0E0A               	movlw	10
  2139  000E64  0100               	movlb	0	; () banked
  2140  000E66  6F64               	movwf	___llmod@divisor& (0+255),b
  2141  000E68  0E00               	movlw	0
  2142  000E6A  6F65               	movwf	(___llmod@divisor+1)& (0+255),b
  2143  000E6C  0E00               	movlw	0
  2144  000E6E  6F66               	movwf	(___llmod@divisor+2)& (0+255),b
  2145  000E70  0E00               	movlw	0
  2146  000E72  6F67               	movwf	(___llmod@divisor+3)& (0+255),b
  2147  000E74  ECA1  F015         	call	___llmod	;wreg free
  2148  000E78  C060  F0B5         	movff	?___llmod,sprintf@tmpval
  2149  000E7C  C061  F0B6         	movff	?___llmod+1,sprintf@tmpval+1
  2150  000E80  C062  F0B7         	movff	?___llmod+2,sprintf@tmpval+2
  2151  000E84  C063  F0B8         	movff	?___llmod+3,sprintf@tmpval+3
  2152                           
  2153                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  2154  000E88  0100               	movlb	0	; () banked
  2155  000E8A  51B5               	movf	sprintf@tmpval& (0+255),w,b
  2156  000E8C  0F30               	addlw	48
  2157  000E8E  C09F  FFD9         	movff	sprintf@sp,fsr2l
  2158  000E92  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  2159  000E96                     L2:
  2160  000E96  6EDF               	movwf	indf2,c
  2161                           
  2162                           ; BSR set to: 0
  2163  000E98  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  2164  000E9A  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  2165  000E9C                     l210:
  2166                           
  2167                           ; BSR set to: 0
  2168                           
  2169                           ; BSR set to: 0
  2170  000E9C  07C4               	decf	sprintf@c& (0+255),f,b
  2171  000E9E  29C4               	incf	sprintf@c& (0+255),w,b
  2172  000EA0  B4D8               	btfsc	status,2,c
  2173  000EA2  D00C               	goto	l213
  2174  000EA4  D7B0               	goto	l211
  2175  000EA6                     l3121:
  2176                           
  2177                           ; BSR set to: 0
  2178                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  2179  000EA6  C09F  FFD9         	movff	sprintf@sp,fsr2l
  2180  000EAA  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  2181  000EAE  0E30               	movlw	48
  2182  000EB0  6EDF               	movwf	indf2,c
  2183                           
  2184                           ; BSR set to: 0
  2185  000EB2  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  2186  000EB4  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  2187                           
  2188                           ; BSR set to: 0
  2189                           ;doprnt.c: 1209: exp--;
  2190  000EB6  07B9               	decf	sprintf@exp& (0+255),f,b
  2191  000EB8  A0D8               	btfss	status,0,c
  2192  000EBA  07BA               	decf	(sprintf@exp+1)& (0+255),f,b
  2193  000EBC                     l213:
  2194                           
  2195                           ; BSR set to: 0
  2196                           
  2197                           ; BSR set to: 0
  2198  000EBC  BFBA               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2199  000EBE  D005               	goto	u3190
  2200  000EC0  51BA               	movf	(sprintf@exp+1)& (0+255),w,b
  2201  000EC2  E1F1               	bnz	l3121
  2202  000EC4  05B9               	decf	sprintf@exp& (0+255),w,b
  2203  000EC6  B0D8               	btfsc	status,0,c
  2204  000EC8  D7EE               	goto	l214
  2205  000ECA                     u3190:
  2206                           
  2207                           ; BSR set to: 0
  2208                           ;doprnt.c: 1210: }
  2209                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2210                           
  2211                           ; BSR set to: 0
  2212  000ECA  BFC3               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2213  000ECC  D009               	goto	l216
  2214  000ECE  51C3               	movf	(sprintf@prec+1)& (0+255),w,b
  2215  000ED0  E104               	bnz	u3200
  2216  000ED2  0E09               	movlw	9
  2217  000ED4  5DC2               	subwf	sprintf@prec& (0+255),w,b
  2218  000ED6  A0D8               	btfss	status,0,c
  2219  000ED8  D003               	goto	l216
  2220  000EDA                     u3200:
  2221                           
  2222                           ; BSR set to: 0
  2223                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2224  000EDA  0E08               	movlw	8
  2225  000EDC  6FC4               	movwf	sprintf@c& (0+255),b
  2226  000EDE  D002               	goto	l217
  2227  000EE0                     l216:
  2228                           
  2229                           ; BSR set to: 0
  2230                           ;doprnt.c: 1213: else
  2231                           ;doprnt.c: 1214: c = prec;
  2232  000EE0  C0C2  F0C4         	movff	sprintf@prec,sprintf@c
  2233  000EE4                     l217:
  2234                           
  2235                           ; BSR set to: 0
  2236                           ;doprnt.c: 1215: prec -= c;
  2237                           
  2238                           ; BSR set to: 0
  2239  000EE4  51C4               	movf	sprintf@c& (0+255),w,b
  2240  000EE6  5FC2               	subwf	sprintf@prec& (0+255),f,b
  2241  000EE8  0E00               	movlw	0
  2242  000EEA  BFC4               	btfsc	sprintf@c& (0+255),7,b
  2243  000EEC  0EFF               	movlw	255
  2244  000EEE  5BC3               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2245                           
  2246                           ; BSR set to: 0
  2247                           ;doprnt.c: 1219: if(c)
  2248  000EF0  51C4               	movf	sprintf@c& (0+255),w,b
  2249  000EF2  B4D8               	btfsc	status,2,c
  2250  000EF4  D008               	goto	l218
  2251                           
  2252                           ; BSR set to: 0
  2253                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  2254  000EF6  C09F  FFD9         	movff	sprintf@sp,fsr2l
  2255  000EFA  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  2256  000EFE  0E2E               	movlw	46
  2257  000F00  6EDF               	movwf	indf2,c
  2258                           
  2259                           ; BSR set to: 0
  2260  000F02  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  2261  000F04  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  2262  000F06                     l218:
  2263                           
  2264                           ; BSR set to: 0
  2265                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2266                           
  2267                           ; BSR set to: 0
  2268  000F06  51C4               	movf	sprintf@c& (0+255),w,b
  2269  000F08  ECF6  F008         	call	_scale
  2270  000F0C  C083  F0AC         	movff	?_scale,_sprintf$1335
  2271  000F10  C084  F0AD         	movff	?_scale+1,_sprintf$1335+1
  2272  000F14  C085  F0AE         	movff	?_scale+2,_sprintf$1335+2
  2273                           
  2274                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2275  000F18  C0BF  F077         	movff	sprintf@fval,___ftmul@f2
  2276  000F1C  C0C0  F078         	movff	sprintf@fval+1,___ftmul@f2+1
  2277  000F20  C0C1  F079         	movff	sprintf@fval+2,___ftmul@f2+2
  2278  000F24  C0AC  F074         	movff	_sprintf$1335,___ftmul@f1
  2279  000F28  C0AD  F075         	movff	_sprintf$1335+1,___ftmul@f1+1
  2280  000F2C  C0AE  F076         	movff	_sprintf$1335+2,___ftmul@f1+2
  2281  000F30  ECDA  F011         	call	___ftmul	;wreg free
  2282  000F34  C074  F08A         	movff	?___ftmul,___fttol@f1
  2283  000F38  C075  F08B         	movff	?___ftmul+1,___fttol@f1+1
  2284  000F3C  C076  F08C         	movff	?___ftmul+2,___fttol@f1+2
  2285  000F40  EC5E  F011         	call	___fttol	;wreg free
  2286  000F44  C08A  F0B1         	movff	?___fttol,sprintf@val
  2287  000F48  C08B  F0B2         	movff	?___fttol+1,sprintf@val+1
  2288  000F4C  C08C  F0B3         	movff	?___fttol+2,sprintf@val+2
  2289  000F50  C08D  F0B4         	movff	?___fttol+3,sprintf@val+3
  2290                           
  2291                           ;doprnt.c: 1228: while(c--) {
  2292  000F54  D072               	goto	l219
  2293  000F56                     
  2294                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2295  000F56  C0B1  F060         	movff	sprintf@val,___lldiv@dividend
  2296  000F5A  C0B2  F061         	movff	sprintf@val+1,___lldiv@dividend+1
  2297  000F5E  C0B3  F062         	movff	sprintf@val+2,___lldiv@dividend+2
  2298  000F62  C0B4  F063         	movff	sprintf@val+3,___lldiv@dividend+3
  2299  000F66  0100               	movlb	0	; () banked
  2300  000F68  51C4               	movf	sprintf@c& (0+255),w,b
  2301  000F6A  0D04               	mullw	4
  2302  000F6C  0E01               	movlw	low _dpowers
  2303  000F6E  24F3               	addwf	prodl,w,c
  2304  000F70  6EF6               	movwf	tblptrl,c
  2305  000F72  0E08               	movlw	high _dpowers
  2306  000F74  20F4               	addwfc	prodh,w,c
  2307  000F76  6EF7               	movwf	tblptrh,c
  2308  000F78                     	if	0	;There are less than 3 active tblptr bytes
  2309  000F78                     	endif
  2310  000F78  0009               	tblrd		*+
  2311  000F7A  CFF5 F064          	movff	tablat,___lldiv@divisor
  2312  000F7E  0009               	tblrd		*+
  2313  000F80  CFF5 F065          	movff	tablat,___lldiv@divisor+1
  2314  000F84  0009               	tblrd		*+
  2315  000F86  CFF5 F066          	movff	tablat,___lldiv@divisor+2
  2316  000F8A  000A               	tblrd		*-
  2317  000F8C  CFF5 F067          	movff	tablat,___lldiv@divisor+3
  2318  000F90  ECF1  F014         	call	___lldiv	;wreg free
  2319  000F94  C060  F0B5         	movff	?___lldiv,sprintf@tmpval
  2320  000F98  C061  F0B6         	movff	?___lldiv+1,sprintf@tmpval+1
  2321  000F9C  C062  F0B7         	movff	?___lldiv+2,sprintf@tmpval+2
  2322  000FA0  C063  F0B8         	movff	?___lldiv+3,sprintf@tmpval+3
  2323                           
  2324                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2325  000FA4  C0B5  F060         	movff	sprintf@tmpval,___llmod@dividend
  2326  000FA8  C0B6  F061         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2327  000FAC  C0B7  F062         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2328  000FB0  C0B8  F063         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2329  000FB4  0E0A               	movlw	10
  2330  000FB6  0100               	movlb	0	; () banked
  2331  000FB8  6F64               	movwf	___llmod@divisor& (0+255),b
  2332  000FBA  0E00               	movlw	0
  2333  000FBC  6F65               	movwf	(___llmod@divisor+1)& (0+255),b
  2334  000FBE  0E00               	movlw	0
  2335  000FC0  6F66               	movwf	(___llmod@divisor+2)& (0+255),b
  2336  000FC2  0E00               	movlw	0
  2337  000FC4  6F67               	movwf	(___llmod@divisor+3)& (0+255),b
  2338  000FC6  ECA1  F015         	call	___llmod	;wreg free
  2339  000FCA  C060  F0B5         	movff	?___llmod,sprintf@tmpval
  2340  000FCE  C061  F0B6         	movff	?___llmod+1,sprintf@tmpval+1
  2341  000FD2  C062  F0B7         	movff	?___llmod+2,sprintf@tmpval+2
  2342  000FD6  C063  F0B8         	movff	?___llmod+3,sprintf@tmpval+3
  2343                           
  2344                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  2345  000FDA  0100               	movlb	0	; () banked
  2346  000FDC  51B5               	movf	sprintf@tmpval& (0+255),w,b
  2347  000FDE  0F30               	addlw	48
  2348  000FE0  C09F  FFD9         	movff	sprintf@sp,fsr2l
  2349  000FE4  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  2350  000FE8  6EDF               	movwf	indf2,c
  2351                           
  2352                           ; BSR set to: 0
  2353  000FEA  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  2354  000FEC  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  2355                           
  2356                           ; BSR set to: 0
  2357                           ;doprnt.c: 1232: val %= dpowers[c];
  2358  000FEE  C0B1  F060         	movff	sprintf@val,___llmod@dividend
  2359  000FF2  C0B2  F061         	movff	sprintf@val+1,___llmod@dividend+1
  2360  000FF6  C0B3  F062         	movff	sprintf@val+2,___llmod@dividend+2
  2361  000FFA  C0B4  F063         	movff	sprintf@val+3,___llmod@dividend+3
  2362  000FFE  51C4               	movf	sprintf@c& (0+255),w,b
  2363  001000  0D04               	mullw	4
  2364  001002  0E01               	movlw	low _dpowers
  2365  001004  24F3               	addwf	prodl,w,c
  2366  001006  6EF6               	movwf	tblptrl,c
  2367  001008  0E08               	movlw	high _dpowers
  2368  00100A  20F4               	addwfc	prodh,w,c
  2369  00100C  6EF7               	movwf	tblptrh,c
  2370  00100E                     	if	0	;There are less than 3 active tblptr bytes
  2371  00100E                     	endif
  2372  00100E  0009               	tblrd		*+
  2373  001010  CFF5 F064          	movff	tablat,___llmod@divisor
  2374  001014  0009               	tblrd		*+
  2375  001016  CFF5 F065          	movff	tablat,___llmod@divisor+1
  2376  00101A  0009               	tblrd		*+
  2377  00101C  CFF5 F066          	movff	tablat,___llmod@divisor+2
  2378  001020  000A               	tblrd		*-
  2379  001022  CFF5 F067          	movff	tablat,___llmod@divisor+3
  2380  001026  ECA1  F015         	call	___llmod	;wreg free
  2381  00102A  C060  F0B1         	movff	?___llmod,sprintf@val
  2382  00102E  C061  F0B2         	movff	?___llmod+1,sprintf@val+1
  2383  001032  C062  F0B3         	movff	?___llmod+2,sprintf@val+2
  2384  001036  C063  F0B4         	movff	?___llmod+3,sprintf@val+3
  2385  00103A                     l219:
  2386  00103A  0100               	movlb	0	; () banked
  2387  00103C  07C4               	decf	sprintf@c& (0+255),f,b
  2388  00103E  29C4               	incf	sprintf@c& (0+255),w,b
  2389  001040  B4D8               	btfsc	status,2,c
  2390  001042  D00C               	goto	l222
  2391  001044  D788               	goto	l220
  2392  001046                     
  2393                           ; BSR set to: 0
  2394                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  2395                           
  2396                           ; BSR set to: 0
  2397  001046  C09F  FFD9         	movff	sprintf@sp,fsr2l
  2398  00104A  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  2399  00104E  0E30               	movlw	48
  2400  001050  6EDF               	movwf	indf2,c
  2401                           
  2402                           ; BSR set to: 0
  2403  001052  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  2404  001054  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  2405                           
  2406                           ; BSR set to: 0
  2407                           ;doprnt.c: 1237: prec--;
  2408  001056  07C2               	decf	sprintf@prec& (0+255),f,b
  2409  001058  A0D8               	btfss	status,0,c
  2410  00105A  07C3               	decf	(sprintf@prec+1)& (0+255),f,b
  2411  00105C                     l222:
  2412                           
  2413                           ; BSR set to: 0
  2414                           
  2415                           ; BSR set to: 0
  2416  00105C  51C2               	movf	sprintf@prec& (0+255),w,b
  2417  00105E  11C3               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2418  001060  B4D8               	btfsc	status,2,c
  2419  001062  D0B0               	goto	l244
  2420  001064  D7F0               	goto	l223
  2421  001066                     l176:
  2422                           
  2423                           ; BSR set to: 0
  2424                           ;doprnt.c: 1246: }
  2425                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2426                           
  2427                           ; BSR set to: 0
  2428  001066  51C2               	movf	sprintf@prec& (0+255),w,b
  2429  001068  11C3               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2430  00106A  A4D8               	btfss	status,2,c
  2431  00106C  D008               	goto	l225
  2432                           
  2433                           ; BSR set to: 0
  2434  00106E  51B1               	movf	sprintf@val& (0+255),w,b
  2435  001070  11B2               	iorwf	(sprintf@val+1)& (0+255),w,b
  2436  001072  11B3               	iorwf	(sprintf@val+2)& (0+255),w,b
  2437  001074  11B4               	iorwf	(sprintf@val+3)& (0+255),w,b
  2438  001076  A4D8               	btfss	status,2,c
  2439  001078  D002               	goto	l225
  2440                           
  2441                           ; BSR set to: 0
  2442                           ;doprnt.c: 1291: prec++;
  2443  00107A  4BC2               	infsnz	sprintf@prec& (0+255),f,b
  2444  00107C  2BC3               	incf	(sprintf@prec+1)& (0+255),f,b
  2445  00107E                     l225:
  2446                           
  2447                           ; BSR set to: 0
  2448                           ;doprnt.c: 1339: if(c < prec)
  2449                           
  2450                           ; BSR set to: 0
  2451  00107E  0E80               	movlw	128
  2452  001080  BFC4               	btfsc	sprintf@c& (0+255),7,b
  2453  001082  0E7F               	movlw	127
  2454  001084  6FA6               	movwf	??_sprintf& (0+255),b
  2455  001086  51C2               	movf	sprintf@prec& (0+255),w,b
  2456  001088  5DC4               	subwf	sprintf@c& (0+255),w,b
  2457  00108A  51C3               	movf	(sprintf@prec+1)& (0+255),w,b
  2458  00108C  0A80               	xorlw	128
  2459  00108E  59A6               	subwfb	??_sprintf& (0+255),w,b
  2460  001090  B0D8               	btfsc	status,0,c
  2461  001092  D003               	goto	l226
  2462                           
  2463                           ; BSR set to: 0
  2464                           ;doprnt.c: 1340: c = prec;
  2465  001094  C0C2  F0C4         	movff	sprintf@prec,sprintf@c
  2466  001098  D010               	goto	l228
  2467  00109A                     l226:
  2468                           
  2469                           ; BSR set to: 0
  2470                           ;doprnt.c: 1341: else if(prec < c)
  2471                           
  2472                           ; BSR set to: 0
  2473  00109A  51C3               	movf	(sprintf@prec+1)& (0+255),w,b
  2474  00109C  0A80               	xorlw	128
  2475  00109E  6FA6               	movwf	??_sprintf& (0+255),b
  2476  0010A0  51C4               	movf	sprintf@c& (0+255),w,b
  2477  0010A2  5DC2               	subwf	sprintf@prec& (0+255),w,b
  2478  0010A4  0E80               	movlw	128
  2479  0010A6  BFC4               	btfsc	sprintf@c& (0+255),7,b
  2480  0010A8  0E7F               	movlw	127
  2481  0010AA  59A6               	subwfb	??_sprintf& (0+255),w,b
  2482  0010AC  B0D8               	btfsc	status,0,c
  2483  0010AE  D005               	goto	l228
  2484                           
  2485                           ; BSR set to: 0
  2486                           ;doprnt.c: 1342: prec = c;
  2487  0010B0  51C4               	movf	sprintf@c& (0+255),w,b
  2488  0010B2  6FC2               	movwf	sprintf@prec& (0+255),b
  2489  0010B4  6BC3               	clrf	(sprintf@prec+1)& (0+255),b
  2490  0010B6  BFC2               	btfsc	sprintf@prec& (0+255),7,b
  2491  0010B8  07C3               	decf	(sprintf@prec+1)& (0+255),f,b
  2492  0010BA                     l228:
  2493                           
  2494                           ; BSR set to: 0
  2495                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2496                           
  2497                           ; BSR set to: 0
  2498                           
  2499                           ; BSR set to: 0
  2500  0010BA  51BD               	movf	sprintf@width& (0+255),w,b
  2501  0010BC  11BE               	iorwf	(sprintf@width+1)& (0+255),w,b
  2502  0010BE  B4D8               	btfsc	status,2,c
  2503  0010C0  D00D               	goto	l229
  2504                           
  2505                           ; BSR set to: 0
  2506  0010C2  0E03               	movlw	3
  2507  0010C4  15BB               	andwf	sprintf@flag& (0+255),w,b
  2508  0010C6  6FA6               	movwf	??_sprintf& (0+255),b
  2509  0010C8  0E00               	movlw	0
  2510  0010CA  15BC               	andwf	(sprintf@flag+1)& (0+255),w,b
  2511  0010CC  6FA7               	movwf	(??_sprintf+1)& (0+255),b
  2512  0010CE  51A6               	movf	??_sprintf& (0+255),w,b
  2513  0010D0  11A7               	iorwf	(??_sprintf+1)& (0+255),w,b
  2514  0010D2  B4D8               	btfsc	status,2,c
  2515  0010D4  D003               	goto	l229
  2516                           
  2517                           ; BSR set to: 0
  2518                           ;doprnt.c: 1346: width--;
  2519  0010D6  07BD               	decf	sprintf@width& (0+255),f,b
  2520  0010D8  A0D8               	btfss	status,0,c
  2521  0010DA  07BE               	decf	(sprintf@width+1)& (0+255),f,b
  2522  0010DC                     l229:
  2523                           
  2524                           ; BSR set to: 0
  2525                           ;doprnt.c: 1348: if(flag & 0x4000) {
  2526                           
  2527                           ; BSR set to: 0
  2528  0010DC  ADBC               	btfss	(sprintf@flag+1)& (0+255),6,b
  2529  0010DE  D013               	goto	l232
  2530                           
  2531                           ; BSR set to: 0
  2532                           ;doprnt.c: 1349: if(width > prec)
  2533  0010E0  51BD               	movf	sprintf@width& (0+255),w,b
  2534  0010E2  5DC2               	subwf	sprintf@prec& (0+255),w,b
  2535  0010E4  51C3               	movf	(sprintf@prec+1)& (0+255),w,b
  2536  0010E6  0A80               	xorlw	128
  2537  0010E8  6FA6               	movwf	??_sprintf& (0+255),b
  2538  0010EA  51BE               	movf	(sprintf@width+1)& (0+255),w,b
  2539  0010EC  0A80               	xorlw	128
  2540  0010EE  59A6               	subwfb	??_sprintf& (0+255),w,b
  2541  0010F0  B0D8               	btfsc	status,0,c
  2542  0010F2  D005               	goto	l231
  2543                           
  2544                           ; BSR set to: 0
  2545                           ;doprnt.c: 1350: width -= prec;
  2546  0010F4  51C2               	movf	sprintf@prec& (0+255),w,b
  2547  0010F6  5FBD               	subwf	sprintf@width& (0+255),f,b
  2548  0010F8  51C3               	movf	(sprintf@prec+1)& (0+255),w,b
  2549  0010FA  5BBE               	subwfb	(sprintf@width+1)& (0+255),f,b
  2550  0010FC  D004               	goto	l232
  2551  0010FE                     l231:
  2552                           
  2553                           ; BSR set to: 0
  2554                           ;doprnt.c: 1351: else
  2555                           ;doprnt.c: 1352: width = 0;
  2556                           
  2557                           ; BSR set to: 0
  2558  0010FE  0E00               	movlw	0
  2559  001100  6FBE               	movwf	(sprintf@width+1)& (0+255),b
  2560  001102  0E00               	movlw	0
  2561  001104  6FBD               	movwf	sprintf@width& (0+255),b
  2562  001106                     l232:
  2563                           
  2564                           ; BSR set to: 0
  2565                           ;doprnt.c: 1353: }
  2566                           ;doprnt.c: 1381: if(width > c)
  2567                           
  2568                           ; BSR set to: 0
  2569                           
  2570                           ; BSR set to: 0
  2571  001106  0E80               	movlw	128
  2572  001108  BFC4               	btfsc	sprintf@c& (0+255),7,b
  2573  00110A  0E7F               	movlw	127
  2574  00110C  6FA6               	movwf	??_sprintf& (0+255),b
  2575  00110E  51BD               	movf	sprintf@width& (0+255),w,b
  2576  001110  5DC4               	subwf	sprintf@c& (0+255),w,b
  2577  001112  51BE               	movf	(sprintf@width+1)& (0+255),w,b
  2578  001114  0A80               	xorlw	128
  2579  001116  59A6               	subwfb	??_sprintf& (0+255),w,b
  2580  001118  B0D8               	btfsc	status,0,c
  2581  00111A  D007               	goto	l233
  2582                           
  2583                           ; BSR set to: 0
  2584                           ;doprnt.c: 1382: width -= c;
  2585  00111C  51C4               	movf	sprintf@c& (0+255),w,b
  2586  00111E  5FBD               	subwf	sprintf@width& (0+255),f,b
  2587  001120  0E00               	movlw	0
  2588  001122  BFC4               	btfsc	sprintf@c& (0+255),7,b
  2589  001124  0EFF               	movlw	255
  2590  001126  5BBE               	subwfb	(sprintf@width+1)& (0+255),f,b
  2591  001128  D004               	goto	l234
  2592  00112A                     l233:
  2593                           
  2594                           ; BSR set to: 0
  2595                           ;doprnt.c: 1383: else
  2596                           ;doprnt.c: 1384: width = 0;
  2597                           
  2598                           ; BSR set to: 0
  2599  00112A  0E00               	movlw	0
  2600  00112C  6FBE               	movwf	(sprintf@width+1)& (0+255),b
  2601  00112E  0E00               	movlw	0
  2602  001130  6FBD               	movwf	sprintf@width& (0+255),b
  2603  001132                     l234:
  2604                           
  2605                           ; BSR set to: 0
  2606                           ;doprnt.c: 1387: if(flag & 0x04) {
  2607                           
  2608                           ; BSR set to: 0
  2609  001132  A5BB               	btfss	sprintf@flag& (0+255),2,b
  2610  001134  D022               	goto	l235
  2611                           
  2612                           ; BSR set to: 0
  2613                           ;doprnt.c: 1392: if(flag & 0x03)
  2614  001136  0E03               	movlw	3
  2615  001138  15BB               	andwf	sprintf@flag& (0+255),w,b
  2616  00113A  6FA6               	movwf	??_sprintf& (0+255),b
  2617  00113C  0E00               	movlw	0
  2618  00113E  15BC               	andwf	(sprintf@flag+1)& (0+255),w,b
  2619  001140  6FA7               	movwf	(??_sprintf+1)& (0+255),b
  2620  001142  51A6               	movf	??_sprintf& (0+255),w,b
  2621  001144  11A7               	iorwf	(??_sprintf+1)& (0+255),w,b
  2622  001146  B4D8               	btfsc	status,2,c
  2623  001148  D008               	goto	l236
  2624                           
  2625                           ; BSR set to: 0
  2626                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  2627  00114A  C09F  FFD9         	movff	sprintf@sp,fsr2l
  2628  00114E  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  2629  001152  0E2D               	movlw	45
  2630  001154  6EDF               	movwf	indf2,c
  2631                           
  2632                           ; BSR set to: 0
  2633  001156  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  2634  001158  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  2635  00115A                     l236:
  2636                           
  2637                           ; BSR set to: 0
  2638                           ;doprnt.c: 1415: if(width)
  2639                           
  2640                           ; BSR set to: 0
  2641  00115A  51BD               	movf	sprintf@width& (0+255),w,b
  2642  00115C  11BE               	iorwf	(sprintf@width+1)& (0+255),w,b
  2643  00115E  B4D8               	btfsc	status,2,c
  2644  001160  D031               	goto	l244
  2645                           
  2646                           ; BSR set to: 0
  2647                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  2648                           
  2649                           ; BSR set to: 0
  2650                           
  2651                           ;doprnt.c: 1416: do
  2652  001162  C09F  FFD9         	movff	sprintf@sp,fsr2l
  2653  001166  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  2654  00116A  0E30               	movlw	48
  2655  00116C  6EDF               	movwf	indf2,c
  2656                           
  2657                           ; BSR set to: 0
  2658  00116E  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  2659  001170  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  2660                           
  2661                           ; BSR set to: 0
  2662                           ;doprnt.c: 1418: while(--width);
  2663  001172  07BD               	decf	sprintf@width& (0+255),f,b
  2664  001174  A0D8               	btfss	status,0,c
  2665  001176  07BE               	decf	(sprintf@width+1)& (0+255),f,b
  2666  001178  D7F0               	goto	l236
  2667  00117A                     l235:
  2668                           
  2669                           ; BSR set to: 0
  2670                           ;doprnt.c: 1422: {
  2671                           ;doprnt.c: 1424: if(width
  2672                           ;doprnt.c: 1428: )
  2673                           
  2674                           ; BSR set to: 0
  2675  00117A  51BD               	movf	sprintf@width& (0+255),w,b
  2676  00117C  11BE               	iorwf	(sprintf@width+1)& (0+255),w,b
  2677  00117E  B4D8               	btfsc	status,2,c
  2678  001180  D00F               	goto	u3380
  2679  001182                     u3370:
  2680                           
  2681                           ; BSR set to: 0
  2682                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  2683                           
  2684                           ; BSR set to: 0
  2685                           
  2686                           ;doprnt.c: 1429: do
  2687  001182  C09F  FFD9         	movff	sprintf@sp,fsr2l
  2688  001186  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  2689  00118A  0E20               	movlw	32
  2690  00118C  6EDF               	movwf	indf2,c
  2691                           
  2692                           ; BSR set to: 0
  2693  00118E  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  2694  001190  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  2695                           
  2696                           ; BSR set to: 0
  2697                           ;doprnt.c: 1431: while(--width);
  2698  001192  07BD               	decf	sprintf@width& (0+255),f,b
  2699  001194  A0D8               	btfss	status,0,c
  2700  001196  07BE               	decf	(sprintf@width+1)& (0+255),f,b
  2701  001198  51BD               	movf	sprintf@width& (0+255),w,b
  2702  00119A  11BE               	iorwf	(sprintf@width+1)& (0+255),w,b
  2703  00119C  A4D8               	btfss	status,2,c
  2704  00119E  D7F1               	goto	u3370
  2705  0011A0                     u3380:
  2706                           
  2707                           ; BSR set to: 0
  2708                           ;doprnt.c: 1438: if(flag & 0x03)
  2709                           
  2710                           ; BSR set to: 0
  2711                           
  2712                           ; BSR set to: 0
  2713  0011A0  0E03               	movlw	3
  2714  0011A2  15BB               	andwf	sprintf@flag& (0+255),w,b
  2715  0011A4  6FA6               	movwf	??_sprintf& (0+255),b
  2716  0011A6  0E00               	movlw	0
  2717  0011A8  15BC               	andwf	(sprintf@flag+1)& (0+255),w,b
  2718  0011AA  6FA7               	movwf	(??_sprintf+1)& (0+255),b
  2719  0011AC  51A6               	movf	??_sprintf& (0+255),w,b
  2720  0011AE  11A7               	iorwf	(??_sprintf+1)& (0+255),w,b
  2721  0011B0  B4D8               	btfsc	status,2,c
  2722  0011B2  D008               	goto	l244
  2723                           
  2724                           ; BSR set to: 0
  2725                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2726  0011B4  C09F  FFD9         	movff	sprintf@sp,fsr2l
  2727  0011B8  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  2728  0011BC  0E2D               	movlw	45
  2729  0011BE  6EDF               	movwf	indf2,c
  2730  0011C0                     l3227:
  2731                           
  2732                           ; BSR set to: 0
  2733  0011C0  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  2734  0011C2  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  2735  0011C4                     l244:
  2736                           
  2737                           ; BSR set to: 0
  2738                           
  2739                           ; BSR set to: 0
  2740                           
  2741                           ; BSR set to: 0
  2742                           
  2743                           ; BSR set to: 0
  2744  0011C4  C0A1  FFF6         	movff	sprintf@f,tblptrl
  2745  0011C8  C0A2  FFF7         	movff	sprintf@f+1,tblptrh
  2746  0011CC  4BA1               	infsnz	sprintf@f& (0+255),f,b
  2747  0011CE  2BA2               	incf	(sprintf@f+1)& (0+255),f,b
  2748  0011D0                     	if	0	;tblptru may be non-zero
  2749  0011D0                     	endif
  2750  0011D0                     	if	0	;tblptru may be non-zero
  2751  0011D0                     	endif
  2752  0011D0  0008               	tblrd		*
  2753  0011D2  CFF5 F0C4          	movff	tablat,sprintf@c
  2754  0011D6  51C4               	movf	sprintf@c& (0+255),w,b
  2755  0011D8  A4D8               	btfss	status,2,c
  2756  0011DA  EF50  F004         	goto	l154
  2757  0011DE                     u3400:
  2758                           
  2759                           ; BSR set to: 0
  2760                           ;doprnt.c: 1538: *sp = 0;
  2761                           
  2762                           ; BSR set to: 0
  2763                           
  2764                           ;doprnt.c: 1469: }
  2765                           ;doprnt.c: 1533: }
  2766                           ;doprnt.c: 1535: alldone:
  2767                           
  2768                           ; BSR set to: 0
  2769  0011DE  C09F  FFD9         	movff	sprintf@sp,fsr2l
  2770  0011E2  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  2771  0011E6  0E00               	movlw	0
  2772  0011E8  6EDF               	movwf	indf2,c
  2773  0011EA  0012               	return	
  2774  0011EC                     __end_of_sprintf:
  2775                           	opt stack 0
  2776                           tblptru	equ	0xFF8
  2777                           tblptrh	equ	0xFF7
  2778                           tblptrl	equ	0xFF6
  2779                           tablat	equ	0xFF5
  2780                           prodh	equ	0xFF4
  2781                           prodl	equ	0xFF3
  2782                           postinc0	equ	0xFEE
  2783                           wreg	equ	0xFE8
  2784                           indf2	equ	0xFDF
  2785                           postinc2	equ	0xFDE
  2786                           postdec2	equ	0xFDD
  2787                           fsr2h	equ	0xFDA
  2788                           fsr2l	equ	0xFD9
  2789                           status	equ	0xFD8
  2790                           
  2791 ;; *************** function _scale *****************
  2792 ;; Defined at:
  2793 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  2794 ;; Parameters:    Size  Location     Type
  2795 ;;  scl             1    wreg     char 
  2796 ;; Auto vars:     Size  Location     Type
  2797 ;;  scl             1   41[BANK0 ] char 
  2798 ;; Return value:  Size  Location     Type
  2799 ;;                  3   35[BANK0 ] char 
  2800 ;; Registers used:
  2801 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2802 ;; Tracked objects:
  2803 ;;		On entry : 0/0
  2804 ;;		On exit  : 0/0
  2805 ;;		Unchanged: 0/0
  2806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2807 ;;      Params:         0       3       0       0       0       0       0       0       0
  2808 ;;      Locals:         0       4       0       0       0       0       0       0       0
  2809 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2810 ;;      Totals:         0       7       0       0       0       0       0       0       0
  2811 ;;Total ram usage:        7 bytes
  2812 ;; Hardware stack levels used:    1
  2813 ;; Hardware stack levels required when called:    5
  2814 ;; This function calls:
  2815 ;;		___awdiv
  2816 ;;		___awmod
  2817 ;;		___ftmul
  2818 ;;		___wmul
  2819 ;; This function is called by:
  2820 ;;		_sprintf
  2821 ;; This function uses a non-reentrant model
  2822 ;;
  2823                           
  2824                           	psect	text2
  2825  0011EC                     __ptext2:
  2826                           	opt stack 0
  2827  0011EC                     _scale:
  2828                           	opt stack 24
  2829                           
  2830                           ; BSR set to: 0
  2831                           ;incstack = 0
  2832                           ;scale@scl stored from wreg
  2833  0011EC  0100               	movlb	0	; () banked
  2834  0011EE  6F89               	movwf	scale@scl& (0+255),b
  2835                           
  2836                           ;doprnt.c: 428: if(scl < 0) {
  2837  0011F0  0100               	movlb	0	; () banked
  2838  0011F2  AF89               	btfss	scale@scl& (0+255),7,b
  2839  0011F4  D10C               	goto	l143
  2840                           
  2841                           ; BSR set to: 0
  2842                           ;doprnt.c: 429: scl = -scl;
  2843  0011F6  6D89               	negf	scale@scl& (0+255),b
  2844                           
  2845                           ;doprnt.c: 430: if(scl>=110)
  2846  0011F8  5189               	movf	scale@scl& (0+255),w,b
  2847  0011FA  0A80               	xorlw	128
  2848  0011FC  0F12               	addlw	-238
  2849  0011FE  A0D8               	btfss	status,0,c
  2850  001200  D097               	goto	l144
  2851                           
  2852                           ; BSR set to: 0
  2853                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2854  001202  0E00               	movlw	0
  2855  001204  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2856  001206  0E03               	movlw	3
  2857  001208  6F70               	movwf	___wmul@multiplicand& (0+255),b
  2858  00120A  0E00               	movlw	0
  2859  00120C  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  2860  00120E  0E0A               	movlw	10
  2861  001210  6F68               	movwf	___awdiv@divisor& (0+255),b
  2862  001212  0E00               	movlw	0
  2863  001214  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  2864  001216  0E64               	movlw	100
  2865  001218  6F62               	movwf	___awmod@divisor& (0+255),b
  2866  00121A  5189               	movf	scale@scl& (0+255),w,b
  2867  00121C  6F60               	movwf	___awmod@dividend& (0+255),b
  2868  00121E  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  2869  001220  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  2870  001222  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  2871  001224  EC33  F015         	call	___awmod	;wreg free
  2872  001228  C060  F066         	movff	?___awmod,___awdiv@dividend
  2873  00122C  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
  2874  001230  ECAE  F014         	call	___awdiv	;wreg free
  2875  001234  0E09               	movlw	9
  2876  001236  0100               	movlb	0	; () banked
  2877  001238  2566               	addwf	?___awdiv& (0+255),w,b
  2878  00123A  6F6E               	movwf	___wmul@multiplier& (0+255),b
  2879  00123C  0E00               	movlw	0
  2880  00123E  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  2881  001240  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  2882  001242  EC54  F016         	call	___wmul	;wreg free
  2883  001246  0E50               	movlw	low __npowers_
  2884  001248  0100               	movlb	0	; () banked
  2885  00124A  256E               	addwf	?___wmul& (0+255),w,b
  2886  00124C  6EF6               	movwf	tblptrl,c
  2887  00124E  0E08               	movlw	high __npowers_
  2888  001250  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  2889  001252  6EF7               	movwf	tblptrh,c
  2890  001254                     	if	0	;There are less than 3 active tblptr bytes
  2891  001254                     	endif
  2892  001254  0009               	tblrd		*+
  2893  001256  CFF5 F077          	movff	tablat,___ftmul@f2
  2894  00125A  0009               	tblrd		*+
  2895  00125C  CFF5 F078          	movff	tablat,___ftmul@f2+1
  2896  001260  000A               	tblrd		*-
  2897  001262  CFF5 F079          	movff	tablat,___ftmul@f2+2
  2898  001266  0E00               	movlw	0
  2899  001268  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  2900  00126A  0E64               	movlw	100
  2901  00126C  6F68               	movwf	___awdiv@divisor& (0+255),b
  2902  00126E  5189               	movf	scale@scl& (0+255),w,b
  2903  001270  6F66               	movwf	___awdiv@dividend& (0+255),b
  2904  001272  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  2905  001274  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  2906  001276  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  2907  001278  ECAE  F014         	call	___awdiv	;wreg free
  2908  00127C  0E12               	movlw	18
  2909  00127E  0100               	movlb	0	; () banked
  2910  001280  2566               	addwf	?___awdiv& (0+255),w,b
  2911  001282  6F6E               	movwf	___wmul@multiplier& (0+255),b
  2912  001284  0E00               	movlw	0
  2913  001286  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  2914  001288  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  2915  00128A  0E00               	movlw	0
  2916  00128C  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2917  00128E  0E03               	movlw	3
  2918  001290  6F70               	movwf	___wmul@multiplicand& (0+255),b
  2919  001292  EC54  F016         	call	___wmul	;wreg free
  2920  001296  0E50               	movlw	low __npowers_
  2921  001298  0100               	movlb	0	; () banked
  2922  00129A  256E               	addwf	?___wmul& (0+255),w,b
  2923  00129C  6EF6               	movwf	tblptrl,c
  2924  00129E  0E08               	movlw	high __npowers_
  2925  0012A0  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  2926  0012A2  6EF7               	movwf	tblptrh,c
  2927  0012A4                     	if	0	;There are less than 3 active tblptr bytes
  2928  0012A4                     	endif
  2929  0012A4  0009               	tblrd		*+
  2930  0012A6  CFF5 F074          	movff	tablat,___ftmul@f1
  2931  0012AA  0009               	tblrd		*+
  2932  0012AC  CFF5 F075          	movff	tablat,___ftmul@f1+1
  2933  0012B0  000A               	tblrd		*-
  2934  0012B2  CFF5 F076          	movff	tablat,___ftmul@f1+2
  2935  0012B6  ECDA  F011         	call	___ftmul	;wreg free
  2936  0012BA  C074  F086         	movff	?___ftmul,_scale$1334
  2937  0012BE  C075  F087         	movff	?___ftmul+1,_scale$1334+1
  2938  0012C2  C076  F088         	movff	?___ftmul+2,_scale$1334+2
  2939                           
  2940                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2941  0012C6  C086  F074         	movff	_scale$1334,___ftmul@f1
  2942  0012CA  C087  F075         	movff	_scale$1334+1,___ftmul@f1+1
  2943  0012CE  C088  F076         	movff	_scale$1334+2,___ftmul@f1+2
  2944  0012D2  0E00               	movlw	0
  2945  0012D4  0100               	movlb	0	; () banked
  2946  0012D6  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2947  0012D8  0E03               	movlw	3
  2948  0012DA  6F70               	movwf	___wmul@multiplicand& (0+255),b
  2949  0012DC  0E00               	movlw	0
  2950  0012DE  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  2951  0012E0  0E0A               	movlw	10
  2952  0012E2  6F62               	movwf	___awmod@divisor& (0+255),b
  2953  0012E4  5189               	movf	scale@scl& (0+255),w,b
  2954  0012E6  6F60               	movwf	___awmod@dividend& (0+255),b
  2955  0012E8  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  2956  0012EA  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  2957  0012EC  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  2958  0012EE  EC33  F015         	call	___awmod	;wreg free
  2959  0012F2  C060  F06E         	movff	?___awmod,___wmul@multiplier
  2960  0012F6  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  2961  0012FA  EC54  F016         	call	___wmul	;wreg free
  2962  0012FE  0E50               	movlw	low __npowers_
  2963  001300  0100               	movlb	0	; () banked
  2964  001302  256E               	addwf	?___wmul& (0+255),w,b
  2965  001304  6EF6               	movwf	tblptrl,c
  2966  001306  0E08               	movlw	high __npowers_
  2967  001308  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  2968  00130A  6EF7               	movwf	tblptrh,c
  2969  00130C                     	if	0	;There are less than 3 active tblptr bytes
  2970  00130C                     	endif
  2971  00130C  0009               	tblrd		*+
  2972  00130E  CFF5 F077          	movff	tablat,___ftmul@f2
  2973  001312  0009               	tblrd		*+
  2974  001314  CFF5 F078          	movff	tablat,___ftmul@f2+1
  2975  001318  000A               	tblrd		*-
  2976  00131A  CFF5 F079          	movff	tablat,___ftmul@f2+2
  2977  00131E  ECDA  F011         	call	___ftmul	;wreg free
  2978  001322  C074  F083         	movff	?___ftmul,?_scale
  2979  001326  C075  F084         	movff	?___ftmul+1,?_scale+1
  2980  00132A  C076  F085         	movff	?___ftmul+2,?_scale+2
  2981  00132E  0012               	return	
  2982  001330                     l144:
  2983                           
  2984                           ;doprnt.c: 432: else if(scl > 10)
  2985  001330  0100               	movlb	0	; () banked
  2986  001332  5189               	movf	scale@scl& (0+255),w,b
  2987  001334  0A80               	xorlw	128
  2988  001336  0F75               	addlw	-139
  2989  001338  A0D8               	btfss	status,0,c
  2990  00133A  D056               	goto	l147
  2991                           
  2992                           ; BSR set to: 0
  2993                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  2994  00133C  0E00               	movlw	0
  2995  00133E  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  2996  001340  0E0A               	movlw	10
  2997  001342  6F68               	movwf	___awdiv@divisor& (0+255),b
  2998  001344  5189               	movf	scale@scl& (0+255),w,b
  2999  001346  6F66               	movwf	___awdiv@dividend& (0+255),b
  3000  001348  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  3001  00134A  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  3002  00134C  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  3003  00134E  ECAE  F014         	call	___awdiv	;wreg free
  3004  001352  0E09               	movlw	9
  3005  001354  0100               	movlb	0	; () banked
  3006  001356  2566               	addwf	?___awdiv& (0+255),w,b
  3007  001358  6F6E               	movwf	___wmul@multiplier& (0+255),b
  3008  00135A  0E00               	movlw	0
  3009  00135C  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  3010  00135E  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  3011  001360  0E00               	movlw	0
  3012  001362  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3013  001364  0E03               	movlw	3
  3014  001366  6F70               	movwf	___wmul@multiplicand& (0+255),b
  3015  001368  EC54  F016         	call	___wmul	;wreg free
  3016  00136C  0E50               	movlw	low __npowers_
  3017  00136E  0100               	movlb	0	; () banked
  3018  001370  256E               	addwf	?___wmul& (0+255),w,b
  3019  001372  6EF6               	movwf	tblptrl,c
  3020  001374  0E08               	movlw	high __npowers_
  3021  001376  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  3022  001378  6EF7               	movwf	tblptrh,c
  3023  00137A                     	if	0	;There are less than 3 active tblptr bytes
  3024  00137A                     	endif
  3025  00137A  0009               	tblrd		*+
  3026  00137C  CFF5 F074          	movff	tablat,___ftmul@f1
  3027  001380  0009               	tblrd		*+
  3028  001382  CFF5 F075          	movff	tablat,___ftmul@f1+1
  3029  001386  000A               	tblrd		*-
  3030  001388  CFF5 F076          	movff	tablat,___ftmul@f1+2
  3031  00138C  0E00               	movlw	0
  3032  00138E  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3033  001390  0E03               	movlw	3
  3034  001392  6F70               	movwf	___wmul@multiplicand& (0+255),b
  3035  001394  0E00               	movlw	0
  3036  001396  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  3037  001398  0E0A               	movlw	10
  3038  00139A  6F62               	movwf	___awmod@divisor& (0+255),b
  3039  00139C  5189               	movf	scale@scl& (0+255),w,b
  3040  00139E  6F60               	movwf	___awmod@dividend& (0+255),b
  3041  0013A0  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  3042  0013A2  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  3043  0013A4  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  3044  0013A6  EC33  F015         	call	___awmod	;wreg free
  3045  0013AA  C060  F06E         	movff	?___awmod,___wmul@multiplier
  3046  0013AE  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  3047  0013B2  EC54  F016         	call	___wmul	;wreg free
  3048  0013B6  0E50               	movlw	low __npowers_
  3049  0013B8  0100               	movlb	0	; () banked
  3050  0013BA  256E               	addwf	?___wmul& (0+255),w,b
  3051  0013BC  6EF6               	movwf	tblptrl,c
  3052  0013BE  0E08               	movlw	high __npowers_
  3053  0013C0  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  3054  0013C2  6EF7               	movwf	tblptrh,c
  3055  0013C4                     	if	0	;There are less than 3 active tblptr bytes
  3056  0013C4                     	endif
  3057  0013C4  0009               	tblrd		*+
  3058  0013C6  CFF5 F077          	movff	tablat,___ftmul@f2
  3059  0013CA  0009               	tblrd		*+
  3060  0013CC  CFF5 F078          	movff	tablat,___ftmul@f2+1
  3061  0013D0  000A               	tblrd		*-
  3062  0013D2  CFF5 F079          	movff	tablat,___ftmul@f2+2
  3063  0013D6  ECDA  F011         	call	___ftmul	;wreg free
  3064  0013DA  C074  F083         	movff	?___ftmul,?_scale
  3065  0013DE  C075  F084         	movff	?___ftmul+1,?_scale+1
  3066  0013E2  C076  F085         	movff	?___ftmul+2,?_scale+2
  3067  0013E6  0012               	return	
  3068  0013E8                     l147:
  3069                           
  3070                           ;doprnt.c: 434: return _npowers_[scl];
  3071  0013E8  0100               	movlb	0	; () banked
  3072  0013EA  5189               	movf	scale@scl& (0+255),w,b
  3073  0013EC  0D03               	mullw	3
  3074  0013EE  0E50               	movlw	low __npowers_
  3075  0013F0  24F3               	addwf	prodl,w,c
  3076  0013F2  6EF6               	movwf	tblptrl,c
  3077  0013F4  0E08               	movlw	high __npowers_
  3078  0013F6  20F4               	addwfc	prodh,w,c
  3079  0013F8  6EF7               	movwf	tblptrh,c
  3080  0013FA                     	if	0	;There are less than 3 active tblptr bytes
  3081  0013FA                     	endif
  3082  0013FA  0009               	tblrd		*+
  3083  0013FC  CFF5 F083          	movff	tablat,?_scale
  3084  001400  0009               	tblrd		*+
  3085  001402  CFF5 F084          	movff	tablat,?_scale+1
  3086  001406  000A               	tblrd		*-
  3087  001408  CFF5 F085          	movff	tablat,?_scale+2
  3088                           
  3089                           ; BSR set to: 0
  3090  00140C  0012               	return	
  3091  00140E                     l143:
  3092                           
  3093                           ; BSR set to: 0
  3094                           ;doprnt.c: 435: }
  3095                           ;doprnt.c: 436: if(scl>=110)
  3096                           
  3097                           ; BSR set to: 0
  3098  00140E  5189               	movf	scale@scl& (0+255),w,b
  3099  001410  0A80               	xorlw	128
  3100  001412  0F12               	addlw	-238
  3101  001414  A0D8               	btfss	status,0,c
  3102  001416  D097               	goto	l148
  3103                           
  3104                           ; BSR set to: 0
  3105                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3106  001418  0E00               	movlw	0
  3107  00141A  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3108  00141C  0E03               	movlw	3
  3109  00141E  6F70               	movwf	___wmul@multiplicand& (0+255),b
  3110  001420  0E00               	movlw	0
  3111  001422  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  3112  001424  0E0A               	movlw	10
  3113  001426  6F68               	movwf	___awdiv@divisor& (0+255),b
  3114  001428  0E00               	movlw	0
  3115  00142A  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  3116  00142C  0E64               	movlw	100
  3117  00142E  6F62               	movwf	___awmod@divisor& (0+255),b
  3118  001430  5189               	movf	scale@scl& (0+255),w,b
  3119  001432  6F60               	movwf	___awmod@dividend& (0+255),b
  3120  001434  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  3121  001436  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  3122  001438  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  3123  00143A  EC33  F015         	call	___awmod	;wreg free
  3124  00143E  C060  F066         	movff	?___awmod,___awdiv@dividend
  3125  001442  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
  3126  001446  ECAE  F014         	call	___awdiv	;wreg free
  3127  00144A  0E09               	movlw	9
  3128  00144C  0100               	movlb	0	; () banked
  3129  00144E  2566               	addwf	?___awdiv& (0+255),w,b
  3130  001450  6F6E               	movwf	___wmul@multiplier& (0+255),b
  3131  001452  0E00               	movlw	0
  3132  001454  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  3133  001456  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  3134  001458  EC54  F016         	call	___wmul	;wreg free
  3135  00145C  0E29               	movlw	low __powers_
  3136  00145E  0100               	movlb	0	; () banked
  3137  001460  256E               	addwf	?___wmul& (0+255),w,b
  3138  001462  6EF6               	movwf	tblptrl,c
  3139  001464  0E08               	movlw	high __powers_
  3140  001466  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  3141  001468  6EF7               	movwf	tblptrh,c
  3142  00146A                     	if	0	;There are less than 3 active tblptr bytes
  3143  00146A                     	endif
  3144  00146A  0009               	tblrd		*+
  3145  00146C  CFF5 F077          	movff	tablat,___ftmul@f2
  3146  001470  0009               	tblrd		*+
  3147  001472  CFF5 F078          	movff	tablat,___ftmul@f2+1
  3148  001476  000A               	tblrd		*-
  3149  001478  CFF5 F079          	movff	tablat,___ftmul@f2+2
  3150  00147C  0E00               	movlw	0
  3151  00147E  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  3152  001480  0E64               	movlw	100
  3153  001482  6F68               	movwf	___awdiv@divisor& (0+255),b
  3154  001484  5189               	movf	scale@scl& (0+255),w,b
  3155  001486  6F66               	movwf	___awdiv@dividend& (0+255),b
  3156  001488  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  3157  00148A  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  3158  00148C  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  3159  00148E  ECAE  F014         	call	___awdiv	;wreg free
  3160  001492  0E12               	movlw	18
  3161  001494  0100               	movlb	0	; () banked
  3162  001496  2566               	addwf	?___awdiv& (0+255),w,b
  3163  001498  6F6E               	movwf	___wmul@multiplier& (0+255),b
  3164  00149A  0E00               	movlw	0
  3165  00149C  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  3166  00149E  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  3167  0014A0  0E00               	movlw	0
  3168  0014A2  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3169  0014A4  0E03               	movlw	3
  3170  0014A6  6F70               	movwf	___wmul@multiplicand& (0+255),b
  3171  0014A8  EC54  F016         	call	___wmul	;wreg free
  3172  0014AC  0E29               	movlw	low __powers_
  3173  0014AE  0100               	movlb	0	; () banked
  3174  0014B0  256E               	addwf	?___wmul& (0+255),w,b
  3175  0014B2  6EF6               	movwf	tblptrl,c
  3176  0014B4  0E08               	movlw	high __powers_
  3177  0014B6  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  3178  0014B8  6EF7               	movwf	tblptrh,c
  3179  0014BA                     	if	0	;There are less than 3 active tblptr bytes
  3180  0014BA                     	endif
  3181  0014BA  0009               	tblrd		*+
  3182  0014BC  CFF5 F074          	movff	tablat,___ftmul@f1
  3183  0014C0  0009               	tblrd		*+
  3184  0014C2  CFF5 F075          	movff	tablat,___ftmul@f1+1
  3185  0014C6  000A               	tblrd		*-
  3186  0014C8  CFF5 F076          	movff	tablat,___ftmul@f1+2
  3187  0014CC  ECDA  F011         	call	___ftmul	;wreg free
  3188  0014D0  C074  F086         	movff	?___ftmul,_scale$1334
  3189  0014D4  C075  F087         	movff	?___ftmul+1,_scale$1334+1
  3190  0014D8  C076  F088         	movff	?___ftmul+2,_scale$1334+2
  3191                           
  3192                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3193  0014DC  C086  F074         	movff	_scale$1334,___ftmul@f1
  3194  0014E0  C087  F075         	movff	_scale$1334+1,___ftmul@f1+1
  3195  0014E4  C088  F076         	movff	_scale$1334+2,___ftmul@f1+2
  3196  0014E8  0E00               	movlw	0
  3197  0014EA  0100               	movlb	0	; () banked
  3198  0014EC  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3199  0014EE  0E03               	movlw	3
  3200  0014F0  6F70               	movwf	___wmul@multiplicand& (0+255),b
  3201  0014F2  0E00               	movlw	0
  3202  0014F4  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  3203  0014F6  0E0A               	movlw	10
  3204  0014F8  6F62               	movwf	___awmod@divisor& (0+255),b
  3205  0014FA  5189               	movf	scale@scl& (0+255),w,b
  3206  0014FC  6F60               	movwf	___awmod@dividend& (0+255),b
  3207  0014FE  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  3208  001500  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  3209  001502  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  3210  001504  EC33  F015         	call	___awmod	;wreg free
  3211  001508  C060  F06E         	movff	?___awmod,___wmul@multiplier
  3212  00150C  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  3213  001510  EC54  F016         	call	___wmul	;wreg free
  3214  001514  0E29               	movlw	low __powers_
  3215  001516  0100               	movlb	0	; () banked
  3216  001518  256E               	addwf	?___wmul& (0+255),w,b
  3217  00151A  6EF6               	movwf	tblptrl,c
  3218  00151C  0E08               	movlw	high __powers_
  3219  00151E  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  3220  001520  6EF7               	movwf	tblptrh,c
  3221  001522                     	if	0	;There are less than 3 active tblptr bytes
  3222  001522                     	endif
  3223  001522  0009               	tblrd		*+
  3224  001524  CFF5 F077          	movff	tablat,___ftmul@f2
  3225  001528  0009               	tblrd		*+
  3226  00152A  CFF5 F078          	movff	tablat,___ftmul@f2+1
  3227  00152E  000A               	tblrd		*-
  3228  001530  CFF5 F079          	movff	tablat,___ftmul@f2+2
  3229  001534  ECDA  F011         	call	___ftmul	;wreg free
  3230  001538  C074  F083         	movff	?___ftmul,?_scale
  3231  00153C  C075  F084         	movff	?___ftmul+1,?_scale+1
  3232  001540  C076  F085         	movff	?___ftmul+2,?_scale+2
  3233  001544  0012               	return	
  3234  001546                     l148:
  3235                           
  3236                           ;doprnt.c: 438: else if(scl > 10)
  3237  001546  0100               	movlb	0	; () banked
  3238  001548  5189               	movf	scale@scl& (0+255),w,b
  3239  00154A  0A80               	xorlw	128
  3240  00154C  0F75               	addlw	-139
  3241  00154E  A0D8               	btfss	status,0,c
  3242  001550  D056               	goto	l150
  3243                           
  3244                           ; BSR set to: 0
  3245                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3246  001552  0E00               	movlw	0
  3247  001554  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  3248  001556  0E0A               	movlw	10
  3249  001558  6F68               	movwf	___awdiv@divisor& (0+255),b
  3250  00155A  5189               	movf	scale@scl& (0+255),w,b
  3251  00155C  6F66               	movwf	___awdiv@dividend& (0+255),b
  3252  00155E  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  3253  001560  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  3254  001562  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  3255  001564  ECAE  F014         	call	___awdiv	;wreg free
  3256  001568  0E09               	movlw	9
  3257  00156A  0100               	movlb	0	; () banked
  3258  00156C  2566               	addwf	?___awdiv& (0+255),w,b
  3259  00156E  6F6E               	movwf	___wmul@multiplier& (0+255),b
  3260  001570  0E00               	movlw	0
  3261  001572  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  3262  001574  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  3263  001576  0E00               	movlw	0
  3264  001578  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3265  00157A  0E03               	movlw	3
  3266  00157C  6F70               	movwf	___wmul@multiplicand& (0+255),b
  3267  00157E  EC54  F016         	call	___wmul	;wreg free
  3268  001582  0E29               	movlw	low __powers_
  3269  001584  0100               	movlb	0	; () banked
  3270  001586  256E               	addwf	?___wmul& (0+255),w,b
  3271  001588  6EF6               	movwf	tblptrl,c
  3272  00158A  0E08               	movlw	high __powers_
  3273  00158C  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  3274  00158E  6EF7               	movwf	tblptrh,c
  3275  001590                     	if	0	;There are less than 3 active tblptr bytes
  3276  001590                     	endif
  3277  001590  0009               	tblrd		*+
  3278  001592  CFF5 F074          	movff	tablat,___ftmul@f1
  3279  001596  0009               	tblrd		*+
  3280  001598  CFF5 F075          	movff	tablat,___ftmul@f1+1
  3281  00159C  000A               	tblrd		*-
  3282  00159E  CFF5 F076          	movff	tablat,___ftmul@f1+2
  3283  0015A2  0E00               	movlw	0
  3284  0015A4  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3285  0015A6  0E03               	movlw	3
  3286  0015A8  6F70               	movwf	___wmul@multiplicand& (0+255),b
  3287  0015AA  0E00               	movlw	0
  3288  0015AC  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  3289  0015AE  0E0A               	movlw	10
  3290  0015B0  6F62               	movwf	___awmod@divisor& (0+255),b
  3291  0015B2  5189               	movf	scale@scl& (0+255),w,b
  3292  0015B4  6F60               	movwf	___awmod@dividend& (0+255),b
  3293  0015B6  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  3294  0015B8  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  3295  0015BA  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  3296  0015BC  EC33  F015         	call	___awmod	;wreg free
  3297  0015C0  C060  F06E         	movff	?___awmod,___wmul@multiplier
  3298  0015C4  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  3299  0015C8  EC54  F016         	call	___wmul	;wreg free
  3300  0015CC  0E29               	movlw	low __powers_
  3301  0015CE  0100               	movlb	0	; () banked
  3302  0015D0  256E               	addwf	?___wmul& (0+255),w,b
  3303  0015D2  6EF6               	movwf	tblptrl,c
  3304  0015D4  0E08               	movlw	high __powers_
  3305  0015D6  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  3306  0015D8  6EF7               	movwf	tblptrh,c
  3307  0015DA                     	if	0	;There are less than 3 active tblptr bytes
  3308  0015DA                     	endif
  3309  0015DA  0009               	tblrd		*+
  3310  0015DC  CFF5 F077          	movff	tablat,___ftmul@f2
  3311  0015E0  0009               	tblrd		*+
  3312  0015E2  CFF5 F078          	movff	tablat,___ftmul@f2+1
  3313  0015E6  000A               	tblrd		*-
  3314  0015E8  CFF5 F079          	movff	tablat,___ftmul@f2+2
  3315  0015EC  ECDA  F011         	call	___ftmul	;wreg free
  3316  0015F0  C074  F083         	movff	?___ftmul,?_scale
  3317  0015F4  C075  F084         	movff	?___ftmul+1,?_scale+1
  3318  0015F8  C076  F085         	movff	?___ftmul+2,?_scale+2
  3319  0015FC  0012               	return	
  3320  0015FE                     l150:
  3321                           
  3322                           ;doprnt.c: 440: return _powers_[scl];
  3323  0015FE  0100               	movlb	0	; () banked
  3324  001600  5189               	movf	scale@scl& (0+255),w,b
  3325  001602  0D03               	mullw	3
  3326  001604  0E29               	movlw	low __powers_
  3327  001606  24F3               	addwf	prodl,w,c
  3328  001608  6EF6               	movwf	tblptrl,c
  3329  00160A  0E08               	movlw	high __powers_
  3330  00160C  20F4               	addwfc	prodh,w,c
  3331  00160E  6EF7               	movwf	tblptrh,c
  3332  001610                     	if	0	;There are less than 3 active tblptr bytes
  3333  001610                     	endif
  3334  001610  0009               	tblrd		*+
  3335  001612  CFF5 F083          	movff	tablat,?_scale
  3336  001616  0009               	tblrd		*+
  3337  001618  CFF5 F084          	movff	tablat,?_scale+1
  3338  00161C  000A               	tblrd		*-
  3339  00161E  CFF5 F085          	movff	tablat,?_scale+2
  3340  001622  0012               	return	
  3341  001624                     __end_of_scale:
  3342                           	opt stack 0
  3343                           tblptru	equ	0xFF8
  3344                           tblptrh	equ	0xFF7
  3345                           tblptrl	equ	0xFF6
  3346                           tablat	equ	0xFF5
  3347                           prodh	equ	0xFF4
  3348                           prodl	equ	0xFF3
  3349                           postinc0	equ	0xFEE
  3350                           wreg	equ	0xFE8
  3351                           indf2	equ	0xFDF
  3352                           postinc2	equ	0xFDE
  3353                           postdec2	equ	0xFDD
  3354                           fsr2h	equ	0xFDA
  3355                           fsr2l	equ	0xFD9
  3356                           status	equ	0xFD8
  3357                           
  3358 ;; *************** function _isdigit *****************
  3359 ;; Defined at:
  3360 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  3361 ;; Parameters:    Size  Location     Type
  3362 ;;  c               1    wreg     unsigned char 
  3363 ;; Auto vars:     Size  Location     Type
  3364 ;;  c               1    2[BANK0 ] unsigned char 
  3365 ;; Return value:  Size  Location     Type
  3366 ;;		None               void
  3367 ;; Registers used:
  3368 ;;		wreg, status,2, status,0
  3369 ;; Tracked objects:
  3370 ;;		On entry : 0/0
  3371 ;;		On exit  : 0/0
  3372 ;;		Unchanged: 0/0
  3373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3374 ;;      Params:         0       0       0       0       0       0       0       0       0
  3375 ;;      Locals:         0       2       0       0       0       0       0       0       0
  3376 ;;      Temps:          0       1       0       0       0       0       0       0       0
  3377 ;;      Totals:         0       3       0       0       0       0       0       0       0
  3378 ;;Total ram usage:        3 bytes
  3379 ;; Hardware stack levels used:    1
  3380 ;; Hardware stack levels required when called:    3
  3381 ;; This function calls:
  3382 ;;		Nothing
  3383 ;; This function is called by:
  3384 ;;		_sprintf
  3385 ;; This function uses a non-reentrant model
  3386 ;;
  3387                           
  3388                           	psect	text3
  3389  002D66                     __ptext3:
  3390                           	opt stack 0
  3391  002D66                     _isdigit:
  3392                           	opt stack 26
  3393                           
  3394                           ;incstack = 0
  3395                           ;isdigit@c stored from wreg
  3396  002D66  0100               	movlb	0	; () banked
  3397  002D68  6F62               	movwf	isdigit@c& (0+255),b
  3398  002D6A  0E00               	movlw	0
  3399  002D6C  0100               	movlb	0	; () banked
  3400  002D6E  6F61               	movwf	_isdigit$993& (0+255),b
  3401                           
  3402                           ; BSR set to: 0
  3403  002D70  0E3A               	movlw	58
  3404  002D72  6162               	cpfslt	isdigit@c& (0+255),b
  3405  002D74  D005               	goto	l610
  3406                           
  3407                           ; BSR set to: 0
  3408  002D76  0E2F               	movlw	47
  3409  002D78  6562               	cpfsgt	isdigit@c& (0+255),b
  3410  002D7A  D002               	goto	l610
  3411                           
  3412                           ; BSR set to: 0
  3413  002D7C  0E01               	movlw	1
  3414  002D7E  6F61               	movwf	_isdigit$993& (0+255),b
  3415  002D80                     l610:
  3416                           
  3417                           ; BSR set to: 0
  3418                           
  3419                           ; BSR set to: 0
  3420  002D80  C061  F060         	movff	_isdigit$993,??_isdigit
  3421  002D84  3160               	rrcf	??_isdigit& (0+255),w,b
  3422  002D86  0012               	return	
  3423  002D88                     __end_of_isdigit:
  3424                           	opt stack 0
  3425                           tblptru	equ	0xFF8
  3426                           tblptrh	equ	0xFF7
  3427                           tblptrl	equ	0xFF6
  3428                           tablat	equ	0xFF5
  3429                           prodh	equ	0xFF4
  3430                           prodl	equ	0xFF3
  3431                           postinc0	equ	0xFEE
  3432                           wreg	equ	0xFE8
  3433                           indf2	equ	0xFDF
  3434                           postinc2	equ	0xFDE
  3435                           postdec2	equ	0xFDD
  3436                           fsr2h	equ	0xFDA
  3437                           fsr2l	equ	0xFD9
  3438                           status	equ	0xFD8
  3439                           
  3440 ;; *************** function _fround *****************
  3441 ;; Defined at:
  3442 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  3443 ;; Parameters:    Size  Location     Type
  3444 ;;  prec            1    wreg     unsigned char 
  3445 ;; Auto vars:     Size  Location     Type
  3446 ;;  prec            1   44[BANK0 ] unsigned char 
  3447 ;; Return value:  Size  Location     Type
  3448 ;;                  3   35[BANK0 ] unsigned char 
  3449 ;; Registers used:
  3450 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3451 ;; Tracked objects:
  3452 ;;		On entry : 0/0
  3453 ;;		On exit  : 0/0
  3454 ;;		Unchanged: 0/0
  3455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3456 ;;      Params:         0       3       0       0       0       0       0       0       0
  3457 ;;      Locals:         0       7       0       0       0       0       0       0       0
  3458 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3459 ;;      Totals:         0      10       0       0       0       0       0       0       0
  3460 ;;Total ram usage:       10 bytes
  3461 ;; Hardware stack levels used:    1
  3462 ;; Hardware stack levels required when called:    5
  3463 ;; This function calls:
  3464 ;;		___awdiv
  3465 ;;		___awmod
  3466 ;;		___ftmul
  3467 ;;		___wmul
  3468 ;; This function is called by:
  3469 ;;		_sprintf
  3470 ;; This function uses a non-reentrant model
  3471 ;;
  3472                           
  3473                           	psect	text4
  3474  001624                     __ptext4:
  3475                           	opt stack 0
  3476  001624                     _fround:
  3477                           	opt stack 24
  3478                           
  3479                           ; BSR set to: 0
  3480                           ;incstack = 0
  3481                           ;fround@prec stored from wreg
  3482  001624  0100               	movlb	0	; () banked
  3483  001626  6F8C               	movwf	fround@prec& (0+255),b
  3484                           
  3485                           ;doprnt.c: 413: if(prec>=110)
  3486  001628  0E6D               	movlw	109
  3487  00162A  0100               	movlb	0	; () banked
  3488  00162C  658C               	cpfsgt	fround@prec& (0+255),b
  3489  00162E  D0A6               	goto	l137
  3490                           
  3491                           ; BSR set to: 0
  3492                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3493  001630  0E00               	movlw	0
  3494  001632  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3495  001634  0E03               	movlw	3
  3496  001636  6F70               	movwf	___wmul@multiplicand& (0+255),b
  3497  001638  0E00               	movlw	0
  3498  00163A  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  3499  00163C  0E0A               	movlw	10
  3500  00163E  6F68               	movwf	___awdiv@divisor& (0+255),b
  3501  001640  0E00               	movlw	0
  3502  001642  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  3503  001644  0E64               	movlw	100
  3504  001646  6F62               	movwf	___awmod@divisor& (0+255),b
  3505  001648  C08C  F060         	movff	fround@prec,___awmod@dividend
  3506  00164C  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  3507  00164E  EC33  F015         	call	___awmod	;wreg free
  3508  001652  C060  F066         	movff	?___awmod,___awdiv@dividend
  3509  001656  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
  3510  00165A  ECAE  F014         	call	___awdiv	;wreg free
  3511  00165E  0E09               	movlw	9
  3512  001660  0100               	movlb	0	; () banked
  3513  001662  2566               	addwf	?___awdiv& (0+255),w,b
  3514  001664  6F6E               	movwf	___wmul@multiplier& (0+255),b
  3515  001666  0E00               	movlw	0
  3516  001668  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  3517  00166A  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  3518  00166C  EC54  F016         	call	___wmul	;wreg free
  3519  001670  0E50               	movlw	low __npowers_
  3520  001672  0100               	movlb	0	; () banked
  3521  001674  256E               	addwf	?___wmul& (0+255),w,b
  3522  001676  6EF6               	movwf	tblptrl,c
  3523  001678  0E08               	movlw	high __npowers_
  3524  00167A  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  3525  00167C  6EF7               	movwf	tblptrh,c
  3526  00167E                     	if	0	;There are less than 3 active tblptr bytes
  3527  00167E                     	endif
  3528  00167E  0009               	tblrd		*+
  3529  001680  CFF5 F077          	movff	tablat,___ftmul@f2
  3530  001684  0009               	tblrd		*+
  3531  001686  CFF5 F078          	movff	tablat,___ftmul@f2+1
  3532  00168A  000A               	tblrd		*-
  3533  00168C  CFF5 F079          	movff	tablat,___ftmul@f2+2
  3534  001690  0E00               	movlw	0
  3535  001692  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  3536  001694  0E64               	movlw	100
  3537  001696  6F68               	movwf	___awdiv@divisor& (0+255),b
  3538  001698  C08C  F066         	movff	fround@prec,___awdiv@dividend
  3539  00169C  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  3540  00169E  ECAE  F014         	call	___awdiv	;wreg free
  3541  0016A2  0E12               	movlw	18
  3542  0016A4  0100               	movlb	0	; () banked
  3543  0016A6  2566               	addwf	?___awdiv& (0+255),w,b
  3544  0016A8  6F6E               	movwf	___wmul@multiplier& (0+255),b
  3545  0016AA  0E00               	movlw	0
  3546  0016AC  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  3547  0016AE  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  3548  0016B0  0E00               	movlw	0
  3549  0016B2  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3550  0016B4  0E03               	movlw	3
  3551  0016B6  6F70               	movwf	___wmul@multiplicand& (0+255),b
  3552  0016B8  EC54  F016         	call	___wmul	;wreg free
  3553  0016BC  0E50               	movlw	low __npowers_
  3554  0016BE  0100               	movlb	0	; () banked
  3555  0016C0  256E               	addwf	?___wmul& (0+255),w,b
  3556  0016C2  6EF6               	movwf	tblptrl,c
  3557  0016C4  0E08               	movlw	high __npowers_
  3558  0016C6  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  3559  0016C8  6EF7               	movwf	tblptrh,c
  3560  0016CA                     	if	0	;There are less than 3 active tblptr bytes
  3561  0016CA                     	endif
  3562  0016CA  0009               	tblrd		*+
  3563  0016CC  CFF5 F074          	movff	tablat,___ftmul@f1
  3564  0016D0  0009               	tblrd		*+
  3565  0016D2  CFF5 F075          	movff	tablat,___ftmul@f1+1
  3566  0016D6  000A               	tblrd		*-
  3567  0016D8  CFF5 F076          	movff	tablat,___ftmul@f1+2
  3568  0016DC  ECDA  F011         	call	___ftmul	;wreg free
  3569  0016E0  C074  F089         	movff	?___ftmul,_fround$1332
  3570  0016E4  C075  F08A         	movff	?___ftmul+1,_fround$1332+1
  3571  0016E8  C076  F08B         	movff	?___ftmul+2,_fround$1332+2
  3572                           
  3573                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3574  0016EC  0E00               	movlw	0
  3575  0016EE  0100               	movlb	0	; () banked
  3576  0016F0  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3577  0016F2  0E03               	movlw	3
  3578  0016F4  6F70               	movwf	___wmul@multiplicand& (0+255),b
  3579  0016F6  0E00               	movlw	0
  3580  0016F8  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  3581  0016FA  0E0A               	movlw	10
  3582  0016FC  6F62               	movwf	___awmod@divisor& (0+255),b
  3583  0016FE  C08C  F060         	movff	fround@prec,___awmod@dividend
  3584  001702  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  3585  001704  EC33  F015         	call	___awmod	;wreg free
  3586  001708  C060  F06E         	movff	?___awmod,___wmul@multiplier
  3587  00170C  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  3588  001710  EC54  F016         	call	___wmul	;wreg free
  3589  001714  0E50               	movlw	low __npowers_
  3590  001716  0100               	movlb	0	; () banked
  3591  001718  256E               	addwf	?___wmul& (0+255),w,b
  3592  00171A  6EF6               	movwf	tblptrl,c
  3593  00171C  0E08               	movlw	high __npowers_
  3594  00171E  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  3595  001720  6EF7               	movwf	tblptrh,c
  3596  001722                     	if	0	;There are less than 3 active tblptr bytes
  3597  001722                     	endif
  3598  001722  0009               	tblrd		*+
  3599  001724  CFF5 F077          	movff	tablat,___ftmul@f2
  3600  001728  0009               	tblrd		*+
  3601  00172A  CFF5 F078          	movff	tablat,___ftmul@f2+1
  3602  00172E  000A               	tblrd		*-
  3603  001730  CFF5 F079          	movff	tablat,___ftmul@f2+2
  3604  001734  C089  F074         	movff	_fround$1332,___ftmul@f1
  3605  001738  C08A  F075         	movff	_fround$1332+1,___ftmul@f1+1
  3606  00173C  C08B  F076         	movff	_fround$1332+2,___ftmul@f1+2
  3607  001740  ECDA  F011         	call	___ftmul	;wreg free
  3608  001744  C074  F086         	movff	?___ftmul,_fround$1333
  3609  001748  C075  F087         	movff	?___ftmul+1,_fround$1333+1
  3610  00174C  C076  F088         	movff	?___ftmul+2,_fround$1333+2
  3611                           
  3612                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3613  001750  C086  F074         	movff	_fround$1333,___ftmul@f1
  3614  001754  C087  F075         	movff	_fround$1333+1,___ftmul@f1+1
  3615  001758  C088  F076         	movff	_fround$1333+2,___ftmul@f1+2
  3616  00175C  0E00               	movlw	0
  3617  00175E  0100               	movlb	0	; () banked
  3618  001760  6F77               	movwf	___ftmul@f2& (0+255),b
  3619  001762  0E00               	movlw	0
  3620  001764  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  3621  001766  0E3F               	movlw	63
  3622  001768  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  3623  00176A  ECDA  F011         	call	___ftmul	;wreg free
  3624  00176E  C074  F083         	movff	?___ftmul,?_fround
  3625  001772  C075  F084         	movff	?___ftmul+1,?_fround+1
  3626  001776  C076  F085         	movff	?___ftmul+2,?_fround+2
  3627  00177A  0012               	return	
  3628  00177C                     l137:
  3629                           
  3630                           ;doprnt.c: 415: else if(prec > 10)
  3631  00177C  0E0A               	movlw	10
  3632  00177E  0100               	movlb	0	; () banked
  3633  001780  658C               	cpfsgt	fround@prec& (0+255),b
  3634  001782  D067               	goto	l140
  3635                           
  3636                           ; BSR set to: 0
  3637                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3638  001784  0E00               	movlw	0
  3639  001786  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3640  001788  0E03               	movlw	3
  3641  00178A  6F70               	movwf	___wmul@multiplicand& (0+255),b
  3642  00178C  0E00               	movlw	0
  3643  00178E  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  3644  001790  0E0A               	movlw	10
  3645  001792  6F62               	movwf	___awmod@divisor& (0+255),b
  3646  001794  C08C  F060         	movff	fround@prec,___awmod@dividend
  3647  001798  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  3648  00179A  EC33  F015         	call	___awmod	;wreg free
  3649  00179E  C060  F06E         	movff	?___awmod,___wmul@multiplier
  3650  0017A2  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  3651  0017A6  EC54  F016         	call	___wmul	;wreg free
  3652  0017AA  0E50               	movlw	low __npowers_
  3653  0017AC  0100               	movlb	0	; () banked
  3654  0017AE  256E               	addwf	?___wmul& (0+255),w,b
  3655  0017B0  6EF6               	movwf	tblptrl,c
  3656  0017B2  0E08               	movlw	high __npowers_
  3657  0017B4  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  3658  0017B6  6EF7               	movwf	tblptrh,c
  3659  0017B8                     	if	0	;There are less than 3 active tblptr bytes
  3660  0017B8                     	endif
  3661  0017B8  0009               	tblrd		*+
  3662  0017BA  CFF5 F077          	movff	tablat,___ftmul@f2
  3663  0017BE  0009               	tblrd		*+
  3664  0017C0  CFF5 F078          	movff	tablat,___ftmul@f2+1
  3665  0017C4  000A               	tblrd		*-
  3666  0017C6  CFF5 F079          	movff	tablat,___ftmul@f2+2
  3667  0017CA  0E00               	movlw	0
  3668  0017CC  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  3669  0017CE  0E0A               	movlw	10
  3670  0017D0  6F68               	movwf	___awdiv@divisor& (0+255),b
  3671  0017D2  C08C  F066         	movff	fround@prec,___awdiv@dividend
  3672  0017D6  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  3673  0017D8  ECAE  F014         	call	___awdiv	;wreg free
  3674  0017DC  0E09               	movlw	9
  3675  0017DE  0100               	movlb	0	; () banked
  3676  0017E0  2566               	addwf	?___awdiv& (0+255),w,b
  3677  0017E2  6F6E               	movwf	___wmul@multiplier& (0+255),b
  3678  0017E4  0E00               	movlw	0
  3679  0017E6  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  3680  0017E8  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  3681  0017EA  0E00               	movlw	0
  3682  0017EC  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3683  0017EE  0E03               	movlw	3
  3684  0017F0  6F70               	movwf	___wmul@multiplicand& (0+255),b
  3685  0017F2  EC54  F016         	call	___wmul	;wreg free
  3686  0017F6  0E50               	movlw	low __npowers_
  3687  0017F8  0100               	movlb	0	; () banked
  3688  0017FA  256E               	addwf	?___wmul& (0+255),w,b
  3689  0017FC  6EF6               	movwf	tblptrl,c
  3690  0017FE  0E08               	movlw	high __npowers_
  3691  001800  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  3692  001802  6EF7               	movwf	tblptrh,c
  3693  001804                     	if	0	;There are less than 3 active tblptr bytes
  3694  001804                     	endif
  3695  001804  0009               	tblrd		*+
  3696  001806  CFF5 F074          	movff	tablat,___ftmul@f1
  3697  00180A  0009               	tblrd		*+
  3698  00180C  CFF5 F075          	movff	tablat,___ftmul@f1+1
  3699  001810  000A               	tblrd		*-
  3700  001812  CFF5 F076          	movff	tablat,___ftmul@f1+2
  3701  001816  ECDA  F011         	call	___ftmul	;wreg free
  3702  00181A  C074  F089         	movff	?___ftmul,_fround$1332
  3703  00181E  C075  F08A         	movff	?___ftmul+1,_fround$1332+1
  3704  001822  C076  F08B         	movff	?___ftmul+2,_fround$1332+2
  3705                           
  3706                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3707  001826  C089  F074         	movff	_fround$1332,___ftmul@f1
  3708  00182A  C08A  F075         	movff	_fround$1332+1,___ftmul@f1+1
  3709  00182E  C08B  F076         	movff	_fround$1332+2,___ftmul@f1+2
  3710  001832  0E00               	movlw	0
  3711  001834  0100               	movlb	0	; () banked
  3712  001836  6F77               	movwf	___ftmul@f2& (0+255),b
  3713  001838  0E00               	movlw	0
  3714  00183A  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  3715  00183C  0E3F               	movlw	63
  3716  00183E  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  3717  001840  ECDA  F011         	call	___ftmul	;wreg free
  3718  001844  C074  F083         	movff	?___ftmul,?_fround
  3719  001848  C075  F084         	movff	?___ftmul+1,?_fround+1
  3720  00184C  C076  F085         	movff	?___ftmul+2,?_fround+2
  3721  001850  0012               	return	
  3722  001852                     l140:
  3723                           
  3724                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3725  001852  0100               	movlb	0	; () banked
  3726  001854  518C               	movf	fround@prec& (0+255),w,b
  3727  001856  0D03               	mullw	3
  3728  001858  0E50               	movlw	low __npowers_
  3729  00185A  24F3               	addwf	prodl,w,c
  3730  00185C  6EF6               	movwf	tblptrl,c
  3731  00185E  0E08               	movlw	high __npowers_
  3732  001860  20F4               	addwfc	prodh,w,c
  3733  001862  6EF7               	movwf	tblptrh,c
  3734  001864                     	if	0	;There are less than 3 active tblptr bytes
  3735  001864                     	endif
  3736  001864  0009               	tblrd		*+
  3737  001866  CFF5 F074          	movff	tablat,___ftmul@f1
  3738  00186A  0009               	tblrd		*+
  3739  00186C  CFF5 F075          	movff	tablat,___ftmul@f1+1
  3740  001870  000A               	tblrd		*-
  3741  001872  CFF5 F076          	movff	tablat,___ftmul@f1+2
  3742  001876  0E00               	movlw	0
  3743  001878  6F77               	movwf	___ftmul@f2& (0+255),b
  3744  00187A  0E00               	movlw	0
  3745  00187C  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  3746  00187E  0E3F               	movlw	63
  3747  001880  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  3748  001882  ECDA  F011         	call	___ftmul	;wreg free
  3749  001886  C074  F083         	movff	?___ftmul,?_fround
  3750  00188A  C075  F084         	movff	?___ftmul+1,?_fround+1
  3751  00188E  C076  F085         	movff	?___ftmul+2,?_fround+2
  3752  001892  0012               	return	
  3753  001894                     __end_of_fround:
  3754                           	opt stack 0
  3755                           tblptru	equ	0xFF8
  3756                           tblptrh	equ	0xFF7
  3757                           tblptrl	equ	0xFF6
  3758                           tablat	equ	0xFF5
  3759                           prodh	equ	0xFF4
  3760                           prodl	equ	0xFF3
  3761                           postinc0	equ	0xFEE
  3762                           wreg	equ	0xFE8
  3763                           indf2	equ	0xFDF
  3764                           postinc2	equ	0xFDE
  3765                           postdec2	equ	0xFDD
  3766                           fsr2h	equ	0xFDA
  3767                           fsr2l	equ	0xFD9
  3768                           status	equ	0xFD8
  3769                           
  3770 ;; *************** function ___wmul *****************
  3771 ;; Defined at:
  3772 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  3773 ;; Parameters:    Size  Location     Type
  3774 ;;  multiplier      2   14[BANK0 ] unsigned int 
  3775 ;;  multiplicand    2   16[BANK0 ] unsigned int 
  3776 ;; Auto vars:     Size  Location     Type
  3777 ;;  product         2   18[BANK0 ] unsigned int 
  3778 ;; Return value:  Size  Location     Type
  3779 ;;                  2   14[BANK0 ] unsigned int 
  3780 ;; Registers used:
  3781 ;;		wreg, status,2, status,0, prodl, prodh
  3782 ;; Tracked objects:
  3783 ;;		On entry : 0/0
  3784 ;;		On exit  : 0/0
  3785 ;;		Unchanged: 0/0
  3786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3787 ;;      Params:         0       4       0       0       0       0       0       0       0
  3788 ;;      Locals:         0       2       0       0       0       0       0       0       0
  3789 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3790 ;;      Totals:         0       6       0       0       0       0       0       0       0
  3791 ;;Total ram usage:        6 bytes
  3792 ;; Hardware stack levels used:    1
  3793 ;; Hardware stack levels required when called:    3
  3794 ;; This function calls:
  3795 ;;		Nothing
  3796 ;; This function is called by:
  3797 ;;		_fround
  3798 ;;		_scale
  3799 ;;		_sprintf
  3800 ;; This function uses a non-reentrant model
  3801 ;;
  3802                           
  3803                           	psect	text5
  3804  002CA8                     __ptext5:
  3805                           	opt stack 0
  3806  002CA8                     ___wmul:
  3807                           	opt stack 25
  3808                           
  3809                           ;incstack = 0
  3810  002CA8  0100               	movlb	0	; () banked
  3811  002CAA  516E               	movf	___wmul@multiplier& (0+255),w,b
  3812  002CAC  0370               	mulwf	___wmul@multiplicand& (0+255),b
  3813  002CAE  CFF3 F072          	movff	prodl,___wmul@product
  3814  002CB2  CFF4 F073          	movff	prodh,___wmul@product+1
  3815  002CB6  516E               	movf	___wmul@multiplier& (0+255),w,b
  3816  002CB8  0371               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  3817  002CBA  50F3               	movf	prodl,w,c
  3818  002CBC  2773               	addwf	(___wmul@product+1)& (0+255),f,b
  3819  002CBE  516F               	movf	(___wmul@multiplier+1)& (0+255),w,b
  3820  002CC0  0370               	mulwf	___wmul@multiplicand& (0+255),b
  3821  002CC2  50F3               	movf	prodl,w,c
  3822  002CC4  2773               	addwf	(___wmul@product+1)& (0+255),f,b
  3823                           
  3824                           ; BSR set to: 0
  3825  002CC6  C072  F06E         	movff	___wmul@product,?___wmul
  3826  002CCA  C073  F06F         	movff	___wmul@product+1,?___wmul+1
  3827  002CCE  0012               	return	
  3828  002CD0                     __end_of___wmul:
  3829                           	opt stack 0
  3830                           tblptru	equ	0xFF8
  3831                           tblptrh	equ	0xFF7
  3832                           tblptrl	equ	0xFF6
  3833                           tablat	equ	0xFF5
  3834                           prodh	equ	0xFF4
  3835                           prodl	equ	0xFF3
  3836                           postinc0	equ	0xFEE
  3837                           wreg	equ	0xFE8
  3838                           indf2	equ	0xFDF
  3839                           postinc2	equ	0xFDE
  3840                           postdec2	equ	0xFDD
  3841                           fsr2h	equ	0xFDA
  3842                           fsr2l	equ	0xFD9
  3843                           status	equ	0xFD8
  3844                           
  3845 ;; *************** function ___ftmul *****************
  3846 ;; Defined at:
  3847 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  3848 ;; Parameters:    Size  Location     Type
  3849 ;;  f1              3   20[BANK0 ] float 
  3850 ;;  f2              3   23[BANK0 ] float 
  3851 ;; Auto vars:     Size  Location     Type
  3852 ;;  f3_as_produc    3   30[BANK0 ] unsigned um
  3853 ;;  sign            1   34[BANK0 ] unsigned char 
  3854 ;;  cntr            1   33[BANK0 ] unsigned char 
  3855 ;;  exp             1   29[BANK0 ] unsigned char 
  3856 ;; Return value:  Size  Location     Type
  3857 ;;                  3   20[BANK0 ] float 
  3858 ;; Registers used:
  3859 ;;		wreg, status,2, status,0, cstack
  3860 ;; Tracked objects:
  3861 ;;		On entry : 0/0
  3862 ;;		On exit  : 0/0
  3863 ;;		Unchanged: 0/0
  3864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3865 ;;      Params:         0       6       0       0       0       0       0       0       0
  3866 ;;      Locals:         0       6       0       0       0       0       0       0       0
  3867 ;;      Temps:          0       3       0       0       0       0       0       0       0
  3868 ;;      Totals:         0      15       0       0       0       0       0       0       0
  3869 ;;Total ram usage:       15 bytes
  3870 ;; Hardware stack levels used:    1
  3871 ;; Hardware stack levels required when called:    4
  3872 ;; This function calls:
  3873 ;;		___ftpack
  3874 ;; This function is called by:
  3875 ;;		_main
  3876 ;;		_fround
  3877 ;;		_scale
  3878 ;;		_sprintf
  3879 ;; This function uses a non-reentrant model
  3880 ;;
  3881                           
  3882                           	psect	text6
  3883  0023B4                     __ptext6:
  3884                           	opt stack 0
  3885  0023B4                     ___ftmul:
  3886                           	opt stack 24
  3887                           
  3888                           ; BSR set to: 0
  3889                           ;incstack = 0
  3890  0023B4  C076  F07A         	movff	___ftmul@f1+2,??___ftmul
  3891  0023B8  0100               	movlb	0	; () banked
  3892  0023BA  6B7B               	clrf	(??___ftmul+1)& (0+255),b
  3893  0023BC  6B7C               	clrf	(??___ftmul+2)& (0+255),b
  3894  0023BE  3575               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  3895  0023C0  377A               	rlcf	??___ftmul& (0+255),f,b
  3896  0023C2  E301               	bnc	u2091
  3897  0023C4  817B               	bsf	(??___ftmul+1)& (0+255),0,b
  3898  0023C6                     u2091:
  3899  0023C6  517A               	movf	??___ftmul& (0+255),w,b
  3900  0023C8  6F7D               	movwf	___ftmul@exp& (0+255),b
  3901  0023CA  517D               	movf	___ftmul@exp& (0+255),w,b
  3902  0023CC  A4D8               	btfss	status,2,c
  3903  0023CE  D007               	goto	l574
  3904                           
  3905                           ; BSR set to: 0
  3906  0023D0  0E00               	movlw	0
  3907  0023D2  6F74               	movwf	?___ftmul& (0+255),b
  3908  0023D4  0E00               	movlw	0
  3909  0023D6  6F75               	movwf	(?___ftmul+1)& (0+255),b
  3910  0023D8  0E00               	movlw	0
  3911  0023DA  6F76               	movwf	(?___ftmul+2)& (0+255),b
  3912                           
  3913                           ; BSR set to: 0
  3914  0023DC  0012               	return	
  3915  0023DE                     l574:
  3916                           
  3917                           ; BSR set to: 0
  3918                           
  3919                           ; BSR set to: 0
  3920  0023DE  C079  F07A         	movff	___ftmul@f2+2,??___ftmul
  3921  0023E2  6B7B               	clrf	(??___ftmul+1)& (0+255),b
  3922  0023E4  6B7C               	clrf	(??___ftmul+2)& (0+255),b
  3923  0023E6  3578               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  3924  0023E8  377A               	rlcf	??___ftmul& (0+255),f,b
  3925  0023EA  E301               	bnc	u2111
  3926  0023EC  817B               	bsf	(??___ftmul+1)& (0+255),0,b
  3927  0023EE                     u2111:
  3928  0023EE  517A               	movf	??___ftmul& (0+255),w,b
  3929  0023F0  6F82               	movwf	___ftmul@sign& (0+255),b
  3930  0023F2  5182               	movf	___ftmul@sign& (0+255),w,b
  3931  0023F4  A4D8               	btfss	status,2,c
  3932  0023F6  D007               	goto	l576
  3933                           
  3934                           ; BSR set to: 0
  3935  0023F8  0E00               	movlw	0
  3936  0023FA  6F74               	movwf	?___ftmul& (0+255),b
  3937  0023FC  0E00               	movlw	0
  3938  0023FE  6F75               	movwf	(?___ftmul+1)& (0+255),b
  3939  002400  0E00               	movlw	0
  3940  002402  6F76               	movwf	(?___ftmul+2)& (0+255),b
  3941                           
  3942                           ; BSR set to: 0
  3943  002404  0012               	return	
  3944  002406                     l576:
  3945                           
  3946                           ; BSR set to: 0
  3947                           
  3948                           ; BSR set to: 0
  3949  002406  5182               	movf	___ftmul@sign& (0+255),w,b
  3950  002408  0F7B               	addlw	123
  3951  00240A  277D               	addwf	___ftmul@exp& (0+255),f,b
  3952                           
  3953                           ; BSR set to: 0
  3954  00240C  C076  F082         	movff	___ftmul@f1+2,___ftmul@sign
  3955  002410  5179               	movf	(___ftmul@f2+2)& (0+255),w,b
  3956  002412  1B82               	xorwf	___ftmul@sign& (0+255),f,b
  3957  002414  0E80               	movlw	128
  3958  002416  1782               	andwf	___ftmul@sign& (0+255),f,b
  3959                           
  3960                           ; BSR set to: 0
  3961  002418  8F75               	bsf	(___ftmul@f1+1)& (0+255),7,b
  3962                           
  3963                           ; BSR set to: 0
  3964  00241A  8F78               	bsf	(___ftmul@f2+1)& (0+255),7,b
  3965                           
  3966                           ; BSR set to: 0
  3967  00241C  0EFF               	movlw	255
  3968  00241E  1777               	andwf	___ftmul@f2& (0+255),f,b
  3969  002420  0EFF               	movlw	255
  3970  002422  1778               	andwf	(___ftmul@f2+1)& (0+255),f,b
  3971  002424  0E00               	movlw	0
  3972  002426  1779               	andwf	(___ftmul@f2+2)& (0+255),f,b
  3973                           
  3974                           ; BSR set to: 0
  3975  002428  0E00               	movlw	0
  3976  00242A  6F7E               	movwf	___ftmul@f3_as_product& (0+255),b
  3977  00242C  0E00               	movlw	0
  3978  00242E  6F7F               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  3979  002430  0E00               	movlw	0
  3980  002432  6F80               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  3981                           
  3982                           ; BSR set to: 0
  3983  002434  0E07               	movlw	7
  3984  002436  6F81               	movwf	___ftmul@cntr& (0+255),b
  3985  002438                     
  3986                           ; BSR set to: 0
  3987                           
  3988                           ; BSR set to: 0
  3989  002438  A174               	btfss	___ftmul@f1& (0+255),0,b
  3990  00243A  D006               	goto	l578
  3991                           
  3992                           ; BSR set to: 0
  3993  00243C  5177               	movf	___ftmul@f2& (0+255),w,b
  3994  00243E  277E               	addwf	___ftmul@f3_as_product& (0+255),f,b
  3995  002440  5178               	movf	(___ftmul@f2+1)& (0+255),w,b
  3996  002442  237F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  3997  002444  5179               	movf	(___ftmul@f2+2)& (0+255),w,b
  3998  002446  2380               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  3999  002448                     l578:
  4000                           
  4001                           ; BSR set to: 0
  4002                           
  4003                           ; BSR set to: 0
  4004  002448  90D8               	bcf	status,0,c
  4005  00244A  3376               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  4006  00244C  3375               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  4007  00244E  3374               	rrcf	___ftmul@f1& (0+255),f,b
  4008  002450  90D8               	bcf	status,0,c
  4009  002452  3777               	rlcf	___ftmul@f2& (0+255),f,b
  4010  002454  3778               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  4011  002456  3779               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  4012                           
  4013                           ; BSR set to: 0
  4014  002458  2F81               	decfsz	___ftmul@cntr& (0+255),f,b
  4015  00245A  D7EE               	goto	l577
  4016                           
  4017                           ; BSR set to: 0
  4018                           
  4019                           ; BSR set to: 0
  4020  00245C  0E09               	movlw	9
  4021  00245E  6F81               	movwf	___ftmul@cntr& (0+255),b
  4022  002460                     
  4023                           ; BSR set to: 0
  4024                           
  4025                           ; BSR set to: 0
  4026  002460  A174               	btfss	___ftmul@f1& (0+255),0,b
  4027  002462  D006               	goto	l581
  4028                           
  4029                           ; BSR set to: 0
  4030  002464  5177               	movf	___ftmul@f2& (0+255),w,b
  4031  002466  277E               	addwf	___ftmul@f3_as_product& (0+255),f,b
  4032  002468  5178               	movf	(___ftmul@f2+1)& (0+255),w,b
  4033  00246A  237F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  4034  00246C  5179               	movf	(___ftmul@f2+2)& (0+255),w,b
  4035  00246E  2380               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  4036  002470                     l581:
  4037                           
  4038                           ; BSR set to: 0
  4039                           
  4040                           ; BSR set to: 0
  4041  002470  90D8               	bcf	status,0,c
  4042  002472  3376               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  4043  002474  3375               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  4044  002476  3374               	rrcf	___ftmul@f1& (0+255),f,b
  4045  002478  90D8               	bcf	status,0,c
  4046  00247A  3380               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  4047  00247C  337F               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  4048  00247E  337E               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  4049                           
  4050                           ; BSR set to: 0
  4051  002480  2F81               	decfsz	___ftmul@cntr& (0+255),f,b
  4052  002482  D7EE               	goto	l580
  4053                           
  4054                           ; BSR set to: 0
  4055                           
  4056                           ; BSR set to: 0
  4057  002484  C07E  F060         	movff	___ftmul@f3_as_product,___ftpack@arg
  4058  002488  C07F  F061         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4059  00248C  C080  F062         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4060  002490  C07D  F063         	movff	___ftmul@exp,___ftpack@exp
  4061  002494  C082  F064         	movff	___ftmul@sign,___ftpack@sign
  4062  002498  ECB6  F013         	call	___ftpack	;wreg free
  4063  00249C  C060  F074         	movff	?___ftpack,?___ftmul
  4064  0024A0  C061  F075         	movff	?___ftpack+1,?___ftmul+1
  4065  0024A4  C062  F076         	movff	?___ftpack+2,?___ftmul+2
  4066  0024A8  0012               	return	
  4067  0024AA                     __end_of___ftmul:
  4068                           	opt stack 0
  4069                           tblptru	equ	0xFF8
  4070                           tblptrh	equ	0xFF7
  4071                           tblptrl	equ	0xFF6
  4072                           tablat	equ	0xFF5
  4073                           prodh	equ	0xFF4
  4074                           prodl	equ	0xFF3
  4075                           postinc0	equ	0xFEE
  4076                           wreg	equ	0xFE8
  4077                           indf2	equ	0xFDF
  4078                           postinc2	equ	0xFDE
  4079                           postdec2	equ	0xFDD
  4080                           fsr2h	equ	0xFDA
  4081                           fsr2l	equ	0xFD9
  4082                           status	equ	0xFD8
  4083                           
  4084 ;; *************** function ___awmod *****************
  4085 ;; Defined at:
  4086 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  4087 ;; Parameters:    Size  Location     Type
  4088 ;;  dividend        2    0[BANK0 ] int 
  4089 ;;  divisor         2    2[BANK0 ] int 
  4090 ;; Auto vars:     Size  Location     Type
  4091 ;;  sign            1    5[BANK0 ] unsigned char 
  4092 ;;  counter         1    4[BANK0 ] unsigned char 
  4093 ;; Return value:  Size  Location     Type
  4094 ;;                  2    0[BANK0 ] int 
  4095 ;; Registers used:
  4096 ;;		wreg, status,2, status,0
  4097 ;; Tracked objects:
  4098 ;;		On entry : 0/0
  4099 ;;		On exit  : 0/0
  4100 ;;		Unchanged: 0/0
  4101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4102 ;;      Params:         0       4       0       0       0       0       0       0       0
  4103 ;;      Locals:         0       2       0       0       0       0       0       0       0
  4104 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4105 ;;      Totals:         0       6       0       0       0       0       0       0       0
  4106 ;;Total ram usage:        6 bytes
  4107 ;; Hardware stack levels used:    1
  4108 ;; Hardware stack levels required when called:    3
  4109 ;; This function calls:
  4110 ;;		Nothing
  4111 ;; This function is called by:
  4112 ;;		_fround
  4113 ;;		_scale
  4114 ;; This function uses a non-reentrant model
  4115 ;;
  4116                           
  4117                           	psect	text7
  4118  002A66                     __ptext7:
  4119                           	opt stack 0
  4120  002A66                     ___awmod:
  4121                           	opt stack 25
  4122                           
  4123                           ;incstack = 0
  4124  002A66  0E00               	movlw	0
  4125  002A68  0100               	movlb	0	; () banked
  4126  002A6A  6F65               	movwf	___awmod@sign& (0+255),b
  4127                           
  4128                           ; BSR set to: 0
  4129  002A6C  AF61               	btfss	(___awmod@dividend+1)& (0+255),7,b
  4130  002A6E  D006               	goto	l427
  4131                           
  4132                           ; BSR set to: 0
  4133  002A70  6D60               	negf	___awmod@dividend& (0+255),b
  4134  002A72  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  4135  002A74  B0D8               	btfsc	status,0,c
  4136  002A76  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  4137                           
  4138                           ; BSR set to: 0
  4139  002A78  0E01               	movlw	1
  4140  002A7A  6F65               	movwf	___awmod@sign& (0+255),b
  4141  002A7C                     l427:
  4142                           
  4143                           ; BSR set to: 0
  4144                           
  4145                           ; BSR set to: 0
  4146  002A7C  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
  4147  002A7E  D004               	goto	l428
  4148                           
  4149                           ; BSR set to: 0
  4150  002A80  6D62               	negf	___awmod@divisor& (0+255),b
  4151  002A82  1F63               	comf	(___awmod@divisor+1)& (0+255),f,b
  4152  002A84  B0D8               	btfsc	status,0,c
  4153  002A86  2B63               	incf	(___awmod@divisor+1)& (0+255),f,b
  4154  002A88                     l428:
  4155                           
  4156                           ; BSR set to: 0
  4157                           
  4158                           ; BSR set to: 0
  4159  002A88  5162               	movf	___awmod@divisor& (0+255),w,b
  4160  002A8A  1163               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  4161  002A8C  B4D8               	btfsc	status,2,c
  4162  002A8E  D018               	goto	l435
  4163                           
  4164                           ; BSR set to: 0
  4165  002A90  0E01               	movlw	1
  4166  002A92  6F64               	movwf	___awmod@counter& (0+255),b
  4167  002A94  D004               	goto	l430
  4168  002A96                     
  4169                           ; BSR set to: 0
  4170                           
  4171                           ; BSR set to: 0
  4172  002A96  90D8               	bcf	status,0,c
  4173  002A98  3762               	rlcf	___awmod@divisor& (0+255),f,b
  4174  002A9A  3763               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  4175  002A9C  2B64               	incf	___awmod@counter& (0+255),f,b
  4176  002A9E                     l430:
  4177                           
  4178                           ; BSR set to: 0
  4179                           
  4180                           ; BSR set to: 0
  4181  002A9E  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
  4182  002AA0  D7FA               	goto	l431
  4183  002AA2                     u2240:
  4184                           
  4185                           ; BSR set to: 0
  4186                           
  4187                           ; BSR set to: 0
  4188                           
  4189                           ; BSR set to: 0
  4190  002AA2  5162               	movf	___awmod@divisor& (0+255),w,b
  4191  002AA4  5D60               	subwf	___awmod@dividend& (0+255),w,b
  4192  002AA6  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  4193  002AA8  5961               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  4194  002AAA  A0D8               	btfss	status,0,c
  4195  002AAC  D004               	goto	l434
  4196                           
  4197                           ; BSR set to: 0
  4198  002AAE  5162               	movf	___awmod@divisor& (0+255),w,b
  4199  002AB0  5F60               	subwf	___awmod@dividend& (0+255),f,b
  4200  002AB2  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  4201  002AB4  5B61               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  4202  002AB6                     l434:
  4203                           
  4204                           ; BSR set to: 0
  4205                           
  4206                           ; BSR set to: 0
  4207  002AB6  90D8               	bcf	status,0,c
  4208  002AB8  3363               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  4209  002ABA  3362               	rrcf	___awmod@divisor& (0+255),f,b
  4210                           
  4211                           ; BSR set to: 0
  4212  002ABC  2F64               	decfsz	___awmod@counter& (0+255),f,b
  4213  002ABE  D7F1               	goto	u2240
  4214  002AC0                     l435:
  4215                           
  4216                           ; BSR set to: 0
  4217                           
  4218                           ; BSR set to: 0
  4219                           
  4220                           ; BSR set to: 0
  4221  002AC0  5165               	movf	___awmod@sign& (0+255),w,b
  4222  002AC2  B4D8               	btfsc	status,2,c
  4223  002AC4  D004               	goto	l436
  4224                           
  4225                           ; BSR set to: 0
  4226  002AC6  6D60               	negf	___awmod@dividend& (0+255),b
  4227  002AC8  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  4228  002ACA  B0D8               	btfsc	status,0,c
  4229  002ACC  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  4230  002ACE                     l436:
  4231                           
  4232                           ; BSR set to: 0
  4233                           
  4234                           ; BSR set to: 0
  4235  002ACE  C060  F060         	movff	___awmod@dividend,?___awmod
  4236  002AD2  C061  F061         	movff	___awmod@dividend+1,?___awmod+1
  4237  002AD6  0012               	return	
  4238  002AD8                     __end_of___awmod:
  4239                           	opt stack 0
  4240                           tblptru	equ	0xFF8
  4241                           tblptrh	equ	0xFF7
  4242                           tblptrl	equ	0xFF6
  4243                           tablat	equ	0xFF5
  4244                           prodh	equ	0xFF4
  4245                           prodl	equ	0xFF3
  4246                           postinc0	equ	0xFEE
  4247                           wreg	equ	0xFE8
  4248                           indf2	equ	0xFDF
  4249                           postinc2	equ	0xFDE
  4250                           postdec2	equ	0xFDD
  4251                           fsr2h	equ	0xFDA
  4252                           fsr2l	equ	0xFD9
  4253                           status	equ	0xFD8
  4254                           
  4255 ;; *************** function ___awdiv *****************
  4256 ;; Defined at:
  4257 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  4258 ;; Parameters:    Size  Location     Type
  4259 ;;  dividend        2    6[BANK0 ] int 
  4260 ;;  divisor         2    8[BANK0 ] int 
  4261 ;; Auto vars:     Size  Location     Type
  4262 ;;  quotient        2   12[BANK0 ] int 
  4263 ;;  sign            1   11[BANK0 ] unsigned char 
  4264 ;;  counter         1   10[BANK0 ] unsigned char 
  4265 ;; Return value:  Size  Location     Type
  4266 ;;                  2    6[BANK0 ] int 
  4267 ;; Registers used:
  4268 ;;		wreg, status,2, status,0
  4269 ;; Tracked objects:
  4270 ;;		On entry : 0/0
  4271 ;;		On exit  : 0/0
  4272 ;;		Unchanged: 0/0
  4273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4274 ;;      Params:         0       4       0       0       0       0       0       0       0
  4275 ;;      Locals:         0       4       0       0       0       0       0       0       0
  4276 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4277 ;;      Totals:         0       8       0       0       0       0       0       0       0
  4278 ;;Total ram usage:        8 bytes
  4279 ;; Hardware stack levels used:    1
  4280 ;; Hardware stack levels required when called:    3
  4281 ;; This function calls:
  4282 ;;		Nothing
  4283 ;; This function is called by:
  4284 ;;		_fround
  4285 ;;		_scale
  4286 ;;		_sprintf
  4287 ;; This function uses a non-reentrant model
  4288 ;;
  4289                           
  4290                           	psect	text8
  4291  00295C                     __ptext8:
  4292                           	opt stack 0
  4293  00295C                     ___awdiv:
  4294                           	opt stack 25
  4295                           
  4296                           ; BSR set to: 0
  4297                           ;incstack = 0
  4298  00295C  0E00               	movlw	0
  4299  00295E  0100               	movlb	0	; () banked
  4300  002960  6F6B               	movwf	___awdiv@sign& (0+255),b
  4301                           
  4302                           ; BSR set to: 0
  4303  002962  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  4304  002964  D006               	goto	l414
  4305                           
  4306                           ; BSR set to: 0
  4307  002966  6D68               	negf	___awdiv@divisor& (0+255),b
  4308  002968  1F69               	comf	(___awdiv@divisor+1)& (0+255),f,b
  4309  00296A  B0D8               	btfsc	status,0,c
  4310  00296C  2B69               	incf	(___awdiv@divisor+1)& (0+255),f,b
  4311                           
  4312                           ; BSR set to: 0
  4313  00296E  0E01               	movlw	1
  4314  002970  6F6B               	movwf	___awdiv@sign& (0+255),b
  4315  002972                     l414:
  4316                           
  4317                           ; BSR set to: 0
  4318                           
  4319                           ; BSR set to: 0
  4320  002972  AF67               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  4321  002974  D006               	goto	l415
  4322                           
  4323                           ; BSR set to: 0
  4324  002976  6D66               	negf	___awdiv@dividend& (0+255),b
  4325  002978  1F67               	comf	(___awdiv@dividend+1)& (0+255),f,b
  4326  00297A  B0D8               	btfsc	status,0,c
  4327  00297C  2B67               	incf	(___awdiv@dividend+1)& (0+255),f,b
  4328                           
  4329                           ; BSR set to: 0
  4330  00297E  0E01               	movlw	1
  4331  002980  1B6B               	xorwf	___awdiv@sign& (0+255),f,b
  4332  002982                     l415:
  4333                           
  4334                           ; BSR set to: 0
  4335                           
  4336                           ; BSR set to: 0
  4337  002982  0E00               	movlw	0
  4338  002984  6F6D               	movwf	(___awdiv@quotient+1)& (0+255),b
  4339  002986  0E00               	movlw	0
  4340  002988  6F6C               	movwf	___awdiv@quotient& (0+255),b
  4341                           
  4342                           ; BSR set to: 0
  4343  00298A  5168               	movf	___awdiv@divisor& (0+255),w,b
  4344  00298C  1169               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  4345  00298E  B4D8               	btfsc	status,2,c
  4346  002990  D01C               	goto	l422
  4347                           
  4348                           ; BSR set to: 0
  4349  002992  0E01               	movlw	1
  4350  002994  6F6A               	movwf	___awdiv@counter& (0+255),b
  4351  002996  D004               	goto	l417
  4352  002998                     
  4353                           ; BSR set to: 0
  4354                           
  4355                           ; BSR set to: 0
  4356  002998  90D8               	bcf	status,0,c
  4357  00299A  3768               	rlcf	___awdiv@divisor& (0+255),f,b
  4358  00299C  3769               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  4359  00299E  2B6A               	incf	___awdiv@counter& (0+255),f,b
  4360  0029A0                     l417:
  4361                           
  4362                           ; BSR set to: 0
  4363                           
  4364                           ; BSR set to: 0
  4365  0029A0  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  4366  0029A2  D7FA               	goto	l418
  4367  0029A4                     u2180:
  4368                           
  4369                           ; BSR set to: 0
  4370                           
  4371                           ; BSR set to: 0
  4372                           
  4373                           ; BSR set to: 0
  4374  0029A4  90D8               	bcf	status,0,c
  4375  0029A6  376C               	rlcf	___awdiv@quotient& (0+255),f,b
  4376  0029A8  376D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  4377                           
  4378                           ; BSR set to: 0
  4379  0029AA  5168               	movf	___awdiv@divisor& (0+255),w,b
  4380  0029AC  5D66               	subwf	___awdiv@dividend& (0+255),w,b
  4381  0029AE  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
  4382  0029B0  5967               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  4383  0029B2  A0D8               	btfss	status,0,c
  4384  0029B4  D005               	goto	l421
  4385                           
  4386                           ; BSR set to: 0
  4387  0029B6  5168               	movf	___awdiv@divisor& (0+255),w,b
  4388  0029B8  5F66               	subwf	___awdiv@dividend& (0+255),f,b
  4389  0029BA  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
  4390  0029BC  5B67               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  4391                           
  4392                           ; BSR set to: 0
  4393  0029BE  816C               	bsf	___awdiv@quotient& (0+255),0,b
  4394  0029C0                     l421:
  4395                           
  4396                           ; BSR set to: 0
  4397                           
  4398                           ; BSR set to: 0
  4399  0029C0  90D8               	bcf	status,0,c
  4400  0029C2  3369               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  4401  0029C4  3368               	rrcf	___awdiv@divisor& (0+255),f,b
  4402                           
  4403                           ; BSR set to: 0
  4404  0029C6  2F6A               	decfsz	___awdiv@counter& (0+255),f,b
  4405  0029C8  D7ED               	goto	u2180
  4406  0029CA                     l422:
  4407                           
  4408                           ; BSR set to: 0
  4409                           
  4410                           ; BSR set to: 0
  4411                           
  4412                           ; BSR set to: 0
  4413  0029CA  516B               	movf	___awdiv@sign& (0+255),w,b
  4414  0029CC  B4D8               	btfsc	status,2,c
  4415  0029CE  D004               	goto	l423
  4416                           
  4417                           ; BSR set to: 0
  4418  0029D0  6D6C               	negf	___awdiv@quotient& (0+255),b
  4419  0029D2  1F6D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  4420  0029D4  B0D8               	btfsc	status,0,c
  4421  0029D6  2B6D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  4422  0029D8                     l423:
  4423                           
  4424                           ; BSR set to: 0
  4425                           
  4426                           ; BSR set to: 0
  4427  0029D8  C06C  F066         	movff	___awdiv@quotient,?___awdiv
  4428  0029DC  C06D  F067         	movff	___awdiv@quotient+1,?___awdiv+1
  4429  0029E0  0012               	return	
  4430  0029E2                     __end_of___awdiv:
  4431                           	opt stack 0
  4432                           tblptru	equ	0xFF8
  4433                           tblptrh	equ	0xFF7
  4434                           tblptrl	equ	0xFF6
  4435                           tablat	equ	0xFF5
  4436                           prodh	equ	0xFF4
  4437                           prodl	equ	0xFF3
  4438                           postinc0	equ	0xFEE
  4439                           wreg	equ	0xFE8
  4440                           indf2	equ	0xFDF
  4441                           postinc2	equ	0xFDE
  4442                           postdec2	equ	0xFDD
  4443                           fsr2h	equ	0xFDA
  4444                           fsr2l	equ	0xFD9
  4445                           status	equ	0xFD8
  4446                           
  4447 ;; *************** function __tdiv_to_l_ *****************
  4448 ;; Defined at:
  4449 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdivl.c"
  4450 ;; Parameters:    Size  Location     Type
  4451 ;;  f1              3    0[BANK0 ] float 
  4452 ;;  f2              3    3[BANK0 ] float 
  4453 ;; Auto vars:     Size  Location     Type
  4454 ;;  quot            4    9[BANK0 ] unsigned long 
  4455 ;;  exp1            1   14[BANK0 ] unsigned char 
  4456 ;;  cntr            1   13[BANK0 ] unsigned char 
  4457 ;; Return value:  Size  Location     Type
  4458 ;;                  4    0[BANK0 ] unsigned long 
  4459 ;; Registers used:
  4460 ;;		wreg, status,2, status,0
  4461 ;; Tracked objects:
  4462 ;;		On entry : 0/0
  4463 ;;		On exit  : 0/0
  4464 ;;		Unchanged: 0/0
  4465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4466 ;;      Params:         0       6       0       0       0       0       0       0       0
  4467 ;;      Locals:         0       6       0       0       0       0       0       0       0
  4468 ;;      Temps:          0       3       0       0       0       0       0       0       0
  4469 ;;      Totals:         0      15       0       0       0       0       0       0       0
  4470 ;;Total ram usage:       15 bytes
  4471 ;; Hardware stack levels used:    1
  4472 ;; Hardware stack levels required when called:    3
  4473 ;; This function calls:
  4474 ;;		Nothing
  4475 ;; This function is called by:
  4476 ;;		_sprintf
  4477 ;; This function uses a non-reentrant model
  4478 ;;
  4479                           
  4480                           	psect	text9
  4481  001CF4                     __ptext9:
  4482                           	opt stack 0
  4483  001CF4                     __tdiv_to_l_:
  4484                           	opt stack 26
  4485                           
  4486                           ; BSR set to: 0
  4487                           ;incstack = 0
  4488  001CF4  C062  F066         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4489  001CF8  0100               	movlb	0	; () banked
  4490  001CFA  6B67               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  4491  001CFC  6B68               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  4492  001CFE  3561               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),w,b
  4493  001D00  3766               	rlcf	??__tdiv_to_l_& (0+255),f,b
  4494  001D02  E301               	bnc	u2421
  4495  001D04  8167               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  4496  001D06                     u2421:
  4497  001D06  5166               	movf	??__tdiv_to_l_& (0+255),w,b
  4498  001D08  6F6E               	movwf	__tdiv_to_l_@exp1& (0+255),b
  4499  001D0A  516E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  4500  001D0C  A4D8               	btfss	status,2,c
  4501  001D0E  D009               	goto	l550
  4502                           
  4503                           ; BSR set to: 0
  4504  001D10  0E00               	movlw	0
  4505  001D12  6F60               	movwf	?__tdiv_to_l_& (0+255),b
  4506  001D14  0E00               	movlw	0
  4507  001D16  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  4508  001D18  0E00               	movlw	0
  4509  001D1A  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  4510  001D1C  0E00               	movlw	0
  4511  001D1E  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  4512                           
  4513                           ; BSR set to: 0
  4514  001D20  0012               	return	
  4515  001D22                     l550:
  4516                           
  4517                           ; BSR set to: 0
  4518                           
  4519                           ; BSR set to: 0
  4520  001D22  C065  F066         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4521  001D26  6B67               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  4522  001D28  6B68               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  4523  001D2A  3564               	rlcf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  4524  001D2C  3766               	rlcf	??__tdiv_to_l_& (0+255),f,b
  4525  001D2E  E301               	bnc	u2441
  4526  001D30  8167               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  4527  001D32                     u2441:
  4528  001D32  5166               	movf	??__tdiv_to_l_& (0+255),w,b
  4529  001D34  6F6D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  4530  001D36  516D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  4531  001D38  A4D8               	btfss	status,2,c
  4532  001D3A  D009               	goto	l552
  4533                           
  4534                           ; BSR set to: 0
  4535  001D3C  0E00               	movlw	0
  4536  001D3E  6F60               	movwf	?__tdiv_to_l_& (0+255),b
  4537  001D40  0E00               	movlw	0
  4538  001D42  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  4539  001D44  0E00               	movlw	0
  4540  001D46  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  4541  001D48  0E00               	movlw	0
  4542  001D4A  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  4543                           
  4544                           ; BSR set to: 0
  4545  001D4C  0012               	return	
  4546  001D4E                     l552:
  4547                           
  4548                           ; BSR set to: 0
  4549                           
  4550                           ; BSR set to: 0
  4551  001D4E  8F61               	bsf	(__tdiv_to_l_@f1+1)& (0+255),7,b
  4552                           
  4553                           ; BSR set to: 0
  4554  001D50  0EFF               	movlw	255
  4555  001D52  1760               	andwf	__tdiv_to_l_@f1& (0+255),f,b
  4556  001D54  0EFF               	movlw	255
  4557  001D56  1761               	andwf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  4558  001D58  0E00               	movlw	0
  4559  001D5A  1762               	andwf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  4560  001D5C  8F64               	bsf	(__tdiv_to_l_@f2+1)& (0+255),7,b
  4561                           
  4562                           ; BSR set to: 0
  4563  001D5E  0EFF               	movlw	255
  4564  001D60  1763               	andwf	__tdiv_to_l_@f2& (0+255),f,b
  4565  001D62  0EFF               	movlw	255
  4566  001D64  1764               	andwf	(__tdiv_to_l_@f2+1)& (0+255),f,b
  4567  001D66  0E00               	movlw	0
  4568  001D68  1765               	andwf	(__tdiv_to_l_@f2+2)& (0+255),f,b
  4569                           
  4570                           ; BSR set to: 0
  4571  001D6A  0E00               	movlw	0
  4572  001D6C  6F69               	movwf	__tdiv_to_l_@quot& (0+255),b
  4573  001D6E  0E00               	movlw	0
  4574  001D70  6F6A               	movwf	(__tdiv_to_l_@quot+1)& (0+255),b
  4575  001D72  0E00               	movlw	0
  4576  001D74  6F6B               	movwf	(__tdiv_to_l_@quot+2)& (0+255),b
  4577  001D76  0E00               	movlw	0
  4578  001D78  6F6C               	movwf	(__tdiv_to_l_@quot+3)& (0+255),b
  4579                           
  4580                           ; BSR set to: 0
  4581  001D7A  0E7F               	movlw	127
  4582  001D7C  5F6E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  4583                           
  4584                           ; BSR set to: 0
  4585  001D7E  516D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  4586  001D80  0F98               	addlw	152
  4587  001D82  5F6E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  4588                           
  4589                           ; BSR set to: 0
  4590  001D84  0E18               	movlw	24
  4591  001D86  6F6D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  4592  001D88                     l553:
  4593                           
  4594                           ; BSR set to: 0
  4595  001D88  90D8               	bcf	status,0,c
  4596  001D8A  3769               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  4597  001D8C  376A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  4598  001D8E  376B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  4599  001D90  376C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  4600                           
  4601                           ; BSR set to: 0
  4602  001D92  5163               	movf	__tdiv_to_l_@f2& (0+255),w,b
  4603  001D94  5D60               	subwf	__tdiv_to_l_@f1& (0+255),w,b
  4604  001D96  5164               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  4605  001D98  5961               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),w,b
  4606  001D9A  5165               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  4607  001D9C  5962               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),w,b
  4608  001D9E  A0D8               	btfss	status,0,c
  4609  001DA0  D007               	goto	l554
  4610                           
  4611                           ; BSR set to: 0
  4612  001DA2  5163               	movf	__tdiv_to_l_@f2& (0+255),w,b
  4613  001DA4  5F60               	subwf	__tdiv_to_l_@f1& (0+255),f,b
  4614  001DA6  5164               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  4615  001DA8  5B61               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),f,b
  4616  001DAA  5165               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  4617  001DAC  5B62               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),f,b
  4618                           
  4619                           ; BSR set to: 0
  4620  001DAE  8169               	bsf	__tdiv_to_l_@quot& (0+255),0,b
  4621  001DB0                     l554:
  4622                           
  4623                           ; BSR set to: 0
  4624  001DB0  90D8               	bcf	status,0,c
  4625  001DB2  3760               	rlcf	__tdiv_to_l_@f1& (0+255),f,b
  4626  001DB4  3761               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  4627  001DB6  3762               	rlcf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  4628                           
  4629                           ; BSR set to: 0
  4630  001DB8  2F6D               	decfsz	__tdiv_to_l_@cntr& (0+255),f,b
  4631  001DBA  D7E6               	goto	l553
  4632                           
  4633                           ; BSR set to: 0
  4634                           
  4635                           ; BSR set to: 0
  4636  001DBC  AF6E               	btfss	__tdiv_to_l_@exp1& (0+255),7,b
  4637  001DBE  D016               	goto	l556
  4638                           
  4639                           ; BSR set to: 0
  4640  001DC0  516E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  4641  001DC2  0A80               	xorlw	128
  4642  001DC4  0F97               	addlw	151
  4643  001DC6  B0D8               	btfsc	status,0,c
  4644  001DC8  D009               	goto	l557
  4645                           
  4646                           ; BSR set to: 0
  4647  001DCA  0E00               	movlw	0
  4648  001DCC  6F60               	movwf	?__tdiv_to_l_& (0+255),b
  4649  001DCE  0E00               	movlw	0
  4650  001DD0  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  4651  001DD2  0E00               	movlw	0
  4652  001DD4  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  4653  001DD6  0E00               	movlw	0
  4654  001DD8  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  4655                           
  4656                           ; BSR set to: 0
  4657  001DDA  0012               	return	
  4658  001DDC                     l557:
  4659                           
  4660                           ; BSR set to: 0
  4661                           
  4662                           ; BSR set to: 0
  4663                           
  4664                           ; BSR set to: 0
  4665  001DDC  90D8               	bcf	status,0,c
  4666  001DDE  336C               	rrcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  4667  001DE0  336B               	rrcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  4668  001DE2  336A               	rrcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  4669  001DE4  3369               	rrcf	__tdiv_to_l_@quot& (0+255),f,b
  4670                           
  4671                           ; BSR set to: 0
  4672  001DE6  3F6E               	incfsz	__tdiv_to_l_@exp1& (0+255),f,b
  4673  001DE8  D7F9               	goto	l557
  4674                           
  4675                           ; BSR set to: 0
  4676  001DEA  D015               	goto	u2500
  4677  001DEC                     l556:
  4678                           
  4679                           ; BSR set to: 0
  4680                           
  4681                           ; BSR set to: 0
  4682  001DEC  0E17               	movlw	23
  4683  001DEE  656E               	cpfsgt	__tdiv_to_l_@exp1& (0+255),b
  4684  001DF0  D00F               	goto	l562
  4685                           
  4686                           ; BSR set to: 0
  4687  001DF2  0E00               	movlw	0
  4688  001DF4  6F60               	movwf	?__tdiv_to_l_& (0+255),b
  4689  001DF6  0E00               	movlw	0
  4690  001DF8  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  4691  001DFA  0E00               	movlw	0
  4692  001DFC  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  4693  001DFE  0E00               	movlw	0
  4694  001E00  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  4695                           
  4696                           ; BSR set to: 0
  4697  001E02  0012               	return	
  4698  001E04                     
  4699                           ; BSR set to: 0
  4700                           
  4701                           ; BSR set to: 0
  4702  001E04  90D8               	bcf	status,0,c
  4703  001E06  3769               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  4704  001E08  376A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  4705  001E0A  376B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  4706  001E0C  376C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  4707  001E0E  076E               	decf	__tdiv_to_l_@exp1& (0+255),f,b
  4708  001E10                     l562:
  4709                           
  4710                           ; BSR set to: 0
  4711                           
  4712                           ; BSR set to: 0
  4713  001E10  516E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  4714  001E12  A4D8               	btfss	status,2,c
  4715  001E14  D7F7               	goto	l563
  4716  001E16                     u2500:
  4717                           
  4718                           ; BSR set to: 0
  4719                           
  4720                           ; BSR set to: 0
  4721  001E16  C069  F060         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4722  001E1A  C06A  F061         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4723  001E1E  C06B  F062         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4724  001E22  C06C  F063         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4725                           
  4726                           ; BSR set to: 0
  4727  001E26  0012               	return		;funcret
  4728  001E28                     __end_of__tdiv_to_l_:
  4729                           	opt stack 0
  4730                           tblptru	equ	0xFF8
  4731                           tblptrh	equ	0xFF7
  4732                           tblptrl	equ	0xFF6
  4733                           tablat	equ	0xFF5
  4734                           prodh	equ	0xFF4
  4735                           prodl	equ	0xFF3
  4736                           postinc0	equ	0xFEE
  4737                           wreg	equ	0xFE8
  4738                           indf2	equ	0xFDF
  4739                           postinc2	equ	0xFDE
  4740                           postdec2	equ	0xFDD
  4741                           fsr2h	equ	0xFDA
  4742                           fsr2l	equ	0xFD9
  4743                           status	equ	0xFD8
  4744                           
  4745 ;; *************** function __div_to_l_ *****************
  4746 ;; Defined at:
  4747 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fldivl.c"
  4748 ;; Parameters:    Size  Location     Type
  4749 ;;  f1              3    0[BANK0 ] unsigned long 
  4750 ;;  f2              3    3[BANK0 ] unsigned long 
  4751 ;; Auto vars:     Size  Location     Type
  4752 ;;  quot            4    6[BANK0 ] unsigned long 
  4753 ;;  exp1            1   11[BANK0 ] unsigned char 
  4754 ;;  cntr            1   10[BANK0 ] unsigned char 
  4755 ;; Return value:  Size  Location     Type
  4756 ;;                  4    0[BANK0 ] unsigned long 
  4757 ;; Registers used:
  4758 ;;		wreg, status,2, status,0
  4759 ;; Tracked objects:
  4760 ;;		On entry : 0/0
  4761 ;;		On exit  : 0/0
  4762 ;;		Unchanged: 0/0
  4763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4764 ;;      Params:         0       6       0       0       0       0       0       0       0
  4765 ;;      Locals:         0       6       0       0       0       0       0       0       0
  4766 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4767 ;;      Totals:         0      12       0       0       0       0       0       0       0
  4768 ;;Total ram usage:       12 bytes
  4769 ;; Hardware stack levels used:    1
  4770 ;; Hardware stack levels required when called:    3
  4771 ;; This function calls:
  4772 ;;		Nothing
  4773 ;; This function is called by:
  4774 ;;		_sprintf
  4775 ;; This function uses a non-reentrant model
  4776 ;;
  4777                           
  4778                           	psect	text10
  4779  00208A                     __ptext10:
  4780                           	opt stack 0
  4781  00208A                     __div_to_l_:
  4782                           	opt stack 26
  4783                           
  4784                           ; BSR set to: 0
  4785                           ;incstack = 0
  4786  00208A  0100               	movlb	0	; () banked
  4787  00208C  3562               	rlcf	(__div_to_l_@f1+2)& (0+255),w,b
  4788  00208E  3563               	rlcf	(__div_to_l_@f1+3)& (0+255),w,b
  4789  002090  6F6B               	movwf	__div_to_l_@exp1& (0+255),b
  4790  002092  516B               	movf	__div_to_l_@exp1& (0+255),w,b
  4791  002094  A4D8               	btfss	status,2,c
  4792  002096  D009               	goto	l446
  4793                           
  4794                           ; BSR set to: 0
  4795  002098  0E00               	movlw	0
  4796  00209A  6F60               	movwf	?__div_to_l_& (0+255),b
  4797  00209C  0E00               	movlw	0
  4798  00209E  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
  4799  0020A0  0E00               	movlw	0
  4800  0020A2  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
  4801  0020A4  0E00               	movlw	0
  4802  0020A6  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
  4803                           
  4804                           ; BSR set to: 0
  4805  0020A8  0012               	return	
  4806  0020AA                     l446:
  4807                           
  4808                           ; BSR set to: 0
  4809                           
  4810                           ; BSR set to: 0
  4811  0020AA  3565               	rlcf	(__div_to_l_@f2+2)& (0+255),w,b
  4812  0020AC  3566               	rlcf	(__div_to_l_@f2+3)& (0+255),w,b
  4813  0020AE  6F6A               	movwf	__div_to_l_@cntr& (0+255),b
  4814  0020B0  516A               	movf	__div_to_l_@cntr& (0+255),w,b
  4815  0020B2  A4D8               	btfss	status,2,c
  4816  0020B4  D009               	goto	l448
  4817                           
  4818                           ; BSR set to: 0
  4819  0020B6  0E00               	movlw	0
  4820  0020B8  6F60               	movwf	?__div_to_l_& (0+255),b
  4821  0020BA  0E00               	movlw	0
  4822  0020BC  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
  4823  0020BE  0E00               	movlw	0
  4824  0020C0  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
  4825  0020C2  0E00               	movlw	0
  4826  0020C4  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
  4827                           
  4828                           ; BSR set to: 0
  4829  0020C6  0012               	return	
  4830  0020C8                     l448:
  4831                           
  4832                           ; BSR set to: 0
  4833                           
  4834                           ; BSR set to: 0
  4835  0020C8  8F62               	bsf	(__div_to_l_@f1+2)& (0+255),7,b
  4836                           
  4837                           ; BSR set to: 0
  4838  0020CA  0EFF               	movlw	255
  4839  0020CC  1760               	andwf	__div_to_l_@f1& (0+255),f,b
  4840  0020CE  0EFF               	movlw	255
  4841  0020D0  1761               	andwf	(__div_to_l_@f1+1)& (0+255),f,b
  4842  0020D2  0EFF               	movlw	255
  4843  0020D4  1762               	andwf	(__div_to_l_@f1+2)& (0+255),f,b
  4844  0020D6  0E00               	movlw	0
  4845  0020D8  1763               	andwf	(__div_to_l_@f1+3)& (0+255),f,b
  4846                           
  4847                           ; BSR set to: 0
  4848  0020DA  8F65               	bsf	(__div_to_l_@f2+2)& (0+255),7,b
  4849  0020DC  0EFF               	movlw	255
  4850  0020DE  1763               	andwf	__div_to_l_@f2& (0+255),f,b
  4851  0020E0  0EFF               	movlw	255
  4852  0020E2  1764               	andwf	(__div_to_l_@f2+1)& (0+255),f,b
  4853  0020E4  0EFF               	movlw	255
  4854  0020E6  1765               	andwf	(__div_to_l_@f2+2)& (0+255),f,b
  4855  0020E8  0E00               	movlw	0
  4856  0020EA  1766               	andwf	(__div_to_l_@f2+3)& (0+255),f,b
  4857                           
  4858                           ; BSR set to: 0
  4859  0020EC  0E00               	movlw	0
  4860  0020EE  6F66               	movwf	__div_to_l_@quot& (0+255),b
  4861  0020F0  0E00               	movlw	0
  4862  0020F2  6F67               	movwf	(__div_to_l_@quot+1)& (0+255),b
  4863  0020F4  0E00               	movlw	0
  4864  0020F6  6F68               	movwf	(__div_to_l_@quot+2)& (0+255),b
  4865  0020F8  0E00               	movlw	0
  4866  0020FA  6F69               	movwf	(__div_to_l_@quot+3)& (0+255),b
  4867                           
  4868                           ; BSR set to: 0
  4869  0020FC  0E7F               	movlw	127
  4870  0020FE  5F6B               	subwf	__div_to_l_@exp1& (0+255),f,b
  4871                           
  4872                           ; BSR set to: 0
  4873  002100  516A               	movf	__div_to_l_@cntr& (0+255),w,b
  4874  002102  0FA0               	addlw	160
  4875  002104  5F6B               	subwf	__div_to_l_@exp1& (0+255),f,b
  4876                           
  4877                           ; BSR set to: 0
  4878  002106  0E20               	movlw	32
  4879  002108  6F6A               	movwf	__div_to_l_@cntr& (0+255),b
  4880  00210A                     
  4881                           ; BSR set to: 0
  4882                           
  4883                           ; BSR set to: 0
  4884  00210A  90D8               	bcf	status,0,c
  4885  00210C  3766               	rlcf	__div_to_l_@quot& (0+255),f,b
  4886  00210E  3767               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  4887  002110  3768               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  4888  002112  3769               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  4889                           
  4890                           ; BSR set to: 0
  4891  002114  5163               	movf	__div_to_l_@f2& (0+255),w,b
  4892  002116  5D60               	subwf	__div_to_l_@f1& (0+255),w,b
  4893  002118  5164               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  4894  00211A  5961               	subwfb	(__div_to_l_@f1+1)& (0+255),w,b
  4895  00211C  5165               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  4896  00211E  5962               	subwfb	(__div_to_l_@f1+2)& (0+255),w,b
  4897  002120  5166               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  4898  002122  5963               	subwfb	(__div_to_l_@f1+3)& (0+255),w,b
  4899  002124  A0D8               	btfss	status,0,c
  4900  002126  D009               	goto	l450
  4901                           
  4902                           ; BSR set to: 0
  4903  002128  5163               	movf	__div_to_l_@f2& (0+255),w,b
  4904  00212A  5F60               	subwf	__div_to_l_@f1& (0+255),f,b
  4905  00212C  5164               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  4906  00212E  5B61               	subwfb	(__div_to_l_@f1+1)& (0+255),f,b
  4907  002130  5165               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  4908  002132  5B62               	subwfb	(__div_to_l_@f1+2)& (0+255),f,b
  4909  002134  5166               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  4910  002136  5B63               	subwfb	(__div_to_l_@f1+3)& (0+255),f,b
  4911                           
  4912                           ; BSR set to: 0
  4913  002138  8166               	bsf	__div_to_l_@quot& (0+255),0,b
  4914  00213A                     l450:
  4915                           
  4916                           ; BSR set to: 0
  4917                           
  4918                           ; BSR set to: 0
  4919  00213A  90D8               	bcf	status,0,c
  4920  00213C  3760               	rlcf	__div_to_l_@f1& (0+255),f,b
  4921  00213E  3761               	rlcf	(__div_to_l_@f1+1)& (0+255),f,b
  4922  002140  3762               	rlcf	(__div_to_l_@f1+2)& (0+255),f,b
  4923  002142  3763               	rlcf	(__div_to_l_@f1+3)& (0+255),f,b
  4924                           
  4925                           ; BSR set to: 0
  4926  002144  2F6A               	decfsz	__div_to_l_@cntr& (0+255),f,b
  4927  002146  D7E1               	goto	l449
  4928                           
  4929                           ; BSR set to: 0
  4930                           
  4931                           ; BSR set to: 0
  4932  002148  AF6B               	btfss	__div_to_l_@exp1& (0+255),7,b
  4933  00214A  D016               	goto	l452
  4934                           
  4935                           ; BSR set to: 0
  4936  00214C  516B               	movf	__div_to_l_@exp1& (0+255),w,b
  4937  00214E  0A80               	xorlw	128
  4938  002150  0F9F               	addlw	159
  4939  002152  B0D8               	btfsc	status,0,c
  4940  002154  D009               	goto	l453
  4941                           
  4942                           ; BSR set to: 0
  4943  002156  0E00               	movlw	0
  4944  002158  6F60               	movwf	?__div_to_l_& (0+255),b
  4945  00215A  0E00               	movlw	0
  4946  00215C  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
  4947  00215E  0E00               	movlw	0
  4948  002160  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
  4949  002162  0E00               	movlw	0
  4950  002164  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
  4951                           
  4952                           ; BSR set to: 0
  4953  002166  0012               	return	
  4954  002168                     l453:
  4955                           
  4956                           ; BSR set to: 0
  4957                           
  4958                           ; BSR set to: 0
  4959                           
  4960                           ; BSR set to: 0
  4961  002168  90D8               	bcf	status,0,c
  4962  00216A  3369               	rrcf	(__div_to_l_@quot+3)& (0+255),f,b
  4963  00216C  3368               	rrcf	(__div_to_l_@quot+2)& (0+255),f,b
  4964  00216E  3367               	rrcf	(__div_to_l_@quot+1)& (0+255),f,b
  4965  002170  3366               	rrcf	__div_to_l_@quot& (0+255),f,b
  4966                           
  4967                           ; BSR set to: 0
  4968  002172  3F6B               	incfsz	__div_to_l_@exp1& (0+255),f,b
  4969  002174  D7F9               	goto	l453
  4970                           
  4971                           ; BSR set to: 0
  4972  002176  D015               	goto	u2570
  4973  002178                     l452:
  4974                           
  4975                           ; BSR set to: 0
  4976                           
  4977                           ; BSR set to: 0
  4978  002178  0E1F               	movlw	31
  4979  00217A  656B               	cpfsgt	__div_to_l_@exp1& (0+255),b
  4980  00217C  D00F               	goto	l458
  4981                           
  4982                           ; BSR set to: 0
  4983  00217E  0E00               	movlw	0
  4984  002180  6F60               	movwf	?__div_to_l_& (0+255),b
  4985  002182  0E00               	movlw	0
  4986  002184  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
  4987  002186  0E00               	movlw	0
  4988  002188  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
  4989  00218A  0E00               	movlw	0
  4990  00218C  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
  4991                           
  4992                           ; BSR set to: 0
  4993  00218E  0012               	return	
  4994  002190                     
  4995                           ; BSR set to: 0
  4996                           
  4997                           ; BSR set to: 0
  4998  002190  90D8               	bcf	status,0,c
  4999  002192  3766               	rlcf	__div_to_l_@quot& (0+255),f,b
  5000  002194  3767               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  5001  002196  3768               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  5002  002198  3769               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  5003  00219A  076B               	decf	__div_to_l_@exp1& (0+255),f,b
  5004  00219C                     l458:
  5005                           
  5006                           ; BSR set to: 0
  5007                           
  5008                           ; BSR set to: 0
  5009  00219C  516B               	movf	__div_to_l_@exp1& (0+255),w,b
  5010  00219E  A4D8               	btfss	status,2,c
  5011  0021A0  D7F7               	goto	l459
  5012  0021A2                     u2570:
  5013                           
  5014                           ; BSR set to: 0
  5015                           
  5016                           ; BSR set to: 0
  5017  0021A2  C066  F060         	movff	__div_to_l_@quot,?__div_to_l_
  5018  0021A6  C067  F061         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  5019  0021AA  C068  F062         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  5020  0021AE  C069  F063         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  5021                           
  5022                           ; BSR set to: 0
  5023  0021B2  0012               	return		;funcret
  5024  0021B4                     __end_of__div_to_l_:
  5025                           	opt stack 0
  5026                           tblptru	equ	0xFF8
  5027                           tblptrh	equ	0xFF7
  5028                           tblptrl	equ	0xFF6
  5029                           tablat	equ	0xFF5
  5030                           prodh	equ	0xFF4
  5031                           prodl	equ	0xFF3
  5032                           postinc0	equ	0xFEE
  5033                           wreg	equ	0xFE8
  5034                           indf2	equ	0xFDF
  5035                           postinc2	equ	0xFDE
  5036                           postdec2	equ	0xFDD
  5037                           fsr2h	equ	0xFDA
  5038                           fsr2l	equ	0xFD9
  5039                           status	equ	0xFD8
  5040                           
  5041 ;; *************** function ___lltoft *****************
  5042 ;; Defined at:
  5043 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
  5044 ;; Parameters:    Size  Location     Type
  5045 ;;  c               4    8[BANK0 ] unsigned long 
  5046 ;; Auto vars:     Size  Location     Type
  5047 ;;  exp             1   16[BANK0 ] unsigned char 
  5048 ;; Return value:  Size  Location     Type
  5049 ;;                  3    8[BANK0 ] float 
  5050 ;; Registers used:
  5051 ;;		wreg, status,2, status,0, cstack
  5052 ;; Tracked objects:
  5053 ;;		On entry : 0/0
  5054 ;;		On exit  : 0/0
  5055 ;;		Unchanged: 0/0
  5056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5057 ;;      Params:         0       4       0       0       0       0       0       0       0
  5058 ;;      Locals:         0       1       0       0       0       0       0       0       0
  5059 ;;      Temps:          0       4       0       0       0       0       0       0       0
  5060 ;;      Totals:         0       9       0       0       0       0       0       0       0
  5061 ;;Total ram usage:        9 bytes
  5062 ;; Hardware stack levels used:    1
  5063 ;; Hardware stack levels required when called:    4
  5064 ;; This function calls:
  5065 ;;		___ftpack
  5066 ;; This function is called by:
  5067 ;;		_sprintf
  5068 ;; This function uses a non-reentrant model
  5069 ;;
  5070                           
  5071                           	psect	text11
  5072  002BAA                     __ptext11:
  5073                           	opt stack 0
  5074  002BAA                     ___lltoft:
  5075                           	opt stack 25
  5076                           
  5077                           ; BSR set to: 0
  5078                           ;incstack = 0
  5079  002BAA  0E8E               	movlw	142
  5080  002BAC  0100               	movlb	0	; () banked
  5081  002BAE  6F70               	movwf	___lltoft@exp& (0+255),b
  5082  002BB0  D006               	goto	l657
  5083  002BB2                     
  5084                           ; BSR set to: 0
  5085                           
  5086                           ; BSR set to: 0
  5087  002BB2  90D8               	bcf	status,0,c
  5088  002BB4  336B               	rrcf	(___lltoft@c+3)& (0+255),f,b
  5089  002BB6  336A               	rrcf	(___lltoft@c+2)& (0+255),f,b
  5090  002BB8  3369               	rrcf	(___lltoft@c+1)& (0+255),f,b
  5091  002BBA  3368               	rrcf	___lltoft@c& (0+255),f,b
  5092  002BBC  2B70               	incf	___lltoft@exp& (0+255),f,b
  5093  002BBE                     l657:
  5094                           
  5095                           ; BSR set to: 0
  5096                           
  5097                           ; BSR set to: 0
  5098  002BBE  0E00               	movlw	0
  5099  002BC0  1568               	andwf	___lltoft@c& (0+255),w,b
  5100  002BC2  6F6C               	movwf	??___lltoft& (0+255),b
  5101  002BC4  0E00               	movlw	0
  5102  002BC6  1569               	andwf	(___lltoft@c+1)& (0+255),w,b
  5103  002BC8  6F6D               	movwf	(??___lltoft+1)& (0+255),b
  5104  002BCA  0E00               	movlw	0
  5105  002BCC  156A               	andwf	(___lltoft@c+2)& (0+255),w,b
  5106  002BCE  6F6E               	movwf	(??___lltoft+2)& (0+255),b
  5107  002BD0  0EFF               	movlw	255
  5108  002BD2  156B               	andwf	(___lltoft@c+3)& (0+255),w,b
  5109  002BD4  6F6F               	movwf	(??___lltoft+3)& (0+255),b
  5110  002BD6  516C               	movf	??___lltoft& (0+255),w,b
  5111  002BD8  116D               	iorwf	(??___lltoft+1)& (0+255),w,b
  5112  002BDA  116E               	iorwf	(??___lltoft+2)& (0+255),w,b
  5113  002BDC  116F               	iorwf	(??___lltoft+3)& (0+255),w,b
  5114  002BDE  A4D8               	btfss	status,2,c
  5115  002BE0  D7E8               	goto	l658
  5116                           
  5117                           ; BSR set to: 0
  5118                           
  5119                           ; BSR set to: 0
  5120  002BE2  C068  F060         	movff	___lltoft@c,___ftpack@arg
  5121  002BE6  C069  F061         	movff	___lltoft@c+1,___ftpack@arg+1
  5122  002BEA  C06A  F062         	movff	___lltoft@c+2,___ftpack@arg+2
  5123  002BEE  C070  F063         	movff	___lltoft@exp,___ftpack@exp
  5124  002BF2  0E00               	movlw	0
  5125  002BF4  6F64               	movwf	___ftpack@sign& (0+255),b
  5126  002BF6  ECB6  F013         	call	___ftpack	;wreg free
  5127  002BFA  C060  F068         	movff	?___ftpack,?___lltoft
  5128  002BFE  C061  F069         	movff	?___ftpack+1,?___lltoft+1
  5129  002C02  C062  F06A         	movff	?___ftpack+2,?___lltoft+2
  5130  002C06  0012               	return	
  5131  002C08                     __end_of___lltoft:
  5132                           	opt stack 0
  5133                           tblptru	equ	0xFF8
  5134                           tblptrh	equ	0xFF7
  5135                           tblptrl	equ	0xFF6
  5136                           tablat	equ	0xFF5
  5137                           prodh	equ	0xFF4
  5138                           prodl	equ	0xFF3
  5139                           postinc0	equ	0xFEE
  5140                           wreg	equ	0xFE8
  5141                           indf2	equ	0xFDF
  5142                           postinc2	equ	0xFDE
  5143                           postdec2	equ	0xFDD
  5144                           fsr2h	equ	0xFDA
  5145                           fsr2l	equ	0xFD9
  5146                           status	equ	0xFD8
  5147                           
  5148 ;; *************** function ___llmod *****************
  5149 ;; Defined at:
  5150 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  5151 ;; Parameters:    Size  Location     Type
  5152 ;;  dividend        4    0[BANK0 ] unsigned long 
  5153 ;;  divisor         4    4[BANK0 ] unsigned long 
  5154 ;; Auto vars:     Size  Location     Type
  5155 ;;  counter         1    8[BANK0 ] unsigned char 
  5156 ;; Return value:  Size  Location     Type
  5157 ;;                  4    0[BANK0 ] unsigned long 
  5158 ;; Registers used:
  5159 ;;		wreg, status,2, status,0
  5160 ;; Tracked objects:
  5161 ;;		On entry : 0/0
  5162 ;;		On exit  : 0/0
  5163 ;;		Unchanged: 0/0
  5164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5165 ;;      Params:         0       8       0       0       0       0       0       0       0
  5166 ;;      Locals:         0       1       0       0       0       0       0       0       0
  5167 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5168 ;;      Totals:         0       9       0       0       0       0       0       0       0
  5169 ;;Total ram usage:        9 bytes
  5170 ;; Hardware stack levels used:    1
  5171 ;; Hardware stack levels required when called:    3
  5172 ;; This function calls:
  5173 ;;		Nothing
  5174 ;; This function is called by:
  5175 ;;		_sprintf
  5176 ;; This function uses a non-reentrant model
  5177 ;;
  5178                           
  5179                           	psect	text12
  5180  002B42                     __ptext12:
  5181                           	opt stack 0
  5182  002B42                     ___llmod:
  5183                           	opt stack 26
  5184                           
  5185                           ;incstack = 0
  5186  002B42  0100               	movlb	0	; () banked
  5187  002B44  5164               	movf	___llmod@divisor& (0+255),w,b
  5188  002B46  1165               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  5189  002B48  1166               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  5190  002B4A  1167               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  5191  002B4C  B4D8               	btfsc	status,2,c
  5192  002B4E  D024               	goto	l651
  5193                           
  5194                           ; BSR set to: 0
  5195  002B50  0E01               	movlw	1
  5196  002B52  6F68               	movwf	___llmod@counter& (0+255),b
  5197  002B54  D006               	goto	l646
  5198  002B56                     
  5199                           ; BSR set to: 0
  5200                           
  5201                           ; BSR set to: 0
  5202  002B56  90D8               	bcf	status,0,c
  5203  002B58  3764               	rlcf	___llmod@divisor& (0+255),f,b
  5204  002B5A  3765               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  5205  002B5C  3766               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  5206  002B5E  3767               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  5207  002B60  2B68               	incf	___llmod@counter& (0+255),f,b
  5208  002B62                     l646:
  5209                           
  5210                           ; BSR set to: 0
  5211                           
  5212                           ; BSR set to: 0
  5213  002B62  AF67               	btfss	(___llmod@divisor+3)& (0+255),7,b
  5214  002B64  D7F8               	goto	l647
  5215  002B66                     u2750:
  5216                           
  5217                           ; BSR set to: 0
  5218                           
  5219                           ; BSR set to: 0
  5220                           
  5221                           ; BSR set to: 0
  5222  002B66  5164               	movf	___llmod@divisor& (0+255),w,b
  5223  002B68  5D60               	subwf	___llmod@dividend& (0+255),w,b
  5224  002B6A  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
  5225  002B6C  5961               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  5226  002B6E  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
  5227  002B70  5962               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  5228  002B72  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
  5229  002B74  5963               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  5230  002B76  A0D8               	btfss	status,0,c
  5231  002B78  D008               	goto	l650
  5232                           
  5233                           ; BSR set to: 0
  5234  002B7A  5164               	movf	___llmod@divisor& (0+255),w,b
  5235  002B7C  5F60               	subwf	___llmod@dividend& (0+255),f,b
  5236  002B7E  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
  5237  002B80  5B61               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  5238  002B82  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
  5239  002B84  5B62               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  5240  002B86  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
  5241  002B88  5B63               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  5242  002B8A                     l650:
  5243                           
  5244                           ; BSR set to: 0
  5245                           
  5246                           ; BSR set to: 0
  5247  002B8A  90D8               	bcf	status,0,c
  5248  002B8C  3367               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  5249  002B8E  3366               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  5250  002B90  3365               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  5251  002B92  3364               	rrcf	___llmod@divisor& (0+255),f,b
  5252                           
  5253                           ; BSR set to: 0
  5254  002B94  2F68               	decfsz	___llmod@counter& (0+255),f,b
  5255  002B96  D7E7               	goto	u2750
  5256  002B98                     l651:
  5257                           
  5258                           ; BSR set to: 0
  5259                           
  5260                           ; BSR set to: 0
  5261  002B98  C060  F060         	movff	___llmod@dividend,?___llmod
  5262  002B9C  C061  F061         	movff	___llmod@dividend+1,?___llmod+1
  5263  002BA0  C062  F062         	movff	___llmod@dividend+2,?___llmod+2
  5264  002BA4  C063  F063         	movff	___llmod@dividend+3,?___llmod+3
  5265                           
  5266                           ; BSR set to: 0
  5267  002BA8  0012               	return		;funcret
  5268  002BAA                     __end_of___llmod:
  5269                           	opt stack 0
  5270                           tblptru	equ	0xFF8
  5271                           tblptrh	equ	0xFF7
  5272                           tblptrl	equ	0xFF6
  5273                           tablat	equ	0xFF5
  5274                           prodh	equ	0xFF4
  5275                           prodl	equ	0xFF3
  5276                           postinc0	equ	0xFEE
  5277                           wreg	equ	0xFE8
  5278                           indf2	equ	0xFDF
  5279                           postinc2	equ	0xFDE
  5280                           postdec2	equ	0xFDD
  5281                           fsr2h	equ	0xFDA
  5282                           fsr2l	equ	0xFD9
  5283                           status	equ	0xFD8
  5284                           
  5285 ;; *************** function ___lldiv *****************
  5286 ;; Defined at:
  5287 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  5288 ;; Parameters:    Size  Location     Type
  5289 ;;  dividend        4    0[BANK0 ] unsigned long 
  5290 ;;  divisor         4    4[BANK0 ] unsigned long 
  5291 ;; Auto vars:     Size  Location     Type
  5292 ;;  quotient        4    8[BANK0 ] unsigned long 
  5293 ;;  counter         1   12[BANK0 ] unsigned char 
  5294 ;; Return value:  Size  Location     Type
  5295 ;;                  4    0[BANK0 ] unsigned long 
  5296 ;; Registers used:
  5297 ;;		wreg, status,2, status,0
  5298 ;; Tracked objects:
  5299 ;;		On entry : 0/0
  5300 ;;		On exit  : 0/0
  5301 ;;		Unchanged: 0/0
  5302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5303 ;;      Params:         0       8       0       0       0       0       0       0       0
  5304 ;;      Locals:         0       5       0       0       0       0       0       0       0
  5305 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5306 ;;      Totals:         0      13       0       0       0       0       0       0       0
  5307 ;;Total ram usage:       13 bytes
  5308 ;; Hardware stack levels used:    1
  5309 ;; Hardware stack levels required when called:    3
  5310 ;; This function calls:
  5311 ;;		Nothing
  5312 ;; This function is called by:
  5313 ;;		_sprintf
  5314 ;; This function uses a non-reentrant model
  5315 ;;
  5316                           
  5317                           	psect	text13
  5318  0029E2                     __ptext13:
  5319                           	opt stack 0
  5320  0029E2                     ___lldiv:
  5321                           	opt stack 26
  5322                           
  5323                           ; BSR set to: 0
  5324                           ;incstack = 0
  5325  0029E2  0E00               	movlw	0
  5326  0029E4  0100               	movlb	0	; () banked
  5327  0029E6  6F68               	movwf	___lldiv@quotient& (0+255),b
  5328  0029E8  0E00               	movlw	0
  5329  0029EA  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
  5330  0029EC  0E00               	movlw	0
  5331  0029EE  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
  5332  0029F0  0E00               	movlw	0
  5333  0029F2  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
  5334                           
  5335                           ; BSR set to: 0
  5336  0029F4  5164               	movf	___lldiv@divisor& (0+255),w,b
  5337  0029F6  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  5338  0029F8  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  5339  0029FA  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  5340  0029FC  B4D8               	btfsc	status,2,c
  5341  0029FE  D02A               	goto	l641
  5342                           
  5343                           ; BSR set to: 0
  5344  002A00  0E01               	movlw	1
  5345  002A02  6F6C               	movwf	___lldiv@counter& (0+255),b
  5346  002A04  D006               	goto	l636
  5347  002A06                     
  5348                           ; BSR set to: 0
  5349                           
  5350                           ; BSR set to: 0
  5351  002A06  90D8               	bcf	status,0,c
  5352  002A08  3764               	rlcf	___lldiv@divisor& (0+255),f,b
  5353  002A0A  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  5354  002A0C  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  5355  002A0E  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  5356  002A10  2B6C               	incf	___lldiv@counter& (0+255),f,b
  5357  002A12                     l636:
  5358                           
  5359                           ; BSR set to: 0
  5360                           
  5361                           ; BSR set to: 0
  5362  002A12  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  5363  002A14  D7F8               	goto	l637
  5364  002A16                     u2720:
  5365                           
  5366                           ; BSR set to: 0
  5367                           
  5368                           ; BSR set to: 0
  5369                           
  5370                           ; BSR set to: 0
  5371  002A16  90D8               	bcf	status,0,c
  5372  002A18  3768               	rlcf	___lldiv@quotient& (0+255),f,b
  5373  002A1A  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  5374  002A1C  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  5375  002A1E  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  5376                           
  5377                           ; BSR set to: 0
  5378  002A20  5164               	movf	___lldiv@divisor& (0+255),w,b
  5379  002A22  5D60               	subwf	___lldiv@dividend& (0+255),w,b
  5380  002A24  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5381  002A26  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  5382  002A28  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5383  002A2A  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  5384  002A2C  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5385  002A2E  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  5386  002A30  A0D8               	btfss	status,0,c
  5387  002A32  D009               	goto	l640
  5388                           
  5389                           ; BSR set to: 0
  5390  002A34  5164               	movf	___lldiv@divisor& (0+255),w,b
  5391  002A36  5F60               	subwf	___lldiv@dividend& (0+255),f,b
  5392  002A38  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5393  002A3A  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  5394  002A3C  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5395  002A3E  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  5396  002A40  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5397  002A42  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  5398                           
  5399                           ; BSR set to: 0
  5400  002A44  8168               	bsf	___lldiv@quotient& (0+255),0,b
  5401  002A46                     l640:
  5402                           
  5403                           ; BSR set to: 0
  5404                           
  5405                           ; BSR set to: 0
  5406  002A46  90D8               	bcf	status,0,c
  5407  002A48  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  5408  002A4A  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  5409  002A4C  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  5410  002A4E  3364               	rrcf	___lldiv@divisor& (0+255),f,b
  5411                           
  5412                           ; BSR set to: 0
  5413  002A50  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
  5414  002A52  D7E1               	goto	u2720
  5415  002A54                     l641:
  5416                           
  5417                           ; BSR set to: 0
  5418                           
  5419                           ; BSR set to: 0
  5420  002A54  C068  F060         	movff	___lldiv@quotient,?___lldiv
  5421  002A58  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
  5422  002A5C  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
  5423  002A60  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
  5424                           
  5425                           ; BSR set to: 0
  5426  002A64  0012               	return		;funcret
  5427  002A66                     __end_of___lldiv:
  5428                           	opt stack 0
  5429                           tblptru	equ	0xFF8
  5430                           tblptrh	equ	0xFF7
  5431                           tblptrl	equ	0xFF6
  5432                           tablat	equ	0xFF5
  5433                           prodh	equ	0xFF4
  5434                           prodl	equ	0xFF3
  5435                           postinc0	equ	0xFEE
  5436                           wreg	equ	0xFE8
  5437                           indf2	equ	0xFDF
  5438                           postinc2	equ	0xFDE
  5439                           postdec2	equ	0xFDD
  5440                           fsr2h	equ	0xFDA
  5441                           fsr2l	equ	0xFD9
  5442                           status	equ	0xFD8
  5443                           
  5444 ;; *************** function ___fttol *****************
  5445 ;; Defined at:
  5446 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  5447 ;; Parameters:    Size  Location     Type
  5448 ;;  f1              3   42[BANK0 ] float 
  5449 ;; Auto vars:     Size  Location     Type
  5450 ;;  lval            4   52[BANK0 ] unsigned long 
  5451 ;;  exp1            1   56[BANK0 ] unsigned char 
  5452 ;;  sign1           1   51[BANK0 ] unsigned char 
  5453 ;; Return value:  Size  Location     Type
  5454 ;;                  4   42[BANK0 ] long 
  5455 ;; Registers used:
  5456 ;;		wreg, status,2, status,0
  5457 ;; Tracked objects:
  5458 ;;		On entry : 0/0
  5459 ;;		On exit  : 0/0
  5460 ;;		Unchanged: 0/0
  5461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5462 ;;      Params:         0       4       0       0       0       0       0       0       0
  5463 ;;      Locals:         0       6       0       0       0       0       0       0       0
  5464 ;;      Temps:          0       5       0       0       0       0       0       0       0
  5465 ;;      Totals:         0      15       0       0       0       0       0       0       0
  5466 ;;Total ram usage:       15 bytes
  5467 ;; Hardware stack levels used:    1
  5468 ;; Hardware stack levels required when called:    3
  5469 ;; This function calls:
  5470 ;;		Nothing
  5471 ;; This function is called by:
  5472 ;;		_sprintf
  5473 ;; This function uses a non-reentrant model
  5474 ;;
  5475                           
  5476                           	psect	text14
  5477  0022BC                     __ptext14:
  5478                           	opt stack 0
  5479  0022BC                     ___fttol:
  5480                           	opt stack 26
  5481                           
  5482                           ; BSR set to: 0
  5483                           ;incstack = 0
  5484  0022BC  C08C  F08E         	movff	___fttol@f1+2,??___fttol
  5485  0022C0  0100               	movlb	0	; () banked
  5486  0022C2  6B8F               	clrf	(??___fttol+1)& (0+255),b
  5487  0022C4  6B90               	clrf	(??___fttol+2)& (0+255),b
  5488  0022C6  358B               	rlcf	(___fttol@f1+1)& (0+255),w,b
  5489  0022C8  378E               	rlcf	??___fttol& (0+255),f,b
  5490  0022CA  E301               	bnc	u2631
  5491  0022CC  818F               	bsf	(??___fttol+1)& (0+255),0,b
  5492  0022CE                     u2631:
  5493  0022CE  518E               	movf	??___fttol& (0+255),w,b
  5494  0022D0  6F98               	movwf	___fttol@exp1& (0+255),b
  5495  0022D2  5198               	movf	___fttol@exp1& (0+255),w,b
  5496  0022D4  A4D8               	btfss	status,2,c
  5497  0022D6  D009               	goto	l595
  5498                           
  5499                           ; BSR set to: 0
  5500  0022D8  0E00               	movlw	0
  5501  0022DA  6F8A               	movwf	?___fttol& (0+255),b
  5502  0022DC  0E00               	movlw	0
  5503  0022DE  6F8B               	movwf	(?___fttol+1)& (0+255),b
  5504  0022E0  0E00               	movlw	0
  5505  0022E2  6F8C               	movwf	(?___fttol+2)& (0+255),b
  5506  0022E4  0E00               	movlw	0
  5507  0022E6  6F8D               	movwf	(?___fttol+3)& (0+255),b
  5508                           
  5509                           ; BSR set to: 0
  5510  0022E8  0012               	return	
  5511  0022EA                     l595:
  5512                           
  5513                           ; BSR set to: 0
  5514                           
  5515                           ; BSR set to: 0
  5516  0022EA  0E17               	movlw	23
  5517  0022EC  6F8E               	movwf	??___fttol& (0+255),b
  5518  0022EE  C08A  F08F         	movff	___fttol@f1,??___fttol+1
  5519  0022F2  C08B  F090         	movff	___fttol@f1+1,??___fttol+2
  5520  0022F6  C08C  F091         	movff	___fttol@f1+2,??___fttol+3
  5521  0022FA  298E               	incf	??___fttol& (0+255),w,b
  5522  0022FC  6F92               	movwf	(??___fttol+4)& (0+255),b
  5523  0022FE  D004               	goto	u2650
  5524  002300                     u2655:
  5525  002300  90D8               	bcf	status,0,c
  5526  002302  3391               	rrcf	(??___fttol+3)& (0+255),f,b
  5527  002304  3390               	rrcf	(??___fttol+2)& (0+255),f,b
  5528  002306  338F               	rrcf	(??___fttol+1)& (0+255),f,b
  5529  002308                     u2650:
  5530  002308  2F92               	decfsz	(??___fttol+4)& (0+255),f,b
  5531  00230A  D7FA               	goto	u2655
  5532  00230C  0100               	movlb	0	; () banked
  5533  00230E  518F               	movf	(??___fttol+1)& (0+255),w,b
  5534  002310  6F93               	movwf	___fttol@sign1& (0+255),b
  5535                           
  5536                           ; BSR set to: 0
  5537  002312  8F8B               	bsf	(___fttol@f1+1)& (0+255),7,b
  5538                           
  5539                           ; BSR set to: 0
  5540  002314  0EFF               	movlw	255
  5541  002316  178A               	andwf	___fttol@f1& (0+255),f,b
  5542  002318  0EFF               	movlw	255
  5543  00231A  178B               	andwf	(___fttol@f1+1)& (0+255),f,b
  5544  00231C  0E00               	movlw	0
  5545  00231E  178C               	andwf	(___fttol@f1+2)& (0+255),f,b
  5546                           
  5547                           ; BSR set to: 0
  5548  002320  518A               	movf	___fttol@f1& (0+255),w,b
  5549  002322  6F94               	movwf	___fttol@lval& (0+255),b
  5550  002324  518B               	movf	(___fttol@f1+1)& (0+255),w,b
  5551  002326  6F95               	movwf	(___fttol@lval+1)& (0+255),b
  5552  002328  518C               	movf	(___fttol@f1+2)& (0+255),w,b
  5553  00232A  6F96               	movwf	(___fttol@lval+2)& (0+255),b
  5554  00232C  6B97               	clrf	(___fttol@lval+3)& (0+255),b
  5555                           
  5556                           ; BSR set to: 0
  5557  00232E  0E8E               	movlw	142
  5558  002330  5F98               	subwf	___fttol@exp1& (0+255),f,b
  5559                           
  5560                           ; BSR set to: 0
  5561  002332  AF98               	btfss	___fttol@exp1& (0+255),7,b
  5562  002334  D016               	goto	l597
  5563                           
  5564                           ; BSR set to: 0
  5565  002336  5198               	movf	___fttol@exp1& (0+255),w,b
  5566  002338  0A80               	xorlw	128
  5567  00233A  0F8F               	addlw	143
  5568  00233C  B0D8               	btfsc	status,0,c
  5569  00233E  D009               	goto	l598
  5570                           
  5571                           ; BSR set to: 0
  5572  002340  0E00               	movlw	0
  5573  002342  6F8A               	movwf	?___fttol& (0+255),b
  5574  002344  0E00               	movlw	0
  5575  002346  6F8B               	movwf	(?___fttol+1)& (0+255),b
  5576  002348  0E00               	movlw	0
  5577  00234A  6F8C               	movwf	(?___fttol+2)& (0+255),b
  5578  00234C  0E00               	movlw	0
  5579  00234E  6F8D               	movwf	(?___fttol+3)& (0+255),b
  5580                           
  5581                           ; BSR set to: 0
  5582  002350  0012               	return	
  5583  002352                     l598:
  5584                           
  5585                           ; BSR set to: 0
  5586                           
  5587                           ; BSR set to: 0
  5588                           
  5589                           ; BSR set to: 0
  5590  002352  90D8               	bcf	status,0,c
  5591  002354  3397               	rrcf	(___fttol@lval+3)& (0+255),f,b
  5592  002356  3396               	rrcf	(___fttol@lval+2)& (0+255),f,b
  5593  002358  3395               	rrcf	(___fttol@lval+1)& (0+255),f,b
  5594  00235A  3394               	rrcf	___fttol@lval& (0+255),f,b
  5595                           
  5596                           ; BSR set to: 0
  5597  00235C  3F98               	incfsz	___fttol@exp1& (0+255),f,b
  5598  00235E  D7F9               	goto	l598
  5599                           
  5600                           ; BSR set to: 0
  5601  002360  D015               	goto	u2690
  5602  002362                     l597:
  5603                           
  5604                           ; BSR set to: 0
  5605                           
  5606                           ; BSR set to: 0
  5607  002362  0E17               	movlw	23
  5608  002364  6598               	cpfsgt	___fttol@exp1& (0+255),b
  5609  002366  D00F               	goto	l603
  5610                           
  5611                           ; BSR set to: 0
  5612  002368  0E00               	movlw	0
  5613  00236A  6F8A               	movwf	?___fttol& (0+255),b
  5614  00236C  0E00               	movlw	0
  5615  00236E  6F8B               	movwf	(?___fttol+1)& (0+255),b
  5616  002370  0E00               	movlw	0
  5617  002372  6F8C               	movwf	(?___fttol+2)& (0+255),b
  5618  002374  0E00               	movlw	0
  5619  002376  6F8D               	movwf	(?___fttol+3)& (0+255),b
  5620                           
  5621                           ; BSR set to: 0
  5622  002378  0012               	return	
  5623  00237A                     
  5624                           ; BSR set to: 0
  5625                           
  5626                           ; BSR set to: 0
  5627  00237A  90D8               	bcf	status,0,c
  5628  00237C  3794               	rlcf	___fttol@lval& (0+255),f,b
  5629  00237E  3795               	rlcf	(___fttol@lval+1)& (0+255),f,b
  5630  002380  3796               	rlcf	(___fttol@lval+2)& (0+255),f,b
  5631  002382  3797               	rlcf	(___fttol@lval+3)& (0+255),f,b
  5632  002384  0798               	decf	___fttol@exp1& (0+255),f,b
  5633  002386                     l603:
  5634                           
  5635                           ; BSR set to: 0
  5636                           
  5637                           ; BSR set to: 0
  5638  002386  5198               	movf	___fttol@exp1& (0+255),w,b
  5639  002388  A4D8               	btfss	status,2,c
  5640  00238A  D7F7               	goto	l604
  5641  00238C                     u2690:
  5642                           
  5643                           ; BSR set to: 0
  5644                           
  5645                           ; BSR set to: 0
  5646                           
  5647                           ; BSR set to: 0
  5648  00238C  5193               	movf	___fttol@sign1& (0+255),w,b
  5649  00238E  B4D8               	btfsc	status,2,c
  5650  002390  D008               	goto	l606
  5651                           
  5652                           ; BSR set to: 0
  5653  002392  1F97               	comf	(___fttol@lval+3)& (0+255),f,b
  5654  002394  1F96               	comf	(___fttol@lval+2)& (0+255),f,b
  5655  002396  1F95               	comf	(___fttol@lval+1)& (0+255),f,b
  5656  002398  6D94               	negf	___fttol@lval& (0+255),b
  5657  00239A  0E00               	movlw	0
  5658  00239C  2395               	addwfc	(___fttol@lval+1)& (0+255),f,b
  5659  00239E  2396               	addwfc	(___fttol@lval+2)& (0+255),f,b
  5660  0023A0  2397               	addwfc	(___fttol@lval+3)& (0+255),f,b
  5661  0023A2                     l606:
  5662                           
  5663                           ; BSR set to: 0
  5664                           
  5665                           ; BSR set to: 0
  5666  0023A2  C094  F08A         	movff	___fttol@lval,?___fttol
  5667  0023A6  C095  F08B         	movff	___fttol@lval+1,?___fttol+1
  5668  0023AA  C096  F08C         	movff	___fttol@lval+2,?___fttol+2
  5669  0023AE  C097  F08D         	movff	___fttol@lval+3,?___fttol+3
  5670  0023B2  0012               	return	
  5671  0023B4                     __end_of___fttol:
  5672                           	opt stack 0
  5673                           tblptru	equ	0xFF8
  5674                           tblptrh	equ	0xFF7
  5675                           tblptrl	equ	0xFF6
  5676                           tablat	equ	0xFF5
  5677                           prodh	equ	0xFF4
  5678                           prodl	equ	0xFF3
  5679                           postinc0	equ	0xFEE
  5680                           wreg	equ	0xFE8
  5681                           indf2	equ	0xFDF
  5682                           postinc2	equ	0xFDE
  5683                           postdec2	equ	0xFDD
  5684                           fsr2h	equ	0xFDA
  5685                           fsr2l	equ	0xFD9
  5686                           status	equ	0xFD8
  5687                           
  5688 ;; *************** function ___ftsub *****************
  5689 ;; Defined at:
  5690 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  5691 ;; Parameters:    Size  Location     Type
  5692 ;;  f1              3   57[BANK0 ] float 
  5693 ;;  f2              3   60[BANK0 ] float 
  5694 ;; Auto vars:     Size  Location     Type
  5695 ;;		None
  5696 ;; Return value:  Size  Location     Type
  5697 ;;                  3   57[BANK0 ] float 
  5698 ;; Registers used:
  5699 ;;		wreg, status,2, status,0, cstack
  5700 ;; Tracked objects:
  5701 ;;		On entry : 0/0
  5702 ;;		On exit  : 0/0
  5703 ;;		Unchanged: 0/0
  5704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5705 ;;      Params:         0       6       0       0       0       0       0       0       0
  5706 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5707 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5708 ;;      Totals:         0       6       0       0       0       0       0       0       0
  5709 ;;Total ram usage:        6 bytes
  5710 ;; Hardware stack levels used:    1
  5711 ;; Hardware stack levels required when called:    5
  5712 ;; This function calls:
  5713 ;;		___ftadd
  5714 ;; This function is called by:
  5715 ;;		_sprintf
  5716 ;; This function uses a non-reentrant model
  5717 ;;
  5718                           
  5719                           	psect	text15
  5720  002C66                     __ptext15:
  5721                           	opt stack 0
  5722  002C66                     ___ftsub:
  5723                           	opt stack 24
  5724                           
  5725                           ; BSR set to: 0
  5726                           ;incstack = 0
  5727  002C66  0100               	movlb	0	; () banked
  5728  002C68  519C               	movf	___ftsub@f2& (0+255),w,b
  5729  002C6A  119D               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  5730  002C6C  119E               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  5731  002C6E  B4D8               	btfsc	status,2,c
  5732  002C70  D006               	goto	l591
  5733                           
  5734                           ; BSR set to: 0
  5735  002C72  0E00               	movlw	0
  5736  002C74  1B9C               	xorwf	___ftsub@f2& (0+255),f,b
  5737  002C76  0E00               	movlw	0
  5738  002C78  1B9D               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  5739  002C7A  0E80               	movlw	128
  5740  002C7C  1B9E               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  5741  002C7E                     l591:
  5742                           
  5743                           ; BSR set to: 0
  5744                           
  5745                           ; BSR set to: 0
  5746  002C7E  C099  F08D         	movff	___ftsub@f1,___ftadd@f1
  5747  002C82  C09A  F08E         	movff	___ftsub@f1+1,___ftadd@f1+1
  5748  002C86  C09B  F08F         	movff	___ftsub@f1+2,___ftadd@f1+2
  5749  002C8A  C09C  F090         	movff	___ftsub@f2,___ftadd@f2
  5750  002C8E  C09D  F091         	movff	___ftsub@f2+1,___ftadd@f2+1
  5751  002C92  C09E  F092         	movff	___ftsub@f2+2,___ftadd@f2+2
  5752  002C96  EC4A  F00C         	call	___ftadd	;wreg free
  5753  002C9A  C08D  F099         	movff	?___ftadd,?___ftsub
  5754  002C9E  C08E  F09A         	movff	?___ftadd+1,?___ftsub+1
  5755  002CA2  C08F  F09B         	movff	?___ftadd+2,?___ftsub+2
  5756  002CA6  0012               	return	
  5757  002CA8                     __end_of___ftsub:
  5758                           	opt stack 0
  5759                           tblptru	equ	0xFF8
  5760                           tblptrh	equ	0xFF7
  5761                           tblptrl	equ	0xFF6
  5762                           tablat	equ	0xFF5
  5763                           prodh	equ	0xFF4
  5764                           prodl	equ	0xFF3
  5765                           postinc0	equ	0xFEE
  5766                           wreg	equ	0xFE8
  5767                           indf2	equ	0xFDF
  5768                           postinc2	equ	0xFDE
  5769                           postdec2	equ	0xFDD
  5770                           fsr2h	equ	0xFDA
  5771                           fsr2l	equ	0xFD9
  5772                           status	equ	0xFD8
  5773                           
  5774 ;; *************** function ___ftadd *****************
  5775 ;; Defined at:
  5776 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  5777 ;; Parameters:    Size  Location     Type
  5778 ;;  f1              3   45[BANK0 ] float 
  5779 ;;  f2              3   48[BANK0 ] float 
  5780 ;; Auto vars:     Size  Location     Type
  5781 ;;  exp1            1   56[BANK0 ] unsigned char 
  5782 ;;  exp2            1   55[BANK0 ] unsigned char 
  5783 ;;  sign            1   54[BANK0 ] unsigned char 
  5784 ;; Return value:  Size  Location     Type
  5785 ;;                  3   45[BANK0 ] float 
  5786 ;; Registers used:
  5787 ;;		wreg, status,2, status,0, cstack
  5788 ;; Tracked objects:
  5789 ;;		On entry : 0/0
  5790 ;;		On exit  : 0/0
  5791 ;;		Unchanged: 0/0
  5792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5793 ;;      Params:         0       6       0       0       0       0       0       0       0
  5794 ;;      Locals:         0       3       0       0       0       0       0       0       0
  5795 ;;      Temps:          0       3       0       0       0       0       0       0       0
  5796 ;;      Totals:         0      12       0       0       0       0       0       0       0
  5797 ;;Total ram usage:       12 bytes
  5798 ;; Hardware stack levels used:    1
  5799 ;; Hardware stack levels required when called:    4
  5800 ;; This function calls:
  5801 ;;		___ftpack
  5802 ;; This function is called by:
  5803 ;;		_main
  5804 ;;		_sprintf
  5805 ;;		___ftsub
  5806 ;; This function uses a non-reentrant model
  5807 ;;
  5808                           
  5809                           	psect	text16
  5810  001894                     __ptext16:
  5811                           	opt stack 0
  5812  001894                     ___ftadd:
  5813                           	opt stack 24
  5814                           
  5815                           ;incstack = 0
  5816  001894  C08F  F093         	movff	___ftadd@f1+2,??___ftadd
  5817  001898  0100               	movlb	0	; () banked
  5818  00189A  6B94               	clrf	(??___ftadd+1)& (0+255),b
  5819  00189C  6B95               	clrf	(??___ftadd+2)& (0+255),b
  5820  00189E  358E               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  5821  0018A0  3793               	rlcf	??___ftadd& (0+255),f,b
  5822  0018A2  E301               	bnc	u1881
  5823  0018A4  8194               	bsf	(??___ftadd+1)& (0+255),0,b
  5824  0018A6                     u1881:
  5825  0018A6  5193               	movf	??___ftadd& (0+255),w,b
  5826  0018A8  6F98               	movwf	___ftadd@exp1& (0+255),b
  5827  0018AA  C092  F093         	movff	___ftadd@f2+2,??___ftadd
  5828  0018AE  6B94               	clrf	(??___ftadd+1)& (0+255),b
  5829  0018B0  6B95               	clrf	(??___ftadd+2)& (0+255),b
  5830  0018B2  3591               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  5831  0018B4  3793               	rlcf	??___ftadd& (0+255),f,b
  5832  0018B6  E301               	bnc	u1891
  5833  0018B8  8194               	bsf	(??___ftadd+1)& (0+255),0,b
  5834  0018BA                     u1891:
  5835  0018BA  5193               	movf	??___ftadd& (0+255),w,b
  5836  0018BC  6F97               	movwf	___ftadd@exp2& (0+255),b
  5837                           
  5838                           ; BSR set to: 0
  5839  0018BE  5198               	movf	___ftadd@exp1& (0+255),w,b
  5840  0018C0  B4D8               	btfsc	status,2,c
  5841  0018C2  D00B               	goto	u1920
  5842                           
  5843                           ; BSR set to: 0
  5844  0018C4  5197               	movf	___ftadd@exp2& (0+255),w,b
  5845  0018C6  5D98               	subwf	___ftadd@exp1& (0+255),w,b
  5846  0018C8  B0D8               	btfsc	status,0,c
  5847  0018CA  D00E               	goto	l509
  5848                           
  5849                           ; BSR set to: 0
  5850  0018CC  5198               	movf	___ftadd@exp1& (0+255),w,b
  5851  0018CE  0800               	sublw	0
  5852  0018D0  2597               	addwf	___ftadd@exp2& (0+255),w,b
  5853  0018D2  6F93               	movwf	??___ftadd& (0+255),b
  5854  0018D4  0E18               	movlw	24
  5855  0018D6  6593               	cpfsgt	??___ftadd& (0+255),b
  5856  0018D8  D007               	goto	l509
  5857  0018DA                     u1920:
  5858                           
  5859                           ; BSR set to: 0
  5860  0018DA  C090  F08D         	movff	___ftadd@f2,?___ftadd
  5861  0018DE  C091  F08E         	movff	___ftadd@f2+1,?___ftadd+1
  5862  0018E2  C092  F08F         	movff	___ftadd@f2+2,?___ftadd+2
  5863  0018E6  0012               	return	
  5864  0018E8                     l509:
  5865                           
  5866                           ; BSR set to: 0
  5867                           
  5868                           ; BSR set to: 0
  5869  0018E8  5197               	movf	___ftadd@exp2& (0+255),w,b
  5870  0018EA  B4D8               	btfsc	status,2,c
  5871  0018EC  D00B               	goto	u1950
  5872                           
  5873                           ; BSR set to: 0
  5874  0018EE  5198               	movf	___ftadd@exp1& (0+255),w,b
  5875  0018F0  5D97               	subwf	___ftadd@exp2& (0+255),w,b
  5876  0018F2  B0D8               	btfsc	status,0,c
  5877  0018F4  D00E               	goto	l513
  5878                           
  5879                           ; BSR set to: 0
  5880  0018F6  5197               	movf	___ftadd@exp2& (0+255),w,b
  5881  0018F8  0800               	sublw	0
  5882  0018FA  2598               	addwf	___ftadd@exp1& (0+255),w,b
  5883  0018FC  6F93               	movwf	??___ftadd& (0+255),b
  5884  0018FE  0E18               	movlw	24
  5885  001900  6593               	cpfsgt	??___ftadd& (0+255),b
  5886  001902  D007               	goto	l513
  5887  001904                     u1950:
  5888                           
  5889                           ; BSR set to: 0
  5890  001904  C08D  F08D         	movff	___ftadd@f1,?___ftadd
  5891  001908  C08E  F08E         	movff	___ftadd@f1+1,?___ftadd+1
  5892  00190C  C08F  F08F         	movff	___ftadd@f1+2,?___ftadd+2
  5893  001910  0012               	return	
  5894  001912                     l513:
  5895                           
  5896                           ; BSR set to: 0
  5897                           
  5898                           ; BSR set to: 0
  5899  001912  0E06               	movlw	6
  5900  001914  6F96               	movwf	___ftadd@sign& (0+255),b
  5901                           
  5902                           ; BSR set to: 0
  5903  001916  BF8F               	btfsc	(___ftadd@f1+2)& (0+255),7,b
  5904                           
  5905                           ; BSR set to: 0
  5906  001918  8F96               	bsf	___ftadd@sign& (0+255),7,b
  5907                           
  5908                           ; BSR set to: 0
  5909                           
  5910                           ; BSR set to: 0
  5911  00191A  BF92               	btfsc	(___ftadd@f2+2)& (0+255),7,b
  5912                           
  5913                           ; BSR set to: 0
  5914  00191C  8D96               	bsf	___ftadd@sign& (0+255),6,b
  5915                           
  5916                           ; BSR set to: 0
  5917  00191E  8F8E               	bsf	(___ftadd@f1+1)& (0+255),7,b
  5918                           
  5919                           ; BSR set to: 0
  5920  001920  0EFF               	movlw	255
  5921  001922  178D               	andwf	___ftadd@f1& (0+255),f,b
  5922  001924  0EFF               	movlw	255
  5923  001926  178E               	andwf	(___ftadd@f1+1)& (0+255),f,b
  5924  001928  0E00               	movlw	0
  5925  00192A  178F               	andwf	(___ftadd@f1+2)& (0+255),f,b
  5926  00192C  8F91               	bsf	(___ftadd@f2+1)& (0+255),7,b
  5927                           
  5928                           ; BSR set to: 0
  5929  00192E  0EFF               	movlw	255
  5930  001930  1790               	andwf	___ftadd@f2& (0+255),f,b
  5931  001932  0EFF               	movlw	255
  5932  001934  1791               	andwf	(___ftadd@f2+1)& (0+255),f,b
  5933  001936  0E00               	movlw	0
  5934  001938  1792               	andwf	(___ftadd@f2+2)& (0+255),f,b
  5935                           
  5936                           ; BSR set to: 0
  5937  00193A  5197               	movf	___ftadd@exp2& (0+255),w,b
  5938  00193C  5D98               	subwf	___ftadd@exp1& (0+255),w,b
  5939  00193E  B0D8               	btfsc	status,0,c
  5940  001940  D01B               	goto	l518
  5941  001942                     u1980:
  5942                           
  5943                           ; BSR set to: 0
  5944                           
  5945                           ; BSR set to: 0
  5946  001942  90D8               	bcf	status,0,c
  5947  001944  3790               	rlcf	___ftadd@f2& (0+255),f,b
  5948  001946  3791               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  5949  001948  3792               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  5950  00194A  0797               	decf	___ftadd@exp2& (0+255),f,b
  5951                           
  5952                           ; BSR set to: 0
  5953  00194C  5198               	movf	___ftadd@exp1& (0+255),w,b
  5954  00194E  1997               	xorwf	___ftadd@exp2& (0+255),w,b
  5955  001950  B4D8               	btfsc	status,2,c
  5956  001952  D00D               	goto	l523
  5957                           
  5958                           ; BSR set to: 0
  5959  001954  0796               	decf	___ftadd@sign& (0+255),f,b
  5960  001956  C096  F093         	movff	___ftadd@sign,??___ftadd
  5961  00195A  0E07               	movlw	7
  5962  00195C  1793               	andwf	??___ftadd& (0+255),f,b
  5963  00195E  B4D8               	btfsc	status,2,c
  5964  001960  D006               	goto	l523
  5965  001962  D7EF               	goto	u1980
  5966  001964                     
  5967                           ; BSR set to: 0
  5968                           
  5969                           ; BSR set to: 0
  5970  001964  90D8               	bcf	status,0,c
  5971  001966  338F               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  5972  001968  338E               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  5973  00196A  338D               	rrcf	___ftadd@f1& (0+255),f,b
  5974  00196C  2B98               	incf	___ftadd@exp1& (0+255),f,b
  5975  00196E                     l523:
  5976                           
  5977                           ; BSR set to: 0
  5978                           
  5979                           ; BSR set to: 0
  5980  00196E  5197               	movf	___ftadd@exp2& (0+255),w,b
  5981  001970  1998               	xorwf	___ftadd@exp1& (0+255),w,b
  5982  001972  B4D8               	btfsc	status,2,c
  5983  001974  D01F               	goto	u2050
  5984  001976  D7F6               	goto	l524
  5985  001978                     l518:
  5986                           
  5987                           ; BSR set to: 0
  5988                           
  5989                           ; BSR set to: 0
  5990  001978  5198               	movf	___ftadd@exp1& (0+255),w,b
  5991  00197A  5D97               	subwf	___ftadd@exp2& (0+255),w,b
  5992  00197C  B0D8               	btfsc	status,0,c
  5993  00197E  D01A               	goto	u2050
  5994  001980                     u2020:
  5995                           
  5996                           ; BSR set to: 0
  5997                           
  5998                           ; BSR set to: 0
  5999  001980  90D8               	bcf	status,0,c
  6000  001982  378D               	rlcf	___ftadd@f1& (0+255),f,b
  6001  001984  378E               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  6002  001986  378F               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  6003  001988  0798               	decf	___ftadd@exp1& (0+255),f,b
  6004                           
  6005                           ; BSR set to: 0
  6006  00198A  5198               	movf	___ftadd@exp1& (0+255),w,b
  6007  00198C  1997               	xorwf	___ftadd@exp2& (0+255),w,b
  6008  00198E  B4D8               	btfsc	status,2,c
  6009  001990  D00D               	goto	l532
  6010                           
  6011                           ; BSR set to: 0
  6012  001992  0796               	decf	___ftadd@sign& (0+255),f,b
  6013  001994  C096  F093         	movff	___ftadd@sign,??___ftadd
  6014  001998  0E07               	movlw	7
  6015  00199A  1793               	andwf	??___ftadd& (0+255),f,b
  6016  00199C  B4D8               	btfsc	status,2,c
  6017  00199E  D006               	goto	l532
  6018  0019A0  D7EF               	goto	u2020
  6019  0019A2                     
  6020                           ; BSR set to: 0
  6021                           
  6022                           ; BSR set to: 0
  6023  0019A2  90D8               	bcf	status,0,c
  6024  0019A4  3392               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  6025  0019A6  3391               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  6026  0019A8  3390               	rrcf	___ftadd@f2& (0+255),f,b
  6027  0019AA  2B97               	incf	___ftadd@exp2& (0+255),f,b
  6028  0019AC                     l532:
  6029                           
  6030                           ; BSR set to: 0
  6031                           
  6032                           ; BSR set to: 0
  6033  0019AC  5197               	movf	___ftadd@exp2& (0+255),w,b
  6034  0019AE  1998               	xorwf	___ftadd@exp1& (0+255),w,b
  6035  0019B0  A4D8               	btfss	status,2,c
  6036  0019B2  D7F7               	goto	l533
  6037  0019B4                     u2050:
  6038                           
  6039                           ; BSR set to: 0
  6040                           
  6041                           ; BSR set to: 0
  6042                           
  6043                           ; BSR set to: 0
  6044  0019B4  AF96               	btfss	___ftadd@sign& (0+255),7,b
  6045  0019B6  D00C               	goto	l535
  6046                           
  6047                           ; BSR set to: 0
  6048  0019B8  0EFF               	movlw	255
  6049  0019BA  1B8D               	xorwf	___ftadd@f1& (0+255),f,b
  6050  0019BC  0EFF               	movlw	255
  6051  0019BE  1B8E               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  6052  0019C0  0EFF               	movlw	255
  6053  0019C2  1B8F               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  6054  0019C4  0E01               	movlw	1
  6055  0019C6  278D               	addwf	___ftadd@f1& (0+255),f,b
  6056  0019C8  0E00               	movlw	0
  6057  0019CA  238E               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  6058  0019CC  0E00               	movlw	0
  6059  0019CE  238F               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  6060  0019D0                     l535:
  6061                           
  6062                           ; BSR set to: 0
  6063  0019D0  AD96               	btfss	___ftadd@sign& (0+255),6,b
  6064  0019D2  D00C               	goto	l536
  6065                           
  6066                           ; BSR set to: 0
  6067  0019D4  0EFF               	movlw	255
  6068  0019D6  1B90               	xorwf	___ftadd@f2& (0+255),f,b
  6069  0019D8  0EFF               	movlw	255
  6070  0019DA  1B91               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  6071  0019DC  0EFF               	movlw	255
  6072  0019DE  1B92               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  6073  0019E0  0E01               	movlw	1
  6074  0019E2  2790               	addwf	___ftadd@f2& (0+255),f,b
  6075  0019E4  0E00               	movlw	0
  6076  0019E6  2391               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  6077  0019E8  0E00               	movlw	0
  6078  0019EA  2392               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  6079  0019EC                     l536:
  6080                           
  6081                           ; BSR set to: 0
  6082                           
  6083                           ; BSR set to: 0
  6084  0019EC  0E00               	movlw	0
  6085  0019EE  6F96               	movwf	___ftadd@sign& (0+255),b
  6086                           
  6087                           ; BSR set to: 0
  6088  0019F0  518D               	movf	___ftadd@f1& (0+255),w,b
  6089  0019F2  2790               	addwf	___ftadd@f2& (0+255),f,b
  6090  0019F4  518E               	movf	(___ftadd@f1+1)& (0+255),w,b
  6091  0019F6  2391               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  6092  0019F8  518F               	movf	(___ftadd@f1+2)& (0+255),w,b
  6093  0019FA  2392               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  6094                           
  6095                           ; BSR set to: 0
  6096  0019FC  AF92               	btfss	(___ftadd@f2+2)& (0+255),7,b
  6097  0019FE  D00E               	goto	l537
  6098                           
  6099                           ; BSR set to: 0
  6100  001A00  0EFF               	movlw	255
  6101  001A02  1B90               	xorwf	___ftadd@f2& (0+255),f,b
  6102  001A04  0EFF               	movlw	255
  6103  001A06  1B91               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  6104  001A08  0EFF               	movlw	255
  6105  001A0A  1B92               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  6106  001A0C  0E01               	movlw	1
  6107  001A0E  2790               	addwf	___ftadd@f2& (0+255),f,b
  6108  001A10  0E00               	movlw	0
  6109  001A12  2391               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  6110  001A14  0E00               	movlw	0
  6111  001A16  2392               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  6112                           
  6113                           ; BSR set to: 0
  6114  001A18  0E01               	movlw	1
  6115  001A1A  6F96               	movwf	___ftadd@sign& (0+255),b
  6116  001A1C                     l537:
  6117                           
  6118                           ; BSR set to: 0
  6119                           
  6120                           ; BSR set to: 0
  6121  001A1C  C090  F060         	movff	___ftadd@f2,___ftpack@arg
  6122  001A20  C091  F061         	movff	___ftadd@f2+1,___ftpack@arg+1
  6123  001A24  C092  F062         	movff	___ftadd@f2+2,___ftpack@arg+2
  6124  001A28  C098  F063         	movff	___ftadd@exp1,___ftpack@exp
  6125  001A2C  C096  F064         	movff	___ftadd@sign,___ftpack@sign
  6126  001A30  ECB6  F013         	call	___ftpack	;wreg free
  6127  001A34  C060  F08D         	movff	?___ftpack,?___ftadd
  6128  001A38  C061  F08E         	movff	?___ftpack+1,?___ftadd+1
  6129  001A3C  C062  F08F         	movff	?___ftpack+2,?___ftadd+2
  6130  001A40  0012               	return	
  6131  001A42                     __end_of___ftadd:
  6132                           	opt stack 0
  6133                           tblptru	equ	0xFF8
  6134                           tblptrh	equ	0xFF7
  6135                           tblptrl	equ	0xFF6
  6136                           tablat	equ	0xFF5
  6137                           prodh	equ	0xFF4
  6138                           prodl	equ	0xFF3
  6139                           postinc0	equ	0xFEE
  6140                           wreg	equ	0xFE8
  6141                           indf2	equ	0xFDF
  6142                           postinc2	equ	0xFDE
  6143                           postdec2	equ	0xFDD
  6144                           fsr2h	equ	0xFDA
  6145                           fsr2l	equ	0xFD9
  6146                           status	equ	0xFD8
  6147                           
  6148 ;; *************** function ___ftneg *****************
  6149 ;; Defined at:
  6150 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
  6151 ;; Parameters:    Size  Location     Type
  6152 ;;  f1              3    0[BANK0 ] float 
  6153 ;; Auto vars:     Size  Location     Type
  6154 ;;		None
  6155 ;; Return value:  Size  Location     Type
  6156 ;;                  3    0[BANK0 ] float 
  6157 ;; Registers used:
  6158 ;;		wreg, status,2, status,0
  6159 ;; Tracked objects:
  6160 ;;		On entry : 0/0
  6161 ;;		On exit  : 0/0
  6162 ;;		Unchanged: 0/0
  6163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6164 ;;      Params:         0       3       0       0       0       0       0       0       0
  6165 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6166 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6167 ;;      Totals:         0       3       0       0       0       0       0       0       0
  6168 ;;Total ram usage:        3 bytes
  6169 ;; Hardware stack levels used:    1
  6170 ;; Hardware stack levels required when called:    3
  6171 ;; This function calls:
  6172 ;;		Nothing
  6173 ;; This function is called by:
  6174 ;;		_sprintf
  6175 ;; This function uses a non-reentrant model
  6176 ;;
  6177                           
  6178                           	psect	text17
  6179  002CF6                     __ptext17:
  6180                           	opt stack 0
  6181  002CF6                     ___ftneg:
  6182                           	opt stack 26
  6183                           
  6184                           ;incstack = 0
  6185  002CF6  0100               	movlb	0	; () banked
  6186  002CF8  5160               	movf	___ftneg@f1& (0+255),w,b
  6187  002CFA  1161               	iorwf	(___ftneg@f1+1)& (0+255),w,b
  6188  002CFC  1162               	iorwf	(___ftneg@f1+2)& (0+255),w,b
  6189  002CFE  B4D8               	btfsc	status,2,c
  6190  002D00  D006               	goto	l585
  6191                           
  6192                           ; BSR set to: 0
  6193  002D02  0E00               	movlw	0
  6194  002D04  1B60               	xorwf	___ftneg@f1& (0+255),f,b
  6195  002D06  0E00               	movlw	0
  6196  002D08  1B61               	xorwf	(___ftneg@f1+1)& (0+255),f,b
  6197  002D0A  0E80               	movlw	128
  6198  002D0C  1B62               	xorwf	(___ftneg@f1+2)& (0+255),f,b
  6199  002D0E                     l585:
  6200                           
  6201                           ; BSR set to: 0
  6202  002D0E  C060  F060         	movff	___ftneg@f1,?___ftneg
  6203  002D12  C061  F061         	movff	___ftneg@f1+1,?___ftneg+1
  6204  002D16  C062  F062         	movff	___ftneg@f1+2,?___ftneg+2
  6205                           
  6206                           ; BSR set to: 0
  6207  002D1A  0012               	return		;funcret
  6208  002D1C                     __end_of___ftneg:
  6209                           	opt stack 0
  6210                           tblptru	equ	0xFF8
  6211                           tblptrh	equ	0xFF7
  6212                           tblptrl	equ	0xFF6
  6213                           tablat	equ	0xFF5
  6214                           prodh	equ	0xFF4
  6215                           prodl	equ	0xFF3
  6216                           postinc0	equ	0xFEE
  6217                           wreg	equ	0xFE8
  6218                           indf2	equ	0xFDF
  6219                           postinc2	equ	0xFDE
  6220                           postdec2	equ	0xFDD
  6221                           fsr2h	equ	0xFDA
  6222                           fsr2l	equ	0xFD9
  6223                           status	equ	0xFD8
  6224                           
  6225 ;; *************** function ___ftge *****************
  6226 ;; Defined at:
  6227 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  6228 ;; Parameters:    Size  Location     Type
  6229 ;;  ff1             3    0[BANK0 ] float 
  6230 ;;  ff2             3    3[BANK0 ] float 
  6231 ;; Auto vars:     Size  Location     Type
  6232 ;;		None
  6233 ;; Return value:  Size  Location     Type
  6234 ;;		None               void
  6235 ;; Registers used:
  6236 ;;		wreg, status,2, status,0
  6237 ;; Tracked objects:
  6238 ;;		On entry : 0/0
  6239 ;;		On exit  : 0/0
  6240 ;;		Unchanged: 0/0
  6241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6242 ;;      Params:         0       6       0       0       0       0       0       0       0
  6243 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6244 ;;      Temps:          0       3       0       0       0       0       0       0       0
  6245 ;;      Totals:         0       9       0       0       0       0       0       0       0
  6246 ;;Total ram usage:        9 bytes
  6247 ;; Hardware stack levels used:    1
  6248 ;; Hardware stack levels required when called:    3
  6249 ;; This function calls:
  6250 ;;		Nothing
  6251 ;; This function is called by:
  6252 ;;		_sprintf
  6253 ;; This function uses a non-reentrant model
  6254 ;;
  6255                           
  6256                           	psect	text18
  6257  0028CA                     __ptext18:
  6258                           	opt stack 0
  6259  0028CA                     ___ftge:
  6260                           	opt stack 26
  6261                           
  6262                           ; BSR set to: 0
  6263                           ;incstack = 0
  6264  0028CA  0100               	movlb	0	; () banked
  6265  0028CC  AF62               	btfss	(___ftge@ff1+2)& (0+255),7,b
  6266  0028CE  D016               	goto	l567
  6267                           
  6268                           ; BSR set to: 0
  6269  0028D0  C060  F066         	movff	___ftge@ff1,??___ftge
  6270  0028D4  C061  F067         	movff	___ftge@ff1+1,??___ftge+1
  6271  0028D8  C062  F068         	movff	___ftge@ff1+2,??___ftge+2
  6272  0028DC  1F66               	comf	??___ftge& (0+255),f,b
  6273  0028DE  1F67               	comf	(??___ftge+1)& (0+255),f,b
  6274  0028E0  1F68               	comf	(??___ftge+2)& (0+255),f,b
  6275  0028E2  2B66               	incf	??___ftge& (0+255),f,b
  6276  0028E4  0E00               	movlw	0
  6277  0028E6  2367               	addwfc	(??___ftge+1)& (0+255),f,b
  6278  0028E8  2368               	addwfc	(??___ftge+2)& (0+255),f,b
  6279  0028EA  0E00               	movlw	0
  6280  0028EC  2566               	addwf	??___ftge& (0+255),w,b
  6281  0028EE  6F60               	movwf	___ftge@ff1& (0+255),b
  6282  0028F0  0E00               	movlw	0
  6283  0028F2  2167               	addwfc	(??___ftge+1)& (0+255),w,b
  6284  0028F4  6F61               	movwf	(___ftge@ff1+1)& (0+255),b
  6285  0028F6  0E80               	movlw	128
  6286  0028F8  2168               	addwfc	(??___ftge+2)& (0+255),w,b
  6287  0028FA  6F62               	movwf	(___ftge@ff1+2)& (0+255),b
  6288  0028FC                     l567:
  6289                           
  6290                           ; BSR set to: 0
  6291                           
  6292                           ; BSR set to: 0
  6293  0028FC  AF65               	btfss	(___ftge@ff2+2)& (0+255),7,b
  6294  0028FE  D016               	goto	l568
  6295                           
  6296                           ; BSR set to: 0
  6297  002900  C063  F066         	movff	___ftge@ff2,??___ftge
  6298  002904  C064  F067         	movff	___ftge@ff2+1,??___ftge+1
  6299  002908  C065  F068         	movff	___ftge@ff2+2,??___ftge+2
  6300  00290C  1F66               	comf	??___ftge& (0+255),f,b
  6301  00290E  1F67               	comf	(??___ftge+1)& (0+255),f,b
  6302  002910  1F68               	comf	(??___ftge+2)& (0+255),f,b
  6303  002912  2B66               	incf	??___ftge& (0+255),f,b
  6304  002914  0E00               	movlw	0
  6305  002916  2367               	addwfc	(??___ftge+1)& (0+255),f,b
  6306  002918  2368               	addwfc	(??___ftge+2)& (0+255),f,b
  6307  00291A  0E00               	movlw	0
  6308  00291C  2566               	addwf	??___ftge& (0+255),w,b
  6309  00291E  6F63               	movwf	___ftge@ff2& (0+255),b
  6310  002920  0E00               	movlw	0
  6311  002922  2167               	addwfc	(??___ftge+1)& (0+255),w,b
  6312  002924  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  6313  002926  0E80               	movlw	128
  6314  002928  2168               	addwfc	(??___ftge+2)& (0+255),w,b
  6315  00292A  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  6316  00292C                     l568:
  6317                           
  6318                           ; BSR set to: 0
  6319                           
  6320                           ; BSR set to: 0
  6321  00292C  0E00               	movlw	0
  6322  00292E  1B60               	xorwf	___ftge@ff1& (0+255),f,b
  6323  002930  0E00               	movlw	0
  6324  002932  1B61               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  6325  002934  0E80               	movlw	128
  6326  002936  1B62               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  6327                           
  6328                           ; BSR set to: 0
  6329  002938  0E00               	movlw	0
  6330  00293A  1B63               	xorwf	___ftge@ff2& (0+255),f,b
  6331  00293C  0E00               	movlw	0
  6332  00293E  1B64               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  6333  002940  0E80               	movlw	128
  6334  002942  1B65               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  6335  002944  5163               	movf	___ftge@ff2& (0+255),w,b
  6336  002946  5D60               	subwf	___ftge@ff1& (0+255),w,b
  6337  002948  5164               	movf	(___ftge@ff2+1)& (0+255),w,b
  6338  00294A  5961               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  6339  00294C  5165               	movf	(___ftge@ff2+2)& (0+255),w,b
  6340  00294E  5962               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  6341  002950  B0D8               	btfsc	status,0,c
  6342  002952  D002               	goto	l2185
  6343                           
  6344                           ; BSR set to: 0
  6345  002954  90D8               	bcf	status,0,c
  6346  002956  0012               	return	
  6347  002958                     l2185:
  6348                           
  6349                           ; BSR set to: 0
  6350                           
  6351                           ; BSR set to: 0
  6352  002958  80D8               	bsf	status,0,c
  6353                           
  6354                           ; BSR set to: 0
  6355  00295A  0012               	return	
  6356  00295C                     __end_of___ftge:
  6357                           	opt stack 0
  6358                           tblptru	equ	0xFF8
  6359                           tblptrh	equ	0xFF7
  6360                           tblptrl	equ	0xFF6
  6361                           tablat	equ	0xFF5
  6362                           prodh	equ	0xFF4
  6363                           prodl	equ	0xFF3
  6364                           postinc0	equ	0xFEE
  6365                           wreg	equ	0xFE8
  6366                           indf2	equ	0xFDF
  6367                           postinc2	equ	0xFDE
  6368                           postdec2	equ	0xFDD
  6369                           fsr2h	equ	0xFDA
  6370                           fsr2l	equ	0xFD9
  6371                           status	equ	0xFD8
  6372                           
  6373 ;; *************** function _configstandard *****************
  6374 ;; Defined at:
  6375 ;;		line 10 in file "configstandard.c"
  6376 ;; Parameters:    Size  Location     Type
  6377 ;;		None
  6378 ;; Auto vars:     Size  Location     Type
  6379 ;;		None
  6380 ;; Return value:  Size  Location     Type
  6381 ;;                  1    wreg      void 
  6382 ;; Registers used:
  6383 ;;		wreg, status,2
  6384 ;; Tracked objects:
  6385 ;;		On entry : 0/0
  6386 ;;		On exit  : 0/0
  6387 ;;		Unchanged: 0/0
  6388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6389 ;;      Params:         0       0       0       0       0       0       0       0       0
  6390 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6391 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6392 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6393 ;;Total ram usage:        0 bytes
  6394 ;; Hardware stack levels used:    1
  6395 ;; Hardware stack levels required when called:    3
  6396 ;; This function calls:
  6397 ;;		Nothing
  6398 ;; This function is called by:
  6399 ;;		_main
  6400 ;; This function uses a non-reentrant model
  6401 ;;
  6402                           
  6403                           	psect	text19
  6404  002C08                     __ptext19:
  6405                           	opt stack 0
  6406  002C08                     _configstandard:
  6407                           	opt stack 27
  6408                           
  6409                           ;configstandard.c: 16: ADCON0bits.CHS3 = 0;
  6410                           
  6411                           ; BSR set to: 0
  6412                           ;incstack = 0
  6413  002C08  9AC2               	bcf	4034,5,c	;volatile
  6414                           
  6415                           ;configstandard.c: 17: ADCON0bits.CHS2 = 0;
  6416  002C0A  98C2               	bcf	4034,4,c	;volatile
  6417                           
  6418                           ;configstandard.c: 18: ADCON0bits.CHS1 = 0;
  6419  002C0C  96C2               	bcf	4034,3,c	;volatile
  6420                           
  6421                           ;configstandard.c: 19: ADCON0bits.CHS0 = 0;
  6422  002C0E  94C2               	bcf	4034,2,c	;volatile
  6423                           
  6424                           ;configstandard.c: 20: ADCON0bits.ADON = 1;
  6425  002C10  80C2               	bsf	4034,0,c	;volatile
  6426                           
  6427                           ;configstandard.c: 24: ADCON1 = 0b00001110;
  6428  002C12  0E0E               	movlw	14
  6429  002C14  6EC1               	movwf	4033,c	;volatile
  6430                           
  6431                           ;configstandard.c: 28: ADCON2bits.ADFM = 1;
  6432  002C16  8EC0               	bsf	4032,7,c	;volatile
  6433                           
  6434                           ;configstandard.c: 29: ADCON2bits.ACQT2 = 1;
  6435  002C18  8AC0               	bsf	4032,5,c	;volatile
  6436                           
  6437                           ;configstandard.c: 30: ADCON2bits.ACQT1 = 0;
  6438  002C1A  98C0               	bcf	4032,4,c	;volatile
  6439                           
  6440                           ;configstandard.c: 31: ADCON2bits.ACQT0 = 1;
  6441  002C1C  86C0               	bsf	4032,3,c	;volatile
  6442                           
  6443                           ;configstandard.c: 32: ADCON2bits.ADCS2 = 1;
  6444  002C1E  84C0               	bsf	4032,2,c	;volatile
  6445                           
  6446                           ;configstandard.c: 33: ADCON2bits.ADCS1 = 0;
  6447  002C20  92C0               	bcf	4032,1,c	;volatile
  6448                           
  6449                           ;configstandard.c: 34: ADCON2bits.ADCS0 = 0;
  6450  002C22  90C0               	bcf	4032,0,c	;volatile
  6451                           
  6452                           ;configstandard.c: 36: ADRESH = 0;
  6453  002C24  0E00               	movlw	0
  6454  002C26  6EC4               	movwf	4036,c	;volatile
  6455                           
  6456                           ;configstandard.c: 37: ADRESL = 0;
  6457  002C28  0E00               	movlw	0
  6458  002C2A  6EC3               	movwf	4035,c	;volatile
  6459                           
  6460                           ;configstandard.c: 48: INTCONbits.GIE = 1;
  6461  002C2C  8EF2               	bsf	intcon,7,c	;volatile
  6462                           
  6463                           ;configstandard.c: 49: INTCONbits.PEIE = 1;
  6464  002C2E  8CF2               	bsf	intcon,6,c	;volatile
  6465                           
  6466                           ;configstandard.c: 50: PIE1bits.CCP1IE = 1;
  6467  002C30  849D               	bsf	3997,2,c	;volatile
  6468                           
  6469                           ;configstandard.c: 51: PIR1bits.CCP1IF = 0;
  6470  002C32  949E               	bcf	3998,2,c	;volatile
  6471                           
  6472                           ;configstandard.c: 58: T1CONbits.TMR1CS = 0;
  6473  002C34  92CD               	bcf	4045,1,c	;volatile
  6474                           
  6475                           ;configstandard.c: 59: T1CONbits.RD16 = 1;
  6476  002C36  8ECD               	bsf	4045,7,c	;volatile
  6477                           
  6478                           ;configstandard.c: 60: T1CONbits.T1CKPS = 0b00;
  6479  002C38  0ECF               	movlw	-49
  6480  002C3A  16CD               	andwf	4045,f,c	;volatile
  6481                           
  6482                           ;configstandard.c: 61: T1CONbits.TMR1ON = 0;
  6483  002C3C  90CD               	bcf	4045,0,c	;volatile
  6484                           
  6485                           ;configstandard.c: 62: TMR1 = 0;
  6486  002C3E  0E00               	movlw	0
  6487  002C40  6ECF               	movwf	4047,c	;volatile
  6488  002C42  0E00               	movlw	0
  6489  002C44  6ECE               	movwf	4046,c	;volatile
  6490                           
  6491                           ;configstandard.c: 66: CCP1CONbits.CCP1M = 0b1011;
  6492  002C46  50BD               	movf	4029,w,c	;volatile
  6493  002C48  0BF0               	andlw	-16
  6494  002C4A  090B               	iorlw	11
  6495  002C4C  6EBD               	movwf	4029,c	;volatile
  6496                           
  6497                           ;configstandard.c: 67: CCPR1 = 2400;
  6498  002C4E  0E09               	movlw	9
  6499  002C50  6EBF               	movwf	4031,c	;volatile
  6500  002C52  0E60               	movlw	96
  6501  002C54  6EBE               	movwf	4030,c	;volatile
  6502                           
  6503                           ;configstandard.c: 71: ADCON2bits.ADCS=110;
  6504  002C56  50C0               	movf	4032,w,c	;volatile
  6505  002C58  0BF8               	andlw	-8
  6506  002C5A  0906               	iorlw	6
  6507  002C5C  6EC0               	movwf	4032,c	;volatile
  6508                           
  6509                           ;configstandard.c: 72: ADCON2bits.ACQT=010;
  6510  002C5E  96C0               	bcf	4032,3,c	;volatile
  6511  002C60  98C0               	bcf	4032,4,c	;volatile
  6512  002C62  9AC0               	bcf	4032,5,c	;volatile
  6513  002C64  0012               	return		;funcret
  6514  002C66                     __end_of_configstandard:
  6515                           	opt stack 0
  6516                           tblptru	equ	0xFF8
  6517                           tblptrh	equ	0xFF7
  6518                           tblptrl	equ	0xFF6
  6519                           tablat	equ	0xFF5
  6520                           prodh	equ	0xFF4
  6521                           prodl	equ	0xFF3
  6522                           intcon	equ	0xFF2
  6523                           postinc0	equ	0xFEE
  6524                           wreg	equ	0xFE8
  6525                           indf2	equ	0xFDF
  6526                           postinc2	equ	0xFDE
  6527                           postdec2	equ	0xFDD
  6528                           fsr2h	equ	0xFDA
  6529                           fsr2l	equ	0xFD9
  6530                           status	equ	0xFD8
  6531                           
  6532 ;; *************** function ___lwtoft *****************
  6533 ;; Defined at:
  6534 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
  6535 ;; Parameters:    Size  Location     Type
  6536 ;;  c               2    8[BANK0 ] unsigned int 
  6537 ;; Auto vars:     Size  Location     Type
  6538 ;;		None
  6539 ;; Return value:  Size  Location     Type
  6540 ;;                  3    8[BANK0 ] float 
  6541 ;; Registers used:
  6542 ;;		wreg, status,2, status,0, cstack
  6543 ;; Tracked objects:
  6544 ;;		On entry : 0/0
  6545 ;;		On exit  : 0/0
  6546 ;;		Unchanged: 0/0
  6547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6548 ;;      Params:         0       3       0       0       0       0       0       0       0
  6549 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6550 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6551 ;;      Totals:         0       3       0       0       0       0       0       0       0
  6552 ;;Total ram usage:        3 bytes
  6553 ;; Hardware stack levels used:    1
  6554 ;; Hardware stack levels required when called:    4
  6555 ;; This function calls:
  6556 ;;		___ftpack
  6557 ;; This function is called by:
  6558 ;;		_main
  6559 ;; This function uses a non-reentrant model
  6560 ;;
  6561                           
  6562                           	psect	text20
  6563  002D1C                     __ptext20:
  6564                           	opt stack 0
  6565  002D1C                     ___lwtoft:
  6566                           	opt stack 26
  6567                           
  6568                           ;incstack = 0
  6569  002D1C  C068  F060         	movff	___lwtoft@c,___ftpack@arg
  6570  002D20  C069  F061         	movff	___lwtoft@c+1,___ftpack@arg+1
  6571  002D24  0100               	movlb	0	; () banked
  6572  002D26  6B62               	clrf	(___ftpack@arg+2)& (0+255),b
  6573  002D28  0E8E               	movlw	142
  6574  002D2A  6F63               	movwf	___ftpack@exp& (0+255),b
  6575  002D2C  0E00               	movlw	0
  6576  002D2E  6F64               	movwf	___ftpack@sign& (0+255),b
  6577  002D30  ECB6  F013         	call	___ftpack	;wreg free
  6578  002D34  C060  F068         	movff	?___ftpack,?___lwtoft
  6579  002D38  C061  F069         	movff	?___ftpack+1,?___lwtoft+1
  6580  002D3C  C062  F06A         	movff	?___ftpack+2,?___lwtoft+2
  6581  002D40  0012               	return	
  6582  002D42                     __end_of___lwtoft:
  6583                           	opt stack 0
  6584                           tblptru	equ	0xFF8
  6585                           tblptrh	equ	0xFF7
  6586                           tblptrl	equ	0xFF6
  6587                           tablat	equ	0xFF5
  6588                           prodh	equ	0xFF4
  6589                           prodl	equ	0xFF3
  6590                           intcon	equ	0xFF2
  6591                           postinc0	equ	0xFEE
  6592                           wreg	equ	0xFE8
  6593                           indf2	equ	0xFDF
  6594                           postinc2	equ	0xFDE
  6595                           postdec2	equ	0xFDD
  6596                           fsr2h	equ	0xFDA
  6597                           fsr2l	equ	0xFD9
  6598                           status	equ	0xFD8
  6599                           
  6600 ;; *************** function ___ftdiv *****************
  6601 ;; Defined at:
  6602 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  6603 ;; Parameters:    Size  Location     Type
  6604 ;;  f1              3   57[BANK0 ] float 
  6605 ;;  f2              3   60[BANK0 ] float 
  6606 ;; Auto vars:     Size  Location     Type
  6607 ;;  f3              3   67[BANK0 ] float 
  6608 ;;  sign            1   71[BANK0 ] unsigned char 
  6609 ;;  exp             1   70[BANK0 ] unsigned char 
  6610 ;;  cntr            1   66[BANK0 ] unsigned char 
  6611 ;; Return value:  Size  Location     Type
  6612 ;;                  3   57[BANK0 ] float 
  6613 ;; Registers used:
  6614 ;;		wreg, status,2, status,0, cstack
  6615 ;; Tracked objects:
  6616 ;;		On entry : 0/0
  6617 ;;		On exit  : 0/0
  6618 ;;		Unchanged: 0/0
  6619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6620 ;;      Params:         0       6       0       0       0       0       0       0       0
  6621 ;;      Locals:         0       6       0       0       0       0       0       0       0
  6622 ;;      Temps:          0       3       0       0       0       0       0       0       0
  6623 ;;      Totals:         0      15       0       0       0       0       0       0       0
  6624 ;;Total ram usage:       15 bytes
  6625 ;; Hardware stack levels used:    1
  6626 ;; Hardware stack levels required when called:    4
  6627 ;; This function calls:
  6628 ;;		___ftpack
  6629 ;; This function is called by:
  6630 ;;		_main
  6631 ;; This function uses a non-reentrant model
  6632 ;;
  6633                           
  6634                           	psect	text21
  6635  00259E                     __ptext21:
  6636                           	opt stack 0
  6637  00259E                     ___ftdiv:
  6638                           	opt stack 26
  6639                           
  6640                           ;incstack = 0
  6641  00259E  C09B  F09F         	movff	___ftdiv@f1+2,??___ftdiv
  6642  0025A2  0100               	movlb	0	; () banked
  6643  0025A4  6BA0               	clrf	(??___ftdiv+1)& (0+255),b
  6644  0025A6  6BA1               	clrf	(??___ftdiv+2)& (0+255),b
  6645  0025A8  359A               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
  6646  0025AA  379F               	rlcf	??___ftdiv& (0+255),f,b
  6647  0025AC  E301               	bnc	u3411
  6648  0025AE  81A0               	bsf	(??___ftdiv+1)& (0+255),0,b
  6649  0025B0                     u3411:
  6650  0025B0  519F               	movf	??___ftdiv& (0+255),w,b
  6651  0025B2  6FA6               	movwf	___ftdiv@exp& (0+255),b
  6652  0025B4  51A6               	movf	___ftdiv@exp& (0+255),w,b
  6653  0025B6  A4D8               	btfss	status,2,c
  6654  0025B8  D007               	goto	l542
  6655                           
  6656                           ; BSR set to: 0
  6657  0025BA  0E00               	movlw	0
  6658  0025BC  6F99               	movwf	?___ftdiv& (0+255),b
  6659  0025BE  0E00               	movlw	0
  6660  0025C0  6F9A               	movwf	(?___ftdiv+1)& (0+255),b
  6661  0025C2  0E00               	movlw	0
  6662  0025C4  6F9B               	movwf	(?___ftdiv+2)& (0+255),b
  6663                           
  6664                           ; BSR set to: 0
  6665  0025C6  0012               	return	
  6666  0025C8                     l542:
  6667                           
  6668                           ; BSR set to: 0
  6669                           
  6670                           ; BSR set to: 0
  6671  0025C8  C09E  F09F         	movff	___ftdiv@f2+2,??___ftdiv
  6672  0025CC  6BA0               	clrf	(??___ftdiv+1)& (0+255),b
  6673  0025CE  6BA1               	clrf	(??___ftdiv+2)& (0+255),b
  6674  0025D0  359D               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
  6675  0025D2  379F               	rlcf	??___ftdiv& (0+255),f,b
  6676  0025D4  E301               	bnc	u3431
  6677  0025D6  81A0               	bsf	(??___ftdiv+1)& (0+255),0,b
  6678  0025D8                     u3431:
  6679  0025D8  519F               	movf	??___ftdiv& (0+255),w,b
  6680  0025DA  6FA7               	movwf	___ftdiv@sign& (0+255),b
  6681  0025DC  51A7               	movf	___ftdiv@sign& (0+255),w,b
  6682  0025DE  A4D8               	btfss	status,2,c
  6683  0025E0  D007               	goto	l544
  6684                           
  6685                           ; BSR set to: 0
  6686  0025E2  0E00               	movlw	0
  6687  0025E4  6F99               	movwf	?___ftdiv& (0+255),b
  6688  0025E6  0E00               	movlw	0
  6689  0025E8  6F9A               	movwf	(?___ftdiv+1)& (0+255),b
  6690  0025EA  0E00               	movlw	0
  6691  0025EC  6F9B               	movwf	(?___ftdiv+2)& (0+255),b
  6692                           
  6693                           ; BSR set to: 0
  6694  0025EE  0012               	return	
  6695  0025F0                     l544:
  6696                           
  6697                           ; BSR set to: 0
  6698                           
  6699                           ; BSR set to: 0
  6700  0025F0  0E00               	movlw	0
  6701  0025F2  6FA3               	movwf	___ftdiv@f3& (0+255),b
  6702  0025F4  0E00               	movlw	0
  6703  0025F6  6FA4               	movwf	(___ftdiv@f3+1)& (0+255),b
  6704  0025F8  0E00               	movlw	0
  6705  0025FA  6FA5               	movwf	(___ftdiv@f3+2)& (0+255),b
  6706                           
  6707                           ; BSR set to: 0
  6708  0025FC  51A7               	movf	___ftdiv@sign& (0+255),w,b
  6709  0025FE  0F89               	addlw	137
  6710  002600  5FA6               	subwf	___ftdiv@exp& (0+255),f,b
  6711                           
  6712                           ; BSR set to: 0
  6713  002602  C09B  F0A7         	movff	___ftdiv@f1+2,___ftdiv@sign
  6714                           
  6715                           ; BSR set to: 0
  6716  002606  519E               	movf	(___ftdiv@f2+2)& (0+255),w,b
  6717  002608  1BA7               	xorwf	___ftdiv@sign& (0+255),f,b
  6718                           
  6719                           ; BSR set to: 0
  6720  00260A  0E80               	movlw	128
  6721  00260C  17A7               	andwf	___ftdiv@sign& (0+255),f,b
  6722                           
  6723                           ; BSR set to: 0
  6724  00260E  8F9A               	bsf	(___ftdiv@f1+1)& (0+255),7,b
  6725                           
  6726                           ; BSR set to: 0
  6727  002610  0EFF               	movlw	255
  6728  002612  1799               	andwf	___ftdiv@f1& (0+255),f,b
  6729  002614  0EFF               	movlw	255
  6730  002616  179A               	andwf	(___ftdiv@f1+1)& (0+255),f,b
  6731  002618  0E00               	movlw	0
  6732  00261A  179B               	andwf	(___ftdiv@f1+2)& (0+255),f,b
  6733                           
  6734                           ; BSR set to: 0
  6735  00261C  8F9D               	bsf	(___ftdiv@f2+1)& (0+255),7,b
  6736                           
  6737                           ; BSR set to: 0
  6738  00261E  0EFF               	movlw	255
  6739  002620  179C               	andwf	___ftdiv@f2& (0+255),f,b
  6740  002622  0EFF               	movlw	255
  6741  002624  179D               	andwf	(___ftdiv@f2+1)& (0+255),f,b
  6742  002626  0E00               	movlw	0
  6743  002628  179E               	andwf	(___ftdiv@f2+2)& (0+255),f,b
  6744                           
  6745                           ; BSR set to: 0
  6746  00262A  0E18               	movlw	24
  6747  00262C  6FA2               	movwf	___ftdiv@cntr& (0+255),b
  6748  00262E                     
  6749                           ; BSR set to: 0
  6750                           
  6751                           ; BSR set to: 0
  6752  00262E  90D8               	bcf	status,0,c
  6753  002630  37A3               	rlcf	___ftdiv@f3& (0+255),f,b
  6754  002632  37A4               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  6755  002634  37A5               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  6756                           
  6757                           ; BSR set to: 0
  6758  002636  519C               	movf	___ftdiv@f2& (0+255),w,b
  6759  002638  5D99               	subwf	___ftdiv@f1& (0+255),w,b
  6760  00263A  519D               	movf	(___ftdiv@f2+1)& (0+255),w,b
  6761  00263C  599A               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
  6762  00263E  519E               	movf	(___ftdiv@f2+2)& (0+255),w,b
  6763  002640  599B               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
  6764  002642  A0D8               	btfss	status,0,c
  6765  002644  D007               	goto	l546
  6766                           
  6767                           ; BSR set to: 0
  6768  002646  519C               	movf	___ftdiv@f2& (0+255),w,b
  6769  002648  5F99               	subwf	___ftdiv@f1& (0+255),f,b
  6770  00264A  519D               	movf	(___ftdiv@f2+1)& (0+255),w,b
  6771  00264C  5B9A               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
  6772  00264E  519E               	movf	(___ftdiv@f2+2)& (0+255),w,b
  6773  002650  5B9B               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
  6774                           
  6775                           ; BSR set to: 0
  6776  002652  81A3               	bsf	___ftdiv@f3& (0+255),0,b
  6777  002654                     l546:
  6778                           
  6779                           ; BSR set to: 0
  6780  002654  90D8               	bcf	status,0,c
  6781  002656  3799               	rlcf	___ftdiv@f1& (0+255),f,b
  6782  002658  379A               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
  6783  00265A  379B               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
  6784                           
  6785                           ; BSR set to: 0
  6786  00265C  2FA2               	decfsz	___ftdiv@cntr& (0+255),f,b
  6787  00265E  D7E7               	goto	l545
  6788                           
  6789                           ; BSR set to: 0
  6790                           
  6791                           ; BSR set to: 0
  6792  002660  C0A3  F060         	movff	___ftdiv@f3,___ftpack@arg
  6793  002664  C0A4  F061         	movff	___ftdiv@f3+1,___ftpack@arg+1
  6794  002668  C0A5  F062         	movff	___ftdiv@f3+2,___ftpack@arg+2
  6795  00266C  C0A6  F063         	movff	___ftdiv@exp,___ftpack@exp
  6796  002670  C0A7  F064         	movff	___ftdiv@sign,___ftpack@sign
  6797  002674  ECB6  F013         	call	___ftpack	;wreg free
  6798  002678  C060  F099         	movff	?___ftpack,?___ftdiv
  6799  00267C  C061  F09A         	movff	?___ftpack+1,?___ftdiv+1
  6800  002680  C062  F09B         	movff	?___ftpack+2,?___ftdiv+2
  6801  002684  0012               	return	
  6802  002686                     __end_of___ftdiv:
  6803                           	opt stack 0
  6804                           tblptru	equ	0xFF8
  6805                           tblptrh	equ	0xFF7
  6806                           tblptrl	equ	0xFF6
  6807                           tablat	equ	0xFF5
  6808                           prodh	equ	0xFF4
  6809                           prodl	equ	0xFF3
  6810                           intcon	equ	0xFF2
  6811                           postinc0	equ	0xFEE
  6812                           wreg	equ	0xFE8
  6813                           indf2	equ	0xFDF
  6814                           postinc2	equ	0xFDE
  6815                           postdec2	equ	0xFDD
  6816                           fsr2h	equ	0xFDA
  6817                           fsr2l	equ	0xFD9
  6818                           status	equ	0xFD8
  6819                           
  6820 ;; *************** function ___ftpack *****************
  6821 ;; Defined at:
  6822 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  6823 ;; Parameters:    Size  Location     Type
  6824 ;;  arg             3    0[BANK0 ] unsigned um
  6825 ;;  exp             1    3[BANK0 ] unsigned char 
  6826 ;;  sign            1    4[BANK0 ] unsigned char 
  6827 ;; Auto vars:     Size  Location     Type
  6828 ;;		None
  6829 ;; Return value:  Size  Location     Type
  6830 ;;                  3    0[BANK0 ] float 
  6831 ;; Registers used:
  6832 ;;		wreg, status,2, status,0
  6833 ;; Tracked objects:
  6834 ;;		On entry : 0/0
  6835 ;;		On exit  : 0/0
  6836 ;;		Unchanged: 0/0
  6837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6838 ;;      Params:         0       5       0       0       0       0       0       0       0
  6839 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6840 ;;      Temps:          0       3       0       0       0       0       0       0       0
  6841 ;;      Totals:         0       8       0       0       0       0       0       0       0
  6842 ;;Total ram usage:        8 bytes
  6843 ;; Hardware stack levels used:    1
  6844 ;; Hardware stack levels required when called:    3
  6845 ;; This function calls:
  6846 ;;		Nothing
  6847 ;; This function is called by:
  6848 ;;		___ftadd
  6849 ;;		___ftdiv
  6850 ;;		___ftmul
  6851 ;;		___lltoft
  6852 ;;		___lwtoft
  6853 ;; This function uses a non-reentrant model
  6854 ;;
  6855                           
  6856                           	psect	text22
  6857  00276C                     __ptext22:
  6858                           	opt stack 0
  6859  00276C                     ___ftpack:
  6860                           	opt stack 24
  6861                           
  6862                           ;incstack = 0
  6863  00276C  0100               	movlb	0	; () banked
  6864  00276E  5163               	movf	___ftpack@exp& (0+255),w,b
  6865  002770  B4D8               	btfsc	status,2,c
  6866  002772  D005               	goto	u1810
  6867                           
  6868                           ; BSR set to: 0
  6869  002774  5160               	movf	___ftpack@arg& (0+255),w,b
  6870  002776  1161               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  6871  002778  1162               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  6872  00277A  A4D8               	btfss	status,2,c
  6873  00277C  D00C               	goto	l478
  6874  00277E                     u1810:
  6875                           
  6876                           ; BSR set to: 0
  6877                           
  6878                           ; BSR set to: 0
  6879  00277E  0E00               	movlw	0
  6880  002780  6F60               	movwf	?___ftpack& (0+255),b
  6881  002782  0E00               	movlw	0
  6882  002784  6F61               	movwf	(?___ftpack+1)& (0+255),b
  6883  002786  0E00               	movlw	0
  6884  002788  6F62               	movwf	(?___ftpack+2)& (0+255),b
  6885                           
  6886                           ; BSR set to: 0
  6887  00278A  0012               	return	
  6888  00278C                     
  6889                           ; BSR set to: 0
  6890                           
  6891                           ; BSR set to: 0
  6892  00278C  2B63               	incf	___ftpack@exp& (0+255),f,b
  6893  00278E  90D8               	bcf	status,0,c
  6894  002790  3362               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  6895  002792  3361               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  6896  002794  3360               	rrcf	___ftpack@arg& (0+255),f,b
  6897  002796                     l478:
  6898                           
  6899                           ; BSR set to: 0
  6900                           
  6901                           ; BSR set to: 0
  6902  002796  0E00               	movlw	0
  6903  002798  1560               	andwf	___ftpack@arg& (0+255),w,b
  6904  00279A  6F65               	movwf	??___ftpack& (0+255),b
  6905  00279C  0E00               	movlw	0
  6906  00279E  1561               	andwf	(___ftpack@arg+1)& (0+255),w,b
  6907  0027A0  6F66               	movwf	(??___ftpack+1)& (0+255),b
  6908  0027A2  0EFE               	movlw	254
  6909  0027A4  1562               	andwf	(___ftpack@arg+2)& (0+255),w,b
  6910  0027A6  6F67               	movwf	(??___ftpack+2)& (0+255),b
  6911  0027A8  5165               	movf	??___ftpack& (0+255),w,b
  6912  0027AA  1166               	iorwf	(??___ftpack+1)& (0+255),w,b
  6913  0027AC  1167               	iorwf	(??___ftpack+2)& (0+255),w,b
  6914  0027AE  B4D8               	btfsc	status,2,c
  6915  0027B0  D00C               	goto	l481
  6916  0027B2  D7EC               	goto	l479
  6917  0027B4                     
  6918                           ; BSR set to: 0
  6919                           
  6920                           ; BSR set to: 0
  6921  0027B4  2B63               	incf	___ftpack@exp& (0+255),f,b
  6922                           
  6923                           ; BSR set to: 0
  6924  0027B6  0E01               	movlw	1
  6925  0027B8  2760               	addwf	___ftpack@arg& (0+255),f,b
  6926  0027BA  0E00               	movlw	0
  6927  0027BC  2361               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  6928  0027BE  0E00               	movlw	0
  6929  0027C0  2362               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  6930  0027C2  90D8               	bcf	status,0,c
  6931  0027C4  3362               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  6932  0027C6  3361               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  6933  0027C8  3360               	rrcf	___ftpack@arg& (0+255),f,b
  6934  0027CA                     l481:
  6935                           
  6936                           ; BSR set to: 0
  6937                           
  6938                           ; BSR set to: 0
  6939  0027CA  0E00               	movlw	0
  6940  0027CC  1560               	andwf	___ftpack@arg& (0+255),w,b
  6941  0027CE  6F65               	movwf	??___ftpack& (0+255),b
  6942  0027D0  0E00               	movlw	0
  6943  0027D2  1561               	andwf	(___ftpack@arg+1)& (0+255),w,b
  6944  0027D4  6F66               	movwf	(??___ftpack+1)& (0+255),b
  6945  0027D6  0EFF               	movlw	255
  6946  0027D8  1562               	andwf	(___ftpack@arg+2)& (0+255),w,b
  6947  0027DA  6F67               	movwf	(??___ftpack+2)& (0+255),b
  6948  0027DC  5165               	movf	??___ftpack& (0+255),w,b
  6949  0027DE  1166               	iorwf	(??___ftpack+1)& (0+255),w,b
  6950  0027E0  1167               	iorwf	(??___ftpack+2)& (0+255),w,b
  6951  0027E2  B4D8               	btfsc	status,2,c
  6952  0027E4  D006               	goto	l484
  6953  0027E6  D7E6               	goto	l482
  6954  0027E8                     
  6955                           ; BSR set to: 0
  6956                           
  6957                           ; BSR set to: 0
  6958  0027E8  0763               	decf	___ftpack@exp& (0+255),f,b
  6959  0027EA  90D8               	bcf	status,0,c
  6960  0027EC  3760               	rlcf	___ftpack@arg& (0+255),f,b
  6961  0027EE  3761               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  6962  0027F0  3762               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  6963  0027F2                     l484:
  6964                           
  6965                           ; BSR set to: 0
  6966                           
  6967                           ; BSR set to: 0
  6968  0027F2  BF61               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  6969  0027F4  D003               	goto	u1850
  6970                           
  6971                           ; BSR set to: 0
  6972  0027F6  0E02               	movlw	2
  6973  0027F8  6163               	cpfslt	___ftpack@exp& (0+255),b
  6974  0027FA  D7F6               	goto	l485
  6975  0027FC                     u1850:
  6976                           
  6977                           ; BSR set to: 0
  6978                           
  6979                           ; BSR set to: 0
  6980  0027FC  A163               	btfss	___ftpack@exp& (0+255),0,b
  6981                           
  6982                           ; BSR set to: 0
  6983  0027FE  9F61               	bcf	(___ftpack@arg+1)& (0+255),7,b
  6984                           
  6985                           ; BSR set to: 0
  6986                           
  6987                           ; BSR set to: 0
  6988  002800  90D8               	bcf	status,0,c
  6989  002802  3363               	rrcf	___ftpack@exp& (0+255),f,b
  6990  002804  5163               	movf	___ftpack@exp& (0+255),w,b
  6991  002806  1362               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  6992                           
  6993                           ; BSR set to: 0
  6994  002808  5164               	movf	___ftpack@sign& (0+255),w,b
  6995  00280A  A4D8               	btfss	status,2,c
  6996                           
  6997                           ; BSR set to: 0
  6998  00280C  8F62               	bsf	(___ftpack@arg+2)& (0+255),7,b
  6999                           
  7000                           ; BSR set to: 0
  7001                           
  7002                           ; BSR set to: 0
  7003  00280E  C060  F060         	movff	___ftpack@arg,?___ftpack
  7004  002812  C061  F061         	movff	___ftpack@arg+1,?___ftpack+1
  7005  002816  C062  F062         	movff	___ftpack@arg+2,?___ftpack+2
  7006  00281A  0012               	return	
  7007  00281C                     __end_of___ftpack:
  7008                           	opt stack 0
  7009                           tblptru	equ	0xFF8
  7010                           tblptrh	equ	0xFF7
  7011                           tblptrl	equ	0xFF6
  7012                           tablat	equ	0xFF5
  7013                           prodh	equ	0xFF4
  7014                           prodl	equ	0xFF3
  7015                           intcon	equ	0xFF2
  7016                           postinc0	equ	0xFEE
  7017                           wreg	equ	0xFE8
  7018                           indf2	equ	0xFDF
  7019                           postinc2	equ	0xFDE
  7020                           postdec2	equ	0xFDD
  7021                           fsr2h	equ	0xFDA
  7022                           fsr2l	equ	0xFD9
  7023                           status	equ	0xFD8
  7024                           
  7025 ;; *************** function _Lcd_Out2 *****************
  7026 ;; Defined at:
  7027 ;;		line 109 in file "Library_LCD_2.h"
  7028 ;; Parameters:    Size  Location     Type
  7029 ;;  y               1    wreg     unsigned char 
  7030 ;;  x               1    3[BANK0 ] unsigned char 
  7031 ;;  buffer          2    4[BANK0 ] PTR unsigned char 
  7032 ;;		 -> buffer2(20), main@buffer1(16), 
  7033 ;; Auto vars:     Size  Location     Type
  7034 ;;  y               1    6[BANK0 ] unsigned char 
  7035 ;;  data            1    7[BANK0 ] unsigned char 
  7036 ;; Return value:  Size  Location     Type
  7037 ;;                  1    wreg      void 
  7038 ;; Registers used:
  7039 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7040 ;; Tracked objects:
  7041 ;;		On entry : 0/0
  7042 ;;		On exit  : 0/0
  7043 ;;		Unchanged: 0/0
  7044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7045 ;;      Params:         0       3       0       0       0       0       0       0       0
  7046 ;;      Locals:         0       2       0       0       0       0       0       0       0
  7047 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7048 ;;      Totals:         0       5       0       0       0       0       0       0       0
  7049 ;;Total ram usage:        5 bytes
  7050 ;; Hardware stack levels used:    1
  7051 ;; Hardware stack levels required when called:    4
  7052 ;; This function calls:
  7053 ;;		_Lcd_Chr_CP
  7054 ;;		_Lcd_Cmd
  7055 ;; This function is called by:
  7056 ;;		_main
  7057 ;; This function uses a non-reentrant model
  7058 ;;
  7059                           
  7060                           	psect	text23
  7061  002AD8                     __ptext23:
  7062                           	opt stack 0
  7063  002AD8                     _Lcd_Out2:
  7064                           	opt stack 26
  7065                           
  7066                           ; BSR set to: 0
  7067                           ;incstack = 0
  7068                           ;Lcd_Out2@y stored from wreg
  7069  002AD8  0100               	movlb	0	; () banked
  7070  002ADA  6F66               	movwf	Lcd_Out2@y& (0+255),b
  7071                           
  7072                           ;Library_LCD_2.h: 111: unsigned char data;
  7073                           ;Library_LCD_2.h: 112: switch (y)
  7074  002ADC  D00E               	goto	l80
  7075  002ADE  0100               	movlb	0	; () banked
  7076  002AE0  5163               	movf	Lcd_Out2@x& (0+255),w,b
  7077  002AE2  0F80               	addlw	128
  7078  002AE4  D008               	goto	L5
  7079  002AE6                     
  7080                           ; BSR set to: 0
  7081                           
  7082                           ; BSR set to: 0
  7083  002AE6  5163               	movf	Lcd_Out2@x& (0+255),w,b
  7084  002AE8  0FC0               	addlw	192
  7085  002AEA  D005               	goto	L5
  7086  002AEC                     
  7087                           ; BSR set to: 0
  7088                           
  7089                           ; BSR set to: 0
  7090  002AEC  5163               	movf	Lcd_Out2@x& (0+255),w,b
  7091  002AEE  0F94               	addlw	148
  7092  002AF0  D002               	goto	L5
  7093  002AF2                     
  7094                           ; BSR set to: 0
  7095                           
  7096                           ; BSR set to: 0
  7097  002AF2  5163               	movf	Lcd_Out2@x& (0+255),w,b
  7098  002AF4  0FD4               	addlw	212
  7099  002AF6                     L5:
  7100  002AF6  6F67               	movwf	Lcd_Out2@data& (0+255),b
  7101                           
  7102                           ; BSR set to: 0
  7103                           ;Library_LCD_2.h: 119: }
  7104                           
  7105                           ; BSR set to: 0
  7106                           
  7107                           ;Library_LCD_2.h: 118: default: break;
  7108  002AF8  D00E               	goto	l82
  7109  002AFA                     l80:
  7110                           
  7111                           ; BSR set to: 0
  7112  002AFA  0100               	movlb	0	; () banked
  7113  002AFC  5166               	movf	Lcd_Out2@y& (0+255),w,b
  7114                           
  7115                           ; Switch size 1, requested type "space"
  7116                           ; Number of cases is 4, Range of values is 1 to 4
  7117                           ; switch strategies available:
  7118                           ; Name         Instructions Cycles
  7119                           ; simple_byte           13     7 (average)
  7120                           ;	Chosen strategy is simple_byte
  7121  002AFE  0A01               	xorlw	1	; case 1
  7122  002B00  B4D8               	btfsc	status,2,c
  7123  002B02  D7ED               	goto	l81
  7124  002B04  0A03               	xorlw	3	; case 2
  7125  002B06  B4D8               	btfsc	status,2,c
  7126  002B08  D7EE               	goto	l83
  7127  002B0A  0A01               	xorlw	1	; case 3
  7128  002B0C  B4D8               	btfsc	status,2,c
  7129  002B0E  D7EE               	goto	l84
  7130  002B10  0A07               	xorlw	7	; case 4
  7131  002B12  B4D8               	btfsc	status,2,c
  7132  002B14  D7EE               	goto	l85
  7133  002B16                     l82:
  7134                           
  7135                           ; BSR set to: 0
  7136                           ;Library_LCD_2.h: 120: Lcd_Cmd(data);
  7137                           
  7138                           ; BSR set to: 0
  7139  002B16  5167               	movf	Lcd_Out2@data& (0+255),w,b
  7140  002B18  ECAE  F00F         	call	_Lcd_Cmd
  7141                           
  7142                           ;Library_LCD_2.h: 121: while(*buffer)
  7143  002B1C  D00A               	goto	l87
  7144  002B1E                     
  7145                           ;Library_LCD_2.h: 122: {
  7146                           ;Library_LCD_2.h: 123: Lcd_Chr_CP(*buffer);
  7147  002B1E  C064  FFD9         	movff	Lcd_Out2@buffer,fsr2l
  7148  002B22  C065  FFDA         	movff	Lcd_Out2@buffer+1,fsr2h
  7149  002B26  50DF               	movf	indf2,w,c
  7150  002B28  EC14  F00F         	call	_Lcd_Chr_CP
  7151                           
  7152                           ;Library_LCD_2.h: 124: buffer++;
  7153  002B2C  0100               	movlb	0	; () banked
  7154  002B2E  4B64               	infsnz	Lcd_Out2@buffer& (0+255),f,b
  7155  002B30  2B65               	incf	(Lcd_Out2@buffer+1)& (0+255),f,b
  7156  002B32                     l87:
  7157                           
  7158                           ; BSR set to: 0
  7159  002B32  C064  FFD9         	movff	Lcd_Out2@buffer,fsr2l
  7160  002B36  C065  FFDA         	movff	Lcd_Out2@buffer+1,fsr2h
  7161  002B3A  50DF               	movf	indf2,w,c
  7162  002B3C  B4D8               	btfsc	status,2,c
  7163  002B3E  0012               	return	
  7164  002B40  D7EE               	goto	l88
  7165  002B42                     __end_of_Lcd_Out2:
  7166                           	opt stack 0
  7167                           tblptru	equ	0xFF8
  7168                           tblptrh	equ	0xFF7
  7169                           tblptrl	equ	0xFF6
  7170                           tablat	equ	0xFF5
  7171                           prodh	equ	0xFF4
  7172                           prodl	equ	0xFF3
  7173                           intcon	equ	0xFF2
  7174                           postinc0	equ	0xFEE
  7175                           wreg	equ	0xFE8
  7176                           indf2	equ	0xFDF
  7177                           postinc2	equ	0xFDE
  7178                           postdec2	equ	0xFDD
  7179                           fsr2h	equ	0xFDA
  7180                           fsr2l	equ	0xFD9
  7181                           status	equ	0xFD8
  7182                           
  7183 ;; *************** function _Lcd_Chr_CP *****************
  7184 ;; Defined at:
  7185 ;;		line 130 in file "Library_LCD_2.h"
  7186 ;; Parameters:    Size  Location     Type
  7187 ;;  data            1    wreg     unsigned char 
  7188 ;; Auto vars:     Size  Location     Type
  7189 ;;  data            1    2[BANK0 ] unsigned char 
  7190 ;; Return value:  Size  Location     Type
  7191 ;;                  1    wreg      void 
  7192 ;; Registers used:
  7193 ;;		wreg, status,2, status,0
  7194 ;; Tracked objects:
  7195 ;;		On entry : 0/0
  7196 ;;		On exit  : 0/0
  7197 ;;		Unchanged: 0/0
  7198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7199 ;;      Params:         0       0       0       0       0       0       0       0       0
  7200 ;;      Locals:         0       1       0       0       0       0       0       0       0
  7201 ;;      Temps:          0       2       0       0       0       0       0       0       0
  7202 ;;      Totals:         0       3       0       0       0       0       0       0       0
  7203 ;;Total ram usage:        3 bytes
  7204 ;; Hardware stack levels used:    1
  7205 ;; Hardware stack levels required when called:    3
  7206 ;; This function calls:
  7207 ;;		Nothing
  7208 ;; This function is called by:
  7209 ;;		_Lcd_Out2
  7210 ;;		_Lcd_Out
  7211 ;; This function uses a non-reentrant model
  7212 ;;
  7213                           
  7214                           	psect	text24
  7215  001E28                     __ptext24:
  7216                           	opt stack 0
  7217  001E28                     _Lcd_Chr_CP:
  7218                           	opt stack 26
  7219                           
  7220                           ;incstack = 0
  7221                           ;Lcd_Chr_CP@data stored from wreg
  7222  001E28  0100               	movlb	0	; () banked
  7223  001E2A  6F62               	movwf	Lcd_Chr_CP@data& (0+255),b
  7224                           
  7225                           ;Library_LCD_2.h: 131: PORTDbits.RD3 = 0; PORTDbits.RD1 = 1;
  7226  001E2C  9683               	bcf	3971,3,c	;volatile
  7227  001E2E  8283               	bsf	3971,1,c	;volatile
  7228                           
  7229                           ;Library_LCD_2.h: 132: PORTDbits.RD7 = (data & 0b10000000)>>7; PORTDbits.RD6 = (data & 0
      +                          b01000000)>>6;
  7230  001E30  0100               	movlb	0	; () banked
  7231  001E32  6B60               	clrf	??_Lcd_Chr_CP& (0+255),b
  7232  001E34  AF62               	btfss	Lcd_Chr_CP@data& (0+255),7,b
  7233  001E36  D001               	bra	u2305
  7234  001E38  2B60               	incf	??_Lcd_Chr_CP& (0+255),f,b
  7235  001E3A                     u2305:
  7236  001E3A  0E01               	movlw	1
  7237  001E3C  1760               	andwf	??_Lcd_Chr_CP& (0+255),f,b
  7238  001E3E  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  7239  001E40  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  7240  001E42  5083               	movf	3971,w,c	;volatile
  7241  001E44  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  7242  001E46  0B7F               	andlw	-129
  7243  001E48  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  7244  001E4A  6E83               	movwf	3971,c	;volatile
  7245  001E4C  C062  F060         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  7246  001E50  0E06               	movlw	6
  7247  001E52  6F61               	movwf	(??_Lcd_Chr_CP+1)& (0+255),b
  7248  001E54                     u2315:
  7249  001E54  90D8               	bcf	status,0,c
  7250  001E56  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  7251  001E58  2F61               	decfsz	(??_Lcd_Chr_CP+1)& (0+255),f,b
  7252  001E5A  D7FC               	goto	u2315
  7253  001E5C  0E01               	movlw	1
  7254  001E5E  1760               	andwf	??_Lcd_Chr_CP& (0+255),f,b
  7255  001E60  3B60               	swapf	??_Lcd_Chr_CP& (0+255),f,b
  7256  001E62  4760               	rlncf	??_Lcd_Chr_CP& (0+255),f,b
  7257  001E64  4760               	rlncf	??_Lcd_Chr_CP& (0+255),f,b
  7258  001E66  5083               	movf	3971,w,c	;volatile
  7259  001E68  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  7260  001E6A  0BBF               	andlw	-65
  7261  001E6C  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  7262  001E6E  6E83               	movwf	3971,c	;volatile
  7263                           
  7264                           ;Library_LCD_2.h: 133: PORTDbits.RD5 = (data & 0b00100000)>>5; PORTDbits.RD4 = (data & 0
      +                          b00010000)>>4;
  7265  001E70  C062  F060         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  7266  001E74  0E05               	movlw	5
  7267  001E76  6F61               	movwf	(??_Lcd_Chr_CP+1)& (0+255),b
  7268  001E78                     u2325:
  7269  001E78  90D8               	bcf	status,0,c
  7270  001E7A  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  7271  001E7C  2F61               	decfsz	(??_Lcd_Chr_CP+1)& (0+255),f,b
  7272  001E7E  D7FC               	goto	u2325
  7273  001E80  0E01               	movlw	1
  7274  001E82  1760               	andwf	??_Lcd_Chr_CP& (0+255),f,b
  7275  001E84  3B60               	swapf	??_Lcd_Chr_CP& (0+255),f,b
  7276  001E86  4760               	rlncf	??_Lcd_Chr_CP& (0+255),f,b
  7277  001E88  5083               	movf	3971,w,c	;volatile
  7278  001E8A  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  7279  001E8C  0BDF               	andlw	-33
  7280  001E8E  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  7281  001E90  6E83               	movwf	3971,c	;volatile
  7282  001E92  C062  F060         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  7283  001E96  3B60               	swapf	??_Lcd_Chr_CP& (0+255),f,b
  7284  001E98  0E0F               	movlw	15
  7285  001E9A  1760               	andwf	??_Lcd_Chr_CP& (0+255),f,b
  7286  001E9C  0E01               	movlw	1
  7287  001E9E  1760               	andwf	??_Lcd_Chr_CP& (0+255),f,b
  7288  001EA0  3B60               	swapf	??_Lcd_Chr_CP& (0+255),f,b
  7289  001EA2  5083               	movf	3971,w,c	;volatile
  7290  001EA4  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  7291  001EA6  0BEF               	andlw	-17
  7292  001EA8  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  7293  001EAA  6E83               	movwf	3971,c	;volatile
  7294                           
  7295                           ; BSR set to: 0
  7296                           ;Library_LCD_2.h: 134: _delay(10);
  7297  001EAC  0E03               	movlw	3
  7298  001EAE                     u3607:
  7299  001EAE  2EE8               	decfsz	wreg,f,c
  7300  001EB0  D7FE               	bra	u3607
  7301  001EB2  F000               	nop	
  7302                           
  7303                           ;Library_LCD_2.h: 135: PORTDbits.RD3 = 1; _delay((unsigned long)((5)*(48000000/4000000.0
      +                          ))); PORTDbits.RD3 = 0;
  7304  001EB4  8683               	bsf	3971,3,c	;volatile
  7305  001EB6  0E14               	movlw	20
  7306  001EB8                     u3617:
  7307  001EB8  2EE8               	decfsz	wreg,f,c
  7308  001EBA  D7FE               	bra	u3617
  7309  001EBC  9683               	bcf	3971,3,c	;volatile
  7310                           
  7311                           ;Library_LCD_2.h: 136: PORTDbits.RD7 = (data & 0b00001000)>>3; PORTDbits.RD6 = (data & 0
      +                          b00000100)>>2;
  7312  001EBE  C062  F060         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  7313  001EC2  0100               	movlb	0	; () banked
  7314  001EC4  90D8               	bcf	status,0,c
  7315  001EC6  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  7316  001EC8  90D8               	bcf	status,0,c
  7317  001ECA  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  7318  001ECC  90D8               	bcf	status,0,c
  7319  001ECE  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  7320  001ED0  0E01               	movlw	1
  7321  001ED2  1760               	andwf	??_Lcd_Chr_CP& (0+255),f,b
  7322  001ED4  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  7323  001ED6  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  7324  001ED8  5083               	movf	3971,w,c	;volatile
  7325  001EDA  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  7326  001EDC  0B7F               	andlw	-129
  7327  001EDE  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  7328  001EE0  6E83               	movwf	3971,c	;volatile
  7329  001EE2  C062  F060         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  7330  001EE6  90D8               	bcf	status,0,c
  7331  001EE8  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  7332  001EEA  90D8               	bcf	status,0,c
  7333  001EEC  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  7334  001EEE  0E01               	movlw	1
  7335  001EF0  1760               	andwf	??_Lcd_Chr_CP& (0+255),f,b
  7336  001EF2  3B60               	swapf	??_Lcd_Chr_CP& (0+255),f,b
  7337  001EF4  4760               	rlncf	??_Lcd_Chr_CP& (0+255),f,b
  7338  001EF6  4760               	rlncf	??_Lcd_Chr_CP& (0+255),f,b
  7339  001EF8  5083               	movf	3971,w,c	;volatile
  7340  001EFA  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  7341  001EFC  0BBF               	andlw	-65
  7342  001EFE  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  7343  001F00  6E83               	movwf	3971,c	;volatile
  7344                           
  7345                           ;Library_LCD_2.h: 137: PORTDbits.RD5 = (data & 0b00000010)>>1; PORTDbits.RD4 = (data & 0
      +                          b00000001);
  7346  001F02  C062  F060         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  7347  001F06  90D8               	bcf	status,0,c
  7348  001F08  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  7349  001F0A  0E01               	movlw	1
  7350  001F0C  1760               	andwf	??_Lcd_Chr_CP& (0+255),f,b
  7351  001F0E  3B60               	swapf	??_Lcd_Chr_CP& (0+255),f,b
  7352  001F10  4760               	rlncf	??_Lcd_Chr_CP& (0+255),f,b
  7353  001F12  5083               	movf	3971,w,c	;volatile
  7354  001F14  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  7355  001F16  0BDF               	andlw	-33
  7356  001F18  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  7357  001F1A  6E83               	movwf	3971,c	;volatile
  7358  001F1C  C062  F060         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  7359  001F20  0E01               	movlw	1
  7360  001F22  1760               	andwf	??_Lcd_Chr_CP& (0+255),f,b
  7361  001F24  3B60               	swapf	??_Lcd_Chr_CP& (0+255),f,b
  7362  001F26  5083               	movf	3971,w,c	;volatile
  7363  001F28  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  7364  001F2A  0BEF               	andlw	-17
  7365  001F2C  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  7366  001F2E  6E83               	movwf	3971,c	;volatile
  7367                           
  7368                           ; BSR set to: 0
  7369                           ;Library_LCD_2.h: 138: _delay(10);
  7370  001F30  0E03               	movlw	3
  7371  001F32                     u3627:
  7372  001F32  2EE8               	decfsz	wreg,f,c
  7373  001F34  D7FE               	bra	u3627
  7374  001F36  F000               	nop	
  7375                           
  7376                           ;Library_LCD_2.h: 139: PORTDbits.RD3 = 1; _delay((unsigned long)((5)*(48000000/4000000.0
      +                          ))); PORTDbits.RD3 = 0;
  7377  001F38  8683               	bsf	3971,3,c	;volatile
  7378  001F3A  0E14               	movlw	20
  7379  001F3C                     u3637:
  7380  001F3C  2EE8               	decfsz	wreg,f,c
  7381  001F3E  D7FE               	bra	u3637
  7382  001F40  9683               	bcf	3971,3,c	;volatile
  7383                           
  7384                           ;Library_LCD_2.h: 140: _delay((unsigned long)((5)*(48000000/4000000.0))); _delay((unsign
      +                          ed long)((5500)*(48000000/4000000.0)));
  7385  001F42  0E14               	movlw	20
  7386  001F44                     u3647:
  7387  001F44  2EE8               	decfsz	wreg,f,c
  7388  001F46  D7FE               	bra	u3647
  7389  001F48  0E56               	movlw	86
  7390  001F4A  0100               	movlb	0	; () banked
  7391  001F4C  6F60               	movwf	??_Lcd_Chr_CP& (0+255),b
  7392  001F4E  0EB5               	movlw	181
  7393  001F50                     u3657:
  7394  001F50  2EE8               	decfsz	wreg,f,c
  7395  001F52  D7FE               	bra	u3657
  7396  001F54  2F60               	decfsz	??_Lcd_Chr_CP& (0+255),f,b
  7397  001F56  D7FC               	bra	u3657
  7398  001F58  D000               	nop2	
  7399  001F5A  0012               	return		;funcret
  7400  001F5C                     __end_of_Lcd_Chr_CP:
  7401                           	opt stack 0
  7402                           tblptru	equ	0xFF8
  7403                           tblptrh	equ	0xFF7
  7404                           tblptrl	equ	0xFF6
  7405                           tablat	equ	0xFF5
  7406                           prodh	equ	0xFF4
  7407                           prodl	equ	0xFF3
  7408                           intcon	equ	0xFF2
  7409                           postinc0	equ	0xFEE
  7410                           wreg	equ	0xFE8
  7411                           indf2	equ	0xFDF
  7412                           postinc2	equ	0xFDE
  7413                           postdec2	equ	0xFDD
  7414                           fsr2h	equ	0xFDA
  7415                           fsr2l	equ	0xFD9
  7416                           status	equ	0xFD8
  7417                           
  7418 ;; *************** function _Lcd_Init *****************
  7419 ;; Defined at:
  7420 ;;		line 46 in file "Library_LCD_2.h"
  7421 ;; Parameters:    Size  Location     Type
  7422 ;;		None
  7423 ;; Auto vars:     Size  Location     Type
  7424 ;;  data            1    4[BANK0 ] unsigned char 
  7425 ;; Return value:  Size  Location     Type
  7426 ;;                  1    wreg      void 
  7427 ;; Registers used:
  7428 ;;		wreg, status,2, status,0, cstack
  7429 ;; Tracked objects:
  7430 ;;		On entry : 0/0
  7431 ;;		On exit  : 0/0
  7432 ;;		Unchanged: 0/0
  7433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7434 ;;      Params:         0       0       0       0       0       0       0       0       0
  7435 ;;      Locals:         0       1       0       0       0       0       0       0       0
  7436 ;;      Temps:          0       1       0       0       0       0       0       0       0
  7437 ;;      Totals:         0       2       0       0       0       0       0       0       0
  7438 ;;Total ram usage:        2 bytes
  7439 ;; Hardware stack levels used:    1
  7440 ;; Hardware stack levels required when called:    4
  7441 ;; This function calls:
  7442 ;;		_Lcd_Cmd
  7443 ;; This function is called by:
  7444 ;;		_main
  7445 ;; This function uses a non-reentrant model
  7446 ;;
  7447                           
  7448                           	psect	text25
  7449  001BB4                     __ptext25:
  7450                           	opt stack 0
  7451  001BB4                     _Lcd_Init:
  7452                           	opt stack 26
  7453                           
  7454                           ;Library_LCD_2.h: 47: unsigned char data;
  7455                           ;Library_LCD_2.h: 48: TRISDbits.TRISD7 = 0;
  7456                           
  7457                           ;incstack = 0
  7458  001BB4  9E95               	bcf	3989,7,c	;volatile
  7459                           
  7460                           ;Library_LCD_2.h: 49: TRISDbits.TRISD6 = 0;
  7461  001BB6  9C95               	bcf	3989,6,c	;volatile
  7462                           
  7463                           ;Library_LCD_2.h: 50: TRISDbits.TRISD5 = 0;
  7464  001BB8  9A95               	bcf	3989,5,c	;volatile
  7465                           
  7466                           ;Library_LCD_2.h: 51: TRISDbits.TRISD4 = 0;
  7467  001BBA  9895               	bcf	3989,4,c	;volatile
  7468                           
  7469                           ;Library_LCD_2.h: 52: TRISDbits.TRISD3 = 0;
  7470  001BBC  9695               	bcf	3989,3,c	;volatile
  7471                           
  7472                           ;Library_LCD_2.h: 53: TRISDbits.TRISD1 = 0;
  7473  001BBE  9295               	bcf	3989,1,c	;volatile
  7474                           
  7475                           ;Library_LCD_2.h: 54: PORTDbits.RD7 = 0;
  7476  001BC0  9E83               	bcf	3971,7,c	;volatile
  7477                           
  7478                           ;Library_LCD_2.h: 55: PORTDbits.RD6 = 0;
  7479  001BC2  9C83               	bcf	3971,6,c	;volatile
  7480                           
  7481                           ;Library_LCD_2.h: 56: PORTDbits.RD5 = 0;
  7482  001BC4  9A83               	bcf	3971,5,c	;volatile
  7483                           
  7484                           ;Library_LCD_2.h: 57: PORTDbits.RD4 = 0;
  7485  001BC6  9883               	bcf	3971,4,c	;volatile
  7486                           
  7487                           ;Library_LCD_2.h: 58: PORTDbits.RD3 = 0;
  7488  001BC8  9683               	bcf	3971,3,c	;volatile
  7489                           
  7490                           ;Library_LCD_2.h: 59: PORTDbits.RD1 = 0;
  7491  001BCA  9283               	bcf	3971,1,c	;volatile
  7492                           
  7493                           ;Library_LCD_2.h: 60: _delay((unsigned long)((5500)*(48000000/4000000.0)));
  7494  001BCC  0E56               	movlw	86
  7495  001BCE  0100               	movlb	0	; () banked
  7496  001BD0  6F63               	movwf	??_Lcd_Init& (0+255),b
  7497  001BD2  0EB5               	movlw	181
  7498  001BD4                     u3667:
  7499  001BD4  2EE8               	decfsz	wreg,f,c
  7500  001BD6  D7FE               	bra	u3667
  7501  001BD8  2F63               	decfsz	??_Lcd_Init& (0+255),f,b
  7502  001BDA  D7FC               	bra	u3667
  7503  001BDC  D000               	nop2	
  7504                           
  7505                           ;Library_LCD_2.h: 61: _delay((unsigned long)((5500)*(48000000/4000000.0)));
  7506  001BDE  0E56               	movlw	86
  7507  001BE0  0100               	movlb	0	; () banked
  7508  001BE2  6F63               	movwf	??_Lcd_Init& (0+255),b
  7509  001BE4  0EB5               	movlw	181
  7510  001BE6                     u3677:
  7511  001BE6  2EE8               	decfsz	wreg,f,c
  7512  001BE8  D7FE               	bra	u3677
  7513  001BEA  2F63               	decfsz	??_Lcd_Init& (0+255),f,b
  7514  001BEC  D7FC               	bra	u3677
  7515  001BEE  D000               	nop2	
  7516                           
  7517                           ;Library_LCD_2.h: 62: _delay((unsigned long)((5500)*(48000000/4000000.0)));
  7518  001BF0  0E56               	movlw	86
  7519  001BF2  0100               	movlb	0	; () banked
  7520  001BF4  6F63               	movwf	??_Lcd_Init& (0+255),b
  7521  001BF6  0EB5               	movlw	181
  7522  001BF8                     u3687:
  7523  001BF8  2EE8               	decfsz	wreg,f,c
  7524  001BFA  D7FE               	bra	u3687
  7525  001BFC  2F63               	decfsz	??_Lcd_Init& (0+255),f,b
  7526  001BFE  D7FC               	bra	u3687
  7527  001C00  D000               	nop2	
  7528                           
  7529                           ;Library_LCD_2.h: 63: _delay((unsigned long)((5500)*(48000000/4000000.0)));
  7530  001C02  0E56               	movlw	86
  7531  001C04  0100               	movlb	0	; () banked
  7532  001C06  6F63               	movwf	??_Lcd_Init& (0+255),b
  7533  001C08  0EB5               	movlw	181
  7534  001C0A                     u3697:
  7535  001C0A  2EE8               	decfsz	wreg,f,c
  7536  001C0C  D7FE               	bra	u3697
  7537  001C0E  2F63               	decfsz	??_Lcd_Init& (0+255),f,b
  7538  001C10  D7FC               	bra	u3697
  7539  001C12  D000               	nop2	
  7540                           
  7541                           ;Library_LCD_2.h: 64: _delay((unsigned long)((5500)*(48000000/4000000.0)));
  7542  001C14  0E56               	movlw	86
  7543  001C16  0100               	movlb	0	; () banked
  7544  001C18  6F63               	movwf	??_Lcd_Init& (0+255),b
  7545  001C1A  0EB5               	movlw	181
  7546  001C1C                     u3707:
  7547  001C1C  2EE8               	decfsz	wreg,f,c
  7548  001C1E  D7FE               	bra	u3707
  7549  001C20  2F63               	decfsz	??_Lcd_Init& (0+255),f,b
  7550  001C22  D7FC               	bra	u3707
  7551  001C24  D000               	nop2	
  7552                           
  7553                           ;Library_LCD_2.h: 65: _delay((unsigned long)((5500)*(48000000/4000000.0)));
  7554  001C26  0E56               	movlw	86
  7555  001C28  0100               	movlb	0	; () banked
  7556  001C2A  6F63               	movwf	??_Lcd_Init& (0+255),b
  7557  001C2C  0EB5               	movlw	181
  7558  001C2E                     u3717:
  7559  001C2E  2EE8               	decfsz	wreg,f,c
  7560  001C30  D7FE               	bra	u3717
  7561  001C32  2F63               	decfsz	??_Lcd_Init& (0+255),f,b
  7562  001C34  D7FC               	bra	u3717
  7563  001C36  D000               	nop2	
  7564                           
  7565                           ;Library_LCD_2.h: 66: for(data = 1; data < 4; data ++)
  7566  001C38  0E01               	movlw	1
  7567  001C3A  0100               	movlb	0	; () banked
  7568  001C3C  6F64               	movwf	Lcd_Init@data& (0+255),b
  7569  001C3E  D020               	goto	L6
  7570  001C40                     l62:
  7571                           
  7572                           ; BSR set to: 0
  7573                           ;Library_LCD_2.h: 67: {
  7574                           ;Library_LCD_2.h: 68: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits
      +                          .RD4 = 1; PORTDbits.RD3 = 0;
  7575  001C40  9E83               	bcf	3971,7,c	;volatile
  7576  001C42  9C83               	bcf	3971,6,c	;volatile
  7577  001C44  8A83               	bsf	3971,5,c	;volatile
  7578  001C46  8883               	bsf	3971,4,c	;volatile
  7579  001C48  9683               	bcf	3971,3,c	;volatile
  7580                           
  7581                           ;Library_LCD_2.h: 69: PORTDbits.RD1 = 0; PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits
      +                          .RD5 = 1; PORTDbits.RD4 = 1;
  7582  001C4A  9283               	bcf	3971,1,c	;volatile
  7583  001C4C  9E83               	bcf	3971,7,c	;volatile
  7584  001C4E  9C83               	bcf	3971,6,c	;volatile
  7585  001C50  8A83               	bsf	3971,5,c	;volatile
  7586  001C52  8883               	bsf	3971,4,c	;volatile
  7587                           
  7588                           ;Library_LCD_2.h: 70: PORTDbits.RD3 = 1; PORTDbits.RD1 = 0;
  7589  001C54  8683               	bsf	3971,3,c	;volatile
  7590  001C56  9283               	bcf	3971,1,c	;volatile
  7591                           
  7592                           ; BSR set to: 0
  7593                           ;Library_LCD_2.h: 71: _delay((unsigned long)((5)*(48000000/4000000.0)));
  7594  001C58  0E14               	movlw	20
  7595  001C5A                     u3727:
  7596  001C5A  2EE8               	decfsz	wreg,f,c
  7597  001C5C  D7FE               	bra	u3727
  7598                           
  7599                           ;Library_LCD_2.h: 72: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits
      +                          .RD4 = 1; PORTDbits.RD3 = 0;
  7600  001C5E  9E83               	bcf	3971,7,c	;volatile
  7601  001C60  9C83               	bcf	3971,6,c	;volatile
  7602  001C62  8A83               	bsf	3971,5,c	;volatile
  7603  001C64  8883               	bsf	3971,4,c	;volatile
  7604  001C66  9683               	bcf	3971,3,c	;volatile
  7605                           
  7606                           ;Library_LCD_2.h: 73: PORTDbits.RD1 = 0;
  7607  001C68  9283               	bcf	3971,1,c	;volatile
  7608                           
  7609                           ;Library_LCD_2.h: 74: _delay((unsigned long)((5500)*(48000000/4000000.0)));
  7610  001C6A  0E56               	movlw	86
  7611  001C6C  0100               	movlb	0	; () banked
  7612  001C6E  6F63               	movwf	??_Lcd_Init& (0+255),b
  7613  001C70  0EB5               	movlw	181
  7614  001C72                     u3737:
  7615  001C72  2EE8               	decfsz	wreg,f,c
  7616  001C74  D7FE               	bra	u3737
  7617  001C76  2F63               	decfsz	??_Lcd_Init& (0+255),f,b
  7618  001C78  D7FC               	bra	u3737
  7619  001C7A  D000               	nop2	
  7620  001C7C  0100               	movlb	0	; () banked
  7621  001C7E  2B64               	incf	Lcd_Init@data& (0+255),f,b
  7622  001C80                     L6:
  7623  001C80  0E03               	movlw	3
  7624  001C82  6564               	cpfsgt	Lcd_Init@data& (0+255),b
  7625  001C84  D7DD               	goto	l62
  7626                           
  7627                           ; BSR set to: 0
  7628                           ;Library_LCD_2.h: 75: }
  7629                           ;Library_LCD_2.h: 76: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits
      +                          .RD4 = 0; PORTDbits.RD3 = 0; PORTDbits.RD1 = 0;
  7630  001C86  9E83               	bcf	3971,7,c	;volatile
  7631  001C88  9C83               	bcf	3971,6,c	;volatile
  7632  001C8A  8A83               	bsf	3971,5,c	;volatile
  7633  001C8C  9883               	bcf	3971,4,c	;volatile
  7634  001C8E  9683               	bcf	3971,3,c	;volatile
  7635  001C90  9283               	bcf	3971,1,c	;volatile
  7636                           
  7637                           ;Library_LCD_2.h: 77: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits
      +                          .RD4 = 0; PORTDbits.RD3 = 1; PORTDbits.RD1 = 0;
  7638  001C92  9E83               	bcf	3971,7,c	;volatile
  7639  001C94  9C83               	bcf	3971,6,c	;volatile
  7640  001C96  8A83               	bsf	3971,5,c	;volatile
  7641  001C98  9883               	bcf	3971,4,c	;volatile
  7642  001C9A  8683               	bsf	3971,3,c	;volatile
  7643  001C9C  9283               	bcf	3971,1,c	;volatile
  7644                           
  7645                           ; BSR set to: 0
  7646                           ;Library_LCD_2.h: 78: _delay((unsigned long)((5)*(48000000/4000000.0)));
  7647  001C9E  0E14               	movlw	20
  7648  001CA0                     u3747:
  7649  001CA0  2EE8               	decfsz	wreg,f,c
  7650  001CA2  D7FE               	bra	u3747
  7651                           
  7652                           ;Library_LCD_2.h: 79: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits
      +                          .RD4 = 0; PORTDbits.RD3 = 0; PORTDbits.RD1 = 0;
  7653  001CA4  9E83               	bcf	3971,7,c	;volatile
  7654  001CA6  9C83               	bcf	3971,6,c	;volatile
  7655  001CA8  8A83               	bsf	3971,5,c	;volatile
  7656  001CAA  9883               	bcf	3971,4,c	;volatile
  7657  001CAC  9683               	bcf	3971,3,c	;volatile
  7658  001CAE  9283               	bcf	3971,1,c	;volatile
  7659                           
  7660                           ;Library_LCD_2.h: 80: _delay((unsigned long)((5500)*(48000000/4000000.0)));
  7661  001CB0  0E56               	movlw	86
  7662  001CB2  0100               	movlb	0	; () banked
  7663  001CB4  6F63               	movwf	??_Lcd_Init& (0+255),b
  7664  001CB6  0EB5               	movlw	181
  7665  001CB8                     u3757:
  7666  001CB8  2EE8               	decfsz	wreg,f,c
  7667  001CBA  D7FE               	bra	u3757
  7668  001CBC  2F63               	decfsz	??_Lcd_Init& (0+255),f,b
  7669  001CBE  D7FC               	bra	u3757
  7670  001CC0  D000               	nop2	
  7671                           
  7672                           ;Library_LCD_2.h: 81: data = 40; Lcd_Cmd(data);
  7673  001CC2  0E28               	movlw	40
  7674  001CC4  0100               	movlb	0	; () banked
  7675  001CC6  6F64               	movwf	Lcd_Init@data& (0+255),b
  7676                           
  7677                           ; BSR set to: 0
  7678  001CC8  5164               	movf	Lcd_Init@data& (0+255),w,b
  7679  001CCA  ECAE  F00F         	call	_Lcd_Cmd
  7680                           
  7681                           ;Library_LCD_2.h: 82: data = 16; Lcd_Cmd(data);
  7682  001CCE  0E10               	movlw	16
  7683  001CD0  0100               	movlb	0	; () banked
  7684  001CD2  6F64               	movwf	Lcd_Init@data& (0+255),b
  7685                           
  7686                           ; BSR set to: 0
  7687  001CD4  5164               	movf	Lcd_Init@data& (0+255),w,b
  7688  001CD6  ECAE  F00F         	call	_Lcd_Cmd
  7689                           
  7690                           ;Library_LCD_2.h: 83: data = 1; Lcd_Cmd(data);
  7691  001CDA  0E01               	movlw	1
  7692  001CDC  0100               	movlb	0	; () banked
  7693  001CDE  6F64               	movwf	Lcd_Init@data& (0+255),b
  7694                           
  7695                           ; BSR set to: 0
  7696  001CE0  5164               	movf	Lcd_Init@data& (0+255),w,b
  7697  001CE2  ECAE  F00F         	call	_Lcd_Cmd
  7698                           
  7699                           ;Library_LCD_2.h: 84: data = 15; Lcd_Cmd(data);
  7700  001CE6  0E0F               	movlw	15
  7701  001CE8  0100               	movlb	0	; () banked
  7702  001CEA  6F64               	movwf	Lcd_Init@data& (0+255),b
  7703                           
  7704                           ; BSR set to: 0
  7705  001CEC  5164               	movf	Lcd_Init@data& (0+255),w,b
  7706  001CEE  ECAE  F00F         	call	_Lcd_Cmd
  7707  001CF2  0012               	return		;funcret
  7708  001CF4                     __end_of_Lcd_Init:
  7709                           	opt stack 0
  7710                           tblptru	equ	0xFF8
  7711                           tblptrh	equ	0xFF7
  7712                           tblptrl	equ	0xFF6
  7713                           tablat	equ	0xFF5
  7714                           prodh	equ	0xFF4
  7715                           prodl	equ	0xFF3
  7716                           intcon	equ	0xFF2
  7717                           postinc0	equ	0xFEE
  7718                           wreg	equ	0xFE8
  7719                           indf2	equ	0xFDF
  7720                           postinc2	equ	0xFDE
  7721                           postdec2	equ	0xFDD
  7722                           fsr2h	equ	0xFDA
  7723                           fsr2l	equ	0xFD9
  7724                           status	equ	0xFD8
  7725                           
  7726 ;; *************** function _Lcd_Cmd *****************
  7727 ;; Defined at:
  7728 ;;		line 144 in file "Library_LCD_2.h"
  7729 ;; Parameters:    Size  Location     Type
  7730 ;;  data            1    wreg     unsigned char 
  7731 ;; Auto vars:     Size  Location     Type
  7732 ;;  data            1    2[BANK0 ] unsigned char 
  7733 ;; Return value:  Size  Location     Type
  7734 ;;                  1    wreg      void 
  7735 ;; Registers used:
  7736 ;;		wreg, status,2, status,0
  7737 ;; Tracked objects:
  7738 ;;		On entry : 0/0
  7739 ;;		On exit  : 0/0
  7740 ;;		Unchanged: 0/0
  7741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7742 ;;      Params:         0       0       0       0       0       0       0       0       0
  7743 ;;      Locals:         0       1       0       0       0       0       0       0       0
  7744 ;;      Temps:          0       2       0       0       0       0       0       0       0
  7745 ;;      Totals:         0       3       0       0       0       0       0       0       0
  7746 ;;Total ram usage:        3 bytes
  7747 ;; Hardware stack levels used:    1
  7748 ;; Hardware stack levels required when called:    3
  7749 ;; This function calls:
  7750 ;;		Nothing
  7751 ;; This function is called by:
  7752 ;;		_Lcd_Init
  7753 ;;		_Lcd_Out2
  7754 ;;		_main
  7755 ;;		_Lcd_Out
  7756 ;; This function uses a non-reentrant model
  7757 ;;
  7758                           
  7759                           	psect	text26
  7760  001F5C                     __ptext26:
  7761                           	opt stack 0
  7762  001F5C                     _Lcd_Cmd:
  7763                           	opt stack 26
  7764                           
  7765                           ;incstack = 0
  7766                           ;Lcd_Cmd@data stored from wreg
  7767  001F5C  0100               	movlb	0	; () banked
  7768  001F5E  6F62               	movwf	Lcd_Cmd@data& (0+255),b
  7769                           
  7770                           ;Library_LCD_2.h: 145: PORTDbits.RD3 = 0; PORTDbits.RD1 = 0;
  7771  001F60  9683               	bcf	3971,3,c	;volatile
  7772  001F62  9283               	bcf	3971,1,c	;volatile
  7773                           
  7774                           ;Library_LCD_2.h: 146: PORTDbits.RD7 = (data & 0b10000000)>>7; PORTDbits.RD6 = (data & 0
      +                          b01000000)>>6;
  7775  001F64  0100               	movlb	0	; () banked
  7776  001F66  6B60               	clrf	??_Lcd_Cmd& (0+255),b
  7777  001F68  AF62               	btfss	Lcd_Cmd@data& (0+255),7,b
  7778  001F6A  D001               	bra	u2275
  7779  001F6C  2B60               	incf	??_Lcd_Cmd& (0+255),f,b
  7780  001F6E                     u2275:
  7781  001F6E  0E01               	movlw	1
  7782  001F70  1760               	andwf	??_Lcd_Cmd& (0+255),f,b
  7783  001F72  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
  7784  001F74  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
  7785  001F76  5083               	movf	3971,w,c	;volatile
  7786  001F78  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
  7787  001F7A  0B7F               	andlw	-129
  7788  001F7C  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
  7789  001F7E  6E83               	movwf	3971,c	;volatile
  7790  001F80  C062  F060         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  7791  001F84  0E06               	movlw	6
  7792  001F86  6F61               	movwf	(??_Lcd_Cmd+1)& (0+255),b
  7793  001F88                     u2285:
  7794  001F88  90D8               	bcf	status,0,c
  7795  001F8A  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
  7796  001F8C  2F61               	decfsz	(??_Lcd_Cmd+1)& (0+255),f,b
  7797  001F8E  D7FC               	goto	u2285
  7798  001F90  0E01               	movlw	1
  7799  001F92  1760               	andwf	??_Lcd_Cmd& (0+255),f,b
  7800  001F94  3B60               	swapf	??_Lcd_Cmd& (0+255),f,b
  7801  001F96  4760               	rlncf	??_Lcd_Cmd& (0+255),f,b
  7802  001F98  4760               	rlncf	??_Lcd_Cmd& (0+255),f,b
  7803  001F9A  5083               	movf	3971,w,c	;volatile
  7804  001F9C  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
  7805  001F9E  0BBF               	andlw	-65
  7806  001FA0  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
  7807  001FA2  6E83               	movwf	3971,c	;volatile
  7808                           
  7809                           ;Library_LCD_2.h: 147: PORTDbits.RD5 = (data & 0b00100000)>>5; PORTDbits.RD4 = (data & 0
      +                          b00010000)>>4;
  7810  001FA4  C062  F060         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  7811  001FA8  0E05               	movlw	5
  7812  001FAA  6F61               	movwf	(??_Lcd_Cmd+1)& (0+255),b
  7813  001FAC                     u2295:
  7814  001FAC  90D8               	bcf	status,0,c
  7815  001FAE  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
  7816  001FB0  2F61               	decfsz	(??_Lcd_Cmd+1)& (0+255),f,b
  7817  001FB2  D7FC               	goto	u2295
  7818  001FB4  0E01               	movlw	1
  7819  001FB6  1760               	andwf	??_Lcd_Cmd& (0+255),f,b
  7820  001FB8  3B60               	swapf	??_Lcd_Cmd& (0+255),f,b
  7821  001FBA  4760               	rlncf	??_Lcd_Cmd& (0+255),f,b
  7822  001FBC  5083               	movf	3971,w,c	;volatile
  7823  001FBE  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
  7824  001FC0  0BDF               	andlw	-33
  7825  001FC2  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
  7826  001FC4  6E83               	movwf	3971,c	;volatile
  7827  001FC6  C062  F060         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  7828  001FCA  3B60               	swapf	??_Lcd_Cmd& (0+255),f,b
  7829  001FCC  0E0F               	movlw	15
  7830  001FCE  1760               	andwf	??_Lcd_Cmd& (0+255),f,b
  7831  001FD0  0E01               	movlw	1
  7832  001FD2  1760               	andwf	??_Lcd_Cmd& (0+255),f,b
  7833  001FD4  3B60               	swapf	??_Lcd_Cmd& (0+255),f,b
  7834  001FD6  5083               	movf	3971,w,c	;volatile
  7835  001FD8  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
  7836  001FDA  0BEF               	andlw	-17
  7837  001FDC  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
  7838  001FDE  6E83               	movwf	3971,c	;volatile
  7839                           
  7840                           ; BSR set to: 0
  7841                           ;Library_LCD_2.h: 148: _delay(10);
  7842  001FE0  0E03               	movlw	3
  7843  001FE2                     u3767:
  7844  001FE2  2EE8               	decfsz	wreg,f,c
  7845  001FE4  D7FE               	bra	u3767
  7846  001FE6  F000               	nop	
  7847                           
  7848                           ;Library_LCD_2.h: 149: PORTDbits.RD3 = 1; _delay((unsigned long)((5)*(48000000/4000000.0
      +                          ))); PORTDbits.RD3 = 0;
  7849  001FE8  8683               	bsf	3971,3,c	;volatile
  7850  001FEA  0E14               	movlw	20
  7851  001FEC                     u3777:
  7852  001FEC  2EE8               	decfsz	wreg,f,c
  7853  001FEE  D7FE               	bra	u3777
  7854  001FF0  9683               	bcf	3971,3,c	;volatile
  7855                           
  7856                           ;Library_LCD_2.h: 150: PORTDbits.RD7 = (data & 0b00001000)>>3; PORTDbits.RD6 = (data & 0
      +                          b00000100)>>2;
  7857  001FF2  C062  F060         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  7858  001FF6  0100               	movlb	0	; () banked
  7859  001FF8  90D8               	bcf	status,0,c
  7860  001FFA  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
  7861  001FFC  90D8               	bcf	status,0,c
  7862  001FFE  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
  7863  002000  90D8               	bcf	status,0,c
  7864  002002  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
  7865  002004  0E01               	movlw	1
  7866  002006  1760               	andwf	??_Lcd_Cmd& (0+255),f,b
  7867  002008  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
  7868  00200A  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
  7869  00200C  5083               	movf	3971,w,c	;volatile
  7870  00200E  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
  7871  002010  0B7F               	andlw	-129
  7872  002012  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
  7873  002014  6E83               	movwf	3971,c	;volatile
  7874  002016  C062  F060         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  7875  00201A  90D8               	bcf	status,0,c
  7876  00201C  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
  7877  00201E  90D8               	bcf	status,0,c
  7878  002020  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
  7879  002022  0E01               	movlw	1
  7880  002024  1760               	andwf	??_Lcd_Cmd& (0+255),f,b
  7881  002026  3B60               	swapf	??_Lcd_Cmd& (0+255),f,b
  7882  002028  4760               	rlncf	??_Lcd_Cmd& (0+255),f,b
  7883  00202A  4760               	rlncf	??_Lcd_Cmd& (0+255),f,b
  7884  00202C  5083               	movf	3971,w,c	;volatile
  7885  00202E  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
  7886  002030  0BBF               	andlw	-65
  7887  002032  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
  7888  002034  6E83               	movwf	3971,c	;volatile
  7889                           
  7890                           ;Library_LCD_2.h: 151: PORTDbits.RD5 = (data & 0b00000010)>>1; PORTDbits.RD4 = (data & 0
      +                          b00000001);
  7891  002036  C062  F060         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  7892  00203A  90D8               	bcf	status,0,c
  7893  00203C  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
  7894  00203E  0E01               	movlw	1
  7895  002040  1760               	andwf	??_Lcd_Cmd& (0+255),f,b
  7896  002042  3B60               	swapf	??_Lcd_Cmd& (0+255),f,b
  7897  002044  4760               	rlncf	??_Lcd_Cmd& (0+255),f,b
  7898  002046  5083               	movf	3971,w,c	;volatile
  7899  002048  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
  7900  00204A  0BDF               	andlw	-33
  7901  00204C  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
  7902  00204E  6E83               	movwf	3971,c	;volatile
  7903  002050  C062  F060         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  7904  002054  0E01               	movlw	1
  7905  002056  1760               	andwf	??_Lcd_Cmd& (0+255),f,b
  7906  002058  3B60               	swapf	??_Lcd_Cmd& (0+255),f,b
  7907  00205A  5083               	movf	3971,w,c	;volatile
  7908  00205C  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
  7909  00205E  0BEF               	andlw	-17
  7910  002060  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
  7911  002062  6E83               	movwf	3971,c	;volatile
  7912                           
  7913                           ; BSR set to: 0
  7914                           ;Library_LCD_2.h: 152: _delay(10);
  7915  002064  0E03               	movlw	3
  7916  002066                     u3787:
  7917  002066  2EE8               	decfsz	wreg,f,c
  7918  002068  D7FE               	bra	u3787
  7919  00206A  F000               	nop	
  7920                           
  7921                           ;Library_LCD_2.h: 153: PORTDbits.RD3 = 1; _delay((unsigned long)((5)*(48000000/4000000.0
      +                          ))); PORTDbits.RD3 = 0;
  7922  00206C  8683               	bsf	3971,3,c	;volatile
  7923  00206E  0E14               	movlw	20
  7924  002070                     u3797:
  7925  002070  2EE8               	decfsz	wreg,f,c
  7926  002072  D7FE               	bra	u3797
  7927  002074  9683               	bcf	3971,3,c	;volatile
  7928                           
  7929                           ;Library_LCD_2.h: 154: _delay((unsigned long)((5500)*(48000000/4000000.0)));
  7930  002076  0E56               	movlw	86
  7931  002078  0100               	movlb	0	; () banked
  7932  00207A  6F60               	movwf	??_Lcd_Cmd& (0+255),b
  7933  00207C  0EB5               	movlw	181
  7934  00207E                     u3807:
  7935  00207E  2EE8               	decfsz	wreg,f,c
  7936  002080  D7FE               	bra	u3807
  7937  002082  2F60               	decfsz	??_Lcd_Cmd& (0+255),f,b
  7938  002084  D7FC               	bra	u3807
  7939  002086  D000               	nop2	
  7940  002088  0012               	return		;funcret
  7941  00208A                     __end_of_Lcd_Cmd:
  7942                           	opt stack 0
  7943                           tblptru	equ	0xFF8
  7944                           tblptrh	equ	0xFF7
  7945                           tblptrl	equ	0xFF6
  7946                           tablat	equ	0xFF5
  7947                           prodh	equ	0xFF4
  7948                           prodl	equ	0xFF3
  7949                           intcon	equ	0xFF2
  7950                           postinc0	equ	0xFEE
  7951                           wreg	equ	0xFE8
  7952                           indf2	equ	0xFDF
  7953                           postinc2	equ	0xFDE
  7954                           postdec2	equ	0xFDD
  7955                           fsr2h	equ	0xFDA
  7956                           fsr2l	equ	0xFD9
  7957                           status	equ	0xFD8
  7958                           
  7959 ;; *************** function _comparar *****************
  7960 ;; Defined at:
  7961 ;;		line 93 in file "main_014_Practice_CCP Comparacion_ADC.c"
  7962 ;; Parameters:    Size  Location     Type
  7963 ;;		None
  7964 ;; Auto vars:     Size  Location     Type
  7965 ;;		None
  7966 ;; Return value:  Size  Location     Type
  7967 ;;                  1    wreg      void 
  7968 ;; Registers used:
  7969 ;;		wreg, status,2, status,0, cstack
  7970 ;; Tracked objects:
  7971 ;;		On entry : 0/0
  7972 ;;		On exit  : 0/0
  7973 ;;		Unchanged: 0/0
  7974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7975 ;;      Params:         0       0       0       0       0       0       0       0       0
  7976 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7977 ;;      Temps:         18       0       0       0       0       0       0       0       0
  7978 ;;      Totals:        18       0       0       0       0       0       0       0       0
  7979 ;;Total ram usage:       18 bytes
  7980 ;; Hardware stack levels used:    1
  7981 ;; Hardware stack levels required when called:    2
  7982 ;; This function calls:
  7983 ;;		i2___ftdiv
  7984 ;;		i2___ftmul
  7985 ;;		i2___lwtoft
  7986 ;; This function is called by:
  7987 ;;		Interrupt level 2
  7988 ;; This function uses a non-reentrant model
  7989 ;;
  7990                           
  7991                           	psect	intcode
  7992  000008                     __pintcode:
  7993                           	opt stack 0
  7994  000008                     _comparar:
  7995                           	opt stack 24
  7996                           
  7997                           ;incstack = 0
  7998  000008  8255               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7999  00000A  EDDA  F010         	call	int_func,f	;refresh shadow registers
  8000                           tblptru	equ	0xFF8
  8001                           tblptrh	equ	0xFF7
  8002                           tblptrl	equ	0xFF6
  8003                           tablat	equ	0xFF5
  8004                           prodh	equ	0xFF4
  8005                           prodl	equ	0xFF3
  8006                           intcon	equ	0xFF2
  8007                           postinc0	equ	0xFEE
  8008                           wreg	equ	0xFE8
  8009                           indf2	equ	0xFDF
  8010                           postinc2	equ	0xFDE
  8011                           postdec2	equ	0xFDD
  8012                           fsr2h	equ	0xFDA
  8013                           fsr2l	equ	0xFD9
  8014                           status	equ	0xFD8
  8015                           
  8016                           	psect	intcode_body
  8017  0021B4                     __pintcode_body:
  8018                           	opt stack 24
  8019  0021B4                     int_func:
  8020                           	opt stack 24
  8021  0021B4  0006               	pop		; remove dummy address from shadow register refresh
  8022  0021B6  CFFA F02A          	movff	pclath,??_comparar
  8023  0021BA  CFFB F02B          	movff	pclatu,??_comparar+1
  8024  0021BE  CFE9 F02C          	movff	fsr0l,??_comparar+2
  8025  0021C2  CFEA F02D          	movff	fsr0h,??_comparar+3
  8026  0021C6  CFE1 F02E          	movff	fsr1l,??_comparar+4
  8027  0021CA  CFE2 F02F          	movff	fsr1h,??_comparar+5
  8028  0021CE  CFD9 F030          	movff	fsr2l,??_comparar+6
  8029  0021D2  CFDA F031          	movff	fsr2h,??_comparar+7
  8030  0021D6  CFF3 F032          	movff	prodl,??_comparar+8
  8031  0021DA  CFF4 F033          	movff	prodh,??_comparar+9
  8032  0021DE  CFF6 F034          	movff	tblptrl,??_comparar+10
  8033  0021E2  CFF7 F035          	movff	tblptrh,??_comparar+11
  8034  0021E6  CFF8 F036          	movff	tblptru,??_comparar+12
  8035  0021EA  CFF5 F037          	movff	tablat,??_comparar+13
  8036  0021EE  C055  F038         	movff	btemp,??_comparar+14
  8037  0021F2  C056  F039         	movff	btemp+1,??_comparar+15
  8038  0021F6  C057  F03A         	movff	btemp+2,??_comparar+16
  8039  0021FA  C058  F03B         	movff	btemp+3,??_comparar+17
  8040                           
  8041                           ;main_014_Practice_CCP Comparacion_ADC.c: 95: INTCONbits.GIE = 0;
  8042  0021FE  9EF2               	bcf	intcon,7,c	;volatile
  8043                           
  8044                           ;main_014_Practice_CCP Comparacion_ADC.c: 96: if(CCP1IF == 1)
  8045  002200  A49E               	btfss	3998,2,c	;volatile
  8046  002202  D036               	goto	i2l109
  8047                           
  8048                           ;main_014_Practice_CCP Comparacion_ADC.c: 97: {
  8049                           ;main_014_Practice_CCP Comparacion_ADC.c: 98: T1CONbits.TMR1ON = 0;
  8050  002204  90CD               	bcf	4045,0,c	;volatile
  8051                           
  8052                           ;main_014_Practice_CCP Comparacion_ADC.c: 99: PIR1bits.CCP1IF = 0;
  8053  002206  949E               	bcf	3998,2,c	;volatile
  8054                           
  8055                           ;main_014_Practice_CCP Comparacion_ADC.c: 101: adc1 = ADRESH;
  8056  002208  CFC4 F053          	movff	4036,_adc1	;volatile
  8057  00220C  6A54               	clrf	_adc1+1,c
  8058                           
  8059                           ;main_014_Practice_CCP Comparacion_ADC.c: 102: adc1 = adc1<<8;
  8060  00220E  5053               	movf	_adc1,w,c
  8061  002210  6E54               	movwf	_adc1+1,c
  8062  002212  6A53               	clrf	_adc1,c
  8063                           
  8064                           ;main_014_Practice_CCP Comparacion_ADC.c: 103: adc1 = adc1 + ADRESL;
  8065  002214  50C3               	movf	4035,w,c	;volatile
  8066  002216  2453               	addwf	_adc1,w,c
  8067  002218  6E53               	movwf	_adc1,c
  8068  00221A  0E00               	movlw	0
  8069  00221C  2054               	addwfc	_adc1+1,w,c
  8070  00221E  6E54               	movwf	_adc1+1,c
  8071                           
  8072                           ;main_014_Practice_CCP Comparacion_ADC.c: 105: voltaje = adc1 * 4.72 /1024.0;
  8073  002220  0E0A               	movlw	10
  8074  002222  6E0F               	movwf	i2___ftmul@f2,c
  8075  002224  0E97               	movlw	151
  8076  002226  6E10               	movwf	i2___ftmul@f2+1,c
  8077  002228  0E40               	movlw	64
  8078  00222A  6E11               	movwf	i2___ftmul@f2+2,c
  8079  00222C  C053  F009         	movff	_adc1,i2___lwtoft@c
  8080  002230  C054  F00A         	movff	_adc1+1,i2___lwtoft@c+1
  8081  002234  ECA1  F016         	call	i2___lwtoft	;wreg free
  8082  002238  C009  F00C         	movff	?i2___lwtoft,i2___ftmul@f1
  8083  00223C  C00A  F00D         	movff	?i2___lwtoft+1,i2___ftmul@f1+1
  8084  002240  C00B  F00E         	movff	?i2___lwtoft+2,i2___ftmul@f1+2
  8085  002244  EC55  F012         	call	i2___ftmul	;wreg free
  8086  002248  C00C  F01B         	movff	?i2___ftmul,i2___ftdiv@f1
  8087  00224C  C00D  F01C         	movff	?i2___ftmul+1,i2___ftdiv@f1+1
  8088  002250  C00E  F01D         	movff	?i2___ftmul+2,i2___ftdiv@f1+2
  8089  002254  0E00               	movlw	0
  8090  002256  6E1E               	movwf	i2___ftdiv@f2,c
  8091  002258  0E80               	movlw	128
  8092  00225A  6E1F               	movwf	i2___ftdiv@f2+1,c
  8093  00225C  0E44               	movlw	68
  8094  00225E  6E20               	movwf	i2___ftdiv@f2+2,c
  8095  002260  EC43  F013         	call	i2___ftdiv	;wreg free
  8096  002264  C01B  F050         	movff	?i2___ftdiv,_voltaje
  8097  002268  C01C  F051         	movff	?i2___ftdiv+1,_voltaje+1
  8098  00226C  C01D  F052         	movff	?i2___ftdiv+2,_voltaje+2
  8099  002270                     i2l109:
  8100  002270  C03B  F058         	movff	??_comparar+17,btemp+3
  8101  002274  C03A  F057         	movff	??_comparar+16,btemp+2
  8102  002278  C039  F056         	movff	??_comparar+15,btemp+1
  8103  00227C  C038  F055         	movff	??_comparar+14,btemp
  8104  002280  C037  FFF5         	movff	??_comparar+13,tablat
  8105  002284  C036  FFF8         	movff	??_comparar+12,tblptru
  8106  002288  C035  FFF7         	movff	??_comparar+11,tblptrh
  8107  00228C  C034  FFF6         	movff	??_comparar+10,tblptrl
  8108  002290  C033  FFF4         	movff	??_comparar+9,prodh
  8109  002294  C032  FFF3         	movff	??_comparar+8,prodl
  8110  002298  C031  FFDA         	movff	??_comparar+7,fsr2h
  8111  00229C  C030  FFD9         	movff	??_comparar+6,fsr2l
  8112  0022A0  C02F  FFE2         	movff	??_comparar+5,fsr1h
  8113  0022A4  C02E  FFE1         	movff	??_comparar+4,fsr1l
  8114  0022A8  C02D  FFEA         	movff	??_comparar+3,fsr0h
  8115  0022AC  C02C  FFE9         	movff	??_comparar+2,fsr0l
  8116  0022B0  C02B  FFFB         	movff	??_comparar+1,pclatu
  8117  0022B4  C02A  FFFA         	movff	??_comparar,pclath
  8118  0022B8  9255               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8119  0022BA  0011               	retfie		f
  8120  0022BC                     __end_of_comparar:
  8121                           	opt stack 0
  8122                           pclatu	equ	0xFFB
  8123                           pclath	equ	0xFFA
  8124                           tblptru	equ	0xFF8
  8125                           tblptrh	equ	0xFF7
  8126                           tblptrl	equ	0xFF6
  8127                           tablat	equ	0xFF5
  8128                           prodh	equ	0xFF4
  8129                           prodl	equ	0xFF3
  8130                           intcon	equ	0xFF2
  8131                           postinc0	equ	0xFEE
  8132                           fsr0h	equ	0xFEA
  8133                           fsr0l	equ	0xFE9
  8134                           wreg	equ	0xFE8
  8135                           fsr1h	equ	0xFE2
  8136                           fsr1l	equ	0xFE1
  8137                           indf2	equ	0xFDF
  8138                           postinc2	equ	0xFDE
  8139                           postdec2	equ	0xFDD
  8140                           fsr2h	equ	0xFDA
  8141                           fsr2l	equ	0xFD9
  8142                           status	equ	0xFD8
  8143                           
  8144 ;; *************** function i2___lwtoft *****************
  8145 ;; Defined at:
  8146 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
  8147 ;; Parameters:    Size  Location     Type
  8148 ;;  c               2    8[COMRAM] unsigned int 
  8149 ;; Auto vars:     Size  Location     Type
  8150 ;;		None
  8151 ;; Return value:  Size  Location     Type
  8152 ;;                  3    8[COMRAM] float 
  8153 ;; Registers used:
  8154 ;;		wreg, status,2, status,0, cstack
  8155 ;; Tracked objects:
  8156 ;;		On entry : 0/0
  8157 ;;		On exit  : 0/0
  8158 ;;		Unchanged: 0/0
  8159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8160 ;;      Params:         3       0       0       0       0       0       0       0       0
  8161 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8162 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8163 ;;      Totals:         3       0       0       0       0       0       0       0       0
  8164 ;;Total ram usage:        3 bytes
  8165 ;; Hardware stack levels used:    1
  8166 ;; Hardware stack levels required when called:    1
  8167 ;; This function calls:
  8168 ;;		i2___ftpack
  8169 ;; This function is called by:
  8170 ;;		_comparar
  8171 ;; This function uses a non-reentrant model
  8172 ;;
  8173                           
  8174                           	psect	text28
  8175  002D42                     __ptext28:
  8176                           	opt stack 0
  8177  002D42                     i2___lwtoft:
  8178                           	opt stack 24
  8179                           
  8180                           ;incstack = 0
  8181  002D42  C009  F001         	movff	i2___lwtoft@c,i2___ftpack@arg
  8182  002D46  C00A  F002         	movff	i2___lwtoft@c+1,i2___ftpack@arg+1
  8183  002D4A  6A03               	clrf	i2___ftpack@arg+2,c
  8184  002D4C  0E8E               	movlw	142
  8185  002D4E  6E04               	movwf	i2___ftpack@exp,c
  8186  002D50  0E00               	movlw	0
  8187  002D52  6E05               	movwf	i2___ftpack@sign,c
  8188  002D54  EC0E  F014         	call	i2___ftpack	;wreg free
  8189  002D58  C001  F009         	movff	?i2___ftpack,?i2___lwtoft
  8190  002D5C  C002  F00A         	movff	?i2___ftpack+1,?i2___lwtoft+1
  8191  002D60  C003  F00B         	movff	?i2___ftpack+2,?i2___lwtoft+2
  8192  002D64  0012               	return	
  8193  002D66                     __end_ofi2___lwtoft:
  8194                           	opt stack 0
  8195                           pclatu	equ	0xFFB
  8196                           pclath	equ	0xFFA
  8197                           tblptru	equ	0xFF8
  8198                           tblptrh	equ	0xFF7
  8199                           tblptrl	equ	0xFF6
  8200                           tablat	equ	0xFF5
  8201                           prodh	equ	0xFF4
  8202                           prodl	equ	0xFF3
  8203                           intcon	equ	0xFF2
  8204                           postinc0	equ	0xFEE
  8205                           fsr0h	equ	0xFEA
  8206                           fsr0l	equ	0xFE9
  8207                           wreg	equ	0xFE8
  8208                           fsr1h	equ	0xFE2
  8209                           fsr1l	equ	0xFE1
  8210                           indf2	equ	0xFDF
  8211                           postinc2	equ	0xFDE
  8212                           postdec2	equ	0xFDD
  8213                           fsr2h	equ	0xFDA
  8214                           fsr2l	equ	0xFD9
  8215                           status	equ	0xFD8
  8216                           
  8217 ;; *************** function i2___ftmul *****************
  8218 ;; Defined at:
  8219 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  8220 ;; Parameters:    Size  Location     Type
  8221 ;;  f1              3   11[COMRAM] float 
  8222 ;;  f2              3   14[COMRAM] float 
  8223 ;; Auto vars:     Size  Location     Type
  8224 ;;  __ftmul         3   21[COMRAM] unsigned um
  8225 ;;  __ftmul         1   25[COMRAM] unsigned char 
  8226 ;;  __ftmul         1   24[COMRAM] unsigned char 
  8227 ;;  __ftmul         1   20[COMRAM] unsigned char 
  8228 ;; Return value:  Size  Location     Type
  8229 ;;                  3   11[COMRAM] float 
  8230 ;; Registers used:
  8231 ;;		wreg, status,2, status,0, cstack
  8232 ;; Tracked objects:
  8233 ;;		On entry : 0/0
  8234 ;;		On exit  : 0/0
  8235 ;;		Unchanged: 0/0
  8236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8237 ;;      Params:         6       0       0       0       0       0       0       0       0
  8238 ;;      Locals:         6       0       0       0       0       0       0       0       0
  8239 ;;      Temps:          3       0       0       0       0       0       0       0       0
  8240 ;;      Totals:        15       0       0       0       0       0       0       0       0
  8241 ;;Total ram usage:       15 bytes
  8242 ;; Hardware stack levels used:    1
  8243 ;; Hardware stack levels required when called:    1
  8244 ;; This function calls:
  8245 ;;		i2___ftpack
  8246 ;; This function is called by:
  8247 ;;		_comparar
  8248 ;; This function uses a non-reentrant model
  8249 ;;
  8250                           
  8251                           	psect	text29
  8252  0024AA                     __ptext29:
  8253                           	opt stack 0
  8254  0024AA                     i2___ftmul:
  8255                           	opt stack 24
  8256                           
  8257                           ;incstack = 0
  8258  0024AA  C00E  F012         	movff	i2___ftmul@f1+2,??i2___ftmul
  8259  0024AE  6A13               	clrf	(??i2___ftmul+1)& (0+255),c
  8260  0024B0  6A14               	clrf	(??i2___ftmul+2)& (0+255),c
  8261  0024B2  340D               	rlcf	i2___ftmul@f1+1,w,c
  8262  0024B4  3612               	rlcf	??i2___ftmul& (0+255),f,c
  8263  0024B6  E301               	bnc	u351_41
  8264  0024B8  8013               	bsf	(??i2___ftmul+1)& (0+255),0,c
  8265  0024BA                     u351_41:
  8266  0024BA  5012               	movf	??i2___ftmul,w,c
  8267  0024BC  6E15               	movwf	i2___ftmul@exp,c
  8268  0024BE  5015               	movf	i2___ftmul@exp,w,c
  8269  0024C0  A4D8               	btfss	status,2,c
  8270  0024C2  D007               	goto	i2l574
  8271  0024C4  0E00               	movlw	0
  8272  0024C6  6E0C               	movwf	?i2___ftmul,c
  8273  0024C8  0E00               	movlw	0
  8274  0024CA  6E0D               	movwf	?i2___ftmul+1,c
  8275  0024CC  0E00               	movlw	0
  8276  0024CE  6E0E               	movwf	?i2___ftmul+2,c
  8277  0024D0  0012               	return	
  8278  0024D2                     i2l574:
  8279  0024D2  C011  F012         	movff	i2___ftmul@f2+2,??i2___ftmul
  8280  0024D6  6A13               	clrf	(??i2___ftmul+1)& (0+255),c
  8281  0024D8  6A14               	clrf	(??i2___ftmul+2)& (0+255),c
  8282  0024DA  3410               	rlcf	i2___ftmul@f2+1,w,c
  8283  0024DC  3612               	rlcf	??i2___ftmul& (0+255),f,c
  8284  0024DE  E301               	bnc	u353_41
  8285  0024E0  8013               	bsf	(??i2___ftmul+1)& (0+255),0,c
  8286  0024E2                     u353_41:
  8287  0024E2  5012               	movf	??i2___ftmul,w,c
  8288  0024E4  6E1A               	movwf	i2___ftmul@sign,c
  8289  0024E6  501A               	movf	i2___ftmul@sign,w,c
  8290  0024E8  A4D8               	btfss	status,2,c
  8291  0024EA  D007               	goto	i2l576
  8292  0024EC  0E00               	movlw	0
  8293  0024EE  6E0C               	movwf	?i2___ftmul,c
  8294  0024F0  0E00               	movlw	0
  8295  0024F2  6E0D               	movwf	?i2___ftmul+1,c
  8296  0024F4  0E00               	movlw	0
  8297  0024F6  6E0E               	movwf	?i2___ftmul+2,c
  8298  0024F8  0012               	return	
  8299  0024FA                     i2l576:
  8300  0024FA  501A               	movf	i2___ftmul@sign,w,c
  8301  0024FC  0F7B               	addlw	123
  8302  0024FE  2615               	addwf	i2___ftmul@exp,f,c
  8303  002500  C00E  F01A         	movff	i2___ftmul@f1+2,i2___ftmul@sign
  8304  002504  5011               	movf	i2___ftmul@f2+2,w,c
  8305  002506  1A1A               	xorwf	i2___ftmul@sign,f,c
  8306  002508  0E80               	movlw	128
  8307  00250A  161A               	andwf	i2___ftmul@sign,f,c
  8308  00250C  8E0D               	bsf	i2___ftmul@f1+1,7,c
  8309  00250E  8E10               	bsf	i2___ftmul@f2+1,7,c
  8310  002510  0EFF               	movlw	255
  8311  002512  160F               	andwf	i2___ftmul@f2,f,c
  8312  002514  0EFF               	movlw	255
  8313  002516  1610               	andwf	i2___ftmul@f2+1,f,c
  8314  002518  0E00               	movlw	0
  8315  00251A  1611               	andwf	i2___ftmul@f2+2,f,c
  8316  00251C  0E00               	movlw	0
  8317  00251E  6E16               	movwf	i2___ftmul@f3_as_product,c
  8318  002520  0E00               	movlw	0
  8319  002522  6E17               	movwf	i2___ftmul@f3_as_product+1,c
  8320  002524  0E00               	movlw	0
  8321  002526  6E18               	movwf	i2___ftmul@f3_as_product+2,c
  8322  002528  0E07               	movlw	7
  8323  00252A  6E19               	movwf	i2___ftmul@cntr,c
  8324  00252C  A00C               	btfss	i2___ftmul@f1,0,c
  8325  00252E  D006               	goto	i2l578
  8326  002530  500F               	movf	i2___ftmul@f2,w,c
  8327  002532  2616               	addwf	i2___ftmul@f3_as_product,f,c
  8328  002534  5010               	movf	i2___ftmul@f2+1,w,c
  8329  002536  2217               	addwfc	i2___ftmul@f3_as_product+1,f,c
  8330  002538  5011               	movf	i2___ftmul@f2+2,w,c
  8331  00253A  2218               	addwfc	i2___ftmul@f3_as_product+2,f,c
  8332  00253C                     i2l578:
  8333  00253C  90D8               	bcf	status,0,c
  8334  00253E  320E               	rrcf	i2___ftmul@f1+2,f,c
  8335  002540  320D               	rrcf	i2___ftmul@f1+1,f,c
  8336  002542  320C               	rrcf	i2___ftmul@f1,f,c
  8337  002544  90D8               	bcf	status,0,c
  8338  002546  360F               	rlcf	i2___ftmul@f2,f,c
  8339  002548  3610               	rlcf	i2___ftmul@f2+1,f,c
  8340  00254A  3611               	rlcf	i2___ftmul@f2+2,f,c
  8341  00254C  2E19               	decfsz	i2___ftmul@cntr,f,c
  8342  00254E  D7EE               	goto	i2l577
  8343  002550  0E09               	movlw	9
  8344  002552  6E19               	movwf	i2___ftmul@cntr,c
  8345  002554  A00C               	btfss	i2___ftmul@f1,0,c
  8346  002556  D006               	goto	i2l581
  8347  002558  500F               	movf	i2___ftmul@f2,w,c
  8348  00255A  2616               	addwf	i2___ftmul@f3_as_product,f,c
  8349  00255C  5010               	movf	i2___ftmul@f2+1,w,c
  8350  00255E  2217               	addwfc	i2___ftmul@f3_as_product+1,f,c
  8351  002560  5011               	movf	i2___ftmul@f2+2,w,c
  8352  002562  2218               	addwfc	i2___ftmul@f3_as_product+2,f,c
  8353  002564                     i2l581:
  8354  002564  90D8               	bcf	status,0,c
  8355  002566  320E               	rrcf	i2___ftmul@f1+2,f,c
  8356  002568  320D               	rrcf	i2___ftmul@f1+1,f,c
  8357  00256A  320C               	rrcf	i2___ftmul@f1,f,c
  8358  00256C  90D8               	bcf	status,0,c
  8359  00256E  3218               	rrcf	i2___ftmul@f3_as_product+2,f,c
  8360  002570  3217               	rrcf	i2___ftmul@f3_as_product+1,f,c
  8361  002572  3216               	rrcf	i2___ftmul@f3_as_product,f,c
  8362  002574  2E19               	decfsz	i2___ftmul@cntr,f,c
  8363  002576  D7EE               	goto	i2l580
  8364  002578  C016  F001         	movff	i2___ftmul@f3_as_product,i2___ftpack@arg
  8365  00257C  C017  F002         	movff	i2___ftmul@f3_as_product+1,i2___ftpack@arg+1
  8366  002580  C018  F003         	movff	i2___ftmul@f3_as_product+2,i2___ftpack@arg+2
  8367  002584  C015  F004         	movff	i2___ftmul@exp,i2___ftpack@exp
  8368  002588  C01A  F005         	movff	i2___ftmul@sign,i2___ftpack@sign
  8369  00258C  EC0E  F014         	call	i2___ftpack	;wreg free
  8370  002590  C001  F00C         	movff	?i2___ftpack,?i2___ftmul
  8371  002594  C002  F00D         	movff	?i2___ftpack+1,?i2___ftmul+1
  8372  002598  C003  F00E         	movff	?i2___ftpack+2,?i2___ftmul+2
  8373  00259C  0012               	return	
  8374  00259E                     __end_ofi2___ftmul:
  8375                           	opt stack 0
  8376                           pclatu	equ	0xFFB
  8377                           pclath	equ	0xFFA
  8378                           tblptru	equ	0xFF8
  8379                           tblptrh	equ	0xFF7
  8380                           tblptrl	equ	0xFF6
  8381                           tablat	equ	0xFF5
  8382                           prodh	equ	0xFF4
  8383                           prodl	equ	0xFF3
  8384                           intcon	equ	0xFF2
  8385                           postinc0	equ	0xFEE
  8386                           fsr0h	equ	0xFEA
  8387                           fsr0l	equ	0xFE9
  8388                           wreg	equ	0xFE8
  8389                           fsr1h	equ	0xFE2
  8390                           fsr1l	equ	0xFE1
  8391                           indf2	equ	0xFDF
  8392                           postinc2	equ	0xFDE
  8393                           postdec2	equ	0xFDD
  8394                           fsr2h	equ	0xFDA
  8395                           fsr2l	equ	0xFD9
  8396                           status	equ	0xFD8
  8397                           
  8398 ;; *************** function i2___ftdiv *****************
  8399 ;; Defined at:
  8400 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  8401 ;; Parameters:    Size  Location     Type
  8402 ;;  f1              3   26[COMRAM] float 
  8403 ;;  f2              3   29[COMRAM] float 
  8404 ;; Auto vars:     Size  Location     Type
  8405 ;;  __ftdiv         3   36[COMRAM] float 
  8406 ;;  __ftdiv         1   40[COMRAM] unsigned char 
  8407 ;;  __ftdiv         1   39[COMRAM] unsigned char 
  8408 ;;  __ftdiv         1   35[COMRAM] unsigned char 
  8409 ;; Return value:  Size  Location     Type
  8410 ;;                  3   26[COMRAM] float 
  8411 ;; Registers used:
  8412 ;;		wreg, status,2, status,0, cstack
  8413 ;; Tracked objects:
  8414 ;;		On entry : 0/0
  8415 ;;		On exit  : 0/0
  8416 ;;		Unchanged: 0/0
  8417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8418 ;;      Params:         6       0       0       0       0       0       0       0       0
  8419 ;;      Locals:         6       0       0       0       0       0       0       0       0
  8420 ;;      Temps:          3       0       0       0       0       0       0       0       0
  8421 ;;      Totals:        15       0       0       0       0       0       0       0       0
  8422 ;;Total ram usage:       15 bytes
  8423 ;; Hardware stack levels used:    1
  8424 ;; Hardware stack levels required when called:    1
  8425 ;; This function calls:
  8426 ;;		i2___ftpack
  8427 ;; This function is called by:
  8428 ;;		_comparar
  8429 ;; This function uses a non-reentrant model
  8430 ;;
  8431                           
  8432                           	psect	text30
  8433  002686                     __ptext30:
  8434                           	opt stack 0
  8435  002686                     i2___ftdiv:
  8436                           	opt stack 24
  8437                           
  8438                           ;incstack = 0
  8439  002686  C01D  F021         	movff	i2___ftdiv@f1+2,??i2___ftdiv
  8440  00268A  6A22               	clrf	(??i2___ftdiv+1)& (0+255),c
  8441  00268C  6A23               	clrf	(??i2___ftdiv+2)& (0+255),c
  8442  00268E  341C               	rlcf	i2___ftdiv@f1+1,w,c
  8443  002690  3621               	rlcf	??i2___ftdiv& (0+255),f,c
  8444  002692  E301               	bnc	u346_41
  8445  002694  8022               	bsf	(??i2___ftdiv+1)& (0+255),0,c
  8446  002696                     u346_41:
  8447  002696  5021               	movf	??i2___ftdiv,w,c
  8448  002698  6E28               	movwf	i2___ftdiv@exp,c
  8449  00269A  5028               	movf	i2___ftdiv@exp,w,c
  8450  00269C  A4D8               	btfss	status,2,c
  8451  00269E  D007               	goto	i2l542
  8452  0026A0  0E00               	movlw	0
  8453  0026A2  6E1B               	movwf	?i2___ftdiv,c
  8454  0026A4  0E00               	movlw	0
  8455  0026A6  6E1C               	movwf	?i2___ftdiv+1,c
  8456  0026A8  0E00               	movlw	0
  8457  0026AA  6E1D               	movwf	?i2___ftdiv+2,c
  8458  0026AC  0012               	return	
  8459  0026AE                     i2l542:
  8460  0026AE  C020  F021         	movff	i2___ftdiv@f2+2,??i2___ftdiv
  8461  0026B2  6A22               	clrf	(??i2___ftdiv+1)& (0+255),c
  8462  0026B4  6A23               	clrf	(??i2___ftdiv+2)& (0+255),c
  8463  0026B6  341F               	rlcf	i2___ftdiv@f2+1,w,c
  8464  0026B8  3621               	rlcf	??i2___ftdiv& (0+255),f,c
  8465  0026BA  E301               	bnc	u348_41
  8466  0026BC  8022               	bsf	(??i2___ftdiv+1)& (0+255),0,c
  8467  0026BE                     u348_41:
  8468  0026BE  5021               	movf	??i2___ftdiv,w,c
  8469  0026C0  6E29               	movwf	i2___ftdiv@sign,c
  8470  0026C2  5029               	movf	i2___ftdiv@sign,w,c
  8471  0026C4  A4D8               	btfss	status,2,c
  8472  0026C6  D007               	goto	i2l544
  8473  0026C8  0E00               	movlw	0
  8474  0026CA  6E1B               	movwf	?i2___ftdiv,c
  8475  0026CC  0E00               	movlw	0
  8476  0026CE  6E1C               	movwf	?i2___ftdiv+1,c
  8477  0026D0  0E00               	movlw	0
  8478  0026D2  6E1D               	movwf	?i2___ftdiv+2,c
  8479  0026D4  0012               	return	
  8480  0026D6                     i2l544:
  8481  0026D6  0E00               	movlw	0
  8482  0026D8  6E25               	movwf	i2___ftdiv@f3,c
  8483  0026DA  0E00               	movlw	0
  8484  0026DC  6E26               	movwf	i2___ftdiv@f3+1,c
  8485  0026DE  0E00               	movlw	0
  8486  0026E0  6E27               	movwf	i2___ftdiv@f3+2,c
  8487  0026E2  5029               	movf	i2___ftdiv@sign,w,c
  8488  0026E4  0F89               	addlw	137
  8489  0026E6  5E28               	subwf	i2___ftdiv@exp,f,c
  8490  0026E8  C01D  F029         	movff	i2___ftdiv@f1+2,i2___ftdiv@sign
  8491  0026EC  5020               	movf	i2___ftdiv@f2+2,w,c
  8492  0026EE  1A29               	xorwf	i2___ftdiv@sign,f,c
  8493  0026F0  0E80               	movlw	128
  8494  0026F2  1629               	andwf	i2___ftdiv@sign,f,c
  8495  0026F4  8E1C               	bsf	i2___ftdiv@f1+1,7,c
  8496  0026F6  0EFF               	movlw	255
  8497  0026F8  161B               	andwf	i2___ftdiv@f1,f,c
  8498  0026FA  0EFF               	movlw	255
  8499  0026FC  161C               	andwf	i2___ftdiv@f1+1,f,c
  8500  0026FE  0E00               	movlw	0
  8501  002700  161D               	andwf	i2___ftdiv@f1+2,f,c
  8502  002702  8E1F               	bsf	i2___ftdiv@f2+1,7,c
  8503  002704  0EFF               	movlw	255
  8504  002706  161E               	andwf	i2___ftdiv@f2,f,c
  8505  002708  0EFF               	movlw	255
  8506  00270A  161F               	andwf	i2___ftdiv@f2+1,f,c
  8507  00270C  0E00               	movlw	0
  8508  00270E  1620               	andwf	i2___ftdiv@f2+2,f,c
  8509  002710  0E18               	movlw	24
  8510  002712  6E24               	movwf	i2___ftdiv@cntr,c
  8511  002714  90D8               	bcf	status,0,c
  8512  002716  3625               	rlcf	i2___ftdiv@f3,f,c
  8513  002718  3626               	rlcf	i2___ftdiv@f3+1,f,c
  8514  00271A  3627               	rlcf	i2___ftdiv@f3+2,f,c
  8515  00271C  501E               	movf	i2___ftdiv@f2,w,c
  8516  00271E  5C1B               	subwf	i2___ftdiv@f1,w,c
  8517  002720  501F               	movf	i2___ftdiv@f2+1,w,c
  8518  002722  581C               	subwfb	i2___ftdiv@f1+1,w,c
  8519  002724  5020               	movf	i2___ftdiv@f2+2,w,c
  8520  002726  581D               	subwfb	i2___ftdiv@f1+2,w,c
  8521  002728  A0D8               	btfss	status,0,c
  8522  00272A  D007               	goto	i2l546
  8523  00272C  501E               	movf	i2___ftdiv@f2,w,c
  8524  00272E  5E1B               	subwf	i2___ftdiv@f1,f,c
  8525  002730  501F               	movf	i2___ftdiv@f2+1,w,c
  8526  002732  5A1C               	subwfb	i2___ftdiv@f1+1,f,c
  8527  002734  5020               	movf	i2___ftdiv@f2+2,w,c
  8528  002736  5A1D               	subwfb	i2___ftdiv@f1+2,f,c
  8529  002738  8025               	bsf	i2___ftdiv@f3,0,c
  8530  00273A                     i2l546:
  8531  00273A  90D8               	bcf	status,0,c
  8532  00273C  361B               	rlcf	i2___ftdiv@f1,f,c
  8533  00273E  361C               	rlcf	i2___ftdiv@f1+1,f,c
  8534  002740  361D               	rlcf	i2___ftdiv@f1+2,f,c
  8535  002742  2E24               	decfsz	i2___ftdiv@cntr,f,c
  8536  002744  D7E7               	goto	i2l545
  8537  002746  C025  F001         	movff	i2___ftdiv@f3,i2___ftpack@arg
  8538  00274A  C026  F002         	movff	i2___ftdiv@f3+1,i2___ftpack@arg+1
  8539  00274E  C027  F003         	movff	i2___ftdiv@f3+2,i2___ftpack@arg+2
  8540  002752  C028  F004         	movff	i2___ftdiv@exp,i2___ftpack@exp
  8541  002756  C029  F005         	movff	i2___ftdiv@sign,i2___ftpack@sign
  8542  00275A  EC0E  F014         	call	i2___ftpack	;wreg free
  8543  00275E  C001  F01B         	movff	?i2___ftpack,?i2___ftdiv
  8544  002762  C002  F01C         	movff	?i2___ftpack+1,?i2___ftdiv+1
  8545  002766  C003  F01D         	movff	?i2___ftpack+2,?i2___ftdiv+2
  8546  00276A  0012               	return	
  8547  00276C                     __end_ofi2___ftdiv:
  8548                           	opt stack 0
  8549                           pclatu	equ	0xFFB
  8550                           pclath	equ	0xFFA
  8551                           tblptru	equ	0xFF8
  8552                           tblptrh	equ	0xFF7
  8553                           tblptrl	equ	0xFF6
  8554                           tablat	equ	0xFF5
  8555                           prodh	equ	0xFF4
  8556                           prodl	equ	0xFF3
  8557                           intcon	equ	0xFF2
  8558                           postinc0	equ	0xFEE
  8559                           fsr0h	equ	0xFEA
  8560                           fsr0l	equ	0xFE9
  8561                           wreg	equ	0xFE8
  8562                           fsr1h	equ	0xFE2
  8563                           fsr1l	equ	0xFE1
  8564                           indf2	equ	0xFDF
  8565                           postinc2	equ	0xFDE
  8566                           postdec2	equ	0xFDD
  8567                           fsr2h	equ	0xFDA
  8568                           fsr2l	equ	0xFD9
  8569                           status	equ	0xFD8
  8570                           
  8571 ;; *************** function i2___ftpack *****************
  8572 ;; Defined at:
  8573 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  8574 ;; Parameters:    Size  Location     Type
  8575 ;;  arg             3    0[COMRAM] unsigned um
  8576 ;;  exp             1    3[COMRAM] unsigned char 
  8577 ;;  sign            1    4[COMRAM] unsigned char 
  8578 ;; Auto vars:     Size  Location     Type
  8579 ;;		None
  8580 ;; Return value:  Size  Location     Type
  8581 ;;                  3    0[COMRAM] float 
  8582 ;; Registers used:
  8583 ;;		wreg, status,2, status,0
  8584 ;; Tracked objects:
  8585 ;;		On entry : 0/0
  8586 ;;		On exit  : 0/0
  8587 ;;		Unchanged: 0/0
  8588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8589 ;;      Params:         5       0       0       0       0       0       0       0       0
  8590 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8591 ;;      Temps:          3       0       0       0       0       0       0       0       0
  8592 ;;      Totals:         8       0       0       0       0       0       0       0       0
  8593 ;;Total ram usage:        8 bytes
  8594 ;; Hardware stack levels used:    1
  8595 ;; This function calls:
  8596 ;;		Nothing
  8597 ;; This function is called by:
  8598 ;;		i2___ftdiv
  8599 ;;		i2___ftmul
  8600 ;;		i2___lwtoft
  8601 ;; This function uses a non-reentrant model
  8602 ;;
  8603                           
  8604                           	psect	text31
  8605  00281C                     __ptext31:
  8606                           	opt stack 0
  8607  00281C                     i2___ftpack:
  8608                           	opt stack 24
  8609                           
  8610                           ;incstack = 0
  8611  00281C  5004               	movf	i2___ftpack@exp,w,c
  8612  00281E  B4D8               	btfsc	status,2,c
  8613  002820  D005               	goto	i2u279_40
  8614  002822  5001               	movf	i2___ftpack@arg,w,c
  8615  002824  1002               	iorwf	i2___ftpack@arg+1,w,c
  8616  002826  1003               	iorwf	i2___ftpack@arg+2,w,c
  8617  002828  A4D8               	btfss	status,2,c
  8618  00282A  D00C               	goto	i2l478
  8619  00282C                     i2u279_40:
  8620  00282C  0E00               	movlw	0
  8621  00282E  6E01               	movwf	?i2___ftpack,c
  8622  002830  0E00               	movlw	0
  8623  002832  6E02               	movwf	?i2___ftpack+1,c
  8624  002834  0E00               	movlw	0
  8625  002836  6E03               	movwf	?i2___ftpack+2,c
  8626  002838  0012               	return	
  8627  00283A  2A04               	incf	i2___ftpack@exp,f,c
  8628  00283C  90D8               	bcf	status,0,c
  8629  00283E  3203               	rrcf	i2___ftpack@arg+2,f,c
  8630  002840  3202               	rrcf	i2___ftpack@arg+1,f,c
  8631  002842  3201               	rrcf	i2___ftpack@arg,f,c
  8632  002844                     i2l478:
  8633  002844  0E00               	movlw	0
  8634  002846  1401               	andwf	i2___ftpack@arg,w,c
  8635  002848  6E06               	movwf	??i2___ftpack& (0+255),c
  8636  00284A  0E00               	movlw	0
  8637  00284C  1402               	andwf	i2___ftpack@arg+1,w,c
  8638  00284E  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
  8639  002850  0EFE               	movlw	254
  8640  002852  1403               	andwf	i2___ftpack@arg+2,w,c
  8641  002854  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
  8642  002856  5006               	movf	??i2___ftpack,w,c
  8643  002858  1007               	iorwf	??i2___ftpack+1,w,c
  8644  00285A  1008               	iorwf	??i2___ftpack+2,w,c
  8645  00285C  B4D8               	btfsc	status,2,c
  8646  00285E  D00C               	goto	i2l481
  8647  002860  D7EC               	goto	i2l479
  8648  002862  2A04               	incf	i2___ftpack@exp,f,c
  8649  002864  0E01               	movlw	1
  8650  002866  2601               	addwf	i2___ftpack@arg,f,c
  8651  002868  0E00               	movlw	0
  8652  00286A  2202               	addwfc	i2___ftpack@arg+1,f,c
  8653  00286C  0E00               	movlw	0
  8654  00286E  2203               	addwfc	i2___ftpack@arg+2,f,c
  8655  002870  90D8               	bcf	status,0,c
  8656  002872  3203               	rrcf	i2___ftpack@arg+2,f,c
  8657  002874  3202               	rrcf	i2___ftpack@arg+1,f,c
  8658  002876  3201               	rrcf	i2___ftpack@arg,f,c
  8659  002878                     i2l481:
  8660  002878  0E00               	movlw	0
  8661  00287A  1401               	andwf	i2___ftpack@arg,w,c
  8662  00287C  6E06               	movwf	??i2___ftpack& (0+255),c
  8663  00287E  0E00               	movlw	0
  8664  002880  1402               	andwf	i2___ftpack@arg+1,w,c
  8665  002882  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
  8666  002884  0EFF               	movlw	255
  8667  002886  1403               	andwf	i2___ftpack@arg+2,w,c
  8668  002888  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
  8669  00288A  5006               	movf	??i2___ftpack,w,c
  8670  00288C  1007               	iorwf	??i2___ftpack+1,w,c
  8671  00288E  1008               	iorwf	??i2___ftpack+2,w,c
  8672  002890  B4D8               	btfsc	status,2,c
  8673  002892  D006               	goto	i2l484
  8674  002894  D7E6               	goto	i2l482
  8675  002896  0604               	decf	i2___ftpack@exp,f,c
  8676  002898  90D8               	bcf	status,0,c
  8677  00289A  3601               	rlcf	i2___ftpack@arg,f,c
  8678  00289C  3602               	rlcf	i2___ftpack@arg+1,f,c
  8679  00289E  3603               	rlcf	i2___ftpack@arg+2,f,c
  8680  0028A0                     i2l484:
  8681  0028A0  BE02               	btfsc	i2___ftpack@arg+1,7,c
  8682  0028A2  D003               	goto	i2u283_40
  8683  0028A4  0E02               	movlw	2
  8684  0028A6  6004               	cpfslt	i2___ftpack@exp,c
  8685  0028A8  D7F6               	goto	i2l485
  8686  0028AA                     i2u283_40:
  8687  0028AA  A004               	btfss	i2___ftpack@exp,0,c
  8688  0028AC  9E02               	bcf	i2___ftpack@arg+1,7,c
  8689  0028AE  90D8               	bcf	status,0,c
  8690  0028B0  3204               	rrcf	i2___ftpack@exp,f,c
  8691  0028B2  5004               	movf	i2___ftpack@exp,w,c
  8692  0028B4  1203               	iorwf	i2___ftpack@arg+2,f,c
  8693  0028B6  5005               	movf	i2___ftpack@sign,w,c
  8694  0028B8  A4D8               	btfss	status,2,c
  8695  0028BA  8E03               	bsf	i2___ftpack@arg+2,7,c
  8696  0028BC  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
  8697  0028C0  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
  8698  0028C4  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
  8699  0028C8  0012               	return	
  8700  0028CA                     __end_ofi2___ftpack:
  8701                           	opt stack 0
  8702                           pclatu	equ	0xFFB
  8703                           pclath	equ	0xFFA
  8704                           tblptru	equ	0xFF8
  8705                           tblptrh	equ	0xFF7
  8706                           tblptrl	equ	0xFF6
  8707                           tablat	equ	0xFF5
  8708                           prodh	equ	0xFF4
  8709                           prodl	equ	0xFF3
  8710                           intcon	equ	0xFF2
  8711                           postinc0	equ	0xFEE
  8712                           fsr0h	equ	0xFEA
  8713                           fsr0l	equ	0xFE9
  8714                           wreg	equ	0xFE8
  8715                           fsr1h	equ	0xFE2
  8716                           fsr1l	equ	0xFE1
  8717                           indf2	equ	0xFDF
  8718                           postinc2	equ	0xFDE
  8719                           postdec2	equ	0xFDD
  8720                           fsr2h	equ	0xFDA
  8721                           fsr2l	equ	0xFD9
  8722                           status	equ	0xFD8
  8723                           pclatu	equ	0xFFB
  8724                           pclath	equ	0xFFA
  8725                           tblptru	equ	0xFF8
  8726                           tblptrh	equ	0xFF7
  8727                           tblptrl	equ	0xFF6
  8728                           tablat	equ	0xFF5
  8729                           prodh	equ	0xFF4
  8730                           prodl	equ	0xFF3
  8731                           intcon	equ	0xFF2
  8732                           postinc0	equ	0xFEE
  8733                           fsr0h	equ	0xFEA
  8734                           fsr0l	equ	0xFE9
  8735                           wreg	equ	0xFE8
  8736                           fsr1h	equ	0xFE2
  8737                           fsr1l	equ	0xFE1
  8738                           indf2	equ	0xFDF
  8739                           postinc2	equ	0xFDE
  8740                           postdec2	equ	0xFDD
  8741                           fsr2h	equ	0xFDA
  8742                           fsr2l	equ	0xFD9
  8743                           status	equ	0xFD8
  8744                           
  8745                           	psect	rparam
  8746  0000                     pclatu	equ	0xFFB
  8747                           pclath	equ	0xFFA
  8748                           tblptru	equ	0xFF8
  8749                           tblptrh	equ	0xFF7
  8750                           tblptrl	equ	0xFF6
  8751                           tablat	equ	0xFF5
  8752                           prodh	equ	0xFF4
  8753                           prodl	equ	0xFF3
  8754                           intcon	equ	0xFF2
  8755                           postinc0	equ	0xFEE
  8756                           fsr0h	equ	0xFEA
  8757                           fsr0l	equ	0xFE9
  8758                           wreg	equ	0xFE8
  8759                           fsr1h	equ	0xFE2
  8760                           fsr1l	equ	0xFE1
  8761                           indf2	equ	0xFDF
  8762                           postinc2	equ	0xFDE
  8763                           postdec2	equ	0xFDD
  8764                           fsr2h	equ	0xFDA
  8765                           fsr2l	equ	0xFD9
  8766                           status	equ	0xFD8
  8767                           
  8768                           	psect	temp
  8769  000055                     btemp:
  8770                           	opt stack 0
  8771  000055                     	ds	1
  8772  0000                     int$flags	set	btemp
  8773  0000                     wtemp6	set	btemp+1
  8774                           pclatu	equ	0xFFB
  8775                           pclath	equ	0xFFA
  8776                           tblptru	equ	0xFF8
  8777                           tblptrh	equ	0xFF7
  8778                           tblptrl	equ	0xFF6
  8779                           tablat	equ	0xFF5
  8780                           prodh	equ	0xFF4
  8781                           prodl	equ	0xFF3
  8782                           intcon	equ	0xFF2
  8783                           postinc0	equ	0xFEE
  8784                           fsr0h	equ	0xFEA
  8785                           fsr0l	equ	0xFE9
  8786                           wreg	equ	0xFE8
  8787                           fsr1h	equ	0xFE2
  8788                           fsr1l	equ	0xFE1
  8789                           indf2	equ	0xFDF
  8790                           postinc2	equ	0xFDE
  8791                           postdec2	equ	0xFDD
  8792                           fsr2h	equ	0xFDA
  8793                           fsr2l	equ	0xFD9
  8794                           status	equ	0xFD8


Data Sizes:
    Strings     25
    Constant    118
    Data        0
    BSS         45
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     59      84
    BANK0           160    125     145
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_2(CODE[11]), STR_1(CODE[14]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> buffer2(BANK0[20]), main@buffer1(BANK0[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Out2@buffer	PTR unsigned char  size(2) Largest target is 20
		 -> buffer2(BANK0[20]), main@buffer1(BANK0[16]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _comparar in COMRAM

    _comparar->i2___ftdiv
    i2___lwtoft->i2___ftpack
    i2___ftmul->i2___lwtoft
    i2___ftdiv->i2___ftmul

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___lwtoft->___ftpack
    ___ftdiv->___ftadd
    _Lcd_Out2->_Lcd_Chr_CP
    _Lcd_Out2->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd

Critical Paths under _comparar in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _comparar in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _comparar in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _comparar in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _comparar in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _comparar in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _comparar in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _comparar in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                24    24      0   68107
                                            101 BANK0     24    24      0
                            _Lcd_Cmd
                           _Lcd_Init
                           _Lcd_Out2
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
                     _configstandard
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             44    37      7   51402
                                             63 BANK0     38    31      7
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                7     4      3   12159
                                             35 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              10     7      3   11961
                                             35 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2895
                                             14 BANK0      6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    5337
                                             20 BANK0     15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1664
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1820
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     455
                                              0 BANK0     15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     598
                                              0 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2650
                                              8 BANK0      9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     615
                                              0 BANK0      9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     466
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     480
                                             42 BANK0     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4272
                                             57 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3927
                                             45 BANK0     12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     121
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     592
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (1) _configstandard                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             3     0      3    2653
                                              8 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    3315
                                             57 BANK0     15     9      6
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2505
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _Lcd_Out2                                             5     2      3     837
                                              3 BANK0      5     2      3
                         _Lcd_Chr_CP
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Chr_CP                                           3     3      0     176
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     314
                                              3 BANK0      2     2      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     176
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _comparar                                            18    18      0    2153
                                             41 COMRAM    18    18      0
                          i2___ftdiv
                          i2___ftmul
                         i2___lwtoft
 ---------------------------------------------------------------------------------
 (6) i2___lwtoft                                           3     0      3     513
                                              8 COMRAM     3     0      3
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (6) i2___ftmul                                           15     9      6     843
                                             11 COMRAM    15     9      6
                         i2___ftpack
                         i2___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (6) i2___ftdiv                                           15     9      6     797
                                             26 COMRAM    15     9      6
                          i2___ftmul (ARG)
                         i2___ftpack
                         i2___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (7) i2___ftpack                                           8     3      5     465
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Cmd
   _Lcd_Init
     _Lcd_Cmd
   _Lcd_Out2
     _Lcd_Chr_CP
     _Lcd_Cmd
   ___ftadd
     ___ftpack
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   ___ftdiv
     ___ftadd (ARG)
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___lwtoft
     ___ftpack
   _configstandard
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 _comparar (ROOT)
   i2___ftdiv
     i2___ftmul (ARG)
       i2___ftpack
       i2___lwtoft (ARG)
         i2___ftpack
     i2___ftpack (ARG)
     i2___lwtoft (ARG)
       i2___ftpack
   i2___ftmul
     i2___ftpack
     i2___lwtoft (ARG)
       i2___ftpack
   i2___lwtoft
     i2___ftpack

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     7D      91       5       90.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3B      54       1       89.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      E5      20        0.0%
DATA                 0      0      E5       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri May 18 03:40:24 2018

                     l62 1C40                       l80 2AFA                       l81 2ADE  
                     l82 2B16                       l83 2AE6                       l84 2AEC  
                     l85 2AF2                       l87 2B32                       l88 2B1E  
           ___awdiv@sign 006B      ___wmul@multiplicand 0070              __CFG_BORV$3 000000  
             i2___ftpack 281C             __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000  
           __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000             ___ftadd@exp1 0098  
           ___ftadd@exp2 0097             ___ftadd@sign 0096                      l210 0E9C  
                    l202 0DB2                      l211 0E06                      l203 0D9C  
                    l115 1A7E                      l140 1852                      l220 0F56  
                    l213 0EBC                      l150 15FE                      l222 105C  
                    l214 0EA6                      l206 0DD8                      l143 140E  
                    l231 10FE                      l223 1046                      l207 0DC2  
                    l144 1330                      l232 1106                      l216 0EE0  
                    l137 177C                      l233 112A                      l225 107E  
                    l217 0EE4                      l234 1132                      l226 109A  
                    l218 0F06                      l170 09E8                      l154 08A0  
                    l147 13E8                      l235 117A                      l219 103A  
                    l163 0902                      l155 08B8                      l148 1546  
                    l244 11C4                      l236 115A                      l228 10BA  
                    l180 0AF6                      l421 29C0                      l229 10DC  
                    l181 0B5E                      l173 09E4                      l165 09D6  
                    l157 08D2                      l422 29CA                      l414 2972  
                    l430 2A9E                      l174 0A0C                      l166 09C0  
                    l158 08CA                      l423 29D8                      l415 2982  
                    l431 2A96                      l183 0B84                      l167 0986  
                    l176 1066                      l184 0BC2                      l513 1912  
                    l417 29A0                      l185 0C86                      l177 0A20  
                    l450 213A                      l418 2998                      l434 2AB6  
                    l610 2D80                      l194 0CEC                      l178 0A62  
                    l523 196E                      l603 2386                      l435 2AC0  
                    l427 2A7C                      l532 19AC                      l524 1964  
                    l604 237A                      l452 2178                      l436 2ACE  
                    l428 2A88                      l188 0C30                      l533 19A2  
                    l509 18E8                      l453 2168                      l542 25C8  
                    l518 1978                      l606 23A2                      l446 20AA  
                    l550 1D22                      l198 0D58                      l535 19D0  
                    l199 0D72                      l544 25F0                      l536 19EC  
                    l640 2A46                      l448 20C8                      l552 1D4E  
                    l481 27CA                      l545 262E                      l537 1A1C  
                    l641 2A54                      l449 210A                      l553 1D88  
                    l482 27B4                      l546 2654                      l650 2B8A  
                    l458 219C                      l562 1E10                      l554 1DB0  
                    l651 2B98                      l459 2190                      l563 1E04  
                    l484 27F2                      l636 2A12                      l556 1DEC  
                    l580 2460                      l485 27E8                      l637 2A06  
                    l557 1DDC                      l581 2470                      l478 2796  
                    l646 2B62                      l574 23DE                      l479 278C  
                    l567 28FC                      l591 2C7E                      l647 2B56  
                    l568 292C                      l576 2406                      l585 2D0E  
                    l657 2BBE                      l577 2438                      l658 2BB2  
                    l578 2448                      l595 22EA                      l597 2362  
                    l598 2352               i2___lwtoft 2D42             __CFG_CPB$OFF 000000  
           __CFG_CPD$OFF 000000          ?_configstandard 0001             ___awmod@sign 0065  
            main@Voltage 00DA                      wreg 000FE8             __CFG_LVP$OFF 000000  
            main@buffer1 00C7             ___ftdiv@cntr 00A2             ___ftdiv@sign 00A7  
           __CFG_WDT$OFF 000000                     l3121 0EA6                     l3041 0C0A  
                   l3033 0BC2                     l3061 0CF0                     l2185 2958  
                   l3227 11C0                     l3097 0DC2                     l3089 0D9C  
                   STR_1 0877                     STR_2 0885                     u2020 1980  
                   u2111 23EE                     u2050 19B4                     u3100 0D28  
                   u3020 0B94                     u3030 0BD4                     u2240 2AA2  
                   u3200 0EDA                     u2305 1E3A                     u2315 1E54  
                   u2091 23C6                     u2500 1E16                     u2180 29A4  
                   u3060 0C0A                     u2325 1E78                     u2421 1D06  
                   u3400 11DE                     u3160 0DE6                     u2441 1D32  
                   u1810 277E                     u2275 1F6E                     u3411 25B0  
                   u2285 1F88                     u3190 0ECA                     u2295 1FAC  
                   u3431 25D8                     u2631 22CE                     u1920 18DA  
                   u2720 2A16                     u1850 27FC                     u2650 2308  
                   u2570 21A2                     u3370 1182                     u3380 11A0  
                   u1950 1904                     u2750 2B66                     u2910 0962  
                   u3607 1EAE                     u2655 2300                     u3617 1EB8  
                   u1881 18A6                     u2690 238C                     u3707 1C1C  
                   u3627 1F32                     u1891 18BA                     u1980 1942  
                   u3717 1C2E                     u3637 1F3C                     u3807 207E  
                   u3727 1C5A                     u3647 1F44                     u3737 1C72  
                   u3657 1F50                     u3747 1CA0                     u3667 1BD4  
                   u2980 0A9A                     u3757 1CB8                     u3677 1BE6  
                   u3597 1A64                     u3767 1FE2                     u3687 1BF8  
                   u3777 1FEC                     u3697 1C0A                     u2985 0A90  
                   u3787 2066                     u3797 2070                     _TMR1 000FCE  
                   _adc1 0053                     _main 1A42             ___ftpack@arg 0060  
           ___ftpack@exp 0063                     fsr0h 000FEA                     fsr1h 000FE2  
                   fsr2h 000FDA                     fsr0l 000FE9                     indf2 000FDF  
                   fsr1l 000FE1                     fsr2l 000FD9                     btemp 0055  
                   prodh 000FF4                     prodl 000FF3                     start 000E  
          __CFG_IESO$OFF 000000             i2___ftdiv@f1 001B             i2___ftdiv@f2 001E  
           i2___ftdiv@f3 0025             _sprintf$1335 00AC          __end_of_Lcd_Cmd 208A  
          __CFG_MCLRE$ON 000000             ___ftmul@cntr 0081             i2___ftmul@f1 000C  
           i2___ftmul@f2 000F             ___param_bank 000000             ___ftmul@sign 0082  
             _Lcd_Chr_CP 1E28             ___fttol@exp1 0098             ___fttol@lval 0094  
         Lcd_Out2@buffer 0064            __CFG_PLLDIV$2 000000           __CFG_CCP2MX$ON 000000  
                  ?_main 0001          __end_of___awdiv 29E2          __end_of___ftadd 1A42  
                  _CCPR1 000FBE          __end_of___awmod 2AD8          __end_of___ftdiv 2686  
        __end_of___ftneg 2D1C             i2___lwtoft@c 0009          __end_of___lldiv 2A66  
        __end_of___ftmul 24AA          ___awdiv@divisor 0068          __end_of___llmod 2BAA  
        __end_of___ftsub 2CA8          __end_of___fttol 23B4                    i2l109 2270  
                  i2l542 26AE                    i2l544 26D6                    i2l481 2878  
                  i2l545 2714                    i2l482 2862                    i2l546 273A  
                  i2l484 28A0                    i2l580 2554                    i2l485 2896  
                  i2l581 2564                    i2l478 2844                    i2l574 24D2  
                  i2l479 283A                    i2l576 24FA                    i2l577 252C  
                  i2l578 253C          ___awdiv@counter 006A            __CFG_PWRT$OFF 000000  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
          __CFG_WRT3$OFF 000000             ___lltoft@exp 0070           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000          __end_of_dpowers 0829  
                  _scale 11EC          __end_of_isdigit 2D88            ___ftpack@sign 0064  
                  pclath 000FFA                    tablat 000FF5                    status 000FD8  
                  wtemp6 0056          __end_of_sprintf 11EC           __CFG_ICPRT$OFF 000000  
          i2___ftdiv@exp 0028           __CFG_PBADEN$ON 000000       __size_ofi2___ftdiv 00E6  
     __size_ofi2___ftmul 00F4         __end_of_Lcd_Init 1CF4         __end_of_Lcd_Out2 2B42  
        __initialization 2CD0             __end_of_main 1BB4            i2___ftmul@exp 0015  
            ?i2___ftpack 0001                   ??_main 00C5            ___fttol@sign1 0093  
            ?i2___lwtoft 0009            __activetblptr 000002     __size_of__tdiv_to_l_ 0134  
                 _ADCON1 000FC1                   _CCP1IF 007CF2         ___llmod@dividend 0060  
                 ?_scale 0083                   _ADRESH 000FC4                   _ADRESL 000FC3  
       ___awdiv@dividend 0066         __end_of___ftpack 281C         __end_of___lltoft 2C08  
                 u351_41 24BA                   u353_41 24E2         __end_of___lwtoft 2D42  
                 u346_41 2696                   u348_41 26BE                ??_Lcd_Cmd 0060  
         __CFG_XINST$OFF 000000         __end_of__powers_ 0850         __end_of_comparar 22BC  
                 ___ftge 28CA              ?_Lcd_Chr_CP 0001                   ___wmul 2CA8  
              ??___awdiv 006A                ??___ftadd 0093           __CFG_STVREN$ON 000000  
              ??___awmod 0064                ??___ftdiv 009F                ??___ftneg 0063  
              ??___lldiv 0068                ??___ftmul 007A                ??___llmod 0068  
              ??___ftsub 009F                ??___fttol 008E                   _fround 1624  
                 clear_0 2CD6                   clear_1 2CE2         ___awdiv@quotient 006C  
        ___awmod@divisor 0062          ___awmod@counter 0064    ___ftmul@f3_as_product 007E  
              ??_isdigit 0060        __end_ofi2___ftdiv 276C        __end_ofi2___ftmul 259E  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8                ??_sprintf 00A6           i2___ftdiv@cntr 0024  
             __accesstop 0060  __end_of__initialization 2CE8           i2___ftdiv@sign 0029  
             ___ftadd@f1 008D               ___ftadd@f2 0090      __size_ofi2___ftpack 00AE  
             ___ftge@ff1 0060               ___ftge@ff2 0063            ___rparam_used 000001  
             ___ftdiv@f1 0099               ___ftdiv@f2 009C               ___ftdiv@f3 00A3  
    __size_ofi2___lwtoft 0024               ___ftneg@f1 0060           i2___ftpack@arg 0001  
         i2___ftpack@exp 0004               ___ftmul@f1 0074               ___ftmul@f2 0077  
             ___ftsub@f1 0099               ___ftsub@f2 009C               ___fttol@f1 008A  
         __pcstackCOMRAM 0001               ___lltoft@c 0068           i2___ftmul@cntr 0019  
          __end_of_scale 1624           i2___ftmul@sign 001A         ??_configstandard 0060  
             ___lwtoft@c 0068               __div_to_l_ 208A                ?_Lcd_Init 0001  
              ?_Lcd_Out2 0063          __div_to_l_@exp1 006B          __div_to_l_@cntr 006A  
                ??_scale 0086          __div_to_l_@quot 0066             sprintf@width 00BD  
    __size_of_Lcd_Chr_CP 0134               __pbssBANK0 00DD            __div_to_l_@f1 0060  
          __div_to_l_@f2 0063                  ?___ftge 0060                  ?___wmul 006E  
                ?_fround 0083                ?___ftpack 0060                ?___lltoft 0068  
              ?___lwtoft 0068               ??_Lcd_Init 0063               ??_Lcd_Out2 0066  
              ?_comparar 0001          __CFG_VREGEN$OFF 000000                  _Lcd_Cmd 1F5C  
      __end_of__npowers_ 0877                  __Hparam 0000               _scale$1334 0086  
                __Lparam 0000          __size_of___ftge 0092                  ___awdiv 295C  
                ___ftadd 1894                  ___awmod 2A66                  ___ftdiv 259E  
                ___ftneg 2CF6                  ___lldiv 29E2          __size_of___wmul 0028  
                ___ftmul 23B4                  ___llmod 2B42                  ___ftsub 2C66  
                ___fttol 22BC             __psmallconst 0800                  __pcinit 2CD0  
           ??i2___ftpack 0006               ??___ftpack 0065          __size_of_fround 0270  
i2___ftmul@f3_as_product 0016                  __ramtop 0800               ??___lltoft 006C  
                __ptext0 1A42                  __ptext1 0892                  __ptext2 11EC  
                __ptext3 2D66                  __ptext4 1624                  __ptext5 2CA8  
                __ptext6 23B4                  __ptext7 2A66                  __ptext8 295C  
                __ptext9 1CF4                  _buffer1 003C                  _buffer2 00DD  
           ??i2___lwtoft 000C               ??___lwtoft 006B                _T1CONbits 000FCD  
            ?__div_to_l_ 0060                  _dpowers 0801                  _isdigit 2D66  
       ___awmod@dividend 0060                  _sprintf 0892                  _voltaje 0050  
         __pintcode_body 21B4               ??_comparar 002A     end_of_initialization 2CE8  
          __Lmediumconst 0000                  int_func 21B4       __end_ofi2___ftpack 28CA  
        ___lldiv@divisor 0064       __end_ofi2___lwtoft 2D66          ___lldiv@counter 006C  
           ??_Lcd_Chr_CP 0060                Lcd_Out2@x 0063                Lcd_Out2@y 0066  
                postdec2 000FDD                  postinc0 000FEE                  postinc2 000FDE  
         __tdiv_to_l_@f1 0060           __tdiv_to_l_@f2 0063            ??__tdiv_to_l_ 0066  
              _PORTDbits 000F83                _TRISAbits 000F92                _TRISDbits 000F95  
              i2___ftdiv 2686                i2___ftmul 24AA       __end_of_Lcd_Chr_CP 1F5C  
            _CCP1CONbits 000FBD              ___ftdiv@exp 00A6          i2___ftpack@sign 0005  
    __size_of__div_to_l_ 012A              ___ftmul@exp 007D           __end_of___ftge 295C  
         __end_of___wmul 2CD0           __end_of_fround 1894      start_initialization 2CD0  
    __end_of__tdiv_to_l_ 1E28               ?i2___ftdiv 001B               ?i2___ftmul 000C  
      __size_of_Lcd_Init 0140        __size_of_Lcd_Out2 006A          ___llmod@divisor 0064  
        ___llmod@counter 0068                 ??___ftge 0066                 ??___wmul 0072  
       __CFG_LPT1OSC$OFF 000000                 ??_fround 0086            sprintf@tmpval 00B5  
             fround@prec 008C        __size_of___ftpack 00B0        __size_of___lltoft 005E  
            __pbssCOMRAM 003C        __size_of___lwtoft 0026            __pcstackBANK0 0060  
               ?_Lcd_Cmd 0001              sprintf@flag 00BB        __size_of_comparar 22B4  
            sprintf@fval 00BF              sprintf@prec 00C2                __pintcode 0008  
               ?___awdiv 0066                 ?___ftadd 008D                 ?___awmod 0060  
               ?___ftdiv 0099                 ?___ftneg 0060                 ?___lldiv 0060  
               ?___ftmul 0074                 ?___llmod 0060                 ?___ftsub 0099  
              __npowers_ 0850                 ?___fttol 008A              __tdiv_to_l_ 1CF4  
           ??__div_to_l_ 0066              __smallconst 0800                 ?_isdigit 0001  
__size_of_configstandard 005E                 ?_sprintf 009F              ??i2___ftdiv 0021  
            ??i2___ftmul 0012           __size_of_scale 0438           ___wmul@product 0072  
               _PIE1bits 000F9D                 _PIR1bits 000F9E       __end_of__div_to_l_ 21B4  
               i2u283_40 28AA                 i2u279_40 282C         __CFG_WDTPS$32768 000000  
           Lcd_Init@data 0064               _ADCON0bits 000FC2               _ADCON2bits 000FC0  
      ___wmul@multiplier 006E             Lcd_Out2@data 0067                 _Lcd_Init 1BB4  
               _Lcd_Out2 2AD8         __size_of_Lcd_Cmd 012E                 __Hrparam 0000  
               __Lrparam 0000         __size_of___awdiv 0086         __size_of___ftadd 01AE  
       __size_of___awmod 0072         __size_of___ftdiv 00E8         __size_of___ftneg 0026  
       __size_of___lldiv 0084         __size_of___ftmul 00F6         __size_of___llmod 0068  
       __size_of___ftsub 0042         __size_of___fttol 00F8                 ___ftpack 276C  
            _fround$1332 0089              _fround$1333 0086                 ___lltoft 2BAA  
            _isdigit$993 0061                 ___lwtoft 2D1C               sprintf@exp 00B9  
             sprintf@val 00B1         __size_of_isdigit 0022           Lcd_Chr_CP@data 0062  
               __ptext10 208A                 __ptext11 2BAA                 __ptext20 2D1C  
               __ptext12 2B42                 __ptext21 259E                 __ptext13 29E2  
               __ptext30 2686                 __ptext22 276C                 __ptext14 22BC  
               __ptext31 281C                 __ptext23 2AD8                 __ptext15 2C66  
               __ptext24 1E28                 __ptext16 1894                 __ptext25 1BB4  
               __ptext17 2CF6                 __ptext26 1F5C                 __ptext18 28CA  
               __ptext19 2C08                 __ptext28 2D42                 __ptext29 24AA  
               __powers_ 0829                 _comparar 0008         __size_of_sprintf 095A  
            Lcd_Cmd@data 0062            __size_of_main 0172                 int$flags 0055  
               main@Amps 00D7    __CFG_CPUDIV$OSC4_PLL6 000000               _INTCONbits 000FF2  
         _configstandard 2C08                 isdigit@c 0062                 scale@scl 0089  
               intlevel2 0000                sprintf@ap 00AF         __tdiv_to_l_@exp1 006E  
              sprintf@sp 009F         __tdiv_to_l_@cntr 006D         __tdiv_to_l_@quot 0069  
       ___lldiv@dividend 0060             ?__tdiv_to_l_ 0060                 sprintf@c 00C4  
               sprintf@f 00A1   __end_of_configstandard 2C66         ___lldiv@quotient 0068  
     __CFG_FOSC$HSPLL_HS 000000  
