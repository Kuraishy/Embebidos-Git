

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri May 18 10:20:26 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    46                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    47  0000                     
    48                           ; Version 1.45
    49                           ; Generated 16/11/2017 GMT
    50                           ; 
    51                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    52                           ; All rights reserved.
    53                           ; 
    54                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    55                           ; 
    56                           ; Redistribution and use in source and binary forms, with or without modification, are
    57                           ; permitted provided that the following conditions are met:
    58                           ; 
    59                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    60                           ;        conditions and the following disclaimer.
    61                           ; 
    62                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    63                           ;        of conditions and the following disclaimer in the documentation and/or other
    64                           ;        materials provided with the distribution.
    65                           ; 
    66                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    67                           ;        software without specific prior written permission.
    68                           ; 
    69                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    70                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    71                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    72                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    73                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    74                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    75                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    76                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    77                           ; 
    78                           ; 
    79                           ; Code-generator required, PIC18F4550 Definitions
    80                           ; 
    81                           ; SFR Addresses
    82  0000                     
    83                           	psect	smallconst
    84  000800                     __psmallconst:
    85                           	opt stack 0
    86  000800  00                 	db	0
    87  000801                     _dpowers:
    88                           	opt stack 0
    89  000801  0001               	dw	1
    90  000803  0000               	dw	0
    91  000805  000A               	dw	10
    92  000807  0000               	dw	0
    93  000809  0064               	dw	100
    94  00080B  0000               	dw	0
    95  00080D  03E8               	dw	1000
    96  00080F  0000               	dw	0
    97  000811  2710               	dw	10000
    98  000813  0000               	dw	0
    99  000815  86A0               	dw	34464
   100  000817  0001               	dw	1
   101  000819  4240               	dw	16960
   102  00081B  000F               	dw	15
   103  00081D  9680               	dw	38528
   104  00081F  0098               	dw	152
   105  000821  E100               	dw	57600
   106  000823  05F5               	dw	1525
   107  000825  CA00               	dw	51712
   108  000827  3B9A               	dw	15258
   109  000829                     __end_of_dpowers:
   110                           	opt stack 0
   111  000829                     __powers_:
   112                           	opt stack 0
   113  000829  00                 	db	0
   114  00082A  80                 	db	128
   115  00082B  3F                 	db	63
   116  00082C  00                 	db	0
   117  00082D  20                 	db	32
   118  00082E  41                 	db	65
   119  00082F  00                 	db	0
   120  000830  C8                 	db	200
   121  000831  42                 	db	66
   122  000832  00                 	db	0
   123  000833  7A                 	db	122
   124  000834  44                 	db	68
   125  000835  40                 	db	64
   126  000836  1C                 	db	28
   127  000837  46                 	db	70
   128  000838  50                 	db	80
   129  000839  C3                 	db	195
   130  00083A  47                 	db	71
   131  00083B  24                 	db	36
   132  00083C  74                 	db	116
   133  00083D  49                 	db	73
   134  00083E  97                 	db	151
   135  00083F  18                 	db	24
   136  000840  4B                 	db	75
   137  000841  BC                 	db	188
   138  000842  BE                 	db	190
   139  000843  4C                 	db	76
   140  000844  6B                 	db	107
   141  000845  6E                 	db	110
   142  000846  4E                 	db	78
   143  000847  03                 	db	3
   144  000848  15                 	db	21
   145  000849  50                 	db	80
   146  00084A  79                 	db	121
   147  00084B  AD                 	db	173
   148  00084C  60                 	db	96
   149  00084D  F3                 	db	243
   150  00084E  49                 	db	73
   151  00084F  71                 	db	113
   152  000850                     __end_of__powers_:
   153                           	opt stack 0
   154  000850                     __npowers_:
   155                           	opt stack 0
   156  000850  00                 	db	0
   157  000851  80                 	db	128
   158  000852  3F                 	db	63
   159  000853  CD                 	db	205
   160  000854  CC                 	db	204
   161  000855  3D                 	db	61
   162  000856  D7                 	db	215
   163  000857  23                 	db	35
   164  000858  3C                 	db	60
   165  000859  12                 	db	18
   166  00085A  83                 	db	131
   167  00085B  3A                 	db	58
   168  00085C  B7                 	db	183
   169  00085D  D1                 	db	209
   170  00085E  38                 	db	56
   171  00085F  C6                 	db	198
   172  000860  27                 	db	39
   173  000861  37                 	db	55
   174  000862  38                 	db	56
   175  000863  86                 	db	134
   176  000864  35                 	db	53
   177  000865  C0                 	db	192
   178  000866  D6                 	db	214
   179  000867  33                 	db	51
   180  000868  CC                 	db	204
   181  000869  2B                 	db	43
   182  00086A  32                 	db	50
   183  00086B  70                 	db	112
   184  00086C  89                 	db	137
   185  00086D  30                 	db	48
   186  00086E  E7                 	db	231
   187  00086F  DB                 	db	219
   188  000870  2E                 	db	46
   189  000871  E5                 	db	229
   190  000872  3C                 	db	60
   191  000873  1E                 	db	30
   192  000874  42                 	db	66
   193  000875  A2                 	db	162
   194  000876  0D                 	db	13
   195  000877                     __end_of__npowers_:
   196                           	opt stack 0
   197  000877                     sin@coeff_a:
   198                           	opt stack 0
   199  000877  F4                 	db	244
   200  000878  4A                 	db	74
   201  000879  48                 	db	72
   202  00087A  95                 	db	149
   203  00087B  95                 	db	149
   204  00087C  C7                 	db	199
   205  00087D  C1                 	db	193
   206  00087E  DC                 	db	220
   207  00087F  45                 	db	69
   208  000880  DC                 	db	220
   209  000881  6D                 	db	109
   210  000882  C3                 	db	195
   211  000883  B3                 	db	179
   212  000884  33                 	db	51
   213  000885  40                 	db	64
   214  000886                     __end_ofsin@coeff_a:
   215                           	opt stack 0
   216  000886                     sin@coeff_b:
   217                           	opt stack 0
   218  000886  34                 	db	52
   219  000887  01                 	db	1
   220  000888  48                 	db	72
   221  000889  9D                 	db	157
   222  00088A  B0                 	db	176
   223  00088B  45                 	db	69
   224  00088C  00                 	db	0
   225  00088D  DA                 	db	218
   226  00088E  42                 	db	66
   227  00088F  00                 	db	0
   228  000890  80                 	db	128
   229  000891  3F                 	db	63
   230  000892                     __end_ofsin@coeff_b:
   231                           	opt stack 0
   232  0000                     _CCPR1	set	4030
   233  0000                     _TMR1	set	4046
   234  0000                     _PORTBbits	set	3969
   235  0000                     _TRISBbits	set	3987
   236  0000                     _TRISAbits	set	3986
   237  0000                     _PORTDbits	set	3971
   238  0000                     _TRISDbits	set	3989
   239  0000                     _T0CONbits	set	4053
   240  0000                     _CCP1CONbits	set	4029
   241  0000                     _T1CONbits	set	4045
   242  0000                     _PIR1bits	set	3998
   243  0000                     _PIE1bits	set	3997
   244  0000                     _INTCON3bits	set	4080
   245  0000                     _INTCON2bits	set	4081
   246  0000                     _INTCONbits	set	4082
   247  0000                     _ADRESL	set	4035
   248  0000                     _ADRESH	set	4036
   249  0000                     _ADCON2bits	set	4032
   250  0000                     _ADCON1	set	4033
   251  0000                     _ADCON0bits	set	4034
   252  000892                     STR_4:
   253  000892  50                 	db	80	;'P'
   254  000893  52                 	db	82	;'R'
   255  000894  65                 	db	101	;'e'
   256  000895  61                 	db	97	;'a'
   257  000896  6C                 	db	108	;'l'
   258  000897  20                 	db	32
   259  000898  25                 	db	37
   260  000899  30                 	db	48	;'0'
   261  00089A  2E                 	db	46
   262  00089B  32                 	db	50	;'2'
   263  00089C  66                 	db	102	;'f'
   264  00089D  00                 	db	0
   265  00089E                     STR_1:
   266  00089E  50                 	db	80	;'P'
   267  00089F  52                 	db	82	;'R'
   268  0008A0  65                 	db	101	;'e'
   269  0008A1  61                 	db	97	;'a'
   270  0008A2  6C                 	db	108	;'l'
   271  0008A3  20                 	db	32
   272  0008A4  25                 	db	37
   273  0008A5  30                 	db	48	;'0'
   274  0008A6  2E                 	db	46
   275  0008A7  33                 	db	51	;'3'
   276  0008A8  66                 	db	102	;'f'
   277  0008A9  00                 	db	0
   278  0008AA                     STR_2:
   279  0008AA  50                 	db	80	;'P'
   280  0008AB  52                 	db	82	;'R'
   281  0008AC  65                 	db	101	;'e'
   282  0008AD  61                 	db	97	;'a'
   283  0008AE  6C                 	db	108	;'l'
   284  0008AF  20                 	db	32
   285  0008B0  25                 	db	37
   286  0008B1  6C                 	db	108	;'l'
   287  0008B2  75                 	db	117	;'u'
   288  0008B3  00                 	db	0
   289  0008B4                     STR_3:
   290  0008B4  70                 	db	112	;'p'
   291  0008B5  46                 	db	70	;'F'
   292  0008B6  3D                 	db	61	;'='
   293  0008B7  25                 	db	37
   294  0008B8  30                 	db	48	;'0'
   295  0008B9  2E                 	db	46
   296  0008BA  33                 	db	51	;'3'
   297  0008BB  66                 	db	102	;'f'
   298  0008BC  00                 	db	0
   299                           
   300                           ; #config settings
   301  0008BD  00                 	db	0	; dummy byte at the end
   302  0000                     
   303                           	psect	cinit
   304  003340                     __pcinit:
   305                           	opt stack 0
   306  003340                     start_initialization:
   307                           	opt stack 0
   308  003340                     __initialization:
   309                           	opt stack 0
   310                           
   311                           ; Clear objects allocated to BANK1 (22 bytes)
   312  003340  EE01  F0D9         	lfsr	0,__pbssBANK1
   313  003344  0E16               	movlw	22
   314  003346                     clear_0:
   315  003346  6AEE               	clrf	postinc0,c
   316  003348  06E8               	decf	wreg,f,c
   317  00334A  E1FD               	bnz	clear_0
   318                           
   319                           ; Clear objects allocated to BANK0 (45 bytes)
   320  00334C  EE00  F097         	lfsr	0,__pbssBANK0
   321  003350  0E2D               	movlw	45
   322  003352                     clear_1:
   323  003352  6AEE               	clrf	postinc0,c
   324  003354  06E8               	decf	wreg,f,c
   325  003356  E1FD               	bnz	clear_1
   326  003358                     end_of_initialization:
   327                           	opt stack 0
   328  003358                     __end_of__initialization:
   329                           	opt stack 0
   330  003358  0E00               	movlw	low (__Lmediumconst shr (0+16))
   331  00335A  6EF8               	movwf	tblptru,c
   332  00335C  0100               	movlb	0
   333  00335E  EFA3  F009         	goto	_main	;jump to C main() function
   334                           tblptru	equ	0xFF8
   335                           postinc0	equ	0xFEE
   336                           wreg	equ	0xFE8
   337                           
   338                           	psect	bssBANK0
   339  000097                     __pbssBANK0:
   340                           	opt stack 0
   341  000097                     _buffer3:
   342                           	opt stack 0
   343  000097                     	ds	20
   344  0000AB                     _buffer1:
   345                           	opt stack 0
   346  0000AB                     	ds	20
   347  0000BF                     _voltaje:
   348                           	opt stack 0
   349  0000BF                     	ds	3
   350  0000C2                     _errno:
   351                           	opt stack 0
   352  0000C2                     	ds	2
   353                           tblptru	equ	0xFF8
   354                           postinc0	equ	0xFEE
   355                           wreg	equ	0xFE8
   356                           
   357                           	psect	bssBANK1
   358  0001D9                     __pbssBANK1:
   359                           	opt stack 0
   360  0001D9                     _adc1:
   361                           	opt stack 0
   362  0001D9                     	ds	2
   363  0001DB                     _buffer2:
   364                           	opt stack 0
   365  0001DB                     	ds	20
   366                           tblptru	equ	0xFF8
   367                           postinc0	equ	0xFEE
   368                           wreg	equ	0xFE8
   369                           
   370                           	psect	cstackBANK1
   371  000100                     __pcstackBANK1:
   372                           	opt stack 0
   373  000100                     main@FPprom:
   374                           	opt stack 0
   375                           
   376                           ; 153 bytes @ 0x0
   377  000100                     	ds	153
   378  000199                     main@PotenciaReal:
   379                           	opt stack 0
   380                           
   381                           ; 3 bytes @ 0x99
   382  000199                     	ds	3
   383  00019C                     main@numTicks:
   384                           	opt stack 0
   385                           
   386                           ; 2 bytes @ 0x9C
   387  00019C                     	ds	2
   388  00019E                     main@potenciaAparente:
   389                           	opt stack 0
   390                           
   391                           ; 3 bytes @ 0x9E
   392  00019E                     	ds	3
   393  0001A1                     main@buffer1:
   394                           	opt stack 0
   395                           
   396                           ; 16 bytes @ 0xA1
   397  0001A1                     	ds	16
   398  0001B1                     main@Irms:
   399                           	opt stack 0
   400                           
   401                           ; 3 bytes @ 0xB1
   402  0001B1                     	ds	3
   403  0001B4                     _main$1609:
   404                           	opt stack 0
   405                           
   406                           ; 3 bytes @ 0xB4
   407  0001B4                     	ds	3
   408  0001B7                     main@sumIns:
   409                           	opt stack 0
   410                           
   411                           ; 3 bytes @ 0xB7
   412  0001B7                     	ds	3
   413  0001BA                     main@FactorPotencia:
   414                           	opt stack 0
   415                           
   416                           ; 3 bytes @ 0xBA
   417  0001BA                     	ds	3
   418  0001BD                     main@Voltage:
   419                           	opt stack 0
   420                           
   421                           ; 3 bytes @ 0xBD
   422  0001BD                     	ds	3
   423  0001C0                     main@numCiclosMuestro:
   424                           	opt stack 0
   425                           
   426                           ; 2 bytes @ 0xC0
   427  0001C0                     	ds	2
   428  0001C2                     main@calculoFP:
   429                           	opt stack 0
   430                           
   431                           ; 1 bytes @ 0xC2
   432  0001C2                     	ds	1
   433  0001C3                     main@PotenciaReal2:
   434                           	opt stack 0
   435                           
   436                           ; 3 bytes @ 0xC3
   437  0001C3                     	ds	3
   438  0001C6                     main@factorPotenciaNum:
   439                           	opt stack 0
   440                           
   441                           ; 3 bytes @ 0xC6
   442  0001C6                     	ds	3
   443  0001C9                     main@fppromtotal:
   444                           	opt stack 0
   445                           
   446                           ; 3 bytes @ 0xC9
   447  0001C9                     	ds	3
   448  0001CC                     main@fppromtotal2:
   449                           	opt stack 0
   450                           
   451                           ; 3 bytes @ 0xCC
   452  0001CC                     	ds	3
   453  0001CF                     main@Amps:
   454                           	opt stack 0
   455                           
   456                           ; 3 bytes @ 0xCF
   457  0001CF                     	ds	3
   458  0001D2                     main@delay:
   459                           	opt stack 0
   460                           
   461                           ; 4 bytes @ 0xD2
   462  0001D2                     	ds	4
   463  0001D6                     main@i:
   464                           	opt stack 0
   465                           
   466                           ; 2 bytes @ 0xD6
   467  0001D6                     	ds	2
   468  0001D8                     main@loop:
   469                           	opt stack 0
   470                           
   471                           ; 1 bytes @ 0xD8
   472  0001D8                     	ds	1
   473                           tblptru	equ	0xFF8
   474                           postinc0	equ	0xFEE
   475                           wreg	equ	0xFE8
   476                           
   477                           	psect	cstackBANK0
   478  000060                     __pcstackBANK0:
   479                           	opt stack 0
   480  000060                     ?_floor:
   481                           	opt stack 0
   482  000060                     floor@x:
   483                           	opt stack 0
   484                           
   485                           ; 3 bytes @ 0x0
   486  000060                     	ds	3
   487  000063                     floor@i:
   488                           	opt stack 0
   489                           
   490                           ; 3 bytes @ 0x3
   491  000063                     	ds	3
   492  000066                     floor@expon:
   493                           	opt stack 0
   494                           
   495                           ; 2 bytes @ 0x6
   496  000066                     	ds	2
   497  000068                     ?___ftsub:
   498                           	opt stack 0
   499  000068                     ___ftsub@f1:
   500                           	opt stack 0
   501                           
   502                           ; 3 bytes @ 0x8
   503  000068                     	ds	3
   504  00006B                     ___ftsub@f2:
   505                           	opt stack 0
   506                           
   507                           ; 3 bytes @ 0xB
   508  00006B                     	ds	3
   509  00006E                     ?_sprintf:
   510                           	opt stack 0
   511  00006E                     ?_sin:
   512                           	opt stack 0
   513  00006E                     sprintf@sp:
   514                           	opt stack 0
   515  00006E                     sin@f:
   516                           	opt stack 0
   517                           
   518                           ; 3 bytes @ 0xE
   519  00006E                     	ds	2
   520  000070                     sprintf@f:
   521                           	opt stack 0
   522                           
   523                           ; 2 bytes @ 0x10
   524  000070                     	ds	1
   525  000071                     sin@y:
   526                           	opt stack 0
   527                           
   528                           ; 3 bytes @ 0x11
   529  000071                     	ds	3
   530  000074                     _sin$1615:
   531                           	opt stack 0
   532                           
   533                           ; 3 bytes @ 0x14
   534  000074                     	ds	2
   535  000076                     ??_sprintf:
   536                           
   537                           ; 1 bytes @ 0x16
   538  000076                     	ds	1
   539  000077                     sin@x2:
   540                           	opt stack 0
   541                           
   542                           ; 3 bytes @ 0x17
   543  000077                     	ds	3
   544  00007A                     sin@sgn:
   545                           	opt stack 0
   546                           
   547                           ; 1 bytes @ 0x1A
   548  00007A                     	ds	1
   549  00007B                     ?_cos:
   550                           	opt stack 0
   551  00007B                     cos@f:
   552                           	opt stack 0
   553                           
   554                           ; 3 bytes @ 0x1B
   555  00007B                     	ds	1
   556  00007C                     _sprintf$1613:
   557                           	opt stack 0
   558                           
   559                           ; 3 bytes @ 0x1C
   560  00007C                     	ds	2
   561  00007E                     _cos$1614:
   562                           	opt stack 0
   563                           
   564                           ; 3 bytes @ 0x1E
   565  00007E                     	ds	1
   566  00007F                     sprintf@ap:
   567                           	opt stack 0
   568                           
   569                           ; 2 bytes @ 0x1F
   570  00007F                     	ds	2
   571  000081                     sprintf@val:
   572                           	opt stack 0
   573                           
   574                           ; 4 bytes @ 0x21
   575  000081                     	ds	4
   576  000085                     sprintf@tmpval:
   577                           	opt stack 0
   578                           
   579                           ; 4 bytes @ 0x25
   580  000085                     	ds	4
   581  000089                     sprintf@exp:
   582                           	opt stack 0
   583                           
   584                           ; 2 bytes @ 0x29
   585  000089                     	ds	2
   586  00008B                     sprintf@width:
   587                           	opt stack 0
   588                           
   589                           ; 2 bytes @ 0x2B
   590  00008B                     	ds	2
   591  00008D                     sprintf@flag:
   592                           	opt stack 0
   593                           
   594                           ; 2 bytes @ 0x2D
   595  00008D                     	ds	2
   596  00008F                     sprintf@fval:
   597                           	opt stack 0
   598                           
   599                           ; 3 bytes @ 0x2F
   600  00008F                     	ds	3
   601  000092                     sprintf@prec:
   602                           	opt stack 0
   603                           
   604                           ; 2 bytes @ 0x32
   605  000092                     	ds	2
   606  000094                     sprintf@c:
   607                           	opt stack 0
   608                           
   609                           ; 1 bytes @ 0x34
   610  000094                     	ds	1
   611  000095                     ??_main:
   612                           
   613                           ; 1 bytes @ 0x35
   614  000095                     	ds	2
   615                           tblptru	equ	0xFF8
   616                           postinc0	equ	0xFEE
   617                           wreg	equ	0xFE8
   618                           
   619                           	psect	cstackCOMRAM
   620  000001                     __pcstackCOMRAM:
   621                           	opt stack 0
   622  000001                     ??_Lcd_Cmd:
   623  000001                     ??_Lcd_Chr_CP:
   624  000001                     ??_isdigit:
   625  000001                     ?___awmod:
   626                           	opt stack 0
   627  000001                     ?___ftpack:
   628                           	opt stack 0
   629  000001                     ?___ftneg:
   630                           	opt stack 0
   631  000001                     ?__tdiv_to_l_:
   632                           	opt stack 0
   633  000001                     ?__div_to_l_:
   634                           	opt stack 0
   635  000001                     ?___lldiv:
   636                           	opt stack 0
   637  000001                     ___awmod@dividend:
   638                           	opt stack 0
   639  000001                     __div_to_l_@f1:
   640                           	opt stack 0
   641  000001                     ___ftpack@arg:
   642                           	opt stack 0
   643  000001                     __tdiv_to_l_@f1:
   644                           	opt stack 0
   645  000001                     ___ftge@ff1:
   646                           	opt stack 0
   647  000001                     ___ftneg@f1:
   648                           	opt stack 0
   649  000001                     frexp@value:
   650                           	opt stack 0
   651  000001                     ___lldiv@dividend:
   652                           	opt stack 0
   653                           
   654                           ; 4 bytes @ 0x0
   655  000001                     	ds	1
   656  000002                     _isdigit$1209:
   657                           	opt stack 0
   658                           
   659                           ; 1 bytes @ 0x1
   660  000002                     	ds	1
   661  000003                     Lcd_Chr_CP@data:
   662                           	opt stack 0
   663  000003                     Lcd_Cmd@data:
   664                           	opt stack 0
   665  000003                     isdigit@c:
   666                           	opt stack 0
   667  000003                     ___awmod@divisor:
   668                           	opt stack 0
   669                           
   670                           ; 2 bytes @ 0x2
   671  000003                     	ds	1
   672  000004                     ??_Lcd_Init:
   673  000004                     Lcd_Out2@x:
   674                           	opt stack 0
   675  000004                     ___ftpack@exp:
   676                           	opt stack 0
   677  000004                     frexp@eptr:
   678                           	opt stack 0
   679  000004                     __div_to_l_@f2:
   680                           	opt stack 0
   681  000004                     __tdiv_to_l_@f2:
   682                           	opt stack 0
   683  000004                     ___ftge@ff2:
   684                           	opt stack 0
   685                           
   686                           ; 3 bytes @ 0x3
   687  000004                     	ds	1
   688  000005                     Lcd_Init@data:
   689                           	opt stack 0
   690  000005                     ___awmod@counter:
   691                           	opt stack 0
   692  000005                     ___ftpack@sign:
   693                           	opt stack 0
   694  000005                     Lcd_Out2@buffer:
   695                           	opt stack 0
   696  000005                     ___lldiv@divisor:
   697                           	opt stack 0
   698                           
   699                           ; 4 bytes @ 0x4
   700  000005                     	ds	1
   701  000006                     ??___ftpack:
   702  000006                     ??_frexp:
   703  000006                     ___awmod@sign:
   704                           	opt stack 0
   705                           
   706                           ; 1 bytes @ 0x5
   707  000006                     	ds	1
   708  000007                     ??__tdiv_to_l_:
   709  000007                     ??___ftge:
   710  000007                     ?___awdiv:
   711                           	opt stack 0
   712  000007                     Lcd_Out2@y:
   713                           	opt stack 0
   714  000007                     ___awdiv@dividend:
   715                           	opt stack 0
   716  000007                     __div_to_l_@quot:
   717                           	opt stack 0
   718                           
   719                           ; 4 bytes @ 0x6
   720  000007                     	ds	1
   721  000008                     Lcd_Out2@data:
   722                           	opt stack 0
   723                           
   724                           ; 1 bytes @ 0x7
   725  000008                     	ds	1
   726  000009                     ?___lltoft:
   727                           	opt stack 0
   728  000009                     ?___lwtoft:
   729                           	opt stack 0
   730  000009                     ___awdiv@divisor:
   731                           	opt stack 0
   732  000009                     ___lwtoft@c:
   733                           	opt stack 0
   734  000009                     ___lldiv@quotient:
   735                           	opt stack 0
   736  000009                     ___lltoft@c:
   737                           	opt stack 0
   738                           
   739                           ; 4 bytes @ 0x8
   740  000009                     	ds	1
   741  00000A                     __tdiv_to_l_@quot:
   742                           	opt stack 0
   743                           
   744                           ; 4 bytes @ 0x9
   745  00000A                     	ds	1
   746  00000B                     ___awdiv@counter:
   747                           	opt stack 0
   748  00000B                     __div_to_l_@cntr:
   749                           	opt stack 0
   750                           
   751                           ; 1 bytes @ 0xA
   752  00000B                     	ds	1
   753  00000C                     ___awdiv@sign:
   754                           	opt stack 0
   755  00000C                     __div_to_l_@exp1:
   756                           	opt stack 0
   757                           
   758                           ; 1 bytes @ 0xB
   759  00000C                     	ds	1
   760  00000D                     ??___lltoft:
   761  00000D                     ___lldiv@counter:
   762                           	opt stack 0
   763  00000D                     ___awdiv@quotient:
   764                           	opt stack 0
   765                           
   766                           ; 2 bytes @ 0xC
   767  00000D                     	ds	1
   768  00000E                     ?___llmod:
   769                           	opt stack 0
   770  00000E                     __tdiv_to_l_@cntr:
   771                           	opt stack 0
   772  00000E                     ___llmod@dividend:
   773                           	opt stack 0
   774                           
   775                           ; 4 bytes @ 0xD
   776  00000E                     	ds	1
   777  00000F                     ?___wmul:
   778                           	opt stack 0
   779  00000F                     __tdiv_to_l_@exp1:
   780                           	opt stack 0
   781  00000F                     ___wmul@multiplier:
   782                           	opt stack 0
   783                           
   784                           ; 2 bytes @ 0xE
   785  00000F                     	ds	2
   786  000011                     ___lltoft@exp:
   787                           	opt stack 0
   788  000011                     ___wmul@multiplicand:
   789                           	opt stack 0
   790                           
   791                           ; 2 bytes @ 0x10
   792  000011                     	ds	1
   793  000012                     ___llmod@divisor:
   794                           	opt stack 0
   795                           
   796                           ; 4 bytes @ 0x11
   797  000012                     	ds	1
   798  000013                     ___wmul@product:
   799                           	opt stack 0
   800                           
   801                           ; 2 bytes @ 0x12
   802  000013                     	ds	2
   803  000015                     ?___ftadd:
   804                           	opt stack 0
   805  000015                     ___ftadd@f1:
   806                           	opt stack 0
   807                           
   808                           ; 3 bytes @ 0x14
   809  000015                     	ds	1
   810  000016                     ___llmod@counter:
   811                           	opt stack 0
   812                           
   813                           ; 1 bytes @ 0x15
   814  000016                     	ds	2
   815  000018                     ___ftadd@f2:
   816                           	opt stack 0
   817                           
   818                           ; 3 bytes @ 0x17
   819  000018                     	ds	3
   820  00001B                     ??___ftadd:
   821                           
   822                           ; 1 bytes @ 0x1A
   823  00001B                     	ds	3
   824  00001E                     ___ftadd@sign:
   825                           	opt stack 0
   826                           
   827                           ; 1 bytes @ 0x1D
   828  00001E                     	ds	1
   829  00001F                     ___ftadd@exp2:
   830                           	opt stack 0
   831                           
   832                           ; 1 bytes @ 0x1E
   833  00001F                     	ds	1
   834  000020                     ___ftadd@exp1:
   835                           	opt stack 0
   836                           
   837                           ; 1 bytes @ 0x1F
   838  000020                     	ds	1
   839  000021                     ?___ftdiv:
   840                           	opt stack 0
   841  000021                     ___ftdiv@f1:
   842                           	opt stack 0
   843                           
   844                           ; 3 bytes @ 0x20
   845  000021                     	ds	3
   846  000024                     ___ftdiv@f2:
   847                           	opt stack 0
   848                           
   849                           ; 3 bytes @ 0x23
   850  000024                     	ds	3
   851  000027                     ??___ftdiv:
   852                           
   853                           ; 1 bytes @ 0x26
   854  000027                     	ds	3
   855  00002A                     ___ftdiv@cntr:
   856                           	opt stack 0
   857                           
   858                           ; 1 bytes @ 0x29
   859  00002A                     	ds	1
   860  00002B                     ___ftdiv@f3:
   861                           	opt stack 0
   862                           
   863                           ; 3 bytes @ 0x2A
   864  00002B                     	ds	3
   865  00002E                     ___ftdiv@exp:
   866                           	opt stack 0
   867                           
   868                           ; 1 bytes @ 0x2D
   869  00002E                     	ds	1
   870  00002F                     ___ftdiv@sign:
   871                           	opt stack 0
   872                           
   873                           ; 1 bytes @ 0x2E
   874  00002F                     	ds	1
   875  000030                     ?___ftmul:
   876                           	opt stack 0
   877  000030                     ___ftmul@f1:
   878                           	opt stack 0
   879                           
   880                           ; 3 bytes @ 0x2F
   881  000030                     	ds	3
   882  000033                     ___ftmul@f2:
   883                           	opt stack 0
   884                           
   885                           ; 3 bytes @ 0x32
   886  000033                     	ds	3
   887  000036                     ??___ftmul:
   888                           
   889                           ; 1 bytes @ 0x35
   890  000036                     	ds	3
   891  000039                     ___ftmul@exp:
   892                           	opt stack 0
   893                           
   894                           ; 1 bytes @ 0x38
   895  000039                     	ds	1
   896  00003A                     ___ftmul@f3_as_product:
   897                           	opt stack 0
   898                           
   899                           ; 3 bytes @ 0x39
   900  00003A                     	ds	3
   901  00003D                     ___ftmul@cntr:
   902                           	opt stack 0
   903                           
   904                           ; 1 bytes @ 0x3C
   905  00003D                     	ds	1
   906  00003E                     ___ftmul@sign:
   907                           	opt stack 0
   908                           
   909                           ; 1 bytes @ 0x3D
   910  00003E                     	ds	1
   911  00003F                     ?_eval_poly:
   912                           	opt stack 0
   913  00003F                     ?_fround:
   914                           	opt stack 0
   915  00003F                     ?_scale:
   916                           	opt stack 0
   917  00003F                     eval_poly@x:
   918                           	opt stack 0
   919                           
   920                           ; 3 bytes @ 0x3E
   921  00003F                     	ds	3
   922  000042                     eval_poly@d:
   923                           	opt stack 0
   924  000042                     _fround$1611:
   925                           	opt stack 0
   926  000042                     _scale$1612:
   927                           	opt stack 0
   928                           
   929                           ; 3 bytes @ 0x41
   930  000042                     	ds	2
   931  000044                     eval_poly@n:
   932                           	opt stack 0
   933                           
   934                           ; 2 bytes @ 0x43
   935  000044                     	ds	1
   936  000045                     scale@scl:
   937                           	opt stack 0
   938  000045                     _fround$1610:
   939                           	opt stack 0
   940                           
   941                           ; 3 bytes @ 0x44
   942  000045                     	ds	1
   943  000046                     ??_eval_poly:
   944  000046                     ?___fttol:
   945                           	opt stack 0
   946  000046                     ___fttol@f1:
   947                           	opt stack 0
   948                           
   949                           ; 3 bytes @ 0x45
   950  000046                     	ds	2
   951  000048                     fround@prec:
   952                           	opt stack 0
   953  000048                     eval_poly@res:
   954                           	opt stack 0
   955                           
   956                           ; 3 bytes @ 0x47
   957  000048                     	ds	2
   958  00004A                     ??___fttol:
   959                           
   960                           ; 1 bytes @ 0x49
   961  00004A                     	ds	5
   962  00004F                     ___fttol@sign1:
   963                           	opt stack 0
   964                           
   965                           ; 1 bytes @ 0x4E
   966  00004F                     	ds	1
   967  000050                     ___fttol@lval:
   968                           	opt stack 0
   969                           
   970                           ; 4 bytes @ 0x4F
   971  000050                     	ds	4
   972  000054                     ___fttol@exp1:
   973                           	opt stack 0
   974                           
   975                           ; 1 bytes @ 0x53
   976  000054                     	ds	1
   977  000055                     ?___altoft:
   978                           	opt stack 0
   979  000055                     ___altoft@c:
   980                           	opt stack 0
   981                           
   982                           ; 4 bytes @ 0x54
   983  000055                     	ds	4
   984  000059                     ??___altoft:
   985                           
   986                           ; 1 bytes @ 0x58
   987  000059                     	ds	4
   988  00005D                     ___altoft@exp:
   989                           	opt stack 0
   990                           
   991                           ; 1 bytes @ 0x5C
   992  00005D                     	ds	1
   993  00005E                     ___altoft@sign:
   994                           	opt stack 0
   995                           
   996                           ; 1 bytes @ 0x5D
   997  00005E                     	ds	1
   998  00005F                     tblptru	equ	0xFF8
   999                           postinc0	equ	0xFEE
  1000                           wreg	equ	0xFE8
  1001                           
  1002                           ; 1 bytes @ 0x5E
  1003 ;;
  1004 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1005 ;;
  1006 ;; *************** function _main *****************
  1007 ;; Defined at:
  1008 ;;		line 102 in file "main_014_Practice_CCP Comparacion_ADC.c"
  1009 ;; Parameters:    Size  Location     Type
  1010 ;;		None
  1011 ;; Auto vars:     Size  Location     Type
  1012 ;;  i               2  214[BANK1 ] int 
  1013 ;;  Amps            3  207[BANK1 ] float 
  1014 ;;  Voltage         3  189[BANK1 ] float 
  1015 ;;  PotenciaReal    3  195[BANK1 ] float 
  1016 ;;  potenciaApar    3  158[BANK1 ] float 
  1017 ;;  FPprom        153    0[BANK1 ] float [51]
  1018 ;;  buffer1        16  161[BANK1 ] unsigned char [16]
  1019 ;;  delay           4  210[BANK1 ] unsigned long 
  1020 ;;  fppromtotal2    3  204[BANK1 ] float 
  1021 ;;  fppromtotal     3  201[BANK1 ] float 
  1022 ;;  factorPotenc    3  198[BANK1 ] float 
  1023 ;;  FactorPotenc    3  186[BANK1 ] float 
  1024 ;;  sumIns          3  183[BANK1 ] float 
  1025 ;;  Irms            3  177[BANK1 ] float 
  1026 ;;  PotenciaReal    3  153[BANK1 ] float 
  1027 ;;  numCiclosMue    2  192[BANK1 ] unsigned int 
  1028 ;;  numTicks        2  156[BANK1 ] unsigned int 
  1029 ;;  loop            1  216[BANK1 ] unsigned char 
  1030 ;;  calculoFP       1  194[BANK1 ] unsigned char 
  1031 ;; Return value:  Size  Location     Type
  1032 ;;                  1    wreg      void 
  1033 ;; Registers used:
  1034 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1035 ;; Tracked objects:
  1036 ;;		On entry : 0/0
  1037 ;;		On exit  : 0/0
  1038 ;;		Unchanged: 0/0
  1039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1040 ;;      Params:         0       0       0       0       0       0       0       0       0
  1041 ;;      Locals:         0       0     217       0       0       0       0       0       0
  1042 ;;      Temps:          0       2       0       0       0       0       0       0       0
  1043 ;;      Totals:         0       2     217       0       0       0       0       0       0
  1044 ;;Total ram usage:      219 bytes
  1045 ;; Hardware stack levels required when called:    5
  1046 ;; This function calls:
  1047 ;;		_Lcd_Cmd
  1048 ;;		_Lcd_Init
  1049 ;;		_Lcd_Out2
  1050 ;;		___ftadd
  1051 ;;		___ftdiv
  1052 ;;		___ftmul
  1053 ;;		___lltoft
  1054 ;;		___lwtoft
  1055 ;;		___wmul
  1056 ;;		_configstandard
  1057 ;;		_cos
  1058 ;;		_sprintf
  1059 ;; This function is called by:
  1060 ;;		Startup code after reset
  1061 ;; This function uses a non-reentrant model
  1062 ;;
  1063                           
  1064                           	psect	text0
  1065  001346                     __ptext0:
  1066                           	opt stack 0
  1067  001346                     _main:
  1068                           	opt stack 26
  1069                           
  1070                           ;main_014_Practice_CCP Comparacion_ADC.c: 104: configstandard();
  1071                           
  1072                           ;incstack = 0
  1073  001346  ECC9  F017         	call	_configstandard	;wreg free
  1074                           
  1075                           ;main_014_Practice_CCP Comparacion_ADC.c: 106: TRISAbits.RA0 = 1;
  1076  00134A  8092               	bsf	3986,0,c	;volatile
  1077                           
  1078                           ;main_014_Practice_CCP Comparacion_ADC.c: 108: TRISBbits.RB0=1;
  1079  00134C  8093               	bsf	3987,0,c	;volatile
  1080                           
  1081                           ;main_014_Practice_CCP Comparacion_ADC.c: 109: TRISBbits.RB1=1;
  1082  00134E  8293               	bsf	3987,1,c	;volatile
  1083                           
  1084                           ;main_014_Practice_CCP Comparacion_ADC.c: 112: unsigned char buffer1[16];
  1085                           ;main_014_Practice_CCP Comparacion_ADC.c: 115: Lcd_Init();
  1086  001350  EC87  F013         	call	_Lcd_Init	;wreg free
  1087                           
  1088                           ;main_014_Practice_CCP Comparacion_ADC.c: 116: Lcd_Cmd(1);
  1089  001354  0E01               	movlw	1
  1090  001356  ECF5  F012         	call	_Lcd_Cmd
  1091                           
  1092                           ;main_014_Practice_CCP Comparacion_ADC.c: 117: Lcd_Cmd(12);
  1093  00135A  0E0C               	movlw	12
  1094  00135C  ECF5  F012         	call	_Lcd_Cmd
  1095                           
  1096                           ;main_014_Practice_CCP Comparacion_ADC.c: 118: _delay((unsigned long)((100)*(48000000/40
      +                          00.0)));
  1097  001360  0E07               	movlw	7
  1098  001362  0100               	movlb	0	; () banked
  1099  001364  6F96               	movwf	(??_main+1)& (0+255),b
  1100  001366  0E17               	movlw	23
  1101  001368  6F95               	movwf	??_main& (0+255),b
  1102  00136A  0E6A               	movlw	106
  1103  00136C                     u3777:
  1104  00136C  2EE8               	decfsz	wreg,f,c
  1105  00136E  D7FE               	bra	u3777
  1106  001370  2F95               	decfsz	??_main& (0+255),f,b
  1107  001372  D7FC               	bra	u3777
  1108  001374  2F96               	decfsz	(??_main+1)& (0+255),f,b
  1109  001376  D7FA               	bra	u3777
  1110  001378  F000               	nop	
  1111                           
  1112                           ;main_014_Practice_CCP Comparacion_ADC.c: 120: ADCON2bits.ADCS=110;
  1113  00137A  50C0               	movf	4032,w,c	;volatile
  1114  00137C  0BF8               	andlw	-8
  1115  00137E  0906               	iorlw	6
  1116  001380  6EC0               	movwf	4032,c	;volatile
  1117                           
  1118                           ;main_014_Practice_CCP Comparacion_ADC.c: 121: ADCON2bits.ACQT=010;
  1119  001382  96C0               	bcf	4032,3,c	;volatile
  1120  001384  98C0               	bcf	4032,4,c	;volatile
  1121  001386  9AC0               	bcf	4032,5,c	;volatile
  1122                           
  1123                           ;main_014_Practice_CCP Comparacion_ADC.c: 123: float sumIns=0;
  1124  001388  0E00               	movlw	0
  1125  00138A  0101               	movlb	1	; () banked
  1126  00138C  6FB7               	movwf	main@sumIns& (0+255),b
  1127  00138E  0E00               	movlw	0
  1128  001390  6FB8               	movwf	(main@sumIns+1)& (0+255),b
  1129  001392  0E00               	movlw	0
  1130  001394  6FB9               	movwf	(main@sumIns+2)& (0+255),b
  1131                           
  1132                           ; BSR set to: 1
  1133                           ;main_014_Practice_CCP Comparacion_ADC.c: 124: float Irms=0;
  1134  001396  0E00               	movlw	0
  1135  001398  6FB1               	movwf	main@Irms& (0+255),b
  1136  00139A  0E00               	movlw	0
  1137  00139C  6FB2               	movwf	(main@Irms+1)& (0+255),b
  1138  00139E  0E00               	movlw	0
  1139  0013A0  6FB3               	movwf	(main@Irms+2)& (0+255),b
  1140                           
  1141                           ; BSR set to: 1
  1142                           ;main_014_Practice_CCP Comparacion_ADC.c: 125: unsigned int numCiclosMuestro=0;
  1143  0013A2  0E00               	movlw	0
  1144  0013A4  6FC1               	movwf	(main@numCiclosMuestro+1)& (0+255),b
  1145  0013A6  0E00               	movlw	0
  1146  0013A8  6FC0               	movwf	main@numCiclosMuestro& (0+255),b
  1147                           
  1148                           ; BSR set to: 1
  1149                           ;main_014_Practice_CCP Comparacion_ADC.c: 126: float PotenciaReal=0;
  1150  0013AA  0E00               	movlw	0
  1151  0013AC  6F99               	movwf	main@PotenciaReal& (0+255),b
  1152  0013AE  0E00               	movlw	0
  1153  0013B0  6F9A               	movwf	(main@PotenciaReal+1)& (0+255),b
  1154  0013B2  0E00               	movlw	0
  1155  0013B4  6F9B               	movwf	(main@PotenciaReal+2)& (0+255),b
  1156                           
  1157                           ; BSR set to: 1
  1158                           ;main_014_Practice_CCP Comparacion_ADC.c: 127: float FactorPotencia=0;
  1159  0013B6  0E00               	movlw	0
  1160  0013B8  6FBA               	movwf	main@FactorPotencia& (0+255),b
  1161  0013BA  0E00               	movlw	0
  1162  0013BC  6FBB               	movwf	(main@FactorPotencia+1)& (0+255),b
  1163  0013BE  0E00               	movlw	0
  1164  0013C0  6FBC               	movwf	(main@FactorPotencia+2)& (0+255),b
  1165                           
  1166                           ; BSR set to: 1
  1167                           ;main_014_Practice_CCP Comparacion_ADC.c: 128: double factorPotenciaNum=0;
  1168  0013C2  0E00               	movlw	0
  1169  0013C4  6FC6               	movwf	main@factorPotenciaNum& (0+255),b
  1170  0013C6  0E00               	movlw	0
  1171  0013C8  6FC7               	movwf	(main@factorPotenciaNum+1)& (0+255),b
  1172  0013CA  0E00               	movlw	0
  1173  0013CC  6FC8               	movwf	(main@factorPotenciaNum+2)& (0+255),b
  1174                           
  1175                           ; BSR set to: 1
  1176                           ;main_014_Practice_CCP Comparacion_ADC.c: 129: unsigned char calculoFP=0;
  1177  0013CE  0E00               	movlw	0
  1178  0013D0  6FC2               	movwf	main@calculoFP& (0+255),b
  1179                           
  1180                           ; BSR set to: 1
  1181                           ;main_014_Practice_CCP Comparacion_ADC.c: 130: unsigned int numTicks=0;
  1182  0013D2  0E00               	movlw	0
  1183  0013D4  6F9D               	movwf	(main@numTicks+1)& (0+255),b
  1184  0013D6  0E00               	movlw	0
  1185  0013D8  6F9C               	movwf	main@numTicks& (0+255),b
  1186                           
  1187                           ; BSR set to: 1
  1188                           ;main_014_Practice_CCP Comparacion_ADC.c: 131: unsigned long long delay=0;
  1189  0013DA  0E00               	movlw	0
  1190  0013DC  6FD2               	movwf	main@delay& (0+255),b
  1191  0013DE  0E00               	movlw	0
  1192  0013E0  6FD3               	movwf	(main@delay+1)& (0+255),b
  1193  0013E2  0E00               	movlw	0
  1194  0013E4  6FD4               	movwf	(main@delay+2)& (0+255),b
  1195  0013E6  0E00               	movlw	0
  1196  0013E8  6FD5               	movwf	(main@delay+3)& (0+255),b
  1197                           
  1198                           ; BSR set to: 1
  1199                           ;main_014_Practice_CCP Comparacion_ADC.c: 132: unsigned char loop=0;
  1200  0013EA  0E00               	movlw	0
  1201  0013EC  6FD8               	movwf	main@loop& (0+255),b
  1202                           
  1203                           ; BSR set to: 1
  1204                           ;main_014_Practice_CCP Comparacion_ADC.c: 133: float FPprom[51];
  1205                           ;main_014_Practice_CCP Comparacion_ADC.c: 134: float fppromtotal=0;
  1206  0013EE  0E00               	movlw	0
  1207  0013F0  6FC9               	movwf	main@fppromtotal& (0+255),b
  1208  0013F2  0E00               	movlw	0
  1209  0013F4  6FCA               	movwf	(main@fppromtotal+1)& (0+255),b
  1210  0013F6  0E00               	movlw	0
  1211  0013F8  6FCB               	movwf	(main@fppromtotal+2)& (0+255),b
  1212                           
  1213                           ; BSR set to: 1
  1214                           ;main_014_Practice_CCP Comparacion_ADC.c: 135: float fppromtotal2=0;
  1215  0013FA  0E00               	movlw	0
  1216  0013FC  6FCC               	movwf	main@fppromtotal2& (0+255),b
  1217  0013FE  0E00               	movlw	0
  1218  001400  6FCD               	movwf	(main@fppromtotal2+1)& (0+255),b
  1219  001402  0E00               	movlw	0
  1220  001404  6FCE               	movwf	(main@fppromtotal2+2)& (0+255),b
  1221                           
  1222                           ; BSR set to: 1
  1223                           ;main_014_Practice_CCP Comparacion_ADC.c: 136: INTCONbits.GIE = 0;
  1224  001406  9EF2               	bcf	intcon,7,c	;volatile
  1225                           
  1226                           ; BSR set to: 1
  1227                           ;main_014_Practice_CCP Comparacion_ADC.c: 139: {
  1228                           ;main_014_Practice_CCP Comparacion_ADC.c: 140: while(loop<51){
  1229                           
  1230                           ;main_014_Practice_CCP Comparacion_ADC.c: 138: while(1)
  1231  001408  D0AB               	goto	l118
  1232  00140A                     l119:
  1233                           
  1234                           ; BSR set to: 1
  1235                           ;main_014_Practice_CCP Comparacion_ADC.c: 141: if(PORTBbits.RB0==1){
  1236  00140A  A081               	btfss	3969,0,c	;volatile
  1237  00140C  D015               	goto	l122
  1238                           
  1239                           ; BSR set to: 1
  1240                           ;main_014_Practice_CCP Comparacion_ADC.c: 142: if(PORTBbits.RB1==1){
  1241  00140E  A281               	btfss	3969,1,c	;volatile
  1242  001410  D009               	goto	l121
  1243                           
  1244                           ; BSR set to: 1
  1245                           ;main_014_Practice_CCP Comparacion_ADC.c: 143: delay=0;
  1246  001412  0E00               	movlw	0
  1247  001414  6FD2               	movwf	main@delay& (0+255),b
  1248  001416  0E00               	movlw	0
  1249  001418  6FD3               	movwf	(main@delay+1)& (0+255),b
  1250  00141A  0E00               	movlw	0
  1251  00141C  6FD4               	movwf	(main@delay+2)& (0+255),b
  1252  00141E  0E00               	movlw	0
  1253  001420  6FD5               	movwf	(main@delay+3)& (0+255),b
  1254                           
  1255                           ;main_014_Practice_CCP Comparacion_ADC.c: 144: }else{
  1256  001422  D00A               	goto	l122
  1257  001424                     l121:
  1258                           
  1259                           ; BSR set to: 1
  1260                           ;main_014_Practice_CCP Comparacion_ADC.c: 145: _delay((unsigned long)((1)*(48000000/4000
      +                          000.0)));
  1261                           
  1262                           ; BSR set to: 1
  1263  001424  0E04               	movlw	4
  1264  001426                     u3787:
  1265  001426  2EE8               	decfsz	wreg,f,c
  1266  001428  D7FE               	bra	u3787
  1267                           
  1268                           ;main_014_Practice_CCP Comparacion_ADC.c: 146: delay++;
  1269  00142A  0E01               	movlw	1
  1270  00142C  0101               	movlb	1	; () banked
  1271  00142E  27D2               	addwf	main@delay& (0+255),f,b
  1272  001430  0E00               	movlw	0
  1273  001432  23D3               	addwfc	(main@delay+1)& (0+255),f,b
  1274  001434  23D4               	addwfc	(main@delay+2)& (0+255),f,b
  1275  001436  23D5               	addwfc	(main@delay+3)& (0+255),f,b
  1276  001438                     l122:
  1277                           
  1278                           ; BSR set to: 1
  1279                           ;main_014_Practice_CCP Comparacion_ADC.c: 147: }
  1280                           ;main_014_Practice_CCP Comparacion_ADC.c: 148: }
  1281                           ;main_014_Practice_CCP Comparacion_ADC.c: 152: FactorPotencia=(float)((((float)delay/100
      +                          0000.0)*360.0)/(1.0/60.0));
  1282                           
  1283                           ; BSR set to: 1
  1284                           
  1285                           ; BSR set to: 1
  1286  001438  0E00               	movlw	0
  1287  00143A  6E33               	movwf	___ftmul@f2,c
  1288  00143C  0EB4               	movlw	180
  1289  00143E  6E34               	movwf	___ftmul@f2+1,c
  1290  001440  0E43               	movlw	67
  1291  001442  6E35               	movwf	___ftmul@f2+2,c
  1292  001444  0E24               	movlw	36
  1293  001446  6E24               	movwf	___ftdiv@f2,c
  1294  001448  0E74               	movlw	116
  1295  00144A  6E25               	movwf	___ftdiv@f2+1,c
  1296  00144C  0E49               	movlw	73
  1297  00144E  6E26               	movwf	___ftdiv@f2+2,c
  1298  001450  C1D2  F009         	movff	main@delay,___lltoft@c
  1299  001454  C1D3  F00A         	movff	main@delay+1,___lltoft@c+1
  1300  001458  C1D4  F00B         	movff	main@delay+2,___lltoft@c+2
  1301  00145C  C1D5  F00C         	movff	main@delay+3,___lltoft@c+3
  1302  001460  EC1A  F019         	call	___lltoft	;wreg free
  1303  001464  C009  F021         	movff	?___lltoft,___ftdiv@f1
  1304  001468  C00A  F022         	movff	?___lltoft+1,___ftdiv@f1+1
  1305  00146C  C00B  F023         	movff	?___lltoft+2,___ftdiv@f1+2
  1306  001470  EC05  F015         	call	___ftdiv	;wreg free
  1307  001474  C021  F030         	movff	?___ftdiv,___ftmul@f1
  1308  001478  C022  F031         	movff	?___ftdiv+1,___ftmul@f1+1
  1309  00147C  C023  F032         	movff	?___ftdiv+2,___ftmul@f1+2
  1310  001480  EC8B  F014         	call	___ftmul	;wreg free
  1311  001484  C030  F1B4         	movff	?___ftmul,_main$1609
  1312  001488  C031  F1B5         	movff	?___ftmul+1,_main$1609+1
  1313  00148C  C032  F1B6         	movff	?___ftmul+2,_main$1609+2
  1314                           
  1315                           ;main_014_Practice_CCP Comparacion_ADC.c: 147: }
  1316                           ;main_014_Practice_CCP Comparacion_ADC.c: 148: }
  1317                           ;main_014_Practice_CCP Comparacion_ADC.c: 152: FactorPotencia=(float)((((float)delay/100
      +                          0000.0)*360.0)/(1.0/60.0));
  1318  001490  C1B4  F021         	movff	_main$1609,___ftdiv@f1
  1319  001494  C1B5  F022         	movff	_main$1609+1,___ftdiv@f1+1
  1320  001498  C1B6  F023         	movff	_main$1609+2,___ftdiv@f1+2
  1321  00149C  0E89               	movlw	137
  1322  00149E  6E24               	movwf	___ftdiv@f2,c
  1323  0014A0  0E88               	movlw	136
  1324  0014A2  6E25               	movwf	___ftdiv@f2+1,c
  1325  0014A4  0E3C               	movlw	60
  1326  0014A6  6E26               	movwf	___ftdiv@f2+2,c
  1327  0014A8  EC05  F015         	call	___ftdiv	;wreg free
  1328  0014AC  C021  F1BA         	movff	?___ftdiv,main@FactorPotencia
  1329  0014B0  C022  F1BB         	movff	?___ftdiv+1,main@FactorPotencia+1
  1330  0014B4  C023  F1BC         	movff	?___ftdiv+2,main@FactorPotencia+2
  1331                           
  1332                           ;main_014_Practice_CCP Comparacion_ADC.c: 153: factorPotenciaNum=cos(FactorPotencia);
  1333  0014B8  C1BA  F07B         	movff	main@FactorPotencia,cos@f
  1334  0014BC  C1BB  F07C         	movff	main@FactorPotencia+1,cos@f+1
  1335  0014C0  C1BC  F07D         	movff	main@FactorPotencia+2,cos@f+2
  1336  0014C4  ECA8  F016         	call	_cos	;wreg free
  1337  0014C8  C07B  F1C6         	movff	?_cos,main@factorPotenciaNum
  1338  0014CC  C07C  F1C7         	movff	?_cos+1,main@factorPotenciaNum+1
  1339  0014D0  C07D  F1C8         	movff	?_cos+2,main@factorPotenciaNum+2
  1340                           
  1341                           ;main_014_Practice_CCP Comparacion_ADC.c: 154: sprintf(buffer1,"PReal %0.3f",factorPoten
      +                          ciaNum );
  1342  0014D4  0EA1               	movlw	low main@buffer1
  1343  0014D6  0100               	movlb	0	; () banked
  1344  0014D8  6F6E               	movwf	sprintf@sp& (0+255),b
  1345  0014DA  0E01               	movlw	high main@buffer1
  1346  0014DC  6F6F               	movwf	(sprintf@sp+1)& (0+255),b
  1347  0014DE  0E9E               	movlw	low STR_1
  1348  0014E0  6F70               	movwf	sprintf@f& (0+255),b
  1349  0014E2  0E08               	movlw	high STR_1
  1350  0014E4  6F71               	movwf	(sprintf@f+1)& (0+255),b
  1351  0014E6  C1C6  F072         	movff	main@factorPotenciaNum,?_sprintf+4
  1352  0014EA  C1C7  F073         	movff	main@factorPotenciaNum+1,?_sprintf+5
  1353  0014EE  C1C8  F074         	movff	main@factorPotenciaNum+2,?_sprintf+6
  1354  0014F2  EC5F  F004         	call	_sprintf	;wreg free
  1355                           
  1356                           ;main_014_Practice_CCP Comparacion_ADC.c: 155: Lcd_Out2(2, 0, buffer1);
  1357  0014F6  0E00               	movlw	0
  1358  0014F8  6E04               	movwf	Lcd_Out2@x,c
  1359  0014FA  0EA1               	movlw	low main@buffer1
  1360  0014FC  6E05               	movwf	Lcd_Out2@buffer,c
  1361  0014FE  0E01               	movlw	high main@buffer1
  1362  001500  6E06               	movwf	Lcd_Out2@buffer+1,c
  1363  001502  0E02               	movlw	2
  1364  001504  ECE9  F018         	call	_Lcd_Out2
  1365                           
  1366                           ;main_014_Practice_CCP Comparacion_ADC.c: 156: sprintf(buffer2,"PReal %lu",delay );
  1367  001508  0EDB               	movlw	low _buffer2
  1368  00150A  0100               	movlb	0	; () banked
  1369  00150C  6F6E               	movwf	sprintf@sp& (0+255),b
  1370  00150E  0E01               	movlw	high _buffer2
  1371  001510  6F6F               	movwf	(sprintf@sp+1)& (0+255),b
  1372  001512  0EAA               	movlw	low STR_2
  1373  001514  6F70               	movwf	sprintf@f& (0+255),b
  1374  001516  0E08               	movlw	high STR_2
  1375  001518  6F71               	movwf	(sprintf@f+1)& (0+255),b
  1376  00151A  C1D2  F072         	movff	main@delay,?_sprintf+4
  1377  00151E  C1D3  F073         	movff	main@delay+1,?_sprintf+5
  1378  001522  C1D4  F074         	movff	main@delay+2,?_sprintf+6
  1379  001526  C1D5  F075         	movff	main@delay+3,?_sprintf+7
  1380  00152A  EC5F  F004         	call	_sprintf	;wreg free
  1381                           
  1382                           ;main_014_Practice_CCP Comparacion_ADC.c: 157: Lcd_Out2(1, 0, buffer2);
  1383  00152E  0E00               	movlw	0
  1384  001530  6E04               	movwf	Lcd_Out2@x,c
  1385  001532  0EDB               	movlw	low _buffer2
  1386  001534  6E05               	movwf	Lcd_Out2@buffer,c
  1387  001536  0E01               	movlw	high _buffer2
  1388  001538  6E06               	movwf	Lcd_Out2@buffer+1,c
  1389  00153A  0E01               	movlw	1
  1390  00153C  ECE9  F018         	call	_Lcd_Out2
  1391                           
  1392                           ;main_014_Practice_CCP Comparacion_ADC.c: 158: FPprom[loop]=factorPotenciaNum;
  1393  001540  0101               	movlb	1	; () banked
  1394  001542  51D8               	movf	main@loop& (0+255),w,b
  1395  001544  0D03               	mullw	3
  1396  001546  0E00               	movlw	low main@FPprom
  1397  001548  24F3               	addwf	prodl,w,c
  1398  00154A  6ED9               	movwf	fsr2l,c
  1399  00154C  0E01               	movlw	high main@FPprom
  1400  00154E  20F4               	addwfc	prodh,w,c
  1401  001550  6EDA               	movwf	fsr2h,c
  1402  001552  C1C6  FFDE         	movff	main@factorPotenciaNum,postinc2
  1403  001556  C1C7  FFDE         	movff	main@factorPotenciaNum+1,postinc2
  1404  00155A  C1C8  FFDE         	movff	main@factorPotenciaNum+2,postinc2
  1405                           
  1406                           ; BSR set to: 1
  1407                           ;main_014_Practice_CCP Comparacion_ADC.c: 159: loop++;
  1408  00155E  2BD8               	incf	main@loop& (0+255),f,b
  1409  001560                     l118:
  1410                           
  1411                           ; BSR set to: 1
  1412  001560  0E32               	movlw	50
  1413  001562  0101               	movlb	1	; () banked
  1414  001564  65D8               	cpfsgt	main@loop& (0+255),b
  1415  001566  D751               	goto	l119
  1416                           
  1417                           ; BSR set to: 1
  1418                           ;main_014_Practice_CCP Comparacion_ADC.c: 160: }
  1419                           ;main_014_Practice_CCP Comparacion_ADC.c: 162: if(loop==50){
  1420                           
  1421                           ; BSR set to: 1
  1422  001568  0E32               	movlw	50
  1423  00156A  19D8               	xorwf	main@loop& (0+255),w,b
  1424  00156C  A4D8               	btfss	status,2,c
  1425  00156E  D067               	goto	l124
  1426                           
  1427                           ; BSR set to: 1
  1428                           ;main_014_Practice_CCP Comparacion_ADC.c: 163: for(int i=0;i<51;i++){
  1429  001570  0E00               	movlw	0
  1430  001572  6FD7               	movwf	(main@i+1)& (0+255),b
  1431  001574  0E00               	movlw	0
  1432  001576  6FD6               	movwf	main@i& (0+255),b
  1433  001578                     l3723:
  1434                           
  1435                           ; BSR set to: 1
  1436  001578  BFD7               	btfsc	(main@i+1)& (0+255),7,b
  1437  00157A  D006               	goto	l125
  1438  00157C  51D7               	movf	(main@i+1)& (0+255),w,b
  1439  00157E  E12C               	bnz	l3733
  1440  001580  0E33               	movlw	51
  1441  001582  5DD6               	subwf	main@i& (0+255),w,b
  1442  001584  B0D8               	btfsc	status,0,c
  1443  001586  D028               	goto	u3740
  1444  001588                     l125:
  1445                           
  1446                           ; BSR set to: 1
  1447                           ;main_014_Practice_CCP Comparacion_ADC.c: 165: fppromtotal+=FPprom[i];
  1448                           
  1449                           ; BSR set to: 1
  1450  001588  C1C9  F015         	movff	main@fppromtotal,___ftadd@f1
  1451  00158C  C1CA  F016         	movff	main@fppromtotal+1,___ftadd@f1+1
  1452  001590  C1CB  F017         	movff	main@fppromtotal+2,___ftadd@f1+2
  1453  001594  C1D6  F00F         	movff	main@i,___wmul@multiplier
  1454  001598  C1D7  F010         	movff	main@i+1,___wmul@multiplier+1
  1455  00159C  0E00               	movlw	0
  1456  00159E  6E12               	movwf	___wmul@multiplicand+1,c
  1457  0015A0  0E03               	movlw	3
  1458  0015A2  6E11               	movwf	___wmul@multiplicand,c
  1459  0015A4  EC69  F019         	call	___wmul	;wreg free
  1460  0015A8  0E00               	movlw	low main@FPprom
  1461  0015AA  240F               	addwf	?___wmul,w,c
  1462  0015AC  6ED9               	movwf	fsr2l,c
  1463  0015AE  0E01               	movlw	high main@FPprom
  1464  0015B0  2010               	addwfc	?___wmul+1,w,c
  1465  0015B2  6EDA               	movwf	fsr2h,c
  1466  0015B4  CFDE F018          	movff	postinc2,___ftadd@f2
  1467  0015B8  CFDE F019          	movff	postinc2,___ftadd@f2+1
  1468  0015BC  CFDD F01A          	movff	postdec2,___ftadd@f2+2
  1469  0015C0  EC5D  F010         	call	___ftadd	;wreg free
  1470  0015C4  C015  F1C9         	movff	?___ftadd,main@fppromtotal
  1471  0015C8  C016  F1CA         	movff	?___ftadd+1,main@fppromtotal+1
  1472  0015CC  C017  F1CB         	movff	?___ftadd+2,main@fppromtotal+2
  1473  0015D0  0101               	movlb	1	; () banked
  1474  0015D2  4BD6               	infsnz	main@i& (0+255),f,b
  1475  0015D4  2BD7               	incf	(main@i+1)& (0+255),f,b
  1476  0015D6  D7D0               	goto	l3723
  1477  0015D8                     u3740:
  1478  0015D8                     l3733:
  1479                           
  1480                           ; BSR set to: 1
  1481                           ;main_014_Practice_CCP Comparacion_ADC.c: 166: }
  1482                           ;main_014_Practice_CCP Comparacion_ADC.c: 167: fppromtotal2=fppromtotal/51.0;
  1483  0015D8  C1C9  F021         	movff	main@fppromtotal,___ftdiv@f1
  1484  0015DC  C1CA  F022         	movff	main@fppromtotal+1,___ftdiv@f1+1
  1485  0015E0  C1CB  F023         	movff	main@fppromtotal+2,___ftdiv@f1+2
  1486  0015E4  0E00               	movlw	0
  1487  0015E6  6E24               	movwf	___ftdiv@f2,c
  1488  0015E8  0E4C               	movlw	76
  1489  0015EA  6E25               	movwf	___ftdiv@f2+1,c
  1490  0015EC  0E42               	movlw	66
  1491  0015EE  6E26               	movwf	___ftdiv@f2+2,c
  1492  0015F0  EC05  F015         	call	___ftdiv	;wreg free
  1493  0015F4  C021  F1CC         	movff	?___ftdiv,main@fppromtotal2
  1494  0015F8  C022  F1CD         	movff	?___ftdiv+1,main@fppromtotal2+1
  1495  0015FC  C023  F1CE         	movff	?___ftdiv+2,main@fppromtotal2+2
  1496                           
  1497                           ;main_014_Practice_CCP Comparacion_ADC.c: 168: Lcd_Cmd(1);
  1498  001600  0E01               	movlw	1
  1499  001602  ECF5  F012         	call	_Lcd_Cmd
  1500                           
  1501                           ;main_014_Practice_CCP Comparacion_ADC.c: 169: sprintf(buffer1,"pF=%0.3f",fppromtotal2 )
      +                          ;
  1502  001606  0EA1               	movlw	low main@buffer1
  1503  001608  0100               	movlb	0	; () banked
  1504  00160A  6F6E               	movwf	sprintf@sp& (0+255),b
  1505  00160C  0E01               	movlw	high main@buffer1
  1506  00160E  6F6F               	movwf	(sprintf@sp+1)& (0+255),b
  1507  001610  0EB4               	movlw	low STR_3
  1508  001612  6F70               	movwf	sprintf@f& (0+255),b
  1509  001614  0E08               	movlw	high STR_3
  1510  001616  6F71               	movwf	(sprintf@f+1)& (0+255),b
  1511  001618  C1CC  F072         	movff	main@fppromtotal2,?_sprintf+4
  1512  00161C  C1CD  F073         	movff	main@fppromtotal2+1,?_sprintf+5
  1513  001620  C1CE  F074         	movff	main@fppromtotal2+2,?_sprintf+6
  1514  001624  EC5F  F004         	call	_sprintf	;wreg free
  1515                           
  1516                           ;main_014_Practice_CCP Comparacion_ADC.c: 170: Lcd_Out2(1, 0, buffer1);
  1517  001628  0E00               	movlw	0
  1518  00162A  6E04               	movwf	Lcd_Out2@x,c
  1519  00162C  0EA1               	movlw	low main@buffer1
  1520  00162E  6E05               	movwf	Lcd_Out2@buffer,c
  1521  001630  0E01               	movlw	high main@buffer1
  1522  001632  6E06               	movwf	Lcd_Out2@buffer+1,c
  1523  001634  0E01               	movlw	1
  1524  001636  ECE9  F018         	call	_Lcd_Out2
  1525                           
  1526                           ;main_014_Practice_CCP Comparacion_ADC.c: 171: loop++;
  1527  00163A  0101               	movlb	1	; () banked
  1528  00163C  2BD8               	incf	main@loop& (0+255),f,b
  1529  00163E                     l124:
  1530                           
  1531                           ; BSR set to: 1
  1532                           ;main_014_Practice_CCP Comparacion_ADC.c: 172: }
  1533                           ;main_014_Practice_CCP Comparacion_ADC.c: 173: calculoFP=1;
  1534                           
  1535                           ; BSR set to: 1
  1536  00163E  0E01               	movlw	1
  1537  001640  6FC2               	movwf	main@calculoFP& (0+255),b
  1538  001642                     
  1539                           ; BSR set to: 1
  1540                           
  1541                           ; BSR set to: 1
  1542                           
  1543                           ; BSR set to: 1
  1544  001642  51C2               	movf	main@calculoFP& (0+255),w,b
  1545  001644  A4D8               	btfss	status,2,c
  1546  001646  D08D               	goto	l130
  1547  001648  D7FC               	goto	l128
  1548  00164A                     l131:
  1549                           
  1550                           ; BSR set to: 1
  1551                           ;main_014_Practice_CCP Comparacion_ADC.c: 178: ADCON0bits.GO_DONE = 1;
  1552  00164A  82C2               	bsf	4034,1,c	;volatile
  1553                           
  1554                           ; BSR set to: 1
  1555                           ;main_014_Practice_CCP Comparacion_ADC.c: 179: adc1 = (ADRESH<<8)+ADRESL;
  1556  00164C  50C4               	movf	4036,w,c	;volatile
  1557  00164E  0100               	movlb	0	; () banked
  1558  001650  6F96               	movwf	(??_main+1)& (0+255),b
  1559  001652  6B95               	clrf	??_main& (0+255),b
  1560  001654  50C3               	movf	4035,w,c	;volatile
  1561  001656  2595               	addwf	??_main& (0+255),w,b
  1562  001658  0101               	movlb	1	; () banked
  1563  00165A  6FD9               	movwf	_adc1& (0+255),b
  1564  00165C  0E00               	movlw	0
  1565  00165E  0100               	movlb	0	; () banked
  1566  001660  2196               	addwfc	(??_main+1)& (0+255),w,b
  1567  001662  0101               	movlb	1	; () banked
  1568  001664  6FDA               	movwf	(_adc1+1)& (0+255),b
  1569                           
  1570                           ; BSR set to: 1
  1571                           ;main_014_Practice_CCP Comparacion_ADC.c: 180: float Voltage=0;
  1572  001666  0E00               	movlw	0
  1573  001668  6FBD               	movwf	main@Voltage& (0+255),b
  1574  00166A  0E00               	movlw	0
  1575  00166C  6FBE               	movwf	(main@Voltage+1)& (0+255),b
  1576  00166E  0E00               	movlw	0
  1577  001670  6FBF               	movwf	(main@Voltage+2)& (0+255),b
  1578                           
  1579                           ; BSR set to: 1
  1580                           ;main_014_Practice_CCP Comparacion_ADC.c: 181: float Amps=0;
  1581  001672  0E00               	movlw	0
  1582  001674  6FCF               	movwf	main@Amps& (0+255),b
  1583  001676  0E00               	movlw	0
  1584  001678  6FD0               	movwf	(main@Amps+1)& (0+255),b
  1585  00167A  0E00               	movlw	0
  1586  00167C  6FD1               	movwf	(main@Amps+2)& (0+255),b
  1587                           
  1588                           ; BSR set to: 1
  1589                           ;main_014_Practice_CCP Comparacion_ADC.c: 182: Voltage=(float)(adc1*5.0/1024.0);
  1590  00167E  0E00               	movlw	0
  1591  001680  6E33               	movwf	___ftmul@f2,c
  1592  001682  0EA0               	movlw	160
  1593  001684  6E34               	movwf	___ftmul@f2+1,c
  1594  001686  0E40               	movlw	64
  1595  001688  6E35               	movwf	___ftmul@f2+2,c
  1596  00168A  C1D9  F009         	movff	_adc1,___lwtoft@c
  1597  00168E  C1DA  F00A         	movff	_adc1+1,___lwtoft@c+1
  1598  001692  EC8E  F019         	call	___lwtoft	;wreg free
  1599  001696  C009  F030         	movff	?___lwtoft,___ftmul@f1
  1600  00169A  C00A  F031         	movff	?___lwtoft+1,___ftmul@f1+1
  1601  00169E  C00B  F032         	movff	?___lwtoft+2,___ftmul@f1+2
  1602  0016A2  EC8B  F014         	call	___ftmul	;wreg free
  1603  0016A6  C030  F021         	movff	?___ftmul,___ftdiv@f1
  1604  0016AA  C031  F022         	movff	?___ftmul+1,___ftdiv@f1+1
  1605  0016AE  C032  F023         	movff	?___ftmul+2,___ftdiv@f1+2
  1606  0016B2  0E00               	movlw	0
  1607  0016B4  6E24               	movwf	___ftdiv@f2,c
  1608  0016B6  0E80               	movlw	128
  1609  0016B8  6E25               	movwf	___ftdiv@f2+1,c
  1610  0016BA  0E44               	movlw	68
  1611  0016BC  6E26               	movwf	___ftdiv@f2+2,c
  1612  0016BE  EC05  F015         	call	___ftdiv	;wreg free
  1613  0016C2  C021  F1BD         	movff	?___ftdiv,main@Voltage
  1614  0016C6  C022  F1BE         	movff	?___ftdiv+1,main@Voltage+1
  1615  0016CA  C023  F1BF         	movff	?___ftdiv+2,main@Voltage+2
  1616                           
  1617                           ;main_014_Practice_CCP Comparacion_ADC.c: 183: Amps=((Voltage-2.5)/0.185);
  1618  0016CE  0E00               	movlw	0
  1619  0016D0  6E18               	movwf	___ftadd@f2,c
  1620  0016D2  0E20               	movlw	32
  1621  0016D4  6E19               	movwf	___ftadd@f2+1,c
  1622  0016D6  0EC0               	movlw	192
  1623  0016D8  6E1A               	movwf	___ftadd@f2+2,c
  1624  0016DA  C1BD  F015         	movff	main@Voltage,___ftadd@f1
  1625  0016DE  C1BE  F016         	movff	main@Voltage+1,___ftadd@f1+1
  1626  0016E2  C1BF  F017         	movff	main@Voltage+2,___ftadd@f1+2
  1627  0016E6  EC5D  F010         	call	___ftadd	;wreg free
  1628  0016EA  C015  F021         	movff	?___ftadd,___ftdiv@f1
  1629  0016EE  C016  F022         	movff	?___ftadd+1,___ftdiv@f1+1
  1630  0016F2  C017  F023         	movff	?___ftadd+2,___ftdiv@f1+2
  1631  0016F6  0E71               	movlw	113
  1632  0016F8  6E24               	movwf	___ftdiv@f2,c
  1633  0016FA  0E3D               	movlw	61
  1634  0016FC  6E25               	movwf	___ftdiv@f2+1,c
  1635  0016FE  0E3E               	movlw	62
  1636  001700  6E26               	movwf	___ftdiv@f2+2,c
  1637  001702  EC05  F015         	call	___ftdiv	;wreg free
  1638  001706  C021  F1CF         	movff	?___ftdiv,main@Amps
  1639  00170A  C022  F1D0         	movff	?___ftdiv+1,main@Amps+1
  1640  00170E  C023  F1D1         	movff	?___ftdiv+2,main@Amps+2
  1641                           
  1642                           ;main_014_Practice_CCP Comparacion_ADC.c: 189: _delay((unsigned long)((50)*(48000000/400
      +                          0000.0)));
  1643  001712  0EC8               	movlw	200
  1644  001714                     u3797:
  1645  001714  2EE8               	decfsz	wreg,f,c
  1646  001716  D7FE               	bra	u3797
  1647                           
  1648                           ;main_014_Practice_CCP Comparacion_ADC.c: 191: sumIns+=Amps*Amps;
  1649  001718  C1B7  F015         	movff	main@sumIns,___ftadd@f1
  1650  00171C  C1B8  F016         	movff	main@sumIns+1,___ftadd@f1+1
  1651  001720  C1B9  F017         	movff	main@sumIns+2,___ftadd@f1+2
  1652  001724  C1CF  F033         	movff	main@Amps,___ftmul@f2
  1653  001728  C1D0  F034         	movff	main@Amps+1,___ftmul@f2+1
  1654  00172C  C1D1  F035         	movff	main@Amps+2,___ftmul@f2+2
  1655  001730  C1CF  F030         	movff	main@Amps,___ftmul@f1
  1656  001734  C1D0  F031         	movff	main@Amps+1,___ftmul@f1+1
  1657  001738  C1D1  F032         	movff	main@Amps+2,___ftmul@f1+2
  1658  00173C  EC8B  F014         	call	___ftmul	;wreg free
  1659  001740  C030  F018         	movff	?___ftmul,___ftadd@f2
  1660  001744  C031  F019         	movff	?___ftmul+1,___ftadd@f2+1
  1661  001748  C032  F01A         	movff	?___ftmul+2,___ftadd@f2+2
  1662  00174C  EC5D  F010         	call	___ftadd	;wreg free
  1663  001750  C015  F1B7         	movff	?___ftadd,main@sumIns
  1664  001754  C016  F1B8         	movff	?___ftadd+1,main@sumIns+1
  1665  001758  C017  F1B9         	movff	?___ftadd+2,main@sumIns+2
  1666                           
  1667                           ;main_014_Practice_CCP Comparacion_ADC.c: 192: numCiclosMuestro+=1;
  1668  00175C  0101               	movlb	1	; () banked
  1669  00175E  4BC0               	infsnz	main@numCiclosMuestro& (0+255),f,b
  1670  001760  2BC1               	incf	(main@numCiclosMuestro+1)& (0+255),f,b
  1671  001762                     l130:
  1672                           
  1673                           ; BSR set to: 1
  1674                           
  1675                           ; BSR set to: 1
  1676  001762  51C1               	movf	(main@numCiclosMuestro+1)& (0+255),w,b
  1677  001764  E104               	bnz	l3763
  1678  001766  0EC8               	movlw	200
  1679  001768  5DC0               	subwf	main@numCiclosMuestro& (0+255),w,b
  1680  00176A  A0D8               	btfss	status,0,c
  1681  00176C  D76E               	goto	l131
  1682  00176E                     l3763:
  1683                           
  1684                           ; BSR set to: 1
  1685                           ;main_014_Practice_CCP Comparacion_ADC.c: 194: }
  1686                           ;main_014_Practice_CCP Comparacion_ADC.c: 196: float PotenciaReal2=Irms*128;
  1687  00176E  C1B1  F030         	movff	main@Irms,___ftmul@f1
  1688  001772  C1B2  F031         	movff	main@Irms+1,___ftmul@f1+1
  1689  001776  C1B3  F032         	movff	main@Irms+2,___ftmul@f1+2
  1690  00177A  0E00               	movlw	0
  1691  00177C  6E33               	movwf	___ftmul@f2,c
  1692  00177E  0E00               	movlw	0
  1693  001780  6E34               	movwf	___ftmul@f2+1,c
  1694  001782  0E43               	movlw	67
  1695  001784  6E35               	movwf	___ftmul@f2+2,c
  1696  001786  EC8B  F014         	call	___ftmul	;wreg free
  1697  00178A  C030  F1C3         	movff	?___ftmul,main@PotenciaReal2
  1698  00178E  C031  F1C4         	movff	?___ftmul+1,main@PotenciaReal2+1
  1699  001792  C032  F1C5         	movff	?___ftmul+2,main@PotenciaReal2+2
  1700                           
  1701                           ;main_014_Practice_CCP Comparacion_ADC.c: 198: sprintf(buffer2,"PReal %0.2f",PotenciaRea
      +                          l2);
  1702  001796  0EDB               	movlw	low _buffer2
  1703  001798  0100               	movlb	0	; () banked
  1704  00179A  6F6E               	movwf	sprintf@sp& (0+255),b
  1705  00179C  0E01               	movlw	high _buffer2
  1706  00179E  6F6F               	movwf	(sprintf@sp+1)& (0+255),b
  1707  0017A0  0E92               	movlw	low STR_4
  1708  0017A2  6F70               	movwf	sprintf@f& (0+255),b
  1709  0017A4  0E08               	movlw	high STR_4
  1710  0017A6  6F71               	movwf	(sprintf@f+1)& (0+255),b
  1711  0017A8  C1C3  F072         	movff	main@PotenciaReal2,?_sprintf+4
  1712  0017AC  C1C4  F073         	movff	main@PotenciaReal2+1,?_sprintf+5
  1713  0017B0  C1C5  F074         	movff	main@PotenciaReal2+2,?_sprintf+6
  1714  0017B4  EC5F  F004         	call	_sprintf	;wreg free
  1715                           
  1716                           ;main_014_Practice_CCP Comparacion_ADC.c: 199: Lcd_Out2(1, 8, buffer1);
  1717  0017B8  0E08               	movlw	8
  1718  0017BA  6E04               	movwf	Lcd_Out2@x,c
  1719  0017BC  0EA1               	movlw	low main@buffer1
  1720  0017BE  6E05               	movwf	Lcd_Out2@buffer,c
  1721  0017C0  0E01               	movlw	high main@buffer1
  1722  0017C2  6E06               	movwf	Lcd_Out2@buffer+1,c
  1723  0017C4  0E01               	movlw	1
  1724  0017C6  ECE9  F018         	call	_Lcd_Out2
  1725                           
  1726                           ;main_014_Practice_CCP Comparacion_ADC.c: 207: float potenciaAparente=0;
  1727  0017CA  0E00               	movlw	0
  1728  0017CC  0101               	movlb	1	; () banked
  1729  0017CE  6F9E               	movwf	main@potenciaAparente& (0+255),b
  1730  0017D0  0E00               	movlw	0
  1731  0017D2  6F9F               	movwf	(main@potenciaAparente+1)& (0+255),b
  1732  0017D4  0E00               	movlw	0
  1733  0017D6  6FA0               	movwf	(main@potenciaAparente+2)& (0+255),b
  1734                           
  1735                           ; BSR set to: 1
  1736                           ;main_014_Practice_CCP Comparacion_ADC.c: 208: potenciaAparente=PotenciaReal2/fppromtota
      +                          l2;
  1737  0017D8  C1C3  F021         	movff	main@PotenciaReal2,___ftdiv@f1
  1738  0017DC  C1C4  F022         	movff	main@PotenciaReal2+1,___ftdiv@f1+1
  1739  0017E0  C1C5  F023         	movff	main@PotenciaReal2+2,___ftdiv@f1+2
  1740  0017E4  C1CC  F024         	movff	main@fppromtotal2,___ftdiv@f2
  1741  0017E8  C1CD  F025         	movff	main@fppromtotal2+1,___ftdiv@f2+1
  1742  0017EC  C1CE  F026         	movff	main@fppromtotal2+2,___ftdiv@f2+2
  1743  0017F0  EC05  F015         	call	___ftdiv	;wreg free
  1744  0017F4  C021  F19E         	movff	?___ftdiv,main@potenciaAparente
  1745  0017F8  C022  F19F         	movff	?___ftdiv+1,main@potenciaAparente+1
  1746  0017FC  C023  F1A0         	movff	?___ftdiv+2,main@potenciaAparente+2
  1747  001800  D6AF               	goto	l118
  1748  001802                     __end_of_main:
  1749                           	opt stack 0
  1750                           tblptru	equ	0xFF8
  1751                           prodh	equ	0xFF4
  1752                           prodl	equ	0xFF3
  1753                           intcon	equ	0xFF2
  1754                           postinc0	equ	0xFEE
  1755                           wreg	equ	0xFE8
  1756                           postinc2	equ	0xFDE
  1757                           postdec2	equ	0xFDD
  1758                           fsr2h	equ	0xFDA
  1759                           fsr2l	equ	0xFD9
  1760                           status	equ	0xFD8
  1761                           
  1762 ;; *************** function _sprintf *****************
  1763 ;; Defined at:
  1764 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  1765 ;; Parameters:    Size  Location     Type
  1766 ;;  sp              2   14[BANK0 ] PTR unsigned char 
  1767 ;;		 -> buffer2(20), main@buffer1(16), 
  1768 ;;  f               2   16[BANK0 ] PTR const unsigned char 
  1769 ;;		 -> STR_4(12), STR_3(9), STR_2(10), STR_1(12), 
  1770 ;; Auto vars:     Size  Location     Type
  1771 ;;  tmpval          4   37[BANK0 ] struct .
  1772 ;;  val             4   33[BANK0 ] unsigned long 
  1773 ;;  fval            3   47[BANK0 ] unsigned long 
  1774 ;;  cp              3    0        PTR const unsigned char 
  1775 ;;  prec            2   50[BANK0 ] int 
  1776 ;;  flag            2   45[BANK0 ] unsigned short 
  1777 ;;  width           2   43[BANK0 ] int 
  1778 ;;  exp             2   41[BANK0 ] int 
  1779 ;;  ap              2   31[BANK0 ] PTR void [1]
  1780 ;;		 -> ?_sprintf(2), 
  1781 ;;  len             2    0        unsigned int 
  1782 ;;  c               1   52[BANK0 ] char 
  1783 ;;  d               1    0        unsigned char 
  1784 ;; Return value:  Size  Location     Type
  1785 ;;                  2   14[BANK0 ] int 
  1786 ;; Registers used:
  1787 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1788 ;; Tracked objects:
  1789 ;;		On entry : 0/0
  1790 ;;		On exit  : 0/0
  1791 ;;		Unchanged: 0/0
  1792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1793 ;;      Params:         0       8       0       0       0       0       0       0       0
  1794 ;;      Locals:         0      25       0       0       0       0       0       0       0
  1795 ;;      Temps:          0       6       0       0       0       0       0       0       0
  1796 ;;      Totals:         0      39       0       0       0       0       0       0       0
  1797 ;;Total ram usage:       39 bytes
  1798 ;; Hardware stack levels used:    1
  1799 ;; Hardware stack levels required when called:    3
  1800 ;; This function calls:
  1801 ;;		___awdiv
  1802 ;;		___ftadd
  1803 ;;		___ftge
  1804 ;;		___ftmul
  1805 ;;		___ftneg
  1806 ;;		___ftsub
  1807 ;;		___fttol
  1808 ;;		___lldiv
  1809 ;;		___llmod
  1810 ;;		___lltoft
  1811 ;;		___wmul
  1812 ;;		__div_to_l_
  1813 ;;		__tdiv_to_l_
  1814 ;;		_fround
  1815 ;;		_isdigit
  1816 ;;		_scale
  1817 ;; This function is called by:
  1818 ;;		_main
  1819 ;; This function uses a non-reentrant model
  1820 ;;
  1821                           
  1822                           	psect	text1
  1823  0008BE                     __ptext1:
  1824                           	opt stack 0
  1825  0008BE                     _sprintf:
  1826                           	opt stack 27
  1827                           
  1828                           ;doprnt.c: 494: va_list ap;
  1829                           ;doprnt.c: 499: signed char c;
  1830                           ;doprnt.c: 501: int width;
  1831                           ;doprnt.c: 504: int prec;
  1832                           ;doprnt.c: 508: unsigned short flag;
  1833                           ;doprnt.c: 515: char d;
  1834                           ;doprnt.c: 516: double fval;
  1835                           ;doprnt.c: 517: int exp;
  1836                           ;doprnt.c: 523: union {
  1837                           ;doprnt.c: 524: unsigned long vd;
  1838                           ;doprnt.c: 525: double integ;
  1839                           ;doprnt.c: 526: } tmpval;
  1840                           ;doprnt.c: 528: unsigned long val;
  1841                           ;doprnt.c: 529: unsigned len;
  1842                           ;doprnt.c: 530: const char * cp;
  1843                           ;doprnt.c: 533: *ap = __va_start();
  1844                           
  1845                           ;incstack = 0
  1846  0008BE  0E72               	movlw	low (?_sprintf+4)
  1847  0008C0  0100               	movlb	0	; () banked
  1848  0008C2  6F7F               	movwf	sprintf@ap& (0+255),b
  1849  0008C4  0E00               	movlw	high (?_sprintf+4)
  1850  0008C6  6F80               	movwf	(sprintf@ap+1)& (0+255),b
  1851                           
  1852                           ;doprnt.c: 536: while(c = *f++) {
  1853  0008C8  EF8F  F009         	goto	u3660
  1854  0008CC                     
  1855                           ; BSR set to: 0
  1856                           ;doprnt.c: 538: if(c != '%')
  1857                           
  1858                           ; BSR set to: 0
  1859  0008CC  0E25               	movlw	37
  1860  0008CE  1994               	xorwf	sprintf@c& (0+255),w,b
  1861  0008D0  B4D8               	btfsc	status,2,c
  1862  0008D2  D00A               	goto	l172
  1863                           
  1864                           ; BSR set to: 0
  1865                           ;doprnt.c: 540: {
  1866                           ;doprnt.c: 541: ((*sp++ = (c)));
  1867  0008D4  C06E  FFD9         	movff	sprintf@sp,fsr2l
  1868  0008D8  C06F  FFDA         	movff	sprintf@sp+1,fsr2h
  1869  0008DC  C094  FFDF         	movff	sprintf@c,indf2
  1870                           
  1871                           ; BSR set to: 0
  1872  0008E0  4B6E               	infsnz	sprintf@sp& (0+255),f,b
  1873  0008E2  2B6F               	incf	(sprintf@sp+1)& (0+255),f,b
  1874                           
  1875                           ;doprnt.c: 542: continue;
  1876  0008E4  EF8F  F009         	goto	u3660
  1877  0008E8                     l172:
  1878                           
  1879                           ; BSR set to: 0
  1880                           ;doprnt.c: 543: }
  1881                           ;doprnt.c: 546: width = 0;
  1882                           
  1883                           ; BSR set to: 0
  1884  0008E8  0E00               	movlw	0
  1885  0008EA  6F8C               	movwf	(sprintf@width+1)& (0+255),b
  1886  0008EC  0E00               	movlw	0
  1887  0008EE  6F8B               	movwf	sprintf@width& (0+255),b
  1888                           
  1889                           ;doprnt.c: 548: flag = 0;
  1890  0008F0  0E00               	movlw	0
  1891  0008F2  6F8E               	movwf	(sprintf@flag+1)& (0+255),b
  1892  0008F4  0E00               	movlw	0
  1893  0008F6  6F8D               	movwf	sprintf@flag& (0+255),b
  1894                           
  1895                           ; BSR set to: 0
  1896                           ;doprnt.c: 551: switch(*f) {
  1897                           
  1898                           ;doprnt.c: 550: for(;;) {
  1899  0008F8  D004               	goto	l174
  1900  0008FA                     
  1901                           ;doprnt.c: 580: flag |= 0x04;
  1902                           
  1903                           ; BSR set to: 0
  1904  0008FA  0100               	movlb	0	; () banked
  1905  0008FC  858D               	bsf	sprintf@flag& (0+255),2,b
  1906                           
  1907                           ;doprnt.c: 581: f++;
  1908  0008FE  4B70               	infsnz	sprintf@f& (0+255),f,b
  1909  000900  2B71               	incf	(sprintf@f+1)& (0+255),f,b
  1910  000902                     l174:
  1911                           
  1912                           ; BSR set to: 0
  1913  000902  C070  FFF6         	movff	sprintf@f,tblptrl
  1914  000906  C071  FFF7         	movff	sprintf@f+1,tblptrh
  1915  00090A                     	if	0	;tblptru may be non-zero
  1916  00090A                     	endif
  1917  00090A                     	if	0	;tblptru may be non-zero
  1918  00090A                     	endif
  1919  00090A  0008               	tblrd		*
  1920  00090C  50F5               	movf	tablat,w,c
  1921                           
  1922                           ; Switch size 1, requested type "space"
  1923                           ; Number of cases is 1, Range of values is 48 to 48
  1924                           ; switch strategies available:
  1925                           ; Name         Instructions Cycles
  1926                           ; simple_byte            4     3 (average)
  1927                           ;	Chosen strategy is simple_byte
  1928  00090E  0A30               	xorlw	48	; case 48
  1929  000910  B4D8               	btfsc	status,2,c
  1930  000912  D7F3               	goto	l175
  1931                           
  1932                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1933                           
  1934                           ;doprnt.c: 586: }
  1935                           
  1936                           ;doprnt.c: 585: break;
  1937  000914  C070  FFF6         	movff	sprintf@f,tblptrl
  1938  000918  C071  FFF7         	movff	sprintf@f+1,tblptrh
  1939  00091C                     	if	0	;tblptru may be non-zero
  1940  00091C                     	endif
  1941  00091C                     	if	0	;tblptru may be non-zero
  1942  00091C                     	endif
  1943  00091C  0008               	tblrd		*
  1944  00091E  50F5               	movf	tablat,w,c
  1945  000920  ECB1  F019         	call	_isdigit
  1946  000924  A0D8               	btfss	status,0,c
  1947  000926  D034               	goto	u3130
  1948                           
  1949                           ;doprnt.c: 598: width = 0;
  1950  000928  0E00               	movlw	0
  1951  00092A  0100               	movlb	0	; () banked
  1952  00092C  6F8C               	movwf	(sprintf@width+1)& (0+255),b
  1953  00092E  0E00               	movlw	0
  1954  000930  6F8B               	movwf	sprintf@width& (0+255),b
  1955  000932                     
  1956                           ;doprnt.c: 600: width *= 10;
  1957                           
  1958                           ; BSR set to: 0
  1959  000932  C08B  F00F         	movff	sprintf@width,___wmul@multiplier
  1960  000936  C08C  F010         	movff	sprintf@width+1,___wmul@multiplier+1
  1961  00093A  0E00               	movlw	0
  1962  00093C  6E12               	movwf	___wmul@multiplicand+1,c
  1963  00093E  0E0A               	movlw	10
  1964  000940  6E11               	movwf	___wmul@multiplicand,c
  1965  000942  EC69  F019         	call	___wmul	;wreg free
  1966  000946  C00F  F08B         	movff	?___wmul,sprintf@width
  1967  00094A  C010  F08C         	movff	?___wmul+1,sprintf@width+1
  1968                           
  1969                           ;doprnt.c: 601: width += *f++ - '0';
  1970  00094E  0ED0               	movlw	208
  1971  000950  0100               	movlb	0	; () banked
  1972  000952  6F76               	movwf	??_sprintf& (0+255),b
  1973  000954  0EFF               	movlw	255
  1974  000956  6F77               	movwf	(??_sprintf+1)& (0+255),b
  1975  000958  C070  FFF6         	movff	sprintf@f,tblptrl
  1976  00095C  C071  FFF7         	movff	sprintf@f+1,tblptrh
  1977  000960                     	if	0	;tblptru may be non-zero
  1978  000960                     	endif
  1979  000960                     	if	0	;tblptru may be non-zero
  1980  000960                     	endif
  1981  000960  0008               	tblrd		*
  1982  000962  50F5               	movf	tablat,w,c
  1983  000964  6F78               	movwf	(??_sprintf+2)& (0+255),b
  1984  000966  6B79               	clrf	(??_sprintf+3)& (0+255),b
  1985  000968  5176               	movf	??_sprintf& (0+255),w,b
  1986  00096A  2778               	addwf	(??_sprintf+2)& (0+255),f,b
  1987  00096C  5177               	movf	(??_sprintf+1)& (0+255),w,b
  1988  00096E  2379               	addwfc	(??_sprintf+3)& (0+255),f,b
  1989  000970  5178               	movf	(??_sprintf+2)& (0+255),w,b
  1990  000972  278B               	addwf	sprintf@width& (0+255),f,b
  1991  000974  5179               	movf	(??_sprintf+3)& (0+255),w,b
  1992  000976  238C               	addwfc	(sprintf@width+1)& (0+255),f,b
  1993                           
  1994                           ; BSR set to: 0
  1995  000978  4B70               	infsnz	sprintf@f& (0+255),f,b
  1996  00097A  2B71               	incf	(sprintf@f+1)& (0+255),f,b
  1997                           
  1998                           ; BSR set to: 0
  1999                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2000  00097C  C070  FFF6         	movff	sprintf@f,tblptrl
  2001  000980  C071  FFF7         	movff	sprintf@f+1,tblptrh
  2002  000984                     	if	0	;tblptru may be non-zero
  2003  000984                     	endif
  2004  000984                     	if	0	;tblptru may be non-zero
  2005  000984                     	endif
  2006  000984  0008               	tblrd		*
  2007  000986  50F5               	movf	tablat,w,c
  2008  000988  ECB1  F019         	call	_isdigit
  2009  00098C  B0D8               	btfsc	status,0,c
  2010  00098E  D7D1               	goto	l180
  2011  000990                     u3130:
  2012                           
  2013                           ;doprnt.c: 608: }
  2014                           ;doprnt.c: 611: if(*f == '.') {
  2015  000990  C070  FFF6         	movff	sprintf@f,tblptrl
  2016  000994  C071  FFF7         	movff	sprintf@f+1,tblptrh
  2017  000998                     	if	0	;tblptru may be non-zero
  2018  000998                     	endif
  2019  000998                     	if	0	;tblptru may be non-zero
  2020  000998                     	endif
  2021  000998  0008               	tblrd		*
  2022  00099A  50F5               	movf	tablat,w,c
  2023  00099C  0A2E               	xorlw	46
  2024  00099E  A4D8               	btfss	status,2,c
  2025  0009A0  D030               	goto	l182
  2026                           
  2027                           ;doprnt.c: 612: flag |= 0x4000;
  2028  0009A2  0100               	movlb	0	; () banked
  2029  0009A4  8D8E               	bsf	(sprintf@flag+1)& (0+255),6,b
  2030                           
  2031                           ;doprnt.c: 613: f++;
  2032  0009A6  4B70               	infsnz	sprintf@f& (0+255),f,b
  2033  0009A8  2B71               	incf	(sprintf@f+1)& (0+255),f,b
  2034                           
  2035                           ; BSR set to: 0
  2036                           ;doprnt.c: 620: {
  2037                           ;doprnt.c: 621: prec = 0;
  2038  0009AA  0E00               	movlw	0
  2039  0009AC  6F93               	movwf	(sprintf@prec+1)& (0+255),b
  2040  0009AE  0E00               	movlw	0
  2041  0009B0  6F92               	movwf	sprintf@prec& (0+255),b
  2042                           
  2043                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  2044  0009B2  D01C               	goto	l183
  2045  0009B4                     
  2046                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  2047                           
  2048                           ; BSR set to: 0
  2049  0009B4  C092  F00F         	movff	sprintf@prec,___wmul@multiplier
  2050  0009B8  C093  F010         	movff	sprintf@prec+1,___wmul@multiplier+1
  2051  0009BC  0E00               	movlw	0
  2052  0009BE  6E12               	movwf	___wmul@multiplicand+1,c
  2053  0009C0  0E0A               	movlw	10
  2054  0009C2  6E11               	movwf	___wmul@multiplicand,c
  2055  0009C4  EC69  F019         	call	___wmul	;wreg free
  2056  0009C8  C070  FFF6         	movff	sprintf@f,tblptrl
  2057  0009CC  C071  FFF7         	movff	sprintf@f+1,tblptrh
  2058  0009D0                     	if	0	;tblptru may be non-zero
  2059  0009D0                     	endif
  2060  0009D0                     	if	0	;tblptru may be non-zero
  2061  0009D0                     	endif
  2062  0009D0  0008               	tblrd		*
  2063  0009D2  50F5               	movf	tablat,w,c
  2064  0009D4  260F               	addwf	?___wmul,f,c
  2065  0009D6  0E00               	movlw	0
  2066  0009D8  2210               	addwfc	?___wmul+1,f,c
  2067  0009DA  0ED0               	movlw	208
  2068  0009DC  240F               	addwf	?___wmul,w,c
  2069  0009DE  0100               	movlb	0	; () banked
  2070  0009E0  6F92               	movwf	sprintf@prec& (0+255),b
  2071  0009E2  0EFF               	movlw	255
  2072  0009E4  2010               	addwfc	?___wmul+1,w,c
  2073  0009E6  6F93               	movwf	(sprintf@prec+1)& (0+255),b
  2074                           
  2075                           ; BSR set to: 0
  2076  0009E8  4B70               	infsnz	sprintf@f& (0+255),f,b
  2077  0009EA  2B71               	incf	(sprintf@f+1)& (0+255),f,b
  2078  0009EC                     l183:
  2079                           
  2080                           ; BSR set to: 0
  2081                           
  2082                           ; BSR set to: 0
  2083  0009EC  C070  FFF6         	movff	sprintf@f,tblptrl
  2084  0009F0  C071  FFF7         	movff	sprintf@f+1,tblptrh
  2085  0009F4                     	if	0	;tblptru may be non-zero
  2086  0009F4                     	endif
  2087  0009F4                     	if	0	;tblptru may be non-zero
  2088  0009F4                     	endif
  2089  0009F4  0008               	tblrd		*
  2090  0009F6  50F5               	movf	tablat,w,c
  2091  0009F8  ECB1  F019         	call	_isdigit
  2092  0009FC  A0D8               	btfss	status,0,c
  2093  0009FE  D00F               	goto	l188
  2094  000A00  D7D9               	goto	l184
  2095  000A02                     l182:
  2096                           
  2097                           ;doprnt.c: 626: prec = 0;
  2098  000A02  0E00               	movlw	0
  2099  000A04  0100               	movlb	0	; () banked
  2100  000A06  6F93               	movwf	(sprintf@prec+1)& (0+255),b
  2101  000A08  0E00               	movlw	0
  2102  000A0A  6F92               	movwf	sprintf@prec& (0+255),b
  2103                           
  2104                           ; BSR set to: 0
  2105                           ;doprnt.c: 628: flag |= 0x1000;
  2106  000A0C  898E               	bsf	(sprintf@flag+1)& (0+255),4,b
  2107                           
  2108                           ; BSR set to: 0
  2109                           ;doprnt.c: 635: switch(c = *f++) {
  2110                           
  2111                           ;doprnt.c: 630: }
  2112                           ;doprnt.c: 633: loop:
  2113                           
  2114                           ; BSR set to: 0
  2115  000A0E  D007               	goto	l188
  2116  000A10                     
  2117                           ; BSR set to: 0
  2118                           ;doprnt.c: 643: flag |= 0x10;
  2119                           
  2120                           ; BSR set to: 0
  2121  000A10  898D               	bsf	sprintf@flag& (0+255),4,b
  2122                           
  2123                           ;doprnt.c: 644: goto loop;
  2124  000A12  D005               	goto	l188
  2125  000A14                     
  2126                           ; BSR set to: 0
  2127                           ;doprnt.c: 663: flag |= 0x400;
  2128                           
  2129                           ; BSR set to: 0
  2130  000A14  858E               	bsf	(sprintf@flag+1)& (0+255),2,b
  2131                           
  2132                           ;doprnt.c: 664: break;
  2133  000A16  D01D               	goto	l193
  2134  000A18                     
  2135                           ; BSR set to: 0
  2136                           ;doprnt.c: 818: flag |= 0xC0;
  2137                           
  2138                           ; BSR set to: 0
  2139  000A18  0EC0               	movlw	192
  2140  000A1A  138D               	iorwf	sprintf@flag& (0+255),f,b
  2141                           
  2142                           ; BSR set to: 0
  2143                           ;doprnt.c: 822: }
  2144                           
  2145                           ;doprnt.c: 819: break;
  2146  000A1C  D01A               	goto	l193
  2147  000A1E                     l188:
  2148                           
  2149                           ; BSR set to: 0
  2150  000A1E  C070  FFF6         	movff	sprintf@f,tblptrl
  2151  000A22  C071  FFF7         	movff	sprintf@f+1,tblptrh
  2152  000A26  0100               	movlb	0	; () banked
  2153  000A28  4B70               	infsnz	sprintf@f& (0+255),f,b
  2154  000A2A  2B71               	incf	(sprintf@f+1)& (0+255),f,b
  2155  000A2C                     	if	0	;tblptru may be non-zero
  2156  000A2C                     	endif
  2157  000A2C                     	if	0	;tblptru may be non-zero
  2158  000A2C                     	endif
  2159  000A2C  0008               	tblrd		*
  2160  000A2E  CFF5 F094          	movff	tablat,sprintf@c
  2161  000A32  5194               	movf	sprintf@c& (0+255),w,b
  2162                           
  2163                           ; Switch size 1, requested type "space"
  2164                           ; Number of cases is 4, Range of values is 0 to 117
  2165                           ; switch strategies available:
  2166                           ; Name         Instructions Cycles
  2167                           ; simple_byte           13     7 (average)
  2168                           ;	Chosen strategy is simple_byte
  2169  000A34  0A00               	xorlw	0	; case 0
  2170  000A36  B4D8               	btfsc	status,2,c
  2171  000A38  EF9C  F009         	goto	u3670
  2172  000A3C  0A66               	xorlw	102	; case 102
  2173  000A3E  B4D8               	btfsc	status,2,c
  2174  000A40  D7E9               	goto	l192
  2175  000A42  0A0A               	xorlw	10	; case 108
  2176  000A44  B4D8               	btfsc	status,2,c
  2177  000A46  D7E4               	goto	l191
  2178  000A48  0A19               	xorlw	25	; case 117
  2179  000A4A  B4D8               	btfsc	status,2,c
  2180  000A4C  D7E5               	goto	l195
  2181  000A4E  EF8F  F009         	goto	u3660
  2182  000A52                     l193:
  2183                           
  2184                           ; BSR set to: 0
  2185                           ;doprnt.c: 825: if(flag & (0x700)) {
  2186                           
  2187                           ; BSR set to: 0
  2188  000A52  0E07               	movlw	7
  2189  000A54  158E               	andwf	(sprintf@flag+1)& (0+255),w,b
  2190  000A56  B4D8               	btfsc	status,2,c
  2191  000A58  D328               	goto	l196
  2192                           
  2193                           ; BSR set to: 0
  2194                           ;doprnt.c: 827: if(flag & 0x1000)
  2195  000A5A  A98E               	btfss	(sprintf@flag+1)& (0+255),4,b
  2196  000A5C  D004               	goto	l197
  2197                           
  2198                           ; BSR set to: 0
  2199                           ;doprnt.c: 829: prec = 6;
  2200  000A5E  0E00               	movlw	0
  2201  000A60  6F93               	movwf	(sprintf@prec+1)& (0+255),b
  2202  000A62  0E06               	movlw	6
  2203  000A64  6F92               	movwf	sprintf@prec& (0+255),b
  2204  000A66                     l197:
  2205                           
  2206                           ; BSR set to: 0
  2207                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  2208                           
  2209                           ; BSR set to: 0
  2210  000A66  C07F  FFD9         	movff	sprintf@ap,fsr2l
  2211  000A6A  C080  FFDA         	movff	sprintf@ap+1,fsr2h
  2212  000A6E  CFDE F08F          	movff	postinc2,sprintf@fval
  2213  000A72  CFDE F090          	movff	postinc2,sprintf@fval+1
  2214  000A76  CFDD F091          	movff	postdec2,sprintf@fval+2
  2215                           
  2216                           ; BSR set to: 0
  2217  000A7A  0E03               	movlw	3
  2218  000A7C  277F               	addwf	sprintf@ap& (0+255),f,b
  2219  000A7E  0E00               	movlw	0
  2220  000A80  2380               	addwfc	(sprintf@ap+1)& (0+255),f,b
  2221                           
  2222                           ; BSR set to: 0
  2223                           ;doprnt.c: 831: if(fval < 0.0) {
  2224  000A82  AF91               	btfss	(sprintf@fval+2)& (0+255),7,b
  2225  000A84  D011               	goto	l198
  2226                           
  2227                           ; BSR set to: 0
  2228                           ;doprnt.c: 832: fval = -fval;
  2229  000A86  C08F  F001         	movff	sprintf@fval,___ftneg@f1
  2230  000A8A  C090  F002         	movff	sprintf@fval+1,___ftneg@f1+1
  2231  000A8E  C091  F003         	movff	sprintf@fval+2,___ftneg@f1+2
  2232  000A92  EC7C  F019         	call	___ftneg	;wreg free
  2233  000A96  C001  F08F         	movff	?___ftneg,sprintf@fval
  2234  000A9A  C002  F090         	movff	?___ftneg+1,sprintf@fval+1
  2235  000A9E  C003  F091         	movff	?___ftneg+2,sprintf@fval+2
  2236                           
  2237                           ;doprnt.c: 833: flag |= 0x03;
  2238  000AA2  0E03               	movlw	3
  2239  000AA4  0100               	movlb	0	; () banked
  2240  000AA6  138D               	iorwf	sprintf@flag& (0+255),f,b
  2241  000AA8                     l198:
  2242                           
  2243                           ; BSR set to: 0
  2244                           ;doprnt.c: 834: }
  2245                           ;doprnt.c: 835: exp = 0;
  2246                           
  2247                           ; BSR set to: 0
  2248  000AA8  0E00               	movlw	0
  2249  000AAA  6F8A               	movwf	(sprintf@exp+1)& (0+255),b
  2250  000AAC  0E00               	movlw	0
  2251  000AAE  6F89               	movwf	sprintf@exp& (0+255),b
  2252                           
  2253                           ; BSR set to: 0
  2254                           ;doprnt.c: 836: if( fval!=0) {
  2255  000AB0  518F               	movf	sprintf@fval& (0+255),w,b
  2256  000AB2  1190               	iorwf	(sprintf@fval+1)& (0+255),w,b
  2257  000AB4  1191               	iorwf	(sprintf@fval+2)& (0+255),w,b
  2258  000AB6  B4D8               	btfsc	status,2,c
  2259  000AB8  D086               	goto	l203
  2260                           
  2261                           ; BSR set to: 0
  2262                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  2263  000ABA  0E82               	movlw	130
  2264  000ABC  6F76               	movwf	??_sprintf& (0+255),b
  2265  000ABE  0EFF               	movlw	255
  2266  000AC0  6F77               	movwf	(??_sprintf+1)& (0+255),b
  2267  000AC2  C08F  F078         	movff	sprintf@fval,??_sprintf+2
  2268  000AC6  C090  F079         	movff	sprintf@fval+1,??_sprintf+3
  2269  000ACA  C091  F07A         	movff	sprintf@fval+2,??_sprintf+4
  2270  000ACE  C092  F07B         	movff	sprintf@fval+3,??_sprintf+5
  2271  000AD2  0E10               	movlw	16
  2272  000AD4  D005               	goto	u3200
  2273  000AD6                     u3205:
  2274  000AD6  90D8               	bcf	status,0,c
  2275  000AD8  337B               	rrcf	(??_sprintf+5)& (0+255),f,b
  2276  000ADA  337A               	rrcf	(??_sprintf+4)& (0+255),f,b
  2277  000ADC  3379               	rrcf	(??_sprintf+3)& (0+255),f,b
  2278  000ADE  3378               	rrcf	(??_sprintf+2)& (0+255),f,b
  2279  000AE0                     u3200:
  2280  000AE0  2EE8               	decfsz	wreg,f,c
  2281  000AE2  D7F9               	goto	u3205
  2282  000AE4  5178               	movf	(??_sprintf+2)& (0+255),w,b
  2283  000AE6  2576               	addwf	??_sprintf& (0+255),w,b
  2284  000AE8  6F89               	movwf	sprintf@exp& (0+255),b
  2285  000AEA  0E00               	movlw	0
  2286  000AEC  2177               	addwfc	(??_sprintf+1)& (0+255),w,b
  2287  000AEE  6F8A               	movwf	(sprintf@exp+1)& (0+255),b
  2288                           
  2289                           ; BSR set to: 0
  2290                           ;doprnt.c: 838: exp--;
  2291  000AF0  0789               	decf	sprintf@exp& (0+255),f,b
  2292  000AF2  A0D8               	btfss	status,0,c
  2293  000AF4  078A               	decf	(sprintf@exp+1)& (0+255),f,b
  2294                           
  2295                           ; BSR set to: 0
  2296                           ;doprnt.c: 839: exp *= 3;
  2297  000AF6  C089  F00F         	movff	sprintf@exp,___wmul@multiplier
  2298  000AFA  C08A  F010         	movff	sprintf@exp+1,___wmul@multiplier+1
  2299  000AFE  0E00               	movlw	0
  2300  000B00  6E12               	movwf	___wmul@multiplicand+1,c
  2301  000B02  0E03               	movlw	3
  2302  000B04  6E11               	movwf	___wmul@multiplicand,c
  2303  000B06  EC69  F019         	call	___wmul	;wreg free
  2304  000B0A  C00F  F089         	movff	?___wmul,sprintf@exp
  2305  000B0E  C010  F08A         	movff	?___wmul+1,sprintf@exp+1
  2306                           
  2307                           ;doprnt.c: 840: exp /= 10;
  2308  000B12  C089  F007         	movff	sprintf@exp,___awdiv@dividend
  2309  000B16  C08A  F008         	movff	sprintf@exp+1,___awdiv@dividend+1
  2310  000B1A  0E00               	movlw	0
  2311  000B1C  6E0A               	movwf	___awdiv@divisor+1,c
  2312  000B1E  0E0A               	movlw	10
  2313  000B20  6E09               	movwf	___awdiv@divisor,c
  2314  000B22  EC46  F017         	call	___awdiv	;wreg free
  2315  000B26  C007  F089         	movff	?___awdiv,sprintf@exp
  2316  000B2A  C008  F08A         	movff	?___awdiv+1,sprintf@exp+1
  2317                           
  2318                           ;doprnt.c: 841: if(exp < 0)
  2319  000B2E  0100               	movlb	0	; () banked
  2320  000B30  AF8A               	btfss	(sprintf@exp+1)& (0+255),7,b
  2321  000B32  D003               	goto	l200
  2322                           
  2323                           ; BSR set to: 0
  2324                           ;doprnt.c: 842: exp--;
  2325  000B34  0789               	decf	sprintf@exp& (0+255),f,b
  2326  000B36  A0D8               	btfss	status,0,c
  2327  000B38  078A               	decf	(sprintf@exp+1)& (0+255),f,b
  2328  000B3A                     l200:
  2329                           
  2330                           ; BSR set to: 0
  2331                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  2332                           
  2333                           ; BSR set to: 0
  2334  000B3A  5189               	movf	sprintf@exp& (0+255),w,b
  2335  000B3C  0800               	sublw	0
  2336  000B3E  EC01  F00C         	call	_scale
  2337  000B42  C03F  F085         	movff	?_scale,sprintf@tmpval
  2338  000B46  C040  F086         	movff	?_scale+1,sprintf@tmpval+1
  2339  000B4A  C041  F087         	movff	?_scale+2,sprintf@tmpval+2
  2340                           
  2341                           ;doprnt.c: 847: tmpval.integ *= fval;
  2342  000B4E  C085  F030         	movff	sprintf@tmpval,___ftmul@f1
  2343  000B52  C086  F031         	movff	sprintf@tmpval+1,___ftmul@f1+1
  2344  000B56  C087  F032         	movff	sprintf@tmpval+2,___ftmul@f1+2
  2345  000B5A  C08F  F033         	movff	sprintf@fval,___ftmul@f2
  2346  000B5E  C090  F034         	movff	sprintf@fval+1,___ftmul@f2+1
  2347  000B62  C091  F035         	movff	sprintf@fval+2,___ftmul@f2+2
  2348  000B66  EC8B  F014         	call	___ftmul	;wreg free
  2349  000B6A  C030  F085         	movff	?___ftmul,sprintf@tmpval
  2350  000B6E  C031  F086         	movff	?___ftmul+1,sprintf@tmpval+1
  2351  000B72  C032  F087         	movff	?___ftmul+2,sprintf@tmpval+2
  2352                           
  2353                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  2354  000B76  C085  F001         	movff	sprintf@tmpval,___ftge@ff1
  2355  000B7A  C086  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2356  000B7E  C087  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2357  000B82  0E00               	movlw	0
  2358  000B84  6E04               	movwf	___ftge@ff2,c
  2359  000B86  0E80               	movlw	128
  2360  000B88  6E05               	movwf	___ftge@ff2+1,c
  2361  000B8A  0E3F               	movlw	63
  2362  000B8C  6E06               	movwf	___ftge@ff2+2,c
  2363  000B8E  ECFE  F016         	call	___ftge	;wreg free
  2364  000B92  B0D8               	btfsc	status,0,c
  2365  000B94  D005               	goto	l201
  2366                           
  2367                           ;doprnt.c: 849: exp--;
  2368  000B96  0100               	movlb	0	; () banked
  2369  000B98  0789               	decf	sprintf@exp& (0+255),f,b
  2370  000B9A  A0D8               	btfss	status,0,c
  2371  000B9C  078A               	decf	(sprintf@exp+1)& (0+255),f,b
  2372  000B9E  D013               	goto	l203
  2373  000BA0                     l201:
  2374                           
  2375                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  2376                           
  2377                           ; BSR set to: 0
  2378  000BA0  C085  F001         	movff	sprintf@tmpval,___ftge@ff1
  2379  000BA4  C086  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2380  000BA8  C087  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2381  000BAC  0E00               	movlw	0
  2382  000BAE  6E04               	movwf	___ftge@ff2,c
  2383  000BB0  0E20               	movlw	32
  2384  000BB2  6E05               	movwf	___ftge@ff2+1,c
  2385  000BB4  0E41               	movlw	65
  2386  000BB6  6E06               	movwf	___ftge@ff2+2,c
  2387  000BB8  ECFE  F016         	call	___ftge	;wreg free
  2388  000BBC  A0D8               	btfss	status,0,c
  2389  000BBE  D003               	goto	l203
  2390                           
  2391                           ;doprnt.c: 851: exp++;
  2392  000BC0  0100               	movlb	0	; () banked
  2393  000BC2  4B89               	infsnz	sprintf@exp& (0+255),f,b
  2394  000BC4  2B8A               	incf	(sprintf@exp+1)& (0+255),f,b
  2395  000BC6                     l203:
  2396                           
  2397                           ;doprnt.c: 852: }
  2398                           ;doprnt.c: 1112: if(prec <= 12)
  2399                           
  2400                           ; BSR set to: 0
  2401                           
  2402                           ; BSR set to: 0
  2403                           
  2404                           ; BSR set to: 0
  2405  000BC6  0100               	movlb	0	; () banked
  2406  000BC8  BF93               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2407  000BCA  D006               	goto	u3240
  2408  000BCC  5193               	movf	(sprintf@prec+1)& (0+255),w,b
  2409  000BCE  E11B               	bnz	l3387
  2410  000BD0  0E0D               	movlw	13
  2411  000BD2  5D92               	subwf	sprintf@prec& (0+255),w,b
  2412  000BD4  B0D8               	btfsc	status,0,c
  2413  000BD6  D017               	goto	l204
  2414  000BD8                     u3240:
  2415                           
  2416                           ; BSR set to: 0
  2417                           ;doprnt.c: 1113: fval += fround(prec);
  2418  000BD8  C08F  F015         	movff	sprintf@fval,___ftadd@f1
  2419  000BDC  C090  F016         	movff	sprintf@fval+1,___ftadd@f1+1
  2420  000BE0  C091  F017         	movff	sprintf@fval+2,___ftadd@f1+2
  2421  000BE4  5192               	movf	sprintf@prec& (0+255),w,b
  2422  000BE6  EC34  F00F         	call	_fround
  2423  000BEA  C03F  F018         	movff	?_fround,___ftadd@f2
  2424  000BEE  C040  F019         	movff	?_fround+1,___ftadd@f2+1
  2425  000BF2  C041  F01A         	movff	?_fround+2,___ftadd@f2+2
  2426  000BF6  EC5D  F010         	call	___ftadd	;wreg free
  2427  000BFA  C015  F08F         	movff	?___ftadd,sprintf@fval
  2428  000BFE  C016  F090         	movff	?___ftadd+1,sprintf@fval+1
  2429  000C02  C017  F091         	movff	?___ftadd+2,sprintf@fval+2
  2430  000C06                     l204:
  2431  000C06                     l3387:
  2432                           
  2433                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2434  000C06  0100               	movlb	0	; () banked
  2435  000C08  BF8A               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2436  000C0A  D006               	goto	u3250
  2437  000C0C  518A               	movf	(sprintf@exp+1)& (0+255),w,b
  2438  000C0E  E120               	bnz	l3395
  2439  000C10  0E0A               	movlw	10
  2440  000C12  5D89               	subwf	sprintf@exp& (0+255),w,b
  2441  000C14  B0D8               	btfsc	status,0,c
  2442  000C16  D01C               	goto	u3280
  2443  000C18                     u3250:
  2444                           
  2445                           ; BSR set to: 0
  2446  000C18  518F               	movf	sprintf@fval& (0+255),w,b
  2447  000C1A  1190               	iorwf	(sprintf@fval+1)& (0+255),w,b
  2448  000C1C  1191               	iorwf	(sprintf@fval+2)& (0+255),w,b
  2449  000C1E  B4D8               	btfsc	status,2,c
  2450  000C20  D056               	goto	l205
  2451                           
  2452                           ; BSR set to: 0
  2453  000C22  C08F  F046         	movff	sprintf@fval,___fttol@f1
  2454  000C26  C090  F047         	movff	sprintf@fval+1,___fttol@f1+1
  2455  000C2A  C091  F048         	movff	sprintf@fval+2,___fttol@f1+2
  2456  000C2E  EC11  F014         	call	___fttol	;wreg free
  2457  000C32  5046               	movf	?___fttol,w,c
  2458  000C34  1047               	iorwf	?___fttol+1,w,c
  2459  000C36  1048               	iorwf	?___fttol+2,w,c
  2460  000C38  1049               	iorwf	?___fttol+3,w,c
  2461  000C3A  A4D8               	btfss	status,2,c
  2462  000C3C  D048               	goto	l205
  2463  000C3E  0100               	movlb	0	; () banked
  2464  000C40  BF8A               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2465  000C42  D045               	goto	l205
  2466  000C44  518A               	movf	(sprintf@exp+1)& (0+255),w,b
  2467  000C46  E104               	bnz	l3395
  2468  000C48  0E02               	movlw	2
  2469  000C4A  5D89               	subwf	sprintf@exp& (0+255),w,b
  2470  000C4C  A0D8               	btfss	status,0,c
  2471  000C4E  D03F               	goto	l205
  2472  000C50                     u3280:
  2473  000C50                     l3395:
  2474                           
  2475                           ; BSR set to: 0
  2476                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2477  000C50  C085  F001         	movff	sprintf@tmpval,___ftge@ff1
  2478  000C54  C086  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2479  000C58  C087  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2480  000C5C  0E70               	movlw	112
  2481  000C5E  6E04               	movwf	___ftge@ff2,c
  2482  000C60  0E89               	movlw	137
  2483  000C62  6E05               	movwf	___ftge@ff2+1,c
  2484  000C64  0E40               	movlw	64
  2485  000C66  6E06               	movwf	___ftge@ff2+2,c
  2486  000C68  ECFE  F016         	call	___ftge	;wreg free
  2487  000C6C  B0D8               	btfsc	status,0,c
  2488  000C6E  D003               	goto	l208
  2489                           
  2490                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2491  000C70  0100               	movlb	0	; () banked
  2492  000C72  0EF7               	movlw	247
  2493  000C74  D002               	goto	L1
  2494  000C76                     l208:
  2495                           
  2496                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2497                           
  2498                           ; BSR set to: 0
  2499  000C76  0100               	movlb	0	; () banked
  2500  000C78  0EF8               	movlw	248
  2501  000C7A                     L1:
  2502  000C7A  2789               	addwf	sprintf@exp& (0+255),f,b
  2503  000C7C  0EFF               	movlw	255
  2504  000C7E  238A               	addwfc	(sprintf@exp+1)& (0+255),f,b
  2505                           
  2506                           ; BSR set to: 0
  2507                           ;doprnt.c: 1124: }
  2508                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  2509                           
  2510                           ; BSR set to: 0
  2511  000C80  5189               	movf	sprintf@exp& (0+255),w,b
  2512  000C82  EC01  F00C         	call	_scale
  2513  000C86  C03F  F085         	movff	?_scale,sprintf@tmpval
  2514  000C8A  C040  F086         	movff	?_scale+1,sprintf@tmpval+1
  2515  000C8E  C041  F087         	movff	?_scale+2,sprintf@tmpval+2
  2516                           
  2517                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2518  000C92  C08F  F001         	movff	sprintf@fval,__tdiv_to_l_@f1
  2519  000C96  C090  F002         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  2520  000C9A  C091  F003         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  2521  000C9E  C085  F004         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  2522  000CA2  C086  F005         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  2523  000CA6  C087  F006         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  2524  000CAA  EC33  F011         	call	__tdiv_to_l_	;wreg free
  2525  000CAE  C001  F081         	movff	?__tdiv_to_l_,sprintf@val
  2526  000CB2  C002  F082         	movff	?__tdiv_to_l_+1,sprintf@val+1
  2527  000CB6  C003  F083         	movff	?__tdiv_to_l_+2,sprintf@val+2
  2528  000CBA  C004  F084         	movff	?__tdiv_to_l_+3,sprintf@val+3
  2529                           
  2530                           ;doprnt.c: 1129: fval = 0.0;
  2531  000CBE  0E00               	movlw	0
  2532  000CC0  0100               	movlb	0	; () banked
  2533  000CC2  6F8F               	movwf	sprintf@fval& (0+255),b
  2534  000CC4  0E00               	movlw	0
  2535  000CC6  6F90               	movwf	(sprintf@fval+1)& (0+255),b
  2536  000CC8  0E00               	movlw	0
  2537  000CCA  6F91               	movwf	(sprintf@fval+2)& (0+255),b
  2538                           
  2539                           ;doprnt.c: 1130: } else {
  2540  000CCC  D033               	goto	l214
  2541  000CCE                     l205:
  2542                           
  2543                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2544                           
  2545                           ; BSR set to: 0
  2546  000CCE  C08F  F046         	movff	sprintf@fval,___fttol@f1
  2547  000CD2  C090  F047         	movff	sprintf@fval+1,___fttol@f1+1
  2548  000CD6  C091  F048         	movff	sprintf@fval+2,___fttol@f1+2
  2549  000CDA  EC11  F014         	call	___fttol	;wreg free
  2550  000CDE  C046  F081         	movff	?___fttol,sprintf@val
  2551  000CE2  C047  F082         	movff	?___fttol+1,sprintf@val+1
  2552  000CE6  C048  F083         	movff	?___fttol+2,sprintf@val+2
  2553  000CEA  C049  F084         	movff	?___fttol+3,sprintf@val+3
  2554                           
  2555                           ;doprnt.c: 1132: fval -= (double)val;
  2556  000CEE  C08F  F068         	movff	sprintf@fval,___ftsub@f1
  2557  000CF2  C090  F069         	movff	sprintf@fval+1,___ftsub@f1+1
  2558  000CF6  C091  F06A         	movff	sprintf@fval+2,___ftsub@f1+2
  2559  000CFA  C081  F009         	movff	sprintf@val,___lltoft@c
  2560  000CFE  C082  F00A         	movff	sprintf@val+1,___lltoft@c+1
  2561  000D02  C083  F00B         	movff	sprintf@val+2,___lltoft@c+2
  2562  000D06  C084  F00C         	movff	sprintf@val+3,___lltoft@c+3
  2563  000D0A  EC1A  F019         	call	___lltoft	;wreg free
  2564  000D0E  C009  F06B         	movff	?___lltoft,___ftsub@f2
  2565  000D12  C00A  F06C         	movff	?___lltoft+1,___ftsub@f2+1
  2566  000D16  C00B  F06D         	movff	?___lltoft+2,___ftsub@f2+2
  2567  000D1A  EC48  F019         	call	___ftsub	;wreg free
  2568  000D1E  C068  F08F         	movff	?___ftsub,sprintf@fval
  2569  000D22  C069  F090         	movff	?___ftsub+1,sprintf@fval+1
  2570  000D26  C06A  F091         	movff	?___ftsub+2,sprintf@fval+2
  2571                           
  2572                           ;doprnt.c: 1133: exp = 0;
  2573  000D2A  0E00               	movlw	0
  2574  000D2C  0100               	movlb	0	; () banked
  2575  000D2E  6F8A               	movwf	(sprintf@exp+1)& (0+255),b
  2576  000D30  0E00               	movlw	0
  2577  000D32  6F89               	movwf	sprintf@exp& (0+255),b
  2578  000D34                     l214:
  2579                           
  2580                           ; BSR set to: 0
  2581                           ;doprnt.c: 1134: }
  2582                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2583                           
  2584                           ; BSR set to: 0
  2585  000D34  0E01               	movlw	1
  2586  000D36  6F94               	movwf	sprintf@c& (0+255),b
  2587  000D38                     l3415:
  2588                           
  2589                           ; BSR set to: 0
  2590  000D38  0E0A               	movlw	10
  2591  000D3A  1994               	xorwf	sprintf@c& (0+255),w,b
  2592  000D3C  B4D8               	btfsc	status,2,c
  2593  000D3E  D018               	goto	u3320
  2594                           
  2595                           ; BSR set to: 0
  2596                           ;doprnt.c: 1137: if(val < dpowers[c])
  2597                           
  2598                           ; BSR set to: 0
  2599                           
  2600                           ; BSR set to: 0
  2601  000D40  5194               	movf	sprintf@c& (0+255),w,b
  2602  000D42  0D04               	mullw	4
  2603  000D44  0E01               	movlw	low _dpowers
  2604  000D46  24F3               	addwf	prodl,w,c
  2605  000D48  6EF6               	movwf	tblptrl,c
  2606  000D4A  0E08               	movlw	high _dpowers
  2607  000D4C  20F4               	addwfc	prodh,w,c
  2608  000D4E  6EF7               	movwf	tblptrh,c
  2609  000D50                     	if	0	;There are less than 3 active tblptr bytes
  2610  000D50                     	endif
  2611  000D50  0009               	tblrd		*+
  2612  000D52  50F5               	movf	tablat,w,c
  2613  000D54  5D81               	subwf	sprintf@val& (0+255),w,b
  2614  000D56  0009               	tblrd		*+
  2615  000D58  50F5               	movf	tablat,w,c
  2616  000D5A  5982               	subwfb	(sprintf@val+1)& (0+255),w,b
  2617  000D5C  0009               	tblrd		*+
  2618  000D5E  50F5               	movf	tablat,w,c
  2619  000D60  5983               	subwfb	(sprintf@val+2)& (0+255),w,b
  2620  000D62  0009               	tblrd		*+
  2621  000D64  50F5               	movf	tablat,w,c
  2622  000D66  5984               	subwfb	(sprintf@val+3)& (0+255),w,b
  2623  000D68  A0D8               	btfss	status,0,c
  2624  000D6A  D002               	goto	u3320
  2625                           
  2626                           ; BSR set to: 0
  2627                           
  2628                           ; BSR set to: 0
  2629                           
  2630                           ; BSR set to: 0
  2631                           ;doprnt.c: 1138: break;
  2632  000D6C  2B94               	incf	sprintf@c& (0+255),f,b
  2633  000D6E  D7E4               	goto	l3415
  2634  000D70                     u3320:
  2635                           
  2636                           ; BSR set to: 0
  2637                           ;doprnt.c: 1142: width -= prec + c + exp;
  2638                           
  2639                           ; BSR set to: 0
  2640  000D70  C094  F076         	movff	sprintf@c,??_sprintf
  2641  000D74  6B77               	clrf	(??_sprintf+1)& (0+255),b
  2642  000D76  BF76               	btfsc	??_sprintf& (0+255),7,b
  2643  000D78  0777               	decf	(??_sprintf+1)& (0+255),f,b
  2644  000D7A  5192               	movf	sprintf@prec& (0+255),w,b
  2645  000D7C  2776               	addwf	??_sprintf& (0+255),f,b
  2646  000D7E  5193               	movf	(sprintf@prec+1)& (0+255),w,b
  2647  000D80  2377               	addwfc	(??_sprintf+1)& (0+255),f,b
  2648  000D82  5189               	movf	sprintf@exp& (0+255),w,b
  2649  000D84  2776               	addwf	??_sprintf& (0+255),f,b
  2650  000D86  518A               	movf	(sprintf@exp+1)& (0+255),w,b
  2651  000D88  2377               	addwfc	(??_sprintf+1)& (0+255),f,b
  2652  000D8A  5176               	movf	??_sprintf& (0+255),w,b
  2653  000D8C  5F8B               	subwf	sprintf@width& (0+255),f,b
  2654  000D8E  5177               	movf	(??_sprintf+1)& (0+255),w,b
  2655  000D90  5B8C               	subwfb	(sprintf@width+1)& (0+255),f,b
  2656                           
  2657                           ;doprnt.c: 1143: if(
  2658                           ;doprnt.c: 1147: prec)
  2659  000D92  5192               	movf	sprintf@prec& (0+255),w,b
  2660  000D94  1193               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2661  000D96  B4D8               	btfsc	status,2,c
  2662  000D98  D003               	goto	l218
  2663                           
  2664                           ; BSR set to: 0
  2665                           ;doprnt.c: 1148: width--;
  2666  000D9A  078B               	decf	sprintf@width& (0+255),f,b
  2667  000D9C  A0D8               	btfss	status,0,c
  2668  000D9E  078C               	decf	(sprintf@width+1)& (0+255),f,b
  2669  000DA0                     l218:
  2670                           
  2671                           ; BSR set to: 0
  2672                           ;doprnt.c: 1149: if(flag & 0x03)
  2673                           
  2674                           ; BSR set to: 0
  2675  000DA0  0E03               	movlw	3
  2676  000DA2  158D               	andwf	sprintf@flag& (0+255),w,b
  2677  000DA4  6F76               	movwf	??_sprintf& (0+255),b
  2678  000DA6  0E00               	movlw	0
  2679  000DA8  158E               	andwf	(sprintf@flag+1)& (0+255),w,b
  2680  000DAA  6F77               	movwf	(??_sprintf+1)& (0+255),b
  2681  000DAC  5176               	movf	??_sprintf& (0+255),w,b
  2682  000DAE  1177               	iorwf	(??_sprintf+1)& (0+255),w,b
  2683  000DB0  B4D8               	btfsc	status,2,c
  2684  000DB2  D003               	goto	l219
  2685                           
  2686                           ; BSR set to: 0
  2687                           ;doprnt.c: 1150: width--;
  2688  000DB4  078B               	decf	sprintf@width& (0+255),f,b
  2689  000DB6  A0D8               	btfss	status,0,c
  2690  000DB8  078C               	decf	(sprintf@width+1)& (0+255),f,b
  2691  000DBA                     l219:
  2692                           
  2693                           ; BSR set to: 0
  2694                           ;doprnt.c: 1153: if(flag & 0x04) {
  2695                           
  2696                           ; BSR set to: 0
  2697  000DBA  A58D               	btfss	sprintf@flag& (0+255),2,b
  2698  000DBC  D031               	goto	l226
  2699                           
  2700                           ; BSR set to: 0
  2701                           ;doprnt.c: 1157: if(flag & 0x03)
  2702  000DBE  0E03               	movlw	3
  2703  000DC0  158D               	andwf	sprintf@flag& (0+255),w,b
  2704  000DC2  6F76               	movwf	??_sprintf& (0+255),b
  2705  000DC4  0E00               	movlw	0
  2706  000DC6  158E               	andwf	(sprintf@flag+1)& (0+255),w,b
  2707  000DC8  6F77               	movwf	(??_sprintf+1)& (0+255),b
  2708  000DCA  5176               	movf	??_sprintf& (0+255),w,b
  2709  000DCC  1177               	iorwf	(??_sprintf+1)& (0+255),w,b
  2710  000DCE  B4D8               	btfsc	status,2,c
  2711  000DD0  D014               	goto	l222
  2712                           
  2713                           ; BSR set to: 0
  2714                           ;doprnt.c: 1159: ((*sp++ = ('-')));
  2715  000DD2  C06E  FFD9         	movff	sprintf@sp,fsr2l
  2716  000DD6  C06F  FFDA         	movff	sprintf@sp+1,fsr2h
  2717  000DDA  0E2D               	movlw	45
  2718  000DDC  6EDF               	movwf	indf2,c
  2719                           
  2720                           ; BSR set to: 0
  2721  000DDE  4B6E               	infsnz	sprintf@sp& (0+255),f,b
  2722  000DE0  2B6F               	incf	(sprintf@sp+1)& (0+255),f,b
  2723                           
  2724                           ; BSR set to: 0
  2725                           ;doprnt.c: 1168: while(width > 0) {
  2726  000DE2  D00B               	goto	l222
  2727  000DE4                     l3443:
  2728                           
  2729                           ; BSR set to: 0
  2730                           ;doprnt.c: 1169: ((*sp++ = ('0')));
  2731  000DE4  C06E  FFD9         	movff	sprintf@sp,fsr2l
  2732  000DE8  C06F  FFDA         	movff	sprintf@sp+1,fsr2h
  2733  000DEC  0E30               	movlw	48
  2734  000DEE  6EDF               	movwf	indf2,c
  2735                           
  2736                           ; BSR set to: 0
  2737  000DF0  4B6E               	infsnz	sprintf@sp& (0+255),f,b
  2738  000DF2  2B6F               	incf	(sprintf@sp+1)& (0+255),f,b
  2739                           
  2740                           ; BSR set to: 0
  2741                           ;doprnt.c: 1170: width--;
  2742  000DF4  078B               	decf	sprintf@width& (0+255),f,b
  2743  000DF6  A0D8               	btfss	status,0,c
  2744  000DF8  078C               	decf	(sprintf@width+1)& (0+255),f,b
  2745  000DFA                     l222:
  2746                           
  2747                           ; BSR set to: 0
  2748                           
  2749                           ; BSR set to: 0
  2750  000DFA  BF8C               	btfsc	(sprintf@width+1)& (0+255),7,b
  2751  000DFC  D072               	goto	l230
  2752  000DFE  518C               	movf	(sprintf@width+1)& (0+255),w,b
  2753  000E00  E1F1               	bnz	l3443
  2754  000E02  058B               	decf	sprintf@width& (0+255),w,b
  2755  000E04  A0D8               	btfss	status,0,c
  2756  000E06  D06D               	goto	l230
  2757  000E08  D7ED               	goto	l223
  2758  000E0A                     l3451:
  2759                           
  2760                           ; BSR set to: 0
  2761                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  2762  000E0A  C06E  FFD9         	movff	sprintf@sp,fsr2l
  2763  000E0E  C06F  FFDA         	movff	sprintf@sp+1,fsr2h
  2764  000E12  0E20               	movlw	32
  2765  000E14  6EDF               	movwf	indf2,c
  2766                           
  2767                           ; BSR set to: 0
  2768  000E16  4B6E               	infsnz	sprintf@sp& (0+255),f,b
  2769  000E18  2B6F               	incf	(sprintf@sp+1)& (0+255),f,b
  2770                           
  2771                           ; BSR set to: 0
  2772                           ;doprnt.c: 1182: width--;
  2773  000E1A  078B               	decf	sprintf@width& (0+255),f,b
  2774  000E1C  A0D8               	btfss	status,0,c
  2775  000E1E  078C               	decf	(sprintf@width+1)& (0+255),f,b
  2776  000E20                     l226:
  2777                           
  2778                           ; BSR set to: 0
  2779                           
  2780                           ; BSR set to: 0
  2781  000E20  BF8C               	btfsc	(sprintf@width+1)& (0+255),7,b
  2782  000E22  D005               	goto	u3380
  2783  000E24  518C               	movf	(sprintf@width+1)& (0+255),w,b
  2784  000E26  E1F1               	bnz	l3451
  2785  000E28  058B               	decf	sprintf@width& (0+255),w,b
  2786  000E2A  B0D8               	btfsc	status,0,c
  2787  000E2C  D7EE               	goto	l227
  2788  000E2E                     u3380:
  2789                           
  2790                           ; BSR set to: 0
  2791                           ;doprnt.c: 1183: }
  2792                           ;doprnt.c: 1188: if(flag & 0x03)
  2793                           
  2794                           ; BSR set to: 0
  2795  000E2E  0E03               	movlw	3
  2796  000E30  158D               	andwf	sprintf@flag& (0+255),w,b
  2797  000E32  6F76               	movwf	??_sprintf& (0+255),b
  2798  000E34  0E00               	movlw	0
  2799  000E36  158E               	andwf	(sprintf@flag+1)& (0+255),w,b
  2800  000E38  6F77               	movwf	(??_sprintf+1)& (0+255),b
  2801  000E3A  5176               	movf	??_sprintf& (0+255),w,b
  2802  000E3C  1177               	iorwf	(??_sprintf+1)& (0+255),w,b
  2803  000E3E  B4D8               	btfsc	status,2,c
  2804  000E40  D050               	goto	l230
  2805                           
  2806                           ; BSR set to: 0
  2807                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  2808  000E42  C06E  FFD9         	movff	sprintf@sp,fsr2l
  2809  000E46  C06F  FFDA         	movff	sprintf@sp+1,fsr2h
  2810  000E4A  0E2D               	movlw	45
  2811  000E4C  D047               	goto	L2
  2812  000E4E                     
  2813                           ; BSR set to: 0
  2814                           ;doprnt.c: 1200: {
  2815                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2816                           
  2817                           ; BSR set to: 0
  2818  000E4E  C081  F001         	movff	sprintf@val,___lldiv@dividend
  2819  000E52  C082  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2820  000E56  C083  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2821  000E5A  C084  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2822  000E5E  5194               	movf	sprintf@c& (0+255),w,b
  2823  000E60  0D04               	mullw	4
  2824  000E62  0E01               	movlw	low _dpowers
  2825  000E64  24F3               	addwf	prodl,w,c
  2826  000E66  6EF6               	movwf	tblptrl,c
  2827  000E68  0E08               	movlw	high _dpowers
  2828  000E6A  20F4               	addwfc	prodh,w,c
  2829  000E6C  6EF7               	movwf	tblptrh,c
  2830  000E6E                     	if	0	;There are less than 3 active tblptr bytes
  2831  000E6E                     	endif
  2832  000E6E  0009               	tblrd		*+
  2833  000E70  CFF5 F005          	movff	tablat,___lldiv@divisor
  2834  000E74  0009               	tblrd		*+
  2835  000E76  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2836  000E7A  0009               	tblrd		*+
  2837  000E7C  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2838  000E80  000A               	tblrd		*-
  2839  000E82  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2840  000E86  EC88  F017         	call	___lldiv	;wreg free
  2841  000E8A  C001  F085         	movff	?___lldiv,sprintf@tmpval
  2842  000E8E  C002  F086         	movff	?___lldiv+1,sprintf@tmpval+1
  2843  000E92  C003  F087         	movff	?___lldiv+2,sprintf@tmpval+2
  2844  000E96  C004  F088         	movff	?___lldiv+3,sprintf@tmpval+3
  2845                           
  2846                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2847  000E9A  C085  F00E         	movff	sprintf@tmpval,___llmod@dividend
  2848  000E9E  C086  F00F         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2849  000EA2  C087  F010         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2850  000EA6  C088  F011         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2851  000EAA  0E0A               	movlw	10
  2852  000EAC  6E12               	movwf	___llmod@divisor,c
  2853  000EAE  0E00               	movlw	0
  2854  000EB0  6E13               	movwf	___llmod@divisor+1,c
  2855  000EB2  0E00               	movlw	0
  2856  000EB4  6E14               	movwf	___llmod@divisor+2,c
  2857  000EB6  0E00               	movlw	0
  2858  000EB8  6E15               	movwf	___llmod@divisor+3,c
  2859  000EBA  ECB6  F018         	call	___llmod	;wreg free
  2860  000EBE  C00E  F085         	movff	?___llmod,sprintf@tmpval
  2861  000EC2  C00F  F086         	movff	?___llmod+1,sprintf@tmpval+1
  2862  000EC6  C010  F087         	movff	?___llmod+2,sprintf@tmpval+2
  2863  000ECA  C011  F088         	movff	?___llmod+3,sprintf@tmpval+3
  2864                           
  2865                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  2866  000ECE  0100               	movlb	0	; () banked
  2867  000ED0  5185               	movf	sprintf@tmpval& (0+255),w,b
  2868  000ED2  0F30               	addlw	48
  2869  000ED4  C06E  FFD9         	movff	sprintf@sp,fsr2l
  2870  000ED8  C06F  FFDA         	movff	sprintf@sp+1,fsr2h
  2871  000EDC                     L2:
  2872  000EDC  6EDF               	movwf	indf2,c
  2873                           
  2874                           ; BSR set to: 0
  2875  000EDE  4B6E               	infsnz	sprintf@sp& (0+255),f,b
  2876  000EE0  2B6F               	incf	(sprintf@sp+1)& (0+255),f,b
  2877  000EE2                     l230:
  2878                           
  2879                           ; BSR set to: 0
  2880                           
  2881                           ; BSR set to: 0
  2882  000EE2  0794               	decf	sprintf@c& (0+255),f,b
  2883  000EE4  2994               	incf	sprintf@c& (0+255),w,b
  2884  000EE6  B4D8               	btfsc	status,2,c
  2885  000EE8  D00C               	goto	l233
  2886  000EEA  D7B1               	goto	l231
  2887  000EEC                     l3475:
  2888                           
  2889                           ; BSR set to: 0
  2890                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  2891  000EEC  C06E  FFD9         	movff	sprintf@sp,fsr2l
  2892  000EF0  C06F  FFDA         	movff	sprintf@sp+1,fsr2h
  2893  000EF4  0E30               	movlw	48
  2894  000EF6  6EDF               	movwf	indf2,c
  2895                           
  2896                           ; BSR set to: 0
  2897  000EF8  4B6E               	infsnz	sprintf@sp& (0+255),f,b
  2898  000EFA  2B6F               	incf	(sprintf@sp+1)& (0+255),f,b
  2899                           
  2900                           ; BSR set to: 0
  2901                           ;doprnt.c: 1209: exp--;
  2902  000EFC  0789               	decf	sprintf@exp& (0+255),f,b
  2903  000EFE  A0D8               	btfss	status,0,c
  2904  000F00  078A               	decf	(sprintf@exp+1)& (0+255),f,b
  2905  000F02                     l233:
  2906                           
  2907                           ; BSR set to: 0
  2908                           
  2909                           ; BSR set to: 0
  2910  000F02  BF8A               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2911  000F04  D005               	goto	u3410
  2912  000F06  518A               	movf	(sprintf@exp+1)& (0+255),w,b
  2913  000F08  E1F1               	bnz	l3475
  2914  000F0A  0589               	decf	sprintf@exp& (0+255),w,b
  2915  000F0C  B0D8               	btfsc	status,0,c
  2916  000F0E  D7EE               	goto	l234
  2917  000F10                     u3410:
  2918                           
  2919                           ; BSR set to: 0
  2920                           ;doprnt.c: 1210: }
  2921                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2922                           
  2923                           ; BSR set to: 0
  2924  000F10  BF93               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2925  000F12  D009               	goto	l236
  2926  000F14  5193               	movf	(sprintf@prec+1)& (0+255),w,b
  2927  000F16  E104               	bnz	u3420
  2928  000F18  0E09               	movlw	9
  2929  000F1A  5D92               	subwf	sprintf@prec& (0+255),w,b
  2930  000F1C  A0D8               	btfss	status,0,c
  2931  000F1E  D003               	goto	l236
  2932  000F20                     u3420:
  2933                           
  2934                           ; BSR set to: 0
  2935                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2936  000F20  0E08               	movlw	8
  2937  000F22  6F94               	movwf	sprintf@c& (0+255),b
  2938  000F24  D002               	goto	l237
  2939  000F26                     l236:
  2940                           
  2941                           ; BSR set to: 0
  2942                           ;doprnt.c: 1213: else
  2943                           ;doprnt.c: 1214: c = prec;
  2944  000F26  C092  F094         	movff	sprintf@prec,sprintf@c
  2945  000F2A                     l237:
  2946                           
  2947                           ; BSR set to: 0
  2948                           ;doprnt.c: 1215: prec -= c;
  2949                           
  2950                           ; BSR set to: 0
  2951  000F2A  5194               	movf	sprintf@c& (0+255),w,b
  2952  000F2C  5F92               	subwf	sprintf@prec& (0+255),f,b
  2953  000F2E  0E00               	movlw	0
  2954  000F30  BF94               	btfsc	sprintf@c& (0+255),7,b
  2955  000F32  0EFF               	movlw	255
  2956  000F34  5B93               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2957                           
  2958                           ; BSR set to: 0
  2959                           ;doprnt.c: 1219: if(c)
  2960  000F36  5194               	movf	sprintf@c& (0+255),w,b
  2961  000F38  B4D8               	btfsc	status,2,c
  2962  000F3A  D008               	goto	l238
  2963                           
  2964                           ; BSR set to: 0
  2965                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  2966  000F3C  C06E  FFD9         	movff	sprintf@sp,fsr2l
  2967  000F40  C06F  FFDA         	movff	sprintf@sp+1,fsr2h
  2968  000F44  0E2E               	movlw	46
  2969  000F46  6EDF               	movwf	indf2,c
  2970                           
  2971                           ; BSR set to: 0
  2972  000F48  4B6E               	infsnz	sprintf@sp& (0+255),f,b
  2973  000F4A  2B6F               	incf	(sprintf@sp+1)& (0+255),f,b
  2974  000F4C                     l238:
  2975                           
  2976                           ; BSR set to: 0
  2977                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2978                           
  2979                           ; BSR set to: 0
  2980  000F4C  5194               	movf	sprintf@c& (0+255),w,b
  2981  000F4E  EC01  F00C         	call	_scale
  2982  000F52  C03F  F07C         	movff	?_scale,_sprintf$1613
  2983  000F56  C040  F07D         	movff	?_scale+1,_sprintf$1613+1
  2984  000F5A  C041  F07E         	movff	?_scale+2,_sprintf$1613+2
  2985                           
  2986                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2987  000F5E  C08F  F033         	movff	sprintf@fval,___ftmul@f2
  2988  000F62  C090  F034         	movff	sprintf@fval+1,___ftmul@f2+1
  2989  000F66  C091  F035         	movff	sprintf@fval+2,___ftmul@f2+2
  2990  000F6A  C07C  F030         	movff	_sprintf$1613,___ftmul@f1
  2991  000F6E  C07D  F031         	movff	_sprintf$1613+1,___ftmul@f1+1
  2992  000F72  C07E  F032         	movff	_sprintf$1613+2,___ftmul@f1+2
  2993  000F76  EC8B  F014         	call	___ftmul	;wreg free
  2994  000F7A  C030  F046         	movff	?___ftmul,___fttol@f1
  2995  000F7E  C031  F047         	movff	?___ftmul+1,___fttol@f1+1
  2996  000F82  C032  F048         	movff	?___ftmul+2,___fttol@f1+2
  2997  000F86  EC11  F014         	call	___fttol	;wreg free
  2998  000F8A  C046  F081         	movff	?___fttol,sprintf@val
  2999  000F8E  C047  F082         	movff	?___fttol+1,sprintf@val+1
  3000  000F92  C048  F083         	movff	?___fttol+2,sprintf@val+2
  3001  000F96  C049  F084         	movff	?___fttol+3,sprintf@val+3
  3002                           
  3003                           ;doprnt.c: 1228: while(c--) {
  3004  000F9A  D071               	goto	l239
  3005  000F9C                     
  3006                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  3007  000F9C  C081  F001         	movff	sprintf@val,___lldiv@dividend
  3008  000FA0  C082  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  3009  000FA4  C083  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  3010  000FA8  C084  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  3011  000FAC  0100               	movlb	0	; () banked
  3012  000FAE  5194               	movf	sprintf@c& (0+255),w,b
  3013  000FB0  0D04               	mullw	4
  3014  000FB2  0E01               	movlw	low _dpowers
  3015  000FB4  24F3               	addwf	prodl,w,c
  3016  000FB6  6EF6               	movwf	tblptrl,c
  3017  000FB8  0E08               	movlw	high _dpowers
  3018  000FBA  20F4               	addwfc	prodh,w,c
  3019  000FBC  6EF7               	movwf	tblptrh,c
  3020  000FBE                     	if	0	;There are less than 3 active tblptr bytes
  3021  000FBE                     	endif
  3022  000FBE  0009               	tblrd		*+
  3023  000FC0  CFF5 F005          	movff	tablat,___lldiv@divisor
  3024  000FC4  0009               	tblrd		*+
  3025  000FC6  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  3026  000FCA  0009               	tblrd		*+
  3027  000FCC  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  3028  000FD0  000A               	tblrd		*-
  3029  000FD2  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  3030  000FD6  EC88  F017         	call	___lldiv	;wreg free
  3031  000FDA  C001  F085         	movff	?___lldiv,sprintf@tmpval
  3032  000FDE  C002  F086         	movff	?___lldiv+1,sprintf@tmpval+1
  3033  000FE2  C003  F087         	movff	?___lldiv+2,sprintf@tmpval+2
  3034  000FE6  C004  F088         	movff	?___lldiv+3,sprintf@tmpval+3
  3035                           
  3036                           ;doprnt.c: 1230: tmpval.vd %= 10;
  3037  000FEA  C085  F00E         	movff	sprintf@tmpval,___llmod@dividend
  3038  000FEE  C086  F00F         	movff	sprintf@tmpval+1,___llmod@dividend+1
  3039  000FF2  C087  F010         	movff	sprintf@tmpval+2,___llmod@dividend+2
  3040  000FF6  C088  F011         	movff	sprintf@tmpval+3,___llmod@dividend+3
  3041  000FFA  0E0A               	movlw	10
  3042  000FFC  6E12               	movwf	___llmod@divisor,c
  3043  000FFE  0E00               	movlw	0
  3044  001000  6E13               	movwf	___llmod@divisor+1,c
  3045  001002  0E00               	movlw	0
  3046  001004  6E14               	movwf	___llmod@divisor+2,c
  3047  001006  0E00               	movlw	0
  3048  001008  6E15               	movwf	___llmod@divisor+3,c
  3049  00100A  ECB6  F018         	call	___llmod	;wreg free
  3050  00100E  C00E  F085         	movff	?___llmod,sprintf@tmpval
  3051  001012  C00F  F086         	movff	?___llmod+1,sprintf@tmpval+1
  3052  001016  C010  F087         	movff	?___llmod+2,sprintf@tmpval+2
  3053  00101A  C011  F088         	movff	?___llmod+3,sprintf@tmpval+3
  3054                           
  3055                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  3056  00101E  0100               	movlb	0	; () banked
  3057  001020  5185               	movf	sprintf@tmpval& (0+255),w,b
  3058  001022  0F30               	addlw	48
  3059  001024  C06E  FFD9         	movff	sprintf@sp,fsr2l
  3060  001028  C06F  FFDA         	movff	sprintf@sp+1,fsr2h
  3061  00102C  6EDF               	movwf	indf2,c
  3062                           
  3063                           ; BSR set to: 0
  3064  00102E  4B6E               	infsnz	sprintf@sp& (0+255),f,b
  3065  001030  2B6F               	incf	(sprintf@sp+1)& (0+255),f,b
  3066                           
  3067                           ; BSR set to: 0
  3068                           ;doprnt.c: 1232: val %= dpowers[c];
  3069  001032  C081  F00E         	movff	sprintf@val,___llmod@dividend
  3070  001036  C082  F00F         	movff	sprintf@val+1,___llmod@dividend+1
  3071  00103A  C083  F010         	movff	sprintf@val+2,___llmod@dividend+2
  3072  00103E  C084  F011         	movff	sprintf@val+3,___llmod@dividend+3
  3073  001042  5194               	movf	sprintf@c& (0+255),w,b
  3074  001044  0D04               	mullw	4
  3075  001046  0E01               	movlw	low _dpowers
  3076  001048  24F3               	addwf	prodl,w,c
  3077  00104A  6EF6               	movwf	tblptrl,c
  3078  00104C  0E08               	movlw	high _dpowers
  3079  00104E  20F4               	addwfc	prodh,w,c
  3080  001050  6EF7               	movwf	tblptrh,c
  3081  001052                     	if	0	;There are less than 3 active tblptr bytes
  3082  001052                     	endif
  3083  001052  0009               	tblrd		*+
  3084  001054  CFF5 F012          	movff	tablat,___llmod@divisor
  3085  001058  0009               	tblrd		*+
  3086  00105A  CFF5 F013          	movff	tablat,___llmod@divisor+1
  3087  00105E  0009               	tblrd		*+
  3088  001060  CFF5 F014          	movff	tablat,___llmod@divisor+2
  3089  001064  000A               	tblrd		*-
  3090  001066  CFF5 F015          	movff	tablat,___llmod@divisor+3
  3091  00106A  ECB6  F018         	call	___llmod	;wreg free
  3092  00106E  C00E  F081         	movff	?___llmod,sprintf@val
  3093  001072  C00F  F082         	movff	?___llmod+1,sprintf@val+1
  3094  001076  C010  F083         	movff	?___llmod+2,sprintf@val+2
  3095  00107A  C011  F084         	movff	?___llmod+3,sprintf@val+3
  3096  00107E                     l239:
  3097  00107E  0100               	movlb	0	; () banked
  3098  001080  0794               	decf	sprintf@c& (0+255),f,b
  3099  001082  2994               	incf	sprintf@c& (0+255),w,b
  3100  001084  B4D8               	btfsc	status,2,c
  3101  001086  D00C               	goto	l242
  3102  001088  D789               	goto	l240
  3103  00108A                     
  3104                           ; BSR set to: 0
  3105                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  3106                           
  3107                           ; BSR set to: 0
  3108  00108A  C06E  FFD9         	movff	sprintf@sp,fsr2l
  3109  00108E  C06F  FFDA         	movff	sprintf@sp+1,fsr2h
  3110  001092  0E30               	movlw	48
  3111  001094  6EDF               	movwf	indf2,c
  3112                           
  3113                           ; BSR set to: 0
  3114  001096  4B6E               	infsnz	sprintf@sp& (0+255),f,b
  3115  001098  2B6F               	incf	(sprintf@sp+1)& (0+255),f,b
  3116                           
  3117                           ; BSR set to: 0
  3118                           ;doprnt.c: 1237: prec--;
  3119  00109A  0792               	decf	sprintf@prec& (0+255),f,b
  3120  00109C  A0D8               	btfss	status,0,c
  3121  00109E  0793               	decf	(sprintf@prec+1)& (0+255),f,b
  3122  0010A0                     l242:
  3123                           
  3124                           ; BSR set to: 0
  3125                           
  3126                           ; BSR set to: 0
  3127  0010A0  5192               	movf	sprintf@prec& (0+255),w,b
  3128  0010A2  1193               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3129  0010A4  B4D8               	btfsc	status,2,c
  3130  0010A6  D13B               	goto	u3660
  3131  0010A8  D7F0               	goto	l243
  3132  0010AA                     l196:
  3133                           
  3134                           ; BSR set to: 0
  3135                           ;doprnt.c: 1246: }
  3136                           ;doprnt.c: 1273: {
  3137                           ;doprnt.c: 1281: if(flag & 0x10)
  3138  0010AA  A98D               	btfss	sprintf@flag& (0+255),4,b
  3139  0010AC  D00E               	goto	l245
  3140                           
  3141                           ; BSR set to: 0
  3142                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  3143  0010AE  C07F  FFD9         	movff	sprintf@ap,fsr2l
  3144  0010B2  C080  FFDA         	movff	sprintf@ap+1,fsr2h
  3145  0010B6  CFDE F081          	movff	postinc2,sprintf@val
  3146  0010BA  CFDE F082          	movff	postinc2,sprintf@val+1
  3147  0010BE  CFDE F083          	movff	postinc2,sprintf@val+2
  3148  0010C2  CFDE F084          	movff	postinc2,sprintf@val+3
  3149                           
  3150                           ; BSR set to: 0
  3151  0010C6  0E04               	movlw	4
  3152  0010C8  D00F               	goto	L3
  3153  0010CA                     l245:
  3154                           
  3155                           ; BSR set to: 0
  3156                           ;doprnt.c: 1283: else
  3157                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3158                           
  3159                           ; BSR set to: 0
  3160  0010CA  C07F  FFD9         	movff	sprintf@ap,fsr2l
  3161  0010CE  C080  FFDA         	movff	sprintf@ap+1,fsr2h
  3162  0010D2  CFDE F076          	movff	postinc2,??_sprintf
  3163  0010D6  CFDD F077          	movff	postdec2,??_sprintf+1
  3164  0010DA  C076  F081         	movff	??_sprintf,sprintf@val
  3165  0010DE  C077  F082         	movff	??_sprintf+1,sprintf@val+1
  3166  0010E2  6B83               	clrf	(sprintf@val+2)& (0+255),b
  3167  0010E4  6B84               	clrf	(sprintf@val+3)& (0+255),b
  3168                           
  3169                           ; BSR set to: 0
  3170  0010E6  0E02               	movlw	2
  3171  0010E8                     L3:
  3172  0010E8  277F               	addwf	sprintf@ap& (0+255),f,b
  3173  0010EA  0E00               	movlw	0
  3174  0010EC  2380               	addwfc	(sprintf@ap+1)& (0+255),f,b
  3175                           
  3176                           ; BSR set to: 0
  3177                           ;doprnt.c: 1287: }
  3178                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  3179                           
  3180                           ; BSR set to: 0
  3181  0010EE  5192               	movf	sprintf@prec& (0+255),w,b
  3182  0010F0  1193               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3183  0010F2  A4D8               	btfss	status,2,c
  3184  0010F4  D008               	goto	l247
  3185                           
  3186                           ; BSR set to: 0
  3187  0010F6  5181               	movf	sprintf@val& (0+255),w,b
  3188  0010F8  1182               	iorwf	(sprintf@val+1)& (0+255),w,b
  3189  0010FA  1183               	iorwf	(sprintf@val+2)& (0+255),w,b
  3190  0010FC  1184               	iorwf	(sprintf@val+3)& (0+255),w,b
  3191  0010FE  A4D8               	btfss	status,2,c
  3192  001100  D002               	goto	l247
  3193                           
  3194                           ; BSR set to: 0
  3195                           ;doprnt.c: 1291: prec++;
  3196  001102  4B92               	infsnz	sprintf@prec& (0+255),f,b
  3197  001104  2B93               	incf	(sprintf@prec+1)& (0+255),f,b
  3198  001106                     l247:
  3199                           
  3200                           ; BSR set to: 0
  3201                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3202                           
  3203                           ; BSR set to: 0
  3204  001106  0E01               	movlw	1
  3205  001108  6F94               	movwf	sprintf@c& (0+255),b
  3206  00110A                     l3535:
  3207                           
  3208                           ; BSR set to: 0
  3209  00110A  0E0A               	movlw	10
  3210  00110C  1994               	xorwf	sprintf@c& (0+255),w,b
  3211  00110E  B4D8               	btfsc	status,2,c
  3212  001110  D018               	goto	u3510
  3213                           
  3214                           ; BSR set to: 0
  3215                           ;doprnt.c: 1306: if(val < dpowers[c])
  3216                           
  3217                           ; BSR set to: 0
  3218                           
  3219                           ; BSR set to: 0
  3220  001112  5194               	movf	sprintf@c& (0+255),w,b
  3221  001114  0D04               	mullw	4
  3222  001116  0E01               	movlw	low _dpowers
  3223  001118  24F3               	addwf	prodl,w,c
  3224  00111A  6EF6               	movwf	tblptrl,c
  3225  00111C  0E08               	movlw	high _dpowers
  3226  00111E  20F4               	addwfc	prodh,w,c
  3227  001120  6EF7               	movwf	tblptrh,c
  3228  001122                     	if	0	;There are less than 3 active tblptr bytes
  3229  001122                     	endif
  3230  001122  0009               	tblrd		*+
  3231  001124  50F5               	movf	tablat,w,c
  3232  001126  5D81               	subwf	sprintf@val& (0+255),w,b
  3233  001128  0009               	tblrd		*+
  3234  00112A  50F5               	movf	tablat,w,c
  3235  00112C  5982               	subwfb	(sprintf@val+1)& (0+255),w,b
  3236  00112E  0009               	tblrd		*+
  3237  001130  50F5               	movf	tablat,w,c
  3238  001132  5983               	subwfb	(sprintf@val+2)& (0+255),w,b
  3239  001134  0009               	tblrd		*+
  3240  001136  50F5               	movf	tablat,w,c
  3241  001138  5984               	subwfb	(sprintf@val+3)& (0+255),w,b
  3242  00113A  A0D8               	btfss	status,0,c
  3243  00113C  D002               	goto	u3510
  3244                           
  3245                           ; BSR set to: 0
  3246                           
  3247                           ; BSR set to: 0
  3248                           
  3249                           ; BSR set to: 0
  3250                           ;doprnt.c: 1307: break;
  3251  00113E  2B94               	incf	sprintf@c& (0+255),f,b
  3252  001140  D7E4               	goto	l3535
  3253  001142                     u3510:
  3254                           
  3255                           ; BSR set to: 0
  3256                           ;doprnt.c: 1339: if(c < prec)
  3257                           
  3258                           ; BSR set to: 0
  3259  001142  0E80               	movlw	128
  3260  001144  BF94               	btfsc	sprintf@c& (0+255),7,b
  3261  001146  0E7F               	movlw	127
  3262  001148  6F76               	movwf	??_sprintf& (0+255),b
  3263  00114A  5192               	movf	sprintf@prec& (0+255),w,b
  3264  00114C  5D94               	subwf	sprintf@c& (0+255),w,b
  3265  00114E  5193               	movf	(sprintf@prec+1)& (0+255),w,b
  3266  001150  0A80               	xorlw	128
  3267  001152  5976               	subwfb	??_sprintf& (0+255),w,b
  3268  001154  B0D8               	btfsc	status,0,c
  3269  001156  D003               	goto	l251
  3270                           
  3271                           ; BSR set to: 0
  3272                           ;doprnt.c: 1340: c = prec;
  3273  001158  C092  F094         	movff	sprintf@prec,sprintf@c
  3274  00115C  D010               	goto	l253
  3275  00115E                     l251:
  3276                           
  3277                           ; BSR set to: 0
  3278                           ;doprnt.c: 1341: else if(prec < c)
  3279                           
  3280                           ; BSR set to: 0
  3281  00115E  5193               	movf	(sprintf@prec+1)& (0+255),w,b
  3282  001160  0A80               	xorlw	128
  3283  001162  6F76               	movwf	??_sprintf& (0+255),b
  3284  001164  5194               	movf	sprintf@c& (0+255),w,b
  3285  001166  5D92               	subwf	sprintf@prec& (0+255),w,b
  3286  001168  0E80               	movlw	128
  3287  00116A  BF94               	btfsc	sprintf@c& (0+255),7,b
  3288  00116C  0E7F               	movlw	127
  3289  00116E  5976               	subwfb	??_sprintf& (0+255),w,b
  3290  001170  B0D8               	btfsc	status,0,c
  3291  001172  D005               	goto	l253
  3292                           
  3293                           ; BSR set to: 0
  3294                           ;doprnt.c: 1342: prec = c;
  3295  001174  5194               	movf	sprintf@c& (0+255),w,b
  3296  001176  6F92               	movwf	sprintf@prec& (0+255),b
  3297  001178  6B93               	clrf	(sprintf@prec+1)& (0+255),b
  3298  00117A  BF92               	btfsc	sprintf@prec& (0+255),7,b
  3299  00117C  0793               	decf	(sprintf@prec+1)& (0+255),f,b
  3300  00117E                     l253:
  3301                           
  3302                           ; BSR set to: 0
  3303                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3304                           
  3305                           ; BSR set to: 0
  3306                           
  3307                           ; BSR set to: 0
  3308  00117E  518B               	movf	sprintf@width& (0+255),w,b
  3309  001180  118C               	iorwf	(sprintf@width+1)& (0+255),w,b
  3310  001182  B4D8               	btfsc	status,2,c
  3311  001184  D00D               	goto	l254
  3312                           
  3313                           ; BSR set to: 0
  3314  001186  0E03               	movlw	3
  3315  001188  158D               	andwf	sprintf@flag& (0+255),w,b
  3316  00118A  6F76               	movwf	??_sprintf& (0+255),b
  3317  00118C  0E00               	movlw	0
  3318  00118E  158E               	andwf	(sprintf@flag+1)& (0+255),w,b
  3319  001190  6F77               	movwf	(??_sprintf+1)& (0+255),b
  3320  001192  5176               	movf	??_sprintf& (0+255),w,b
  3321  001194  1177               	iorwf	(??_sprintf+1)& (0+255),w,b
  3322  001196  B4D8               	btfsc	status,2,c
  3323  001198  D003               	goto	l254
  3324                           
  3325                           ; BSR set to: 0
  3326                           ;doprnt.c: 1346: width--;
  3327  00119A  078B               	decf	sprintf@width& (0+255),f,b
  3328  00119C  A0D8               	btfss	status,0,c
  3329  00119E  078C               	decf	(sprintf@width+1)& (0+255),f,b
  3330  0011A0                     l254:
  3331                           
  3332                           ; BSR set to: 0
  3333                           ;doprnt.c: 1348: if(flag & 0x4000) {
  3334                           
  3335                           ; BSR set to: 0
  3336  0011A0  AD8E               	btfss	(sprintf@flag+1)& (0+255),6,b
  3337  0011A2  D013               	goto	l257
  3338                           
  3339                           ; BSR set to: 0
  3340                           ;doprnt.c: 1349: if(width > prec)
  3341  0011A4  518B               	movf	sprintf@width& (0+255),w,b
  3342  0011A6  5D92               	subwf	sprintf@prec& (0+255),w,b
  3343  0011A8  5193               	movf	(sprintf@prec+1)& (0+255),w,b
  3344  0011AA  0A80               	xorlw	128
  3345  0011AC  6F76               	movwf	??_sprintf& (0+255),b
  3346  0011AE  518C               	movf	(sprintf@width+1)& (0+255),w,b
  3347  0011B0  0A80               	xorlw	128
  3348  0011B2  5976               	subwfb	??_sprintf& (0+255),w,b
  3349  0011B4  B0D8               	btfsc	status,0,c
  3350  0011B6  D005               	goto	l256
  3351                           
  3352                           ; BSR set to: 0
  3353                           ;doprnt.c: 1350: width -= prec;
  3354  0011B8  5192               	movf	sprintf@prec& (0+255),w,b
  3355  0011BA  5F8B               	subwf	sprintf@width& (0+255),f,b
  3356  0011BC  5193               	movf	(sprintf@prec+1)& (0+255),w,b
  3357  0011BE  5B8C               	subwfb	(sprintf@width+1)& (0+255),f,b
  3358  0011C0  D004               	goto	l257
  3359  0011C2                     l256:
  3360                           
  3361                           ; BSR set to: 0
  3362                           ;doprnt.c: 1351: else
  3363                           ;doprnt.c: 1352: width = 0;
  3364                           
  3365                           ; BSR set to: 0
  3366  0011C2  0E00               	movlw	0
  3367  0011C4  6F8C               	movwf	(sprintf@width+1)& (0+255),b
  3368  0011C6  0E00               	movlw	0
  3369  0011C8  6F8B               	movwf	sprintf@width& (0+255),b
  3370  0011CA                     l257:
  3371                           
  3372                           ; BSR set to: 0
  3373                           ;doprnt.c: 1353: }
  3374                           ;doprnt.c: 1381: if(width > c)
  3375                           
  3376                           ; BSR set to: 0
  3377                           
  3378                           ; BSR set to: 0
  3379  0011CA  0E80               	movlw	128
  3380  0011CC  BF94               	btfsc	sprintf@c& (0+255),7,b
  3381  0011CE  0E7F               	movlw	127
  3382  0011D0  6F76               	movwf	??_sprintf& (0+255),b
  3383  0011D2  518B               	movf	sprintf@width& (0+255),w,b
  3384  0011D4  5D94               	subwf	sprintf@c& (0+255),w,b
  3385  0011D6  518C               	movf	(sprintf@width+1)& (0+255),w,b
  3386  0011D8  0A80               	xorlw	128
  3387  0011DA  5976               	subwfb	??_sprintf& (0+255),w,b
  3388  0011DC  B0D8               	btfsc	status,0,c
  3389  0011DE  D007               	goto	l258
  3390                           
  3391                           ; BSR set to: 0
  3392                           ;doprnt.c: 1382: width -= c;
  3393  0011E0  5194               	movf	sprintf@c& (0+255),w,b
  3394  0011E2  5F8B               	subwf	sprintf@width& (0+255),f,b
  3395  0011E4  0E00               	movlw	0
  3396  0011E6  BF94               	btfsc	sprintf@c& (0+255),7,b
  3397  0011E8  0EFF               	movlw	255
  3398  0011EA  5B8C               	subwfb	(sprintf@width+1)& (0+255),f,b
  3399  0011EC  D004               	goto	l259
  3400  0011EE                     l258:
  3401                           
  3402                           ; BSR set to: 0
  3403                           ;doprnt.c: 1383: else
  3404                           ;doprnt.c: 1384: width = 0;
  3405                           
  3406                           ; BSR set to: 0
  3407  0011EE  0E00               	movlw	0
  3408  0011F0  6F8C               	movwf	(sprintf@width+1)& (0+255),b
  3409  0011F2  0E00               	movlw	0
  3410  0011F4  6F8B               	movwf	sprintf@width& (0+255),b
  3411  0011F6                     l259:
  3412                           
  3413                           ; BSR set to: 0
  3414                           ;doprnt.c: 1387: if(flag & 0x04) {
  3415                           
  3416                           ; BSR set to: 0
  3417  0011F6  A58D               	btfss	sprintf@flag& (0+255),2,b
  3418  0011F8  D022               	goto	l260
  3419                           
  3420                           ; BSR set to: 0
  3421                           ;doprnt.c: 1392: if(flag & 0x03)
  3422  0011FA  0E03               	movlw	3
  3423  0011FC  158D               	andwf	sprintf@flag& (0+255),w,b
  3424  0011FE  6F76               	movwf	??_sprintf& (0+255),b
  3425  001200  0E00               	movlw	0
  3426  001202  158E               	andwf	(sprintf@flag+1)& (0+255),w,b
  3427  001204  6F77               	movwf	(??_sprintf+1)& (0+255),b
  3428  001206  5176               	movf	??_sprintf& (0+255),w,b
  3429  001208  1177               	iorwf	(??_sprintf+1)& (0+255),w,b
  3430  00120A  B4D8               	btfsc	status,2,c
  3431  00120C  D008               	goto	l261
  3432                           
  3433                           ; BSR set to: 0
  3434                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  3435  00120E  C06E  FFD9         	movff	sprintf@sp,fsr2l
  3436  001212  C06F  FFDA         	movff	sprintf@sp+1,fsr2h
  3437  001216  0E2D               	movlw	45
  3438  001218  6EDF               	movwf	indf2,c
  3439                           
  3440                           ; BSR set to: 0
  3441  00121A  4B6E               	infsnz	sprintf@sp& (0+255),f,b
  3442  00121C  2B6F               	incf	(sprintf@sp+1)& (0+255),f,b
  3443  00121E                     l261:
  3444                           
  3445                           ; BSR set to: 0
  3446                           ;doprnt.c: 1415: if(width)
  3447                           
  3448                           ; BSR set to: 0
  3449  00121E  518B               	movf	sprintf@width& (0+255),w,b
  3450  001220  118C               	iorwf	(sprintf@width+1)& (0+255),w,b
  3451  001222  B4D8               	btfsc	status,2,c
  3452  001224  D074               	goto	l270
  3453                           
  3454                           ; BSR set to: 0
  3455                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  3456                           
  3457                           ; BSR set to: 0
  3458                           
  3459                           ;doprnt.c: 1416: do
  3460  001226  C06E  FFD9         	movff	sprintf@sp,fsr2l
  3461  00122A  C06F  FFDA         	movff	sprintf@sp+1,fsr2h
  3462  00122E  0E30               	movlw	48
  3463  001230  6EDF               	movwf	indf2,c
  3464                           
  3465                           ; BSR set to: 0
  3466  001232  4B6E               	infsnz	sprintf@sp& (0+255),f,b
  3467  001234  2B6F               	incf	(sprintf@sp+1)& (0+255),f,b
  3468                           
  3469                           ; BSR set to: 0
  3470                           ;doprnt.c: 1418: while(--width);
  3471  001236  078B               	decf	sprintf@width& (0+255),f,b
  3472  001238  A0D8               	btfss	status,0,c
  3473  00123A  078C               	decf	(sprintf@width+1)& (0+255),f,b
  3474  00123C  D7F0               	goto	l261
  3475  00123E                     l260:
  3476                           
  3477                           ; BSR set to: 0
  3478                           ;doprnt.c: 1422: {
  3479                           ;doprnt.c: 1424: if(width
  3480                           ;doprnt.c: 1428: )
  3481                           
  3482                           ; BSR set to: 0
  3483  00123E  518B               	movf	sprintf@width& (0+255),w,b
  3484  001240  118C               	iorwf	(sprintf@width+1)& (0+255),w,b
  3485  001242  B4D8               	btfsc	status,2,c
  3486  001244  D00F               	goto	u3640
  3487  001246                     u3630:
  3488                           
  3489                           ; BSR set to: 0
  3490                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  3491                           
  3492                           ; BSR set to: 0
  3493                           
  3494                           ;doprnt.c: 1429: do
  3495  001246  C06E  FFD9         	movff	sprintf@sp,fsr2l
  3496  00124A  C06F  FFDA         	movff	sprintf@sp+1,fsr2h
  3497  00124E  0E20               	movlw	32
  3498  001250  6EDF               	movwf	indf2,c
  3499                           
  3500                           ; BSR set to: 0
  3501  001252  4B6E               	infsnz	sprintf@sp& (0+255),f,b
  3502  001254  2B6F               	incf	(sprintf@sp+1)& (0+255),f,b
  3503                           
  3504                           ; BSR set to: 0
  3505                           ;doprnt.c: 1431: while(--width);
  3506  001256  078B               	decf	sprintf@width& (0+255),f,b
  3507  001258  A0D8               	btfss	status,0,c
  3508  00125A  078C               	decf	(sprintf@width+1)& (0+255),f,b
  3509  00125C  518B               	movf	sprintf@width& (0+255),w,b
  3510  00125E  118C               	iorwf	(sprintf@width+1)& (0+255),w,b
  3511  001260  A4D8               	btfss	status,2,c
  3512  001262  D7F1               	goto	u3630
  3513  001264                     u3640:
  3514                           
  3515                           ; BSR set to: 0
  3516                           ;doprnt.c: 1438: if(flag & 0x03)
  3517                           
  3518                           ; BSR set to: 0
  3519                           
  3520                           ; BSR set to: 0
  3521  001264  0E03               	movlw	3
  3522  001266  158D               	andwf	sprintf@flag& (0+255),w,b
  3523  001268  6F76               	movwf	??_sprintf& (0+255),b
  3524  00126A  0E00               	movlw	0
  3525  00126C  158E               	andwf	(sprintf@flag+1)& (0+255),w,b
  3526  00126E  6F77               	movwf	(??_sprintf+1)& (0+255),b
  3527  001270  5176               	movf	??_sprintf& (0+255),w,b
  3528  001272  1177               	iorwf	(??_sprintf+1)& (0+255),w,b
  3529  001274  B4D8               	btfsc	status,2,c
  3530  001276  D04B               	goto	l270
  3531                           
  3532                           ; BSR set to: 0
  3533                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  3534  001278  C06E  FFD9         	movff	sprintf@sp,fsr2l
  3535  00127C  C06F  FFDA         	movff	sprintf@sp+1,fsr2h
  3536  001280  0E2D               	movlw	45
  3537  001282  6EDF               	movwf	indf2,c
  3538  001284  D042               	goto	l3609
  3539  001286                     l3605:
  3540                           
  3541                           ; BSR set to: 0
  3542                           ;doprnt.c: 1478: {
  3543                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3544  001286  C092  F076         	movff	sprintf@prec,??_sprintf
  3545  00128A  C093  F077         	movff	sprintf@prec+1,??_sprintf+1
  3546  00128E  90D8               	bcf	status,0,c
  3547  001290  3776               	rlcf	??_sprintf& (0+255),f,b
  3548  001292  3777               	rlcf	(??_sprintf+1)& (0+255),f,b
  3549  001294  90D8               	bcf	status,0,c
  3550  001296  3776               	rlcf	??_sprintf& (0+255),f,b
  3551  001298  3777               	rlcf	(??_sprintf+1)& (0+255),f,b
  3552  00129A  0E01               	movlw	low _dpowers
  3553  00129C  2576               	addwf	??_sprintf& (0+255),w,b
  3554  00129E  6EF6               	movwf	tblptrl,c
  3555  0012A0  0E08               	movlw	high _dpowers
  3556  0012A2  2177               	addwfc	(??_sprintf+1)& (0+255),w,b
  3557  0012A4  6EF7               	movwf	tblptrh,c
  3558  0012A6                     	if	0	;There are less than 3 active tblptr bytes
  3559  0012A6                     	endif
  3560  0012A6  0009               	tblrd		*+
  3561  0012A8  CFF5 F005          	movff	tablat,___lldiv@divisor
  3562  0012AC  0009               	tblrd		*+
  3563  0012AE  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  3564  0012B2  0009               	tblrd		*+
  3565  0012B4  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  3566  0012B8  000A               	tblrd		*-
  3567  0012BA  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  3568  0012BE  C081  F001         	movff	sprintf@val,___lldiv@dividend
  3569  0012C2  C082  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  3570  0012C6  C083  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  3571  0012CA  C084  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  3572  0012CE  EC88  F017         	call	___lldiv	;wreg free
  3573  0012D2  C001  F00E         	movff	?___lldiv,___llmod@dividend
  3574  0012D6  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  3575  0012DA  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  3576  0012DE  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  3577  0012E2  0E0A               	movlw	10
  3578  0012E4  6E12               	movwf	___llmod@divisor,c
  3579  0012E6  0E00               	movlw	0
  3580  0012E8  6E13               	movwf	___llmod@divisor+1,c
  3581  0012EA  0E00               	movlw	0
  3582  0012EC  6E14               	movwf	___llmod@divisor+2,c
  3583  0012EE  0E00               	movlw	0
  3584  0012F0  6E15               	movwf	___llmod@divisor+3,c
  3585  0012F2  ECB6  F018         	call	___llmod	;wreg free
  3586  0012F6  500E               	movf	?___llmod,w,c
  3587  0012F8  0F30               	addlw	48
  3588  0012FA  0100               	movlb	0	; () banked
  3589  0012FC  6F94               	movwf	sprintf@c& (0+255),b
  3590                           
  3591                           ; BSR set to: 0
  3592                           ;doprnt.c: 1523: }
  3593                           ;doprnt.c: 1524: ((*sp++ = (c)));
  3594  0012FE  C06E  FFD9         	movff	sprintf@sp,fsr2l
  3595  001302  C06F  FFDA         	movff	sprintf@sp+1,fsr2h
  3596  001306  C094  FFDF         	movff	sprintf@c,indf2
  3597  00130A                     l3609:
  3598                           
  3599                           ; BSR set to: 0
  3600  00130A  4B6E               	infsnz	sprintf@sp& (0+255),f,b
  3601  00130C  2B6F               	incf	(sprintf@sp+1)& (0+255),f,b
  3602  00130E                     l270:
  3603                           
  3604                           ; BSR set to: 0
  3605                           
  3606                           ; BSR set to: 0
  3607  00130E  0792               	decf	sprintf@prec& (0+255),f,b
  3608  001310  A0D8               	btfss	status,0,c
  3609  001312  0793               	decf	(sprintf@prec+1)& (0+255),f,b
  3610  001314  2992               	incf	sprintf@prec& (0+255),w,b
  3611  001316  E1B7               	bnz	l3605
  3612  001318  2993               	incf	(sprintf@prec+1)& (0+255),w,b
  3613  00131A  A4D8               	btfss	status,2,c
  3614  00131C  D7B4               	goto	l271
  3615  00131E                     u3660:
  3616                           
  3617                           ; BSR set to: 0
  3618                           
  3619                           ; BSR set to: 0
  3620                           
  3621                           ; BSR set to: 0
  3622  00131E  C070  FFF6         	movff	sprintf@f,tblptrl
  3623  001322  C071  FFF7         	movff	sprintf@f+1,tblptrh
  3624  001326  4B70               	infsnz	sprintf@f& (0+255),f,b
  3625  001328  2B71               	incf	(sprintf@f+1)& (0+255),f,b
  3626  00132A                     	if	0	;tblptru may be non-zero
  3627  00132A                     	endif
  3628  00132A                     	if	0	;tblptru may be non-zero
  3629  00132A                     	endif
  3630  00132A  0008               	tblrd		*
  3631  00132C  CFF5 F094          	movff	tablat,sprintf@c
  3632  001330  5194               	movf	sprintf@c& (0+255),w,b
  3633  001332  A4D8               	btfss	status,2,c
  3634  001334  EF66  F004         	goto	l171
  3635  001338                     u3670:
  3636                           
  3637                           ; BSR set to: 0
  3638                           ;doprnt.c: 1538: *sp = 0;
  3639                           
  3640                           ; BSR set to: 0
  3641                           
  3642                           ;doprnt.c: 1525: }
  3643                           ;doprnt.c: 1533: }
  3644                           ;doprnt.c: 1535: alldone:
  3645                           
  3646                           ; BSR set to: 0
  3647  001338  C06E  FFD9         	movff	sprintf@sp,fsr2l
  3648  00133C  C06F  FFDA         	movff	sprintf@sp+1,fsr2h
  3649  001340  0E00               	movlw	0
  3650  001342  6EDF               	movwf	indf2,c
  3651  001344  0012               	return	
  3652  001346                     __end_of_sprintf:
  3653                           	opt stack 0
  3654                           tblptru	equ	0xFF8
  3655                           tblptrh	equ	0xFF7
  3656                           tblptrl	equ	0xFF6
  3657                           tablat	equ	0xFF5
  3658                           prodh	equ	0xFF4
  3659                           prodl	equ	0xFF3
  3660                           intcon	equ	0xFF2
  3661                           postinc0	equ	0xFEE
  3662                           wreg	equ	0xFE8
  3663                           indf2	equ	0xFDF
  3664                           postinc2	equ	0xFDE
  3665                           postdec2	equ	0xFDD
  3666                           fsr2h	equ	0xFDA
  3667                           fsr2l	equ	0xFD9
  3668                           status	equ	0xFD8
  3669                           
  3670 ;; *************** function _scale *****************
  3671 ;; Defined at:
  3672 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  3673 ;; Parameters:    Size  Location     Type
  3674 ;;  scl             1    wreg     char 
  3675 ;; Auto vars:     Size  Location     Type
  3676 ;;  scl             1   68[COMRAM] char 
  3677 ;; Return value:  Size  Location     Type
  3678 ;;                  3   62[COMRAM] char 
  3679 ;; Registers used:
  3680 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3681 ;; Tracked objects:
  3682 ;;		On entry : 0/0
  3683 ;;		On exit  : 0/0
  3684 ;;		Unchanged: 0/0
  3685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3686 ;;      Params:         3       0       0       0       0       0       0       0       0
  3687 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3688 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3689 ;;      Totals:         7       0       0       0       0       0       0       0       0
  3690 ;;Total ram usage:        7 bytes
  3691 ;; Hardware stack levels used:    1
  3692 ;; Hardware stack levels required when called:    2
  3693 ;; This function calls:
  3694 ;;		___awdiv
  3695 ;;		___awmod
  3696 ;;		___ftmul
  3697 ;;		___wmul
  3698 ;; This function is called by:
  3699 ;;		_sprintf
  3700 ;; This function uses a non-reentrant model
  3701 ;;
  3702                           
  3703                           	psect	text2
  3704  001802                     __ptext2:
  3705                           	opt stack 0
  3706  001802                     _scale:
  3707                           	opt stack 27
  3708                           
  3709                           ; BSR set to: 0
  3710                           ;incstack = 0
  3711                           ;scale@scl stored from wreg
  3712  001802  6E45               	movwf	scale@scl,c
  3713                           
  3714                           ;doprnt.c: 428: if(scl < 0) {
  3715  001804  AE45               	btfss	scale@scl,7,c
  3716  001806  D101               	goto	l160
  3717                           
  3718                           ;doprnt.c: 429: scl = -scl;
  3719  001808  6C45               	negf	scale@scl,c
  3720                           
  3721                           ;doprnt.c: 430: if(scl>=110)
  3722  00180A  5045               	movf	scale@scl,w,c
  3723  00180C  0A80               	xorlw	128
  3724  00180E  0F12               	addlw	-238
  3725  001810  A0D8               	btfss	status,0,c
  3726  001812  D091               	goto	l161
  3727                           
  3728                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3729  001814  0E00               	movlw	0
  3730  001816  6E12               	movwf	___wmul@multiplicand+1,c
  3731  001818  0E03               	movlw	3
  3732  00181A  6E11               	movwf	___wmul@multiplicand,c
  3733  00181C  0E00               	movlw	0
  3734  00181E  6E0A               	movwf	___awdiv@divisor+1,c
  3735  001820  0E0A               	movlw	10
  3736  001822  6E09               	movwf	___awdiv@divisor,c
  3737  001824  0E00               	movlw	0
  3738  001826  6E04               	movwf	___awmod@divisor+1,c
  3739  001828  0E64               	movlw	100
  3740  00182A  6E03               	movwf	___awmod@divisor,c
  3741  00182C  5045               	movf	scale@scl,w,c
  3742  00182E  6E01               	movwf	___awmod@dividend,c
  3743  001830  6A02               	clrf	___awmod@dividend+1,c
  3744  001832  BE01               	btfsc	___awmod@dividend,7,c
  3745  001834  0602               	decf	___awmod@dividend+1,f,c
  3746  001836  EC7E  F018         	call	___awmod	;wreg free
  3747  00183A  C001  F007         	movff	?___awmod,___awdiv@dividend
  3748  00183E  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3749  001842  EC46  F017         	call	___awdiv	;wreg free
  3750  001846  0E09               	movlw	9
  3751  001848  2407               	addwf	?___awdiv,w,c
  3752  00184A  6E0F               	movwf	___wmul@multiplier,c
  3753  00184C  0E00               	movlw	0
  3754  00184E  2008               	addwfc	?___awdiv+1,w,c
  3755  001850  6E10               	movwf	___wmul@multiplier+1,c
  3756  001852  EC69  F019         	call	___wmul	;wreg free
  3757  001856  0E50               	movlw	low __npowers_
  3758  001858  240F               	addwf	?___wmul,w,c
  3759  00185A  6EF6               	movwf	tblptrl,c
  3760  00185C  0E08               	movlw	high __npowers_
  3761  00185E  2010               	addwfc	?___wmul+1,w,c
  3762  001860  6EF7               	movwf	tblptrh,c
  3763  001862                     	if	0	;There are less than 3 active tblptr bytes
  3764  001862                     	endif
  3765  001862  0009               	tblrd		*+
  3766  001864  CFF5 F033          	movff	tablat,___ftmul@f2
  3767  001868  0009               	tblrd		*+
  3768  00186A  CFF5 F034          	movff	tablat,___ftmul@f2+1
  3769  00186E  000A               	tblrd		*-
  3770  001870  CFF5 F035          	movff	tablat,___ftmul@f2+2
  3771  001874  0E00               	movlw	0
  3772  001876  6E0A               	movwf	___awdiv@divisor+1,c
  3773  001878  0E64               	movlw	100
  3774  00187A  6E09               	movwf	___awdiv@divisor,c
  3775  00187C  5045               	movf	scale@scl,w,c
  3776  00187E  6E07               	movwf	___awdiv@dividend,c
  3777  001880  6A08               	clrf	___awdiv@dividend+1,c
  3778  001882  BE07               	btfsc	___awdiv@dividend,7,c
  3779  001884  0608               	decf	___awdiv@dividend+1,f,c
  3780  001886  EC46  F017         	call	___awdiv	;wreg free
  3781  00188A  0E12               	movlw	18
  3782  00188C  2407               	addwf	?___awdiv,w,c
  3783  00188E  6E0F               	movwf	___wmul@multiplier,c
  3784  001890  0E00               	movlw	0
  3785  001892  2008               	addwfc	?___awdiv+1,w,c
  3786  001894  6E10               	movwf	___wmul@multiplier+1,c
  3787  001896  0E00               	movlw	0
  3788  001898  6E12               	movwf	___wmul@multiplicand+1,c
  3789  00189A  0E03               	movlw	3
  3790  00189C  6E11               	movwf	___wmul@multiplicand,c
  3791  00189E  EC69  F019         	call	___wmul	;wreg free
  3792  0018A2  0E50               	movlw	low __npowers_
  3793  0018A4  240F               	addwf	?___wmul,w,c
  3794  0018A6  6EF6               	movwf	tblptrl,c
  3795  0018A8  0E08               	movlw	high __npowers_
  3796  0018AA  2010               	addwfc	?___wmul+1,w,c
  3797  0018AC  6EF7               	movwf	tblptrh,c
  3798  0018AE                     	if	0	;There are less than 3 active tblptr bytes
  3799  0018AE                     	endif
  3800  0018AE  0009               	tblrd		*+
  3801  0018B0  CFF5 F030          	movff	tablat,___ftmul@f1
  3802  0018B4  0009               	tblrd		*+
  3803  0018B6  CFF5 F031          	movff	tablat,___ftmul@f1+1
  3804  0018BA  000A               	tblrd		*-
  3805  0018BC  CFF5 F032          	movff	tablat,___ftmul@f1+2
  3806  0018C0  EC8B  F014         	call	___ftmul	;wreg free
  3807  0018C4  C030  F042         	movff	?___ftmul,_scale$1612
  3808  0018C8  C031  F043         	movff	?___ftmul+1,_scale$1612+1
  3809  0018CC  C032  F044         	movff	?___ftmul+2,_scale$1612+2
  3810                           
  3811                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3812  0018D0  C042  F030         	movff	_scale$1612,___ftmul@f1
  3813  0018D4  C043  F031         	movff	_scale$1612+1,___ftmul@f1+1
  3814  0018D8  C044  F032         	movff	_scale$1612+2,___ftmul@f1+2
  3815  0018DC  0E00               	movlw	0
  3816  0018DE  6E12               	movwf	___wmul@multiplicand+1,c
  3817  0018E0  0E03               	movlw	3
  3818  0018E2  6E11               	movwf	___wmul@multiplicand,c
  3819  0018E4  0E00               	movlw	0
  3820  0018E6  6E04               	movwf	___awmod@divisor+1,c
  3821  0018E8  0E0A               	movlw	10
  3822  0018EA  6E03               	movwf	___awmod@divisor,c
  3823  0018EC  5045               	movf	scale@scl,w,c
  3824  0018EE  6E01               	movwf	___awmod@dividend,c
  3825  0018F0  6A02               	clrf	___awmod@dividend+1,c
  3826  0018F2  BE01               	btfsc	___awmod@dividend,7,c
  3827  0018F4  0602               	decf	___awmod@dividend+1,f,c
  3828  0018F6  EC7E  F018         	call	___awmod	;wreg free
  3829  0018FA  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3830  0018FE  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3831  001902  EC69  F019         	call	___wmul	;wreg free
  3832  001906  0E50               	movlw	low __npowers_
  3833  001908  240F               	addwf	?___wmul,w,c
  3834  00190A  6EF6               	movwf	tblptrl,c
  3835  00190C  0E08               	movlw	high __npowers_
  3836  00190E  2010               	addwfc	?___wmul+1,w,c
  3837  001910  6EF7               	movwf	tblptrh,c
  3838  001912                     	if	0	;There are less than 3 active tblptr bytes
  3839  001912                     	endif
  3840  001912  0009               	tblrd		*+
  3841  001914  CFF5 F033          	movff	tablat,___ftmul@f2
  3842  001918  0009               	tblrd		*+
  3843  00191A  CFF5 F034          	movff	tablat,___ftmul@f2+1
  3844  00191E  000A               	tblrd		*-
  3845  001920  CFF5 F035          	movff	tablat,___ftmul@f2+2
  3846  001924  EC8B  F014         	call	___ftmul	;wreg free
  3847  001928  C030  F03F         	movff	?___ftmul,?_scale
  3848  00192C  C031  F040         	movff	?___ftmul+1,?_scale+1
  3849  001930  C032  F041         	movff	?___ftmul+2,?_scale+2
  3850  001934  0012               	return	
  3851  001936                     l161:
  3852                           
  3853                           ;doprnt.c: 432: else if(scl > 10)
  3854  001936  5045               	movf	scale@scl,w,c
  3855  001938  0A80               	xorlw	128
  3856  00193A  0F75               	addlw	-139
  3857  00193C  A0D8               	btfss	status,0,c
  3858  00193E  D053               	goto	l164
  3859                           
  3860                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3861  001940  0E00               	movlw	0
  3862  001942  6E0A               	movwf	___awdiv@divisor+1,c
  3863  001944  0E0A               	movlw	10
  3864  001946  6E09               	movwf	___awdiv@divisor,c
  3865  001948  5045               	movf	scale@scl,w,c
  3866  00194A  6E07               	movwf	___awdiv@dividend,c
  3867  00194C  6A08               	clrf	___awdiv@dividend+1,c
  3868  00194E  BE07               	btfsc	___awdiv@dividend,7,c
  3869  001950  0608               	decf	___awdiv@dividend+1,f,c
  3870  001952  EC46  F017         	call	___awdiv	;wreg free
  3871  001956  0E09               	movlw	9
  3872  001958  2407               	addwf	?___awdiv,w,c
  3873  00195A  6E0F               	movwf	___wmul@multiplier,c
  3874  00195C  0E00               	movlw	0
  3875  00195E  2008               	addwfc	?___awdiv+1,w,c
  3876  001960  6E10               	movwf	___wmul@multiplier+1,c
  3877  001962  0E00               	movlw	0
  3878  001964  6E12               	movwf	___wmul@multiplicand+1,c
  3879  001966  0E03               	movlw	3
  3880  001968  6E11               	movwf	___wmul@multiplicand,c
  3881  00196A  EC69  F019         	call	___wmul	;wreg free
  3882  00196E  0E50               	movlw	low __npowers_
  3883  001970  240F               	addwf	?___wmul,w,c
  3884  001972  6EF6               	movwf	tblptrl,c
  3885  001974  0E08               	movlw	high __npowers_
  3886  001976  2010               	addwfc	?___wmul+1,w,c
  3887  001978  6EF7               	movwf	tblptrh,c
  3888  00197A                     	if	0	;There are less than 3 active tblptr bytes
  3889  00197A                     	endif
  3890  00197A  0009               	tblrd		*+
  3891  00197C  CFF5 F030          	movff	tablat,___ftmul@f1
  3892  001980  0009               	tblrd		*+
  3893  001982  CFF5 F031          	movff	tablat,___ftmul@f1+1
  3894  001986  000A               	tblrd		*-
  3895  001988  CFF5 F032          	movff	tablat,___ftmul@f1+2
  3896  00198C  0E00               	movlw	0
  3897  00198E  6E12               	movwf	___wmul@multiplicand+1,c
  3898  001990  0E03               	movlw	3
  3899  001992  6E11               	movwf	___wmul@multiplicand,c
  3900  001994  0E00               	movlw	0
  3901  001996  6E04               	movwf	___awmod@divisor+1,c
  3902  001998  0E0A               	movlw	10
  3903  00199A  6E03               	movwf	___awmod@divisor,c
  3904  00199C  5045               	movf	scale@scl,w,c
  3905  00199E  6E01               	movwf	___awmod@dividend,c
  3906  0019A0  6A02               	clrf	___awmod@dividend+1,c
  3907  0019A2  BE01               	btfsc	___awmod@dividend,7,c
  3908  0019A4  0602               	decf	___awmod@dividend+1,f,c
  3909  0019A6  EC7E  F018         	call	___awmod	;wreg free
  3910  0019AA  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3911  0019AE  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3912  0019B2  EC69  F019         	call	___wmul	;wreg free
  3913  0019B6  0E50               	movlw	low __npowers_
  3914  0019B8  240F               	addwf	?___wmul,w,c
  3915  0019BA  6EF6               	movwf	tblptrl,c
  3916  0019BC  0E08               	movlw	high __npowers_
  3917  0019BE  2010               	addwfc	?___wmul+1,w,c
  3918  0019C0  6EF7               	movwf	tblptrh,c
  3919  0019C2                     	if	0	;There are less than 3 active tblptr bytes
  3920  0019C2                     	endif
  3921  0019C2  0009               	tblrd		*+
  3922  0019C4  CFF5 F033          	movff	tablat,___ftmul@f2
  3923  0019C8  0009               	tblrd		*+
  3924  0019CA  CFF5 F034          	movff	tablat,___ftmul@f2+1
  3925  0019CE  000A               	tblrd		*-
  3926  0019D0  CFF5 F035          	movff	tablat,___ftmul@f2+2
  3927  0019D4  EC8B  F014         	call	___ftmul	;wreg free
  3928  0019D8  C030  F03F         	movff	?___ftmul,?_scale
  3929  0019DC  C031  F040         	movff	?___ftmul+1,?_scale+1
  3930  0019E0  C032  F041         	movff	?___ftmul+2,?_scale+2
  3931  0019E4  0012               	return	
  3932  0019E6                     l164:
  3933                           
  3934                           ;doprnt.c: 434: return _npowers_[scl];
  3935  0019E6  5045               	movf	scale@scl,w,c
  3936  0019E8  0D03               	mullw	3
  3937  0019EA  0E50               	movlw	low __npowers_
  3938  0019EC  24F3               	addwf	prodl,w,c
  3939  0019EE  6EF6               	movwf	tblptrl,c
  3940  0019F0  0E08               	movlw	high __npowers_
  3941  0019F2  20F4               	addwfc	prodh,w,c
  3942  0019F4  6EF7               	movwf	tblptrh,c
  3943  0019F6                     	if	0	;There are less than 3 active tblptr bytes
  3944  0019F6                     	endif
  3945  0019F6  0009               	tblrd		*+
  3946  0019F8  CFF5 F03F          	movff	tablat,?_scale
  3947  0019FC  0009               	tblrd		*+
  3948  0019FE  CFF5 F040          	movff	tablat,?_scale+1
  3949  001A02  000A               	tblrd		*-
  3950  001A04  CFF5 F041          	movff	tablat,?_scale+2
  3951  001A08  0012               	return	
  3952  001A0A                     l160:
  3953                           
  3954                           ;doprnt.c: 435: }
  3955                           ;doprnt.c: 436: if(scl>=110)
  3956  001A0A  5045               	movf	scale@scl,w,c
  3957  001A0C  0A80               	xorlw	128
  3958  001A0E  0F12               	addlw	-238
  3959  001A10  A0D8               	btfss	status,0,c
  3960  001A12  D091               	goto	l165
  3961                           
  3962                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3963  001A14  0E00               	movlw	0
  3964  001A16  6E12               	movwf	___wmul@multiplicand+1,c
  3965  001A18  0E03               	movlw	3
  3966  001A1A  6E11               	movwf	___wmul@multiplicand,c
  3967  001A1C  0E00               	movlw	0
  3968  001A1E  6E0A               	movwf	___awdiv@divisor+1,c
  3969  001A20  0E0A               	movlw	10
  3970  001A22  6E09               	movwf	___awdiv@divisor,c
  3971  001A24  0E00               	movlw	0
  3972  001A26  6E04               	movwf	___awmod@divisor+1,c
  3973  001A28  0E64               	movlw	100
  3974  001A2A  6E03               	movwf	___awmod@divisor,c
  3975  001A2C  5045               	movf	scale@scl,w,c
  3976  001A2E  6E01               	movwf	___awmod@dividend,c
  3977  001A30  6A02               	clrf	___awmod@dividend+1,c
  3978  001A32  BE01               	btfsc	___awmod@dividend,7,c
  3979  001A34  0602               	decf	___awmod@dividend+1,f,c
  3980  001A36  EC7E  F018         	call	___awmod	;wreg free
  3981  001A3A  C001  F007         	movff	?___awmod,___awdiv@dividend
  3982  001A3E  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3983  001A42  EC46  F017         	call	___awdiv	;wreg free
  3984  001A46  0E09               	movlw	9
  3985  001A48  2407               	addwf	?___awdiv,w,c
  3986  001A4A  6E0F               	movwf	___wmul@multiplier,c
  3987  001A4C  0E00               	movlw	0
  3988  001A4E  2008               	addwfc	?___awdiv+1,w,c
  3989  001A50  6E10               	movwf	___wmul@multiplier+1,c
  3990  001A52  EC69  F019         	call	___wmul	;wreg free
  3991  001A56  0E29               	movlw	low __powers_
  3992  001A58  240F               	addwf	?___wmul,w,c
  3993  001A5A  6EF6               	movwf	tblptrl,c
  3994  001A5C  0E08               	movlw	high __powers_
  3995  001A5E  2010               	addwfc	?___wmul+1,w,c
  3996  001A60  6EF7               	movwf	tblptrh,c
  3997  001A62                     	if	0	;There are less than 3 active tblptr bytes
  3998  001A62                     	endif
  3999  001A62  0009               	tblrd		*+
  4000  001A64  CFF5 F033          	movff	tablat,___ftmul@f2
  4001  001A68  0009               	tblrd		*+
  4002  001A6A  CFF5 F034          	movff	tablat,___ftmul@f2+1
  4003  001A6E  000A               	tblrd		*-
  4004  001A70  CFF5 F035          	movff	tablat,___ftmul@f2+2
  4005  001A74  0E00               	movlw	0
  4006  001A76  6E0A               	movwf	___awdiv@divisor+1,c
  4007  001A78  0E64               	movlw	100
  4008  001A7A  6E09               	movwf	___awdiv@divisor,c
  4009  001A7C  5045               	movf	scale@scl,w,c
  4010  001A7E  6E07               	movwf	___awdiv@dividend,c
  4011  001A80  6A08               	clrf	___awdiv@dividend+1,c
  4012  001A82  BE07               	btfsc	___awdiv@dividend,7,c
  4013  001A84  0608               	decf	___awdiv@dividend+1,f,c
  4014  001A86  EC46  F017         	call	___awdiv	;wreg free
  4015  001A8A  0E12               	movlw	18
  4016  001A8C  2407               	addwf	?___awdiv,w,c
  4017  001A8E  6E0F               	movwf	___wmul@multiplier,c
  4018  001A90  0E00               	movlw	0
  4019  001A92  2008               	addwfc	?___awdiv+1,w,c
  4020  001A94  6E10               	movwf	___wmul@multiplier+1,c
  4021  001A96  0E00               	movlw	0
  4022  001A98  6E12               	movwf	___wmul@multiplicand+1,c
  4023  001A9A  0E03               	movlw	3
  4024  001A9C  6E11               	movwf	___wmul@multiplicand,c
  4025  001A9E  EC69  F019         	call	___wmul	;wreg free
  4026  001AA2  0E29               	movlw	low __powers_
  4027  001AA4  240F               	addwf	?___wmul,w,c
  4028  001AA6  6EF6               	movwf	tblptrl,c
  4029  001AA8  0E08               	movlw	high __powers_
  4030  001AAA  2010               	addwfc	?___wmul+1,w,c
  4031  001AAC  6EF7               	movwf	tblptrh,c
  4032  001AAE                     	if	0	;There are less than 3 active tblptr bytes
  4033  001AAE                     	endif
  4034  001AAE  0009               	tblrd		*+
  4035  001AB0  CFF5 F030          	movff	tablat,___ftmul@f1
  4036  001AB4  0009               	tblrd		*+
  4037  001AB6  CFF5 F031          	movff	tablat,___ftmul@f1+1
  4038  001ABA  000A               	tblrd		*-
  4039  001ABC  CFF5 F032          	movff	tablat,___ftmul@f1+2
  4040  001AC0  EC8B  F014         	call	___ftmul	;wreg free
  4041  001AC4  C030  F042         	movff	?___ftmul,_scale$1612
  4042  001AC8  C031  F043         	movff	?___ftmul+1,_scale$1612+1
  4043  001ACC  C032  F044         	movff	?___ftmul+2,_scale$1612+2
  4044                           
  4045                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4046  001AD0  C042  F030         	movff	_scale$1612,___ftmul@f1
  4047  001AD4  C043  F031         	movff	_scale$1612+1,___ftmul@f1+1
  4048  001AD8  C044  F032         	movff	_scale$1612+2,___ftmul@f1+2
  4049  001ADC  0E00               	movlw	0
  4050  001ADE  6E12               	movwf	___wmul@multiplicand+1,c
  4051  001AE0  0E03               	movlw	3
  4052  001AE2  6E11               	movwf	___wmul@multiplicand,c
  4053  001AE4  0E00               	movlw	0
  4054  001AE6  6E04               	movwf	___awmod@divisor+1,c
  4055  001AE8  0E0A               	movlw	10
  4056  001AEA  6E03               	movwf	___awmod@divisor,c
  4057  001AEC  5045               	movf	scale@scl,w,c
  4058  001AEE  6E01               	movwf	___awmod@dividend,c
  4059  001AF0  6A02               	clrf	___awmod@dividend+1,c
  4060  001AF2  BE01               	btfsc	___awmod@dividend,7,c
  4061  001AF4  0602               	decf	___awmod@dividend+1,f,c
  4062  001AF6  EC7E  F018         	call	___awmod	;wreg free
  4063  001AFA  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4064  001AFE  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4065  001B02  EC69  F019         	call	___wmul	;wreg free
  4066  001B06  0E29               	movlw	low __powers_
  4067  001B08  240F               	addwf	?___wmul,w,c
  4068  001B0A  6EF6               	movwf	tblptrl,c
  4069  001B0C  0E08               	movlw	high __powers_
  4070  001B0E  2010               	addwfc	?___wmul+1,w,c
  4071  001B10  6EF7               	movwf	tblptrh,c
  4072  001B12                     	if	0	;There are less than 3 active tblptr bytes
  4073  001B12                     	endif
  4074  001B12  0009               	tblrd		*+
  4075  001B14  CFF5 F033          	movff	tablat,___ftmul@f2
  4076  001B18  0009               	tblrd		*+
  4077  001B1A  CFF5 F034          	movff	tablat,___ftmul@f2+1
  4078  001B1E  000A               	tblrd		*-
  4079  001B20  CFF5 F035          	movff	tablat,___ftmul@f2+2
  4080  001B24  EC8B  F014         	call	___ftmul	;wreg free
  4081  001B28  C030  F03F         	movff	?___ftmul,?_scale
  4082  001B2C  C031  F040         	movff	?___ftmul+1,?_scale+1
  4083  001B30  C032  F041         	movff	?___ftmul+2,?_scale+2
  4084  001B34  0012               	return	
  4085  001B36                     l165:
  4086                           
  4087                           ;doprnt.c: 438: else if(scl > 10)
  4088  001B36  5045               	movf	scale@scl,w,c
  4089  001B38  0A80               	xorlw	128
  4090  001B3A  0F75               	addlw	-139
  4091  001B3C  A0D8               	btfss	status,0,c
  4092  001B3E  D053               	goto	l167
  4093                           
  4094                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  4095  001B40  0E00               	movlw	0
  4096  001B42  6E0A               	movwf	___awdiv@divisor+1,c
  4097  001B44  0E0A               	movlw	10
  4098  001B46  6E09               	movwf	___awdiv@divisor,c
  4099  001B48  5045               	movf	scale@scl,w,c
  4100  001B4A  6E07               	movwf	___awdiv@dividend,c
  4101  001B4C  6A08               	clrf	___awdiv@dividend+1,c
  4102  001B4E  BE07               	btfsc	___awdiv@dividend,7,c
  4103  001B50  0608               	decf	___awdiv@dividend+1,f,c
  4104  001B52  EC46  F017         	call	___awdiv	;wreg free
  4105  001B56  0E09               	movlw	9
  4106  001B58  2407               	addwf	?___awdiv,w,c
  4107  001B5A  6E0F               	movwf	___wmul@multiplier,c
  4108  001B5C  0E00               	movlw	0
  4109  001B5E  2008               	addwfc	?___awdiv+1,w,c
  4110  001B60  6E10               	movwf	___wmul@multiplier+1,c
  4111  001B62  0E00               	movlw	0
  4112  001B64  6E12               	movwf	___wmul@multiplicand+1,c
  4113  001B66  0E03               	movlw	3
  4114  001B68  6E11               	movwf	___wmul@multiplicand,c
  4115  001B6A  EC69  F019         	call	___wmul	;wreg free
  4116  001B6E  0E29               	movlw	low __powers_
  4117  001B70  240F               	addwf	?___wmul,w,c
  4118  001B72  6EF6               	movwf	tblptrl,c
  4119  001B74  0E08               	movlw	high __powers_
  4120  001B76  2010               	addwfc	?___wmul+1,w,c
  4121  001B78  6EF7               	movwf	tblptrh,c
  4122  001B7A                     	if	0	;There are less than 3 active tblptr bytes
  4123  001B7A                     	endif
  4124  001B7A  0009               	tblrd		*+
  4125  001B7C  CFF5 F030          	movff	tablat,___ftmul@f1
  4126  001B80  0009               	tblrd		*+
  4127  001B82  CFF5 F031          	movff	tablat,___ftmul@f1+1
  4128  001B86  000A               	tblrd		*-
  4129  001B88  CFF5 F032          	movff	tablat,___ftmul@f1+2
  4130  001B8C  0E00               	movlw	0
  4131  001B8E  6E12               	movwf	___wmul@multiplicand+1,c
  4132  001B90  0E03               	movlw	3
  4133  001B92  6E11               	movwf	___wmul@multiplicand,c
  4134  001B94  0E00               	movlw	0
  4135  001B96  6E04               	movwf	___awmod@divisor+1,c
  4136  001B98  0E0A               	movlw	10
  4137  001B9A  6E03               	movwf	___awmod@divisor,c
  4138  001B9C  5045               	movf	scale@scl,w,c
  4139  001B9E  6E01               	movwf	___awmod@dividend,c
  4140  001BA0  6A02               	clrf	___awmod@dividend+1,c
  4141  001BA2  BE01               	btfsc	___awmod@dividend,7,c
  4142  001BA4  0602               	decf	___awmod@dividend+1,f,c
  4143  001BA6  EC7E  F018         	call	___awmod	;wreg free
  4144  001BAA  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4145  001BAE  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4146  001BB2  EC69  F019         	call	___wmul	;wreg free
  4147  001BB6  0E29               	movlw	low __powers_
  4148  001BB8  240F               	addwf	?___wmul,w,c
  4149  001BBA  6EF6               	movwf	tblptrl,c
  4150  001BBC  0E08               	movlw	high __powers_
  4151  001BBE  2010               	addwfc	?___wmul+1,w,c
  4152  001BC0  6EF7               	movwf	tblptrh,c
  4153  001BC2                     	if	0	;There are less than 3 active tblptr bytes
  4154  001BC2                     	endif
  4155  001BC2  0009               	tblrd		*+
  4156  001BC4  CFF5 F033          	movff	tablat,___ftmul@f2
  4157  001BC8  0009               	tblrd		*+
  4158  001BCA  CFF5 F034          	movff	tablat,___ftmul@f2+1
  4159  001BCE  000A               	tblrd		*-
  4160  001BD0  CFF5 F035          	movff	tablat,___ftmul@f2+2
  4161  001BD4  EC8B  F014         	call	___ftmul	;wreg free
  4162  001BD8  C030  F03F         	movff	?___ftmul,?_scale
  4163  001BDC  C031  F040         	movff	?___ftmul+1,?_scale+1
  4164  001BE0  C032  F041         	movff	?___ftmul+2,?_scale+2
  4165  001BE4  0012               	return	
  4166  001BE6                     l167:
  4167                           
  4168                           ;doprnt.c: 440: return _powers_[scl];
  4169  001BE6  5045               	movf	scale@scl,w,c
  4170  001BE8  0D03               	mullw	3
  4171  001BEA  0E29               	movlw	low __powers_
  4172  001BEC  24F3               	addwf	prodl,w,c
  4173  001BEE  6EF6               	movwf	tblptrl,c
  4174  001BF0  0E08               	movlw	high __powers_
  4175  001BF2  20F4               	addwfc	prodh,w,c
  4176  001BF4  6EF7               	movwf	tblptrh,c
  4177  001BF6                     	if	0	;There are less than 3 active tblptr bytes
  4178  001BF6                     	endif
  4179  001BF6  0009               	tblrd		*+
  4180  001BF8  CFF5 F03F          	movff	tablat,?_scale
  4181  001BFC  0009               	tblrd		*+
  4182  001BFE  CFF5 F040          	movff	tablat,?_scale+1
  4183  001C02  000A               	tblrd		*-
  4184  001C04  CFF5 F041          	movff	tablat,?_scale+2
  4185  001C08  0012               	return	
  4186  001C0A                     __end_of_scale:
  4187                           	opt stack 0
  4188                           tblptru	equ	0xFF8
  4189                           tblptrh	equ	0xFF7
  4190                           tblptrl	equ	0xFF6
  4191                           tablat	equ	0xFF5
  4192                           prodh	equ	0xFF4
  4193                           prodl	equ	0xFF3
  4194                           intcon	equ	0xFF2
  4195                           postinc0	equ	0xFEE
  4196                           wreg	equ	0xFE8
  4197                           indf2	equ	0xFDF
  4198                           postinc2	equ	0xFDE
  4199                           postdec2	equ	0xFDD
  4200                           fsr2h	equ	0xFDA
  4201                           fsr2l	equ	0xFD9
  4202                           status	equ	0xFD8
  4203                           
  4204 ;; *************** function _isdigit *****************
  4205 ;; Defined at:
  4206 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  4207 ;; Parameters:    Size  Location     Type
  4208 ;;  c               1    wreg     unsigned char 
  4209 ;; Auto vars:     Size  Location     Type
  4210 ;;  c               1    2[COMRAM] unsigned char 
  4211 ;; Return value:  Size  Location     Type
  4212 ;;		None               void
  4213 ;; Registers used:
  4214 ;;		wreg, status,2, status,0
  4215 ;; Tracked objects:
  4216 ;;		On entry : 0/0
  4217 ;;		On exit  : 0/0
  4218 ;;		Unchanged: 0/0
  4219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4220 ;;      Params:         0       0       0       0       0       0       0       0       0
  4221 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4222 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4223 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4224 ;;Total ram usage:        3 bytes
  4225 ;; Hardware stack levels used:    1
  4226 ;; This function calls:
  4227 ;;		Nothing
  4228 ;; This function is called by:
  4229 ;;		_sprintf
  4230 ;; This function uses a non-reentrant model
  4231 ;;
  4232                           
  4233                           	psect	text3
  4234  003362                     __ptext3:
  4235                           	opt stack 0
  4236  003362                     _isdigit:
  4237                           	opt stack 29
  4238                           
  4239                           ;incstack = 0
  4240                           ;isdigit@c stored from wreg
  4241  003362  6E03               	movwf	isdigit@c,c
  4242  003364  0E00               	movlw	0
  4243  003366  6E02               	movwf	_isdigit$1209,c
  4244  003368  0E3A               	movlw	58
  4245  00336A  6003               	cpfslt	isdigit@c,c
  4246  00336C  D005               	goto	l644
  4247  00336E  0E2F               	movlw	47
  4248  003370  6403               	cpfsgt	isdigit@c,c
  4249  003372  D002               	goto	l644
  4250  003374  0E01               	movlw	1
  4251  003376  6E02               	movwf	_isdigit$1209,c
  4252  003378                     l644:
  4253  003378  C002  F001         	movff	_isdigit$1209,??_isdigit
  4254  00337C  3001               	rrcf	??_isdigit,w,c
  4255  00337E  0012               	return	
  4256  003380                     __end_of_isdigit:
  4257                           	opt stack 0
  4258                           tblptru	equ	0xFF8
  4259                           tblptrh	equ	0xFF7
  4260                           tblptrl	equ	0xFF6
  4261                           tablat	equ	0xFF5
  4262                           prodh	equ	0xFF4
  4263                           prodl	equ	0xFF3
  4264                           intcon	equ	0xFF2
  4265                           postinc0	equ	0xFEE
  4266                           wreg	equ	0xFE8
  4267                           indf2	equ	0xFDF
  4268                           postinc2	equ	0xFDE
  4269                           postdec2	equ	0xFDD
  4270                           fsr2h	equ	0xFDA
  4271                           fsr2l	equ	0xFD9
  4272                           status	equ	0xFD8
  4273                           
  4274 ;; *************** function _fround *****************
  4275 ;; Defined at:
  4276 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  4277 ;; Parameters:    Size  Location     Type
  4278 ;;  prec            1    wreg     unsigned char 
  4279 ;; Auto vars:     Size  Location     Type
  4280 ;;  prec            1   71[COMRAM] unsigned char 
  4281 ;; Return value:  Size  Location     Type
  4282 ;;                  3   62[COMRAM] unsigned char 
  4283 ;; Registers used:
  4284 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4285 ;; Tracked objects:
  4286 ;;		On entry : 0/0
  4287 ;;		On exit  : 0/0
  4288 ;;		Unchanged: 0/0
  4289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4290 ;;      Params:         3       0       0       0       0       0       0       0       0
  4291 ;;      Locals:         7       0       0       0       0       0       0       0       0
  4292 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4293 ;;      Totals:        10       0       0       0       0       0       0       0       0
  4294 ;;Total ram usage:       10 bytes
  4295 ;; Hardware stack levels used:    1
  4296 ;; Hardware stack levels required when called:    2
  4297 ;; This function calls:
  4298 ;;		___awdiv
  4299 ;;		___awmod
  4300 ;;		___ftmul
  4301 ;;		___wmul
  4302 ;; This function is called by:
  4303 ;;		_sprintf
  4304 ;; This function uses a non-reentrant model
  4305 ;;
  4306                           
  4307                           	psect	text4
  4308  001E68                     __ptext4:
  4309                           	opt stack 0
  4310  001E68                     _fround:
  4311                           	opt stack 27
  4312                           
  4313                           ;incstack = 0
  4314                           ;fround@prec stored from wreg
  4315  001E68  6E48               	movwf	fround@prec,c
  4316                           
  4317                           ;doprnt.c: 413: if(prec>=110)
  4318  001E6A  0E6D               	movlw	109
  4319  001E6C  6448               	cpfsgt	fround@prec,c
  4320  001E6E  D09F               	goto	l154
  4321                           
  4322                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4323  001E70  0E00               	movlw	0
  4324  001E72  6E12               	movwf	___wmul@multiplicand+1,c
  4325  001E74  0E03               	movlw	3
  4326  001E76  6E11               	movwf	___wmul@multiplicand,c
  4327  001E78  0E00               	movlw	0
  4328  001E7A  6E0A               	movwf	___awdiv@divisor+1,c
  4329  001E7C  0E0A               	movlw	10
  4330  001E7E  6E09               	movwf	___awdiv@divisor,c
  4331  001E80  0E00               	movlw	0
  4332  001E82  6E04               	movwf	___awmod@divisor+1,c
  4333  001E84  0E64               	movlw	100
  4334  001E86  6E03               	movwf	___awmod@divisor,c
  4335  001E88  C048  F001         	movff	fround@prec,___awmod@dividend
  4336  001E8C  6A02               	clrf	___awmod@dividend+1,c
  4337  001E8E  EC7E  F018         	call	___awmod	;wreg free
  4338  001E92  C001  F007         	movff	?___awmod,___awdiv@dividend
  4339  001E96  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  4340  001E9A  EC46  F017         	call	___awdiv	;wreg free
  4341  001E9E  0E09               	movlw	9
  4342  001EA0  2407               	addwf	?___awdiv,w,c
  4343  001EA2  6E0F               	movwf	___wmul@multiplier,c
  4344  001EA4  0E00               	movlw	0
  4345  001EA6  2008               	addwfc	?___awdiv+1,w,c
  4346  001EA8  6E10               	movwf	___wmul@multiplier+1,c
  4347  001EAA  EC69  F019         	call	___wmul	;wreg free
  4348  001EAE  0E50               	movlw	low __npowers_
  4349  001EB0  240F               	addwf	?___wmul,w,c
  4350  001EB2  6EF6               	movwf	tblptrl,c
  4351  001EB4  0E08               	movlw	high __npowers_
  4352  001EB6  2010               	addwfc	?___wmul+1,w,c
  4353  001EB8  6EF7               	movwf	tblptrh,c
  4354  001EBA                     	if	0	;There are less than 3 active tblptr bytes
  4355  001EBA                     	endif
  4356  001EBA  0009               	tblrd		*+
  4357  001EBC  CFF5 F033          	movff	tablat,___ftmul@f2
  4358  001EC0  0009               	tblrd		*+
  4359  001EC2  CFF5 F034          	movff	tablat,___ftmul@f2+1
  4360  001EC6  000A               	tblrd		*-
  4361  001EC8  CFF5 F035          	movff	tablat,___ftmul@f2+2
  4362  001ECC  0E00               	movlw	0
  4363  001ECE  6E0A               	movwf	___awdiv@divisor+1,c
  4364  001ED0  0E64               	movlw	100
  4365  001ED2  6E09               	movwf	___awdiv@divisor,c
  4366  001ED4  C048  F007         	movff	fround@prec,___awdiv@dividend
  4367  001ED8  6A08               	clrf	___awdiv@dividend+1,c
  4368  001EDA  EC46  F017         	call	___awdiv	;wreg free
  4369  001EDE  0E12               	movlw	18
  4370  001EE0  2407               	addwf	?___awdiv,w,c
  4371  001EE2  6E0F               	movwf	___wmul@multiplier,c
  4372  001EE4  0E00               	movlw	0
  4373  001EE6  2008               	addwfc	?___awdiv+1,w,c
  4374  001EE8  6E10               	movwf	___wmul@multiplier+1,c
  4375  001EEA  0E00               	movlw	0
  4376  001EEC  6E12               	movwf	___wmul@multiplicand+1,c
  4377  001EEE  0E03               	movlw	3
  4378  001EF0  6E11               	movwf	___wmul@multiplicand,c
  4379  001EF2  EC69  F019         	call	___wmul	;wreg free
  4380  001EF6  0E50               	movlw	low __npowers_
  4381  001EF8  240F               	addwf	?___wmul,w,c
  4382  001EFA  6EF6               	movwf	tblptrl,c
  4383  001EFC  0E08               	movlw	high __npowers_
  4384  001EFE  2010               	addwfc	?___wmul+1,w,c
  4385  001F00  6EF7               	movwf	tblptrh,c
  4386  001F02                     	if	0	;There are less than 3 active tblptr bytes
  4387  001F02                     	endif
  4388  001F02  0009               	tblrd		*+
  4389  001F04  CFF5 F030          	movff	tablat,___ftmul@f1
  4390  001F08  0009               	tblrd		*+
  4391  001F0A  CFF5 F031          	movff	tablat,___ftmul@f1+1
  4392  001F0E  000A               	tblrd		*-
  4393  001F10  CFF5 F032          	movff	tablat,___ftmul@f1+2
  4394  001F14  EC8B  F014         	call	___ftmul	;wreg free
  4395  001F18  C030  F045         	movff	?___ftmul,_fround$1610
  4396  001F1C  C031  F046         	movff	?___ftmul+1,_fround$1610+1
  4397  001F20  C032  F047         	movff	?___ftmul+2,_fround$1610+2
  4398                           
  4399                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4400  001F24  0E00               	movlw	0
  4401  001F26  6E12               	movwf	___wmul@multiplicand+1,c
  4402  001F28  0E03               	movlw	3
  4403  001F2A  6E11               	movwf	___wmul@multiplicand,c
  4404  001F2C  0E00               	movlw	0
  4405  001F2E  6E04               	movwf	___awmod@divisor+1,c
  4406  001F30  0E0A               	movlw	10
  4407  001F32  6E03               	movwf	___awmod@divisor,c
  4408  001F34  C048  F001         	movff	fround@prec,___awmod@dividend
  4409  001F38  6A02               	clrf	___awmod@dividend+1,c
  4410  001F3A  EC7E  F018         	call	___awmod	;wreg free
  4411  001F3E  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4412  001F42  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4413  001F46  EC69  F019         	call	___wmul	;wreg free
  4414  001F4A  0E50               	movlw	low __npowers_
  4415  001F4C  240F               	addwf	?___wmul,w,c
  4416  001F4E  6EF6               	movwf	tblptrl,c
  4417  001F50  0E08               	movlw	high __npowers_
  4418  001F52  2010               	addwfc	?___wmul+1,w,c
  4419  001F54  6EF7               	movwf	tblptrh,c
  4420  001F56                     	if	0	;There are less than 3 active tblptr bytes
  4421  001F56                     	endif
  4422  001F56  0009               	tblrd		*+
  4423  001F58  CFF5 F033          	movff	tablat,___ftmul@f2
  4424  001F5C  0009               	tblrd		*+
  4425  001F5E  CFF5 F034          	movff	tablat,___ftmul@f2+1
  4426  001F62  000A               	tblrd		*-
  4427  001F64  CFF5 F035          	movff	tablat,___ftmul@f2+2
  4428  001F68  C045  F030         	movff	_fround$1610,___ftmul@f1
  4429  001F6C  C046  F031         	movff	_fround$1610+1,___ftmul@f1+1
  4430  001F70  C047  F032         	movff	_fround$1610+2,___ftmul@f1+2
  4431  001F74  EC8B  F014         	call	___ftmul	;wreg free
  4432  001F78  C030  F042         	movff	?___ftmul,_fround$1611
  4433  001F7C  C031  F043         	movff	?___ftmul+1,_fround$1611+1
  4434  001F80  C032  F044         	movff	?___ftmul+2,_fround$1611+2
  4435                           
  4436                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4437  001F84  C042  F030         	movff	_fround$1611,___ftmul@f1
  4438  001F88  C043  F031         	movff	_fround$1611+1,___ftmul@f1+1
  4439  001F8C  C044  F032         	movff	_fround$1611+2,___ftmul@f1+2
  4440  001F90  0E00               	movlw	0
  4441  001F92  6E33               	movwf	___ftmul@f2,c
  4442  001F94  0E00               	movlw	0
  4443  001F96  6E34               	movwf	___ftmul@f2+1,c
  4444  001F98  0E3F               	movlw	63
  4445  001F9A  6E35               	movwf	___ftmul@f2+2,c
  4446  001F9C  EC8B  F014         	call	___ftmul	;wreg free
  4447  001FA0  C030  F03F         	movff	?___ftmul,?_fround
  4448  001FA4  C031  F040         	movff	?___ftmul+1,?_fround+1
  4449  001FA8  C032  F041         	movff	?___ftmul+2,?_fround+2
  4450  001FAC  0012               	return	
  4451  001FAE                     l154:
  4452                           
  4453                           ;doprnt.c: 415: else if(prec > 10)
  4454  001FAE  0E0A               	movlw	10
  4455  001FB0  6448               	cpfsgt	fround@prec,c
  4456  001FB2  D063               	goto	l157
  4457                           
  4458                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4459  001FB4  0E00               	movlw	0
  4460  001FB6  6E12               	movwf	___wmul@multiplicand+1,c
  4461  001FB8  0E03               	movlw	3
  4462  001FBA  6E11               	movwf	___wmul@multiplicand,c
  4463  001FBC  0E00               	movlw	0
  4464  001FBE  6E04               	movwf	___awmod@divisor+1,c
  4465  001FC0  0E0A               	movlw	10
  4466  001FC2  6E03               	movwf	___awmod@divisor,c
  4467  001FC4  C048  F001         	movff	fround@prec,___awmod@dividend
  4468  001FC8  6A02               	clrf	___awmod@dividend+1,c
  4469  001FCA  EC7E  F018         	call	___awmod	;wreg free
  4470  001FCE  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4471  001FD2  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4472  001FD6  EC69  F019         	call	___wmul	;wreg free
  4473  001FDA  0E50               	movlw	low __npowers_
  4474  001FDC  240F               	addwf	?___wmul,w,c
  4475  001FDE  6EF6               	movwf	tblptrl,c
  4476  001FE0  0E08               	movlw	high __npowers_
  4477  001FE2  2010               	addwfc	?___wmul+1,w,c
  4478  001FE4  6EF7               	movwf	tblptrh,c
  4479  001FE6                     	if	0	;There are less than 3 active tblptr bytes
  4480  001FE6                     	endif
  4481  001FE6  0009               	tblrd		*+
  4482  001FE8  CFF5 F033          	movff	tablat,___ftmul@f2
  4483  001FEC  0009               	tblrd		*+
  4484  001FEE  CFF5 F034          	movff	tablat,___ftmul@f2+1
  4485  001FF2  000A               	tblrd		*-
  4486  001FF4  CFF5 F035          	movff	tablat,___ftmul@f2+2
  4487  001FF8  0E00               	movlw	0
  4488  001FFA  6E0A               	movwf	___awdiv@divisor+1,c
  4489  001FFC  0E0A               	movlw	10
  4490  001FFE  6E09               	movwf	___awdiv@divisor,c
  4491  002000  C048  F007         	movff	fround@prec,___awdiv@dividend
  4492  002004  6A08               	clrf	___awdiv@dividend+1,c
  4493  002006  EC46  F017         	call	___awdiv	;wreg free
  4494  00200A  0E09               	movlw	9
  4495  00200C  2407               	addwf	?___awdiv,w,c
  4496  00200E  6E0F               	movwf	___wmul@multiplier,c
  4497  002010  0E00               	movlw	0
  4498  002012  2008               	addwfc	?___awdiv+1,w,c
  4499  002014  6E10               	movwf	___wmul@multiplier+1,c
  4500  002016  0E00               	movlw	0
  4501  002018  6E12               	movwf	___wmul@multiplicand+1,c
  4502  00201A  0E03               	movlw	3
  4503  00201C  6E11               	movwf	___wmul@multiplicand,c
  4504  00201E  EC69  F019         	call	___wmul	;wreg free
  4505  002022  0E50               	movlw	low __npowers_
  4506  002024  240F               	addwf	?___wmul,w,c
  4507  002026  6EF6               	movwf	tblptrl,c
  4508  002028  0E08               	movlw	high __npowers_
  4509  00202A  2010               	addwfc	?___wmul+1,w,c
  4510  00202C  6EF7               	movwf	tblptrh,c
  4511  00202E                     	if	0	;There are less than 3 active tblptr bytes
  4512  00202E                     	endif
  4513  00202E  0009               	tblrd		*+
  4514  002030  CFF5 F030          	movff	tablat,___ftmul@f1
  4515  002034  0009               	tblrd		*+
  4516  002036  CFF5 F031          	movff	tablat,___ftmul@f1+1
  4517  00203A  000A               	tblrd		*-
  4518  00203C  CFF5 F032          	movff	tablat,___ftmul@f1+2
  4519  002040  EC8B  F014         	call	___ftmul	;wreg free
  4520  002044  C030  F045         	movff	?___ftmul,_fround$1610
  4521  002048  C031  F046         	movff	?___ftmul+1,_fround$1610+1
  4522  00204C  C032  F047         	movff	?___ftmul+2,_fround$1610+2
  4523                           
  4524                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4525  002050  C045  F030         	movff	_fround$1610,___ftmul@f1
  4526  002054  C046  F031         	movff	_fround$1610+1,___ftmul@f1+1
  4527  002058  C047  F032         	movff	_fround$1610+2,___ftmul@f1+2
  4528  00205C  0E00               	movlw	0
  4529  00205E  6E33               	movwf	___ftmul@f2,c
  4530  002060  0E00               	movlw	0
  4531  002062  6E34               	movwf	___ftmul@f2+1,c
  4532  002064  0E3F               	movlw	63
  4533  002066  6E35               	movwf	___ftmul@f2+2,c
  4534  002068  EC8B  F014         	call	___ftmul	;wreg free
  4535  00206C  C030  F03F         	movff	?___ftmul,?_fround
  4536  002070  C031  F040         	movff	?___ftmul+1,?_fround+1
  4537  002074  C032  F041         	movff	?___ftmul+2,?_fround+2
  4538  002078  0012               	return	
  4539  00207A                     l157:
  4540                           
  4541                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  4542  00207A  5048               	movf	fround@prec,w,c
  4543  00207C  0D03               	mullw	3
  4544  00207E  0E50               	movlw	low __npowers_
  4545  002080  24F3               	addwf	prodl,w,c
  4546  002082  6EF6               	movwf	tblptrl,c
  4547  002084  0E08               	movlw	high __npowers_
  4548  002086  20F4               	addwfc	prodh,w,c
  4549  002088  6EF7               	movwf	tblptrh,c
  4550  00208A                     	if	0	;There are less than 3 active tblptr bytes
  4551  00208A                     	endif
  4552  00208A  0009               	tblrd		*+
  4553  00208C  CFF5 F030          	movff	tablat,___ftmul@f1
  4554  002090  0009               	tblrd		*+
  4555  002092  CFF5 F031          	movff	tablat,___ftmul@f1+1
  4556  002096  000A               	tblrd		*-
  4557  002098  CFF5 F032          	movff	tablat,___ftmul@f1+2
  4558  00209C  0E00               	movlw	0
  4559  00209E  6E33               	movwf	___ftmul@f2,c
  4560  0020A0  0E00               	movlw	0
  4561  0020A2  6E34               	movwf	___ftmul@f2+1,c
  4562  0020A4  0E3F               	movlw	63
  4563  0020A6  6E35               	movwf	___ftmul@f2+2,c
  4564  0020A8  EC8B  F014         	call	___ftmul	;wreg free
  4565  0020AC  C030  F03F         	movff	?___ftmul,?_fround
  4566  0020B0  C031  F040         	movff	?___ftmul+1,?_fround+1
  4567  0020B4  C032  F041         	movff	?___ftmul+2,?_fround+2
  4568  0020B8  0012               	return	
  4569  0020BA                     __end_of_fround:
  4570                           	opt stack 0
  4571                           tblptru	equ	0xFF8
  4572                           tblptrh	equ	0xFF7
  4573                           tblptrl	equ	0xFF6
  4574                           tablat	equ	0xFF5
  4575                           prodh	equ	0xFF4
  4576                           prodl	equ	0xFF3
  4577                           intcon	equ	0xFF2
  4578                           postinc0	equ	0xFEE
  4579                           wreg	equ	0xFE8
  4580                           indf2	equ	0xFDF
  4581                           postinc2	equ	0xFDE
  4582                           postdec2	equ	0xFDD
  4583                           fsr2h	equ	0xFDA
  4584                           fsr2l	equ	0xFD9
  4585                           status	equ	0xFD8
  4586                           
  4587 ;; *************** function ___awmod *****************
  4588 ;; Defined at:
  4589 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  4590 ;; Parameters:    Size  Location     Type
  4591 ;;  dividend        2    0[COMRAM] int 
  4592 ;;  divisor         2    2[COMRAM] int 
  4593 ;; Auto vars:     Size  Location     Type
  4594 ;;  sign            1    5[COMRAM] unsigned char 
  4595 ;;  counter         1    4[COMRAM] unsigned char 
  4596 ;; Return value:  Size  Location     Type
  4597 ;;                  2    0[COMRAM] int 
  4598 ;; Registers used:
  4599 ;;		wreg, status,2, status,0
  4600 ;; Tracked objects:
  4601 ;;		On entry : 0/0
  4602 ;;		On exit  : 0/0
  4603 ;;		Unchanged: 0/0
  4604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4605 ;;      Params:         4       0       0       0       0       0       0       0       0
  4606 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4607 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4608 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4609 ;;Total ram usage:        6 bytes
  4610 ;; Hardware stack levels used:    1
  4611 ;; This function calls:
  4612 ;;		Nothing
  4613 ;; This function is called by:
  4614 ;;		_fround
  4615 ;;		_scale
  4616 ;; This function uses a non-reentrant model
  4617 ;;
  4618                           
  4619                           	psect	text5
  4620  0030FC                     __ptext5:
  4621                           	opt stack 0
  4622  0030FC                     ___awmod:
  4623                           	opt stack 28
  4624                           
  4625                           ;incstack = 0
  4626  0030FC  0E00               	movlw	0
  4627  0030FE  6E06               	movwf	___awmod@sign,c
  4628  003100  AE02               	btfss	___awmod@dividend+1,7,c
  4629  003102  D006               	goto	l455
  4630  003104  6C01               	negf	___awmod@dividend,c
  4631  003106  1E02               	comf	___awmod@dividend+1,f,c
  4632  003108  B0D8               	btfsc	status,0,c
  4633  00310A  2A02               	incf	___awmod@dividend+1,f,c
  4634  00310C  0E01               	movlw	1
  4635  00310E  6E06               	movwf	___awmod@sign,c
  4636  003110                     l455:
  4637  003110  AE04               	btfss	___awmod@divisor+1,7,c
  4638  003112  D004               	goto	l456
  4639  003114  6C03               	negf	___awmod@divisor,c
  4640  003116  1E04               	comf	___awmod@divisor+1,f,c
  4641  003118  B0D8               	btfsc	status,0,c
  4642  00311A  2A04               	incf	___awmod@divisor+1,f,c
  4643  00311C                     l456:
  4644  00311C  5003               	movf	___awmod@divisor,w,c
  4645  00311E  1004               	iorwf	___awmod@divisor+1,w,c
  4646  003120  B4D8               	btfsc	status,2,c
  4647  003122  D018               	goto	l463
  4648  003124  0E01               	movlw	1
  4649  003126  6E05               	movwf	___awmod@counter,c
  4650  003128  D004               	goto	l458
  4651  00312A  90D8               	bcf	status,0,c
  4652  00312C  3603               	rlcf	___awmod@divisor,f,c
  4653  00312E  3604               	rlcf	___awmod@divisor+1,f,c
  4654  003130  2A05               	incf	___awmod@counter,f,c
  4655  003132                     l458:
  4656  003132  AE04               	btfss	___awmod@divisor+1,7,c
  4657  003134  D7FA               	goto	l459
  4658  003136                     u2540:
  4659  003136  5003               	movf	___awmod@divisor,w,c
  4660  003138  5C01               	subwf	___awmod@dividend,w,c
  4661  00313A  5004               	movf	___awmod@divisor+1,w,c
  4662  00313C  5802               	subwfb	___awmod@dividend+1,w,c
  4663  00313E  A0D8               	btfss	status,0,c
  4664  003140  D004               	goto	l462
  4665  003142  5003               	movf	___awmod@divisor,w,c
  4666  003144  5E01               	subwf	___awmod@dividend,f,c
  4667  003146  5004               	movf	___awmod@divisor+1,w,c
  4668  003148  5A02               	subwfb	___awmod@dividend+1,f,c
  4669  00314A                     l462:
  4670  00314A  90D8               	bcf	status,0,c
  4671  00314C  3204               	rrcf	___awmod@divisor+1,f,c
  4672  00314E  3203               	rrcf	___awmod@divisor,f,c
  4673  003150  2E05               	decfsz	___awmod@counter,f,c
  4674  003152  D7F1               	goto	u2540
  4675  003154                     l463:
  4676  003154  5006               	movf	___awmod@sign,w,c
  4677  003156  B4D8               	btfsc	status,2,c
  4678  003158  D004               	goto	l464
  4679  00315A  6C01               	negf	___awmod@dividend,c
  4680  00315C  1E02               	comf	___awmod@dividend+1,f,c
  4681  00315E  B0D8               	btfsc	status,0,c
  4682  003160  2A02               	incf	___awmod@dividend+1,f,c
  4683  003162                     l464:
  4684  003162  C001  F001         	movff	___awmod@dividend,?___awmod
  4685  003166  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  4686  00316A  0012               	return	
  4687  00316C                     __end_of___awmod:
  4688                           	opt stack 0
  4689                           tblptru	equ	0xFF8
  4690                           tblptrh	equ	0xFF7
  4691                           tblptrl	equ	0xFF6
  4692                           tablat	equ	0xFF5
  4693                           prodh	equ	0xFF4
  4694                           prodl	equ	0xFF3
  4695                           intcon	equ	0xFF2
  4696                           postinc0	equ	0xFEE
  4697                           wreg	equ	0xFE8
  4698                           indf2	equ	0xFDF
  4699                           postinc2	equ	0xFDE
  4700                           postdec2	equ	0xFDD
  4701                           fsr2h	equ	0xFDA
  4702                           fsr2l	equ	0xFD9
  4703                           status	equ	0xFD8
  4704                           
  4705 ;; *************** function ___awdiv *****************
  4706 ;; Defined at:
  4707 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  4708 ;; Parameters:    Size  Location     Type
  4709 ;;  dividend        2    6[COMRAM] int 
  4710 ;;  divisor         2    8[COMRAM] int 
  4711 ;; Auto vars:     Size  Location     Type
  4712 ;;  quotient        2   12[COMRAM] int 
  4713 ;;  sign            1   11[COMRAM] unsigned char 
  4714 ;;  counter         1   10[COMRAM] unsigned char 
  4715 ;; Return value:  Size  Location     Type
  4716 ;;                  2    6[COMRAM] int 
  4717 ;; Registers used:
  4718 ;;		wreg, status,2, status,0
  4719 ;; Tracked objects:
  4720 ;;		On entry : 0/0
  4721 ;;		On exit  : 0/0
  4722 ;;		Unchanged: 0/0
  4723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4724 ;;      Params:         4       0       0       0       0       0       0       0       0
  4725 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4726 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4727 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4728 ;;Total ram usage:        8 bytes
  4729 ;; Hardware stack levels used:    1
  4730 ;; This function calls:
  4731 ;;		Nothing
  4732 ;; This function is called by:
  4733 ;;		_fround
  4734 ;;		_scale
  4735 ;;		_sprintf
  4736 ;; This function uses a non-reentrant model
  4737 ;;
  4738                           
  4739                           	psect	text6
  4740  002E8C                     __ptext6:
  4741                           	opt stack 0
  4742  002E8C                     ___awdiv:
  4743                           	opt stack 28
  4744                           
  4745                           ;incstack = 0
  4746  002E8C  0E00               	movlw	0
  4747  002E8E  6E0C               	movwf	___awdiv@sign,c
  4748  002E90  AE0A               	btfss	___awdiv@divisor+1,7,c
  4749  002E92  D006               	goto	l442
  4750  002E94  6C09               	negf	___awdiv@divisor,c
  4751  002E96  1E0A               	comf	___awdiv@divisor+1,f,c
  4752  002E98  B0D8               	btfsc	status,0,c
  4753  002E9A  2A0A               	incf	___awdiv@divisor+1,f,c
  4754  002E9C  0E01               	movlw	1
  4755  002E9E  6E0C               	movwf	___awdiv@sign,c
  4756  002EA0                     l442:
  4757  002EA0  AE08               	btfss	___awdiv@dividend+1,7,c
  4758  002EA2  D006               	goto	l443
  4759  002EA4  6C07               	negf	___awdiv@dividend,c
  4760  002EA6  1E08               	comf	___awdiv@dividend+1,f,c
  4761  002EA8  B0D8               	btfsc	status,0,c
  4762  002EAA  2A08               	incf	___awdiv@dividend+1,f,c
  4763  002EAC  0E01               	movlw	1
  4764  002EAE  1A0C               	xorwf	___awdiv@sign,f,c
  4765  002EB0                     l443:
  4766  002EB0  0E00               	movlw	0
  4767  002EB2  6E0E               	movwf	___awdiv@quotient+1,c
  4768  002EB4  0E00               	movlw	0
  4769  002EB6  6E0D               	movwf	___awdiv@quotient,c
  4770  002EB8  5009               	movf	___awdiv@divisor,w,c
  4771  002EBA  100A               	iorwf	___awdiv@divisor+1,w,c
  4772  002EBC  B4D8               	btfsc	status,2,c
  4773  002EBE  D01C               	goto	l450
  4774  002EC0  0E01               	movlw	1
  4775  002EC2  6E0B               	movwf	___awdiv@counter,c
  4776  002EC4  D004               	goto	l445
  4777  002EC6  90D8               	bcf	status,0,c
  4778  002EC8  3609               	rlcf	___awdiv@divisor,f,c
  4779  002ECA  360A               	rlcf	___awdiv@divisor+1,f,c
  4780  002ECC  2A0B               	incf	___awdiv@counter,f,c
  4781  002ECE                     l445:
  4782  002ECE  AE0A               	btfss	___awdiv@divisor+1,7,c
  4783  002ED0  D7FA               	goto	l446
  4784  002ED2                     u2480:
  4785  002ED2  90D8               	bcf	status,0,c
  4786  002ED4  360D               	rlcf	___awdiv@quotient,f,c
  4787  002ED6  360E               	rlcf	___awdiv@quotient+1,f,c
  4788  002ED8  5009               	movf	___awdiv@divisor,w,c
  4789  002EDA  5C07               	subwf	___awdiv@dividend,w,c
  4790  002EDC  500A               	movf	___awdiv@divisor+1,w,c
  4791  002EDE  5808               	subwfb	___awdiv@dividend+1,w,c
  4792  002EE0  A0D8               	btfss	status,0,c
  4793  002EE2  D005               	goto	l449
  4794  002EE4  5009               	movf	___awdiv@divisor,w,c
  4795  002EE6  5E07               	subwf	___awdiv@dividend,f,c
  4796  002EE8  500A               	movf	___awdiv@divisor+1,w,c
  4797  002EEA  5A08               	subwfb	___awdiv@dividend+1,f,c
  4798  002EEC  800D               	bsf	___awdiv@quotient,0,c
  4799  002EEE                     l449:
  4800  002EEE  90D8               	bcf	status,0,c
  4801  002EF0  320A               	rrcf	___awdiv@divisor+1,f,c
  4802  002EF2  3209               	rrcf	___awdiv@divisor,f,c
  4803  002EF4  2E0B               	decfsz	___awdiv@counter,f,c
  4804  002EF6  D7ED               	goto	u2480
  4805  002EF8                     l450:
  4806  002EF8  500C               	movf	___awdiv@sign,w,c
  4807  002EFA  B4D8               	btfsc	status,2,c
  4808  002EFC  D004               	goto	l451
  4809  002EFE  6C0D               	negf	___awdiv@quotient,c
  4810  002F00  1E0E               	comf	___awdiv@quotient+1,f,c
  4811  002F02  B0D8               	btfsc	status,0,c
  4812  002F04  2A0E               	incf	___awdiv@quotient+1,f,c
  4813  002F06                     l451:
  4814  002F06  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  4815  002F0A  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  4816  002F0E  0012               	return	
  4817  002F10                     __end_of___awdiv:
  4818                           	opt stack 0
  4819                           tblptru	equ	0xFF8
  4820                           tblptrh	equ	0xFF7
  4821                           tblptrl	equ	0xFF6
  4822                           tablat	equ	0xFF5
  4823                           prodh	equ	0xFF4
  4824                           prodl	equ	0xFF3
  4825                           intcon	equ	0xFF2
  4826                           postinc0	equ	0xFEE
  4827                           wreg	equ	0xFE8
  4828                           indf2	equ	0xFDF
  4829                           postinc2	equ	0xFDE
  4830                           postdec2	equ	0xFDD
  4831                           fsr2h	equ	0xFDA
  4832                           fsr2l	equ	0xFD9
  4833                           status	equ	0xFD8
  4834                           
  4835 ;; *************** function __tdiv_to_l_ *****************
  4836 ;; Defined at:
  4837 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdivl.c"
  4838 ;; Parameters:    Size  Location     Type
  4839 ;;  f1              3    0[COMRAM] float 
  4840 ;;  f2              3    3[COMRAM] float 
  4841 ;; Auto vars:     Size  Location     Type
  4842 ;;  quot            4    9[COMRAM] unsigned long 
  4843 ;;  exp1            1   14[COMRAM] unsigned char 
  4844 ;;  cntr            1   13[COMRAM] unsigned char 
  4845 ;; Return value:  Size  Location     Type
  4846 ;;                  4    0[COMRAM] unsigned long 
  4847 ;; Registers used:
  4848 ;;		wreg, status,2, status,0
  4849 ;; Tracked objects:
  4850 ;;		On entry : 0/0
  4851 ;;		On exit  : 0/0
  4852 ;;		Unchanged: 0/0
  4853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4854 ;;      Params:         6       0       0       0       0       0       0       0       0
  4855 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4856 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4857 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4858 ;;Total ram usage:       15 bytes
  4859 ;; Hardware stack levels used:    1
  4860 ;; This function calls:
  4861 ;;		Nothing
  4862 ;; This function is called by:
  4863 ;;		_sprintf
  4864 ;; This function uses a non-reentrant model
  4865 ;;
  4866                           
  4867                           	psect	text7
  4868  002266                     __ptext7:
  4869                           	opt stack 0
  4870  002266                     __tdiv_to_l_:
  4871                           	opt stack 29
  4872                           
  4873                           ;incstack = 0
  4874  002266  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4875  00226A  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4876  00226C  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4877  00226E  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  4878  002270  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4879  002272  E301               	bnc	u2781
  4880  002274  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4881  002276                     u2781:
  4882  002276  5007               	movf	??__tdiv_to_l_,w,c
  4883  002278  6E0F               	movwf	__tdiv_to_l_@exp1,c
  4884  00227A  500F               	movf	__tdiv_to_l_@exp1,w,c
  4885  00227C  A4D8               	btfss	status,2,c
  4886  00227E  D009               	goto	l584
  4887  002280  0E00               	movlw	0
  4888  002282  6E01               	movwf	?__tdiv_to_l_,c
  4889  002284  0E00               	movlw	0
  4890  002286  6E02               	movwf	?__tdiv_to_l_+1,c
  4891  002288  0E00               	movlw	0
  4892  00228A  6E03               	movwf	?__tdiv_to_l_+2,c
  4893  00228C  0E00               	movlw	0
  4894  00228E  6E04               	movwf	?__tdiv_to_l_+3,c
  4895  002290  0012               	return	
  4896  002292                     l584:
  4897  002292  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4898  002296  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4899  002298  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4900  00229A  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  4901  00229C  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4902  00229E  E301               	bnc	u2801
  4903  0022A0  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4904  0022A2                     u2801:
  4905  0022A2  5007               	movf	??__tdiv_to_l_,w,c
  4906  0022A4  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4907  0022A6  500E               	movf	__tdiv_to_l_@cntr,w,c
  4908  0022A8  A4D8               	btfss	status,2,c
  4909  0022AA  D009               	goto	l586
  4910  0022AC  0E00               	movlw	0
  4911  0022AE  6E01               	movwf	?__tdiv_to_l_,c
  4912  0022B0  0E00               	movlw	0
  4913  0022B2  6E02               	movwf	?__tdiv_to_l_+1,c
  4914  0022B4  0E00               	movlw	0
  4915  0022B6  6E03               	movwf	?__tdiv_to_l_+2,c
  4916  0022B8  0E00               	movlw	0
  4917  0022BA  6E04               	movwf	?__tdiv_to_l_+3,c
  4918  0022BC  0012               	return	
  4919  0022BE                     l586:
  4920  0022BE  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  4921  0022C0  0EFF               	movlw	255
  4922  0022C2  1601               	andwf	__tdiv_to_l_@f1,f,c
  4923  0022C4  0EFF               	movlw	255
  4924  0022C6  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  4925  0022C8  0E00               	movlw	0
  4926  0022CA  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  4927  0022CC  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  4928  0022CE  0EFF               	movlw	255
  4929  0022D0  1604               	andwf	__tdiv_to_l_@f2,f,c
  4930  0022D2  0EFF               	movlw	255
  4931  0022D4  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  4932  0022D6  0E00               	movlw	0
  4933  0022D8  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  4934  0022DA  0E00               	movlw	0
  4935  0022DC  6E0A               	movwf	__tdiv_to_l_@quot,c
  4936  0022DE  0E00               	movlw	0
  4937  0022E0  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  4938  0022E2  0E00               	movlw	0
  4939  0022E4  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  4940  0022E6  0E00               	movlw	0
  4941  0022E8  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  4942  0022EA  0E7F               	movlw	127
  4943  0022EC  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4944  0022EE  500E               	movf	__tdiv_to_l_@cntr,w,c
  4945  0022F0  0F98               	addlw	152
  4946  0022F2  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4947  0022F4  0E18               	movlw	24
  4948  0022F6  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4949  0022F8                     l587:
  4950  0022F8  90D8               	bcf	status,0,c
  4951  0022FA  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4952  0022FC  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4953  0022FE  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4954  002300  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4955  002302  5004               	movf	__tdiv_to_l_@f2,w,c
  4956  002304  5C01               	subwf	__tdiv_to_l_@f1,w,c
  4957  002306  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4958  002308  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  4959  00230A  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4960  00230C  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  4961  00230E  A0D8               	btfss	status,0,c
  4962  002310  D007               	goto	l588
  4963  002312  5004               	movf	__tdiv_to_l_@f2,w,c
  4964  002314  5E01               	subwf	__tdiv_to_l_@f1,f,c
  4965  002316  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4966  002318  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  4967  00231A  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4968  00231C  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  4969  00231E  800A               	bsf	__tdiv_to_l_@quot,0,c
  4970  002320                     l588:
  4971  002320  90D8               	bcf	status,0,c
  4972  002322  3601               	rlcf	__tdiv_to_l_@f1,f,c
  4973  002324  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  4974  002326  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  4975  002328  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  4976  00232A  D7E6               	goto	l587
  4977  00232C  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  4978  00232E  D016               	goto	l590
  4979  002330  500F               	movf	__tdiv_to_l_@exp1,w,c
  4980  002332  0A80               	xorlw	128
  4981  002334  0F97               	addlw	151
  4982  002336  B0D8               	btfsc	status,0,c
  4983  002338  D009               	goto	l591
  4984  00233A  0E00               	movlw	0
  4985  00233C  6E01               	movwf	?__tdiv_to_l_,c
  4986  00233E  0E00               	movlw	0
  4987  002340  6E02               	movwf	?__tdiv_to_l_+1,c
  4988  002342  0E00               	movlw	0
  4989  002344  6E03               	movwf	?__tdiv_to_l_+2,c
  4990  002346  0E00               	movlw	0
  4991  002348  6E04               	movwf	?__tdiv_to_l_+3,c
  4992  00234A  0012               	return	
  4993  00234C                     l591:
  4994  00234C  90D8               	bcf	status,0,c
  4995  00234E  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  4996  002350  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  4997  002352  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  4998  002354  320A               	rrcf	__tdiv_to_l_@quot,f,c
  4999  002356  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  5000  002358  D7F9               	goto	l591
  5001  00235A  D015               	goto	u2860
  5002  00235C                     l590:
  5003  00235C  0E17               	movlw	23
  5004  00235E  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  5005  002360  D00F               	goto	l596
  5006  002362  0E00               	movlw	0
  5007  002364  6E01               	movwf	?__tdiv_to_l_,c
  5008  002366  0E00               	movlw	0
  5009  002368  6E02               	movwf	?__tdiv_to_l_+1,c
  5010  00236A  0E00               	movlw	0
  5011  00236C  6E03               	movwf	?__tdiv_to_l_+2,c
  5012  00236E  0E00               	movlw	0
  5013  002370  6E04               	movwf	?__tdiv_to_l_+3,c
  5014  002372  0012               	return	
  5015  002374  90D8               	bcf	status,0,c
  5016  002376  360A               	rlcf	__tdiv_to_l_@quot,f,c
  5017  002378  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  5018  00237A  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  5019  00237C  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  5020  00237E  060F               	decf	__tdiv_to_l_@exp1,f,c
  5021  002380                     l596:
  5022  002380  500F               	movf	__tdiv_to_l_@exp1,w,c
  5023  002382  A4D8               	btfss	status,2,c
  5024  002384  D7F7               	goto	l597
  5025  002386                     u2860:
  5026  002386  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  5027  00238A  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  5028  00238E  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  5029  002392  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  5030  002396  0012               	return		;funcret
  5031  002398                     __end_of__tdiv_to_l_:
  5032                           	opt stack 0
  5033                           tblptru	equ	0xFF8
  5034                           tblptrh	equ	0xFF7
  5035                           tblptrl	equ	0xFF6
  5036                           tablat	equ	0xFF5
  5037                           prodh	equ	0xFF4
  5038                           prodl	equ	0xFF3
  5039                           intcon	equ	0xFF2
  5040                           postinc0	equ	0xFEE
  5041                           wreg	equ	0xFE8
  5042                           indf2	equ	0xFDF
  5043                           postinc2	equ	0xFDE
  5044                           postdec2	equ	0xFDD
  5045                           fsr2h	equ	0xFDA
  5046                           fsr2l	equ	0xFD9
  5047                           status	equ	0xFD8
  5048                           
  5049 ;; *************** function __div_to_l_ *****************
  5050 ;; Defined at:
  5051 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fldivl.c"
  5052 ;; Parameters:    Size  Location     Type
  5053 ;;  f1              3    0[COMRAM] unsigned long 
  5054 ;;  f2              3    3[COMRAM] unsigned long 
  5055 ;; Auto vars:     Size  Location     Type
  5056 ;;  quot            4    6[COMRAM] unsigned long 
  5057 ;;  exp1            1   11[COMRAM] unsigned char 
  5058 ;;  cntr            1   10[COMRAM] unsigned char 
  5059 ;; Return value:  Size  Location     Type
  5060 ;;                  4    0[COMRAM] unsigned long 
  5061 ;; Registers used:
  5062 ;;		wreg, status,2, status,0
  5063 ;; Tracked objects:
  5064 ;;		On entry : 0/0
  5065 ;;		On exit  : 0/0
  5066 ;;		Unchanged: 0/0
  5067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5068 ;;      Params:         6       0       0       0       0       0       0       0       0
  5069 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5070 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5071 ;;      Totals:        12       0       0       0       0       0       0       0       0
  5072 ;;Total ram usage:       12 bytes
  5073 ;; Hardware stack levels used:    1
  5074 ;; This function calls:
  5075 ;;		Nothing
  5076 ;; This function is called by:
  5077 ;;		_sprintf
  5078 ;; This function uses a non-reentrant model
  5079 ;;
  5080                           
  5081                           	psect	text8
  5082  0024C2                     __ptext8:
  5083                           	opt stack 0
  5084  0024C2                     __div_to_l_:
  5085                           	opt stack 29
  5086                           
  5087                           ;incstack = 0
  5088  0024C2  3403               	rlcf	__div_to_l_@f1+2,w,c
  5089  0024C4  3404               	rlcf	__div_to_l_@f1+3,w,c
  5090  0024C6  6E0C               	movwf	__div_to_l_@exp1,c
  5091  0024C8  500C               	movf	__div_to_l_@exp1,w,c
  5092  0024CA  A4D8               	btfss	status,2,c
  5093  0024CC  D009               	goto	l480
  5094  0024CE  0E00               	movlw	0
  5095  0024D0  6E01               	movwf	?__div_to_l_,c
  5096  0024D2  0E00               	movlw	0
  5097  0024D4  6E02               	movwf	?__div_to_l_+1,c
  5098  0024D6  0E00               	movlw	0
  5099  0024D8  6E03               	movwf	?__div_to_l_+2,c
  5100  0024DA  0E00               	movlw	0
  5101  0024DC  6E04               	movwf	?__div_to_l_+3,c
  5102  0024DE  0012               	return	
  5103  0024E0                     l480:
  5104  0024E0  3406               	rlcf	__div_to_l_@f2+2,w,c
  5105  0024E2  3407               	rlcf	__div_to_l_@f2+3,w,c
  5106  0024E4  6E0B               	movwf	__div_to_l_@cntr,c
  5107  0024E6  500B               	movf	__div_to_l_@cntr,w,c
  5108  0024E8  A4D8               	btfss	status,2,c
  5109  0024EA  D009               	goto	l482
  5110  0024EC  0E00               	movlw	0
  5111  0024EE  6E01               	movwf	?__div_to_l_,c
  5112  0024F0  0E00               	movlw	0
  5113  0024F2  6E02               	movwf	?__div_to_l_+1,c
  5114  0024F4  0E00               	movlw	0
  5115  0024F6  6E03               	movwf	?__div_to_l_+2,c
  5116  0024F8  0E00               	movlw	0
  5117  0024FA  6E04               	movwf	?__div_to_l_+3,c
  5118  0024FC  0012               	return	
  5119  0024FE                     l482:
  5120  0024FE  8E03               	bsf	__div_to_l_@f1+2,7,c
  5121  002500  0EFF               	movlw	255
  5122  002502  1601               	andwf	__div_to_l_@f1,f,c
  5123  002504  0EFF               	movlw	255
  5124  002506  1602               	andwf	__div_to_l_@f1+1,f,c
  5125  002508  0EFF               	movlw	255
  5126  00250A  1603               	andwf	__div_to_l_@f1+2,f,c
  5127  00250C  0E00               	movlw	0
  5128  00250E  1604               	andwf	__div_to_l_@f1+3,f,c
  5129  002510  8E06               	bsf	__div_to_l_@f2+2,7,c
  5130  002512  0EFF               	movlw	255
  5131  002514  1604               	andwf	__div_to_l_@f2,f,c
  5132  002516  0EFF               	movlw	255
  5133  002518  1605               	andwf	__div_to_l_@f2+1,f,c
  5134  00251A  0EFF               	movlw	255
  5135  00251C  1606               	andwf	__div_to_l_@f2+2,f,c
  5136  00251E  0E00               	movlw	0
  5137  002520  1607               	andwf	__div_to_l_@f2+3,f,c
  5138  002522  0E00               	movlw	0
  5139  002524  6E07               	movwf	__div_to_l_@quot,c
  5140  002526  0E00               	movlw	0
  5141  002528  6E08               	movwf	__div_to_l_@quot+1,c
  5142  00252A  0E00               	movlw	0
  5143  00252C  6E09               	movwf	__div_to_l_@quot+2,c
  5144  00252E  0E00               	movlw	0
  5145  002530  6E0A               	movwf	__div_to_l_@quot+3,c
  5146  002532  0E7F               	movlw	127
  5147  002534  5E0C               	subwf	__div_to_l_@exp1,f,c
  5148  002536  500B               	movf	__div_to_l_@cntr,w,c
  5149  002538  0FA0               	addlw	160
  5150  00253A  5E0C               	subwf	__div_to_l_@exp1,f,c
  5151  00253C  0E20               	movlw	32
  5152  00253E  6E0B               	movwf	__div_to_l_@cntr,c
  5153  002540  90D8               	bcf	status,0,c
  5154  002542  3607               	rlcf	__div_to_l_@quot,f,c
  5155  002544  3608               	rlcf	__div_to_l_@quot+1,f,c
  5156  002546  3609               	rlcf	__div_to_l_@quot+2,f,c
  5157  002548  360A               	rlcf	__div_to_l_@quot+3,f,c
  5158  00254A  5004               	movf	__div_to_l_@f2,w,c
  5159  00254C  5C01               	subwf	__div_to_l_@f1,w,c
  5160  00254E  5005               	movf	__div_to_l_@f2+1,w,c
  5161  002550  5802               	subwfb	__div_to_l_@f1+1,w,c
  5162  002552  5006               	movf	__div_to_l_@f2+2,w,c
  5163  002554  5803               	subwfb	__div_to_l_@f1+2,w,c
  5164  002556  5007               	movf	__div_to_l_@f2+3,w,c
  5165  002558  5804               	subwfb	__div_to_l_@f1+3,w,c
  5166  00255A  A0D8               	btfss	status,0,c
  5167  00255C  D009               	goto	l484
  5168  00255E  5004               	movf	__div_to_l_@f2,w,c
  5169  002560  5E01               	subwf	__div_to_l_@f1,f,c
  5170  002562  5005               	movf	__div_to_l_@f2+1,w,c
  5171  002564  5A02               	subwfb	__div_to_l_@f1+1,f,c
  5172  002566  5006               	movf	__div_to_l_@f2+2,w,c
  5173  002568  5A03               	subwfb	__div_to_l_@f1+2,f,c
  5174  00256A  5007               	movf	__div_to_l_@f2+3,w,c
  5175  00256C  5A04               	subwfb	__div_to_l_@f1+3,f,c
  5176  00256E  8007               	bsf	__div_to_l_@quot,0,c
  5177  002570                     l484:
  5178  002570  90D8               	bcf	status,0,c
  5179  002572  3601               	rlcf	__div_to_l_@f1,f,c
  5180  002574  3602               	rlcf	__div_to_l_@f1+1,f,c
  5181  002576  3603               	rlcf	__div_to_l_@f1+2,f,c
  5182  002578  3604               	rlcf	__div_to_l_@f1+3,f,c
  5183  00257A  2E0B               	decfsz	__div_to_l_@cntr,f,c
  5184  00257C  D7E1               	goto	l483
  5185  00257E  AE0C               	btfss	__div_to_l_@exp1,7,c
  5186  002580  D016               	goto	l486
  5187  002582  500C               	movf	__div_to_l_@exp1,w,c
  5188  002584  0A80               	xorlw	128
  5189  002586  0F9F               	addlw	159
  5190  002588  B0D8               	btfsc	status,0,c
  5191  00258A  D009               	goto	l487
  5192  00258C  0E00               	movlw	0
  5193  00258E  6E01               	movwf	?__div_to_l_,c
  5194  002590  0E00               	movlw	0
  5195  002592  6E02               	movwf	?__div_to_l_+1,c
  5196  002594  0E00               	movlw	0
  5197  002596  6E03               	movwf	?__div_to_l_+2,c
  5198  002598  0E00               	movlw	0
  5199  00259A  6E04               	movwf	?__div_to_l_+3,c
  5200  00259C  0012               	return	
  5201  00259E                     l487:
  5202  00259E  90D8               	bcf	status,0,c
  5203  0025A0  320A               	rrcf	__div_to_l_@quot+3,f,c
  5204  0025A2  3209               	rrcf	__div_to_l_@quot+2,f,c
  5205  0025A4  3208               	rrcf	__div_to_l_@quot+1,f,c
  5206  0025A6  3207               	rrcf	__div_to_l_@quot,f,c
  5207  0025A8  3E0C               	incfsz	__div_to_l_@exp1,f,c
  5208  0025AA  D7F9               	goto	l487
  5209  0025AC  D015               	goto	u2930
  5210  0025AE                     l486:
  5211  0025AE  0E1F               	movlw	31
  5212  0025B0  640C               	cpfsgt	__div_to_l_@exp1,c
  5213  0025B2  D00F               	goto	l492
  5214  0025B4  0E00               	movlw	0
  5215  0025B6  6E01               	movwf	?__div_to_l_,c
  5216  0025B8  0E00               	movlw	0
  5217  0025BA  6E02               	movwf	?__div_to_l_+1,c
  5218  0025BC  0E00               	movlw	0
  5219  0025BE  6E03               	movwf	?__div_to_l_+2,c
  5220  0025C0  0E00               	movlw	0
  5221  0025C2  6E04               	movwf	?__div_to_l_+3,c
  5222  0025C4  0012               	return	
  5223  0025C6  90D8               	bcf	status,0,c
  5224  0025C8  3607               	rlcf	__div_to_l_@quot,f,c
  5225  0025CA  3608               	rlcf	__div_to_l_@quot+1,f,c
  5226  0025CC  3609               	rlcf	__div_to_l_@quot+2,f,c
  5227  0025CE  360A               	rlcf	__div_to_l_@quot+3,f,c
  5228  0025D0  060C               	decf	__div_to_l_@exp1,f,c
  5229  0025D2                     l492:
  5230  0025D2  500C               	movf	__div_to_l_@exp1,w,c
  5231  0025D4  A4D8               	btfss	status,2,c
  5232  0025D6  D7F7               	goto	l493
  5233  0025D8                     u2930:
  5234  0025D8  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  5235  0025DC  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  5236  0025E0  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  5237  0025E4  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  5238  0025E8  0012               	return		;funcret
  5239  0025EA                     __end_of__div_to_l_:
  5240                           	opt stack 0
  5241                           tblptru	equ	0xFF8
  5242                           tblptrh	equ	0xFF7
  5243                           tblptrl	equ	0xFF6
  5244                           tablat	equ	0xFF5
  5245                           prodh	equ	0xFF4
  5246                           prodl	equ	0xFF3
  5247                           intcon	equ	0xFF2
  5248                           postinc0	equ	0xFEE
  5249                           wreg	equ	0xFE8
  5250                           indf2	equ	0xFDF
  5251                           postinc2	equ	0xFDE
  5252                           postdec2	equ	0xFDD
  5253                           fsr2h	equ	0xFDA
  5254                           fsr2l	equ	0xFD9
  5255                           status	equ	0xFD8
  5256                           
  5257 ;; *************** function ___lltoft *****************
  5258 ;; Defined at:
  5259 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
  5260 ;; Parameters:    Size  Location     Type
  5261 ;;  c               4    8[COMRAM] unsigned long 
  5262 ;; Auto vars:     Size  Location     Type
  5263 ;;  exp             1   16[COMRAM] unsigned char 
  5264 ;; Return value:  Size  Location     Type
  5265 ;;                  3    8[COMRAM] float 
  5266 ;; Registers used:
  5267 ;;		wreg, status,2, status,0, cstack
  5268 ;; Tracked objects:
  5269 ;;		On entry : 0/0
  5270 ;;		On exit  : 0/0
  5271 ;;		Unchanged: 0/0
  5272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5273 ;;      Params:         4       0       0       0       0       0       0       0       0
  5274 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5275 ;;      Temps:          4       0       0       0       0       0       0       0       0
  5276 ;;      Totals:         9       0       0       0       0       0       0       0       0
  5277 ;;Total ram usage:        9 bytes
  5278 ;; Hardware stack levels used:    1
  5279 ;; Hardware stack levels required when called:    1
  5280 ;; This function calls:
  5281 ;;		___ftpack
  5282 ;; This function is called by:
  5283 ;;		_main
  5284 ;;		_sprintf
  5285 ;; This function uses a non-reentrant model
  5286 ;;
  5287                           
  5288                           	psect	text9
  5289  003234                     __ptext9:
  5290                           	opt stack 0
  5291  003234                     ___lltoft:
  5292                           	opt stack 28
  5293                           
  5294                           ;incstack = 0
  5295  003234  0E8E               	movlw	142
  5296  003236  6E11               	movwf	___lltoft@exp,c
  5297  003238  D006               	goto	l691
  5298  00323A  90D8               	bcf	status,0,c
  5299  00323C  320C               	rrcf	___lltoft@c+3,f,c
  5300  00323E  320B               	rrcf	___lltoft@c+2,f,c
  5301  003240  320A               	rrcf	___lltoft@c+1,f,c
  5302  003242  3209               	rrcf	___lltoft@c,f,c
  5303  003244  2A11               	incf	___lltoft@exp,f,c
  5304  003246                     l691:
  5305  003246  0E00               	movlw	0
  5306  003248  1409               	andwf	___lltoft@c,w,c
  5307  00324A  6E0D               	movwf	??___lltoft& (0+255),c
  5308  00324C  0E00               	movlw	0
  5309  00324E  140A               	andwf	___lltoft@c+1,w,c
  5310  003250  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  5311  003252  0E00               	movlw	0
  5312  003254  140B               	andwf	___lltoft@c+2,w,c
  5313  003256  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  5314  003258  0EFF               	movlw	255
  5315  00325A  140C               	andwf	___lltoft@c+3,w,c
  5316  00325C  6E10               	movwf	(??___lltoft+3)& (0+255),c
  5317  00325E  500D               	movf	??___lltoft,w,c
  5318  003260  100E               	iorwf	??___lltoft+1,w,c
  5319  003262  100F               	iorwf	??___lltoft+2,w,c
  5320  003264  1010               	iorwf	??___lltoft+3,w,c
  5321  003266  A4D8               	btfss	status,2,c
  5322  003268  D7E8               	goto	l692
  5323  00326A  C009  F001         	movff	___lltoft@c,___ftpack@arg
  5324  00326E  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  5325  003272  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  5326  003276  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  5327  00327A  0E00               	movlw	0
  5328  00327C  6E05               	movwf	___ftpack@sign,c
  5329  00327E  EC51  F016         	call	___ftpack	;wreg free
  5330  003282  C001  F009         	movff	?___ftpack,?___lltoft
  5331  003286  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  5332  00328A  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  5333  00328E  0012               	return	
  5334  003290                     __end_of___lltoft:
  5335                           	opt stack 0
  5336                           tblptru	equ	0xFF8
  5337                           tblptrh	equ	0xFF7
  5338                           tblptrl	equ	0xFF6
  5339                           tablat	equ	0xFF5
  5340                           prodh	equ	0xFF4
  5341                           prodl	equ	0xFF3
  5342                           intcon	equ	0xFF2
  5343                           postinc0	equ	0xFEE
  5344                           wreg	equ	0xFE8
  5345                           indf2	equ	0xFDF
  5346                           postinc2	equ	0xFDE
  5347                           postdec2	equ	0xFDD
  5348                           fsr2h	equ	0xFDA
  5349                           fsr2l	equ	0xFD9
  5350                           status	equ	0xFD8
  5351                           
  5352 ;; *************** function ___llmod *****************
  5353 ;; Defined at:
  5354 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  5355 ;; Parameters:    Size  Location     Type
  5356 ;;  dividend        4   13[COMRAM] unsigned long 
  5357 ;;  divisor         4   17[COMRAM] unsigned long 
  5358 ;; Auto vars:     Size  Location     Type
  5359 ;;  counter         1   21[COMRAM] unsigned char 
  5360 ;; Return value:  Size  Location     Type
  5361 ;;                  4   13[COMRAM] unsigned long 
  5362 ;; Registers used:
  5363 ;;		wreg, status,2, status,0
  5364 ;; Tracked objects:
  5365 ;;		On entry : 0/0
  5366 ;;		On exit  : 0/0
  5367 ;;		Unchanged: 0/0
  5368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5369 ;;      Params:         8       0       0       0       0       0       0       0       0
  5370 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5371 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5372 ;;      Totals:         9       0       0       0       0       0       0       0       0
  5373 ;;Total ram usage:        9 bytes
  5374 ;; Hardware stack levels used:    1
  5375 ;; This function calls:
  5376 ;;		Nothing
  5377 ;; This function is called by:
  5378 ;;		_sprintf
  5379 ;; This function uses a non-reentrant model
  5380 ;;
  5381                           
  5382                           	psect	text10
  5383  00316C                     __ptext10:
  5384                           	opt stack 0
  5385  00316C                     ___llmod:
  5386                           	opt stack 29
  5387                           
  5388                           ;incstack = 0
  5389  00316C  5012               	movf	___llmod@divisor,w,c
  5390  00316E  1013               	iorwf	___llmod@divisor+1,w,c
  5391  003170  1014               	iorwf	___llmod@divisor+2,w,c
  5392  003172  1015               	iorwf	___llmod@divisor+3,w,c
  5393  003174  B4D8               	btfsc	status,2,c
  5394  003176  D024               	goto	l685
  5395  003178  0E01               	movlw	1
  5396  00317A  6E16               	movwf	___llmod@counter,c
  5397  00317C  D006               	goto	l680
  5398  00317E  90D8               	bcf	status,0,c
  5399  003180  3612               	rlcf	___llmod@divisor,f,c
  5400  003182  3613               	rlcf	___llmod@divisor+1,f,c
  5401  003184  3614               	rlcf	___llmod@divisor+2,f,c
  5402  003186  3615               	rlcf	___llmod@divisor+3,f,c
  5403  003188  2A16               	incf	___llmod@counter,f,c
  5404  00318A                     l680:
  5405  00318A  AE15               	btfss	___llmod@divisor+3,7,c
  5406  00318C  D7F8               	goto	l681
  5407  00318E                     u3040:
  5408  00318E  5012               	movf	___llmod@divisor,w,c
  5409  003190  5C0E               	subwf	___llmod@dividend,w,c
  5410  003192  5013               	movf	___llmod@divisor+1,w,c
  5411  003194  580F               	subwfb	___llmod@dividend+1,w,c
  5412  003196  5014               	movf	___llmod@divisor+2,w,c
  5413  003198  5810               	subwfb	___llmod@dividend+2,w,c
  5414  00319A  5015               	movf	___llmod@divisor+3,w,c
  5415  00319C  5811               	subwfb	___llmod@dividend+3,w,c
  5416  00319E  A0D8               	btfss	status,0,c
  5417  0031A0  D008               	goto	l684
  5418  0031A2  5012               	movf	___llmod@divisor,w,c
  5419  0031A4  5E0E               	subwf	___llmod@dividend,f,c
  5420  0031A6  5013               	movf	___llmod@divisor+1,w,c
  5421  0031A8  5A0F               	subwfb	___llmod@dividend+1,f,c
  5422  0031AA  5014               	movf	___llmod@divisor+2,w,c
  5423  0031AC  5A10               	subwfb	___llmod@dividend+2,f,c
  5424  0031AE  5015               	movf	___llmod@divisor+3,w,c
  5425  0031B0  5A11               	subwfb	___llmod@dividend+3,f,c
  5426  0031B2                     l684:
  5427  0031B2  90D8               	bcf	status,0,c
  5428  0031B4  3215               	rrcf	___llmod@divisor+3,f,c
  5429  0031B6  3214               	rrcf	___llmod@divisor+2,f,c
  5430  0031B8  3213               	rrcf	___llmod@divisor+1,f,c
  5431  0031BA  3212               	rrcf	___llmod@divisor,f,c
  5432  0031BC  2E16               	decfsz	___llmod@counter,f,c
  5433  0031BE  D7E7               	goto	u3040
  5434  0031C0                     l685:
  5435  0031C0  C00E  F00E         	movff	___llmod@dividend,?___llmod
  5436  0031C4  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
  5437  0031C8  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
  5438  0031CC  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
  5439  0031D0  0012               	return		;funcret
  5440  0031D2                     __end_of___llmod:
  5441                           	opt stack 0
  5442                           tblptru	equ	0xFF8
  5443                           tblptrh	equ	0xFF7
  5444                           tblptrl	equ	0xFF6
  5445                           tablat	equ	0xFF5
  5446                           prodh	equ	0xFF4
  5447                           prodl	equ	0xFF3
  5448                           intcon	equ	0xFF2
  5449                           postinc0	equ	0xFEE
  5450                           wreg	equ	0xFE8
  5451                           indf2	equ	0xFDF
  5452                           postinc2	equ	0xFDE
  5453                           postdec2	equ	0xFDD
  5454                           fsr2h	equ	0xFDA
  5455                           fsr2l	equ	0xFD9
  5456                           status	equ	0xFD8
  5457                           
  5458 ;; *************** function ___lldiv *****************
  5459 ;; Defined at:
  5460 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  5461 ;; Parameters:    Size  Location     Type
  5462 ;;  dividend        4    0[COMRAM] unsigned long 
  5463 ;;  divisor         4    4[COMRAM] unsigned long 
  5464 ;; Auto vars:     Size  Location     Type
  5465 ;;  quotient        4    8[COMRAM] unsigned long 
  5466 ;;  counter         1   12[COMRAM] unsigned char 
  5467 ;; Return value:  Size  Location     Type
  5468 ;;                  4    0[COMRAM] unsigned long 
  5469 ;; Registers used:
  5470 ;;		wreg, status,2, status,0
  5471 ;; Tracked objects:
  5472 ;;		On entry : 0/0
  5473 ;;		On exit  : 0/0
  5474 ;;		Unchanged: 0/0
  5475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5476 ;;      Params:         8       0       0       0       0       0       0       0       0
  5477 ;;      Locals:         5       0       0       0       0       0       0       0       0
  5478 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5479 ;;      Totals:        13       0       0       0       0       0       0       0       0
  5480 ;;Total ram usage:       13 bytes
  5481 ;; Hardware stack levels used:    1
  5482 ;; This function calls:
  5483 ;;		Nothing
  5484 ;; This function is called by:
  5485 ;;		_sprintf
  5486 ;; This function uses a non-reentrant model
  5487 ;;
  5488                           
  5489                           	psect	text11
  5490  002F10                     __ptext11:
  5491                           	opt stack 0
  5492  002F10                     ___lldiv:
  5493                           	opt stack 29
  5494                           
  5495                           ;incstack = 0
  5496  002F10  0E00               	movlw	0
  5497  002F12  6E09               	movwf	___lldiv@quotient,c
  5498  002F14  0E00               	movlw	0
  5499  002F16  6E0A               	movwf	___lldiv@quotient+1,c
  5500  002F18  0E00               	movlw	0
  5501  002F1A  6E0B               	movwf	___lldiv@quotient+2,c
  5502  002F1C  0E00               	movlw	0
  5503  002F1E  6E0C               	movwf	___lldiv@quotient+3,c
  5504  002F20  5005               	movf	___lldiv@divisor,w,c
  5505  002F22  1006               	iorwf	___lldiv@divisor+1,w,c
  5506  002F24  1007               	iorwf	___lldiv@divisor+2,w,c
  5507  002F26  1008               	iorwf	___lldiv@divisor+3,w,c
  5508  002F28  B4D8               	btfsc	status,2,c
  5509  002F2A  D02A               	goto	l675
  5510  002F2C  0E01               	movlw	1
  5511  002F2E  6E0D               	movwf	___lldiv@counter,c
  5512  002F30  D006               	goto	l670
  5513  002F32  90D8               	bcf	status,0,c
  5514  002F34  3605               	rlcf	___lldiv@divisor,f,c
  5515  002F36  3606               	rlcf	___lldiv@divisor+1,f,c
  5516  002F38  3607               	rlcf	___lldiv@divisor+2,f,c
  5517  002F3A  3608               	rlcf	___lldiv@divisor+3,f,c
  5518  002F3C  2A0D               	incf	___lldiv@counter,f,c
  5519  002F3E                     l670:
  5520  002F3E  AE08               	btfss	___lldiv@divisor+3,7,c
  5521  002F40  D7F8               	goto	l671
  5522  002F42                     u3010:
  5523  002F42  90D8               	bcf	status,0,c
  5524  002F44  3609               	rlcf	___lldiv@quotient,f,c
  5525  002F46  360A               	rlcf	___lldiv@quotient+1,f,c
  5526  002F48  360B               	rlcf	___lldiv@quotient+2,f,c
  5527  002F4A  360C               	rlcf	___lldiv@quotient+3,f,c
  5528  002F4C  5005               	movf	___lldiv@divisor,w,c
  5529  002F4E  5C01               	subwf	___lldiv@dividend,w,c
  5530  002F50  5006               	movf	___lldiv@divisor+1,w,c
  5531  002F52  5802               	subwfb	___lldiv@dividend+1,w,c
  5532  002F54  5007               	movf	___lldiv@divisor+2,w,c
  5533  002F56  5803               	subwfb	___lldiv@dividend+2,w,c
  5534  002F58  5008               	movf	___lldiv@divisor+3,w,c
  5535  002F5A  5804               	subwfb	___lldiv@dividend+3,w,c
  5536  002F5C  A0D8               	btfss	status,0,c
  5537  002F5E  D009               	goto	l674
  5538  002F60  5005               	movf	___lldiv@divisor,w,c
  5539  002F62  5E01               	subwf	___lldiv@dividend,f,c
  5540  002F64  5006               	movf	___lldiv@divisor+1,w,c
  5541  002F66  5A02               	subwfb	___lldiv@dividend+1,f,c
  5542  002F68  5007               	movf	___lldiv@divisor+2,w,c
  5543  002F6A  5A03               	subwfb	___lldiv@dividend+2,f,c
  5544  002F6C  5008               	movf	___lldiv@divisor+3,w,c
  5545  002F6E  5A04               	subwfb	___lldiv@dividend+3,f,c
  5546  002F70  8009               	bsf	___lldiv@quotient,0,c
  5547  002F72                     l674:
  5548  002F72  90D8               	bcf	status,0,c
  5549  002F74  3208               	rrcf	___lldiv@divisor+3,f,c
  5550  002F76  3207               	rrcf	___lldiv@divisor+2,f,c
  5551  002F78  3206               	rrcf	___lldiv@divisor+1,f,c
  5552  002F7A  3205               	rrcf	___lldiv@divisor,f,c
  5553  002F7C  2E0D               	decfsz	___lldiv@counter,f,c
  5554  002F7E  D7E1               	goto	u3010
  5555  002F80                     l675:
  5556  002F80  C009  F001         	movff	___lldiv@quotient,?___lldiv
  5557  002F84  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  5558  002F88  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  5559  002F8C  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  5560  002F90  0012               	return		;funcret
  5561  002F92                     __end_of___lldiv:
  5562                           	opt stack 0
  5563                           tblptru	equ	0xFF8
  5564                           tblptrh	equ	0xFF7
  5565                           tblptrl	equ	0xFF6
  5566                           tablat	equ	0xFF5
  5567                           prodh	equ	0xFF4
  5568                           prodl	equ	0xFF3
  5569                           intcon	equ	0xFF2
  5570                           postinc0	equ	0xFEE
  5571                           wreg	equ	0xFE8
  5572                           indf2	equ	0xFDF
  5573                           postinc2	equ	0xFDE
  5574                           postdec2	equ	0xFDD
  5575                           fsr2h	equ	0xFDA
  5576                           fsr2l	equ	0xFD9
  5577                           status	equ	0xFD8
  5578                           
  5579 ;; *************** function _cos *****************
  5580 ;; Defined at:
  5581 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\cos.c"
  5582 ;; Parameters:    Size  Location     Type
  5583 ;;  f               3   27[BANK0 ] unsigned long 
  5584 ;; Auto vars:     Size  Location     Type
  5585 ;;		None
  5586 ;; Return value:  Size  Location     Type
  5587 ;;                  3   27[BANK0 ] unsigned long 
  5588 ;; Registers used:
  5589 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5590 ;; Tracked objects:
  5591 ;;		On entry : 0/0
  5592 ;;		On exit  : 0/0
  5593 ;;		Unchanged: 0/0
  5594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5595 ;;      Params:         0       3       0       0       0       0       0       0       0
  5596 ;;      Locals:         0       3       0       0       0       0       0       0       0
  5597 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5598 ;;      Totals:         0       6       0       0       0       0       0       0       0
  5599 ;;Total ram usage:        6 bytes
  5600 ;; Hardware stack levels used:    1
  5601 ;; Hardware stack levels required when called:    4
  5602 ;; This function calls:
  5603 ;;		___ftadd
  5604 ;;		___ftge
  5605 ;;		_sin
  5606 ;; This function is called by:
  5607 ;;		_main
  5608 ;; This function uses a non-reentrant model
  5609 ;;
  5610                           
  5611                           	psect	text12
  5612  002D50                     __ptext12:
  5613                           	opt stack 0
  5614  002D50                     _cos:
  5615                           	opt stack 26
  5616                           
  5617                           ;incstack = 0
  5618  002D50  0E10               	movlw	16
  5619  002D52  6E01               	movwf	___ftge@ff1,c
  5620  002D54  0E49               	movlw	73
  5621  002D56  6E02               	movwf	___ftge@ff1+1,c
  5622  002D58  0E40               	movlw	64
  5623  002D5A  6E03               	movwf	___ftge@ff1+2,c
  5624  002D5C  C07B  F004         	movff	cos@f,___ftge@ff2
  5625  002D60  C07C  F005         	movff	cos@f+1,___ftge@ff2+1
  5626  002D64  C07D  F006         	movff	cos@f+2,___ftge@ff2+2
  5627  002D68  ECFE  F016         	call	___ftge	;wreg free
  5628  002D6C  B0D8               	btfsc	status,0,c
  5629  002D6E  D023               	goto	l476
  5630  002D70  C07B  F015         	movff	cos@f,___ftadd@f1
  5631  002D74  C07C  F016         	movff	cos@f+1,___ftadd@f1+1
  5632  002D78  C07D  F017         	movff	cos@f+2,___ftadd@f1+2
  5633  002D7C  0ECC               	movlw	204
  5634  002D7E  6E18               	movwf	___ftadd@f2,c
  5635  002D80  0E96               	movlw	150
  5636  002D82  6E19               	movwf	___ftadd@f2+1,c
  5637  002D84  0EC0               	movlw	192
  5638  002D86  6E1A               	movwf	___ftadd@f2+2,c
  5639  002D88  EC5D  F010         	call	___ftadd	;wreg free
  5640  002D8C  C015  F07E         	movff	?___ftadd,_cos$1614
  5641  002D90  C016  F07F         	movff	?___ftadd+1,_cos$1614+1
  5642  002D94  C017  F080         	movff	?___ftadd+2,_cos$1614+2
  5643  002D98  C07E  F06E         	movff	_cos$1614,sin@f
  5644  002D9C  C07F  F06F         	movff	_cos$1614+1,sin@f+1
  5645  002DA0  C080  F070         	movff	_cos$1614+2,sin@f+2
  5646  002DA4  EC05  F00E         	call	_sin	;wreg free
  5647  002DA8  C06E  F07B         	movff	?_sin,?_cos
  5648  002DAC  C06F  F07C         	movff	?_sin+1,?_cos+1
  5649  002DB0  C070  F07D         	movff	?_sin+2,?_cos+2
  5650  002DB4  0012               	return	
  5651  002DB6                     l476:
  5652  002DB6  C07B  F015         	movff	cos@f,___ftadd@f1
  5653  002DBA  C07C  F016         	movff	cos@f+1,___ftadd@f1+1
  5654  002DBE  C07D  F017         	movff	cos@f+2,___ftadd@f1+2
  5655  002DC2  0E10               	movlw	16
  5656  002DC4  6E18               	movwf	___ftadd@f2,c
  5657  002DC6  0EC9               	movlw	201
  5658  002DC8  6E19               	movwf	___ftadd@f2+1,c
  5659  002DCA  0E3F               	movlw	63
  5660  002DCC  6E1A               	movwf	___ftadd@f2+2,c
  5661  002DCE  EC5D  F010         	call	___ftadd	;wreg free
  5662  002DD2  C015  F07E         	movff	?___ftadd,_cos$1614
  5663  002DD6  C016  F07F         	movff	?___ftadd+1,_cos$1614+1
  5664  002DDA  C017  F080         	movff	?___ftadd+2,_cos$1614+2
  5665  002DDE  C07E  F06E         	movff	_cos$1614,sin@f
  5666  002DE2  C07F  F06F         	movff	_cos$1614+1,sin@f+1
  5667  002DE6  C080  F070         	movff	_cos$1614+2,sin@f+2
  5668  002DEA  EC05  F00E         	call	_sin	;wreg free
  5669  002DEE  C06E  F07B         	movff	?_sin,?_cos
  5670  002DF2  C06F  F07C         	movff	?_sin+1,?_cos+1
  5671  002DF6  C070  F07D         	movff	?_sin+2,?_cos+2
  5672  002DFA  0012               	return	
  5673  002DFC                     __end_of_cos:
  5674                           	opt stack 0
  5675                           tblptru	equ	0xFF8
  5676                           tblptrh	equ	0xFF7
  5677                           tblptrl	equ	0xFF6
  5678                           tablat	equ	0xFF5
  5679                           prodh	equ	0xFF4
  5680                           prodl	equ	0xFF3
  5681                           intcon	equ	0xFF2
  5682                           postinc0	equ	0xFEE
  5683                           wreg	equ	0xFE8
  5684                           indf2	equ	0xFDF
  5685                           postinc2	equ	0xFDE
  5686                           postdec2	equ	0xFDD
  5687                           fsr2h	equ	0xFDA
  5688                           fsr2l	equ	0xFD9
  5689                           status	equ	0xFD8
  5690                           
  5691 ;; *************** function _sin *****************
  5692 ;; Defined at:
  5693 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sin.c"
  5694 ;; Parameters:    Size  Location     Type
  5695 ;;  f               3   14[BANK0 ] unsigned long 
  5696 ;; Auto vars:     Size  Location     Type
  5697 ;;  x2              3   23[BANK0 ] unsigned long 
  5698 ;;  y               3   17[BANK0 ] unsigned long 
  5699 ;;  sgn             1   26[BANK0 ] unsigned char 
  5700 ;; Return value:  Size  Location     Type
  5701 ;;                  3   14[BANK0 ] unsigned char 
  5702 ;; Registers used:
  5703 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5704 ;; Tracked objects:
  5705 ;;		On entry : 0/0
  5706 ;;		On exit  : 0/0
  5707 ;;		Unchanged: 0/0
  5708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5709 ;;      Params:         0       3       0       0       0       0       0       0       0
  5710 ;;      Locals:         0      10       0       0       0       0       0       0       0
  5711 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5712 ;;      Totals:         0      13       0       0       0       0       0       0       0
  5713 ;;Total ram usage:       13 bytes
  5714 ;; Hardware stack levels used:    1
  5715 ;; Hardware stack levels required when called:    3
  5716 ;; This function calls:
  5717 ;;		___ftadd
  5718 ;;		___ftdiv
  5719 ;;		___ftge
  5720 ;;		___ftmul
  5721 ;;		___ftneg
  5722 ;;		___ftsub
  5723 ;;		_eval_poly
  5724 ;;		_floor
  5725 ;; This function is called by:
  5726 ;;		_cos
  5727 ;; This function uses a non-reentrant model
  5728 ;;
  5729                           
  5730                           	psect	text13
  5731  001C0A                     __ptext13:
  5732                           	opt stack 0
  5733  001C0A                     _sin:
  5734                           	opt stack 26
  5735                           
  5736                           ;incstack = 0
  5737  001C0A  0E00               	movlw	0
  5738  001C0C  0100               	movlb	0	; () banked
  5739  001C0E  6F7A               	movwf	sin@sgn& (0+255),b
  5740                           
  5741                           ; BSR set to: 0
  5742  001C10  AF70               	btfss	(sin@f+2)& (0+255),7,b
  5743  001C12  D011               	goto	l759
  5744                           
  5745                           ; BSR set to: 0
  5746  001C14  C06E  F001         	movff	sin@f,___ftneg@f1
  5747  001C18  C06F  F002         	movff	sin@f+1,___ftneg@f1+1
  5748  001C1C  C070  F003         	movff	sin@f+2,___ftneg@f1+2
  5749  001C20  EC7C  F019         	call	___ftneg	;wreg free
  5750  001C24  C001  F06E         	movff	?___ftneg,sin@f
  5751  001C28  C002  F06F         	movff	?___ftneg+1,sin@f+1
  5752  001C2C  C003  F070         	movff	?___ftneg+2,sin@f+2
  5753  001C30  0E01               	movlw	1
  5754  001C32  0100               	movlb	0	; () banked
  5755  001C34  6F7A               	movwf	sin@sgn& (0+255),b
  5756  001C36                     l759:
  5757                           
  5758                           ; BSR set to: 0
  5759                           
  5760                           ; BSR set to: 0
  5761  001C36  C06E  F030         	movff	sin@f,___ftmul@f1
  5762  001C3A  C06F  F031         	movff	sin@f+1,___ftmul@f1+1
  5763  001C3E  C070  F032         	movff	sin@f+2,___ftmul@f1+2
  5764  001C42  0EFA               	movlw	250
  5765  001C44  6E33               	movwf	___ftmul@f2,c
  5766  001C46  0E22               	movlw	34
  5767  001C48  6E34               	movwf	___ftmul@f2+1,c
  5768  001C4A  0E3E               	movlw	62
  5769  001C4C  6E35               	movwf	___ftmul@f2+2,c
  5770  001C4E  EC8B  F014         	call	___ftmul	;wreg free
  5771  001C52  C030  F06E         	movff	?___ftmul,sin@f
  5772  001C56  C031  F06F         	movff	?___ftmul+1,sin@f+1
  5773  001C5A  C032  F070         	movff	?___ftmul+2,sin@f+2
  5774  001C5E  C06E  F068         	movff	sin@f,___ftsub@f1
  5775  001C62  C06F  F069         	movff	sin@f+1,___ftsub@f1+1
  5776  001C66  C070  F06A         	movff	sin@f+2,___ftsub@f1+2
  5777  001C6A  C06E  F060         	movff	sin@f,floor@x
  5778  001C6E  C06F  F061         	movff	sin@f+1,floor@x+1
  5779  001C72  C070  F062         	movff	sin@f+2,floor@x+2
  5780  001C76  EC78  F015         	call	_floor	;wreg free
  5781  001C7A  C060  F06B         	movff	?_floor,___ftsub@f2
  5782  001C7E  C061  F06C         	movff	?_floor+1,___ftsub@f2+1
  5783  001C82  C062  F06D         	movff	?_floor+2,___ftsub@f2+2
  5784  001C86  EC48  F019         	call	___ftsub	;wreg free
  5785  001C8A  C068  F06E         	movff	?___ftsub,sin@f
  5786  001C8E  C069  F06F         	movff	?___ftsub+1,sin@f+1
  5787  001C92  C06A  F070         	movff	?___ftsub+2,sin@f+2
  5788  001C96  C06E  F030         	movff	sin@f,___ftmul@f1
  5789  001C9A  C06F  F031         	movff	sin@f+1,___ftmul@f1+1
  5790  001C9E  C070  F032         	movff	sin@f+2,___ftmul@f1+2
  5791  001CA2  0E00               	movlw	0
  5792  001CA4  6E33               	movwf	___ftmul@f2,c
  5793  001CA6  0E80               	movlw	128
  5794  001CA8  6E34               	movwf	___ftmul@f2+1,c
  5795  001CAA  0E40               	movlw	64
  5796  001CAC  6E35               	movwf	___ftmul@f2+2,c
  5797  001CAE  EC8B  F014         	call	___ftmul	;wreg free
  5798  001CB2  C030  F06E         	movff	?___ftmul,sin@f
  5799  001CB6  C031  F06F         	movff	?___ftmul+1,sin@f+1
  5800  001CBA  C032  F070         	movff	?___ftmul+2,sin@f+2
  5801  001CBE  0E00               	movlw	0
  5802  001CC0  6E01               	movwf	___ftge@ff1,c
  5803  001CC2  0E00               	movlw	0
  5804  001CC4  6E02               	movwf	___ftge@ff1+1,c
  5805  001CC6  0E40               	movlw	64
  5806  001CC8  6E03               	movwf	___ftge@ff1+2,c
  5807  001CCA  C06E  F004         	movff	sin@f,___ftge@ff2
  5808  001CCE  C06F  F005         	movff	sin@f+1,___ftge@ff2+1
  5809  001CD2  C070  F006         	movff	sin@f+2,___ftge@ff2+2
  5810  001CD6  ECFE  F016         	call	___ftge	;wreg free
  5811  001CDA  B0D8               	btfsc	status,0,c
  5812  001CDC  D01D               	goto	l760
  5813  001CDE  C06E  F068         	movff	sin@f,___ftsub@f1
  5814  001CE2  C06F  F069         	movff	sin@f+1,___ftsub@f1+1
  5815  001CE6  C070  F06A         	movff	sin@f+2,___ftsub@f1+2
  5816  001CEA  0E00               	movlw	0
  5817  001CEC  0100               	movlb	0	; () banked
  5818  001CEE  6F6B               	movwf	___ftsub@f2& (0+255),b
  5819  001CF0  0E00               	movlw	0
  5820  001CF2  6F6C               	movwf	(___ftsub@f2+1)& (0+255),b
  5821  001CF4  0E40               	movlw	64
  5822  001CF6  6F6D               	movwf	(___ftsub@f2+2)& (0+255),b
  5823  001CF8  EC48  F019         	call	___ftsub	;wreg free
  5824  001CFC  C068  F06E         	movff	?___ftsub,sin@f
  5825  001D00  C069  F06F         	movff	?___ftsub+1,sin@f+1
  5826  001D04  C06A  F070         	movff	?___ftsub+2,sin@f+2
  5827  001D08  0100               	movlb	0	; () banked
  5828  001D0A  517A               	movf	sin@sgn& (0+255),w,b
  5829  001D0C  A4D8               	btfss	status,2,c
  5830  001D0E  D002               	goto	u2960
  5831  001D10  0E01               	movlw	1
  5832  001D12  D001               	goto	u2970
  5833  001D14                     u2960:
  5834  001D14  0E00               	movlw	0
  5835  001D16                     u2970:
  5836  001D16  6F7A               	movwf	sin@sgn& (0+255),b
  5837  001D18                     l760:
  5838                           
  5839                           ; BSR set to: 0
  5840  001D18  0E00               	movlw	0
  5841  001D1A  6E01               	movwf	___ftge@ff1,c
  5842  001D1C  0E80               	movlw	128
  5843  001D1E  6E02               	movwf	___ftge@ff1+1,c
  5844  001D20  0E3F               	movlw	63
  5845  001D22  6E03               	movwf	___ftge@ff1+2,c
  5846  001D24  C06E  F004         	movff	sin@f,___ftge@ff2
  5847  001D28  C06F  F005         	movff	sin@f+1,___ftge@ff2+1
  5848  001D2C  C070  F006         	movff	sin@f+2,___ftge@ff2+2
  5849  001D30  ECFE  F016         	call	___ftge	;wreg free
  5850  001D34  B0D8               	btfsc	status,0,c
  5851  001D36  D01C               	goto	l761
  5852  001D38  C06E  F001         	movff	sin@f,___ftneg@f1
  5853  001D3C  C06F  F002         	movff	sin@f+1,___ftneg@f1+1
  5854  001D40  C070  F003         	movff	sin@f+2,___ftneg@f1+2
  5855  001D44  EC7C  F019         	call	___ftneg	;wreg free
  5856  001D48  C001  F015         	movff	?___ftneg,___ftadd@f1
  5857  001D4C  C002  F016         	movff	?___ftneg+1,___ftadd@f1+1
  5858  001D50  C003  F017         	movff	?___ftneg+2,___ftadd@f1+2
  5859  001D54  0E00               	movlw	0
  5860  001D56  6E18               	movwf	___ftadd@f2,c
  5861  001D58  0E00               	movlw	0
  5862  001D5A  6E19               	movwf	___ftadd@f2+1,c
  5863  001D5C  0E40               	movlw	64
  5864  001D5E  6E1A               	movwf	___ftadd@f2+2,c
  5865  001D60  EC5D  F010         	call	___ftadd	;wreg free
  5866  001D64  C015  F06E         	movff	?___ftadd,sin@f
  5867  001D68  C016  F06F         	movff	?___ftadd+1,sin@f+1
  5868  001D6C  C017  F070         	movff	?___ftadd+2,sin@f+2
  5869  001D70                     l761:
  5870  001D70  C06E  F030         	movff	sin@f,___ftmul@f1
  5871  001D74  C06F  F031         	movff	sin@f+1,___ftmul@f1+1
  5872  001D78  C070  F032         	movff	sin@f+2,___ftmul@f1+2
  5873  001D7C  C06E  F033         	movff	sin@f,___ftmul@f2
  5874  001D80  C06F  F034         	movff	sin@f+1,___ftmul@f2+1
  5875  001D84  C070  F035         	movff	sin@f+2,___ftmul@f2+2
  5876  001D88  EC8B  F014         	call	___ftmul	;wreg free
  5877  001D8C  C030  F077         	movff	?___ftmul,sin@x2
  5878  001D90  C031  F078         	movff	?___ftmul+1,sin@x2+1
  5879  001D94  C032  F079         	movff	?___ftmul+2,sin@x2+2
  5880  001D98  C077  F03F         	movff	sin@x2,eval_poly@x
  5881  001D9C  C078  F040         	movff	sin@x2+1,eval_poly@x+1
  5882  001DA0  C079  F041         	movff	sin@x2+2,eval_poly@x+2
  5883  001DA4  0E86               	movlw	low sin@coeff_b
  5884  001DA6  6E42               	movwf	eval_poly@d,c
  5885  001DA8  0E08               	movlw	high sin@coeff_b
  5886  001DAA  6E43               	movwf	eval_poly@d+1,c
  5887  001DAC  0E00               	movlw	0
  5888  001DAE  6E45               	movwf	eval_poly@n+1,c
  5889  001DB0  0E03               	movlw	3
  5890  001DB2  6E44               	movwf	eval_poly@n,c
  5891  001DB4  ECE8  F015         	call	_eval_poly	;wreg free
  5892  001DB8  C03F  F071         	movff	?_eval_poly,sin@y
  5893  001DBC  C040  F072         	movff	?_eval_poly+1,sin@y+1
  5894  001DC0  C041  F073         	movff	?_eval_poly+2,sin@y+2
  5895  001DC4  C071  F024         	movff	sin@y,___ftdiv@f2
  5896  001DC8  C072  F025         	movff	sin@y+1,___ftdiv@f2+1
  5897  001DCC  C073  F026         	movff	sin@y+2,___ftdiv@f2+2
  5898  001DD0  0E00               	movlw	0
  5899  001DD2  6E45               	movwf	eval_poly@n+1,c
  5900  001DD4  0E04               	movlw	4
  5901  001DD6  6E44               	movwf	eval_poly@n,c
  5902  001DD8  0E77               	movlw	low sin@coeff_a
  5903  001DDA  6E42               	movwf	eval_poly@d,c
  5904  001DDC  0E08               	movlw	high sin@coeff_a
  5905  001DDE  6E43               	movwf	eval_poly@d+1,c
  5906  001DE0  C077  F03F         	movff	sin@x2,eval_poly@x
  5907  001DE4  C078  F040         	movff	sin@x2+1,eval_poly@x+1
  5908  001DE8  C079  F041         	movff	sin@x2+2,eval_poly@x+2
  5909  001DEC  ECE8  F015         	call	_eval_poly	;wreg free
  5910  001DF0  C03F  F021         	movff	?_eval_poly,___ftdiv@f1
  5911  001DF4  C040  F022         	movff	?_eval_poly+1,___ftdiv@f1+1
  5912  001DF8  C041  F023         	movff	?_eval_poly+2,___ftdiv@f1+2
  5913  001DFC  EC05  F015         	call	___ftdiv	;wreg free
  5914  001E00  C021  F074         	movff	?___ftdiv,_sin$1615
  5915  001E04  C022  F075         	movff	?___ftdiv+1,_sin$1615+1
  5916  001E08  C023  F076         	movff	?___ftdiv+2,_sin$1615+2
  5917  001E0C  C06E  F030         	movff	sin@f,___ftmul@f1
  5918  001E10  C06F  F031         	movff	sin@f+1,___ftmul@f1+1
  5919  001E14  C070  F032         	movff	sin@f+2,___ftmul@f1+2
  5920  001E18  C074  F033         	movff	_sin$1615,___ftmul@f2
  5921  001E1C  C075  F034         	movff	_sin$1615+1,___ftmul@f2+1
  5922  001E20  C076  F035         	movff	_sin$1615+2,___ftmul@f2+2
  5923  001E24  EC8B  F014         	call	___ftmul	;wreg free
  5924  001E28  C030  F06E         	movff	?___ftmul,sin@f
  5925  001E2C  C031  F06F         	movff	?___ftmul+1,sin@f+1
  5926  001E30  C032  F070         	movff	?___ftmul+2,sin@f+2
  5927  001E34  0100               	movlb	0	; () banked
  5928  001E36  517A               	movf	sin@sgn& (0+255),w,b
  5929  001E38  B4D8               	btfsc	status,2,c
  5930  001E3A  D00F               	goto	l762
  5931                           
  5932                           ; BSR set to: 0
  5933  001E3C  C06E  F001         	movff	sin@f,___ftneg@f1
  5934  001E40  C06F  F002         	movff	sin@f+1,___ftneg@f1+1
  5935  001E44  C070  F003         	movff	sin@f+2,___ftneg@f1+2
  5936  001E48  EC7C  F019         	call	___ftneg	;wreg free
  5937  001E4C  C001  F06E         	movff	?___ftneg,?_sin
  5938  001E50  C002  F06F         	movff	?___ftneg+1,?_sin+1
  5939  001E54  C003  F070         	movff	?___ftneg+2,?_sin+2
  5940  001E58  0012               	return	
  5941  001E5A                     l762:
  5942                           
  5943                           ; BSR set to: 0
  5944  001E5A  C06E  F06E         	movff	sin@f,?_sin
  5945  001E5E  C06F  F06F         	movff	sin@f+1,?_sin+1
  5946  001E62  C070  F070         	movff	sin@f+2,?_sin+2
  5947  001E66  0012               	return		;funcret
  5948  001E68                     __end_of_sin:
  5949                           	opt stack 0
  5950                           tblptru	equ	0xFF8
  5951                           tblptrh	equ	0xFF7
  5952                           tblptrl	equ	0xFF6
  5953                           tablat	equ	0xFF5
  5954                           prodh	equ	0xFF4
  5955                           prodl	equ	0xFF3
  5956                           intcon	equ	0xFF2
  5957                           postinc0	equ	0xFEE
  5958                           wreg	equ	0xFE8
  5959                           indf2	equ	0xFDF
  5960                           postinc2	equ	0xFDE
  5961                           postdec2	equ	0xFDD
  5962                           fsr2h	equ	0xFDA
  5963                           fsr2l	equ	0xFD9
  5964                           status	equ	0xFD8
  5965                           
  5966 ;; *************** function _floor *****************
  5967 ;; Defined at:
  5968 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\floor.c"
  5969 ;; Parameters:    Size  Location     Type
  5970 ;;  x               3    0[BANK0 ] unsigned char 
  5971 ;; Auto vars:     Size  Location     Type
  5972 ;;  i               3    3[BANK0 ] unsigned char 
  5973 ;;  expon           2    6[BANK0 ] int 
  5974 ;; Return value:  Size  Location     Type
  5975 ;;                  3    0[BANK0 ] int 
  5976 ;; Registers used:
  5977 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5978 ;; Tracked objects:
  5979 ;;		On entry : 0/0
  5980 ;;		On exit  : 0/0
  5981 ;;		Unchanged: 0/0
  5982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5983 ;;      Params:         0       3       0       0       0       0       0       0       0
  5984 ;;      Locals:         0       5       0       0       0       0       0       0       0
  5985 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5986 ;;      Totals:         0       8       0       0       0       0       0       0       0
  5987 ;;Total ram usage:        8 bytes
  5988 ;; Hardware stack levels used:    1
  5989 ;; Hardware stack levels required when called:    2
  5990 ;; This function calls:
  5991 ;;		___altoft
  5992 ;;		___ftadd
  5993 ;;		___ftge
  5994 ;;		___fttol
  5995 ;;		_frexp
  5996 ;; This function is called by:
  5997 ;;		_sin
  5998 ;; This function uses a non-reentrant model
  5999 ;;
  6000                           
  6001                           	psect	text14
  6002  002AF0                     __ptext14:
  6003                           	opt stack 0
  6004  002AF0                     _floor:
  6005                           	opt stack 26
  6006                           
  6007                           ;incstack = 0
  6008  002AF0  C060  F001         	movff	floor@x,frexp@value
  6009  002AF4  C061  F002         	movff	floor@x+1,frexp@value+1
  6010  002AF8  C062  F003         	movff	floor@x+2,frexp@value+2
  6011  002AFC  0E66               	movlw	low floor@expon
  6012  002AFE  6E04               	movwf	frexp@eptr,c
  6013  002B00  0E00               	movlw	high floor@expon
  6014  002B02  6E05               	movwf	frexp@eptr+1,c
  6015  002B04  EC06  F018         	call	_frexp	;wreg free
  6016  002B08  0100               	movlb	0	; () banked
  6017  002B0A  AF67               	btfss	(floor@expon+1)& (0+255),7,b
  6018  002B0C  D010               	goto	l913
  6019                           
  6020                           ; BSR set to: 0
  6021  002B0E  AF62               	btfss	(floor@x+2)& (0+255),7,b
  6022  002B10  D007               	goto	l914
  6023                           
  6024                           ; BSR set to: 0
  6025  002B12  0E00               	movlw	0
  6026  002B14  6F60               	movwf	?_floor& (0+255),b
  6027  002B16  0E80               	movlw	128
  6028  002B18  6F61               	movwf	(?_floor+1)& (0+255),b
  6029  002B1A  0EBF               	movlw	191
  6030  002B1C  6F62               	movwf	(?_floor+2)& (0+255),b
  6031                           
  6032                           ; BSR set to: 0
  6033  002B1E  0012               	return	
  6034  002B20                     l914:
  6035                           
  6036                           ; BSR set to: 0
  6037                           
  6038                           ; BSR set to: 0
  6039  002B20  0E00               	movlw	0
  6040  002B22  6F60               	movwf	?_floor& (0+255),b
  6041  002B24  0E00               	movlw	0
  6042  002B26  6F61               	movwf	(?_floor+1)& (0+255),b
  6043  002B28  0E00               	movlw	0
  6044  002B2A  6F62               	movwf	(?_floor+2)& (0+255),b
  6045                           
  6046                           ; BSR set to: 0
  6047  002B2C  0012               	return	
  6048  002B2E                     l913:
  6049                           
  6050                           ; BSR set to: 0
  6051                           
  6052                           ; BSR set to: 0
  6053  002B2E  5167               	movf	(floor@expon+1)& (0+255),w,b
  6054  002B30  E104               	bnz	u2600
  6055  002B32  0E15               	movlw	21
  6056  002B34  5D66               	subwf	floor@expon& (0+255),w,b
  6057  002B36  A0D8               	btfss	status,0,c
  6058  002B38  D007               	goto	l916
  6059  002B3A                     u2600:
  6060                           
  6061                           ; BSR set to: 0
  6062  002B3A  C060  F060         	movff	floor@x,?_floor
  6063  002B3E  C061  F061         	movff	floor@x+1,?_floor+1
  6064  002B42  C062  F062         	movff	floor@x+2,?_floor+2
  6065  002B46  0012               	return	
  6066  002B48                     l916:
  6067                           
  6068                           ; BSR set to: 0
  6069                           
  6070                           ; BSR set to: 0
  6071  002B48  C060  F046         	movff	floor@x,___fttol@f1
  6072  002B4C  C061  F047         	movff	floor@x+1,___fttol@f1+1
  6073  002B50  C062  F048         	movff	floor@x+2,___fttol@f1+2
  6074  002B54  EC11  F014         	call	___fttol	;wreg free
  6075  002B58  C046  F055         	movff	?___fttol,___altoft@c
  6076  002B5C  C047  F056         	movff	?___fttol+1,___altoft@c+1
  6077  002B60  C048  F057         	movff	?___fttol+2,___altoft@c+2
  6078  002B64  C049  F058         	movff	?___fttol+3,___altoft@c+3
  6079  002B68  EC42  F018         	call	___altoft	;wreg free
  6080  002B6C  C055  F063         	movff	?___altoft,floor@i
  6081  002B70  C056  F064         	movff	?___altoft+1,floor@i+1
  6082  002B74  C057  F065         	movff	?___altoft+2,floor@i+2
  6083  002B78  C060  F001         	movff	floor@x,___ftge@ff1
  6084  002B7C  C061  F002         	movff	floor@x+1,___ftge@ff1+1
  6085  002B80  C062  F003         	movff	floor@x+2,___ftge@ff1+2
  6086  002B84  C063  F004         	movff	floor@i,___ftge@ff2
  6087  002B88  C064  F005         	movff	floor@i+1,___ftge@ff2+1
  6088  002B8C  C065  F006         	movff	floor@i+2,___ftge@ff2+2
  6089  002B90  ECFE  F016         	call	___ftge	;wreg free
  6090  002B94  B0D8               	btfsc	status,0,c
  6091  002B96  D015               	goto	l917
  6092  002B98  C063  F015         	movff	floor@i,___ftadd@f1
  6093  002B9C  C064  F016         	movff	floor@i+1,___ftadd@f1+1
  6094  002BA0  C065  F017         	movff	floor@i+2,___ftadd@f1+2
  6095  002BA4  0E00               	movlw	0
  6096  002BA6  6E18               	movwf	___ftadd@f2,c
  6097  002BA8  0E80               	movlw	128
  6098  002BAA  6E19               	movwf	___ftadd@f2+1,c
  6099  002BAC  0EBF               	movlw	191
  6100  002BAE  6E1A               	movwf	___ftadd@f2+2,c
  6101  002BB0  EC5D  F010         	call	___ftadd	;wreg free
  6102  002BB4  C015  F060         	movff	?___ftadd,?_floor
  6103  002BB8  C016  F061         	movff	?___ftadd+1,?_floor+1
  6104  002BBC  C017  F062         	movff	?___ftadd+2,?_floor+2
  6105  002BC0  0012               	return	
  6106  002BC2                     l917:
  6107  002BC2  C063  F060         	movff	floor@i,?_floor
  6108  002BC6  C064  F061         	movff	floor@i+1,?_floor+1
  6109  002BCA  C065  F062         	movff	floor@i+2,?_floor+2
  6110  002BCE  0012               	return		;funcret
  6111  002BD0                     __end_of_floor:
  6112                           	opt stack 0
  6113                           tblptru	equ	0xFF8
  6114                           tblptrh	equ	0xFF7
  6115                           tblptrl	equ	0xFF6
  6116                           tablat	equ	0xFF5
  6117                           prodh	equ	0xFF4
  6118                           prodl	equ	0xFF3
  6119                           intcon	equ	0xFF2
  6120                           postinc0	equ	0xFEE
  6121                           wreg	equ	0xFE8
  6122                           indf2	equ	0xFDF
  6123                           postinc2	equ	0xFDE
  6124                           postdec2	equ	0xFDD
  6125                           fsr2h	equ	0xFDA
  6126                           fsr2l	equ	0xFD9
  6127                           status	equ	0xFD8
  6128                           
  6129 ;; *************** function _frexp *****************
  6130 ;; Defined at:
  6131 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
  6132 ;; Parameters:    Size  Location     Type
  6133 ;;  value           3    0[COMRAM] int 
  6134 ;;  eptr            2    3[COMRAM] PTR int 
  6135 ;;		 -> floor@expon(2), 
  6136 ;; Auto vars:     Size  Location     Type
  6137 ;;		None
  6138 ;; Return value:  Size  Location     Type
  6139 ;;                  3    0[COMRAM] PTR int 
  6140 ;; Registers used:
  6141 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6142 ;; Tracked objects:
  6143 ;;		On entry : 0/0
  6144 ;;		On exit  : 0/0
  6145 ;;		Unchanged: 0/0
  6146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6147 ;;      Params:         5       0       0       0       0       0       0       0       0
  6148 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6149 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6150 ;;      Totals:         7       0       0       0       0       0       0       0       0
  6151 ;;Total ram usage:        7 bytes
  6152 ;; Hardware stack levels used:    1
  6153 ;; This function calls:
  6154 ;;		Nothing
  6155 ;; This function is called by:
  6156 ;;		_floor
  6157 ;; This function uses a non-reentrant model
  6158 ;;
  6159                           
  6160                           	psect	text15
  6161  00300C                     __ptext15:
  6162                           	opt stack 0
  6163  00300C                     _frexp:
  6164                           	opt stack 27
  6165                           
  6166                           ;incstack = 0
  6167  00300C  5001               	movf	frexp@value,w,c
  6168  00300E  1002               	iorwf	frexp@value+1,w,c
  6169  003010  1003               	iorwf	frexp@value+2,w,c
  6170  003012  A4D8               	btfss	status,2,c
  6171  003014  D009               	goto	l922
  6172  003016  C004  FFD9         	movff	frexp@eptr,fsr2l
  6173  00301A  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  6174  00301E  0E00               	movlw	0
  6175  003020  6EDE               	movwf	postinc2,c
  6176  003022  0E00               	movlw	0
  6177  003024  6EDD               	movwf	postdec2,c
  6178                           
  6179                           ;	Return value of _frexp is never used
  6180  003026  0012               	return	
  6181  003028                     l922:
  6182  003028  5003               	movf	frexp@value+2,w,c
  6183  00302A  0B7F               	andlw	127
  6184  00302C  6E06               	movwf	??_frexp& (0+255),c
  6185  00302E  6A07               	clrf	(??_frexp+1)& (0+255),c
  6186  003030  90D8               	bcf	status,0,c
  6187  003032  3606               	rlcf	??_frexp,f,c
  6188  003034  3607               	rlcf	??_frexp+1,f,c
  6189  003036  C004  FFD9         	movff	frexp@eptr,fsr2l
  6190  00303A  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  6191  00303E  C006  FFDE         	movff	??_frexp,postinc2
  6192  003042  C007  FFDD         	movff	??_frexp+1,postdec2
  6193  003046  AE02               	btfss	frexp@value+1,7,c
  6194  003048  D003               	goto	u2380
  6195  00304A  6A06               	clrf	??_frexp& (0+255),c
  6196  00304C  2A06               	incf	??_frexp& (0+255),f,c
  6197  00304E  D001               	goto	u2388
  6198  003050                     u2380:
  6199  003050  6A06               	clrf	??_frexp& (0+255),c
  6200  003052                     u2388:
  6201  003052  5006               	movf	??_frexp,w,c
  6202  003054  C004  FFD9         	movff	frexp@eptr,fsr2l
  6203  003058  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  6204  00305C  12DE               	iorwf	postinc2,f,c
  6205  00305E  0E00               	movlw	0
  6206  003060  12DD               	iorwf	postdec2,f,c
  6207  003062  C004  FFD9         	movff	frexp@eptr,fsr2l
  6208  003066  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  6209  00306A  0E82               	movlw	130
  6210  00306C  26DE               	addwf	postinc2,f,c
  6211  00306E  0EFF               	movlw	255
  6212  003070  22DD               	addwfc	postdec2,f,c
  6213  003072  8003               	bsf	frexp@value+2,0,c
  6214  003074  8203               	bsf	frexp@value+2,1,c
  6215  003076  8403               	bsf	frexp@value+2,2,c
  6216  003078  8603               	bsf	frexp@value+2,3,c
  6217  00307A  8803               	bsf	frexp@value+2,4,c
  6218  00307C  8A03               	bsf	frexp@value+2,5,c
  6219  00307E  9C03               	bcf	frexp@value+2,6,c
  6220  003080  9E02               	bcf	frexp@value+1,7,c
  6221  003082  0012               	return	
  6222  003084                     __end_of_frexp:
  6223                           	opt stack 0
  6224                           tblptru	equ	0xFF8
  6225                           tblptrh	equ	0xFF7
  6226                           tblptrl	equ	0xFF6
  6227                           tablat	equ	0xFF5
  6228                           prodh	equ	0xFF4
  6229                           prodl	equ	0xFF3
  6230                           intcon	equ	0xFF2
  6231                           postinc0	equ	0xFEE
  6232                           wreg	equ	0xFE8
  6233                           indf2	equ	0xFDF
  6234                           postinc2	equ	0xFDE
  6235                           postdec2	equ	0xFDD
  6236                           fsr2h	equ	0xFDA
  6237                           fsr2l	equ	0xFD9
  6238                           status	equ	0xFD8
  6239                           
  6240 ;; *************** function ___fttol *****************
  6241 ;; Defined at:
  6242 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  6243 ;; Parameters:    Size  Location     Type
  6244 ;;  f1              3   69[COMRAM] float 
  6245 ;; Auto vars:     Size  Location     Type
  6246 ;;  lval            4   79[COMRAM] unsigned long 
  6247 ;;  exp1            1   83[COMRAM] unsigned char 
  6248 ;;  sign1           1   78[COMRAM] unsigned char 
  6249 ;; Return value:  Size  Location     Type
  6250 ;;                  4   69[COMRAM] long 
  6251 ;; Registers used:
  6252 ;;		wreg, status,2, status,0
  6253 ;; Tracked objects:
  6254 ;;		On entry : 0/0
  6255 ;;		On exit  : 0/0
  6256 ;;		Unchanged: 0/0
  6257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6258 ;;      Params:         4       0       0       0       0       0       0       0       0
  6259 ;;      Locals:         6       0       0       0       0       0       0       0       0
  6260 ;;      Temps:          5       0       0       0       0       0       0       0       0
  6261 ;;      Totals:        15       0       0       0       0       0       0       0       0
  6262 ;;Total ram usage:       15 bytes
  6263 ;; Hardware stack levels used:    1
  6264 ;; This function calls:
  6265 ;;		Nothing
  6266 ;; This function is called by:
  6267 ;;		_sprintf
  6268 ;;		_floor
  6269 ;; This function uses a non-reentrant model
  6270 ;;
  6271                           
  6272                           	psect	text16
  6273  002822                     __ptext16:
  6274                           	opt stack 0
  6275  002822                     ___fttol:
  6276                           	opt stack 29
  6277                           
  6278                           ;incstack = 0
  6279  002822  C048  F04A         	movff	___fttol@f1+2,??___fttol
  6280  002826  6A4B               	clrf	(??___fttol+1)& (0+255),c
  6281  002828  6A4C               	clrf	(??___fttol+2)& (0+255),c
  6282  00282A  3447               	rlcf	___fttol@f1+1,w,c
  6283  00282C  364A               	rlcf	??___fttol& (0+255),f,c
  6284  00282E  E301               	bnc	u2291
  6285  002830  804B               	bsf	(??___fttol+1)& (0+255),0,c
  6286  002832                     u2291:
  6287  002832  504A               	movf	??___fttol,w,c
  6288  002834  6E54               	movwf	___fttol@exp1,c
  6289  002836  5054               	movf	___fttol@exp1,w,c
  6290  002838  A4D8               	btfss	status,2,c
  6291  00283A  D009               	goto	l629
  6292  00283C  0E00               	movlw	0
  6293  00283E  6E46               	movwf	?___fttol,c
  6294  002840  0E00               	movlw	0
  6295  002842  6E47               	movwf	?___fttol+1,c
  6296  002844  0E00               	movlw	0
  6297  002846  6E48               	movwf	?___fttol+2,c
  6298  002848  0E00               	movlw	0
  6299  00284A  6E49               	movwf	?___fttol+3,c
  6300  00284C  0012               	return	
  6301  00284E                     l629:
  6302  00284E  0E17               	movlw	23
  6303  002850  6E4A               	movwf	??___fttol& (0+255),c
  6304  002852  C046  F04B         	movff	___fttol@f1,??___fttol+1
  6305  002856  C047  F04C         	movff	___fttol@f1+1,??___fttol+2
  6306  00285A  C048  F04D         	movff	___fttol@f1+2,??___fttol+3
  6307  00285E  284A               	incf	??___fttol,w,c
  6308  002860  6E4E               	movwf	(??___fttol+4)& (0+255),c
  6309  002862  D004               	goto	u2310
  6310  002864                     u2315:
  6311  002864  90D8               	bcf	status,0,c
  6312  002866  324D               	rrcf	??___fttol+3,f,c
  6313  002868  324C               	rrcf	??___fttol+2,f,c
  6314  00286A  324B               	rrcf	??___fttol+1,f,c
  6315  00286C                     u2310:
  6316  00286C  2E4E               	decfsz	(??___fttol+4)& (0+255),f,c
  6317  00286E  D7FA               	goto	u2315
  6318  002870  504B               	movf	??___fttol+1,w,c
  6319  002872  6E4F               	movwf	___fttol@sign1,c
  6320  002874  8E47               	bsf	___fttol@f1+1,7,c
  6321  002876  0EFF               	movlw	255
  6322  002878  1646               	andwf	___fttol@f1,f,c
  6323  00287A  0EFF               	movlw	255
  6324  00287C  1647               	andwf	___fttol@f1+1,f,c
  6325  00287E  0E00               	movlw	0
  6326  002880  1648               	andwf	___fttol@f1+2,f,c
  6327  002882  5046               	movf	___fttol@f1,w,c
  6328  002884  6E50               	movwf	___fttol@lval,c
  6329  002886  5047               	movf	___fttol@f1+1,w,c
  6330  002888  6E51               	movwf	___fttol@lval+1,c
  6331  00288A  5048               	movf	___fttol@f1+2,w,c
  6332  00288C  6E52               	movwf	___fttol@lval+2,c
  6333  00288E  6A53               	clrf	___fttol@lval+3,c
  6334  002890  0E8E               	movlw	142
  6335  002892  5E54               	subwf	___fttol@exp1,f,c
  6336  002894  AE54               	btfss	___fttol@exp1,7,c
  6337  002896  D016               	goto	l631
  6338  002898  5054               	movf	___fttol@exp1,w,c
  6339  00289A  0A80               	xorlw	128
  6340  00289C  0F8F               	addlw	143
  6341  00289E  B0D8               	btfsc	status,0,c
  6342  0028A0  D009               	goto	l632
  6343  0028A2  0E00               	movlw	0
  6344  0028A4  6E46               	movwf	?___fttol,c
  6345  0028A6  0E00               	movlw	0
  6346  0028A8  6E47               	movwf	?___fttol+1,c
  6347  0028AA  0E00               	movlw	0
  6348  0028AC  6E48               	movwf	?___fttol+2,c
  6349  0028AE  0E00               	movlw	0
  6350  0028B0  6E49               	movwf	?___fttol+3,c
  6351  0028B2  0012               	return	
  6352  0028B4                     l632:
  6353  0028B4  90D8               	bcf	status,0,c
  6354  0028B6  3253               	rrcf	___fttol@lval+3,f,c
  6355  0028B8  3252               	rrcf	___fttol@lval+2,f,c
  6356  0028BA  3251               	rrcf	___fttol@lval+1,f,c
  6357  0028BC  3250               	rrcf	___fttol@lval,f,c
  6358  0028BE  3E54               	incfsz	___fttol@exp1,f,c
  6359  0028C0  D7F9               	goto	l632
  6360  0028C2  D015               	goto	u2350
  6361  0028C4                     l631:
  6362  0028C4  0E17               	movlw	23
  6363  0028C6  6454               	cpfsgt	___fttol@exp1,c
  6364  0028C8  D00F               	goto	l637
  6365  0028CA  0E00               	movlw	0
  6366  0028CC  6E46               	movwf	?___fttol,c
  6367  0028CE  0E00               	movlw	0
  6368  0028D0  6E47               	movwf	?___fttol+1,c
  6369  0028D2  0E00               	movlw	0
  6370  0028D4  6E48               	movwf	?___fttol+2,c
  6371  0028D6  0E00               	movlw	0
  6372  0028D8  6E49               	movwf	?___fttol+3,c
  6373  0028DA  0012               	return	
  6374  0028DC  90D8               	bcf	status,0,c
  6375  0028DE  3650               	rlcf	___fttol@lval,f,c
  6376  0028E0  3651               	rlcf	___fttol@lval+1,f,c
  6377  0028E2  3652               	rlcf	___fttol@lval+2,f,c
  6378  0028E4  3653               	rlcf	___fttol@lval+3,f,c
  6379  0028E6  0654               	decf	___fttol@exp1,f,c
  6380  0028E8                     l637:
  6381  0028E8  5054               	movf	___fttol@exp1,w,c
  6382  0028EA  A4D8               	btfss	status,2,c
  6383  0028EC  D7F7               	goto	l638
  6384  0028EE                     u2350:
  6385  0028EE  504F               	movf	___fttol@sign1,w,c
  6386  0028F0  B4D8               	btfsc	status,2,c
  6387  0028F2  D008               	goto	l640
  6388  0028F4  1E53               	comf	___fttol@lval+3,f,c
  6389  0028F6  1E52               	comf	___fttol@lval+2,f,c
  6390  0028F8  1E51               	comf	___fttol@lval+1,f,c
  6391  0028FA  6C50               	negf	___fttol@lval,c
  6392  0028FC  0E00               	movlw	0
  6393  0028FE  2251               	addwfc	___fttol@lval+1,f,c
  6394  002900  2252               	addwfc	___fttol@lval+2,f,c
  6395  002902  2253               	addwfc	___fttol@lval+3,f,c
  6396  002904                     l640:
  6397  002904  C050  F046         	movff	___fttol@lval,?___fttol
  6398  002908  C051  F047         	movff	___fttol@lval+1,?___fttol+1
  6399  00290C  C052  F048         	movff	___fttol@lval+2,?___fttol+2
  6400  002910  C053  F049         	movff	___fttol@lval+3,?___fttol+3
  6401  002914  0012               	return	
  6402  002916                     __end_of___fttol:
  6403                           	opt stack 0
  6404                           tblptru	equ	0xFF8
  6405                           tblptrh	equ	0xFF7
  6406                           tblptrl	equ	0xFF6
  6407                           tablat	equ	0xFF5
  6408                           prodh	equ	0xFF4
  6409                           prodl	equ	0xFF3
  6410                           intcon	equ	0xFF2
  6411                           postinc0	equ	0xFEE
  6412                           wreg	equ	0xFE8
  6413                           indf2	equ	0xFDF
  6414                           postinc2	equ	0xFDE
  6415                           postdec2	equ	0xFDD
  6416                           fsr2h	equ	0xFDA
  6417                           fsr2l	equ	0xFD9
  6418                           status	equ	0xFD8
  6419                           
  6420 ;; *************** function ___ftge *****************
  6421 ;; Defined at:
  6422 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  6423 ;; Parameters:    Size  Location     Type
  6424 ;;  ff1             3    0[COMRAM] float 
  6425 ;;  ff2             3    3[COMRAM] float 
  6426 ;; Auto vars:     Size  Location     Type
  6427 ;;		None
  6428 ;; Return value:  Size  Location     Type
  6429 ;;		None               void
  6430 ;; Registers used:
  6431 ;;		wreg, status,2, status,0
  6432 ;; Tracked objects:
  6433 ;;		On entry : 0/0
  6434 ;;		On exit  : 0/0
  6435 ;;		Unchanged: 0/0
  6436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6437 ;;      Params:         6       0       0       0       0       0       0       0       0
  6438 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6439 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6440 ;;      Totals:         9       0       0       0       0       0       0       0       0
  6441 ;;Total ram usage:        9 bytes
  6442 ;; Hardware stack levels used:    1
  6443 ;; This function calls:
  6444 ;;		Nothing
  6445 ;; This function is called by:
  6446 ;;		_sprintf
  6447 ;;		_cos
  6448 ;;		_sin
  6449 ;;		_floor
  6450 ;; This function uses a non-reentrant model
  6451 ;;
  6452                           
  6453                           	psect	text17
  6454  002DFC                     __ptext17:
  6455                           	opt stack 0
  6456  002DFC                     ___ftge:
  6457                           	opt stack 29
  6458                           
  6459                           ;incstack = 0
  6460  002DFC  AE03               	btfss	___ftge@ff1+2,7,c
  6461  002DFE  D016               	goto	l601
  6462  002E00  C001  F007         	movff	___ftge@ff1,??___ftge
  6463  002E04  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  6464  002E08  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  6465  002E0C  1E07               	comf	??___ftge,f,c
  6466  002E0E  1E08               	comf	??___ftge+1,f,c
  6467  002E10  1E09               	comf	??___ftge+2,f,c
  6468  002E12  2A07               	incf	??___ftge,f,c
  6469  002E14  0E00               	movlw	0
  6470  002E16  2208               	addwfc	??___ftge+1,f,c
  6471  002E18  2209               	addwfc	??___ftge+2,f,c
  6472  002E1A  0E00               	movlw	0
  6473  002E1C  2407               	addwf	??___ftge,w,c
  6474  002E1E  6E01               	movwf	___ftge@ff1,c
  6475  002E20  0E00               	movlw	0
  6476  002E22  2008               	addwfc	??___ftge+1,w,c
  6477  002E24  6E02               	movwf	___ftge@ff1+1,c
  6478  002E26  0E80               	movlw	128
  6479  002E28  2009               	addwfc	??___ftge+2,w,c
  6480  002E2A  6E03               	movwf	___ftge@ff1+2,c
  6481  002E2C                     l601:
  6482  002E2C  AE06               	btfss	___ftge@ff2+2,7,c
  6483  002E2E  D016               	goto	l602
  6484  002E30  C004  F007         	movff	___ftge@ff2,??___ftge
  6485  002E34  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  6486  002E38  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  6487  002E3C  1E07               	comf	??___ftge,f,c
  6488  002E3E  1E08               	comf	??___ftge+1,f,c
  6489  002E40  1E09               	comf	??___ftge+2,f,c
  6490  002E42  2A07               	incf	??___ftge,f,c
  6491  002E44  0E00               	movlw	0
  6492  002E46  2208               	addwfc	??___ftge+1,f,c
  6493  002E48  2209               	addwfc	??___ftge+2,f,c
  6494  002E4A  0E00               	movlw	0
  6495  002E4C  2407               	addwf	??___ftge,w,c
  6496  002E4E  6E04               	movwf	___ftge@ff2,c
  6497  002E50  0E00               	movlw	0
  6498  002E52  2008               	addwfc	??___ftge+1,w,c
  6499  002E54  6E05               	movwf	___ftge@ff2+1,c
  6500  002E56  0E80               	movlw	128
  6501  002E58  2009               	addwfc	??___ftge+2,w,c
  6502  002E5A  6E06               	movwf	___ftge@ff2+2,c
  6503  002E5C                     l602:
  6504  002E5C  0E00               	movlw	0
  6505  002E5E  1A01               	xorwf	___ftge@ff1,f,c
  6506  002E60  0E00               	movlw	0
  6507  002E62  1A02               	xorwf	___ftge@ff1+1,f,c
  6508  002E64  0E80               	movlw	128
  6509  002E66  1A03               	xorwf	___ftge@ff1+2,f,c
  6510  002E68  0E00               	movlw	0
  6511  002E6A  1A04               	xorwf	___ftge@ff2,f,c
  6512  002E6C  0E00               	movlw	0
  6513  002E6E  1A05               	xorwf	___ftge@ff2+1,f,c
  6514  002E70  0E80               	movlw	128
  6515  002E72  1A06               	xorwf	___ftge@ff2+2,f,c
  6516  002E74  5004               	movf	___ftge@ff2,w,c
  6517  002E76  5C01               	subwf	___ftge@ff1,w,c
  6518  002E78  5005               	movf	___ftge@ff2+1,w,c
  6519  002E7A  5802               	subwfb	___ftge@ff1+1,w,c
  6520  002E7C  5006               	movf	___ftge@ff2+2,w,c
  6521  002E7E  5803               	subwfb	___ftge@ff1+2,w,c
  6522  002E80  B0D8               	btfsc	status,0,c
  6523  002E82  D002               	goto	l2387
  6524  002E84  90D8               	bcf	status,0,c
  6525  002E86  0012               	return	
  6526  002E88                     l2387:
  6527  002E88  80D8               	bsf	status,0,c
  6528  002E8A  0012               	return	
  6529  002E8C                     __end_of___ftge:
  6530                           	opt stack 0
  6531                           tblptru	equ	0xFF8
  6532                           tblptrh	equ	0xFF7
  6533                           tblptrl	equ	0xFF6
  6534                           tablat	equ	0xFF5
  6535                           prodh	equ	0xFF4
  6536                           prodl	equ	0xFF3
  6537                           intcon	equ	0xFF2
  6538                           postinc0	equ	0xFEE
  6539                           wreg	equ	0xFE8
  6540                           indf2	equ	0xFDF
  6541                           postinc2	equ	0xFDE
  6542                           postdec2	equ	0xFDD
  6543                           fsr2h	equ	0xFDA
  6544                           fsr2l	equ	0xFD9
  6545                           status	equ	0xFD8
  6546                           
  6547 ;; *************** function ___altoft *****************
  6548 ;; Defined at:
  6549 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
  6550 ;; Parameters:    Size  Location     Type
  6551 ;;  c               4   84[COMRAM] long 
  6552 ;; Auto vars:     Size  Location     Type
  6553 ;;  sign            1   93[COMRAM] unsigned char 
  6554 ;;  exp             1   92[COMRAM] unsigned char 
  6555 ;; Return value:  Size  Location     Type
  6556 ;;                  3   84[COMRAM] float 
  6557 ;; Registers used:
  6558 ;;		wreg, status,2, status,0, cstack
  6559 ;; Tracked objects:
  6560 ;;		On entry : 0/0
  6561 ;;		On exit  : 0/0
  6562 ;;		Unchanged: 0/0
  6563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6564 ;;      Params:         4       0       0       0       0       0       0       0       0
  6565 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6566 ;;      Temps:          4       0       0       0       0       0       0       0       0
  6567 ;;      Totals:        10       0       0       0       0       0       0       0       0
  6568 ;;Total ram usage:       10 bytes
  6569 ;; Hardware stack levels used:    1
  6570 ;; Hardware stack levels required when called:    1
  6571 ;; This function calls:
  6572 ;;		___ftpack
  6573 ;; This function is called by:
  6574 ;;		_floor
  6575 ;; This function uses a non-reentrant model
  6576 ;;
  6577                           
  6578                           	psect	text18
  6579  003084                     __ptext18:
  6580                           	opt stack 0
  6581  003084                     ___altoft:
  6582                           	opt stack 26
  6583                           
  6584                           ;incstack = 0
  6585  003084  0E00               	movlw	0
  6586  003086  6E5E               	movwf	___altoft@sign,c
  6587  003088  0E8E               	movlw	142
  6588  00308A  6E5D               	movwf	___altoft@exp,c
  6589  00308C  AE58               	btfss	___altoft@c+3,7,c
  6590  00308E  D011               	goto	l359
  6591  003090  1E58               	comf	___altoft@c+3,f,c
  6592  003092  1E57               	comf	___altoft@c+2,f,c
  6593  003094  1E56               	comf	___altoft@c+1,f,c
  6594  003096  6C55               	negf	___altoft@c,c
  6595  003098  0E00               	movlw	0
  6596  00309A  2256               	addwfc	___altoft@c+1,f,c
  6597  00309C  2257               	addwfc	___altoft@c+2,f,c
  6598  00309E  2258               	addwfc	___altoft@c+3,f,c
  6599  0030A0  0E01               	movlw	1
  6600  0030A2  6E5E               	movwf	___altoft@sign,c
  6601  0030A4  D006               	goto	l359
  6602  0030A6  90D8               	bcf	status,0,c
  6603  0030A8  3258               	rrcf	___altoft@c+3,f,c
  6604  0030AA  3257               	rrcf	___altoft@c+2,f,c
  6605  0030AC  3256               	rrcf	___altoft@c+1,f,c
  6606  0030AE  3255               	rrcf	___altoft@c,f,c
  6607  0030B0  2A5D               	incf	___altoft@exp,f,c
  6608  0030B2                     l359:
  6609  0030B2  0E00               	movlw	0
  6610  0030B4  1455               	andwf	___altoft@c,w,c
  6611  0030B6  6E59               	movwf	??___altoft& (0+255),c
  6612  0030B8  0E00               	movlw	0
  6613  0030BA  1456               	andwf	___altoft@c+1,w,c
  6614  0030BC  6E5A               	movwf	(??___altoft+1)& (0+255),c
  6615  0030BE  0E00               	movlw	0
  6616  0030C0  1457               	andwf	___altoft@c+2,w,c
  6617  0030C2  6E5B               	movwf	(??___altoft+2)& (0+255),c
  6618  0030C4  0EFF               	movlw	255
  6619  0030C6  1458               	andwf	___altoft@c+3,w,c
  6620  0030C8  6E5C               	movwf	(??___altoft+3)& (0+255),c
  6621  0030CA  5059               	movf	??___altoft,w,c
  6622  0030CC  105A               	iorwf	??___altoft+1,w,c
  6623  0030CE  105B               	iorwf	??___altoft+2,w,c
  6624  0030D0  105C               	iorwf	??___altoft+3,w,c
  6625  0030D2  A4D8               	btfss	status,2,c
  6626  0030D4  D7E8               	goto	l360
  6627  0030D6  C055  F001         	movff	___altoft@c,___ftpack@arg
  6628  0030DA  C056  F002         	movff	___altoft@c+1,___ftpack@arg+1
  6629  0030DE  C057  F003         	movff	___altoft@c+2,___ftpack@arg+2
  6630  0030E2  C05D  F004         	movff	___altoft@exp,___ftpack@exp
  6631  0030E6  C05E  F005         	movff	___altoft@sign,___ftpack@sign
  6632  0030EA  EC51  F016         	call	___ftpack	;wreg free
  6633  0030EE  C001  F055         	movff	?___ftpack,?___altoft
  6634  0030F2  C002  F056         	movff	?___ftpack+1,?___altoft+1
  6635  0030F6  C003  F057         	movff	?___ftpack+2,?___altoft+2
  6636  0030FA  0012               	return	
  6637  0030FC                     __end_of___altoft:
  6638                           	opt stack 0
  6639                           tblptru	equ	0xFF8
  6640                           tblptrh	equ	0xFF7
  6641                           tblptrl	equ	0xFF6
  6642                           tablat	equ	0xFF5
  6643                           prodh	equ	0xFF4
  6644                           prodl	equ	0xFF3
  6645                           intcon	equ	0xFF2
  6646                           postinc0	equ	0xFEE
  6647                           wreg	equ	0xFE8
  6648                           indf2	equ	0xFDF
  6649                           postinc2	equ	0xFDE
  6650                           postdec2	equ	0xFDD
  6651                           fsr2h	equ	0xFDA
  6652                           fsr2l	equ	0xFD9
  6653                           status	equ	0xFD8
  6654                           
  6655 ;; *************** function _eval_poly *****************
  6656 ;; Defined at:
  6657 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
  6658 ;; Parameters:    Size  Location     Type
  6659 ;;  x               3   62[COMRAM] float 
  6660 ;;  d               2   65[COMRAM] PTR const 
  6661 ;;		 -> sin@coeff_a(15), sin@coeff_b(12), 
  6662 ;;  n               2   67[COMRAM] int 
  6663 ;; Auto vars:     Size  Location     Type
  6664 ;;  res             3   71[COMRAM] int 
  6665 ;; Return value:  Size  Location     Type
  6666 ;;                  3   62[COMRAM] int 
  6667 ;; Registers used:
  6668 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6669 ;; Tracked objects:
  6670 ;;		On entry : 0/0
  6671 ;;		On exit  : 0/0
  6672 ;;		Unchanged: 0/0
  6673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6674 ;;      Params:         7       0       0       0       0       0       0       0       0
  6675 ;;      Locals:         3       0       0       0       0       0       0       0       0
  6676 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6677 ;;      Totals:        12       0       0       0       0       0       0       0       0
  6678 ;;Total ram usage:       12 bytes
  6679 ;; Hardware stack levels used:    1
  6680 ;; Hardware stack levels required when called:    2
  6681 ;; This function calls:
  6682 ;;		___ftadd
  6683 ;;		___ftmul
  6684 ;;		___wmul
  6685 ;; This function is called by:
  6686 ;;		_sin
  6687 ;; This function uses a non-reentrant model
  6688 ;;
  6689                           
  6690                           	psect	text19
  6691  002BD0                     __ptext19:
  6692                           	opt stack 0
  6693  002BD0                     _eval_poly:
  6694                           	opt stack 26
  6695                           
  6696                           ;incstack = 0
  6697  002BD0  C044  F00F         	movff	eval_poly@n,___wmul@multiplier
  6698  002BD4  C045  F010         	movff	eval_poly@n+1,___wmul@multiplier+1
  6699  002BD8  0E00               	movlw	0
  6700  002BDA  6E12               	movwf	___wmul@multiplicand+1,c
  6701  002BDC  0E03               	movlw	3
  6702  002BDE  6E11               	movwf	___wmul@multiplicand,c
  6703  002BE0  EC69  F019         	call	___wmul	;wreg free
  6704  002BE4  C042  F046         	movff	eval_poly@d,??_eval_poly
  6705  002BE8  C043  F047         	movff	eval_poly@d+1,??_eval_poly+1
  6706  002BEC  500F               	movf	?___wmul,w,c
  6707  002BEE  2646               	addwf	??_eval_poly,f,c
  6708  002BF0  5010               	movf	?___wmul+1,w,c
  6709  002BF2  2247               	addwfc	??_eval_poly+1,f,c
  6710  002BF4  C046  FFF6         	movff	??_eval_poly,tblptrl
  6711  002BF8  C047  FFF7         	movff	??_eval_poly+1,tblptrh
  6712  002BFC                     	if	0	;tblptru may be non-zero
  6713  002BFC                     	endif
  6714  002BFC                     	if	0	;tblptru may be non-zero
  6715  002BFC                     	endif
  6716  002BFC  0009               	tblrd		*+
  6717  002BFE  CFF5 F048          	movff	tablat,eval_poly@res
  6718  002C02  0009               	tblrd		*+
  6719  002C04  CFF5 F049          	movff	tablat,eval_poly@res+1
  6720  002C08  000A               	tblrd		*-
  6721  002C0A  CFF5 F04A          	movff	tablat,eval_poly@res+2
  6722  002C0E  D03E               	goto	l905
  6723  002C10  C048  F033         	movff	eval_poly@res,___ftmul@f2
  6724  002C14  C049  F034         	movff	eval_poly@res+1,___ftmul@f2+1
  6725  002C18  C04A  F035         	movff	eval_poly@res+2,___ftmul@f2+2
  6726  002C1C  C03F  F030         	movff	eval_poly@x,___ftmul@f1
  6727  002C20  C040  F031         	movff	eval_poly@x+1,___ftmul@f1+1
  6728  002C24  C041  F032         	movff	eval_poly@x+2,___ftmul@f1+2
  6729  002C28  EC8B  F014         	call	___ftmul	;wreg free
  6730  002C2C  C030  F015         	movff	?___ftmul,___ftadd@f1
  6731  002C30  C031  F016         	movff	?___ftmul+1,___ftadd@f1+1
  6732  002C34  C032  F017         	movff	?___ftmul+2,___ftadd@f1+2
  6733  002C38  0E00               	movlw	0
  6734  002C3A  6E12               	movwf	___wmul@multiplicand+1,c
  6735  002C3C  0E03               	movlw	3
  6736  002C3E  6E11               	movwf	___wmul@multiplicand,c
  6737  002C40  0644               	decf	eval_poly@n,f,c
  6738  002C42  A0D8               	btfss	status,0,c
  6739  002C44  0645               	decf	eval_poly@n+1,f,c
  6740  002C46  C044  F00F         	movff	eval_poly@n,___wmul@multiplier
  6741  002C4A  C045  F010         	movff	eval_poly@n+1,___wmul@multiplier+1
  6742  002C4E  EC69  F019         	call	___wmul	;wreg free
  6743  002C52  C042  F046         	movff	eval_poly@d,??_eval_poly
  6744  002C56  C043  F047         	movff	eval_poly@d+1,??_eval_poly+1
  6745  002C5A  500F               	movf	?___wmul,w,c
  6746  002C5C  2646               	addwf	??_eval_poly,f,c
  6747  002C5E  5010               	movf	?___wmul+1,w,c
  6748  002C60  2247               	addwfc	??_eval_poly+1,f,c
  6749  002C62  C046  FFF6         	movff	??_eval_poly,tblptrl
  6750  002C66  C047  FFF7         	movff	??_eval_poly+1,tblptrh
  6751  002C6A                     	if	0	;tblptru may be non-zero
  6752  002C6A                     	endif
  6753  002C6A                     	if	0	;tblptru may be non-zero
  6754  002C6A                     	endif
  6755  002C6A  0009               	tblrd		*+
  6756  002C6C  CFF5 F018          	movff	tablat,___ftadd@f2
  6757  002C70  0009               	tblrd		*+
  6758  002C72  CFF5 F019          	movff	tablat,___ftadd@f2+1
  6759  002C76  000A               	tblrd		*-
  6760  002C78  CFF5 F01A          	movff	tablat,___ftadd@f2+2
  6761  002C7C  EC5D  F010         	call	___ftadd	;wreg free
  6762  002C80  C015  F048         	movff	?___ftadd,eval_poly@res
  6763  002C84  C016  F049         	movff	?___ftadd+1,eval_poly@res+1
  6764  002C88  C017  F04A         	movff	?___ftadd+2,eval_poly@res+2
  6765  002C8C                     l905:
  6766  002C8C  5044               	movf	eval_poly@n,w,c
  6767  002C8E  1045               	iorwf	eval_poly@n+1,w,c
  6768  002C90  A4D8               	btfss	status,2,c
  6769  002C92  D7BE               	goto	l906
  6770  002C94  C048  F03F         	movff	eval_poly@res,?_eval_poly
  6771  002C98  C049  F040         	movff	eval_poly@res+1,?_eval_poly+1
  6772  002C9C  C04A  F041         	movff	eval_poly@res+2,?_eval_poly+2
  6773  002CA0  0012               	return		;funcret
  6774  002CA2                     __end_of_eval_poly:
  6775                           	opt stack 0
  6776                           tblptru	equ	0xFF8
  6777                           tblptrh	equ	0xFF7
  6778                           tblptrl	equ	0xFF6
  6779                           tablat	equ	0xFF5
  6780                           prodh	equ	0xFF4
  6781                           prodl	equ	0xFF3
  6782                           intcon	equ	0xFF2
  6783                           postinc0	equ	0xFEE
  6784                           wreg	equ	0xFE8
  6785                           indf2	equ	0xFDF
  6786                           postinc2	equ	0xFDE
  6787                           postdec2	equ	0xFDD
  6788                           fsr2h	equ	0xFDA
  6789                           fsr2l	equ	0xFD9
  6790                           status	equ	0xFD8
  6791                           
  6792 ;; *************** function ___wmul *****************
  6793 ;; Defined at:
  6794 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  6795 ;; Parameters:    Size  Location     Type
  6796 ;;  multiplier      2   14[COMRAM] unsigned int 
  6797 ;;  multiplicand    2   16[COMRAM] unsigned int 
  6798 ;; Auto vars:     Size  Location     Type
  6799 ;;  product         2   18[COMRAM] unsigned int 
  6800 ;; Return value:  Size  Location     Type
  6801 ;;                  2   14[COMRAM] unsigned int 
  6802 ;; Registers used:
  6803 ;;		wreg, status,2, status,0, prodl, prodh
  6804 ;; Tracked objects:
  6805 ;;		On entry : 0/0
  6806 ;;		On exit  : 0/0
  6807 ;;		Unchanged: 0/0
  6808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6809 ;;      Params:         4       0       0       0       0       0       0       0       0
  6810 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6811 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6812 ;;      Totals:         6       0       0       0       0       0       0       0       0
  6813 ;;Total ram usage:        6 bytes
  6814 ;; Hardware stack levels used:    1
  6815 ;; This function calls:
  6816 ;;		Nothing
  6817 ;; This function is called by:
  6818 ;;		_main
  6819 ;;		_fround
  6820 ;;		_scale
  6821 ;;		_sprintf
  6822 ;;		_eval_poly
  6823 ;; This function uses a non-reentrant model
  6824 ;;
  6825                           
  6826                           	psect	text20
  6827  0032D2                     __ptext20:
  6828                           	opt stack 0
  6829  0032D2                     ___wmul:
  6830                           	opt stack 28
  6831                           
  6832                           ;incstack = 0
  6833  0032D2  500F               	movf	___wmul@multiplier,w,c
  6834  0032D4  0211               	mulwf	___wmul@multiplicand,c
  6835  0032D6  CFF3 F013          	movff	prodl,___wmul@product
  6836  0032DA  CFF4 F014          	movff	prodh,___wmul@product+1
  6837  0032DE  500F               	movf	___wmul@multiplier,w,c
  6838  0032E0  0212               	mulwf	___wmul@multiplicand+1,c
  6839  0032E2  50F3               	movf	prodl,w,c
  6840  0032E4  2614               	addwf	___wmul@product+1,f,c
  6841  0032E6  5010               	movf	___wmul@multiplier+1,w,c
  6842  0032E8  0211               	mulwf	___wmul@multiplicand,c
  6843  0032EA  50F3               	movf	prodl,w,c
  6844  0032EC  2614               	addwf	___wmul@product+1,f,c
  6845  0032EE  C013  F00F         	movff	___wmul@product,?___wmul
  6846  0032F2  C014  F010         	movff	___wmul@product+1,?___wmul+1
  6847  0032F6  0012               	return	
  6848  0032F8                     __end_of___wmul:
  6849                           	opt stack 0
  6850                           tblptru	equ	0xFF8
  6851                           tblptrh	equ	0xFF7
  6852                           tblptrl	equ	0xFF6
  6853                           tablat	equ	0xFF5
  6854                           prodh	equ	0xFF4
  6855                           prodl	equ	0xFF3
  6856                           intcon	equ	0xFF2
  6857                           postinc0	equ	0xFEE
  6858                           wreg	equ	0xFE8
  6859                           indf2	equ	0xFDF
  6860                           postinc2	equ	0xFDE
  6861                           postdec2	equ	0xFDD
  6862                           fsr2h	equ	0xFDA
  6863                           fsr2l	equ	0xFD9
  6864                           status	equ	0xFD8
  6865                           
  6866 ;; *************** function ___ftmul *****************
  6867 ;; Defined at:
  6868 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  6869 ;; Parameters:    Size  Location     Type
  6870 ;;  f1              3   47[COMRAM] float 
  6871 ;;  f2              3   50[COMRAM] float 
  6872 ;; Auto vars:     Size  Location     Type
  6873 ;;  f3_as_produc    3   57[COMRAM] unsigned um
  6874 ;;  sign            1   61[COMRAM] unsigned char 
  6875 ;;  cntr            1   60[COMRAM] unsigned char 
  6876 ;;  exp             1   56[COMRAM] unsigned char 
  6877 ;; Return value:  Size  Location     Type
  6878 ;;                  3   47[COMRAM] float 
  6879 ;; Registers used:
  6880 ;;		wreg, status,2, status,0, cstack
  6881 ;; Tracked objects:
  6882 ;;		On entry : 0/0
  6883 ;;		On exit  : 0/0
  6884 ;;		Unchanged: 0/0
  6885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6886 ;;      Params:         6       0       0       0       0       0       0       0       0
  6887 ;;      Locals:         6       0       0       0       0       0       0       0       0
  6888 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6889 ;;      Totals:        15       0       0       0       0       0       0       0       0
  6890 ;;Total ram usage:       15 bytes
  6891 ;; Hardware stack levels used:    1
  6892 ;; Hardware stack levels required when called:    1
  6893 ;; This function calls:
  6894 ;;		___ftpack
  6895 ;; This function is called by:
  6896 ;;		_main
  6897 ;;		_fround
  6898 ;;		_scale
  6899 ;;		_sprintf
  6900 ;;		_sin
  6901 ;;		_eval_poly
  6902 ;; This function uses a non-reentrant model
  6903 ;;
  6904                           
  6905                           	psect	text21
  6906  002916                     __ptext21:
  6907                           	opt stack 0
  6908  002916                     ___ftmul:
  6909                           	opt stack 27
  6910                           
  6911                           ;incstack = 0
  6912  002916  C032  F036         	movff	___ftmul@f1+2,??___ftmul
  6913  00291A  6A37               	clrf	(??___ftmul+1)& (0+255),c
  6914  00291C  6A38               	clrf	(??___ftmul+2)& (0+255),c
  6915  00291E  3431               	rlcf	___ftmul@f1+1,w,c
  6916  002920  3636               	rlcf	??___ftmul& (0+255),f,c
  6917  002922  E301               	bnc	u2201
  6918  002924  8037               	bsf	(??___ftmul+1)& (0+255),0,c
  6919  002926                     u2201:
  6920  002926  5036               	movf	??___ftmul,w,c
  6921  002928  6E39               	movwf	___ftmul@exp,c
  6922  00292A  5039               	movf	___ftmul@exp,w,c
  6923  00292C  A4D8               	btfss	status,2,c
  6924  00292E  D007               	goto	l608
  6925  002930  0E00               	movlw	0
  6926  002932  6E30               	movwf	?___ftmul,c
  6927  002934  0E00               	movlw	0
  6928  002936  6E31               	movwf	?___ftmul+1,c
  6929  002938  0E00               	movlw	0
  6930  00293A  6E32               	movwf	?___ftmul+2,c
  6931  00293C  0012               	return	
  6932  00293E                     l608:
  6933  00293E  C035  F036         	movff	___ftmul@f2+2,??___ftmul
  6934  002942  6A37               	clrf	(??___ftmul+1)& (0+255),c
  6935  002944  6A38               	clrf	(??___ftmul+2)& (0+255),c
  6936  002946  3434               	rlcf	___ftmul@f2+1,w,c
  6937  002948  3636               	rlcf	??___ftmul& (0+255),f,c
  6938  00294A  E301               	bnc	u2221
  6939  00294C  8037               	bsf	(??___ftmul+1)& (0+255),0,c
  6940  00294E                     u2221:
  6941  00294E  5036               	movf	??___ftmul,w,c
  6942  002950  6E3E               	movwf	___ftmul@sign,c
  6943  002952  503E               	movf	___ftmul@sign,w,c
  6944  002954  A4D8               	btfss	status,2,c
  6945  002956  D007               	goto	l610
  6946  002958  0E00               	movlw	0
  6947  00295A  6E30               	movwf	?___ftmul,c
  6948  00295C  0E00               	movlw	0
  6949  00295E  6E31               	movwf	?___ftmul+1,c
  6950  002960  0E00               	movlw	0
  6951  002962  6E32               	movwf	?___ftmul+2,c
  6952  002964  0012               	return	
  6953  002966                     l610:
  6954  002966  503E               	movf	___ftmul@sign,w,c
  6955  002968  0F7B               	addlw	123
  6956  00296A  2639               	addwf	___ftmul@exp,f,c
  6957  00296C  C032  F03E         	movff	___ftmul@f1+2,___ftmul@sign
  6958  002970  5035               	movf	___ftmul@f2+2,w,c
  6959  002972  1A3E               	xorwf	___ftmul@sign,f,c
  6960  002974  0E80               	movlw	128
  6961  002976  163E               	andwf	___ftmul@sign,f,c
  6962  002978  8E31               	bsf	___ftmul@f1+1,7,c
  6963  00297A  8E34               	bsf	___ftmul@f2+1,7,c
  6964  00297C  0EFF               	movlw	255
  6965  00297E  1633               	andwf	___ftmul@f2,f,c
  6966  002980  0EFF               	movlw	255
  6967  002982  1634               	andwf	___ftmul@f2+1,f,c
  6968  002984  0E00               	movlw	0
  6969  002986  1635               	andwf	___ftmul@f2+2,f,c
  6970  002988  0E00               	movlw	0
  6971  00298A  6E3A               	movwf	___ftmul@f3_as_product,c
  6972  00298C  0E00               	movlw	0
  6973  00298E  6E3B               	movwf	___ftmul@f3_as_product+1,c
  6974  002990  0E00               	movlw	0
  6975  002992  6E3C               	movwf	___ftmul@f3_as_product+2,c
  6976  002994  0E07               	movlw	7
  6977  002996  6E3D               	movwf	___ftmul@cntr,c
  6978  002998  A030               	btfss	___ftmul@f1,0,c
  6979  00299A  D006               	goto	l612
  6980  00299C  5033               	movf	___ftmul@f2,w,c
  6981  00299E  263A               	addwf	___ftmul@f3_as_product,f,c
  6982  0029A0  5034               	movf	___ftmul@f2+1,w,c
  6983  0029A2  223B               	addwfc	___ftmul@f3_as_product+1,f,c
  6984  0029A4  5035               	movf	___ftmul@f2+2,w,c
  6985  0029A6  223C               	addwfc	___ftmul@f3_as_product+2,f,c
  6986  0029A8                     l612:
  6987  0029A8  90D8               	bcf	status,0,c
  6988  0029AA  3232               	rrcf	___ftmul@f1+2,f,c
  6989  0029AC  3231               	rrcf	___ftmul@f1+1,f,c
  6990  0029AE  3230               	rrcf	___ftmul@f1,f,c
  6991  0029B0  90D8               	bcf	status,0,c
  6992  0029B2  3633               	rlcf	___ftmul@f2,f,c
  6993  0029B4  3634               	rlcf	___ftmul@f2+1,f,c
  6994  0029B6  3635               	rlcf	___ftmul@f2+2,f,c
  6995  0029B8  2E3D               	decfsz	___ftmul@cntr,f,c
  6996  0029BA  D7EE               	goto	l611
  6997  0029BC  0E09               	movlw	9
  6998  0029BE  6E3D               	movwf	___ftmul@cntr,c
  6999  0029C0  A030               	btfss	___ftmul@f1,0,c
  7000  0029C2  D006               	goto	l615
  7001  0029C4  5033               	movf	___ftmul@f2,w,c
  7002  0029C6  263A               	addwf	___ftmul@f3_as_product,f,c
  7003  0029C8  5034               	movf	___ftmul@f2+1,w,c
  7004  0029CA  223B               	addwfc	___ftmul@f3_as_product+1,f,c
  7005  0029CC  5035               	movf	___ftmul@f2+2,w,c
  7006  0029CE  223C               	addwfc	___ftmul@f3_as_product+2,f,c
  7007  0029D0                     l615:
  7008  0029D0  90D8               	bcf	status,0,c
  7009  0029D2  3232               	rrcf	___ftmul@f1+2,f,c
  7010  0029D4  3231               	rrcf	___ftmul@f1+1,f,c
  7011  0029D6  3230               	rrcf	___ftmul@f1,f,c
  7012  0029D8  90D8               	bcf	status,0,c
  7013  0029DA  323C               	rrcf	___ftmul@f3_as_product+2,f,c
  7014  0029DC  323B               	rrcf	___ftmul@f3_as_product+1,f,c
  7015  0029DE  323A               	rrcf	___ftmul@f3_as_product,f,c
  7016  0029E0  2E3D               	decfsz	___ftmul@cntr,f,c
  7017  0029E2  D7EE               	goto	l614
  7018  0029E4  C03A  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  7019  0029E8  C03B  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  7020  0029EC  C03C  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  7021  0029F0  C039  F004         	movff	___ftmul@exp,___ftpack@exp
  7022  0029F4  C03E  F005         	movff	___ftmul@sign,___ftpack@sign
  7023  0029F8  EC51  F016         	call	___ftpack	;wreg free
  7024  0029FC  C001  F030         	movff	?___ftpack,?___ftmul
  7025  002A00  C002  F031         	movff	?___ftpack+1,?___ftmul+1
  7026  002A04  C003  F032         	movff	?___ftpack+2,?___ftmul+2
  7027  002A08  0012               	return	
  7028  002A0A                     __end_of___ftmul:
  7029                           	opt stack 0
  7030                           tblptru	equ	0xFF8
  7031                           tblptrh	equ	0xFF7
  7032                           tblptrl	equ	0xFF6
  7033                           tablat	equ	0xFF5
  7034                           prodh	equ	0xFF4
  7035                           prodl	equ	0xFF3
  7036                           intcon	equ	0xFF2
  7037                           postinc0	equ	0xFEE
  7038                           wreg	equ	0xFE8
  7039                           indf2	equ	0xFDF
  7040                           postinc2	equ	0xFDE
  7041                           postdec2	equ	0xFDD
  7042                           fsr2h	equ	0xFDA
  7043                           fsr2l	equ	0xFD9
  7044                           status	equ	0xFD8
  7045                           
  7046 ;; *************** function ___ftsub *****************
  7047 ;; Defined at:
  7048 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  7049 ;; Parameters:    Size  Location     Type
  7050 ;;  f1              3    8[BANK0 ] float 
  7051 ;;  f2              3   11[BANK0 ] float 
  7052 ;; Auto vars:     Size  Location     Type
  7053 ;;		None
  7054 ;; Return value:  Size  Location     Type
  7055 ;;                  3    8[BANK0 ] float 
  7056 ;; Registers used:
  7057 ;;		wreg, status,2, status,0, cstack
  7058 ;; Tracked objects:
  7059 ;;		On entry : 0/0
  7060 ;;		On exit  : 0/0
  7061 ;;		Unchanged: 0/0
  7062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7063 ;;      Params:         0       6       0       0       0       0       0       0       0
  7064 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7065 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7066 ;;      Totals:         0       6       0       0       0       0       0       0       0
  7067 ;;Total ram usage:        6 bytes
  7068 ;; Hardware stack levels used:    1
  7069 ;; Hardware stack levels required when called:    2
  7070 ;; This function calls:
  7071 ;;		___ftadd
  7072 ;; This function is called by:
  7073 ;;		_sprintf
  7074 ;;		_sin
  7075 ;; This function uses a non-reentrant model
  7076 ;;
  7077                           
  7078                           	psect	text22
  7079  003290                     __ptext22:
  7080                           	opt stack 0
  7081  003290                     ___ftsub:
  7082                           	opt stack 27
  7083                           
  7084                           ;incstack = 0
  7085  003290  0100               	movlb	0	; () banked
  7086  003292  516B               	movf	___ftsub@f2& (0+255),w,b
  7087  003294  116C               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  7088  003296  116D               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  7089  003298  B4D8               	btfsc	status,2,c
  7090  00329A  D006               	goto	l625
  7091                           
  7092                           ; BSR set to: 0
  7093  00329C  0E00               	movlw	0
  7094  00329E  1B6B               	xorwf	___ftsub@f2& (0+255),f,b
  7095  0032A0  0E00               	movlw	0
  7096  0032A2  1B6C               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  7097  0032A4  0E80               	movlw	128
  7098  0032A6  1B6D               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  7099  0032A8                     l625:
  7100                           
  7101                           ; BSR set to: 0
  7102                           
  7103                           ; BSR set to: 0
  7104  0032A8  C068  F015         	movff	___ftsub@f1,___ftadd@f1
  7105  0032AC  C069  F016         	movff	___ftsub@f1+1,___ftadd@f1+1
  7106  0032B0  C06A  F017         	movff	___ftsub@f1+2,___ftadd@f1+2
  7107  0032B4  C06B  F018         	movff	___ftsub@f2,___ftadd@f2
  7108  0032B8  C06C  F019         	movff	___ftsub@f2+1,___ftadd@f2+1
  7109  0032BC  C06D  F01A         	movff	___ftsub@f2+2,___ftadd@f2+2
  7110  0032C0  EC5D  F010         	call	___ftadd	;wreg free
  7111  0032C4  C015  F068         	movff	?___ftadd,?___ftsub
  7112  0032C8  C016  F069         	movff	?___ftadd+1,?___ftsub+1
  7113  0032CC  C017  F06A         	movff	?___ftadd+2,?___ftsub+2
  7114  0032D0  0012               	return	
  7115  0032D2                     __end_of___ftsub:
  7116                           	opt stack 0
  7117                           tblptru	equ	0xFF8
  7118                           tblptrh	equ	0xFF7
  7119                           tblptrl	equ	0xFF6
  7120                           tablat	equ	0xFF5
  7121                           prodh	equ	0xFF4
  7122                           prodl	equ	0xFF3
  7123                           intcon	equ	0xFF2
  7124                           postinc0	equ	0xFEE
  7125                           wreg	equ	0xFE8
  7126                           indf2	equ	0xFDF
  7127                           postinc2	equ	0xFDE
  7128                           postdec2	equ	0xFDD
  7129                           fsr2h	equ	0xFDA
  7130                           fsr2l	equ	0xFD9
  7131                           status	equ	0xFD8
  7132                           
  7133 ;; *************** function ___ftadd *****************
  7134 ;; Defined at:
  7135 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  7136 ;; Parameters:    Size  Location     Type
  7137 ;;  f1              3   20[COMRAM] float 
  7138 ;;  f2              3   23[COMRAM] float 
  7139 ;; Auto vars:     Size  Location     Type
  7140 ;;  exp1            1   31[COMRAM] unsigned char 
  7141 ;;  exp2            1   30[COMRAM] unsigned char 
  7142 ;;  sign            1   29[COMRAM] unsigned char 
  7143 ;; Return value:  Size  Location     Type
  7144 ;;                  3   20[COMRAM] float 
  7145 ;; Registers used:
  7146 ;;		wreg, status,2, status,0, cstack
  7147 ;; Tracked objects:
  7148 ;;		On entry : 0/0
  7149 ;;		On exit  : 0/0
  7150 ;;		Unchanged: 0/0
  7151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7152 ;;      Params:         6       0       0       0       0       0       0       0       0
  7153 ;;      Locals:         3       0       0       0       0       0       0       0       0
  7154 ;;      Temps:          3       0       0       0       0       0       0       0       0
  7155 ;;      Totals:        12       0       0       0       0       0       0       0       0
  7156 ;;Total ram usage:       12 bytes
  7157 ;; Hardware stack levels used:    1
  7158 ;; Hardware stack levels required when called:    1
  7159 ;; This function calls:
  7160 ;;		___ftpack
  7161 ;; This function is called by:
  7162 ;;		_main
  7163 ;;		_sprintf
  7164 ;;		_cos
  7165 ;;		___ftsub
  7166 ;;		_sin
  7167 ;;		_eval_poly
  7168 ;;		_floor
  7169 ;; This function uses a non-reentrant model
  7170 ;;
  7171                           
  7172                           	psect	text23
  7173  0020BA                     __ptext23:
  7174                           	opt stack 0
  7175  0020BA                     ___ftadd:
  7176                           	opt stack 27
  7177                           
  7178                           ;incstack = 0
  7179  0020BA  C017  F01B         	movff	___ftadd@f1+2,??___ftadd
  7180  0020BE  6A1C               	clrf	(??___ftadd+1)& (0+255),c
  7181  0020C0  6A1D               	clrf	(??___ftadd+2)& (0+255),c
  7182  0020C2  3416               	rlcf	___ftadd@f1+1,w,c
  7183  0020C4  361B               	rlcf	??___ftadd& (0+255),f,c
  7184  0020C6  E301               	bnc	u1991
  7185  0020C8  801C               	bsf	(??___ftadd+1)& (0+255),0,c
  7186  0020CA                     u1991:
  7187  0020CA  501B               	movf	??___ftadd,w,c
  7188  0020CC  6E20               	movwf	___ftadd@exp1,c
  7189  0020CE  C01A  F01B         	movff	___ftadd@f2+2,??___ftadd
  7190  0020D2  6A1C               	clrf	(??___ftadd+1)& (0+255),c
  7191  0020D4  6A1D               	clrf	(??___ftadd+2)& (0+255),c
  7192  0020D6  3419               	rlcf	___ftadd@f2+1,w,c
  7193  0020D8  361B               	rlcf	??___ftadd& (0+255),f,c
  7194  0020DA  E301               	bnc	u2001
  7195  0020DC  801C               	bsf	(??___ftadd+1)& (0+255),0,c
  7196  0020DE                     u2001:
  7197  0020DE  501B               	movf	??___ftadd,w,c
  7198  0020E0  6E1F               	movwf	___ftadd@exp2,c
  7199  0020E2  5020               	movf	___ftadd@exp1,w,c
  7200  0020E4  B4D8               	btfsc	status,2,c
  7201  0020E6  D00B               	goto	u2030
  7202  0020E8  501F               	movf	___ftadd@exp2,w,c
  7203  0020EA  5C20               	subwf	___ftadd@exp1,w,c
  7204  0020EC  B0D8               	btfsc	status,0,c
  7205  0020EE  D00E               	goto	l543
  7206  0020F0  5020               	movf	___ftadd@exp1,w,c
  7207  0020F2  0800               	sublw	0
  7208  0020F4  241F               	addwf	___ftadd@exp2,w,c
  7209  0020F6  6E1B               	movwf	??___ftadd& (0+255),c
  7210  0020F8  0E18               	movlw	24
  7211  0020FA  641B               	cpfsgt	??___ftadd,c
  7212  0020FC  D007               	goto	l543
  7213  0020FE                     u2030:
  7214  0020FE  C018  F015         	movff	___ftadd@f2,?___ftadd
  7215  002102  C019  F016         	movff	___ftadd@f2+1,?___ftadd+1
  7216  002106  C01A  F017         	movff	___ftadd@f2+2,?___ftadd+2
  7217  00210A  0012               	return	
  7218  00210C                     l543:
  7219  00210C  501F               	movf	___ftadd@exp2,w,c
  7220  00210E  B4D8               	btfsc	status,2,c
  7221  002110  D00B               	goto	u2060
  7222  002112  5020               	movf	___ftadd@exp1,w,c
  7223  002114  5C1F               	subwf	___ftadd@exp2,w,c
  7224  002116  B0D8               	btfsc	status,0,c
  7225  002118  D00E               	goto	l547
  7226  00211A  501F               	movf	___ftadd@exp2,w,c
  7227  00211C  0800               	sublw	0
  7228  00211E  2420               	addwf	___ftadd@exp1,w,c
  7229  002120  6E1B               	movwf	??___ftadd& (0+255),c
  7230  002122  0E18               	movlw	24
  7231  002124  641B               	cpfsgt	??___ftadd,c
  7232  002126  D007               	goto	l547
  7233  002128                     u2060:
  7234  002128  C015  F015         	movff	___ftadd@f1,?___ftadd
  7235  00212C  C016  F016         	movff	___ftadd@f1+1,?___ftadd+1
  7236  002130  C017  F017         	movff	___ftadd@f1+2,?___ftadd+2
  7237  002134  0012               	return	
  7238  002136                     l547:
  7239  002136  0E06               	movlw	6
  7240  002138  6E1E               	movwf	___ftadd@sign,c
  7241  00213A  BE17               	btfsc	___ftadd@f1+2,7,c
  7242  00213C  8E1E               	bsf	___ftadd@sign,7,c
  7243  00213E  BE1A               	btfsc	___ftadd@f2+2,7,c
  7244  002140  8C1E               	bsf	___ftadd@sign,6,c
  7245  002142  8E16               	bsf	___ftadd@f1+1,7,c
  7246  002144  0EFF               	movlw	255
  7247  002146  1615               	andwf	___ftadd@f1,f,c
  7248  002148  0EFF               	movlw	255
  7249  00214A  1616               	andwf	___ftadd@f1+1,f,c
  7250  00214C  0E00               	movlw	0
  7251  00214E  1617               	andwf	___ftadd@f1+2,f,c
  7252  002150  8E19               	bsf	___ftadd@f2+1,7,c
  7253  002152  0EFF               	movlw	255
  7254  002154  1618               	andwf	___ftadd@f2,f,c
  7255  002156  0EFF               	movlw	255
  7256  002158  1619               	andwf	___ftadd@f2+1,f,c
  7257  00215A  0E00               	movlw	0
  7258  00215C  161A               	andwf	___ftadd@f2+2,f,c
  7259  00215E  501F               	movf	___ftadd@exp2,w,c
  7260  002160  5C20               	subwf	___ftadd@exp1,w,c
  7261  002162  B0D8               	btfsc	status,0,c
  7262  002164  D01B               	goto	l552
  7263  002166                     u2090:
  7264  002166  90D8               	bcf	status,0,c
  7265  002168  3618               	rlcf	___ftadd@f2,f,c
  7266  00216A  3619               	rlcf	___ftadd@f2+1,f,c
  7267  00216C  361A               	rlcf	___ftadd@f2+2,f,c
  7268  00216E  061F               	decf	___ftadd@exp2,f,c
  7269  002170  5020               	movf	___ftadd@exp1,w,c
  7270  002172  181F               	xorwf	___ftadd@exp2,w,c
  7271  002174  B4D8               	btfsc	status,2,c
  7272  002176  D00D               	goto	l557
  7273  002178  061E               	decf	___ftadd@sign,f,c
  7274  00217A  C01E  F01B         	movff	___ftadd@sign,??___ftadd
  7275  00217E  0E07               	movlw	7
  7276  002180  161B               	andwf	??___ftadd,f,c
  7277  002182  B4D8               	btfsc	status,2,c
  7278  002184  D006               	goto	l557
  7279  002186  D7EF               	goto	u2090
  7280  002188  90D8               	bcf	status,0,c
  7281  00218A  3217               	rrcf	___ftadd@f1+2,f,c
  7282  00218C  3216               	rrcf	___ftadd@f1+1,f,c
  7283  00218E  3215               	rrcf	___ftadd@f1,f,c
  7284  002190  2A20               	incf	___ftadd@exp1,f,c
  7285  002192                     l557:
  7286  002192  501F               	movf	___ftadd@exp2,w,c
  7287  002194  1820               	xorwf	___ftadd@exp1,w,c
  7288  002196  B4D8               	btfsc	status,2,c
  7289  002198  D01F               	goto	u2160
  7290  00219A  D7F6               	goto	l558
  7291  00219C                     l552:
  7292  00219C  5020               	movf	___ftadd@exp1,w,c
  7293  00219E  5C1F               	subwf	___ftadd@exp2,w,c
  7294  0021A0  B0D8               	btfsc	status,0,c
  7295  0021A2  D01A               	goto	u2160
  7296  0021A4                     u2130:
  7297  0021A4  90D8               	bcf	status,0,c
  7298  0021A6  3615               	rlcf	___ftadd@f1,f,c
  7299  0021A8  3616               	rlcf	___ftadd@f1+1,f,c
  7300  0021AA  3617               	rlcf	___ftadd@f1+2,f,c
  7301  0021AC  0620               	decf	___ftadd@exp1,f,c
  7302  0021AE  5020               	movf	___ftadd@exp1,w,c
  7303  0021B0  181F               	xorwf	___ftadd@exp2,w,c
  7304  0021B2  B4D8               	btfsc	status,2,c
  7305  0021B4  D00D               	goto	l566
  7306  0021B6  061E               	decf	___ftadd@sign,f,c
  7307  0021B8  C01E  F01B         	movff	___ftadd@sign,??___ftadd
  7308  0021BC  0E07               	movlw	7
  7309  0021BE  161B               	andwf	??___ftadd,f,c
  7310  0021C0  B4D8               	btfsc	status,2,c
  7311  0021C2  D006               	goto	l566
  7312  0021C4  D7EF               	goto	u2130
  7313  0021C6  90D8               	bcf	status,0,c
  7314  0021C8  321A               	rrcf	___ftadd@f2+2,f,c
  7315  0021CA  3219               	rrcf	___ftadd@f2+1,f,c
  7316  0021CC  3218               	rrcf	___ftadd@f2,f,c
  7317  0021CE  2A1F               	incf	___ftadd@exp2,f,c
  7318  0021D0                     l566:
  7319  0021D0  501F               	movf	___ftadd@exp2,w,c
  7320  0021D2  1820               	xorwf	___ftadd@exp1,w,c
  7321  0021D4  A4D8               	btfss	status,2,c
  7322  0021D6  D7F7               	goto	l567
  7323  0021D8                     u2160:
  7324  0021D8  AE1E               	btfss	___ftadd@sign,7,c
  7325  0021DA  D00C               	goto	l569
  7326  0021DC  0EFF               	movlw	255
  7327  0021DE  1A15               	xorwf	___ftadd@f1,f,c
  7328  0021E0  0EFF               	movlw	255
  7329  0021E2  1A16               	xorwf	___ftadd@f1+1,f,c
  7330  0021E4  0EFF               	movlw	255
  7331  0021E6  1A17               	xorwf	___ftadd@f1+2,f,c
  7332  0021E8  0E01               	movlw	1
  7333  0021EA  2615               	addwf	___ftadd@f1,f,c
  7334  0021EC  0E00               	movlw	0
  7335  0021EE  2216               	addwfc	___ftadd@f1+1,f,c
  7336  0021F0  0E00               	movlw	0
  7337  0021F2  2217               	addwfc	___ftadd@f1+2,f,c
  7338  0021F4                     l569:
  7339  0021F4  AC1E               	btfss	___ftadd@sign,6,c
  7340  0021F6  D00C               	goto	l570
  7341  0021F8  0EFF               	movlw	255
  7342  0021FA  1A18               	xorwf	___ftadd@f2,f,c
  7343  0021FC  0EFF               	movlw	255
  7344  0021FE  1A19               	xorwf	___ftadd@f2+1,f,c
  7345  002200  0EFF               	movlw	255
  7346  002202  1A1A               	xorwf	___ftadd@f2+2,f,c
  7347  002204  0E01               	movlw	1
  7348  002206  2618               	addwf	___ftadd@f2,f,c
  7349  002208  0E00               	movlw	0
  7350  00220A  2219               	addwfc	___ftadd@f2+1,f,c
  7351  00220C  0E00               	movlw	0
  7352  00220E  221A               	addwfc	___ftadd@f2+2,f,c
  7353  002210                     l570:
  7354  002210  0E00               	movlw	0
  7355  002212  6E1E               	movwf	___ftadd@sign,c
  7356  002214  5015               	movf	___ftadd@f1,w,c
  7357  002216  2618               	addwf	___ftadd@f2,f,c
  7358  002218  5016               	movf	___ftadd@f1+1,w,c
  7359  00221A  2219               	addwfc	___ftadd@f2+1,f,c
  7360  00221C  5017               	movf	___ftadd@f1+2,w,c
  7361  00221E  221A               	addwfc	___ftadd@f2+2,f,c
  7362  002220  AE1A               	btfss	___ftadd@f2+2,7,c
  7363  002222  D00E               	goto	l571
  7364  002224  0EFF               	movlw	255
  7365  002226  1A18               	xorwf	___ftadd@f2,f,c
  7366  002228  0EFF               	movlw	255
  7367  00222A  1A19               	xorwf	___ftadd@f2+1,f,c
  7368  00222C  0EFF               	movlw	255
  7369  00222E  1A1A               	xorwf	___ftadd@f2+2,f,c
  7370  002230  0E01               	movlw	1
  7371  002232  2618               	addwf	___ftadd@f2,f,c
  7372  002234  0E00               	movlw	0
  7373  002236  2219               	addwfc	___ftadd@f2+1,f,c
  7374  002238  0E00               	movlw	0
  7375  00223A  221A               	addwfc	___ftadd@f2+2,f,c
  7376  00223C  0E01               	movlw	1
  7377  00223E  6E1E               	movwf	___ftadd@sign,c
  7378  002240                     l571:
  7379  002240  C018  F001         	movff	___ftadd@f2,___ftpack@arg
  7380  002244  C019  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  7381  002248  C01A  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  7382  00224C  C020  F004         	movff	___ftadd@exp1,___ftpack@exp
  7383  002250  C01E  F005         	movff	___ftadd@sign,___ftpack@sign
  7384  002254  EC51  F016         	call	___ftpack	;wreg free
  7385  002258  C001  F015         	movff	?___ftpack,?___ftadd
  7386  00225C  C002  F016         	movff	?___ftpack+1,?___ftadd+1
  7387  002260  C003  F017         	movff	?___ftpack+2,?___ftadd+2
  7388  002264  0012               	return	
  7389  002266                     __end_of___ftadd:
  7390                           	opt stack 0
  7391                           tblptru	equ	0xFF8
  7392                           tblptrh	equ	0xFF7
  7393                           tblptrl	equ	0xFF6
  7394                           tablat	equ	0xFF5
  7395                           prodh	equ	0xFF4
  7396                           prodl	equ	0xFF3
  7397                           intcon	equ	0xFF2
  7398                           postinc0	equ	0xFEE
  7399                           wreg	equ	0xFE8
  7400                           indf2	equ	0xFDF
  7401                           postinc2	equ	0xFDE
  7402                           postdec2	equ	0xFDD
  7403                           fsr2h	equ	0xFDA
  7404                           fsr2l	equ	0xFD9
  7405                           status	equ	0xFD8
  7406                           
  7407 ;; *************** function ___ftneg *****************
  7408 ;; Defined at:
  7409 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
  7410 ;; Parameters:    Size  Location     Type
  7411 ;;  f1              3    0[COMRAM] float 
  7412 ;; Auto vars:     Size  Location     Type
  7413 ;;		None
  7414 ;; Return value:  Size  Location     Type
  7415 ;;                  3    0[COMRAM] float 
  7416 ;; Registers used:
  7417 ;;		wreg, status,2, status,0
  7418 ;; Tracked objects:
  7419 ;;		On entry : 0/0
  7420 ;;		On exit  : 0/0
  7421 ;;		Unchanged: 0/0
  7422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7423 ;;      Params:         3       0       0       0       0       0       0       0       0
  7424 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7425 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7426 ;;      Totals:         3       0       0       0       0       0       0       0       0
  7427 ;;Total ram usage:        3 bytes
  7428 ;; Hardware stack levels used:    1
  7429 ;; This function calls:
  7430 ;;		Nothing
  7431 ;; This function is called by:
  7432 ;;		_sprintf
  7433 ;;		_sin
  7434 ;; This function uses a non-reentrant model
  7435 ;;
  7436                           
  7437                           	psect	text24
  7438  0032F8                     __ptext24:
  7439                           	opt stack 0
  7440  0032F8                     ___ftneg:
  7441                           	opt stack 29
  7442                           
  7443                           ;incstack = 0
  7444  0032F8  5001               	movf	___ftneg@f1,w,c
  7445  0032FA  1002               	iorwf	___ftneg@f1+1,w,c
  7446  0032FC  1003               	iorwf	___ftneg@f1+2,w,c
  7447  0032FE  B4D8               	btfsc	status,2,c
  7448  003300  D006               	goto	l619
  7449  003302  0E00               	movlw	0
  7450  003304  1A01               	xorwf	___ftneg@f1,f,c
  7451  003306  0E00               	movlw	0
  7452  003308  1A02               	xorwf	___ftneg@f1+1,f,c
  7453  00330A  0E80               	movlw	128
  7454  00330C  1A03               	xorwf	___ftneg@f1+2,f,c
  7455  00330E                     l619:
  7456  00330E  C001  F001         	movff	___ftneg@f1,?___ftneg
  7457  003312  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  7458  003316  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  7459  00331A  0012               	return		;funcret
  7460  00331C                     __end_of___ftneg:
  7461                           	opt stack 0
  7462                           tblptru	equ	0xFF8
  7463                           tblptrh	equ	0xFF7
  7464                           tblptrl	equ	0xFF6
  7465                           tablat	equ	0xFF5
  7466                           prodh	equ	0xFF4
  7467                           prodl	equ	0xFF3
  7468                           intcon	equ	0xFF2
  7469                           postinc0	equ	0xFEE
  7470                           wreg	equ	0xFE8
  7471                           indf2	equ	0xFDF
  7472                           postinc2	equ	0xFDE
  7473                           postdec2	equ	0xFDD
  7474                           fsr2h	equ	0xFDA
  7475                           fsr2l	equ	0xFD9
  7476                           status	equ	0xFD8
  7477                           
  7478 ;; *************** function ___ftdiv *****************
  7479 ;; Defined at:
  7480 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  7481 ;; Parameters:    Size  Location     Type
  7482 ;;  f1              3   32[COMRAM] float 
  7483 ;;  f2              3   35[COMRAM] float 
  7484 ;; Auto vars:     Size  Location     Type
  7485 ;;  f3              3   42[COMRAM] float 
  7486 ;;  sign            1   46[COMRAM] unsigned char 
  7487 ;;  exp             1   45[COMRAM] unsigned char 
  7488 ;;  cntr            1   41[COMRAM] unsigned char 
  7489 ;; Return value:  Size  Location     Type
  7490 ;;                  3   32[COMRAM] float 
  7491 ;; Registers used:
  7492 ;;		wreg, status,2, status,0, cstack
  7493 ;; Tracked objects:
  7494 ;;		On entry : 0/0
  7495 ;;		On exit  : 0/0
  7496 ;;		Unchanged: 0/0
  7497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7498 ;;      Params:         6       0       0       0       0       0       0       0       0
  7499 ;;      Locals:         6       0       0       0       0       0       0       0       0
  7500 ;;      Temps:          3       0       0       0       0       0       0       0       0
  7501 ;;      Totals:        15       0       0       0       0       0       0       0       0
  7502 ;;Total ram usage:       15 bytes
  7503 ;; Hardware stack levels used:    1
  7504 ;; Hardware stack levels required when called:    1
  7505 ;; This function calls:
  7506 ;;		___ftpack
  7507 ;; This function is called by:
  7508 ;;		_main
  7509 ;;		_sin
  7510 ;; This function uses a non-reentrant model
  7511 ;;
  7512                           
  7513                           	psect	text25
  7514  002A0A                     __ptext25:
  7515                           	opt stack 0
  7516  002A0A                     ___ftdiv:
  7517                           	opt stack 27
  7518                           
  7519                           ;incstack = 0
  7520  002A0A  C023  F027         	movff	___ftdiv@f1+2,??___ftdiv
  7521  002A0E  6A28               	clrf	(??___ftdiv+1)& (0+255),c
  7522  002A10  6A29               	clrf	(??___ftdiv+2)& (0+255),c
  7523  002A12  3422               	rlcf	___ftdiv@f1+1,w,c
  7524  002A14  3627               	rlcf	??___ftdiv& (0+255),f,c
  7525  002A16  E301               	bnc	u2391
  7526  002A18  8028               	bsf	(??___ftdiv+1)& (0+255),0,c
  7527  002A1A                     u2391:
  7528  002A1A  5027               	movf	??___ftdiv,w,c
  7529  002A1C  6E2E               	movwf	___ftdiv@exp,c
  7530  002A1E  502E               	movf	___ftdiv@exp,w,c
  7531  002A20  A4D8               	btfss	status,2,c
  7532  002A22  D007               	goto	l576
  7533  002A24  0E00               	movlw	0
  7534  002A26  6E21               	movwf	?___ftdiv,c
  7535  002A28  0E00               	movlw	0
  7536  002A2A  6E22               	movwf	?___ftdiv+1,c
  7537  002A2C  0E00               	movlw	0
  7538  002A2E  6E23               	movwf	?___ftdiv+2,c
  7539  002A30  0012               	return	
  7540  002A32                     l576:
  7541  002A32  C026  F027         	movff	___ftdiv@f2+2,??___ftdiv
  7542  002A36  6A28               	clrf	(??___ftdiv+1)& (0+255),c
  7543  002A38  6A29               	clrf	(??___ftdiv+2)& (0+255),c
  7544  002A3A  3425               	rlcf	___ftdiv@f2+1,w,c
  7545  002A3C  3627               	rlcf	??___ftdiv& (0+255),f,c
  7546  002A3E  E301               	bnc	u2411
  7547  002A40  8028               	bsf	(??___ftdiv+1)& (0+255),0,c
  7548  002A42                     u2411:
  7549  002A42  5027               	movf	??___ftdiv,w,c
  7550  002A44  6E2F               	movwf	___ftdiv@sign,c
  7551  002A46  502F               	movf	___ftdiv@sign,w,c
  7552  002A48  A4D8               	btfss	status,2,c
  7553  002A4A  D007               	goto	l578
  7554  002A4C  0E00               	movlw	0
  7555  002A4E  6E21               	movwf	?___ftdiv,c
  7556  002A50  0E00               	movlw	0
  7557  002A52  6E22               	movwf	?___ftdiv+1,c
  7558  002A54  0E00               	movlw	0
  7559  002A56  6E23               	movwf	?___ftdiv+2,c
  7560  002A58  0012               	return	
  7561  002A5A                     l578:
  7562  002A5A  0E00               	movlw	0
  7563  002A5C  6E2B               	movwf	___ftdiv@f3,c
  7564  002A5E  0E00               	movlw	0
  7565  002A60  6E2C               	movwf	___ftdiv@f3+1,c
  7566  002A62  0E00               	movlw	0
  7567  002A64  6E2D               	movwf	___ftdiv@f3+2,c
  7568  002A66  502F               	movf	___ftdiv@sign,w,c
  7569  002A68  0F89               	addlw	137
  7570  002A6A  5E2E               	subwf	___ftdiv@exp,f,c
  7571  002A6C  C023  F02F         	movff	___ftdiv@f1+2,___ftdiv@sign
  7572  002A70  5026               	movf	___ftdiv@f2+2,w,c
  7573  002A72  1A2F               	xorwf	___ftdiv@sign,f,c
  7574  002A74  0E80               	movlw	128
  7575  002A76  162F               	andwf	___ftdiv@sign,f,c
  7576  002A78  8E22               	bsf	___ftdiv@f1+1,7,c
  7577  002A7A  0EFF               	movlw	255
  7578  002A7C  1621               	andwf	___ftdiv@f1,f,c
  7579  002A7E  0EFF               	movlw	255
  7580  002A80  1622               	andwf	___ftdiv@f1+1,f,c
  7581  002A82  0E00               	movlw	0
  7582  002A84  1623               	andwf	___ftdiv@f1+2,f,c
  7583  002A86  8E25               	bsf	___ftdiv@f2+1,7,c
  7584  002A88  0EFF               	movlw	255
  7585  002A8A  1624               	andwf	___ftdiv@f2,f,c
  7586  002A8C  0EFF               	movlw	255
  7587  002A8E  1625               	andwf	___ftdiv@f2+1,f,c
  7588  002A90  0E00               	movlw	0
  7589  002A92  1626               	andwf	___ftdiv@f2+2,f,c
  7590  002A94  0E18               	movlw	24
  7591  002A96  6E2A               	movwf	___ftdiv@cntr,c
  7592  002A98  90D8               	bcf	status,0,c
  7593  002A9A  362B               	rlcf	___ftdiv@f3,f,c
  7594  002A9C  362C               	rlcf	___ftdiv@f3+1,f,c
  7595  002A9E  362D               	rlcf	___ftdiv@f3+2,f,c
  7596  002AA0  5024               	movf	___ftdiv@f2,w,c
  7597  002AA2  5C21               	subwf	___ftdiv@f1,w,c
  7598  002AA4  5025               	movf	___ftdiv@f2+1,w,c
  7599  002AA6  5822               	subwfb	___ftdiv@f1+1,w,c
  7600  002AA8  5026               	movf	___ftdiv@f2+2,w,c
  7601  002AAA  5823               	subwfb	___ftdiv@f1+2,w,c
  7602  002AAC  A0D8               	btfss	status,0,c
  7603  002AAE  D007               	goto	l580
  7604  002AB0  5024               	movf	___ftdiv@f2,w,c
  7605  002AB2  5E21               	subwf	___ftdiv@f1,f,c
  7606  002AB4  5025               	movf	___ftdiv@f2+1,w,c
  7607  002AB6  5A22               	subwfb	___ftdiv@f1+1,f,c
  7608  002AB8  5026               	movf	___ftdiv@f2+2,w,c
  7609  002ABA  5A23               	subwfb	___ftdiv@f1+2,f,c
  7610  002ABC  802B               	bsf	___ftdiv@f3,0,c
  7611  002ABE                     l580:
  7612  002ABE  90D8               	bcf	status,0,c
  7613  002AC0  3621               	rlcf	___ftdiv@f1,f,c
  7614  002AC2  3622               	rlcf	___ftdiv@f1+1,f,c
  7615  002AC4  3623               	rlcf	___ftdiv@f1+2,f,c
  7616  002AC6  2E2A               	decfsz	___ftdiv@cntr,f,c
  7617  002AC8  D7E7               	goto	l579
  7618  002ACA  C02B  F001         	movff	___ftdiv@f3,___ftpack@arg
  7619  002ACE  C02C  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  7620  002AD2  C02D  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  7621  002AD6  C02E  F004         	movff	___ftdiv@exp,___ftpack@exp
  7622  002ADA  C02F  F005         	movff	___ftdiv@sign,___ftpack@sign
  7623  002ADE  EC51  F016         	call	___ftpack	;wreg free
  7624  002AE2  C001  F021         	movff	?___ftpack,?___ftdiv
  7625  002AE6  C002  F022         	movff	?___ftpack+1,?___ftdiv+1
  7626  002AEA  C003  F023         	movff	?___ftpack+2,?___ftdiv+2
  7627  002AEE  0012               	return	
  7628  002AF0                     __end_of___ftdiv:
  7629                           	opt stack 0
  7630                           tblptru	equ	0xFF8
  7631                           tblptrh	equ	0xFF7
  7632                           tblptrl	equ	0xFF6
  7633                           tablat	equ	0xFF5
  7634                           prodh	equ	0xFF4
  7635                           prodl	equ	0xFF3
  7636                           intcon	equ	0xFF2
  7637                           postinc0	equ	0xFEE
  7638                           wreg	equ	0xFE8
  7639                           indf2	equ	0xFDF
  7640                           postinc2	equ	0xFDE
  7641                           postdec2	equ	0xFDD
  7642                           fsr2h	equ	0xFDA
  7643                           fsr2l	equ	0xFD9
  7644                           status	equ	0xFD8
  7645                           
  7646 ;; *************** function _configstandard *****************
  7647 ;; Defined at:
  7648 ;;		line 10 in file "configstandard.c"
  7649 ;; Parameters:    Size  Location     Type
  7650 ;;		None
  7651 ;; Auto vars:     Size  Location     Type
  7652 ;;		None
  7653 ;; Return value:  Size  Location     Type
  7654 ;;                  1    wreg      void 
  7655 ;; Registers used:
  7656 ;;		wreg, status,2
  7657 ;; Tracked objects:
  7658 ;;		On entry : 0/0
  7659 ;;		On exit  : 0/0
  7660 ;;		Unchanged: 0/0
  7661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7662 ;;      Params:         0       0       0       0       0       0       0       0       0
  7663 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7664 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7665 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7666 ;;Total ram usage:        0 bytes
  7667 ;; Hardware stack levels used:    1
  7668 ;; This function calls:
  7669 ;;		Nothing
  7670 ;; This function is called by:
  7671 ;;		_main
  7672 ;; This function uses a non-reentrant model
  7673 ;;
  7674                           
  7675                           	psect	text26
  7676  002F92                     __ptext26:
  7677                           	opt stack 0
  7678  002F92                     _configstandard:
  7679                           	opt stack 30
  7680                           
  7681                           ;configstandard.c: 16: ADCON0bits.CHS3 = 0;
  7682                           
  7683                           ;incstack = 0
  7684  002F92  9AC2               	bcf	4034,5,c	;volatile
  7685                           
  7686                           ;configstandard.c: 17: ADCON0bits.CHS2 = 0;
  7687  002F94  98C2               	bcf	4034,4,c	;volatile
  7688                           
  7689                           ;configstandard.c: 18: ADCON0bits.CHS1 = 0;
  7690  002F96  96C2               	bcf	4034,3,c	;volatile
  7691                           
  7692                           ;configstandard.c: 19: ADCON0bits.CHS0 = 0;
  7693  002F98  94C2               	bcf	4034,2,c	;volatile
  7694                           
  7695                           ;configstandard.c: 20: ADCON0bits.ADON = 1;
  7696  002F9A  80C2               	bsf	4034,0,c	;volatile
  7697                           
  7698                           ;configstandard.c: 24: ADCON1 = 0b00001110;
  7699  002F9C  0E0E               	movlw	14
  7700  002F9E  6EC1               	movwf	4033,c	;volatile
  7701                           
  7702                           ;configstandard.c: 28: ADCON2bits.ADFM = 1;
  7703  002FA0  8EC0               	bsf	4032,7,c	;volatile
  7704                           
  7705                           ;configstandard.c: 29: ADCON2bits.ACQT2 = 1;
  7706  002FA2  8AC0               	bsf	4032,5,c	;volatile
  7707                           
  7708                           ;configstandard.c: 30: ADCON2bits.ACQT1 = 0;
  7709  002FA4  98C0               	bcf	4032,4,c	;volatile
  7710                           
  7711                           ;configstandard.c: 31: ADCON2bits.ACQT0 = 1;
  7712  002FA6  86C0               	bsf	4032,3,c	;volatile
  7713                           
  7714                           ;configstandard.c: 32: ADCON2bits.ADCS2 = 1;
  7715  002FA8  84C0               	bsf	4032,2,c	;volatile
  7716                           
  7717                           ;configstandard.c: 33: ADCON2bits.ADCS1 = 0;
  7718  002FAA  92C0               	bcf	4032,1,c	;volatile
  7719                           
  7720                           ;configstandard.c: 34: ADCON2bits.ADCS0 = 0;
  7721  002FAC  90C0               	bcf	4032,0,c	;volatile
  7722                           
  7723                           ;configstandard.c: 36: ADRESH = 0;
  7724  002FAE  0E00               	movlw	0
  7725  002FB0  6EC4               	movwf	4036,c	;volatile
  7726                           
  7727                           ;configstandard.c: 37: ADRESL = 0;
  7728  002FB2  0E00               	movlw	0
  7729  002FB4  6EC3               	movwf	4035,c	;volatile
  7730                           
  7731                           ;configstandard.c: 48: INTCONbits.GIE = 0;
  7732  002FB6  9EF2               	bcf	intcon,7,c	;volatile
  7733                           
  7734                           ;configstandard.c: 49: INTCONbits.PEIE = 0;
  7735  002FB8  9CF2               	bcf	intcon,6,c	;volatile
  7736                           
  7737                           ;configstandard.c: 50: INTCONbits.INT0IE=0;
  7738  002FBA  98F2               	bcf	intcon,4,c	;volatile
  7739                           
  7740                           ;configstandard.c: 51: INTCONbits.INT0IF=0;
  7741  002FBC  92F2               	bcf	intcon,1,c	;volatile
  7742                           
  7743                           ;configstandard.c: 52: INTCON2bits.INTEDG0=0;
  7744  002FBE  9CF1               	bcf	intcon2,6,c	;volatile
  7745                           
  7746                           ;configstandard.c: 53: INTCON2bits.INTEDG1=0;
  7747  002FC0  9AF1               	bcf	intcon2,5,c	;volatile
  7748                           
  7749                           ;configstandard.c: 54: INTCON3bits.INT1E=0;
  7750  002FC2  96F0               	bcf	intcon3,3,c	;volatile
  7751                           
  7752                           ;configstandard.c: 55: INTCON3bits.INT1F=0;
  7753  002FC4  90F0               	bcf	intcon3,0,c	;volatile
  7754                           
  7755                           ;configstandard.c: 57: PIE1bits.CCP1IE = 0;
  7756  002FC6  949D               	bcf	3997,2,c	;volatile
  7757                           
  7758                           ;configstandard.c: 58: PIR1bits.CCP1IF = 0;
  7759  002FC8  949E               	bcf	3998,2,c	;volatile
  7760                           
  7761                           ;configstandard.c: 65: T1CONbits.TMR1CS = 0;
  7762  002FCA  92CD               	bcf	4045,1,c	;volatile
  7763                           
  7764                           ;configstandard.c: 66: T1CONbits.RD16 = 1;
  7765  002FCC  8ECD               	bsf	4045,7,c	;volatile
  7766                           
  7767                           ;configstandard.c: 67: T1CONbits.T1CKPS = 0b00;
  7768  002FCE  0ECF               	movlw	-49
  7769  002FD0  16CD               	andwf	4045,f,c	;volatile
  7770                           
  7771                           ;configstandard.c: 68: T1CONbits.TMR1ON = 0;
  7772  002FD2  90CD               	bcf	4045,0,c	;volatile
  7773                           
  7774                           ;configstandard.c: 69: TMR1 = 0;
  7775  002FD4  0E00               	movlw	0
  7776  002FD6  6ECF               	movwf	4047,c	;volatile
  7777  002FD8  0E00               	movlw	0
  7778  002FDA  6ECE               	movwf	4046,c	;volatile
  7779                           
  7780                           ;configstandard.c: 73: CCP1CONbits.CCP1M = 0b1011;
  7781  002FDC  50BD               	movf	4029,w,c	;volatile
  7782  002FDE  0BF0               	andlw	-16
  7783  002FE0  090B               	iorlw	11
  7784  002FE2  6EBD               	movwf	4029,c	;volatile
  7785                           
  7786                           ;configstandard.c: 74: CCPR1 = 2400;
  7787  002FE4  0E09               	movlw	9
  7788  002FE6  6EBF               	movwf	4031,c	;volatile
  7789  002FE8  0E60               	movlw	96
  7790  002FEA  6EBE               	movwf	4030,c	;volatile
  7791                           
  7792                           ;configstandard.c: 78: ADCON2bits.ADCS=110;
  7793  002FEC  50C0               	movf	4032,w,c	;volatile
  7794  002FEE  0BF8               	andlw	-8
  7795  002FF0  0906               	iorlw	6
  7796  002FF2  6EC0               	movwf	4032,c	;volatile
  7797                           
  7798                           ;configstandard.c: 79: ADCON2bits.ACQT=010;
  7799  002FF4  96C0               	bcf	4032,3,c	;volatile
  7800  002FF6  98C0               	bcf	4032,4,c	;volatile
  7801  002FF8  9AC0               	bcf	4032,5,c	;volatile
  7802                           
  7803                           ;configstandard.c: 86: T0CONbits.TMR0ON = 0;
  7804  002FFA  9ED5               	bcf	4053,7,c	;volatile
  7805                           
  7806                           ;configstandard.c: 87: T0CONbits.T08BIT = 1;
  7807  002FFC  8CD5               	bsf	4053,6,c	;volatile
  7808                           
  7809                           ;configstandard.c: 88: T0CONbits.T0CS = 0;
  7810  002FFE  9AD5               	bcf	4053,5,c	;volatile
  7811                           
  7812                           ;configstandard.c: 89: T0CONbits.T0SE = 1;
  7813  003000  88D5               	bsf	4053,4,c	;volatile
  7814                           
  7815                           ;configstandard.c: 90: T0CONbits.PSA = 0;
  7816  003002  96D5               	bcf	4053,3,c	;volatile
  7817                           
  7818                           ;configstandard.c: 93: T0CONbits.T0PS2 = 1;
  7819  003004  84D5               	bsf	4053,2,c	;volatile
  7820                           
  7821                           ;configstandard.c: 94: T0CONbits.T0PS1 = 1;
  7822  003006  82D5               	bsf	4053,1,c	;volatile
  7823                           
  7824                           ;configstandard.c: 95: T0CONbits.T0PS0 = 1;
  7825  003008  80D5               	bsf	4053,0,c	;volatile
  7826  00300A  0012               	return		;funcret
  7827  00300C                     __end_of_configstandard:
  7828                           	opt stack 0
  7829                           tblptru	equ	0xFF8
  7830                           tblptrh	equ	0xFF7
  7831                           tblptrl	equ	0xFF6
  7832                           tablat	equ	0xFF5
  7833                           prodh	equ	0xFF4
  7834                           prodl	equ	0xFF3
  7835                           intcon	equ	0xFF2
  7836                           intcon2	equ	0xFF1
  7837                           intcon3	equ	0xFF0
  7838                           postinc0	equ	0xFEE
  7839                           wreg	equ	0xFE8
  7840                           indf2	equ	0xFDF
  7841                           postinc2	equ	0xFDE
  7842                           postdec2	equ	0xFDD
  7843                           fsr2h	equ	0xFDA
  7844                           fsr2l	equ	0xFD9
  7845                           status	equ	0xFD8
  7846                           
  7847 ;; *************** function ___lwtoft *****************
  7848 ;; Defined at:
  7849 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
  7850 ;; Parameters:    Size  Location     Type
  7851 ;;  c               2    8[COMRAM] unsigned int 
  7852 ;; Auto vars:     Size  Location     Type
  7853 ;;		None
  7854 ;; Return value:  Size  Location     Type
  7855 ;;                  3    8[COMRAM] float 
  7856 ;; Registers used:
  7857 ;;		wreg, status,2, status,0, cstack
  7858 ;; Tracked objects:
  7859 ;;		On entry : 0/0
  7860 ;;		On exit  : 0/0
  7861 ;;		Unchanged: 0/0
  7862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7863 ;;      Params:         3       0       0       0       0       0       0       0       0
  7864 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7865 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7866 ;;      Totals:         3       0       0       0       0       0       0       0       0
  7867 ;;Total ram usage:        3 bytes
  7868 ;; Hardware stack levels used:    1
  7869 ;; Hardware stack levels required when called:    1
  7870 ;; This function calls:
  7871 ;;		___ftpack
  7872 ;; This function is called by:
  7873 ;;		_main
  7874 ;; This function uses a non-reentrant model
  7875 ;;
  7876                           
  7877                           	psect	text27
  7878  00331C                     __ptext27:
  7879                           	opt stack 0
  7880  00331C                     ___lwtoft:
  7881                           	opt stack 29
  7882                           
  7883                           ;incstack = 0
  7884  00331C  C009  F001         	movff	___lwtoft@c,___ftpack@arg
  7885  003320  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  7886  003324  6A03               	clrf	___ftpack@arg+2,c
  7887  003326  0E8E               	movlw	142
  7888  003328  6E04               	movwf	___ftpack@exp,c
  7889  00332A  0E00               	movlw	0
  7890  00332C  6E05               	movwf	___ftpack@sign,c
  7891  00332E  EC51  F016         	call	___ftpack	;wreg free
  7892  003332  C001  F009         	movff	?___ftpack,?___lwtoft
  7893  003336  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  7894  00333A  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  7895  00333E  0012               	return	
  7896  003340                     __end_of___lwtoft:
  7897                           	opt stack 0
  7898                           tblptru	equ	0xFF8
  7899                           tblptrh	equ	0xFF7
  7900                           tblptrl	equ	0xFF6
  7901                           tablat	equ	0xFF5
  7902                           prodh	equ	0xFF4
  7903                           prodl	equ	0xFF3
  7904                           intcon	equ	0xFF2
  7905                           intcon2	equ	0xFF1
  7906                           intcon3	equ	0xFF0
  7907                           postinc0	equ	0xFEE
  7908                           wreg	equ	0xFE8
  7909                           indf2	equ	0xFDF
  7910                           postinc2	equ	0xFDE
  7911                           postdec2	equ	0xFDD
  7912                           fsr2h	equ	0xFDA
  7913                           fsr2l	equ	0xFD9
  7914                           status	equ	0xFD8
  7915                           
  7916 ;; *************** function ___ftpack *****************
  7917 ;; Defined at:
  7918 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  7919 ;; Parameters:    Size  Location     Type
  7920 ;;  arg             3    0[COMRAM] unsigned um
  7921 ;;  exp             1    3[COMRAM] unsigned char 
  7922 ;;  sign            1    4[COMRAM] unsigned char 
  7923 ;; Auto vars:     Size  Location     Type
  7924 ;;		None
  7925 ;; Return value:  Size  Location     Type
  7926 ;;                  3    0[COMRAM] float 
  7927 ;; Registers used:
  7928 ;;		wreg, status,2, status,0
  7929 ;; Tracked objects:
  7930 ;;		On entry : 0/0
  7931 ;;		On exit  : 0/0
  7932 ;;		Unchanged: 0/0
  7933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7934 ;;      Params:         5       0       0       0       0       0       0       0       0
  7935 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7936 ;;      Temps:          3       0       0       0       0       0       0       0       0
  7937 ;;      Totals:         8       0       0       0       0       0       0       0       0
  7938 ;;Total ram usage:        8 bytes
  7939 ;; Hardware stack levels used:    1
  7940 ;; This function calls:
  7941 ;;		Nothing
  7942 ;; This function is called by:
  7943 ;;		___altoft
  7944 ;;		___ftadd
  7945 ;;		___ftdiv
  7946 ;;		___ftmul
  7947 ;;		___lltoft
  7948 ;;		___lwtoft
  7949 ;; This function uses a non-reentrant model
  7950 ;;
  7951                           
  7952                           	psect	text28
  7953  002CA2                     __ptext28:
  7954                           	opt stack 0
  7955  002CA2                     ___ftpack:
  7956                           	opt stack 27
  7957                           
  7958                           ;incstack = 0
  7959  002CA2  5004               	movf	___ftpack@exp,w,c
  7960  002CA4  B4D8               	btfsc	status,2,c
  7961  002CA6  D005               	goto	u1900
  7962  002CA8  5001               	movf	___ftpack@arg,w,c
  7963  002CAA  1002               	iorwf	___ftpack@arg+1,w,c
  7964  002CAC  1003               	iorwf	___ftpack@arg+2,w,c
  7965  002CAE  A4D8               	btfss	status,2,c
  7966  002CB0  D00C               	goto	l512
  7967  002CB2                     u1900:
  7968  002CB2  0E00               	movlw	0
  7969  002CB4  6E01               	movwf	?___ftpack,c
  7970  002CB6  0E00               	movlw	0
  7971  002CB8  6E02               	movwf	?___ftpack+1,c
  7972  002CBA  0E00               	movlw	0
  7973  002CBC  6E03               	movwf	?___ftpack+2,c
  7974  002CBE  0012               	return	
  7975  002CC0  2A04               	incf	___ftpack@exp,f,c
  7976  002CC2  90D8               	bcf	status,0,c
  7977  002CC4  3203               	rrcf	___ftpack@arg+2,f,c
  7978  002CC6  3202               	rrcf	___ftpack@arg+1,f,c
  7979  002CC8  3201               	rrcf	___ftpack@arg,f,c
  7980  002CCA                     l512:
  7981  002CCA  0E00               	movlw	0
  7982  002CCC  1401               	andwf	___ftpack@arg,w,c
  7983  002CCE  6E06               	movwf	??___ftpack& (0+255),c
  7984  002CD0  0E00               	movlw	0
  7985  002CD2  1402               	andwf	___ftpack@arg+1,w,c
  7986  002CD4  6E07               	movwf	(??___ftpack+1)& (0+255),c
  7987  002CD6  0EFE               	movlw	254
  7988  002CD8  1403               	andwf	___ftpack@arg+2,w,c
  7989  002CDA  6E08               	movwf	(??___ftpack+2)& (0+255),c
  7990  002CDC  5006               	movf	??___ftpack,w,c
  7991  002CDE  1007               	iorwf	??___ftpack+1,w,c
  7992  002CE0  1008               	iorwf	??___ftpack+2,w,c
  7993  002CE2  B4D8               	btfsc	status,2,c
  7994  002CE4  D00C               	goto	l515
  7995  002CE6  D7EC               	goto	l513
  7996  002CE8  2A04               	incf	___ftpack@exp,f,c
  7997  002CEA  0E01               	movlw	1
  7998  002CEC  2601               	addwf	___ftpack@arg,f,c
  7999  002CEE  0E00               	movlw	0
  8000  002CF0  2202               	addwfc	___ftpack@arg+1,f,c
  8001  002CF2  0E00               	movlw	0
  8002  002CF4  2203               	addwfc	___ftpack@arg+2,f,c
  8003  002CF6  90D8               	bcf	status,0,c
  8004  002CF8  3203               	rrcf	___ftpack@arg+2,f,c
  8005  002CFA  3202               	rrcf	___ftpack@arg+1,f,c
  8006  002CFC  3201               	rrcf	___ftpack@arg,f,c
  8007  002CFE                     l515:
  8008  002CFE  0E00               	movlw	0
  8009  002D00  1401               	andwf	___ftpack@arg,w,c
  8010  002D02  6E06               	movwf	??___ftpack& (0+255),c
  8011  002D04  0E00               	movlw	0
  8012  002D06  1402               	andwf	___ftpack@arg+1,w,c
  8013  002D08  6E07               	movwf	(??___ftpack+1)& (0+255),c
  8014  002D0A  0EFF               	movlw	255
  8015  002D0C  1403               	andwf	___ftpack@arg+2,w,c
  8016  002D0E  6E08               	movwf	(??___ftpack+2)& (0+255),c
  8017  002D10  5006               	movf	??___ftpack,w,c
  8018  002D12  1007               	iorwf	??___ftpack+1,w,c
  8019  002D14  1008               	iorwf	??___ftpack+2,w,c
  8020  002D16  B4D8               	btfsc	status,2,c
  8021  002D18  D006               	goto	l518
  8022  002D1A  D7E6               	goto	l516
  8023  002D1C  0604               	decf	___ftpack@exp,f,c
  8024  002D1E  90D8               	bcf	status,0,c
  8025  002D20  3601               	rlcf	___ftpack@arg,f,c
  8026  002D22  3602               	rlcf	___ftpack@arg+1,f,c
  8027  002D24  3603               	rlcf	___ftpack@arg+2,f,c
  8028  002D26                     l518:
  8029  002D26  BE02               	btfsc	___ftpack@arg+1,7,c
  8030  002D28  D003               	goto	u1940
  8031  002D2A  0E02               	movlw	2
  8032  002D2C  6004               	cpfslt	___ftpack@exp,c
  8033  002D2E  D7F6               	goto	l519
  8034  002D30                     u1940:
  8035  002D30  A004               	btfss	___ftpack@exp,0,c
  8036  002D32  9E02               	bcf	___ftpack@arg+1,7,c
  8037  002D34  90D8               	bcf	status,0,c
  8038  002D36  3204               	rrcf	___ftpack@exp,f,c
  8039  002D38  5004               	movf	___ftpack@exp,w,c
  8040  002D3A  1203               	iorwf	___ftpack@arg+2,f,c
  8041  002D3C  5005               	movf	___ftpack@sign,w,c
  8042  002D3E  A4D8               	btfss	status,2,c
  8043  002D40  8E03               	bsf	___ftpack@arg+2,7,c
  8044  002D42  C001  F001         	movff	___ftpack@arg,?___ftpack
  8045  002D46  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  8046  002D4A  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  8047  002D4E  0012               	return	
  8048  002D50                     __end_of___ftpack:
  8049                           	opt stack 0
  8050                           tblptru	equ	0xFF8
  8051                           tblptrh	equ	0xFF7
  8052                           tblptrl	equ	0xFF6
  8053                           tablat	equ	0xFF5
  8054                           prodh	equ	0xFF4
  8055                           prodl	equ	0xFF3
  8056                           intcon	equ	0xFF2
  8057                           intcon2	equ	0xFF1
  8058                           intcon3	equ	0xFF0
  8059                           postinc0	equ	0xFEE
  8060                           wreg	equ	0xFE8
  8061                           indf2	equ	0xFDF
  8062                           postinc2	equ	0xFDE
  8063                           postdec2	equ	0xFDD
  8064                           fsr2h	equ	0xFDA
  8065                           fsr2l	equ	0xFD9
  8066                           status	equ	0xFD8
  8067                           
  8068 ;; *************** function _Lcd_Out2 *****************
  8069 ;; Defined at:
  8070 ;;		line 109 in file "Library_LCD_2.h"
  8071 ;; Parameters:    Size  Location     Type
  8072 ;;  y               1    wreg     unsigned char 
  8073 ;;  x               1    3[COMRAM] unsigned char 
  8074 ;;  buffer          2    4[COMRAM] PTR unsigned char 
  8075 ;;		 -> buffer2(20), main@buffer1(16), 
  8076 ;; Auto vars:     Size  Location     Type
  8077 ;;  y               1    6[COMRAM] unsigned char 
  8078 ;;  data            1    7[COMRAM] unsigned char 
  8079 ;; Return value:  Size  Location     Type
  8080 ;;                  1    wreg      void 
  8081 ;; Registers used:
  8082 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8083 ;; Tracked objects:
  8084 ;;		On entry : 0/0
  8085 ;;		On exit  : 0/0
  8086 ;;		Unchanged: 0/0
  8087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8088 ;;      Params:         3       0       0       0       0       0       0       0       0
  8089 ;;      Locals:         2       0       0       0       0       0       0       0       0
  8090 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8091 ;;      Totals:         5       0       0       0       0       0       0       0       0
  8092 ;;Total ram usage:        5 bytes
  8093 ;; Hardware stack levels used:    1
  8094 ;; Hardware stack levels required when called:    1
  8095 ;; This function calls:
  8096 ;;		_Lcd_Chr_CP
  8097 ;;		_Lcd_Cmd
  8098 ;; This function is called by:
  8099 ;;		_main
  8100 ;; This function uses a non-reentrant model
  8101 ;;
  8102                           
  8103                           	psect	text29
  8104  0031D2                     __ptext29:
  8105                           	opt stack 0
  8106  0031D2                     _Lcd_Out2:
  8107                           	opt stack 29
  8108                           
  8109                           ;incstack = 0
  8110                           ;Lcd_Out2@y stored from wreg
  8111  0031D2  6E07               	movwf	Lcd_Out2@y,c
  8112                           
  8113                           ;Library_LCD_2.h: 111: unsigned char data;
  8114                           ;Library_LCD_2.h: 112: switch (y)
  8115  0031D4  D00D               	goto	l86
  8116  0031D6  5004               	movf	Lcd_Out2@x,w,c
  8117  0031D8  0F80               	addlw	128
  8118  0031DA  D008               	goto	L6
  8119  0031DC  5004               	movf	Lcd_Out2@x,w,c
  8120  0031DE  0FC0               	addlw	192
  8121  0031E0  D005               	goto	L6
  8122  0031E2  5004               	movf	Lcd_Out2@x,w,c
  8123  0031E4  0F94               	addlw	148
  8124  0031E6  D002               	goto	L6
  8125  0031E8  5004               	movf	Lcd_Out2@x,w,c
  8126  0031EA  0FD4               	addlw	212
  8127  0031EC                     L6:
  8128  0031EC  6E08               	movwf	Lcd_Out2@data,c
  8129                           
  8130                           ;Library_LCD_2.h: 119: }
  8131                           
  8132                           ;Library_LCD_2.h: 118: default: break;
  8133  0031EE  D00D               	goto	l88
  8134  0031F0                     l86:
  8135  0031F0  5007               	movf	Lcd_Out2@y,w,c
  8136                           
  8137                           ; Switch size 1, requested type "space"
  8138                           ; Number of cases is 4, Range of values is 1 to 4
  8139                           ; switch strategies available:
  8140                           ; Name         Instructions Cycles
  8141                           ; simple_byte           13     7 (average)
  8142                           ;	Chosen strategy is simple_byte
  8143  0031F2  0A01               	xorlw	1	; case 1
  8144  0031F4  B4D8               	btfsc	status,2,c
  8145  0031F6  D7EF               	goto	l87
  8146  0031F8  0A03               	xorlw	3	; case 2
  8147  0031FA  B4D8               	btfsc	status,2,c
  8148  0031FC  D7EF               	goto	l89
  8149  0031FE  0A01               	xorlw	1	; case 3
  8150  003200  B4D8               	btfsc	status,2,c
  8151  003202  D7EF               	goto	l90
  8152  003204  0A07               	xorlw	7	; case 4
  8153  003206  B4D8               	btfsc	status,2,c
  8154  003208  D7EF               	goto	l91
  8155  00320A                     l88:
  8156                           
  8157                           ;Library_LCD_2.h: 120: Lcd_Cmd(data);
  8158  00320A  5008               	movf	Lcd_Out2@data,w,c
  8159  00320C  ECF5  F012         	call	_Lcd_Cmd
  8160                           
  8161                           ;Library_LCD_2.h: 121: while(*buffer)
  8162  003210  D009               	goto	l93
  8163  003212                     
  8164                           ;Library_LCD_2.h: 122: {
  8165                           ;Library_LCD_2.h: 123: Lcd_Chr_CP(*buffer);
  8166  003212  C005  FFD9         	movff	Lcd_Out2@buffer,fsr2l
  8167  003216  C006  FFDA         	movff	Lcd_Out2@buffer+1,fsr2h
  8168  00321A  50DF               	movf	indf2,w,c
  8169  00321C  ECCC  F011         	call	_Lcd_Chr_CP
  8170                           
  8171                           ;Library_LCD_2.h: 124: buffer++;
  8172  003220  4A05               	infsnz	Lcd_Out2@buffer,f,c
  8173  003222  2A06               	incf	Lcd_Out2@buffer+1,f,c
  8174  003224                     l93:
  8175  003224  C005  FFD9         	movff	Lcd_Out2@buffer,fsr2l
  8176  003228  C006  FFDA         	movff	Lcd_Out2@buffer+1,fsr2h
  8177  00322C  50DF               	movf	indf2,w,c
  8178  00322E  B4D8               	btfsc	status,2,c
  8179  003230  0012               	return	
  8180  003232  D7EF               	goto	l94
  8181  003234                     __end_of_Lcd_Out2:
  8182                           	opt stack 0
  8183                           tblptru	equ	0xFF8
  8184                           tblptrh	equ	0xFF7
  8185                           tblptrl	equ	0xFF6
  8186                           tablat	equ	0xFF5
  8187                           prodh	equ	0xFF4
  8188                           prodl	equ	0xFF3
  8189                           intcon	equ	0xFF2
  8190                           intcon2	equ	0xFF1
  8191                           intcon3	equ	0xFF0
  8192                           postinc0	equ	0xFEE
  8193                           wreg	equ	0xFE8
  8194                           indf2	equ	0xFDF
  8195                           postinc2	equ	0xFDE
  8196                           postdec2	equ	0xFDD
  8197                           fsr2h	equ	0xFDA
  8198                           fsr2l	equ	0xFD9
  8199                           status	equ	0xFD8
  8200                           
  8201 ;; *************** function _Lcd_Chr_CP *****************
  8202 ;; Defined at:
  8203 ;;		line 130 in file "Library_LCD_2.h"
  8204 ;; Parameters:    Size  Location     Type
  8205 ;;  data            1    wreg     unsigned char 
  8206 ;; Auto vars:     Size  Location     Type
  8207 ;;  data            1    2[COMRAM] unsigned char 
  8208 ;; Return value:  Size  Location     Type
  8209 ;;                  1    wreg      void 
  8210 ;; Registers used:
  8211 ;;		wreg, status,2, status,0
  8212 ;; Tracked objects:
  8213 ;;		On entry : 0/0
  8214 ;;		On exit  : 0/0
  8215 ;;		Unchanged: 0/0
  8216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8217 ;;      Params:         0       0       0       0       0       0       0       0       0
  8218 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8219 ;;      Temps:          2       0       0       0       0       0       0       0       0
  8220 ;;      Totals:         3       0       0       0       0       0       0       0       0
  8221 ;;Total ram usage:        3 bytes
  8222 ;; Hardware stack levels used:    1
  8223 ;; This function calls:
  8224 ;;		Nothing
  8225 ;; This function is called by:
  8226 ;;		_Lcd_Out2
  8227 ;;		_Lcd_Out
  8228 ;; This function uses a non-reentrant model
  8229 ;;
  8230                           
  8231                           	psect	text30
  8232  002398                     __ptext30:
  8233                           	opt stack 0
  8234  002398                     _Lcd_Chr_CP:
  8235                           	opt stack 29
  8236                           
  8237                           ;incstack = 0
  8238                           ;Lcd_Chr_CP@data stored from wreg
  8239  002398  6E03               	movwf	Lcd_Chr_CP@data,c
  8240                           
  8241                           ;Library_LCD_2.h: 131: PORTDbits.RD3 = 0; PORTDbits.RD1 = 1;
  8242  00239A  9683               	bcf	3971,3,c	;volatile
  8243  00239C  8283               	bsf	3971,1,c	;volatile
  8244                           
  8245                           ;Library_LCD_2.h: 132: PORTDbits.RD7 = (data & 0b10000000)>>7; PORTDbits.RD6 = (data & 0
      +                          b01000000)>>6;
  8246  00239E  6A01               	clrf	??_Lcd_Chr_CP& (0+255),c
  8247  0023A0  AE03               	btfss	Lcd_Chr_CP@data,7,c
  8248  0023A2  D001               	bra	u2665
  8249  0023A4  2A01               	incf	??_Lcd_Chr_CP& (0+255),f,c
  8250  0023A6                     u2665:
  8251  0023A6  0E01               	movlw	1
  8252  0023A8  1601               	andwf	??_Lcd_Chr_CP,f,c
  8253  0023AA  3201               	rrcf	??_Lcd_Chr_CP,f,c
  8254  0023AC  3201               	rrcf	??_Lcd_Chr_CP,f,c
  8255  0023AE  5083               	movf	3971,w,c	;volatile
  8256  0023B0  1801               	xorwf	??_Lcd_Chr_CP,w,c
  8257  0023B2  0B7F               	andlw	-129
  8258  0023B4  1801               	xorwf	??_Lcd_Chr_CP,w,c
  8259  0023B6  6E83               	movwf	3971,c	;volatile
  8260  0023B8  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  8261  0023BC  0E06               	movlw	6
  8262  0023BE  6E02               	movwf	(??_Lcd_Chr_CP+1)& (0+255),c
  8263  0023C0                     u2675:
  8264  0023C0  90D8               	bcf	status,0,c
  8265  0023C2  3201               	rrcf	??_Lcd_Chr_CP,f,c
  8266  0023C4  2E02               	decfsz	(??_Lcd_Chr_CP+1)& (0+255),f,c
  8267  0023C6  D7FC               	goto	u2675
  8268  0023C8  0E01               	movlw	1
  8269  0023CA  1601               	andwf	??_Lcd_Chr_CP,f,c
  8270  0023CC  3A01               	swapf	??_Lcd_Chr_CP,f,c
  8271  0023CE  4601               	rlncf	??_Lcd_Chr_CP,f,c
  8272  0023D0  4601               	rlncf	??_Lcd_Chr_CP,f,c
  8273  0023D2  5083               	movf	3971,w,c	;volatile
  8274  0023D4  1801               	xorwf	??_Lcd_Chr_CP,w,c
  8275  0023D6  0BBF               	andlw	-65
  8276  0023D8  1801               	xorwf	??_Lcd_Chr_CP,w,c
  8277  0023DA  6E83               	movwf	3971,c	;volatile
  8278                           
  8279                           ;Library_LCD_2.h: 133: PORTDbits.RD5 = (data & 0b00100000)>>5; PORTDbits.RD4 = (data & 0
      +                          b00010000)>>4;
  8280  0023DC  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  8281  0023E0  0E05               	movlw	5
  8282  0023E2  6E02               	movwf	(??_Lcd_Chr_CP+1)& (0+255),c
  8283  0023E4                     u2685:
  8284  0023E4  90D8               	bcf	status,0,c
  8285  0023E6  3201               	rrcf	??_Lcd_Chr_CP,f,c
  8286  0023E8  2E02               	decfsz	(??_Lcd_Chr_CP+1)& (0+255),f,c
  8287  0023EA  D7FC               	goto	u2685
  8288  0023EC  0E01               	movlw	1
  8289  0023EE  1601               	andwf	??_Lcd_Chr_CP,f,c
  8290  0023F0  3A01               	swapf	??_Lcd_Chr_CP,f,c
  8291  0023F2  4601               	rlncf	??_Lcd_Chr_CP,f,c
  8292  0023F4  5083               	movf	3971,w,c	;volatile
  8293  0023F6  1801               	xorwf	??_Lcd_Chr_CP,w,c
  8294  0023F8  0BDF               	andlw	-33
  8295  0023FA  1801               	xorwf	??_Lcd_Chr_CP,w,c
  8296  0023FC  6E83               	movwf	3971,c	;volatile
  8297  0023FE  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  8298  002402  3A01               	swapf	??_Lcd_Chr_CP,f,c
  8299  002404  0E0F               	movlw	15
  8300  002406  1601               	andwf	??_Lcd_Chr_CP,f,c
  8301  002408  0E01               	movlw	1
  8302  00240A  1601               	andwf	??_Lcd_Chr_CP,f,c
  8303  00240C  3A01               	swapf	??_Lcd_Chr_CP,f,c
  8304  00240E  5083               	movf	3971,w,c	;volatile
  8305  002410  1801               	xorwf	??_Lcd_Chr_CP,w,c
  8306  002412  0BEF               	andlw	-17
  8307  002414  1801               	xorwf	??_Lcd_Chr_CP,w,c
  8308  002416  6E83               	movwf	3971,c	;volatile
  8309                           
  8310                           ;Library_LCD_2.h: 134: _delay(10);
  8311  002418  0E03               	movlw	3
  8312  00241A                     u3807:
  8313  00241A  2EE8               	decfsz	wreg,f,c
  8314  00241C  D7FE               	bra	u3807
  8315  00241E  F000               	nop	
  8316                           
  8317                           ;Library_LCD_2.h: 135: PORTDbits.RD3 = 1; _delay((unsigned long)((5)*(48000000/4000000.0
      +                          ))); PORTDbits.RD3 = 0;
  8318  002420  8683               	bsf	3971,3,c	;volatile
  8319  002422  0E14               	movlw	20
  8320  002424                     u3817:
  8321  002424  2EE8               	decfsz	wreg,f,c
  8322  002426  D7FE               	bra	u3817
  8323  002428  9683               	bcf	3971,3,c	;volatile
  8324                           
  8325                           ;Library_LCD_2.h: 136: PORTDbits.RD7 = (data & 0b00001000)>>3; PORTDbits.RD6 = (data & 0
      +                          b00000100)>>2;
  8326  00242A  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  8327  00242E  90D8               	bcf	status,0,c
  8328  002430  3201               	rrcf	??_Lcd_Chr_CP,f,c
  8329  002432  90D8               	bcf	status,0,c
  8330  002434  3201               	rrcf	??_Lcd_Chr_CP,f,c
  8331  002436  90D8               	bcf	status,0,c
  8332  002438  3201               	rrcf	??_Lcd_Chr_CP,f,c
  8333  00243A  0E01               	movlw	1
  8334  00243C  1601               	andwf	??_Lcd_Chr_CP,f,c
  8335  00243E  3201               	rrcf	??_Lcd_Chr_CP,f,c
  8336  002440  3201               	rrcf	??_Lcd_Chr_CP,f,c
  8337  002442  5083               	movf	3971,w,c	;volatile
  8338  002444  1801               	xorwf	??_Lcd_Chr_CP,w,c
  8339  002446  0B7F               	andlw	-129
  8340  002448  1801               	xorwf	??_Lcd_Chr_CP,w,c
  8341  00244A  6E83               	movwf	3971,c	;volatile
  8342  00244C  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  8343  002450  90D8               	bcf	status,0,c
  8344  002452  3201               	rrcf	??_Lcd_Chr_CP,f,c
  8345  002454  90D8               	bcf	status,0,c
  8346  002456  3201               	rrcf	??_Lcd_Chr_CP,f,c
  8347  002458  0E01               	movlw	1
  8348  00245A  1601               	andwf	??_Lcd_Chr_CP,f,c
  8349  00245C  3A01               	swapf	??_Lcd_Chr_CP,f,c
  8350  00245E  4601               	rlncf	??_Lcd_Chr_CP,f,c
  8351  002460  4601               	rlncf	??_Lcd_Chr_CP,f,c
  8352  002462  5083               	movf	3971,w,c	;volatile
  8353  002464  1801               	xorwf	??_Lcd_Chr_CP,w,c
  8354  002466  0BBF               	andlw	-65
  8355  002468  1801               	xorwf	??_Lcd_Chr_CP,w,c
  8356  00246A  6E83               	movwf	3971,c	;volatile
  8357                           
  8358                           ;Library_LCD_2.h: 137: PORTDbits.RD5 = (data & 0b00000010)>>1; PORTDbits.RD4 = (data & 0
      +                          b00000001);
  8359  00246C  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  8360  002470  90D8               	bcf	status,0,c
  8361  002472  3201               	rrcf	??_Lcd_Chr_CP,f,c
  8362  002474  0E01               	movlw	1
  8363  002476  1601               	andwf	??_Lcd_Chr_CP,f,c
  8364  002478  3A01               	swapf	??_Lcd_Chr_CP,f,c
  8365  00247A  4601               	rlncf	??_Lcd_Chr_CP,f,c
  8366  00247C  5083               	movf	3971,w,c	;volatile
  8367  00247E  1801               	xorwf	??_Lcd_Chr_CP,w,c
  8368  002480  0BDF               	andlw	-33
  8369  002482  1801               	xorwf	??_Lcd_Chr_CP,w,c
  8370  002484  6E83               	movwf	3971,c	;volatile
  8371  002486  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  8372  00248A  0E01               	movlw	1
  8373  00248C  1601               	andwf	??_Lcd_Chr_CP,f,c
  8374  00248E  3A01               	swapf	??_Lcd_Chr_CP,f,c
  8375  002490  5083               	movf	3971,w,c	;volatile
  8376  002492  1801               	xorwf	??_Lcd_Chr_CP,w,c
  8377  002494  0BEF               	andlw	-17
  8378  002496  1801               	xorwf	??_Lcd_Chr_CP,w,c
  8379  002498  6E83               	movwf	3971,c	;volatile
  8380                           
  8381                           ;Library_LCD_2.h: 138: _delay(10);
  8382  00249A  0E03               	movlw	3
  8383  00249C                     u3827:
  8384  00249C  2EE8               	decfsz	wreg,f,c
  8385  00249E  D7FE               	bra	u3827
  8386  0024A0  F000               	nop	
  8387                           
  8388                           ;Library_LCD_2.h: 139: PORTDbits.RD3 = 1; _delay((unsigned long)((5)*(48000000/4000000.0
      +                          ))); PORTDbits.RD3 = 0;
  8389  0024A2  8683               	bsf	3971,3,c	;volatile
  8390  0024A4  0E14               	movlw	20
  8391  0024A6                     u3837:
  8392  0024A6  2EE8               	decfsz	wreg,f,c
  8393  0024A8  D7FE               	bra	u3837
  8394  0024AA  9683               	bcf	3971,3,c	;volatile
  8395                           
  8396                           ;Library_LCD_2.h: 140: _delay((unsigned long)((5)*(48000000/4000000.0))); _delay((unsign
      +                          ed long)((5500)*(48000000/4000000.0)));
  8397  0024AC  0E14               	movlw	20
  8398  0024AE                     u3847:
  8399  0024AE  2EE8               	decfsz	wreg,f,c
  8400  0024B0  D7FE               	bra	u3847
  8401  0024B2  0E56               	movlw	86
  8402  0024B4  6E01               	movwf	??_Lcd_Chr_CP& (0+255),c
  8403  0024B6  0EB6               	movlw	182
  8404  0024B8                     u3857:
  8405  0024B8  2EE8               	decfsz	wreg,f,c
  8406  0024BA  D7FE               	bra	u3857
  8407  0024BC  2E01               	decfsz	??_Lcd_Chr_CP& (0+255),f,c
  8408  0024BE  D7FC               	bra	u3857
  8409  0024C0  0012               	return		;funcret
  8410  0024C2                     __end_of_Lcd_Chr_CP:
  8411                           	opt stack 0
  8412                           tblptru	equ	0xFF8
  8413                           tblptrh	equ	0xFF7
  8414                           tblptrl	equ	0xFF6
  8415                           tablat	equ	0xFF5
  8416                           prodh	equ	0xFF4
  8417                           prodl	equ	0xFF3
  8418                           intcon	equ	0xFF2
  8419                           intcon2	equ	0xFF1
  8420                           intcon3	equ	0xFF0
  8421                           postinc0	equ	0xFEE
  8422                           wreg	equ	0xFE8
  8423                           indf2	equ	0xFDF
  8424                           postinc2	equ	0xFDE
  8425                           postdec2	equ	0xFDD
  8426                           fsr2h	equ	0xFDA
  8427                           fsr2l	equ	0xFD9
  8428                           status	equ	0xFD8
  8429                           
  8430 ;; *************** function _Lcd_Init *****************
  8431 ;; Defined at:
  8432 ;;		line 46 in file "Library_LCD_2.h"
  8433 ;; Parameters:    Size  Location     Type
  8434 ;;		None
  8435 ;; Auto vars:     Size  Location     Type
  8436 ;;  data            1    4[COMRAM] unsigned char 
  8437 ;; Return value:  Size  Location     Type
  8438 ;;                  1    wreg      void 
  8439 ;; Registers used:
  8440 ;;		wreg, status,2, status,0, cstack
  8441 ;; Tracked objects:
  8442 ;;		On entry : 0/0
  8443 ;;		On exit  : 0/0
  8444 ;;		Unchanged: 0/0
  8445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8446 ;;      Params:         0       0       0       0       0       0       0       0       0
  8447 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8448 ;;      Temps:          1       0       0       0       0       0       0       0       0
  8449 ;;      Totals:         2       0       0       0       0       0       0       0       0
  8450 ;;Total ram usage:        2 bytes
  8451 ;; Hardware stack levels used:    1
  8452 ;; Hardware stack levels required when called:    1
  8453 ;; This function calls:
  8454 ;;		_Lcd_Cmd
  8455 ;; This function is called by:
  8456 ;;		_main
  8457 ;; This function uses a non-reentrant model
  8458 ;;
  8459                           
  8460                           	psect	text31
  8461  00270E                     __ptext31:
  8462                           	opt stack 0
  8463  00270E                     _Lcd_Init:
  8464                           	opt stack 29
  8465                           
  8466                           ;Library_LCD_2.h: 47: unsigned char data;
  8467                           ;Library_LCD_2.h: 48: TRISDbits.TRISD7 = 0;
  8468                           
  8469                           ;incstack = 0
  8470  00270E  9E95               	bcf	3989,7,c	;volatile
  8471                           
  8472                           ;Library_LCD_2.h: 49: TRISDbits.TRISD6 = 0;
  8473  002710  9C95               	bcf	3989,6,c	;volatile
  8474                           
  8475                           ;Library_LCD_2.h: 50: TRISDbits.TRISD5 = 0;
  8476  002712  9A95               	bcf	3989,5,c	;volatile
  8477                           
  8478                           ;Library_LCD_2.h: 51: TRISDbits.TRISD4 = 0;
  8479  002714  9895               	bcf	3989,4,c	;volatile
  8480                           
  8481                           ;Library_LCD_2.h: 52: TRISDbits.TRISD3 = 0;
  8482  002716  9695               	bcf	3989,3,c	;volatile
  8483                           
  8484                           ;Library_LCD_2.h: 53: TRISDbits.TRISD1 = 0;
  8485  002718  9295               	bcf	3989,1,c	;volatile
  8486                           
  8487                           ;Library_LCD_2.h: 54: PORTDbits.RD7 = 0;
  8488  00271A  9E83               	bcf	3971,7,c	;volatile
  8489                           
  8490                           ;Library_LCD_2.h: 55: PORTDbits.RD6 = 0;
  8491  00271C  9C83               	bcf	3971,6,c	;volatile
  8492                           
  8493                           ;Library_LCD_2.h: 56: PORTDbits.RD5 = 0;
  8494  00271E  9A83               	bcf	3971,5,c	;volatile
  8495                           
  8496                           ;Library_LCD_2.h: 57: PORTDbits.RD4 = 0;
  8497  002720  9883               	bcf	3971,4,c	;volatile
  8498                           
  8499                           ;Library_LCD_2.h: 58: PORTDbits.RD3 = 0;
  8500  002722  9683               	bcf	3971,3,c	;volatile
  8501                           
  8502                           ;Library_LCD_2.h: 59: PORTDbits.RD1 = 0;
  8503  002724  9283               	bcf	3971,1,c	;volatile
  8504                           
  8505                           ;Library_LCD_2.h: 60: _delay((unsigned long)((5500)*(48000000/4000000.0)));
  8506  002726  0E56               	movlw	86
  8507  002728  6E04               	movwf	??_Lcd_Init& (0+255),c
  8508  00272A  0EB6               	movlw	182
  8509  00272C                     u3867:
  8510  00272C  2EE8               	decfsz	wreg,f,c
  8511  00272E  D7FE               	bra	u3867
  8512  002730  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  8513  002732  D7FC               	bra	u3867
  8514                           
  8515                           ;Library_LCD_2.h: 61: _delay((unsigned long)((5500)*(48000000/4000000.0)));
  8516  002734  0E56               	movlw	86
  8517  002736  6E04               	movwf	??_Lcd_Init& (0+255),c
  8518  002738  0EB6               	movlw	182
  8519  00273A                     u3877:
  8520  00273A  2EE8               	decfsz	wreg,f,c
  8521  00273C  D7FE               	bra	u3877
  8522  00273E  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  8523  002740  D7FC               	bra	u3877
  8524                           
  8525                           ;Library_LCD_2.h: 62: _delay((unsigned long)((5500)*(48000000/4000000.0)));
  8526  002742  0E56               	movlw	86
  8527  002744  6E04               	movwf	??_Lcd_Init& (0+255),c
  8528  002746  0EB6               	movlw	182
  8529  002748                     u3887:
  8530  002748  2EE8               	decfsz	wreg,f,c
  8531  00274A  D7FE               	bra	u3887
  8532  00274C  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  8533  00274E  D7FC               	bra	u3887
  8534                           
  8535                           ;Library_LCD_2.h: 63: _delay((unsigned long)((5500)*(48000000/4000000.0)));
  8536  002750  0E56               	movlw	86
  8537  002752  6E04               	movwf	??_Lcd_Init& (0+255),c
  8538  002754  0EB6               	movlw	182
  8539  002756                     u3897:
  8540  002756  2EE8               	decfsz	wreg,f,c
  8541  002758  D7FE               	bra	u3897
  8542  00275A  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  8543  00275C  D7FC               	bra	u3897
  8544                           
  8545                           ;Library_LCD_2.h: 64: _delay((unsigned long)((5500)*(48000000/4000000.0)));
  8546  00275E  0E56               	movlw	86
  8547  002760  6E04               	movwf	??_Lcd_Init& (0+255),c
  8548  002762  0EB6               	movlw	182
  8549  002764                     u3907:
  8550  002764  2EE8               	decfsz	wreg,f,c
  8551  002766  D7FE               	bra	u3907
  8552  002768  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  8553  00276A  D7FC               	bra	u3907
  8554                           
  8555                           ;Library_LCD_2.h: 65: _delay((unsigned long)((5500)*(48000000/4000000.0)));
  8556  00276C  0E56               	movlw	86
  8557  00276E  6E04               	movwf	??_Lcd_Init& (0+255),c
  8558  002770  0EB6               	movlw	182
  8559  002772                     u3917:
  8560  002772  2EE8               	decfsz	wreg,f,c
  8561  002774  D7FE               	bra	u3917
  8562  002776  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  8563  002778  D7FC               	bra	u3917
  8564                           
  8565                           ;Library_LCD_2.h: 66: for(data = 1; data < 4; data ++)
  8566  00277A  0E01               	movlw	1
  8567  00277C  6E05               	movwf	Lcd_Init@data,c
  8568  00277E  D01D               	goto	L7
  8569  002780                     l68:
  8570                           
  8571                           ;Library_LCD_2.h: 67: {
  8572                           ;Library_LCD_2.h: 68: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits
      +                          .RD4 = 1; PORTDbits.RD3 = 0;
  8573  002780  9E83               	bcf	3971,7,c	;volatile
  8574  002782  9C83               	bcf	3971,6,c	;volatile
  8575  002784  8A83               	bsf	3971,5,c	;volatile
  8576  002786  8883               	bsf	3971,4,c	;volatile
  8577  002788  9683               	bcf	3971,3,c	;volatile
  8578                           
  8579                           ;Library_LCD_2.h: 69: PORTDbits.RD1 = 0; PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits
      +                          .RD5 = 1; PORTDbits.RD4 = 1;
  8580  00278A  9283               	bcf	3971,1,c	;volatile
  8581  00278C  9E83               	bcf	3971,7,c	;volatile
  8582  00278E  9C83               	bcf	3971,6,c	;volatile
  8583  002790  8A83               	bsf	3971,5,c	;volatile
  8584  002792  8883               	bsf	3971,4,c	;volatile
  8585                           
  8586                           ;Library_LCD_2.h: 70: PORTDbits.RD3 = 1; PORTDbits.RD1 = 0;
  8587  002794  8683               	bsf	3971,3,c	;volatile
  8588  002796  9283               	bcf	3971,1,c	;volatile
  8589                           
  8590                           ;Library_LCD_2.h: 71: _delay((unsigned long)((5)*(48000000/4000000.0)));
  8591  002798  0E14               	movlw	20
  8592  00279A                     u3927:
  8593  00279A  2EE8               	decfsz	wreg,f,c
  8594  00279C  D7FE               	bra	u3927
  8595                           
  8596                           ;Library_LCD_2.h: 72: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits
      +                          .RD4 = 1; PORTDbits.RD3 = 0;
  8597  00279E  9E83               	bcf	3971,7,c	;volatile
  8598  0027A0  9C83               	bcf	3971,6,c	;volatile
  8599  0027A2  8A83               	bsf	3971,5,c	;volatile
  8600  0027A4  8883               	bsf	3971,4,c	;volatile
  8601  0027A6  9683               	bcf	3971,3,c	;volatile
  8602                           
  8603                           ;Library_LCD_2.h: 73: PORTDbits.RD1 = 0;
  8604  0027A8  9283               	bcf	3971,1,c	;volatile
  8605                           
  8606                           ;Library_LCD_2.h: 74: _delay((unsigned long)((5500)*(48000000/4000000.0)));
  8607  0027AA  0E56               	movlw	86
  8608  0027AC  6E04               	movwf	??_Lcd_Init& (0+255),c
  8609  0027AE  0EB6               	movlw	182
  8610  0027B0                     u3937:
  8611  0027B0  2EE8               	decfsz	wreg,f,c
  8612  0027B2  D7FE               	bra	u3937
  8613  0027B4  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  8614  0027B6  D7FC               	bra	u3937
  8615  0027B8  2A05               	incf	Lcd_Init@data,f,c
  8616  0027BA                     L7:
  8617  0027BA  0E03               	movlw	3
  8618  0027BC  6405               	cpfsgt	Lcd_Init@data,c
  8619  0027BE  D7E0               	goto	l68
  8620                           
  8621                           ;Library_LCD_2.h: 75: }
  8622                           ;Library_LCD_2.h: 76: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits
      +                          .RD4 = 0; PORTDbits.RD3 = 0; PORTDbits.RD1 = 0;
  8623  0027C0  9E83               	bcf	3971,7,c	;volatile
  8624  0027C2  9C83               	bcf	3971,6,c	;volatile
  8625  0027C4  8A83               	bsf	3971,5,c	;volatile
  8626  0027C6  9883               	bcf	3971,4,c	;volatile
  8627  0027C8  9683               	bcf	3971,3,c	;volatile
  8628  0027CA  9283               	bcf	3971,1,c	;volatile
  8629                           
  8630                           ;Library_LCD_2.h: 77: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits
      +                          .RD4 = 0; PORTDbits.RD3 = 1; PORTDbits.RD1 = 0;
  8631  0027CC  9E83               	bcf	3971,7,c	;volatile
  8632  0027CE  9C83               	bcf	3971,6,c	;volatile
  8633  0027D0  8A83               	bsf	3971,5,c	;volatile
  8634  0027D2  9883               	bcf	3971,4,c	;volatile
  8635  0027D4  8683               	bsf	3971,3,c	;volatile
  8636  0027D6  9283               	bcf	3971,1,c	;volatile
  8637                           
  8638                           ;Library_LCD_2.h: 78: _delay((unsigned long)((5)*(48000000/4000000.0)));
  8639  0027D8  0E14               	movlw	20
  8640  0027DA                     u3947:
  8641  0027DA  2EE8               	decfsz	wreg,f,c
  8642  0027DC  D7FE               	bra	u3947
  8643                           
  8644                           ;Library_LCD_2.h: 79: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits
      +                          .RD4 = 0; PORTDbits.RD3 = 0; PORTDbits.RD1 = 0;
  8645  0027DE  9E83               	bcf	3971,7,c	;volatile
  8646  0027E0  9C83               	bcf	3971,6,c	;volatile
  8647  0027E2  8A83               	bsf	3971,5,c	;volatile
  8648  0027E4  9883               	bcf	3971,4,c	;volatile
  8649  0027E6  9683               	bcf	3971,3,c	;volatile
  8650  0027E8  9283               	bcf	3971,1,c	;volatile
  8651                           
  8652                           ;Library_LCD_2.h: 80: _delay((unsigned long)((5500)*(48000000/4000000.0)));
  8653  0027EA  0E56               	movlw	86
  8654  0027EC  6E04               	movwf	??_Lcd_Init& (0+255),c
  8655  0027EE  0EB6               	movlw	182
  8656  0027F0                     u3957:
  8657  0027F0  2EE8               	decfsz	wreg,f,c
  8658  0027F2  D7FE               	bra	u3957
  8659  0027F4  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  8660  0027F6  D7FC               	bra	u3957
  8661                           
  8662                           ;Library_LCD_2.h: 81: data = 40; Lcd_Cmd(data);
  8663  0027F8  0E28               	movlw	40
  8664  0027FA  6E05               	movwf	Lcd_Init@data,c
  8665  0027FC  5005               	movf	Lcd_Init@data,w,c
  8666  0027FE  ECF5  F012         	call	_Lcd_Cmd
  8667                           
  8668                           ;Library_LCD_2.h: 82: data = 16; Lcd_Cmd(data);
  8669  002802  0E10               	movlw	16
  8670  002804  6E05               	movwf	Lcd_Init@data,c
  8671  002806  5005               	movf	Lcd_Init@data,w,c
  8672  002808  ECF5  F012         	call	_Lcd_Cmd
  8673                           
  8674                           ;Library_LCD_2.h: 83: data = 1; Lcd_Cmd(data);
  8675  00280C  0E01               	movlw	1
  8676  00280E  6E05               	movwf	Lcd_Init@data,c
  8677  002810  5005               	movf	Lcd_Init@data,w,c
  8678  002812  ECF5  F012         	call	_Lcd_Cmd
  8679                           
  8680                           ;Library_LCD_2.h: 84: data = 15; Lcd_Cmd(data);
  8681  002816  0E0F               	movlw	15
  8682  002818  6E05               	movwf	Lcd_Init@data,c
  8683  00281A  5005               	movf	Lcd_Init@data,w,c
  8684  00281C  ECF5  F012         	call	_Lcd_Cmd
  8685  002820  0012               	return		;funcret
  8686  002822                     __end_of_Lcd_Init:
  8687                           	opt stack 0
  8688                           tblptru	equ	0xFF8
  8689                           tblptrh	equ	0xFF7
  8690                           tblptrl	equ	0xFF6
  8691                           tablat	equ	0xFF5
  8692                           prodh	equ	0xFF4
  8693                           prodl	equ	0xFF3
  8694                           intcon	equ	0xFF2
  8695                           intcon2	equ	0xFF1
  8696                           intcon3	equ	0xFF0
  8697                           postinc0	equ	0xFEE
  8698                           wreg	equ	0xFE8
  8699                           indf2	equ	0xFDF
  8700                           postinc2	equ	0xFDE
  8701                           postdec2	equ	0xFDD
  8702                           fsr2h	equ	0xFDA
  8703                           fsr2l	equ	0xFD9
  8704                           status	equ	0xFD8
  8705                           
  8706 ;; *************** function _Lcd_Cmd *****************
  8707 ;; Defined at:
  8708 ;;		line 144 in file "Library_LCD_2.h"
  8709 ;; Parameters:    Size  Location     Type
  8710 ;;  data            1    wreg     unsigned char 
  8711 ;; Auto vars:     Size  Location     Type
  8712 ;;  data            1    2[COMRAM] unsigned char 
  8713 ;; Return value:  Size  Location     Type
  8714 ;;                  1    wreg      void 
  8715 ;; Registers used:
  8716 ;;		wreg, status,2, status,0
  8717 ;; Tracked objects:
  8718 ;;		On entry : 0/0
  8719 ;;		On exit  : 0/0
  8720 ;;		Unchanged: 0/0
  8721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8722 ;;      Params:         0       0       0       0       0       0       0       0       0
  8723 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8724 ;;      Temps:          2       0       0       0       0       0       0       0       0
  8725 ;;      Totals:         3       0       0       0       0       0       0       0       0
  8726 ;;Total ram usage:        3 bytes
  8727 ;; Hardware stack levels used:    1
  8728 ;; This function calls:
  8729 ;;		Nothing
  8730 ;; This function is called by:
  8731 ;;		_Lcd_Init
  8732 ;;		_Lcd_Out2
  8733 ;;		_main
  8734 ;;		_Lcd_Out
  8735 ;; This function uses a non-reentrant model
  8736 ;;
  8737                           
  8738                           	psect	text32
  8739  0025EA                     __ptext32:
  8740                           	opt stack 0
  8741  0025EA                     _Lcd_Cmd:
  8742                           	opt stack 29
  8743                           
  8744                           ;incstack = 0
  8745                           ;Lcd_Cmd@data stored from wreg
  8746  0025EA  6E03               	movwf	Lcd_Cmd@data,c
  8747                           
  8748                           ;Library_LCD_2.h: 145: PORTDbits.RD3 = 0; PORTDbits.RD1 = 0;
  8749  0025EC  9683               	bcf	3971,3,c	;volatile
  8750  0025EE  9283               	bcf	3971,1,c	;volatile
  8751                           
  8752                           ;Library_LCD_2.h: 146: PORTDbits.RD7 = (data & 0b10000000)>>7; PORTDbits.RD6 = (data & 0
      +                          b01000000)>>6;
  8753  0025F0  6A01               	clrf	??_Lcd_Cmd& (0+255),c
  8754  0025F2  AE03               	btfss	Lcd_Cmd@data,7,c
  8755  0025F4  D001               	bra	u2635
  8756  0025F6  2A01               	incf	??_Lcd_Cmd& (0+255),f,c
  8757  0025F8                     u2635:
  8758  0025F8  0E01               	movlw	1
  8759  0025FA  1601               	andwf	??_Lcd_Cmd,f,c
  8760  0025FC  3201               	rrcf	??_Lcd_Cmd,f,c
  8761  0025FE  3201               	rrcf	??_Lcd_Cmd,f,c
  8762  002600  5083               	movf	3971,w,c	;volatile
  8763  002602  1801               	xorwf	??_Lcd_Cmd,w,c
  8764  002604  0B7F               	andlw	-129
  8765  002606  1801               	xorwf	??_Lcd_Cmd,w,c
  8766  002608  6E83               	movwf	3971,c	;volatile
  8767  00260A  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  8768  00260E  0E06               	movlw	6
  8769  002610  6E02               	movwf	(??_Lcd_Cmd+1)& (0+255),c
  8770  002612                     u2645:
  8771  002612  90D8               	bcf	status,0,c
  8772  002614  3201               	rrcf	??_Lcd_Cmd,f,c
  8773  002616  2E02               	decfsz	(??_Lcd_Cmd+1)& (0+255),f,c
  8774  002618  D7FC               	goto	u2645
  8775  00261A  0E01               	movlw	1
  8776  00261C  1601               	andwf	??_Lcd_Cmd,f,c
  8777  00261E  3A01               	swapf	??_Lcd_Cmd,f,c
  8778  002620  4601               	rlncf	??_Lcd_Cmd,f,c
  8779  002622  4601               	rlncf	??_Lcd_Cmd,f,c
  8780  002624  5083               	movf	3971,w,c	;volatile
  8781  002626  1801               	xorwf	??_Lcd_Cmd,w,c
  8782  002628  0BBF               	andlw	-65
  8783  00262A  1801               	xorwf	??_Lcd_Cmd,w,c
  8784  00262C  6E83               	movwf	3971,c	;volatile
  8785                           
  8786                           ;Library_LCD_2.h: 147: PORTDbits.RD5 = (data & 0b00100000)>>5; PORTDbits.RD4 = (data & 0
      +                          b00010000)>>4;
  8787  00262E  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  8788  002632  0E05               	movlw	5
  8789  002634  6E02               	movwf	(??_Lcd_Cmd+1)& (0+255),c
  8790  002636                     u2655:
  8791  002636  90D8               	bcf	status,0,c
  8792  002638  3201               	rrcf	??_Lcd_Cmd,f,c
  8793  00263A  2E02               	decfsz	(??_Lcd_Cmd+1)& (0+255),f,c
  8794  00263C  D7FC               	goto	u2655
  8795  00263E  0E01               	movlw	1
  8796  002640  1601               	andwf	??_Lcd_Cmd,f,c
  8797  002642  3A01               	swapf	??_Lcd_Cmd,f,c
  8798  002644  4601               	rlncf	??_Lcd_Cmd,f,c
  8799  002646  5083               	movf	3971,w,c	;volatile
  8800  002648  1801               	xorwf	??_Lcd_Cmd,w,c
  8801  00264A  0BDF               	andlw	-33
  8802  00264C  1801               	xorwf	??_Lcd_Cmd,w,c
  8803  00264E  6E83               	movwf	3971,c	;volatile
  8804  002650  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  8805  002654  3A01               	swapf	??_Lcd_Cmd,f,c
  8806  002656  0E0F               	movlw	15
  8807  002658  1601               	andwf	??_Lcd_Cmd,f,c
  8808  00265A  0E01               	movlw	1
  8809  00265C  1601               	andwf	??_Lcd_Cmd,f,c
  8810  00265E  3A01               	swapf	??_Lcd_Cmd,f,c
  8811  002660  5083               	movf	3971,w,c	;volatile
  8812  002662  1801               	xorwf	??_Lcd_Cmd,w,c
  8813  002664  0BEF               	andlw	-17
  8814  002666  1801               	xorwf	??_Lcd_Cmd,w,c
  8815  002668  6E83               	movwf	3971,c	;volatile
  8816                           
  8817                           ;Library_LCD_2.h: 148: _delay(10);
  8818  00266A  0E03               	movlw	3
  8819  00266C                     u3967:
  8820  00266C  2EE8               	decfsz	wreg,f,c
  8821  00266E  D7FE               	bra	u3967
  8822  002670  F000               	nop	
  8823                           
  8824                           ;Library_LCD_2.h: 149: PORTDbits.RD3 = 1; _delay((unsigned long)((5)*(48000000/4000000.0
      +                          ))); PORTDbits.RD3 = 0;
  8825  002672  8683               	bsf	3971,3,c	;volatile
  8826  002674  0E14               	movlw	20
  8827  002676                     u3977:
  8828  002676  2EE8               	decfsz	wreg,f,c
  8829  002678  D7FE               	bra	u3977
  8830  00267A  9683               	bcf	3971,3,c	;volatile
  8831                           
  8832                           ;Library_LCD_2.h: 150: PORTDbits.RD7 = (data & 0b00001000)>>3; PORTDbits.RD6 = (data & 0
      +                          b00000100)>>2;
  8833  00267C  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  8834  002680  90D8               	bcf	status,0,c
  8835  002682  3201               	rrcf	??_Lcd_Cmd,f,c
  8836  002684  90D8               	bcf	status,0,c
  8837  002686  3201               	rrcf	??_Lcd_Cmd,f,c
  8838  002688  90D8               	bcf	status,0,c
  8839  00268A  3201               	rrcf	??_Lcd_Cmd,f,c
  8840  00268C  0E01               	movlw	1
  8841  00268E  1601               	andwf	??_Lcd_Cmd,f,c
  8842  002690  3201               	rrcf	??_Lcd_Cmd,f,c
  8843  002692  3201               	rrcf	??_Lcd_Cmd,f,c
  8844  002694  5083               	movf	3971,w,c	;volatile
  8845  002696  1801               	xorwf	??_Lcd_Cmd,w,c
  8846  002698  0B7F               	andlw	-129
  8847  00269A  1801               	xorwf	??_Lcd_Cmd,w,c
  8848  00269C  6E83               	movwf	3971,c	;volatile
  8849  00269E  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  8850  0026A2  90D8               	bcf	status,0,c
  8851  0026A4  3201               	rrcf	??_Lcd_Cmd,f,c
  8852  0026A6  90D8               	bcf	status,0,c
  8853  0026A8  3201               	rrcf	??_Lcd_Cmd,f,c
  8854  0026AA  0E01               	movlw	1
  8855  0026AC  1601               	andwf	??_Lcd_Cmd,f,c
  8856  0026AE  3A01               	swapf	??_Lcd_Cmd,f,c
  8857  0026B0  4601               	rlncf	??_Lcd_Cmd,f,c
  8858  0026B2  4601               	rlncf	??_Lcd_Cmd,f,c
  8859  0026B4  5083               	movf	3971,w,c	;volatile
  8860  0026B6  1801               	xorwf	??_Lcd_Cmd,w,c
  8861  0026B8  0BBF               	andlw	-65
  8862  0026BA  1801               	xorwf	??_Lcd_Cmd,w,c
  8863  0026BC  6E83               	movwf	3971,c	;volatile
  8864                           
  8865                           ;Library_LCD_2.h: 151: PORTDbits.RD5 = (data & 0b00000010)>>1; PORTDbits.RD4 = (data & 0
      +                          b00000001);
  8866  0026BE  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  8867  0026C2  90D8               	bcf	status,0,c
  8868  0026C4  3201               	rrcf	??_Lcd_Cmd,f,c
  8869  0026C6  0E01               	movlw	1
  8870  0026C8  1601               	andwf	??_Lcd_Cmd,f,c
  8871  0026CA  3A01               	swapf	??_Lcd_Cmd,f,c
  8872  0026CC  4601               	rlncf	??_Lcd_Cmd,f,c
  8873  0026CE  5083               	movf	3971,w,c	;volatile
  8874  0026D0  1801               	xorwf	??_Lcd_Cmd,w,c
  8875  0026D2  0BDF               	andlw	-33
  8876  0026D4  1801               	xorwf	??_Lcd_Cmd,w,c
  8877  0026D6  6E83               	movwf	3971,c	;volatile
  8878  0026D8  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  8879  0026DC  0E01               	movlw	1
  8880  0026DE  1601               	andwf	??_Lcd_Cmd,f,c
  8881  0026E0  3A01               	swapf	??_Lcd_Cmd,f,c
  8882  0026E2  5083               	movf	3971,w,c	;volatile
  8883  0026E4  1801               	xorwf	??_Lcd_Cmd,w,c
  8884  0026E6  0BEF               	andlw	-17
  8885  0026E8  1801               	xorwf	??_Lcd_Cmd,w,c
  8886  0026EA  6E83               	movwf	3971,c	;volatile
  8887                           
  8888                           ;Library_LCD_2.h: 152: _delay(10);
  8889  0026EC  0E03               	movlw	3
  8890  0026EE                     u3987:
  8891  0026EE  2EE8               	decfsz	wreg,f,c
  8892  0026F0  D7FE               	bra	u3987
  8893  0026F2  F000               	nop	
  8894                           
  8895                           ;Library_LCD_2.h: 153: PORTDbits.RD3 = 1; _delay((unsigned long)((5)*(48000000/4000000.0
      +                          ))); PORTDbits.RD3 = 0;
  8896  0026F4  8683               	bsf	3971,3,c	;volatile
  8897  0026F6  0E14               	movlw	20
  8898  0026F8                     u3997:
  8899  0026F8  2EE8               	decfsz	wreg,f,c
  8900  0026FA  D7FE               	bra	u3997
  8901  0026FC  9683               	bcf	3971,3,c	;volatile
  8902                           
  8903                           ;Library_LCD_2.h: 154: _delay((unsigned long)((5500)*(48000000/4000000.0)));
  8904  0026FE  0E56               	movlw	86
  8905  002700  6E01               	movwf	??_Lcd_Cmd& (0+255),c
  8906  002702  0EB6               	movlw	182
  8907  002704                     u4007:
  8908  002704  2EE8               	decfsz	wreg,f,c
  8909  002706  D7FE               	bra	u4007
  8910  002708  2E01               	decfsz	??_Lcd_Cmd& (0+255),f,c
  8911  00270A  D7FC               	bra	u4007
  8912  00270C  0012               	return		;funcret
  8913  00270E                     __end_of_Lcd_Cmd:
  8914                           	opt stack 0
  8915                           tblptru	equ	0xFF8
  8916                           tblptrh	equ	0xFF7
  8917                           tblptrl	equ	0xFF6
  8918                           tablat	equ	0xFF5
  8919                           prodh	equ	0xFF4
  8920                           prodl	equ	0xFF3
  8921                           intcon	equ	0xFF2
  8922                           intcon2	equ	0xFF1
  8923                           intcon3	equ	0xFF0
  8924                           postinc0	equ	0xFEE
  8925                           wreg	equ	0xFE8
  8926                           indf2	equ	0xFDF
  8927                           postinc2	equ	0xFDE
  8928                           postdec2	equ	0xFDD
  8929                           fsr2h	equ	0xFDA
  8930                           fsr2l	equ	0xFD9
  8931                           status	equ	0xFD8
  8932                           tblptru	equ	0xFF8
  8933                           tblptrh	equ	0xFF7
  8934                           tblptrl	equ	0xFF6
  8935                           tablat	equ	0xFF5
  8936                           prodh	equ	0xFF4
  8937                           prodl	equ	0xFF3
  8938                           intcon	equ	0xFF2
  8939                           intcon2	equ	0xFF1
  8940                           intcon3	equ	0xFF0
  8941                           postinc0	equ	0xFEE
  8942                           wreg	equ	0xFE8
  8943                           indf2	equ	0xFDF
  8944                           postinc2	equ	0xFDE
  8945                           postdec2	equ	0xFDD
  8946                           fsr2h	equ	0xFDA
  8947                           fsr2l	equ	0xFD9
  8948                           status	equ	0xFD8
  8949                           
  8950                           	psect	rparam
  8951  0000                     tblptru	equ	0xFF8
  8952                           tblptrh	equ	0xFF7
  8953                           tblptrl	equ	0xFF6
  8954                           tablat	equ	0xFF5
  8955                           prodh	equ	0xFF4
  8956                           prodl	equ	0xFF3
  8957                           intcon	equ	0xFF2
  8958                           intcon2	equ	0xFF1
  8959                           intcon3	equ	0xFF0
  8960                           postinc0	equ	0xFEE
  8961                           wreg	equ	0xFE8
  8962                           indf2	equ	0xFDF
  8963                           postinc2	equ	0xFDE
  8964                           postdec2	equ	0xFDD
  8965                           fsr2h	equ	0xFDA
  8966                           fsr2l	equ	0xFD9
  8967                           status	equ	0xFD8


Data Sizes:
    Strings     43
    Constant    145
    Data        0
    BSS         67
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     94      94
    BANK0           160     55     100
    BANK1           256    217     239
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> floor@expon(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 15
		 -> sin@coeff_a(CODE[15]), sin@coeff_b(CODE[12]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_4(CODE[12]), STR_3(CODE[9]), STR_2(CODE[10]), STR_1(CODE[12]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> buffer2(BANK1[20]), main@buffer1(BANK1[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Out2@buffer	PTR unsigned char  size(2) Largest target is 20
		 -> buffer2(BANK1[20]), main@buffer1(BANK1[16]), 


Critical Paths under _main in COMRAM

    _scale->___ftmul
    _fround->___ftmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    _floor->___altoft
    ___fttol->_scale
    ___altoft->___fttol
    _eval_poly->___ftmul
    ___wmul->___awdiv
    ___ftmul->___ftdiv
    ___ftadd->___wmul
    ___ftdiv->___ftadd
    ___lwtoft->___ftpack
    _Lcd_Out2->_Lcd_Chr_CP
    _Lcd_Out2->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___ftsub
    _cos->_sin
    _sin->___ftsub
    ___ftsub->_floor

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               219   219      0  142900
                                             53 BANK0      2     2      0
                                              0 BANK1    217   217      0
                            _Lcd_Cmd
                           _Lcd_Init
                           _Lcd_Out2
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                           ___lltoft
                           ___lwtoft
                             ___wmul
                     _configstandard
                                _cos
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             45    37      8   60654
                                             14 BANK0     39    31      8
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                7     4      3   13770
                                             62 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              10     7      3   13572
                                             62 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftadd (ARG)
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1664
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1820
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     455
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     598
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2765
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     767
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     618
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _cos                                                  6     3      3   55547
                                             27 BANK0      6     3      3
                            ___ftadd
                             ___ftge
                                _sin
 ---------------------------------------------------------------------------------
 (2) _sin                                                 13    10      3   49129
                                             14 BANK0     13    10      3
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                          _eval_poly
                              _floor
 ---------------------------------------------------------------------------------
 (3) _floor                                                8     5      3   10231
                                              0 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                7     2      5     360
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     556
                                             69 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6    1200
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    2758
                                             84 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           12     5      7   15507
                                             62 COMRAM    12     5      7
                            ___ftadd
                            ___ftdiv (ARG)
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    3351
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    6492
                                             47 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    5679
                                              8 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
                              _floor (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    5030
                                             20 COMRAM    12     6      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     349
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             15     9      6    4014
                                             32 COMRAM    15     9      6
                            ___ftadd (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _configstandard                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             3     0      3    2642
                                              8 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2544
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _Lcd_Out2                                             5     2      3    1141
                                              3 COMRAM     5     2      3
                         _Lcd_Chr_CP
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Chr_CP                                           3     3      0     176
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     314
                                              3 COMRAM     2     2      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     176
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Cmd
   _Lcd_Init
     _Lcd_Cmd
   _Lcd_Out2
     _Lcd_Chr_CP
     _Lcd_Cmd
   ___ftadd
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___ftneg (ARG)
     ___ftpack (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___ftdiv
     ___ftadd (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftpack (ARG)
     ___ftpack (ARG)
     ___lltoft (ARG)
       ___ftpack
     ___lwtoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___ftadd (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftdiv (ARG)
       ___ftadd (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftpack (ARG)
     ___lltoft (ARG)
       ___ftpack
     ___lwtoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___lltoft
     ___ftpack
   ___lwtoft
     ___ftpack
   ___wmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
   _configstandard
   _cos
     ___ftadd
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftge
     _sin
       ___ftadd
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
         _floor (ARG)
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftadd (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftdiv (ARG)
                   ___ftadd (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftneg (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftadd (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftneg (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftdiv (ARG)
                     ___ftadd (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___ftneg (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftadd
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftge
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftadd (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftdiv (ARG)
                 ___ftadd (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftadd (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftdiv (ARG)
                   ___ftadd (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftneg (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _frexp
       _eval_poly
         ___ftadd
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _floor
         ___altoft
           ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftadd (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftdiv (ARG)
                 ___ftadd (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftadd (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftdiv (ARG)
                   ___ftadd (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftneg (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___ftadd
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftge
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftadd (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftdiv (ARG)
                 ___ftadd (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _frexp
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftadd (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
       _floor (ARG)
         ___altoft
           ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftadd (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftdiv (ARG)
                 ___ftadd (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftadd (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftdiv (ARG)
                   ___ftadd (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftneg (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___ftadd
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftge
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftadd (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftdiv (ARG)
                 ___ftadd (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _frexp
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftadd (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     D9      EF       7       93.4%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     37      64       5       62.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5E      5E       1       98.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1B1      20        0.0%
DATA                 0      0     1B1       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri May 18 10:20:26 2018

           ___altoft@exp 005D            ___altoft@sign 005E                       l90 31E2  
                     l91 31E8                       l68 2780                       l93 3224  
                     l94 3212                       l86 31F0                       l87 31D6  
                     l88 320A                       l89 31DC             ___awdiv@sign 000C  
    ___wmul@multiplicand 0011              __CFG_BORV$3 000000             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
           ___ftadd@exp1 0020             ___ftadd@exp2 001F             ___ftadd@sign 001E  
                    l200 0B3A                      l201 0BA0                      l121 1424  
                    l130 1762                      l122 1438                      l203 0BC6  
                    l131 164A                      l204 0C06                      l124 163E  
                    l205 0CCE                      l125 1588                      l230 0EE2  
                    l222 0DFA                      l214 0D34                      l118 1560  
                    l231 0E4E                      l223 0DE4                      l119 140A  
                    l160 1A0A                      l240 0F9C                      l208 0C76  
                    l128 1642                      l161 1936                      l233 0F02  
                    l154 1FAE                      l242 10A0                      l234 0EEC  
                    l226 0E20                      l218 0DA0                      l251 115E  
                    l243 108A                      l227 0E0A                      l219 0DBA  
                    l171 08CC                      l164 19E6                      l260 123E  
                    l236 0F26                      l180 0932                      l172 08E8  
                    l157 207A                      l165 1B36                      l261 121E  
                    l253 117E                      l245 10CA                      l237 0F2A  
                    l270 130E                      l254 11A0                      l238 0F4C  
                    l182 0A02                      l174 0902                      l167 1BE6  
                    l271 1286                      l247 1106                      l239 107E  
                    l191 0A10                      l183 09EC                      l175 08FA  
                    l512 2CCA                      l360 30A6                      l256 11C2  
                    l192 0A14                      l184 09B4                      l513 2CC0  
                    l601 2E2C                      l257 11CA                      l193 0A52  
                    l610 2966                      l602 2E5C                      l450 2EF8  
                    l442 2EA0                      l258 11EE                      l515 2CFE  
                    l611 2998                      l451 2F06                      l443 2EB0  
                    l259 11F6                      l195 0A18                      l516 2CE8  
                    l612 29A8                      l196 10AA                      l188 0A1E  
                    l445 2ECE                      l197 0A66                      l518 2D26  
                    l614 29C0                      l446 2EC6                      l462 314A  
                    l198 0AA8                      l519 2D1C                      l543 210C  
                    l615 29D0                      l359 30B2                      l631 28C4  
                    l463 3154                      l455 3110                      l552 219C  
                    l608 293E                      l640 2904                      l632 28B4  
                    l480 24E0                      l464 3162                      l456 311C  
                    l625 32A8                      l449 2EEE                      l570 2210  
                    l482 24FE                      l458 3132                      l619 330E  
                    l571 2240                      l547 2136                      l483 2540  
                    l459 312A                      l580 2ABE                      l476 2DB6  
                    l492 25D2                      l484 2570                      l644 3378  
                    l557 2192                      l637 28E8                      l629 284E  
                    l493 25C6                      l566 21D0                      l558 2188  
                    l638 28DC                      l670 2F3E                      l486 25AE  
                    l590 235C                      l567 21C6                      l671 2F32  
                    l487 259E                      l591 234C                      l576 2A32  
                    l760 1D18                      l680 318A                      l584 2292  
                    l569 21F4                      l905 2C8C                      l913 2B2E  
                    l761 1D70                      l681 317E                      l578 2A5A  
                    l906 2C10                      l922 3028                      l914 2B20  
                    l762 1E5A                      l674 2F72                      l586 22BE  
                    l579 2A98                      l675 2F80                      l691 3246  
                    l587 22F8                      l916 2B48                      l684 31B2  
                    l692 323A                      l596 2380                      l588 2320  
                    l917 2BC2                      l685 31C0                      l597 2374  
                    l759 1C36             __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000  
                    _cos 2D50          ?_configstandard 0001                      _sin 1C0A  
           ___awmod@sign 0006              main@Voltage 01BD                      prod 000FF3  
                    wreg 000FE8             __CFG_LVP$OFF 000000              main@buffer1 01A1  
           ___ftdiv@cntr 002A             ___ftdiv@sign 002F             __CFG_WDT$OFF 000000  
                   l3415 0D38                     l2387 2E88                     l3451 0E0A  
                   l3443 0DE4                     l3605 1286                     ?_cos 007B  
                   l3535 110A                     l3609 130A                     l3475 0EEC  
                   l3395 0C50                     l3387 0C06                     l3723 1578  
                   l3733 15D8                     l3763 176E                     ?_sin 006E  
                   STR_1 089E                     STR_2 08AA                     STR_3 08B4  
                   STR_4 0892                     u2001 20DE                     u2030 20FE  
                   u2201 2926                     u2130 21A4                     u3010 2F42  
                   u2060 2128                     u2221 294E                     u2310 286C  
                   u2160 21D8                     u3040 318E                     u3200 0AE0  
                   u2090 2166                     u3130 0990                     u2411 2A42  
                   u2315 2864                     u3205 0AD6                     u2350 28EE  
                   u4007 2704                     u2600 2B3A                     u3320 0D70  
                   u3240 0BD8                     u3410 0F10                     u3250 0C18  
                   u2291 2832                     u1900 2CB2                     u2380 3050  
                   u2540 3136                     u3420 0F20                     u3510 1142  
                   u2391 2A1A                     u2480 2ED2                     u3280 0C50  
                   u2801 22A2                     u2635 25F8                     u1940 2D30  
                   u2388 3052                     u3380 0E2E                     u2645 2612  
                   u3630 1246                     u2655 2636                     u3640 1264  
                   u2665 23A6                     u2930 25D8                     u2675 23C0  
                   u2860 2386                     u3660 131E                     u3740 15D8  
                   u2685 23E4                     u2781 2276                     u3670 1338  
                   u3807 241A                     u1991 20CA                     u2960 1D14  
                   u3817 2424                     u2970 1D16                     u3907 2764  
                   u3827 249C                     u3917 2772                     u3837 24A6  
                   u3927 279A                     u3847 24AE                     u3937 27B0  
                   u3857 24B8                     u3777 136C                     u3947 27DA  
                   u3867 272C                     u3787 1426                     u3957 27F0  
                   u3877 273A                     u3797 1714                     u3967 266C  
                   u3887 2748                     u3977 2676                     u3897 2756  
                   u3987 26EE                     u3997 26F8                     _TMR1 000FCE  
                   _adc1 01D9                     _main 1346             ___ftpack@arg 0001  
                   cos@f 007B             ___ftpack@exp 0004                     fsr2h 000FDA  
                   indf2 000FDF                     fsr2l 000FD9                     sin@f 006E  
                   sin@y 0071                     prodh 000FF4                     prodl 000FF3  
                   start 0000            __CFG_IESO$OFF 000000             _sprintf$1613 007C  
        __end_of_Lcd_Cmd 270E            __CFG_MCLRE$ON 000000             ___ftmul@cntr 003D  
           ___param_bank 000000             ___ftmul@sign 003E               _Lcd_Chr_CP 2398  
           ___fttol@exp1 0054                    ??_cos 005F             ___fttol@lval 0050  
                  ??_sin 005F           Lcd_Out2@buffer 0005            __CFG_PLLDIV$2 000000  
         __CFG_CCP2MX$ON 000000                    ?_main 0001          __end_of___awdiv 2F10  
        __end_of___ftadd 2266                    _CCPR1 000FBE          __end_of___awmod 316C  
        __end_of___ftdiv 2AF0          __end_of___ftneg 331C          __end_of___lldiv 2F92  
        __end_of___ftmul 2A0A          ___awdiv@divisor 0009          __end_of___llmod 31D2  
        __end_of___ftsub 32D2          __end_of___fttol 2916          ___awdiv@counter 000B  
     __end_ofsin@coeff_a 0886       __end_ofsin@coeff_b 0892            __CFG_PWRT$OFF 000000  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
          __CFG_WRT3$OFF 000000             ___lltoft@exp 0011           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000          __end_of_dpowers 0829  
                  _floor 2AF0                    _frexp 300C                    _errno 00C2  
                  _scale 1802          __end_of_isdigit 3380             main@numTicks 019C  
          ___ftpack@sign 0005                    main@i 01D6     main@potenciaAparente 019E  
                  sin@x2 0077                    tablat 000FF5                    status 000FD8  
        __end_of_sprintf 1346           __CFG_ICPRT$OFF 000000           __CFG_PBADEN$ON 000000  
       __end_of_Lcd_Init 2822         __end_of_Lcd_Out2 3234          __initialization 3340  
          main@calculoFP 01C2             __end_of_main 1802                   ??_main 0095  
          ___fttol@sign1 004F            __activetblptr 000002     __size_of__tdiv_to_l_ 0132  
                 _ADCON1 000FC1                   ?_floor 0060                   ?_frexp 0001  
       __end_of___altoft 30FC         ___llmod@dividend 000E                   ?_scale 003F  
                 _ADRESH 000FC4                   _ADRESL 000FC3         ___awdiv@dividend 0007  
       __end_of___ftpack 2D50         __end_of___lltoft 3290         __end_of___lwtoft 3340  
              ??_Lcd_Cmd 0001           __CFG_XINST$OFF 000000         __end_of__powers_ 0850  
                 ___ftge 2DFC              ?_Lcd_Chr_CP 0001                   ___wmul 32D2  
              ??___awdiv 000B                ??___ftadd 001B           __CFG_STVREN$ON 000000  
              ??___awmod 0005                ??___ftdiv 0027                ??___ftneg 0004  
              ??___lldiv 0009                ??___ftmul 0036                ??___llmod 0016  
              ??___ftsub 005F                ??___fttol 004A                   _fround 1E68  
                 clear_0 3346                   clear_1 3352         ___awdiv@quotient 000D  
        ___awmod@divisor 0003          ___awmod@counter 0005                   floor@i 0063  
                 floor@x 0060    ___ftmul@f3_as_product 003A                ??_isdigit 0001  
                 sin@sgn 007A             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8                ??_sprintf 0076  
             __accesstop 0060  __end_of__initialization 3358               ___altoft@c 0055  
             ___ftadd@f1 0015               ___ftadd@f2 0018               ___ftge@ff1 0001  
             ___ftge@ff2 0004             eval_poly@res 0048            ___rparam_used 000001  
             ___ftdiv@f1 0021               ___ftdiv@f2 0024               ___ftdiv@f3 002B  
             ___ftneg@f1 0001               ___ftmul@f1 0030               ___ftmul@f2 0033  
             ___ftsub@f1 0068               ___ftsub@f2 006B               ___fttol@f1 0046  
         __pcstackCOMRAM 0001               ___lltoft@c 0009            __end_of_floor 2BD0  
          __end_of_frexp 3084            __end_of_scale 1C0A         ??_configstandard 0001  
             ___lwtoft@c 0009               __div_to_l_ 24C2                ?_Lcd_Init 0001  
              ?_Lcd_Out2 0004          __div_to_l_@exp1 000C                  ??_floor 005F  
        __div_to_l_@cntr 000B                  ??_frexp 0006                  ??_scale 0042  
        __div_to_l_@quot 0007             sprintf@width 008B      __size_of_Lcd_Chr_CP 012A  
             __pbssBANK0 0097               __pbssBANK1 01D9       __size_of_eval_poly 00D2  
          __div_to_l_@f1 0001            __div_to_l_@f2 0004                  ?___ftge 0001  
                ?___wmul 000F                ?___altoft 0055                  ?_fround 003F  
              ?___ftpack 0001                ?___lltoft 0009                ?___lwtoft 0009  
             ??_Lcd_Init 0004               ??_Lcd_Out2 0007       main@FactorPotencia 01BA  
        __CFG_VREGEN$OFF 000000                  _Lcd_Cmd 25EA        __end_of__npowers_ 0877  
                __Hparam 0000               _scale$1612 0042     main@numCiclosMuestro 01C0  
                __Lparam 0000          __size_of___ftge 0090                  ___awdiv 2E8C  
                ___ftadd 20BA                  ___awmod 30FC                  ___ftdiv 2A0A  
                ___ftneg 32F8                  ___lldiv 2F10          __size_of___wmul 0026  
                ___ftmul 2916                  ___llmod 316C                  ___ftsub 3290  
                ___fttol 2822             __psmallconst 0800               ??___altoft 0059  
                __pcinit 3340               ??___ftpack 0006        __end_of_eval_poly 2CA2  
        __size_of_fround 0252                  __ramtop 0800               ??___lltoft 000D  
                __ptext0 1346                  __ptext1 08BE                  __ptext2 1802  
                __ptext3 3362                  __ptext4 1E68                  __ptext5 30FC  
                __ptext6 2E8C                  __ptext7 2266                  __ptext8 24C2  
                __ptext9 3234                  _buffer1 00AB                  _buffer2 01DB  
                _buffer3 0097               ??___lwtoft 000C                _T0CONbits 000FD5  
              _T1CONbits 000FCD              ?__div_to_l_ 0001                  _dpowers 0801  
           __size_of_cos 00AC                  _isdigit 3362             __size_of_sin 025E  
       ___awmod@dividend 0001                  _sprintf 08BE                  _voltaje 00BF  
   end_of_initialization 3358            __Lmediumconst 0000          ___lldiv@divisor 0005  
        ___lldiv@counter 000D             ??_Lcd_Chr_CP 0001                Lcd_Out2@x 0004  
              Lcd_Out2@y 0007                  postdec2 000FDD                  postinc0 000FEE  
                postinc2 000FDE        main@PotenciaReal2 01C3           __tdiv_to_l_@f1 0001  
         __tdiv_to_l_@f2 0004            ??__tdiv_to_l_ 0007                _PORTBbits 000F81  
              _PORTDbits 000F83               main@FPprom 0100                _TRISAbits 000F92  
              _TRISBbits 000F93                _TRISDbits 000F95       __end_of_Lcd_Chr_CP 24C2  
            _CCP1CONbits 000FBD              ___ftdiv@exp 002E      __size_of__div_to_l_ 0128  
             main@sumIns 01B7              ___ftmul@exp 0039           __end_of___ftge 2E8C  
         __end_of___wmul 32F8         main@fppromtotal2 01CC           __end_of_fround 20BA  
             floor@expon 0066      start_initialization 3340               eval_poly@d 0042  
             eval_poly@n 0044               eval_poly@x 003F      __end_of__tdiv_to_l_ 2398  
            __end_of_cos 2DFC              __end_of_sin 1E68        __size_of_Lcd_Init 0114  
      __size_of_Lcd_Out2 0062               frexp@value 0001          ___llmod@divisor 0012  
        ___llmod@counter 0016                 ??___ftge 0007                 ??___wmul 0013  
       __CFG_LPT1OSC$OFF 000000                 ??_fround 0042            sprintf@tmpval 0085  
      __size_of___altoft 0078               fround@prec 0048        __size_of___ftpack 00AE  
      __size_of___lltoft 005C        __size_of___lwtoft 0024            __pcstackBANK0 0060  
          __pcstackBANK1 0100             _isdigit$1209 0002                 ?_Lcd_Cmd 0001  
            sprintf@flag 008D              sprintf@fval 008F               sin@coeff_a 0877  
             sin@coeff_b 0886              sprintf@prec 0092                _main$1609 01B4  
               ?___awdiv 0007                 ?___ftadd 0015                 ?___awmod 0001  
               ?___ftdiv 0021                 ?___ftneg 0001                 ?___lldiv 0001  
               ?___ftmul 0030                 ?___llmod 000E                 ?___ftsub 0068  
              __npowers_ 0850                 ?___fttol 0046              __tdiv_to_l_ 2266  
           ??__div_to_l_ 0007              __smallconst 0800                 ?_isdigit 0001  
              _eval_poly 2BD0    main@factorPotenciaNum 01C6  __size_of_configstandard 007A  
               ?_sprintf 006E           __size_of_floor 00E0           __size_of_frexp 0078  
         __size_of_scale 0408           ___wmul@product 0013                 _PIE1bits 000F9D  
               _PIR1bits 000F9E       __end_of__div_to_l_ 25EA         __CFG_WDTPS$32768 000000  
       main@PotenciaReal 0199             Lcd_Init@data 0005               _ADCON0bits 000FC2  
             _ADCON2bits 000FC0        ___wmul@multiplier 000F                main@delay 01D2  
             ?_eval_poly 003F             Lcd_Out2@data 0008                 _Lcd_Init 270E  
               _Lcd_Out2 31D2          main@fppromtotal 01C9              _INTCON2bits 000FF1  
            _INTCON3bits 000FF0         __size_of_Lcd_Cmd 0124                frexp@eptr 0004  
               __Hrparam 0000                 __Lrparam 0000         __size_of___awdiv 0084  
       __size_of___ftadd 01AC         __size_of___awmod 0070         __size_of___ftdiv 00E6  
       __size_of___ftneg 0024         __size_of___lldiv 0082                 ___altoft 3084  
       __size_of___ftmul 00F4                 _cos$1614 007E         __size_of___llmod 0066  
       __size_of___ftsub 0042         __size_of___fttol 00F4                 ___ftpack 2CA2  
            _fround$1610 0045              _fround$1611 0042                 ___lltoft 3234  
               ___lwtoft 331C               sprintf@exp 0089               sprintf@val 0081  
       __size_of_isdigit 001E           Lcd_Chr_CP@data 0003                 __ptext10 316C  
               __ptext11 2F10                 __ptext20 32D2                 __ptext12 2D50  
               __ptext21 2916                 __ptext13 1C0A                 __ptext30 2398  
               __ptext22 3290                 __ptext14 2AF0                 __ptext31 270E  
               __ptext23 20BA                 __ptext15 300C                 __ptext32 25EA  
               __ptext24 32F8                 __ptext16 2822                 __ptext25 2A0A  
               __ptext17 2DFC                 __ptext26 2F92                 __ptext18 3084  
               __ptext27 331C                 __ptext19 2BD0                 __ptext28 2CA2  
               __ptext29 31D2                 _sin$1615 0074                 __powers_ 0829  
       __size_of_sprintf 0A88              Lcd_Cmd@data 0003            __size_of_main 04BC  
               main@Amps 01CF                 main@Irms 01B1                 main@loop 01D8  
  __CFG_CPUDIV$OSC1_PLL2 000000               _INTCONbits 000FF2              ??_eval_poly 0046  
         _configstandard 2F92                 isdigit@c 0003                 scale@scl 0045  
              sprintf@ap 007F         __tdiv_to_l_@exp1 000F         __tdiv_to_l_@cntr 000E  
              sprintf@sp 006E         __tdiv_to_l_@quot 000A         ___lldiv@dividend 0001  
           ?__tdiv_to_l_ 0001                 sprintf@c 0094                 sprintf@f 0070  
 __end_of_configstandard 300C         ___lldiv@quotient 0009       __CFG_FOSC$HSPLL_HS 000000  
