

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri May 18 11:39:48 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    49                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    55                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    56                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    57  0000                     
    58                           ; Version 1.45
    59                           ; Generated 16/11/2017 GMT
    60                           ; 
    61                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    62                           ; All rights reserved.
    63                           ; 
    64                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    65                           ; 
    66                           ; Redistribution and use in source and binary forms, with or without modification, are
    67                           ; permitted provided that the following conditions are met:
    68                           ; 
    69                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    70                           ;        conditions and the following disclaimer.
    71                           ; 
    72                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    73                           ;        of conditions and the following disclaimer in the documentation and/or other
    74                           ;        materials provided with the distribution.
    75                           ; 
    76                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    77                           ;        software without specific prior written permission.
    78                           ; 
    79                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    80                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    81                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    82                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    83                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    84                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    85                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    86                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    87                           ; 
    88                           ; 
    89                           ; Code-generator required, PIC18F4550 Definitions
    90                           ; 
    91                           ; SFR Addresses
    92  0000                     
    93                           	psect	smallconst
    94  000800                     __psmallconst:
    95                           	opt stack 0
    96  000800  00                 	db	0
    97  000801                     _dpowers:
    98                           	opt stack 0
    99  000801  0001               	dw	1
   100  000803  0000               	dw	0
   101  000805  000A               	dw	10
   102  000807  0000               	dw	0
   103  000809  0064               	dw	100
   104  00080B  0000               	dw	0
   105  00080D  03E8               	dw	1000
   106  00080F  0000               	dw	0
   107  000811  2710               	dw	10000
   108  000813  0000               	dw	0
   109  000815  86A0               	dw	34464
   110  000817  0001               	dw	1
   111  000819  4240               	dw	16960
   112  00081B  000F               	dw	15
   113  00081D  9680               	dw	38528
   114  00081F  0098               	dw	152
   115  000821  E100               	dw	57600
   116  000823  05F5               	dw	1525
   117  000825  CA00               	dw	51712
   118  000827  3B9A               	dw	15258
   119  000829                     __end_of_dpowers:
   120                           	opt stack 0
   121  000829                     __powers_:
   122                           	opt stack 0
   123  000829  00                 	db	0
   124  00082A  80                 	db	128
   125  00082B  3F                 	db	63
   126  00082C  00                 	db	0
   127  00082D  20                 	db	32
   128  00082E  41                 	db	65
   129  00082F  00                 	db	0
   130  000830  C8                 	db	200
   131  000831  42                 	db	66
   132  000832  00                 	db	0
   133  000833  7A                 	db	122
   134  000834  44                 	db	68
   135  000835  40                 	db	64
   136  000836  1C                 	db	28
   137  000837  46                 	db	70
   138  000838  50                 	db	80
   139  000839  C3                 	db	195
   140  00083A  47                 	db	71
   141  00083B  24                 	db	36
   142  00083C  74                 	db	116
   143  00083D  49                 	db	73
   144  00083E  97                 	db	151
   145  00083F  18                 	db	24
   146  000840  4B                 	db	75
   147  000841  BC                 	db	188
   148  000842  BE                 	db	190
   149  000843  4C                 	db	76
   150  000844  6B                 	db	107
   151  000845  6E                 	db	110
   152  000846  4E                 	db	78
   153  000847  03                 	db	3
   154  000848  15                 	db	21
   155  000849  50                 	db	80
   156  00084A  79                 	db	121
   157  00084B  AD                 	db	173
   158  00084C  60                 	db	96
   159  00084D  F3                 	db	243
   160  00084E  49                 	db	73
   161  00084F  71                 	db	113
   162  000850                     __end_of__powers_:
   163                           	opt stack 0
   164  000850                     __npowers_:
   165                           	opt stack 0
   166  000850  00                 	db	0
   167  000851  80                 	db	128
   168  000852  3F                 	db	63
   169  000853  CD                 	db	205
   170  000854  CC                 	db	204
   171  000855  3D                 	db	61
   172  000856  D7                 	db	215
   173  000857  23                 	db	35
   174  000858  3C                 	db	60
   175  000859  12                 	db	18
   176  00085A  83                 	db	131
   177  00085B  3A                 	db	58
   178  00085C  B7                 	db	183
   179  00085D  D1                 	db	209
   180  00085E  38                 	db	56
   181  00085F  C6                 	db	198
   182  000860  27                 	db	39
   183  000861  37                 	db	55
   184  000862  38                 	db	56
   185  000863  86                 	db	134
   186  000864  35                 	db	53
   187  000865  C0                 	db	192
   188  000866  D6                 	db	214
   189  000867  33                 	db	51
   190  000868  CC                 	db	204
   191  000869  2B                 	db	43
   192  00086A  32                 	db	50
   193  00086B  70                 	db	112
   194  00086C  89                 	db	137
   195  00086D  30                 	db	48
   196  00086E  E7                 	db	231
   197  00086F  DB                 	db	219
   198  000870  2E                 	db	46
   199  000871  E5                 	db	229
   200  000872  3C                 	db	60
   201  000873  1E                 	db	30
   202  000874  42                 	db	66
   203  000875  A2                 	db	162
   204  000876  0D                 	db	13
   205  000877                     __end_of__npowers_:
   206                           	opt stack 0
   207  000877                     sin@coeff_a:
   208                           	opt stack 0
   209  000877  F4                 	db	244
   210  000878  4A                 	db	74
   211  000879  48                 	db	72
   212  00087A  95                 	db	149
   213  00087B  95                 	db	149
   214  00087C  C7                 	db	199
   215  00087D  C1                 	db	193
   216  00087E  DC                 	db	220
   217  00087F  45                 	db	69
   218  000880  DC                 	db	220
   219  000881  6D                 	db	109
   220  000882  C3                 	db	195
   221  000883  B3                 	db	179
   222  000884  33                 	db	51
   223  000885  40                 	db	64
   224  000886                     __end_ofsin@coeff_a:
   225                           	opt stack 0
   226  000886                     sin@coeff_b:
   227                           	opt stack 0
   228  000886  34                 	db	52
   229  000887  01                 	db	1
   230  000888  48                 	db	72
   231  000889  9D                 	db	157
   232  00088A  B0                 	db	176
   233  00088B  45                 	db	69
   234  00088C  00                 	db	0
   235  00088D  DA                 	db	218
   236  00088E  42                 	db	66
   237  00088F  00                 	db	0
   238  000890  80                 	db	128
   239  000891  3F                 	db	63
   240  000892                     __end_ofsin@coeff_b:
   241                           	opt stack 0
   242  0000                     _CCPR1	set	4030
   243  0000                     _PORTBbits	set	3969
   244  0000                     _TRISBbits	set	3987
   245  0000                     _TRISAbits	set	3986
   246  0000                     _PIR1bits	set	3998
   247  0000                     _T1CONbits	set	4045
   248  0000                     _INTCONbits	set	4082
   249  0000                     _PORTDbits	set	3971
   250  0000                     _TRISDbits	set	3989
   251  0000                     _CCP1CONbits	set	4029
   252  0000                     _ADRESL	set	4035
   253  0000                     _ADRESH	set	4036
   254  0000                     _ADCON2bits	set	4032
   255  0000                     _ADCON1	set	4033
   256  0000                     _ADCON0bits	set	4034
   257  0000                     _CCP1IF	set	31986
   258  000892                     STR_2:
   259  000892  63                 	db	99	;'c'
   260  000893  61                 	db	97	;'a'
   261  000894  72                 	db	114	;'r'
   262  000895  67                 	db	103	;'g'
   263  000896  61                 	db	97	;'a'
   264  000897  6E                 	db	110	;'n'
   265  000898  64                 	db	100	;'d'
   266  000899  6F                 	db	111	;'o'
   267  00089A  20                 	db	32
   268  00089B  25                 	db	37
   269  00089C  30                 	db	48	;'0'
   270  00089D  2E                 	db	46
   271  00089E  32                 	db	50	;'2'
   272  00089F  66                 	db	102	;'f'
   273  0008A0  00                 	db	0
   274  0008A1                     STR_1:
   275  0008A1  63                 	db	99	;'c'
   276  0008A2  61                 	db	97	;'a'
   277  0008A3  72                 	db	114	;'r'
   278  0008A4  67                 	db	103	;'g'
   279  0008A5  61                 	db	97	;'a'
   280  0008A6  6E                 	db	110	;'n'
   281  0008A7  64                 	db	100	;'d'
   282  0008A8  6F                 	db	111	;'o'
   283  0008A9  20                 	db	32
   284  0008AA  25                 	db	37
   285  0008AB  33                 	db	51	;'3'
   286  0008AC  64                 	db	100	;'d'
   287  0008AD  00                 	db	0
   288  0008AE                     STR_8:
   289  0008AE  25                 	db	37
   290  0008AF  30                 	db	48	;'0'
   291  0008B0  2E                 	db	46
   292  0008B1  32                 	db	50	;'2'
   293  0008B2  66                 	db	102	;'f'
   294  0008B3  56                 	db	86	;'V'
   295  0008B4  41                 	db	65	;'A'
   296  0008B5  52                 	db	82	;'R'
   297  0008B6  00                 	db	0
   298  0008B7                     STR_5:
   299  0008B7  70                 	db	112	;'p'
   300  0008B8  46                 	db	70	;'F'
   301  0008B9  3D                 	db	61	;'='
   302  0008BA  25                 	db	37
   303  0008BB  30                 	db	48	;'0'
   304  0008BC  2E                 	db	46
   305  0008BD  33                 	db	51	;'3'
   306  0008BE  66                 	db	102	;'f'
   307  0008BF  00                 	db	0
   308  0008C0                     STR_4:
   309  0008C0  63                 	db	99	;'c'
   310  0008C1  61                 	db	97	;'a'
   311  0008C2  72                 	db	114	;'r'
   312  0008C3  67                 	db	103	;'g'
   313  0008C4  61                 	db	97	;'a'
   314  0008C5  6E                 	db	110	;'n'
   315  0008C6  64                 	db	100	;'d'
   316  0008C7  70                 	db	112	;'p'
   317  0008C8  00                 	db	0
   318  0008C9                     STR_7:
   319  0008C9  25                 	db	37
   320  0008CA  30                 	db	48	;'0'
   321  0008CB  2E                 	db	46
   322  0008CC  32                 	db	50	;'2'
   323  0008CD  66                 	db	102	;'f'
   324  0008CE  56                 	db	86	;'V'
   325  0008CF  41                 	db	65	;'A'
   326  0008D0  00                 	db	0
   327  0008D1                     STR_3:
   328  0008D1  25                 	db	37
   329  0008D2  30                 	db	48	;'0'
   330  0008D3  2E                 	db	46
   331  0008D4  32                 	db	50	;'2'
   332  0008D5  66                 	db	102	;'f'
   333  0008D6  20                 	db	32
   334  0008D7  57                 	db	87	;'W'
   335  0008D8  00                 	db	0
   336  0000                     
   337                           ; #config settings
   338  0008D9  00                 	db	0	; dummy byte at the end
   339  0000                     
   340                           	psect	cinit
   341  003AE8                     __pcinit:
   342                           	opt stack 0
   343  003AE8                     start_initialization:
   344                           	opt stack 0
   345  003AE8                     __initialization:
   346                           	opt stack 0
   347                           
   348                           ; Clear objects allocated to BANK2 (20 bytes)
   349  003AE8  EE02  F000         	lfsr	0,__pbssBANK2
   350  003AEC  0E14               	movlw	20
   351  003AEE                     clear_0:
   352  003AEE  6AEE               	clrf	postinc0,c
   353  003AF0  06E8               	decf	wreg,f,c
   354  003AF2  E1FD               	bnz	clear_0
   355                           
   356                           ; Clear objects allocated to BANK1 (20 bytes)
   357  003AF4  EE01  F0DC         	lfsr	0,__pbssBANK1
   358  003AF8  0E14               	movlw	20
   359  003AFA                     clear_1:
   360  003AFA  6AEE               	clrf	postinc0,c
   361  003AFC  06E8               	decf	wreg,f,c
   362  003AFE  E1FD               	bnz	clear_1
   363                           
   364                           ; Clear objects allocated to BANK0 (22 bytes)
   365  003B00  EE00  F0D9         	lfsr	0,__pbssBANK0
   366  003B04  0E16               	movlw	22
   367  003B06                     clear_2:
   368  003B06  6AEE               	clrf	postinc0,c
   369  003B08  06E8               	decf	wreg,f,c
   370  003B0A  E1FD               	bnz	clear_2
   371                           
   372                           ; Clear objects allocated to COMRAM (25 bytes)
   373  003B0C  EE00  F03C         	lfsr	0,__pbssCOMRAM
   374  003B10  0E19               	movlw	25
   375  003B12                     clear_3:
   376  003B12  6AEE               	clrf	postinc0,c
   377  003B14  06E8               	decf	wreg,f,c
   378  003B16  E1FD               	bnz	clear_3
   379  003B18                     end_of_initialization:
   380                           	opt stack 0
   381  003B18                     __end_of__initialization:
   382                           	opt stack 0
   383  003B18  9055               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   384  003B1A  9255               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   385  003B1C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   386  003B1E  6EF8               	movwf	tblptru,c
   387  003B20  0100               	movlb	0
   388  003B22  EFAA  F009         	goto	_main	;jump to C main() function
   389                           tblptru	equ	0xFF8
   390                           postinc0	equ	0xFEE
   391                           wreg	equ	0xFE8
   392                           
   393                           	psect	bssCOMRAM
   394  00003C                     __pbssCOMRAM:
   395                           	opt stack 0
   396  00003C                     _voltaje:
   397                           	opt stack 0
   398  00003C                     	ds	3
   399  00003F                     _adc1:
   400                           	opt stack 0
   401  00003F                     	ds	2
   402  000041                     _buffer4:
   403                           	opt stack 0
   404  000041                     	ds	20
   405                           tblptru	equ	0xFF8
   406                           postinc0	equ	0xFEE
   407                           wreg	equ	0xFE8
   408                           
   409                           	psect	bssBANK0
   410  0000D9                     __pbssBANK0:
   411                           	opt stack 0
   412  0000D9                     _errno:
   413                           	opt stack 0
   414  0000D9                     	ds	2
   415  0000DB                     _buffer3:
   416                           	opt stack 0
   417  0000DB                     	ds	20
   418                           tblptru	equ	0xFF8
   419                           postinc0	equ	0xFEE
   420                           wreg	equ	0xFE8
   421                           
   422                           	psect	bssBANK1
   423  0001DC                     __pbssBANK1:
   424                           	opt stack 0
   425  0001DC                     _buffer2:
   426                           	opt stack 0
   427  0001DC                     	ds	20
   428                           tblptru	equ	0xFF8
   429                           postinc0	equ	0xFEE
   430                           wreg	equ	0xFE8
   431                           
   432                           	psect	bssBANK2
   433  000200                     __pbssBANK2:
   434                           	opt stack 0
   435  000200                     _buffer1:
   436                           	opt stack 0
   437  000200                     	ds	20
   438                           tblptru	equ	0xFF8
   439                           postinc0	equ	0xFEE
   440                           wreg	equ	0xFE8
   441                           
   442                           	psect	cstackBANK1
   443  000100                     __pcstackBANK1:
   444                           	opt stack 0
   445  000100                     main@FPprom:
   446                           	opt stack 0
   447                           
   448                           ; 153 bytes @ 0x0
   449  000100                     	ds	153
   450  000199                     main@numTicks:
   451                           	opt stack 0
   452                           
   453                           ; 2 bytes @ 0x99
   454  000199                     	ds	2
   455  00019B                     main@buffer1:
   456                           	opt stack 0
   457                           
   458                           ; 16 bytes @ 0x9B
   459  00019B                     	ds	16
   460  0001AB                     main@temp:
   461                           	opt stack 0
   462                           
   463                           ; 3 bytes @ 0xAB
   464  0001AB                     	ds	3
   465  0001AE                     main@Irms:
   466                           	opt stack 0
   467                           
   468                           ; 3 bytes @ 0xAE
   469  0001AE                     	ds	3
   470  0001B1                     main@FactorPotencia:
   471                           	opt stack 0
   472                           
   473                           ; 3 bytes @ 0xB1
   474  0001B1                     	ds	3
   475  0001B4                     main@factorPotenciaNum:
   476                           	opt stack 0
   477                           
   478                           ; 3 bytes @ 0xB4
   479  0001B4                     	ds	3
   480  0001B7                     main@Voltage:
   481                           	opt stack 0
   482                           
   483                           ; 3 bytes @ 0xB7
   484  0001B7                     	ds	3
   485  0001BA                     main@potenciaReactiva:
   486                           	opt stack 0
   487                           
   488                           ; 3 bytes @ 0xBA
   489  0001BA                     	ds	3
   490  0001BD                     main@delay:
   491                           	opt stack 0
   492                           
   493                           ; 4 bytes @ 0xBD
   494  0001BD                     	ds	4
   495  0001C1                     main@sumIns:
   496                           	opt stack 0
   497                           
   498                           ; 3 bytes @ 0xC1
   499  0001C1                     	ds	3
   500  0001C4                     main@fppromtotal:
   501                           	opt stack 0
   502                           
   503                           ; 3 bytes @ 0xC4
   504  0001C4                     	ds	3
   505  0001C7                     _main$1430:
   506                           	opt stack 0
   507                           
   508                           ; 3 bytes @ 0xC7
   509  0001C7                     	ds	3
   510  0001CA                     main@numCiclosMuestro:
   511                           	opt stack 0
   512                           
   513                           ; 2 bytes @ 0xCA
   514  0001CA                     	ds	2
   515  0001CC                     main@loop:
   516                           	opt stack 0
   517                           
   518                           ; 1 bytes @ 0xCC
   519  0001CC                     	ds	1
   520  0001CD                     main@calculoFP:
   521                           	opt stack 0
   522                           
   523                           ; 1 bytes @ 0xCD
   524  0001CD                     	ds	1
   525  0001CE                     main@fppromtotal2:
   526                           	opt stack 0
   527                           
   528                           ; 3 bytes @ 0xCE
   529  0001CE                     	ds	3
   530  0001D1                     main@Amps:
   531                           	opt stack 0
   532                           
   533                           ; 3 bytes @ 0xD1
   534  0001D1                     	ds	3
   535  0001D4                     main@potenciaAparente:
   536                           	opt stack 0
   537                           
   538                           ; 3 bytes @ 0xD4
   539  0001D4                     	ds	3
   540  0001D7                     main@i:
   541                           	opt stack 0
   542                           
   543                           ; 2 bytes @ 0xD7
   544  0001D7                     	ds	2
   545  0001D9                     main@PotenciaReal:
   546                           	opt stack 0
   547                           
   548                           ; 3 bytes @ 0xD9
   549  0001D9                     	ds	3
   550                           tblptru	equ	0xFF8
   551                           postinc0	equ	0xFEE
   552                           wreg	equ	0xFE8
   553                           
   554                           	psect	cstackBANK0
   555  000060                     __pcstackBANK0:
   556                           	opt stack 0
   557  000060                     ??_Lcd_Cmd:
   558  000060                     ??_Lcd_Chr_CP:
   559  000060                     ??_isdigit:
   560  000060                     ?___awmod:
   561                           	opt stack 0
   562  000060                     ?___ftpack:
   563                           	opt stack 0
   564  000060                     ?__tdiv_to_l_:
   565                           	opt stack 0
   566  000060                     ?__div_to_l_:
   567                           	opt stack 0
   568  000060                     ?___lldiv:
   569                           	opt stack 0
   570  000060                     ___awmod@dividend:
   571                           	opt stack 0
   572  000060                     __div_to_l_@f1:
   573                           	opt stack 0
   574  000060                     ___ftpack@arg:
   575                           	opt stack 0
   576  000060                     __tdiv_to_l_@f1:
   577                           	opt stack 0
   578  000060                     ___ftge@ff1:
   579                           	opt stack 0
   580  000060                     frexp@value:
   581                           	opt stack 0
   582  000060                     ___lldiv@dividend:
   583                           	opt stack 0
   584                           
   585                           ; 4 bytes @ 0x0
   586  000060                     	ds	1
   587  000061                     _isdigit$1019:
   588                           	opt stack 0
   589                           
   590                           ; 1 bytes @ 0x1
   591  000061                     	ds	1
   592  000062                     Lcd_Chr_CP@data:
   593                           	opt stack 0
   594  000062                     Lcd_Cmd@data:
   595                           	opt stack 0
   596  000062                     isdigit@c:
   597                           	opt stack 0
   598  000062                     ___awmod@divisor:
   599                           	opt stack 0
   600                           
   601                           ; 2 bytes @ 0x2
   602  000062                     	ds	1
   603  000063                     ??_Lcd_Init:
   604  000063                     Lcd_Out2@x:
   605                           	opt stack 0
   606  000063                     ___ftpack@exp:
   607                           	opt stack 0
   608  000063                     frexp@eptr:
   609                           	opt stack 0
   610  000063                     __div_to_l_@f2:
   611                           	opt stack 0
   612  000063                     __tdiv_to_l_@f2:
   613                           	opt stack 0
   614  000063                     ___ftge@ff2:
   615                           	opt stack 0
   616                           
   617                           ; 3 bytes @ 0x3
   618  000063                     	ds	1
   619  000064                     Lcd_Init@data:
   620                           	opt stack 0
   621  000064                     ___awmod@counter:
   622                           	opt stack 0
   623  000064                     ___ftpack@sign:
   624                           	opt stack 0
   625  000064                     Lcd_Out2@buffer:
   626                           	opt stack 0
   627  000064                     ___lldiv@divisor:
   628                           	opt stack 0
   629                           
   630                           ; 4 bytes @ 0x4
   631  000064                     	ds	1
   632  000065                     ??___ftpack:
   633  000065                     ??_frexp:
   634  000065                     ___awmod@sign:
   635                           	opt stack 0
   636                           
   637                           ; 1 bytes @ 0x5
   638  000065                     	ds	1
   639  000066                     ??__tdiv_to_l_:
   640  000066                     ??___ftge:
   641  000066                     ?___awdiv:
   642                           	opt stack 0
   643  000066                     Lcd_Out2@y:
   644                           	opt stack 0
   645  000066                     ___awdiv@dividend:
   646                           	opt stack 0
   647  000066                     __div_to_l_@quot:
   648                           	opt stack 0
   649                           
   650                           ; 4 bytes @ 0x6
   651  000066                     	ds	1
   652  000067                     Lcd_Out2@data:
   653                           	opt stack 0
   654                           
   655                           ; 1 bytes @ 0x7
   656  000067                     	ds	1
   657  000068                     ?___lltoft:
   658                           	opt stack 0
   659  000068                     ?___lwtoft:
   660                           	opt stack 0
   661  000068                     ___awdiv@divisor:
   662                           	opt stack 0
   663  000068                     ___lwtoft@c:
   664                           	opt stack 0
   665  000068                     ___lldiv@quotient:
   666                           	opt stack 0
   667  000068                     ___lltoft@c:
   668                           	opt stack 0
   669                           
   670                           ; 4 bytes @ 0x8
   671  000068                     	ds	1
   672  000069                     __tdiv_to_l_@quot:
   673                           	opt stack 0
   674                           
   675                           ; 4 bytes @ 0x9
   676  000069                     	ds	1
   677  00006A                     ___awdiv@counter:
   678                           	opt stack 0
   679  00006A                     __div_to_l_@cntr:
   680                           	opt stack 0
   681                           
   682                           ; 1 bytes @ 0xA
   683  00006A                     	ds	1
   684  00006B                     ___awdiv@sign:
   685                           	opt stack 0
   686  00006B                     __div_to_l_@exp1:
   687                           	opt stack 0
   688                           
   689                           ; 1 bytes @ 0xB
   690  00006B                     	ds	1
   691  00006C                     ??___lltoft:
   692  00006C                     ___lldiv@counter:
   693                           	opt stack 0
   694  00006C                     ___awdiv@quotient:
   695                           	opt stack 0
   696                           
   697                           ; 2 bytes @ 0xC
   698  00006C                     	ds	1
   699  00006D                     ?___llmod:
   700                           	opt stack 0
   701  00006D                     __tdiv_to_l_@cntr:
   702                           	opt stack 0
   703  00006D                     ___llmod@dividend:
   704                           	opt stack 0
   705                           
   706                           ; 4 bytes @ 0xD
   707  00006D                     	ds	1
   708  00006E                     ?___wmul:
   709                           	opt stack 0
   710  00006E                     __tdiv_to_l_@exp1:
   711                           	opt stack 0
   712  00006E                     ___wmul@multiplier:
   713                           	opt stack 0
   714                           
   715                           ; 2 bytes @ 0xE
   716  00006E                     	ds	2
   717  000070                     ___lltoft@exp:
   718                           	opt stack 0
   719  000070                     ___wmul@multiplicand:
   720                           	opt stack 0
   721                           
   722                           ; 2 bytes @ 0x10
   723  000070                     	ds	1
   724  000071                     ___llmod@divisor:
   725                           	opt stack 0
   726                           
   727                           ; 4 bytes @ 0x11
   728  000071                     	ds	1
   729  000072                     ___wmul@product:
   730                           	opt stack 0
   731                           
   732                           ; 2 bytes @ 0x12
   733  000072                     	ds	2
   734  000074                     ?___ftmul:
   735                           	opt stack 0
   736  000074                     ___ftmul@f1:
   737                           	opt stack 0
   738                           
   739                           ; 3 bytes @ 0x14
   740  000074                     	ds	1
   741  000075                     ___llmod@counter:
   742                           	opt stack 0
   743                           
   744                           ; 1 bytes @ 0x15
   745  000075                     	ds	2
   746  000077                     ___ftmul@f2:
   747                           	opt stack 0
   748                           
   749                           ; 3 bytes @ 0x17
   750  000077                     	ds	3
   751  00007A                     ??___ftmul:
   752                           
   753                           ; 1 bytes @ 0x1A
   754  00007A                     	ds	3
   755  00007D                     ___ftmul@exp:
   756                           	opt stack 0
   757                           
   758                           ; 1 bytes @ 0x1D
   759  00007D                     	ds	1
   760  00007E                     ___ftmul@f3_as_product:
   761                           	opt stack 0
   762                           
   763                           ; 3 bytes @ 0x1E
   764  00007E                     	ds	3
   765  000081                     ___ftmul@cntr:
   766                           	opt stack 0
   767                           
   768                           ; 1 bytes @ 0x21
   769  000081                     	ds	1
   770  000082                     ___ftmul@sign:
   771                           	opt stack 0
   772                           
   773                           ; 1 bytes @ 0x22
   774  000082                     	ds	1
   775  000083                     ?_fround:
   776                           	opt stack 0
   777  000083                     ?_scale:
   778                           	opt stack 0
   779  000083                     ?___ftneg:
   780                           	opt stack 0
   781  000083                     ___ftneg@f1:
   782                           	opt stack 0
   783                           
   784                           ; 3 bytes @ 0x23
   785  000083                     	ds	3
   786  000086                     _fround$1432:
   787                           	opt stack 0
   788  000086                     _scale$1433:
   789                           	opt stack 0
   790                           
   791                           ; 3 bytes @ 0x26
   792  000086                     	ds	3
   793  000089                     scale@scl:
   794                           	opt stack 0
   795  000089                     _fround$1431:
   796                           	opt stack 0
   797                           
   798                           ; 3 bytes @ 0x29
   799  000089                     	ds	1
   800  00008A                     ?___fttol:
   801                           	opt stack 0
   802  00008A                     ___fttol@f1:
   803                           	opt stack 0
   804                           
   805                           ; 3 bytes @ 0x2A
   806  00008A                     	ds	2
   807  00008C                     fround@prec:
   808                           	opt stack 0
   809                           
   810                           ; 1 bytes @ 0x2C
   811  00008C                     	ds	1
   812  00008D                     ?___ftadd:
   813                           	opt stack 0
   814  00008D                     ___ftadd@f1:
   815                           	opt stack 0
   816                           
   817                           ; 3 bytes @ 0x2D
   818  00008D                     	ds	1
   819  00008E                     ??___fttol:
   820                           
   821                           ; 1 bytes @ 0x2E
   822  00008E                     	ds	2
   823  000090                     ___ftadd@f2:
   824                           	opt stack 0
   825                           
   826                           ; 3 bytes @ 0x30
   827  000090                     	ds	3
   828  000093                     ??___ftadd:
   829  000093                     ___fttol@sign1:
   830                           	opt stack 0
   831                           
   832                           ; 1 bytes @ 0x33
   833  000093                     	ds	1
   834  000094                     ___fttol@lval:
   835                           	opt stack 0
   836                           
   837                           ; 4 bytes @ 0x34
   838  000094                     	ds	2
   839  000096                     ___ftadd@sign:
   840                           	opt stack 0
   841                           
   842                           ; 1 bytes @ 0x36
   843  000096                     	ds	1
   844  000097                     ___ftadd@exp2:
   845                           	opt stack 0
   846                           
   847                           ; 1 bytes @ 0x37
   848  000097                     	ds	1
   849  000098                     ___ftadd@exp1:
   850                           	opt stack 0
   851  000098                     ___fttol@exp1:
   852                           	opt stack 0
   853                           
   854                           ; 1 bytes @ 0x38
   855  000098                     	ds	1
   856  000099                     ?_eval_poly:
   857                           	opt stack 0
   858  000099                     ?___altoft:
   859                           	opt stack 0
   860  000099                     eval_poly@x:
   861                           	opt stack 0
   862  000099                     ___altoft@c:
   863                           	opt stack 0
   864                           
   865                           ; 4 bytes @ 0x39
   866  000099                     	ds	3
   867  00009C                     eval_poly@d:
   868                           	opt stack 0
   869                           
   870                           ; 2 bytes @ 0x3C
   871  00009C                     	ds	1
   872  00009D                     ??___altoft:
   873                           
   874                           ; 1 bytes @ 0x3D
   875  00009D                     	ds	1
   876  00009E                     eval_poly@n:
   877                           	opt stack 0
   878                           
   879                           ; 2 bytes @ 0x3E
   880  00009E                     	ds	2
   881  0000A0                     ??_eval_poly:
   882                           
   883                           ; 1 bytes @ 0x40
   884  0000A0                     	ds	1
   885  0000A1                     ___altoft@exp:
   886                           	opt stack 0
   887                           
   888                           ; 1 bytes @ 0x41
   889  0000A1                     	ds	1
   890  0000A2                     ___altoft@sign:
   891                           	opt stack 0
   892  0000A2                     eval_poly@res:
   893                           	opt stack 0
   894                           
   895                           ; 3 bytes @ 0x42
   896  0000A2                     	ds	1
   897  0000A3                     ?_floor:
   898                           	opt stack 0
   899  0000A3                     floor@x:
   900                           	opt stack 0
   901                           
   902                           ; 3 bytes @ 0x43
   903  0000A3                     	ds	3
   904  0000A6                     floor@i:
   905                           	opt stack 0
   906                           
   907                           ; 3 bytes @ 0x46
   908  0000A6                     	ds	3
   909  0000A9                     floor@expon:
   910                           	opt stack 0
   911                           
   912                           ; 2 bytes @ 0x49
   913  0000A9                     	ds	2
   914  0000AB                     ?___ftsub:
   915                           	opt stack 0
   916  0000AB                     ___ftsub@f1:
   917                           	opt stack 0
   918                           
   919                           ; 3 bytes @ 0x4B
   920  0000AB                     	ds	3
   921  0000AE                     ___ftsub@f2:
   922                           	opt stack 0
   923                           
   924                           ; 3 bytes @ 0x4E
   925  0000AE                     	ds	3
   926  0000B1                     ?_sprintf:
   927                           	opt stack 0
   928  0000B1                     ?___ftdiv:
   929                           	opt stack 0
   930  0000B1                     sprintf@sp:
   931                           	opt stack 0
   932  0000B1                     ___ftdiv@f1:
   933                           	opt stack 0
   934                           
   935                           ; 3 bytes @ 0x51
   936  0000B1                     	ds	2
   937  0000B3                     sprintf@f:
   938                           	opt stack 0
   939                           
   940                           ; 2 bytes @ 0x53
   941  0000B3                     	ds	1
   942  0000B4                     ___ftdiv@f2:
   943                           	opt stack 0
   944                           
   945                           ; 3 bytes @ 0x54
   946  0000B4                     	ds	3
   947  0000B7                     ??___ftdiv:
   948                           
   949                           ; 1 bytes @ 0x57
   950  0000B7                     	ds	1
   951  0000B8                     ??_sprintf:
   952                           
   953                           ; 1 bytes @ 0x58
   954  0000B8                     	ds	2
   955  0000BA                     ___ftdiv@cntr:
   956                           	opt stack 0
   957                           
   958                           ; 1 bytes @ 0x5A
   959  0000BA                     	ds	1
   960  0000BB                     ___ftdiv@f3:
   961                           	opt stack 0
   962                           
   963                           ; 3 bytes @ 0x5B
   964  0000BB                     	ds	3
   965  0000BE                     ___ftdiv@exp:
   966                           	opt stack 0
   967  0000BE                     _sprintf$1434:
   968                           	opt stack 0
   969                           
   970                           ; 3 bytes @ 0x5E
   971  0000BE                     	ds	1
   972  0000BF                     ___ftdiv@sign:
   973                           	opt stack 0
   974                           
   975                           ; 1 bytes @ 0x5F
   976  0000BF                     	ds	1
   977  0000C0                     ?_sqrt:
   978                           	opt stack 0
   979  0000C0                     ?_sin:
   980                           	opt stack 0
   981  0000C0                     sin@f:
   982                           	opt stack 0
   983  0000C0                     sqrt@a:
   984                           	opt stack 0
   985                           
   986                           ; 3 bytes @ 0x60
   987  0000C0                     	ds	1
   988  0000C1                     sprintf@ap:
   989                           	opt stack 0
   990                           
   991                           ; 2 bytes @ 0x61
   992  0000C1                     	ds	2
   993  0000C3                     ??_sqrt:
   994  0000C3                     sin@y:
   995                           	opt stack 0
   996  0000C3                     sprintf@tmpval:
   997                           	opt stack 0
   998                           
   999                           ; 4 bytes @ 0x63
  1000  0000C3                     	ds	3
  1001  0000C6                     sqrt@og:
  1002                           	opt stack 0
  1003  0000C6                     _sin$1436:
  1004                           	opt stack 0
  1005                           
  1006                           ; 3 bytes @ 0x66
  1007  0000C6                     	ds	1
  1008  0000C7                     sprintf@val:
  1009                           	opt stack 0
  1010                           
  1011                           ; 4 bytes @ 0x67
  1012  0000C7                     	ds	2
  1013  0000C9                     sin@x2:
  1014                           	opt stack 0
  1015  0000C9                     sqrt@z:
  1016                           	opt stack 0
  1017                           
  1018                           ; 3 bytes @ 0x69
  1019  0000C9                     	ds	2
  1020  0000CB                     sprintf@exp:
  1021                           	opt stack 0
  1022                           
  1023                           ; 2 bytes @ 0x6B
  1024  0000CB                     	ds	1
  1025  0000CC                     sin@sgn:
  1026                           	opt stack 0
  1027  0000CC                     sqrt@i:
  1028                           	opt stack 0
  1029                           
  1030                           ; 1 bytes @ 0x6C
  1031  0000CC                     	ds	1
  1032  0000CD                     ?_cos:
  1033                           	opt stack 0
  1034  0000CD                     sprintf@flag:
  1035                           	opt stack 0
  1036  0000CD                     cos@f:
  1037                           	opt stack 0
  1038  0000CD                     sqrt@q:
  1039                           	opt stack 0
  1040                           
  1041                           ; 3 bytes @ 0x6D
  1042  0000CD                     	ds	2
  1043  0000CF                     sprintf@width:
  1044                           	opt stack 0
  1045                           
  1046                           ; 2 bytes @ 0x6F
  1047  0000CF                     	ds	1
  1048  0000D0                     sqrt@x:
  1049                           	opt stack 0
  1050  0000D0                     _cos$1435:
  1051                           	opt stack 0
  1052                           
  1053                           ; 3 bytes @ 0x70
  1054  0000D0                     	ds	1
  1055  0000D1                     sprintf@fval:
  1056                           	opt stack 0
  1057                           
  1058                           ; 3 bytes @ 0x71
  1059  0000D1                     	ds	3
  1060  0000D4                     sprintf@prec:
  1061                           	opt stack 0
  1062                           
  1063                           ; 2 bytes @ 0x74
  1064  0000D4                     	ds	2
  1065  0000D6                     sprintf@c:
  1066                           	opt stack 0
  1067                           
  1068                           ; 1 bytes @ 0x76
  1069  0000D6                     	ds	1
  1070  0000D7                     ??_main:
  1071                           
  1072                           ; 1 bytes @ 0x77
  1073  0000D7                     	ds	2
  1074                           tblptru	equ	0xFF8
  1075                           postinc0	equ	0xFEE
  1076                           wreg	equ	0xFE8
  1077                           
  1078                           	psect	cstackCOMRAM
  1079  000001                     __pcstackCOMRAM:
  1080                           	opt stack 0
  1081  000001                     ?i2___ftpack:
  1082                           	opt stack 0
  1083  000001                     i2___ftpack@arg:
  1084                           	opt stack 0
  1085                           
  1086                           ; 3 bytes @ 0x0
  1087  000001                     	ds	3
  1088  000004                     i2___ftpack@exp:
  1089                           	opt stack 0
  1090                           
  1091                           ; 1 bytes @ 0x3
  1092  000004                     	ds	1
  1093  000005                     i2___ftpack@sign:
  1094                           	opt stack 0
  1095                           
  1096                           ; 1 bytes @ 0x4
  1097  000005                     	ds	1
  1098  000006                     ??i2___ftpack:
  1099                           
  1100                           ; 1 bytes @ 0x5
  1101  000006                     	ds	3
  1102  000009                     ?i2___lwtoft:
  1103                           	opt stack 0
  1104  000009                     i2___lwtoft@c:
  1105                           	opt stack 0
  1106                           
  1107                           ; 2 bytes @ 0x8
  1108  000009                     	ds	3
  1109  00000C                     ?i2___ftmul:
  1110                           	opt stack 0
  1111  00000C                     i2___ftmul@f1:
  1112                           	opt stack 0
  1113                           
  1114                           ; 3 bytes @ 0xB
  1115  00000C                     	ds	3
  1116  00000F                     i2___ftmul@f2:
  1117                           	opt stack 0
  1118                           
  1119                           ; 3 bytes @ 0xE
  1120  00000F                     	ds	3
  1121  000012                     ??i2___ftmul:
  1122                           
  1123                           ; 1 bytes @ 0x11
  1124  000012                     	ds	3
  1125  000015                     i2___ftmul@exp:
  1126                           	opt stack 0
  1127                           
  1128                           ; 1 bytes @ 0x14
  1129  000015                     	ds	1
  1130  000016                     i2___ftmul@f3_as_product:
  1131                           	opt stack 0
  1132                           
  1133                           ; 3 bytes @ 0x15
  1134  000016                     	ds	3
  1135  000019                     i2___ftmul@cntr:
  1136                           	opt stack 0
  1137                           
  1138                           ; 1 bytes @ 0x18
  1139  000019                     	ds	1
  1140  00001A                     i2___ftmul@sign:
  1141                           	opt stack 0
  1142                           
  1143                           ; 1 bytes @ 0x19
  1144  00001A                     	ds	1
  1145  00001B                     ?i2___ftdiv:
  1146                           	opt stack 0
  1147  00001B                     i2___ftdiv@f1:
  1148                           	opt stack 0
  1149                           
  1150                           ; 3 bytes @ 0x1A
  1151  00001B                     	ds	3
  1152  00001E                     i2___ftdiv@f2:
  1153                           	opt stack 0
  1154                           
  1155                           ; 3 bytes @ 0x1D
  1156  00001E                     	ds	3
  1157  000021                     ??i2___ftdiv:
  1158                           
  1159                           ; 1 bytes @ 0x20
  1160  000021                     	ds	3
  1161  000024                     i2___ftdiv@cntr:
  1162                           	opt stack 0
  1163                           
  1164                           ; 1 bytes @ 0x23
  1165  000024                     	ds	1
  1166  000025                     i2___ftdiv@f3:
  1167                           	opt stack 0
  1168                           
  1169                           ; 3 bytes @ 0x24
  1170  000025                     	ds	3
  1171  000028                     i2___ftdiv@exp:
  1172                           	opt stack 0
  1173                           
  1174                           ; 1 bytes @ 0x27
  1175  000028                     	ds	1
  1176  000029                     i2___ftdiv@sign:
  1177                           	opt stack 0
  1178                           
  1179                           ; 1 bytes @ 0x28
  1180  000029                     	ds	1
  1181  00002A                     ??_comparar:
  1182                           
  1183                           ; 1 bytes @ 0x29
  1184  00002A                     	ds	18
  1185                           tblptru	equ	0xFF8
  1186                           postinc0	equ	0xFEE
  1187                           wreg	equ	0xFE8
  1188                           
  1189 ;;
  1190 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1191 ;;
  1192 ;; *************** function _main *****************
  1193 ;; Defined at:
  1194 ;;		line 118 in file "main_014_Practice_CCP Comparacion_ADC.c"
  1195 ;; Parameters:    Size  Location     Type
  1196 ;;		None
  1197 ;; Auto vars:     Size  Location     Type
  1198 ;;  i               2  215[BANK1 ] int 
  1199 ;;  Amps            3  209[BANK1 ] float 
  1200 ;;  Voltage         3  183[BANK1 ] float 
  1201 ;;  potenciaApar    3  212[BANK1 ] float 
  1202 ;;  potenciaReac    3  186[BANK1 ] float 
  1203 ;;  temp            3  171[BANK1 ] float 
  1204 ;;  FPprom        153    0[BANK1 ] float [51]
  1205 ;;  buffer1        16  155[BANK1 ] unsigned char [16]
  1206 ;;  delay           4  189[BANK1 ] unsigned long 
  1207 ;;  PotenciaReal    3  217[BANK1 ] float 
  1208 ;;  fppromtotal2    3  206[BANK1 ] float 
  1209 ;;  fppromtotal     3  196[BANK1 ] float 
  1210 ;;  sumIns          3  193[BANK1 ] float 
  1211 ;;  factorPotenc    3  180[BANK1 ] float 
  1212 ;;  FactorPotenc    3  177[BANK1 ] float 
  1213 ;;  Irms            3  174[BANK1 ] float 
  1214 ;;  numCiclosMue    2  202[BANK1 ] unsigned int 
  1215 ;;  numTicks        2  153[BANK1 ] unsigned int 
  1216 ;;  calculoFP       1  205[BANK1 ] unsigned char 
  1217 ;;  loop            1  204[BANK1 ] unsigned char 
  1218 ;; Return value:  Size  Location     Type
  1219 ;;                  1    wreg      void 
  1220 ;; Registers used:
  1221 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1222 ;; Tracked objects:
  1223 ;;		On entry : 0/0
  1224 ;;		On exit  : 0/0
  1225 ;;		Unchanged: 0/0
  1226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1227 ;;      Params:         0       0       0       0       0       0       0       0       0
  1228 ;;      Locals:         0       0     220       0       0       0       0       0       0
  1229 ;;      Temps:          0       2       0       0       0       0       0       0       0
  1230 ;;      Totals:         0       2     220       0       0       0       0       0       0
  1231 ;;Total ram usage:      222 bytes
  1232 ;; Hardware stack levels required when called:    8
  1233 ;; This function calls:
  1234 ;;		_Lcd_Cmd
  1235 ;;		_Lcd_Init
  1236 ;;		_Lcd_Out2
  1237 ;;		___ftadd
  1238 ;;		___ftdiv
  1239 ;;		___ftmul
  1240 ;;		___ftneg
  1241 ;;		___lltoft
  1242 ;;		___lwtoft
  1243 ;;		___wmul
  1244 ;;		_configstandard
  1245 ;;		_cos
  1246 ;;		_sprintf
  1247 ;;		_sqrt
  1248 ;; This function is called by:
  1249 ;;		Startup code after reset
  1250 ;; This function uses a non-reentrant model
  1251 ;;
  1252                           
  1253                           	psect	text0
  1254  001354                     __ptext0:
  1255                           	opt stack 0
  1256  001354                     _main:
  1257                           	opt stack 23
  1258                           
  1259                           ;main_014_Practice_CCP Comparacion_ADC.c: 120: configstandard();
  1260                           
  1261                           ;incstack = 0
  1262  001354  EC31  F01D         	call	_configstandard	;wreg free
  1263                           
  1264                           ;main_014_Practice_CCP Comparacion_ADC.c: 122: TRISAbits.RA0 = 1;
  1265  001358  8092               	bsf	3986,0,c	;volatile
  1266                           
  1267                           ;main_014_Practice_CCP Comparacion_ADC.c: 124: TRISBbits.RB0=1;
  1268  00135A  8093               	bsf	3987,0,c	;volatile
  1269                           
  1270                           ;main_014_Practice_CCP Comparacion_ADC.c: 125: TRISBbits.RB1=1;
  1271  00135C  8293               	bsf	3987,1,c	;volatile
  1272                           
  1273                           ;main_014_Practice_CCP Comparacion_ADC.c: 128: unsigned char buffer1[16];
  1274                           ;main_014_Practice_CCP Comparacion_ADC.c: 131: Lcd_Init();
  1275  00135E  EC3C  F013         	call	_Lcd_Init	;wreg free
  1276                           
  1277                           ;main_014_Practice_CCP Comparacion_ADC.c: 132: Lcd_Cmd(1);
  1278  001362  0E01               	movlw	1
  1279  001364  EC10  F015         	call	_Lcd_Cmd
  1280                           
  1281                           ;main_014_Practice_CCP Comparacion_ADC.c: 133: Lcd_Cmd(12);
  1282  001368  0E0C               	movlw	12
  1283  00136A  EC10  F015         	call	_Lcd_Cmd
  1284                           
  1285                           ;main_014_Practice_CCP Comparacion_ADC.c: 134: _delay((unsigned long)((100)*(48000000/40
      +                          00.0)));
  1286  00136E  0E07               	movlw	7
  1287  001370  0100               	movlb	0	; () banked
  1288  001372  6FD8               	movwf	(??_main+1)& (0+255),b
  1289  001374  0E17               	movlw	23
  1290  001376  6FD7               	movwf	??_main& (0+255),b
  1291  001378  0E6A               	movlw	106
  1292  00137A                     u4257:
  1293  00137A  2EE8               	decfsz	wreg,f,c
  1294  00137C  D7FE               	bra	u4257
  1295  00137E  2FD7               	decfsz	??_main& (0+255),f,b
  1296  001380  D7FC               	bra	u4257
  1297  001382  2FD8               	decfsz	(??_main+1)& (0+255),f,b
  1298  001384  D7FA               	bra	u4257
  1299  001386  F000               	nop	
  1300                           
  1301                           ;main_014_Practice_CCP Comparacion_ADC.c: 136: ADCON2bits.ADCS=110;
  1302  001388  50C0               	movf	4032,w,c	;volatile
  1303  00138A  0BF8               	andlw	-8
  1304  00138C  0906               	iorlw	6
  1305  00138E  6EC0               	movwf	4032,c	;volatile
  1306                           
  1307                           ;main_014_Practice_CCP Comparacion_ADC.c: 137: ADCON2bits.ACQT=010;
  1308  001390  96C0               	bcf	4032,3,c	;volatile
  1309  001392  98C0               	bcf	4032,4,c	;volatile
  1310  001394  9AC0               	bcf	4032,5,c	;volatile
  1311                           
  1312                           ;main_014_Practice_CCP Comparacion_ADC.c: 138: float sumIns=0;
  1313  001396  0E00               	movlw	0
  1314  001398  0101               	movlb	1	; () banked
  1315  00139A  6FC1               	movwf	main@sumIns& (0+255),b
  1316  00139C  0E00               	movlw	0
  1317  00139E  6FC2               	movwf	(main@sumIns+1)& (0+255),b
  1318  0013A0  0E00               	movlw	0
  1319  0013A2  6FC3               	movwf	(main@sumIns+2)& (0+255),b
  1320                           
  1321                           ; BSR set to: 1
  1322                           ;main_014_Practice_CCP Comparacion_ADC.c: 139: float Irms=0;
  1323  0013A4  0E00               	movlw	0
  1324  0013A6  6FAE               	movwf	main@Irms& (0+255),b
  1325  0013A8  0E00               	movlw	0
  1326  0013AA  6FAF               	movwf	(main@Irms+1)& (0+255),b
  1327  0013AC  0E00               	movlw	0
  1328  0013AE  6FB0               	movwf	(main@Irms+2)& (0+255),b
  1329                           
  1330                           ; BSR set to: 1
  1331                           ;main_014_Practice_CCP Comparacion_ADC.c: 140: unsigned int numCiclosMuestro=0;
  1332  0013B0  0E00               	movlw	0
  1333  0013B2  6FCB               	movwf	(main@numCiclosMuestro+1)& (0+255),b
  1334  0013B4  0E00               	movlw	0
  1335  0013B6  6FCA               	movwf	main@numCiclosMuestro& (0+255),b
  1336                           
  1337                           ; BSR set to: 1
  1338                           ;main_014_Practice_CCP Comparacion_ADC.c: 141: float PotenciaReal=0;
  1339  0013B8  0E00               	movlw	0
  1340  0013BA  6FD9               	movwf	main@PotenciaReal& (0+255),b
  1341  0013BC  0E00               	movlw	0
  1342  0013BE  6FDA               	movwf	(main@PotenciaReal+1)& (0+255),b
  1343  0013C0  0E00               	movlw	0
  1344  0013C2  6FDB               	movwf	(main@PotenciaReal+2)& (0+255),b
  1345                           
  1346                           ; BSR set to: 1
  1347                           ;main_014_Practice_CCP Comparacion_ADC.c: 142: float FactorPotencia=0;
  1348  0013C4  0E00               	movlw	0
  1349  0013C6  6FB1               	movwf	main@FactorPotencia& (0+255),b
  1350  0013C8  0E00               	movlw	0
  1351  0013CA  6FB2               	movwf	(main@FactorPotencia+1)& (0+255),b
  1352  0013CC  0E00               	movlw	0
  1353  0013CE  6FB3               	movwf	(main@FactorPotencia+2)& (0+255),b
  1354                           
  1355                           ; BSR set to: 1
  1356                           ;main_014_Practice_CCP Comparacion_ADC.c: 143: double factorPotenciaNum=0;
  1357  0013D0  0E00               	movlw	0
  1358  0013D2  6FB4               	movwf	main@factorPotenciaNum& (0+255),b
  1359  0013D4  0E00               	movlw	0
  1360  0013D6  6FB5               	movwf	(main@factorPotenciaNum+1)& (0+255),b
  1361  0013D8  0E00               	movlw	0
  1362  0013DA  6FB6               	movwf	(main@factorPotenciaNum+2)& (0+255),b
  1363                           
  1364                           ; BSR set to: 1
  1365                           ;main_014_Practice_CCP Comparacion_ADC.c: 144: unsigned char calculoFP=0;
  1366  0013DC  0E00               	movlw	0
  1367  0013DE  6FCD               	movwf	main@calculoFP& (0+255),b
  1368                           
  1369                           ; BSR set to: 1
  1370                           ;main_014_Practice_CCP Comparacion_ADC.c: 145: unsigned int numTicks=0;
  1371  0013E0  0E00               	movlw	0
  1372  0013E2  6F9A               	movwf	(main@numTicks+1)& (0+255),b
  1373  0013E4  0E00               	movlw	0
  1374  0013E6  6F99               	movwf	main@numTicks& (0+255),b
  1375                           
  1376                           ; BSR set to: 1
  1377                           ;main_014_Practice_CCP Comparacion_ADC.c: 146: unsigned long long delay=0;
  1378  0013E8  0E00               	movlw	0
  1379  0013EA  6FBD               	movwf	main@delay& (0+255),b
  1380  0013EC  0E00               	movlw	0
  1381  0013EE  6FBE               	movwf	(main@delay+1)& (0+255),b
  1382  0013F0  0E00               	movlw	0
  1383  0013F2  6FBF               	movwf	(main@delay+2)& (0+255),b
  1384  0013F4  0E00               	movlw	0
  1385  0013F6  6FC0               	movwf	(main@delay+3)& (0+255),b
  1386                           
  1387                           ; BSR set to: 1
  1388                           ;main_014_Practice_CCP Comparacion_ADC.c: 147: unsigned char loop=0;
  1389  0013F8  0E00               	movlw	0
  1390  0013FA  6FCC               	movwf	main@loop& (0+255),b
  1391                           
  1392                           ; BSR set to: 1
  1393                           ;main_014_Practice_CCP Comparacion_ADC.c: 148: float FPprom[51];
  1394                           ;main_014_Practice_CCP Comparacion_ADC.c: 149: float fppromtotal=0;
  1395  0013FC  0E00               	movlw	0
  1396  0013FE  6FC4               	movwf	main@fppromtotal& (0+255),b
  1397  001400  0E00               	movlw	0
  1398  001402  6FC5               	movwf	(main@fppromtotal+1)& (0+255),b
  1399  001404  0E00               	movlw	0
  1400  001406  6FC6               	movwf	(main@fppromtotal+2)& (0+255),b
  1401                           
  1402                           ; BSR set to: 1
  1403                           ;main_014_Practice_CCP Comparacion_ADC.c: 150: float fppromtotal2=0;
  1404  001408  0E00               	movlw	0
  1405  00140A  6FCE               	movwf	main@fppromtotal2& (0+255),b
  1406  00140C  0E00               	movlw	0
  1407  00140E  6FCF               	movwf	(main@fppromtotal2+1)& (0+255),b
  1408  001410  0E00               	movlw	0
  1409  001412  6FD0               	movwf	(main@fppromtotal2+2)& (0+255),b
  1410                           
  1411                           ; BSR set to: 1
  1412                           ;main_014_Practice_CCP Comparacion_ADC.c: 154: {
  1413                           ;main_014_Practice_CCP Comparacion_ADC.c: 157: while(numCiclosMuestro<200){
  1414                           
  1415                           ;main_014_Practice_CCP Comparacion_ADC.c: 153: while(1)
  1416  001414  D0C2               	goto	l118
  1417  001416                     l119:
  1418                           
  1419                           ; BSR set to: 1
  1420                           ;main_014_Practice_CCP Comparacion_ADC.c: 158: ADCON0bits.GO_DONE = 1;
  1421  001416  82C2               	bsf	4034,1,c	;volatile
  1422                           
  1423                           ; BSR set to: 1
  1424                           ;main_014_Practice_CCP Comparacion_ADC.c: 159: adc1 = (ADRESH<<8)+ADRESL;
  1425  001418  50C4               	movf	4036,w,c	;volatile
  1426  00141A  0100               	movlb	0	; () banked
  1427  00141C  6FD8               	movwf	(??_main+1)& (0+255),b
  1428  00141E  6BD7               	clrf	??_main& (0+255),b
  1429  001420  50C3               	movf	4035,w,c	;volatile
  1430  001422  25D7               	addwf	??_main& (0+255),w,b
  1431  001424  6E3F               	movwf	_adc1,c
  1432  001426  0E00               	movlw	0
  1433  001428  21D8               	addwfc	(??_main+1)& (0+255),w,b
  1434  00142A  6E40               	movwf	_adc1+1,c
  1435                           
  1436                           ; BSR set to: 0
  1437                           ;main_014_Practice_CCP Comparacion_ADC.c: 160: float Voltage=0;
  1438  00142C  0E00               	movlw	0
  1439  00142E  0101               	movlb	1	; () banked
  1440  001430  6FB7               	movwf	main@Voltage& (0+255),b
  1441  001432  0E00               	movlw	0
  1442  001434  6FB8               	movwf	(main@Voltage+1)& (0+255),b
  1443  001436  0E00               	movlw	0
  1444  001438  6FB9               	movwf	(main@Voltage+2)& (0+255),b
  1445                           
  1446                           ; BSR set to: 1
  1447                           ;main_014_Practice_CCP Comparacion_ADC.c: 161: float Amps=0;
  1448  00143A  0E00               	movlw	0
  1449  00143C  6FD1               	movwf	main@Amps& (0+255),b
  1450  00143E  0E00               	movlw	0
  1451  001440  6FD2               	movwf	(main@Amps+1)& (0+255),b
  1452  001442  0E00               	movlw	0
  1453  001444  6FD3               	movwf	(main@Amps+2)& (0+255),b
  1454                           
  1455                           ; BSR set to: 1
  1456                           ;main_014_Practice_CCP Comparacion_ADC.c: 162: Voltage=(float)(adc1*5.0/1024.0);
  1457  001446  0E00               	movlw	0
  1458  001448  0100               	movlb	0	; () banked
  1459  00144A  6F77               	movwf	___ftmul@f2& (0+255),b
  1460  00144C  0EA0               	movlw	160
  1461  00144E  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  1462  001450  0E40               	movlw	64
  1463  001452  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  1464  001454  C03F  F068         	movff	_adc1,___lwtoft@c
  1465  001458  C040  F069         	movff	_adc1+1,___lwtoft@c+1
  1466  00145C  ECBA  F01D         	call	___lwtoft	;wreg free
  1467  001460  C068  F074         	movff	?___lwtoft,___ftmul@f1
  1468  001464  C069  F075         	movff	?___lwtoft+1,___ftmul@f1+1
  1469  001468  C06A  F076         	movff	?___lwtoft+2,___ftmul@f1+2
  1470  00146C  EC3C  F017         	call	___ftmul	;wreg free
  1471  001470  C074  F0B1         	movff	?___ftmul,___ftdiv@f1
  1472  001474  C075  F0B2         	movff	?___ftmul+1,___ftdiv@f1+1
  1473  001478  C076  F0B3         	movff	?___ftmul+2,___ftdiv@f1+2
  1474  00147C  0E00               	movlw	0
  1475  00147E  0100               	movlb	0	; () banked
  1476  001480  6FB4               	movwf	___ftdiv@f2& (0+255),b
  1477  001482  0E80               	movlw	128
  1478  001484  6FB5               	movwf	(___ftdiv@f2+1)& (0+255),b
  1479  001486  0E44               	movlw	68
  1480  001488  6FB6               	movwf	(___ftdiv@f2+2)& (0+255),b
  1481  00148A  EC31  F018         	call	___ftdiv	;wreg free
  1482  00148E  C0B1  F1B7         	movff	?___ftdiv,main@Voltage
  1483  001492  C0B2  F1B8         	movff	?___ftdiv+1,main@Voltage+1
  1484  001496  C0B3  F1B9         	movff	?___ftdiv+2,main@Voltage+2
  1485                           
  1486                           ;main_014_Practice_CCP Comparacion_ADC.c: 163: Amps=((Voltage-2.5)/0.185);
  1487  00149A  0E00               	movlw	0
  1488  00149C  0100               	movlb	0	; () banked
  1489  00149E  6F90               	movwf	___ftadd@f2& (0+255),b
  1490  0014A0  0E20               	movlw	32
  1491  0014A2  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
  1492  0014A4  0EC0               	movlw	192
  1493  0014A6  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
  1494  0014A8  C1B7  F08D         	movff	main@Voltage,___ftadd@f1
  1495  0014AC  C1B8  F08E         	movff	main@Voltage+1,___ftadd@f1+1
  1496  0014B0  C1B9  F08F         	movff	main@Voltage+2,___ftadd@f1+2
  1497  0014B4  EC9B  F011         	call	___ftadd	;wreg free
  1498  0014B8  C08D  F0B1         	movff	?___ftadd,___ftdiv@f1
  1499  0014BC  C08E  F0B2         	movff	?___ftadd+1,___ftdiv@f1+1
  1500  0014C0  C08F  F0B3         	movff	?___ftadd+2,___ftdiv@f1+2
  1501  0014C4  0E71               	movlw	113
  1502  0014C6  0100               	movlb	0	; () banked
  1503  0014C8  6FB4               	movwf	___ftdiv@f2& (0+255),b
  1504  0014CA  0E3D               	movlw	61
  1505  0014CC  6FB5               	movwf	(___ftdiv@f2+1)& (0+255),b
  1506  0014CE  0E3E               	movlw	62
  1507  0014D0  6FB6               	movwf	(___ftdiv@f2+2)& (0+255),b
  1508  0014D2  EC31  F018         	call	___ftdiv	;wreg free
  1509  0014D6  C0B1  F1D1         	movff	?___ftdiv,main@Amps
  1510  0014DA  C0B2  F1D2         	movff	?___ftdiv+1,main@Amps+1
  1511  0014DE  C0B3  F1D3         	movff	?___ftdiv+2,main@Amps+2
  1512                           
  1513                           ;main_014_Practice_CCP Comparacion_ADC.c: 165: sprintf(buffer1,"cargando %3d", numCiclos
      +                          Muestro);
  1514  0014E2  0E9B               	movlw	low main@buffer1
  1515  0014E4  0100               	movlb	0	; () banked
  1516  0014E6  6FB1               	movwf	sprintf@sp& (0+255),b
  1517  0014E8  0E01               	movlw	high main@buffer1
  1518  0014EA  6FB2               	movwf	(sprintf@sp+1)& (0+255),b
  1519  0014EC  0EA1               	movlw	low STR_1
  1520  0014EE  6FB3               	movwf	sprintf@f& (0+255),b
  1521  0014F0  0E08               	movlw	high STR_1
  1522  0014F2  6FB4               	movwf	(sprintf@f+1)& (0+255),b
  1523  0014F4  C1CA  F0B5         	movff	main@numCiclosMuestro,?_sprintf+4
  1524  0014F8  C1CB  F0B6         	movff	main@numCiclosMuestro+1,?_sprintf+5
  1525  0014FC  EC6D  F004         	call	_sprintf	;wreg free
  1526                           
  1527                           ;main_014_Practice_CCP Comparacion_ADC.c: 166: sprintf(buffer2,"cargando %0.2f", Amps);
  1528  001500  0EDC               	movlw	low _buffer2
  1529  001502  0100               	movlb	0	; () banked
  1530  001504  6FB1               	movwf	sprintf@sp& (0+255),b
  1531  001506  0E01               	movlw	high _buffer2
  1532  001508  6FB2               	movwf	(sprintf@sp+1)& (0+255),b
  1533  00150A  0E92               	movlw	low STR_2
  1534  00150C  6FB3               	movwf	sprintf@f& (0+255),b
  1535  00150E  0E08               	movlw	high STR_2
  1536  001510  6FB4               	movwf	(sprintf@f+1)& (0+255),b
  1537  001512  C1D1  F0B5         	movff	main@Amps,?_sprintf+4
  1538  001516  C1D2  F0B6         	movff	main@Amps+1,?_sprintf+5
  1539  00151A  C1D3  F0B7         	movff	main@Amps+2,?_sprintf+6
  1540  00151E  EC6D  F004         	call	_sprintf	;wreg free
  1541                           
  1542                           ;main_014_Practice_CCP Comparacion_ADC.c: 167: Lcd_Out2(1, 0, buffer1);
  1543  001522  0E00               	movlw	0
  1544  001524  0100               	movlb	0	; () banked
  1545  001526  6F63               	movwf	Lcd_Out2@x& (0+255),b
  1546  001528  0E9B               	movlw	low main@buffer1
  1547  00152A  6F64               	movwf	Lcd_Out2@buffer& (0+255),b
  1548  00152C  0E01               	movlw	high main@buffer1
  1549  00152E  6F65               	movwf	(Lcd_Out2@buffer+1)& (0+255),b
  1550  001530  0E01               	movlw	1
  1551  001532  EC00  F01B         	call	_Lcd_Out2
  1552                           
  1553                           ;main_014_Practice_CCP Comparacion_ADC.c: 168: Lcd_Out2(2, 0, buffer2);
  1554  001536  0E00               	movlw	0
  1555  001538  0100               	movlb	0	; () banked
  1556  00153A  6F63               	movwf	Lcd_Out2@x& (0+255),b
  1557  00153C  0EDC               	movlw	low _buffer2
  1558  00153E  6F64               	movwf	Lcd_Out2@buffer& (0+255),b
  1559  001540  0E01               	movlw	high _buffer2
  1560  001542  6F65               	movwf	(Lcd_Out2@buffer+1)& (0+255),b
  1561  001544  0E02               	movlw	2
  1562  001546  EC00  F01B         	call	_Lcd_Out2
  1563                           
  1564                           ;main_014_Practice_CCP Comparacion_ADC.c: 170: _delay((unsigned long)((50)*(48000000/400
      +                          0000.0)));
  1565  00154A  0EC8               	movlw	200
  1566  00154C                     u4267:
  1567  00154C  2EE8               	decfsz	wreg,f,c
  1568  00154E  D7FE               	bra	u4267
  1569                           
  1570                           ;main_014_Practice_CCP Comparacion_ADC.c: 172: sumIns+=Amps*Amps;
  1571  001550  C1C1  F08D         	movff	main@sumIns,___ftadd@f1
  1572  001554  C1C2  F08E         	movff	main@sumIns+1,___ftadd@f1+1
  1573  001558  C1C3  F08F         	movff	main@sumIns+2,___ftadd@f1+2
  1574  00155C  C1D1  F077         	movff	main@Amps,___ftmul@f2
  1575  001560  C1D2  F078         	movff	main@Amps+1,___ftmul@f2+1
  1576  001564  C1D3  F079         	movff	main@Amps+2,___ftmul@f2+2
  1577  001568  C1D1  F074         	movff	main@Amps,___ftmul@f1
  1578  00156C  C1D2  F075         	movff	main@Amps+1,___ftmul@f1+1
  1579  001570  C1D3  F076         	movff	main@Amps+2,___ftmul@f1+2
  1580  001574  EC3C  F017         	call	___ftmul	;wreg free
  1581  001578  C074  F090         	movff	?___ftmul,___ftadd@f2
  1582  00157C  C075  F091         	movff	?___ftmul+1,___ftadd@f2+1
  1583  001580  C076  F092         	movff	?___ftmul+2,___ftadd@f2+2
  1584  001584  EC9B  F011         	call	___ftadd	;wreg free
  1585  001588  C08D  F1C1         	movff	?___ftadd,main@sumIns
  1586  00158C  C08E  F1C2         	movff	?___ftadd+1,main@sumIns+1
  1587  001590  C08F  F1C3         	movff	?___ftadd+2,main@sumIns+2
  1588                           
  1589                           ;main_014_Practice_CCP Comparacion_ADC.c: 173: numCiclosMuestro+=1;
  1590  001594  0101               	movlb	1	; () banked
  1591  001596  4BCA               	infsnz	main@numCiclosMuestro& (0+255),f,b
  1592  001598  2BCB               	incf	(main@numCiclosMuestro+1)& (0+255),f,b
  1593  00159A                     l118:
  1594                           
  1595                           ; BSR set to: 1
  1596  00159A  0101               	movlb	1	; () banked
  1597  00159C  51CB               	movf	(main@numCiclosMuestro+1)& (0+255),w,b
  1598  00159E  E104               	bnz	l4018
  1599  0015A0  0EC8               	movlw	200
  1600  0015A2  5DCA               	subwf	main@numCiclosMuestro& (0+255),w,b
  1601  0015A4  A0D8               	btfss	status,0,c
  1602  0015A6  D737               	goto	l119
  1603  0015A8                     l4018:
  1604                           
  1605                           ; BSR set to: 1
  1606                           ;main_014_Practice_CCP Comparacion_ADC.c: 175: }
  1607                           ;main_014_Practice_CCP Comparacion_ADC.c: 177: Irms=sqrt(sumIns/201)/20;
  1608  0015A8  0E00               	movlw	0
  1609  0015AA  0100               	movlb	0	; () banked
  1610  0015AC  6FB4               	movwf	___ftdiv@f2& (0+255),b
  1611  0015AE  0E49               	movlw	73
  1612  0015B0  6FB5               	movwf	(___ftdiv@f2+1)& (0+255),b
  1613  0015B2  0E43               	movlw	67
  1614  0015B4  6FB6               	movwf	(___ftdiv@f2+2)& (0+255),b
  1615  0015B6  C1C1  F0B1         	movff	main@sumIns,___ftdiv@f1
  1616  0015BA  C1C2  F0B2         	movff	main@sumIns+1,___ftdiv@f1+1
  1617  0015BE  C1C3  F0B3         	movff	main@sumIns+2,___ftdiv@f1+2
  1618  0015C2  EC31  F018         	call	___ftdiv	;wreg free
  1619  0015C6  C0B1  F0C0         	movff	?___ftdiv,sqrt@a
  1620  0015CA  C0B2  F0C1         	movff	?___ftdiv+1,sqrt@a+1
  1621  0015CE  C0B3  F0C2         	movff	?___ftdiv+2,sqrt@a+2
  1622  0015D2  EC72  F012         	call	_sqrt	;wreg free
  1623  0015D6  C0C0  F1C7         	movff	?_sqrt,_main$1430
  1624  0015DA  C0C1  F1C8         	movff	?_sqrt+1,_main$1430+1
  1625  0015DE  C0C2  F1C9         	movff	?_sqrt+2,_main$1430+2
  1626                           
  1627                           ;main_014_Practice_CCP Comparacion_ADC.c: 175: }
  1628                           ;main_014_Practice_CCP Comparacion_ADC.c: 177: Irms=sqrt(sumIns/201)/20;
  1629  0015E2  C1C7  F0B1         	movff	_main$1430,___ftdiv@f1
  1630  0015E6  C1C8  F0B2         	movff	_main$1430+1,___ftdiv@f1+1
  1631  0015EA  C1C9  F0B3         	movff	_main$1430+2,___ftdiv@f1+2
  1632  0015EE  0E00               	movlw	0
  1633  0015F0  0100               	movlb	0	; () banked
  1634  0015F2  6FB4               	movwf	___ftdiv@f2& (0+255),b
  1635  0015F4  0EA0               	movlw	160
  1636  0015F6  6FB5               	movwf	(___ftdiv@f2+1)& (0+255),b
  1637  0015F8  0E41               	movlw	65
  1638  0015FA  6FB6               	movwf	(___ftdiv@f2+2)& (0+255),b
  1639  0015FC  EC31  F018         	call	___ftdiv	;wreg free
  1640  001600  C0B1  F1AE         	movff	?___ftdiv,main@Irms
  1641  001604  C0B2  F1AF         	movff	?___ftdiv+1,main@Irms+1
  1642  001608  C0B3  F1B0         	movff	?___ftdiv+2,main@Irms+2
  1643                           
  1644                           ;main_014_Practice_CCP Comparacion_ADC.c: 181: PotenciaReal=Irms*128;
  1645  00160C  C1AE  F074         	movff	main@Irms,___ftmul@f1
  1646  001610  C1AF  F075         	movff	main@Irms+1,___ftmul@f1+1
  1647  001614  C1B0  F076         	movff	main@Irms+2,___ftmul@f1+2
  1648  001618  0E00               	movlw	0
  1649  00161A  0100               	movlb	0	; () banked
  1650  00161C  6F77               	movwf	___ftmul@f2& (0+255),b
  1651  00161E  0E00               	movlw	0
  1652  001620  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  1653  001622  0E43               	movlw	67
  1654  001624  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  1655  001626  EC3C  F017         	call	___ftmul	;wreg free
  1656  00162A  C074  F1D9         	movff	?___ftmul,main@PotenciaReal
  1657  00162E  C075  F1DA         	movff	?___ftmul+1,main@PotenciaReal+1
  1658  001632  C076  F1DB         	movff	?___ftmul+2,main@PotenciaReal+2
  1659                           
  1660                           ;main_014_Practice_CCP Comparacion_ADC.c: 182: sprintf(buffer1,"%0.2f W", PotenciaReal);
  1661  001636  0E9B               	movlw	low main@buffer1
  1662  001638  0100               	movlb	0	; () banked
  1663  00163A  6FB1               	movwf	sprintf@sp& (0+255),b
  1664  00163C  0E01               	movlw	high main@buffer1
  1665  00163E  6FB2               	movwf	(sprintf@sp+1)& (0+255),b
  1666  001640  0ED1               	movlw	low STR_3
  1667  001642  6FB3               	movwf	sprintf@f& (0+255),b
  1668  001644  0E08               	movlw	high STR_3
  1669  001646  6FB4               	movwf	(sprintf@f+1)& (0+255),b
  1670  001648  C1D9  F0B5         	movff	main@PotenciaReal,?_sprintf+4
  1671  00164C  C1DA  F0B6         	movff	main@PotenciaReal+1,?_sprintf+5
  1672  001650  C1DB  F0B7         	movff	main@PotenciaReal+2,?_sprintf+6
  1673  001654  EC6D  F004         	call	_sprintf	;wreg free
  1674                           
  1675                           ;main_014_Practice_CCP Comparacion_ADC.c: 183: Lcd_Out2(1, 0, buffer1);
  1676  001658  0E00               	movlw	0
  1677  00165A  0100               	movlb	0	; () banked
  1678  00165C  6F63               	movwf	Lcd_Out2@x& (0+255),b
  1679  00165E  0E9B               	movlw	low main@buffer1
  1680  001660  6F64               	movwf	Lcd_Out2@buffer& (0+255),b
  1681  001662  0E01               	movlw	high main@buffer1
  1682  001664  6F65               	movwf	(Lcd_Out2@buffer+1)& (0+255),b
  1683  001666  0E01               	movlw	1
  1684  001668  EC00  F01B         	call	_Lcd_Out2
  1685                           
  1686                           ;main_014_Practice_CCP Comparacion_ADC.c: 186: _delay((unsigned long)((500)*(48000000/40
      +                          00.0)));
  1687  00166C  0E1F               	movlw	31
  1688  00166E  0100               	movlb	0	; () banked
  1689  001670  6FD8               	movwf	(??_main+1)& (0+255),b
  1690  001672  0E71               	movlw	113
  1691  001674  6FD7               	movwf	??_main& (0+255),b
  1692  001676  0E1E               	movlw	30
  1693  001678                     u4277:
  1694  001678  2EE8               	decfsz	wreg,f,c
  1695  00167A  D7FE               	bra	u4277
  1696  00167C  2FD7               	decfsz	??_main& (0+255),f,b
  1697  00167E  D7FC               	bra	u4277
  1698  001680  2FD8               	decfsz	(??_main+1)& (0+255),f,b
  1699  001682  D7FA               	bra	u4277
  1700  001684  F000               	nop	
  1701                           
  1702                           ;main_014_Practice_CCP Comparacion_ADC.c: 187: while(loop<51){
  1703  001686  D082               	goto	l121
  1704  001688                     
  1705                           ;main_014_Practice_CCP Comparacion_ADC.c: 188: Lcd_Out2(1, 8, "cargandp");
  1706  001688  0E08               	movlw	8
  1707  00168A  0100               	movlb	0	; () banked
  1708  00168C  6F63               	movwf	Lcd_Out2@x& (0+255),b
  1709  00168E  0EC0               	movlw	low STR_4
  1710  001690  6F64               	movwf	Lcd_Out2@buffer& (0+255),b
  1711  001692  0E08               	movlw	high STR_4
  1712  001694  6F65               	movwf	(Lcd_Out2@buffer+1)& (0+255),b
  1713  001696  0E01               	movlw	1
  1714  001698  EC00  F01B         	call	_Lcd_Out2
  1715                           
  1716                           ;main_014_Practice_CCP Comparacion_ADC.c: 189: if(PORTBbits.RB0==1){
  1717  00169C  A081               	btfss	3969,0,c	;volatile
  1718  00169E  D016               	goto	l125
  1719                           
  1720                           ;main_014_Practice_CCP Comparacion_ADC.c: 190: if(PORTBbits.RB1==1){
  1721  0016A0  A281               	btfss	3969,1,c	;volatile
  1722  0016A2  D00A               	goto	l124
  1723                           
  1724                           ;main_014_Practice_CCP Comparacion_ADC.c: 191: delay=0;
  1725  0016A4  0E00               	movlw	0
  1726  0016A6  0101               	movlb	1	; () banked
  1727  0016A8  6FBD               	movwf	main@delay& (0+255),b
  1728  0016AA  0E00               	movlw	0
  1729  0016AC  6FBE               	movwf	(main@delay+1)& (0+255),b
  1730  0016AE  0E00               	movlw	0
  1731  0016B0  6FBF               	movwf	(main@delay+2)& (0+255),b
  1732  0016B2  0E00               	movlw	0
  1733  0016B4  6FC0               	movwf	(main@delay+3)& (0+255),b
  1734                           
  1735                           ;main_014_Practice_CCP Comparacion_ADC.c: 192: }else{
  1736  0016B6  D00A               	goto	l125
  1737  0016B8                     l124:
  1738                           
  1739                           ;main_014_Practice_CCP Comparacion_ADC.c: 193: _delay((unsigned long)((1)*(48000000/4000
      +                          000.0)));
  1740                           
  1741                           ; BSR set to: 1
  1742  0016B8  0E04               	movlw	4
  1743  0016BA                     u4287:
  1744  0016BA  2EE8               	decfsz	wreg,f,c
  1745  0016BC  D7FE               	bra	u4287
  1746                           
  1747                           ;main_014_Practice_CCP Comparacion_ADC.c: 194: delay++;
  1748  0016BE  0E01               	movlw	1
  1749  0016C0  0101               	movlb	1	; () banked
  1750  0016C2  27BD               	addwf	main@delay& (0+255),f,b
  1751  0016C4  0E00               	movlw	0
  1752  0016C6  23BE               	addwfc	(main@delay+1)& (0+255),f,b
  1753  0016C8  23BF               	addwfc	(main@delay+2)& (0+255),f,b
  1754  0016CA  23C0               	addwfc	(main@delay+3)& (0+255),f,b
  1755  0016CC                     l125:
  1756                           
  1757                           ;main_014_Practice_CCP Comparacion_ADC.c: 195: }
  1758                           ;main_014_Practice_CCP Comparacion_ADC.c: 196: }
  1759                           ;main_014_Practice_CCP Comparacion_ADC.c: 200: FactorPotencia=(float)((((float)delay/100
      +                          0000.0)*360.0)/(1.0/60.0));
  1760                           
  1761                           ; BSR set to: 1
  1762                           
  1763                           ; BSR set to: 1
  1764  0016CC  0E00               	movlw	0
  1765  0016CE  0100               	movlb	0	; () banked
  1766  0016D0  6F77               	movwf	___ftmul@f2& (0+255),b
  1767  0016D2  0EB4               	movlw	180
  1768  0016D4  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  1769  0016D6  0E43               	movlw	67
  1770  0016D8  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  1771  0016DA  0E24               	movlw	36
  1772  0016DC  6FB4               	movwf	___ftdiv@f2& (0+255),b
  1773  0016DE  0E74               	movlw	116
  1774  0016E0  6FB5               	movwf	(___ftdiv@f2+1)& (0+255),b
  1775  0016E2  0E49               	movlw	73
  1776  0016E4  6FB6               	movwf	(___ftdiv@f2+2)& (0+255),b
  1777  0016E6  C1BD  F068         	movff	main@delay,___lltoft@c
  1778  0016EA  C1BE  F069         	movff	main@delay+1,___lltoft@c+1
  1779  0016EE  C1BF  F06A         	movff	main@delay+2,___lltoft@c+2
  1780  0016F2  C1C0  F06B         	movff	main@delay+3,___lltoft@c+3
  1781  0016F6  EC02  F01D         	call	___lltoft	;wreg free
  1782  0016FA  C068  F0B1         	movff	?___lltoft,___ftdiv@f1
  1783  0016FE  C069  F0B2         	movff	?___lltoft+1,___ftdiv@f1+1
  1784  001702  C06A  F0B3         	movff	?___lltoft+2,___ftdiv@f1+2
  1785  001706  EC31  F018         	call	___ftdiv	;wreg free
  1786  00170A  C0B1  F074         	movff	?___ftdiv,___ftmul@f1
  1787  00170E  C0B2  F075         	movff	?___ftdiv+1,___ftmul@f1+1
  1788  001712  C0B3  F076         	movff	?___ftdiv+2,___ftmul@f1+2
  1789  001716  EC3C  F017         	call	___ftmul	;wreg free
  1790  00171A  C074  F1C7         	movff	?___ftmul,_main$1430
  1791  00171E  C075  F1C8         	movff	?___ftmul+1,_main$1430+1
  1792  001722  C076  F1C9         	movff	?___ftmul+2,_main$1430+2
  1793                           
  1794                           ;main_014_Practice_CCP Comparacion_ADC.c: 195: }
  1795                           ;main_014_Practice_CCP Comparacion_ADC.c: 196: }
  1796                           ;main_014_Practice_CCP Comparacion_ADC.c: 200: FactorPotencia=(float)((((float)delay/100
      +                          0000.0)*360.0)/(1.0/60.0));
  1797  001726  C1C7  F0B1         	movff	_main$1430,___ftdiv@f1
  1798  00172A  C1C8  F0B2         	movff	_main$1430+1,___ftdiv@f1+1
  1799  00172E  C1C9  F0B3         	movff	_main$1430+2,___ftdiv@f1+2
  1800  001732  0E89               	movlw	137
  1801  001734  0100               	movlb	0	; () banked
  1802  001736  6FB4               	movwf	___ftdiv@f2& (0+255),b
  1803  001738  0E88               	movlw	136
  1804  00173A  6FB5               	movwf	(___ftdiv@f2+1)& (0+255),b
  1805  00173C  0E3C               	movlw	60
  1806  00173E  6FB6               	movwf	(___ftdiv@f2+2)& (0+255),b
  1807  001740  EC31  F018         	call	___ftdiv	;wreg free
  1808  001744  C0B1  F1B1         	movff	?___ftdiv,main@FactorPotencia
  1809  001748  C0B2  F1B2         	movff	?___ftdiv+1,main@FactorPotencia+1
  1810  00174C  C0B3  F1B3         	movff	?___ftdiv+2,main@FactorPotencia+2
  1811                           
  1812                           ;main_014_Practice_CCP Comparacion_ADC.c: 201: factorPotenciaNum=cos(FactorPotencia);
  1813  001750  C1B1  F0CD         	movff	main@FactorPotencia,cos@f
  1814  001754  C1B2  F0CE         	movff	main@FactorPotencia+1,cos@f+1
  1815  001758  C1B3  F0CF         	movff	main@FactorPotencia+2,cos@f+2
  1816  00175C  ECF8  F019         	call	_cos	;wreg free
  1817  001760  C0CD  F1B4         	movff	?_cos,main@factorPotenciaNum
  1818  001764  C0CE  F1B5         	movff	?_cos+1,main@factorPotenciaNum+1
  1819  001768  C0CF  F1B6         	movff	?_cos+2,main@factorPotenciaNum+2
  1820                           
  1821                           ;main_014_Practice_CCP Comparacion_ADC.c: 206: FPprom[loop]=factorPotenciaNum;
  1822  00176C  0101               	movlb	1	; () banked
  1823  00176E  51CC               	movf	main@loop& (0+255),w,b
  1824  001770  0D03               	mullw	3
  1825  001772  0E00               	movlw	low main@FPprom
  1826  001774  24F3               	addwf	prodl,w,c
  1827  001776  6ED9               	movwf	fsr2l,c
  1828  001778  0E01               	movlw	high main@FPprom
  1829  00177A  20F4               	addwfc	prodh,w,c
  1830  00177C  6EDA               	movwf	fsr2h,c
  1831  00177E  C1B4  FFDE         	movff	main@factorPotenciaNum,postinc2
  1832  001782  C1B5  FFDE         	movff	main@factorPotenciaNum+1,postinc2
  1833  001786  C1B6  FFDE         	movff	main@factorPotenciaNum+2,postinc2
  1834                           
  1835                           ; BSR set to: 1
  1836                           ;main_014_Practice_CCP Comparacion_ADC.c: 207: loop++;
  1837  00178A  2BCC               	incf	main@loop& (0+255),f,b
  1838  00178C                     l121:
  1839                           
  1840                           ; BSR set to: 1
  1841  00178C  0E32               	movlw	50
  1842  00178E  0101               	movlb	1	; () banked
  1843  001790  65CC               	cpfsgt	main@loop& (0+255),b
  1844  001792  D77A               	goto	l122
  1845                           
  1846                           ; BSR set to: 1
  1847                           ;main_014_Practice_CCP Comparacion_ADC.c: 208: }
  1848                           ;main_014_Practice_CCP Comparacion_ADC.c: 209: if(calculoFP==0){
  1849                           
  1850                           ; BSR set to: 1
  1851  001794  51CD               	movf	main@calculoFP& (0+255),w,b
  1852  001796  A4D8               	btfss	status,2,c
  1853  001798  D069               	goto	l127
  1854                           
  1855                           ; BSR set to: 1
  1856                           ;main_014_Practice_CCP Comparacion_ADC.c: 210: for(int i=0;i<51;i++){
  1857  00179A  0E00               	movlw	0
  1858  00179C  6FD8               	movwf	(main@i+1)& (0+255),b
  1859  00179E  0E00               	movlw	0
  1860  0017A0  6FD7               	movwf	main@i& (0+255),b
  1861  0017A2                     l4054:
  1862                           
  1863                           ; BSR set to: 1
  1864  0017A2  BFD8               	btfsc	(main@i+1)& (0+255),7,b
  1865  0017A4  D006               	goto	l128
  1866  0017A6  51D8               	movf	(main@i+1)& (0+255),w,b
  1867  0017A8  E12E               	bnz	l4064
  1868  0017AA  0E33               	movlw	51
  1869  0017AC  5DD7               	subwf	main@i& (0+255),w,b
  1870  0017AE  B0D8               	btfsc	status,0,c
  1871  0017B0  D02A               	goto	u4230
  1872  0017B2                     l128:
  1873                           
  1874                           ; BSR set to: 1
  1875                           ;main_014_Practice_CCP Comparacion_ADC.c: 212: fppromtotal+=FPprom[i];
  1876                           
  1877                           ; BSR set to: 1
  1878  0017B2  C1C4  F08D         	movff	main@fppromtotal,___ftadd@f1
  1879  0017B6  C1C5  F08E         	movff	main@fppromtotal+1,___ftadd@f1+1
  1880  0017BA  C1C6  F08F         	movff	main@fppromtotal+2,___ftadd@f1+2
  1881  0017BE  C1D7  F06E         	movff	main@i,___wmul@multiplier
  1882  0017C2  C1D8  F06F         	movff	main@i+1,___wmul@multiplier+1
  1883  0017C6  0E00               	movlw	0
  1884  0017C8  0100               	movlb	0	; () banked
  1885  0017CA  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1886  0017CC  0E03               	movlw	3
  1887  0017CE  6F70               	movwf	___wmul@multiplicand& (0+255),b
  1888  0017D0  EC93  F01D         	call	___wmul	;wreg free
  1889  0017D4  0E00               	movlw	low main@FPprom
  1890  0017D6  0100               	movlb	0	; () banked
  1891  0017D8  256E               	addwf	?___wmul& (0+255),w,b
  1892  0017DA  6ED9               	movwf	fsr2l,c
  1893  0017DC  0E01               	movlw	high main@FPprom
  1894  0017DE  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  1895  0017E0  6EDA               	movwf	fsr2h,c
  1896  0017E2  CFDE F090          	movff	postinc2,___ftadd@f2
  1897  0017E6  CFDE F091          	movff	postinc2,___ftadd@f2+1
  1898  0017EA  CFDD F092          	movff	postdec2,___ftadd@f2+2
  1899  0017EE  EC9B  F011         	call	___ftadd	;wreg free
  1900  0017F2  C08D  F1C4         	movff	?___ftadd,main@fppromtotal
  1901  0017F6  C08E  F1C5         	movff	?___ftadd+1,main@fppromtotal+1
  1902  0017FA  C08F  F1C6         	movff	?___ftadd+2,main@fppromtotal+2
  1903  0017FE  0101               	movlb	1	; () banked
  1904  001800  4BD7               	infsnz	main@i& (0+255),f,b
  1905  001802  2BD8               	incf	(main@i+1)& (0+255),f,b
  1906  001804  D7CE               	goto	l4054
  1907  001806                     u4230:
  1908  001806                     l4064:
  1909                           
  1910                           ; BSR set to: 1
  1911                           ;main_014_Practice_CCP Comparacion_ADC.c: 213: }
  1912                           ;main_014_Practice_CCP Comparacion_ADC.c: 214: fppromtotal2=fppromtotal/51.0;
  1913  001806  C1C4  F0B1         	movff	main@fppromtotal,___ftdiv@f1
  1914  00180A  C1C5  F0B2         	movff	main@fppromtotal+1,___ftdiv@f1+1
  1915  00180E  C1C6  F0B3         	movff	main@fppromtotal+2,___ftdiv@f1+2
  1916  001812  0E00               	movlw	0
  1917  001814  0100               	movlb	0	; () banked
  1918  001816  6FB4               	movwf	___ftdiv@f2& (0+255),b
  1919  001818  0E4C               	movlw	76
  1920  00181A  6FB5               	movwf	(___ftdiv@f2+1)& (0+255),b
  1921  00181C  0E42               	movlw	66
  1922  00181E  6FB6               	movwf	(___ftdiv@f2+2)& (0+255),b
  1923  001820  EC31  F018         	call	___ftdiv	;wreg free
  1924  001824  C0B1  F1CE         	movff	?___ftdiv,main@fppromtotal2
  1925  001828  C0B2  F1CF         	movff	?___ftdiv+1,main@fppromtotal2+1
  1926  00182C  C0B3  F1D0         	movff	?___ftdiv+2,main@fppromtotal2+2
  1927                           
  1928                           ;main_014_Practice_CCP Comparacion_ADC.c: 216: sprintf(buffer2,"pF=%0.3f",fppromtotal2 )
      +                          ;
  1929  001830  0EDC               	movlw	low _buffer2
  1930  001832  0100               	movlb	0	; () banked
  1931  001834  6FB1               	movwf	sprintf@sp& (0+255),b
  1932  001836  0E01               	movlw	high _buffer2
  1933  001838  6FB2               	movwf	(sprintf@sp+1)& (0+255),b
  1934  00183A  0EB7               	movlw	low STR_5
  1935  00183C  6FB3               	movwf	sprintf@f& (0+255),b
  1936  00183E  0E08               	movlw	high STR_5
  1937  001840  6FB4               	movwf	(sprintf@f+1)& (0+255),b
  1938  001842  C1CE  F0B5         	movff	main@fppromtotal2,?_sprintf+4
  1939  001846  C1CF  F0B6         	movff	main@fppromtotal2+1,?_sprintf+5
  1940  00184A  C1D0  F0B7         	movff	main@fppromtotal2+2,?_sprintf+6
  1941  00184E  EC6D  F004         	call	_sprintf	;wreg free
  1942                           
  1943                           ;main_014_Practice_CCP Comparacion_ADC.c: 217: Lcd_Out2(1, 8, buffer2);
  1944  001852  0E08               	movlw	8
  1945  001854  0100               	movlb	0	; () banked
  1946  001856  6F63               	movwf	Lcd_Out2@x& (0+255),b
  1947  001858  0EDC               	movlw	low _buffer2
  1948  00185A  6F64               	movwf	Lcd_Out2@buffer& (0+255),b
  1949  00185C  0E01               	movlw	high _buffer2
  1950  00185E  6F65               	movwf	(Lcd_Out2@buffer+1)& (0+255),b
  1951  001860  0E01               	movlw	1
  1952  001862  EC00  F01B         	call	_Lcd_Out2
  1953                           
  1954                           ;main_014_Practice_CCP Comparacion_ADC.c: 219: calculoFP=1;
  1955  001866  0E01               	movlw	1
  1956  001868  0101               	movlb	1	; () banked
  1957  00186A  6FCD               	movwf	main@calculoFP& (0+255),b
  1958  00186C                     l127:
  1959                           
  1960                           ; BSR set to: 1
  1961                           ;main_014_Practice_CCP Comparacion_ADC.c: 220: }
  1962                           ;main_014_Practice_CCP Comparacion_ADC.c: 221: calculoFP=1;
  1963                           
  1964                           ; BSR set to: 1
  1965  00186C  0E01               	movlw	1
  1966  00186E  6FCD               	movwf	main@calculoFP& (0+255),b
  1967                           
  1968                           ; BSR set to: 1
  1969                           ;main_014_Practice_CCP Comparacion_ADC.c: 222: sprintf(buffer2,"pF=%0.3f",fppromtotal2 )
      +                          ;
  1970  001870  0EDC               	movlw	low _buffer2
  1971  001872  0100               	movlb	0	; () banked
  1972  001874  6FB1               	movwf	sprintf@sp& (0+255),b
  1973  001876  0E01               	movlw	high _buffer2
  1974  001878  6FB2               	movwf	(sprintf@sp+1)& (0+255),b
  1975  00187A  0EB7               	movlw	low STR_5
  1976  00187C  6FB3               	movwf	sprintf@f& (0+255),b
  1977  00187E  0E08               	movlw	high STR_5
  1978  001880  6FB4               	movwf	(sprintf@f+1)& (0+255),b
  1979  001882  C1CE  F0B5         	movff	main@fppromtotal2,?_sprintf+4
  1980  001886  C1CF  F0B6         	movff	main@fppromtotal2+1,?_sprintf+5
  1981  00188A  C1D0  F0B7         	movff	main@fppromtotal2+2,?_sprintf+6
  1982  00188E  EC6D  F004         	call	_sprintf	;wreg free
  1983                           
  1984                           ;main_014_Practice_CCP Comparacion_ADC.c: 223: Lcd_Out2(1, 8, buffer2);
  1985  001892  0E08               	movlw	8
  1986  001894  0100               	movlb	0	; () banked
  1987  001896  6F63               	movwf	Lcd_Out2@x& (0+255),b
  1988  001898  0EDC               	movlw	low _buffer2
  1989  00189A  6F64               	movwf	Lcd_Out2@buffer& (0+255),b
  1990  00189C  0E01               	movlw	high _buffer2
  1991  00189E  6F65               	movwf	(Lcd_Out2@buffer+1)& (0+255),b
  1992  0018A0  0E01               	movlw	1
  1993  0018A2  EC00  F01B         	call	_Lcd_Out2
  1994  0018A6  0101               	movlb	1	; () banked
  1995  0018A8  51CD               	movf	main@calculoFP& (0+255),w,b
  1996  0018AA  B4D8               	btfsc	status,2,c
  1997  0018AC  D7FC               	goto	l131
  1998                           
  1999                           ; BSR set to: 1
  2000                           ;main_014_Practice_CCP Comparacion_ADC.c: 231: float potenciaAparente=0;
  2001                           
  2002                           ; BSR set to: 1
  2003  0018AE  0E00               	movlw	0
  2004  0018B0  6FD4               	movwf	main@potenciaAparente& (0+255),b
  2005  0018B2  0E00               	movlw	0
  2006  0018B4  6FD5               	movwf	(main@potenciaAparente+1)& (0+255),b
  2007  0018B6  0E00               	movlw	0
  2008  0018B8  6FD6               	movwf	(main@potenciaAparente+2)& (0+255),b
  2009                           
  2010                           ; BSR set to: 1
  2011                           ;main_014_Practice_CCP Comparacion_ADC.c: 232: potenciaAparente=PotenciaReal/fppromtotal
      +                          2;
  2012  0018BA  C1D9  F0B1         	movff	main@PotenciaReal,___ftdiv@f1
  2013  0018BE  C1DA  F0B2         	movff	main@PotenciaReal+1,___ftdiv@f1+1
  2014  0018C2  C1DB  F0B3         	movff	main@PotenciaReal+2,___ftdiv@f1+2
  2015  0018C6  C1CE  F0B4         	movff	main@fppromtotal2,___ftdiv@f2
  2016  0018CA  C1CF  F0B5         	movff	main@fppromtotal2+1,___ftdiv@f2+1
  2017  0018CE  C1D0  F0B6         	movff	main@fppromtotal2+2,___ftdiv@f2+2
  2018  0018D2  EC31  F018         	call	___ftdiv	;wreg free
  2019  0018D6  C0B1  F1D4         	movff	?___ftdiv,main@potenciaAparente
  2020  0018DA  C0B2  F1D5         	movff	?___ftdiv+1,main@potenciaAparente+1
  2021  0018DE  C0B3  F1D6         	movff	?___ftdiv+2,main@potenciaAparente+2
  2022                           
  2023                           ;main_014_Practice_CCP Comparacion_ADC.c: 233: sprintf(buffer3,"%0.2fVA",potenciaAparent
      +                          e );
  2024  0018E2  0EDB               	movlw	low _buffer3
  2025  0018E4  0100               	movlb	0	; () banked
  2026  0018E6  6FB1               	movwf	sprintf@sp& (0+255),b
  2027  0018E8  0E00               	movlw	high _buffer3
  2028  0018EA  6FB2               	movwf	(sprintf@sp+1)& (0+255),b
  2029  0018EC  0EC9               	movlw	low STR_7
  2030  0018EE  6FB3               	movwf	sprintf@f& (0+255),b
  2031  0018F0  0E08               	movlw	high STR_7
  2032  0018F2  6FB4               	movwf	(sprintf@f+1)& (0+255),b
  2033  0018F4  C1D4  F0B5         	movff	main@potenciaAparente,?_sprintf+4
  2034  0018F8  C1D5  F0B6         	movff	main@potenciaAparente+1,?_sprintf+5
  2035  0018FC  C1D6  F0B7         	movff	main@potenciaAparente+2,?_sprintf+6
  2036  001900  EC6D  F004         	call	_sprintf	;wreg free
  2037                           
  2038                           ;main_014_Practice_CCP Comparacion_ADC.c: 234: Lcd_Out2(2, 0, buffer3);
  2039  001904  0E00               	movlw	0
  2040  001906  0100               	movlb	0	; () banked
  2041  001908  6F63               	movwf	Lcd_Out2@x& (0+255),b
  2042  00190A  0EDB               	movlw	low _buffer3
  2043  00190C  6F64               	movwf	Lcd_Out2@buffer& (0+255),b
  2044  00190E  0E00               	movlw	high _buffer3
  2045  001910  6F65               	movwf	(Lcd_Out2@buffer+1)& (0+255),b
  2046  001912  0E02               	movlw	2
  2047  001914  EC00  F01B         	call	_Lcd_Out2
  2048                           
  2049                           ;main_014_Practice_CCP Comparacion_ADC.c: 235: _delay((unsigned long)((300)*(48000000/40
      +                          00.0)));
  2050  001918  0E13               	movlw	19
  2051  00191A  0100               	movlb	0	; () banked
  2052  00191C  6FD8               	movwf	(??_main+1)& (0+255),b
  2053  00191E  0E44               	movlw	68
  2054  001920  6FD7               	movwf	??_main& (0+255),b
  2055  001922  0E44               	movlw	68
  2056  001924                     u4297:
  2057  001924  2EE8               	decfsz	wreg,f,c
  2058  001926  D7FE               	bra	u4297
  2059  001928  2FD7               	decfsz	??_main& (0+255),f,b
  2060  00192A  D7FC               	bra	u4297
  2061  00192C  2FD8               	decfsz	(??_main+1)& (0+255),f,b
  2062  00192E  D7FA               	bra	u4297
  2063  001930  F000               	nop	
  2064                           
  2065                           ;main_014_Practice_CCP Comparacion_ADC.c: 236: float potenciaReactiva=0;
  2066  001932  0E00               	movlw	0
  2067  001934  0101               	movlb	1	; () banked
  2068  001936  6FBA               	movwf	main@potenciaReactiva& (0+255),b
  2069  001938  0E00               	movlw	0
  2070  00193A  6FBB               	movwf	(main@potenciaReactiva+1)& (0+255),b
  2071  00193C  0E00               	movlw	0
  2072  00193E  6FBC               	movwf	(main@potenciaReactiva+2)& (0+255),b
  2073                           
  2074                           ; BSR set to: 1
  2075                           ;main_014_Practice_CCP Comparacion_ADC.c: 237: float temp=(potenciaAparente*potenciaApar
      +                          ente)-(PotenciaReal*PotenciaReal);
  2076  001940  C1D4  F077         	movff	main@potenciaAparente,___ftmul@f2
  2077  001944  C1D5  F078         	movff	main@potenciaAparente+1,___ftmul@f2+1
  2078  001948  C1D6  F079         	movff	main@potenciaAparente+2,___ftmul@f2+2
  2079  00194C  C1D4  F074         	movff	main@potenciaAparente,___ftmul@f1
  2080  001950  C1D5  F075         	movff	main@potenciaAparente+1,___ftmul@f1+1
  2081  001954  C1D6  F076         	movff	main@potenciaAparente+2,___ftmul@f1+2
  2082  001958  EC3C  F017         	call	___ftmul	;wreg free
  2083  00195C  C074  F08D         	movff	?___ftmul,___ftadd@f1
  2084  001960  C075  F08E         	movff	?___ftmul+1,___ftadd@f1+1
  2085  001964  C076  F08F         	movff	?___ftmul+2,___ftadd@f1+2
  2086  001968  C1D9  F077         	movff	main@PotenciaReal,___ftmul@f2
  2087  00196C  C1DA  F078         	movff	main@PotenciaReal+1,___ftmul@f2+1
  2088  001970  C1DB  F079         	movff	main@PotenciaReal+2,___ftmul@f2+2
  2089  001974  C1D9  F074         	movff	main@PotenciaReal,___ftmul@f1
  2090  001978  C1DA  F075         	movff	main@PotenciaReal+1,___ftmul@f1+1
  2091  00197C  C1DB  F076         	movff	main@PotenciaReal+2,___ftmul@f1+2
  2092  001980  EC3C  F017         	call	___ftmul	;wreg free
  2093  001984  C074  F083         	movff	?___ftmul,___ftneg@f1
  2094  001988  C075  F084         	movff	?___ftmul+1,___ftneg@f1+1
  2095  00198C  C076  F085         	movff	?___ftmul+2,___ftneg@f1+2
  2096  001990  ECA7  F01D         	call	___ftneg	;wreg free
  2097  001994  C083  F090         	movff	?___ftneg,___ftadd@f2
  2098  001998  C084  F091         	movff	?___ftneg+1,___ftadd@f2+1
  2099  00199C  C085  F092         	movff	?___ftneg+2,___ftadd@f2+2
  2100  0019A0  EC9B  F011         	call	___ftadd	;wreg free
  2101  0019A4  C08D  F1AB         	movff	?___ftadd,main@temp
  2102  0019A8  C08E  F1AC         	movff	?___ftadd+1,main@temp+1
  2103  0019AC  C08F  F1AD         	movff	?___ftadd+2,main@temp+2
  2104                           
  2105                           ;main_014_Practice_CCP Comparacion_ADC.c: 238: potenciaReactiva=sqrt(temp);
  2106  0019B0  C1AB  F0C0         	movff	main@temp,sqrt@a
  2107  0019B4  C1AC  F0C1         	movff	main@temp+1,sqrt@a+1
  2108  0019B8  C1AD  F0C2         	movff	main@temp+2,sqrt@a+2
  2109  0019BC  EC72  F012         	call	_sqrt	;wreg free
  2110  0019C0  C0C0  F1BA         	movff	?_sqrt,main@potenciaReactiva
  2111  0019C4  C0C1  F1BB         	movff	?_sqrt+1,main@potenciaReactiva+1
  2112  0019C8  C0C2  F1BC         	movff	?_sqrt+2,main@potenciaReactiva+2
  2113                           
  2114                           ;main_014_Practice_CCP Comparacion_ADC.c: 239: sprintf(buffer4,"%0.2fVAR",potenciaReacti
      +                          va );
  2115  0019CC  0E41               	movlw	low _buffer4
  2116  0019CE  0100               	movlb	0	; () banked
  2117  0019D0  6FB1               	movwf	sprintf@sp& (0+255),b
  2118  0019D2  0E00               	movlw	high _buffer4
  2119  0019D4  6FB2               	movwf	(sprintf@sp+1)& (0+255),b
  2120  0019D6  0EAE               	movlw	low STR_8
  2121  0019D8  6FB3               	movwf	sprintf@f& (0+255),b
  2122  0019DA  0E08               	movlw	high STR_8
  2123  0019DC  6FB4               	movwf	(sprintf@f+1)& (0+255),b
  2124  0019DE  C1BA  F0B5         	movff	main@potenciaReactiva,?_sprintf+4
  2125  0019E2  C1BB  F0B6         	movff	main@potenciaReactiva+1,?_sprintf+5
  2126  0019E6  C1BC  F0B7         	movff	main@potenciaReactiva+2,?_sprintf+6
  2127  0019EA  EC6D  F004         	call	_sprintf	;wreg free
  2128                           
  2129                           ;main_014_Practice_CCP Comparacion_ADC.c: 240: Lcd_Out2(2, 8, buffer4);
  2130  0019EE  0E08               	movlw	8
  2131  0019F0  0100               	movlb	0	; () banked
  2132  0019F2  6F63               	movwf	Lcd_Out2@x& (0+255),b
  2133  0019F4  0E41               	movlw	low _buffer4
  2134  0019F6  6F64               	movwf	Lcd_Out2@buffer& (0+255),b
  2135  0019F8  0E00               	movlw	high _buffer4
  2136  0019FA  6F65               	movwf	(Lcd_Out2@buffer+1)& (0+255),b
  2137  0019FC  0E02               	movlw	2
  2138  0019FE  EC00  F01B         	call	_Lcd_Out2
  2139                           
  2140                           ;main_014_Practice_CCP Comparacion_ADC.c: 242: _delay((unsigned long)((1000)*(48000000/4
      +                          000.0)));
  2141  001A02  0E3D               	movlw	61
  2142  001A04  0100               	movlb	0	; () banked
  2143  001A06  6FD8               	movwf	(??_main+1)& (0+255),b
  2144  001A08  0EE1               	movlw	225
  2145  001A0A  6FD7               	movwf	??_main& (0+255),b
  2146  001A0C  0E3F               	movlw	63
  2147  001A0E                     u4307:
  2148  001A0E  2EE8               	decfsz	wreg,f,c
  2149  001A10  D7FE               	bra	u4307
  2150  001A12  2FD7               	decfsz	??_main& (0+255),f,b
  2151  001A14  D7FC               	bra	u4307
  2152  001A16  2FD8               	decfsz	(??_main+1)& (0+255),f,b
  2153  001A18  D7FA               	bra	u4307
  2154  001A1A  D000               	nop2	
  2155                           
  2156                           ;main_014_Practice_CCP Comparacion_ADC.c: 243: Lcd_Cmd(1);
  2157  001A1C  0E01               	movlw	1
  2158  001A1E  EC10  F015         	call	_Lcd_Cmd
  2159  001A22  D5BB               	goto	l118
  2160  001A24                     __end_of_main:
  2161                           	opt stack 0
  2162                           tblptru	equ	0xFF8
  2163                           prodh	equ	0xFF4
  2164                           prodl	equ	0xFF3
  2165                           postinc0	equ	0xFEE
  2166                           wreg	equ	0xFE8
  2167                           postinc2	equ	0xFDE
  2168                           postdec2	equ	0xFDD
  2169                           fsr2h	equ	0xFDA
  2170                           fsr2l	equ	0xFD9
  2171                           status	equ	0xFD8
  2172                           
  2173 ;; *************** function _sqrt *****************
  2174 ;; Defined at:
  2175 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcsqrt.c"
  2176 ;; Parameters:    Size  Location     Type
  2177 ;;  a               3   96[BANK0 ] void 
  2178 ;; Auto vars:     Size  Location     Type
  2179 ;;  x               3  112[BANK0 ] void 
  2180 ;;  q               3  109[BANK0 ] void 
  2181 ;;  z               3  105[BANK0 ] void 
  2182 ;;  og              3  102[BANK0 ] void 
  2183 ;;  i               1  108[BANK0 ] unsigned char 
  2184 ;; Return value:  Size  Location     Type
  2185 ;;                  3   96[BANK0 ] unsigned char 
  2186 ;; Registers used:
  2187 ;;		wreg, status,2, status,0, cstack
  2188 ;; Tracked objects:
  2189 ;;		On entry : 0/0
  2190 ;;		On exit  : 0/0
  2191 ;;		Unchanged: 0/0
  2192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2193 ;;      Params:         0       3       0       0       0       0       0       0       0
  2194 ;;      Locals:         0      13       0       0       0       0       0       0       0
  2195 ;;      Temps:          0       3       0       0       0       0       0       0       0
  2196 ;;      Totals:         0      19       0       0       0       0       0       0       0
  2197 ;;Total ram usage:       19 bytes
  2198 ;; Hardware stack levels used:    1
  2199 ;; Hardware stack levels required when called:    6
  2200 ;; This function calls:
  2201 ;;		___ftge
  2202 ;;		___ftmul
  2203 ;;		___ftsub
  2204 ;; This function is called by:
  2205 ;;		_main
  2206 ;; This function uses a non-reentrant model
  2207 ;;
  2208                           
  2209                           	psect	text1
  2210  0024E4                     __ptext1:
  2211                           	opt stack 0
  2212  0024E4                     _sqrt:
  2213                           	opt stack 24
  2214                           
  2215                           ;incstack = 0
  2216  0024E4  0E00               	movlw	0
  2217  0024E6  0100               	movlb	0	; () banked
  2218  0024E8  6F60               	movwf	___ftge@ff1& (0+255),b
  2219  0024EA  0E00               	movlw	0
  2220  0024EC  6F61               	movwf	(___ftge@ff1+1)& (0+255),b
  2221  0024EE  0E00               	movlw	0
  2222  0024F0  6F62               	movwf	(___ftge@ff1+2)& (0+255),b
  2223  0024F2  C0C0  F063         	movff	sqrt@a,___ftge@ff2
  2224  0024F6  C0C1  F064         	movff	sqrt@a+1,___ftge@ff2+1
  2225  0024FA  C0C2  F065         	movff	sqrt@a+2,___ftge@ff2+2
  2226  0024FE  EC4C  F01B         	call	___ftge	;wreg free
  2227  002502  0100               	movlb	0	; () banked
  2228  002504  A0D8               	btfss	status,0,c
  2229  002506  D00D               	goto	l886
  2230                           
  2231                           ; BSR set to: 0
  2232  002508  AFC2               	btfss	(sqrt@a+2)& (0+255),7,b
  2233  00250A  D004               	goto	l887
  2234                           
  2235                           ; BSR set to: 0
  2236  00250C  0E00               	movlw	0
  2237  00250E  6FDA               	movwf	(_errno+1)& (0+255),b
  2238  002510  0E21               	movlw	33
  2239  002512  6FD9               	movwf	_errno& (0+255),b
  2240  002514                     l887:
  2241                           
  2242                           ; BSR set to: 0
  2243  002514  0E00               	movlw	0
  2244  002516  6FC0               	movwf	?_sqrt& (0+255),b
  2245  002518  0E00               	movlw	0
  2246  00251A  6FC1               	movwf	(?_sqrt+1)& (0+255),b
  2247  00251C  0E00               	movlw	0
  2248  00251E  6FC2               	movwf	(?_sqrt+2)& (0+255),b
  2249                           
  2250                           ; BSR set to: 0
  2251  002520  0012               	return	
  2252  002522                     l886:
  2253                           
  2254                           ; BSR set to: 0
  2255  002522  C0C0  F0C9         	movff	sqrt@a,sqrt@z
  2256  002526  C0C1  F0CA         	movff	sqrt@a+1,sqrt@z+1
  2257  00252A  C0C2  F0CB         	movff	sqrt@a+2,sqrt@z+2
  2258                           
  2259                           ; BSR set to: 0
  2260  00252E  C0C0  F0C3         	movff	sqrt@a,??_sqrt
  2261  002532  C0C1  F0C4         	movff	sqrt@a+1,??_sqrt+1
  2262  002536  C0C2  F0C5         	movff	sqrt@a+2,??_sqrt+2
  2263  00253A  1FC3               	comf	??_sqrt& (0+255),f,b
  2264  00253C  1FC4               	comf	(??_sqrt+1)& (0+255),f,b
  2265  00253E  1FC5               	comf	(??_sqrt+2)& (0+255),f,b
  2266  002540  2BC3               	incf	??_sqrt& (0+255),f,b
  2267  002542  0E00               	movlw	0
  2268  002544  23C4               	addwfc	(??_sqrt+1)& (0+255),f,b
  2269  002546  23C5               	addwfc	(??_sqrt+2)& (0+255),f,b
  2270  002548  0EC8               	movlw	200
  2271  00254A  25C3               	addwf	??_sqrt& (0+255),w,b
  2272  00254C  6FD0               	movwf	sqrt@x& (0+255),b
  2273  00254E  0E6E               	movlw	110
  2274  002550  21C4               	addwfc	(??_sqrt+1)& (0+255),w,b
  2275  002552  6FD1               	movwf	(sqrt@x+1)& (0+255),b
  2276  002554  0EBE               	movlw	190
  2277  002556  21C5               	addwfc	(??_sqrt+2)& (0+255),w,b
  2278  002558  6FD2               	movwf	(sqrt@x+2)& (0+255),b
  2279                           
  2280                           ; BSR set to: 0
  2281  00255A  90D8               	bcf	status,0,c
  2282  00255C  33D2               	rrcf	(sqrt@x+2)& (0+255),f,b
  2283  00255E  33D1               	rrcf	(sqrt@x+1)& (0+255),f,b
  2284  002560  33D0               	rrcf	sqrt@x& (0+255),f,b
  2285                           
  2286                           ; BSR set to: 0
  2287  002562  0E00               	movlw	0
  2288  002564  5FC9               	subwf	sqrt@z& (0+255),f,b
  2289  002566  0E80               	movlw	128
  2290  002568  5BCA               	subwfb	(sqrt@z+1)& (0+255),f,b
  2291  00256A  0E00               	movlw	0
  2292  00256C  5BCB               	subwfb	(sqrt@z+2)& (0+255),f,b
  2293                           
  2294                           ; BSR set to: 0
  2295  00256E  0E04               	movlw	4
  2296  002570  6FCC               	movwf	sqrt@i& (0+255),b
  2297  002572                     
  2298                           ; BSR set to: 0
  2299                           
  2300                           ; BSR set to: 0
  2301  002572  C0D0  F0C6         	movff	sqrt@x,sqrt@og
  2302  002576  C0D1  F0C7         	movff	sqrt@x+1,sqrt@og+1
  2303  00257A  C0D2  F0C8         	movff	sqrt@x+2,sqrt@og+2
  2304                           
  2305                           ; BSR set to: 0
  2306  00257E  C0D0  F074         	movff	sqrt@x,___ftmul@f1
  2307  002582  C0D1  F075         	movff	sqrt@x+1,___ftmul@f1+1
  2308  002586  C0D2  F076         	movff	sqrt@x+2,___ftmul@f1+2
  2309  00258A  C0C9  F077         	movff	sqrt@z,___ftmul@f2
  2310  00258E  C0CA  F078         	movff	sqrt@z+1,___ftmul@f2+1
  2311  002592  C0CB  F079         	movff	sqrt@z+2,___ftmul@f2+2
  2312  002596  EC3C  F017         	call	___ftmul	;wreg free
  2313  00259A  C074  F0CD         	movff	?___ftmul,sqrt@q
  2314  00259E  C075  F0CE         	movff	?___ftmul+1,sqrt@q+1
  2315  0025A2  C076  F0CF         	movff	?___ftmul+2,sqrt@q+2
  2316  0025A6  C0CD  F074         	movff	sqrt@q,___ftmul@f1
  2317  0025AA  C0CE  F075         	movff	sqrt@q+1,___ftmul@f1+1
  2318  0025AE  C0CF  F076         	movff	sqrt@q+2,___ftmul@f1+2
  2319  0025B2  C0D0  F077         	movff	sqrt@x,___ftmul@f2
  2320  0025B6  C0D1  F078         	movff	sqrt@x+1,___ftmul@f2+1
  2321  0025BA  C0D2  F079         	movff	sqrt@x+2,___ftmul@f2+2
  2322  0025BE  EC3C  F017         	call	___ftmul	;wreg free
  2323  0025C2  C074  F0CD         	movff	?___ftmul,sqrt@q
  2324  0025C6  C075  F0CE         	movff	?___ftmul+1,sqrt@q+1
  2325  0025CA  C076  F0CF         	movff	?___ftmul+2,sqrt@q+2
  2326  0025CE  C0CD  F074         	movff	sqrt@q,___ftmul@f1
  2327  0025D2  C0CE  F075         	movff	sqrt@q+1,___ftmul@f1+1
  2328  0025D6  C0CF  F076         	movff	sqrt@q+2,___ftmul@f1+2
  2329  0025DA  C0D0  F077         	movff	sqrt@x,___ftmul@f2
  2330  0025DE  C0D1  F078         	movff	sqrt@x+1,___ftmul@f2+1
  2331  0025E2  C0D2  F079         	movff	sqrt@x+2,___ftmul@f2+2
  2332  0025E6  EC3C  F017         	call	___ftmul	;wreg free
  2333  0025EA  C074  F0CD         	movff	?___ftmul,sqrt@q
  2334  0025EE  C075  F0CE         	movff	?___ftmul+1,sqrt@q+1
  2335  0025F2  C076  F0CF         	movff	?___ftmul+2,sqrt@q+2
  2336  0025F6  C0D0  F074         	movff	sqrt@x,___ftmul@f1
  2337  0025FA  C0D1  F075         	movff	sqrt@x+1,___ftmul@f1+1
  2338  0025FE  C0D2  F076         	movff	sqrt@x+2,___ftmul@f1+2
  2339  002602  0E00               	movlw	0
  2340  002604  0100               	movlb	0	; () banked
  2341  002606  6F77               	movwf	___ftmul@f2& (0+255),b
  2342  002608  0EC0               	movlw	192
  2343  00260A  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  2344  00260C  0E3F               	movlw	63
  2345  00260E  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  2346  002610  EC3C  F017         	call	___ftmul	;wreg free
  2347  002614  C074  F0D0         	movff	?___ftmul,sqrt@x
  2348  002618  C075  F0D1         	movff	?___ftmul+1,sqrt@x+1
  2349  00261C  C076  F0D2         	movff	?___ftmul+2,sqrt@x+2
  2350  002620  C0D0  F0AB         	movff	sqrt@x,___ftsub@f1
  2351  002624  C0D1  F0AC         	movff	sqrt@x+1,___ftsub@f1+1
  2352  002628  C0D2  F0AD         	movff	sqrt@x+2,___ftsub@f1+2
  2353  00262C  C0CD  F0AE         	movff	sqrt@q,___ftsub@f2
  2354  002630  C0CE  F0AF         	movff	sqrt@q+1,___ftsub@f2+1
  2355  002634  C0CF  F0B0         	movff	sqrt@q+2,___ftsub@f2+2
  2356  002638  EC53  F01D         	call	___ftsub	;wreg free
  2357  00263C  C0AB  F0D0         	movff	?___ftsub,sqrt@x
  2358  002640  C0AC  F0D1         	movff	?___ftsub+1,sqrt@x+1
  2359  002644  C0AD  F0D2         	movff	?___ftsub+2,sqrt@x+2
  2360  002648  0100               	movlb	0	; () banked
  2361  00264A  2FCC               	decfsz	sqrt@i& (0+255),f,b
  2362  00264C  D792               	goto	l889
  2363                           
  2364                           ; BSR set to: 0
  2365                           
  2366                           ; BSR set to: 0
  2367  00264E  C0D0  F074         	movff	sqrt@x,___ftmul@f1
  2368  002652  C0D1  F075         	movff	sqrt@x+1,___ftmul@f1+1
  2369  002656  C0D2  F076         	movff	sqrt@x+2,___ftmul@f1+2
  2370  00265A  C0C0  F077         	movff	sqrt@a,___ftmul@f2
  2371  00265E  C0C1  F078         	movff	sqrt@a+1,___ftmul@f2+1
  2372  002662  C0C2  F079         	movff	sqrt@a+2,___ftmul@f2+2
  2373  002666  EC3C  F017         	call	___ftmul	;wreg free
  2374  00266A  C074  F0C0         	movff	?___ftmul,?_sqrt
  2375  00266E  C075  F0C1         	movff	?___ftmul+1,?_sqrt+1
  2376  002672  C076  F0C2         	movff	?___ftmul+2,?_sqrt+2
  2377  002676  0012               	return	
  2378  002678                     __end_of_sqrt:
  2379                           	opt stack 0
  2380                           tblptru	equ	0xFF8
  2381                           prodh	equ	0xFF4
  2382                           prodl	equ	0xFF3
  2383                           postinc0	equ	0xFEE
  2384                           wreg	equ	0xFE8
  2385                           postinc2	equ	0xFDE
  2386                           postdec2	equ	0xFDD
  2387                           fsr2h	equ	0xFDA
  2388                           fsr2l	equ	0xFD9
  2389                           status	equ	0xFD8
  2390                           
  2391 ;; *************** function _sprintf *****************
  2392 ;; Defined at:
  2393 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  2394 ;; Parameters:    Size  Location     Type
  2395 ;;  sp              2   81[BANK0 ] PTR unsigned char 
  2396 ;;		 -> buffer4(20), buffer3(20), buffer2(20), main@buffer1(16), 
  2397 ;;  f               2   83[BANK0 ] PTR const unsigned char 
  2398 ;;		 -> STR_8(9), STR_7(8), STR_6(9), STR_5(9), 
  2399 ;;		 -> STR_3(8), STR_2(15), STR_1(13), 
  2400 ;; Auto vars:     Size  Location     Type
  2401 ;;  val             4  103[BANK0 ] unsigned long 
  2402 ;;  tmpval          4   99[BANK0 ] struct .
  2403 ;;  fval            3  113[BANK0 ] struct .
  2404 ;;  cp              3    0        PTR const unsigned char 
  2405 ;;  prec            2  116[BANK0 ] int 
  2406 ;;  width           2  111[BANK0 ] int 
  2407 ;;  flag            2  109[BANK0 ] unsigned short 
  2408 ;;  exp             2  107[BANK0 ] int 
  2409 ;;  ap              2   97[BANK0 ] PTR void [1]
  2410 ;;		 -> ?_sprintf(2), 
  2411 ;;  len             2    0        unsigned int 
  2412 ;;  c               1  118[BANK0 ] char 
  2413 ;;  d               1    0        unsigned char 
  2414 ;; Return value:  Size  Location     Type
  2415 ;;                  2   81[BANK0 ] int 
  2416 ;; Registers used:
  2417 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2418 ;; Tracked objects:
  2419 ;;		On entry : 0/0
  2420 ;;		On exit  : 0/0
  2421 ;;		Unchanged: 0/0
  2422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2423 ;;      Params:         0       7       0       0       0       0       0       0       0
  2424 ;;      Locals:         0      25       0       0       0       0       0       0       0
  2425 ;;      Temps:          0       6       0       0       0       0       0       0       0
  2426 ;;      Totals:         0      38       0       0       0       0       0       0       0
  2427 ;;Total ram usage:       38 bytes
  2428 ;; Hardware stack levels used:    1
  2429 ;; Hardware stack levels required when called:    6
  2430 ;; This function calls:
  2431 ;;		___awdiv
  2432 ;;		___ftadd
  2433 ;;		___ftge
  2434 ;;		___ftmul
  2435 ;;		___ftneg
  2436 ;;		___ftsub
  2437 ;;		___fttol
  2438 ;;		___lldiv
  2439 ;;		___llmod
  2440 ;;		___lltoft
  2441 ;;		___wmul
  2442 ;;		__div_to_l_
  2443 ;;		__tdiv_to_l_
  2444 ;;		_fround
  2445 ;;		_isdigit
  2446 ;;		_scale
  2447 ;; This function is called by:
  2448 ;;		_main
  2449 ;; This function uses a non-reentrant model
  2450 ;;
  2451                           
  2452                           	psect	text2
  2453  0008DA                     __ptext2:
  2454                           	opt stack 0
  2455  0008DA                     _sprintf:
  2456                           	opt stack 24
  2457                           
  2458                           ;doprnt.c: 494: va_list ap;
  2459                           ;doprnt.c: 499: signed char c;
  2460                           ;doprnt.c: 501: int width;
  2461                           ;doprnt.c: 504: int prec;
  2462                           ;doprnt.c: 508: unsigned short flag;
  2463                           ;doprnt.c: 515: char d;
  2464                           ;doprnt.c: 516: double fval;
  2465                           ;doprnt.c: 517: int exp;
  2466                           ;doprnt.c: 523: union {
  2467                           ;doprnt.c: 524: unsigned long vd;
  2468                           ;doprnt.c: 525: double integ;
  2469                           ;doprnt.c: 526: } tmpval;
  2470                           ;doprnt.c: 528: unsigned long val;
  2471                           ;doprnt.c: 529: unsigned len;
  2472                           ;doprnt.c: 530: const char * cp;
  2473                           ;doprnt.c: 533: *ap = __va_start();
  2474                           
  2475                           ;incstack = 0
  2476  0008DA  0EB5               	movlw	low (?_sprintf+4)
  2477  0008DC  0100               	movlb	0	; () banked
  2478  0008DE  6FC1               	movwf	sprintf@ap& (0+255),b
  2479  0008E0  0E00               	movlw	high (?_sprintf+4)
  2480  0008E2  6FC2               	movwf	(sprintf@ap+1)& (0+255),b
  2481                           
  2482                           ;doprnt.c: 536: while(c = *f++) {
  2483  0008E4  EF96  F009         	goto	u3990
  2484  0008E8                     
  2485                           ; BSR set to: 0
  2486                           ;doprnt.c: 538: if(c != '%')
  2487                           
  2488                           ; BSR set to: 0
  2489  0008E8  0E25               	movlw	37
  2490  0008EA  19D6               	xorwf	sprintf@c& (0+255),w,b
  2491  0008EC  B4D8               	btfsc	status,2,c
  2492  0008EE  D00A               	goto	l172
  2493                           
  2494                           ; BSR set to: 0
  2495                           ;doprnt.c: 540: {
  2496                           ;doprnt.c: 541: ((*sp++ = (c)));
  2497  0008F0  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  2498  0008F4  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  2499  0008F8  C0D6  FFDF         	movff	sprintf@c,indf2
  2500                           
  2501                           ; BSR set to: 0
  2502  0008FC  4BB1               	infsnz	sprintf@sp& (0+255),f,b
  2503  0008FE  2BB2               	incf	(sprintf@sp+1)& (0+255),f,b
  2504                           
  2505                           ;doprnt.c: 542: continue;
  2506  000900  EF96  F009         	goto	u3990
  2507  000904                     l172:
  2508                           
  2509                           ; BSR set to: 0
  2510                           ;doprnt.c: 543: }
  2511                           ;doprnt.c: 546: width = 0;
  2512                           
  2513                           ; BSR set to: 0
  2514  000904  0E00               	movlw	0
  2515  000906  6FD0               	movwf	(sprintf@width+1)& (0+255),b
  2516  000908  0E00               	movlw	0
  2517  00090A  6FCF               	movwf	sprintf@width& (0+255),b
  2518                           
  2519                           ;doprnt.c: 548: flag = 0;
  2520  00090C  0E00               	movlw	0
  2521  00090E  6FCE               	movwf	(sprintf@flag+1)& (0+255),b
  2522  000910  0E00               	movlw	0
  2523  000912  6FCD               	movwf	sprintf@flag& (0+255),b
  2524                           
  2525                           ; BSR set to: 0
  2526                           ;doprnt.c: 551: switch(*f) {
  2527                           
  2528                           ;doprnt.c: 550: for(;;) {
  2529  000914  D004               	goto	l174
  2530  000916                     
  2531                           ;doprnt.c: 580: flag |= 0x04;
  2532                           
  2533                           ; BSR set to: 0
  2534  000916  0100               	movlb	0	; () banked
  2535  000918  85CD               	bsf	sprintf@flag& (0+255),2,b
  2536                           
  2537                           ;doprnt.c: 581: f++;
  2538  00091A  4BB3               	infsnz	sprintf@f& (0+255),f,b
  2539  00091C  2BB4               	incf	(sprintf@f+1)& (0+255),f,b
  2540  00091E                     l174:
  2541                           
  2542                           ; BSR set to: 0
  2543  00091E  C0B3  FFF6         	movff	sprintf@f,tblptrl
  2544  000922  C0B4  FFF7         	movff	sprintf@f+1,tblptrh
  2545  000926                     	if	0	;tblptru may be non-zero
  2546  000926                     	endif
  2547  000926                     	if	0	;tblptru may be non-zero
  2548  000926                     	endif
  2549  000926  0008               	tblrd		*
  2550  000928  50F5               	movf	tablat,w,c
  2551                           
  2552                           ; Switch size 1, requested type "space"
  2553                           ; Number of cases is 1, Range of values is 48 to 48
  2554                           ; switch strategies available:
  2555                           ; Name         Instructions Cycles
  2556                           ; simple_byte            4     3 (average)
  2557                           ;	Chosen strategy is simple_byte
  2558  00092A  0A30               	xorlw	48	; case 48
  2559  00092C  B4D8               	btfsc	status,2,c
  2560  00092E  D7F3               	goto	l175
  2561                           
  2562                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2563                           
  2564                           ;doprnt.c: 586: }
  2565                           
  2566                           ;doprnt.c: 585: break;
  2567  000930  C0B3  FFF6         	movff	sprintf@f,tblptrl
  2568  000934  C0B4  FFF7         	movff	sprintf@f+1,tblptrh
  2569  000938                     	if	0	;tblptru may be non-zero
  2570  000938                     	endif
  2571  000938                     	if	0	;tblptru may be non-zero
  2572  000938                     	endif
  2573  000938  0008               	tblrd		*
  2574  00093A  50F5               	movf	tablat,w,c
  2575  00093C  ECDF  F01D         	call	_isdigit
  2576  000940  A0D8               	btfss	status,0,c
  2577  000942  D035               	goto	u3460
  2578                           
  2579                           ;doprnt.c: 598: width = 0;
  2580  000944  0E00               	movlw	0
  2581  000946  0100               	movlb	0	; () banked
  2582  000948  6FD0               	movwf	(sprintf@width+1)& (0+255),b
  2583  00094A  0E00               	movlw	0
  2584  00094C  6FCF               	movwf	sprintf@width& (0+255),b
  2585  00094E                     
  2586                           ;doprnt.c: 600: width *= 10;
  2587                           
  2588                           ; BSR set to: 0
  2589  00094E  C0CF  F06E         	movff	sprintf@width,___wmul@multiplier
  2590  000952  C0D0  F06F         	movff	sprintf@width+1,___wmul@multiplier+1
  2591  000956  0E00               	movlw	0
  2592  000958  0100               	movlb	0	; () banked
  2593  00095A  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2594  00095C  0E0A               	movlw	10
  2595  00095E  6F70               	movwf	___wmul@multiplicand& (0+255),b
  2596  000960  EC93  F01D         	call	___wmul	;wreg free
  2597  000964  C06E  F0CF         	movff	?___wmul,sprintf@width
  2598  000968  C06F  F0D0         	movff	?___wmul+1,sprintf@width+1
  2599                           
  2600                           ;doprnt.c: 601: width += *f++ - '0';
  2601  00096C  0ED0               	movlw	208
  2602  00096E  0100               	movlb	0	; () banked
  2603  000970  6FB8               	movwf	??_sprintf& (0+255),b
  2604  000972  0EFF               	movlw	255
  2605  000974  6FB9               	movwf	(??_sprintf+1)& (0+255),b
  2606  000976  C0B3  FFF6         	movff	sprintf@f,tblptrl
  2607  00097A  C0B4  FFF7         	movff	sprintf@f+1,tblptrh
  2608  00097E                     	if	0	;tblptru may be non-zero
  2609  00097E                     	endif
  2610  00097E                     	if	0	;tblptru may be non-zero
  2611  00097E                     	endif
  2612  00097E  0008               	tblrd		*
  2613  000980  50F5               	movf	tablat,w,c
  2614  000982  6FBA               	movwf	(??_sprintf+2)& (0+255),b
  2615  000984  6BBB               	clrf	(??_sprintf+3)& (0+255),b
  2616  000986  51B8               	movf	??_sprintf& (0+255),w,b
  2617  000988  27BA               	addwf	(??_sprintf+2)& (0+255),f,b
  2618  00098A  51B9               	movf	(??_sprintf+1)& (0+255),w,b
  2619  00098C  23BB               	addwfc	(??_sprintf+3)& (0+255),f,b
  2620  00098E  51BA               	movf	(??_sprintf+2)& (0+255),w,b
  2621  000990  27CF               	addwf	sprintf@width& (0+255),f,b
  2622  000992  51BB               	movf	(??_sprintf+3)& (0+255),w,b
  2623  000994  23D0               	addwfc	(sprintf@width+1)& (0+255),f,b
  2624                           
  2625                           ; BSR set to: 0
  2626  000996  4BB3               	infsnz	sprintf@f& (0+255),f,b
  2627  000998  2BB4               	incf	(sprintf@f+1)& (0+255),f,b
  2628                           
  2629                           ; BSR set to: 0
  2630                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2631  00099A  C0B3  FFF6         	movff	sprintf@f,tblptrl
  2632  00099E  C0B4  FFF7         	movff	sprintf@f+1,tblptrh
  2633  0009A2                     	if	0	;tblptru may be non-zero
  2634  0009A2                     	endif
  2635  0009A2                     	if	0	;tblptru may be non-zero
  2636  0009A2                     	endif
  2637  0009A2  0008               	tblrd		*
  2638  0009A4  50F5               	movf	tablat,w,c
  2639  0009A6  ECDF  F01D         	call	_isdigit
  2640  0009AA  B0D8               	btfsc	status,0,c
  2641  0009AC  D7D0               	goto	l180
  2642  0009AE                     u3460:
  2643                           
  2644                           ;doprnt.c: 608: }
  2645                           ;doprnt.c: 611: if(*f == '.') {
  2646  0009AE  C0B3  FFF6         	movff	sprintf@f,tblptrl
  2647  0009B2  C0B4  FFF7         	movff	sprintf@f+1,tblptrh
  2648  0009B6                     	if	0	;tblptru may be non-zero
  2649  0009B6                     	endif
  2650  0009B6                     	if	0	;tblptru may be non-zero
  2651  0009B6                     	endif
  2652  0009B6  0008               	tblrd		*
  2653  0009B8  50F5               	movf	tablat,w,c
  2654  0009BA  0A2E               	xorlw	46
  2655  0009BC  A4D8               	btfss	status,2,c
  2656  0009BE  D031               	goto	l182
  2657                           
  2658                           ;doprnt.c: 612: flag |= 0x4000;
  2659  0009C0  0100               	movlb	0	; () banked
  2660  0009C2  8DCE               	bsf	(sprintf@flag+1)& (0+255),6,b
  2661                           
  2662                           ;doprnt.c: 613: f++;
  2663  0009C4  4BB3               	infsnz	sprintf@f& (0+255),f,b
  2664  0009C6  2BB4               	incf	(sprintf@f+1)& (0+255),f,b
  2665                           
  2666                           ; BSR set to: 0
  2667                           ;doprnt.c: 620: {
  2668                           ;doprnt.c: 621: prec = 0;
  2669  0009C8  0E00               	movlw	0
  2670  0009CA  6FD5               	movwf	(sprintf@prec+1)& (0+255),b
  2671  0009CC  0E00               	movlw	0
  2672  0009CE  6FD4               	movwf	sprintf@prec& (0+255),b
  2673                           
  2674                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  2675  0009D0  D01D               	goto	l183
  2676  0009D2                     
  2677                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  2678                           
  2679                           ; BSR set to: 0
  2680  0009D2  C0D4  F06E         	movff	sprintf@prec,___wmul@multiplier
  2681  0009D6  C0D5  F06F         	movff	sprintf@prec+1,___wmul@multiplier+1
  2682  0009DA  0E00               	movlw	0
  2683  0009DC  0100               	movlb	0	; () banked
  2684  0009DE  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2685  0009E0  0E0A               	movlw	10
  2686  0009E2  6F70               	movwf	___wmul@multiplicand& (0+255),b
  2687  0009E4  EC93  F01D         	call	___wmul	;wreg free
  2688  0009E8  C0B3  FFF6         	movff	sprintf@f,tblptrl
  2689  0009EC  C0B4  FFF7         	movff	sprintf@f+1,tblptrh
  2690  0009F0                     	if	0	;tblptru may be non-zero
  2691  0009F0                     	endif
  2692  0009F0                     	if	0	;tblptru may be non-zero
  2693  0009F0                     	endif
  2694  0009F0  0008               	tblrd		*
  2695  0009F2  50F5               	movf	tablat,w,c
  2696  0009F4  0100               	movlb	0	; () banked
  2697  0009F6  276E               	addwf	?___wmul& (0+255),f,b
  2698  0009F8  0E00               	movlw	0
  2699  0009FA  236F               	addwfc	(?___wmul+1)& (0+255),f,b
  2700  0009FC  0ED0               	movlw	208
  2701  0009FE  256E               	addwf	?___wmul& (0+255),w,b
  2702  000A00  6FD4               	movwf	sprintf@prec& (0+255),b
  2703  000A02  0EFF               	movlw	255
  2704  000A04  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  2705  000A06  6FD5               	movwf	(sprintf@prec+1)& (0+255),b
  2706                           
  2707                           ; BSR set to: 0
  2708  000A08  4BB3               	infsnz	sprintf@f& (0+255),f,b
  2709  000A0A  2BB4               	incf	(sprintf@f+1)& (0+255),f,b
  2710  000A0C                     l183:
  2711                           
  2712                           ; BSR set to: 0
  2713                           
  2714                           ; BSR set to: 0
  2715  000A0C  C0B3  FFF6         	movff	sprintf@f,tblptrl
  2716  000A10  C0B4  FFF7         	movff	sprintf@f+1,tblptrh
  2717  000A14                     	if	0	;tblptru may be non-zero
  2718  000A14                     	endif
  2719  000A14                     	if	0	;tblptru may be non-zero
  2720  000A14                     	endif
  2721  000A14  0008               	tblrd		*
  2722  000A16  50F5               	movf	tablat,w,c
  2723  000A18  ECDF  F01D         	call	_isdigit
  2724  000A1C  A0D8               	btfss	status,0,c
  2725  000A1E  D00A               	goto	l187
  2726  000A20  D7D8               	goto	l184
  2727  000A22                     l182:
  2728                           
  2729                           ;doprnt.c: 626: prec = 0;
  2730  000A22  0E00               	movlw	0
  2731  000A24  0100               	movlb	0	; () banked
  2732  000A26  6FD5               	movwf	(sprintf@prec+1)& (0+255),b
  2733  000A28  0E00               	movlw	0
  2734  000A2A  6FD4               	movwf	sprintf@prec& (0+255),b
  2735                           
  2736                           ; BSR set to: 0
  2737                           ;doprnt.c: 628: flag |= 0x1000;
  2738  000A2C  89CE               	bsf	(sprintf@flag+1)& (0+255),4,b
  2739                           
  2740                           ; BSR set to: 0
  2741                           ;doprnt.c: 630: }
  2742                           ;doprnt.c: 635: switch(c = *f++) {
  2743  000A2E  D002               	goto	l187
  2744  000A30                     
  2745                           ; BSR set to: 0
  2746                           ;doprnt.c: 663: flag |= 0x400;
  2747                           
  2748                           ; BSR set to: 0
  2749  000A30  85CE               	bsf	(sprintf@flag+1)& (0+255),2,b
  2750                           
  2751                           ; BSR set to: 0
  2752                           ;doprnt.c: 698: case 'i':
  2753                           ;doprnt.c: 699: break;
  2754                           
  2755                           ; BSR set to: 0
  2756                           
  2757                           ;doprnt.c: 697: case 'd':
  2758                           
  2759                           ;doprnt.c: 664: break;
  2760  000A32  D019               	goto	l191
  2761  000A34                     l187:
  2762                           
  2763                           ; BSR set to: 0
  2764  000A34  C0B3  FFF6         	movff	sprintf@f,tblptrl
  2765  000A38  C0B4  FFF7         	movff	sprintf@f+1,tblptrh
  2766  000A3C  0100               	movlb	0	; () banked
  2767  000A3E  4BB3               	infsnz	sprintf@f& (0+255),f,b
  2768  000A40  2BB4               	incf	(sprintf@f+1)& (0+255),f,b
  2769  000A42                     	if	0	;tblptru may be non-zero
  2770  000A42                     	endif
  2771  000A42                     	if	0	;tblptru may be non-zero
  2772  000A42                     	endif
  2773  000A42  0008               	tblrd		*
  2774  000A44  CFF5 F0D6          	movff	tablat,sprintf@c
  2775  000A48  51D6               	movf	sprintf@c& (0+255),w,b
  2776                           
  2777                           ; Switch size 1, requested type "space"
  2778                           ; Number of cases is 4, Range of values is 0 to 105
  2779                           ; switch strategies available:
  2780                           ; Name         Instructions Cycles
  2781                           ; simple_byte           13     7 (average)
  2782                           ;	Chosen strategy is simple_byte
  2783  000A4A  0A00               	xorlw	0	; case 0
  2784  000A4C  B4D8               	btfsc	status,2,c
  2785  000A4E  EFA3  F009         	goto	u4000
  2786  000A52  0A64               	xorlw	100	; case 100
  2787  000A54  B4D8               	btfsc	status,2,c
  2788  000A56  D007               	goto	l191
  2789  000A58  0A02               	xorlw	2	; case 102
  2790  000A5A  B4D8               	btfsc	status,2,c
  2791  000A5C  D7E9               	goto	l190
  2792  000A5E  0A0F               	xorlw	15	; case 105
  2793  000A60  A4D8               	btfss	status,2,c
  2794  000A62  EF96  F009         	goto	u3990
  2795  000A66                     l191:
  2796                           
  2797                           ; BSR set to: 0
  2798                           ;doprnt.c: 825: if(flag & (0x700)) {
  2799                           
  2800                           ; BSR set to: 0
  2801  000A66  0E07               	movlw	7
  2802  000A68  15CE               	andwf	(sprintf@flag+1)& (0+255),w,b
  2803  000A6A  B4D8               	btfsc	status,2,c
  2804  000A6C  D329               	goto	l195
  2805                           
  2806                           ; BSR set to: 0
  2807                           ;doprnt.c: 827: if(flag & 0x1000)
  2808  000A6E  A9CE               	btfss	(sprintf@flag+1)& (0+255),4,b
  2809  000A70  D004               	goto	l196
  2810                           
  2811                           ; BSR set to: 0
  2812                           ;doprnt.c: 829: prec = 6;
  2813  000A72  0E00               	movlw	0
  2814  000A74  6FD5               	movwf	(sprintf@prec+1)& (0+255),b
  2815  000A76  0E06               	movlw	6
  2816  000A78  6FD4               	movwf	sprintf@prec& (0+255),b
  2817  000A7A                     l196:
  2818                           
  2819                           ; BSR set to: 0
  2820                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  2821                           
  2822                           ; BSR set to: 0
  2823  000A7A  C0C1  FFD9         	movff	sprintf@ap,fsr2l
  2824  000A7E  C0C2  FFDA         	movff	sprintf@ap+1,fsr2h
  2825  000A82  CFDE F0D1          	movff	postinc2,sprintf@fval
  2826  000A86  CFDE F0D2          	movff	postinc2,sprintf@fval+1
  2827  000A8A  CFDD F0D3          	movff	postdec2,sprintf@fval+2
  2828                           
  2829                           ; BSR set to: 0
  2830  000A8E  0E03               	movlw	3
  2831  000A90  27C1               	addwf	sprintf@ap& (0+255),f,b
  2832  000A92  0E00               	movlw	0
  2833  000A94  23C2               	addwfc	(sprintf@ap+1)& (0+255),f,b
  2834                           
  2835                           ; BSR set to: 0
  2836                           ;doprnt.c: 831: if(fval < 0.0) {
  2837  000A96  AFD3               	btfss	(sprintf@fval+2)& (0+255),7,b
  2838  000A98  D011               	goto	l197
  2839                           
  2840                           ; BSR set to: 0
  2841                           ;doprnt.c: 832: fval = -fval;
  2842  000A9A  C0D1  F083         	movff	sprintf@fval,___ftneg@f1
  2843  000A9E  C0D2  F084         	movff	sprintf@fval+1,___ftneg@f1+1
  2844  000AA2  C0D3  F085         	movff	sprintf@fval+2,___ftneg@f1+2
  2845  000AA6  ECA7  F01D         	call	___ftneg	;wreg free
  2846  000AAA  C083  F0D1         	movff	?___ftneg,sprintf@fval
  2847  000AAE  C084  F0D2         	movff	?___ftneg+1,sprintf@fval+1
  2848  000AB2  C085  F0D3         	movff	?___ftneg+2,sprintf@fval+2
  2849                           
  2850                           ;doprnt.c: 833: flag |= 0x03;
  2851  000AB6  0E03               	movlw	3
  2852  000AB8  0100               	movlb	0	; () banked
  2853  000ABA  13CD               	iorwf	sprintf@flag& (0+255),f,b
  2854  000ABC                     l197:
  2855                           
  2856                           ; BSR set to: 0
  2857                           ;doprnt.c: 834: }
  2858                           ;doprnt.c: 835: exp = 0;
  2859                           
  2860                           ; BSR set to: 0
  2861  000ABC  0E00               	movlw	0
  2862  000ABE  6FCC               	movwf	(sprintf@exp+1)& (0+255),b
  2863  000AC0  0E00               	movlw	0
  2864  000AC2  6FCB               	movwf	sprintf@exp& (0+255),b
  2865                           
  2866                           ; BSR set to: 0
  2867                           ;doprnt.c: 836: if( fval!=0) {
  2868  000AC4  51D1               	movf	sprintf@fval& (0+255),w,b
  2869  000AC6  11D2               	iorwf	(sprintf@fval+1)& (0+255),w,b
  2870  000AC8  11D3               	iorwf	(sprintf@fval+2)& (0+255),w,b
  2871  000ACA  B4D8               	btfsc	status,2,c
  2872  000ACC  D088               	goto	l202
  2873                           
  2874                           ; BSR set to: 0
  2875                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  2876  000ACE  0E82               	movlw	130
  2877  000AD0  6FB8               	movwf	??_sprintf& (0+255),b
  2878  000AD2  0EFF               	movlw	255
  2879  000AD4  6FB9               	movwf	(??_sprintf+1)& (0+255),b
  2880  000AD6  C0D1  F0BA         	movff	sprintf@fval,??_sprintf+2
  2881  000ADA  C0D2  F0BB         	movff	sprintf@fval+1,??_sprintf+3
  2882  000ADE  C0D3  F0BC         	movff	sprintf@fval+2,??_sprintf+4
  2883  000AE2  C0D4  F0BD         	movff	sprintf@fval+3,??_sprintf+5
  2884  000AE6  0E10               	movlw	16
  2885  000AE8  D005               	goto	u3530
  2886  000AEA                     u3535:
  2887  000AEA  90D8               	bcf	status,0,c
  2888  000AEC  33BD               	rrcf	(??_sprintf+5)& (0+255),f,b
  2889  000AEE  33BC               	rrcf	(??_sprintf+4)& (0+255),f,b
  2890  000AF0  33BB               	rrcf	(??_sprintf+3)& (0+255),f,b
  2891  000AF2  33BA               	rrcf	(??_sprintf+2)& (0+255),f,b
  2892  000AF4                     u3530:
  2893  000AF4  2EE8               	decfsz	wreg,f,c
  2894  000AF6  D7F9               	goto	u3535
  2895  000AF8  51BA               	movf	(??_sprintf+2)& (0+255),w,b
  2896  000AFA  25B8               	addwf	??_sprintf& (0+255),w,b
  2897  000AFC  6FCB               	movwf	sprintf@exp& (0+255),b
  2898  000AFE  0E00               	movlw	0
  2899  000B00  21B9               	addwfc	(??_sprintf+1)& (0+255),w,b
  2900  000B02  6FCC               	movwf	(sprintf@exp+1)& (0+255),b
  2901                           
  2902                           ; BSR set to: 0
  2903                           ;doprnt.c: 838: exp--;
  2904  000B04  07CB               	decf	sprintf@exp& (0+255),f,b
  2905  000B06  A0D8               	btfss	status,0,c
  2906  000B08  07CC               	decf	(sprintf@exp+1)& (0+255),f,b
  2907                           
  2908                           ; BSR set to: 0
  2909                           ;doprnt.c: 839: exp *= 3;
  2910  000B0A  C0CB  F06E         	movff	sprintf@exp,___wmul@multiplier
  2911  000B0E  C0CC  F06F         	movff	sprintf@exp+1,___wmul@multiplier+1
  2912  000B12  0E00               	movlw	0
  2913  000B14  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2914  000B16  0E03               	movlw	3
  2915  000B18  6F70               	movwf	___wmul@multiplicand& (0+255),b
  2916  000B1A  EC93  F01D         	call	___wmul	;wreg free
  2917  000B1E  C06E  F0CB         	movff	?___wmul,sprintf@exp
  2918  000B22  C06F  F0CC         	movff	?___wmul+1,sprintf@exp+1
  2919                           
  2920                           ;doprnt.c: 840: exp /= 10;
  2921  000B26  C0CB  F066         	movff	sprintf@exp,___awdiv@dividend
  2922  000B2A  C0CC  F067         	movff	sprintf@exp+1,___awdiv@dividend+1
  2923  000B2E  0E00               	movlw	0
  2924  000B30  0100               	movlb	0	; () banked
  2925  000B32  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  2926  000B34  0E0A               	movlw	10
  2927  000B36  6F68               	movwf	___awdiv@divisor& (0+255),b
  2928  000B38  EC95  F01B         	call	___awdiv	;wreg free
  2929  000B3C  C066  F0CB         	movff	?___awdiv,sprintf@exp
  2930  000B40  C067  F0CC         	movff	?___awdiv+1,sprintf@exp+1
  2931                           
  2932                           ;doprnt.c: 841: if(exp < 0)
  2933  000B44  0100               	movlb	0	; () banked
  2934  000B46  AFCC               	btfss	(sprintf@exp+1)& (0+255),7,b
  2935  000B48  D003               	goto	l199
  2936                           
  2937                           ; BSR set to: 0
  2938                           ;doprnt.c: 842: exp--;
  2939  000B4A  07CB               	decf	sprintf@exp& (0+255),f,b
  2940  000B4C  A0D8               	btfss	status,0,c
  2941  000B4E  07CC               	decf	(sprintf@exp+1)& (0+255),f,b
  2942  000B50                     l199:
  2943                           
  2944                           ; BSR set to: 0
  2945                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  2946                           
  2947                           ; BSR set to: 0
  2948  000B50  51CB               	movf	sprintf@exp& (0+255),w,b
  2949  000B52  0800               	sublw	0
  2950  000B54  EC12  F00D         	call	_scale
  2951  000B58  C083  F0C3         	movff	?_scale,sprintf@tmpval
  2952  000B5C  C084  F0C4         	movff	?_scale+1,sprintf@tmpval+1
  2953  000B60  C085  F0C5         	movff	?_scale+2,sprintf@tmpval+2
  2954                           
  2955                           ;doprnt.c: 847: tmpval.integ *= fval;
  2956  000B64  C0C3  F074         	movff	sprintf@tmpval,___ftmul@f1
  2957  000B68  C0C4  F075         	movff	sprintf@tmpval+1,___ftmul@f1+1
  2958  000B6C  C0C5  F076         	movff	sprintf@tmpval+2,___ftmul@f1+2
  2959  000B70  C0D1  F077         	movff	sprintf@fval,___ftmul@f2
  2960  000B74  C0D2  F078         	movff	sprintf@fval+1,___ftmul@f2+1
  2961  000B78  C0D3  F079         	movff	sprintf@fval+2,___ftmul@f2+2
  2962  000B7C  EC3C  F017         	call	___ftmul	;wreg free
  2963  000B80  C074  F0C3         	movff	?___ftmul,sprintf@tmpval
  2964  000B84  C075  F0C4         	movff	?___ftmul+1,sprintf@tmpval+1
  2965  000B88  C076  F0C5         	movff	?___ftmul+2,sprintf@tmpval+2
  2966                           
  2967                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  2968  000B8C  C0C3  F060         	movff	sprintf@tmpval,___ftge@ff1
  2969  000B90  C0C4  F061         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2970  000B94  C0C5  F062         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2971  000B98  0E00               	movlw	0
  2972  000B9A  0100               	movlb	0	; () banked
  2973  000B9C  6F63               	movwf	___ftge@ff2& (0+255),b
  2974  000B9E  0E80               	movlw	128
  2975  000BA0  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  2976  000BA2  0E3F               	movlw	63
  2977  000BA4  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  2978  000BA6  EC4C  F01B         	call	___ftge	;wreg free
  2979  000BAA  0100               	movlb	0	; () banked
  2980  000BAC  B0D8               	btfsc	status,0,c
  2981  000BAE  D004               	goto	l200
  2982                           
  2983                           ; BSR set to: 0
  2984                           ;doprnt.c: 849: exp--;
  2985  000BB0  07CB               	decf	sprintf@exp& (0+255),f,b
  2986  000BB2  A0D8               	btfss	status,0,c
  2987  000BB4  07CC               	decf	(sprintf@exp+1)& (0+255),f,b
  2988  000BB6  D013               	goto	l202
  2989  000BB8                     l200:
  2990                           
  2991                           ; BSR set to: 0
  2992                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  2993                           
  2994                           ; BSR set to: 0
  2995  000BB8  C0C3  F060         	movff	sprintf@tmpval,___ftge@ff1
  2996  000BBC  C0C4  F061         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2997  000BC0  C0C5  F062         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2998  000BC4  0E00               	movlw	0
  2999  000BC6  6F63               	movwf	___ftge@ff2& (0+255),b
  3000  000BC8  0E20               	movlw	32
  3001  000BCA  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  3002  000BCC  0E41               	movlw	65
  3003  000BCE  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  3004  000BD0  EC4C  F01B         	call	___ftge	;wreg free
  3005  000BD4  0100               	movlb	0	; () banked
  3006  000BD6  A0D8               	btfss	status,0,c
  3007  000BD8  D002               	goto	l202
  3008                           
  3009                           ; BSR set to: 0
  3010                           ;doprnt.c: 851: exp++;
  3011  000BDA  4BCB               	infsnz	sprintf@exp& (0+255),f,b
  3012  000BDC  2BCC               	incf	(sprintf@exp+1)& (0+255),f,b
  3013  000BDE                     l202:
  3014                           
  3015                           ; BSR set to: 0
  3016                           ;doprnt.c: 852: }
  3017                           ;doprnt.c: 1112: if(prec <= 12)
  3018                           
  3019                           ; BSR set to: 0
  3020                           
  3021                           ; BSR set to: 0
  3022                           
  3023                           ; BSR set to: 0
  3024  000BDE  BFD5               	btfsc	(sprintf@prec+1)& (0+255),7,b
  3025  000BE0  D006               	goto	u3570
  3026  000BE2  51D5               	movf	(sprintf@prec+1)& (0+255),w,b
  3027  000BE4  E11B               	bnz	l3532
  3028  000BE6  0E0D               	movlw	13
  3029  000BE8  5DD4               	subwf	sprintf@prec& (0+255),w,b
  3030  000BEA  B0D8               	btfsc	status,0,c
  3031  000BEC  D017               	goto	l203
  3032  000BEE                     u3570:
  3033                           
  3034                           ; BSR set to: 0
  3035                           ;doprnt.c: 1113: fval += fround(prec);
  3036  000BEE  C0D1  F08D         	movff	sprintf@fval,___ftadd@f1
  3037  000BF2  C0D2  F08E         	movff	sprintf@fval+1,___ftadd@f1+1
  3038  000BF6  C0D3  F08F         	movff	sprintf@fval+2,___ftadd@f1+2
  3039  000BFA  51D4               	movf	sprintf@prec& (0+255),w,b
  3040  000BFC  EC2E  F00F         	call	_fround
  3041  000C00  C083  F090         	movff	?_fround,___ftadd@f2
  3042  000C04  C084  F091         	movff	?_fround+1,___ftadd@f2+1
  3043  000C08  C085  F092         	movff	?_fround+2,___ftadd@f2+2
  3044  000C0C  EC9B  F011         	call	___ftadd	;wreg free
  3045  000C10  C08D  F0D1         	movff	?___ftadd,sprintf@fval
  3046  000C14  C08E  F0D2         	movff	?___ftadd+1,sprintf@fval+1
  3047  000C18  C08F  F0D3         	movff	?___ftadd+2,sprintf@fval+2
  3048  000C1C                     l203:
  3049  000C1C                     l3532:
  3050                           
  3051                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  3052  000C1C  0100               	movlb	0	; () banked
  3053  000C1E  BFCC               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3054  000C20  D006               	goto	u3580
  3055  000C22  51CC               	movf	(sprintf@exp+1)& (0+255),w,b
  3056  000C24  E11F               	bnz	l3540
  3057  000C26  0E0A               	movlw	10
  3058  000C28  5DCB               	subwf	sprintf@exp& (0+255),w,b
  3059  000C2A  B0D8               	btfsc	status,0,c
  3060  000C2C  D01B               	goto	u3610
  3061  000C2E                     u3580:
  3062                           
  3063                           ; BSR set to: 0
  3064  000C2E  51D1               	movf	sprintf@fval& (0+255),w,b
  3065  000C30  11D2               	iorwf	(sprintf@fval+1)& (0+255),w,b
  3066  000C32  11D3               	iorwf	(sprintf@fval+2)& (0+255),w,b
  3067  000C34  B4D8               	btfsc	status,2,c
  3068  000C36  D054               	goto	l204
  3069                           
  3070                           ; BSR set to: 0
  3071  000C38  C0D1  F08A         	movff	sprintf@fval,___fttol@f1
  3072  000C3C  C0D2  F08B         	movff	sprintf@fval+1,___fttol@f1+1
  3073  000C40  C0D3  F08C         	movff	sprintf@fval+2,___fttol@f1+2
  3074  000C44  ECC0  F016         	call	___fttol	;wreg free
  3075  000C48  0100               	movlb	0	; () banked
  3076  000C4A  518A               	movf	?___fttol& (0+255),w,b
  3077  000C4C  118B               	iorwf	(?___fttol+1)& (0+255),w,b
  3078  000C4E  118C               	iorwf	(?___fttol+2)& (0+255),w,b
  3079  000C50  118D               	iorwf	(?___fttol+3)& (0+255),w,b
  3080  000C52  B4D8               	btfsc	status,2,c
  3081                           
  3082                           ; BSR set to: 0
  3083  000C54  BFCC               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3084  000C56  D044               	goto	l204
  3085  000C58  51CC               	movf	(sprintf@exp+1)& (0+255),w,b
  3086  000C5A  E104               	bnz	l3540
  3087  000C5C  0E02               	movlw	2
  3088  000C5E  5DCB               	subwf	sprintf@exp& (0+255),w,b
  3089  000C60  A0D8               	btfss	status,0,c
  3090  000C62  D03E               	goto	l204
  3091  000C64                     u3610:
  3092  000C64                     l3540:
  3093                           
  3094                           ; BSR set to: 0
  3095                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  3096  000C64  C0C3  F060         	movff	sprintf@tmpval,___ftge@ff1
  3097  000C68  C0C4  F061         	movff	sprintf@tmpval+1,___ftge@ff1+1
  3098  000C6C  C0C5  F062         	movff	sprintf@tmpval+2,___ftge@ff1+2
  3099  000C70  0E70               	movlw	112
  3100  000C72  6F63               	movwf	___ftge@ff2& (0+255),b
  3101  000C74  0E89               	movlw	137
  3102  000C76  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  3103  000C78  0E40               	movlw	64
  3104  000C7A  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  3105  000C7C  EC4C  F01B         	call	___ftge	;wreg free
  3106  000C80  0100               	movlb	0	; () banked
  3107  000C82  B0D8               	btfsc	status,0,c
  3108  000C84  D002               	goto	l207
  3109                           
  3110                           ; BSR set to: 0
  3111                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  3112  000C86  0EF7               	movlw	247
  3113  000C88  D001               	goto	L1
  3114  000C8A                     l207:
  3115                           
  3116                           ; BSR set to: 0
  3117                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  3118                           
  3119                           ; BSR set to: 0
  3120  000C8A  0EF8               	movlw	248
  3121  000C8C                     L1:
  3122  000C8C  27CB               	addwf	sprintf@exp& (0+255),f,b
  3123  000C8E  0EFF               	movlw	255
  3124  000C90  23CC               	addwfc	(sprintf@exp+1)& (0+255),f,b
  3125                           
  3126                           ; BSR set to: 0
  3127                           ;doprnt.c: 1124: }
  3128                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  3129                           
  3130                           ; BSR set to: 0
  3131  000C92  51CB               	movf	sprintf@exp& (0+255),w,b
  3132  000C94  EC12  F00D         	call	_scale
  3133  000C98  C083  F0C3         	movff	?_scale,sprintf@tmpval
  3134  000C9C  C084  F0C4         	movff	?_scale+1,sprintf@tmpval+1
  3135  000CA0  C085  F0C5         	movff	?_scale+2,sprintf@tmpval+2
  3136                           
  3137                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  3138  000CA4  C0D1  F060         	movff	sprintf@fval,__tdiv_to_l_@f1
  3139  000CA8  C0D2  F061         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  3140  000CAC  C0D3  F062         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  3141  000CB0  C0C3  F063         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  3142  000CB4  C0C4  F064         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  3143  000CB8  C0C5  F065         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  3144  000CBC  ECDC  F013         	call	__tdiv_to_l_	;wreg free
  3145  000CC0  C060  F0C7         	movff	?__tdiv_to_l_,sprintf@val
  3146  000CC4  C061  F0C8         	movff	?__tdiv_to_l_+1,sprintf@val+1
  3147  000CC8  C062  F0C9         	movff	?__tdiv_to_l_+2,sprintf@val+2
  3148  000CCC  C063  F0CA         	movff	?__tdiv_to_l_+3,sprintf@val+3
  3149                           
  3150                           ;doprnt.c: 1129: fval = 0.0;
  3151  000CD0  0E00               	movlw	0
  3152  000CD2  0100               	movlb	0	; () banked
  3153  000CD4  6FD1               	movwf	sprintf@fval& (0+255),b
  3154  000CD6  0E00               	movlw	0
  3155  000CD8  6FD2               	movwf	(sprintf@fval+1)& (0+255),b
  3156  000CDA  0E00               	movlw	0
  3157  000CDC  6FD3               	movwf	(sprintf@fval+2)& (0+255),b
  3158                           
  3159                           ;doprnt.c: 1130: } else {
  3160  000CDE  D033               	goto	l213
  3161  000CE0                     l204:
  3162                           
  3163                           ; BSR set to: 0
  3164                           ;doprnt.c: 1131: val = (unsigned long)fval;
  3165                           
  3166                           ; BSR set to: 0
  3167  000CE0  C0D1  F08A         	movff	sprintf@fval,___fttol@f1
  3168  000CE4  C0D2  F08B         	movff	sprintf@fval+1,___fttol@f1+1
  3169  000CE8  C0D3  F08C         	movff	sprintf@fval+2,___fttol@f1+2
  3170  000CEC  ECC0  F016         	call	___fttol	;wreg free
  3171  000CF0  C08A  F0C7         	movff	?___fttol,sprintf@val
  3172  000CF4  C08B  F0C8         	movff	?___fttol+1,sprintf@val+1
  3173  000CF8  C08C  F0C9         	movff	?___fttol+2,sprintf@val+2
  3174  000CFC  C08D  F0CA         	movff	?___fttol+3,sprintf@val+3
  3175                           
  3176                           ;doprnt.c: 1132: fval -= (double)val;
  3177  000D00  C0D1  F0AB         	movff	sprintf@fval,___ftsub@f1
  3178  000D04  C0D2  F0AC         	movff	sprintf@fval+1,___ftsub@f1+1
  3179  000D08  C0D3  F0AD         	movff	sprintf@fval+2,___ftsub@f1+2
  3180  000D0C  C0C7  F068         	movff	sprintf@val,___lltoft@c
  3181  000D10  C0C8  F069         	movff	sprintf@val+1,___lltoft@c+1
  3182  000D14  C0C9  F06A         	movff	sprintf@val+2,___lltoft@c+2
  3183  000D18  C0CA  F06B         	movff	sprintf@val+3,___lltoft@c+3
  3184  000D1C  EC02  F01D         	call	___lltoft	;wreg free
  3185  000D20  C068  F0AE         	movff	?___lltoft,___ftsub@f2
  3186  000D24  C069  F0AF         	movff	?___lltoft+1,___ftsub@f2+1
  3187  000D28  C06A  F0B0         	movff	?___lltoft+2,___ftsub@f2+2
  3188  000D2C  EC53  F01D         	call	___ftsub	;wreg free
  3189  000D30  C0AB  F0D1         	movff	?___ftsub,sprintf@fval
  3190  000D34  C0AC  F0D2         	movff	?___ftsub+1,sprintf@fval+1
  3191  000D38  C0AD  F0D3         	movff	?___ftsub+2,sprintf@fval+2
  3192                           
  3193                           ;doprnt.c: 1133: exp = 0;
  3194  000D3C  0E00               	movlw	0
  3195  000D3E  0100               	movlb	0	; () banked
  3196  000D40  6FCC               	movwf	(sprintf@exp+1)& (0+255),b
  3197  000D42  0E00               	movlw	0
  3198  000D44  6FCB               	movwf	sprintf@exp& (0+255),b
  3199  000D46                     l213:
  3200                           
  3201                           ; BSR set to: 0
  3202                           ;doprnt.c: 1134: }
  3203                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  3204                           
  3205                           ; BSR set to: 0
  3206  000D46  0E01               	movlw	1
  3207  000D48  6FD6               	movwf	sprintf@c& (0+255),b
  3208  000D4A                     l3560:
  3209                           
  3210                           ; BSR set to: 0
  3211  000D4A  0E0A               	movlw	10
  3212  000D4C  19D6               	xorwf	sprintf@c& (0+255),w,b
  3213  000D4E  B4D8               	btfsc	status,2,c
  3214  000D50  D018               	goto	u3650
  3215                           
  3216                           ; BSR set to: 0
  3217                           ;doprnt.c: 1137: if(val < dpowers[c])
  3218                           
  3219                           ; BSR set to: 0
  3220                           
  3221                           ; BSR set to: 0
  3222  000D52  51D6               	movf	sprintf@c& (0+255),w,b
  3223  000D54  0D04               	mullw	4
  3224  000D56  0E01               	movlw	low _dpowers
  3225  000D58  24F3               	addwf	prodl,w,c
  3226  000D5A  6EF6               	movwf	tblptrl,c
  3227  000D5C  0E08               	movlw	high _dpowers
  3228  000D5E  20F4               	addwfc	prodh,w,c
  3229  000D60  6EF7               	movwf	tblptrh,c
  3230  000D62                     	if	0	;There are less than 3 active tblptr bytes
  3231  000D62                     	endif
  3232  000D62  0009               	tblrd		*+
  3233  000D64  50F5               	movf	tablat,w,c
  3234  000D66  5DC7               	subwf	sprintf@val& (0+255),w,b
  3235  000D68  0009               	tblrd		*+
  3236  000D6A  50F5               	movf	tablat,w,c
  3237  000D6C  59C8               	subwfb	(sprintf@val+1)& (0+255),w,b
  3238  000D6E  0009               	tblrd		*+
  3239  000D70  50F5               	movf	tablat,w,c
  3240  000D72  59C9               	subwfb	(sprintf@val+2)& (0+255),w,b
  3241  000D74  0009               	tblrd		*+
  3242  000D76  50F5               	movf	tablat,w,c
  3243  000D78  59CA               	subwfb	(sprintf@val+3)& (0+255),w,b
  3244  000D7A  A0D8               	btfss	status,0,c
  3245  000D7C  D002               	goto	u3650
  3246                           
  3247                           ; BSR set to: 0
  3248                           
  3249                           ; BSR set to: 0
  3250                           
  3251                           ; BSR set to: 0
  3252                           ;doprnt.c: 1138: break;
  3253  000D7E  2BD6               	incf	sprintf@c& (0+255),f,b
  3254  000D80  D7E4               	goto	l3560
  3255  000D82                     u3650:
  3256                           
  3257                           ; BSR set to: 0
  3258                           ;doprnt.c: 1142: width -= prec + c + exp;
  3259                           
  3260                           ; BSR set to: 0
  3261  000D82  C0D6  F0B8         	movff	sprintf@c,??_sprintf
  3262  000D86  6BB9               	clrf	(??_sprintf+1)& (0+255),b
  3263  000D88  BFB8               	btfsc	??_sprintf& (0+255),7,b
  3264  000D8A  07B9               	decf	(??_sprintf+1)& (0+255),f,b
  3265  000D8C  51D4               	movf	sprintf@prec& (0+255),w,b
  3266  000D8E  27B8               	addwf	??_sprintf& (0+255),f,b
  3267  000D90  51D5               	movf	(sprintf@prec+1)& (0+255),w,b
  3268  000D92  23B9               	addwfc	(??_sprintf+1)& (0+255),f,b
  3269  000D94  51CB               	movf	sprintf@exp& (0+255),w,b
  3270  000D96  27B8               	addwf	??_sprintf& (0+255),f,b
  3271  000D98  51CC               	movf	(sprintf@exp+1)& (0+255),w,b
  3272  000D9A  23B9               	addwfc	(??_sprintf+1)& (0+255),f,b
  3273  000D9C  51B8               	movf	??_sprintf& (0+255),w,b
  3274  000D9E  5FCF               	subwf	sprintf@width& (0+255),f,b
  3275  000DA0  51B9               	movf	(??_sprintf+1)& (0+255),w,b
  3276  000DA2  5BD0               	subwfb	(sprintf@width+1)& (0+255),f,b
  3277                           
  3278                           ;doprnt.c: 1143: if(
  3279                           ;doprnt.c: 1147: prec)
  3280  000DA4  51D4               	movf	sprintf@prec& (0+255),w,b
  3281  000DA6  11D5               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3282  000DA8  B4D8               	btfsc	status,2,c
  3283  000DAA  D003               	goto	l217
  3284                           
  3285                           ; BSR set to: 0
  3286                           ;doprnt.c: 1148: width--;
  3287  000DAC  07CF               	decf	sprintf@width& (0+255),f,b
  3288  000DAE  A0D8               	btfss	status,0,c
  3289  000DB0  07D0               	decf	(sprintf@width+1)& (0+255),f,b
  3290  000DB2                     l217:
  3291                           
  3292                           ; BSR set to: 0
  3293                           ;doprnt.c: 1149: if(flag & 0x03)
  3294                           
  3295                           ; BSR set to: 0
  3296  000DB2  0E03               	movlw	3
  3297  000DB4  15CD               	andwf	sprintf@flag& (0+255),w,b
  3298  000DB6  6FB8               	movwf	??_sprintf& (0+255),b
  3299  000DB8  0E00               	movlw	0
  3300  000DBA  15CE               	andwf	(sprintf@flag+1)& (0+255),w,b
  3301  000DBC  6FB9               	movwf	(??_sprintf+1)& (0+255),b
  3302  000DBE  51B8               	movf	??_sprintf& (0+255),w,b
  3303  000DC0  11B9               	iorwf	(??_sprintf+1)& (0+255),w,b
  3304  000DC2  B4D8               	btfsc	status,2,c
  3305  000DC4  D003               	goto	l218
  3306                           
  3307                           ; BSR set to: 0
  3308                           ;doprnt.c: 1150: width--;
  3309  000DC6  07CF               	decf	sprintf@width& (0+255),f,b
  3310  000DC8  A0D8               	btfss	status,0,c
  3311  000DCA  07D0               	decf	(sprintf@width+1)& (0+255),f,b
  3312  000DCC                     l218:
  3313                           
  3314                           ; BSR set to: 0
  3315                           ;doprnt.c: 1153: if(flag & 0x04) {
  3316                           
  3317                           ; BSR set to: 0
  3318  000DCC  A5CD               	btfss	sprintf@flag& (0+255),2,b
  3319  000DCE  D031               	goto	l225
  3320                           
  3321                           ; BSR set to: 0
  3322                           ;doprnt.c: 1157: if(flag & 0x03)
  3323  000DD0  0E03               	movlw	3
  3324  000DD2  15CD               	andwf	sprintf@flag& (0+255),w,b
  3325  000DD4  6FB8               	movwf	??_sprintf& (0+255),b
  3326  000DD6  0E00               	movlw	0
  3327  000DD8  15CE               	andwf	(sprintf@flag+1)& (0+255),w,b
  3328  000DDA  6FB9               	movwf	(??_sprintf+1)& (0+255),b
  3329  000DDC  51B8               	movf	??_sprintf& (0+255),w,b
  3330  000DDE  11B9               	iorwf	(??_sprintf+1)& (0+255),w,b
  3331  000DE0  B4D8               	btfsc	status,2,c
  3332  000DE2  D014               	goto	l221
  3333                           
  3334                           ; BSR set to: 0
  3335                           ;doprnt.c: 1159: ((*sp++ = ('-')));
  3336  000DE4  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  3337  000DE8  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  3338  000DEC  0E2D               	movlw	45
  3339  000DEE  6EDF               	movwf	indf2,c
  3340                           
  3341                           ; BSR set to: 0
  3342  000DF0  4BB1               	infsnz	sprintf@sp& (0+255),f,b
  3343  000DF2  2BB2               	incf	(sprintf@sp+1)& (0+255),f,b
  3344                           
  3345                           ; BSR set to: 0
  3346                           ;doprnt.c: 1168: while(width > 0) {
  3347  000DF4  D00B               	goto	l221
  3348  000DF6                     l3588:
  3349                           
  3350                           ; BSR set to: 0
  3351                           ;doprnt.c: 1169: ((*sp++ = ('0')));
  3352  000DF6  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  3353  000DFA  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  3354  000DFE  0E30               	movlw	48
  3355  000E00  6EDF               	movwf	indf2,c
  3356                           
  3357                           ; BSR set to: 0
  3358  000E02  4BB1               	infsnz	sprintf@sp& (0+255),f,b
  3359  000E04  2BB2               	incf	(sprintf@sp+1)& (0+255),f,b
  3360                           
  3361                           ; BSR set to: 0
  3362                           ;doprnt.c: 1170: width--;
  3363  000E06  07CF               	decf	sprintf@width& (0+255),f,b
  3364  000E08  A0D8               	btfss	status,0,c
  3365  000E0A  07D0               	decf	(sprintf@width+1)& (0+255),f,b
  3366  000E0C                     l221:
  3367                           
  3368                           ; BSR set to: 0
  3369                           
  3370                           ; BSR set to: 0
  3371  000E0C  BFD0               	btfsc	(sprintf@width+1)& (0+255),7,b
  3372  000E0E  D073               	goto	l229
  3373  000E10  51D0               	movf	(sprintf@width+1)& (0+255),w,b
  3374  000E12  E1F1               	bnz	l3588
  3375  000E14  05CF               	decf	sprintf@width& (0+255),w,b
  3376  000E16  A0D8               	btfss	status,0,c
  3377  000E18  D06E               	goto	l229
  3378  000E1A  D7ED               	goto	l222
  3379  000E1C                     l3596:
  3380                           
  3381                           ; BSR set to: 0
  3382                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  3383  000E1C  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  3384  000E20  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  3385  000E24  0E20               	movlw	32
  3386  000E26  6EDF               	movwf	indf2,c
  3387                           
  3388                           ; BSR set to: 0
  3389  000E28  4BB1               	infsnz	sprintf@sp& (0+255),f,b
  3390  000E2A  2BB2               	incf	(sprintf@sp+1)& (0+255),f,b
  3391                           
  3392                           ; BSR set to: 0
  3393                           ;doprnt.c: 1182: width--;
  3394  000E2C  07CF               	decf	sprintf@width& (0+255),f,b
  3395  000E2E  A0D8               	btfss	status,0,c
  3396  000E30  07D0               	decf	(sprintf@width+1)& (0+255),f,b
  3397  000E32                     l225:
  3398                           
  3399                           ; BSR set to: 0
  3400                           
  3401                           ; BSR set to: 0
  3402  000E32  BFD0               	btfsc	(sprintf@width+1)& (0+255),7,b
  3403  000E34  D005               	goto	u3710
  3404  000E36  51D0               	movf	(sprintf@width+1)& (0+255),w,b
  3405  000E38  E1F1               	bnz	l3596
  3406  000E3A  05CF               	decf	sprintf@width& (0+255),w,b
  3407  000E3C  B0D8               	btfsc	status,0,c
  3408  000E3E  D7EE               	goto	l226
  3409  000E40                     u3710:
  3410                           
  3411                           ; BSR set to: 0
  3412                           ;doprnt.c: 1183: }
  3413                           ;doprnt.c: 1188: if(flag & 0x03)
  3414                           
  3415                           ; BSR set to: 0
  3416  000E40  0E03               	movlw	3
  3417  000E42  15CD               	andwf	sprintf@flag& (0+255),w,b
  3418  000E44  6FB8               	movwf	??_sprintf& (0+255),b
  3419  000E46  0E00               	movlw	0
  3420  000E48  15CE               	andwf	(sprintf@flag+1)& (0+255),w,b
  3421  000E4A  6FB9               	movwf	(??_sprintf+1)& (0+255),b
  3422  000E4C  51B8               	movf	??_sprintf& (0+255),w,b
  3423  000E4E  11B9               	iorwf	(??_sprintf+1)& (0+255),w,b
  3424  000E50  B4D8               	btfsc	status,2,c
  3425  000E52  D051               	goto	l229
  3426                           
  3427                           ; BSR set to: 0
  3428                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  3429  000E54  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  3430  000E58  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  3431  000E5C  0E2D               	movlw	45
  3432  000E5E  D048               	goto	L2
  3433  000E60                     
  3434                           ; BSR set to: 0
  3435                           ;doprnt.c: 1200: {
  3436                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  3437                           
  3438                           ; BSR set to: 0
  3439  000E60  C0C7  F060         	movff	sprintf@val,___lldiv@dividend
  3440  000E64  C0C8  F061         	movff	sprintf@val+1,___lldiv@dividend+1
  3441  000E68  C0C9  F062         	movff	sprintf@val+2,___lldiv@dividend+2
  3442  000E6C  C0CA  F063         	movff	sprintf@val+3,___lldiv@dividend+3
  3443  000E70  51D6               	movf	sprintf@c& (0+255),w,b
  3444  000E72  0D04               	mullw	4
  3445  000E74  0E01               	movlw	low _dpowers
  3446  000E76  24F3               	addwf	prodl,w,c
  3447  000E78  6EF6               	movwf	tblptrl,c
  3448  000E7A  0E08               	movlw	high _dpowers
  3449  000E7C  20F4               	addwfc	prodh,w,c
  3450  000E7E  6EF7               	movwf	tblptrh,c
  3451  000E80                     	if	0	;There are less than 3 active tblptr bytes
  3452  000E80                     	endif
  3453  000E80  0009               	tblrd		*+
  3454  000E82  CFF5 F064          	movff	tablat,___lldiv@divisor
  3455  000E86  0009               	tblrd		*+
  3456  000E88  CFF5 F065          	movff	tablat,___lldiv@divisor+1
  3457  000E8C  0009               	tblrd		*+
  3458  000E8E  CFF5 F066          	movff	tablat,___lldiv@divisor+2
  3459  000E92  000A               	tblrd		*-
  3460  000E94  CFF5 F067          	movff	tablat,___lldiv@divisor+3
  3461  000E98  ECD8  F01B         	call	___lldiv	;wreg free
  3462  000E9C  C060  F0C3         	movff	?___lldiv,sprintf@tmpval
  3463  000EA0  C061  F0C4         	movff	?___lldiv+1,sprintf@tmpval+1
  3464  000EA4  C062  F0C5         	movff	?___lldiv+2,sprintf@tmpval+2
  3465  000EA8  C063  F0C6         	movff	?___lldiv+3,sprintf@tmpval+3
  3466                           
  3467                           ;doprnt.c: 1202: tmpval.vd %= 10;
  3468  000EAC  C0C3  F06D         	movff	sprintf@tmpval,___llmod@dividend
  3469  000EB0  C0C4  F06E         	movff	sprintf@tmpval+1,___llmod@dividend+1
  3470  000EB4  C0C5  F06F         	movff	sprintf@tmpval+2,___llmod@dividend+2
  3471  000EB8  C0C6  F070         	movff	sprintf@tmpval+3,___llmod@dividend+3
  3472  000EBC  0E0A               	movlw	10
  3473  000EBE  0100               	movlb	0	; () banked
  3474  000EC0  6F71               	movwf	___llmod@divisor& (0+255),b
  3475  000EC2  0E00               	movlw	0
  3476  000EC4  6F72               	movwf	(___llmod@divisor+1)& (0+255),b
  3477  000EC6  0E00               	movlw	0
  3478  000EC8  6F73               	movwf	(___llmod@divisor+2)& (0+255),b
  3479  000ECA  0E00               	movlw	0
  3480  000ECC  6F74               	movwf	(___llmod@divisor+3)& (0+255),b
  3481  000ECE  ECCE  F01C         	call	___llmod	;wreg free
  3482  000ED2  C06D  F0C3         	movff	?___llmod,sprintf@tmpval
  3483  000ED6  C06E  F0C4         	movff	?___llmod+1,sprintf@tmpval+1
  3484  000EDA  C06F  F0C5         	movff	?___llmod+2,sprintf@tmpval+2
  3485  000EDE  C070  F0C6         	movff	?___llmod+3,sprintf@tmpval+3
  3486                           
  3487                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  3488  000EE2  0100               	movlb	0	; () banked
  3489  000EE4  51C3               	movf	sprintf@tmpval& (0+255),w,b
  3490  000EE6  0F30               	addlw	48
  3491  000EE8  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  3492  000EEC  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  3493  000EF0                     L2:
  3494  000EF0  6EDF               	movwf	indf2,c
  3495                           
  3496                           ; BSR set to: 0
  3497  000EF2  4BB1               	infsnz	sprintf@sp& (0+255),f,b
  3498  000EF4  2BB2               	incf	(sprintf@sp+1)& (0+255),f,b
  3499  000EF6                     l229:
  3500                           
  3501                           ; BSR set to: 0
  3502                           
  3503                           ; BSR set to: 0
  3504  000EF6  07D6               	decf	sprintf@c& (0+255),f,b
  3505  000EF8  29D6               	incf	sprintf@c& (0+255),w,b
  3506  000EFA  B4D8               	btfsc	status,2,c
  3507  000EFC  D00C               	goto	l232
  3508  000EFE  D7B0               	goto	l230
  3509  000F00                     l3620:
  3510                           
  3511                           ; BSR set to: 0
  3512                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  3513  000F00  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  3514  000F04  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  3515  000F08  0E30               	movlw	48
  3516  000F0A  6EDF               	movwf	indf2,c
  3517                           
  3518                           ; BSR set to: 0
  3519  000F0C  4BB1               	infsnz	sprintf@sp& (0+255),f,b
  3520  000F0E  2BB2               	incf	(sprintf@sp+1)& (0+255),f,b
  3521                           
  3522                           ; BSR set to: 0
  3523                           ;doprnt.c: 1209: exp--;
  3524  000F10  07CB               	decf	sprintf@exp& (0+255),f,b
  3525  000F12  A0D8               	btfss	status,0,c
  3526  000F14  07CC               	decf	(sprintf@exp+1)& (0+255),f,b
  3527  000F16                     l232:
  3528                           
  3529                           ; BSR set to: 0
  3530                           
  3531                           ; BSR set to: 0
  3532  000F16  BFCC               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3533  000F18  D005               	goto	u3740
  3534  000F1A  51CC               	movf	(sprintf@exp+1)& (0+255),w,b
  3535  000F1C  E1F1               	bnz	l3620
  3536  000F1E  05CB               	decf	sprintf@exp& (0+255),w,b
  3537  000F20  B0D8               	btfsc	status,0,c
  3538  000F22  D7EE               	goto	l233
  3539  000F24                     u3740:
  3540                           
  3541                           ; BSR set to: 0
  3542                           ;doprnt.c: 1210: }
  3543                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  3544                           
  3545                           ; BSR set to: 0
  3546  000F24  BFD5               	btfsc	(sprintf@prec+1)& (0+255),7,b
  3547  000F26  D009               	goto	l235
  3548  000F28  51D5               	movf	(sprintf@prec+1)& (0+255),w,b
  3549  000F2A  E104               	bnz	u3750
  3550  000F2C  0E09               	movlw	9
  3551  000F2E  5DD4               	subwf	sprintf@prec& (0+255),w,b
  3552  000F30  A0D8               	btfss	status,0,c
  3553  000F32  D003               	goto	l235
  3554  000F34                     u3750:
  3555                           
  3556                           ; BSR set to: 0
  3557                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  3558  000F34  0E08               	movlw	8
  3559  000F36  6FD6               	movwf	sprintf@c& (0+255),b
  3560  000F38  D002               	goto	l236
  3561  000F3A                     l235:
  3562                           
  3563                           ; BSR set to: 0
  3564                           ;doprnt.c: 1213: else
  3565                           ;doprnt.c: 1214: c = prec;
  3566  000F3A  C0D4  F0D6         	movff	sprintf@prec,sprintf@c
  3567  000F3E                     l236:
  3568                           
  3569                           ; BSR set to: 0
  3570                           ;doprnt.c: 1215: prec -= c;
  3571                           
  3572                           ; BSR set to: 0
  3573  000F3E  51D6               	movf	sprintf@c& (0+255),w,b
  3574  000F40  5FD4               	subwf	sprintf@prec& (0+255),f,b
  3575  000F42  0E00               	movlw	0
  3576  000F44  BFD6               	btfsc	sprintf@c& (0+255),7,b
  3577  000F46  0EFF               	movlw	255
  3578  000F48  5BD5               	subwfb	(sprintf@prec+1)& (0+255),f,b
  3579                           
  3580                           ; BSR set to: 0
  3581                           ;doprnt.c: 1219: if(c)
  3582  000F4A  51D6               	movf	sprintf@c& (0+255),w,b
  3583  000F4C  B4D8               	btfsc	status,2,c
  3584  000F4E  D008               	goto	l237
  3585                           
  3586                           ; BSR set to: 0
  3587                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  3588  000F50  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  3589  000F54  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  3590  000F58  0E2E               	movlw	46
  3591  000F5A  6EDF               	movwf	indf2,c
  3592                           
  3593                           ; BSR set to: 0
  3594  000F5C  4BB1               	infsnz	sprintf@sp& (0+255),f,b
  3595  000F5E  2BB2               	incf	(sprintf@sp+1)& (0+255),f,b
  3596  000F60                     l237:
  3597                           
  3598                           ; BSR set to: 0
  3599                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3600                           
  3601                           ; BSR set to: 0
  3602  000F60  51D6               	movf	sprintf@c& (0+255),w,b
  3603  000F62  EC12  F00D         	call	_scale
  3604  000F66  C083  F0BE         	movff	?_scale,_sprintf$1434
  3605  000F6A  C084  F0BF         	movff	?_scale+1,_sprintf$1434+1
  3606  000F6E  C085  F0C0         	movff	?_scale+2,_sprintf$1434+2
  3607                           
  3608                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3609  000F72  C0D1  F077         	movff	sprintf@fval,___ftmul@f2
  3610  000F76  C0D2  F078         	movff	sprintf@fval+1,___ftmul@f2+1
  3611  000F7A  C0D3  F079         	movff	sprintf@fval+2,___ftmul@f2+2
  3612  000F7E  C0BE  F074         	movff	_sprintf$1434,___ftmul@f1
  3613  000F82  C0BF  F075         	movff	_sprintf$1434+1,___ftmul@f1+1
  3614  000F86  C0C0  F076         	movff	_sprintf$1434+2,___ftmul@f1+2
  3615  000F8A  EC3C  F017         	call	___ftmul	;wreg free
  3616  000F8E  C074  F08A         	movff	?___ftmul,___fttol@f1
  3617  000F92  C075  F08B         	movff	?___ftmul+1,___fttol@f1+1
  3618  000F96  C076  F08C         	movff	?___ftmul+2,___fttol@f1+2
  3619  000F9A  ECC0  F016         	call	___fttol	;wreg free
  3620  000F9E  C08A  F0C7         	movff	?___fttol,sprintf@val
  3621  000FA2  C08B  F0C8         	movff	?___fttol+1,sprintf@val+1
  3622  000FA6  C08C  F0C9         	movff	?___fttol+2,sprintf@val+2
  3623  000FAA  C08D  F0CA         	movff	?___fttol+3,sprintf@val+3
  3624                           
  3625                           ;doprnt.c: 1228: while(c--) {
  3626  000FAE  D072               	goto	l238
  3627  000FB0                     
  3628                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  3629  000FB0  C0C7  F060         	movff	sprintf@val,___lldiv@dividend
  3630  000FB4  C0C8  F061         	movff	sprintf@val+1,___lldiv@dividend+1
  3631  000FB8  C0C9  F062         	movff	sprintf@val+2,___lldiv@dividend+2
  3632  000FBC  C0CA  F063         	movff	sprintf@val+3,___lldiv@dividend+3
  3633  000FC0  0100               	movlb	0	; () banked
  3634  000FC2  51D6               	movf	sprintf@c& (0+255),w,b
  3635  000FC4  0D04               	mullw	4
  3636  000FC6  0E01               	movlw	low _dpowers
  3637  000FC8  24F3               	addwf	prodl,w,c
  3638  000FCA  6EF6               	movwf	tblptrl,c
  3639  000FCC  0E08               	movlw	high _dpowers
  3640  000FCE  20F4               	addwfc	prodh,w,c
  3641  000FD0  6EF7               	movwf	tblptrh,c
  3642  000FD2                     	if	0	;There are less than 3 active tblptr bytes
  3643  000FD2                     	endif
  3644  000FD2  0009               	tblrd		*+
  3645  000FD4  CFF5 F064          	movff	tablat,___lldiv@divisor
  3646  000FD8  0009               	tblrd		*+
  3647  000FDA  CFF5 F065          	movff	tablat,___lldiv@divisor+1
  3648  000FDE  0009               	tblrd		*+
  3649  000FE0  CFF5 F066          	movff	tablat,___lldiv@divisor+2
  3650  000FE4  000A               	tblrd		*-
  3651  000FE6  CFF5 F067          	movff	tablat,___lldiv@divisor+3
  3652  000FEA  ECD8  F01B         	call	___lldiv	;wreg free
  3653  000FEE  C060  F0C3         	movff	?___lldiv,sprintf@tmpval
  3654  000FF2  C061  F0C4         	movff	?___lldiv+1,sprintf@tmpval+1
  3655  000FF6  C062  F0C5         	movff	?___lldiv+2,sprintf@tmpval+2
  3656  000FFA  C063  F0C6         	movff	?___lldiv+3,sprintf@tmpval+3
  3657                           
  3658                           ;doprnt.c: 1230: tmpval.vd %= 10;
  3659  000FFE  C0C3  F06D         	movff	sprintf@tmpval,___llmod@dividend
  3660  001002  C0C4  F06E         	movff	sprintf@tmpval+1,___llmod@dividend+1
  3661  001006  C0C5  F06F         	movff	sprintf@tmpval+2,___llmod@dividend+2
  3662  00100A  C0C6  F070         	movff	sprintf@tmpval+3,___llmod@dividend+3
  3663  00100E  0E0A               	movlw	10
  3664  001010  0100               	movlb	0	; () banked
  3665  001012  6F71               	movwf	___llmod@divisor& (0+255),b
  3666  001014  0E00               	movlw	0
  3667  001016  6F72               	movwf	(___llmod@divisor+1)& (0+255),b
  3668  001018  0E00               	movlw	0
  3669  00101A  6F73               	movwf	(___llmod@divisor+2)& (0+255),b
  3670  00101C  0E00               	movlw	0
  3671  00101E  6F74               	movwf	(___llmod@divisor+3)& (0+255),b
  3672  001020  ECCE  F01C         	call	___llmod	;wreg free
  3673  001024  C06D  F0C3         	movff	?___llmod,sprintf@tmpval
  3674  001028  C06E  F0C4         	movff	?___llmod+1,sprintf@tmpval+1
  3675  00102C  C06F  F0C5         	movff	?___llmod+2,sprintf@tmpval+2
  3676  001030  C070  F0C6         	movff	?___llmod+3,sprintf@tmpval+3
  3677                           
  3678                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  3679  001034  0100               	movlb	0	; () banked
  3680  001036  51C3               	movf	sprintf@tmpval& (0+255),w,b
  3681  001038  0F30               	addlw	48
  3682  00103A  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  3683  00103E  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  3684  001042  6EDF               	movwf	indf2,c
  3685                           
  3686                           ; BSR set to: 0
  3687  001044  4BB1               	infsnz	sprintf@sp& (0+255),f,b
  3688  001046  2BB2               	incf	(sprintf@sp+1)& (0+255),f,b
  3689                           
  3690                           ; BSR set to: 0
  3691                           ;doprnt.c: 1232: val %= dpowers[c];
  3692  001048  C0C7  F06D         	movff	sprintf@val,___llmod@dividend
  3693  00104C  C0C8  F06E         	movff	sprintf@val+1,___llmod@dividend+1
  3694  001050  C0C9  F06F         	movff	sprintf@val+2,___llmod@dividend+2
  3695  001054  C0CA  F070         	movff	sprintf@val+3,___llmod@dividend+3
  3696  001058  51D6               	movf	sprintf@c& (0+255),w,b
  3697  00105A  0D04               	mullw	4
  3698  00105C  0E01               	movlw	low _dpowers
  3699  00105E  24F3               	addwf	prodl,w,c
  3700  001060  6EF6               	movwf	tblptrl,c
  3701  001062  0E08               	movlw	high _dpowers
  3702  001064  20F4               	addwfc	prodh,w,c
  3703  001066  6EF7               	movwf	tblptrh,c
  3704  001068                     	if	0	;There are less than 3 active tblptr bytes
  3705  001068                     	endif
  3706  001068  0009               	tblrd		*+
  3707  00106A  CFF5 F071          	movff	tablat,___llmod@divisor
  3708  00106E  0009               	tblrd		*+
  3709  001070  CFF5 F072          	movff	tablat,___llmod@divisor+1
  3710  001074  0009               	tblrd		*+
  3711  001076  CFF5 F073          	movff	tablat,___llmod@divisor+2
  3712  00107A  000A               	tblrd		*-
  3713  00107C  CFF5 F074          	movff	tablat,___llmod@divisor+3
  3714  001080  ECCE  F01C         	call	___llmod	;wreg free
  3715  001084  C06D  F0C7         	movff	?___llmod,sprintf@val
  3716  001088  C06E  F0C8         	movff	?___llmod+1,sprintf@val+1
  3717  00108C  C06F  F0C9         	movff	?___llmod+2,sprintf@val+2
  3718  001090  C070  F0CA         	movff	?___llmod+3,sprintf@val+3
  3719  001094                     l238:
  3720  001094  0100               	movlb	0	; () banked
  3721  001096  07D6               	decf	sprintf@c& (0+255),f,b
  3722  001098  29D6               	incf	sprintf@c& (0+255),w,b
  3723  00109A  B4D8               	btfsc	status,2,c
  3724  00109C  D00C               	goto	l241
  3725  00109E  D788               	goto	l239
  3726  0010A0                     
  3727                           ; BSR set to: 0
  3728                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  3729                           
  3730                           ; BSR set to: 0
  3731  0010A0  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  3732  0010A4  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  3733  0010A8  0E30               	movlw	48
  3734  0010AA  6EDF               	movwf	indf2,c
  3735                           
  3736                           ; BSR set to: 0
  3737  0010AC  4BB1               	infsnz	sprintf@sp& (0+255),f,b
  3738  0010AE  2BB2               	incf	(sprintf@sp+1)& (0+255),f,b
  3739                           
  3740                           ; BSR set to: 0
  3741                           ;doprnt.c: 1237: prec--;
  3742  0010B0  07D4               	decf	sprintf@prec& (0+255),f,b
  3743  0010B2  A0D8               	btfss	status,0,c
  3744  0010B4  07D5               	decf	(sprintf@prec+1)& (0+255),f,b
  3745  0010B6                     l241:
  3746                           
  3747                           ; BSR set to: 0
  3748                           
  3749                           ; BSR set to: 0
  3750  0010B6  51D4               	movf	sprintf@prec& (0+255),w,b
  3751  0010B8  11D5               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3752  0010BA  B4D8               	btfsc	status,2,c
  3753  0010BC  D137               	goto	u3990
  3754  0010BE  D7F0               	goto	l242
  3755  0010C0                     l195:
  3756                           
  3757                           ; BSR set to: 0
  3758                           ;doprnt.c: 1246: }
  3759                           ;doprnt.c: 1253: {
  3760                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  3761                           
  3762                           ; BSR set to: 0
  3763  0010C0  C0C1  FFD9         	movff	sprintf@ap,fsr2l
  3764  0010C4  C0C2  FFDA         	movff	sprintf@ap+1,fsr2h
  3765  0010C8  CFDE F0C7          	movff	postinc2,sprintf@val
  3766  0010CC  CFDD F0C8          	movff	postdec2,sprintf@val+1
  3767  0010D0  0E00               	movlw	0
  3768  0010D2  BFC8               	btfsc	(sprintf@val+1)& (0+255),7,b
  3769  0010D4  0EFF               	movlw	-1
  3770  0010D6  6FC9               	movwf	(sprintf@val+2)& (0+255),b
  3771  0010D8  6FCA               	movwf	(sprintf@val+3)& (0+255),b
  3772                           
  3773                           ; BSR set to: 0
  3774  0010DA  0E02               	movlw	2
  3775  0010DC  27C1               	addwf	sprintf@ap& (0+255),f,b
  3776  0010DE  0E00               	movlw	0
  3777  0010E0  23C2               	addwfc	(sprintf@ap+1)& (0+255),f,b
  3778                           
  3779                           ; BSR set to: 0
  3780                           ;doprnt.c: 1261: if((long)val < 0) {
  3781  0010E2  AFCA               	btfss	(sprintf@val+3)& (0+255),7,b
  3782  0010E4  D00A               	goto	l244
  3783                           
  3784                           ; BSR set to: 0
  3785                           ;doprnt.c: 1262: flag |= 0x03;
  3786  0010E6  0E03               	movlw	3
  3787  0010E8  13CD               	iorwf	sprintf@flag& (0+255),f,b
  3788                           
  3789                           ; BSR set to: 0
  3790                           ;doprnt.c: 1263: val = -val;
  3791  0010EA  1FCA               	comf	(sprintf@val+3)& (0+255),f,b
  3792  0010EC  1FC9               	comf	(sprintf@val+2)& (0+255),f,b
  3793  0010EE  1FC8               	comf	(sprintf@val+1)& (0+255),f,b
  3794  0010F0  6DC7               	negf	sprintf@val& (0+255),b
  3795  0010F2  0E00               	movlw	0
  3796  0010F4  23C8               	addwfc	(sprintf@val+1)& (0+255),f,b
  3797  0010F6  23C9               	addwfc	(sprintf@val+2)& (0+255),f,b
  3798  0010F8  23CA               	addwfc	(sprintf@val+3)& (0+255),f,b
  3799  0010FA                     l244:
  3800                           
  3801                           ; BSR set to: 0
  3802                           ;doprnt.c: 1264: }
  3803                           ;doprnt.c: 1266: }
  3804                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  3805                           
  3806                           ; BSR set to: 0
  3807  0010FA  51D4               	movf	sprintf@prec& (0+255),w,b
  3808  0010FC  11D5               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3809  0010FE  A4D8               	btfss	status,2,c
  3810  001100  D008               	goto	l245
  3811                           
  3812                           ; BSR set to: 0
  3813  001102  51C7               	movf	sprintf@val& (0+255),w,b
  3814  001104  11C8               	iorwf	(sprintf@val+1)& (0+255),w,b
  3815  001106  11C9               	iorwf	(sprintf@val+2)& (0+255),w,b
  3816  001108  11CA               	iorwf	(sprintf@val+3)& (0+255),w,b
  3817  00110A  A4D8               	btfss	status,2,c
  3818  00110C  D002               	goto	l245
  3819                           
  3820                           ; BSR set to: 0
  3821                           ;doprnt.c: 1291: prec++;
  3822  00110E  4BD4               	infsnz	sprintf@prec& (0+255),f,b
  3823  001110  2BD5               	incf	(sprintf@prec+1)& (0+255),f,b
  3824  001112                     l245:
  3825                           
  3826                           ; BSR set to: 0
  3827                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3828                           
  3829                           ; BSR set to: 0
  3830  001112  0E01               	movlw	1
  3831  001114  6FD6               	movwf	sprintf@c& (0+255),b
  3832  001116                     l3682:
  3833                           
  3834                           ; BSR set to: 0
  3835  001116  0E0A               	movlw	10
  3836  001118  19D6               	xorwf	sprintf@c& (0+255),w,b
  3837  00111A  B4D8               	btfsc	status,2,c
  3838  00111C  D018               	goto	u3840
  3839                           
  3840                           ; BSR set to: 0
  3841                           ;doprnt.c: 1306: if(val < dpowers[c])
  3842                           
  3843                           ; BSR set to: 0
  3844                           
  3845                           ; BSR set to: 0
  3846  00111E  51D6               	movf	sprintf@c& (0+255),w,b
  3847  001120  0D04               	mullw	4
  3848  001122  0E01               	movlw	low _dpowers
  3849  001124  24F3               	addwf	prodl,w,c
  3850  001126  6EF6               	movwf	tblptrl,c
  3851  001128  0E08               	movlw	high _dpowers
  3852  00112A  20F4               	addwfc	prodh,w,c
  3853  00112C  6EF7               	movwf	tblptrh,c
  3854  00112E                     	if	0	;There are less than 3 active tblptr bytes
  3855  00112E                     	endif
  3856  00112E  0009               	tblrd		*+
  3857  001130  50F5               	movf	tablat,w,c
  3858  001132  5DC7               	subwf	sprintf@val& (0+255),w,b
  3859  001134  0009               	tblrd		*+
  3860  001136  50F5               	movf	tablat,w,c
  3861  001138  59C8               	subwfb	(sprintf@val+1)& (0+255),w,b
  3862  00113A  0009               	tblrd		*+
  3863  00113C  50F5               	movf	tablat,w,c
  3864  00113E  59C9               	subwfb	(sprintf@val+2)& (0+255),w,b
  3865  001140  0009               	tblrd		*+
  3866  001142  50F5               	movf	tablat,w,c
  3867  001144  59CA               	subwfb	(sprintf@val+3)& (0+255),w,b
  3868  001146  A0D8               	btfss	status,0,c
  3869  001148  D002               	goto	u3840
  3870                           
  3871                           ; BSR set to: 0
  3872                           
  3873                           ; BSR set to: 0
  3874                           
  3875                           ; BSR set to: 0
  3876                           ;doprnt.c: 1307: break;
  3877  00114A  2BD6               	incf	sprintf@c& (0+255),f,b
  3878  00114C  D7E4               	goto	l3682
  3879  00114E                     u3840:
  3880                           
  3881                           ; BSR set to: 0
  3882                           ;doprnt.c: 1339: if(c < prec)
  3883                           
  3884                           ; BSR set to: 0
  3885  00114E  0E80               	movlw	128
  3886  001150  BFD6               	btfsc	sprintf@c& (0+255),7,b
  3887  001152  0E7F               	movlw	127
  3888  001154  6FB8               	movwf	??_sprintf& (0+255),b
  3889  001156  51D4               	movf	sprintf@prec& (0+255),w,b
  3890  001158  5DD6               	subwf	sprintf@c& (0+255),w,b
  3891  00115A  51D5               	movf	(sprintf@prec+1)& (0+255),w,b
  3892  00115C  0A80               	xorlw	128
  3893  00115E  59B8               	subwfb	??_sprintf& (0+255),w,b
  3894  001160  B0D8               	btfsc	status,0,c
  3895  001162  D003               	goto	l249
  3896                           
  3897                           ; BSR set to: 0
  3898                           ;doprnt.c: 1340: c = prec;
  3899  001164  C0D4  F0D6         	movff	sprintf@prec,sprintf@c
  3900  001168  D010               	goto	l251
  3901  00116A                     l249:
  3902                           
  3903                           ; BSR set to: 0
  3904                           ;doprnt.c: 1341: else if(prec < c)
  3905                           
  3906                           ; BSR set to: 0
  3907  00116A  51D5               	movf	(sprintf@prec+1)& (0+255),w,b
  3908  00116C  0A80               	xorlw	128
  3909  00116E  6FB8               	movwf	??_sprintf& (0+255),b
  3910  001170  51D6               	movf	sprintf@c& (0+255),w,b
  3911  001172  5DD4               	subwf	sprintf@prec& (0+255),w,b
  3912  001174  0E80               	movlw	128
  3913  001176  BFD6               	btfsc	sprintf@c& (0+255),7,b
  3914  001178  0E7F               	movlw	127
  3915  00117A  59B8               	subwfb	??_sprintf& (0+255),w,b
  3916  00117C  B0D8               	btfsc	status,0,c
  3917  00117E  D005               	goto	l251
  3918                           
  3919                           ; BSR set to: 0
  3920                           ;doprnt.c: 1342: prec = c;
  3921  001180  51D6               	movf	sprintf@c& (0+255),w,b
  3922  001182  6FD4               	movwf	sprintf@prec& (0+255),b
  3923  001184  6BD5               	clrf	(sprintf@prec+1)& (0+255),b
  3924  001186  BFD4               	btfsc	sprintf@prec& (0+255),7,b
  3925  001188  07D5               	decf	(sprintf@prec+1)& (0+255),f,b
  3926  00118A                     l251:
  3927                           
  3928                           ; BSR set to: 0
  3929                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3930                           
  3931                           ; BSR set to: 0
  3932                           
  3933                           ; BSR set to: 0
  3934  00118A  51CF               	movf	sprintf@width& (0+255),w,b
  3935  00118C  11D0               	iorwf	(sprintf@width+1)& (0+255),w,b
  3936  00118E  B4D8               	btfsc	status,2,c
  3937  001190  D00D               	goto	l252
  3938                           
  3939                           ; BSR set to: 0
  3940  001192  0E03               	movlw	3
  3941  001194  15CD               	andwf	sprintf@flag& (0+255),w,b
  3942  001196  6FB8               	movwf	??_sprintf& (0+255),b
  3943  001198  0E00               	movlw	0
  3944  00119A  15CE               	andwf	(sprintf@flag+1)& (0+255),w,b
  3945  00119C  6FB9               	movwf	(??_sprintf+1)& (0+255),b
  3946  00119E  51B8               	movf	??_sprintf& (0+255),w,b
  3947  0011A0  11B9               	iorwf	(??_sprintf+1)& (0+255),w,b
  3948  0011A2  B4D8               	btfsc	status,2,c
  3949  0011A4  D003               	goto	l252
  3950                           
  3951                           ; BSR set to: 0
  3952                           ;doprnt.c: 1346: width--;
  3953  0011A6  07CF               	decf	sprintf@width& (0+255),f,b
  3954  0011A8  A0D8               	btfss	status,0,c
  3955  0011AA  07D0               	decf	(sprintf@width+1)& (0+255),f,b
  3956  0011AC                     l252:
  3957                           
  3958                           ; BSR set to: 0
  3959                           ;doprnt.c: 1348: if(flag & 0x4000) {
  3960                           
  3961                           ; BSR set to: 0
  3962  0011AC  ADCE               	btfss	(sprintf@flag+1)& (0+255),6,b
  3963  0011AE  D013               	goto	l255
  3964                           
  3965                           ; BSR set to: 0
  3966                           ;doprnt.c: 1349: if(width > prec)
  3967  0011B0  51CF               	movf	sprintf@width& (0+255),w,b
  3968  0011B2  5DD4               	subwf	sprintf@prec& (0+255),w,b
  3969  0011B4  51D5               	movf	(sprintf@prec+1)& (0+255),w,b
  3970  0011B6  0A80               	xorlw	128
  3971  0011B8  6FB8               	movwf	??_sprintf& (0+255),b
  3972  0011BA  51D0               	movf	(sprintf@width+1)& (0+255),w,b
  3973  0011BC  0A80               	xorlw	128
  3974  0011BE  59B8               	subwfb	??_sprintf& (0+255),w,b
  3975  0011C0  B0D8               	btfsc	status,0,c
  3976  0011C2  D005               	goto	l254
  3977                           
  3978                           ; BSR set to: 0
  3979                           ;doprnt.c: 1350: width -= prec;
  3980  0011C4  51D4               	movf	sprintf@prec& (0+255),w,b
  3981  0011C6  5FCF               	subwf	sprintf@width& (0+255),f,b
  3982  0011C8  51D5               	movf	(sprintf@prec+1)& (0+255),w,b
  3983  0011CA  5BD0               	subwfb	(sprintf@width+1)& (0+255),f,b
  3984  0011CC  D004               	goto	l255
  3985  0011CE                     l254:
  3986                           
  3987                           ; BSR set to: 0
  3988                           ;doprnt.c: 1351: else
  3989                           ;doprnt.c: 1352: width = 0;
  3990                           
  3991                           ; BSR set to: 0
  3992  0011CE  0E00               	movlw	0
  3993  0011D0  6FD0               	movwf	(sprintf@width+1)& (0+255),b
  3994  0011D2  0E00               	movlw	0
  3995  0011D4  6FCF               	movwf	sprintf@width& (0+255),b
  3996  0011D6                     l255:
  3997                           
  3998                           ; BSR set to: 0
  3999                           ;doprnt.c: 1353: }
  4000                           ;doprnt.c: 1381: if(width > c)
  4001                           
  4002                           ; BSR set to: 0
  4003                           
  4004                           ; BSR set to: 0
  4005  0011D6  0E80               	movlw	128
  4006  0011D8  BFD6               	btfsc	sprintf@c& (0+255),7,b
  4007  0011DA  0E7F               	movlw	127
  4008  0011DC  6FB8               	movwf	??_sprintf& (0+255),b
  4009  0011DE  51CF               	movf	sprintf@width& (0+255),w,b
  4010  0011E0  5DD6               	subwf	sprintf@c& (0+255),w,b
  4011  0011E2  51D0               	movf	(sprintf@width+1)& (0+255),w,b
  4012  0011E4  0A80               	xorlw	128
  4013  0011E6  59B8               	subwfb	??_sprintf& (0+255),w,b
  4014  0011E8  B0D8               	btfsc	status,0,c
  4015  0011EA  D007               	goto	l256
  4016                           
  4017                           ; BSR set to: 0
  4018                           ;doprnt.c: 1382: width -= c;
  4019  0011EC  51D6               	movf	sprintf@c& (0+255),w,b
  4020  0011EE  5FCF               	subwf	sprintf@width& (0+255),f,b
  4021  0011F0  0E00               	movlw	0
  4022  0011F2  BFD6               	btfsc	sprintf@c& (0+255),7,b
  4023  0011F4  0EFF               	movlw	255
  4024  0011F6  5BD0               	subwfb	(sprintf@width+1)& (0+255),f,b
  4025  0011F8  D004               	goto	l257
  4026  0011FA                     l256:
  4027                           
  4028                           ; BSR set to: 0
  4029                           ;doprnt.c: 1383: else
  4030                           ;doprnt.c: 1384: width = 0;
  4031                           
  4032                           ; BSR set to: 0
  4033  0011FA  0E00               	movlw	0
  4034  0011FC  6FD0               	movwf	(sprintf@width+1)& (0+255),b
  4035  0011FE  0E00               	movlw	0
  4036  001200  6FCF               	movwf	sprintf@width& (0+255),b
  4037  001202                     l257:
  4038                           
  4039                           ; BSR set to: 0
  4040                           ;doprnt.c: 1387: if(flag & 0x04) {
  4041                           
  4042                           ; BSR set to: 0
  4043  001202  A5CD               	btfss	sprintf@flag& (0+255),2,b
  4044  001204  D022               	goto	l258
  4045                           
  4046                           ; BSR set to: 0
  4047                           ;doprnt.c: 1392: if(flag & 0x03)
  4048  001206  0E03               	movlw	3
  4049  001208  15CD               	andwf	sprintf@flag& (0+255),w,b
  4050  00120A  6FB8               	movwf	??_sprintf& (0+255),b
  4051  00120C  0E00               	movlw	0
  4052  00120E  15CE               	andwf	(sprintf@flag+1)& (0+255),w,b
  4053  001210  6FB9               	movwf	(??_sprintf+1)& (0+255),b
  4054  001212  51B8               	movf	??_sprintf& (0+255),w,b
  4055  001214  11B9               	iorwf	(??_sprintf+1)& (0+255),w,b
  4056  001216  B4D8               	btfsc	status,2,c
  4057  001218  D008               	goto	l259
  4058                           
  4059                           ; BSR set to: 0
  4060                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  4061  00121A  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  4062  00121E  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  4063  001222  0E2D               	movlw	45
  4064  001224  6EDF               	movwf	indf2,c
  4065                           
  4066                           ; BSR set to: 0
  4067  001226  4BB1               	infsnz	sprintf@sp& (0+255),f,b
  4068  001228  2BB2               	incf	(sprintf@sp+1)& (0+255),f,b
  4069  00122A                     l259:
  4070                           
  4071                           ; BSR set to: 0
  4072                           ;doprnt.c: 1415: if(width)
  4073                           
  4074                           ; BSR set to: 0
  4075  00122A  51CF               	movf	sprintf@width& (0+255),w,b
  4076  00122C  11D0               	iorwf	(sprintf@width+1)& (0+255),w,b
  4077  00122E  B4D8               	btfsc	status,2,c
  4078  001230  D075               	goto	l268
  4079                           
  4080                           ; BSR set to: 0
  4081                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  4082                           
  4083                           ; BSR set to: 0
  4084                           
  4085                           ;doprnt.c: 1416: do
  4086  001232  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  4087  001236  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  4088  00123A  0E30               	movlw	48
  4089  00123C  6EDF               	movwf	indf2,c
  4090                           
  4091                           ; BSR set to: 0
  4092  00123E  4BB1               	infsnz	sprintf@sp& (0+255),f,b
  4093  001240  2BB2               	incf	(sprintf@sp+1)& (0+255),f,b
  4094                           
  4095                           ; BSR set to: 0
  4096                           ;doprnt.c: 1418: while(--width);
  4097  001242  07CF               	decf	sprintf@width& (0+255),f,b
  4098  001244  A0D8               	btfss	status,0,c
  4099  001246  07D0               	decf	(sprintf@width+1)& (0+255),f,b
  4100  001248  D7F0               	goto	l259
  4101  00124A                     l258:
  4102                           
  4103                           ; BSR set to: 0
  4104                           ;doprnt.c: 1422: {
  4105                           ;doprnt.c: 1424: if(width
  4106                           ;doprnt.c: 1428: )
  4107                           
  4108                           ; BSR set to: 0
  4109  00124A  51CF               	movf	sprintf@width& (0+255),w,b
  4110  00124C  11D0               	iorwf	(sprintf@width+1)& (0+255),w,b
  4111  00124E  B4D8               	btfsc	status,2,c
  4112  001250  D00F               	goto	u3970
  4113  001252                     u3960:
  4114                           
  4115                           ; BSR set to: 0
  4116                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  4117                           
  4118                           ; BSR set to: 0
  4119                           
  4120                           ;doprnt.c: 1429: do
  4121  001252  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  4122  001256  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  4123  00125A  0E20               	movlw	32
  4124  00125C  6EDF               	movwf	indf2,c
  4125                           
  4126                           ; BSR set to: 0
  4127  00125E  4BB1               	infsnz	sprintf@sp& (0+255),f,b
  4128  001260  2BB2               	incf	(sprintf@sp+1)& (0+255),f,b
  4129                           
  4130                           ; BSR set to: 0
  4131                           ;doprnt.c: 1431: while(--width);
  4132  001262  07CF               	decf	sprintf@width& (0+255),f,b
  4133  001264  A0D8               	btfss	status,0,c
  4134  001266  07D0               	decf	(sprintf@width+1)& (0+255),f,b
  4135  001268  51CF               	movf	sprintf@width& (0+255),w,b
  4136  00126A  11D0               	iorwf	(sprintf@width+1)& (0+255),w,b
  4137  00126C  A4D8               	btfss	status,2,c
  4138  00126E  D7F1               	goto	u3960
  4139  001270                     u3970:
  4140                           
  4141                           ; BSR set to: 0
  4142                           ;doprnt.c: 1438: if(flag & 0x03)
  4143                           
  4144                           ; BSR set to: 0
  4145                           
  4146                           ; BSR set to: 0
  4147  001270  0E03               	movlw	3
  4148  001272  15CD               	andwf	sprintf@flag& (0+255),w,b
  4149  001274  6FB8               	movwf	??_sprintf& (0+255),b
  4150  001276  0E00               	movlw	0
  4151  001278  15CE               	andwf	(sprintf@flag+1)& (0+255),w,b
  4152  00127A  6FB9               	movwf	(??_sprintf+1)& (0+255),b
  4153  00127C  51B8               	movf	??_sprintf& (0+255),w,b
  4154  00127E  11B9               	iorwf	(??_sprintf+1)& (0+255),w,b
  4155  001280  B4D8               	btfsc	status,2,c
  4156  001282  D04C               	goto	l268
  4157                           
  4158                           ; BSR set to: 0
  4159                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  4160  001284  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  4161  001288  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  4162  00128C  0E2D               	movlw	45
  4163  00128E  6EDF               	movwf	indf2,c
  4164  001290  D043               	goto	l3756
  4165  001292                     l3752:
  4166                           
  4167                           ; BSR set to: 0
  4168                           ;doprnt.c: 1478: {
  4169                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4170  001292  C0D4  F0B8         	movff	sprintf@prec,??_sprintf
  4171  001296  C0D5  F0B9         	movff	sprintf@prec+1,??_sprintf+1
  4172  00129A  90D8               	bcf	status,0,c
  4173  00129C  37B8               	rlcf	??_sprintf& (0+255),f,b
  4174  00129E  37B9               	rlcf	(??_sprintf+1)& (0+255),f,b
  4175  0012A0  90D8               	bcf	status,0,c
  4176  0012A2  37B8               	rlcf	??_sprintf& (0+255),f,b
  4177  0012A4  37B9               	rlcf	(??_sprintf+1)& (0+255),f,b
  4178  0012A6  0E01               	movlw	low _dpowers
  4179  0012A8  25B8               	addwf	??_sprintf& (0+255),w,b
  4180  0012AA  6EF6               	movwf	tblptrl,c
  4181  0012AC  0E08               	movlw	high _dpowers
  4182  0012AE  21B9               	addwfc	(??_sprintf+1)& (0+255),w,b
  4183  0012B0  6EF7               	movwf	tblptrh,c
  4184  0012B2                     	if	0	;There are less than 3 active tblptr bytes
  4185  0012B2                     	endif
  4186  0012B2  0009               	tblrd		*+
  4187  0012B4  CFF5 F064          	movff	tablat,___lldiv@divisor
  4188  0012B8  0009               	tblrd		*+
  4189  0012BA  CFF5 F065          	movff	tablat,___lldiv@divisor+1
  4190  0012BE  0009               	tblrd		*+
  4191  0012C0  CFF5 F066          	movff	tablat,___lldiv@divisor+2
  4192  0012C4  000A               	tblrd		*-
  4193  0012C6  CFF5 F067          	movff	tablat,___lldiv@divisor+3
  4194  0012CA  C0C7  F060         	movff	sprintf@val,___lldiv@dividend
  4195  0012CE  C0C8  F061         	movff	sprintf@val+1,___lldiv@dividend+1
  4196  0012D2  C0C9  F062         	movff	sprintf@val+2,___lldiv@dividend+2
  4197  0012D6  C0CA  F063         	movff	sprintf@val+3,___lldiv@dividend+3
  4198  0012DA  ECD8  F01B         	call	___lldiv	;wreg free
  4199  0012DE  C060  F06D         	movff	?___lldiv,___llmod@dividend
  4200  0012E2  C061  F06E         	movff	?___lldiv+1,___llmod@dividend+1
  4201  0012E6  C062  F06F         	movff	?___lldiv+2,___llmod@dividend+2
  4202  0012EA  C063  F070         	movff	?___lldiv+3,___llmod@dividend+3
  4203  0012EE  0E0A               	movlw	10
  4204  0012F0  0100               	movlb	0	; () banked
  4205  0012F2  6F71               	movwf	___llmod@divisor& (0+255),b
  4206  0012F4  0E00               	movlw	0
  4207  0012F6  6F72               	movwf	(___llmod@divisor+1)& (0+255),b
  4208  0012F8  0E00               	movlw	0
  4209  0012FA  6F73               	movwf	(___llmod@divisor+2)& (0+255),b
  4210  0012FC  0E00               	movlw	0
  4211  0012FE  6F74               	movwf	(___llmod@divisor+3)& (0+255),b
  4212  001300  ECCE  F01C         	call	___llmod	;wreg free
  4213  001304  0100               	movlb	0	; () banked
  4214  001306  516D               	movf	?___llmod& (0+255),w,b
  4215  001308  0F30               	addlw	48
  4216  00130A  6FD6               	movwf	sprintf@c& (0+255),b
  4217                           
  4218                           ; BSR set to: 0
  4219                           ;doprnt.c: 1523: }
  4220                           ;doprnt.c: 1524: ((*sp++ = (c)));
  4221  00130C  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  4222  001310  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  4223  001314  C0D6  FFDF         	movff	sprintf@c,indf2
  4224  001318                     l3756:
  4225                           
  4226                           ; BSR set to: 0
  4227  001318  4BB1               	infsnz	sprintf@sp& (0+255),f,b
  4228  00131A  2BB2               	incf	(sprintf@sp+1)& (0+255),f,b
  4229  00131C                     l268:
  4230                           
  4231                           ; BSR set to: 0
  4232                           
  4233                           ; BSR set to: 0
  4234  00131C  07D4               	decf	sprintf@prec& (0+255),f,b
  4235  00131E  A0D8               	btfss	status,0,c
  4236  001320  07D5               	decf	(sprintf@prec+1)& (0+255),f,b
  4237  001322  29D4               	incf	sprintf@prec& (0+255),w,b
  4238  001324  E1B6               	bnz	l3752
  4239  001326  29D5               	incf	(sprintf@prec+1)& (0+255),w,b
  4240  001328  A4D8               	btfss	status,2,c
  4241  00132A  D7B3               	goto	l269
  4242  00132C                     u3990:
  4243                           
  4244                           ; BSR set to: 0
  4245                           
  4246                           ; BSR set to: 0
  4247                           
  4248                           ; BSR set to: 0
  4249  00132C  C0B3  FFF6         	movff	sprintf@f,tblptrl
  4250  001330  C0B4  FFF7         	movff	sprintf@f+1,tblptrh
  4251  001334  4BB3               	infsnz	sprintf@f& (0+255),f,b
  4252  001336  2BB4               	incf	(sprintf@f+1)& (0+255),f,b
  4253  001338                     	if	0	;tblptru may be non-zero
  4254  001338                     	endif
  4255  001338                     	if	0	;tblptru may be non-zero
  4256  001338                     	endif
  4257  001338  0008               	tblrd		*
  4258  00133A  CFF5 F0D6          	movff	tablat,sprintf@c
  4259  00133E  51D6               	movf	sprintf@c& (0+255),w,b
  4260  001340  A4D8               	btfss	status,2,c
  4261  001342  EF74  F004         	goto	l171
  4262  001346                     u4000:
  4263                           
  4264                           ; BSR set to: 0
  4265                           ;doprnt.c: 1538: *sp = 0;
  4266                           
  4267                           ; BSR set to: 0
  4268                           
  4269                           ;doprnt.c: 1525: }
  4270                           ;doprnt.c: 1533: }
  4271                           ;doprnt.c: 1535: alldone:
  4272                           
  4273                           ; BSR set to: 0
  4274  001346  C0B1  FFD9         	movff	sprintf@sp,fsr2l
  4275  00134A  C0B2  FFDA         	movff	sprintf@sp+1,fsr2h
  4276  00134E  0E00               	movlw	0
  4277  001350  6EDF               	movwf	indf2,c
  4278  001352  0012               	return	
  4279  001354                     __end_of_sprintf:
  4280                           	opt stack 0
  4281                           tblptru	equ	0xFF8
  4282                           tblptrh	equ	0xFF7
  4283                           tblptrl	equ	0xFF6
  4284                           tablat	equ	0xFF5
  4285                           prodh	equ	0xFF4
  4286                           prodl	equ	0xFF3
  4287                           postinc0	equ	0xFEE
  4288                           wreg	equ	0xFE8
  4289                           indf2	equ	0xFDF
  4290                           postinc2	equ	0xFDE
  4291                           postdec2	equ	0xFDD
  4292                           fsr2h	equ	0xFDA
  4293                           fsr2l	equ	0xFD9
  4294                           status	equ	0xFD8
  4295                           
  4296 ;; *************** function _scale *****************
  4297 ;; Defined at:
  4298 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  4299 ;; Parameters:    Size  Location     Type
  4300 ;;  scl             1    wreg     char 
  4301 ;; Auto vars:     Size  Location     Type
  4302 ;;  scl             1   41[BANK0 ] char 
  4303 ;; Return value:  Size  Location     Type
  4304 ;;                  3   35[BANK0 ] char 
  4305 ;; Registers used:
  4306 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4307 ;; Tracked objects:
  4308 ;;		On entry : 0/0
  4309 ;;		On exit  : 0/0
  4310 ;;		Unchanged: 0/0
  4311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4312 ;;      Params:         0       3       0       0       0       0       0       0       0
  4313 ;;      Locals:         0       4       0       0       0       0       0       0       0
  4314 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4315 ;;      Totals:         0       7       0       0       0       0       0       0       0
  4316 ;;Total ram usage:        7 bytes
  4317 ;; Hardware stack levels used:    1
  4318 ;; Hardware stack levels required when called:    5
  4319 ;; This function calls:
  4320 ;;		___awdiv
  4321 ;;		___awmod
  4322 ;;		___ftmul
  4323 ;;		___wmul
  4324 ;; This function is called by:
  4325 ;;		_sprintf
  4326 ;; This function uses a non-reentrant model
  4327 ;;
  4328                           
  4329                           	psect	text3
  4330  001A24                     __ptext3:
  4331                           	opt stack 0
  4332  001A24                     _scale:
  4333                           	opt stack 24
  4334                           
  4335                           ; BSR set to: 0
  4336                           ;incstack = 0
  4337                           ;scale@scl stored from wreg
  4338  001A24  0100               	movlb	0	; () banked
  4339  001A26  6F89               	movwf	scale@scl& (0+255),b
  4340                           
  4341                           ;doprnt.c: 428: if(scl < 0) {
  4342  001A28  0100               	movlb	0	; () banked
  4343  001A2A  AF89               	btfss	scale@scl& (0+255),7,b
  4344  001A2C  D10C               	goto	l160
  4345                           
  4346                           ; BSR set to: 0
  4347                           ;doprnt.c: 429: scl = -scl;
  4348  001A2E  6D89               	negf	scale@scl& (0+255),b
  4349                           
  4350                           ;doprnt.c: 430: if(scl>=110)
  4351  001A30  5189               	movf	scale@scl& (0+255),w,b
  4352  001A32  0A80               	xorlw	128
  4353  001A34  0F12               	addlw	-238
  4354  001A36  A0D8               	btfss	status,0,c
  4355  001A38  D097               	goto	l161
  4356                           
  4357                           ; BSR set to: 0
  4358                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4359  001A3A  0E00               	movlw	0
  4360  001A3C  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4361  001A3E  0E03               	movlw	3
  4362  001A40  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4363  001A42  0E00               	movlw	0
  4364  001A44  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  4365  001A46  0E0A               	movlw	10
  4366  001A48  6F68               	movwf	___awdiv@divisor& (0+255),b
  4367  001A4A  0E00               	movlw	0
  4368  001A4C  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4369  001A4E  0E64               	movlw	100
  4370  001A50  6F62               	movwf	___awmod@divisor& (0+255),b
  4371  001A52  5189               	movf	scale@scl& (0+255),w,b
  4372  001A54  6F60               	movwf	___awmod@dividend& (0+255),b
  4373  001A56  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4374  001A58  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  4375  001A5A  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  4376  001A5C  EC95  F01C         	call	___awmod	;wreg free
  4377  001A60  C060  F066         	movff	?___awmod,___awdiv@dividend
  4378  001A64  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
  4379  001A68  EC95  F01B         	call	___awdiv	;wreg free
  4380  001A6C  0E09               	movlw	9
  4381  001A6E  0100               	movlb	0	; () banked
  4382  001A70  2566               	addwf	?___awdiv& (0+255),w,b
  4383  001A72  6F6E               	movwf	___wmul@multiplier& (0+255),b
  4384  001A74  0E00               	movlw	0
  4385  001A76  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  4386  001A78  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4387  001A7A  EC93  F01D         	call	___wmul	;wreg free
  4388  001A7E  0E50               	movlw	low __npowers_
  4389  001A80  0100               	movlb	0	; () banked
  4390  001A82  256E               	addwf	?___wmul& (0+255),w,b
  4391  001A84  6EF6               	movwf	tblptrl,c
  4392  001A86  0E08               	movlw	high __npowers_
  4393  001A88  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4394  001A8A  6EF7               	movwf	tblptrh,c
  4395  001A8C                     	if	0	;There are less than 3 active tblptr bytes
  4396  001A8C                     	endif
  4397  001A8C  0009               	tblrd		*+
  4398  001A8E  CFF5 F077          	movff	tablat,___ftmul@f2
  4399  001A92  0009               	tblrd		*+
  4400  001A94  CFF5 F078          	movff	tablat,___ftmul@f2+1
  4401  001A98  000A               	tblrd		*-
  4402  001A9A  CFF5 F079          	movff	tablat,___ftmul@f2+2
  4403  001A9E  0E00               	movlw	0
  4404  001AA0  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  4405  001AA2  0E64               	movlw	100
  4406  001AA4  6F68               	movwf	___awdiv@divisor& (0+255),b
  4407  001AA6  5189               	movf	scale@scl& (0+255),w,b
  4408  001AA8  6F66               	movwf	___awdiv@dividend& (0+255),b
  4409  001AAA  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  4410  001AAC  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  4411  001AAE  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  4412  001AB0  EC95  F01B         	call	___awdiv	;wreg free
  4413  001AB4  0E12               	movlw	18
  4414  001AB6  0100               	movlb	0	; () banked
  4415  001AB8  2566               	addwf	?___awdiv& (0+255),w,b
  4416  001ABA  6F6E               	movwf	___wmul@multiplier& (0+255),b
  4417  001ABC  0E00               	movlw	0
  4418  001ABE  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  4419  001AC0  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4420  001AC2  0E00               	movlw	0
  4421  001AC4  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4422  001AC6  0E03               	movlw	3
  4423  001AC8  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4424  001ACA  EC93  F01D         	call	___wmul	;wreg free
  4425  001ACE  0E50               	movlw	low __npowers_
  4426  001AD0  0100               	movlb	0	; () banked
  4427  001AD2  256E               	addwf	?___wmul& (0+255),w,b
  4428  001AD4  6EF6               	movwf	tblptrl,c
  4429  001AD6  0E08               	movlw	high __npowers_
  4430  001AD8  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4431  001ADA  6EF7               	movwf	tblptrh,c
  4432  001ADC                     	if	0	;There are less than 3 active tblptr bytes
  4433  001ADC                     	endif
  4434  001ADC  0009               	tblrd		*+
  4435  001ADE  CFF5 F074          	movff	tablat,___ftmul@f1
  4436  001AE2  0009               	tblrd		*+
  4437  001AE4  CFF5 F075          	movff	tablat,___ftmul@f1+1
  4438  001AE8  000A               	tblrd		*-
  4439  001AEA  CFF5 F076          	movff	tablat,___ftmul@f1+2
  4440  001AEE  EC3C  F017         	call	___ftmul	;wreg free
  4441  001AF2  C074  F086         	movff	?___ftmul,_scale$1433
  4442  001AF6  C075  F087         	movff	?___ftmul+1,_scale$1433+1
  4443  001AFA  C076  F088         	movff	?___ftmul+2,_scale$1433+2
  4444                           
  4445                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4446  001AFE  C086  F074         	movff	_scale$1433,___ftmul@f1
  4447  001B02  C087  F075         	movff	_scale$1433+1,___ftmul@f1+1
  4448  001B06  C088  F076         	movff	_scale$1433+2,___ftmul@f1+2
  4449  001B0A  0E00               	movlw	0
  4450  001B0C  0100               	movlb	0	; () banked
  4451  001B0E  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4452  001B10  0E03               	movlw	3
  4453  001B12  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4454  001B14  0E00               	movlw	0
  4455  001B16  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4456  001B18  0E0A               	movlw	10
  4457  001B1A  6F62               	movwf	___awmod@divisor& (0+255),b
  4458  001B1C  5189               	movf	scale@scl& (0+255),w,b
  4459  001B1E  6F60               	movwf	___awmod@dividend& (0+255),b
  4460  001B20  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4461  001B22  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  4462  001B24  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  4463  001B26  EC95  F01C         	call	___awmod	;wreg free
  4464  001B2A  C060  F06E         	movff	?___awmod,___wmul@multiplier
  4465  001B2E  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  4466  001B32  EC93  F01D         	call	___wmul	;wreg free
  4467  001B36  0E50               	movlw	low __npowers_
  4468  001B38  0100               	movlb	0	; () banked
  4469  001B3A  256E               	addwf	?___wmul& (0+255),w,b
  4470  001B3C  6EF6               	movwf	tblptrl,c
  4471  001B3E  0E08               	movlw	high __npowers_
  4472  001B40  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4473  001B42  6EF7               	movwf	tblptrh,c
  4474  001B44                     	if	0	;There are less than 3 active tblptr bytes
  4475  001B44                     	endif
  4476  001B44  0009               	tblrd		*+
  4477  001B46  CFF5 F077          	movff	tablat,___ftmul@f2
  4478  001B4A  0009               	tblrd		*+
  4479  001B4C  CFF5 F078          	movff	tablat,___ftmul@f2+1
  4480  001B50  000A               	tblrd		*-
  4481  001B52  CFF5 F079          	movff	tablat,___ftmul@f2+2
  4482  001B56  EC3C  F017         	call	___ftmul	;wreg free
  4483  001B5A  C074  F083         	movff	?___ftmul,?_scale
  4484  001B5E  C075  F084         	movff	?___ftmul+1,?_scale+1
  4485  001B62  C076  F085         	movff	?___ftmul+2,?_scale+2
  4486  001B66  0012               	return	
  4487  001B68                     l161:
  4488                           
  4489                           ;doprnt.c: 432: else if(scl > 10)
  4490  001B68  0100               	movlb	0	; () banked
  4491  001B6A  5189               	movf	scale@scl& (0+255),w,b
  4492  001B6C  0A80               	xorlw	128
  4493  001B6E  0F75               	addlw	-139
  4494  001B70  A0D8               	btfss	status,0,c
  4495  001B72  D056               	goto	l164
  4496                           
  4497                           ; BSR set to: 0
  4498                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  4499  001B74  0E00               	movlw	0
  4500  001B76  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  4501  001B78  0E0A               	movlw	10
  4502  001B7A  6F68               	movwf	___awdiv@divisor& (0+255),b
  4503  001B7C  5189               	movf	scale@scl& (0+255),w,b
  4504  001B7E  6F66               	movwf	___awdiv@dividend& (0+255),b
  4505  001B80  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  4506  001B82  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  4507  001B84  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  4508  001B86  EC95  F01B         	call	___awdiv	;wreg free
  4509  001B8A  0E09               	movlw	9
  4510  001B8C  0100               	movlb	0	; () banked
  4511  001B8E  2566               	addwf	?___awdiv& (0+255),w,b
  4512  001B90  6F6E               	movwf	___wmul@multiplier& (0+255),b
  4513  001B92  0E00               	movlw	0
  4514  001B94  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  4515  001B96  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4516  001B98  0E00               	movlw	0
  4517  001B9A  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4518  001B9C  0E03               	movlw	3
  4519  001B9E  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4520  001BA0  EC93  F01D         	call	___wmul	;wreg free
  4521  001BA4  0E50               	movlw	low __npowers_
  4522  001BA6  0100               	movlb	0	; () banked
  4523  001BA8  256E               	addwf	?___wmul& (0+255),w,b
  4524  001BAA  6EF6               	movwf	tblptrl,c
  4525  001BAC  0E08               	movlw	high __npowers_
  4526  001BAE  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4527  001BB0  6EF7               	movwf	tblptrh,c
  4528  001BB2                     	if	0	;There are less than 3 active tblptr bytes
  4529  001BB2                     	endif
  4530  001BB2  0009               	tblrd		*+
  4531  001BB4  CFF5 F074          	movff	tablat,___ftmul@f1
  4532  001BB8  0009               	tblrd		*+
  4533  001BBA  CFF5 F075          	movff	tablat,___ftmul@f1+1
  4534  001BBE  000A               	tblrd		*-
  4535  001BC0  CFF5 F076          	movff	tablat,___ftmul@f1+2
  4536  001BC4  0E00               	movlw	0
  4537  001BC6  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4538  001BC8  0E03               	movlw	3
  4539  001BCA  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4540  001BCC  0E00               	movlw	0
  4541  001BCE  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4542  001BD0  0E0A               	movlw	10
  4543  001BD2  6F62               	movwf	___awmod@divisor& (0+255),b
  4544  001BD4  5189               	movf	scale@scl& (0+255),w,b
  4545  001BD6  6F60               	movwf	___awmod@dividend& (0+255),b
  4546  001BD8  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4547  001BDA  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  4548  001BDC  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  4549  001BDE  EC95  F01C         	call	___awmod	;wreg free
  4550  001BE2  C060  F06E         	movff	?___awmod,___wmul@multiplier
  4551  001BE6  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  4552  001BEA  EC93  F01D         	call	___wmul	;wreg free
  4553  001BEE  0E50               	movlw	low __npowers_
  4554  001BF0  0100               	movlb	0	; () banked
  4555  001BF2  256E               	addwf	?___wmul& (0+255),w,b
  4556  001BF4  6EF6               	movwf	tblptrl,c
  4557  001BF6  0E08               	movlw	high __npowers_
  4558  001BF8  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4559  001BFA  6EF7               	movwf	tblptrh,c
  4560  001BFC                     	if	0	;There are less than 3 active tblptr bytes
  4561  001BFC                     	endif
  4562  001BFC  0009               	tblrd		*+
  4563  001BFE  CFF5 F077          	movff	tablat,___ftmul@f2
  4564  001C02  0009               	tblrd		*+
  4565  001C04  CFF5 F078          	movff	tablat,___ftmul@f2+1
  4566  001C08  000A               	tblrd		*-
  4567  001C0A  CFF5 F079          	movff	tablat,___ftmul@f2+2
  4568  001C0E  EC3C  F017         	call	___ftmul	;wreg free
  4569  001C12  C074  F083         	movff	?___ftmul,?_scale
  4570  001C16  C075  F084         	movff	?___ftmul+1,?_scale+1
  4571  001C1A  C076  F085         	movff	?___ftmul+2,?_scale+2
  4572  001C1E  0012               	return	
  4573  001C20                     l164:
  4574                           
  4575                           ;doprnt.c: 434: return _npowers_[scl];
  4576  001C20  0100               	movlb	0	; () banked
  4577  001C22  5189               	movf	scale@scl& (0+255),w,b
  4578  001C24  0D03               	mullw	3
  4579  001C26  0E50               	movlw	low __npowers_
  4580  001C28  24F3               	addwf	prodl,w,c
  4581  001C2A  6EF6               	movwf	tblptrl,c
  4582  001C2C  0E08               	movlw	high __npowers_
  4583  001C2E  20F4               	addwfc	prodh,w,c
  4584  001C30  6EF7               	movwf	tblptrh,c
  4585  001C32                     	if	0	;There are less than 3 active tblptr bytes
  4586  001C32                     	endif
  4587  001C32  0009               	tblrd		*+
  4588  001C34  CFF5 F083          	movff	tablat,?_scale
  4589  001C38  0009               	tblrd		*+
  4590  001C3A  CFF5 F084          	movff	tablat,?_scale+1
  4591  001C3E  000A               	tblrd		*-
  4592  001C40  CFF5 F085          	movff	tablat,?_scale+2
  4593                           
  4594                           ; BSR set to: 0
  4595  001C44  0012               	return	
  4596  001C46                     l160:
  4597                           
  4598                           ; BSR set to: 0
  4599                           ;doprnt.c: 435: }
  4600                           ;doprnt.c: 436: if(scl>=110)
  4601                           
  4602                           ; BSR set to: 0
  4603  001C46  5189               	movf	scale@scl& (0+255),w,b
  4604  001C48  0A80               	xorlw	128
  4605  001C4A  0F12               	addlw	-238
  4606  001C4C  A0D8               	btfss	status,0,c
  4607  001C4E  D097               	goto	l165
  4608                           
  4609                           ; BSR set to: 0
  4610                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4611  001C50  0E00               	movlw	0
  4612  001C52  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4613  001C54  0E03               	movlw	3
  4614  001C56  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4615  001C58  0E00               	movlw	0
  4616  001C5A  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  4617  001C5C  0E0A               	movlw	10
  4618  001C5E  6F68               	movwf	___awdiv@divisor& (0+255),b
  4619  001C60  0E00               	movlw	0
  4620  001C62  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4621  001C64  0E64               	movlw	100
  4622  001C66  6F62               	movwf	___awmod@divisor& (0+255),b
  4623  001C68  5189               	movf	scale@scl& (0+255),w,b
  4624  001C6A  6F60               	movwf	___awmod@dividend& (0+255),b
  4625  001C6C  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4626  001C6E  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  4627  001C70  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  4628  001C72  EC95  F01C         	call	___awmod	;wreg free
  4629  001C76  C060  F066         	movff	?___awmod,___awdiv@dividend
  4630  001C7A  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
  4631  001C7E  EC95  F01B         	call	___awdiv	;wreg free
  4632  001C82  0E09               	movlw	9
  4633  001C84  0100               	movlb	0	; () banked
  4634  001C86  2566               	addwf	?___awdiv& (0+255),w,b
  4635  001C88  6F6E               	movwf	___wmul@multiplier& (0+255),b
  4636  001C8A  0E00               	movlw	0
  4637  001C8C  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  4638  001C8E  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4639  001C90  EC93  F01D         	call	___wmul	;wreg free
  4640  001C94  0E29               	movlw	low __powers_
  4641  001C96  0100               	movlb	0	; () banked
  4642  001C98  256E               	addwf	?___wmul& (0+255),w,b
  4643  001C9A  6EF6               	movwf	tblptrl,c
  4644  001C9C  0E08               	movlw	high __powers_
  4645  001C9E  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4646  001CA0  6EF7               	movwf	tblptrh,c
  4647  001CA2                     	if	0	;There are less than 3 active tblptr bytes
  4648  001CA2                     	endif
  4649  001CA2  0009               	tblrd		*+
  4650  001CA4  CFF5 F077          	movff	tablat,___ftmul@f2
  4651  001CA8  0009               	tblrd		*+
  4652  001CAA  CFF5 F078          	movff	tablat,___ftmul@f2+1
  4653  001CAE  000A               	tblrd		*-
  4654  001CB0  CFF5 F079          	movff	tablat,___ftmul@f2+2
  4655  001CB4  0E00               	movlw	0
  4656  001CB6  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  4657  001CB8  0E64               	movlw	100
  4658  001CBA  6F68               	movwf	___awdiv@divisor& (0+255),b
  4659  001CBC  5189               	movf	scale@scl& (0+255),w,b
  4660  001CBE  6F66               	movwf	___awdiv@dividend& (0+255),b
  4661  001CC0  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  4662  001CC2  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  4663  001CC4  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  4664  001CC6  EC95  F01B         	call	___awdiv	;wreg free
  4665  001CCA  0E12               	movlw	18
  4666  001CCC  0100               	movlb	0	; () banked
  4667  001CCE  2566               	addwf	?___awdiv& (0+255),w,b
  4668  001CD0  6F6E               	movwf	___wmul@multiplier& (0+255),b
  4669  001CD2  0E00               	movlw	0
  4670  001CD4  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  4671  001CD6  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4672  001CD8  0E00               	movlw	0
  4673  001CDA  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4674  001CDC  0E03               	movlw	3
  4675  001CDE  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4676  001CE0  EC93  F01D         	call	___wmul	;wreg free
  4677  001CE4  0E29               	movlw	low __powers_
  4678  001CE6  0100               	movlb	0	; () banked
  4679  001CE8  256E               	addwf	?___wmul& (0+255),w,b
  4680  001CEA  6EF6               	movwf	tblptrl,c
  4681  001CEC  0E08               	movlw	high __powers_
  4682  001CEE  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4683  001CF0  6EF7               	movwf	tblptrh,c
  4684  001CF2                     	if	0	;There are less than 3 active tblptr bytes
  4685  001CF2                     	endif
  4686  001CF2  0009               	tblrd		*+
  4687  001CF4  CFF5 F074          	movff	tablat,___ftmul@f1
  4688  001CF8  0009               	tblrd		*+
  4689  001CFA  CFF5 F075          	movff	tablat,___ftmul@f1+1
  4690  001CFE  000A               	tblrd		*-
  4691  001D00  CFF5 F076          	movff	tablat,___ftmul@f1+2
  4692  001D04  EC3C  F017         	call	___ftmul	;wreg free
  4693  001D08  C074  F086         	movff	?___ftmul,_scale$1433
  4694  001D0C  C075  F087         	movff	?___ftmul+1,_scale$1433+1
  4695  001D10  C076  F088         	movff	?___ftmul+2,_scale$1433+2
  4696                           
  4697                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4698  001D14  C086  F074         	movff	_scale$1433,___ftmul@f1
  4699  001D18  C087  F075         	movff	_scale$1433+1,___ftmul@f1+1
  4700  001D1C  C088  F076         	movff	_scale$1433+2,___ftmul@f1+2
  4701  001D20  0E00               	movlw	0
  4702  001D22  0100               	movlb	0	; () banked
  4703  001D24  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4704  001D26  0E03               	movlw	3
  4705  001D28  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4706  001D2A  0E00               	movlw	0
  4707  001D2C  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4708  001D2E  0E0A               	movlw	10
  4709  001D30  6F62               	movwf	___awmod@divisor& (0+255),b
  4710  001D32  5189               	movf	scale@scl& (0+255),w,b
  4711  001D34  6F60               	movwf	___awmod@dividend& (0+255),b
  4712  001D36  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4713  001D38  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  4714  001D3A  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  4715  001D3C  EC95  F01C         	call	___awmod	;wreg free
  4716  001D40  C060  F06E         	movff	?___awmod,___wmul@multiplier
  4717  001D44  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  4718  001D48  EC93  F01D         	call	___wmul	;wreg free
  4719  001D4C  0E29               	movlw	low __powers_
  4720  001D4E  0100               	movlb	0	; () banked
  4721  001D50  256E               	addwf	?___wmul& (0+255),w,b
  4722  001D52  6EF6               	movwf	tblptrl,c
  4723  001D54  0E08               	movlw	high __powers_
  4724  001D56  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4725  001D58  6EF7               	movwf	tblptrh,c
  4726  001D5A                     	if	0	;There are less than 3 active tblptr bytes
  4727  001D5A                     	endif
  4728  001D5A  0009               	tblrd		*+
  4729  001D5C  CFF5 F077          	movff	tablat,___ftmul@f2
  4730  001D60  0009               	tblrd		*+
  4731  001D62  CFF5 F078          	movff	tablat,___ftmul@f2+1
  4732  001D66  000A               	tblrd		*-
  4733  001D68  CFF5 F079          	movff	tablat,___ftmul@f2+2
  4734  001D6C  EC3C  F017         	call	___ftmul	;wreg free
  4735  001D70  C074  F083         	movff	?___ftmul,?_scale
  4736  001D74  C075  F084         	movff	?___ftmul+1,?_scale+1
  4737  001D78  C076  F085         	movff	?___ftmul+2,?_scale+2
  4738  001D7C  0012               	return	
  4739  001D7E                     l165:
  4740                           
  4741                           ;doprnt.c: 438: else if(scl > 10)
  4742  001D7E  0100               	movlb	0	; () banked
  4743  001D80  5189               	movf	scale@scl& (0+255),w,b
  4744  001D82  0A80               	xorlw	128
  4745  001D84  0F75               	addlw	-139
  4746  001D86  A0D8               	btfss	status,0,c
  4747  001D88  D056               	goto	l167
  4748                           
  4749                           ; BSR set to: 0
  4750                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  4751  001D8A  0E00               	movlw	0
  4752  001D8C  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  4753  001D8E  0E0A               	movlw	10
  4754  001D90  6F68               	movwf	___awdiv@divisor& (0+255),b
  4755  001D92  5189               	movf	scale@scl& (0+255),w,b
  4756  001D94  6F66               	movwf	___awdiv@dividend& (0+255),b
  4757  001D96  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  4758  001D98  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  4759  001D9A  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  4760  001D9C  EC95  F01B         	call	___awdiv	;wreg free
  4761  001DA0  0E09               	movlw	9
  4762  001DA2  0100               	movlb	0	; () banked
  4763  001DA4  2566               	addwf	?___awdiv& (0+255),w,b
  4764  001DA6  6F6E               	movwf	___wmul@multiplier& (0+255),b
  4765  001DA8  0E00               	movlw	0
  4766  001DAA  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  4767  001DAC  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4768  001DAE  0E00               	movlw	0
  4769  001DB0  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4770  001DB2  0E03               	movlw	3
  4771  001DB4  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4772  001DB6  EC93  F01D         	call	___wmul	;wreg free
  4773  001DBA  0E29               	movlw	low __powers_
  4774  001DBC  0100               	movlb	0	; () banked
  4775  001DBE  256E               	addwf	?___wmul& (0+255),w,b
  4776  001DC0  6EF6               	movwf	tblptrl,c
  4777  001DC2  0E08               	movlw	high __powers_
  4778  001DC4  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4779  001DC6  6EF7               	movwf	tblptrh,c
  4780  001DC8                     	if	0	;There are less than 3 active tblptr bytes
  4781  001DC8                     	endif
  4782  001DC8  0009               	tblrd		*+
  4783  001DCA  CFF5 F074          	movff	tablat,___ftmul@f1
  4784  001DCE  0009               	tblrd		*+
  4785  001DD0  CFF5 F075          	movff	tablat,___ftmul@f1+1
  4786  001DD4  000A               	tblrd		*-
  4787  001DD6  CFF5 F076          	movff	tablat,___ftmul@f1+2
  4788  001DDA  0E00               	movlw	0
  4789  001DDC  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4790  001DDE  0E03               	movlw	3
  4791  001DE0  6F70               	movwf	___wmul@multiplicand& (0+255),b
  4792  001DE2  0E00               	movlw	0
  4793  001DE4  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4794  001DE6  0E0A               	movlw	10
  4795  001DE8  6F62               	movwf	___awmod@divisor& (0+255),b
  4796  001DEA  5189               	movf	scale@scl& (0+255),w,b
  4797  001DEC  6F60               	movwf	___awmod@dividend& (0+255),b
  4798  001DEE  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  4799  001DF0  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  4800  001DF2  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  4801  001DF4  EC95  F01C         	call	___awmod	;wreg free
  4802  001DF8  C060  F06E         	movff	?___awmod,___wmul@multiplier
  4803  001DFC  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  4804  001E00  EC93  F01D         	call	___wmul	;wreg free
  4805  001E04  0E29               	movlw	low __powers_
  4806  001E06  0100               	movlb	0	; () banked
  4807  001E08  256E               	addwf	?___wmul& (0+255),w,b
  4808  001E0A  6EF6               	movwf	tblptrl,c
  4809  001E0C  0E08               	movlw	high __powers_
  4810  001E0E  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  4811  001E10  6EF7               	movwf	tblptrh,c
  4812  001E12                     	if	0	;There are less than 3 active tblptr bytes
  4813  001E12                     	endif
  4814  001E12  0009               	tblrd		*+
  4815  001E14  CFF5 F077          	movff	tablat,___ftmul@f2
  4816  001E18  0009               	tblrd		*+
  4817  001E1A  CFF5 F078          	movff	tablat,___ftmul@f2+1
  4818  001E1E  000A               	tblrd		*-
  4819  001E20  CFF5 F079          	movff	tablat,___ftmul@f2+2
  4820  001E24  EC3C  F017         	call	___ftmul	;wreg free
  4821  001E28  C074  F083         	movff	?___ftmul,?_scale
  4822  001E2C  C075  F084         	movff	?___ftmul+1,?_scale+1
  4823  001E30  C076  F085         	movff	?___ftmul+2,?_scale+2
  4824  001E34  0012               	return	
  4825  001E36                     l167:
  4826                           
  4827                           ;doprnt.c: 440: return _powers_[scl];
  4828  001E36  0100               	movlb	0	; () banked
  4829  001E38  5189               	movf	scale@scl& (0+255),w,b
  4830  001E3A  0D03               	mullw	3
  4831  001E3C  0E29               	movlw	low __powers_
  4832  001E3E  24F3               	addwf	prodl,w,c
  4833  001E40  6EF6               	movwf	tblptrl,c
  4834  001E42  0E08               	movlw	high __powers_
  4835  001E44  20F4               	addwfc	prodh,w,c
  4836  001E46  6EF7               	movwf	tblptrh,c
  4837  001E48                     	if	0	;There are less than 3 active tblptr bytes
  4838  001E48                     	endif
  4839  001E48  0009               	tblrd		*+
  4840  001E4A  CFF5 F083          	movff	tablat,?_scale
  4841  001E4E  0009               	tblrd		*+
  4842  001E50  CFF5 F084          	movff	tablat,?_scale+1
  4843  001E54  000A               	tblrd		*-
  4844  001E56  CFF5 F085          	movff	tablat,?_scale+2
  4845  001E5A  0012               	return	
  4846  001E5C                     __end_of_scale:
  4847                           	opt stack 0
  4848                           tblptru	equ	0xFF8
  4849                           tblptrh	equ	0xFF7
  4850                           tblptrl	equ	0xFF6
  4851                           tablat	equ	0xFF5
  4852                           prodh	equ	0xFF4
  4853                           prodl	equ	0xFF3
  4854                           postinc0	equ	0xFEE
  4855                           wreg	equ	0xFE8
  4856                           indf2	equ	0xFDF
  4857                           postinc2	equ	0xFDE
  4858                           postdec2	equ	0xFDD
  4859                           fsr2h	equ	0xFDA
  4860                           fsr2l	equ	0xFD9
  4861                           status	equ	0xFD8
  4862                           
  4863 ;; *************** function _isdigit *****************
  4864 ;; Defined at:
  4865 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  4866 ;; Parameters:    Size  Location     Type
  4867 ;;  c               1    wreg     unsigned char 
  4868 ;; Auto vars:     Size  Location     Type
  4869 ;;  c               1    2[BANK0 ] unsigned char 
  4870 ;; Return value:  Size  Location     Type
  4871 ;;		None               void
  4872 ;; Registers used:
  4873 ;;		wreg, status,2, status,0
  4874 ;; Tracked objects:
  4875 ;;		On entry : 0/0
  4876 ;;		On exit  : 0/0
  4877 ;;		Unchanged: 0/0
  4878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4879 ;;      Params:         0       0       0       0       0       0       0       0       0
  4880 ;;      Locals:         0       2       0       0       0       0       0       0       0
  4881 ;;      Temps:          0       1       0       0       0       0       0       0       0
  4882 ;;      Totals:         0       3       0       0       0       0       0       0       0
  4883 ;;Total ram usage:        3 bytes
  4884 ;; Hardware stack levels used:    1
  4885 ;; Hardware stack levels required when called:    3
  4886 ;; This function calls:
  4887 ;;		Nothing
  4888 ;; This function is called by:
  4889 ;;		_sprintf
  4890 ;; This function uses a non-reentrant model
  4891 ;;
  4892                           
  4893                           	psect	text4
  4894  003BBE                     __ptext4:
  4895                           	opt stack 0
  4896  003BBE                     _isdigit:
  4897                           	opt stack 26
  4898                           
  4899                           ;incstack = 0
  4900                           ;isdigit@c stored from wreg
  4901  003BBE  0100               	movlb	0	; () banked
  4902  003BC0  6F62               	movwf	isdigit@c& (0+255),b
  4903  003BC2  0E00               	movlw	0
  4904  003BC4  0100               	movlb	0	; () banked
  4905  003BC6  6F61               	movwf	_isdigit$1019& (0+255),b
  4906                           
  4907                           ; BSR set to: 0
  4908  003BC8  0E3A               	movlw	58
  4909  003BCA  6162               	cpfslt	isdigit@c& (0+255),b
  4910  003BCC  D005               	goto	l642
  4911                           
  4912                           ; BSR set to: 0
  4913  003BCE  0E2F               	movlw	47
  4914  003BD0  6562               	cpfsgt	isdigit@c& (0+255),b
  4915  003BD2  D002               	goto	l642
  4916                           
  4917                           ; BSR set to: 0
  4918  003BD4  0E01               	movlw	1
  4919  003BD6  6F61               	movwf	_isdigit$1019& (0+255),b
  4920  003BD8                     l642:
  4921                           
  4922                           ; BSR set to: 0
  4923                           
  4924                           ; BSR set to: 0
  4925  003BD8  C061  F060         	movff	_isdigit$1019,??_isdigit
  4926  003BDC  3160               	rrcf	??_isdigit& (0+255),w,b
  4927  003BDE  0012               	return	
  4928  003BE0                     __end_of_isdigit:
  4929                           	opt stack 0
  4930                           tblptru	equ	0xFF8
  4931                           tblptrh	equ	0xFF7
  4932                           tblptrl	equ	0xFF6
  4933                           tablat	equ	0xFF5
  4934                           prodh	equ	0xFF4
  4935                           prodl	equ	0xFF3
  4936                           postinc0	equ	0xFEE
  4937                           wreg	equ	0xFE8
  4938                           indf2	equ	0xFDF
  4939                           postinc2	equ	0xFDE
  4940                           postdec2	equ	0xFDD
  4941                           fsr2h	equ	0xFDA
  4942                           fsr2l	equ	0xFD9
  4943                           status	equ	0xFD8
  4944                           
  4945 ;; *************** function _fround *****************
  4946 ;; Defined at:
  4947 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  4948 ;; Parameters:    Size  Location     Type
  4949 ;;  prec            1    wreg     unsigned char 
  4950 ;; Auto vars:     Size  Location     Type
  4951 ;;  prec            1   44[BANK0 ] unsigned char 
  4952 ;; Return value:  Size  Location     Type
  4953 ;;                  3   35[BANK0 ] unsigned char 
  4954 ;; Registers used:
  4955 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4956 ;; Tracked objects:
  4957 ;;		On entry : 0/0
  4958 ;;		On exit  : 0/0
  4959 ;;		Unchanged: 0/0
  4960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4961 ;;      Params:         0       3       0       0       0       0       0       0       0
  4962 ;;      Locals:         0       7       0       0       0       0       0       0       0
  4963 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4964 ;;      Totals:         0      10       0       0       0       0       0       0       0
  4965 ;;Total ram usage:       10 bytes
  4966 ;; Hardware stack levels used:    1
  4967 ;; Hardware stack levels required when called:    5
  4968 ;; This function calls:
  4969 ;;		___awdiv
  4970 ;;		___awmod
  4971 ;;		___ftmul
  4972 ;;		___wmul
  4973 ;; This function is called by:
  4974 ;;		_sprintf
  4975 ;; This function uses a non-reentrant model
  4976 ;;
  4977                           
  4978                           	psect	text5
  4979  001E5C                     __ptext5:
  4980                           	opt stack 0
  4981  001E5C                     _fround:
  4982                           	opt stack 24
  4983                           
  4984                           ; BSR set to: 0
  4985                           ;incstack = 0
  4986                           ;fround@prec stored from wreg
  4987  001E5C  0100               	movlb	0	; () banked
  4988  001E5E  6F8C               	movwf	fround@prec& (0+255),b
  4989                           
  4990                           ;doprnt.c: 413: if(prec>=110)
  4991  001E60  0E6D               	movlw	109
  4992  001E62  0100               	movlb	0	; () banked
  4993  001E64  658C               	cpfsgt	fround@prec& (0+255),b
  4994  001E66  D0A6               	goto	l154
  4995                           
  4996                           ; BSR set to: 0
  4997                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4998  001E68  0E00               	movlw	0
  4999  001E6A  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5000  001E6C  0E03               	movlw	3
  5001  001E6E  6F70               	movwf	___wmul@multiplicand& (0+255),b
  5002  001E70  0E00               	movlw	0
  5003  001E72  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  5004  001E74  0E0A               	movlw	10
  5005  001E76  6F68               	movwf	___awdiv@divisor& (0+255),b
  5006  001E78  0E00               	movlw	0
  5007  001E7A  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  5008  001E7C  0E64               	movlw	100
  5009  001E7E  6F62               	movwf	___awmod@divisor& (0+255),b
  5010  001E80  C08C  F060         	movff	fround@prec,___awmod@dividend
  5011  001E84  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  5012  001E86  EC95  F01C         	call	___awmod	;wreg free
  5013  001E8A  C060  F066         	movff	?___awmod,___awdiv@dividend
  5014  001E8E  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
  5015  001E92  EC95  F01B         	call	___awdiv	;wreg free
  5016  001E96  0E09               	movlw	9
  5017  001E98  0100               	movlb	0	; () banked
  5018  001E9A  2566               	addwf	?___awdiv& (0+255),w,b
  5019  001E9C  6F6E               	movwf	___wmul@multiplier& (0+255),b
  5020  001E9E  0E00               	movlw	0
  5021  001EA0  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  5022  001EA2  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  5023  001EA4  EC93  F01D         	call	___wmul	;wreg free
  5024  001EA8  0E50               	movlw	low __npowers_
  5025  001EAA  0100               	movlb	0	; () banked
  5026  001EAC  256E               	addwf	?___wmul& (0+255),w,b
  5027  001EAE  6EF6               	movwf	tblptrl,c
  5028  001EB0  0E08               	movlw	high __npowers_
  5029  001EB2  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  5030  001EB4  6EF7               	movwf	tblptrh,c
  5031  001EB6                     	if	0	;There are less than 3 active tblptr bytes
  5032  001EB6                     	endif
  5033  001EB6  0009               	tblrd		*+
  5034  001EB8  CFF5 F077          	movff	tablat,___ftmul@f2
  5035  001EBC  0009               	tblrd		*+
  5036  001EBE  CFF5 F078          	movff	tablat,___ftmul@f2+1
  5037  001EC2  000A               	tblrd		*-
  5038  001EC4  CFF5 F079          	movff	tablat,___ftmul@f2+2
  5039  001EC8  0E00               	movlw	0
  5040  001ECA  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  5041  001ECC  0E64               	movlw	100
  5042  001ECE  6F68               	movwf	___awdiv@divisor& (0+255),b
  5043  001ED0  C08C  F066         	movff	fround@prec,___awdiv@dividend
  5044  001ED4  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  5045  001ED6  EC95  F01B         	call	___awdiv	;wreg free
  5046  001EDA  0E12               	movlw	18
  5047  001EDC  0100               	movlb	0	; () banked
  5048  001EDE  2566               	addwf	?___awdiv& (0+255),w,b
  5049  001EE0  6F6E               	movwf	___wmul@multiplier& (0+255),b
  5050  001EE2  0E00               	movlw	0
  5051  001EE4  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  5052  001EE6  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  5053  001EE8  0E00               	movlw	0
  5054  001EEA  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5055  001EEC  0E03               	movlw	3
  5056  001EEE  6F70               	movwf	___wmul@multiplicand& (0+255),b
  5057  001EF0  EC93  F01D         	call	___wmul	;wreg free
  5058  001EF4  0E50               	movlw	low __npowers_
  5059  001EF6  0100               	movlb	0	; () banked
  5060  001EF8  256E               	addwf	?___wmul& (0+255),w,b
  5061  001EFA  6EF6               	movwf	tblptrl,c
  5062  001EFC  0E08               	movlw	high __npowers_
  5063  001EFE  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  5064  001F00  6EF7               	movwf	tblptrh,c
  5065  001F02                     	if	0	;There are less than 3 active tblptr bytes
  5066  001F02                     	endif
  5067  001F02  0009               	tblrd		*+
  5068  001F04  CFF5 F074          	movff	tablat,___ftmul@f1
  5069  001F08  0009               	tblrd		*+
  5070  001F0A  CFF5 F075          	movff	tablat,___ftmul@f1+1
  5071  001F0E  000A               	tblrd		*-
  5072  001F10  CFF5 F076          	movff	tablat,___ftmul@f1+2
  5073  001F14  EC3C  F017         	call	___ftmul	;wreg free
  5074  001F18  C074  F089         	movff	?___ftmul,_fround$1431
  5075  001F1C  C075  F08A         	movff	?___ftmul+1,_fround$1431+1
  5076  001F20  C076  F08B         	movff	?___ftmul+2,_fround$1431+2
  5077                           
  5078                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5079  001F24  0E00               	movlw	0
  5080  001F26  0100               	movlb	0	; () banked
  5081  001F28  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5082  001F2A  0E03               	movlw	3
  5083  001F2C  6F70               	movwf	___wmul@multiplicand& (0+255),b
  5084  001F2E  0E00               	movlw	0
  5085  001F30  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  5086  001F32  0E0A               	movlw	10
  5087  001F34  6F62               	movwf	___awmod@divisor& (0+255),b
  5088  001F36  C08C  F060         	movff	fround@prec,___awmod@dividend
  5089  001F3A  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  5090  001F3C  EC95  F01C         	call	___awmod	;wreg free
  5091  001F40  C060  F06E         	movff	?___awmod,___wmul@multiplier
  5092  001F44  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  5093  001F48  EC93  F01D         	call	___wmul	;wreg free
  5094  001F4C  0E50               	movlw	low __npowers_
  5095  001F4E  0100               	movlb	0	; () banked
  5096  001F50  256E               	addwf	?___wmul& (0+255),w,b
  5097  001F52  6EF6               	movwf	tblptrl,c
  5098  001F54  0E08               	movlw	high __npowers_
  5099  001F56  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  5100  001F58  6EF7               	movwf	tblptrh,c
  5101  001F5A                     	if	0	;There are less than 3 active tblptr bytes
  5102  001F5A                     	endif
  5103  001F5A  0009               	tblrd		*+
  5104  001F5C  CFF5 F077          	movff	tablat,___ftmul@f2
  5105  001F60  0009               	tblrd		*+
  5106  001F62  CFF5 F078          	movff	tablat,___ftmul@f2+1
  5107  001F66  000A               	tblrd		*-
  5108  001F68  CFF5 F079          	movff	tablat,___ftmul@f2+2
  5109  001F6C  C089  F074         	movff	_fround$1431,___ftmul@f1
  5110  001F70  C08A  F075         	movff	_fround$1431+1,___ftmul@f1+1
  5111  001F74  C08B  F076         	movff	_fround$1431+2,___ftmul@f1+2
  5112  001F78  EC3C  F017         	call	___ftmul	;wreg free
  5113  001F7C  C074  F086         	movff	?___ftmul,_fround$1432
  5114  001F80  C075  F087         	movff	?___ftmul+1,_fround$1432+1
  5115  001F84  C076  F088         	movff	?___ftmul+2,_fround$1432+2
  5116                           
  5117                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5118  001F88  C086  F074         	movff	_fround$1432,___ftmul@f1
  5119  001F8C  C087  F075         	movff	_fround$1432+1,___ftmul@f1+1
  5120  001F90  C088  F076         	movff	_fround$1432+2,___ftmul@f1+2
  5121  001F94  0E00               	movlw	0
  5122  001F96  0100               	movlb	0	; () banked
  5123  001F98  6F77               	movwf	___ftmul@f2& (0+255),b
  5124  001F9A  0E00               	movlw	0
  5125  001F9C  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  5126  001F9E  0E3F               	movlw	63
  5127  001FA0  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  5128  001FA2  EC3C  F017         	call	___ftmul	;wreg free
  5129  001FA6  C074  F083         	movff	?___ftmul,?_fround
  5130  001FAA  C075  F084         	movff	?___ftmul+1,?_fround+1
  5131  001FAE  C076  F085         	movff	?___ftmul+2,?_fround+2
  5132  001FB2  0012               	return	
  5133  001FB4                     l154:
  5134                           
  5135                           ;doprnt.c: 415: else if(prec > 10)
  5136  001FB4  0E0A               	movlw	10
  5137  001FB6  0100               	movlb	0	; () banked
  5138  001FB8  658C               	cpfsgt	fround@prec& (0+255),b
  5139  001FBA  D067               	goto	l157
  5140                           
  5141                           ; BSR set to: 0
  5142                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5143  001FBC  0E00               	movlw	0
  5144  001FBE  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5145  001FC0  0E03               	movlw	3
  5146  001FC2  6F70               	movwf	___wmul@multiplicand& (0+255),b
  5147  001FC4  0E00               	movlw	0
  5148  001FC6  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  5149  001FC8  0E0A               	movlw	10
  5150  001FCA  6F62               	movwf	___awmod@divisor& (0+255),b
  5151  001FCC  C08C  F060         	movff	fround@prec,___awmod@dividend
  5152  001FD0  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  5153  001FD2  EC95  F01C         	call	___awmod	;wreg free
  5154  001FD6  C060  F06E         	movff	?___awmod,___wmul@multiplier
  5155  001FDA  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  5156  001FDE  EC93  F01D         	call	___wmul	;wreg free
  5157  001FE2  0E50               	movlw	low __npowers_
  5158  001FE4  0100               	movlb	0	; () banked
  5159  001FE6  256E               	addwf	?___wmul& (0+255),w,b
  5160  001FE8  6EF6               	movwf	tblptrl,c
  5161  001FEA  0E08               	movlw	high __npowers_
  5162  001FEC  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  5163  001FEE  6EF7               	movwf	tblptrh,c
  5164  001FF0                     	if	0	;There are less than 3 active tblptr bytes
  5165  001FF0                     	endif
  5166  001FF0  0009               	tblrd		*+
  5167  001FF2  CFF5 F077          	movff	tablat,___ftmul@f2
  5168  001FF6  0009               	tblrd		*+
  5169  001FF8  CFF5 F078          	movff	tablat,___ftmul@f2+1
  5170  001FFC  000A               	tblrd		*-
  5171  001FFE  CFF5 F079          	movff	tablat,___ftmul@f2+2
  5172  002002  0E00               	movlw	0
  5173  002004  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  5174  002006  0E0A               	movlw	10
  5175  002008  6F68               	movwf	___awdiv@divisor& (0+255),b
  5176  00200A  C08C  F066         	movff	fround@prec,___awdiv@dividend
  5177  00200E  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  5178  002010  EC95  F01B         	call	___awdiv	;wreg free
  5179  002014  0E09               	movlw	9
  5180  002016  0100               	movlb	0	; () banked
  5181  002018  2566               	addwf	?___awdiv& (0+255),w,b
  5182  00201A  6F6E               	movwf	___wmul@multiplier& (0+255),b
  5183  00201C  0E00               	movlw	0
  5184  00201E  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  5185  002020  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  5186  002022  0E00               	movlw	0
  5187  002024  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5188  002026  0E03               	movlw	3
  5189  002028  6F70               	movwf	___wmul@multiplicand& (0+255),b
  5190  00202A  EC93  F01D         	call	___wmul	;wreg free
  5191  00202E  0E50               	movlw	low __npowers_
  5192  002030  0100               	movlb	0	; () banked
  5193  002032  256E               	addwf	?___wmul& (0+255),w,b
  5194  002034  6EF6               	movwf	tblptrl,c
  5195  002036  0E08               	movlw	high __npowers_
  5196  002038  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  5197  00203A  6EF7               	movwf	tblptrh,c
  5198  00203C                     	if	0	;There are less than 3 active tblptr bytes
  5199  00203C                     	endif
  5200  00203C  0009               	tblrd		*+
  5201  00203E  CFF5 F074          	movff	tablat,___ftmul@f1
  5202  002042  0009               	tblrd		*+
  5203  002044  CFF5 F075          	movff	tablat,___ftmul@f1+1
  5204  002048  000A               	tblrd		*-
  5205  00204A  CFF5 F076          	movff	tablat,___ftmul@f1+2
  5206  00204E  EC3C  F017         	call	___ftmul	;wreg free
  5207  002052  C074  F089         	movff	?___ftmul,_fround$1431
  5208  002056  C075  F08A         	movff	?___ftmul+1,_fround$1431+1
  5209  00205A  C076  F08B         	movff	?___ftmul+2,_fround$1431+2
  5210                           
  5211                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5212  00205E  C089  F074         	movff	_fround$1431,___ftmul@f1
  5213  002062  C08A  F075         	movff	_fround$1431+1,___ftmul@f1+1
  5214  002066  C08B  F076         	movff	_fround$1431+2,___ftmul@f1+2
  5215  00206A  0E00               	movlw	0
  5216  00206C  0100               	movlb	0	; () banked
  5217  00206E  6F77               	movwf	___ftmul@f2& (0+255),b
  5218  002070  0E00               	movlw	0
  5219  002072  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  5220  002074  0E3F               	movlw	63
  5221  002076  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  5222  002078  EC3C  F017         	call	___ftmul	;wreg free
  5223  00207C  C074  F083         	movff	?___ftmul,?_fround
  5224  002080  C075  F084         	movff	?___ftmul+1,?_fround+1
  5225  002084  C076  F085         	movff	?___ftmul+2,?_fround+2
  5226  002088  0012               	return	
  5227  00208A                     l157:
  5228                           
  5229                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  5230  00208A  0100               	movlb	0	; () banked
  5231  00208C  518C               	movf	fround@prec& (0+255),w,b
  5232  00208E  0D03               	mullw	3
  5233  002090  0E50               	movlw	low __npowers_
  5234  002092  24F3               	addwf	prodl,w,c
  5235  002094  6EF6               	movwf	tblptrl,c
  5236  002096  0E08               	movlw	high __npowers_
  5237  002098  20F4               	addwfc	prodh,w,c
  5238  00209A  6EF7               	movwf	tblptrh,c
  5239  00209C                     	if	0	;There are less than 3 active tblptr bytes
  5240  00209C                     	endif
  5241  00209C  0009               	tblrd		*+
  5242  00209E  CFF5 F074          	movff	tablat,___ftmul@f1
  5243  0020A2  0009               	tblrd		*+
  5244  0020A4  CFF5 F075          	movff	tablat,___ftmul@f1+1
  5245  0020A8  000A               	tblrd		*-
  5246  0020AA  CFF5 F076          	movff	tablat,___ftmul@f1+2
  5247  0020AE  0E00               	movlw	0
  5248  0020B0  6F77               	movwf	___ftmul@f2& (0+255),b
  5249  0020B2  0E00               	movlw	0
  5250  0020B4  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  5251  0020B6  0E3F               	movlw	63
  5252  0020B8  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  5253  0020BA  EC3C  F017         	call	___ftmul	;wreg free
  5254  0020BE  C074  F083         	movff	?___ftmul,?_fround
  5255  0020C2  C075  F084         	movff	?___ftmul+1,?_fround+1
  5256  0020C6  C076  F085         	movff	?___ftmul+2,?_fround+2
  5257  0020CA  0012               	return	
  5258  0020CC                     __end_of_fround:
  5259                           	opt stack 0
  5260                           tblptru	equ	0xFF8
  5261                           tblptrh	equ	0xFF7
  5262                           tblptrl	equ	0xFF6
  5263                           tablat	equ	0xFF5
  5264                           prodh	equ	0xFF4
  5265                           prodl	equ	0xFF3
  5266                           postinc0	equ	0xFEE
  5267                           wreg	equ	0xFE8
  5268                           indf2	equ	0xFDF
  5269                           postinc2	equ	0xFDE
  5270                           postdec2	equ	0xFDD
  5271                           fsr2h	equ	0xFDA
  5272                           fsr2l	equ	0xFD9
  5273                           status	equ	0xFD8
  5274                           
  5275 ;; *************** function ___awmod *****************
  5276 ;; Defined at:
  5277 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  5278 ;; Parameters:    Size  Location     Type
  5279 ;;  dividend        2    0[BANK0 ] int 
  5280 ;;  divisor         2    2[BANK0 ] int 
  5281 ;; Auto vars:     Size  Location     Type
  5282 ;;  sign            1    5[BANK0 ] unsigned char 
  5283 ;;  counter         1    4[BANK0 ] unsigned char 
  5284 ;; Return value:  Size  Location     Type
  5285 ;;                  2    0[BANK0 ] int 
  5286 ;; Registers used:
  5287 ;;		wreg, status,2, status,0
  5288 ;; Tracked objects:
  5289 ;;		On entry : 0/0
  5290 ;;		On exit  : 0/0
  5291 ;;		Unchanged: 0/0
  5292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5293 ;;      Params:         0       4       0       0       0       0       0       0       0
  5294 ;;      Locals:         0       2       0       0       0       0       0       0       0
  5295 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5296 ;;      Totals:         0       6       0       0       0       0       0       0       0
  5297 ;;Total ram usage:        6 bytes
  5298 ;; Hardware stack levels used:    1
  5299 ;; Hardware stack levels required when called:    3
  5300 ;; This function calls:
  5301 ;;		Nothing
  5302 ;; This function is called by:
  5303 ;;		_fround
  5304 ;;		_scale
  5305 ;; This function uses a non-reentrant model
  5306 ;;
  5307                           
  5308                           	psect	text6
  5309  00392A                     __ptext6:
  5310                           	opt stack 0
  5311  00392A                     ___awmod:
  5312                           	opt stack 25
  5313                           
  5314                           ;incstack = 0
  5315  00392A  0E00               	movlw	0
  5316  00392C  0100               	movlb	0	; () banked
  5317  00392E  6F65               	movwf	___awmod@sign& (0+255),b
  5318                           
  5319                           ; BSR set to: 0
  5320  003930  AF61               	btfss	(___awmod@dividend+1)& (0+255),7,b
  5321  003932  D006               	goto	l453
  5322                           
  5323                           ; BSR set to: 0
  5324  003934  6D60               	negf	___awmod@dividend& (0+255),b
  5325  003936  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  5326  003938  B0D8               	btfsc	status,0,c
  5327  00393A  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  5328                           
  5329                           ; BSR set to: 0
  5330  00393C  0E01               	movlw	1
  5331  00393E  6F65               	movwf	___awmod@sign& (0+255),b
  5332  003940                     l453:
  5333                           
  5334                           ; BSR set to: 0
  5335                           
  5336                           ; BSR set to: 0
  5337  003940  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5338  003942  D004               	goto	l454
  5339                           
  5340                           ; BSR set to: 0
  5341  003944  6D62               	negf	___awmod@divisor& (0+255),b
  5342  003946  1F63               	comf	(___awmod@divisor+1)& (0+255),f,b
  5343  003948  B0D8               	btfsc	status,0,c
  5344  00394A  2B63               	incf	(___awmod@divisor+1)& (0+255),f,b
  5345  00394C                     l454:
  5346                           
  5347                           ; BSR set to: 0
  5348                           
  5349                           ; BSR set to: 0
  5350  00394C  5162               	movf	___awmod@divisor& (0+255),w,b
  5351  00394E  1163               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  5352  003950  B4D8               	btfsc	status,2,c
  5353  003952  D018               	goto	l461
  5354                           
  5355                           ; BSR set to: 0
  5356  003954  0E01               	movlw	1
  5357  003956  6F64               	movwf	___awmod@counter& (0+255),b
  5358  003958  D004               	goto	l456
  5359  00395A                     
  5360                           ; BSR set to: 0
  5361                           
  5362                           ; BSR set to: 0
  5363  00395A  90D8               	bcf	status,0,c
  5364  00395C  3762               	rlcf	___awmod@divisor& (0+255),f,b
  5365  00395E  3763               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  5366  003960  2B64               	incf	___awmod@counter& (0+255),f,b
  5367  003962                     l456:
  5368                           
  5369                           ; BSR set to: 0
  5370                           
  5371                           ; BSR set to: 0
  5372  003962  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5373  003964  D7FA               	goto	l457
  5374  003966                     u2780:
  5375                           
  5376                           ; BSR set to: 0
  5377                           
  5378                           ; BSR set to: 0
  5379                           
  5380                           ; BSR set to: 0
  5381  003966  5162               	movf	___awmod@divisor& (0+255),w,b
  5382  003968  5D60               	subwf	___awmod@dividend& (0+255),w,b
  5383  00396A  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  5384  00396C  5961               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  5385  00396E  A0D8               	btfss	status,0,c
  5386  003970  D004               	goto	l460
  5387                           
  5388                           ; BSR set to: 0
  5389  003972  5162               	movf	___awmod@divisor& (0+255),w,b
  5390  003974  5F60               	subwf	___awmod@dividend& (0+255),f,b
  5391  003976  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  5392  003978  5B61               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  5393  00397A                     l460:
  5394                           
  5395                           ; BSR set to: 0
  5396                           
  5397                           ; BSR set to: 0
  5398  00397A  90D8               	bcf	status,0,c
  5399  00397C  3363               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  5400  00397E  3362               	rrcf	___awmod@divisor& (0+255),f,b
  5401                           
  5402                           ; BSR set to: 0
  5403  003980  2F64               	decfsz	___awmod@counter& (0+255),f,b
  5404  003982  D7F1               	goto	u2780
  5405  003984                     l461:
  5406                           
  5407                           ; BSR set to: 0
  5408                           
  5409                           ; BSR set to: 0
  5410                           
  5411                           ; BSR set to: 0
  5412  003984  5165               	movf	___awmod@sign& (0+255),w,b
  5413  003986  B4D8               	btfsc	status,2,c
  5414  003988  D004               	goto	l462
  5415                           
  5416                           ; BSR set to: 0
  5417  00398A  6D60               	negf	___awmod@dividend& (0+255),b
  5418  00398C  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  5419  00398E  B0D8               	btfsc	status,0,c
  5420  003990  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  5421  003992                     l462:
  5422                           
  5423                           ; BSR set to: 0
  5424                           
  5425                           ; BSR set to: 0
  5426  003992  C060  F060         	movff	___awmod@dividend,?___awmod
  5427  003996  C061  F061         	movff	___awmod@dividend+1,?___awmod+1
  5428  00399A  0012               	return	
  5429  00399C                     __end_of___awmod:
  5430                           	opt stack 0
  5431                           tblptru	equ	0xFF8
  5432                           tblptrh	equ	0xFF7
  5433                           tblptrl	equ	0xFF6
  5434                           tablat	equ	0xFF5
  5435                           prodh	equ	0xFF4
  5436                           prodl	equ	0xFF3
  5437                           postinc0	equ	0xFEE
  5438                           wreg	equ	0xFE8
  5439                           indf2	equ	0xFDF
  5440                           postinc2	equ	0xFDE
  5441                           postdec2	equ	0xFDD
  5442                           fsr2h	equ	0xFDA
  5443                           fsr2l	equ	0xFD9
  5444                           status	equ	0xFD8
  5445                           
  5446 ;; *************** function ___awdiv *****************
  5447 ;; Defined at:
  5448 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  5449 ;; Parameters:    Size  Location     Type
  5450 ;;  dividend        2    6[BANK0 ] int 
  5451 ;;  divisor         2    8[BANK0 ] int 
  5452 ;; Auto vars:     Size  Location     Type
  5453 ;;  quotient        2   12[BANK0 ] int 
  5454 ;;  sign            1   11[BANK0 ] unsigned char 
  5455 ;;  counter         1   10[BANK0 ] unsigned char 
  5456 ;; Return value:  Size  Location     Type
  5457 ;;                  2    6[BANK0 ] int 
  5458 ;; Registers used:
  5459 ;;		wreg, status,2, status,0
  5460 ;; Tracked objects:
  5461 ;;		On entry : 0/0
  5462 ;;		On exit  : 0/0
  5463 ;;		Unchanged: 0/0
  5464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5465 ;;      Params:         0       4       0       0       0       0       0       0       0
  5466 ;;      Locals:         0       4       0       0       0       0       0       0       0
  5467 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5468 ;;      Totals:         0       8       0       0       0       0       0       0       0
  5469 ;;Total ram usage:        8 bytes
  5470 ;; Hardware stack levels used:    1
  5471 ;; Hardware stack levels required when called:    3
  5472 ;; This function calls:
  5473 ;;		Nothing
  5474 ;; This function is called by:
  5475 ;;		_fround
  5476 ;;		_scale
  5477 ;;		_sprintf
  5478 ;; This function uses a non-reentrant model
  5479 ;;
  5480                           
  5481                           	psect	text7
  5482  00372A                     __ptext7:
  5483                           	opt stack 0
  5484  00372A                     ___awdiv:
  5485                           	opt stack 25
  5486                           
  5487                           ; BSR set to: 0
  5488                           ;incstack = 0
  5489  00372A  0E00               	movlw	0
  5490  00372C  0100               	movlb	0	; () banked
  5491  00372E  6F6B               	movwf	___awdiv@sign& (0+255),b
  5492                           
  5493                           ; BSR set to: 0
  5494  003730  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5495  003732  D006               	goto	l440
  5496                           
  5497                           ; BSR set to: 0
  5498  003734  6D68               	negf	___awdiv@divisor& (0+255),b
  5499  003736  1F69               	comf	(___awdiv@divisor+1)& (0+255),f,b
  5500  003738  B0D8               	btfsc	status,0,c
  5501  00373A  2B69               	incf	(___awdiv@divisor+1)& (0+255),f,b
  5502                           
  5503                           ; BSR set to: 0
  5504  00373C  0E01               	movlw	1
  5505  00373E  6F6B               	movwf	___awdiv@sign& (0+255),b
  5506  003740                     l440:
  5507                           
  5508                           ; BSR set to: 0
  5509                           
  5510                           ; BSR set to: 0
  5511  003740  AF67               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  5512  003742  D006               	goto	l441
  5513                           
  5514                           ; BSR set to: 0
  5515  003744  6D66               	negf	___awdiv@dividend& (0+255),b
  5516  003746  1F67               	comf	(___awdiv@dividend+1)& (0+255),f,b
  5517  003748  B0D8               	btfsc	status,0,c
  5518  00374A  2B67               	incf	(___awdiv@dividend+1)& (0+255),f,b
  5519                           
  5520                           ; BSR set to: 0
  5521  00374C  0E01               	movlw	1
  5522  00374E  1B6B               	xorwf	___awdiv@sign& (0+255),f,b
  5523  003750                     l441:
  5524                           
  5525                           ; BSR set to: 0
  5526                           
  5527                           ; BSR set to: 0
  5528  003750  0E00               	movlw	0
  5529  003752  6F6D               	movwf	(___awdiv@quotient+1)& (0+255),b
  5530  003754  0E00               	movlw	0
  5531  003756  6F6C               	movwf	___awdiv@quotient& (0+255),b
  5532                           
  5533                           ; BSR set to: 0
  5534  003758  5168               	movf	___awdiv@divisor& (0+255),w,b
  5535  00375A  1169               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  5536  00375C  B4D8               	btfsc	status,2,c
  5537  00375E  D01C               	goto	l448
  5538                           
  5539                           ; BSR set to: 0
  5540  003760  0E01               	movlw	1
  5541  003762  6F6A               	movwf	___awdiv@counter& (0+255),b
  5542  003764  D004               	goto	l443
  5543  003766                     
  5544                           ; BSR set to: 0
  5545                           
  5546                           ; BSR set to: 0
  5547  003766  90D8               	bcf	status,0,c
  5548  003768  3768               	rlcf	___awdiv@divisor& (0+255),f,b
  5549  00376A  3769               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  5550  00376C  2B6A               	incf	___awdiv@counter& (0+255),f,b
  5551  00376E                     l443:
  5552                           
  5553                           ; BSR set to: 0
  5554                           
  5555                           ; BSR set to: 0
  5556  00376E  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5557  003770  D7FA               	goto	l444
  5558  003772                     u2720:
  5559                           
  5560                           ; BSR set to: 0
  5561                           
  5562                           ; BSR set to: 0
  5563                           
  5564                           ; BSR set to: 0
  5565  003772  90D8               	bcf	status,0,c
  5566  003774  376C               	rlcf	___awdiv@quotient& (0+255),f,b
  5567  003776  376D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  5568                           
  5569                           ; BSR set to: 0
  5570  003778  5168               	movf	___awdiv@divisor& (0+255),w,b
  5571  00377A  5D66               	subwf	___awdiv@dividend& (0+255),w,b
  5572  00377C  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5573  00377E  5967               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  5574  003780  A0D8               	btfss	status,0,c
  5575  003782  D005               	goto	l447
  5576                           
  5577                           ; BSR set to: 0
  5578  003784  5168               	movf	___awdiv@divisor& (0+255),w,b
  5579  003786  5F66               	subwf	___awdiv@dividend& (0+255),f,b
  5580  003788  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5581  00378A  5B67               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  5582                           
  5583                           ; BSR set to: 0
  5584  00378C  816C               	bsf	___awdiv@quotient& (0+255),0,b
  5585  00378E                     l447:
  5586                           
  5587                           ; BSR set to: 0
  5588                           
  5589                           ; BSR set to: 0
  5590  00378E  90D8               	bcf	status,0,c
  5591  003790  3369               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  5592  003792  3368               	rrcf	___awdiv@divisor& (0+255),f,b
  5593                           
  5594                           ; BSR set to: 0
  5595  003794  2F6A               	decfsz	___awdiv@counter& (0+255),f,b
  5596  003796  D7ED               	goto	u2720
  5597  003798                     l448:
  5598                           
  5599                           ; BSR set to: 0
  5600                           
  5601                           ; BSR set to: 0
  5602                           
  5603                           ; BSR set to: 0
  5604  003798  516B               	movf	___awdiv@sign& (0+255),w,b
  5605  00379A  B4D8               	btfsc	status,2,c
  5606  00379C  D004               	goto	l449
  5607                           
  5608                           ; BSR set to: 0
  5609  00379E  6D6C               	negf	___awdiv@quotient& (0+255),b
  5610  0037A0  1F6D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  5611  0037A2  B0D8               	btfsc	status,0,c
  5612  0037A4  2B6D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  5613  0037A6                     l449:
  5614                           
  5615                           ; BSR set to: 0
  5616                           
  5617                           ; BSR set to: 0
  5618  0037A6  C06C  F066         	movff	___awdiv@quotient,?___awdiv
  5619  0037AA  C06D  F067         	movff	___awdiv@quotient+1,?___awdiv+1
  5620  0037AE  0012               	return	
  5621  0037B0                     __end_of___awdiv:
  5622                           	opt stack 0
  5623                           tblptru	equ	0xFF8
  5624                           tblptrh	equ	0xFF7
  5625                           tblptrl	equ	0xFF6
  5626                           tablat	equ	0xFF5
  5627                           prodh	equ	0xFF4
  5628                           prodl	equ	0xFF3
  5629                           postinc0	equ	0xFEE
  5630                           wreg	equ	0xFE8
  5631                           indf2	equ	0xFDF
  5632                           postinc2	equ	0xFDE
  5633                           postdec2	equ	0xFDD
  5634                           fsr2h	equ	0xFDA
  5635                           fsr2l	equ	0xFD9
  5636                           status	equ	0xFD8
  5637                           
  5638 ;; *************** function __tdiv_to_l_ *****************
  5639 ;; Defined at:
  5640 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdivl.c"
  5641 ;; Parameters:    Size  Location     Type
  5642 ;;  f1              3    0[BANK0 ] float 
  5643 ;;  f2              3    3[BANK0 ] float 
  5644 ;; Auto vars:     Size  Location     Type
  5645 ;;  quot            4    9[BANK0 ] unsigned long 
  5646 ;;  exp1            1   14[BANK0 ] unsigned char 
  5647 ;;  cntr            1   13[BANK0 ] unsigned char 
  5648 ;; Return value:  Size  Location     Type
  5649 ;;                  4    0[BANK0 ] unsigned long 
  5650 ;; Registers used:
  5651 ;;		wreg, status,2, status,0
  5652 ;; Tracked objects:
  5653 ;;		On entry : 0/0
  5654 ;;		On exit  : 0/0
  5655 ;;		Unchanged: 0/0
  5656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5657 ;;      Params:         0       6       0       0       0       0       0       0       0
  5658 ;;      Locals:         0       6       0       0       0       0       0       0       0
  5659 ;;      Temps:          0       3       0       0       0       0       0       0       0
  5660 ;;      Totals:         0      15       0       0       0       0       0       0       0
  5661 ;;Total ram usage:       15 bytes
  5662 ;; Hardware stack levels used:    1
  5663 ;; Hardware stack levels required when called:    3
  5664 ;; This function calls:
  5665 ;;		Nothing
  5666 ;; This function is called by:
  5667 ;;		_sprintf
  5668 ;; This function uses a non-reentrant model
  5669 ;;
  5670                           
  5671                           	psect	text8
  5672  0027B8                     __ptext8:
  5673                           	opt stack 0
  5674  0027B8                     __tdiv_to_l_:
  5675                           	opt stack 26
  5676                           
  5677                           ; BSR set to: 0
  5678                           ;incstack = 0
  5679  0027B8  C062  F066         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  5680  0027BC  0100               	movlb	0	; () banked
  5681  0027BE  6B67               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  5682  0027C0  6B68               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  5683  0027C2  3561               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),w,b
  5684  0027C4  3766               	rlcf	??__tdiv_to_l_& (0+255),f,b
  5685  0027C6  E301               	bnc	u3021
  5686  0027C8  8167               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  5687  0027CA                     u3021:
  5688  0027CA  5166               	movf	??__tdiv_to_l_& (0+255),w,b
  5689  0027CC  6F6E               	movwf	__tdiv_to_l_@exp1& (0+255),b
  5690  0027CE  516E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  5691  0027D0  A4D8               	btfss	status,2,c
  5692  0027D2  D009               	goto	l582
  5693                           
  5694                           ; BSR set to: 0
  5695  0027D4  0E00               	movlw	0
  5696  0027D6  6F60               	movwf	?__tdiv_to_l_& (0+255),b
  5697  0027D8  0E00               	movlw	0
  5698  0027DA  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  5699  0027DC  0E00               	movlw	0
  5700  0027DE  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  5701  0027E0  0E00               	movlw	0
  5702  0027E2  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  5703                           
  5704                           ; BSR set to: 0
  5705  0027E4  0012               	return	
  5706  0027E6                     l582:
  5707                           
  5708                           ; BSR set to: 0
  5709                           
  5710                           ; BSR set to: 0
  5711  0027E6  C065  F066         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  5712  0027EA  6B67               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  5713  0027EC  6B68               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  5714  0027EE  3564               	rlcf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  5715  0027F0  3766               	rlcf	??__tdiv_to_l_& (0+255),f,b
  5716  0027F2  E301               	bnc	u3041
  5717  0027F4  8167               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  5718  0027F6                     u3041:
  5719  0027F6  5166               	movf	??__tdiv_to_l_& (0+255),w,b
  5720  0027F8  6F6D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  5721  0027FA  516D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  5722  0027FC  A4D8               	btfss	status,2,c
  5723  0027FE  D009               	goto	l584
  5724                           
  5725                           ; BSR set to: 0
  5726  002800  0E00               	movlw	0
  5727  002802  6F60               	movwf	?__tdiv_to_l_& (0+255),b
  5728  002804  0E00               	movlw	0
  5729  002806  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  5730  002808  0E00               	movlw	0
  5731  00280A  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  5732  00280C  0E00               	movlw	0
  5733  00280E  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  5734                           
  5735                           ; BSR set to: 0
  5736  002810  0012               	return	
  5737  002812                     l584:
  5738                           
  5739                           ; BSR set to: 0
  5740                           
  5741                           ; BSR set to: 0
  5742  002812  8F61               	bsf	(__tdiv_to_l_@f1+1)& (0+255),7,b
  5743                           
  5744                           ; BSR set to: 0
  5745  002814  0EFF               	movlw	255
  5746  002816  1760               	andwf	__tdiv_to_l_@f1& (0+255),f,b
  5747  002818  0EFF               	movlw	255
  5748  00281A  1761               	andwf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  5749  00281C  0E00               	movlw	0
  5750  00281E  1762               	andwf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  5751  002820  8F64               	bsf	(__tdiv_to_l_@f2+1)& (0+255),7,b
  5752                           
  5753                           ; BSR set to: 0
  5754  002822  0EFF               	movlw	255
  5755  002824  1763               	andwf	__tdiv_to_l_@f2& (0+255),f,b
  5756  002826  0EFF               	movlw	255
  5757  002828  1764               	andwf	(__tdiv_to_l_@f2+1)& (0+255),f,b
  5758  00282A  0E00               	movlw	0
  5759  00282C  1765               	andwf	(__tdiv_to_l_@f2+2)& (0+255),f,b
  5760                           
  5761                           ; BSR set to: 0
  5762  00282E  0E00               	movlw	0
  5763  002830  6F69               	movwf	__tdiv_to_l_@quot& (0+255),b
  5764  002832  0E00               	movlw	0
  5765  002834  6F6A               	movwf	(__tdiv_to_l_@quot+1)& (0+255),b
  5766  002836  0E00               	movlw	0
  5767  002838  6F6B               	movwf	(__tdiv_to_l_@quot+2)& (0+255),b
  5768  00283A  0E00               	movlw	0
  5769  00283C  6F6C               	movwf	(__tdiv_to_l_@quot+3)& (0+255),b
  5770                           
  5771                           ; BSR set to: 0
  5772  00283E  0E7F               	movlw	127
  5773  002840  5F6E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  5774                           
  5775                           ; BSR set to: 0
  5776  002842  516D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  5777  002844  0F98               	addlw	152
  5778  002846  5F6E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  5779                           
  5780                           ; BSR set to: 0
  5781  002848  0E18               	movlw	24
  5782  00284A  6F6D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  5783  00284C                     l585:
  5784                           
  5785                           ; BSR set to: 0
  5786  00284C  90D8               	bcf	status,0,c
  5787  00284E  3769               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  5788  002850  376A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  5789  002852  376B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  5790  002854  376C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  5791                           
  5792                           ; BSR set to: 0
  5793  002856  5163               	movf	__tdiv_to_l_@f2& (0+255),w,b
  5794  002858  5D60               	subwf	__tdiv_to_l_@f1& (0+255),w,b
  5795  00285A  5164               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  5796  00285C  5961               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),w,b
  5797  00285E  5165               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  5798  002860  5962               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),w,b
  5799  002862  A0D8               	btfss	status,0,c
  5800  002864  D007               	goto	l586
  5801                           
  5802                           ; BSR set to: 0
  5803  002866  5163               	movf	__tdiv_to_l_@f2& (0+255),w,b
  5804  002868  5F60               	subwf	__tdiv_to_l_@f1& (0+255),f,b
  5805  00286A  5164               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  5806  00286C  5B61               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),f,b
  5807  00286E  5165               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  5808  002870  5B62               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),f,b
  5809                           
  5810                           ; BSR set to: 0
  5811  002872  8169               	bsf	__tdiv_to_l_@quot& (0+255),0,b
  5812  002874                     l586:
  5813                           
  5814                           ; BSR set to: 0
  5815  002874  90D8               	bcf	status,0,c
  5816  002876  3760               	rlcf	__tdiv_to_l_@f1& (0+255),f,b
  5817  002878  3761               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  5818  00287A  3762               	rlcf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  5819                           
  5820                           ; BSR set to: 0
  5821  00287C  2F6D               	decfsz	__tdiv_to_l_@cntr& (0+255),f,b
  5822  00287E  D7E6               	goto	l585
  5823                           
  5824                           ; BSR set to: 0
  5825                           
  5826                           ; BSR set to: 0
  5827  002880  AF6E               	btfss	__tdiv_to_l_@exp1& (0+255),7,b
  5828  002882  D016               	goto	l588
  5829                           
  5830                           ; BSR set to: 0
  5831  002884  516E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  5832  002886  0A80               	xorlw	128
  5833  002888  0F97               	addlw	151
  5834  00288A  B0D8               	btfsc	status,0,c
  5835  00288C  D009               	goto	l589
  5836                           
  5837                           ; BSR set to: 0
  5838  00288E  0E00               	movlw	0
  5839  002890  6F60               	movwf	?__tdiv_to_l_& (0+255),b
  5840  002892  0E00               	movlw	0
  5841  002894  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  5842  002896  0E00               	movlw	0
  5843  002898  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  5844  00289A  0E00               	movlw	0
  5845  00289C  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  5846                           
  5847                           ; BSR set to: 0
  5848  00289E  0012               	return	
  5849  0028A0                     l589:
  5850                           
  5851                           ; BSR set to: 0
  5852                           
  5853                           ; BSR set to: 0
  5854                           
  5855                           ; BSR set to: 0
  5856  0028A0  90D8               	bcf	status,0,c
  5857  0028A2  336C               	rrcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  5858  0028A4  336B               	rrcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  5859  0028A6  336A               	rrcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  5860  0028A8  3369               	rrcf	__tdiv_to_l_@quot& (0+255),f,b
  5861                           
  5862                           ; BSR set to: 0
  5863  0028AA  3F6E               	incfsz	__tdiv_to_l_@exp1& (0+255),f,b
  5864  0028AC  D7F9               	goto	l589
  5865                           
  5866                           ; BSR set to: 0
  5867  0028AE  D015               	goto	u3100
  5868  0028B0                     l588:
  5869                           
  5870                           ; BSR set to: 0
  5871                           
  5872                           ; BSR set to: 0
  5873  0028B0  0E17               	movlw	23
  5874  0028B2  656E               	cpfsgt	__tdiv_to_l_@exp1& (0+255),b
  5875  0028B4  D00F               	goto	l594
  5876                           
  5877                           ; BSR set to: 0
  5878  0028B6  0E00               	movlw	0
  5879  0028B8  6F60               	movwf	?__tdiv_to_l_& (0+255),b
  5880  0028BA  0E00               	movlw	0
  5881  0028BC  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  5882  0028BE  0E00               	movlw	0
  5883  0028C0  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  5884  0028C2  0E00               	movlw	0
  5885  0028C4  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  5886                           
  5887                           ; BSR set to: 0
  5888  0028C6  0012               	return	
  5889  0028C8                     
  5890                           ; BSR set to: 0
  5891                           
  5892                           ; BSR set to: 0
  5893  0028C8  90D8               	bcf	status,0,c
  5894  0028CA  3769               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  5895  0028CC  376A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  5896  0028CE  376B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  5897  0028D0  376C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  5898  0028D2  076E               	decf	__tdiv_to_l_@exp1& (0+255),f,b
  5899  0028D4                     l594:
  5900                           
  5901                           ; BSR set to: 0
  5902                           
  5903                           ; BSR set to: 0
  5904  0028D4  516E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  5905  0028D6  A4D8               	btfss	status,2,c
  5906  0028D8  D7F7               	goto	l595
  5907  0028DA                     u3100:
  5908                           
  5909                           ; BSR set to: 0
  5910                           
  5911                           ; BSR set to: 0
  5912  0028DA  C069  F060         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  5913  0028DE  C06A  F061         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  5914  0028E2  C06B  F062         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  5915  0028E6  C06C  F063         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  5916                           
  5917                           ; BSR set to: 0
  5918  0028EA  0012               	return		;funcret
  5919  0028EC                     __end_of__tdiv_to_l_:
  5920                           	opt stack 0
  5921                           tblptru	equ	0xFF8
  5922                           tblptrh	equ	0xFF7
  5923                           tblptrl	equ	0xFF6
  5924                           tablat	equ	0xFF5
  5925                           prodh	equ	0xFF4
  5926                           prodl	equ	0xFF3
  5927                           postinc0	equ	0xFEE
  5928                           wreg	equ	0xFE8
  5929                           indf2	equ	0xFDF
  5930                           postinc2	equ	0xFDE
  5931                           postdec2	equ	0xFDD
  5932                           fsr2h	equ	0xFDA
  5933                           fsr2l	equ	0xFD9
  5934                           status	equ	0xFD8
  5935                           
  5936 ;; *************** function __div_to_l_ *****************
  5937 ;; Defined at:
  5938 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fldivl.c"
  5939 ;; Parameters:    Size  Location     Type
  5940 ;;  f1              3    0[BANK0 ] unsigned long 
  5941 ;;  f2              3    3[BANK0 ] unsigned long 
  5942 ;; Auto vars:     Size  Location     Type
  5943 ;;  quot            4    6[BANK0 ] unsigned long 
  5944 ;;  exp1            1   11[BANK0 ] unsigned char 
  5945 ;;  cntr            1   10[BANK0 ] unsigned char 
  5946 ;; Return value:  Size  Location     Type
  5947 ;;                  4    0[BANK0 ] unsigned long 
  5948 ;; Registers used:
  5949 ;;		wreg, status,2, status,0
  5950 ;; Tracked objects:
  5951 ;;		On entry : 0/0
  5952 ;;		On exit  : 0/0
  5953 ;;		Unchanged: 0/0
  5954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5955 ;;      Params:         0       6       0       0       0       0       0       0       0
  5956 ;;      Locals:         0       6       0       0       0       0       0       0       0
  5957 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5958 ;;      Totals:         0      12       0       0       0       0       0       0       0
  5959 ;;Total ram usage:       12 bytes
  5960 ;; Hardware stack levels used:    1
  5961 ;; Hardware stack levels required when called:    3
  5962 ;; This function calls:
  5963 ;;		Nothing
  5964 ;; This function is called by:
  5965 ;;		_sprintf
  5966 ;; This function uses a non-reentrant model
  5967 ;;
  5968                           
  5969                           	psect	text9
  5970  002B4E                     __ptext9:
  5971                           	opt stack 0
  5972  002B4E                     __div_to_l_:
  5973                           	opt stack 26
  5974                           
  5975                           ; BSR set to: 0
  5976                           ;incstack = 0
  5977  002B4E  0100               	movlb	0	; () banked
  5978  002B50  3562               	rlcf	(__div_to_l_@f1+2)& (0+255),w,b
  5979  002B52  3563               	rlcf	(__div_to_l_@f1+3)& (0+255),w,b
  5980  002B54  6F6B               	movwf	__div_to_l_@exp1& (0+255),b
  5981  002B56  516B               	movf	__div_to_l_@exp1& (0+255),w,b
  5982  002B58  A4D8               	btfss	status,2,c
  5983  002B5A  D009               	goto	l478
  5984                           
  5985                           ; BSR set to: 0
  5986  002B5C  0E00               	movlw	0
  5987  002B5E  6F60               	movwf	?__div_to_l_& (0+255),b
  5988  002B60  0E00               	movlw	0
  5989  002B62  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
  5990  002B64  0E00               	movlw	0
  5991  002B66  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
  5992  002B68  0E00               	movlw	0
  5993  002B6A  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
  5994                           
  5995                           ; BSR set to: 0
  5996  002B6C  0012               	return	
  5997  002B6E                     l478:
  5998                           
  5999                           ; BSR set to: 0
  6000                           
  6001                           ; BSR set to: 0
  6002  002B6E  3565               	rlcf	(__div_to_l_@f2+2)& (0+255),w,b
  6003  002B70  3566               	rlcf	(__div_to_l_@f2+3)& (0+255),w,b
  6004  002B72  6F6A               	movwf	__div_to_l_@cntr& (0+255),b
  6005  002B74  516A               	movf	__div_to_l_@cntr& (0+255),w,b
  6006  002B76  A4D8               	btfss	status,2,c
  6007  002B78  D009               	goto	l480
  6008                           
  6009                           ; BSR set to: 0
  6010  002B7A  0E00               	movlw	0
  6011  002B7C  6F60               	movwf	?__div_to_l_& (0+255),b
  6012  002B7E  0E00               	movlw	0
  6013  002B80  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
  6014  002B82  0E00               	movlw	0
  6015  002B84  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
  6016  002B86  0E00               	movlw	0
  6017  002B88  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
  6018                           
  6019                           ; BSR set to: 0
  6020  002B8A  0012               	return	
  6021  002B8C                     l480:
  6022                           
  6023                           ; BSR set to: 0
  6024                           
  6025                           ; BSR set to: 0
  6026  002B8C  8F62               	bsf	(__div_to_l_@f1+2)& (0+255),7,b
  6027                           
  6028                           ; BSR set to: 0
  6029  002B8E  0EFF               	movlw	255
  6030  002B90  1760               	andwf	__div_to_l_@f1& (0+255),f,b
  6031  002B92  0EFF               	movlw	255
  6032  002B94  1761               	andwf	(__div_to_l_@f1+1)& (0+255),f,b
  6033  002B96  0EFF               	movlw	255
  6034  002B98  1762               	andwf	(__div_to_l_@f1+2)& (0+255),f,b
  6035  002B9A  0E00               	movlw	0
  6036  002B9C  1763               	andwf	(__div_to_l_@f1+3)& (0+255),f,b
  6037                           
  6038                           ; BSR set to: 0
  6039  002B9E  8F65               	bsf	(__div_to_l_@f2+2)& (0+255),7,b
  6040  002BA0  0EFF               	movlw	255
  6041  002BA2  1763               	andwf	__div_to_l_@f2& (0+255),f,b
  6042  002BA4  0EFF               	movlw	255
  6043  002BA6  1764               	andwf	(__div_to_l_@f2+1)& (0+255),f,b
  6044  002BA8  0EFF               	movlw	255
  6045  002BAA  1765               	andwf	(__div_to_l_@f2+2)& (0+255),f,b
  6046  002BAC  0E00               	movlw	0
  6047  002BAE  1766               	andwf	(__div_to_l_@f2+3)& (0+255),f,b
  6048                           
  6049                           ; BSR set to: 0
  6050  002BB0  0E00               	movlw	0
  6051  002BB2  6F66               	movwf	__div_to_l_@quot& (0+255),b
  6052  002BB4  0E00               	movlw	0
  6053  002BB6  6F67               	movwf	(__div_to_l_@quot+1)& (0+255),b
  6054  002BB8  0E00               	movlw	0
  6055  002BBA  6F68               	movwf	(__div_to_l_@quot+2)& (0+255),b
  6056  002BBC  0E00               	movlw	0
  6057  002BBE  6F69               	movwf	(__div_to_l_@quot+3)& (0+255),b
  6058                           
  6059                           ; BSR set to: 0
  6060  002BC0  0E7F               	movlw	127
  6061  002BC2  5F6B               	subwf	__div_to_l_@exp1& (0+255),f,b
  6062                           
  6063                           ; BSR set to: 0
  6064  002BC4  516A               	movf	__div_to_l_@cntr& (0+255),w,b
  6065  002BC6  0FA0               	addlw	160
  6066  002BC8  5F6B               	subwf	__div_to_l_@exp1& (0+255),f,b
  6067                           
  6068                           ; BSR set to: 0
  6069  002BCA  0E20               	movlw	32
  6070  002BCC  6F6A               	movwf	__div_to_l_@cntr& (0+255),b
  6071  002BCE                     
  6072                           ; BSR set to: 0
  6073                           
  6074                           ; BSR set to: 0
  6075  002BCE  90D8               	bcf	status,0,c
  6076  002BD0  3766               	rlcf	__div_to_l_@quot& (0+255),f,b
  6077  002BD2  3767               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  6078  002BD4  3768               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  6079  002BD6  3769               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  6080                           
  6081                           ; BSR set to: 0
  6082  002BD8  5163               	movf	__div_to_l_@f2& (0+255),w,b
  6083  002BDA  5D60               	subwf	__div_to_l_@f1& (0+255),w,b
  6084  002BDC  5164               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  6085  002BDE  5961               	subwfb	(__div_to_l_@f1+1)& (0+255),w,b
  6086  002BE0  5165               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  6087  002BE2  5962               	subwfb	(__div_to_l_@f1+2)& (0+255),w,b
  6088  002BE4  5166               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  6089  002BE6  5963               	subwfb	(__div_to_l_@f1+3)& (0+255),w,b
  6090  002BE8  A0D8               	btfss	status,0,c
  6091  002BEA  D009               	goto	l482
  6092                           
  6093                           ; BSR set to: 0
  6094  002BEC  5163               	movf	__div_to_l_@f2& (0+255),w,b
  6095  002BEE  5F60               	subwf	__div_to_l_@f1& (0+255),f,b
  6096  002BF0  5164               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  6097  002BF2  5B61               	subwfb	(__div_to_l_@f1+1)& (0+255),f,b
  6098  002BF4  5165               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  6099  002BF6  5B62               	subwfb	(__div_to_l_@f1+2)& (0+255),f,b
  6100  002BF8  5166               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  6101  002BFA  5B63               	subwfb	(__div_to_l_@f1+3)& (0+255),f,b
  6102                           
  6103                           ; BSR set to: 0
  6104  002BFC  8166               	bsf	__div_to_l_@quot& (0+255),0,b
  6105  002BFE                     l482:
  6106                           
  6107                           ; BSR set to: 0
  6108                           
  6109                           ; BSR set to: 0
  6110  002BFE  90D8               	bcf	status,0,c
  6111  002C00  3760               	rlcf	__div_to_l_@f1& (0+255),f,b
  6112  002C02  3761               	rlcf	(__div_to_l_@f1+1)& (0+255),f,b
  6113  002C04  3762               	rlcf	(__div_to_l_@f1+2)& (0+255),f,b
  6114  002C06  3763               	rlcf	(__div_to_l_@f1+3)& (0+255),f,b
  6115                           
  6116                           ; BSR set to: 0
  6117  002C08  2F6A               	decfsz	__div_to_l_@cntr& (0+255),f,b
  6118  002C0A  D7E1               	goto	l481
  6119                           
  6120                           ; BSR set to: 0
  6121                           
  6122                           ; BSR set to: 0
  6123  002C0C  AF6B               	btfss	__div_to_l_@exp1& (0+255),7,b
  6124  002C0E  D016               	goto	l484
  6125                           
  6126                           ; BSR set to: 0
  6127  002C10  516B               	movf	__div_to_l_@exp1& (0+255),w,b
  6128  002C12  0A80               	xorlw	128
  6129  002C14  0F9F               	addlw	159
  6130  002C16  B0D8               	btfsc	status,0,c
  6131  002C18  D009               	goto	l485
  6132                           
  6133                           ; BSR set to: 0
  6134  002C1A  0E00               	movlw	0
  6135  002C1C  6F60               	movwf	?__div_to_l_& (0+255),b
  6136  002C1E  0E00               	movlw	0
  6137  002C20  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
  6138  002C22  0E00               	movlw	0
  6139  002C24  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
  6140  002C26  0E00               	movlw	0
  6141  002C28  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
  6142                           
  6143                           ; BSR set to: 0
  6144  002C2A  0012               	return	
  6145  002C2C                     l485:
  6146                           
  6147                           ; BSR set to: 0
  6148                           
  6149                           ; BSR set to: 0
  6150                           
  6151                           ; BSR set to: 0
  6152  002C2C  90D8               	bcf	status,0,c
  6153  002C2E  3369               	rrcf	(__div_to_l_@quot+3)& (0+255),f,b
  6154  002C30  3368               	rrcf	(__div_to_l_@quot+2)& (0+255),f,b
  6155  002C32  3367               	rrcf	(__div_to_l_@quot+1)& (0+255),f,b
  6156  002C34  3366               	rrcf	__div_to_l_@quot& (0+255),f,b
  6157                           
  6158                           ; BSR set to: 0
  6159  002C36  3F6B               	incfsz	__div_to_l_@exp1& (0+255),f,b
  6160  002C38  D7F9               	goto	l485
  6161                           
  6162                           ; BSR set to: 0
  6163  002C3A  D015               	goto	u3170
  6164  002C3C                     l484:
  6165                           
  6166                           ; BSR set to: 0
  6167                           
  6168                           ; BSR set to: 0
  6169  002C3C  0E1F               	movlw	31
  6170  002C3E  656B               	cpfsgt	__div_to_l_@exp1& (0+255),b
  6171  002C40  D00F               	goto	l490
  6172                           
  6173                           ; BSR set to: 0
  6174  002C42  0E00               	movlw	0
  6175  002C44  6F60               	movwf	?__div_to_l_& (0+255),b
  6176  002C46  0E00               	movlw	0
  6177  002C48  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
  6178  002C4A  0E00               	movlw	0
  6179  002C4C  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
  6180  002C4E  0E00               	movlw	0
  6181  002C50  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
  6182                           
  6183                           ; BSR set to: 0
  6184  002C52  0012               	return	
  6185  002C54                     
  6186                           ; BSR set to: 0
  6187                           
  6188                           ; BSR set to: 0
  6189  002C54  90D8               	bcf	status,0,c
  6190  002C56  3766               	rlcf	__div_to_l_@quot& (0+255),f,b
  6191  002C58  3767               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  6192  002C5A  3768               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  6193  002C5C  3769               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  6194  002C5E  076B               	decf	__div_to_l_@exp1& (0+255),f,b
  6195  002C60                     l490:
  6196                           
  6197                           ; BSR set to: 0
  6198                           
  6199                           ; BSR set to: 0
  6200  002C60  516B               	movf	__div_to_l_@exp1& (0+255),w,b
  6201  002C62  A4D8               	btfss	status,2,c
  6202  002C64  D7F7               	goto	l491
  6203  002C66                     u3170:
  6204                           
  6205                           ; BSR set to: 0
  6206                           
  6207                           ; BSR set to: 0
  6208  002C66  C066  F060         	movff	__div_to_l_@quot,?__div_to_l_
  6209  002C6A  C067  F061         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  6210  002C6E  C068  F062         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  6211  002C72  C069  F063         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  6212                           
  6213                           ; BSR set to: 0
  6214  002C76  0012               	return		;funcret
  6215  002C78                     __end_of__div_to_l_:
  6216                           	opt stack 0
  6217                           tblptru	equ	0xFF8
  6218                           tblptrh	equ	0xFF7
  6219                           tblptrl	equ	0xFF6
  6220                           tablat	equ	0xFF5
  6221                           prodh	equ	0xFF4
  6222                           prodl	equ	0xFF3
  6223                           postinc0	equ	0xFEE
  6224                           wreg	equ	0xFE8
  6225                           indf2	equ	0xFDF
  6226                           postinc2	equ	0xFDE
  6227                           postdec2	equ	0xFDD
  6228                           fsr2h	equ	0xFDA
  6229                           fsr2l	equ	0xFD9
  6230                           status	equ	0xFD8
  6231                           
  6232 ;; *************** function ___lltoft *****************
  6233 ;; Defined at:
  6234 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
  6235 ;; Parameters:    Size  Location     Type
  6236 ;;  c               4    8[BANK0 ] unsigned long 
  6237 ;; Auto vars:     Size  Location     Type
  6238 ;;  exp             1   16[BANK0 ] unsigned char 
  6239 ;; Return value:  Size  Location     Type
  6240 ;;                  3    8[BANK0 ] float 
  6241 ;; Registers used:
  6242 ;;		wreg, status,2, status,0, cstack
  6243 ;; Tracked objects:
  6244 ;;		On entry : 0/0
  6245 ;;		On exit  : 0/0
  6246 ;;		Unchanged: 0/0
  6247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6248 ;;      Params:         0       4       0       0       0       0       0       0       0
  6249 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6250 ;;      Temps:          0       4       0       0       0       0       0       0       0
  6251 ;;      Totals:         0       9       0       0       0       0       0       0       0
  6252 ;;Total ram usage:        9 bytes
  6253 ;; Hardware stack levels used:    1
  6254 ;; Hardware stack levels required when called:    4
  6255 ;; This function calls:
  6256 ;;		___ftpack
  6257 ;; This function is called by:
  6258 ;;		_main
  6259 ;;		_sprintf
  6260 ;; This function uses a non-reentrant model
  6261 ;;
  6262                           
  6263                           	psect	text10
  6264  003A04                     __ptext10:
  6265                           	opt stack 0
  6266  003A04                     ___lltoft:
  6267                           	opt stack 25
  6268                           
  6269                           ; BSR set to: 0
  6270                           ;incstack = 0
  6271  003A04  0E8E               	movlw	142
  6272  003A06  0100               	movlb	0	; () banked
  6273  003A08  6F70               	movwf	___lltoft@exp& (0+255),b
  6274  003A0A  D006               	goto	l689
  6275  003A0C                     
  6276                           ; BSR set to: 0
  6277                           
  6278                           ; BSR set to: 0
  6279  003A0C  90D8               	bcf	status,0,c
  6280  003A0E  336B               	rrcf	(___lltoft@c+3)& (0+255),f,b
  6281  003A10  336A               	rrcf	(___lltoft@c+2)& (0+255),f,b
  6282  003A12  3369               	rrcf	(___lltoft@c+1)& (0+255),f,b
  6283  003A14  3368               	rrcf	___lltoft@c& (0+255),f,b
  6284  003A16  2B70               	incf	___lltoft@exp& (0+255),f,b
  6285  003A18                     l689:
  6286                           
  6287                           ; BSR set to: 0
  6288                           
  6289                           ; BSR set to: 0
  6290  003A18  0E00               	movlw	0
  6291  003A1A  1568               	andwf	___lltoft@c& (0+255),w,b
  6292  003A1C  6F6C               	movwf	??___lltoft& (0+255),b
  6293  003A1E  0E00               	movlw	0
  6294  003A20  1569               	andwf	(___lltoft@c+1)& (0+255),w,b
  6295  003A22  6F6D               	movwf	(??___lltoft+1)& (0+255),b
  6296  003A24  0E00               	movlw	0
  6297  003A26  156A               	andwf	(___lltoft@c+2)& (0+255),w,b
  6298  003A28  6F6E               	movwf	(??___lltoft+2)& (0+255),b
  6299  003A2A  0EFF               	movlw	255
  6300  003A2C  156B               	andwf	(___lltoft@c+3)& (0+255),w,b
  6301  003A2E  6F6F               	movwf	(??___lltoft+3)& (0+255),b
  6302  003A30  516C               	movf	??___lltoft& (0+255),w,b
  6303  003A32  116D               	iorwf	(??___lltoft+1)& (0+255),w,b
  6304  003A34  116E               	iorwf	(??___lltoft+2)& (0+255),w,b
  6305  003A36  116F               	iorwf	(??___lltoft+3)& (0+255),w,b
  6306  003A38  A4D8               	btfss	status,2,c
  6307  003A3A  D7E8               	goto	l690
  6308                           
  6309                           ; BSR set to: 0
  6310                           
  6311                           ; BSR set to: 0
  6312  003A3C  C068  F060         	movff	___lltoft@c,___ftpack@arg
  6313  003A40  C069  F061         	movff	___lltoft@c+1,___ftpack@arg+1
  6314  003A44  C06A  F062         	movff	___lltoft@c+2,___ftpack@arg+2
  6315  003A48  C070  F063         	movff	___lltoft@exp,___ftpack@exp
  6316  003A4C  0E00               	movlw	0
  6317  003A4E  6F64               	movwf	___ftpack@sign& (0+255),b
  6318  003A50  EC51  F01A         	call	___ftpack	;wreg free
  6319  003A54  C060  F068         	movff	?___ftpack,?___lltoft
  6320  003A58  C061  F069         	movff	?___ftpack+1,?___lltoft+1
  6321  003A5C  C062  F06A         	movff	?___ftpack+2,?___lltoft+2
  6322  003A60  0012               	return	
  6323  003A62                     __end_of___lltoft:
  6324                           	opt stack 0
  6325                           tblptru	equ	0xFF8
  6326                           tblptrh	equ	0xFF7
  6327                           tblptrl	equ	0xFF6
  6328                           tablat	equ	0xFF5
  6329                           prodh	equ	0xFF4
  6330                           prodl	equ	0xFF3
  6331                           postinc0	equ	0xFEE
  6332                           wreg	equ	0xFE8
  6333                           indf2	equ	0xFDF
  6334                           postinc2	equ	0xFDE
  6335                           postdec2	equ	0xFDD
  6336                           fsr2h	equ	0xFDA
  6337                           fsr2l	equ	0xFD9
  6338                           status	equ	0xFD8
  6339                           
  6340 ;; *************** function ___llmod *****************
  6341 ;; Defined at:
  6342 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  6343 ;; Parameters:    Size  Location     Type
  6344 ;;  dividend        4   13[BANK0 ] unsigned long 
  6345 ;;  divisor         4   17[BANK0 ] unsigned long 
  6346 ;; Auto vars:     Size  Location     Type
  6347 ;;  counter         1   21[BANK0 ] unsigned char 
  6348 ;; Return value:  Size  Location     Type
  6349 ;;                  4   13[BANK0 ] unsigned long 
  6350 ;; Registers used:
  6351 ;;		wreg, status,2, status,0
  6352 ;; Tracked objects:
  6353 ;;		On entry : 0/0
  6354 ;;		On exit  : 0/0
  6355 ;;		Unchanged: 0/0
  6356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6357 ;;      Params:         0       8       0       0       0       0       0       0       0
  6358 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6359 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6360 ;;      Totals:         0       9       0       0       0       0       0       0       0
  6361 ;;Total ram usage:        9 bytes
  6362 ;; Hardware stack levels used:    1
  6363 ;; Hardware stack levels required when called:    3
  6364 ;; This function calls:
  6365 ;;		Nothing
  6366 ;; This function is called by:
  6367 ;;		_sprintf
  6368 ;; This function uses a non-reentrant model
  6369 ;;
  6370                           
  6371                           	psect	text11
  6372  00399C                     __ptext11:
  6373                           	opt stack 0
  6374  00399C                     ___llmod:
  6375                           	opt stack 26
  6376                           
  6377                           ;incstack = 0
  6378  00399C  0100               	movlb	0	; () banked
  6379  00399E  5171               	movf	___llmod@divisor& (0+255),w,b
  6380  0039A0  1172               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  6381  0039A2  1173               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  6382  0039A4  1174               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  6383  0039A6  B4D8               	btfsc	status,2,c
  6384  0039A8  D024               	goto	l683
  6385                           
  6386                           ; BSR set to: 0
  6387  0039AA  0E01               	movlw	1
  6388  0039AC  6F75               	movwf	___llmod@counter& (0+255),b
  6389  0039AE  D006               	goto	l678
  6390  0039B0                     
  6391                           ; BSR set to: 0
  6392                           
  6393                           ; BSR set to: 0
  6394  0039B0  90D8               	bcf	status,0,c
  6395  0039B2  3771               	rlcf	___llmod@divisor& (0+255),f,b
  6396  0039B4  3772               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  6397  0039B6  3773               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  6398  0039B8  3774               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  6399  0039BA  2B75               	incf	___llmod@counter& (0+255),f,b
  6400  0039BC                     l678:
  6401                           
  6402                           ; BSR set to: 0
  6403                           
  6404                           ; BSR set to: 0
  6405  0039BC  AF74               	btfss	(___llmod@divisor+3)& (0+255),7,b
  6406  0039BE  D7F8               	goto	l679
  6407  0039C0                     u3280:
  6408                           
  6409                           ; BSR set to: 0
  6410                           
  6411                           ; BSR set to: 0
  6412                           
  6413                           ; BSR set to: 0
  6414  0039C0  5171               	movf	___llmod@divisor& (0+255),w,b
  6415  0039C2  5D6D               	subwf	___llmod@dividend& (0+255),w,b
  6416  0039C4  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
  6417  0039C6  596E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  6418  0039C8  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
  6419  0039CA  596F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  6420  0039CC  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
  6421  0039CE  5970               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  6422  0039D0  A0D8               	btfss	status,0,c
  6423  0039D2  D008               	goto	l682
  6424                           
  6425                           ; BSR set to: 0
  6426  0039D4  5171               	movf	___llmod@divisor& (0+255),w,b
  6427  0039D6  5F6D               	subwf	___llmod@dividend& (0+255),f,b
  6428  0039D8  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
  6429  0039DA  5B6E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  6430  0039DC  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
  6431  0039DE  5B6F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  6432  0039E0  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
  6433  0039E2  5B70               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  6434  0039E4                     l682:
  6435                           
  6436                           ; BSR set to: 0
  6437                           
  6438                           ; BSR set to: 0
  6439  0039E4  90D8               	bcf	status,0,c
  6440  0039E6  3374               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  6441  0039E8  3373               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  6442  0039EA  3372               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  6443  0039EC  3371               	rrcf	___llmod@divisor& (0+255),f,b
  6444                           
  6445                           ; BSR set to: 0
  6446  0039EE  2F75               	decfsz	___llmod@counter& (0+255),f,b
  6447  0039F0  D7E7               	goto	u3280
  6448  0039F2                     l683:
  6449                           
  6450                           ; BSR set to: 0
  6451                           
  6452                           ; BSR set to: 0
  6453  0039F2  C06D  F06D         	movff	___llmod@dividend,?___llmod
  6454  0039F6  C06E  F06E         	movff	___llmod@dividend+1,?___llmod+1
  6455  0039FA  C06F  F06F         	movff	___llmod@dividend+2,?___llmod+2
  6456  0039FE  C070  F070         	movff	___llmod@dividend+3,?___llmod+3
  6457                           
  6458                           ; BSR set to: 0
  6459  003A02  0012               	return		;funcret
  6460  003A04                     __end_of___llmod:
  6461                           	opt stack 0
  6462                           tblptru	equ	0xFF8
  6463                           tblptrh	equ	0xFF7
  6464                           tblptrl	equ	0xFF6
  6465                           tablat	equ	0xFF5
  6466                           prodh	equ	0xFF4
  6467                           prodl	equ	0xFF3
  6468                           postinc0	equ	0xFEE
  6469                           wreg	equ	0xFE8
  6470                           indf2	equ	0xFDF
  6471                           postinc2	equ	0xFDE
  6472                           postdec2	equ	0xFDD
  6473                           fsr2h	equ	0xFDA
  6474                           fsr2l	equ	0xFD9
  6475                           status	equ	0xFD8
  6476                           
  6477 ;; *************** function ___lldiv *****************
  6478 ;; Defined at:
  6479 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  6480 ;; Parameters:    Size  Location     Type
  6481 ;;  dividend        4    0[BANK0 ] unsigned long 
  6482 ;;  divisor         4    4[BANK0 ] unsigned long 
  6483 ;; Auto vars:     Size  Location     Type
  6484 ;;  quotient        4    8[BANK0 ] unsigned long 
  6485 ;;  counter         1   12[BANK0 ] unsigned char 
  6486 ;; Return value:  Size  Location     Type
  6487 ;;                  4    0[BANK0 ] unsigned long 
  6488 ;; Registers used:
  6489 ;;		wreg, status,2, status,0
  6490 ;; Tracked objects:
  6491 ;;		On entry : 0/0
  6492 ;;		On exit  : 0/0
  6493 ;;		Unchanged: 0/0
  6494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6495 ;;      Params:         0       8       0       0       0       0       0       0       0
  6496 ;;      Locals:         0       5       0       0       0       0       0       0       0
  6497 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6498 ;;      Totals:         0      13       0       0       0       0       0       0       0
  6499 ;;Total ram usage:       13 bytes
  6500 ;; Hardware stack levels used:    1
  6501 ;; Hardware stack levels required when called:    3
  6502 ;; This function calls:
  6503 ;;		Nothing
  6504 ;; This function is called by:
  6505 ;;		_sprintf
  6506 ;; This function uses a non-reentrant model
  6507 ;;
  6508                           
  6509                           	psect	text12
  6510  0037B0                     __ptext12:
  6511                           	opt stack 0
  6512  0037B0                     ___lldiv:
  6513                           	opt stack 26
  6514                           
  6515                           ; BSR set to: 0
  6516                           ;incstack = 0
  6517  0037B0  0E00               	movlw	0
  6518  0037B2  0100               	movlb	0	; () banked
  6519  0037B4  6F68               	movwf	___lldiv@quotient& (0+255),b
  6520  0037B6  0E00               	movlw	0
  6521  0037B8  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
  6522  0037BA  0E00               	movlw	0
  6523  0037BC  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
  6524  0037BE  0E00               	movlw	0
  6525  0037C0  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
  6526                           
  6527                           ; BSR set to: 0
  6528  0037C2  5164               	movf	___lldiv@divisor& (0+255),w,b
  6529  0037C4  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  6530  0037C6  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  6531  0037C8  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  6532  0037CA  B4D8               	btfsc	status,2,c
  6533  0037CC  D02A               	goto	l673
  6534                           
  6535                           ; BSR set to: 0
  6536  0037CE  0E01               	movlw	1
  6537  0037D0  6F6C               	movwf	___lldiv@counter& (0+255),b
  6538  0037D2  D006               	goto	l668
  6539  0037D4                     
  6540                           ; BSR set to: 0
  6541                           
  6542                           ; BSR set to: 0
  6543  0037D4  90D8               	bcf	status,0,c
  6544  0037D6  3764               	rlcf	___lldiv@divisor& (0+255),f,b
  6545  0037D8  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  6546  0037DA  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  6547  0037DC  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  6548  0037DE  2B6C               	incf	___lldiv@counter& (0+255),f,b
  6549  0037E0                     l668:
  6550                           
  6551                           ; BSR set to: 0
  6552                           
  6553                           ; BSR set to: 0
  6554  0037E0  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  6555  0037E2  D7F8               	goto	l669
  6556  0037E4                     u3250:
  6557                           
  6558                           ; BSR set to: 0
  6559                           
  6560                           ; BSR set to: 0
  6561                           
  6562                           ; BSR set to: 0
  6563  0037E4  90D8               	bcf	status,0,c
  6564  0037E6  3768               	rlcf	___lldiv@quotient& (0+255),f,b
  6565  0037E8  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  6566  0037EA  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  6567  0037EC  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  6568                           
  6569                           ; BSR set to: 0
  6570  0037EE  5164               	movf	___lldiv@divisor& (0+255),w,b
  6571  0037F0  5D60               	subwf	___lldiv@dividend& (0+255),w,b
  6572  0037F2  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6573  0037F4  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  6574  0037F6  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6575  0037F8  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  6576  0037FA  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6577  0037FC  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  6578  0037FE  A0D8               	btfss	status,0,c
  6579  003800  D009               	goto	l672
  6580                           
  6581                           ; BSR set to: 0
  6582  003802  5164               	movf	___lldiv@divisor& (0+255),w,b
  6583  003804  5F60               	subwf	___lldiv@dividend& (0+255),f,b
  6584  003806  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6585  003808  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  6586  00380A  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6587  00380C  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  6588  00380E  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6589  003810  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  6590                           
  6591                           ; BSR set to: 0
  6592  003812  8168               	bsf	___lldiv@quotient& (0+255),0,b
  6593  003814                     l672:
  6594                           
  6595                           ; BSR set to: 0
  6596                           
  6597                           ; BSR set to: 0
  6598  003814  90D8               	bcf	status,0,c
  6599  003816  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  6600  003818  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  6601  00381A  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  6602  00381C  3364               	rrcf	___lldiv@divisor& (0+255),f,b
  6603                           
  6604                           ; BSR set to: 0
  6605  00381E  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
  6606  003820  D7E1               	goto	u3250
  6607  003822                     l673:
  6608                           
  6609                           ; BSR set to: 0
  6610                           
  6611                           ; BSR set to: 0
  6612  003822  C068  F060         	movff	___lldiv@quotient,?___lldiv
  6613  003826  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
  6614  00382A  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
  6615  00382E  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
  6616                           
  6617                           ; BSR set to: 0
  6618  003832  0012               	return		;funcret
  6619  003834                     __end_of___lldiv:
  6620                           	opt stack 0
  6621                           tblptru	equ	0xFF8
  6622                           tblptrh	equ	0xFF7
  6623                           tblptrl	equ	0xFF6
  6624                           tablat	equ	0xFF5
  6625                           prodh	equ	0xFF4
  6626                           prodl	equ	0xFF3
  6627                           postinc0	equ	0xFEE
  6628                           wreg	equ	0xFE8
  6629                           indf2	equ	0xFDF
  6630                           postinc2	equ	0xFDE
  6631                           postdec2	equ	0xFDD
  6632                           fsr2h	equ	0xFDA
  6633                           fsr2l	equ	0xFD9
  6634                           status	equ	0xFD8
  6635                           
  6636 ;; *************** function _cos *****************
  6637 ;; Defined at:
  6638 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\cos.c"
  6639 ;; Parameters:    Size  Location     Type
  6640 ;;  f               3  109[BANK0 ] unsigned long 
  6641 ;; Auto vars:     Size  Location     Type
  6642 ;;		None
  6643 ;; Return value:  Size  Location     Type
  6644 ;;                  3  109[BANK0 ] unsigned long 
  6645 ;; Registers used:
  6646 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6647 ;; Tracked objects:
  6648 ;;		On entry : 0/0
  6649 ;;		On exit  : 0/0
  6650 ;;		Unchanged: 0/0
  6651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6652 ;;      Params:         0       3       0       0       0       0       0       0       0
  6653 ;;      Locals:         0       3       0       0       0       0       0       0       0
  6654 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6655 ;;      Totals:         0       6       0       0       0       0       0       0       0
  6656 ;;Total ram usage:        6 bytes
  6657 ;; Hardware stack levels used:    1
  6658 ;; Hardware stack levels required when called:    7
  6659 ;; This function calls:
  6660 ;;		___ftadd
  6661 ;;		___ftge
  6662 ;;		_sin
  6663 ;; This function is called by:
  6664 ;;		_main
  6665 ;; This function uses a non-reentrant model
  6666 ;;
  6667                           
  6668                           	psect	text13
  6669  0033F0                     __ptext13:
  6670                           	opt stack 0
  6671  0033F0                     _cos:
  6672                           	opt stack 23
  6673                           
  6674                           ; BSR set to: 0
  6675                           ;incstack = 0
  6676  0033F0  0E10               	movlw	16
  6677  0033F2  0100               	movlb	0	; () banked
  6678  0033F4  6F60               	movwf	___ftge@ff1& (0+255),b
  6679  0033F6  0E49               	movlw	73
  6680  0033F8  6F61               	movwf	(___ftge@ff1+1)& (0+255),b
  6681  0033FA  0E40               	movlw	64
  6682  0033FC  6F62               	movwf	(___ftge@ff1+2)& (0+255),b
  6683  0033FE  C0CD  F063         	movff	cos@f,___ftge@ff2
  6684  003402  C0CE  F064         	movff	cos@f+1,___ftge@ff2+1
  6685  003406  C0CF  F065         	movff	cos@f+2,___ftge@ff2+2
  6686  00340A  EC4C  F01B         	call	___ftge	;wreg free
  6687  00340E  0100               	movlb	0	; () banked
  6688  003410  B0D8               	btfsc	status,0,c
  6689  003412  D023               	goto	l474
  6690                           
  6691                           ; BSR set to: 0
  6692  003414  C0CD  F08D         	movff	cos@f,___ftadd@f1
  6693  003418  C0CE  F08E         	movff	cos@f+1,___ftadd@f1+1
  6694  00341C  C0CF  F08F         	movff	cos@f+2,___ftadd@f1+2
  6695  003420  0ECC               	movlw	204
  6696  003422  6F90               	movwf	___ftadd@f2& (0+255),b
  6697  003424  0E96               	movlw	150
  6698  003426  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
  6699  003428  0EC0               	movlw	192
  6700  00342A  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
  6701  00342C  EC9B  F011         	call	___ftadd	;wreg free
  6702  003430  C08D  F0D0         	movff	?___ftadd,_cos$1435
  6703  003434  C08E  F0D1         	movff	?___ftadd+1,_cos$1435+1
  6704  003438  C08F  F0D2         	movff	?___ftadd+2,_cos$1435+2
  6705  00343C  C0D0  F0C0         	movff	_cos$1435,sin@f
  6706  003440  C0D1  F0C1         	movff	_cos$1435+1,sin@f+1
  6707  003444  C0D2  F0C2         	movff	_cos$1435+2,sin@f+2
  6708  003448  EC66  F010         	call	_sin	;wreg free
  6709  00344C  C0C0  F0CD         	movff	?_sin,?_cos
  6710  003450  C0C1  F0CE         	movff	?_sin+1,?_cos+1
  6711  003454  C0C2  F0CF         	movff	?_sin+2,?_cos+2
  6712  003458  0012               	return	
  6713  00345A                     l474:
  6714  00345A  C0CD  F08D         	movff	cos@f,___ftadd@f1
  6715  00345E  C0CE  F08E         	movff	cos@f+1,___ftadd@f1+1
  6716  003462  C0CF  F08F         	movff	cos@f+2,___ftadd@f1+2
  6717  003466  0E10               	movlw	16
  6718  003468  0100               	movlb	0	; () banked
  6719  00346A  6F90               	movwf	___ftadd@f2& (0+255),b
  6720  00346C  0EC9               	movlw	201
  6721  00346E  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
  6722  003470  0E3F               	movlw	63
  6723  003472  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
  6724  003474  EC9B  F011         	call	___ftadd	;wreg free
  6725  003478  C08D  F0D0         	movff	?___ftadd,_cos$1435
  6726  00347C  C08E  F0D1         	movff	?___ftadd+1,_cos$1435+1
  6727  003480  C08F  F0D2         	movff	?___ftadd+2,_cos$1435+2
  6728  003484  C0D0  F0C0         	movff	_cos$1435,sin@f
  6729  003488  C0D1  F0C1         	movff	_cos$1435+1,sin@f+1
  6730  00348C  C0D2  F0C2         	movff	_cos$1435+2,sin@f+2
  6731  003490  EC66  F010         	call	_sin	;wreg free
  6732  003494  C0C0  F0CD         	movff	?_sin,?_cos
  6733  003498  C0C1  F0CE         	movff	?_sin+1,?_cos+1
  6734  00349C  C0C2  F0CF         	movff	?_sin+2,?_cos+2
  6735  0034A0  0012               	return	
  6736  0034A2                     __end_of_cos:
  6737                           	opt stack 0
  6738                           tblptru	equ	0xFF8
  6739                           tblptrh	equ	0xFF7
  6740                           tblptrl	equ	0xFF6
  6741                           tablat	equ	0xFF5
  6742                           prodh	equ	0xFF4
  6743                           prodl	equ	0xFF3
  6744                           postinc0	equ	0xFEE
  6745                           wreg	equ	0xFE8
  6746                           indf2	equ	0xFDF
  6747                           postinc2	equ	0xFDE
  6748                           postdec2	equ	0xFDD
  6749                           fsr2h	equ	0xFDA
  6750                           fsr2l	equ	0xFD9
  6751                           status	equ	0xFD8
  6752                           
  6753 ;; *************** function _sin *****************
  6754 ;; Defined at:
  6755 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sin.c"
  6756 ;; Parameters:    Size  Location     Type
  6757 ;;  f               3   96[BANK0 ] unsigned long 
  6758 ;; Auto vars:     Size  Location     Type
  6759 ;;  x2              3  105[BANK0 ] unsigned long 
  6760 ;;  y               3   99[BANK0 ] unsigned long 
  6761 ;;  sgn             1  108[BANK0 ] unsigned char 
  6762 ;; Return value:  Size  Location     Type
  6763 ;;                  3   96[BANK0 ] unsigned char 
  6764 ;; Registers used:
  6765 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6766 ;; Tracked objects:
  6767 ;;		On entry : 0/0
  6768 ;;		On exit  : 0/0
  6769 ;;		Unchanged: 0/0
  6770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6771 ;;      Params:         0       3       0       0       0       0       0       0       0
  6772 ;;      Locals:         0      10       0       0       0       0       0       0       0
  6773 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6774 ;;      Totals:         0      13       0       0       0       0       0       0       0
  6775 ;;Total ram usage:       13 bytes
  6776 ;; Hardware stack levels used:    1
  6777 ;; Hardware stack levels required when called:    6
  6778 ;; This function calls:
  6779 ;;		___ftadd
  6780 ;;		___ftdiv
  6781 ;;		___ftge
  6782 ;;		___ftmul
  6783 ;;		___ftneg
  6784 ;;		___ftsub
  6785 ;;		_eval_poly
  6786 ;;		_floor
  6787 ;; This function is called by:
  6788 ;;		_cos
  6789 ;; This function uses a non-reentrant model
  6790 ;;
  6791                           
  6792                           	psect	text14
  6793  0020CC                     __ptext14:
  6794                           	opt stack 0
  6795  0020CC                     _sin:
  6796                           	opt stack 23
  6797                           
  6798                           ;incstack = 0
  6799  0020CC  0E00               	movlw	0
  6800  0020CE  0100               	movlb	0	; () banked
  6801  0020D0  6FCC               	movwf	sin@sgn& (0+255),b
  6802                           
  6803                           ; BSR set to: 0
  6804  0020D2  AFC2               	btfss	(sin@f+2)& (0+255),7,b
  6805  0020D4  D011               	goto	l757
  6806                           
  6807                           ; BSR set to: 0
  6808  0020D6  C0C0  F083         	movff	sin@f,___ftneg@f1
  6809  0020DA  C0C1  F084         	movff	sin@f+1,___ftneg@f1+1
  6810  0020DE  C0C2  F085         	movff	sin@f+2,___ftneg@f1+2
  6811  0020E2  ECA7  F01D         	call	___ftneg	;wreg free
  6812  0020E6  C083  F0C0         	movff	?___ftneg,sin@f
  6813  0020EA  C084  F0C1         	movff	?___ftneg+1,sin@f+1
  6814  0020EE  C085  F0C2         	movff	?___ftneg+2,sin@f+2
  6815  0020F2  0E01               	movlw	1
  6816  0020F4  0100               	movlb	0	; () banked
  6817  0020F6  6FCC               	movwf	sin@sgn& (0+255),b
  6818  0020F8                     l757:
  6819                           
  6820                           ; BSR set to: 0
  6821                           
  6822                           ; BSR set to: 0
  6823  0020F8  C0C0  F074         	movff	sin@f,___ftmul@f1
  6824  0020FC  C0C1  F075         	movff	sin@f+1,___ftmul@f1+1
  6825  002100  C0C2  F076         	movff	sin@f+2,___ftmul@f1+2
  6826  002104  0EFA               	movlw	250
  6827  002106  6F77               	movwf	___ftmul@f2& (0+255),b
  6828  002108  0E22               	movlw	34
  6829  00210A  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  6830  00210C  0E3E               	movlw	62
  6831  00210E  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  6832  002110  EC3C  F017         	call	___ftmul	;wreg free
  6833  002114  C074  F0C0         	movff	?___ftmul,sin@f
  6834  002118  C075  F0C1         	movff	?___ftmul+1,sin@f+1
  6835  00211C  C076  F0C2         	movff	?___ftmul+2,sin@f+2
  6836  002120  C0C0  F0AB         	movff	sin@f,___ftsub@f1
  6837  002124  C0C1  F0AC         	movff	sin@f+1,___ftsub@f1+1
  6838  002128  C0C2  F0AD         	movff	sin@f+2,___ftsub@f1+2
  6839  00212C  C0C0  F0A3         	movff	sin@f,floor@x
  6840  002130  C0C1  F0A4         	movff	sin@f+1,floor@x+1
  6841  002134  C0C2  F0A5         	movff	sin@f+2,floor@x+2
  6842  002138  EC18  F019         	call	_floor	;wreg free
  6843  00213C  C0A3  F0AE         	movff	?_floor,___ftsub@f2
  6844  002140  C0A4  F0AF         	movff	?_floor+1,___ftsub@f2+1
  6845  002144  C0A5  F0B0         	movff	?_floor+2,___ftsub@f2+2
  6846  002148  EC53  F01D         	call	___ftsub	;wreg free
  6847  00214C  C0AB  F0C0         	movff	?___ftsub,sin@f
  6848  002150  C0AC  F0C1         	movff	?___ftsub+1,sin@f+1
  6849  002154  C0AD  F0C2         	movff	?___ftsub+2,sin@f+2
  6850  002158  C0C0  F074         	movff	sin@f,___ftmul@f1
  6851  00215C  C0C1  F075         	movff	sin@f+1,___ftmul@f1+1
  6852  002160  C0C2  F076         	movff	sin@f+2,___ftmul@f1+2
  6853  002164  0E00               	movlw	0
  6854  002166  0100               	movlb	0	; () banked
  6855  002168  6F77               	movwf	___ftmul@f2& (0+255),b
  6856  00216A  0E80               	movlw	128
  6857  00216C  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  6858  00216E  0E40               	movlw	64
  6859  002170  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  6860  002172  EC3C  F017         	call	___ftmul	;wreg free
  6861  002176  C074  F0C0         	movff	?___ftmul,sin@f
  6862  00217A  C075  F0C1         	movff	?___ftmul+1,sin@f+1
  6863  00217E  C076  F0C2         	movff	?___ftmul+2,sin@f+2
  6864  002182  0E00               	movlw	0
  6865  002184  0100               	movlb	0	; () banked
  6866  002186  6F60               	movwf	___ftge@ff1& (0+255),b
  6867  002188  0E00               	movlw	0
  6868  00218A  6F61               	movwf	(___ftge@ff1+1)& (0+255),b
  6869  00218C  0E40               	movlw	64
  6870  00218E  6F62               	movwf	(___ftge@ff1+2)& (0+255),b
  6871  002190  C0C0  F063         	movff	sin@f,___ftge@ff2
  6872  002194  C0C1  F064         	movff	sin@f+1,___ftge@ff2+1
  6873  002198  C0C2  F065         	movff	sin@f+2,___ftge@ff2+2
  6874  00219C  EC4C  F01B         	call	___ftge	;wreg free
  6875  0021A0  0100               	movlb	0	; () banked
  6876  0021A2  B0D8               	btfsc	status,0,c
  6877  0021A4  D01C               	goto	l758
  6878                           
  6879                           ; BSR set to: 0
  6880  0021A6  C0C0  F0AB         	movff	sin@f,___ftsub@f1
  6881  0021AA  C0C1  F0AC         	movff	sin@f+1,___ftsub@f1+1
  6882  0021AE  C0C2  F0AD         	movff	sin@f+2,___ftsub@f1+2
  6883  0021B2  0E00               	movlw	0
  6884  0021B4  6FAE               	movwf	___ftsub@f2& (0+255),b
  6885  0021B6  0E00               	movlw	0
  6886  0021B8  6FAF               	movwf	(___ftsub@f2+1)& (0+255),b
  6887  0021BA  0E40               	movlw	64
  6888  0021BC  6FB0               	movwf	(___ftsub@f2+2)& (0+255),b
  6889  0021BE  EC53  F01D         	call	___ftsub	;wreg free
  6890  0021C2  C0AB  F0C0         	movff	?___ftsub,sin@f
  6891  0021C6  C0AC  F0C1         	movff	?___ftsub+1,sin@f+1
  6892  0021CA  C0AD  F0C2         	movff	?___ftsub+2,sin@f+2
  6893  0021CE  0100               	movlb	0	; () banked
  6894  0021D0  51CC               	movf	sin@sgn& (0+255),w,b
  6895  0021D2  A4D8               	btfss	status,2,c
  6896  0021D4  D002               	goto	u3200
  6897  0021D6  0E01               	movlw	1
  6898  0021D8  D001               	goto	u3210
  6899  0021DA                     u3200:
  6900  0021DA  0E00               	movlw	0
  6901  0021DC                     u3210:
  6902  0021DC  6FCC               	movwf	sin@sgn& (0+255),b
  6903  0021DE                     l758:
  6904                           
  6905                           ; BSR set to: 0
  6906                           
  6907                           ; BSR set to: 0
  6908  0021DE  0E00               	movlw	0
  6909  0021E0  6F60               	movwf	___ftge@ff1& (0+255),b
  6910  0021E2  0E80               	movlw	128
  6911  0021E4  6F61               	movwf	(___ftge@ff1+1)& (0+255),b
  6912  0021E6  0E3F               	movlw	63
  6913  0021E8  6F62               	movwf	(___ftge@ff1+2)& (0+255),b
  6914  0021EA  C0C0  F063         	movff	sin@f,___ftge@ff2
  6915  0021EE  C0C1  F064         	movff	sin@f+1,___ftge@ff2+1
  6916  0021F2  C0C2  F065         	movff	sin@f+2,___ftge@ff2+2
  6917  0021F6  EC4C  F01B         	call	___ftge	;wreg free
  6918  0021FA  0100               	movlb	0	; () banked
  6919  0021FC  B0D8               	btfsc	status,0,c
  6920  0021FE  D01D               	goto	l759
  6921                           
  6922                           ; BSR set to: 0
  6923  002200  C0C0  F083         	movff	sin@f,___ftneg@f1
  6924  002204  C0C1  F084         	movff	sin@f+1,___ftneg@f1+1
  6925  002208  C0C2  F085         	movff	sin@f+2,___ftneg@f1+2
  6926  00220C  ECA7  F01D         	call	___ftneg	;wreg free
  6927  002210  C083  F08D         	movff	?___ftneg,___ftadd@f1
  6928  002214  C084  F08E         	movff	?___ftneg+1,___ftadd@f1+1
  6929  002218  C085  F08F         	movff	?___ftneg+2,___ftadd@f1+2
  6930  00221C  0E00               	movlw	0
  6931  00221E  0100               	movlb	0	; () banked
  6932  002220  6F90               	movwf	___ftadd@f2& (0+255),b
  6933  002222  0E00               	movlw	0
  6934  002224  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
  6935  002226  0E40               	movlw	64
  6936  002228  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
  6937  00222A  EC9B  F011         	call	___ftadd	;wreg free
  6938  00222E  C08D  F0C0         	movff	?___ftadd,sin@f
  6939  002232  C08E  F0C1         	movff	?___ftadd+1,sin@f+1
  6940  002236  C08F  F0C2         	movff	?___ftadd+2,sin@f+2
  6941  00223A                     l759:
  6942  00223A  C0C0  F074         	movff	sin@f,___ftmul@f1
  6943  00223E  C0C1  F075         	movff	sin@f+1,___ftmul@f1+1
  6944  002242  C0C2  F076         	movff	sin@f+2,___ftmul@f1+2
  6945  002246  C0C0  F077         	movff	sin@f,___ftmul@f2
  6946  00224A  C0C1  F078         	movff	sin@f+1,___ftmul@f2+1
  6947  00224E  C0C2  F079         	movff	sin@f+2,___ftmul@f2+2
  6948  002252  EC3C  F017         	call	___ftmul	;wreg free
  6949  002256  C074  F0C9         	movff	?___ftmul,sin@x2
  6950  00225A  C075  F0CA         	movff	?___ftmul+1,sin@x2+1
  6951  00225E  C076  F0CB         	movff	?___ftmul+2,sin@x2+2
  6952  002262  C0C9  F099         	movff	sin@x2,eval_poly@x
  6953  002266  C0CA  F09A         	movff	sin@x2+1,eval_poly@x+1
  6954  00226A  C0CB  F09B         	movff	sin@x2+2,eval_poly@x+2
  6955  00226E  0E86               	movlw	low sin@coeff_b
  6956  002270  0100               	movlb	0	; () banked
  6957  002272  6F9C               	movwf	eval_poly@d& (0+255),b
  6958  002274  0E08               	movlw	high sin@coeff_b
  6959  002276  6F9D               	movwf	(eval_poly@d+1)& (0+255),b
  6960  002278  0E00               	movlw	0
  6961  00227A  6F9F               	movwf	(eval_poly@n+1)& (0+255),b
  6962  00227C  0E03               	movlw	3
  6963  00227E  6F9E               	movwf	eval_poly@n& (0+255),b
  6964  002280  EC8A  F019         	call	_eval_poly	;wreg free
  6965  002284  C099  F0C3         	movff	?_eval_poly,sin@y
  6966  002288  C09A  F0C4         	movff	?_eval_poly+1,sin@y+1
  6967  00228C  C09B  F0C5         	movff	?_eval_poly+2,sin@y+2
  6968  002290  C0C3  F0B4         	movff	sin@y,___ftdiv@f2
  6969  002294  C0C4  F0B5         	movff	sin@y+1,___ftdiv@f2+1
  6970  002298  C0C5  F0B6         	movff	sin@y+2,___ftdiv@f2+2
  6971  00229C  0E00               	movlw	0
  6972  00229E  0100               	movlb	0	; () banked
  6973  0022A0  6F9F               	movwf	(eval_poly@n+1)& (0+255),b
  6974  0022A2  0E04               	movlw	4
  6975  0022A4  6F9E               	movwf	eval_poly@n& (0+255),b
  6976  0022A6  0E77               	movlw	low sin@coeff_a
  6977  0022A8  6F9C               	movwf	eval_poly@d& (0+255),b
  6978  0022AA  0E08               	movlw	high sin@coeff_a
  6979  0022AC  6F9D               	movwf	(eval_poly@d+1)& (0+255),b
  6980  0022AE  C0C9  F099         	movff	sin@x2,eval_poly@x
  6981  0022B2  C0CA  F09A         	movff	sin@x2+1,eval_poly@x+1
  6982  0022B6  C0CB  F09B         	movff	sin@x2+2,eval_poly@x+2
  6983  0022BA  EC8A  F019         	call	_eval_poly	;wreg free
  6984  0022BE  C099  F0B1         	movff	?_eval_poly,___ftdiv@f1
  6985  0022C2  C09A  F0B2         	movff	?_eval_poly+1,___ftdiv@f1+1
  6986  0022C6  C09B  F0B3         	movff	?_eval_poly+2,___ftdiv@f1+2
  6987  0022CA  EC31  F018         	call	___ftdiv	;wreg free
  6988  0022CE  C0B1  F0C6         	movff	?___ftdiv,_sin$1436
  6989  0022D2  C0B2  F0C7         	movff	?___ftdiv+1,_sin$1436+1
  6990  0022D6  C0B3  F0C8         	movff	?___ftdiv+2,_sin$1436+2
  6991  0022DA  C0C0  F074         	movff	sin@f,___ftmul@f1
  6992  0022DE  C0C1  F075         	movff	sin@f+1,___ftmul@f1+1
  6993  0022E2  C0C2  F076         	movff	sin@f+2,___ftmul@f1+2
  6994  0022E6  C0C6  F077         	movff	_sin$1436,___ftmul@f2
  6995  0022EA  C0C7  F078         	movff	_sin$1436+1,___ftmul@f2+1
  6996  0022EE  C0C8  F079         	movff	_sin$1436+2,___ftmul@f2+2
  6997  0022F2  EC3C  F017         	call	___ftmul	;wreg free
  6998  0022F6  C074  F0C0         	movff	?___ftmul,sin@f
  6999  0022FA  C075  F0C1         	movff	?___ftmul+1,sin@f+1
  7000  0022FE  C076  F0C2         	movff	?___ftmul+2,sin@f+2
  7001  002302  0100               	movlb	0	; () banked
  7002  002304  51CC               	movf	sin@sgn& (0+255),w,b
  7003  002306  B4D8               	btfsc	status,2,c
  7004  002308  D00F               	goto	l760
  7005                           
  7006                           ; BSR set to: 0
  7007  00230A  C0C0  F083         	movff	sin@f,___ftneg@f1
  7008  00230E  C0C1  F084         	movff	sin@f+1,___ftneg@f1+1
  7009  002312  C0C2  F085         	movff	sin@f+2,___ftneg@f1+2
  7010  002316  ECA7  F01D         	call	___ftneg	;wreg free
  7011  00231A  C083  F0C0         	movff	?___ftneg,?_sin
  7012  00231E  C084  F0C1         	movff	?___ftneg+1,?_sin+1
  7013  002322  C085  F0C2         	movff	?___ftneg+2,?_sin+2
  7014  002326  0012               	return	
  7015  002328                     l760:
  7016                           
  7017                           ; BSR set to: 0
  7018  002328  C0C0  F0C0         	movff	sin@f,?_sin
  7019  00232C  C0C1  F0C1         	movff	sin@f+1,?_sin+1
  7020  002330  C0C2  F0C2         	movff	sin@f+2,?_sin+2
  7021  002334  0012               	return		;funcret
  7022  002336                     __end_of_sin:
  7023                           	opt stack 0
  7024                           tblptru	equ	0xFF8
  7025                           tblptrh	equ	0xFF7
  7026                           tblptrl	equ	0xFF6
  7027                           tablat	equ	0xFF5
  7028                           prodh	equ	0xFF4
  7029                           prodl	equ	0xFF3
  7030                           postinc0	equ	0xFEE
  7031                           wreg	equ	0xFE8
  7032                           indf2	equ	0xFDF
  7033                           postinc2	equ	0xFDE
  7034                           postdec2	equ	0xFDD
  7035                           fsr2h	equ	0xFDA
  7036                           fsr2l	equ	0xFD9
  7037                           status	equ	0xFD8
  7038                           
  7039 ;; *************** function _floor *****************
  7040 ;; Defined at:
  7041 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\floor.c"
  7042 ;; Parameters:    Size  Location     Type
  7043 ;;  x               3   67[BANK0 ] unsigned char 
  7044 ;; Auto vars:     Size  Location     Type
  7045 ;;  i               3   70[BANK0 ] unsigned char 
  7046 ;;  expon           2   73[BANK0 ] int 
  7047 ;; Return value:  Size  Location     Type
  7048 ;;                  3   67[BANK0 ] int 
  7049 ;; Registers used:
  7050 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7051 ;; Tracked objects:
  7052 ;;		On entry : 0/0
  7053 ;;		On exit  : 0/0
  7054 ;;		Unchanged: 0/0
  7055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7056 ;;      Params:         0       3       0       0       0       0       0       0       0
  7057 ;;      Locals:         0       5       0       0       0       0       0       0       0
  7058 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7059 ;;      Totals:         0       8       0       0       0       0       0       0       0
  7060 ;;Total ram usage:        8 bytes
  7061 ;; Hardware stack levels used:    1
  7062 ;; Hardware stack levels required when called:    5
  7063 ;; This function calls:
  7064 ;;		___altoft
  7065 ;;		___ftadd
  7066 ;;		___ftge
  7067 ;;		___fttol
  7068 ;;		_frexp
  7069 ;; This function is called by:
  7070 ;;		_sin
  7071 ;; This function uses a non-reentrant model
  7072 ;;
  7073                           
  7074                           	psect	text15
  7075  003230                     __ptext15:
  7076                           	opt stack 0
  7077  003230                     _floor:
  7078                           	opt stack 23
  7079                           
  7080                           ;incstack = 0
  7081  003230  C0A3  F060         	movff	floor@x,frexp@value
  7082  003234  C0A4  F061         	movff	floor@x+1,frexp@value+1
  7083  003238  C0A5  F062         	movff	floor@x+2,frexp@value+2
  7084  00323C  0EA9               	movlw	low floor@expon
  7085  00323E  0100               	movlb	0	; () banked
  7086  003240  6F63               	movwf	frexp@eptr& (0+255),b
  7087  003242  0E00               	movlw	high floor@expon
  7088  003244  6F64               	movwf	(frexp@eptr+1)& (0+255),b
  7089  003246  EC1A  F01C         	call	_frexp	;wreg free
  7090  00324A  0100               	movlb	0	; () banked
  7091  00324C  AFAA               	btfss	(floor@expon+1)& (0+255),7,b
  7092  00324E  D010               	goto	l922
  7093                           
  7094                           ; BSR set to: 0
  7095  003250  AFA5               	btfss	(floor@x+2)& (0+255),7,b
  7096  003252  D007               	goto	l923
  7097                           
  7098                           ; BSR set to: 0
  7099  003254  0E00               	movlw	0
  7100  003256  6FA3               	movwf	?_floor& (0+255),b
  7101  003258  0E80               	movlw	128
  7102  00325A  6FA4               	movwf	(?_floor+1)& (0+255),b
  7103  00325C  0EBF               	movlw	191
  7104  00325E  6FA5               	movwf	(?_floor+2)& (0+255),b
  7105                           
  7106                           ; BSR set to: 0
  7107  003260  0012               	return	
  7108  003262                     l923:
  7109                           
  7110                           ; BSR set to: 0
  7111                           
  7112                           ; BSR set to: 0
  7113  003262  0E00               	movlw	0
  7114  003264  6FA3               	movwf	?_floor& (0+255),b
  7115  003266  0E00               	movlw	0
  7116  003268  6FA4               	movwf	(?_floor+1)& (0+255),b
  7117  00326A  0E00               	movlw	0
  7118  00326C  6FA5               	movwf	(?_floor+2)& (0+255),b
  7119                           
  7120                           ; BSR set to: 0
  7121  00326E  0012               	return	
  7122  003270                     l922:
  7123                           
  7124                           ; BSR set to: 0
  7125                           
  7126                           ; BSR set to: 0
  7127  003270  51AA               	movf	(floor@expon+1)& (0+255),w,b
  7128  003272  E104               	bnz	u2840
  7129  003274  0E15               	movlw	21
  7130  003276  5DA9               	subwf	floor@expon& (0+255),w,b
  7131  003278  A0D8               	btfss	status,0,c
  7132  00327A  D007               	goto	l925
  7133  00327C                     u2840:
  7134                           
  7135                           ; BSR set to: 0
  7136  00327C  C0A3  F0A3         	movff	floor@x,?_floor
  7137  003280  C0A4  F0A4         	movff	floor@x+1,?_floor+1
  7138  003284  C0A5  F0A5         	movff	floor@x+2,?_floor+2
  7139  003288  0012               	return	
  7140  00328A                     l925:
  7141                           
  7142                           ; BSR set to: 0
  7143                           
  7144                           ; BSR set to: 0
  7145  00328A  C0A3  F08A         	movff	floor@x,___fttol@f1
  7146  00328E  C0A4  F08B         	movff	floor@x+1,___fttol@f1+1
  7147  003292  C0A5  F08C         	movff	floor@x+2,___fttol@f1+2
  7148  003296  ECC0  F016         	call	___fttol	;wreg free
  7149  00329A  C08A  F099         	movff	?___fttol,___altoft@c
  7150  00329E  C08B  F09A         	movff	?___fttol+1,___altoft@c+1
  7151  0032A2  C08C  F09B         	movff	?___fttol+2,___altoft@c+2
  7152  0032A6  C08D  F09C         	movff	?___fttol+3,___altoft@c+3
  7153  0032AA  EC58  F01C         	call	___altoft	;wreg free
  7154  0032AE  C099  F0A6         	movff	?___altoft,floor@i
  7155  0032B2  C09A  F0A7         	movff	?___altoft+1,floor@i+1
  7156  0032B6  C09B  F0A8         	movff	?___altoft+2,floor@i+2
  7157  0032BA  C0A3  F060         	movff	floor@x,___ftge@ff1
  7158  0032BE  C0A4  F061         	movff	floor@x+1,___ftge@ff1+1
  7159  0032C2  C0A5  F062         	movff	floor@x+2,___ftge@ff1+2
  7160  0032C6  C0A6  F063         	movff	floor@i,___ftge@ff2
  7161  0032CA  C0A7  F064         	movff	floor@i+1,___ftge@ff2+1
  7162  0032CE  C0A8  F065         	movff	floor@i+2,___ftge@ff2+2
  7163  0032D2  EC4C  F01B         	call	___ftge	;wreg free
  7164  0032D6  0100               	movlb	0	; () banked
  7165  0032D8  B0D8               	btfsc	status,0,c
  7166  0032DA  D015               	goto	l926
  7167                           
  7168                           ; BSR set to: 0
  7169  0032DC  C0A6  F08D         	movff	floor@i,___ftadd@f1
  7170  0032E0  C0A7  F08E         	movff	floor@i+1,___ftadd@f1+1
  7171  0032E4  C0A8  F08F         	movff	floor@i+2,___ftadd@f1+2
  7172  0032E8  0E00               	movlw	0
  7173  0032EA  6F90               	movwf	___ftadd@f2& (0+255),b
  7174  0032EC  0E80               	movlw	128
  7175  0032EE  6F91               	movwf	(___ftadd@f2+1)& (0+255),b
  7176  0032F0  0EBF               	movlw	191
  7177  0032F2  6F92               	movwf	(___ftadd@f2+2)& (0+255),b
  7178  0032F4  EC9B  F011         	call	___ftadd	;wreg free
  7179  0032F8  C08D  F0A3         	movff	?___ftadd,?_floor
  7180  0032FC  C08E  F0A4         	movff	?___ftadd+1,?_floor+1
  7181  003300  C08F  F0A5         	movff	?___ftadd+2,?_floor+2
  7182  003304  0012               	return	
  7183  003306                     l926:
  7184                           
  7185                           ; BSR set to: 0
  7186  003306  C0A6  F0A3         	movff	floor@i,?_floor
  7187  00330A  C0A7  F0A4         	movff	floor@i+1,?_floor+1
  7188  00330E  C0A8  F0A5         	movff	floor@i+2,?_floor+2
  7189  003312  0012               	return		;funcret
  7190  003314                     __end_of_floor:
  7191                           	opt stack 0
  7192                           tblptru	equ	0xFF8
  7193                           tblptrh	equ	0xFF7
  7194                           tblptrl	equ	0xFF6
  7195                           tablat	equ	0xFF5
  7196                           prodh	equ	0xFF4
  7197                           prodl	equ	0xFF3
  7198                           postinc0	equ	0xFEE
  7199                           wreg	equ	0xFE8
  7200                           indf2	equ	0xFDF
  7201                           postinc2	equ	0xFDE
  7202                           postdec2	equ	0xFDD
  7203                           fsr2h	equ	0xFDA
  7204                           fsr2l	equ	0xFD9
  7205                           status	equ	0xFD8
  7206                           
  7207 ;; *************** function _frexp *****************
  7208 ;; Defined at:
  7209 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
  7210 ;; Parameters:    Size  Location     Type
  7211 ;;  value           3    0[BANK0 ] int 
  7212 ;;  eptr            2    3[BANK0 ] PTR int 
  7213 ;;		 -> floor@expon(2), 
  7214 ;; Auto vars:     Size  Location     Type
  7215 ;;		None
  7216 ;; Return value:  Size  Location     Type
  7217 ;;                  3    0[BANK0 ] PTR int 
  7218 ;; Registers used:
  7219 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7220 ;; Tracked objects:
  7221 ;;		On entry : 0/0
  7222 ;;		On exit  : 0/0
  7223 ;;		Unchanged: 0/0
  7224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7225 ;;      Params:         0       5       0       0       0       0       0       0       0
  7226 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7227 ;;      Temps:          0       2       0       0       0       0       0       0       0
  7228 ;;      Totals:         0       7       0       0       0       0       0       0       0
  7229 ;;Total ram usage:        7 bytes
  7230 ;; Hardware stack levels used:    1
  7231 ;; Hardware stack levels required when called:    3
  7232 ;; This function calls:
  7233 ;;		Nothing
  7234 ;; This function is called by:
  7235 ;;		_floor
  7236 ;; This function uses a non-reentrant model
  7237 ;;
  7238                           
  7239                           	psect	text16
  7240  003834                     __ptext16:
  7241                           	opt stack 0
  7242  003834                     _frexp:
  7243                           	opt stack 24
  7244                           
  7245                           ;incstack = 0
  7246  003834  0100               	movlb	0	; () banked
  7247  003836  5160               	movf	frexp@value& (0+255),w,b
  7248  003838  1161               	iorwf	(frexp@value+1)& (0+255),w,b
  7249  00383A  1162               	iorwf	(frexp@value+2)& (0+255),w,b
  7250  00383C  A4D8               	btfss	status,2,c
  7251  00383E  D009               	goto	l931
  7252                           
  7253                           ; BSR set to: 0
  7254  003840  C063  FFD9         	movff	frexp@eptr,fsr2l
  7255  003844  C064  FFDA         	movff	frexp@eptr+1,fsr2h
  7256  003848  0E00               	movlw	0
  7257  00384A  6EDE               	movwf	postinc2,c
  7258  00384C  0E00               	movlw	0
  7259  00384E  6EDD               	movwf	postdec2,c
  7260                           
  7261                           ; BSR set to: 0
  7262                           ;	Return value of _frexp is never used
  7263  003850  0012               	return	
  7264  003852                     l931:
  7265                           
  7266                           ; BSR set to: 0
  7267                           
  7268                           ; BSR set to: 0
  7269  003852  5162               	movf	(frexp@value+2)& (0+255),w,b
  7270  003854  0B7F               	andlw	127
  7271  003856  6F65               	movwf	??_frexp& (0+255),b
  7272  003858  6B66               	clrf	(??_frexp+1)& (0+255),b
  7273  00385A  90D8               	bcf	status,0,c
  7274  00385C  3765               	rlcf	??_frexp& (0+255),f,b
  7275  00385E  3766               	rlcf	(??_frexp+1)& (0+255),f,b
  7276  003860  C063  FFD9         	movff	frexp@eptr,fsr2l
  7277  003864  C064  FFDA         	movff	frexp@eptr+1,fsr2h
  7278  003868  C065  FFDE         	movff	??_frexp,postinc2
  7279  00386C  C066  FFDD         	movff	??_frexp+1,postdec2
  7280  003870  AF61               	btfss	(frexp@value+1)& (0+255),7,b
  7281  003872  D003               	goto	u2620
  7282  003874  6B65               	clrf	??_frexp& (0+255),b
  7283  003876  2B65               	incf	??_frexp& (0+255),f,b
  7284  003878  D002               	goto	u2628
  7285  00387A                     u2620:
  7286  00387A  0100               	movlb	0	; () banked
  7287  00387C  6B65               	clrf	??_frexp& (0+255),b
  7288  00387E                     u2628:
  7289  00387E  5165               	movf	??_frexp& (0+255),w,b
  7290  003880  C063  FFD9         	movff	frexp@eptr,fsr2l
  7291  003884  C064  FFDA         	movff	frexp@eptr+1,fsr2h
  7292  003888  12DE               	iorwf	postinc2,f,c
  7293  00388A  0E00               	movlw	0
  7294  00388C  12DD               	iorwf	postdec2,f,c
  7295                           
  7296                           ; BSR set to: 0
  7297  00388E  C063  FFD9         	movff	frexp@eptr,fsr2l
  7298  003892  C064  FFDA         	movff	frexp@eptr+1,fsr2h
  7299  003896  0E82               	movlw	130
  7300  003898  26DE               	addwf	postinc2,f,c
  7301  00389A  0EFF               	movlw	255
  7302  00389C  22DD               	addwfc	postdec2,f,c
  7303                           
  7304                           ; BSR set to: 0
  7305  00389E  8162               	bsf	(frexp@value+2)& (0+255),0,b
  7306  0038A0  8362               	bsf	(frexp@value+2)& (0+255),1,b
  7307  0038A2  8562               	bsf	(frexp@value+2)& (0+255),2,b
  7308  0038A4  8762               	bsf	(frexp@value+2)& (0+255),3,b
  7309  0038A6  8962               	bsf	(frexp@value+2)& (0+255),4,b
  7310  0038A8  8B62               	bsf	(frexp@value+2)& (0+255),5,b
  7311  0038AA  9D62               	bcf	(frexp@value+2)& (0+255),6,b
  7312                           
  7313                           ; BSR set to: 0
  7314  0038AC  9F61               	bcf	(frexp@value+1)& (0+255),7,b
  7315  0038AE  0012               	return	
  7316  0038B0                     __end_of_frexp:
  7317                           	opt stack 0
  7318                           tblptru	equ	0xFF8
  7319                           tblptrh	equ	0xFF7
  7320                           tblptrl	equ	0xFF6
  7321                           tablat	equ	0xFF5
  7322                           prodh	equ	0xFF4
  7323                           prodl	equ	0xFF3
  7324                           postinc0	equ	0xFEE
  7325                           wreg	equ	0xFE8
  7326                           indf2	equ	0xFDF
  7327                           postinc2	equ	0xFDE
  7328                           postdec2	equ	0xFDD
  7329                           fsr2h	equ	0xFDA
  7330                           fsr2l	equ	0xFD9
  7331                           status	equ	0xFD8
  7332                           
  7333 ;; *************** function ___fttol *****************
  7334 ;; Defined at:
  7335 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  7336 ;; Parameters:    Size  Location     Type
  7337 ;;  f1              3   42[BANK0 ] float 
  7338 ;; Auto vars:     Size  Location     Type
  7339 ;;  lval            4   52[BANK0 ] unsigned long 
  7340 ;;  exp1            1   56[BANK0 ] unsigned char 
  7341 ;;  sign1           1   51[BANK0 ] unsigned char 
  7342 ;; Return value:  Size  Location     Type
  7343 ;;                  4   42[BANK0 ] long 
  7344 ;; Registers used:
  7345 ;;		wreg, status,2, status,0
  7346 ;; Tracked objects:
  7347 ;;		On entry : 0/0
  7348 ;;		On exit  : 0/0
  7349 ;;		Unchanged: 0/0
  7350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7351 ;;      Params:         0       4       0       0       0       0       0       0       0
  7352 ;;      Locals:         0       6       0       0       0       0       0       0       0
  7353 ;;      Temps:          0       5       0       0       0       0       0       0       0
  7354 ;;      Totals:         0      15       0       0       0       0       0       0       0
  7355 ;;Total ram usage:       15 bytes
  7356 ;; Hardware stack levels used:    1
  7357 ;; Hardware stack levels required when called:    3
  7358 ;; This function calls:
  7359 ;;		Nothing
  7360 ;; This function is called by:
  7361 ;;		_sprintf
  7362 ;;		_floor
  7363 ;; This function uses a non-reentrant model
  7364 ;;
  7365                           
  7366                           	psect	text17
  7367  002D80                     __ptext17:
  7368                           	opt stack 0
  7369  002D80                     ___fttol:
  7370                           	opt stack 26
  7371                           
  7372                           ; BSR set to: 0
  7373                           ;incstack = 0
  7374  002D80  C08C  F08E         	movff	___fttol@f1+2,??___fttol
  7375  002D84  0100               	movlb	0	; () banked
  7376  002D86  6B8F               	clrf	(??___fttol+1)& (0+255),b
  7377  002D88  6B90               	clrf	(??___fttol+2)& (0+255),b
  7378  002D8A  358B               	rlcf	(___fttol@f1+1)& (0+255),w,b
  7379  002D8C  378E               	rlcf	??___fttol& (0+255),f,b
  7380  002D8E  E301               	bnc	u2531
  7381  002D90  818F               	bsf	(??___fttol+1)& (0+255),0,b
  7382  002D92                     u2531:
  7383  002D92  518E               	movf	??___fttol& (0+255),w,b
  7384  002D94  6F98               	movwf	___fttol@exp1& (0+255),b
  7385  002D96  5198               	movf	___fttol@exp1& (0+255),w,b
  7386  002D98  A4D8               	btfss	status,2,c
  7387  002D9A  D009               	goto	l627
  7388                           
  7389                           ; BSR set to: 0
  7390  002D9C  0E00               	movlw	0
  7391  002D9E  6F8A               	movwf	?___fttol& (0+255),b
  7392  002DA0  0E00               	movlw	0
  7393  002DA2  6F8B               	movwf	(?___fttol+1)& (0+255),b
  7394  002DA4  0E00               	movlw	0
  7395  002DA6  6F8C               	movwf	(?___fttol+2)& (0+255),b
  7396  002DA8  0E00               	movlw	0
  7397  002DAA  6F8D               	movwf	(?___fttol+3)& (0+255),b
  7398                           
  7399                           ; BSR set to: 0
  7400  002DAC  0012               	return	
  7401  002DAE                     l627:
  7402                           
  7403                           ; BSR set to: 0
  7404                           
  7405                           ; BSR set to: 0
  7406  002DAE  0E17               	movlw	23
  7407  002DB0  6F8E               	movwf	??___fttol& (0+255),b
  7408  002DB2  C08A  F08F         	movff	___fttol@f1,??___fttol+1
  7409  002DB6  C08B  F090         	movff	___fttol@f1+1,??___fttol+2
  7410  002DBA  C08C  F091         	movff	___fttol@f1+2,??___fttol+3
  7411  002DBE  298E               	incf	??___fttol& (0+255),w,b
  7412  002DC0  6F92               	movwf	(??___fttol+4)& (0+255),b
  7413  002DC2  D004               	goto	u2550
  7414  002DC4                     u2555:
  7415  002DC4  90D8               	bcf	status,0,c
  7416  002DC6  3391               	rrcf	(??___fttol+3)& (0+255),f,b
  7417  002DC8  3390               	rrcf	(??___fttol+2)& (0+255),f,b
  7418  002DCA  338F               	rrcf	(??___fttol+1)& (0+255),f,b
  7419  002DCC                     u2550:
  7420  002DCC  2F92               	decfsz	(??___fttol+4)& (0+255),f,b
  7421  002DCE  D7FA               	goto	u2555
  7422  002DD0  0100               	movlb	0	; () banked
  7423  002DD2  518F               	movf	(??___fttol+1)& (0+255),w,b
  7424  002DD4  6F93               	movwf	___fttol@sign1& (0+255),b
  7425                           
  7426                           ; BSR set to: 0
  7427  002DD6  8F8B               	bsf	(___fttol@f1+1)& (0+255),7,b
  7428                           
  7429                           ; BSR set to: 0
  7430  002DD8  0EFF               	movlw	255
  7431  002DDA  178A               	andwf	___fttol@f1& (0+255),f,b
  7432  002DDC  0EFF               	movlw	255
  7433  002DDE  178B               	andwf	(___fttol@f1+1)& (0+255),f,b
  7434  002DE0  0E00               	movlw	0
  7435  002DE2  178C               	andwf	(___fttol@f1+2)& (0+255),f,b
  7436                           
  7437                           ; BSR set to: 0
  7438  002DE4  518A               	movf	___fttol@f1& (0+255),w,b
  7439  002DE6  6F94               	movwf	___fttol@lval& (0+255),b
  7440  002DE8  518B               	movf	(___fttol@f1+1)& (0+255),w,b
  7441  002DEA  6F95               	movwf	(___fttol@lval+1)& (0+255),b
  7442  002DEC  518C               	movf	(___fttol@f1+2)& (0+255),w,b
  7443  002DEE  6F96               	movwf	(___fttol@lval+2)& (0+255),b
  7444  002DF0  6B97               	clrf	(___fttol@lval+3)& (0+255),b
  7445                           
  7446                           ; BSR set to: 0
  7447  002DF2  0E8E               	movlw	142
  7448  002DF4  5F98               	subwf	___fttol@exp1& (0+255),f,b
  7449                           
  7450                           ; BSR set to: 0
  7451  002DF6  AF98               	btfss	___fttol@exp1& (0+255),7,b
  7452  002DF8  D016               	goto	l629
  7453                           
  7454                           ; BSR set to: 0
  7455  002DFA  5198               	movf	___fttol@exp1& (0+255),w,b
  7456  002DFC  0A80               	xorlw	128
  7457  002DFE  0F8F               	addlw	143
  7458  002E00  B0D8               	btfsc	status,0,c
  7459  002E02  D009               	goto	l630
  7460                           
  7461                           ; BSR set to: 0
  7462  002E04  0E00               	movlw	0
  7463  002E06  6F8A               	movwf	?___fttol& (0+255),b
  7464  002E08  0E00               	movlw	0
  7465  002E0A  6F8B               	movwf	(?___fttol+1)& (0+255),b
  7466  002E0C  0E00               	movlw	0
  7467  002E0E  6F8C               	movwf	(?___fttol+2)& (0+255),b
  7468  002E10  0E00               	movlw	0
  7469  002E12  6F8D               	movwf	(?___fttol+3)& (0+255),b
  7470                           
  7471                           ; BSR set to: 0
  7472  002E14  0012               	return	
  7473  002E16                     l630:
  7474                           
  7475                           ; BSR set to: 0
  7476                           
  7477                           ; BSR set to: 0
  7478                           
  7479                           ; BSR set to: 0
  7480  002E16  90D8               	bcf	status,0,c
  7481  002E18  3397               	rrcf	(___fttol@lval+3)& (0+255),f,b
  7482  002E1A  3396               	rrcf	(___fttol@lval+2)& (0+255),f,b
  7483  002E1C  3395               	rrcf	(___fttol@lval+1)& (0+255),f,b
  7484  002E1E  3394               	rrcf	___fttol@lval& (0+255),f,b
  7485                           
  7486                           ; BSR set to: 0
  7487  002E20  3F98               	incfsz	___fttol@exp1& (0+255),f,b
  7488  002E22  D7F9               	goto	l630
  7489                           
  7490                           ; BSR set to: 0
  7491  002E24  D015               	goto	u2590
  7492  002E26                     l629:
  7493                           
  7494                           ; BSR set to: 0
  7495                           
  7496                           ; BSR set to: 0
  7497  002E26  0E17               	movlw	23
  7498  002E28  6598               	cpfsgt	___fttol@exp1& (0+255),b
  7499  002E2A  D00F               	goto	l635
  7500                           
  7501                           ; BSR set to: 0
  7502  002E2C  0E00               	movlw	0
  7503  002E2E  6F8A               	movwf	?___fttol& (0+255),b
  7504  002E30  0E00               	movlw	0
  7505  002E32  6F8B               	movwf	(?___fttol+1)& (0+255),b
  7506  002E34  0E00               	movlw	0
  7507  002E36  6F8C               	movwf	(?___fttol+2)& (0+255),b
  7508  002E38  0E00               	movlw	0
  7509  002E3A  6F8D               	movwf	(?___fttol+3)& (0+255),b
  7510                           
  7511                           ; BSR set to: 0
  7512  002E3C  0012               	return	
  7513  002E3E                     
  7514                           ; BSR set to: 0
  7515                           
  7516                           ; BSR set to: 0
  7517  002E3E  90D8               	bcf	status,0,c
  7518  002E40  3794               	rlcf	___fttol@lval& (0+255),f,b
  7519  002E42  3795               	rlcf	(___fttol@lval+1)& (0+255),f,b
  7520  002E44  3796               	rlcf	(___fttol@lval+2)& (0+255),f,b
  7521  002E46  3797               	rlcf	(___fttol@lval+3)& (0+255),f,b
  7522  002E48  0798               	decf	___fttol@exp1& (0+255),f,b
  7523  002E4A                     l635:
  7524                           
  7525                           ; BSR set to: 0
  7526                           
  7527                           ; BSR set to: 0
  7528  002E4A  5198               	movf	___fttol@exp1& (0+255),w,b
  7529  002E4C  A4D8               	btfss	status,2,c
  7530  002E4E  D7F7               	goto	l636
  7531  002E50                     u2590:
  7532                           
  7533                           ; BSR set to: 0
  7534                           
  7535                           ; BSR set to: 0
  7536                           
  7537                           ; BSR set to: 0
  7538  002E50  5193               	movf	___fttol@sign1& (0+255),w,b
  7539  002E52  B4D8               	btfsc	status,2,c
  7540  002E54  D008               	goto	l638
  7541                           
  7542                           ; BSR set to: 0
  7543  002E56  1F97               	comf	(___fttol@lval+3)& (0+255),f,b
  7544  002E58  1F96               	comf	(___fttol@lval+2)& (0+255),f,b
  7545  002E5A  1F95               	comf	(___fttol@lval+1)& (0+255),f,b
  7546  002E5C  6D94               	negf	___fttol@lval& (0+255),b
  7547  002E5E  0E00               	movlw	0
  7548  002E60  2395               	addwfc	(___fttol@lval+1)& (0+255),f,b
  7549  002E62  2396               	addwfc	(___fttol@lval+2)& (0+255),f,b
  7550  002E64  2397               	addwfc	(___fttol@lval+3)& (0+255),f,b
  7551  002E66                     l638:
  7552                           
  7553                           ; BSR set to: 0
  7554                           
  7555                           ; BSR set to: 0
  7556  002E66  C094  F08A         	movff	___fttol@lval,?___fttol
  7557  002E6A  C095  F08B         	movff	___fttol@lval+1,?___fttol+1
  7558  002E6E  C096  F08C         	movff	___fttol@lval+2,?___fttol+2
  7559  002E72  C097  F08D         	movff	___fttol@lval+3,?___fttol+3
  7560  002E76  0012               	return	
  7561  002E78                     __end_of___fttol:
  7562                           	opt stack 0
  7563                           tblptru	equ	0xFF8
  7564                           tblptrh	equ	0xFF7
  7565                           tblptrl	equ	0xFF6
  7566                           tablat	equ	0xFF5
  7567                           prodh	equ	0xFF4
  7568                           prodl	equ	0xFF3
  7569                           postinc0	equ	0xFEE
  7570                           wreg	equ	0xFE8
  7571                           indf2	equ	0xFDF
  7572                           postinc2	equ	0xFDE
  7573                           postdec2	equ	0xFDD
  7574                           fsr2h	equ	0xFDA
  7575                           fsr2l	equ	0xFD9
  7576                           status	equ	0xFD8
  7577                           
  7578 ;; *************** function ___ftge *****************
  7579 ;; Defined at:
  7580 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  7581 ;; Parameters:    Size  Location     Type
  7582 ;;  ff1             3    0[BANK0 ] float 
  7583 ;;  ff2             3    3[BANK0 ] float 
  7584 ;; Auto vars:     Size  Location     Type
  7585 ;;		None
  7586 ;; Return value:  Size  Location     Type
  7587 ;;		None               void
  7588 ;; Registers used:
  7589 ;;		wreg, status,2, status,0
  7590 ;; Tracked objects:
  7591 ;;		On entry : 0/0
  7592 ;;		On exit  : 0/0
  7593 ;;		Unchanged: 0/0
  7594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7595 ;;      Params:         0       6       0       0       0       0       0       0       0
  7596 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7597 ;;      Temps:          0       3       0       0       0       0       0       0       0
  7598 ;;      Totals:         0       9       0       0       0       0       0       0       0
  7599 ;;Total ram usage:        9 bytes
  7600 ;; Hardware stack levels used:    1
  7601 ;; Hardware stack levels required when called:    3
  7602 ;; This function calls:
  7603 ;;		Nothing
  7604 ;; This function is called by:
  7605 ;;		_sprintf
  7606 ;;		_cos
  7607 ;;		_sin
  7608 ;;		_sqrt
  7609 ;;		_floor
  7610 ;; This function uses a non-reentrant model
  7611 ;;
  7612                           
  7613                           	psect	text18
  7614  003698                     __ptext18:
  7615                           	opt stack 0
  7616  003698                     ___ftge:
  7617                           	opt stack 26
  7618                           
  7619                           ; BSR set to: 0
  7620                           ;incstack = 0
  7621  003698  0100               	movlb	0	; () banked
  7622  00369A  AF62               	btfss	(___ftge@ff1+2)& (0+255),7,b
  7623  00369C  D016               	goto	l599
  7624                           
  7625                           ; BSR set to: 0
  7626  00369E  C060  F066         	movff	___ftge@ff1,??___ftge
  7627  0036A2  C061  F067         	movff	___ftge@ff1+1,??___ftge+1
  7628  0036A6  C062  F068         	movff	___ftge@ff1+2,??___ftge+2
  7629  0036AA  1F66               	comf	??___ftge& (0+255),f,b
  7630  0036AC  1F67               	comf	(??___ftge+1)& (0+255),f,b
  7631  0036AE  1F68               	comf	(??___ftge+2)& (0+255),f,b
  7632  0036B0  2B66               	incf	??___ftge& (0+255),f,b
  7633  0036B2  0E00               	movlw	0
  7634  0036B4  2367               	addwfc	(??___ftge+1)& (0+255),f,b
  7635  0036B6  2368               	addwfc	(??___ftge+2)& (0+255),f,b
  7636  0036B8  0E00               	movlw	0
  7637  0036BA  2566               	addwf	??___ftge& (0+255),w,b
  7638  0036BC  6F60               	movwf	___ftge@ff1& (0+255),b
  7639  0036BE  0E00               	movlw	0
  7640  0036C0  2167               	addwfc	(??___ftge+1)& (0+255),w,b
  7641  0036C2  6F61               	movwf	(___ftge@ff1+1)& (0+255),b
  7642  0036C4  0E80               	movlw	128
  7643  0036C6  2168               	addwfc	(??___ftge+2)& (0+255),w,b
  7644  0036C8  6F62               	movwf	(___ftge@ff1+2)& (0+255),b
  7645  0036CA                     l599:
  7646                           
  7647                           ; BSR set to: 0
  7648                           
  7649                           ; BSR set to: 0
  7650  0036CA  AF65               	btfss	(___ftge@ff2+2)& (0+255),7,b
  7651  0036CC  D016               	goto	l600
  7652                           
  7653                           ; BSR set to: 0
  7654  0036CE  C063  F066         	movff	___ftge@ff2,??___ftge
  7655  0036D2  C064  F067         	movff	___ftge@ff2+1,??___ftge+1
  7656  0036D6  C065  F068         	movff	___ftge@ff2+2,??___ftge+2
  7657  0036DA  1F66               	comf	??___ftge& (0+255),f,b
  7658  0036DC  1F67               	comf	(??___ftge+1)& (0+255),f,b
  7659  0036DE  1F68               	comf	(??___ftge+2)& (0+255),f,b
  7660  0036E0  2B66               	incf	??___ftge& (0+255),f,b
  7661  0036E2  0E00               	movlw	0
  7662  0036E4  2367               	addwfc	(??___ftge+1)& (0+255),f,b
  7663  0036E6  2368               	addwfc	(??___ftge+2)& (0+255),f,b
  7664  0036E8  0E00               	movlw	0
  7665  0036EA  2566               	addwf	??___ftge& (0+255),w,b
  7666  0036EC  6F63               	movwf	___ftge@ff2& (0+255),b
  7667  0036EE  0E00               	movlw	0
  7668  0036F0  2167               	addwfc	(??___ftge+1)& (0+255),w,b
  7669  0036F2  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  7670  0036F4  0E80               	movlw	128
  7671  0036F6  2168               	addwfc	(??___ftge+2)& (0+255),w,b
  7672  0036F8  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  7673  0036FA                     l600:
  7674                           
  7675                           ; BSR set to: 0
  7676                           
  7677                           ; BSR set to: 0
  7678  0036FA  0E00               	movlw	0
  7679  0036FC  1B60               	xorwf	___ftge@ff1& (0+255),f,b
  7680  0036FE  0E00               	movlw	0
  7681  003700  1B61               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  7682  003702  0E80               	movlw	128
  7683  003704  1B62               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  7684                           
  7685                           ; BSR set to: 0
  7686  003706  0E00               	movlw	0
  7687  003708  1B63               	xorwf	___ftge@ff2& (0+255),f,b
  7688  00370A  0E00               	movlw	0
  7689  00370C  1B64               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  7690  00370E  0E80               	movlw	128
  7691  003710  1B65               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  7692  003712  5163               	movf	___ftge@ff2& (0+255),w,b
  7693  003714  5D60               	subwf	___ftge@ff1& (0+255),w,b
  7694  003716  5164               	movf	(___ftge@ff2+1)& (0+255),w,b
  7695  003718  5961               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  7696  00371A  5165               	movf	(___ftge@ff2+2)& (0+255),w,b
  7697  00371C  5962               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  7698  00371E  B0D8               	btfsc	status,0,c
  7699  003720  D002               	goto	l2556
  7700                           
  7701                           ; BSR set to: 0
  7702  003722  90D8               	bcf	status,0,c
  7703  003724  0012               	return	
  7704  003726                     l2556:
  7705                           
  7706                           ; BSR set to: 0
  7707                           
  7708                           ; BSR set to: 0
  7709  003726  80D8               	bsf	status,0,c
  7710                           
  7711                           ; BSR set to: 0
  7712  003728  0012               	return	
  7713  00372A                     __end_of___ftge:
  7714                           	opt stack 0
  7715                           tblptru	equ	0xFF8
  7716                           tblptrh	equ	0xFF7
  7717                           tblptrl	equ	0xFF6
  7718                           tablat	equ	0xFF5
  7719                           prodh	equ	0xFF4
  7720                           prodl	equ	0xFF3
  7721                           postinc0	equ	0xFEE
  7722                           wreg	equ	0xFE8
  7723                           indf2	equ	0xFDF
  7724                           postinc2	equ	0xFDE
  7725                           postdec2	equ	0xFDD
  7726                           fsr2h	equ	0xFDA
  7727                           fsr2l	equ	0xFD9
  7728                           status	equ	0xFD8
  7729                           
  7730 ;; *************** function ___altoft *****************
  7731 ;; Defined at:
  7732 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
  7733 ;; Parameters:    Size  Location     Type
  7734 ;;  c               4   57[BANK0 ] long 
  7735 ;; Auto vars:     Size  Location     Type
  7736 ;;  sign            1   66[BANK0 ] unsigned char 
  7737 ;;  exp             1   65[BANK0 ] unsigned char 
  7738 ;; Return value:  Size  Location     Type
  7739 ;;                  3   57[BANK0 ] float 
  7740 ;; Registers used:
  7741 ;;		wreg, status,2, status,0, cstack
  7742 ;; Tracked objects:
  7743 ;;		On entry : 0/0
  7744 ;;		On exit  : 0/0
  7745 ;;		Unchanged: 0/0
  7746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7747 ;;      Params:         0       4       0       0       0       0       0       0       0
  7748 ;;      Locals:         0       2       0       0       0       0       0       0       0
  7749 ;;      Temps:          0       4       0       0       0       0       0       0       0
  7750 ;;      Totals:         0      10       0       0       0       0       0       0       0
  7751 ;;Total ram usage:       10 bytes
  7752 ;; Hardware stack levels used:    1
  7753 ;; Hardware stack levels required when called:    4
  7754 ;; This function calls:
  7755 ;;		___ftpack
  7756 ;; This function is called by:
  7757 ;;		_floor
  7758 ;; This function uses a non-reentrant model
  7759 ;;
  7760                           
  7761                           	psect	text19
  7762  0038B0                     __ptext19:
  7763                           	opt stack 0
  7764  0038B0                     ___altoft:
  7765                           	opt stack 23
  7766                           
  7767                           ; BSR set to: 0
  7768                           ;incstack = 0
  7769  0038B0  0E00               	movlw	0
  7770  0038B2  0100               	movlb	0	; () banked
  7771  0038B4  6FA2               	movwf	___altoft@sign& (0+255),b
  7772  0038B6  0E8E               	movlw	142
  7773  0038B8  6FA1               	movwf	___altoft@exp& (0+255),b
  7774                           
  7775                           ; BSR set to: 0
  7776  0038BA  AF9C               	btfss	(___altoft@c+3)& (0+255),7,b
  7777  0038BC  D011               	goto	l357
  7778                           
  7779                           ; BSR set to: 0
  7780  0038BE  1F9C               	comf	(___altoft@c+3)& (0+255),f,b
  7781  0038C0  1F9B               	comf	(___altoft@c+2)& (0+255),f,b
  7782  0038C2  1F9A               	comf	(___altoft@c+1)& (0+255),f,b
  7783  0038C4  6D99               	negf	___altoft@c& (0+255),b
  7784  0038C6  0E00               	movlw	0
  7785  0038C8  239A               	addwfc	(___altoft@c+1)& (0+255),f,b
  7786  0038CA  239B               	addwfc	(___altoft@c+2)& (0+255),f,b
  7787  0038CC  239C               	addwfc	(___altoft@c+3)& (0+255),f,b
  7788                           
  7789                           ; BSR set to: 0
  7790  0038CE  0E01               	movlw	1
  7791  0038D0  6FA2               	movwf	___altoft@sign& (0+255),b
  7792                           
  7793                           ; BSR set to: 0
  7794  0038D2  D006               	goto	l357
  7795  0038D4                     
  7796                           ; BSR set to: 0
  7797                           
  7798                           ; BSR set to: 0
  7799  0038D4  90D8               	bcf	status,0,c
  7800  0038D6  339C               	rrcf	(___altoft@c+3)& (0+255),f,b
  7801  0038D8  339B               	rrcf	(___altoft@c+2)& (0+255),f,b
  7802  0038DA  339A               	rrcf	(___altoft@c+1)& (0+255),f,b
  7803  0038DC  3399               	rrcf	___altoft@c& (0+255),f,b
  7804  0038DE  2BA1               	incf	___altoft@exp& (0+255),f,b
  7805  0038E0                     l357:
  7806                           
  7807                           ; BSR set to: 0
  7808                           
  7809                           ; BSR set to: 0
  7810  0038E0  0E00               	movlw	0
  7811  0038E2  1599               	andwf	___altoft@c& (0+255),w,b
  7812  0038E4  6F9D               	movwf	??___altoft& (0+255),b
  7813  0038E6  0E00               	movlw	0
  7814  0038E8  159A               	andwf	(___altoft@c+1)& (0+255),w,b
  7815  0038EA  6F9E               	movwf	(??___altoft+1)& (0+255),b
  7816  0038EC  0E00               	movlw	0
  7817  0038EE  159B               	andwf	(___altoft@c+2)& (0+255),w,b
  7818  0038F0  6F9F               	movwf	(??___altoft+2)& (0+255),b
  7819  0038F2  0EFF               	movlw	255
  7820  0038F4  159C               	andwf	(___altoft@c+3)& (0+255),w,b
  7821  0038F6  6FA0               	movwf	(??___altoft+3)& (0+255),b
  7822  0038F8  519D               	movf	??___altoft& (0+255),w,b
  7823  0038FA  119E               	iorwf	(??___altoft+1)& (0+255),w,b
  7824  0038FC  119F               	iorwf	(??___altoft+2)& (0+255),w,b
  7825  0038FE  11A0               	iorwf	(??___altoft+3)& (0+255),w,b
  7826  003900  A4D8               	btfss	status,2,c
  7827  003902  D7E8               	goto	l358
  7828                           
  7829                           ; BSR set to: 0
  7830                           
  7831                           ; BSR set to: 0
  7832  003904  C099  F060         	movff	___altoft@c,___ftpack@arg
  7833  003908  C09A  F061         	movff	___altoft@c+1,___ftpack@arg+1
  7834  00390C  C09B  F062         	movff	___altoft@c+2,___ftpack@arg+2
  7835  003910  C0A1  F063         	movff	___altoft@exp,___ftpack@exp
  7836  003914  C0A2  F064         	movff	___altoft@sign,___ftpack@sign
  7837  003918  EC51  F01A         	call	___ftpack	;wreg free
  7838  00391C  C060  F099         	movff	?___ftpack,?___altoft
  7839  003920  C061  F09A         	movff	?___ftpack+1,?___altoft+1
  7840  003924  C062  F09B         	movff	?___ftpack+2,?___altoft+2
  7841  003928  0012               	return	
  7842  00392A                     __end_of___altoft:
  7843                           	opt stack 0
  7844                           tblptru	equ	0xFF8
  7845                           tblptrh	equ	0xFF7
  7846                           tblptrl	equ	0xFF6
  7847                           tablat	equ	0xFF5
  7848                           prodh	equ	0xFF4
  7849                           prodl	equ	0xFF3
  7850                           postinc0	equ	0xFEE
  7851                           wreg	equ	0xFE8
  7852                           indf2	equ	0xFDF
  7853                           postinc2	equ	0xFDE
  7854                           postdec2	equ	0xFDD
  7855                           fsr2h	equ	0xFDA
  7856                           fsr2l	equ	0xFD9
  7857                           status	equ	0xFD8
  7858                           
  7859 ;; *************** function _eval_poly *****************
  7860 ;; Defined at:
  7861 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
  7862 ;; Parameters:    Size  Location     Type
  7863 ;;  x               3   57[BANK0 ] float 
  7864 ;;  d               2   60[BANK0 ] PTR const 
  7865 ;;		 -> sin@coeff_a(15), sin@coeff_b(12), 
  7866 ;;  n               2   62[BANK0 ] int 
  7867 ;; Auto vars:     Size  Location     Type
  7868 ;;  res             3   66[BANK0 ] int 
  7869 ;; Return value:  Size  Location     Type
  7870 ;;                  3   57[BANK0 ] int 
  7871 ;; Registers used:
  7872 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7873 ;; Tracked objects:
  7874 ;;		On entry : 0/0
  7875 ;;		On exit  : 0/0
  7876 ;;		Unchanged: 0/0
  7877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7878 ;;      Params:         0       7       0       0       0       0       0       0       0
  7879 ;;      Locals:         0       3       0       0       0       0       0       0       0
  7880 ;;      Temps:          0       2       0       0       0       0       0       0       0
  7881 ;;      Totals:         0      12       0       0       0       0       0       0       0
  7882 ;;Total ram usage:       12 bytes
  7883 ;; Hardware stack levels used:    1
  7884 ;; Hardware stack levels required when called:    5
  7885 ;; This function calls:
  7886 ;;		___ftadd
  7887 ;;		___ftmul
  7888 ;;		___wmul
  7889 ;; This function is called by:
  7890 ;;		_sin
  7891 ;; This function uses a non-reentrant model
  7892 ;;
  7893                           
  7894                           	psect	text20
  7895  003314                     __ptext20:
  7896                           	opt stack 0
  7897  003314                     _eval_poly:
  7898                           	opt stack 23
  7899                           
  7900                           ;incstack = 0
  7901  003314  C09E  F06E         	movff	eval_poly@n,___wmul@multiplier
  7902  003318  C09F  F06F         	movff	eval_poly@n+1,___wmul@multiplier+1
  7903  00331C  0E00               	movlw	0
  7904  00331E  0100               	movlb	0	; () banked
  7905  003320  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7906  003322  0E03               	movlw	3
  7907  003324  6F70               	movwf	___wmul@multiplicand& (0+255),b
  7908  003326  EC93  F01D         	call	___wmul	;wreg free
  7909  00332A  C09C  F0A0         	movff	eval_poly@d,??_eval_poly
  7910  00332E  C09D  F0A1         	movff	eval_poly@d+1,??_eval_poly+1
  7911  003332  0100               	movlb	0	; () banked
  7912  003334  516E               	movf	?___wmul& (0+255),w,b
  7913  003336  27A0               	addwf	??_eval_poly& (0+255),f,b
  7914  003338  516F               	movf	(?___wmul+1)& (0+255),w,b
  7915  00333A  23A1               	addwfc	(??_eval_poly+1)& (0+255),f,b
  7916  00333C  C0A0  FFF6         	movff	??_eval_poly,tblptrl
  7917  003340  C0A1  FFF7         	movff	??_eval_poly+1,tblptrh
  7918  003344                     	if	0	;tblptru may be non-zero
  7919  003344                     	endif
  7920  003344                     	if	0	;tblptru may be non-zero
  7921  003344                     	endif
  7922  003344  0009               	tblrd		*+
  7923  003346  CFF5 F0A2          	movff	tablat,eval_poly@res
  7924  00334A  0009               	tblrd		*+
  7925  00334C  CFF5 F0A3          	movff	tablat,eval_poly@res+1
  7926  003350  000A               	tblrd		*-
  7927  003352  CFF5 F0A4          	movff	tablat,eval_poly@res+2
  7928  003356  D040               	goto	l914
  7929  003358                     
  7930                           ; BSR set to: 0
  7931                           
  7932                           ; BSR set to: 0
  7933  003358  C0A2  F077         	movff	eval_poly@res,___ftmul@f2
  7934  00335C  C0A3  F078         	movff	eval_poly@res+1,___ftmul@f2+1
  7935  003360  C0A4  F079         	movff	eval_poly@res+2,___ftmul@f2+2
  7936  003364  C099  F074         	movff	eval_poly@x,___ftmul@f1
  7937  003368  C09A  F075         	movff	eval_poly@x+1,___ftmul@f1+1
  7938  00336C  C09B  F076         	movff	eval_poly@x+2,___ftmul@f1+2
  7939  003370  EC3C  F017         	call	___ftmul	;wreg free
  7940  003374  C074  F08D         	movff	?___ftmul,___ftadd@f1
  7941  003378  C075  F08E         	movff	?___ftmul+1,___ftadd@f1+1
  7942  00337C  C076  F08F         	movff	?___ftmul+2,___ftadd@f1+2
  7943  003380  0E00               	movlw	0
  7944  003382  0100               	movlb	0	; () banked
  7945  003384  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7946  003386  0E03               	movlw	3
  7947  003388  6F70               	movwf	___wmul@multiplicand& (0+255),b
  7948  00338A  079E               	decf	eval_poly@n& (0+255),f,b
  7949  00338C  A0D8               	btfss	status,0,c
  7950  00338E  079F               	decf	(eval_poly@n+1)& (0+255),f,b
  7951  003390  C09E  F06E         	movff	eval_poly@n,___wmul@multiplier
  7952  003394  C09F  F06F         	movff	eval_poly@n+1,___wmul@multiplier+1
  7953  003398  EC93  F01D         	call	___wmul	;wreg free
  7954  00339C  C09C  F0A0         	movff	eval_poly@d,??_eval_poly
  7955  0033A0  C09D  F0A1         	movff	eval_poly@d+1,??_eval_poly+1
  7956  0033A4  0100               	movlb	0	; () banked
  7957  0033A6  516E               	movf	?___wmul& (0+255),w,b
  7958  0033A8  27A0               	addwf	??_eval_poly& (0+255),f,b
  7959  0033AA  516F               	movf	(?___wmul+1)& (0+255),w,b
  7960  0033AC  23A1               	addwfc	(??_eval_poly+1)& (0+255),f,b
  7961  0033AE  C0A0  FFF6         	movff	??_eval_poly,tblptrl
  7962  0033B2  C0A1  FFF7         	movff	??_eval_poly+1,tblptrh
  7963  0033B6                     	if	0	;tblptru may be non-zero
  7964  0033B6                     	endif
  7965  0033B6                     	if	0	;tblptru may be non-zero
  7966  0033B6                     	endif
  7967  0033B6  0009               	tblrd		*+
  7968  0033B8  CFF5 F090          	movff	tablat,___ftadd@f2
  7969  0033BC  0009               	tblrd		*+
  7970  0033BE  CFF5 F091          	movff	tablat,___ftadd@f2+1
  7971  0033C2  000A               	tblrd		*-
  7972  0033C4  CFF5 F092          	movff	tablat,___ftadd@f2+2
  7973  0033C8  EC9B  F011         	call	___ftadd	;wreg free
  7974  0033CC  C08D  F0A2         	movff	?___ftadd,eval_poly@res
  7975  0033D0  C08E  F0A3         	movff	?___ftadd+1,eval_poly@res+1
  7976  0033D4  C08F  F0A4         	movff	?___ftadd+2,eval_poly@res+2
  7977  0033D8                     l914:
  7978  0033D8  0100               	movlb	0	; () banked
  7979  0033DA  519E               	movf	eval_poly@n& (0+255),w,b
  7980  0033DC  119F               	iorwf	(eval_poly@n+1)& (0+255),w,b
  7981  0033DE  A4D8               	btfss	status,2,c
  7982  0033E0  D7BB               	goto	l915
  7983                           
  7984                           ; BSR set to: 0
  7985  0033E2  C0A2  F099         	movff	eval_poly@res,?_eval_poly
  7986  0033E6  C0A3  F09A         	movff	eval_poly@res+1,?_eval_poly+1
  7987  0033EA  C0A4  F09B         	movff	eval_poly@res+2,?_eval_poly+2
  7988                           
  7989                           ; BSR set to: 0
  7990  0033EE  0012               	return		;funcret
  7991  0033F0                     __end_of_eval_poly:
  7992                           	opt stack 0
  7993                           tblptru	equ	0xFF8
  7994                           tblptrh	equ	0xFF7
  7995                           tblptrl	equ	0xFF6
  7996                           tablat	equ	0xFF5
  7997                           prodh	equ	0xFF4
  7998                           prodl	equ	0xFF3
  7999                           postinc0	equ	0xFEE
  8000                           wreg	equ	0xFE8
  8001                           indf2	equ	0xFDF
  8002                           postinc2	equ	0xFDE
  8003                           postdec2	equ	0xFDD
  8004                           fsr2h	equ	0xFDA
  8005                           fsr2l	equ	0xFD9
  8006                           status	equ	0xFD8
  8007                           
  8008 ;; *************** function ___wmul *****************
  8009 ;; Defined at:
  8010 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  8011 ;; Parameters:    Size  Location     Type
  8012 ;;  multiplier      2   14[BANK0 ] unsigned int 
  8013 ;;  multiplicand    2   16[BANK0 ] unsigned int 
  8014 ;; Auto vars:     Size  Location     Type
  8015 ;;  product         2   18[BANK0 ] unsigned int 
  8016 ;; Return value:  Size  Location     Type
  8017 ;;                  2   14[BANK0 ] unsigned int 
  8018 ;; Registers used:
  8019 ;;		wreg, status,2, status,0, prodl, prodh
  8020 ;; Tracked objects:
  8021 ;;		On entry : 0/0
  8022 ;;		On exit  : 0/0
  8023 ;;		Unchanged: 0/0
  8024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8025 ;;      Params:         0       4       0       0       0       0       0       0       0
  8026 ;;      Locals:         0       2       0       0       0       0       0       0       0
  8027 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8028 ;;      Totals:         0       6       0       0       0       0       0       0       0
  8029 ;;Total ram usage:        6 bytes
  8030 ;; Hardware stack levels used:    1
  8031 ;; Hardware stack levels required when called:    3
  8032 ;; This function calls:
  8033 ;;		Nothing
  8034 ;; This function is called by:
  8035 ;;		_main
  8036 ;;		_fround
  8037 ;;		_scale
  8038 ;;		_sprintf
  8039 ;;		_eval_poly
  8040 ;; This function uses a non-reentrant model
  8041 ;;
  8042                           
  8043                           	psect	text21
  8044  003B26                     __ptext21:
  8045                           	opt stack 0
  8046  003B26                     ___wmul:
  8047                           	opt stack 25
  8048                           
  8049                           ; BSR set to: 0
  8050                           ;incstack = 0
  8051  003B26  0100               	movlb	0	; () banked
  8052  003B28  516E               	movf	___wmul@multiplier& (0+255),w,b
  8053  003B2A  0370               	mulwf	___wmul@multiplicand& (0+255),b
  8054  003B2C  CFF3 F072          	movff	prodl,___wmul@product
  8055  003B30  CFF4 F073          	movff	prodh,___wmul@product+1
  8056  003B34  516E               	movf	___wmul@multiplier& (0+255),w,b
  8057  003B36  0371               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  8058  003B38  50F3               	movf	prodl,w,c
  8059  003B3A  2773               	addwf	(___wmul@product+1)& (0+255),f,b
  8060  003B3C  516F               	movf	(___wmul@multiplier+1)& (0+255),w,b
  8061  003B3E  0370               	mulwf	___wmul@multiplicand& (0+255),b
  8062  003B40  50F3               	movf	prodl,w,c
  8063  003B42  2773               	addwf	(___wmul@product+1)& (0+255),f,b
  8064                           
  8065                           ; BSR set to: 0
  8066  003B44  C072  F06E         	movff	___wmul@product,?___wmul
  8067  003B48  C073  F06F         	movff	___wmul@product+1,?___wmul+1
  8068  003B4C  0012               	return	
  8069  003B4E                     __end_of___wmul:
  8070                           	opt stack 0
  8071                           tblptru	equ	0xFF8
  8072                           tblptrh	equ	0xFF7
  8073                           tblptrl	equ	0xFF6
  8074                           tablat	equ	0xFF5
  8075                           prodh	equ	0xFF4
  8076                           prodl	equ	0xFF3
  8077                           postinc0	equ	0xFEE
  8078                           wreg	equ	0xFE8
  8079                           indf2	equ	0xFDF
  8080                           postinc2	equ	0xFDE
  8081                           postdec2	equ	0xFDD
  8082                           fsr2h	equ	0xFDA
  8083                           fsr2l	equ	0xFD9
  8084                           status	equ	0xFD8
  8085                           
  8086 ;; *************** function ___ftmul *****************
  8087 ;; Defined at:
  8088 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  8089 ;; Parameters:    Size  Location     Type
  8090 ;;  f1              3   20[BANK0 ] float 
  8091 ;;  f2              3   23[BANK0 ] float 
  8092 ;; Auto vars:     Size  Location     Type
  8093 ;;  f3_as_produc    3   30[BANK0 ] unsigned um
  8094 ;;  sign            1   34[BANK0 ] unsigned char 
  8095 ;;  cntr            1   33[BANK0 ] unsigned char 
  8096 ;;  exp             1   29[BANK0 ] unsigned char 
  8097 ;; Return value:  Size  Location     Type
  8098 ;;                  3   20[BANK0 ] float 
  8099 ;; Registers used:
  8100 ;;		wreg, status,2, status,0, cstack
  8101 ;; Tracked objects:
  8102 ;;		On entry : 0/0
  8103 ;;		On exit  : 0/0
  8104 ;;		Unchanged: 0/0
  8105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8106 ;;      Params:         0       6       0       0       0       0       0       0       0
  8107 ;;      Locals:         0       6       0       0       0       0       0       0       0
  8108 ;;      Temps:          0       3       0       0       0       0       0       0       0
  8109 ;;      Totals:         0      15       0       0       0       0       0       0       0
  8110 ;;Total ram usage:       15 bytes
  8111 ;; Hardware stack levels used:    1
  8112 ;; Hardware stack levels required when called:    4
  8113 ;; This function calls:
  8114 ;;		___ftpack
  8115 ;; This function is called by:
  8116 ;;		_main
  8117 ;;		_fround
  8118 ;;		_scale
  8119 ;;		_sprintf
  8120 ;;		_sin
  8121 ;;		_sqrt
  8122 ;;		_eval_poly
  8123 ;; This function uses a non-reentrant model
  8124 ;;
  8125                           
  8126                           	psect	text22
  8127  002E78                     __ptext22:
  8128                           	opt stack 0
  8129  002E78                     ___ftmul:
  8130                           	opt stack 25
  8131                           
  8132                           ; BSR set to: 0
  8133                           ;incstack = 0
  8134  002E78  C076  F07A         	movff	___ftmul@f1+2,??___ftmul
  8135  002E7C  0100               	movlb	0	; () banked
  8136  002E7E  6B7B               	clrf	(??___ftmul+1)& (0+255),b
  8137  002E80  6B7C               	clrf	(??___ftmul+2)& (0+255),b
  8138  002E82  3575               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  8139  002E84  377A               	rlcf	??___ftmul& (0+255),f,b
  8140  002E86  E301               	bnc	u2441
  8141  002E88  817B               	bsf	(??___ftmul+1)& (0+255),0,b
  8142  002E8A                     u2441:
  8143  002E8A  517A               	movf	??___ftmul& (0+255),w,b
  8144  002E8C  6F7D               	movwf	___ftmul@exp& (0+255),b
  8145  002E8E  517D               	movf	___ftmul@exp& (0+255),w,b
  8146  002E90  A4D8               	btfss	status,2,c
  8147  002E92  D007               	goto	l606
  8148                           
  8149                           ; BSR set to: 0
  8150  002E94  0E00               	movlw	0
  8151  002E96  6F74               	movwf	?___ftmul& (0+255),b
  8152  002E98  0E00               	movlw	0
  8153  002E9A  6F75               	movwf	(?___ftmul+1)& (0+255),b
  8154  002E9C  0E00               	movlw	0
  8155  002E9E  6F76               	movwf	(?___ftmul+2)& (0+255),b
  8156                           
  8157                           ; BSR set to: 0
  8158  002EA0  0012               	return	
  8159  002EA2                     l606:
  8160                           
  8161                           ; BSR set to: 0
  8162                           
  8163                           ; BSR set to: 0
  8164  002EA2  C079  F07A         	movff	___ftmul@f2+2,??___ftmul
  8165  002EA6  6B7B               	clrf	(??___ftmul+1)& (0+255),b
  8166  002EA8  6B7C               	clrf	(??___ftmul+2)& (0+255),b
  8167  002EAA  3578               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  8168  002EAC  377A               	rlcf	??___ftmul& (0+255),f,b
  8169  002EAE  E301               	bnc	u2461
  8170  002EB0  817B               	bsf	(??___ftmul+1)& (0+255),0,b
  8171  002EB2                     u2461:
  8172  002EB2  517A               	movf	??___ftmul& (0+255),w,b
  8173  002EB4  6F82               	movwf	___ftmul@sign& (0+255),b
  8174  002EB6  5182               	movf	___ftmul@sign& (0+255),w,b
  8175  002EB8  A4D8               	btfss	status,2,c
  8176  002EBA  D007               	goto	l608
  8177                           
  8178                           ; BSR set to: 0
  8179  002EBC  0E00               	movlw	0
  8180  002EBE  6F74               	movwf	?___ftmul& (0+255),b
  8181  002EC0  0E00               	movlw	0
  8182  002EC2  6F75               	movwf	(?___ftmul+1)& (0+255),b
  8183  002EC4  0E00               	movlw	0
  8184  002EC6  6F76               	movwf	(?___ftmul+2)& (0+255),b
  8185                           
  8186                           ; BSR set to: 0
  8187  002EC8  0012               	return	
  8188  002ECA                     l608:
  8189                           
  8190                           ; BSR set to: 0
  8191                           
  8192                           ; BSR set to: 0
  8193  002ECA  5182               	movf	___ftmul@sign& (0+255),w,b
  8194  002ECC  0F7B               	addlw	123
  8195  002ECE  277D               	addwf	___ftmul@exp& (0+255),f,b
  8196                           
  8197                           ; BSR set to: 0
  8198  002ED0  C076  F082         	movff	___ftmul@f1+2,___ftmul@sign
  8199  002ED4  5179               	movf	(___ftmul@f2+2)& (0+255),w,b
  8200  002ED6  1B82               	xorwf	___ftmul@sign& (0+255),f,b
  8201  002ED8  0E80               	movlw	128
  8202  002EDA  1782               	andwf	___ftmul@sign& (0+255),f,b
  8203                           
  8204                           ; BSR set to: 0
  8205  002EDC  8F75               	bsf	(___ftmul@f1+1)& (0+255),7,b
  8206                           
  8207                           ; BSR set to: 0
  8208  002EDE  8F78               	bsf	(___ftmul@f2+1)& (0+255),7,b
  8209                           
  8210                           ; BSR set to: 0
  8211  002EE0  0EFF               	movlw	255
  8212  002EE2  1777               	andwf	___ftmul@f2& (0+255),f,b
  8213  002EE4  0EFF               	movlw	255
  8214  002EE6  1778               	andwf	(___ftmul@f2+1)& (0+255),f,b
  8215  002EE8  0E00               	movlw	0
  8216  002EEA  1779               	andwf	(___ftmul@f2+2)& (0+255),f,b
  8217                           
  8218                           ; BSR set to: 0
  8219  002EEC  0E00               	movlw	0
  8220  002EEE  6F7E               	movwf	___ftmul@f3_as_product& (0+255),b
  8221  002EF0  0E00               	movlw	0
  8222  002EF2  6F7F               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  8223  002EF4  0E00               	movlw	0
  8224  002EF6  6F80               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  8225                           
  8226                           ; BSR set to: 0
  8227  002EF8  0E07               	movlw	7
  8228  002EFA  6F81               	movwf	___ftmul@cntr& (0+255),b
  8229  002EFC                     
  8230                           ; BSR set to: 0
  8231                           
  8232                           ; BSR set to: 0
  8233  002EFC  A174               	btfss	___ftmul@f1& (0+255),0,b
  8234  002EFE  D006               	goto	l610
  8235                           
  8236                           ; BSR set to: 0
  8237  002F00  5177               	movf	___ftmul@f2& (0+255),w,b
  8238  002F02  277E               	addwf	___ftmul@f3_as_product& (0+255),f,b
  8239  002F04  5178               	movf	(___ftmul@f2+1)& (0+255),w,b
  8240  002F06  237F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  8241  002F08  5179               	movf	(___ftmul@f2+2)& (0+255),w,b
  8242  002F0A  2380               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  8243  002F0C                     l610:
  8244                           
  8245                           ; BSR set to: 0
  8246                           
  8247                           ; BSR set to: 0
  8248  002F0C  90D8               	bcf	status,0,c
  8249  002F0E  3376               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  8250  002F10  3375               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  8251  002F12  3374               	rrcf	___ftmul@f1& (0+255),f,b
  8252  002F14  90D8               	bcf	status,0,c
  8253  002F16  3777               	rlcf	___ftmul@f2& (0+255),f,b
  8254  002F18  3778               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  8255  002F1A  3779               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  8256                           
  8257                           ; BSR set to: 0
  8258  002F1C  2F81               	decfsz	___ftmul@cntr& (0+255),f,b
  8259  002F1E  D7EE               	goto	l609
  8260                           
  8261                           ; BSR set to: 0
  8262                           
  8263                           ; BSR set to: 0
  8264  002F20  0E09               	movlw	9
  8265  002F22  6F81               	movwf	___ftmul@cntr& (0+255),b
  8266  002F24                     
  8267                           ; BSR set to: 0
  8268                           
  8269                           ; BSR set to: 0
  8270  002F24  A174               	btfss	___ftmul@f1& (0+255),0,b
  8271  002F26  D006               	goto	l613
  8272                           
  8273                           ; BSR set to: 0
  8274  002F28  5177               	movf	___ftmul@f2& (0+255),w,b
  8275  002F2A  277E               	addwf	___ftmul@f3_as_product& (0+255),f,b
  8276  002F2C  5178               	movf	(___ftmul@f2+1)& (0+255),w,b
  8277  002F2E  237F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  8278  002F30  5179               	movf	(___ftmul@f2+2)& (0+255),w,b
  8279  002F32  2380               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  8280  002F34                     l613:
  8281                           
  8282                           ; BSR set to: 0
  8283                           
  8284                           ; BSR set to: 0
  8285  002F34  90D8               	bcf	status,0,c
  8286  002F36  3376               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  8287  002F38  3375               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  8288  002F3A  3374               	rrcf	___ftmul@f1& (0+255),f,b
  8289  002F3C  90D8               	bcf	status,0,c
  8290  002F3E  3380               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  8291  002F40  337F               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  8292  002F42  337E               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  8293                           
  8294                           ; BSR set to: 0
  8295  002F44  2F81               	decfsz	___ftmul@cntr& (0+255),f,b
  8296  002F46  D7EE               	goto	l612
  8297                           
  8298                           ; BSR set to: 0
  8299                           
  8300                           ; BSR set to: 0
  8301  002F48  C07E  F060         	movff	___ftmul@f3_as_product,___ftpack@arg
  8302  002F4C  C07F  F061         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  8303  002F50  C080  F062         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  8304  002F54  C07D  F063         	movff	___ftmul@exp,___ftpack@exp
  8305  002F58  C082  F064         	movff	___ftmul@sign,___ftpack@sign
  8306  002F5C  EC51  F01A         	call	___ftpack	;wreg free
  8307  002F60  C060  F074         	movff	?___ftpack,?___ftmul
  8308  002F64  C061  F075         	movff	?___ftpack+1,?___ftmul+1
  8309  002F68  C062  F076         	movff	?___ftpack+2,?___ftmul+2
  8310  002F6C  0012               	return	
  8311  002F6E                     __end_of___ftmul:
  8312                           	opt stack 0
  8313                           tblptru	equ	0xFF8
  8314                           tblptrh	equ	0xFF7
  8315                           tblptrl	equ	0xFF6
  8316                           tablat	equ	0xFF5
  8317                           prodh	equ	0xFF4
  8318                           prodl	equ	0xFF3
  8319                           postinc0	equ	0xFEE
  8320                           wreg	equ	0xFE8
  8321                           indf2	equ	0xFDF
  8322                           postinc2	equ	0xFDE
  8323                           postdec2	equ	0xFDD
  8324                           fsr2h	equ	0xFDA
  8325                           fsr2l	equ	0xFD9
  8326                           status	equ	0xFD8
  8327                           
  8328 ;; *************** function ___ftsub *****************
  8329 ;; Defined at:
  8330 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  8331 ;; Parameters:    Size  Location     Type
  8332 ;;  f1              3   75[BANK0 ] float 
  8333 ;;  f2              3   78[BANK0 ] float 
  8334 ;; Auto vars:     Size  Location     Type
  8335 ;;		None
  8336 ;; Return value:  Size  Location     Type
  8337 ;;                  3   75[BANK0 ] float 
  8338 ;; Registers used:
  8339 ;;		wreg, status,2, status,0, cstack
  8340 ;; Tracked objects:
  8341 ;;		On entry : 0/0
  8342 ;;		On exit  : 0/0
  8343 ;;		Unchanged: 0/0
  8344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8345 ;;      Params:         0       6       0       0       0       0       0       0       0
  8346 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8347 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8348 ;;      Totals:         0       6       0       0       0       0       0       0       0
  8349 ;;Total ram usage:        6 bytes
  8350 ;; Hardware stack levels used:    1
  8351 ;; Hardware stack levels required when called:    5
  8352 ;; This function calls:
  8353 ;;		___ftadd
  8354 ;; This function is called by:
  8355 ;;		_sprintf
  8356 ;;		_sin
  8357 ;;		_sqrt
  8358 ;; This function uses a non-reentrant model
  8359 ;;
  8360                           
  8361                           	psect	text23
  8362  003AA6                     __ptext23:
  8363                           	opt stack 0
  8364  003AA6                     ___ftsub:
  8365                           	opt stack 24
  8366                           
  8367                           ;incstack = 0
  8368  003AA6  0100               	movlb	0	; () banked
  8369  003AA8  51AE               	movf	___ftsub@f2& (0+255),w,b
  8370  003AAA  11AF               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  8371  003AAC  11B0               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  8372  003AAE  B4D8               	btfsc	status,2,c
  8373  003AB0  D006               	goto	l623
  8374                           
  8375                           ; BSR set to: 0
  8376  003AB2  0E00               	movlw	0
  8377  003AB4  1BAE               	xorwf	___ftsub@f2& (0+255),f,b
  8378  003AB6  0E00               	movlw	0
  8379  003AB8  1BAF               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  8380  003ABA  0E80               	movlw	128
  8381  003ABC  1BB0               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  8382  003ABE                     l623:
  8383                           
  8384                           ; BSR set to: 0
  8385                           
  8386                           ; BSR set to: 0
  8387  003ABE  C0AB  F08D         	movff	___ftsub@f1,___ftadd@f1
  8388  003AC2  C0AC  F08E         	movff	___ftsub@f1+1,___ftadd@f1+1
  8389  003AC6  C0AD  F08F         	movff	___ftsub@f1+2,___ftadd@f1+2
  8390  003ACA  C0AE  F090         	movff	___ftsub@f2,___ftadd@f2
  8391  003ACE  C0AF  F091         	movff	___ftsub@f2+1,___ftadd@f2+1
  8392  003AD2  C0B0  F092         	movff	___ftsub@f2+2,___ftadd@f2+2
  8393  003AD6  EC9B  F011         	call	___ftadd	;wreg free
  8394  003ADA  C08D  F0AB         	movff	?___ftadd,?___ftsub
  8395  003ADE  C08E  F0AC         	movff	?___ftadd+1,?___ftsub+1
  8396  003AE2  C08F  F0AD         	movff	?___ftadd+2,?___ftsub+2
  8397  003AE6  0012               	return	
  8398  003AE8                     __end_of___ftsub:
  8399                           	opt stack 0
  8400                           tblptru	equ	0xFF8
  8401                           tblptrh	equ	0xFF7
  8402                           tblptrl	equ	0xFF6
  8403                           tablat	equ	0xFF5
  8404                           prodh	equ	0xFF4
  8405                           prodl	equ	0xFF3
  8406                           postinc0	equ	0xFEE
  8407                           wreg	equ	0xFE8
  8408                           indf2	equ	0xFDF
  8409                           postinc2	equ	0xFDE
  8410                           postdec2	equ	0xFDD
  8411                           fsr2h	equ	0xFDA
  8412                           fsr2l	equ	0xFD9
  8413                           status	equ	0xFD8
  8414                           
  8415 ;; *************** function ___ftadd *****************
  8416 ;; Defined at:
  8417 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  8418 ;; Parameters:    Size  Location     Type
  8419 ;;  f1              3   45[BANK0 ] float 
  8420 ;;  f2              3   48[BANK0 ] float 
  8421 ;; Auto vars:     Size  Location     Type
  8422 ;;  exp1            1   56[BANK0 ] unsigned char 
  8423 ;;  exp2            1   55[BANK0 ] unsigned char 
  8424 ;;  sign            1   54[BANK0 ] unsigned char 
  8425 ;; Return value:  Size  Location     Type
  8426 ;;                  3   45[BANK0 ] float 
  8427 ;; Registers used:
  8428 ;;		wreg, status,2, status,0, cstack
  8429 ;; Tracked objects:
  8430 ;;		On entry : 0/0
  8431 ;;		On exit  : 0/0
  8432 ;;		Unchanged: 0/0
  8433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8434 ;;      Params:         0       6       0       0       0       0       0       0       0
  8435 ;;      Locals:         0       3       0       0       0       0       0       0       0
  8436 ;;      Temps:          0       3       0       0       0       0       0       0       0
  8437 ;;      Totals:         0      12       0       0       0       0       0       0       0
  8438 ;;Total ram usage:       12 bytes
  8439 ;; Hardware stack levels used:    1
  8440 ;; Hardware stack levels required when called:    4
  8441 ;; This function calls:
  8442 ;;		___ftpack
  8443 ;; This function is called by:
  8444 ;;		_main
  8445 ;;		_sprintf
  8446 ;;		_cos
  8447 ;;		___ftsub
  8448 ;;		_sin
  8449 ;;		_eval_poly
  8450 ;;		_floor
  8451 ;; This function uses a non-reentrant model
  8452 ;;
  8453                           
  8454                           	psect	text24
  8455  002336                     __ptext24:
  8456                           	opt stack 0
  8457  002336                     ___ftadd:
  8458                           	opt stack 24
  8459                           
  8460                           ;incstack = 0
  8461  002336  C08F  F093         	movff	___ftadd@f1+2,??___ftadd
  8462  00233A  0100               	movlb	0	; () banked
  8463  00233C  6B94               	clrf	(??___ftadd+1)& (0+255),b
  8464  00233E  6B95               	clrf	(??___ftadd+2)& (0+255),b
  8465  002340  358E               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  8466  002342  3793               	rlcf	??___ftadd& (0+255),f,b
  8467  002344  E301               	bnc	u2231
  8468  002346  8194               	bsf	(??___ftadd+1)& (0+255),0,b
  8469  002348                     u2231:
  8470  002348  5193               	movf	??___ftadd& (0+255),w,b
  8471  00234A  6F98               	movwf	___ftadd@exp1& (0+255),b
  8472  00234C  C092  F093         	movff	___ftadd@f2+2,??___ftadd
  8473  002350  6B94               	clrf	(??___ftadd+1)& (0+255),b
  8474  002352  6B95               	clrf	(??___ftadd+2)& (0+255),b
  8475  002354  3591               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  8476  002356  3793               	rlcf	??___ftadd& (0+255),f,b
  8477  002358  E301               	bnc	u2241
  8478  00235A  8194               	bsf	(??___ftadd+1)& (0+255),0,b
  8479  00235C                     u2241:
  8480  00235C  5193               	movf	??___ftadd& (0+255),w,b
  8481  00235E  6F97               	movwf	___ftadd@exp2& (0+255),b
  8482                           
  8483                           ; BSR set to: 0
  8484  002360  5198               	movf	___ftadd@exp1& (0+255),w,b
  8485  002362  B4D8               	btfsc	status,2,c
  8486  002364  D00B               	goto	u2270
  8487                           
  8488                           ; BSR set to: 0
  8489  002366  5197               	movf	___ftadd@exp2& (0+255),w,b
  8490  002368  5D98               	subwf	___ftadd@exp1& (0+255),w,b
  8491  00236A  B0D8               	btfsc	status,0,c
  8492  00236C  D00E               	goto	l541
  8493                           
  8494                           ; BSR set to: 0
  8495  00236E  5198               	movf	___ftadd@exp1& (0+255),w,b
  8496  002370  0800               	sublw	0
  8497  002372  2597               	addwf	___ftadd@exp2& (0+255),w,b
  8498  002374  6F93               	movwf	??___ftadd& (0+255),b
  8499  002376  0E18               	movlw	24
  8500  002378  6593               	cpfsgt	??___ftadd& (0+255),b
  8501  00237A  D007               	goto	l541
  8502  00237C                     u2270:
  8503                           
  8504                           ; BSR set to: 0
  8505  00237C  C090  F08D         	movff	___ftadd@f2,?___ftadd
  8506  002380  C091  F08E         	movff	___ftadd@f2+1,?___ftadd+1
  8507  002384  C092  F08F         	movff	___ftadd@f2+2,?___ftadd+2
  8508  002388  0012               	return	
  8509  00238A                     l541:
  8510                           
  8511                           ; BSR set to: 0
  8512                           
  8513                           ; BSR set to: 0
  8514  00238A  5197               	movf	___ftadd@exp2& (0+255),w,b
  8515  00238C  B4D8               	btfsc	status,2,c
  8516  00238E  D00B               	goto	u2300
  8517                           
  8518                           ; BSR set to: 0
  8519  002390  5198               	movf	___ftadd@exp1& (0+255),w,b
  8520  002392  5D97               	subwf	___ftadd@exp2& (0+255),w,b
  8521  002394  B0D8               	btfsc	status,0,c
  8522  002396  D00E               	goto	l545
  8523                           
  8524                           ; BSR set to: 0
  8525  002398  5197               	movf	___ftadd@exp2& (0+255),w,b
  8526  00239A  0800               	sublw	0
  8527  00239C  2598               	addwf	___ftadd@exp1& (0+255),w,b
  8528  00239E  6F93               	movwf	??___ftadd& (0+255),b
  8529  0023A0  0E18               	movlw	24
  8530  0023A2  6593               	cpfsgt	??___ftadd& (0+255),b
  8531  0023A4  D007               	goto	l545
  8532  0023A6                     u2300:
  8533                           
  8534                           ; BSR set to: 0
  8535  0023A6  C08D  F08D         	movff	___ftadd@f1,?___ftadd
  8536  0023AA  C08E  F08E         	movff	___ftadd@f1+1,?___ftadd+1
  8537  0023AE  C08F  F08F         	movff	___ftadd@f1+2,?___ftadd+2
  8538  0023B2  0012               	return	
  8539  0023B4                     l545:
  8540                           
  8541                           ; BSR set to: 0
  8542                           
  8543                           ; BSR set to: 0
  8544  0023B4  0E06               	movlw	6
  8545  0023B6  6F96               	movwf	___ftadd@sign& (0+255),b
  8546                           
  8547                           ; BSR set to: 0
  8548  0023B8  BF8F               	btfsc	(___ftadd@f1+2)& (0+255),7,b
  8549                           
  8550                           ; BSR set to: 0
  8551  0023BA  8F96               	bsf	___ftadd@sign& (0+255),7,b
  8552                           
  8553                           ; BSR set to: 0
  8554                           
  8555                           ; BSR set to: 0
  8556  0023BC  BF92               	btfsc	(___ftadd@f2+2)& (0+255),7,b
  8557                           
  8558                           ; BSR set to: 0
  8559  0023BE  8D96               	bsf	___ftadd@sign& (0+255),6,b
  8560                           
  8561                           ; BSR set to: 0
  8562  0023C0  8F8E               	bsf	(___ftadd@f1+1)& (0+255),7,b
  8563                           
  8564                           ; BSR set to: 0
  8565  0023C2  0EFF               	movlw	255
  8566  0023C4  178D               	andwf	___ftadd@f1& (0+255),f,b
  8567  0023C6  0EFF               	movlw	255
  8568  0023C8  178E               	andwf	(___ftadd@f1+1)& (0+255),f,b
  8569  0023CA  0E00               	movlw	0
  8570  0023CC  178F               	andwf	(___ftadd@f1+2)& (0+255),f,b
  8571  0023CE  8F91               	bsf	(___ftadd@f2+1)& (0+255),7,b
  8572                           
  8573                           ; BSR set to: 0
  8574  0023D0  0EFF               	movlw	255
  8575  0023D2  1790               	andwf	___ftadd@f2& (0+255),f,b
  8576  0023D4  0EFF               	movlw	255
  8577  0023D6  1791               	andwf	(___ftadd@f2+1)& (0+255),f,b
  8578  0023D8  0E00               	movlw	0
  8579  0023DA  1792               	andwf	(___ftadd@f2+2)& (0+255),f,b
  8580                           
  8581                           ; BSR set to: 0
  8582  0023DC  5197               	movf	___ftadd@exp2& (0+255),w,b
  8583  0023DE  5D98               	subwf	___ftadd@exp1& (0+255),w,b
  8584  0023E0  B0D8               	btfsc	status,0,c
  8585  0023E2  D01B               	goto	l550
  8586  0023E4                     u2330:
  8587                           
  8588                           ; BSR set to: 0
  8589                           
  8590                           ; BSR set to: 0
  8591  0023E4  90D8               	bcf	status,0,c
  8592  0023E6  3790               	rlcf	___ftadd@f2& (0+255),f,b
  8593  0023E8  3791               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  8594  0023EA  3792               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  8595  0023EC  0797               	decf	___ftadd@exp2& (0+255),f,b
  8596                           
  8597                           ; BSR set to: 0
  8598  0023EE  5198               	movf	___ftadd@exp1& (0+255),w,b
  8599  0023F0  1997               	xorwf	___ftadd@exp2& (0+255),w,b
  8600  0023F2  B4D8               	btfsc	status,2,c
  8601  0023F4  D00D               	goto	l555
  8602                           
  8603                           ; BSR set to: 0
  8604  0023F6  0796               	decf	___ftadd@sign& (0+255),f,b
  8605  0023F8  C096  F093         	movff	___ftadd@sign,??___ftadd
  8606  0023FC  0E07               	movlw	7
  8607  0023FE  1793               	andwf	??___ftadd& (0+255),f,b
  8608  002400  B4D8               	btfsc	status,2,c
  8609  002402  D006               	goto	l555
  8610  002404  D7EF               	goto	u2330
  8611  002406                     
  8612                           ; BSR set to: 0
  8613                           
  8614                           ; BSR set to: 0
  8615  002406  90D8               	bcf	status,0,c
  8616  002408  338F               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  8617  00240A  338E               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  8618  00240C  338D               	rrcf	___ftadd@f1& (0+255),f,b
  8619  00240E  2B98               	incf	___ftadd@exp1& (0+255),f,b
  8620  002410                     l555:
  8621                           
  8622                           ; BSR set to: 0
  8623                           
  8624                           ; BSR set to: 0
  8625  002410  5197               	movf	___ftadd@exp2& (0+255),w,b
  8626  002412  1998               	xorwf	___ftadd@exp1& (0+255),w,b
  8627  002414  B4D8               	btfsc	status,2,c
  8628  002416  D01F               	goto	u2400
  8629  002418  D7F6               	goto	l556
  8630  00241A                     l550:
  8631                           
  8632                           ; BSR set to: 0
  8633                           
  8634                           ; BSR set to: 0
  8635  00241A  5198               	movf	___ftadd@exp1& (0+255),w,b
  8636  00241C  5D97               	subwf	___ftadd@exp2& (0+255),w,b
  8637  00241E  B0D8               	btfsc	status,0,c
  8638  002420  D01A               	goto	u2400
  8639  002422                     u2370:
  8640                           
  8641                           ; BSR set to: 0
  8642                           
  8643                           ; BSR set to: 0
  8644  002422  90D8               	bcf	status,0,c
  8645  002424  378D               	rlcf	___ftadd@f1& (0+255),f,b
  8646  002426  378E               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  8647  002428  378F               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  8648  00242A  0798               	decf	___ftadd@exp1& (0+255),f,b
  8649                           
  8650                           ; BSR set to: 0
  8651  00242C  5198               	movf	___ftadd@exp1& (0+255),w,b
  8652  00242E  1997               	xorwf	___ftadd@exp2& (0+255),w,b
  8653  002430  B4D8               	btfsc	status,2,c
  8654  002432  D00D               	goto	l564
  8655                           
  8656                           ; BSR set to: 0
  8657  002434  0796               	decf	___ftadd@sign& (0+255),f,b
  8658  002436  C096  F093         	movff	___ftadd@sign,??___ftadd
  8659  00243A  0E07               	movlw	7
  8660  00243C  1793               	andwf	??___ftadd& (0+255),f,b
  8661  00243E  B4D8               	btfsc	status,2,c
  8662  002440  D006               	goto	l564
  8663  002442  D7EF               	goto	u2370
  8664  002444                     
  8665                           ; BSR set to: 0
  8666                           
  8667                           ; BSR set to: 0
  8668  002444  90D8               	bcf	status,0,c
  8669  002446  3392               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  8670  002448  3391               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  8671  00244A  3390               	rrcf	___ftadd@f2& (0+255),f,b
  8672  00244C  2B97               	incf	___ftadd@exp2& (0+255),f,b
  8673  00244E                     l564:
  8674                           
  8675                           ; BSR set to: 0
  8676                           
  8677                           ; BSR set to: 0
  8678  00244E  5197               	movf	___ftadd@exp2& (0+255),w,b
  8679  002450  1998               	xorwf	___ftadd@exp1& (0+255),w,b
  8680  002452  A4D8               	btfss	status,2,c
  8681  002454  D7F7               	goto	l565
  8682  002456                     u2400:
  8683                           
  8684                           ; BSR set to: 0
  8685                           
  8686                           ; BSR set to: 0
  8687                           
  8688                           ; BSR set to: 0
  8689  002456  AF96               	btfss	___ftadd@sign& (0+255),7,b
  8690  002458  D00C               	goto	l567
  8691                           
  8692                           ; BSR set to: 0
  8693  00245A  0EFF               	movlw	255
  8694  00245C  1B8D               	xorwf	___ftadd@f1& (0+255),f,b
  8695  00245E  0EFF               	movlw	255
  8696  002460  1B8E               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  8697  002462  0EFF               	movlw	255
  8698  002464  1B8F               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  8699  002466  0E01               	movlw	1
  8700  002468  278D               	addwf	___ftadd@f1& (0+255),f,b
  8701  00246A  0E00               	movlw	0
  8702  00246C  238E               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  8703  00246E  0E00               	movlw	0
  8704  002470  238F               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  8705  002472                     l567:
  8706                           
  8707                           ; BSR set to: 0
  8708  002472  AD96               	btfss	___ftadd@sign& (0+255),6,b
  8709  002474  D00C               	goto	l568
  8710                           
  8711                           ; BSR set to: 0
  8712  002476  0EFF               	movlw	255
  8713  002478  1B90               	xorwf	___ftadd@f2& (0+255),f,b
  8714  00247A  0EFF               	movlw	255
  8715  00247C  1B91               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  8716  00247E  0EFF               	movlw	255
  8717  002480  1B92               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  8718  002482  0E01               	movlw	1
  8719  002484  2790               	addwf	___ftadd@f2& (0+255),f,b
  8720  002486  0E00               	movlw	0
  8721  002488  2391               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8722  00248A  0E00               	movlw	0
  8723  00248C  2392               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8724  00248E                     l568:
  8725                           
  8726                           ; BSR set to: 0
  8727                           
  8728                           ; BSR set to: 0
  8729  00248E  0E00               	movlw	0
  8730  002490  6F96               	movwf	___ftadd@sign& (0+255),b
  8731                           
  8732                           ; BSR set to: 0
  8733  002492  518D               	movf	___ftadd@f1& (0+255),w,b
  8734  002494  2790               	addwf	___ftadd@f2& (0+255),f,b
  8735  002496  518E               	movf	(___ftadd@f1+1)& (0+255),w,b
  8736  002498  2391               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8737  00249A  518F               	movf	(___ftadd@f1+2)& (0+255),w,b
  8738  00249C  2392               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8739                           
  8740                           ; BSR set to: 0
  8741  00249E  AF92               	btfss	(___ftadd@f2+2)& (0+255),7,b
  8742  0024A0  D00E               	goto	l569
  8743                           
  8744                           ; BSR set to: 0
  8745  0024A2  0EFF               	movlw	255
  8746  0024A4  1B90               	xorwf	___ftadd@f2& (0+255),f,b
  8747  0024A6  0EFF               	movlw	255
  8748  0024A8  1B91               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  8749  0024AA  0EFF               	movlw	255
  8750  0024AC  1B92               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  8751  0024AE  0E01               	movlw	1
  8752  0024B0  2790               	addwf	___ftadd@f2& (0+255),f,b
  8753  0024B2  0E00               	movlw	0
  8754  0024B4  2391               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8755  0024B6  0E00               	movlw	0
  8756  0024B8  2392               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8757                           
  8758                           ; BSR set to: 0
  8759  0024BA  0E01               	movlw	1
  8760  0024BC  6F96               	movwf	___ftadd@sign& (0+255),b
  8761  0024BE                     l569:
  8762                           
  8763                           ; BSR set to: 0
  8764                           
  8765                           ; BSR set to: 0
  8766  0024BE  C090  F060         	movff	___ftadd@f2,___ftpack@arg
  8767  0024C2  C091  F061         	movff	___ftadd@f2+1,___ftpack@arg+1
  8768  0024C6  C092  F062         	movff	___ftadd@f2+2,___ftpack@arg+2
  8769  0024CA  C098  F063         	movff	___ftadd@exp1,___ftpack@exp
  8770  0024CE  C096  F064         	movff	___ftadd@sign,___ftpack@sign
  8771  0024D2  EC51  F01A         	call	___ftpack	;wreg free
  8772  0024D6  C060  F08D         	movff	?___ftpack,?___ftadd
  8773  0024DA  C061  F08E         	movff	?___ftpack+1,?___ftadd+1
  8774  0024DE  C062  F08F         	movff	?___ftpack+2,?___ftadd+2
  8775  0024E2  0012               	return	
  8776  0024E4                     __end_of___ftadd:
  8777                           	opt stack 0
  8778                           tblptru	equ	0xFF8
  8779                           tblptrh	equ	0xFF7
  8780                           tblptrl	equ	0xFF6
  8781                           tablat	equ	0xFF5
  8782                           prodh	equ	0xFF4
  8783                           prodl	equ	0xFF3
  8784                           postinc0	equ	0xFEE
  8785                           wreg	equ	0xFE8
  8786                           indf2	equ	0xFDF
  8787                           postinc2	equ	0xFDE
  8788                           postdec2	equ	0xFDD
  8789                           fsr2h	equ	0xFDA
  8790                           fsr2l	equ	0xFD9
  8791                           status	equ	0xFD8
  8792                           
  8793 ;; *************** function ___ftneg *****************
  8794 ;; Defined at:
  8795 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
  8796 ;; Parameters:    Size  Location     Type
  8797 ;;  f1              3   35[BANK0 ] float 
  8798 ;; Auto vars:     Size  Location     Type
  8799 ;;		None
  8800 ;; Return value:  Size  Location     Type
  8801 ;;                  3   35[BANK0 ] float 
  8802 ;; Registers used:
  8803 ;;		wreg, status,2, status,0
  8804 ;; Tracked objects:
  8805 ;;		On entry : 0/0
  8806 ;;		On exit  : 0/0
  8807 ;;		Unchanged: 0/0
  8808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8809 ;;      Params:         0       3       0       0       0       0       0       0       0
  8810 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8811 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8812 ;;      Totals:         0       3       0       0       0       0       0       0       0
  8813 ;;Total ram usage:        3 bytes
  8814 ;; Hardware stack levels used:    1
  8815 ;; Hardware stack levels required when called:    3
  8816 ;; This function calls:
  8817 ;;		Nothing
  8818 ;; This function is called by:
  8819 ;;		_main
  8820 ;;		_sprintf
  8821 ;;		_sin
  8822 ;; This function uses a non-reentrant model
  8823 ;;
  8824                           
  8825                           	psect	text25
  8826  003B4E                     __ptext25:
  8827                           	opt stack 0
  8828  003B4E                     ___ftneg:
  8829                           	opt stack 26
  8830                           
  8831                           ;incstack = 0
  8832  003B4E  0100               	movlb	0	; () banked
  8833  003B50  5183               	movf	___ftneg@f1& (0+255),w,b
  8834  003B52  1184               	iorwf	(___ftneg@f1+1)& (0+255),w,b
  8835  003B54  1185               	iorwf	(___ftneg@f1+2)& (0+255),w,b
  8836  003B56  B4D8               	btfsc	status,2,c
  8837  003B58  D006               	goto	l617
  8838                           
  8839                           ; BSR set to: 0
  8840  003B5A  0E00               	movlw	0
  8841  003B5C  1B83               	xorwf	___ftneg@f1& (0+255),f,b
  8842  003B5E  0E00               	movlw	0
  8843  003B60  1B84               	xorwf	(___ftneg@f1+1)& (0+255),f,b
  8844  003B62  0E80               	movlw	128
  8845  003B64  1B85               	xorwf	(___ftneg@f1+2)& (0+255),f,b
  8846  003B66                     l617:
  8847                           
  8848                           ; BSR set to: 0
  8849  003B66  C083  F083         	movff	___ftneg@f1,?___ftneg
  8850  003B6A  C084  F084         	movff	___ftneg@f1+1,?___ftneg+1
  8851  003B6E  C085  F085         	movff	___ftneg@f1+2,?___ftneg+2
  8852                           
  8853                           ; BSR set to: 0
  8854  003B72  0012               	return		;funcret
  8855  003B74                     __end_of___ftneg:
  8856                           	opt stack 0
  8857                           tblptru	equ	0xFF8
  8858                           tblptrh	equ	0xFF7
  8859                           tblptrl	equ	0xFF6
  8860                           tablat	equ	0xFF5
  8861                           prodh	equ	0xFF4
  8862                           prodl	equ	0xFF3
  8863                           postinc0	equ	0xFEE
  8864                           wreg	equ	0xFE8
  8865                           indf2	equ	0xFDF
  8866                           postinc2	equ	0xFDE
  8867                           postdec2	equ	0xFDD
  8868                           fsr2h	equ	0xFDA
  8869                           fsr2l	equ	0xFD9
  8870                           status	equ	0xFD8
  8871                           
  8872 ;; *************** function ___ftdiv *****************
  8873 ;; Defined at:
  8874 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  8875 ;; Parameters:    Size  Location     Type
  8876 ;;  f1              3   81[BANK0 ] float 
  8877 ;;  f2              3   84[BANK0 ] float 
  8878 ;; Auto vars:     Size  Location     Type
  8879 ;;  f3              3   91[BANK0 ] float 
  8880 ;;  sign            1   95[BANK0 ] unsigned char 
  8881 ;;  exp             1   94[BANK0 ] unsigned char 
  8882 ;;  cntr            1   90[BANK0 ] unsigned char 
  8883 ;; Return value:  Size  Location     Type
  8884 ;;                  3   81[BANK0 ] float 
  8885 ;; Registers used:
  8886 ;;		wreg, status,2, status,0, cstack
  8887 ;; Tracked objects:
  8888 ;;		On entry : 0/0
  8889 ;;		On exit  : 0/0
  8890 ;;		Unchanged: 0/0
  8891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8892 ;;      Params:         0       6       0       0       0       0       0       0       0
  8893 ;;      Locals:         0       6       0       0       0       0       0       0       0
  8894 ;;      Temps:          0       3       0       0       0       0       0       0       0
  8895 ;;      Totals:         0      15       0       0       0       0       0       0       0
  8896 ;;Total ram usage:       15 bytes
  8897 ;; Hardware stack levels used:    1
  8898 ;; Hardware stack levels required when called:    4
  8899 ;; This function calls:
  8900 ;;		___ftpack
  8901 ;; This function is called by:
  8902 ;;		_main
  8903 ;;		_sin
  8904 ;; This function uses a non-reentrant model
  8905 ;;
  8906                           
  8907                           	psect	text26
  8908  003062                     __ptext26:
  8909                           	opt stack 0
  8910  003062                     ___ftdiv:
  8911                           	opt stack 24
  8912                           
  8913                           ; BSR set to: 0
  8914                           ;incstack = 0
  8915  003062  C0B3  F0B7         	movff	___ftdiv@f1+2,??___ftdiv
  8916  003066  0100               	movlb	0	; () banked
  8917  003068  6BB8               	clrf	(??___ftdiv+1)& (0+255),b
  8918  00306A  6BB9               	clrf	(??___ftdiv+2)& (0+255),b
  8919  00306C  35B2               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
  8920  00306E  37B7               	rlcf	??___ftdiv& (0+255),f,b
  8921  003070  E301               	bnc	u2631
  8922  003072  81B8               	bsf	(??___ftdiv+1)& (0+255),0,b
  8923  003074                     u2631:
  8924  003074  51B7               	movf	??___ftdiv& (0+255),w,b
  8925  003076  6FBE               	movwf	___ftdiv@exp& (0+255),b
  8926  003078  51BE               	movf	___ftdiv@exp& (0+255),w,b
  8927  00307A  A4D8               	btfss	status,2,c
  8928  00307C  D007               	goto	l574
  8929                           
  8930                           ; BSR set to: 0
  8931  00307E  0E00               	movlw	0
  8932  003080  6FB1               	movwf	?___ftdiv& (0+255),b
  8933  003082  0E00               	movlw	0
  8934  003084  6FB2               	movwf	(?___ftdiv+1)& (0+255),b
  8935  003086  0E00               	movlw	0
  8936  003088  6FB3               	movwf	(?___ftdiv+2)& (0+255),b
  8937                           
  8938                           ; BSR set to: 0
  8939  00308A  0012               	return	
  8940  00308C                     l574:
  8941                           
  8942                           ; BSR set to: 0
  8943                           
  8944                           ; BSR set to: 0
  8945  00308C  C0B6  F0B7         	movff	___ftdiv@f2+2,??___ftdiv
  8946  003090  6BB8               	clrf	(??___ftdiv+1)& (0+255),b
  8947  003092  6BB9               	clrf	(??___ftdiv+2)& (0+255),b
  8948  003094  35B5               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
  8949  003096  37B7               	rlcf	??___ftdiv& (0+255),f,b
  8950  003098  E301               	bnc	u2651
  8951  00309A  81B8               	bsf	(??___ftdiv+1)& (0+255),0,b
  8952  00309C                     u2651:
  8953  00309C  51B7               	movf	??___ftdiv& (0+255),w,b
  8954  00309E  6FBF               	movwf	___ftdiv@sign& (0+255),b
  8955  0030A0  51BF               	movf	___ftdiv@sign& (0+255),w,b
  8956  0030A2  A4D8               	btfss	status,2,c
  8957  0030A4  D007               	goto	l576
  8958                           
  8959                           ; BSR set to: 0
  8960  0030A6  0E00               	movlw	0
  8961  0030A8  6FB1               	movwf	?___ftdiv& (0+255),b
  8962  0030AA  0E00               	movlw	0
  8963  0030AC  6FB2               	movwf	(?___ftdiv+1)& (0+255),b
  8964  0030AE  0E00               	movlw	0
  8965  0030B0  6FB3               	movwf	(?___ftdiv+2)& (0+255),b
  8966                           
  8967                           ; BSR set to: 0
  8968  0030B2  0012               	return	
  8969  0030B4                     l576:
  8970                           
  8971                           ; BSR set to: 0
  8972                           
  8973                           ; BSR set to: 0
  8974  0030B4  0E00               	movlw	0
  8975  0030B6  6FBB               	movwf	___ftdiv@f3& (0+255),b
  8976  0030B8  0E00               	movlw	0
  8977  0030BA  6FBC               	movwf	(___ftdiv@f3+1)& (0+255),b
  8978  0030BC  0E00               	movlw	0
  8979  0030BE  6FBD               	movwf	(___ftdiv@f3+2)& (0+255),b
  8980                           
  8981                           ; BSR set to: 0
  8982  0030C0  51BF               	movf	___ftdiv@sign& (0+255),w,b
  8983  0030C2  0F89               	addlw	137
  8984  0030C4  5FBE               	subwf	___ftdiv@exp& (0+255),f,b
  8985                           
  8986                           ; BSR set to: 0
  8987  0030C6  C0B3  F0BF         	movff	___ftdiv@f1+2,___ftdiv@sign
  8988                           
  8989                           ; BSR set to: 0
  8990  0030CA  51B6               	movf	(___ftdiv@f2+2)& (0+255),w,b
  8991  0030CC  1BBF               	xorwf	___ftdiv@sign& (0+255),f,b
  8992                           
  8993                           ; BSR set to: 0
  8994  0030CE  0E80               	movlw	128
  8995  0030D0  17BF               	andwf	___ftdiv@sign& (0+255),f,b
  8996                           
  8997                           ; BSR set to: 0
  8998  0030D2  8FB2               	bsf	(___ftdiv@f1+1)& (0+255),7,b
  8999                           
  9000                           ; BSR set to: 0
  9001  0030D4  0EFF               	movlw	255
  9002  0030D6  17B1               	andwf	___ftdiv@f1& (0+255),f,b
  9003  0030D8  0EFF               	movlw	255
  9004  0030DA  17B2               	andwf	(___ftdiv@f1+1)& (0+255),f,b
  9005  0030DC  0E00               	movlw	0
  9006  0030DE  17B3               	andwf	(___ftdiv@f1+2)& (0+255),f,b
  9007                           
  9008                           ; BSR set to: 0
  9009  0030E0  8FB5               	bsf	(___ftdiv@f2+1)& (0+255),7,b
  9010                           
  9011                           ; BSR set to: 0
  9012  0030E2  0EFF               	movlw	255
  9013  0030E4  17B4               	andwf	___ftdiv@f2& (0+255),f,b
  9014  0030E6  0EFF               	movlw	255
  9015  0030E8  17B5               	andwf	(___ftdiv@f2+1)& (0+255),f,b
  9016  0030EA  0E00               	movlw	0
  9017  0030EC  17B6               	andwf	(___ftdiv@f2+2)& (0+255),f,b
  9018                           
  9019                           ; BSR set to: 0
  9020  0030EE  0E18               	movlw	24
  9021  0030F0  6FBA               	movwf	___ftdiv@cntr& (0+255),b
  9022  0030F2                     
  9023                           ; BSR set to: 0
  9024                           
  9025                           ; BSR set to: 0
  9026  0030F2  90D8               	bcf	status,0,c
  9027  0030F4  37BB               	rlcf	___ftdiv@f3& (0+255),f,b
  9028  0030F6  37BC               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  9029  0030F8  37BD               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  9030                           
  9031                           ; BSR set to: 0
  9032  0030FA  51B4               	movf	___ftdiv@f2& (0+255),w,b
  9033  0030FC  5DB1               	subwf	___ftdiv@f1& (0+255),w,b
  9034  0030FE  51B5               	movf	(___ftdiv@f2+1)& (0+255),w,b
  9035  003100  59B2               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
  9036  003102  51B6               	movf	(___ftdiv@f2+2)& (0+255),w,b
  9037  003104  59B3               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
  9038  003106  A0D8               	btfss	status,0,c
  9039  003108  D007               	goto	l578
  9040                           
  9041                           ; BSR set to: 0
  9042  00310A  51B4               	movf	___ftdiv@f2& (0+255),w,b
  9043  00310C  5FB1               	subwf	___ftdiv@f1& (0+255),f,b
  9044  00310E  51B5               	movf	(___ftdiv@f2+1)& (0+255),w,b
  9045  003110  5BB2               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
  9046  003112  51B6               	movf	(___ftdiv@f2+2)& (0+255),w,b
  9047  003114  5BB3               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
  9048                           
  9049                           ; BSR set to: 0
  9050  003116  81BB               	bsf	___ftdiv@f3& (0+255),0,b
  9051  003118                     l578:
  9052                           
  9053                           ; BSR set to: 0
  9054  003118  90D8               	bcf	status,0,c
  9055  00311A  37B1               	rlcf	___ftdiv@f1& (0+255),f,b
  9056  00311C  37B2               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
  9057  00311E  37B3               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
  9058                           
  9059                           ; BSR set to: 0
  9060  003120  2FBA               	decfsz	___ftdiv@cntr& (0+255),f,b
  9061  003122  D7E7               	goto	l577
  9062                           
  9063                           ; BSR set to: 0
  9064                           
  9065                           ; BSR set to: 0
  9066  003124  C0BB  F060         	movff	___ftdiv@f3,___ftpack@arg
  9067  003128  C0BC  F061         	movff	___ftdiv@f3+1,___ftpack@arg+1
  9068  00312C  C0BD  F062         	movff	___ftdiv@f3+2,___ftpack@arg+2
  9069  003130  C0BE  F063         	movff	___ftdiv@exp,___ftpack@exp
  9070  003134  C0BF  F064         	movff	___ftdiv@sign,___ftpack@sign
  9071  003138  EC51  F01A         	call	___ftpack	;wreg free
  9072  00313C  C060  F0B1         	movff	?___ftpack,?___ftdiv
  9073  003140  C061  F0B2         	movff	?___ftpack+1,?___ftdiv+1
  9074  003144  C062  F0B3         	movff	?___ftpack+2,?___ftdiv+2
  9075  003148  0012               	return	
  9076  00314A                     __end_of___ftdiv:
  9077                           	opt stack 0
  9078                           tblptru	equ	0xFF8
  9079                           tblptrh	equ	0xFF7
  9080                           tblptrl	equ	0xFF6
  9081                           tablat	equ	0xFF5
  9082                           prodh	equ	0xFF4
  9083                           prodl	equ	0xFF3
  9084                           postinc0	equ	0xFEE
  9085                           wreg	equ	0xFE8
  9086                           indf2	equ	0xFDF
  9087                           postinc2	equ	0xFDE
  9088                           postdec2	equ	0xFDD
  9089                           fsr2h	equ	0xFDA
  9090                           fsr2l	equ	0xFD9
  9091                           status	equ	0xFD8
  9092                           
  9093 ;; *************** function _configstandard *****************
  9094 ;; Defined at:
  9095 ;;		line 10 in file "configstandard.c"
  9096 ;; Parameters:    Size  Location     Type
  9097 ;;		None
  9098 ;; Auto vars:     Size  Location     Type
  9099 ;;		None
  9100 ;; Return value:  Size  Location     Type
  9101 ;;                  1    wreg      void 
  9102 ;; Registers used:
  9103 ;;		wreg, status,2
  9104 ;; Tracked objects:
  9105 ;;		On entry : 0/0
  9106 ;;		On exit  : 0/0
  9107 ;;		Unchanged: 0/0
  9108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9109 ;;      Params:         0       0       0       0       0       0       0       0       0
  9110 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9111 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9112 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9113 ;;Total ram usage:        0 bytes
  9114 ;; Hardware stack levels used:    1
  9115 ;; Hardware stack levels required when called:    3
  9116 ;; This function calls:
  9117 ;;		Nothing
  9118 ;; This function is called by:
  9119 ;;		_main
  9120 ;; This function uses a non-reentrant model
  9121 ;;
  9122                           
  9123                           	psect	text27
  9124  003A62                     __ptext27:
  9125                           	opt stack 0
  9126  003A62                     _configstandard:
  9127                           	opt stack 27
  9128                           
  9129                           ;configstandard.c: 16: ADCON0bits.CHS3 = 0;
  9130                           
  9131                           ;incstack = 0
  9132  003A62  9AC2               	bcf	4034,5,c	;volatile
  9133                           
  9134                           ;configstandard.c: 17: ADCON0bits.CHS2 = 0;
  9135  003A64  98C2               	bcf	4034,4,c	;volatile
  9136                           
  9137                           ;configstandard.c: 18: ADCON0bits.CHS1 = 0;
  9138  003A66  96C2               	bcf	4034,3,c	;volatile
  9139                           
  9140                           ;configstandard.c: 19: ADCON0bits.CHS0 = 0;
  9141  003A68  94C2               	bcf	4034,2,c	;volatile
  9142                           
  9143                           ;configstandard.c: 20: ADCON0bits.ADON = 1;
  9144  003A6A  80C2               	bsf	4034,0,c	;volatile
  9145                           
  9146                           ;configstandard.c: 24: ADCON1 = 0b00001110;
  9147  003A6C  0E0E               	movlw	14
  9148  003A6E  6EC1               	movwf	4033,c	;volatile
  9149                           
  9150                           ;configstandard.c: 28: ADCON2bits.ADFM = 1;
  9151  003A70  8EC0               	bsf	4032,7,c	;volatile
  9152                           
  9153                           ;configstandard.c: 29: ADCON2bits.ACQT2 = 1;
  9154  003A72  8AC0               	bsf	4032,5,c	;volatile
  9155                           
  9156                           ;configstandard.c: 30: ADCON2bits.ACQT1 = 0;
  9157  003A74  98C0               	bcf	4032,4,c	;volatile
  9158                           
  9159                           ;configstandard.c: 31: ADCON2bits.ACQT0 = 1;
  9160  003A76  86C0               	bsf	4032,3,c	;volatile
  9161                           
  9162                           ;configstandard.c: 32: ADCON2bits.ADCS2 = 1;
  9163  003A78  84C0               	bsf	4032,2,c	;volatile
  9164                           
  9165                           ;configstandard.c: 33: ADCON2bits.ADCS1 = 0;
  9166  003A7A  92C0               	bcf	4032,1,c	;volatile
  9167                           
  9168                           ;configstandard.c: 34: ADCON2bits.ADCS0 = 0;
  9169  003A7C  90C0               	bcf	4032,0,c	;volatile
  9170                           
  9171                           ;configstandard.c: 36: ADRESH = 0;
  9172  003A7E  0E00               	movlw	0
  9173  003A80  6EC4               	movwf	4036,c	;volatile
  9174                           
  9175                           ;configstandard.c: 37: ADRESL = 0;
  9176  003A82  0E00               	movlw	0
  9177  003A84  6EC3               	movwf	4035,c	;volatile
  9178                           
  9179                           ;configstandard.c: 54: CCP1CONbits.CCP1M = 0b1011;
  9180  003A86  50BD               	movf	4029,w,c	;volatile
  9181  003A88  0BF0               	andlw	-16
  9182  003A8A  090B               	iorlw	11
  9183  003A8C  6EBD               	movwf	4029,c	;volatile
  9184                           
  9185                           ;configstandard.c: 55: CCPR1 = 2400;
  9186  003A8E  0E09               	movlw	9
  9187  003A90  6EBF               	movwf	4031,c	;volatile
  9188  003A92  0E60               	movlw	96
  9189  003A94  6EBE               	movwf	4030,c	;volatile
  9190                           
  9191                           ;configstandard.c: 59: ADCON2bits.ADCS=110;
  9192  003A96  50C0               	movf	4032,w,c	;volatile
  9193  003A98  0BF8               	andlw	-8
  9194  003A9A  0906               	iorlw	6
  9195  003A9C  6EC0               	movwf	4032,c	;volatile
  9196                           
  9197                           ;configstandard.c: 60: ADCON2bits.ACQT=010;
  9198  003A9E  96C0               	bcf	4032,3,c	;volatile
  9199  003AA0  98C0               	bcf	4032,4,c	;volatile
  9200  003AA2  9AC0               	bcf	4032,5,c	;volatile
  9201  003AA4  0012               	return		;funcret
  9202  003AA6                     __end_of_configstandard:
  9203                           	opt stack 0
  9204                           tblptru	equ	0xFF8
  9205                           tblptrh	equ	0xFF7
  9206                           tblptrl	equ	0xFF6
  9207                           tablat	equ	0xFF5
  9208                           prodh	equ	0xFF4
  9209                           prodl	equ	0xFF3
  9210                           postinc0	equ	0xFEE
  9211                           wreg	equ	0xFE8
  9212                           indf2	equ	0xFDF
  9213                           postinc2	equ	0xFDE
  9214                           postdec2	equ	0xFDD
  9215                           fsr2h	equ	0xFDA
  9216                           fsr2l	equ	0xFD9
  9217                           status	equ	0xFD8
  9218                           
  9219 ;; *************** function ___lwtoft *****************
  9220 ;; Defined at:
  9221 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
  9222 ;; Parameters:    Size  Location     Type
  9223 ;;  c               2    8[BANK0 ] unsigned int 
  9224 ;; Auto vars:     Size  Location     Type
  9225 ;;		None
  9226 ;; Return value:  Size  Location     Type
  9227 ;;                  3    8[BANK0 ] float 
  9228 ;; Registers used:
  9229 ;;		wreg, status,2, status,0, cstack
  9230 ;; Tracked objects:
  9231 ;;		On entry : 0/0
  9232 ;;		On exit  : 0/0
  9233 ;;		Unchanged: 0/0
  9234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9235 ;;      Params:         0       3       0       0       0       0       0       0       0
  9236 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9237 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9238 ;;      Totals:         0       3       0       0       0       0       0       0       0
  9239 ;;Total ram usage:        3 bytes
  9240 ;; Hardware stack levels used:    1
  9241 ;; Hardware stack levels required when called:    4
  9242 ;; This function calls:
  9243 ;;		___ftpack
  9244 ;; This function is called by:
  9245 ;;		_main
  9246 ;; This function uses a non-reentrant model
  9247 ;;
  9248                           
  9249                           	psect	text28
  9250  003B74                     __ptext28:
  9251                           	opt stack 0
  9252  003B74                     ___lwtoft:
  9253                           	opt stack 26
  9254                           
  9255                           ;incstack = 0
  9256  003B74  C068  F060         	movff	___lwtoft@c,___ftpack@arg
  9257  003B78  C069  F061         	movff	___lwtoft@c+1,___ftpack@arg+1
  9258  003B7C  0100               	movlb	0	; () banked
  9259  003B7E  6B62               	clrf	(___ftpack@arg+2)& (0+255),b
  9260  003B80  0E8E               	movlw	142
  9261  003B82  6F63               	movwf	___ftpack@exp& (0+255),b
  9262  003B84  0E00               	movlw	0
  9263  003B86  6F64               	movwf	___ftpack@sign& (0+255),b
  9264  003B88  EC51  F01A         	call	___ftpack	;wreg free
  9265  003B8C  C060  F068         	movff	?___ftpack,?___lwtoft
  9266  003B90  C061  F069         	movff	?___ftpack+1,?___lwtoft+1
  9267  003B94  C062  F06A         	movff	?___ftpack+2,?___lwtoft+2
  9268  003B98  0012               	return	
  9269  003B9A                     __end_of___lwtoft:
  9270                           	opt stack 0
  9271                           tblptru	equ	0xFF8
  9272                           tblptrh	equ	0xFF7
  9273                           tblptrl	equ	0xFF6
  9274                           tablat	equ	0xFF5
  9275                           prodh	equ	0xFF4
  9276                           prodl	equ	0xFF3
  9277                           postinc0	equ	0xFEE
  9278                           wreg	equ	0xFE8
  9279                           indf2	equ	0xFDF
  9280                           postinc2	equ	0xFDE
  9281                           postdec2	equ	0xFDD
  9282                           fsr2h	equ	0xFDA
  9283                           fsr2l	equ	0xFD9
  9284                           status	equ	0xFD8
  9285                           
  9286 ;; *************** function ___ftpack *****************
  9287 ;; Defined at:
  9288 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  9289 ;; Parameters:    Size  Location     Type
  9290 ;;  arg             3    0[BANK0 ] unsigned um
  9291 ;;  exp             1    3[BANK0 ] unsigned char 
  9292 ;;  sign            1    4[BANK0 ] unsigned char 
  9293 ;; Auto vars:     Size  Location     Type
  9294 ;;		None
  9295 ;; Return value:  Size  Location     Type
  9296 ;;                  3    0[BANK0 ] float 
  9297 ;; Registers used:
  9298 ;;		wreg, status,2, status,0
  9299 ;; Tracked objects:
  9300 ;;		On entry : 0/0
  9301 ;;		On exit  : 0/0
  9302 ;;		Unchanged: 0/0
  9303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9304 ;;      Params:         0       5       0       0       0       0       0       0       0
  9305 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9306 ;;      Temps:          0       3       0       0       0       0       0       0       0
  9307 ;;      Totals:         0       8       0       0       0       0       0       0       0
  9308 ;;Total ram usage:        8 bytes
  9309 ;; Hardware stack levels used:    1
  9310 ;; Hardware stack levels required when called:    3
  9311 ;; This function calls:
  9312 ;;		Nothing
  9313 ;; This function is called by:
  9314 ;;		___altoft
  9315 ;;		___ftadd
  9316 ;;		___ftdiv
  9317 ;;		___ftmul
  9318 ;;		___lltoft
  9319 ;;		___lwtoft
  9320 ;; This function uses a non-reentrant model
  9321 ;;
  9322                           
  9323                           	psect	text29
  9324  0034A2                     __ptext29:
  9325                           	opt stack 0
  9326  0034A2                     ___ftpack:
  9327                           	opt stack 24
  9328                           
  9329                           ;incstack = 0
  9330  0034A2  0100               	movlb	0	; () banked
  9331  0034A4  5163               	movf	___ftpack@exp& (0+255),w,b
  9332  0034A6  B4D8               	btfsc	status,2,c
  9333  0034A8  D005               	goto	u2140
  9334                           
  9335                           ; BSR set to: 0
  9336  0034AA  5160               	movf	___ftpack@arg& (0+255),w,b
  9337  0034AC  1161               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  9338  0034AE  1162               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  9339  0034B0  A4D8               	btfss	status,2,c
  9340  0034B2  D00C               	goto	l510
  9341  0034B4                     u2140:
  9342                           
  9343                           ; BSR set to: 0
  9344                           
  9345                           ; BSR set to: 0
  9346  0034B4  0E00               	movlw	0
  9347  0034B6  6F60               	movwf	?___ftpack& (0+255),b
  9348  0034B8  0E00               	movlw	0
  9349  0034BA  6F61               	movwf	(?___ftpack+1)& (0+255),b
  9350  0034BC  0E00               	movlw	0
  9351  0034BE  6F62               	movwf	(?___ftpack+2)& (0+255),b
  9352                           
  9353                           ; BSR set to: 0
  9354  0034C0  0012               	return	
  9355  0034C2                     
  9356                           ; BSR set to: 0
  9357                           
  9358                           ; BSR set to: 0
  9359  0034C2  2B63               	incf	___ftpack@exp& (0+255),f,b
  9360  0034C4  90D8               	bcf	status,0,c
  9361  0034C6  3362               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  9362  0034C8  3361               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  9363  0034CA  3360               	rrcf	___ftpack@arg& (0+255),f,b
  9364  0034CC                     l510:
  9365                           
  9366                           ; BSR set to: 0
  9367                           
  9368                           ; BSR set to: 0
  9369  0034CC  0E00               	movlw	0
  9370  0034CE  1560               	andwf	___ftpack@arg& (0+255),w,b
  9371  0034D0  6F65               	movwf	??___ftpack& (0+255),b
  9372  0034D2  0E00               	movlw	0
  9373  0034D4  1561               	andwf	(___ftpack@arg+1)& (0+255),w,b
  9374  0034D6  6F66               	movwf	(??___ftpack+1)& (0+255),b
  9375  0034D8  0EFE               	movlw	254
  9376  0034DA  1562               	andwf	(___ftpack@arg+2)& (0+255),w,b
  9377  0034DC  6F67               	movwf	(??___ftpack+2)& (0+255),b
  9378  0034DE  5165               	movf	??___ftpack& (0+255),w,b
  9379  0034E0  1166               	iorwf	(??___ftpack+1)& (0+255),w,b
  9380  0034E2  1167               	iorwf	(??___ftpack+2)& (0+255),w,b
  9381  0034E4  B4D8               	btfsc	status,2,c
  9382  0034E6  D00C               	goto	l513
  9383  0034E8  D7EC               	goto	l511
  9384  0034EA                     
  9385                           ; BSR set to: 0
  9386                           
  9387                           ; BSR set to: 0
  9388  0034EA  2B63               	incf	___ftpack@exp& (0+255),f,b
  9389                           
  9390                           ; BSR set to: 0
  9391  0034EC  0E01               	movlw	1
  9392  0034EE  2760               	addwf	___ftpack@arg& (0+255),f,b
  9393  0034F0  0E00               	movlw	0
  9394  0034F2  2361               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  9395  0034F4  0E00               	movlw	0
  9396  0034F6  2362               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  9397  0034F8  90D8               	bcf	status,0,c
  9398  0034FA  3362               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  9399  0034FC  3361               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  9400  0034FE  3360               	rrcf	___ftpack@arg& (0+255),f,b
  9401  003500                     l513:
  9402                           
  9403                           ; BSR set to: 0
  9404                           
  9405                           ; BSR set to: 0
  9406  003500  0E00               	movlw	0
  9407  003502  1560               	andwf	___ftpack@arg& (0+255),w,b
  9408  003504  6F65               	movwf	??___ftpack& (0+255),b
  9409  003506  0E00               	movlw	0
  9410  003508  1561               	andwf	(___ftpack@arg+1)& (0+255),w,b
  9411  00350A  6F66               	movwf	(??___ftpack+1)& (0+255),b
  9412  00350C  0EFF               	movlw	255
  9413  00350E  1562               	andwf	(___ftpack@arg+2)& (0+255),w,b
  9414  003510  6F67               	movwf	(??___ftpack+2)& (0+255),b
  9415  003512  5165               	movf	??___ftpack& (0+255),w,b
  9416  003514  1166               	iorwf	(??___ftpack+1)& (0+255),w,b
  9417  003516  1167               	iorwf	(??___ftpack+2)& (0+255),w,b
  9418  003518  B4D8               	btfsc	status,2,c
  9419  00351A  D006               	goto	l516
  9420  00351C  D7E6               	goto	l514
  9421  00351E                     
  9422                           ; BSR set to: 0
  9423                           
  9424                           ; BSR set to: 0
  9425  00351E  0763               	decf	___ftpack@exp& (0+255),f,b
  9426  003520  90D8               	bcf	status,0,c
  9427  003522  3760               	rlcf	___ftpack@arg& (0+255),f,b
  9428  003524  3761               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  9429  003526  3762               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  9430  003528                     l516:
  9431                           
  9432                           ; BSR set to: 0
  9433                           
  9434                           ; BSR set to: 0
  9435  003528  BF61               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  9436  00352A  D003               	goto	u2180
  9437                           
  9438                           ; BSR set to: 0
  9439  00352C  0E02               	movlw	2
  9440  00352E  6163               	cpfslt	___ftpack@exp& (0+255),b
  9441  003530  D7F6               	goto	l517
  9442  003532                     u2180:
  9443                           
  9444                           ; BSR set to: 0
  9445                           
  9446                           ; BSR set to: 0
  9447  003532  A163               	btfss	___ftpack@exp& (0+255),0,b
  9448                           
  9449                           ; BSR set to: 0
  9450  003534  9F61               	bcf	(___ftpack@arg+1)& (0+255),7,b
  9451                           
  9452                           ; BSR set to: 0
  9453                           
  9454                           ; BSR set to: 0
  9455  003536  90D8               	bcf	status,0,c
  9456  003538  3363               	rrcf	___ftpack@exp& (0+255),f,b
  9457  00353A  5163               	movf	___ftpack@exp& (0+255),w,b
  9458  00353C  1362               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  9459                           
  9460                           ; BSR set to: 0
  9461  00353E  5164               	movf	___ftpack@sign& (0+255),w,b
  9462  003540  A4D8               	btfss	status,2,c
  9463                           
  9464                           ; BSR set to: 0
  9465  003542  8F62               	bsf	(___ftpack@arg+2)& (0+255),7,b
  9466                           
  9467                           ; BSR set to: 0
  9468                           
  9469                           ; BSR set to: 0
  9470  003544  C060  F060         	movff	___ftpack@arg,?___ftpack
  9471  003548  C061  F061         	movff	___ftpack@arg+1,?___ftpack+1
  9472  00354C  C062  F062         	movff	___ftpack@arg+2,?___ftpack+2
  9473  003550  0012               	return	
  9474  003552                     __end_of___ftpack:
  9475                           	opt stack 0
  9476                           tblptru	equ	0xFF8
  9477                           tblptrh	equ	0xFF7
  9478                           tblptrl	equ	0xFF6
  9479                           tablat	equ	0xFF5
  9480                           prodh	equ	0xFF4
  9481                           prodl	equ	0xFF3
  9482                           postinc0	equ	0xFEE
  9483                           wreg	equ	0xFE8
  9484                           indf2	equ	0xFDF
  9485                           postinc2	equ	0xFDE
  9486                           postdec2	equ	0xFDD
  9487                           fsr2h	equ	0xFDA
  9488                           fsr2l	equ	0xFD9
  9489                           status	equ	0xFD8
  9490                           
  9491 ;; *************** function _Lcd_Out2 *****************
  9492 ;; Defined at:
  9493 ;;		line 109 in file "Library_LCD_2.h"
  9494 ;; Parameters:    Size  Location     Type
  9495 ;;  y               1    wreg     unsigned char 
  9496 ;;  x               1    3[BANK0 ] unsigned char 
  9497 ;;  buffer          2    4[BANK0 ] PTR unsigned char 
  9498 ;;		 -> buffer4(20), buffer3(20), STR_4(9), buffer2(20), 
  9499 ;;		 -> main@buffer1(16), 
  9500 ;; Auto vars:     Size  Location     Type
  9501 ;;  y               1    6[BANK0 ] unsigned char 
  9502 ;;  data            1    7[BANK0 ] unsigned char 
  9503 ;; Return value:  Size  Location     Type
  9504 ;;                  1    wreg      void 
  9505 ;; Registers used:
  9506 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9507 ;; Tracked objects:
  9508 ;;		On entry : 0/0
  9509 ;;		On exit  : 0/0
  9510 ;;		Unchanged: 0/0
  9511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9512 ;;      Params:         0       3       0       0       0       0       0       0       0
  9513 ;;      Locals:         0       2       0       0       0       0       0       0       0
  9514 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9515 ;;      Totals:         0       5       0       0       0       0       0       0       0
  9516 ;;Total ram usage:        5 bytes
  9517 ;; Hardware stack levels used:    1
  9518 ;; Hardware stack levels required when called:    4
  9519 ;; This function calls:
  9520 ;;		_Lcd_Chr_CP
  9521 ;;		_Lcd_Cmd
  9522 ;; This function is called by:
  9523 ;;		_main
  9524 ;; This function uses a non-reentrant model
  9525 ;;
  9526                           
  9527                           	psect	text30
  9528  003600                     __ptext30:
  9529                           	opt stack 0
  9530  003600                     _Lcd_Out2:
  9531                           	opt stack 26
  9532                           
  9533                           ; BSR set to: 0
  9534                           ;incstack = 0
  9535                           ;Lcd_Out2@y stored from wreg
  9536  003600  0100               	movlb	0	; () banked
  9537  003602  6F66               	movwf	Lcd_Out2@y& (0+255),b
  9538                           
  9539                           ;Library_LCD_2.h: 111: unsigned char data;
  9540                           ;Library_LCD_2.h: 112: switch (y)
  9541  003604  D00E               	goto	l78
  9542  003606  0100               	movlb	0	; () banked
  9543  003608  5163               	movf	Lcd_Out2@x& (0+255),w,b
  9544  00360A  0F80               	addlw	128
  9545  00360C  D008               	goto	L5
  9546  00360E                     
  9547                           ; BSR set to: 0
  9548                           
  9549                           ; BSR set to: 0
  9550  00360E  5163               	movf	Lcd_Out2@x& (0+255),w,b
  9551  003610  0FC0               	addlw	192
  9552  003612  D005               	goto	L5
  9553  003614                     
  9554                           ; BSR set to: 0
  9555                           
  9556                           ; BSR set to: 0
  9557  003614  5163               	movf	Lcd_Out2@x& (0+255),w,b
  9558  003616  0F94               	addlw	148
  9559  003618  D002               	goto	L5
  9560  00361A                     
  9561                           ; BSR set to: 0
  9562                           
  9563                           ; BSR set to: 0
  9564  00361A  5163               	movf	Lcd_Out2@x& (0+255),w,b
  9565  00361C  0FD4               	addlw	212
  9566  00361E                     L5:
  9567  00361E  6F67               	movwf	Lcd_Out2@data& (0+255),b
  9568                           
  9569                           ; BSR set to: 0
  9570                           ;Library_LCD_2.h: 119: }
  9571                           
  9572                           ; BSR set to: 0
  9573                           
  9574                           ;Library_LCD_2.h: 118: default: break;
  9575  003620  D00E               	goto	l80
  9576  003622                     l78:
  9577                           
  9578                           ; BSR set to: 0
  9579  003622  0100               	movlb	0	; () banked
  9580  003624  5166               	movf	Lcd_Out2@y& (0+255),w,b
  9581                           
  9582                           ; Switch size 1, requested type "space"
  9583                           ; Number of cases is 4, Range of values is 1 to 4
  9584                           ; switch strategies available:
  9585                           ; Name         Instructions Cycles
  9586                           ; simple_byte           13     7 (average)
  9587                           ;	Chosen strategy is simple_byte
  9588  003626  0A01               	xorlw	1	; case 1
  9589  003628  B4D8               	btfsc	status,2,c
  9590  00362A  D7ED               	goto	l79
  9591  00362C  0A03               	xorlw	3	; case 2
  9592  00362E  B4D8               	btfsc	status,2,c
  9593  003630  D7EE               	goto	l81
  9594  003632  0A01               	xorlw	1	; case 3
  9595  003634  B4D8               	btfsc	status,2,c
  9596  003636  D7EE               	goto	l82
  9597  003638  0A07               	xorlw	7	; case 4
  9598  00363A  B4D8               	btfsc	status,2,c
  9599  00363C  D7EE               	goto	l83
  9600  00363E                     l80:
  9601                           
  9602                           ; BSR set to: 0
  9603                           ;Library_LCD_2.h: 120: Lcd_Cmd(data);
  9604                           
  9605                           ; BSR set to: 0
  9606  00363E  5167               	movf	Lcd_Out2@data& (0+255),w,b
  9607  003640  EC10  F015         	call	_Lcd_Cmd
  9608                           
  9609                           ;Library_LCD_2.h: 121: while(*buffer)
  9610  003644  D015               	goto	l85
  9611  003646                     
  9612                           ;Library_LCD_2.h: 122: {
  9613                           ;Library_LCD_2.h: 123: Lcd_Chr_CP(*buffer);
  9614  003646  C064  FFF6         	movff	Lcd_Out2@buffer,tblptrl
  9615  00364A  C065  FFF7         	movff	Lcd_Out2@buffer+1,tblptrh
  9616  00364E  6AF8               	clrf	tblptru,c
  9617  003650  0E07               	movlw	(high __ramtop+-1)
  9618  003652  64F7               	cpfsgt	tblptrh,c
  9619  003654  D003               	bra	u3417
  9620  003656  0008               	tblrd		*
  9621  003658  50F5               	movf	tablat,w,c
  9622  00365A  D005               	bra	u3410
  9623  00365C                     u3417:
  9624  00365C  CFF6 FFD9          	movff	tblptrl,fsr2l
  9625  003660  CFF7 FFDA          	movff	tblptrh,fsr2h
  9626  003664  50DF               	movf	indf2,w,c
  9627  003666                     u3410:
  9628  003666  EC76  F014         	call	_Lcd_Chr_CP
  9629                           
  9630                           ;Library_LCD_2.h: 124: buffer++;
  9631  00366A  0100               	movlb	0	; () banked
  9632  00366C  4B64               	infsnz	Lcd_Out2@buffer& (0+255),f,b
  9633  00366E  2B65               	incf	(Lcd_Out2@buffer+1)& (0+255),f,b
  9634  003670                     l85:
  9635                           
  9636                           ; BSR set to: 0
  9637  003670  C064  FFF6         	movff	Lcd_Out2@buffer,tblptrl
  9638  003674  C065  FFF7         	movff	Lcd_Out2@buffer+1,tblptrh
  9639  003678  6AF8               	clrf	tblptru,c
  9640  00367A  0E07               	movlw	(high __ramtop+-1)
  9641  00367C  64F7               	cpfsgt	tblptrh,c
  9642  00367E  D003               	bra	u3427
  9643  003680  0008               	tblrd		*
  9644  003682  50F5               	movf	tablat,w,c
  9645  003684  D005               	bra	u3420
  9646  003686                     u3427:
  9647  003686  CFF6 FFD9          	movff	tblptrl,fsr2l
  9648  00368A  CFF7 FFDA          	movff	tblptrh,fsr2h
  9649  00368E  50DF               	movf	indf2,w,c
  9650  003690                     u3420:
  9651  003690  0900               	iorlw	0
  9652  003692  B4D8               	btfsc	status,2,c
  9653  003694  0012               	return	
  9654  003696  D7D7               	goto	l86
  9655  003698                     __end_of_Lcd_Out2:
  9656                           	opt stack 0
  9657                           tblptru	equ	0xFF8
  9658                           tblptrh	equ	0xFF7
  9659                           tblptrl	equ	0xFF6
  9660                           tablat	equ	0xFF5
  9661                           prodh	equ	0xFF4
  9662                           prodl	equ	0xFF3
  9663                           postinc0	equ	0xFEE
  9664                           wreg	equ	0xFE8
  9665                           indf2	equ	0xFDF
  9666                           postinc2	equ	0xFDE
  9667                           postdec2	equ	0xFDD
  9668                           fsr2h	equ	0xFDA
  9669                           fsr2l	equ	0xFD9
  9670                           status	equ	0xFD8
  9671                           
  9672 ;; *************** function _Lcd_Chr_CP *****************
  9673 ;; Defined at:
  9674 ;;		line 130 in file "Library_LCD_2.h"
  9675 ;; Parameters:    Size  Location     Type
  9676 ;;  data            1    wreg     unsigned char 
  9677 ;; Auto vars:     Size  Location     Type
  9678 ;;  data            1    2[BANK0 ] unsigned char 
  9679 ;; Return value:  Size  Location     Type
  9680 ;;                  1    wreg      void 
  9681 ;; Registers used:
  9682 ;;		wreg, status,2, status,0
  9683 ;; Tracked objects:
  9684 ;;		On entry : 0/0
  9685 ;;		On exit  : 0/0
  9686 ;;		Unchanged: 0/0
  9687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9688 ;;      Params:         0       0       0       0       0       0       0       0       0
  9689 ;;      Locals:         0       1       0       0       0       0       0       0       0
  9690 ;;      Temps:          0       2       0       0       0       0       0       0       0
  9691 ;;      Totals:         0       3       0       0       0       0       0       0       0
  9692 ;;Total ram usage:        3 bytes
  9693 ;; Hardware stack levels used:    1
  9694 ;; Hardware stack levels required when called:    3
  9695 ;; This function calls:
  9696 ;;		Nothing
  9697 ;; This function is called by:
  9698 ;;		_Lcd_Out2
  9699 ;;		_Lcd_Out
  9700 ;; This function uses a non-reentrant model
  9701 ;;
  9702                           
  9703                           	psect	text31
  9704  0028EC                     __ptext31:
  9705                           	opt stack 0
  9706  0028EC                     _Lcd_Chr_CP:
  9707                           	opt stack 26
  9708                           
  9709                           ;incstack = 0
  9710                           ;Lcd_Chr_CP@data stored from wreg
  9711  0028EC  0100               	movlb	0	; () banked
  9712  0028EE  6F62               	movwf	Lcd_Chr_CP@data& (0+255),b
  9713                           
  9714                           ;Library_LCD_2.h: 131: PORTDbits.RD3 = 0; PORTDbits.RD1 = 1;
  9715  0028F0  9683               	bcf	3971,3,c	;volatile
  9716  0028F2  8283               	bsf	3971,1,c	;volatile
  9717                           
  9718                           ;Library_LCD_2.h: 132: PORTDbits.RD7 = (data & 0b10000000)>>7; PORTDbits.RD6 = (data & 0
      +                          b01000000)>>6;
  9719  0028F4  0100               	movlb	0	; () banked
  9720  0028F6  6B60               	clrf	??_Lcd_Chr_CP& (0+255),b
  9721  0028F8  AF62               	btfss	Lcd_Chr_CP@data& (0+255),7,b
  9722  0028FA  D001               	bra	u2905
  9723  0028FC  2B60               	incf	??_Lcd_Chr_CP& (0+255),f,b
  9724  0028FE                     u2905:
  9725  0028FE  0E01               	movlw	1
  9726  002900  1760               	andwf	??_Lcd_Chr_CP& (0+255),f,b
  9727  002902  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  9728  002904  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  9729  002906  5083               	movf	3971,w,c	;volatile
  9730  002908  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  9731  00290A  0B7F               	andlw	-129
  9732  00290C  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  9733  00290E  6E83               	movwf	3971,c	;volatile
  9734  002910  C062  F060         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  9735  002914  0E06               	movlw	6
  9736  002916  6F61               	movwf	(??_Lcd_Chr_CP+1)& (0+255),b
  9737  002918                     u2915:
  9738  002918  90D8               	bcf	status,0,c
  9739  00291A  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  9740  00291C  2F61               	decfsz	(??_Lcd_Chr_CP+1)& (0+255),f,b
  9741  00291E  D7FC               	goto	u2915
  9742  002920  0E01               	movlw	1
  9743  002922  1760               	andwf	??_Lcd_Chr_CP& (0+255),f,b
  9744  002924  3B60               	swapf	??_Lcd_Chr_CP& (0+255),f,b
  9745  002926  4760               	rlncf	??_Lcd_Chr_CP& (0+255),f,b
  9746  002928  4760               	rlncf	??_Lcd_Chr_CP& (0+255),f,b
  9747  00292A  5083               	movf	3971,w,c	;volatile
  9748  00292C  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  9749  00292E  0BBF               	andlw	-65
  9750  002930  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  9751  002932  6E83               	movwf	3971,c	;volatile
  9752                           
  9753                           ;Library_LCD_2.h: 133: PORTDbits.RD5 = (data & 0b00100000)>>5; PORTDbits.RD4 = (data & 0
      +                          b00010000)>>4;
  9754  002934  C062  F060         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  9755  002938  0E05               	movlw	5
  9756  00293A  6F61               	movwf	(??_Lcd_Chr_CP+1)& (0+255),b
  9757  00293C                     u2925:
  9758  00293C  90D8               	bcf	status,0,c
  9759  00293E  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  9760  002940  2F61               	decfsz	(??_Lcd_Chr_CP+1)& (0+255),f,b
  9761  002942  D7FC               	goto	u2925
  9762  002944  0E01               	movlw	1
  9763  002946  1760               	andwf	??_Lcd_Chr_CP& (0+255),f,b
  9764  002948  3B60               	swapf	??_Lcd_Chr_CP& (0+255),f,b
  9765  00294A  4760               	rlncf	??_Lcd_Chr_CP& (0+255),f,b
  9766  00294C  5083               	movf	3971,w,c	;volatile
  9767  00294E  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  9768  002950  0BDF               	andlw	-33
  9769  002952  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  9770  002954  6E83               	movwf	3971,c	;volatile
  9771  002956  C062  F060         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  9772  00295A  3B60               	swapf	??_Lcd_Chr_CP& (0+255),f,b
  9773  00295C  0E0F               	movlw	15
  9774  00295E  1760               	andwf	??_Lcd_Chr_CP& (0+255),f,b
  9775  002960  0E01               	movlw	1
  9776  002962  1760               	andwf	??_Lcd_Chr_CP& (0+255),f,b
  9777  002964  3B60               	swapf	??_Lcd_Chr_CP& (0+255),f,b
  9778  002966  5083               	movf	3971,w,c	;volatile
  9779  002968  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  9780  00296A  0BEF               	andlw	-17
  9781  00296C  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  9782  00296E  6E83               	movwf	3971,c	;volatile
  9783                           
  9784                           ; BSR set to: 0
  9785                           ;Library_LCD_2.h: 134: _delay(10);
  9786  002970  0E03               	movlw	3
  9787  002972                     u4317:
  9788  002972  2EE8               	decfsz	wreg,f,c
  9789  002974  D7FE               	bra	u4317
  9790  002976  F000               	nop	
  9791                           
  9792                           ;Library_LCD_2.h: 135: PORTDbits.RD3 = 1; _delay((unsigned long)((5)*(48000000/4000000.0
      +                          ))); PORTDbits.RD3 = 0;
  9793  002978  8683               	bsf	3971,3,c	;volatile
  9794  00297A  0E14               	movlw	20
  9795  00297C                     u4327:
  9796  00297C  2EE8               	decfsz	wreg,f,c
  9797  00297E  D7FE               	bra	u4327
  9798  002980  9683               	bcf	3971,3,c	;volatile
  9799                           
  9800                           ;Library_LCD_2.h: 136: PORTDbits.RD7 = (data & 0b00001000)>>3; PORTDbits.RD6 = (data & 0
      +                          b00000100)>>2;
  9801  002982  C062  F060         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  9802  002986  0100               	movlb	0	; () banked
  9803  002988  90D8               	bcf	status,0,c
  9804  00298A  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  9805  00298C  90D8               	bcf	status,0,c
  9806  00298E  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  9807  002990  90D8               	bcf	status,0,c
  9808  002992  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  9809  002994  0E01               	movlw	1
  9810  002996  1760               	andwf	??_Lcd_Chr_CP& (0+255),f,b
  9811  002998  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  9812  00299A  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  9813  00299C  5083               	movf	3971,w,c	;volatile
  9814  00299E  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  9815  0029A0  0B7F               	andlw	-129
  9816  0029A2  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  9817  0029A4  6E83               	movwf	3971,c	;volatile
  9818  0029A6  C062  F060         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  9819  0029AA  90D8               	bcf	status,0,c
  9820  0029AC  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  9821  0029AE  90D8               	bcf	status,0,c
  9822  0029B0  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  9823  0029B2  0E01               	movlw	1
  9824  0029B4  1760               	andwf	??_Lcd_Chr_CP& (0+255),f,b
  9825  0029B6  3B60               	swapf	??_Lcd_Chr_CP& (0+255),f,b
  9826  0029B8  4760               	rlncf	??_Lcd_Chr_CP& (0+255),f,b
  9827  0029BA  4760               	rlncf	??_Lcd_Chr_CP& (0+255),f,b
  9828  0029BC  5083               	movf	3971,w,c	;volatile
  9829  0029BE  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  9830  0029C0  0BBF               	andlw	-65
  9831  0029C2  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  9832  0029C4  6E83               	movwf	3971,c	;volatile
  9833                           
  9834                           ;Library_LCD_2.h: 137: PORTDbits.RD5 = (data & 0b00000010)>>1; PORTDbits.RD4 = (data & 0
      +                          b00000001);
  9835  0029C6  C062  F060         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  9836  0029CA  90D8               	bcf	status,0,c
  9837  0029CC  3360               	rrcf	??_Lcd_Chr_CP& (0+255),f,b
  9838  0029CE  0E01               	movlw	1
  9839  0029D0  1760               	andwf	??_Lcd_Chr_CP& (0+255),f,b
  9840  0029D2  3B60               	swapf	??_Lcd_Chr_CP& (0+255),f,b
  9841  0029D4  4760               	rlncf	??_Lcd_Chr_CP& (0+255),f,b
  9842  0029D6  5083               	movf	3971,w,c	;volatile
  9843  0029D8  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  9844  0029DA  0BDF               	andlw	-33
  9845  0029DC  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  9846  0029DE  6E83               	movwf	3971,c	;volatile
  9847  0029E0  C062  F060         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  9848  0029E4  0E01               	movlw	1
  9849  0029E6  1760               	andwf	??_Lcd_Chr_CP& (0+255),f,b
  9850  0029E8  3B60               	swapf	??_Lcd_Chr_CP& (0+255),f,b
  9851  0029EA  5083               	movf	3971,w,c	;volatile
  9852  0029EC  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  9853  0029EE  0BEF               	andlw	-17
  9854  0029F0  1960               	xorwf	??_Lcd_Chr_CP& (0+255),w,b
  9855  0029F2  6E83               	movwf	3971,c	;volatile
  9856                           
  9857                           ; BSR set to: 0
  9858                           ;Library_LCD_2.h: 138: _delay(10);
  9859  0029F4  0E03               	movlw	3
  9860  0029F6                     u4337:
  9861  0029F6  2EE8               	decfsz	wreg,f,c
  9862  0029F8  D7FE               	bra	u4337
  9863  0029FA  F000               	nop	
  9864                           
  9865                           ;Library_LCD_2.h: 139: PORTDbits.RD3 = 1; _delay((unsigned long)((5)*(48000000/4000000.0
      +                          ))); PORTDbits.RD3 = 0;
  9866  0029FC  8683               	bsf	3971,3,c	;volatile
  9867  0029FE  0E14               	movlw	20
  9868  002A00                     u4347:
  9869  002A00  2EE8               	decfsz	wreg,f,c
  9870  002A02  D7FE               	bra	u4347
  9871  002A04  9683               	bcf	3971,3,c	;volatile
  9872                           
  9873                           ;Library_LCD_2.h: 140: _delay((unsigned long)((5)*(48000000/4000000.0))); _delay((unsign
      +                          ed long)((5500)*(48000000/4000000.0)));
  9874  002A06  0E14               	movlw	20
  9875  002A08                     u4357:
  9876  002A08  2EE8               	decfsz	wreg,f,c
  9877  002A0A  D7FE               	bra	u4357
  9878  002A0C  0E56               	movlw	86
  9879  002A0E  0100               	movlb	0	; () banked
  9880  002A10  6F60               	movwf	??_Lcd_Chr_CP& (0+255),b
  9881  002A12  0EB5               	movlw	181
  9882  002A14                     u4367:
  9883  002A14  2EE8               	decfsz	wreg,f,c
  9884  002A16  D7FE               	bra	u4367
  9885  002A18  2F60               	decfsz	??_Lcd_Chr_CP& (0+255),f,b
  9886  002A1A  D7FC               	bra	u4367
  9887  002A1C  D000               	nop2	
  9888  002A1E  0012               	return		;funcret
  9889  002A20                     __end_of_Lcd_Chr_CP:
  9890                           	opt stack 0
  9891                           tblptru	equ	0xFF8
  9892                           tblptrh	equ	0xFF7
  9893                           tblptrl	equ	0xFF6
  9894                           tablat	equ	0xFF5
  9895                           prodh	equ	0xFF4
  9896                           prodl	equ	0xFF3
  9897                           postinc0	equ	0xFEE
  9898                           wreg	equ	0xFE8
  9899                           indf2	equ	0xFDF
  9900                           postinc2	equ	0xFDE
  9901                           postdec2	equ	0xFDD
  9902                           fsr2h	equ	0xFDA
  9903                           fsr2l	equ	0xFD9
  9904                           status	equ	0xFD8
  9905                           
  9906 ;; *************** function _Lcd_Init *****************
  9907 ;; Defined at:
  9908 ;;		line 46 in file "Library_LCD_2.h"
  9909 ;; Parameters:    Size  Location     Type
  9910 ;;		None
  9911 ;; Auto vars:     Size  Location     Type
  9912 ;;  data            1    4[BANK0 ] unsigned char 
  9913 ;; Return value:  Size  Location     Type
  9914 ;;                  1    wreg      void 
  9915 ;; Registers used:
  9916 ;;		wreg, status,2, status,0, cstack
  9917 ;; Tracked objects:
  9918 ;;		On entry : 0/0
  9919 ;;		On exit  : 0/0
  9920 ;;		Unchanged: 0/0
  9921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9922 ;;      Params:         0       0       0       0       0       0       0       0       0
  9923 ;;      Locals:         0       1       0       0       0       0       0       0       0
  9924 ;;      Temps:          0       1       0       0       0       0       0       0       0
  9925 ;;      Totals:         0       2       0       0       0       0       0       0       0
  9926 ;;Total ram usage:        2 bytes
  9927 ;; Hardware stack levels used:    1
  9928 ;; Hardware stack levels required when called:    4
  9929 ;; This function calls:
  9930 ;;		_Lcd_Cmd
  9931 ;; This function is called by:
  9932 ;;		_main
  9933 ;; This function uses a non-reentrant model
  9934 ;;
  9935                           
  9936                           	psect	text32
  9937  002678                     __ptext32:
  9938                           	opt stack 0
  9939  002678                     _Lcd_Init:
  9940                           	opt stack 26
  9941                           
  9942                           ;Library_LCD_2.h: 47: unsigned char data;
  9943                           ;Library_LCD_2.h: 48: TRISDbits.TRISD7 = 0;
  9944                           
  9945                           ;incstack = 0
  9946  002678  9E95               	bcf	3989,7,c	;volatile
  9947                           
  9948                           ;Library_LCD_2.h: 49: TRISDbits.TRISD6 = 0;
  9949  00267A  9C95               	bcf	3989,6,c	;volatile
  9950                           
  9951                           ;Library_LCD_2.h: 50: TRISDbits.TRISD5 = 0;
  9952  00267C  9A95               	bcf	3989,5,c	;volatile
  9953                           
  9954                           ;Library_LCD_2.h: 51: TRISDbits.TRISD4 = 0;
  9955  00267E  9895               	bcf	3989,4,c	;volatile
  9956                           
  9957                           ;Library_LCD_2.h: 52: TRISDbits.TRISD3 = 0;
  9958  002680  9695               	bcf	3989,3,c	;volatile
  9959                           
  9960                           ;Library_LCD_2.h: 53: TRISDbits.TRISD1 = 0;
  9961  002682  9295               	bcf	3989,1,c	;volatile
  9962                           
  9963                           ;Library_LCD_2.h: 54: PORTDbits.RD7 = 0;
  9964  002684  9E83               	bcf	3971,7,c	;volatile
  9965                           
  9966                           ;Library_LCD_2.h: 55: PORTDbits.RD6 = 0;
  9967  002686  9C83               	bcf	3971,6,c	;volatile
  9968                           
  9969                           ;Library_LCD_2.h: 56: PORTDbits.RD5 = 0;
  9970  002688  9A83               	bcf	3971,5,c	;volatile
  9971                           
  9972                           ;Library_LCD_2.h: 57: PORTDbits.RD4 = 0;
  9973  00268A  9883               	bcf	3971,4,c	;volatile
  9974                           
  9975                           ;Library_LCD_2.h: 58: PORTDbits.RD3 = 0;
  9976  00268C  9683               	bcf	3971,3,c	;volatile
  9977                           
  9978                           ;Library_LCD_2.h: 59: PORTDbits.RD1 = 0;
  9979  00268E  9283               	bcf	3971,1,c	;volatile
  9980                           
  9981                           ;Library_LCD_2.h: 60: _delay((unsigned long)((5500)*(48000000/4000000.0)));
  9982  002690  0E56               	movlw	86
  9983  002692  0100               	movlb	0	; () banked
  9984  002694  6F63               	movwf	??_Lcd_Init& (0+255),b
  9985  002696  0EB5               	movlw	181
  9986  002698                     u4377:
  9987  002698  2EE8               	decfsz	wreg,f,c
  9988  00269A  D7FE               	bra	u4377
  9989  00269C  2F63               	decfsz	??_Lcd_Init& (0+255),f,b
  9990  00269E  D7FC               	bra	u4377
  9991  0026A0  D000               	nop2	
  9992                           
  9993                           ;Library_LCD_2.h: 61: _delay((unsigned long)((5500)*(48000000/4000000.0)));
  9994  0026A2  0E56               	movlw	86
  9995  0026A4  0100               	movlb	0	; () banked
  9996  0026A6  6F63               	movwf	??_Lcd_Init& (0+255),b
  9997  0026A8  0EB5               	movlw	181
  9998  0026AA                     u4387:
  9999  0026AA  2EE8               	decfsz	wreg,f,c
 10000  0026AC  D7FE               	bra	u4387
 10001  0026AE  2F63               	decfsz	??_Lcd_Init& (0+255),f,b
 10002  0026B0  D7FC               	bra	u4387
 10003  0026B2  D000               	nop2	
 10004                           
 10005                           ;Library_LCD_2.h: 62: _delay((unsigned long)((5500)*(48000000/4000000.0)));
 10006  0026B4  0E56               	movlw	86
 10007  0026B6  0100               	movlb	0	; () banked
 10008  0026B8  6F63               	movwf	??_Lcd_Init& (0+255),b
 10009  0026BA  0EB5               	movlw	181
 10010  0026BC                     u4397:
 10011  0026BC  2EE8               	decfsz	wreg,f,c
 10012  0026BE  D7FE               	bra	u4397
 10013  0026C0  2F63               	decfsz	??_Lcd_Init& (0+255),f,b
 10014  0026C2  D7FC               	bra	u4397
 10015  0026C4  D000               	nop2	
 10016                           
 10017                           ;Library_LCD_2.h: 63: _delay((unsigned long)((5500)*(48000000/4000000.0)));
 10018  0026C6  0E56               	movlw	86
 10019  0026C8  0100               	movlb	0	; () banked
 10020  0026CA  6F63               	movwf	??_Lcd_Init& (0+255),b
 10021  0026CC  0EB5               	movlw	181
 10022  0026CE                     u4407:
 10023  0026CE  2EE8               	decfsz	wreg,f,c
 10024  0026D0  D7FE               	bra	u4407
 10025  0026D2  2F63               	decfsz	??_Lcd_Init& (0+255),f,b
 10026  0026D4  D7FC               	bra	u4407
 10027  0026D6  D000               	nop2	
 10028                           
 10029                           ;Library_LCD_2.h: 64: _delay((unsigned long)((5500)*(48000000/4000000.0)));
 10030  0026D8  0E56               	movlw	86
 10031  0026DA  0100               	movlb	0	; () banked
 10032  0026DC  6F63               	movwf	??_Lcd_Init& (0+255),b
 10033  0026DE  0EB5               	movlw	181
 10034  0026E0                     u4417:
 10035  0026E0  2EE8               	decfsz	wreg,f,c
 10036  0026E2  D7FE               	bra	u4417
 10037  0026E4  2F63               	decfsz	??_Lcd_Init& (0+255),f,b
 10038  0026E6  D7FC               	bra	u4417
 10039  0026E8  D000               	nop2	
 10040                           
 10041                           ;Library_LCD_2.h: 65: _delay((unsigned long)((5500)*(48000000/4000000.0)));
 10042  0026EA  0E56               	movlw	86
 10043  0026EC  0100               	movlb	0	; () banked
 10044  0026EE  6F63               	movwf	??_Lcd_Init& (0+255),b
 10045  0026F0  0EB5               	movlw	181
 10046  0026F2                     u4427:
 10047  0026F2  2EE8               	decfsz	wreg,f,c
 10048  0026F4  D7FE               	bra	u4427
 10049  0026F6  2F63               	decfsz	??_Lcd_Init& (0+255),f,b
 10050  0026F8  D7FC               	bra	u4427
 10051  0026FA  D000               	nop2	
 10052                           
 10053                           ;Library_LCD_2.h: 66: for(data = 1; data < 4; data ++)
 10054  0026FC  0E01               	movlw	1
 10055  0026FE  0100               	movlb	0	; () banked
 10056  002700  6F64               	movwf	Lcd_Init@data& (0+255),b
 10057  002702  D020               	goto	L6
 10058  002704                     l60:
 10059                           
 10060                           ; BSR set to: 0
 10061                           ;Library_LCD_2.h: 67: {
 10062                           ;Library_LCD_2.h: 68: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits
      +                          .RD4 = 1; PORTDbits.RD3 = 0;
 10063  002704  9E83               	bcf	3971,7,c	;volatile
 10064  002706  9C83               	bcf	3971,6,c	;volatile
 10065  002708  8A83               	bsf	3971,5,c	;volatile
 10066  00270A  8883               	bsf	3971,4,c	;volatile
 10067  00270C  9683               	bcf	3971,3,c	;volatile
 10068                           
 10069                           ;Library_LCD_2.h: 69: PORTDbits.RD1 = 0; PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits
      +                          .RD5 = 1; PORTDbits.RD4 = 1;
 10070  00270E  9283               	bcf	3971,1,c	;volatile
 10071  002710  9E83               	bcf	3971,7,c	;volatile
 10072  002712  9C83               	bcf	3971,6,c	;volatile
 10073  002714  8A83               	bsf	3971,5,c	;volatile
 10074  002716  8883               	bsf	3971,4,c	;volatile
 10075                           
 10076                           ;Library_LCD_2.h: 70: PORTDbits.RD3 = 1; PORTDbits.RD1 = 0;
 10077  002718  8683               	bsf	3971,3,c	;volatile
 10078  00271A  9283               	bcf	3971,1,c	;volatile
 10079                           
 10080                           ; BSR set to: 0
 10081                           ;Library_LCD_2.h: 71: _delay((unsigned long)((5)*(48000000/4000000.0)));
 10082  00271C  0E14               	movlw	20
 10083  00271E                     u4437:
 10084  00271E  2EE8               	decfsz	wreg,f,c
 10085  002720  D7FE               	bra	u4437
 10086                           
 10087                           ;Library_LCD_2.h: 72: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits
      +                          .RD4 = 1; PORTDbits.RD3 = 0;
 10088  002722  9E83               	bcf	3971,7,c	;volatile
 10089  002724  9C83               	bcf	3971,6,c	;volatile
 10090  002726  8A83               	bsf	3971,5,c	;volatile
 10091  002728  8883               	bsf	3971,4,c	;volatile
 10092  00272A  9683               	bcf	3971,3,c	;volatile
 10093                           
 10094                           ;Library_LCD_2.h: 73: PORTDbits.RD1 = 0;
 10095  00272C  9283               	bcf	3971,1,c	;volatile
 10096                           
 10097                           ;Library_LCD_2.h: 74: _delay((unsigned long)((5500)*(48000000/4000000.0)));
 10098  00272E  0E56               	movlw	86
 10099  002730  0100               	movlb	0	; () banked
 10100  002732  6F63               	movwf	??_Lcd_Init& (0+255),b
 10101  002734  0EB5               	movlw	181
 10102  002736                     u4447:
 10103  002736  2EE8               	decfsz	wreg,f,c
 10104  002738  D7FE               	bra	u4447
 10105  00273A  2F63               	decfsz	??_Lcd_Init& (0+255),f,b
 10106  00273C  D7FC               	bra	u4447
 10107  00273E  D000               	nop2	
 10108  002740  0100               	movlb	0	; () banked
 10109  002742  2B64               	incf	Lcd_Init@data& (0+255),f,b
 10110  002744                     L6:
 10111  002744  0E03               	movlw	3
 10112  002746  6564               	cpfsgt	Lcd_Init@data& (0+255),b
 10113  002748  D7DD               	goto	l60
 10114                           
 10115                           ; BSR set to: 0
 10116                           ;Library_LCD_2.h: 75: }
 10117                           ;Library_LCD_2.h: 76: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits
      +                          .RD4 = 0; PORTDbits.RD3 = 0; PORTDbits.RD1 = 0;
 10118  00274A  9E83               	bcf	3971,7,c	;volatile
 10119  00274C  9C83               	bcf	3971,6,c	;volatile
 10120  00274E  8A83               	bsf	3971,5,c	;volatile
 10121  002750  9883               	bcf	3971,4,c	;volatile
 10122  002752  9683               	bcf	3971,3,c	;volatile
 10123  002754  9283               	bcf	3971,1,c	;volatile
 10124                           
 10125                           ;Library_LCD_2.h: 77: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits
      +                          .RD4 = 0; PORTDbits.RD3 = 1; PORTDbits.RD1 = 0;
 10126  002756  9E83               	bcf	3971,7,c	;volatile
 10127  002758  9C83               	bcf	3971,6,c	;volatile
 10128  00275A  8A83               	bsf	3971,5,c	;volatile
 10129  00275C  9883               	bcf	3971,4,c	;volatile
 10130  00275E  8683               	bsf	3971,3,c	;volatile
 10131  002760  9283               	bcf	3971,1,c	;volatile
 10132                           
 10133                           ; BSR set to: 0
 10134                           ;Library_LCD_2.h: 78: _delay((unsigned long)((5)*(48000000/4000000.0)));
 10135  002762  0E14               	movlw	20
 10136  002764                     u4457:
 10137  002764  2EE8               	decfsz	wreg,f,c
 10138  002766  D7FE               	bra	u4457
 10139                           
 10140                           ;Library_LCD_2.h: 79: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits
      +                          .RD4 = 0; PORTDbits.RD3 = 0; PORTDbits.RD1 = 0;
 10141  002768  9E83               	bcf	3971,7,c	;volatile
 10142  00276A  9C83               	bcf	3971,6,c	;volatile
 10143  00276C  8A83               	bsf	3971,5,c	;volatile
 10144  00276E  9883               	bcf	3971,4,c	;volatile
 10145  002770  9683               	bcf	3971,3,c	;volatile
 10146  002772  9283               	bcf	3971,1,c	;volatile
 10147                           
 10148                           ;Library_LCD_2.h: 80: _delay((unsigned long)((5500)*(48000000/4000000.0)));
 10149  002774  0E56               	movlw	86
 10150  002776  0100               	movlb	0	; () banked
 10151  002778  6F63               	movwf	??_Lcd_Init& (0+255),b
 10152  00277A  0EB5               	movlw	181
 10153  00277C                     u4467:
 10154  00277C  2EE8               	decfsz	wreg,f,c
 10155  00277E  D7FE               	bra	u4467
 10156  002780  2F63               	decfsz	??_Lcd_Init& (0+255),f,b
 10157  002782  D7FC               	bra	u4467
 10158  002784  D000               	nop2	
 10159                           
 10160                           ;Library_LCD_2.h: 81: data = 40; Lcd_Cmd(data);
 10161  002786  0E28               	movlw	40
 10162  002788  0100               	movlb	0	; () banked
 10163  00278A  6F64               	movwf	Lcd_Init@data& (0+255),b
 10164                           
 10165                           ; BSR set to: 0
 10166  00278C  5164               	movf	Lcd_Init@data& (0+255),w,b
 10167  00278E  EC10  F015         	call	_Lcd_Cmd
 10168                           
 10169                           ;Library_LCD_2.h: 82: data = 16; Lcd_Cmd(data);
 10170  002792  0E10               	movlw	16
 10171  002794  0100               	movlb	0	; () banked
 10172  002796  6F64               	movwf	Lcd_Init@data& (0+255),b
 10173                           
 10174                           ; BSR set to: 0
 10175  002798  5164               	movf	Lcd_Init@data& (0+255),w,b
 10176  00279A  EC10  F015         	call	_Lcd_Cmd
 10177                           
 10178                           ;Library_LCD_2.h: 83: data = 1; Lcd_Cmd(data);
 10179  00279E  0E01               	movlw	1
 10180  0027A0  0100               	movlb	0	; () banked
 10181  0027A2  6F64               	movwf	Lcd_Init@data& (0+255),b
 10182                           
 10183                           ; BSR set to: 0
 10184  0027A4  5164               	movf	Lcd_Init@data& (0+255),w,b
 10185  0027A6  EC10  F015         	call	_Lcd_Cmd
 10186                           
 10187                           ;Library_LCD_2.h: 84: data = 15; Lcd_Cmd(data);
 10188  0027AA  0E0F               	movlw	15
 10189  0027AC  0100               	movlb	0	; () banked
 10190  0027AE  6F64               	movwf	Lcd_Init@data& (0+255),b
 10191                           
 10192                           ; BSR set to: 0
 10193  0027B0  5164               	movf	Lcd_Init@data& (0+255),w,b
 10194  0027B2  EC10  F015         	call	_Lcd_Cmd
 10195  0027B6  0012               	return		;funcret
 10196  0027B8                     __end_of_Lcd_Init:
 10197                           	opt stack 0
 10198                           tblptru	equ	0xFF8
 10199                           tblptrh	equ	0xFF7
 10200                           tblptrl	equ	0xFF6
 10201                           tablat	equ	0xFF5
 10202                           prodh	equ	0xFF4
 10203                           prodl	equ	0xFF3
 10204                           postinc0	equ	0xFEE
 10205                           wreg	equ	0xFE8
 10206                           indf2	equ	0xFDF
 10207                           postinc2	equ	0xFDE
 10208                           postdec2	equ	0xFDD
 10209                           fsr2h	equ	0xFDA
 10210                           fsr2l	equ	0xFD9
 10211                           status	equ	0xFD8
 10212                           
 10213 ;; *************** function _Lcd_Cmd *****************
 10214 ;; Defined at:
 10215 ;;		line 144 in file "Library_LCD_2.h"
 10216 ;; Parameters:    Size  Location     Type
 10217 ;;  data            1    wreg     unsigned char 
 10218 ;; Auto vars:     Size  Location     Type
 10219 ;;  data            1    2[BANK0 ] unsigned char 
 10220 ;; Return value:  Size  Location     Type
 10221 ;;                  1    wreg      void 
 10222 ;; Registers used:
 10223 ;;		wreg, status,2, status,0
 10224 ;; Tracked objects:
 10225 ;;		On entry : 0/0
 10226 ;;		On exit  : 0/0
 10227 ;;		Unchanged: 0/0
 10228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10229 ;;      Params:         0       0       0       0       0       0       0       0       0
 10230 ;;      Locals:         0       1       0       0       0       0       0       0       0
 10231 ;;      Temps:          0       2       0       0       0       0       0       0       0
 10232 ;;      Totals:         0       3       0       0       0       0       0       0       0
 10233 ;;Total ram usage:        3 bytes
 10234 ;; Hardware stack levels used:    1
 10235 ;; Hardware stack levels required when called:    3
 10236 ;; This function calls:
 10237 ;;		Nothing
 10238 ;; This function is called by:
 10239 ;;		_Lcd_Init
 10240 ;;		_Lcd_Out2
 10241 ;;		_main
 10242 ;;		_Lcd_Out
 10243 ;; This function uses a non-reentrant model
 10244 ;;
 10245                           
 10246                           	psect	text33
 10247  002A20                     __ptext33:
 10248                           	opt stack 0
 10249  002A20                     _Lcd_Cmd:
 10250                           	opt stack 26
 10251                           
 10252                           ;incstack = 0
 10253                           ;Lcd_Cmd@data stored from wreg
 10254  002A20  0100               	movlb	0	; () banked
 10255  002A22  6F62               	movwf	Lcd_Cmd@data& (0+255),b
 10256                           
 10257                           ;Library_LCD_2.h: 145: PORTDbits.RD3 = 0; PORTDbits.RD1 = 0;
 10258  002A24  9683               	bcf	3971,3,c	;volatile
 10259  002A26  9283               	bcf	3971,1,c	;volatile
 10260                           
 10261                           ;Library_LCD_2.h: 146: PORTDbits.RD7 = (data & 0b10000000)>>7; PORTDbits.RD6 = (data & 0
      +                          b01000000)>>6;
 10262  002A28  0100               	movlb	0	; () banked
 10263  002A2A  6B60               	clrf	??_Lcd_Cmd& (0+255),b
 10264  002A2C  AF62               	btfss	Lcd_Cmd@data& (0+255),7,b
 10265  002A2E  D001               	bra	u2875
 10266  002A30  2B60               	incf	??_Lcd_Cmd& (0+255),f,b
 10267  002A32                     u2875:
 10268  002A32  0E01               	movlw	1
 10269  002A34  1760               	andwf	??_Lcd_Cmd& (0+255),f,b
 10270  002A36  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
 10271  002A38  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
 10272  002A3A  5083               	movf	3971,w,c	;volatile
 10273  002A3C  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
 10274  002A3E  0B7F               	andlw	-129
 10275  002A40  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
 10276  002A42  6E83               	movwf	3971,c	;volatile
 10277  002A44  C062  F060         	movff	Lcd_Cmd@data,??_Lcd_Cmd
 10278  002A48  0E06               	movlw	6
 10279  002A4A  6F61               	movwf	(??_Lcd_Cmd+1)& (0+255),b
 10280  002A4C                     u2885:
 10281  002A4C  90D8               	bcf	status,0,c
 10282  002A4E  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
 10283  002A50  2F61               	decfsz	(??_Lcd_Cmd+1)& (0+255),f,b
 10284  002A52  D7FC               	goto	u2885
 10285  002A54  0E01               	movlw	1
 10286  002A56  1760               	andwf	??_Lcd_Cmd& (0+255),f,b
 10287  002A58  3B60               	swapf	??_Lcd_Cmd& (0+255),f,b
 10288  002A5A  4760               	rlncf	??_Lcd_Cmd& (0+255),f,b
 10289  002A5C  4760               	rlncf	??_Lcd_Cmd& (0+255),f,b
 10290  002A5E  5083               	movf	3971,w,c	;volatile
 10291  002A60  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
 10292  002A62  0BBF               	andlw	-65
 10293  002A64  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
 10294  002A66  6E83               	movwf	3971,c	;volatile
 10295                           
 10296                           ;Library_LCD_2.h: 147: PORTDbits.RD5 = (data & 0b00100000)>>5; PORTDbits.RD4 = (data & 0
      +                          b00010000)>>4;
 10297  002A68  C062  F060         	movff	Lcd_Cmd@data,??_Lcd_Cmd
 10298  002A6C  0E05               	movlw	5
 10299  002A6E  6F61               	movwf	(??_Lcd_Cmd+1)& (0+255),b
 10300  002A70                     u2895:
 10301  002A70  90D8               	bcf	status,0,c
 10302  002A72  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
 10303  002A74  2F61               	decfsz	(??_Lcd_Cmd+1)& (0+255),f,b
 10304  002A76  D7FC               	goto	u2895
 10305  002A78  0E01               	movlw	1
 10306  002A7A  1760               	andwf	??_Lcd_Cmd& (0+255),f,b
 10307  002A7C  3B60               	swapf	??_Lcd_Cmd& (0+255),f,b
 10308  002A7E  4760               	rlncf	??_Lcd_Cmd& (0+255),f,b
 10309  002A80  5083               	movf	3971,w,c	;volatile
 10310  002A82  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
 10311  002A84  0BDF               	andlw	-33
 10312  002A86  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
 10313  002A88  6E83               	movwf	3971,c	;volatile
 10314  002A8A  C062  F060         	movff	Lcd_Cmd@data,??_Lcd_Cmd
 10315  002A8E  3B60               	swapf	??_Lcd_Cmd& (0+255),f,b
 10316  002A90  0E0F               	movlw	15
 10317  002A92  1760               	andwf	??_Lcd_Cmd& (0+255),f,b
 10318  002A94  0E01               	movlw	1
 10319  002A96  1760               	andwf	??_Lcd_Cmd& (0+255),f,b
 10320  002A98  3B60               	swapf	??_Lcd_Cmd& (0+255),f,b
 10321  002A9A  5083               	movf	3971,w,c	;volatile
 10322  002A9C  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
 10323  002A9E  0BEF               	andlw	-17
 10324  002AA0  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
 10325  002AA2  6E83               	movwf	3971,c	;volatile
 10326                           
 10327                           ; BSR set to: 0
 10328                           ;Library_LCD_2.h: 148: _delay(10);
 10329  002AA4  0E03               	movlw	3
 10330  002AA6                     u4477:
 10331  002AA6  2EE8               	decfsz	wreg,f,c
 10332  002AA8  D7FE               	bra	u4477
 10333  002AAA  F000               	nop	
 10334                           
 10335                           ;Library_LCD_2.h: 149: PORTDbits.RD3 = 1; _delay((unsigned long)((5)*(48000000/4000000.0
      +                          ))); PORTDbits.RD3 = 0;
 10336  002AAC  8683               	bsf	3971,3,c	;volatile
 10337  002AAE  0E14               	movlw	20
 10338  002AB0                     u4487:
 10339  002AB0  2EE8               	decfsz	wreg,f,c
 10340  002AB2  D7FE               	bra	u4487
 10341  002AB4  9683               	bcf	3971,3,c	;volatile
 10342                           
 10343                           ;Library_LCD_2.h: 150: PORTDbits.RD7 = (data & 0b00001000)>>3; PORTDbits.RD6 = (data & 0
      +                          b00000100)>>2;
 10344  002AB6  C062  F060         	movff	Lcd_Cmd@data,??_Lcd_Cmd
 10345  002ABA  0100               	movlb	0	; () banked
 10346  002ABC  90D8               	bcf	status,0,c
 10347  002ABE  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
 10348  002AC0  90D8               	bcf	status,0,c
 10349  002AC2  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
 10350  002AC4  90D8               	bcf	status,0,c
 10351  002AC6  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
 10352  002AC8  0E01               	movlw	1
 10353  002ACA  1760               	andwf	??_Lcd_Cmd& (0+255),f,b
 10354  002ACC  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
 10355  002ACE  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
 10356  002AD0  5083               	movf	3971,w,c	;volatile
 10357  002AD2  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
 10358  002AD4  0B7F               	andlw	-129
 10359  002AD6  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
 10360  002AD8  6E83               	movwf	3971,c	;volatile
 10361  002ADA  C062  F060         	movff	Lcd_Cmd@data,??_Lcd_Cmd
 10362  002ADE  90D8               	bcf	status,0,c
 10363  002AE0  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
 10364  002AE2  90D8               	bcf	status,0,c
 10365  002AE4  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
 10366  002AE6  0E01               	movlw	1
 10367  002AE8  1760               	andwf	??_Lcd_Cmd& (0+255),f,b
 10368  002AEA  3B60               	swapf	??_Lcd_Cmd& (0+255),f,b
 10369  002AEC  4760               	rlncf	??_Lcd_Cmd& (0+255),f,b
 10370  002AEE  4760               	rlncf	??_Lcd_Cmd& (0+255),f,b
 10371  002AF0  5083               	movf	3971,w,c	;volatile
 10372  002AF2  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
 10373  002AF4  0BBF               	andlw	-65
 10374  002AF6  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
 10375  002AF8  6E83               	movwf	3971,c	;volatile
 10376                           
 10377                           ;Library_LCD_2.h: 151: PORTDbits.RD5 = (data & 0b00000010)>>1; PORTDbits.RD4 = (data & 0
      +                          b00000001);
 10378  002AFA  C062  F060         	movff	Lcd_Cmd@data,??_Lcd_Cmd
 10379  002AFE  90D8               	bcf	status,0,c
 10380  002B00  3360               	rrcf	??_Lcd_Cmd& (0+255),f,b
 10381  002B02  0E01               	movlw	1
 10382  002B04  1760               	andwf	??_Lcd_Cmd& (0+255),f,b
 10383  002B06  3B60               	swapf	??_Lcd_Cmd& (0+255),f,b
 10384  002B08  4760               	rlncf	??_Lcd_Cmd& (0+255),f,b
 10385  002B0A  5083               	movf	3971,w,c	;volatile
 10386  002B0C  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
 10387  002B0E  0BDF               	andlw	-33
 10388  002B10  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
 10389  002B12  6E83               	movwf	3971,c	;volatile
 10390  002B14  C062  F060         	movff	Lcd_Cmd@data,??_Lcd_Cmd
 10391  002B18  0E01               	movlw	1
 10392  002B1A  1760               	andwf	??_Lcd_Cmd& (0+255),f,b
 10393  002B1C  3B60               	swapf	??_Lcd_Cmd& (0+255),f,b
 10394  002B1E  5083               	movf	3971,w,c	;volatile
 10395  002B20  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
 10396  002B22  0BEF               	andlw	-17
 10397  002B24  1960               	xorwf	??_Lcd_Cmd& (0+255),w,b
 10398  002B26  6E83               	movwf	3971,c	;volatile
 10399                           
 10400                           ; BSR set to: 0
 10401                           ;Library_LCD_2.h: 152: _delay(10);
 10402  002B28  0E03               	movlw	3
 10403  002B2A                     u4497:
 10404  002B2A  2EE8               	decfsz	wreg,f,c
 10405  002B2C  D7FE               	bra	u4497
 10406  002B2E  F000               	nop	
 10407                           
 10408                           ;Library_LCD_2.h: 153: PORTDbits.RD3 = 1; _delay((unsigned long)((5)*(48000000/4000000.0
      +                          ))); PORTDbits.RD3 = 0;
 10409  002B30  8683               	bsf	3971,3,c	;volatile
 10410  002B32  0E14               	movlw	20
 10411  002B34                     u4507:
 10412  002B34  2EE8               	decfsz	wreg,f,c
 10413  002B36  D7FE               	bra	u4507
 10414  002B38  9683               	bcf	3971,3,c	;volatile
 10415                           
 10416                           ;Library_LCD_2.h: 154: _delay((unsigned long)((5500)*(48000000/4000000.0)));
 10417  002B3A  0E56               	movlw	86
 10418  002B3C  0100               	movlb	0	; () banked
 10419  002B3E  6F60               	movwf	??_Lcd_Cmd& (0+255),b
 10420  002B40  0EB5               	movlw	181
 10421  002B42                     u4517:
 10422  002B42  2EE8               	decfsz	wreg,f,c
 10423  002B44  D7FE               	bra	u4517
 10424  002B46  2F60               	decfsz	??_Lcd_Cmd& (0+255),f,b
 10425  002B48  D7FC               	bra	u4517
 10426  002B4A  D000               	nop2	
 10427  002B4C  0012               	return		;funcret
 10428  002B4E                     __end_of_Lcd_Cmd:
 10429                           	opt stack 0
 10430                           tblptru	equ	0xFF8
 10431                           tblptrh	equ	0xFF7
 10432                           tblptrl	equ	0xFF6
 10433                           tablat	equ	0xFF5
 10434                           prodh	equ	0xFF4
 10435                           prodl	equ	0xFF3
 10436                           postinc0	equ	0xFEE
 10437                           wreg	equ	0xFE8
 10438                           indf2	equ	0xFDF
 10439                           postinc2	equ	0xFDE
 10440                           postdec2	equ	0xFDD
 10441                           fsr2h	equ	0xFDA
 10442                           fsr2l	equ	0xFD9
 10443                           status	equ	0xFD8
 10444                           
 10445 ;; *************** function _comparar *****************
 10446 ;; Defined at:
 10447 ;;		line 95 in file "main_014_Practice_CCP Comparacion_ADC.c"
 10448 ;; Parameters:    Size  Location     Type
 10449 ;;		None
 10450 ;; Auto vars:     Size  Location     Type
 10451 ;;		None
 10452 ;; Return value:  Size  Location     Type
 10453 ;;                  1    wreg      void 
 10454 ;; Registers used:
 10455 ;;		wreg, status,2, status,0, cstack
 10456 ;; Tracked objects:
 10457 ;;		On entry : 0/0
 10458 ;;		On exit  : 0/0
 10459 ;;		Unchanged: 0/0
 10460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10461 ;;      Params:         0       0       0       0       0       0       0       0       0
 10462 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10463 ;;      Temps:         18       0       0       0       0       0       0       0       0
 10464 ;;      Totals:        18       0       0       0       0       0       0       0       0
 10465 ;;Total ram usage:       18 bytes
 10466 ;; Hardware stack levels used:    1
 10467 ;; Hardware stack levels required when called:    2
 10468 ;; This function calls:
 10469 ;;		i2___ftdiv
 10470 ;;		i2___ftmul
 10471 ;;		i2___lwtoft
 10472 ;; This function is called by:
 10473 ;;		Interrupt level 2
 10474 ;; This function uses a non-reentrant model
 10475 ;;
 10476                           
 10477                           	psect	intcode
 10478  000008                     __pintcode:
 10479                           	opt stack 0
 10480  000008                     _comparar:
 10481                           	opt stack 23
 10482                           
 10483                           ;incstack = 0
 10484  000008  8255               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10485  00000A  ED3C  F016         	call	int_func,f	;refresh shadow registers
 10486                           tblptru	equ	0xFF8
 10487                           tblptrh	equ	0xFF7
 10488                           tblptrl	equ	0xFF6
 10489                           tablat	equ	0xFF5
 10490                           prodh	equ	0xFF4
 10491                           prodl	equ	0xFF3
 10492                           postinc0	equ	0xFEE
 10493                           wreg	equ	0xFE8
 10494                           indf2	equ	0xFDF
 10495                           postinc2	equ	0xFDE
 10496                           postdec2	equ	0xFDD
 10497                           fsr2h	equ	0xFDA
 10498                           fsr2l	equ	0xFD9
 10499                           status	equ	0xFD8
 10500                           
 10501                           	psect	intcode_body
 10502  002C78                     __pintcode_body:
 10503                           	opt stack 23
 10504  002C78                     int_func:
 10505                           	opt stack 23
 10506  002C78  0006               	pop		; remove dummy address from shadow register refresh
 10507  002C7A  CFFA F02A          	movff	pclath,??_comparar
 10508  002C7E  CFFB F02B          	movff	pclatu,??_comparar+1
 10509  002C82  CFE9 F02C          	movff	fsr0l,??_comparar+2
 10510  002C86  CFEA F02D          	movff	fsr0h,??_comparar+3
 10511  002C8A  CFE1 F02E          	movff	fsr1l,??_comparar+4
 10512  002C8E  CFE2 F02F          	movff	fsr1h,??_comparar+5
 10513  002C92  CFD9 F030          	movff	fsr2l,??_comparar+6
 10514  002C96  CFDA F031          	movff	fsr2h,??_comparar+7
 10515  002C9A  CFF3 F032          	movff	prodl,??_comparar+8
 10516  002C9E  CFF4 F033          	movff	prodh,??_comparar+9
 10517  002CA2  CFF6 F034          	movff	tblptrl,??_comparar+10
 10518  002CA6  CFF7 F035          	movff	tblptrh,??_comparar+11
 10519  002CAA  CFF8 F036          	movff	tblptru,??_comparar+12
 10520  002CAE  CFF5 F037          	movff	tablat,??_comparar+13
 10521  002CB2  C055  F038         	movff	btemp,??_comparar+14
 10522  002CB6  C056  F039         	movff	btemp+1,??_comparar+15
 10523  002CBA  C057  F03A         	movff	btemp+2,??_comparar+16
 10524  002CBE  C058  F03B         	movff	btemp+3,??_comparar+17
 10525                           
 10526                           ;main_014_Practice_CCP Comparacion_ADC.c: 97: INTCONbits.GIE = 0;
 10527  002CC2  9EF2               	bcf	intcon,7,c	;volatile
 10528                           
 10529                           ;main_014_Practice_CCP Comparacion_ADC.c: 98: if(CCP1IF == 1)
 10530  002CC4  A49E               	btfss	3998,2,c	;volatile
 10531  002CC6  D036               	goto	i2l111
 10532                           
 10533                           ;main_014_Practice_CCP Comparacion_ADC.c: 99: {
 10534                           ;main_014_Practice_CCP Comparacion_ADC.c: 100: T1CONbits.TMR1ON = 0;
 10535  002CC8  90CD               	bcf	4045,0,c	;volatile
 10536                           
 10537                           ;main_014_Practice_CCP Comparacion_ADC.c: 101: PIR1bits.CCP1IF = 0;
 10538  002CCA  949E               	bcf	3998,2,c	;volatile
 10539                           
 10540                           ;main_014_Practice_CCP Comparacion_ADC.c: 103: adc1 = ADRESH;
 10541  002CCC  CFC4 F03F          	movff	4036,_adc1	;volatile
 10542  002CD0  6A40               	clrf	_adc1+1,c
 10543                           
 10544                           ;main_014_Practice_CCP Comparacion_ADC.c: 104: adc1 = adc1<<8;
 10545  002CD2  503F               	movf	_adc1,w,c
 10546  002CD4  6E40               	movwf	_adc1+1,c
 10547  002CD6  6A3F               	clrf	_adc1,c
 10548                           
 10549                           ;main_014_Practice_CCP Comparacion_ADC.c: 105: adc1 = adc1 + ADRESL;
 10550  002CD8  50C3               	movf	4035,w,c	;volatile
 10551  002CDA  243F               	addwf	_adc1,w,c
 10552  002CDC  6E3F               	movwf	_adc1,c
 10553  002CDE  0E00               	movlw	0
 10554  002CE0  2040               	addwfc	_adc1+1,w,c
 10555  002CE2  6E40               	movwf	_adc1+1,c
 10556                           
 10557                           ;main_014_Practice_CCP Comparacion_ADC.c: 107: voltaje = adc1 * 4.72 /1024.0;
 10558  002CE4  0E0A               	movlw	10
 10559  002CE6  6E0F               	movwf	i2___ftmul@f2,c
 10560  002CE8  0E97               	movlw	151
 10561  002CEA  6E10               	movwf	i2___ftmul@f2+1,c
 10562  002CEC  0E40               	movlw	64
 10563  002CEE  6E11               	movwf	i2___ftmul@f2+2,c
 10564  002CF0  C03F  F009         	movff	_adc1,i2___lwtoft@c
 10565  002CF4  C040  F00A         	movff	_adc1+1,i2___lwtoft@c+1
 10566  002CF8  ECCD  F01D         	call	i2___lwtoft	;wreg free
 10567  002CFC  C009  F00C         	movff	?i2___lwtoft,i2___ftmul@f1
 10568  002D00  C00A  F00D         	movff	?i2___lwtoft+1,i2___ftmul@f1+1
 10569  002D04  C00B  F00E         	movff	?i2___lwtoft+2,i2___ftmul@f1+2
 10570  002D08  ECB7  F017         	call	i2___ftmul	;wreg free
 10571  002D0C  C00C  F01B         	movff	?i2___ftmul,i2___ftdiv@f1
 10572  002D10  C00D  F01C         	movff	?i2___ftmul+1,i2___ftdiv@f1+1
 10573  002D14  C00E  F01D         	movff	?i2___ftmul+2,i2___ftdiv@f1+2
 10574  002D18  0E00               	movlw	0
 10575  002D1A  6E1E               	movwf	i2___ftdiv@f2,c
 10576  002D1C  0E80               	movlw	128
 10577  002D1E  6E1F               	movwf	i2___ftdiv@f2+1,c
 10578  002D20  0E44               	movlw	68
 10579  002D22  6E20               	movwf	i2___ftdiv@f2+2,c
 10580  002D24  ECA5  F018         	call	i2___ftdiv	;wreg free
 10581  002D28  C01B  F03C         	movff	?i2___ftdiv,_voltaje
 10582  002D2C  C01C  F03D         	movff	?i2___ftdiv+1,_voltaje+1
 10583  002D30  C01D  F03E         	movff	?i2___ftdiv+2,_voltaje+2
 10584  002D34                     i2l111:
 10585  002D34  C03B  F058         	movff	??_comparar+17,btemp+3
 10586  002D38  C03A  F057         	movff	??_comparar+16,btemp+2
 10587  002D3C  C039  F056         	movff	??_comparar+15,btemp+1
 10588  002D40  C038  F055         	movff	??_comparar+14,btemp
 10589  002D44  C037  FFF5         	movff	??_comparar+13,tablat
 10590  002D48  C036  FFF8         	movff	??_comparar+12,tblptru
 10591  002D4C  C035  FFF7         	movff	??_comparar+11,tblptrh
 10592  002D50  C034  FFF6         	movff	??_comparar+10,tblptrl
 10593  002D54  C033  FFF4         	movff	??_comparar+9,prodh
 10594  002D58  C032  FFF3         	movff	??_comparar+8,prodl
 10595  002D5C  C031  FFDA         	movff	??_comparar+7,fsr2h
 10596  002D60  C030  FFD9         	movff	??_comparar+6,fsr2l
 10597  002D64  C02F  FFE2         	movff	??_comparar+5,fsr1h
 10598  002D68  C02E  FFE1         	movff	??_comparar+4,fsr1l
 10599  002D6C  C02D  FFEA         	movff	??_comparar+3,fsr0h
 10600  002D70  C02C  FFE9         	movff	??_comparar+2,fsr0l
 10601  002D74  C02B  FFFB         	movff	??_comparar+1,pclatu
 10602  002D78  C02A  FFFA         	movff	??_comparar,pclath
 10603  002D7C  9255               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10604  002D7E  0011               	retfie		f
 10605  002D80                     __end_of_comparar:
 10606                           	opt stack 0
 10607                           pclatu	equ	0xFFB
 10608                           pclath	equ	0xFFA
 10609                           tblptru	equ	0xFF8
 10610                           tblptrh	equ	0xFF7
 10611                           tblptrl	equ	0xFF6
 10612                           tablat	equ	0xFF5
 10613                           prodh	equ	0xFF4
 10614                           prodl	equ	0xFF3
 10615                           intcon	equ	0xFF2
 10616                           postinc0	equ	0xFEE
 10617                           fsr0h	equ	0xFEA
 10618                           fsr0l	equ	0xFE9
 10619                           wreg	equ	0xFE8
 10620                           fsr1h	equ	0xFE2
 10621                           fsr1l	equ	0xFE1
 10622                           indf2	equ	0xFDF
 10623                           postinc2	equ	0xFDE
 10624                           postdec2	equ	0xFDD
 10625                           fsr2h	equ	0xFDA
 10626                           fsr2l	equ	0xFD9
 10627                           status	equ	0xFD8
 10628                           
 10629 ;; *************** function i2___lwtoft *****************
 10630 ;; Defined at:
 10631 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
 10632 ;; Parameters:    Size  Location     Type
 10633 ;;  c               2    8[COMRAM] unsigned int 
 10634 ;; Auto vars:     Size  Location     Type
 10635 ;;		None
 10636 ;; Return value:  Size  Location     Type
 10637 ;;                  3    8[COMRAM] float 
 10638 ;; Registers used:
 10639 ;;		wreg, status,2, status,0, cstack
 10640 ;; Tracked objects:
 10641 ;;		On entry : 0/0
 10642 ;;		On exit  : 0/0
 10643 ;;		Unchanged: 0/0
 10644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10645 ;;      Params:         3       0       0       0       0       0       0       0       0
 10646 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10647 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10648 ;;      Totals:         3       0       0       0       0       0       0       0       0
 10649 ;;Total ram usage:        3 bytes
 10650 ;; Hardware stack levels used:    1
 10651 ;; Hardware stack levels required when called:    1
 10652 ;; This function calls:
 10653 ;;		i2___ftpack
 10654 ;; This function is called by:
 10655 ;;		_comparar
 10656 ;; This function uses a non-reentrant model
 10657 ;;
 10658                           
 10659                           	psect	text35
 10660  003B9A                     __ptext35:
 10661                           	opt stack 0
 10662  003B9A                     i2___lwtoft:
 10663                           	opt stack 23
 10664                           
 10665                           ;incstack = 0
 10666  003B9A  C009  F001         	movff	i2___lwtoft@c,i2___ftpack@arg
 10667  003B9E  C00A  F002         	movff	i2___lwtoft@c+1,i2___ftpack@arg+1
 10668  003BA2  6A03               	clrf	i2___ftpack@arg+2,c
 10669  003BA4  0E8E               	movlw	142
 10670  003BA6  6E04               	movwf	i2___ftpack@exp,c
 10671  003BA8  0E00               	movlw	0
 10672  003BAA  6E05               	movwf	i2___ftpack@sign,c
 10673  003BAC  ECA9  F01A         	call	i2___ftpack	;wreg free
 10674  003BB0  C001  F009         	movff	?i2___ftpack,?i2___lwtoft
 10675  003BB4  C002  F00A         	movff	?i2___ftpack+1,?i2___lwtoft+1
 10676  003BB8  C003  F00B         	movff	?i2___ftpack+2,?i2___lwtoft+2
 10677  003BBC  0012               	return	
 10678  003BBE                     __end_ofi2___lwtoft:
 10679                           	opt stack 0
 10680                           pclatu	equ	0xFFB
 10681                           pclath	equ	0xFFA
 10682                           tblptru	equ	0xFF8
 10683                           tblptrh	equ	0xFF7
 10684                           tblptrl	equ	0xFF6
 10685                           tablat	equ	0xFF5
 10686                           prodh	equ	0xFF4
 10687                           prodl	equ	0xFF3
 10688                           intcon	equ	0xFF2
 10689                           postinc0	equ	0xFEE
 10690                           fsr0h	equ	0xFEA
 10691                           fsr0l	equ	0xFE9
 10692                           wreg	equ	0xFE8
 10693                           fsr1h	equ	0xFE2
 10694                           fsr1l	equ	0xFE1
 10695                           indf2	equ	0xFDF
 10696                           postinc2	equ	0xFDE
 10697                           postdec2	equ	0xFDD
 10698                           fsr2h	equ	0xFDA
 10699                           fsr2l	equ	0xFD9
 10700                           status	equ	0xFD8
 10701                           
 10702 ;; *************** function i2___ftmul *****************
 10703 ;; Defined at:
 10704 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 10705 ;; Parameters:    Size  Location     Type
 10706 ;;  f1              3   11[COMRAM] float 
 10707 ;;  f2              3   14[COMRAM] float 
 10708 ;; Auto vars:     Size  Location     Type
 10709 ;;  __ftmul         3   21[COMRAM] unsigned um
 10710 ;;  __ftmul         1   25[COMRAM] unsigned char 
 10711 ;;  __ftmul         1   24[COMRAM] unsigned char 
 10712 ;;  __ftmul         1   20[COMRAM] unsigned char 
 10713 ;; Return value:  Size  Location     Type
 10714 ;;                  3   11[COMRAM] float 
 10715 ;; Registers used:
 10716 ;;		wreg, status,2, status,0, cstack
 10717 ;; Tracked objects:
 10718 ;;		On entry : 0/0
 10719 ;;		On exit  : 0/0
 10720 ;;		Unchanged: 0/0
 10721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10722 ;;      Params:         6       0       0       0       0       0       0       0       0
 10723 ;;      Locals:         6       0       0       0       0       0       0       0       0
 10724 ;;      Temps:          3       0       0       0       0       0       0       0       0
 10725 ;;      Totals:        15       0       0       0       0       0       0       0       0
 10726 ;;Total ram usage:       15 bytes
 10727 ;; Hardware stack levels used:    1
 10728 ;; Hardware stack levels required when called:    1
 10729 ;; This function calls:
 10730 ;;		i2___ftpack
 10731 ;; This function is called by:
 10732 ;;		_comparar
 10733 ;; This function uses a non-reentrant model
 10734 ;;
 10735                           
 10736                           	psect	text36
 10737  002F6E                     __ptext36:
 10738                           	opt stack 0
 10739  002F6E                     i2___ftmul:
 10740                           	opt stack 23
 10741                           
 10742                           ;incstack = 0
 10743  002F6E  C00E  F012         	movff	i2___ftmul@f1+2,??i2___ftmul
 10744  002F72  6A13               	clrf	(??i2___ftmul+1)& (0+255),c
 10745  002F74  6A14               	clrf	(??i2___ftmul+2)& (0+255),c
 10746  002F76  340D               	rlcf	i2___ftmul@f1+1,w,c
 10747  002F78  3612               	rlcf	??i2___ftmul& (0+255),f,c
 10748  002F7A  E301               	bnc	u409_41
 10749  002F7C  8013               	bsf	(??i2___ftmul+1)& (0+255),0,c
 10750  002F7E                     u409_41:
 10751  002F7E  5012               	movf	??i2___ftmul,w,c
 10752  002F80  6E15               	movwf	i2___ftmul@exp,c
 10753  002F82  5015               	movf	i2___ftmul@exp,w,c
 10754  002F84  A4D8               	btfss	status,2,c
 10755  002F86  D007               	goto	i2l606
 10756  002F88  0E00               	movlw	0
 10757  002F8A  6E0C               	movwf	?i2___ftmul,c
 10758  002F8C  0E00               	movlw	0
 10759  002F8E  6E0D               	movwf	?i2___ftmul+1,c
 10760  002F90  0E00               	movlw	0
 10761  002F92  6E0E               	movwf	?i2___ftmul+2,c
 10762  002F94  0012               	return	
 10763  002F96                     i2l606:
 10764  002F96  C011  F012         	movff	i2___ftmul@f2+2,??i2___ftmul
 10765  002F9A  6A13               	clrf	(??i2___ftmul+1)& (0+255),c
 10766  002F9C  6A14               	clrf	(??i2___ftmul+2)& (0+255),c
 10767  002F9E  3410               	rlcf	i2___ftmul@f2+1,w,c
 10768  002FA0  3612               	rlcf	??i2___ftmul& (0+255),f,c
 10769  002FA2  E301               	bnc	u411_41
 10770  002FA4  8013               	bsf	(??i2___ftmul+1)& (0+255),0,c
 10771  002FA6                     u411_41:
 10772  002FA6  5012               	movf	??i2___ftmul,w,c
 10773  002FA8  6E1A               	movwf	i2___ftmul@sign,c
 10774  002FAA  501A               	movf	i2___ftmul@sign,w,c
 10775  002FAC  A4D8               	btfss	status,2,c
 10776  002FAE  D007               	goto	i2l608
 10777  002FB0  0E00               	movlw	0
 10778  002FB2  6E0C               	movwf	?i2___ftmul,c
 10779  002FB4  0E00               	movlw	0
 10780  002FB6  6E0D               	movwf	?i2___ftmul+1,c
 10781  002FB8  0E00               	movlw	0
 10782  002FBA  6E0E               	movwf	?i2___ftmul+2,c
 10783  002FBC  0012               	return	
 10784  002FBE                     i2l608:
 10785  002FBE  501A               	movf	i2___ftmul@sign,w,c
 10786  002FC0  0F7B               	addlw	123
 10787  002FC2  2615               	addwf	i2___ftmul@exp,f,c
 10788  002FC4  C00E  F01A         	movff	i2___ftmul@f1+2,i2___ftmul@sign
 10789  002FC8  5011               	movf	i2___ftmul@f2+2,w,c
 10790  002FCA  1A1A               	xorwf	i2___ftmul@sign,f,c
 10791  002FCC  0E80               	movlw	128
 10792  002FCE  161A               	andwf	i2___ftmul@sign,f,c
 10793  002FD0  8E0D               	bsf	i2___ftmul@f1+1,7,c
 10794  002FD2  8E10               	bsf	i2___ftmul@f2+1,7,c
 10795  002FD4  0EFF               	movlw	255
 10796  002FD6  160F               	andwf	i2___ftmul@f2,f,c
 10797  002FD8  0EFF               	movlw	255
 10798  002FDA  1610               	andwf	i2___ftmul@f2+1,f,c
 10799  002FDC  0E00               	movlw	0
 10800  002FDE  1611               	andwf	i2___ftmul@f2+2,f,c
 10801  002FE0  0E00               	movlw	0
 10802  002FE2  6E16               	movwf	i2___ftmul@f3_as_product,c
 10803  002FE4  0E00               	movlw	0
 10804  002FE6  6E17               	movwf	i2___ftmul@f3_as_product+1,c
 10805  002FE8  0E00               	movlw	0
 10806  002FEA  6E18               	movwf	i2___ftmul@f3_as_product+2,c
 10807  002FEC  0E07               	movlw	7
 10808  002FEE  6E19               	movwf	i2___ftmul@cntr,c
 10809  002FF0  A00C               	btfss	i2___ftmul@f1,0,c
 10810  002FF2  D006               	goto	i2l610
 10811  002FF4  500F               	movf	i2___ftmul@f2,w,c
 10812  002FF6  2616               	addwf	i2___ftmul@f3_as_product,f,c
 10813  002FF8  5010               	movf	i2___ftmul@f2+1,w,c
 10814  002FFA  2217               	addwfc	i2___ftmul@f3_as_product+1,f,c
 10815  002FFC  5011               	movf	i2___ftmul@f2+2,w,c
 10816  002FFE  2218               	addwfc	i2___ftmul@f3_as_product+2,f,c
 10817  003000                     i2l610:
 10818  003000  90D8               	bcf	status,0,c
 10819  003002  320E               	rrcf	i2___ftmul@f1+2,f,c
 10820  003004  320D               	rrcf	i2___ftmul@f1+1,f,c
 10821  003006  320C               	rrcf	i2___ftmul@f1,f,c
 10822  003008  90D8               	bcf	status,0,c
 10823  00300A  360F               	rlcf	i2___ftmul@f2,f,c
 10824  00300C  3610               	rlcf	i2___ftmul@f2+1,f,c
 10825  00300E  3611               	rlcf	i2___ftmul@f2+2,f,c
 10826  003010  2E19               	decfsz	i2___ftmul@cntr,f,c
 10827  003012  D7EE               	goto	i2l609
 10828  003014  0E09               	movlw	9
 10829  003016  6E19               	movwf	i2___ftmul@cntr,c
 10830  003018  A00C               	btfss	i2___ftmul@f1,0,c
 10831  00301A  D006               	goto	i2l613
 10832  00301C  500F               	movf	i2___ftmul@f2,w,c
 10833  00301E  2616               	addwf	i2___ftmul@f3_as_product,f,c
 10834  003020  5010               	movf	i2___ftmul@f2+1,w,c
 10835  003022  2217               	addwfc	i2___ftmul@f3_as_product+1,f,c
 10836  003024  5011               	movf	i2___ftmul@f2+2,w,c
 10837  003026  2218               	addwfc	i2___ftmul@f3_as_product+2,f,c
 10838  003028                     i2l613:
 10839  003028  90D8               	bcf	status,0,c
 10840  00302A  320E               	rrcf	i2___ftmul@f1+2,f,c
 10841  00302C  320D               	rrcf	i2___ftmul@f1+1,f,c
 10842  00302E  320C               	rrcf	i2___ftmul@f1,f,c
 10843  003030  90D8               	bcf	status,0,c
 10844  003032  3218               	rrcf	i2___ftmul@f3_as_product+2,f,c
 10845  003034  3217               	rrcf	i2___ftmul@f3_as_product+1,f,c
 10846  003036  3216               	rrcf	i2___ftmul@f3_as_product,f,c
 10847  003038  2E19               	decfsz	i2___ftmul@cntr,f,c
 10848  00303A  D7EE               	goto	i2l612
 10849  00303C  C016  F001         	movff	i2___ftmul@f3_as_product,i2___ftpack@arg
 10850  003040  C017  F002         	movff	i2___ftmul@f3_as_product+1,i2___ftpack@arg+1
 10851  003044  C018  F003         	movff	i2___ftmul@f3_as_product+2,i2___ftpack@arg+2
 10852  003048  C015  F004         	movff	i2___ftmul@exp,i2___ftpack@exp
 10853  00304C  C01A  F005         	movff	i2___ftmul@sign,i2___ftpack@sign
 10854  003050  ECA9  F01A         	call	i2___ftpack	;wreg free
 10855  003054  C001  F00C         	movff	?i2___ftpack,?i2___ftmul
 10856  003058  C002  F00D         	movff	?i2___ftpack+1,?i2___ftmul+1
 10857  00305C  C003  F00E         	movff	?i2___ftpack+2,?i2___ftmul+2
 10858  003060  0012               	return	
 10859  003062                     __end_ofi2___ftmul:
 10860                           	opt stack 0
 10861                           pclatu	equ	0xFFB
 10862                           pclath	equ	0xFFA
 10863                           tblptru	equ	0xFF8
 10864                           tblptrh	equ	0xFF7
 10865                           tblptrl	equ	0xFF6
 10866                           tablat	equ	0xFF5
 10867                           prodh	equ	0xFF4
 10868                           prodl	equ	0xFF3
 10869                           intcon	equ	0xFF2
 10870                           postinc0	equ	0xFEE
 10871                           fsr0h	equ	0xFEA
 10872                           fsr0l	equ	0xFE9
 10873                           wreg	equ	0xFE8
 10874                           fsr1h	equ	0xFE2
 10875                           fsr1l	equ	0xFE1
 10876                           indf2	equ	0xFDF
 10877                           postinc2	equ	0xFDE
 10878                           postdec2	equ	0xFDD
 10879                           fsr2h	equ	0xFDA
 10880                           fsr2l	equ	0xFD9
 10881                           status	equ	0xFD8
 10882                           
 10883 ;; *************** function i2___ftdiv *****************
 10884 ;; Defined at:
 10885 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 10886 ;; Parameters:    Size  Location     Type
 10887 ;;  f1              3   26[COMRAM] float 
 10888 ;;  f2              3   29[COMRAM] float 
 10889 ;; Auto vars:     Size  Location     Type
 10890 ;;  __ftdiv         3   36[COMRAM] float 
 10891 ;;  __ftdiv         1   40[COMRAM] unsigned char 
 10892 ;;  __ftdiv         1   39[COMRAM] unsigned char 
 10893 ;;  __ftdiv         1   35[COMRAM] unsigned char 
 10894 ;; Return value:  Size  Location     Type
 10895 ;;                  3   26[COMRAM] float 
 10896 ;; Registers used:
 10897 ;;		wreg, status,2, status,0, cstack
 10898 ;; Tracked objects:
 10899 ;;		On entry : 0/0
 10900 ;;		On exit  : 0/0
 10901 ;;		Unchanged: 0/0
 10902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10903 ;;      Params:         6       0       0       0       0       0       0       0       0
 10904 ;;      Locals:         6       0       0       0       0       0       0       0       0
 10905 ;;      Temps:          3       0       0       0       0       0       0       0       0
 10906 ;;      Totals:        15       0       0       0       0       0       0       0       0
 10907 ;;Total ram usage:       15 bytes
 10908 ;; Hardware stack levels used:    1
 10909 ;; Hardware stack levels required when called:    1
 10910 ;; This function calls:
 10911 ;;		i2___ftpack
 10912 ;; This function is called by:
 10913 ;;		_comparar
 10914 ;; This function uses a non-reentrant model
 10915 ;;
 10916                           
 10917                           	psect	text37
 10918  00314A                     __ptext37:
 10919                           	opt stack 0
 10920  00314A                     i2___ftdiv:
 10921                           	opt stack 23
 10922                           
 10923                           ;incstack = 0
 10924  00314A  C01D  F021         	movff	i2___ftdiv@f1+2,??i2___ftdiv
 10925  00314E  6A22               	clrf	(??i2___ftdiv+1)& (0+255),c
 10926  003150  6A23               	clrf	(??i2___ftdiv+2)& (0+255),c
 10927  003152  341C               	rlcf	i2___ftdiv@f1+1,w,c
 10928  003154  3621               	rlcf	??i2___ftdiv& (0+255),f,c
 10929  003156  E301               	bnc	u404_41
 10930  003158  8022               	bsf	(??i2___ftdiv+1)& (0+255),0,c
 10931  00315A                     u404_41:
 10932  00315A  5021               	movf	??i2___ftdiv,w,c
 10933  00315C  6E28               	movwf	i2___ftdiv@exp,c
 10934  00315E  5028               	movf	i2___ftdiv@exp,w,c
 10935  003160  A4D8               	btfss	status,2,c
 10936  003162  D007               	goto	i2l574
 10937  003164  0E00               	movlw	0
 10938  003166  6E1B               	movwf	?i2___ftdiv,c
 10939  003168  0E00               	movlw	0
 10940  00316A  6E1C               	movwf	?i2___ftdiv+1,c
 10941  00316C  0E00               	movlw	0
 10942  00316E  6E1D               	movwf	?i2___ftdiv+2,c
 10943  003170  0012               	return	
 10944  003172                     i2l574:
 10945  003172  C020  F021         	movff	i2___ftdiv@f2+2,??i2___ftdiv
 10946  003176  6A22               	clrf	(??i2___ftdiv+1)& (0+255),c
 10947  003178  6A23               	clrf	(??i2___ftdiv+2)& (0+255),c
 10948  00317A  341F               	rlcf	i2___ftdiv@f2+1,w,c
 10949  00317C  3621               	rlcf	??i2___ftdiv& (0+255),f,c
 10950  00317E  E301               	bnc	u406_41
 10951  003180  8022               	bsf	(??i2___ftdiv+1)& (0+255),0,c
 10952  003182                     u406_41:
 10953  003182  5021               	movf	??i2___ftdiv,w,c
 10954  003184  6E29               	movwf	i2___ftdiv@sign,c
 10955  003186  5029               	movf	i2___ftdiv@sign,w,c
 10956  003188  A4D8               	btfss	status,2,c
 10957  00318A  D007               	goto	i2l576
 10958  00318C  0E00               	movlw	0
 10959  00318E  6E1B               	movwf	?i2___ftdiv,c
 10960  003190  0E00               	movlw	0
 10961  003192  6E1C               	movwf	?i2___ftdiv+1,c
 10962  003194  0E00               	movlw	0
 10963  003196  6E1D               	movwf	?i2___ftdiv+2,c
 10964  003198  0012               	return	
 10965  00319A                     i2l576:
 10966  00319A  0E00               	movlw	0
 10967  00319C  6E25               	movwf	i2___ftdiv@f3,c
 10968  00319E  0E00               	movlw	0
 10969  0031A0  6E26               	movwf	i2___ftdiv@f3+1,c
 10970  0031A2  0E00               	movlw	0
 10971  0031A4  6E27               	movwf	i2___ftdiv@f3+2,c
 10972  0031A6  5029               	movf	i2___ftdiv@sign,w,c
 10973  0031A8  0F89               	addlw	137
 10974  0031AA  5E28               	subwf	i2___ftdiv@exp,f,c
 10975  0031AC  C01D  F029         	movff	i2___ftdiv@f1+2,i2___ftdiv@sign
 10976  0031B0  5020               	movf	i2___ftdiv@f2+2,w,c
 10977  0031B2  1A29               	xorwf	i2___ftdiv@sign,f,c
 10978  0031B4  0E80               	movlw	128
 10979  0031B6  1629               	andwf	i2___ftdiv@sign,f,c
 10980  0031B8  8E1C               	bsf	i2___ftdiv@f1+1,7,c
 10981  0031BA  0EFF               	movlw	255
 10982  0031BC  161B               	andwf	i2___ftdiv@f1,f,c
 10983  0031BE  0EFF               	movlw	255
 10984  0031C0  161C               	andwf	i2___ftdiv@f1+1,f,c
 10985  0031C2  0E00               	movlw	0
 10986  0031C4  161D               	andwf	i2___ftdiv@f1+2,f,c
 10987  0031C6  8E1F               	bsf	i2___ftdiv@f2+1,7,c
 10988  0031C8  0EFF               	movlw	255
 10989  0031CA  161E               	andwf	i2___ftdiv@f2,f,c
 10990  0031CC  0EFF               	movlw	255
 10991  0031CE  161F               	andwf	i2___ftdiv@f2+1,f,c
 10992  0031D0  0E00               	movlw	0
 10993  0031D2  1620               	andwf	i2___ftdiv@f2+2,f,c
 10994  0031D4  0E18               	movlw	24
 10995  0031D6  6E24               	movwf	i2___ftdiv@cntr,c
 10996  0031D8  90D8               	bcf	status,0,c
 10997  0031DA  3625               	rlcf	i2___ftdiv@f3,f,c
 10998  0031DC  3626               	rlcf	i2___ftdiv@f3+1,f,c
 10999  0031DE  3627               	rlcf	i2___ftdiv@f3+2,f,c
 11000  0031E0  501E               	movf	i2___ftdiv@f2,w,c
 11001  0031E2  5C1B               	subwf	i2___ftdiv@f1,w,c
 11002  0031E4  501F               	movf	i2___ftdiv@f2+1,w,c
 11003  0031E6  581C               	subwfb	i2___ftdiv@f1+1,w,c
 11004  0031E8  5020               	movf	i2___ftdiv@f2+2,w,c
 11005  0031EA  581D               	subwfb	i2___ftdiv@f1+2,w,c
 11006  0031EC  A0D8               	btfss	status,0,c
 11007  0031EE  D007               	goto	i2l578
 11008  0031F0  501E               	movf	i2___ftdiv@f2,w,c
 11009  0031F2  5E1B               	subwf	i2___ftdiv@f1,f,c
 11010  0031F4  501F               	movf	i2___ftdiv@f2+1,w,c
 11011  0031F6  5A1C               	subwfb	i2___ftdiv@f1+1,f,c
 11012  0031F8  5020               	movf	i2___ftdiv@f2+2,w,c
 11013  0031FA  5A1D               	subwfb	i2___ftdiv@f1+2,f,c
 11014  0031FC  8025               	bsf	i2___ftdiv@f3,0,c
 11015  0031FE                     i2l578:
 11016  0031FE  90D8               	bcf	status,0,c
 11017  003200  361B               	rlcf	i2___ftdiv@f1,f,c
 11018  003202  361C               	rlcf	i2___ftdiv@f1+1,f,c
 11019  003204  361D               	rlcf	i2___ftdiv@f1+2,f,c
 11020  003206  2E24               	decfsz	i2___ftdiv@cntr,f,c
 11021  003208  D7E7               	goto	i2l577
 11022  00320A  C025  F001         	movff	i2___ftdiv@f3,i2___ftpack@arg
 11023  00320E  C026  F002         	movff	i2___ftdiv@f3+1,i2___ftpack@arg+1
 11024  003212  C027  F003         	movff	i2___ftdiv@f3+2,i2___ftpack@arg+2
 11025  003216  C028  F004         	movff	i2___ftdiv@exp,i2___ftpack@exp
 11026  00321A  C029  F005         	movff	i2___ftdiv@sign,i2___ftpack@sign
 11027  00321E  ECA9  F01A         	call	i2___ftpack	;wreg free
 11028  003222  C001  F01B         	movff	?i2___ftpack,?i2___ftdiv
 11029  003226  C002  F01C         	movff	?i2___ftpack+1,?i2___ftdiv+1
 11030  00322A  C003  F01D         	movff	?i2___ftpack+2,?i2___ftdiv+2
 11031  00322E  0012               	return	
 11032  003230                     __end_ofi2___ftdiv:
 11033                           	opt stack 0
 11034                           pclatu	equ	0xFFB
 11035                           pclath	equ	0xFFA
 11036                           tblptru	equ	0xFF8
 11037                           tblptrh	equ	0xFF7
 11038                           tblptrl	equ	0xFF6
 11039                           tablat	equ	0xFF5
 11040                           prodh	equ	0xFF4
 11041                           prodl	equ	0xFF3
 11042                           intcon	equ	0xFF2
 11043                           postinc0	equ	0xFEE
 11044                           fsr0h	equ	0xFEA
 11045                           fsr0l	equ	0xFE9
 11046                           wreg	equ	0xFE8
 11047                           fsr1h	equ	0xFE2
 11048                           fsr1l	equ	0xFE1
 11049                           indf2	equ	0xFDF
 11050                           postinc2	equ	0xFDE
 11051                           postdec2	equ	0xFDD
 11052                           fsr2h	equ	0xFDA
 11053                           fsr2l	equ	0xFD9
 11054                           status	equ	0xFD8
 11055                           
 11056 ;; *************** function i2___ftpack *****************
 11057 ;; Defined at:
 11058 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 11059 ;; Parameters:    Size  Location     Type
 11060 ;;  arg             3    0[COMRAM] unsigned um
 11061 ;;  exp             1    3[COMRAM] unsigned char 
 11062 ;;  sign            1    4[COMRAM] unsigned char 
 11063 ;; Auto vars:     Size  Location     Type
 11064 ;;		None
 11065 ;; Return value:  Size  Location     Type
 11066 ;;                  3    0[COMRAM] float 
 11067 ;; Registers used:
 11068 ;;		wreg, status,2, status,0
 11069 ;; Tracked objects:
 11070 ;;		On entry : 0/0
 11071 ;;		On exit  : 0/0
 11072 ;;		Unchanged: 0/0
 11073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11074 ;;      Params:         5       0       0       0       0       0       0       0       0
 11075 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11076 ;;      Temps:          3       0       0       0       0       0       0       0       0
 11077 ;;      Totals:         8       0       0       0       0       0       0       0       0
 11078 ;;Total ram usage:        8 bytes
 11079 ;; Hardware stack levels used:    1
 11080 ;; This function calls:
 11081 ;;		Nothing
 11082 ;; This function is called by:
 11083 ;;		i2___ftdiv
 11084 ;;		i2___ftmul
 11085 ;;		i2___lwtoft
 11086 ;; This function uses a non-reentrant model
 11087 ;;
 11088                           
 11089                           	psect	text38
 11090  003552                     __ptext38:
 11091                           	opt stack 0
 11092  003552                     i2___ftpack:
 11093                           	opt stack 23
 11094                           
 11095                           ;incstack = 0
 11096  003552  5004               	movf	i2___ftpack@exp,w,c
 11097  003554  B4D8               	btfsc	status,2,c
 11098  003556  D005               	goto	i2u332_40
 11099  003558  5001               	movf	i2___ftpack@arg,w,c
 11100  00355A  1002               	iorwf	i2___ftpack@arg+1,w,c
 11101  00355C  1003               	iorwf	i2___ftpack@arg+2,w,c
 11102  00355E  A4D8               	btfss	status,2,c
 11103  003560  D00C               	goto	i2l510
 11104  003562                     i2u332_40:
 11105  003562  0E00               	movlw	0
 11106  003564  6E01               	movwf	?i2___ftpack,c
 11107  003566  0E00               	movlw	0
 11108  003568  6E02               	movwf	?i2___ftpack+1,c
 11109  00356A  0E00               	movlw	0
 11110  00356C  6E03               	movwf	?i2___ftpack+2,c
 11111  00356E  0012               	return	
 11112  003570  2A04               	incf	i2___ftpack@exp,f,c
 11113  003572  90D8               	bcf	status,0,c
 11114  003574  3203               	rrcf	i2___ftpack@arg+2,f,c
 11115  003576  3202               	rrcf	i2___ftpack@arg+1,f,c
 11116  003578  3201               	rrcf	i2___ftpack@arg,f,c
 11117  00357A                     i2l510:
 11118  00357A  0E00               	movlw	0
 11119  00357C  1401               	andwf	i2___ftpack@arg,w,c
 11120  00357E  6E06               	movwf	??i2___ftpack& (0+255),c
 11121  003580  0E00               	movlw	0
 11122  003582  1402               	andwf	i2___ftpack@arg+1,w,c
 11123  003584  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 11124  003586  0EFE               	movlw	254
 11125  003588  1403               	andwf	i2___ftpack@arg+2,w,c
 11126  00358A  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 11127  00358C  5006               	movf	??i2___ftpack,w,c
 11128  00358E  1007               	iorwf	??i2___ftpack+1,w,c
 11129  003590  1008               	iorwf	??i2___ftpack+2,w,c
 11130  003592  B4D8               	btfsc	status,2,c
 11131  003594  D00C               	goto	i2l513
 11132  003596  D7EC               	goto	i2l511
 11133  003598  2A04               	incf	i2___ftpack@exp,f,c
 11134  00359A  0E01               	movlw	1
 11135  00359C  2601               	addwf	i2___ftpack@arg,f,c
 11136  00359E  0E00               	movlw	0
 11137  0035A0  2202               	addwfc	i2___ftpack@arg+1,f,c
 11138  0035A2  0E00               	movlw	0
 11139  0035A4  2203               	addwfc	i2___ftpack@arg+2,f,c
 11140  0035A6  90D8               	bcf	status,0,c
 11141  0035A8  3203               	rrcf	i2___ftpack@arg+2,f,c
 11142  0035AA  3202               	rrcf	i2___ftpack@arg+1,f,c
 11143  0035AC  3201               	rrcf	i2___ftpack@arg,f,c
 11144  0035AE                     i2l513:
 11145  0035AE  0E00               	movlw	0
 11146  0035B0  1401               	andwf	i2___ftpack@arg,w,c
 11147  0035B2  6E06               	movwf	??i2___ftpack& (0+255),c
 11148  0035B4  0E00               	movlw	0
 11149  0035B6  1402               	andwf	i2___ftpack@arg+1,w,c
 11150  0035B8  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 11151  0035BA  0EFF               	movlw	255
 11152  0035BC  1403               	andwf	i2___ftpack@arg+2,w,c
 11153  0035BE  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 11154  0035C0  5006               	movf	??i2___ftpack,w,c
 11155  0035C2  1007               	iorwf	??i2___ftpack+1,w,c
 11156  0035C4  1008               	iorwf	??i2___ftpack+2,w,c
 11157  0035C6  B4D8               	btfsc	status,2,c
 11158  0035C8  D006               	goto	i2l516
 11159  0035CA  D7E6               	goto	i2l514
 11160  0035CC  0604               	decf	i2___ftpack@exp,f,c
 11161  0035CE  90D8               	bcf	status,0,c
 11162  0035D0  3601               	rlcf	i2___ftpack@arg,f,c
 11163  0035D2  3602               	rlcf	i2___ftpack@arg+1,f,c
 11164  0035D4  3603               	rlcf	i2___ftpack@arg+2,f,c
 11165  0035D6                     i2l516:
 11166  0035D6  BE02               	btfsc	i2___ftpack@arg+1,7,c
 11167  0035D8  D003               	goto	i2u336_40
 11168  0035DA  0E02               	movlw	2
 11169  0035DC  6004               	cpfslt	i2___ftpack@exp,c
 11170  0035DE  D7F6               	goto	i2l517
 11171  0035E0                     i2u336_40:
 11172  0035E0  A004               	btfss	i2___ftpack@exp,0,c
 11173  0035E2  9E02               	bcf	i2___ftpack@arg+1,7,c
 11174  0035E4  90D8               	bcf	status,0,c
 11175  0035E6  3204               	rrcf	i2___ftpack@exp,f,c
 11176  0035E8  5004               	movf	i2___ftpack@exp,w,c
 11177  0035EA  1203               	iorwf	i2___ftpack@arg+2,f,c
 11178  0035EC  5005               	movf	i2___ftpack@sign,w,c
 11179  0035EE  A4D8               	btfss	status,2,c
 11180  0035F0  8E03               	bsf	i2___ftpack@arg+2,7,c
 11181  0035F2  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
 11182  0035F6  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 11183  0035FA  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 11184  0035FE  0012               	return	
 11185  003600                     __end_ofi2___ftpack:
 11186                           	opt stack 0
 11187                           pclatu	equ	0xFFB
 11188                           pclath	equ	0xFFA
 11189                           tblptru	equ	0xFF8
 11190                           tblptrh	equ	0xFF7
 11191                           tblptrl	equ	0xFF6
 11192                           tablat	equ	0xFF5
 11193                           prodh	equ	0xFF4
 11194                           prodl	equ	0xFF3
 11195                           intcon	equ	0xFF2
 11196                           postinc0	equ	0xFEE
 11197                           fsr0h	equ	0xFEA
 11198                           fsr0l	equ	0xFE9
 11199                           wreg	equ	0xFE8
 11200                           fsr1h	equ	0xFE2
 11201                           fsr1l	equ	0xFE1
 11202                           indf2	equ	0xFDF
 11203                           postinc2	equ	0xFDE
 11204                           postdec2	equ	0xFDD
 11205                           fsr2h	equ	0xFDA
 11206                           fsr2l	equ	0xFD9
 11207                           status	equ	0xFD8
 11208                           pclatu	equ	0xFFB
 11209                           pclath	equ	0xFFA
 11210                           tblptru	equ	0xFF8
 11211                           tblptrh	equ	0xFF7
 11212                           tblptrl	equ	0xFF6
 11213                           tablat	equ	0xFF5
 11214                           prodh	equ	0xFF4
 11215                           prodl	equ	0xFF3
 11216                           intcon	equ	0xFF2
 11217                           postinc0	equ	0xFEE
 11218                           fsr0h	equ	0xFEA
 11219                           fsr0l	equ	0xFE9
 11220                           wreg	equ	0xFE8
 11221                           fsr1h	equ	0xFE2
 11222                           fsr1l	equ	0xFE1
 11223                           indf2	equ	0xFDF
 11224                           postinc2	equ	0xFDE
 11225                           postdec2	equ	0xFDD
 11226                           fsr2h	equ	0xFDA
 11227                           fsr2l	equ	0xFD9
 11228                           status	equ	0xFD8
 11229                           
 11230                           	psect	rparam
 11231  0000                     pclatu	equ	0xFFB
 11232                           pclath	equ	0xFFA
 11233                           tblptru	equ	0xFF8
 11234                           tblptrh	equ	0xFF7
 11235                           tblptrl	equ	0xFF6
 11236                           tablat	equ	0xFF5
 11237                           prodh	equ	0xFF4
 11238                           prodl	equ	0xFF3
 11239                           intcon	equ	0xFF2
 11240                           postinc0	equ	0xFEE
 11241                           fsr0h	equ	0xFEA
 11242                           fsr0l	equ	0xFE9
 11243                           wreg	equ	0xFE8
 11244                           fsr1h	equ	0xFE2
 11245                           fsr1l	equ	0xFE1
 11246                           indf2	equ	0xFDF
 11247                           postinc2	equ	0xFDE
 11248                           postdec2	equ	0xFDD
 11249                           fsr2h	equ	0xFDA
 11250                           fsr2l	equ	0xFD9
 11251                           status	equ	0xFD8
 11252                           
 11253                           	psect	temp
 11254  000055                     btemp:
 11255                           	opt stack 0
 11256  000055                     	ds	1
 11257  0000                     int$flags	set	btemp
 11258  0000                     wtemp6	set	btemp+1
 11259                           pclatu	equ	0xFFB
 11260                           pclath	equ	0xFFA
 11261                           tblptru	equ	0xFF8
 11262                           tblptrh	equ	0xFF7
 11263                           tblptrl	equ	0xFF6
 11264                           tablat	equ	0xFF5
 11265                           prodh	equ	0xFF4
 11266                           prodl	equ	0xFF3
 11267                           intcon	equ	0xFF2
 11268                           postinc0	equ	0xFEE
 11269                           fsr0h	equ	0xFEA
 11270                           fsr0l	equ	0xFE9
 11271                           wreg	equ	0xFE8
 11272                           fsr1h	equ	0xFE2
 11273                           fsr1l	equ	0xFE1
 11274                           indf2	equ	0xFDF
 11275                           postinc2	equ	0xFDE
 11276                           postdec2	equ	0xFDD
 11277                           fsr2h	equ	0xFDA
 11278                           fsr2l	equ	0xFD9
 11279                           status	equ	0xFD8


Data Sizes:
    Strings     71
    Constant    145
    Data        0
    BSS         87
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     59      84
    BANK0           160    121     143
    BANK1           256    220     240
    BANK2           256      0      20
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> floor@expon(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 15
		 -> sin@coeff_a(CODE[15]), sin@coeff_b(CODE[12]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_8(CODE[9]), STR_7(CODE[8]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_3(CODE[8]), STR_2(CODE[15]), STR_1(CODE[13]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> buffer4(COMRAM[20]), buffer3(BANK0[20]), buffer2(BANK1[20]), main@buffer1(BANK1[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Out2@buffer	PTR unsigned char  size(2) Largest target is 20
		 -> buffer4(COMRAM[20]), buffer3(BANK0[20]), STR_4(CODE[9]), buffer2(BANK1[20]), 
		 -> main@buffer1(BANK1[16]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _comparar in COMRAM

    _comparar->i2___ftdiv
    i2___lwtoft->i2___ftpack
    i2___ftmul->i2___lwtoft
    i2___ftdiv->i2___ftmul

Critical Paths under _main in BANK0

    _main->_sprintf
    _sqrt->___ftdiv
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    _cos->_sin
    _sin->___ftdiv
    _floor->___altoft
    ___fttol->_scale
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___ftsub->_floor
    ___ftadd->_fround
    ___ftneg->___ftmul
    ___ftdiv->___ftsub
    ___lwtoft->___ftpack
    _Lcd_Out2->_Lcd_Chr_CP
    _Lcd_Out2->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd

Critical Paths under _comparar in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _comparar in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _comparar in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _comparar in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _comparar in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _comparar in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _comparar in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _comparar in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               222   222      0  170240
                                            119 BANK0      2     2      0
                                              0 BANK1    220   220      0
                            _Lcd_Cmd
                           _Lcd_Init
                           _Lcd_Out2
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lltoft
                           ___lwtoft
                             ___wmul
                     _configstandard
                                _cos
                            _sprintf
                               _sqrt
 ---------------------------------------------------------------------------------
 (1) _sqrt                                                19    16      3   15528
                                             96 BANK0     19    16      3
                            ___ftdiv (ARG)
                             ___ftge
                            ___ftmul
                            ___ftsub
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             44    37      7   65284
                                             81 BANK0     38    31      7
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                7     4      3   14934
                                             35 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              10     7      3   14736
                                             35 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1664
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1820
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     455
                                              0 BANK0     15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     598
                                              0 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2765
                                              8 BANK0      9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     767
                                             13 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     618
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _cos                                                  6     3      3   59723
                                            109 BANK0      6     3      3
                            ___ftadd
                             ___ftge
                                _sin
 ---------------------------------------------------------------------------------
 (2) _sin                                                 13    10      3   53001
                                             96 BANK0     13    10      3
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                          _eval_poly
                              _floor
 ---------------------------------------------------------------------------------
 (3) _floor                                                8     5      3   10535
                                             67 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                7     2      5     360
                                              0 BANK0      7     2      5
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     556
                                             42 BANK0     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6    1352
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    2758
                                             57 BANK0     10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           12     5      7   16823
                                             57 BANK0     12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    3351
                                             14 BANK0      6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    7656
                                             20 BANK0     15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    5983
                                             75 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
                              _floor (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    5182
                                             45 BANK0     12     6      6
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                             ___wmul (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     425
                                             35 BANK0      3     0      3
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             15     9      6    4418
                                             81 BANK0     15     9      6
                            ___ftadd (ARG)
                             ___ftge (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                            ___ftsub (ARG)
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (1) _configstandard                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             3     0      3    2692
                                              8 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2544
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _Lcd_Out2                                             5     2      3    1749
                                              3 BANK0      5     2      3
                         _Lcd_Chr_CP
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Chr_CP                                           3     3      0     176
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     314
                                              3 BANK0      2     2      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     176
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _comparar                                            18    18      0    2153
                                             41 COMRAM    18    18      0
                          i2___ftdiv
                          i2___ftmul
                         i2___lwtoft
 ---------------------------------------------------------------------------------
 (7) i2___lwtoft                                           3     0      3     513
                                              8 COMRAM     3     0      3
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (7) i2___ftmul                                           15     9      6     843
                                             11 COMRAM    15     9      6
                         i2___ftpack
                         i2___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (7) i2___ftdiv                                           15     9      6     797
                                             26 COMRAM    15     9      6
                          i2___ftmul (ARG)
                         i2___ftpack
                         i2___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (8) i2___ftpack                                           8     3      5     465
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Cmd
   _Lcd_Init
     _Lcd_Cmd
   _Lcd_Out2
     _Lcd_Chr_CP
     _Lcd_Cmd
   ___ftadd
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   ___ftdiv
     ___ftadd (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftpack (ARG)
     ___ftpack (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
       _floor (ARG)
         ___altoft
           ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _frexp
     ___lltoft (ARG)
       ___ftpack
     ___lwtoft (ARG)
       ___ftpack
     _eval_poly (ARG)
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___ftpack (ARG)
     ___lltoft (ARG)
       ___ftpack
     ___lwtoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___ftneg
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   ___lltoft
     ___ftpack
   ___lwtoft
     ___ftpack
   ___wmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
   _configstandard
   _cos
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     _sin
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
           _floor (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftadd
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftge
             ___fttol
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _frexp
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _eval_poly (ARG)
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftsub
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
         _floor (ARG)
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _frexp
       _eval_poly
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _floor
         ___altoft
           ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _frexp
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftsub
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
       _floor (ARG)
         ___altoft
           ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _frexp
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _sqrt
     ___ftdiv (ARG)
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
         _floor (ARG)
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _frexp
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _eval_poly (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
       _floor (ARG)
         ___altoft
           ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _frexp

 _comparar (ROOT)
   i2___ftdiv
     i2___ftmul (ARG)
       i2___ftpack
       i2___lwtoft (ARG)
         i2___ftpack
     i2___ftpack (ARG)
     i2___lwtoft (ARG)
       i2___ftpack
   i2___ftmul
     i2___ftpack
     i2___lwtoft (ARG)
       i2___ftpack
   i2___lwtoft
     i2___ftpack

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      14       9        7.8%
BITBANK1           100      0       0       6        0.0%
BANK1              100     DC      F0       7       93.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     79      8F       5       89.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3B      54       1       89.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1E7      20        0.0%
DATA                 0      0     1E7       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri May 18 11:39:48 2018

           ___altoft@exp 00A1            ___altoft@sign 00A2                       l60 2704  
                     l80 363E                       l81 360E                       l82 3614  
                     l83 361A                       l85 3670                       l86 3646  
                     l78 3622                       l79 3606             ___awdiv@sign 006B  
    ___wmul@multiplicand 0070              __CFG_BORV$3 000000               i2___ftpack 3552  
           __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000  
           __CFG_CP3$OFF 000000             ___ftadd@exp1 0098             ___ftadd@exp2 0097  
           ___ftadd@sign 0096                      l200 0BB8                      l121 178C  
                    l202 0BDE                      l122 1688                      l203 0C1C  
                    l131 18A6                      l204 0CE0                      l124 16B8  
                    l221 0E0C                      l213 0D46                      l125 16CC  
                    l230 0E60                      l222 0DF6                      l118 159A  
                    l207 0C8A                      l127 186C                      l119 1416  
                    l160 1C46                      l232 0F16                      l128 17B2  
                    l161 1B68                      l241 10B6                      l233 0F00  
                    l225 0E32                      l217 0DB2                      l154 1FB4  
                    l242 10A0                      l226 0E1C                      l218 0DCC  
                    l251 118A                      l235 0F3A                      l171 08E8  
                    l164 1C20                      l252 11AC                      l244 10FA  
                    l236 0F3E                      l180 094E                      l172 0904  
                    l157 208A                      l165 1D7E                      l245 1112  
                    l237 0F60                      l229 0EF6                      l510 34CC  
                    l254 11CE                      l238 1094                      l190 0A30  
                    l182 0A22                      l174 091E                      l511 34C2  
                    l167 1E36                      l255 11D6                      l239 0FB0  
                    l191 0A66                      l183 0A0C                      l175 0916  
                    l600 36FA                      l440 3740                      l256 11FA  
                    l184 09D2                      l513 3500                      l441 3750  
                    l257 1202                      l249 116A                      l514 34EA  
                    l610 2F0C                      l258 124A                      l443 376E  
                    l259 122A                      l195 10C0                      l187 0A34  
                    l516 3528                      l612 2F24                      l444 3766  
                    l460 397A                      l268 131C                      l196 0A7A  
                    l517 351E                      l541 238A                      l613 2F34  
                    l357 38E0                      l461 3984                      l453 3940  
                    l269 1292                      l197 0ABC                      l550 241A  
                    l606 2EA2                      l358 38D4                      l630 2E16  
                    l462 3992                      l454 394C                      l623 3ABE  
                    l447 378E                      l199 0B50                      l608 2ECA  
                    l480 2B8C                      l448 3798                      l456 3962  
                    l617 3B66                      l545 23B4                      l609 2EFC  
                    l481 2BCE                      l449 37A6                      l457 395A  
                    l474 345A                      l490 2C60                      l482 2BFE  
                    l642 3BD8                      l555 2410                      l635 2E4A  
                    l627 2DAE                      l491 2C54                      l564 244E  
                    l556 2406                      l636 2E3E                      l484 2C3C  
                    l565 2444                      l629 2E26                      l485 2C2C  
                    l574 308C                      l638 2E66                      l478 2B6E  
                    l582 27E6                      l567 2472                      l576 30B4  
                    l568 248E                      l760 2328                      l672 3814  
                    l584 2812                      l577 30F2                      l569 24BE  
                    l673 3822                      l585 284C                      l578 3118  
                    l914 33D8                      l922 3270                      l682 39E4  
                    l690 3A0C                      l594 28D4                      l586 2874  
                    l915 3358                      l931 3852                      l923 3262  
                    l683 39F2                      l595 28C8                      l668 37E0  
                    l588 28B0                      l925 328A                      l757 20F8  
                    l669 37D4                      l589 28A0                      l926 3306  
                    l758 21DE                      l678 39BC                      l599 36CA  
                    l759 223A                      l679 39B0                      l689 3A18  
             i2___lwtoft 3B9A                      l886 2522                      l887 2514  
                    l889 2572             __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000  
                    _cos 33F0          ?_configstandard 0001                      _sin 20CC  
           ___awmod@sign 0065              main@Voltage 01B7                      prod 000FF3  
                    wreg 000FE8             __CFG_LVP$OFF 000000              main@buffer1 019B  
           ___ftdiv@cntr 00BA             ___ftdiv@sign 00BF             __CFG_WDT$OFF 000000  
                   l4018 15A8                     l4054 17A2                     l4064 1806  
                   l2556 3726                     l3620 0F00                     l3540 0C64  
                   l3532 0C1C                     ?_cos 00CD                     l3560 0D4A  
                   l3752 1292                     l3682 1116                     l3756 1318  
                   l3596 0E1C                     l3588 0DF6                     ?_sin 00C0  
                   STR_1 08A1                     STR_2 0892                     STR_3 08D1  
                   STR_4 08C0                     STR_5 08B7                     STR_6 08B7  
                   STR_7 08C9                     STR_8 08AE                     u2140 34B4  
                   u2300 23A6                     u3100 28DA                     u3021 27CA  
                   u2231 2348                     u2400 2456                     u3200 21DA  
                   u4000 1346                     u2241 235C                     u3041 27F6  
                   u2330 23E4                     u3210 21DC                     u2180 3532  
                   u2270 237C                     u2441 2E8A                     u3410 3666  
                   u2370 2422                     u3250 37E4                     u3170 2C66  
                   u2531 2D92                     u3420 3690                     u2620 387A  
                   u2461 2EB2                     u2550 2DCC                     u4230 1806  
                   u2631 3074                     u3280 39C0                     u2720 3772  
                   u3417 365C                     u3610 0C64                     u3530 0AF4  
                   u3427 3686                     u2651 309C                     u2555 2DC4  
                   u4307 1A0E                     u2628 387E                     u3460 09AE  
                   u4317 2972                     u2590 2E50                     u3710 0E40  
                   u4407 26CE                     u4327 297C                     u3535 0AEA  
                   u2840 327C                     u4417 26E0                     u4337 29F6  
                   u2905 28FE                     u4257 137A                     u3650 0D82  
                   u3570 0BEE                     u4507 2B34                     u4427 26F2  
                   u4347 2A00                     u2915 2918                     u4267 154C  
                   u2780 3966                     u3740 0F24                     u3580 0C2E  
                   u4517 2B42                     u4437 271E                     u4357 2A08  
                   u2925 293C                     u4277 1678                     u3750 0F34  
                   u4447 2736                     u4367 2A14                     u4287 16BA  
                   u3840 114E                     u4457 2764                     u4377 2698  
                   u4297 1924                     u2875 2A32                     u4467 277C  
                   u4387 26AA                     u4477 2AA6                     u2885 2A4C  
                   u4397 26BC                     u4487 2AB0                     u2895 2A70  
                   u3960 1252                     u4497 2B2A                     u3970 1270  
                   u3990 132C                     _adc1 003F                     _main 1354  
           ___ftpack@arg 0060                     cos@f 00CD             ___ftpack@exp 0063  
                   fsr0h 000FEA                     fsr1h 000FE2                     fsr2h 000FDA  
                   fsr0l 000FE9                     indf2 000FDF                     fsr1l 000FE1  
                   fsr2l 000FD9                     btemp 0055                     _sqrt 24E4  
                   sin@f 00C0                     sin@y 00C3                     prodh 000FF4  
                   prodl 000FF3                     start 000E            __CFG_IESO$OFF 000000  
           i2___ftdiv@f1 001B             i2___ftdiv@f2 001E             i2___ftdiv@f3 0025  
           _sprintf$1434 00BE          __end_of_Lcd_Cmd 2B4E            __CFG_MCLRE$ON 000000  
           ___ftmul@cntr 0081             i2___ftmul@f1 000C             i2___ftmul@f2 000F  
           ___param_bank 000000             ___ftmul@sign 0082               _Lcd_Chr_CP 28EC  
           ___fttol@exp1 0098                    ??_cos 00D0             ___fttol@lval 0094  
                  ??_sin 00C3           Lcd_Out2@buffer 0064            __CFG_PLLDIV$2 000000  
         __CFG_CCP2MX$ON 000000                    ?_main 0001          __end_of___awdiv 37B0  
        __end_of___ftadd 24E4                    _CCPR1 000FBE          __end_of___awmod 399C  
        __end_of___ftdiv 314A          __end_of___ftneg 3B74             i2___lwtoft@c 0009  
        __end_of___lldiv 3834                    ?_sqrt 00C0          __end_of___ftmul 2F6E  
        ___awdiv@divisor 0068          __end_of___llmod 3A04          __end_of___ftsub 3AE8  
        __end_of___fttol 2E78                    i2l111 2D34                    i2l510 357A  
                  i2l511 3570                    i2l513 35AE                    i2l514 3598  
                  i2l610 3000                    i2l516 35D6                    i2l612 3018  
                  i2l517 35CC                    i2l613 3028                    i2l606 2F96  
                  i2l608 2FBE                    i2l609 2FF0                    i2l574 3172  
                  i2l576 319A                    i2l577 31D8                    i2l578 31FE  
        ___awdiv@counter 006A       __end_ofsin@coeff_a 0886       __end_ofsin@coeff_b 0892  
          __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000             ___lltoft@exp 0070  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000  
        __end_of_dpowers 0829                    _floor 3230                    _frexp 3834  
                  _errno 00D9                    _scale 1A24          __end_of_isdigit 3BE0  
           main@numTicks 0199            ___ftpack@sign 0064                    main@i 01D7  
   main@potenciaAparente 01D4                    pclath 000FFA                    sin@x2 00C9  
                  tablat 000FF5                    sqrt@a 00C0                    sqrt@i 00CC  
                  sqrt@q 00CD                    sqrt@x 00D0                    sqrt@z 00C9  
                  status 000FD8                    wtemp6 0056          __end_of_sprintf 1354  
         __CFG_ICPRT$OFF 000000            i2___ftdiv@exp 0028           __CFG_PBADEN$ON 000000  
     __size_ofi2___ftdiv 00E6       __size_ofi2___ftmul 00F4         __end_of_Lcd_Init 27B8  
       __end_of_Lcd_Out2 3698          __initialization 3AE8     main@potenciaReactiva 01BA  
          main@calculoFP 01CD             __end_of_main 1A24            i2___ftmul@exp 0015  
           __end_of_sqrt 2678              ?i2___ftpack 0001                   ??_main 00D7  
          ___fttol@sign1 0093                   ??_sqrt 00C3              ?i2___lwtoft 0009  
          __activetblptr 000002     __size_of__tdiv_to_l_ 0134                   _ADCON1 000FC1  
                 ?_floor 00A3                   _CCP1IF 007CF2                   ?_frexp 0060  
       __end_of___altoft 392A         ___llmod@dividend 006D                   ?_scale 0083  
                 _ADRESH 000FC4                   _ADRESL 000FC3         ___awdiv@dividend 0066  
       __end_of___ftpack 3552         __end_of___lltoft 3A62                   u411_41 2FA6  
                 u404_41 315A                   u406_41 3182                   u409_41 2F7E  
       __end_of___lwtoft 3B9A                ??_Lcd_Cmd 0060           __CFG_XINST$OFF 000000  
       __end_of__powers_ 0850         __end_of_comparar 2D80                   ___ftge 3698  
            ?_Lcd_Chr_CP 0001                   ___wmul 3B26                ??___awdiv 006A  
              ??___ftadd 0093           __CFG_STVREN$ON 000000                ??___awmod 0064  
              ??___ftdiv 00B7                ??___ftneg 0086                ??___lldiv 0068  
              ??___ftmul 007A                ??___llmod 0075                ??___ftsub 00B1  
              ??___fttol 008E                   _fround 1E5C                   clear_0 3AEE  
                 clear_1 3AFA                   clear_2 3B06                   clear_3 3B12  
       ___awdiv@quotient 006C          ___awmod@divisor 0062          ___awmod@counter 0064  
                 floor@i 00A6                   floor@x 00A3    ___ftmul@f3_as_product 007E  
              ??_isdigit 0060        __end_ofi2___ftdiv 3230                   sin@sgn 00CC  
      __end_ofi2___ftmul 3062             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8                   sqrt@og 00C6  
              ??_sprintf 00B8           i2___ftdiv@cntr 0024               __accesstop 0060  
__end_of__initialization 3B18               ___altoft@c 0099           i2___ftdiv@sign 0029  
             ___ftadd@f1 008D               ___ftadd@f2 0090      __size_ofi2___ftpack 00AE  
             ___ftge@ff1 0060               ___ftge@ff2 0063             eval_poly@res 00A2  
          ___rparam_used 000001               ___ftdiv@f1 00B1               ___ftdiv@f2 00B4  
             ___ftdiv@f3 00BB      __size_ofi2___lwtoft 0024               ___ftneg@f1 0083  
         i2___ftpack@arg 0001           i2___ftpack@exp 0004               ___ftmul@f1 0074  
             ___ftmul@f2 0077               ___ftsub@f1 00AB               ___ftsub@f2 00AE  
             ___fttol@f1 008A           __pcstackCOMRAM 0001               ___lltoft@c 0068  
          __end_of_floor 3314            __end_of_frexp 38B0           i2___ftmul@cntr 0019  
          __end_of_scale 1E5C           i2___ftmul@sign 001A         ??_configstandard 0060  
             ___lwtoft@c 0068               __div_to_l_ 2B4E                ?_Lcd_Init 0001  
              ?_Lcd_Out2 0063          __div_to_l_@exp1 006B                  ??_floor 00A6  
        __div_to_l_@cntr 006A                  ??_frexp 0065                  ??_scale 0086  
        __div_to_l_@quot 0066             sprintf@width 00CF      __size_of_Lcd_Chr_CP 0134  
             __pbssBANK0 00D9               __pbssBANK1 01DC               __pbssBANK2 0200  
     __size_of_eval_poly 00DC            __div_to_l_@f1 0060            __div_to_l_@f2 0063  
                ?___ftge 0060                  ?___wmul 006E                ?___altoft 0099  
                ?_fround 0083                ?___ftpack 0060                ?___lltoft 0068  
              ?___lwtoft 0068               ??_Lcd_Init 0063               ??_Lcd_Out2 0066  
              ?_comparar 0001       main@FactorPotencia 01B1          __CFG_VREGEN$OFF 000000  
                _Lcd_Cmd 2A20        __end_of__npowers_ 0877                  __Hparam 0000  
             _scale$1433 0086     main@numCiclosMuestro 01CA                  __Lparam 0000  
        __size_of___ftge 0092                  ___awdiv 372A                  ___ftadd 2336  
                ___awmod 392A                  ___ftdiv 3062                  ___ftneg 3B4E  
                ___lldiv 37B0          __size_of___wmul 0028                  ___ftmul 2E78  
                ___llmod 399C                  ___ftsub 3AA6                  ___fttol 2D80  
           __psmallconst 0800               ??___altoft 009D                  __pcinit 3AE8  
           ??i2___ftpack 0006               ??___ftpack 0065        __end_of_eval_poly 33F0  
        __size_of_fround 0270  i2___ftmul@f3_as_product 0016                  __ramtop 0800  
             ??___lltoft 006C                  __ptext0 1354                  __ptext1 24E4  
                __ptext2 08DA                  __ptext3 1A24                  __ptext4 3BBE  
                __ptext5 1E5C                  __ptext6 392A                  __ptext7 372A  
                __ptext8 27B8                  __ptext9 2B4E                  _buffer1 0200  
                _buffer2 01DC                  _buffer3 00DB                  _buffer4 0041  
           ??i2___lwtoft 000C               ??___lwtoft 006B                _T1CONbits 000FCD  
            ?__div_to_l_ 0060                  _dpowers 0801             __size_of_cos 00B2  
                _isdigit 3BBE             __size_of_sin 026A         ___awmod@dividend 0060  
                _sprintf 08DA                  _voltaje 003C           __pintcode_body 2C78  
             ??_comparar 002A     end_of_initialization 3B18            __Lmediumconst 0000  
                int_func 2C78       __end_ofi2___ftpack 3600          ___lldiv@divisor 0064  
     __end_ofi2___lwtoft 3BBE          ___lldiv@counter 006C             ??_Lcd_Chr_CP 0060  
              Lcd_Out2@x 0063                Lcd_Out2@y 0066                  postdec2 000FDD  
                postinc0 000FEE                  postinc2 000FDE           __tdiv_to_l_@f1 0060  
         __tdiv_to_l_@f2 0063            ??__tdiv_to_l_ 0066                _PORTBbits 000F81  
              _PORTDbits 000F83               main@FPprom 0100                _TRISAbits 000F92  
              _TRISBbits 000F93                _TRISDbits 000F95                i2___ftdiv 314A  
              i2___ftmul 2F6E       __end_of_Lcd_Chr_CP 2A20              _CCP1CONbits 000FBD  
            ___ftdiv@exp 00BE          i2___ftpack@sign 0005      __size_of__div_to_l_ 012A  
             main@sumIns 01C1              ___ftmul@exp 007D           __end_of___ftge 372A  
         __end_of___wmul 3B4E         main@fppromtotal2 01CE           __end_of_fround 20CC  
             floor@expon 00A9      start_initialization 3AE8               eval_poly@d 009C  
             eval_poly@n 009E               eval_poly@x 0099      __end_of__tdiv_to_l_ 28EC  
            __end_of_cos 34A2              __end_of_sin 2336               ?i2___ftdiv 001B  
             ?i2___ftmul 000C        __size_of_Lcd_Init 0140        __size_of_Lcd_Out2 0098  
             frexp@value 0060          ___llmod@divisor 0071          ___llmod@counter 0075  
               ??___ftge 0066                 ??___wmul 0072         __CFG_LPT1OSC$OFF 000000  
               ??_fround 0086            sprintf@tmpval 00C3        __size_of___altoft 007A  
             fround@prec 008C        __size_of___ftpack 00B0        __size_of___lltoft 005E  
            __pbssCOMRAM 003C        __size_of___lwtoft 0026            __pcstackBANK0 0060  
          __pcstackBANK1 0100             _isdigit$1019 0061                 ?_Lcd_Cmd 0001  
            sprintf@flag 00CD        __size_of_comparar 2D78              sprintf@fval 00D1  
             sin@coeff_a 0877               sin@coeff_b 0886              sprintf@prec 00D4  
              _main$1430 01C7                __pintcode 0008                 ?___awdiv 0066  
               ?___ftadd 008D                 ?___awmod 0060                 ?___ftdiv 00B1  
               ?___ftneg 0083                 ?___lldiv 0060                 ?___ftmul 0074  
               ?___llmod 006D                 ?___ftsub 00AB                __npowers_ 0850  
               ?___fttol 008A              __tdiv_to_l_ 27B8             ??__div_to_l_ 0066  
            __smallconst 0800                 ?_isdigit 0001                _eval_poly 3314  
  main@factorPotenciaNum 01B4  __size_of_configstandard 0044                 ?_sprintf 00B1  
         __size_of_floor 00E4              ??i2___ftdiv 0021           __size_of_frexp 007C  
            ??i2___ftmul 0012           __size_of_scale 0438           ___wmul@product 0072  
               i2u332_40 3562                 i2u336_40 35E0                 _PIR1bits 000F9E  
     __end_of__div_to_l_ 2C78         __CFG_WDTPS$32768 000000         main@PotenciaReal 01D9  
           Lcd_Init@data 0064               _ADCON0bits 000FC2               _ADCON2bits 000FC0  
      ___wmul@multiplier 006E                main@delay 01BD               ?_eval_poly 0099  
           Lcd_Out2@data 0067                 _Lcd_Init 2678                 _Lcd_Out2 3600  
        main@fppromtotal 01C4         __size_of_Lcd_Cmd 012E                frexp@eptr 0063  
               __Hrparam 0000                 __Lrparam 0000         __size_of___awdiv 0086  
       __size_of___ftadd 01AE         __size_of___awmod 0072         __size_of___ftdiv 00E8  
       __size_of___ftneg 0026         __size_of___lldiv 0084                 ___altoft 38B0  
       __size_of___ftmul 00F6                 _cos$1435 00D0         __size_of___llmod 0068  
       __size_of___ftsub 0042         __size_of___fttol 00F8                 ___ftpack 34A2  
            _fround$1431 0089              _fround$1432 0086                 ___lltoft 3A04  
               ___lwtoft 3B74               sprintf@exp 00CB               sprintf@val 00C7  
       __size_of_isdigit 0022           Lcd_Chr_CP@data 0062                 __ptext10 3A04  
               __ptext11 399C                 __ptext20 3314                 __ptext12 37B0  
               __ptext21 3B26                 __ptext13 33F0                 __ptext30 3600  
               __ptext22 2E78                 __ptext14 20CC                 __ptext31 28EC  
               __ptext23 3AA6                 __ptext15 3230                 __ptext32 2678  
               __ptext24 2336                 __ptext16 3834                 __ptext33 2A20  
               __ptext25 3B4E                 __ptext17 2D80                 __ptext26 3062  
               __ptext18 3698                 __ptext35 3B9A                 __ptext27 3A62  
               __ptext19 38B0                 __ptext36 2F6E                 __ptext28 3B74  
               __ptext37 314A                 __ptext29 34A2                 __ptext38 3552  
               _sin$1436 00C6                 __powers_ 0829                 _comparar 0008  
       __size_of_sprintf 0A7A              Lcd_Cmd@data 0062            __size_of_main 06D0  
          __size_of_sqrt 0194                 int$flags 0055                 main@Amps 01D1  
               main@Irms 01AE                 main@loop 01CC                 main@temp 01AB  
  __CFG_CPUDIV$OSC1_PLL2 000000               _INTCONbits 000FF2              ??_eval_poly 00A0  
         _configstandard 3A62                 isdigit@c 0062                 scale@scl 0089  
               intlevel2 0000                sprintf@ap 00C1         __tdiv_to_l_@exp1 006E  
              sprintf@sp 00B1         __tdiv_to_l_@cntr 006D         __tdiv_to_l_@quot 0069  
       ___lldiv@dividend 0060             ?__tdiv_to_l_ 0060                 sprintf@c 00D6  
               sprintf@f 00B3   __end_of_configstandard 3AA6         ___lldiv@quotient 0068  
     __CFG_FOSC$HSPLL_HS 000000  
